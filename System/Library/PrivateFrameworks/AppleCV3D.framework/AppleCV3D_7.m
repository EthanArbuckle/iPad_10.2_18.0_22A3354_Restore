void sub_20EAF02DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE38);
  _Unwind_Resume(a1);
}

void sub_20EAF02F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE30);
  _Unwind_Resume(a1);
}

void sub_20EAF030C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADC8);
  _Unwind_Resume(a1);
}

void sub_20EAF0324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE20);
  _Unwind_Resume(a1);
}

void sub_20EAF033C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADD0);
  _Unwind_Resume(a1);
}

void sub_20EAF0354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADD8);
  _Unwind_Resume(a1);
}

void sub_20EAF036C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADE0);
  _Unwind_Resume(a1);
}

void sub_20EAF0384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE18);
  _Unwind_Resume(a1);
}

void sub_20EAF039C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADF0);
  _Unwind_Resume(a1);
}

void sub_20EAF03B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADE8);
  _Unwind_Resume(a1);
}

void sub_20EAF03CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE10);
  _Unwind_Resume(a1);
}

void sub_20EAF03E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE08);
  _Unwind_Resume(a1);
}

void sub_20EAF03FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE00);
  _Unwind_Resume(a1);
}

void sub_20EAF0414(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADF8);
  _Unwind_Resume(a1);
}

void sub_20EAF042C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADC0);
  _Unwind_Resume(a1);
}

void sub_20EAF0444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,void *a63)
{
  char a68;
  char a69;
  void *__p;
  char a72;
  void *a73;
  char a74;
  void *v74;

  if (a74 < 0)
  {
    operator delete(a73);
    if (a72 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (!a69)
        goto LABEL_9;
LABEL_7:
      if (a68 < 0)
        operator delete(a63);
LABEL_9:
      if (a62 && a61 < 0)
        operator delete(a56);
      if (a55 < 0)
        operator delete(a50);
      if (!v74)
        _Unwind_Resume(a1);
      free(v74);
      _Unwind_Resume(a1);
    }
  }
  else if (a72 < 0)
  {
    goto LABEL_3;
  }
  if (!a69)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20EAF08BC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t result;
  char v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = (float64x2_t)COERCE_UNSIGNED_INT64(-1.0);
  *(_QWORD *)(a2 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  if (a4 == -1.0)
  {
    if (!*(_QWORD *)(a1 + 2744) || !*(_QWORD *)(a1 + 2792))
      return 1;
    v13 = *(_QWORD *)(a1 + 2752);
    v14 = 32 * *(_QWORD *)(a1 + 2776);
    a4 = *(double *)(*(_QWORD *)(a1 + 2704) + 32 * *(_QWORD *)(a1 + 2728));
    v12.f64[0] = *(float64_t *)(v13 + v14);
    if (a4 < v12.f64[0])
      a4 = *(double *)(v13 + v14);
  }
  else if (!*(_QWORD *)(a1 + 2744) || !*(_QWORD *)(a1 + 2792))
  {
    return 1;
  }
  v15 = *(double *)a1;
  *(double *)&v29 = a4;
  *(_QWORD *)&v31 = a1;
  *((_QWORD *)&v31 + 1) = &v29;
  if (a4 <= a5)
  {
    v17 = 0;
    while (sub_20EAF3F74((double **)&v31, a4, v12, a6, a7, a8))
    {
      v17 |= *(double *)&v29 == a5;
      a4 = v15 + *(double *)&v29;
      *(double *)&v29 = a4;
      if (a4 > a5)
      {
        if ((v17 & 1) == 0)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
    return 1;
  }
LABEL_10:
  *(double *)&v29 = a5;
  if ((sub_20EAF3F74((double **)&v31, a4, v12, a6, a7, a8) & 1) == 0)
    return 1;
LABEL_16:
  v18 = *(double *)(a1 + 2000);
  v19 = *(_OWORD *)(a1 + 2120);
  v20 = *(_OWORD *)(a1 + 2152);
  v39 = *(_OWORD *)(a1 + 2136);
  v40 = v20;
  v41 = *(_QWORD *)(a1 + 2168);
  v21 = *(_OWORD *)(a1 + 2056);
  v22 = *(_OWORD *)(a1 + 2088);
  v35 = *(_OWORD *)(a1 + 2072);
  v36 = v22;
  v37 = *(_OWORD *)(a1 + 2104);
  v38 = v19;
  v23 = *(_OWORD *)(a1 + 2024);
  v31 = *(_OWORD *)(a1 + 2008);
  v32 = v23;
  v33 = *(_OWORD *)(a1 + 2040);
  v34 = v21;
  v29 = *(_OWORD *)(a1 + 1848);
  v30 = *(_QWORD *)(a1 + 1864);
  if (*(_DWORD *)(a1 + 576) == 1)
    return 2;
  if (v18 != a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 831, (uint64_t)"ExactlyEqual(state.first, new_3dof_state_timestamp)", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = 0;
  *(_QWORD *)(a2 + 160) = v41;
  v24 = v36;
  *(_OWORD *)(a2 + 64) = v35;
  *(_OWORD *)(a2 + 80) = v24;
  v25 = v40;
  *(_OWORD *)(a2 + 128) = v39;
  *(_OWORD *)(a2 + 144) = v25;
  v26 = v38;
  *(_OWORD *)(a2 + 96) = v37;
  *(_OWORD *)(a2 + 112) = v26;
  v27 = v32;
  *(_OWORD *)a2 = v31;
  *(_OWORD *)(a2 + 16) = v27;
  v28 = v34;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v28;
  *(_OWORD *)a3 = v29;
  *(_QWORD *)(a3 + 16) = v30;
  return result;
}

std::chrono::steady_clock::time_point sub_20EAF0B20(uint64_t *a1)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v4;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __uint64_t v19[2];
  int v20;
  _QWORD v21[3];
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5AE28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE28))
  {
    v18 = operator new(0x28uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_24C9C4340;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 32) = 0;
    qword_254A5B098 = (uint64_t)(v18 + 3);
    qword_254A5B0A0 = (uint64_t)v18;
    qword_254A5B0A8 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B098, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE28);
  }
  v3 = (_QWORD *)qword_254A5B098;
  v4 = *(unsigned __int8 *)(qword_254A5B098 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v4)
  {
    if (result.__d_.__rep_ - *v3 < 1000000000)
      return result;
    v6 = (std::chrono::steady_clock::time_point *)qword_254A5B098;
  }
  else
  {
    v6 = (std::chrono::steady_clock::time_point *)qword_254A5B098;
    if (!*(_BYTE *)(qword_254A5B098 + 8))
      *(_BYTE *)(qword_254A5B098 + 8) = 1;
  }
  v6->__d_.__rep_ = result.__d_.__rep_;
  v7 = sub_210219C18();
  v8 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v10 = *a1;
    v20 = 134217984;
    v21[0] = v10;
    v11 = (char *)_os_log_send_and_compose_impl();
    v12 = strlen(v11);
    v19[0] = 0;
    pthread_threadid_np(0, v19);
    v13 = v19[0];
    timespec_get((timespec *)v19, 1);
    sub_210219E20(&v20, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "ThreeDOFTracker: Output 6DOF pose becasuse delaying entering 3DOF for %lu non-nominal frames", 0x5CuLL, v11, v12, v13, v19);
    std::mutex::lock(&stru_254A5A410);
    v14 = qword_254A5A458;
    for (i = unk_254A5A460; v14 != i; v14 += 40)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v20);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v32 < 0)
    {
      operator delete(__p);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v28)
        {
LABEL_20:
          if (v25 && v24 < 0)
            operator delete(v23);
          if (v22 < 0)
            operator delete(*(void **)((char *)v21 + 4));
          if (v11)
            free(v11);
          goto LABEL_27;
        }
LABEL_18:
        if (v27 < 0)
          operator delete(v26);
        goto LABEL_20;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v29);
    if (!v28)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v7);
  if (LODWORD(result.__d_.__rep_))
  {
    v17 = *a1;
    v20 = 134217984;
    v21[0] = v17;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF0EB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE28);
  _Unwind_Resume(a1);
}

void sub_20EAF0ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF0F84()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE40))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B0E0 = (uint64_t)(v14 + 3);
    qword_254A5B0E8 = (uint64_t)v14;
    qword_254A5B0F0 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B0E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE40);
  }
  v1 = (_QWORD *)qword_254A5B0E0;
  v2 = *(unsigned __int8 *)(qword_254A5B0E0 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B0E0;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B0E0;
    if (!*(_BYTE *)(qword_254A5B0E0 + 8))
      *(_BYTE *)(qword_254A5B0E0 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 3DOF pose because 6DOF tracking is non-nominal, in low light, not in moving platform and not paused", 0x7BuLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF12C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE40);
  _Unwind_Resume(a1);
}

void sub_20EAF12E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF1394()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE48))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B0F8 = (uint64_t)(v14 + 3);
    qword_254A5B100 = (uint64_t)v14;
    qword_254A5B108 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B0F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE48);
  }
  v1 = (_QWORD *)qword_254A5B0F8;
  v2 = *(unsigned __int8 *)(qword_254A5B0F8 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B0F8;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B0F8;
    if (!*(_BYTE *)(qword_254A5B0F8 + 8))
      *(_BYTE *)(qword_254A5B0F8 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 6DOF pose because 6DOF tracking is nominal", 0x42uLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF16D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE48);
  _Unwind_Resume(a1);
}

void sub_20EAF16F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF17A4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE50))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B110 = (uint64_t)(v14 + 3);
    qword_254A5B118 = (uint64_t)v14;
    qword_254A5B120 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B110, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE50);
  }
  v1 = (_QWORD *)qword_254A5B110;
  v2 = *(unsigned __int8 *)(qword_254A5B110 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B110;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B110;
    if (!*(_BYTE *)(qword_254A5B110 + 8))
      *(_BYTE *)(qword_254A5B110 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 6DOF pose because the platform is moving", 0x40uLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF1AE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE50);
  _Unwind_Resume(a1);
}

void sub_20EAF1B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF1BB4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE58))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B128 = (uint64_t)(v14 + 3);
    qword_254A5B130 = (uint64_t)v14;
    qword_254A5B138 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B128, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE58);
  }
  v1 = (_QWORD *)qword_254A5B128;
  v2 = *(unsigned __int8 *)(qword_254A5B128 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B128;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B128;
    if (!*(_BYTE *)(qword_254A5B128 + 8))
      *(_BYTE *)(qword_254A5B128 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 6DOF pose because SLAM is paused", 0x38uLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF1EF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE58);
  _Unwind_Resume(a1);
}

void sub_20EAF1F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF1FC4(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __uint64_t v23[2];
  int v24;
  _BYTE v25[18];
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A5AE60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE60))
  {
    v22 = operator new(0x28uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C9C4340;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 32) = 0;
    qword_254A5B140 = (uint64_t)(v22 + 3);
    qword_254A5B148 = (uint64_t)v22;
    qword_254A5B150 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B140, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE60);
  }
  v5 = (_QWORD *)qword_254A5B140;
  v6 = *(unsigned __int8 *)(qword_254A5B140 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v6)
  {
    if (result.__d_.__rep_ - *v5 < 1000000000)
      return result;
    v8 = (std::chrono::steady_clock::time_point *)qword_254A5B140;
  }
  else
  {
    v8 = (std::chrono::steady_clock::time_point *)qword_254A5B140;
    if (!*(_BYTE *)(qword_254A5B140 + 8))
      *(_BYTE *)(qword_254A5B140 + 8) = 1;
  }
  v8->__d_.__rep_ = result.__d_.__rep_;
  v9 = sub_210219C18();
  v10 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v12 = *a1;
    v13 = *a2;
    v24 = 134218240;
    *(_QWORD *)v25 = v12;
    *(_WORD *)&v25[8] = 2048;
    *(_QWORD *)&v25[10] = v13;
    v14 = (char *)_os_log_send_and_compose_impl();
    v15 = strlen(v14);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v16 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(&v24, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "ThreeDOFTracker: Output 6DOF pose because lux value %lf > %lu", 0x3DuLL, v14, v15, v16, v23);
    std::mutex::lock(&stru_254A5A410);
    v17 = qword_254A5A458;
    for (i = unk_254A5A460; v17 != i; v17 += 40)
    {
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v19 + 48))(v19, &v24);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v36 < 0)
    {
      operator delete(__p);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v32)
        {
LABEL_20:
          if (v29 && v28 < 0)
            operator delete(v27);
          if (v26 < 0)
            operator delete(*(void **)&v25[4]);
          if (v14)
            free(v14);
          goto LABEL_27;
        }
LABEL_18:
        if (v31 < 0)
          operator delete(v30);
        goto LABEL_20;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v33);
    if (!v32)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v9);
  if (LODWORD(result.__d_.__rep_))
  {
    v20 = *a1;
    v21 = *a2;
    v24 = 134218240;
    *(_QWORD *)v25 = v20;
    *(_WORD *)&v25[8] = 2048;
    *(_QWORD *)&v25[10] = v21;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF2380(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE60);
  _Unwind_Resume(a1);
}

void sub_20EAF2398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF244C()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE68))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B158 = (uint64_t)(v14 + 3);
    qword_254A5B160 = (uint64_t)v14;
    qword_254A5B168 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B158, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE68);
  }
  v1 = (_QWORD *)qword_254A5B158;
  v2 = *(unsigned __int8 *)(qword_254A5B158 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B158;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B158;
    if (!*(_BYTE *)(qword_254A5B158 + 8))
      *(_BYTE *)(qword_254A5B158 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 6DOF pose because 6DOF tracking is back to nominal and in hight light", 0x5DuLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF2790(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE68);
  _Unwind_Resume(a1);
}

void sub_20EAF27A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF285C(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __uint64_t v23[2];
  int v24;
  _BYTE v25[18];
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A5AE70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE70))
  {
    v22 = operator new(0x28uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C9C4340;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 32) = 0;
    qword_254A5B170 = (uint64_t)(v22 + 3);
    qword_254A5B178 = (uint64_t)v22;
    qword_254A5B180 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B170, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE70);
  }
  v5 = (_QWORD *)qword_254A5B170;
  v6 = *(unsigned __int8 *)(qword_254A5B170 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v6)
  {
    if (result.__d_.__rep_ - *v5 < 1000000000)
      return result;
    v8 = (std::chrono::steady_clock::time_point *)qword_254A5B170;
  }
  else
  {
    v8 = (std::chrono::steady_clock::time_point *)qword_254A5B170;
    if (!*(_BYTE *)(qword_254A5B170 + 8))
      *(_BYTE *)(qword_254A5B170 + 8) = 1;
  }
  v8->__d_.__rep_ = result.__d_.__rep_;
  v9 = sub_210219C18();
  v10 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v12 = *a1;
    v13 = *a2;
    v24 = 134218240;
    *(_QWORD *)v25 = v12;
    *(_WORD *)&v25[8] = 2048;
    *(_QWORD *)&v25[10] = v13;
    v14 = (char *)_os_log_send_and_compose_impl();
    v15 = strlen(v14);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v16 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(&v24, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "ThreeDOFTracker: Output 3DOF pose because lux value %lf < %lu", 0x3DuLL, v14, v15, v16, v23);
    std::mutex::lock(&stru_254A5A410);
    v17 = qword_254A5A458;
    for (i = unk_254A5A460; v17 != i; v17 += 40)
    {
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v19 + 48))(v19, &v24);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v36 < 0)
    {
      operator delete(__p);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v32)
        {
LABEL_20:
          if (v29 && v28 < 0)
            operator delete(v27);
          if (v26 < 0)
            operator delete(*(void **)&v25[4]);
          if (v14)
            free(v14);
          goto LABEL_27;
        }
LABEL_18:
        if (v31 < 0)
          operator delete(v30);
        goto LABEL_20;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v33);
    if (!v32)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v9);
  if (LODWORD(result.__d_.__rep_))
  {
    v20 = *a1;
    v21 = *a2;
    v24 = 134218240;
    *(_QWORD *)v25 = v20;
    *(_WORD *)&v25[8] = 2048;
    *(_QWORD *)&v25[10] = v21;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF2C18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE70);
  _Unwind_Resume(a1);
}

void sub_20EAF2C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF2CE4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE78))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B188 = (uint64_t)(v14 + 3);
    qword_254A5B190 = (uint64_t)v14;
    qword_254A5B198 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B188, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE78);
  }
  v1 = (_QWORD *)qword_254A5B188;
  v2 = *(unsigned __int8 *)(qword_254A5B188 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B188;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B188;
    if (!*(_BYTE *)(qword_254A5B188 + 8))
      *(_BYTE *)(qword_254A5B188 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 3DOF pose because SLAM is still reinitializing", 0x46uLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF3028(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE78);
  _Unwind_Resume(a1);
}

void sub_20EAF3040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF30F4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE80))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B1A0 = (uint64_t)(v14 + 3);
    qword_254A5B1A8 = (uint64_t)v14;
    qword_254A5B1B0 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B1A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE80);
  }
  v1 = (_QWORD *)qword_254A5B1A0;
  v2 = *(unsigned __int8 *)(qword_254A5B1A0 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B1A0;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B1A0;
    if (!*(_BYTE *)(qword_254A5B1A0 + 8))
      *(_BYTE *)(qword_254A5B1A0 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 6DOF pose because has passed the waiting time for SLAM reinitialization", 0x5FuLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF3438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE80);
  _Unwind_Resume(a1);
}

void sub_20EAF3450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF3504()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  void *v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  __uint64_t v27[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254A5AE88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE88))
  {
    v14 = operator new(0x28uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_24C9C4340;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 32) = 0;
    qword_254A5B1B8 = (uint64_t)(v14 + 3);
    qword_254A5B1C0 = (uint64_t)v14;
    qword_254A5B1C8 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B1B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE88);
  }
  v1 = (_QWORD *)qword_254A5B1B8;
  v2 = *(unsigned __int8 *)(qword_254A5B1B8 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (result.__d_.__rep_ - *v1 < 1000000000)
      return result;
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B1B8;
  }
  else
  {
    v4 = (std::chrono::steady_clock::time_point *)qword_254A5B1B8;
    if (!*(_BYTE *)(qword_254A5B1B8 + 8))
      *(_BYTE *)(qword_254A5B1B8 + 8) = 1;
  }
  v4->__d_.__rep_ = result.__d_.__rep_;
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v15[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v10 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(v15, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "ThreeDOFTracker: Output 3DOF pose because 6DOF tracking is non-nominal and SLAM hasn't been resumed", 0x63uLL, v8, v9, v10, v27);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v15);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v22)
        {
LABEL_20:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15[1]);
          if (v8)
            free(v8);
          goto LABEL_27;
        }
LABEL_18:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_20;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v5);
  if (LODWORD(result.__d_.__rep_))
  {
    LOWORD(v15[0]) = 0;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF3848(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE88);
  _Unwind_Resume(a1);
}

void sub_20EAF3860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (!v45)
        _Unwind_Resume(exception_object);
      free(v45);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20EAF3914(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __uint64_t v20[2];
  int v21;
  _BYTE v22[18];
  char v23;
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  void *__p;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v10 = *a3;
    v11 = *a4;
    v21 = 134218240;
    *(_QWORD *)v22 = v10;
    *(_WORD *)&v22[8] = 2048;
    *(_QWORD *)&v22[10] = v11;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v20[0] = 0;
    pthread_threadid_np(0, v20);
    v14 = v20[0];
    timespec_get((timespec *)v20, 1);
    sub_210219E20(&v21, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "ThreeDOFTracker: Resume SLAM because lux value %lf >= %lu", 0x39uLL, v12, v13, v14, v20);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (i = unk_254A5A460; v15 != i; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 48))(v17, &v21);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v33 < 0)
    {
      operator delete(__p);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v29)
        {
LABEL_14:
          if (v26 && v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(*(void **)&v22[4]);
          if (v12)
            free(v12);
          goto LABEL_21;
        }
LABEL_12:
        if (v28 < 0)
          operator delete(v27);
        goto LABEL_14;
      }
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v30);
    if (!v29)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v18 = *a3;
    v19 = *a4;
    v21 = 134218240;
    *(_QWORD *)v22 = v18;
    *(_WORD *)&v22[8] = 2048;
    *(_QWORD *)&v22[10] = v19;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EAF3C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EAF3C44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __uint64_t v20[2];
  int v21;
  _BYTE v22[18];
  char v23;
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  void *__p;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v10 = *a3;
    v11 = *a4;
    v21 = 134218240;
    *(_QWORD *)v22 = v10;
    *(_WORD *)&v22[8] = 2048;
    *(_QWORD *)&v22[10] = v11;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v20[0] = 0;
    pthread_threadid_np(0, v20);
    v14 = v20[0];
    timespec_get((timespec *)v20, 1);
    sub_210219E20(&v21, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "ThreeDOFTracker: Pause SLAM because lux value %lf < %lu", 0x37uLL, v12, v13, v14, v20);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (i = unk_254A5A460; v15 != i; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 48))(v17, &v21);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v33 < 0)
    {
      operator delete(__p);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v29)
        {
LABEL_14:
          if (v26 && v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(*(void **)&v22[4]);
          if (v12)
            free(v12);
          goto LABEL_21;
        }
LABEL_12:
        if (v28 < 0)
          operator delete(v27);
        goto LABEL_14;
      }
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v30);
    if (!v29)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v18 = *a3;
    v19 = *a4;
    v21 = 134218240;
    *(_QWORD *)v22 = v18;
    *(_WORD *)&v22[8] = 2048;
    *(_QWORD *)&v22[10] = v19;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EAF3F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF3F74(double **a1, double a2, float64x2_t a3, float64x2_t a4, double a5, float64x2_t a6)
{
  double *v7;
  uint64_t result;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  int v22;
  std::chrono::steady_clock::time_point v23;
  std::chrono::steady_clock::time_point *v24;
  uint64_t *v25;
  unsigned __int8 v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  size_t v30;
  __darwin_time_t tv_sec;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  _QWORD *v38;
  double *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  uint64_t v54;
  timespec v55;
  int v56;
  _BYTE v57[12];
  char v58;
  void *v59;
  char v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  void *v65;
  char v66;
  void *__p;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  v50 = 0xBFF0000000000000;
  v51 = 0u;
  memset(v52, 0, sizeof(v52));
  v53 = 0u;
  v54 = 0;
  v47 = 0xBFF0000000000000;
  v48 = 0uLL;
  v44 = 0xBFF0000000000000;
  v45 = 0uLL;
  v46 = 0;
  v41 = 0xBFF0000000000000;
  v42 = 0uLL;
  v43 = 0;
  v7 = *a1;
  result = sub_20F1B2A40((uint64_t *)*a1 + 338, (uint64_t)&v47, *a1[1], a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    result = sub_20F1B2A40((uint64_t *)v7 + 344, (uint64_t)&v44, *a1[1], v9, v10, v11, v12);
    if ((_DWORD)result)
    {
      v42 = 0uLL;
      v43 = 0;
      if (!*((_BYTE *)v7 + 418)
        || (sub_20F1B2A40((uint64_t *)v7 + 350, (uint64_t)&v41, *a1[1], v13, v14, v15, v16) & 1) != 0)
      {
LABEL_33:
        v51 = v48;
        *(_QWORD *)&v52[0] = v49;
        *(_OWORD *)((char *)v52 + 8) = v45;
        v53 = v42;
        *((_QWORD *)&v52[1] + 1) = v46;
        v54 = v43;
        v36 = *a1[1];
        v50 = *(_QWORD *)&v36;
        if (*((_QWORD *)v7 + 159))
        {
          v37 = *((_QWORD *)v7 + 158);
          if (v37)
          {
            v13.f64[0] = *(float64_t *)(*((_QWORD *)v7 + 154) + 80 * v37 - 80);
            if (v36 > v13.f64[0])
              goto LABEL_36;
          }
          else
          {
            v13.f64[0] = *(float64_t *)(*((_QWORD *)v7 + 154)
                                      + 16 * ((uint64_t)(*((_QWORD *)v7 + 155) - *((_QWORD *)v7 + 154)) >> 4)
                                      - 80);
            if (v36 > v13.f64[0])
              goto LABEL_36;
          }
          return 0;
        }
LABEL_36:
        sub_20F1E8954((uint64_t)(v7 + 64), (uint64_t)&v50, v36, v13.f64[0], v14.f64[0], v15, v16, v17, v18);
        return 1;
      }
      v42 = 0uLL;
      v43 = 0;
      v19 = a1[1];
      v20 = atomic_load((unsigned __int8 *)&qword_254A5AE90);
      if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE90))
      {
        v38 = operator new(0x28uLL);
        v38[1] = 0;
        v38[2] = 0;
        *v38 = &off_24C9C4340;
        *((_BYTE *)v38 + 24) = 0;
        *((_BYTE *)v38 + 32) = 0;
        qword_254A5B1D0 = (uint64_t)(v38 + 3);
        qword_254A5B1D8 = (uint64_t)v38;
        qword_254A5B1E0 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B1D0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5AE90);
      }
      v21 = (_QWORD *)qword_254A5B1D0;
      v22 = *(unsigned __int8 *)(qword_254A5B1D0 + 8);
      v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v22)
      {
        if (v23.__d_.__rep_ - *v21 < 1000000000)
          goto LABEL_33;
        v24 = (std::chrono::steady_clock::time_point *)qword_254A5B1D0;
      }
      else
      {
        v24 = (std::chrono::steady_clock::time_point *)qword_254A5B1D0;
        if (!*(_BYTE *)(qword_254A5B1D0 + 8))
          *(_BYTE *)(qword_254A5B1D0 + 8) = 1;
      }
      v24->__d_.__rep_ = v23.__d_.__rep_;
      v25 = sub_210219C18();
      v26 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v27 = atomic_load(&qword_254A5A450);
      v28 = "5program_options14invalid_syntaxE";
      if (!v27)
      {
LABEL_31:
        if (os_signpost_enabled((os_log_t)*v25))
        {
          v35 = *(_QWORD *)v19;
          v56 = *((_QWORD *)v28 + 434);
          *(_QWORD *)v57 = v35;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        goto LABEL_33;
      }
      v39 = v19;
      v29 = *(_QWORD *)v19;
      v56 = 134217984;
      *(_QWORD *)v57 = v29;
      v40 = (char *)_os_log_send_and_compose_impl();
      v30 = strlen(v40);
      v55.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v55);
      tv_sec = v55.tv_sec;
      timespec_get(&v55, 1);
      sub_210219E20(&v56, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v25 + 1), (__int128 *)(v25 + 5), "ThreeDOFTracker: mag interpolation at timestamp=%lf failed.", 0x3BuLL, v40, v30, tv_sec, &v55);
      std::mutex::lock(&stru_254A5A410);
      v32 = qword_254A5A458;
      for (i = unk_254A5A460; v32 != i; v32 += 40)
      {
        v34 = *(_QWORD *)(v32 + 32);
        if (!v34)
          sub_20E86D37C();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v34 + 48))(v34, &v56);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v68 < 0)
      {
        operator delete(__p);
        v19 = v39;
        v28 = "5program_options14invalid_syntaxE";
        if ((v66 & 0x80000000) == 0)
        {
LABEL_18:
          if (!v64)
          {
LABEL_24:
            if (v61 && v60 < 0)
              operator delete(v59);
            if (v58 < 0)
              operator delete(*(void **)&v57[4]);
            if (v40)
              free(v40);
            goto LABEL_31;
          }
LABEL_22:
          if (v63 < 0)
            operator delete(v62);
          goto LABEL_24;
        }
      }
      else
      {
        v19 = v39;
        v28 = "N5boost15program_options14invalid_syntaxE" + 8;
        if ((v66 & 0x80000000) == 0)
          goto LABEL_18;
      }
      operator delete(v65);
      if (!v64)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  return result;
}

void sub_20EAF4494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE90);
  _Unwind_Resume(a1);
}

void sub_20EAF44AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *__p;
  char a71;

  if (a71 < 0)
  {
    operator delete(__p);
    if ((a65 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a59)
        goto LABEL_9;
LABEL_7:
      if (a58 < 0)
        operator delete(a53);
LABEL_9:
      if (a52 && a51 < 0)
        operator delete(a46);
      if (a45 < 0)
        operator delete(a40);
      if (a14)
      {
        free(a14);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if ((a65 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a60);
  if (!a59)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF4568(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  __uint64_t v29[2];
  int v30;
  _BYTE v31[18];
  __int16 v32;
  double v33;
  _BYTE v34[10];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
  v2 = atan2(-*(double *)(a1 + 2896), *(long double *)(a1 + 2920));
  v3 = asin(*(long double *)(a1 + 2872));
  v4 = atan2(-*(double *)(a1 + 2864), *(long double *)(a1 + 2856));
  v5 = atomic_load((unsigned __int8 *)&qword_254A5AE98);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE98))
  {
    v28 = operator new(0x28uLL);
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &off_24C9C4340;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 32) = 0;
    qword_254A5B1E8 = (uint64_t)(v28 + 3);
    qword_254A5B1F0 = (uint64_t)v28;
    qword_254A5B1F8 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B1E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE98);
  }
  v6 = (_QWORD *)qword_254A5B1E8;
  v7 = *(unsigned __int8 *)(qword_254A5B1E8 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v7)
  {
    if (result.__d_.__rep_ - *v6 < 1000000000)
      return result;
    v9 = (std::chrono::steady_clock::time_point *)qword_254A5B1E8;
  }
  else
  {
    v9 = (std::chrono::steady_clock::time_point *)qword_254A5B1E8;
    if (!*(_BYTE *)(qword_254A5B1E8 + 8))
      *(_BYTE *)(qword_254A5B1E8 + 8) = 1;
  }
  v9->__d_.__rep_ = result.__d_.__rep_;
  v10 = sub_210219C18();
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v12 = v3 * 57.2957795;
  if (atomic_load(&qword_254A5A450))
  {
    v14 = *(_QWORD *)(a1 + 3000);
    v15 = *(_QWORD *)(a1 + 3008);
    v16 = *(_QWORD *)(a1 + 3016);
    v17 = *(void **)(a1 + 3048);
    v30 = 134219520;
    *(double *)v31 = v2 * 57.2957795;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = v12;
    v32 = 2048;
    v33 = v4 * 57.2957795;
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = v14;
    v35 = 2048;
    v36 = v15;
    v37 = 2048;
    v38 = v16;
    v39 = 2048;
    v40 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();
    v19 = strlen(v18);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v20 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "ThreeDOFTracker: FORCED INTO 3DOF. LATEST 3DOF STATE (RollPitchYaw/pos) %lf %lf %lf %lf %lf %lf at timestamp:%lf ", 0x71uLL, v18, v19, v20, v29);
    std::mutex::lock(&stru_254A5A410);
    v21 = qword_254A5A458;
    for (i = unk_254A5A460; v21 != i; v21 += 40)
    {
      v23 = *(_QWORD *)(v21 + 32);
      if (!v23)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v23 + 48))(v23, &v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v46 < 0)
    {
      operator delete(__p);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v42)
        {
LABEL_20:
          if (BYTE2(v38) && SBYTE1(v38) < 0)
            operator delete(*(void **)v34);
          if (SHIBYTE(v33) < 0)
            operator delete(*(void **)&v31[4]);
          if (v18)
            free(v18);
          goto LABEL_27;
        }
LABEL_18:
        if (v41 < 0)
          operator delete(v40);
        goto LABEL_20;
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v43);
    if (!v42)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v10);
  if (LODWORD(result.__d_.__rep_))
  {
    v24 = *(_QWORD *)(a1 + 3000);
    v25 = *(_QWORD *)(a1 + 3008);
    v26 = *(_QWORD *)(a1 + 3016);
    v27 = *(void **)(a1 + 3048);
    v30 = 134219520;
    *(double *)v31 = v2 * 57.2957795;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = v12;
    v32 = 2048;
    v33 = v4 * 57.2957795;
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = v24;
    v35 = 2048;
    v36 = v25;
    v37 = 2048;
    v38 = v26;
    v39 = 2048;
    v40 = v27;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF49F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AE98);
  _Unwind_Resume(a1);
}

void sub_20EAF4A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF4ABC(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  __uint64_t v29[2];
  int v30;
  _BYTE v31[18];
  __int16 v32;
  double v33;
  _BYTE v34[10];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 3048);
  v2 = atan2(-*(double *)(a1 + 2896), *(long double *)(a1 + 2920));
  v3 = asin(*(long double *)(a1 + 2872));
  v4 = atan2(-*(double *)(a1 + 2864), *(long double *)(a1 + 2856));
  v5 = atomic_load((unsigned __int8 *)&qword_254A5AEA0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AEA0))
  {
    v28 = operator new(0x28uLL);
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &off_24C9C4340;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 32) = 0;
    qword_254A5B200 = (uint64_t)(v28 + 3);
    qword_254A5B208 = (uint64_t)v28;
    qword_254A5B210 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B200, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AEA0);
  }
  v6 = (_QWORD *)qword_254A5B200;
  v7 = *(unsigned __int8 *)(qword_254A5B200 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v7)
  {
    if (result.__d_.__rep_ - *v6 < 1000000000)
      return result;
    v9 = (std::chrono::steady_clock::time_point *)qword_254A5B200;
  }
  else
  {
    v9 = (std::chrono::steady_clock::time_point *)qword_254A5B200;
    if (!*(_BYTE *)(qword_254A5B200 + 8))
      *(_BYTE *)(qword_254A5B200 + 8) = 1;
  }
  v9->__d_.__rep_ = result.__d_.__rep_;
  v10 = sub_210219C18();
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v12 = v3 * 57.2957795;
  if (atomic_load(&qword_254A5A450))
  {
    v14 = *(_QWORD *)(a1 + 3000);
    v15 = *(_QWORD *)(a1 + 3008);
    v16 = *(_QWORD *)(a1 + 3016);
    v17 = *(void **)(a1 + 3048);
    v30 = 134219520;
    *(double *)v31 = v2 * 57.2957795;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = v12;
    v32 = 2048;
    v33 = v4 * 57.2957795;
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = v14;
    v35 = 2048;
    v36 = v15;
    v37 = 2048;
    v38 = v16;
    v39 = 2048;
    v40 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();
    v19 = strlen(v18);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v20 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "ThreeDOFTracker: FORCED INTO 6DOF. LATEST 3DOF STATE (RollPitchYaw/pos) %lf %lf %lf %lf %lf %lf at timestamp:%lf ", 0x71uLL, v18, v19, v20, v29);
    std::mutex::lock(&stru_254A5A410);
    v21 = qword_254A5A458;
    for (i = unk_254A5A460; v21 != i; v21 += 40)
    {
      v23 = *(_QWORD *)(v21 + 32);
      if (!v23)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v23 + 48))(v23, &v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v46 < 0)
    {
      operator delete(__p);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_14:
        if (!v42)
        {
LABEL_20:
          if (BYTE2(v38) && SBYTE1(v38) < 0)
            operator delete(*(void **)v34);
          if (SHIBYTE(v33) < 0)
            operator delete(*(void **)&v31[4]);
          if (v18)
            free(v18);
          goto LABEL_27;
        }
LABEL_18:
        if (v41 < 0)
          operator delete(v40);
        goto LABEL_20;
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v43);
    if (!v42)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v10);
  if (LODWORD(result.__d_.__rep_))
  {
    v24 = *(_QWORD *)(a1 + 3000);
    v25 = *(_QWORD *)(a1 + 3008);
    v26 = *(_QWORD *)(a1 + 3016);
    v27 = *(void **)(a1 + 3048);
    v30 = 134219520;
    *(double *)v31 = v2 * 57.2957795;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = v12;
    v32 = 2048;
    v33 = v4 * 57.2957795;
    *(_WORD *)v34 = 2048;
    *(_QWORD *)&v34[2] = v24;
    v35 = 2048;
    v36 = v25;
    v37 = 2048;
    v38 = v26;
    v39 = 2048;
    v40 = v27;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EAF4F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AEA0);
  _Unwind_Resume(a1);
}

void sub_20EAF4F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::steady_clock::time_point sub_20EAF500C(uint64_t a1, float64x2_t a2)
{
  float64x2_t v5;
  unsigned __int8 v11;
  _QWORD *v12;
  int v13;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v18;
  std::chrono::steady_clock::time_point *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  __uint64_t v48[2];
  int v49;
  _BYTE v50[18];
  __int16 v51;
  uint64_t v52;
  void *v53[2];
  char v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  void *v59;
  char v60;
  void *__p;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 496))
  {
    a2.f64[0] = *(float64_t *)(a1 + 3144);
    _Q1 = *(float64x2_t *)(a1 + 3128);
    _D4 = *(_QWORD *)(a1 + 2896);
    v5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 2856), _Q1.f64[0]), *(float64x2_t *)(a1 + 2880), _Q1, 1), *(float64x2_t *)(a1 + 2904), a2.f64[0]);
    __asm { FMLA            D2, D4, V1.D[1] }
    a2.f64[0] = _D2 + *(double *)(a1 + 2920) * a2.f64[0];
    *(float64x2_t *)(a1 + 3152) = vaddq_f64(v5, (float64x2_t)0);
    *(_QWORD *)(a1 + 3168) = *(_OWORD *)&vaddq_f64(a2, (float64x2_t)0);
    *(_BYTE *)(a1 + 3192) = 1;
    v11 = atomic_load((unsigned __int8 *)&qword_254A5AEB0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AEB0))
    {
      v46 = operator new(0x28uLL);
      v46[1] = 0;
      v46[2] = 0;
      *v46 = &off_24C9C4340;
      *((_BYTE *)v46 + 24) = 0;
      *((_BYTE *)v46 + 32) = 0;
      qword_254A5B230 = (uint64_t)(v46 + 3);
      qword_254A5B238 = (uint64_t)v46;
      qword_254A5B240 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B230, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5AEB0);
    }
    v12 = (_QWORD *)qword_254A5B230;
    v13 = *(unsigned __int8 *)(qword_254A5B230 + 8);
    result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v13)
    {
      if (result.__d_.__rep_ - *v12 < 1000000000)
        return result;
      v15 = (std::chrono::steady_clock::time_point *)qword_254A5B230;
    }
    else
    {
      v15 = (std::chrono::steady_clock::time_point *)qword_254A5B230;
      if (!*(_BYTE *)(qword_254A5B230 + 8))
        *(_BYTE *)(qword_254A5B230 + 8) = 1;
    }
    v15->__d_.__rep_ = result.__d_.__rep_;
    v20 = sub_210219C18();
    v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_43;
    v23 = *(_QWORD *)(a1 + 3152);
    v24 = *(_QWORD *)(a1 + 3160);
    v25 = *(_QWORD *)(a1 + 3168);
    v26 = *(void **)(a1 + 3048);
    v49 = 134218752;
    *(_QWORD *)v50 = v23;
    *(_WORD *)&v50[8] = 2048;
    *(_QWORD *)&v50[10] = v24;
    v51 = 2048;
    v52 = v25;
    LOWORD(v53[0]) = 2048;
    *(void **)((char *)v53 + 2) = v26;
    v27 = (char *)_os_log_send_and_compose_impl();
    v28 = strlen(v27);
    v48[0] = 0;
    pthread_threadid_np(0, v48);
    v29 = v48[0];
    timespec_get((timespec *)v48, 1);
    sub_210219E20(&v49, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v20 + 1), (__int128 *)(v20 + 5), "ThreeDOFTracker: RESET IMU POSITION AND RECALCULATE 3DOF NECK POSITION %lf %lf %lf at timestamp:%lf ", 0x64uLL, v27, v28, v29, v48);
    std::mutex::lock(&stru_254A5A410);
    v30 = qword_254A5A458;
    for (i = unk_254A5A460; v30 != i; v30 += 40)
    {
      v32 = *(_QWORD *)(v30 + 32);
      if (!v32)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v32 + 48))(v32, &v49);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v62 < 0)
    {
      operator delete(__p);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_19:
        if (!v58)
        {
LABEL_36:
          if (v55 && v54 < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(*(void **)&v50[4]);
          if (v27)
            free(v27);
LABEL_43:
          result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v20);
          if (!LODWORD(result.__d_.__rep_))
            return result;
          v42 = *(_QWORD *)(a1 + 3152);
          v43 = *(_QWORD *)(a1 + 3160);
          v44 = *(_QWORD *)(a1 + 3168);
          v45 = *(void **)(a1 + 3048);
          v49 = 134218752;
          *(_QWORD *)v50 = v42;
          *(_WORD *)&v50[8] = 2048;
          *(_QWORD *)&v50[10] = v43;
          v51 = 2048;
          v52 = v44;
          LOWORD(v53[0]) = 2048;
          *(void **)((char *)v53 + 2) = v45;
          return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_34:
        if (v57 < 0)
          operator delete(v56);
        goto LABEL_36;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v59);
    if (!v58)
      goto LABEL_36;
    goto LABEL_34;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_254A5AEA8);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AEA8))
  {
    v47 = operator new(0x28uLL);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = &off_24C9C4340;
    *((_BYTE *)v47 + 24) = 0;
    *((_BYTE *)v47 + 32) = 0;
    qword_254A5B218 = (uint64_t)(v47 + 3);
    qword_254A5B220 = (uint64_t)v47;
    qword_254A5B228 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B218, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AEA8);
  }
  v17 = (_QWORD *)qword_254A5B218;
  v18 = *(unsigned __int8 *)(qword_254A5B218 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v18)
  {
    if (result.__d_.__rep_ - *v17 < 1000000000)
      return result;
    v19 = (std::chrono::steady_clock::time_point *)qword_254A5B218;
  }
  else
  {
    v19 = (std::chrono::steady_clock::time_point *)qword_254A5B218;
    if (!*(_BYTE *)(qword_254A5B218 + 8))
      *(_BYTE *)(qword_254A5B218 + 8) = 1;
  }
  v19->__d_.__rep_ = result.__d_.__rep_;
  v33 = sub_210219C18();
  v34 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v49) = 0;
    v36 = (char *)_os_log_send_and_compose_impl();
    v37 = strlen(v36);
    v48[0] = 0;
    pthread_threadid_np(0, v48);
    v38 = v48[0];
    timespec_get((timespec *)v48, 1);
    sub_210219E20(&v49, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v33 + 1), (__int128 *)(v33 + 5), "ThreeDOFTracker: CANNOT RESET IMU POSITION BEFORE OUTPUT 3DOF POSE", 0x42uLL, v36, v37, v38, v48);
    std::mutex::lock(&stru_254A5A410);
    v39 = qword_254A5A458;
    for (j = unk_254A5A460; v39 != j; v39 += 40)
    {
      v41 = *(_QWORD *)(v39 + 32);
      if (!v41)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v41 + 48))(v41, &v49);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v62 < 0)
    {
      operator delete(__p);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_30:
        if (!v58)
        {
LABEL_49:
          if (v55 && v54 < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(*(void **)&v50[4]);
          if (v36)
            free(v36);
          goto LABEL_56;
        }
LABEL_47:
        if (v57 < 0)
          operator delete(v56);
        goto LABEL_49;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v59);
    if (!v58)
      goto LABEL_49;
    goto LABEL_47;
  }
LABEL_56:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v33);
  if (!LODWORD(result.__d_.__rep_))
    return result;
  LOWORD(v49) = 0;
  return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
}

void sub_20EAF5764(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AEA8);
  _Unwind_Resume(a1);
}

void sub_20EAF578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (v47)
      {
        free(v47);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20EAF58EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 304);
  if (v3)
  {
    *(_QWORD *)(a1 + 312) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 280);
  if (v4)
  {
    *(_QWORD *)(a1 + 288) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(a1 + 168))
  {
    v6 = *(_QWORD *)(a1 + 120);
    if (v6)
      MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
      MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    v9 = *(_QWORD *)(a1 + 48);
    if (v9)
      MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20EAF59D4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2104) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 128);
    if (v3)
      operator delete(v3);
    v4 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(void **)(v2 + 80);
    if (v5)
    {
      *(_QWORD *)(v2 + 88) = v5;
      operator delete(v5);
    }
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10B2C402491A9D0);
  }
  v6 = *(void **)(a1 + 1464);
  if (v6)
  {
    *(_QWORD *)(a1 + 1472) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 1016);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(void **)(a1 + 768);
  if (v8)
    operator delete(v8);
  v9 = *(void **)(a1 + 720);
  if (v9)
  {
    *(_QWORD *)(a1 + 728) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 568);
  if (v10)
  {
    *(_QWORD *)(a1 + 576) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 431) < 0)
  {
    operator delete(*(void **)(a1 + 408));
    v11 = *(void **)(a1 + 16);
    if (!v11)
      return a1;
    goto LABEL_23;
  }
  v11 = *(void **)(a1 + 16);
  if (v11)
  {
LABEL_23:
    *(_QWORD *)(a1 + 24) = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_20EAF5AE0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EAF5B48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAF5B58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAF5B90()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v2;
  std::chrono::steady_clock::time_point v3;
  std::chrono::steady_clock::time_point *v5;
  char *v6;

  v0 = atomic_load((unsigned __int8 *)&qword_254A502C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A502C0))
  {
    v6 = (char *)operator new(0x28uLL);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = &off_24C9C4340;
    v6[24] = 0;
    v6[32] = 0;
    off_254A502A8 = v6 + 24;
    unk_254A502B0 = v6;
    qword_254A502B8 = 5000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &off_254A502A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502C0);
  }
  v1 = off_254A502A8;
  v2 = *((unsigned __int8 *)off_254A502A8 + 8);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2)
  {
    if (v3.__d_.__rep_ - *v1 >= 5000000000)
    {
      *(std::chrono::steady_clock::time_point *)off_254A502A8 = v3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = (std::chrono::steady_clock::time_point *)off_254A502A8;
    if (!*((_BYTE *)off_254A502A8 + 8))
      *((_BYTE *)off_254A502A8 + 8) = 1;
    v5->__d_.__rep_ = v3.__d_.__rep_;
    return 1;
  }
}

void sub_20EAF5CC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A502C0);
  _Unwind_Resume(a1);
}

void sub_20EAF5CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13[3];
  char v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  __uint64_t v25[2];

  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v13[0]) = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v9 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(v13, a3, "AttitudeFilter", 0xEuLL, (__int128 *)(a2 + 8), (__int128 *)(a2 + 40), "Attitude filter is reset", 0x18uLL, v7, v8, v9, v25);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v24 < 0)
    {
      operator delete(__p);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v20)
        {
LABEL_14:
          if (v17 && v16 < 0)
            operator delete(v15);
          if (v14 < 0)
            operator delete(v13[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v19 < 0)
          operator delete(v18);
        goto LABEL_14;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v21);
    if (!v20)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a2))
  {
    LOWORD(v13[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EAF5F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20EAF5F94(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;

  v4 = a1[1];
  v5 = a1[2];
  if (a2 <= (v5 - v4) >> 5)
  {
    if (a2)
    {
      v11 = &v4[32 * a2];
      do
      {
        *(_QWORD *)v4 = 0xBFF0000000000000;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 0;
        v4 += 32;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = (v4 - *a1) >> 5;
    v7 = v6 + a2;
    if ((v6 + a2) >> 59)
      sub_20E867F44();
    v8 = v5 - *a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        sub_20E877A38();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[32 * v6];
    v13 = &v12[32 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0xBFF0000000000000;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      v14 += 32;
    }
    while (v14 != v13);
    v15 = &v10[32 * v9];
    v17 = *a1;
    v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 4);
        v16 -= 32;
        *((_QWORD *)v12 - 4) = v18;
        v12 -= 32;
        v19 = *(_OWORD *)(v16 + 8);
        *((_QWORD *)v12 + 3) = *((_QWORD *)v16 + 3);
        *(_OWORD *)(v12 + 8) = v19;
      }
      while (v16 != v17);
      v16 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_20EAF60CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char __p[23];
  char v14;

  strcpy(__p, "3DOFTracker parameters");
  v14 = 22;
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (v14 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.imu_3dof_sample_period", v4, "IMU sample period into 3DOF filter");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 416));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.always_track_in_3dof", v5, "Force SLAM to always track in 3DOF");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 417));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.enabled", v6, "Enable/Disable the 3DOF tracker to allow SLAM to transition into 3DOF");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 418));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.use_mag_in_3dof", v7, "Enable/Disable using mag measurements to correct the yaw in 3DOF");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 424));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.lux_threshold_to_enter_3DOF", v8, "Threshold for which when the lux value is below this and SLAM stop tracking it enters 3DOF");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EAA1CB0((unint64_t *)(a1 + 432));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.lux_threshold_to_exit_3DOF", v9, "Threshold for which when the lux value is above this SLAM starts to reinit");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EAF6358((unsigned __int8 *)(a1 + 440));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.imu_filtering_mode", v10, "Config IMU Filtering for gyro and accel streams");
  *(_QWORD *)__p = nullsub_1(a2);
  v11 = sub_20EAA1CB0((unint64_t *)(a1 + 480));
  sub_20E8B2F9C((uint64_t *)__p, "ThreeDOFTrackerConfig.num_frames_non_nominal_before_entering_3dof", v11, "Number of frames SLAM needs to be non-nominal and in low light before we switch to 3DOF");
  sub_20F1F0118(a1 + 8, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20EAF62D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF6358(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C43D8;
  *(_QWORD *)(v2 + 8) = &unk_24C9C4450;
  *(_QWORD *)(v2 + 152) = &unk_24C9C4478;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9C45F0 + 1;
  v10[0] = a1;
  sub_20EAF74FC((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9C45B8;
  *(_BYTE *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EAF767C(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EAF64A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAF64B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAF64B8(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EAF6508(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAF6A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAF6B1C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAF6B3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAF6B5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAF6B64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAF6B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EAF6BC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio20odometry_unsanitized16IMUFilteringModeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio20odometry_unsanitized16IMUFilteringModeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_230;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EAF6CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF6CD0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C43D8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4450;
  *(_QWORD *)(a1 + 152) = &unk_24C9C4478;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAF7098(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAF7098(a1);
}

void sub_20EAF6D38(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C43D8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4450;
  *(_QWORD *)(a1 + 152) = &unk_24C9C4478;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAF7098(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EAF6DB4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EAF7164(a2, a3);
  }
}

void *sub_20EAF6E30()
{
  return &unk_24C9C4598;
}

uint64_t sub_20EAF6E3C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EAF6E44()
{
  return &unk_24C9C4598;
}

uint64_t sub_20EAF6E50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C43D8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C4450;
  *(_QWORD *)(a1 + 144) = &unk_24C9C4478;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAF7098(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAF7098(v2);
}

void sub_20EAF6EC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C43D8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C4450;
  *(_QWORD *)(a1 + 144) = &unk_24C9C4478;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAF7098(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAF6F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C43D8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C4450;
  *(_QWORD *)a1 = &unk_24C9C4478;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAF7098(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAF7098(v2);
}

void sub_20EAF6FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C43D8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C4450;
  *(_QWORD *)a1 = &unk_24C9C4478;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAF7098(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAF7038(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAF7044(uint64_t a1)
{
  sub_20EAF7098(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAF7068(uint64_t a1)
{
  return sub_20EAF7098(a1 - 8);
}

void sub_20EAF7070(uint64_t a1)
{
  sub_20EAF7098(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAF7098(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C4510;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4580;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAF7164(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  __int128 *p_dst;
  char v8;
  uint64_t v9;
  uint64_t v10;
  std::bad_cast v11[16];
  __int128 __dst;
  uint64_t v13;
  char v14;
  uint64_t v15[2];

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v13 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v14 = 0;
  v6 = HIBYTE(v13);
  p_dst = &__dst;
  if (v13 < 0)
  {
    v6 = *((_QWORD *)&__dst + 1);
    p_dst = (__int128 *)__dst;
  }
  v15[0] = (uint64_t)p_dst;
  v15[1] = (uint64_t)p_dst + v6;
  if (!sub_20EAF7314(v15, &v14))
  {
    std::bad_cast::bad_cast(v11);
    v11[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v11[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v11[2].__vftable = (std::bad_cast_vtbl *)&unk_24C9C4598;
    sub_20EA9F254((uint64_t)v11);
  }
  v8 = v14;
  v9 = operator new();
  *(_QWORD *)v9 = &off_24C9C45B8;
  *(_BYTE *)(v9 + 8) = v8;
  v10 = *a1;
  *a1 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__dst);
}

void sub_20EAF7298()
{
  __break(1u);
}

void sub_20EAF72E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EAF72F8);
}

BOOL sub_20EAF7314(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 6;
  v8 = sub_20F40167C(v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_20EAF7438(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20EAF7494()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20EAF74A8()
{
  return &unk_24C9C4598;
}

uint64_t sub_20EAF74B4(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9C45B8;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t *sub_20EAF74FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAF759C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAF75AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF75C0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C4600;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio20odometry_unsanitized16IMUF"
                                      "ilteringModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio20odometry_unsanitized16IMUFilteringModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20EAF766C(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EAF767C(unsigned __int8 *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20EAF774C((uint64_t)v5, (uint64_t)v2, a1);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C43B0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C4380[v3])(v5, v2);
  return result;
}

void sub_20EAF7714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C4380[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20EAF774C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  size_t v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst[2];
  unint64_t v24;
  _QWORD v25[5];
  _QWORD *v26;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v25[0] = v5;
  v6 = *a3 - 1;
  if (v6 > 0x1B)
  {
    v9 = "NoFilteringNoResampling";
    v8 = 23;
  }
  else
  {
    v7 = (char)v6;
    v8 = *(_QWORD *)&asc_210314CB0[v7 * 8];
    v9 = off_24C9C4610[v7];
  }
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)v9, v8);
  v10 = *(_DWORD *)(v5 + 120);
  if ((v10 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(v5 + 112);
    v14 = *(_QWORD *)(v5 + 72);
    if (v13 < v14)
    {
      *(_QWORD *)(v5 + 112) = v14;
      v13 = v14;
    }
    v15 = *(const void **)(v5 + 64);
    v11 = v13 - (_QWORD)v15;
    if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v10 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v24) = 0;
      v12 = __dst;
      goto LABEL_17;
    }
    v15 = *(const void **)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 56) - (_QWORD)v15;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20E860B7C();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = (void **)operator new(v16 + 1);
    __dst[1] = (void *)v11;
    v24 = v17 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_16;
  }
  HIBYTE(v24) = v11;
  v12 = __dst;
  if (v11)
LABEL_16:
    memmove(v12, v15, v11);
LABEL_17:
  *((_BYTE *)v12 + v11) = 0;
  v18 = v25[0];
  if (v25[0])
  {
    v19 = MEMORY[0x24BEDB7F0];
    v20 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v25[0] = *MEMORY[0x24BEDB7F0];
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 64);
    *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v18 + 16) = v21;
    if (*(char *)(v18 + 111) < 0)
      operator delete(*(void **)(v18 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v18 + 128);
    MEMORY[0x212BC6398](v18, 0x10B2C40EED050F3);
  }
  v25[0] = a2;
  v25[1] = __dst;
  v25[2] = a2;
  v25[3] = __dst;
  v25[4] = __dst;
  v22 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v22 == -1)
    sub_20E877AB8();
  v26 = v25;
  ((void (*)(_QWORD **, uint64_t))off_24C9C4398[v22])(&v26, a2);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_20EAF79D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EAF79F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EAF7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EAF7A28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  sub_20E86A980(a1, (uint64_t)"DataVerificationConfig: ", 24);
  sub_20E86A980(a1, (uint64_t)"minimal IMU interval ", 21);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v2, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"maximal IMU interval ", 21);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v3, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"minimal IMU latency ", 20);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v4, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"maximal IMU latency ", 20);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v5, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"minimal frame interval ", 23);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v6, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"maximal frame interval ", 23);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"minimal frame latency ", 22);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"maximal frame latency ", 22);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v9, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"significant data drop interval ", 31);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v10, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"minimal time between frames ", 28);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v11, (uint64_t)" sec, ", 6);
  sub_20E86A980(a1, (uint64_t)"enable latency verification ", 28);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v12, (uint64_t)",", 1);
  sub_20E86A980(a1, (uint64_t)"enable assert on error ", 23);
  std::ostream::operator<<();
  return a1;
}

uint64_t *sub_20EAF7C44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v18;

  __p = operator new(0x20uLL);
  v18 = xmmword_2102DCC80;
  strcpy((char *)__p, "DataVerification parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "min_imu_interval_sec", v4, "Min IMU interval (in sec) between adjacent IMU samples");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "max_imu_interval_sec", v5, "Max IMU interval (in sec) between adjacent IMU samples");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "min_imu_latency_sec", v6, "Min latency (in sec) for IMU sample (the latency is time between the moment when the sample is timestamped and the moment when AppleCV3D receives it to process)");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "max_imu_latency_sec", v7, "Max latency for IMU sample (the latency is time between the moment when the sample is timestamped and the moment when AppleCV3D receives it to process)");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "min_frame_interval_sec", v8, "Min frame interval (in sec) between adjacent frames");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "max_frame_interval_sec", v9, "Max frame interval (in sec) between adjacent frames");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "min_frame_latency_sec", v10, "Min latency (in sec) for a frame sample (the latency is time between the moment when the sample is timestamped and the moment when AppleCV3D receives it to process)");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "max_frame_latency_sec", v11, "Max latency (in sec) for a frame sample (the latency is time between the moment when the sample is timestamped and the moment when AppleCV3D receives it to process)");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "significant_data_drop_interval_sec", v12, "Max time (in sec) between sample to trigger reset of data verification instance");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "min_time_between_frames_sec", v13, "The minimum acceptable time between two frames.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "enable_latency_verification", v14, "Toggle latency verification for a sample");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 81));
  return sub_20E8B2F9C((uint64_t *)&__p, "enable_assert_on_error", v15, "Toggle asserts when data verification errors are detected");
}

void sub_20EAF7F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF7F90(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v7 = (_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
  {
    v7 = (_QWORD *)(a1 + 24);
    goto LABEL_5;
  }
  if (v8 != a3)
  {
    *(_QWORD *)(a1 + 24) = v8;
LABEL_5:
    *v7 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 24) = a1;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_7:
  v9 = (_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 24);
  if (!v10)
  {
    v9 = (_QWORD *)(a1 + 56);
    goto LABEL_11;
  }
  if (v10 != a4)
  {
    *(_QWORD *)(a1 + 56) = v10;
LABEL_11:
    *v9 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 24))(*v9, a1 + 32);
LABEL_13:
  sub_20EAF8AE0((_QWORD *)(a1 + 64), 5uLL);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = (char *)operator new(0x640uLL);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = v11 + 1600;
  *(_QWORD *)(a1 + 128) = v11 + 1600;
  bzero(v11, 0x640uLL);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 160) = 850045863;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 224) = v13;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (!*(_QWORD *)(a1 + 24)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include_private/VIO/OdometryEngine/PosePredictionNode.hpp", 37, (uint64_t)"prediction_callback_", 20, (uint64_t)"Invalid Prediction Callback", 27, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(a1 + 56)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include_private/VIO/OdometryEngine/PosePredictionNode.hpp", 38, (uint64_t)"relocalization_callback_", 24, (uint64_t)"Invalid Relocatization Callback", 31, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(a1 + 224)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include_private/VIO/OdometryEngine/PosePredictionNode.hpp", 39, (uint64_t)"pose_predictor_", 15, (uint64_t)"Invalid Pose Predictor", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EAF81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  sub_20EAF8C68(&a9);
  sub_20EAF83D4(v11);
  v13 = (_QWORD *)v9[7];
  if (v13 == v10)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
    v10 = (_QWORD *)v9[7];
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v14))(v10);
LABEL_6:
  v15 = (_QWORD *)v9[3];
  if (v15 == v9)
  {
    v16 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v16 = 5;
    v9 = (_QWORD *)v9[3];
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF827C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 56))
    return a1;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void **sub_20EAF835C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EAF83D4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = v3 - 400;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 37);
      if (!v6)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 39);
        if (v9)
        {
LABEL_10:
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_9:
        v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 39);
        if (v9)
          goto LABEL_10;
      }
      v3 -= 400;
      if (v5 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_20EAF84C4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;

  v4 = (std::mutex *)(a1 + 160);
  std::mutex::lock((std::mutex *)(a1 + 160));
  sub_20EAF8D04((uint64_t *)(a1 + 64), (__int128 *)a2);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(std::__shared_weak_count **)(a2 + 88);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(std::__shared_weak_count **)(a2 + 104);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = v12;
  v30 = v13;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v31 = *(_OWORD *)(a2 + 112);
  sub_20EAF8ED8((uint64_t *)(a1 + 112), &v24);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  kdebug_trace();
  sub_20EAF86CC(a1);
  std::mutex::unlock(v4);
}

void sub_20EAF8664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20EAF8694((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20EAF8680(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAF8694(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EAF86CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _OWORD v21[10];
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  if (*(_QWORD *)(a1 + 152))
  {
    v2 = a1 + 256;
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(_QWORD *)(a1 + 112);
    v5 = *(_QWORD *)(a1 + 120);
    do
    {
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0;
      v10 = v4 + 80 * (v3 % (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 4)));
      v11 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t *, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 224)
                                                                                             + 56))(*(_QWORD *)(a1 + 224), &v25, &v24, 0, 0, *(double *)(v10 + 64) + *(double *)(v10 + 72));
      kdebug_trace();
      if (v11)
      {
        if (v11 == 2)
          return;
        v12 = *(_QWORD *)(a1 + 136);
        v13 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
        LOBYTE(v21[0]) = 0;
        v23 = 0;
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 136);
        v13 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
        v21[8] = v33;
        v21[9] = v34;
        v22 = v35;
        v21[4] = v29;
        v21[5] = v30;
        v21[6] = v31;
        v21[7] = v32;
        v21[0] = v25;
        v21[1] = v26;
        v21[2] = v27;
        v21[3] = v28;
        v23 = 1;
      }
      v15 = *(_QWORD *)(a1 + 24);
      if (!v15)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unint64_t, _OWORD *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v13 + 80 * (v12 % (0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 4))), v21, v2);
      v16 = *(_QWORD *)(a1 + 136);
      v17 = *(_QWORD *)(a1 + 112);
      v18 = v17 + 80 * v16;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      v19 = *(std::__shared_weak_count **)(v18 + 40);
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v20 = *(std::__shared_weak_count **)(v18 + 56);
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      v6 = v17 + 80 * v16;
      *(_QWORD *)(v6 + 64) = 0;
      *(_QWORD *)(v6 + 72) = 0;
      v4 = *(_QWORD *)(a1 + 112);
      v5 = *(_QWORD *)(a1 + 120);
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 4);
      v8 = *(_QWORD *)(a1 + 136) + 1;
      if (v8 < v7)
        v7 = 0;
      v3 = v8 - v7;
      *(_QWORD *)(a1 + 136) = v3;
      v9 = *(_QWORD *)(a1 + 152) - 1;
      *(_QWORD *)(a1 + 152) = v9;
    }
    while (v9);
  }
}

void sub_20EAF8900(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __n128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _BYTE v26[1080];

  v4 = (std::mutex *)(a1 + 160);
  std::mutex::lock((std::mutex *)(a1 + 160));
  if (*(_BYTE *)(a1 + 312))
  {
    sub_20E9BC310(a1 + 256, (uint64_t *)a2);
    v5 = *(_QWORD *)(a1 + 224);
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(std::__shared_weak_count **)(a2 + 40);
    v24 = v7;
    v25 = v8;
    if (!v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 264) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 280) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 296) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 312) = 1;
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)a2;
  v18 = *(_QWORD *)(a2 + 32);
  v8 = *(std::__shared_weak_count **)(a2 + 40);
  v24 = v18;
  v25 = v8;
  if (v8)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
LABEL_16:
  sub_20F3E82C0((uint64_t)v26, v6, (uint64_t)&v24);
  v21.n128_f64[0] = (*(double (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v26);
  if (v8)
  {
    v22 = (unint64_t *)&v8->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v21);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  kdebug_trace();
  sub_20EAF86CC(a1);
  std::mutex::unlock(v4);
}

void sub_20EAF8AAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EAF8AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EAF8AE0(_QWORD *a1, unint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xA3D70A3D70A3D8)
      sub_20E867F44();
    v4 = operator new(400 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = 400 * a2;
    v6 = &v4[25 * a2];
    a1[2] = v6;
    do
    {
      v4[23] = 0uLL;
      v4[24] = 0uLL;
      v4[21] = 0uLL;
      v4[22] = 0uLL;
      v4[19] = 0uLL;
      v4[20] = 0uLL;
      v4[17] = 0uLL;
      v4[18] = 0uLL;
      v4[15] = 0uLL;
      v4[16] = 0uLL;
      v4[13] = 0uLL;
      v4[14] = 0uLL;
      v4[11] = 0uLL;
      v4[12] = 0uLL;
      v4[9] = 0uLL;
      v4[10] = 0uLL;
      v4[7] = 0uLL;
      v4[8] = 0uLL;
      v4[5] = 0uLL;
      v4[6] = 0uLL;
      v4[3] = 0uLL;
      v4[4] = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      *v4 = 0uLL;
      v4 += 25;
      v5 -= 400;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_20EAF8BAC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = v4 - 400;
        v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 37);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 39);
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 400;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_20EAF8C68(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 5);
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          v4 -= 80;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_20EAF8D04(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *result;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v30[288];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  v3 = a1[4];
  v4 = *a1;
  v5 = *a1 + 400 * v3;
  v6 = a2[3];
  v33 = a2[2];
  v34[0] = v6;
  *(_OWORD *)((char *)v34 + 9) = *(__int128 *)((char *)a2 + 57);
  v7 = a2[1];
  v31 = *a2;
  v32 = v7;
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = *((_QWORD *)a2 + 12);
  v12 = *((_QWORD *)a2 + 13);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  memcpy(v30, a2 + 7, sizeof(v30));
  v16 = v34[0];
  *(_OWORD *)(v5 + 32) = v33;
  *(_OWORD *)(v5 + 48) = v16;
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)v34 + 9);
  v17 = v32;
  *(_OWORD *)v5 = v31;
  *(_OWORD *)(v5 + 16) = v17;
  v18 = *(std::__shared_weak_count **)(v5 + 88);
  *(_QWORD *)(v5 + 80) = v8;
  *(_QWORD *)(v5 + 88) = v9;
  if (!v18)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = *(std::__shared_weak_count **)(v5 + 104);
    *(_QWORD *)(v5 + 96) = v13;
    *(_QWORD *)(v5 + 104) = v12;
    if (!v21)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v21 = *(std::__shared_weak_count **)(v5 + 104);
    *(_QWORD *)(v5 + 96) = v13;
    *(_QWORD *)(v5 + 104) = v12;
    if (!v21)
      goto LABEL_17;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_17:
  result = memcpy((void *)(v4 + 400 * v3 + 112), v30, 0x120uLL);
  v25 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 4);
  v26 = a1[5];
  v27 = a1[4] + 1;
  if (v27 >= v25)
    v28 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 4);
  else
    v28 = 0;
  a1[4] = v27 - v28;
  if (v26 == v25)
  {
    v29 = a1[3] + 1;
    if (v29 < v25)
      v25 = 0;
    a1[3] = v29 - v25;
  }
  else
  {
    a1[5] = v26 + 1;
  }
  return result;
}

void sub_20EAF8ED8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = a1[4];
  v4 = *a1;
  v5 = *a1 + 80 * v3;
  v22 = *a2;
  v23 = a2[1];
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *((_QWORD *)a2 + 6);
  v10 = *((_QWORD *)a2 + 7);
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v21 = a2[4];
  *(_OWORD *)v5 = v22;
  *(_OWORD *)(v5 + 16) = v23;
  v14 = *(std::__shared_weak_count **)(v5 + 40);
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v7;
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  v15 = *(std::__shared_weak_count **)(v5 + 56);
  *(_QWORD *)(v5 + 48) = v11;
  *(_QWORD *)(v5 + 56) = v10;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  *(_OWORD *)(v4 + 80 * v3 + 64) = v21;
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v17 = a1[5];
  v18 = a1[4] + 1;
  if (v18 >= v16)
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  else
    v19 = 0;
  a1[4] = v18 - v19;
  if (v17 == v16)
  {
    v20 = a1[3] + 1;
    if (v20 < v16)
      v16 = 0;
    a1[3] = v20 - v16;
  }
  else
  {
    a1[5] = v17 + 1;
  }
}

void sub_20EAF900C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char **a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t i;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t j;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  unint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;
  char v75;

  v17 = *a1;
  if (*a1 == a1[1])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/SlamDebug.cpp", 34, (uint64_t)"!feature_sample.empty()", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v17 = *a1;
  }
  v71 = a7;
  v18 = vcvtad_u64_f64((*(double *)(*(_QWORD *)(v17 + 8) + 8) + *(double *)(*(_QWORD *)(v17 + 8) + 16)) * 1000000.0);
  v20 = (uint64_t **)(a9 + 32);
  v19 = *(uint64_t **)(a9 + 32);
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        v21 = v19;
        v22 = v19[4];
        if (v22 <= v18)
          break;
        v19 = (uint64_t *)*v21;
        v20 = (uint64_t **)v21;
        if (!*v21)
          goto LABEL_11;
      }
      if (v22 >= v18)
        break;
      v19 = (uint64_t *)v21[1];
      if (!v19)
      {
        v20 = (uint64_t **)(v21 + 1);
        goto LABEL_11;
      }
    }
  }
  else
  {
    v21 = (_QWORD *)(a9 + 32);
LABEL_11:
    v23 = v21;
    v21 = operator new(0x40uLL);
    v21[4] = v18;
    v21[5] = 0;
    v21[6] = 0;
    v21[7] = 0;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v23;
    *v20 = v21;
    v24 = **(_QWORD **)(a9 + 24);
    v25 = v21;
    if (v24)
    {
      *(_QWORD *)(a9 + 24) = v24;
      v25 = *v20;
    }
    sub_20E868578(*(uint64_t **)(a9 + 32), v25);
    ++*(_QWORD *)(a9 + 40);
  }
  v26 = (void **)(v21 + 5);
  v27 = (_QWORD *)v21[5];
  if (v27)
  {
    v28 = (_QWORD *)v21[6];
    v29 = (void *)v21[5];
    if (v28 != v27)
    {
      do
      {
        v28 -= 13;
        sub_20E9905B4(v28);
      }
      while (v28 != v27);
      v29 = *v26;
    }
    v21[6] = v27;
    operator delete(v29);
    *v26 = 0;
    v21[6] = 0;
    v21[7] = 0;
  }
  *(_OWORD *)(v21 + 5) = *(_OWORD *)a1;
  v21[7] = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((char **)(a9 + 888) != a8)
  {
    sub_20EAF9840((_QWORD *)(a9 + 888), *a8, a8[1], (a8[1] - *a8) >> 7);
    sub_20EAF9840((_QWORD *)(a9 + 912), a8[3], a8[4], (a8[4] - a8[3]) >> 7);
  }
  v30 = *a2;
  if (a9 + 912 != *a2 + 1752)
  {
    sub_20EAF9840((_QWORD *)(a9 + 912), *(char **)(v30 + 1752), *(char **)(v30 + 1760), (uint64_t)(*(_QWORD *)(v30 + 1760) - *(_QWORD *)(v30 + 1752)) >> 7);
    v30 = *a2;
  }
  v31 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v32 = *(std::__shared_weak_count **)(a9 + 56);
  *(_QWORD *)(a9 + 48) = v30;
  *(_QWORD *)(a9 + 56) = v31;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20E9907F4(a9 + 64, (uint64_t)(a2 + 2));
  sub_20E990708((void **)(a9 + 112), (uint64_t)(a2 + 8));
  sub_20E991220((char **)(a9 + 224), (uint64_t)(a2 + 22));
  sub_20F3376BC(a3, a5, a10, 0, (uint64_t)&v73);
  sub_20E98FDF0(a9 + 544, (uint64_t)&v73);
  sub_20EAF9A2C((uint64_t)&v73);
  v35 = (void **)(a9 + 936);
  v36 = *(_QWORD *)(a9 + 936);
  if (v36)
  {
    v37 = *(_QWORD *)(a9 + 944);
    v38 = *(void **)(a9 + 936);
    if (v37 != v36)
    {
      do
        v37 = sub_20E991850(v37 - 280);
      while (v37 != v36);
      v38 = *v35;
    }
    *(_QWORD *)(a9 + 944) = v36;
    operator delete(v38);
    *v35 = 0;
    *(_QWORD *)(a9 + 944) = 0;
    *(_QWORD *)(a9 + 952) = 0;
  }
  *(_OWORD *)v35 = *(_OWORD *)a4;
  *(_QWORD *)(a9 + 952) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v39 = (_QWORD *)(a9 + 1312);
  if (a9 + 1312 != a6)
  {
    *(_DWORD *)(a9 + 1344) = *(_DWORD *)(a6 + 32);
    v40 = *(uint64_t ***)(a6 + 16);
    v41 = *(_QWORD *)(a9 + 1320);
    if (v41)
    {
      for (i = 0; i != v41; ++i)
        *(_QWORD *)(*v39 + 8 * i) = 0;
      v43 = *(uint64_t **)(a9 + 1328);
      *(_QWORD *)(a9 + 1336) = 0;
      *(_QWORD *)(a9 + 1328) = 0;
      if (v43)
      {
        while (v40)
        {
          v43[2] = (uint64_t)v40[2];
          if (v43 != (uint64_t *)v40)
            sub_20E9BF954(v43 + 3, (char *)v40[3], (char *)v40[4], ((char *)v40[4] - (char *)v40[3]) >> 4);
          v44 = (uint64_t *)*v43;
          sub_20EAF9BA8(a9 + 1312, (uint64_t)v43);
          v40 = (uint64_t **)*v40;
          v43 = v44;
          if (!v44)
            goto LABEL_42;
        }
        do
        {
          v67 = (uint64_t *)*v43;
          v68 = (void *)v43[3];
          if (v68)
          {
            v43[4] = (uint64_t)v68;
            operator delete(v68);
          }
          operator delete(v43);
          v43 = v67;
        }
        while (v67);
        goto LABEL_54;
      }
    }
LABEL_42:
    if (!v40)
      goto LABEL_54;
    do
    {
      v45 = operator new(0x30uLL);
      v73 = v45;
      v74 = a9 + 1328;
      v75 = 0;
      *v45 = 0;
      v45[1] = 0;
      v46 = (unint64_t)v40[2];
      v45[3] = 0;
      v45[2] = v46;
      v45[4] = 0;
      v45[5] = 0;
      v48 = v40[3];
      v47 = v40[4];
      v49 = (char *)v47 - (char *)v48;
      if (v47 != v48)
      {
        if (v49 < 0)
          sub_20E867F44();
        v50 = (char *)operator new((char *)v47 - (char *)v48);
        v45[3] = v50;
        v45[4] = v50;
        v45[5] = &v50[16 * (v49 >> 4)];
        v51 = v49 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v50, v48, v51);
        v45[4] = &v50[v51];
      }
      v75 = 1;
      if ((v46 & 0xFFFF0000) != 0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_82;
        }
        LODWORD(v52) = *((_DWORD *)v45 + 5);
        if (v52 >= 0x10000)
        {
LABEL_51:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_82:
            abort();
          }
          LOWORD(v52) = *((_WORD *)v45 + 10);
        }
      }
      else
      {
        v52 = HIDWORD(v46);
        if (HIDWORD(v46) >= 0x10000)
          goto LABEL_51;
      }
      v45[1] = (unsigned __int16)v52 | ((unsigned __int16)*((_DWORD *)v45 + 4) << 16);
      sub_20EAF9BA8((uint64_t)v39, (uint64_t)v45);
      v40 = (uint64_t **)*v40;
    }
    while (v40);
  }
LABEL_54:
  v53 = (_QWORD *)(a9 + 1352);
  if (a9 + 1352 == v71)
    return;
  *(_DWORD *)(a9 + 1384) = *(_DWORD *)(v71 + 32);
  v54 = *(uint64_t ***)(v71 + 16);
  v55 = *(_QWORD *)(a9 + 1360);
  if (!v55)
    goto LABEL_63;
  for (j = 0; j != v55; ++j)
    *(_QWORD *)(*v53 + 8 * j) = 0;
  v57 = *(uint64_t **)(a9 + 1368);
  *(_QWORD *)(a9 + 1376) = 0;
  *(_QWORD *)(a9 + 1368) = 0;
  if (!v57)
  {
LABEL_63:
    if (!v54)
      return;
    while (1)
    {
      v59 = operator new(0x30uLL);
      v73 = v59;
      v74 = a9 + 1368;
      v75 = 0;
      *v59 = 0;
      v59[1] = 0;
      v60 = (unint64_t)v54[2];
      v59[3] = 0;
      v59[2] = v60;
      v59[4] = 0;
      v59[5] = 0;
      v62 = v54[3];
      v61 = v54[4];
      v63 = (char *)v61 - (char *)v62;
      if (v61 != v62)
      {
        if (v63 < 0)
          sub_20E969238();
        v64 = (char *)operator new((char *)v61 - (char *)v62);
        v59[3] = v64;
        v59[4] = v64;
        v59[5] = &v64[8 * (v63 >> 3)];
        v65 = v63 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v64, v62, v65);
        v59[4] = &v64[v65];
      }
      v75 = 1;
      if ((v60 & 0xFFFF0000) != 0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_83;
        }
        LODWORD(v66) = *((_DWORD *)v59 + 5);
        if (v66 >= 0x10000)
        {
LABEL_72:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_83:
            abort();
          }
          LOWORD(v66) = *((_WORD *)v59 + 10);
        }
      }
      else
      {
        v66 = HIDWORD(v60);
        if (HIDWORD(v60) >= 0x10000)
          goto LABEL_72;
      }
      v59[1] = (unsigned __int16)v66 | ((unsigned __int16)*((_DWORD *)v59 + 4) << 16);
      sub_20EAF9BA8((uint64_t)v53, (uint64_t)v59);
      v54 = (uint64_t **)*v54;
      if (!v54)
        return;
    }
  }
  while (v54)
  {
    v57[2] = (uint64_t)v54[2];
    if (v57 != (uint64_t *)v54)
      sub_20EAFA238(v57 + 3, (char *)v54[3], (char *)v54[4], v54[4] - v54[3]);
    v58 = (uint64_t *)*v57;
    sub_20EAF9BA8((uint64_t)v53, (uint64_t)v57);
    v54 = (uint64_t **)*v54;
    v57 = v58;
    if (!v58)
      goto LABEL_63;
  }
  do
  {
    v69 = (uint64_t *)*v57;
    v70 = (void *)v57[3];
    if (v70)
    {
      v57[4] = (uint64_t)v70;
      operator delete(v70);
    }
    operator delete(v57);
    v57 = v69;
  }
  while (v69);
}

void sub_20EAF9724(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_20EAFA1A4(v1);
  __cxa_rethrow();
}

void sub_20EAF9754(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EAF9778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v5 + 32) = v8;
    operator delete(v8);
    sub_20EAFA1EC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAF9828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EAFA1EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EAF9840(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 7)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 7;
    if (v18 >= __sz)
    {
      v35 = *result;
      if (a2 != a3)
      {
        v36 = (_OWORD *)*result;
        do
        {
          v37 = *(_OWORD *)v6;
          v38 = *((_OWORD *)v6 + 1);
          v39 = *((_OWORD *)v6 + 3);
          v36[2] = *((_OWORD *)v6 + 2);
          v36[3] = v39;
          *v36 = v37;
          v36[1] = v38;
          v40 = *((_OWORD *)v6 + 4);
          v41 = *((_OWORD *)v6 + 5);
          v42 = *((_OWORD *)v6 + 7);
          v36[6] = *((_OWORD *)v6 + 6);
          v36[7] = v42;
          v36[4] = v40;
          v36[5] = v41;
          v6 += 128;
          v36 += 8;
          v35 += 128;
        }
        while (v6 != a3);
      }
      v15 = v35 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[128 * v18];
      if (v17 != v9)
      {
        v20 = v18 << 7;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v23 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v23;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v24 = *((_OWORD *)v6 + 4);
          v25 = *((_OWORD *)v6 + 5);
          v26 = *((_OWORD *)v6 + 7);
          *((_OWORD *)v9 + 6) = *((_OWORD *)v6 + 6);
          *((_OWORD *)v9 + 7) = v26;
          *((_OWORD *)v9 + 4) = v24;
          *((_OWORD *)v9 + 5) = v25;
          v6 += 128;
          v9 += 128;
          v20 -= 128;
        }
        while (v20);
        v9 = *v16;
      }
      v27 = v9;
      if (v19 != a3)
      {
        v27 = v9;
        v28 = v9;
        do
        {
          v29 = *(_OWORD *)v19;
          v30 = *((_OWORD *)v19 + 1);
          v31 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v28 + 3) = v31;
          *(_OWORD *)v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v32 = *((_OWORD *)v19 + 4);
          v33 = *((_OWORD *)v19 + 5);
          v34 = *((_OWORD *)v19 + 7);
          *((_OWORD *)v28 + 6) = *((_OWORD *)v19 + 6);
          *((_OWORD *)v28 + 7) = v34;
          *((_OWORD *)v28 + 4) = v32;
          *((_OWORD *)v28 + 5) = v33;
          v19 += 128;
          v28 += 128;
          v27 += 128;
        }
        while (v19 != a3);
      }
      v15 = v27 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 57)
      goto LABEL_27;
    v10 = v8 >> 6;
    if (v8 >> 6 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    v12 = 0x1FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 57)
LABEL_27:
      sub_20E867F44();
    v13 = v12 << 7;
    result = operator new(v12 << 7);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFF80);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFF80];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

uint64_t sub_20EAF9A2C(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(void ***)(a1 + 312);
    if (v2)
    {
      do
      {
        v8 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    v3 = *(void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v3)
      operator delete(v3);
  }
  sub_20E991800(a1 + 272, *(_QWORD **)(a1 + 280));
  sub_20E86872C(a1 + 248, *(_QWORD **)(a1 + 256));
  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 232);
    v6 = *(void **)(a1 + 224);
    if (v5 != v4)
    {
      v7 = *(_QWORD *)(a1 + 232);
      do
      {
        v10 = *(void **)(v7 - 24);
        v7 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v5 - 16) = v9;
          operator delete(v9);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(void **)(a1 + 224);
    }
    *(_QWORD *)(a1 + 232) = v4;
    operator delete(v6);
  }
  v11 = *(void **)(a1 + 200);
  if (v11)
  {
    *(_QWORD *)(a1 + 208) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 176);
  if (v12)
  {
    *(_QWORD *)(a1 + 184) = v12;
    operator delete(v12);
  }
  v13 = *(_QWORD *)(a1 + 152);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 160);
    v15 = *(void **)(a1 + 152);
    if (v14 != v13)
    {
      do
      {
        v16 = v14 - 176;
        sub_20E991548((_QWORD *)(v14 - 168));
        v14 = v16;
      }
      while (v16 != v13);
      v15 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v13;
    operator delete(v15);
  }
  v17 = *(void **)(a1 + 128);
  if (v17)
  {
    *(_QWORD *)(a1 + 136) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 104);
  if (v18)
  {
    *(_QWORD *)(a1 + 112) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 56);
  if (v19)
  {
    *(_QWORD *)(a1 + 64) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 32);
  if (v20)
  {
    *(_QWORD *)(a1 + 40) = v20;
    operator delete(v20);
  }
  sub_20E991500(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20EAF9BA8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v26;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t *i;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  _BOOL4 v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  void *v50;
  uint8x8_t v51;
  uint8x8_t v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  BOOL v57;
  char v58;
  uint64_t v59;
  unint64_t v60;

  if (*(_DWORD *)(a2 + 16) >= 0x10000u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_127;
  }
  v4 = *(_DWORD *)(a2 + 20);
  if (v4 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      LOWORD(v4) = *(_WORD *)(a2 + 20);
      goto LABEL_6;
    }
LABEL_127:
    abort();
  }
LABEL_6:
  v5 = (unsigned __int16)v4 | ((unsigned __int16)*(_DWORD *)(a2 + 16) << 16);
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
    goto LABEL_93;
  v9 = 1;
  if (v6 >= 3)
    v9 = (v6 & (v6 - 1)) != 0;
  v10 = v9 | (2 * v6);
  v11 = vcvtps_u32_f32(v7 / v8);
  if (v10 <= v11)
    prime = (int8x8_t)v11;
  else
    prime = (int8x8_t)v10;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_93;
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v49 = std::__next_prime(v27);
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v6)
      {
LABEL_46:
        v6 = *(_QWORD *)(a1 + 8);
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v30.i16[0] = vaddlv_u8(v30);
        v31 = v30.u32[0];
        if (v30.u32[0] >= 2uLL)
          goto LABEL_52;
        goto LABEL_94;
      }
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v6)
        goto LABEL_46;
    }
    if (!*(_QWORD *)&prime)
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v51 = (uint8x8_t)vcnt_s8(0);
      v51.i16[0] = vaddlv_u8(v51);
      v31 = v51.u32[0];
      if (v51.u32[0] >= 2uLL)
        goto LABEL_52;
      goto LABEL_94;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_20E877A38();
  v13 = operator new(8 * *(_QWORD *)&prime);
  v14 = *(void **)a1;
  *(_QWORD *)a1 = v13;
  if (v14)
    operator delete(v14);
  v15 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
  while (*(_QWORD *)&prime != v15);
  v17 = a1 + 16;
  v16 = *(uint64_t ***)(a1 + 16);
  if (v16)
  {
    v18 = (unint64_t)v16[1];
    v19 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v20 = v18 & v19;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v17;
      v21 = *v16;
      if (!*v16)
        goto LABEL_51;
      do
      {
        v22 = v21[1] & v19;
        if (v22 == v20)
        {
          v16 = (uint64_t **)v21;
        }
        else
        {
          v23 = v21;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
              if (!v23)
                break;
            }
            while (*((_DWORD *)v21 + 4) == *((_DWORD *)v23 + 4) && *((_DWORD *)v21 + 5) == *((_DWORD *)v23 + 5));
            *v16 = v23;
            v26 = 8 * v22;
            *v24 = **(_QWORD **)(*(_QWORD *)a1 + v26);
            **(_QWORD **)(*(_QWORD *)a1 + v26) = v21;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v16;
            v16 = (uint64_t **)v21;
            v20 = v22;
          }
        }
        v21 = *v16;
      }
      while (*v16);
      v6 = (unint64_t)prime;
LABEL_93:
      v52 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v52.i16[0] = vaddlv_u8(v52);
      v31 = v52.u32[0];
      if (v52.u32[0] >= 2uLL)
        goto LABEL_52;
      goto LABEL_94;
    }
    if (v18 >= *(_QWORD *)&prime)
      v18 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v17;
    for (i = *v16; *v16; i = *v16)
    {
      v43 = i[1];
      if (v43 >= *(_QWORD *)&prime)
        v43 %= *(_QWORD *)&prime;
      if (v43 == v18)
      {
        v16 = (uint64_t **)i;
      }
      else
      {
        v44 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          do
          {
            v45 = v44;
            v44 = (uint64_t *)*v44;
            if (!v44)
              break;
          }
          while (*((_DWORD *)i + 4) == *((_DWORD *)v44 + 4) && *((_DWORD *)i + 5) == *((_DWORD *)v44 + 5));
          *v16 = v44;
          v47 = 8 * v43;
          *v45 = **(_QWORD **)(*(_QWORD *)a1 + v47);
          **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v16;
          v16 = (uint64_t **)i;
          v18 = v43;
        }
      }
    }
  }
LABEL_51:
  v6 = (unint64_t)prime;
  v33 = (uint8x8_t)vcnt_s8(prime);
  v33.i16[0] = vaddlv_u8(v33);
  v31 = v33.u32[0];
  if (v33.u32[0] >= 2uLL)
  {
LABEL_52:
    v34 = v5;
    if (v6 <= v5)
      v34 = v5 % v6;
    v35 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v34);
    if (!v35)
    {
      v40 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      goto LABEL_108;
    }
    v36 = 0;
    while (1)
    {
      v40 = v35;
      v35 = (uint64_t *)*v35;
      if (!v35)
        goto LABEL_107;
      v41 = v35[1];
      v42 = v41;
      if (v41 >= v6)
        v42 = v41 % v6;
      if (v42 != v34)
        goto LABEL_107;
      if (v41 == v5)
      {
        v38 = *((_DWORD *)v35 + 4) == *(_DWORD *)(a2 + 16) && *((_DWORD *)v35 + 5) == *(_DWORD *)(a2 + 20);
        v39 = v36 & !v38;
        v36 |= v38;
        if (v39 == 1)
          goto LABEL_107;
      }
      else if ((v36 & 1) == 1)
      {
        goto LABEL_107;
      }
    }
  }
LABEL_94:
  v53 = (v6 - 1) & v5;
  v54 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v53);
  if (!v54)
  {
    v40 = 0;
    v48 = *(_QWORD *)(a2 + 8);
LABEL_119:
    v48 &= v6 - 1;
    if (v40)
      goto LABEL_111;
LABEL_120:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_126;
    v60 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v31 > 1)
    {
      if (v60 >= v6)
        v60 %= v6;
    }
    else
    {
      v60 &= v6 - 1;
    }
LABEL_125:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v60) = a2;
    goto LABEL_126;
  }
  v55 = 0;
  while (1)
  {
    v40 = v54;
    v54 = (uint64_t *)*v54;
    if (!v54)
      break;
    v59 = v54[1];
    if ((v59 & (v6 - 1)) != v53)
      break;
    if (v59 == v5)
    {
      v57 = *((_DWORD *)v54 + 4) == *(_DWORD *)(a2 + 16) && *((_DWORD *)v54 + 5) == *(_DWORD *)(a2 + 20);
      v58 = v55 & !v57;
      v55 |= v57;
      if ((v58 & 1) != 0)
        break;
    }
    else if ((v55 & 1) != 0)
    {
      break;
    }
  }
LABEL_107:
  v48 = *(_QWORD *)(a2 + 8);
  if (v31 <= 1)
    goto LABEL_119;
LABEL_108:
  if (v48 >= v6)
    v48 %= v6;
  if (!v40)
    goto LABEL_120;
LABEL_111:
  *(_QWORD *)a2 = *v40;
  *v40 = a2;
  if (*(_QWORD *)a2)
  {
    v60 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v31 > 1)
    {
      if (v60 >= v6)
        v60 %= v6;
    }
    else
    {
      v60 &= v6 - 1;
    }
    if (v60 != v48)
      goto LABEL_125;
  }
LABEL_126:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20EAFA1A4(void **__p)
{
  void **v2;
  void *v3;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t sub_20EAFA1EC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20EAFA238(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v7 = result;
  v8 = result[2];
  v9 = *result;
  v10 = (_QWORD *)*result;
  if (__sz <= (v8 - *result) >> 3)
  {
    v17 = (_QWORD **)(result + 1);
    v18 = result[1];
    v19 = v18 - v9;
    v20 = (v18 - v9) >> 3;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v18 == v9)
        goto LABEL_35;
      if ((unint64_t)(v19 - 8) < 0x18)
      {
        v22 = a2;
      }
      else
      {
        v22 = a2;
        if ((unint64_t)(v9 - (_QWORD)a2) >= 0x20)
        {
          v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v10 = (_QWORD *)(v9 + v24);
          v22 = &a2[v24];
          v25 = (__int128 *)(a2 + 16);
          v26 = (_OWORD *)(v9 + 16);
          v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *v25;
            *(v26 - 1) = *(v25 - 1);
            *v26 = v28;
            v25 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
      }
      do
      {
        v39 = *(_QWORD *)v22;
        v22 += 8;
        *v10++ = v39;
      }
      while (v22 != v21);
LABEL_34:
      v10 = *v17;
LABEL_35:
      v40 = (char *)v10;
      if (v21 != a3)
      {
        v41 = a3 - &a2[v19] - 8;
        if (v41 >= 0x38)
        {
          v40 = (char *)v10;
          if ((unint64_t)((char *)v10 - v19 - a2) >= 0x20)
          {
            v42 = (v41 >> 3) + 1;
            v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            v21 += v43 * 8;
            v40 = (char *)&v10[v43];
            v44 = v10 + 2;
            v45 = &a2[8 * v20 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_43;
          }
        }
        else
        {
          v40 = (char *)v10;
        }
        do
        {
          v48 = *(_QWORD *)v21;
          v21 += 8;
          *(_QWORD *)v40 = v48;
          v40 += 8;
        }
        while (v21 != a3);
      }
LABEL_43:
      v16 = (char *)(v40 - (char *)v10);
      goto LABEL_44;
    }
    if (a2 == a3)
    {
      v16 = (char *)v10 - v9;
      goto LABEL_44;
    }
    v29 = a3 - a2 - 8;
    if (v29 < 0x18 || (unint64_t)(v9 - (_QWORD)a2) < 0x20)
    {
      v32 = (_QWORD *)*result;
      v33 = a2;
    }
    else
    {
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = (_QWORD *)(v9 + v31);
      v33 = &a2[v31];
      v34 = (__int128 *)(a2 + 16);
      v35 = (_OWORD *)(v9 + 16);
      v36 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
    }
    do
    {
      v38 = *(_QWORD *)v33;
      v33 += 8;
      *v32++ = v38;
    }
    while (v33 != a3);
LABEL_31:
    v16 = (char *)v32 - v9;
    goto LABEL_44;
  }
  if (v10)
  {
    result[1] = v10;
    operator delete(v10);
    v8 = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if (__sz >> 61)
    goto LABEL_45;
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v11;
  if (v13 >> 61)
LABEL_45:
    sub_20E969238();
  v14 = v13;
  result = operator new(8 * v13);
  v10 = result;
  *v7 = result;
  v7[1] = result;
  v7[2] = &result[v14];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    v15 = (char *)v10 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = (char *)(v15 - (char *)v10);
  v17 = (_QWORD **)(v7 + 1);
LABEL_44:
  *v17 = &v16[(_QWORD)v10];
  return result;
}

uint64_t sub_20EAFA504(uint64_t a1, uint64_t *a2, char *__src)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  char *v40;

  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a1 = xmmword_210314D90;
  *(_OWORD *)(a1 + 16) = unk_210314DA0;
  *(_OWORD *)(a1 + 32) = xmmword_210314DB0;
  *(_OWORD *)(a1 + 48) = unk_210314DC0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  v5 = *a2;
  *a2 = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v6 = a1 + 136;
  *(_QWORD *)(a1 + 128) = v5;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1416) = 0;
  memcpy((void *)(a1 + 1424), __src, 0x356uLL);
  *(_OWORD *)(v6 + 2144) = *(_OWORD *)(__src + 856);
  v7 = *(_OWORD *)(__src + 872);
  v8 = *(_OWORD *)(__src + 888);
  v9 = *(_OWORD *)(__src + 904);
  *(_QWORD *)(v6 + 2208) = *((_QWORD *)__src + 115);
  *(_OWORD *)(v6 + 2192) = v9;
  *(_OWORD *)(v6 + 2176) = v8;
  *(_OWORD *)(v6 + 2160) = v7;
  *(_QWORD *)(v6 + 2216) = 0;
  *(_QWORD *)(v6 + 2232) = 0;
  *(_QWORD *)(v6 + 2224) = 0;
  v10 = (char *)*((_QWORD *)__src + 116);
  v11 = (char *)*((_QWORD *)__src + 117);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v13 = (char *)operator new(v11 - v10);
    *(_QWORD *)(a1 + 2352) = v13;
    *(_QWORD *)(a1 + 2360) = v13;
    *(_QWORD *)(a1 + 2368) = &v13[8 * (v12 >> 3)];
    if ((unint64_t)(v12 - 24) >= 0x108
      && ((v14 = (v12 - 24) / 0x18uLL, v15 = 24 * v14 + 24, v13 < &v10[v15]) ? (v16 = v10 >= &v13[v15]) : (v16 = 1), v16))
    {
      v17 = v14 + 1;
      v18 = (v14 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v19 = &v10[24 * v18];
      v20 = &v13[24 * v18];
      v21 = v18;
      do
      {
        v22 = *((_OWORD *)v10 + 1);
        v24 = *((_OWORD *)v10 + 4);
        v23 = *((_OWORD *)v10 + 5);
        v25 = *((_OWORD *)v10 + 2);
        v26 = *((_OWORD *)v10 + 3);
        *(_OWORD *)v13 = *(_OWORD *)v10;
        *((_OWORD *)v13 + 1) = v22;
        *((_OWORD *)v13 + 2) = v25;
        *((_OWORD *)v13 + 3) = v26;
        *((_OWORD *)v13 + 4) = v24;
        *((_OWORD *)v13 + 5) = v23;
        v13 += 96;
        v10 += 96;
        v21 -= 4;
      }
      while (v21);
      if (v17 == v18)
        goto LABEL_15;
    }
    else
    {
      v19 = v10;
      v20 = v13;
    }
    do
    {
      *(_QWORD *)v20 = *(_QWORD *)v19;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v19 + 1);
      *((_QWORD *)v20 + 2) = *((_QWORD *)v19 + 2);
      v20 += 24;
      v19 += 24;
    }
    while (v19 != v11);
LABEL_15:
    *(_QWORD *)(a1 + 2360) = v20;
  }
  v27 = *(_OWORD *)(__src + 952);
  v28 = *(_OWORD *)(__src + 968);
  v29 = *(_OWORD *)(__src + 1000);
  *(_OWORD *)(a1 + 2408) = *(_OWORD *)(__src + 984);
  *(_OWORD *)(a1 + 2424) = v29;
  *(_OWORD *)(a1 + 2376) = v27;
  *(_OWORD *)(a1 + 2392) = v28;
  v30 = *(_OWORD *)(__src + 1128);
  v32 = *(_OWORD *)(__src + 1080);
  v31 = *(_OWORD *)(__src + 1096);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(__src + 1112);
  *(_OWORD *)(a1 + 2552) = v30;
  *(_OWORD *)(a1 + 2504) = v32;
  *(_OWORD *)(a1 + 2520) = v31;
  v33 = *(_OWORD *)(__src + 1192);
  v35 = *(_OWORD *)(__src + 1144);
  v34 = *(_OWORD *)(__src + 1160);
  *(_OWORD *)(a1 + 2600) = *(_OWORD *)(__src + 1176);
  *(_OWORD *)(a1 + 2616) = v33;
  *(_OWORD *)(a1 + 2568) = v35;
  *(_OWORD *)(a1 + 2584) = v34;
  v36 = *(_OWORD *)(__src + 1016);
  v37 = *(_OWORD *)(__src + 1032);
  v38 = *(_OWORD *)(__src + 1064);
  *(_OWORD *)(a1 + 2472) = *(_OWORD *)(__src + 1048);
  *(_OWORD *)(a1 + 2488) = v38;
  *(_OWORD *)(a1 + 2440) = v36;
  *(_OWORD *)(a1 + 2456) = v37;
  sub_20E86F7FC(a1 + 2632, (uint64_t)(__src + 1208));
  *(_BYTE *)(a1 + 2840) = __src[1416];
  sub_20EAF8AE0((_QWORD *)(a1 + 2848), 5uLL);
  *(_QWORD *)(a1 + 2888) = 0;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_QWORD *)(a1 + 2912) = 0;
  *(_OWORD *)(a1 + 2896) = 0u;
  v39 = (char *)operator new(0x640uLL);
  *(_QWORD *)(a1 + 2896) = v39;
  v40 = v39 + 1600;
  *(_QWORD *)(a1 + 2912) = v39 + 1600;
  bzero(v39, 0x640uLL);
  *(_QWORD *)(a1 + 2904) = v40;
  *(_QWORD *)(a1 + 2928) = 0;
  *(_QWORD *)(a1 + 2920) = 0;
  *(_QWORD *)(a1 + 2936) = 0;
  if (!*(_QWORD *)(a1 + 128)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/StateAggregator.cpp", 37, (uint64_t)"pose_predictor_", 15, (uint64_t)"Invalid PosePredictor", 21, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EAFA814(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  uint64_t v7;

  sub_20EAF835C(v5);
  sub_20EAF83D4(v4);
  sub_20E86A618(v3);
  sub_20EAFA8BC(v2);
  v7 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (!v7)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAFA8BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 1096))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_20EAFA92C()
{
  _BYTE *v0;
  uint64_t v1;
  float64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  float64x2_t *v5;
  _DWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v12;
  _BOOL4 v13;
  float64x2_t v14;
  const double *v16;
  float64x2_t *v17;
  __int128 v21;
  __int128 v22;
  float64x2_t v24;
  float64x2_t v27;
  const double *v29;
  float64x2_t v31;
  int v32;
  float64x2_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  const double *v38;
  double v39;
  float64x2_t v41;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73[342];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  float64x2x3_t v81;
  float64x2x3_t v82;
  float64x2x3_t v83;

  v0 = (_BYTE *)MEMORY[0x24BDAC7A8]();
  *(_OWORD *)(v1 + 1192) = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(v1 + 1208) = v4;
  if (!v0[1232])
    sub_20E866B34();
  v5 = v2;
  v6 = (_DWORD *)v1;
  v7 = v0;
  if (LOBYTE(v2[10].f64[1]))
  {
    v8 = v1 + 1088;
    *(_OWORD *)(v1 + 1152) = 0u;
    *(_OWORD *)(v1 + 1168) = 0u;
    *(_OWORD *)(v1 + 1120) = 0u;
    *(_OWORD *)(v1 + 1136) = 0u;
    *(_OWORD *)(v1 + 1088) = 0u;
    *(_OWORD *)(v1 + 1104) = 0u;
    if (*(_BYTE *)(v1 + 1184))
    {
      v9 = v0[753];
      v10 = v0[563];
      if (v0[1232])
      {
LABEL_5:
        v13 = v10 && (v0[1080] ? (_ZF = v0[1216] == 0) : (_ZF = 1), !_ZF ? (v12 = 0) : (v12 = 1), !v9 && (v12 & 1) != 0)
           || v0[121] != 0;
        goto LABEL_18;
      }
    }
    else
    {
      *(_BYTE *)(v1 + 1184) = 1;
      v9 = v0[753];
      v10 = v0[563];
      if (v0[1232])
        goto LABEL_5;
    }
    v13 = 0;
LABEL_18:
    *(_BYTE *)(v1 + 1216) = v13;
    memmove((void *)(v1 + 1088), v2, 0x48uLL);
    v14.f64[0] = v5[10].f64[0];
    _Q1 = v5[9];
    v16 = (const double *)(v6 + 272);
    v81 = vld3q_f64(v16);
    v16 += 6;
    *(float64x2_t *)(v6 + 290) = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81.val[0], _Q1.f64[0]), v81.val[1], _Q1, 1), v81.val[2], v14.f64[0]));
    v17 = (float64x2_t *)(v6 + 290);
    v81.val[1] = *(float64x2_t *)v16;
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D4, D1, V3.D[1] }
    *((double *)v6 + 147) = -(v81.val[2].f64[0] + *((double *)v6 + 144) * v14.f64[0]);
    if (v9 && v10)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v21 = *((_OWORD *)v6 + 69);
      v22 = *((_OWORD *)v6 + 70);
      _Q2 = *((_OWORD *)v6 + 71);
      *((_QWORD *)v7 + 8) = *((_QWORD *)v6 + 144);
      *((_OWORD *)v7 + 2) = v22;
      *((_OWORD *)v7 + 3) = _Q2;
      *((_OWORD *)v7 + 1) = v21;
      v24 = *v17;
      *((_QWORD *)v7 + 11) = *(_QWORD *)(v8 + 88);
      *(float64x2_t *)(v7 + 72) = v24;
      v24.f64[0] = *((float64_t *)v7 + 11);
      _Q1 = *(float64x2_t *)(v7 + 72);
      _D4 = *((_QWORD *)v7 + 5);
      v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v7, _Q1.f64[0]), *(float64x2_t *)(v7 + 24), _Q1, 1), *((float64x2_t *)v7 + 3), v24.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      v24.f64[0] = *(double *)&_Q2 + *((double *)v7 + 8) * v24.f64[0];
      v14 = vnegq_f64(v24);
      *((float64x2_t *)v7 + 6) = vnegq_f64(v27);
      *((_QWORD *)v7 + 14) = *(_QWORD *)&v14.f64[0];
    }
    if (v7[1080])
    {
      v14.f64[0] = *((float64_t *)v7 + 138);
      _Q1 = *((float64x2_t *)v7 + 68);
      v29 = (const double *)(v6 + 272);
      v82 = vld3q_f64(v29);
      v29 += 6;
      _Q6 = *(_OWORD *)v29;
      v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82.val[0], _Q1.f64[0]), v82.val[1], _Q1, 1), v82.val[2], v14.f64[0]);
      _Q1.f64[0] = *((float64_t *)v7 + 137);
      __asm { FMLA            D2, D1, V6.D[1] }
      v14.f64[0] = v82.val[0].f64[0] + *((double *)v6 + 144) * v14.f64[0];
      *(float64x2_t *)(v6 + 290) = v31;
      *((_QWORD *)v6 + 147) = *(_QWORD *)&v14.f64[0];
      _Q1.f64[0] = *((float64_t *)v7 + 150);
      *(float64x2_t *)(v6 + 290) = vsubq_f64(*((float64x2_t *)v7 + 74), v31);
      *((_QWORD *)v6 + 147) = *(_OWORD *)&vsubq_f64(_Q1, v14);
      kdebug_trace();
    }
    else if (v13)
    {
      kdebug_trace();
      v32 = *((_DWORD *)v7 + 611);
      if (v32 == 1)
      {
        v33 = *(float64x2_t *)(v7 + 72);
        *(_QWORD *)(v8 + 88) = *((_QWORD *)v7 + 11);
        *v17 = v33;
        v35 = *((_OWORD *)v7 + 2);
        v34 = *((_OWORD *)v7 + 3);
        v36 = *((_OWORD *)v7 + 1);
        *((_QWORD *)v6 + 144) = *((_QWORD *)v7 + 8);
        *((_OWORD *)v6 + 70) = v35;
        *((_OWORD *)v6 + 71) = v34;
        *((_OWORD *)v6 + 69) = v36;
        *(_OWORD *)v8 = *(_OWORD *)v7;
        v32 = *((_DWORD *)v7 + 611);
      }
      if (v32 == 2)
      {
        v37 = *((double *)v7 + 14);
        v38 = (const double *)(v6 + 272);
        v83 = vld3q_f64(v38);
        v38 += 6;
        v39 = *((double *)v6 + 144);
        _Q6 = *(_OWORD *)v38;
        v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83.val[0], *((double *)v7 + 12)), v83.val[1], *((float64x2_t *)v7 + 6), 1), v83.val[2], v37);
        _D1 = *((_QWORD *)v7 + 13);
        __asm { FMLA            D2, D1, V6.D[1] }
        *(float64x2_t *)(v6 + 290) = vnegq_f64(v41);
        *((double *)v6 + 147) = -(v83.val[0].f64[0] + v39 * v37);
        kdebug_trace();
      }
    }
  }
  if (*((_BYTE *)v6 + 1184))
  {
    kdebug_trace();
    kdebug_trace();
  }
  v43 = v6[270];
  if (!(_DWORD)v43)
  {
    v45 = *((_QWORD *)v7 + 17);
    if (v45)
    {
      v46 = *((_QWORD *)v7 + 18);
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
      *(_QWORD *)v6 = v45;
      *((_QWORD *)v6 + 1) = v46;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(p_shared_owners);
        while (__stlxr(v51 - 1, p_shared_owners));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      return;
    }
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v76 = 0u;
    sub_20F3E86B4();
    v52 = operator new(0x1580uLL);
    v52[1] = 0;
    v52[2] = 0;
    *v52 = &off_24C9B07F8;
    sub_20EABA448((uint64_t)(v52 + 3), v73);
    *(_QWORD *)&v76 = v52 + 3;
    *((_QWORD *)&v76 + 1) = v52;
    v53 = v74;
    v54 = v75;
    if (v75)
    {
      v55 = (unint64_t *)(v75 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    *(_QWORD *)&v78 = v53;
    *((_QWORD *)&v78 + 1) = v54;
    v57 = operator new(0x50uLL);
    v58 = v57;
    v57[1] = 0;
    v57[2] = 0;
    *v57 = &off_24C9C3988;
    v57[3] = v52 + 3;
    v59 = (char *)(v57 + 3);
    v76 = 0uLL;
    v57[4] = v52;
    v57[5] = 0;
    v77 = 0uLL;
    v57[6] = 0;
    v57[7] = v53;
    v57[8] = v54;
    v78 = 0uLL;
    *((_BYTE *)v57 + 72) = 0;
    v60 = v6[270];
    if ((_DWORD)v60 != -1)
    {
      if (!(_DWORD)v60)
      {
        v61 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
        *(_QWORD *)v6 = v59;
        *((_QWORD *)v6 + 1) = v57;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        goto LABEL_58;
      }
      ((void (*)(char *, _DWORD *))off_24C9C46F0[v60])(&v80, v6);
    }
    *(_QWORD *)v6 = v59;
    *((_QWORD *)v6 + 1) = v58;
    v6[270] = 0;
LABEL_58:
    sub_20EAB95B8(v73);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    if (*((_QWORD *)&v76 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    return;
  }
  v44 = v7 + 152;
  if ((_DWORD)v43 != -1)
  {
    if ((_DWORD)v43 == 1)
    {
      memcpy(v6, v44, 0x431uLL);
      return;
    }
    ((void (*)(__int128 *, _DWORD *))off_24C9C46F0[v43])(v73, v6);
  }
  v6[270] = -1;
  memcpy(v6, v44, 0x438uLL);
  v6[270] = 1;
}

void sub_20EAFAF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20EAB95B8((uint64_t *)va);
  sub_20E91D88C((_QWORD *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_20EAFAFA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E91D88C((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_20EAFAFCC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  _QWORD v26[135];
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *(std::__shared_weak_count **)(a3 + 56);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *(_QWORD *)(a3 + 48);
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_6:
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  LOBYTE(v28) = 0;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  v35 = 0uLL;
  v36 = 0;
  sub_20EAFA92C();
  *a1 = v7;
  a1[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)operator new(0x4E0uLL);
  v11 = v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24C9C4710;
  v10[24] = 0;
  v12 = v10 + 24;
  *((_DWORD *)v10 + 276) = -1;
  v13 = v27;
  if (v27 == -1)
  {
    v19 = v32;
    *(_OWORD *)(v10 + 1192) = v33;
    v20 = v35;
    *(_OWORD *)(v10 + 1208) = v34;
    *(_OWORD *)(v10 + 1224) = v20;
    v21 = v28;
    *(_OWORD *)(v10 + 1128) = v29;
    v22 = v31;
    *(_OWORD *)(v10 + 1144) = v30;
    *(_OWORD *)(v10 + 1160) = v22;
    *(_OWORD *)(v10 + 1176) = v19;
    v10[1240] = v36;
    *(_OWORD *)(v10 + 1112) = v21;
    a1[2] = v12;
    a1[3] = v10;
    if (!v6)
      return;
    goto LABEL_15;
  }
  ((void (*)(char *, char *, _QWORD *))*(&off_24C9C4750 + v27))(&v25, v12, v26);
  v14 = v32;
  *(_OWORD *)(v11 + 1192) = v33;
  v15 = v35;
  *(_OWORD *)(v11 + 1208) = v34;
  *(_OWORD *)(v11 + 1224) = v15;
  v16 = v28;
  *(_OWORD *)(v11 + 1128) = v29;
  v17 = v31;
  *(_OWORD *)(v11 + 1144) = v30;
  *(_OWORD *)(v11 + 1160) = v17;
  *(_OWORD *)(v11 + 1176) = v14;
  *((_DWORD *)v11 + 276) = v13;
  v18 = v27;
  v11[1240] = v36;
  *(_OWORD *)(v11 + 1112) = v16;
  a1[2] = v12;
  a1[3] = v11;
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, _QWORD *))off_24C9C46F0[v18])(&v25, v26);
  if (v6)
  {
LABEL_15:
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20EAFB210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAFB250(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 1080);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9C46F0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 1080) = -1;
  return a1;
}

void sub_20EAFB2A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _OWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  _OWORD *v46;
  unint64_t v47;
  _OWORD v48[10];
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  unint64_t v67;

  if (!*(_BYTE *)(a1 + 1232))
    goto LABEL_12;
  if (*(_BYTE *)(a1 + 563))
  {
    v4 = !*(_BYTE *)(a1 + 1080) || *(_BYTE *)(a1 + 1216) == 0;
    v5 = v4;
    if (!*(_BYTE *)(a1 + 753) && v5)
    {
      *(_BYTE *)(a1 + 120) = 1;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      if (*(_QWORD *)(a1 + 2936))
        goto LABEL_18;
      goto LABEL_12;
    }
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a1 + 121) != 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  if (!*(_QWORD *)(a1 + 2936))
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  do
  {
LABEL_18:
    while (1)
    {
      v64 = 0;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v53 = 0.0;
      v10 = *(_QWORD *)(a1 + 2896)
          + 80
          * (*(_QWORD *)(a1 + 2920)
           % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 2904) - *(_QWORD *)(a1 + 2896)) >> 4)));
      v11 = (*(uint64_t (**)(_QWORD, __int128 *, double *, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 128)
                                                                                            + 56))(*(_QWORD *)(a1 + 128), &v54, &v53, 0, 0, *(double *)(v10 + 64) + *(double *)(v10 + 72));
      kdebug_trace();
      if (!v11)
        break;
      if (v11 != 2)
      {
        v12 = *(_QWORD *)(a1 + 2896)
            + 80
            * (*(_QWORD *)(a1 + 2920)
             % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 2904) - *(_QWORD *)(a1 + 2896)) >> 4)));
        LOBYTE(v48[0]) = 0;
        v50 = 0;
        sub_20EAFAFCC(&v51, a1, v12);
        v13 = v66;
        if ((unint64_t)v66 >= v67)
        {
          v17 = sub_20EAFC160((void **)&v65, &v51);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
          v66 = v17;
          if (*((_QWORD *)&v52 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
          *v66 = v51;
          v51 = 0uLL;
          v13[1] = v52;
          v52 = 0uLL;
          v66 = v13 + 2;
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = *(_QWORD *)(a1 + 2920);
        v25 = *(_QWORD *)(a1 + 2896);
        v26 = v25 + 80 * v24;
        *(_OWORD *)v26 = 0u;
        *(_OWORD *)(v26 + 16) = 0u;
        v27 = *(std::__shared_weak_count **)(v26 + 40);
        *(_QWORD *)(v26 + 32) = 0;
        *(_QWORD *)(v26 + 40) = 0;
        if (v27)
          std::__shared_weak_count::__release_weak(v27);
        v28 = *(std::__shared_weak_count **)(v26 + 56);
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 56) = 0;
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
        v6 = v25 + 80 * v24;
        *(_QWORD *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 72) = 0;
        v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 2904) - *(_QWORD *)(a1 + 2896)) >> 4);
        v8 = *(_QWORD *)(a1 + 2920) + 1;
        if (v8 < v7)
          v7 = 0;
        *(_QWORD *)(a1 + 2920) = v8 - v7;
        v9 = *(_QWORD *)(a1 + 2936) - 1;
        *(_QWORD *)(a1 + 2936) = v9;
        if (v9)
          continue;
      }
      goto LABEL_57;
    }
    v14 = *(_QWORD *)(a1 + 2896);
    v15 = *(_QWORD *)(a1 + 2920) % (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 2904) - v14) >> 4));
    if (*(double *)(v14 + 80 * v15 + 64) + *(double *)(v14 + 80 * v15 + 72) > v53)
      break;
    v48[8] = v62;
    v48[9] = v63;
    v49 = v64;
    v48[4] = v58;
    v48[5] = v59;
    v48[6] = v60;
    v48[7] = v61;
    v48[0] = v54;
    v48[1] = v55;
    v48[2] = v56;
    v48[3] = v57;
    v50 = 1;
    sub_20EAFAFCC(&v51, a1, v14 + 80 * v15);
    v16 = v66;
    if ((unint64_t)v66 >= v67)
    {
      v29 = sub_20EAFC160((void **)&v65, &v51);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      v66 = v29;
      if (*((_QWORD *)&v52 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    else
    {
      *v66 = v51;
      v51 = 0uLL;
      v16[1] = v52;
      v52 = 0uLL;
      v66 = v16 + 2;
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(_QWORD *)(a1 + 2920);
    v37 = *(_QWORD *)(a1 + 2896);
    v38 = v37 + 80 * v36;
    *(_OWORD *)v38 = 0u;
    *(_OWORD *)(v38 + 16) = 0u;
    v39 = *(std::__shared_weak_count **)(v38 + 40);
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = 0;
    if (v39)
      std::__shared_weak_count::__release_weak(v39);
    v40 = *(std::__shared_weak_count **)(v38 + 56);
    *(_QWORD *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 56) = 0;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
    v41 = v37 + 80 * v36;
    *(_QWORD *)(v41 + 64) = 0;
    *(_QWORD *)(v41 + 72) = 0;
    v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 2904) - *(_QWORD *)(a1 + 2896)) >> 4);
    v43 = *(_QWORD *)(a1 + 2920) + 1;
    if (v43 < v42)
      v42 = 0;
    *(_QWORD *)(a1 + 2920) = v43 - v42;
    --*(_QWORD *)(a1 + 2936);
    v44 = *(unsigned int *)(*((_QWORD *)v66 - 2) + 1080);
    if ((_DWORD)v44 == -1)
      sub_20E877AB8();
    *(_QWORD *)&v48[0] = &v51;
    ((void (*)(_OWORD *))off_24C9C4770[v44])(v48);
    kdebug_trace();
  }
  while (*(_QWORD *)(a1 + 2936));
LABEL_57:
  v45 = v65;
  v46 = v66;
  if (v65 == v66)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (v45)
      operator delete(v45);
  }
  else
  {
    v47 = v67;
    *(_QWORD *)a2 = v65;
    *(_QWORD *)(a2 + 8) = v46;
    *(_QWORD *)(a2 + 16) = v47;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void sub_20EAFB820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20EAFB8AC((uint64_t)&a31);
  sub_20EAFB958((void **)(v31 - 112));
  _Unwind_Resume(a1);
}

void sub_20EAFB840(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFB958((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20EAFB854(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFB958((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20EAFB86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFB958((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20EAFB880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFB958((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20EAFB898(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFB958((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20EAFB8AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void **sub_20EAFB958(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

unint64_t sub_20EAFBA34(uint64_t a1)
{
  unint64_t result;
  char v3;
  __n128 v4;
  unint64_t v5;
  char v6;
  __int128 v9;
  double v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  const double *v20;
  double v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  double v25;
  float64x2_t v27;
  double v31;
  uint64_t v32;
  float64x2x3_t v33;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  *(double *)&result = COERCE_DOUBLE(kdebug_trace());
  if (*(_DWORD *)(a1 + 2444))
  {
    *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128)));
    if (*(_BYTE *)(a1 + 1232))
    {
      if (v3 && *(_BYTE *)(a1 + 1416))
      {
        v5 = result;
        v6 = *(_BYTE *)(a1 + 563);
        if (v6)
        {
          if (*(_BYTE *)(a1 + 1080))
            _ZF = *(_BYTE *)(a1 + 1216) == 0;
          else
            _ZF = 1;
          v6 = _ZF && *(_BYTE *)(a1 + 753) == 0;
        }
        v4.n128_u64[0] = result;
        if (*(_BYTE *)(a1 + 2840) && *(double *)(a1 + 160) + 1.0 < *(double *)&result)
        {
          *(_BYTE *)(a1 + 121) = 1;
        }
        else if ((v6 & 1) == 0 && !*(_BYTE *)(a1 + 121))
        {
          return result;
        }
        if (*(double *)(a1 + 1408) + 0.1 < *(double *)&result)
        {
          v32 = 0;
          (*(void (**)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 128) + 56))(*(_QWORD *)(a1 + 128), a1 + 1240, &v32, 0, 0, v4);
          v9 = *(_OWORD *)(a1 + 1256);
          *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 1240);
          v10 = *(double *)(a1 + 1400);
          v12 = *(_OWORD *)(a1 + 1368);
          v11 = *(int8x16_t *)(a1 + 1384);
          v14 = *(_OWORD *)(a1 + 1336);
          v13 = *(_OWORD *)(a1 + 1352);
          v16 = *(_OWORD *)(a1 + 1304);
          v15 = *(_OWORD *)(a1 + 1320);
          v18 = *(_OWORD *)(a1 + 1272);
          v17 = *(_OWORD *)(a1 + 1288);
          *(double *)(a1 + 328) = v10;
          *(_OWORD *)(a1 + 296) = v12;
          *(int8x16_t *)(a1 + 312) = v11;
          *(_OWORD *)(a1 + 264) = v14;
          *(_OWORD *)(a1 + 280) = v13;
          *(_OWORD *)(a1 + 232) = v16;
          *(_OWORD *)(a1 + 248) = v15;
          *(_OWORD *)(a1 + 200) = v18;
          *(_OWORD *)(a1 + 216) = v17;
          *(_OWORD *)(a1 + 184) = v9;
          *(_QWORD *)(a1 + 1408) = v5;
          v19 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 160) = v5;
          if (*(_BYTE *)(a1 + 736))
          {
            v20 = (const double *)(a1 + 640);
            v31 = *(double *)v11.i64;
            v22 = vextq_s8(v11, v11, 8uLL).u64[0];
            v21 = v10;
            *(_QWORD *)(a1 + 632) = v5;
            *(_QWORD *)(a1 + 704) = *(_QWORD *)(a1 + 1304);
            v23 = *(_OWORD *)(a1 + 1288);
            *(_OWORD *)(a1 + 672) = *(_OWORD *)(a1 + 1272);
            *(_OWORD *)(a1 + 688) = v23;
            v24 = *(_OWORD *)(a1 + 1256);
            *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 1240);
            *(_OWORD *)(a1 + 656) = v24;
            v33 = vld3q_f64(v20);
            v25 = *(double *)(a1 + 704);
            _Q4 = *(_OWORD *)(a1 + 688);
            v27 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v33.val[0], v31), (float64x2_t)vdupq_n_s64(v22), v33.val[1]), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v21), v33.val[2]);
            *(_QWORD *)&v33.val[1].f64[0] = v22;
            __asm { FMLA            D0, D1, V4.D[1] }
            *(float64x2_t *)(a1 + 712) = vnegq_f64(v27);
            *(double *)(a1 + 728) = -(v33.val[0].f64[0] + v25 * v21);
          }
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 48))(*(_QWORD *)(a1 + 128), a1 + 152);
          *(double *)&result = COERCE_DOUBLE(kdebug_trace());
          *(_QWORD *)(a1 + 160) = v19;
        }
      }
    }
  }
  return result;
}

void sub_20EAFBC68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;

  sub_20EAF8D04((uint64_t *)(a1 + 2848), (__int128 *)a2);
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(std::__shared_weak_count **)(a2 + 88);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(std::__shared_weak_count **)(a2 + 104);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  if (v14)
  {
    v19 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = v10;
  v30 = v13;
  v31 = v14;
  if (v14)
  {
    v21 = (unint64_t *)&v14->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v10)
  {
    v23 = (unint64_t *)&v10->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v32 = *(_OWORD *)(a2 + 112);
  sub_20EAF8ED8((uint64_t *)(a1 + 2896), &v25);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  kdebug_trace();
  sub_20EAFB2A8(a1, a3);
}

void sub_20EAFBDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EAF8694((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAFBE10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v4 = *a2;
  if (!*(_BYTE *)(a1 + 1232))
  {
    v11 = a2[1];
    *(_QWORD *)(a1 + 136) = v4;
    *(_QWORD *)(a1 + 144) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    memcpy((void *)(a1 + 152), a2 + 2, 0x438uLL);
    *(_BYTE *)(a1 + 1232) = 1;
    if (!*(_BYTE *)(a1 + 563))
      goto LABEL_25;
    goto LABEL_17;
  }
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = v5;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  memcpy((void *)(a1 + 152), a2 + 2, 0x431uLL);
  if (*(_BYTE *)(a1 + 1232))
  {
    if (!*(_BYTE *)(a1 + 563))
      goto LABEL_25;
LABEL_17:
    if (*(_BYTE *)(a1 + 1080))
      v14 = *(_BYTE *)(a1 + 1216) == 0;
    else
      v14 = 1;
    v15 = v14;
    if (!*(_BYTE *)(a1 + 753) && (v15 & 1) != 0)
      goto LABEL_40;
LABEL_25:
    if (*(_BYTE *)(a1 + 121))
      goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 120))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128));
    v16 = *(_BYTE *)(a1 + 1232);
    if (v16)
      v16 = *(_BYTE *)(a1 + 563)
         && (*(_BYTE *)(a1 + 1080) ? (v17 = *(_BYTE *)(a1 + 1216) == 0) : (v17 = 1),
             !v17 ? (v18 = 0) : (v18 = 1),
             !*(_BYTE *)(a1 + 753) && (v18 & 1) != 0)
         || *(_BYTE *)(a1 + 121) != 0;
    *(_BYTE *)(a1 + 120) = v16;
  }
LABEL_40:
  v19 = a2[24];
  v21 = *((_OWORD *)a2 + 10);
  v20 = *((_OWORD *)a2 + 11);
  v23 = *((_OWORD *)a2 + 8);
  v22 = *((_OWORD *)a2 + 9);
  v25 = *((_OWORD *)a2 + 6);
  v24 = *((_OWORD *)a2 + 7);
  v26 = *((_OWORD *)a2 + 5);
  v27 = *((_OWORD *)a2 + 2);
  v28 = *((_OWORD *)a2 + 3);
  v29 = a2[3];
  v30 = *(unsigned __int8 *)(a1 + 1416);
  *(_OWORD *)(a1 + 1272) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 1288) = v26;
  *(_OWORD *)(a1 + 1304) = v25;
  *(_OWORD *)(a1 + 1320) = v24;
  *(_OWORD *)(a1 + 1336) = v23;
  *(_OWORD *)(a1 + 1352) = v22;
  *(_OWORD *)(a1 + 1368) = v21;
  *(_OWORD *)(a1 + 1384) = v20;
  *(_QWORD *)(a1 + 1400) = v19;
  *(_OWORD *)(a1 + 1240) = v27;
  *(_OWORD *)(a1 + 1256) = v28;
  if (!v30)
    *(_BYTE *)(a1 + 1416) = 1;
  *(_QWORD *)(a1 + 1408) = v29;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 128) + 48))(*(_QWORD *)(a1 + 128), a2 + 2);
  kdebug_trace();
  return 1;
}

void sub_20EAFC00C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_BYTE *)(a1 + 121) = 0;
  if (*(_BYTE *)(a2 + 427)
    && (*(_BYTE *)(a2 + 944) ? (v6 = *(_BYTE *)(a2 + 1080) == 0) : (v6 = 1),
        !v6 ? (v7 = 0) : (v7 = 1),
        !*(_BYTE *)(a2 + 617) ? (v8 = v7 == 0) : (v8 = 1),
        !v8 && *(_DWORD *)(a1 + 2444)))
  {
    v9 = *(_QWORD *)a2;
    if (*(_BYTE *)(a1 + 1232))
    {
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(std::__shared_weak_count **)(a1 + 144);
      *(_QWORD *)(a1 + 136) = v9;
      *(_QWORD *)(a1 + 144) = v10;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      memcpy((void *)(a1 + 152), (const void *)(a2 + 16), 0x431uLL);
      sub_20EAFB2A8(a1, a3);
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 136) = v9;
      *(_QWORD *)(a1 + 144) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      memcpy((void *)(a1 + 152), (const void *)(a2 + 16), 0x438uLL);
      *(_BYTE *)(a1 + 1232) = 1;
      sub_20EAFB2A8(a1, a3);
    }
  }
  else
  {
    sub_20EAFBE10(a1, (uint64_t *)a2);
    sub_20EAFB2A8(a1, a3);
  }
}

_OWORD *sub_20EAFC160(void **a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v2];
  v12 = &v10[v9];
  v13 = *a2;
  v14 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v15 = v11 + 32;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != *a1)
  {
    do
    {
      v18 = *((_OWORD *)v17 - 2);
      v17 -= 32;
      *((_OWORD *)v11 - 2) = v18;
      v11 -= 32;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_OWORD *)v11 + 1) = *((_OWORD *)v17 + 1);
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
    }
    while (v17 != v16);
    v17 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    while (1)
    {
      if (v19 == v17)
        goto LABEL_24;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (!v20)
        goto LABEL_16;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
        if (!v23)
          goto LABEL_10;
      }
      else
      {
LABEL_16:
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
        if (!v23)
          goto LABEL_10;
      }
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
LABEL_10:
      v19 -= 32;
    }
  }
  *a1 = v11;
  a1[1] = v15;
  a1[2] = v12;
LABEL_24:
  if (v17)
    operator delete(v17);
  return v15;
}

void sub_20EAFC2DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAFC2EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAFC31C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 1104);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C9C46F0[v2])(&v3, result + 24);
  *(_DWORD *)(v1 + 1104) = -1;
  return result;
}

__n128 sub_20EAFC374(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void *sub_20EAFC384(int a1, void *__dst, void *__src)
{
  return memcpy(__dst, __src, 0x438uLL);
}

void sub_20EAFC394(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

double sub_20EAFC3F0(int a1, char *__dst)
{
  double result;
  _OWORD v4[25];

  *(_OWORD *)((char *)&v4[22] + 8) = 0u;
  *(_OWORD *)((char *)&v4[23] + 8) = 0u;
  *(_OWORD *)((char *)&v4[20] + 8) = 0u;
  *(_OWORD *)((char *)&v4[21] + 8) = 0u;
  *(_OWORD *)((char *)&v4[18] + 8) = 0u;
  *(_OWORD *)((char *)&v4[19] + 8) = 0u;
  *(_OWORD *)((char *)&v4[16] + 8) = 0u;
  *(_OWORD *)((char *)&v4[17] + 8) = 0u;
  *((_QWORD *)&v4[24] + 1) = 0;
  *(_OWORD *)((char *)&v4[15] + 8) = 0u;
  *(_OWORD *)((char *)&v4[14] + 8) = 0u;
  *(_OWORD *)((char *)&v4[13] + 8) = 0u;
  *(_OWORD *)((char *)&v4[12] + 8) = 0u;
  *(_OWORD *)((char *)&v4[11] + 8) = 0u;
  *(_DWORD *)(__dst + 401) = 0;
  *((_DWORD *)__dst + 101) = 0;
  *(_WORD *)(__dst + 413) = 0;
  __dst[415] = 0;
  *((_WORD *)__dst + 215) = 0;
  *(_DWORD *)(__dst + 426) = 0;
  *(_OWORD *)(__dst + 433) = 0u;
  *(_OWORD *)(__dst + 449) = 0u;
  *((_QWORD *)__dst + 58) = 0;
  *(_DWORD *)(__dst + 473) = 0;
  *((_DWORD *)__dst + 119) = 0;
  *(_OWORD *)(__dst + 481) = 0u;
  *(_OWORD *)(__dst + 497) = 0u;
  *(_OWORD *)(__dst + 513) = 0u;
  *(_OWORD *)(__dst + 529) = 0u;
  *(_OWORD *)(__dst + 545) = 0u;
  *(_OWORD *)(__dst + 561) = 0u;
  *((_QWORD *)__dst + 72) = 0;
  *(_DWORD *)(__dst + 585) = 0;
  *((_DWORD *)__dst + 147) = 0;
  *(_WORD *)(__dst + 605) = 0;
  __dst[607] = 0;
  *((_OWORD *)__dst + 56) = 0u;
  *(_OWORD *)(__dst + 865) = 0u;
  *(_OWORD *)(__dst + 881) = 0u;
  *(_OWORD *)(__dst + 833) = 0u;
  *(_OWORD *)(__dst + 849) = 0u;
  *(_OWORD *)(__dst + 801) = 0u;
  *(_OWORD *)(__dst + 817) = 0u;
  *(_OWORD *)(__dst + 769) = 0u;
  *(_OWORD *)(__dst + 785) = 0u;
  *(_OWORD *)(__dst + 737) = 0u;
  *(_OWORD *)(__dst + 753) = 0u;
  *(_OWORD *)(__dst + 705) = 0u;
  *(_OWORD *)(__dst + 721) = 0u;
  *(_OWORD *)(__dst + 673) = 0u;
  *(_OWORD *)(__dst + 689) = 0u;
  *(_OWORD *)(__dst + 641) = 0u;
  *(_OWORD *)(__dst + 657) = 0u;
  *(_OWORD *)(__dst + 609) = 0u;
  *(_OWORD *)(__dst + 625) = 0u;
  *((_DWORD *)__dst + 229) = 0;
  *(_DWORD *)(__dst + 913) = 0;
  *(_DWORD *)(__dst + 1057) = 0;
  *((_DWORD *)__dst + 265) = 0;
  *(_DWORD *)(__dst + 1065) = 0;
  *((_DWORD *)__dst + 267) = 0;
  memset(v4, 0, 185);
  *((_QWORD *)__dst + 128) = 0x3FF0000000000000;
  *((_OWORD *)__dst + 60) = xmmword_210314E40;
  *((_OWORD *)__dst + 61) = *(_OWORD *)algn_210314E50;
  *((_OWORD *)__dst + 62) = xmmword_210314E60;
  *((_OWORD *)__dst + 63) = unk_210314E70;
  memcpy(__dst, v4, 0x190uLL);
  __dst[400] = 0;
  *((_DWORD *)__dst + 102) = 65792;
  __dst[412] = 1;
  *((_QWORD *)__dst + 52) = 0xBFF0000000000000;
  *((_WORD *)__dst + 212) = 1;
  __dst[432] = 0;
  __dst[472] = 0;
  __dst[480] = 0;
  __dst[584] = 0;
  result = 0.0;
  *((_QWORD *)__dst + 74) = 0;
  __dst[600] = 2;
  *(_DWORD *)(__dst + 601) = 0;
  __dst[608] = 0;
  __dst[912] = 0;
  *((_QWORD *)__dst + 115) = -1;
  *((_QWORD *)__dst + 129) = 0;
  *((_QWORD *)__dst + 131) = 0;
  *((_QWORD *)__dst + 130) = 0;
  __dst[1056] = 0;
  __dst[1064] = 0;
  __dst[1072] = 0;
  *((_OWORD *)__dst + 58) = 0u;
  *((_OWORD *)__dst + 59) = 0u;
  return result;
}

uint64_t sub_20EAFC5F0(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return *(_QWORD *)(**(_QWORD **)a2 + 32);
  else
    return 3;
}

uint64_t sub_20EAFC614(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL sub_20EAFC620(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 && *(_BYTE *)(**(_QWORD **)a2 + 216) != 0;
}

uint64_t sub_20EAFC644(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 928);
}

double sub_20EAFC64C(_QWORD ***a1, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  double result;

  v2 = **a2;
  v3 = (_QWORD *)***a1;
  v4 = *(*a1)[1];
  *v3 = *(_QWORD *)(v2 + 248);
  v3[1] = *(_QWORD *)(v2 + 256);
  v3[2] = *(_QWORD *)(v2 + 264);
  v3[3] = *(_QWORD *)(v2 + 272);
  v3[4] = *(_QWORD *)(v2 + 280);
  v3[5] = *(_QWORD *)(v2 + 288);
  v3[6] = *(_QWORD *)(v2 + 296);
  v3[7] = *(_QWORD *)(v2 + 304);
  v3[8] = *(_QWORD *)(v2 + 312);
  *(_QWORD *)v4 = *(_QWORD *)(v2 + 320);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 328);
  result = *(double *)(v2 + 336);
  *(double *)(v4 + 16) = result;
  return result;
}

double sub_20EAFC6C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  double result;

  v2 = **(_QWORD ***)(*(_QWORD *)a1 + 16);
  v3 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  *v2 = *(_QWORD *)(a2 + 960);
  v2[1] = *(_QWORD *)(a2 + 968);
  v2[2] = *(_QWORD *)(a2 + 976);
  v2[3] = *(_QWORD *)(a2 + 984);
  v2[4] = *(_QWORD *)(a2 + 992);
  v2[5] = *(_QWORD *)(a2 + 1000);
  v2[6] = *(_QWORD *)(a2 + 1008);
  v2[7] = *(_QWORD *)(a2 + 1016);
  v2[8] = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)v3 = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 1040);
  result = *(double *)(a2 + 1048);
  *(double *)(v3 + 16) = result;
  return result;
}

BOOL sub_20EAFC73C(uint64_t a1, _QWORD *a2)
{
  return *a2 && **(_BYTE **)*a2 != 0;
}

uint64_t sub_20EAFC760(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 603);
}

BOOL sub_20EAFC768(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 && *(_BYTE *)(**(_QWORD **)a2 + 5049) != 0;
}

uint64_t sub_20EAFC790(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 425);
}

uint64_t sub_20EAFC798(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  void **v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  size_t v42;
  size_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  const char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  const char *v99;
  const char *v100;
  _QWORD v101[3];
  int v102;
  const char *v103;
  int v104;
  const char *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__dst[2];
  int64_t v109;
  void *v110[2];
  _QWORD v111[3];
  const void *v112;
  uint64_t v113;
  const void *v114;
  unint64_t v115;
  void *__p;
  char v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  char *v124;
  std::__shared_weak_count *v125;
  _QWORD *v126;
  __int128 v127;
  _BYTE v128[24];
  __int128 v129;
  void *v130[2];
  unint64_t v131;
  char v132;
  _QWORD v133[5];

  v133[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(double *)a2 < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 60, (uint64_t)"config.min_imu_interval_sec >= 0.0f", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 8) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 61, (uint64_t)"config.max_imu_interval_sec > 0.0f", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 32) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp",
         62,
         (uint64_t)"config.min_frame_interval_sec >= 0",
         34,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *(double *)(a2 + 40) <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 63, (uint64_t)"config.max_frame_interval_sec > 0", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 64) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 64, (uint64_t)"config.significant_data_drop_interval_sec > 0", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(a2 + 80)&& (*(double *)(a2 + 16) < 0.0&& sub_21023D5B4(
          "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp",
          67,
          (uint64_t)"config.min_imu_latency_sec >= 0.0f",
          34,
          (uint64_t)"",
          0,
          (void (*)(void **))sub_21023DDB0)
     || *(double *)(a2 + 24) <= 0.0
     && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 68, (uint64_t)"config.max_imu_latency_sec > 0.0f", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 48) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp", 69, (uint64_t)"config.min_frame_latency_sec >= 0", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 56) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIODataVerification.cpp",
          70,
          (uint64_t)"config.max_frame_latency_sec > 0",
          32,
          (uint64_t)"",
          0,
          (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254A5B250);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B250))
  {
    sub_21021D3D8(v128);
    sub_20E8610C0(v110, "cv3d.vio.odometry_engine");
    sub_20E8C4068((uint64_t **)v128, (uint64_t)v110, &qword_254A5B248);
    if (SHIBYTE(v111[0]) < 0)
      operator delete(v110[0]);
    __cxa_guard_release(&qword_254A5B250);
  }
  v121 = qword_254A5B248;
  if (**(int **)(qword_254A5B248 + 56) <= 3)
  {
    v9 = *(unsigned __int8 *)(qword_254A5B248 + 72);
    v10 = sub_20E8C31DC(qword_254A5B248, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10)
    {
      sub_20E863438((uint64_t)v110);
      v12 = sub_20E86A980(v111, (uint64_t)"VIODataVerification ctor: ", 26);
      v13 = sub_20EAF7A28(v12);
      sub_20E86A980(v13, (uint64_t)"\n", 1);
      if ((v119 & 0x10) != 0)
      {
        v16 = v118;
        if (v118 < v115)
        {
          v118 = v115;
          v16 = v115;
        }
        v17 = v114;
        v14 = v16 - (_QWORD)v114;
        if (v16 - (unint64_t)v114 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_82;
      }
      else
      {
        if ((v119 & 8) == 0)
        {
          v14 = 0;
          HIBYTE(v109) = 0;
          v15 = __dst;
          goto LABEL_37;
        }
        v17 = v112;
        v14 = v113 - (_QWORD)v112;
        if ((unint64_t)(v113 - (_QWORD)v112) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
          sub_20E860B7C();
      }
      if (v14 >= 0x17)
      {
        v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v18 = v14 | 7;
        v19 = v18 + 1;
        v15 = (void **)operator new(v18 + 1);
        __dst[1] = (void *)v14;
        v109 = v19 | 0x8000000000000000;
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(v109) = v14;
        v15 = __dst;
        if (!v14)
        {
LABEL_37:
          *((_BYTE *)v15 + v14) = 0;
          v101[0] = &v121;
          v101[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v101[2] = std::chrono::system_clock::now().__d_.__rep_;
          v102 = 3;
          v103 = "unknown file";
          v104 = 73;
          v106 = 0;
          v107 = 0;
          v105 = "unknown function";
          if (v109 >= 0)
            v20 = (const char *)__dst;
          else
            v20 = (const char *)__dst[0];
          v21 = *(_QWORD *)v101[0];
          v22 = (const char *)(*(_QWORD *)v101[0] + 16);
          v100 = v22;
          if (*(char *)(*(_QWORD *)v101[0] + 39) < 0)
          {
            v22 = *(const char **)(v21 + 16);
            v23 = *(_QWORD *)(v21 + 24);
            v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v25 & 1) != 0)
              goto LABEL_44;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)v101[0] + 39);
            v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v24 & 1) != 0)
              goto LABEL_44;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v128);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v128);
            if ((_BYTE)v129 && (v128[23] & 0x80000000) != 0)
              operator delete(*(void **)v128);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_44:
          if (byte_254A4A4F8[23] >= 0)
            v26 = byte_254A4A4F8;
          else
            v26 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v27 = byte_254A4A4F8[23];
          else
            v27 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v128 = os_log_create(v26, v22);
          v28 = &v128[8];
          if (v27 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v27 >= 0x17)
          {
            v99 = v22;
            v29 = v21;
            v30 = v11;
            v31 = v20;
            v32 = v9;
            v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v33 = v27 | 7;
            v34 = v33 + 1;
            v28 = operator new(v33 + 1);
            *(_QWORD *)&v128[16] = v27;
            *(_QWORD *)&v129 = v34 | 0x8000000000000000;
            *(_QWORD *)&v128[8] = v28;
            v9 = v32;
            v20 = v31;
            v11 = v30;
            v21 = v29;
            v22 = v99;
          }
          else
          {
            BYTE7(v129) = v27;
            if (!v27)
            {
LABEL_58:
              v28[v27] = 0;
              BYTE8(v129) = 1;
              v35 = v130;
              if (v23 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v23 >= 0x17)
              {
                v37 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v23 | 7) != 0x17)
                  v37 = v23 | 7;
                v38 = v37 + 1;
                v35 = (void **)operator new(v37 + 1);
                v130[1] = (void *)v23;
                v131 = v38 | 0x8000000000000000;
                v130[0] = v35;
              }
              else
              {
                HIBYTE(v131) = v23;
                if (!v23)
                {
                  LOBYTE(v130[0]) = 0;
                  v132 = 1;
                  v36 = *(NSObject **)v128;
                  if ((SHIBYTE(v131) & 0x80000000) == 0)
                    goto LABEL_62;
                  goto LABEL_68;
                }
              }
              memmove(v35, v22, v23);
              *((_BYTE *)v35 + v23) = 0;
              v132 = 1;
              v36 = *(NSObject **)v128;
              if ((SHIBYTE(v131) & 0x80000000) == 0)
              {
LABEL_62:
                if (!BYTE8(v129))
                  goto LABEL_71;
                goto LABEL_69;
              }
LABEL_68:
              operator delete(v130[0]);
              if (!BYTE8(v129))
                goto LABEL_71;
LABEL_69:
              if (SBYTE7(v129) < 0)
                operator delete(*(void **)&v128[8]);
LABEL_71:
              if (*(_QWORD *)v128)
                os_release(*(void **)v128);
              if (!v11 || !*(_QWORD *)(v11 + 24))
              {
                os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
                *(_DWORD *)v128 = 136315138;
                *(_QWORD *)&v128[4] = v20;
                v45 = (void *)_os_log_send_and_compose_impl();
                if (v45)
                  free(v45);
                goto LABEL_147;
              }
              v39 = _os_log_pack_size();
              v40 = (std::__shared_weak_count_vtbl *)operator new(v39, (std::align_val_t)8uLL);
              v41 = (std::__shared_weak_count *)operator new();
              v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v41->__shared_owners_ = 0;
              v41->__shared_weak_owners_ = 0;
              v41[1].__vftable = v40;
              *(_QWORD *)&v122 = v40;
              *((_QWORD *)&v122 + 1) = v40;
              v124 = 0;
              v125 = 0;
              v123 = v41;
              v42 = strlen(v20);
              if (v42 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v43 = v42;
              if (v42 >= 0x17)
              {
                v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v46 = v42 | 7;
                v47 = v46 + 1;
                v44 = operator new(v46 + 1);
                *(_QWORD *)&v127 = v43;
                *((_QWORD *)&v127 + 1) = v47 | 0x8000000000000000;
                v126 = v44;
              }
              else
              {
                HIBYTE(v127) = v42;
                v44 = &v126;
                if (!v42)
                {
LABEL_87:
                  *((_BYTE *)v44 + v43) = 0;
                  v48 = v126;
                  v133[0] = v127;
                  *(_QWORD *)((char *)v133 + 7) = *(_QWORD *)((char *)&v127 + 7);
                  v49 = HIBYTE(v127);
                  v50 = operator new(0x38uLL);
                  v50[1] = 0;
                  v50[2] = 0;
                  v50[3] = off_24C9ABC20;
                  *v50 = &off_24C9ABBD0;
                  v51 = v133[0];
                  v50[4] = v48;
                  v50[5] = v51;
                  *(_QWORD *)((char *)v50 + 47) = *(_QWORD *)((char *)v133 + 7);
                  *((_BYTE *)v50 + 55) = v49;
                  v133[0] = 0;
                  *(_QWORD *)((char *)v133 + 7) = 0;
                  v52 = v125;
                  v124 = (char *)(v50 + 3);
                  v125 = (std::__shared_weak_count *)v50;
                  if (v52)
                  {
                    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(p_shared_owners);
                    while (__stlxr(v54 - 1, p_shared_owners));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  *(_OWORD *)v128 = v122;
                  v55 = v124;
                  *(_QWORD *)&v128[16] = v123;
                  if (v123)
                  {
                    v56 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v57 = __ldxr(v56);
                    while (__stxr(v57 + 1, v56));
                  }
                  v58 = v125;
                  *(_QWORD *)&v129 = v55;
                  *((_QWORD *)&v129 + 1) = v125;
                  if (v125)
                  {
                    v59 = (unint64_t *)&v125->__shared_owners_;
                    do
                      v60 = __ldxr(v59);
                    while (__stxr(v60 + 1, v59));
                    v130[0] = v55;
                    do
                      v61 = __ldaxr(v59);
                    while (__stlxr(v61 - 1, v59));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  else
                  {
                    v130[0] = v55;
                  }
                  v62 = v123;
                  if (v123)
                  {
                    v63 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
                  v65 = *(_QWORD *)v128;
                  if (*((char *)v130[0] + 31) >= 0)
                    v66 = (char *)v130[0] + 8;
                  else
                    v66 = (char *)*((_QWORD *)v130[0] + 1);
                  v67 = _os_log_pack_fill();
                  *(_DWORD *)v67 = 136315138;
                  *(_QWORD *)(v67 + 4) = v66;
                  v68 = operator new();
                  v69 = *(unsigned __int8 *)(v21 + 39);
                  v70 = *(const char **)(v21 + 16);
                  v71 = *(_QWORD *)(v21 + 24);
                  v72 = v129;
                  *(_OWORD *)(v68 + 8) = *(_OWORD *)&v128[8];
                  if ((v69 & 0x80u) != 0)
                    v69 = v71;
                  else
                    v70 = v100;
                  *(_QWORD *)v68 = v65;
                  *(_QWORD *)&v128[8] = 0;
                  *(_QWORD *)&v128[16] = 0;
                  *(_OWORD *)(v68 + 24) = v72;
                  v129 = 0uLL;
                  *(_QWORD *)(v68 + 40) = v70;
                  *(_QWORD *)(v68 + 48) = v69;
                  *(_BYTE *)(v68 + 56) = 1;
                  v126 = 0;
                  *(_QWORD *)&v122 = v68;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v122);
                  v73 = v122;
                  *(_QWORD *)&v122 = 0;
                  if (v73)
                  {
                    v74 = *(std::__shared_weak_count **)(v73 + 32);
                    if (v74)
                    {
                      v75 = (unint64_t *)&v74->__shared_owners_;
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    v77 = *(std::__shared_weak_count **)(v73 + 16);
                    if (v77)
                    {
                      v78 = (unint64_t *)&v77->__shared_owners_;
                      do
                        v79 = __ldaxr(v78);
                      while (__stlxr(v79 - 1, v78));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
                    v80 = v126;
                    v126 = 0;
                    if (v80)
                    {
                      v81 = (std::__shared_weak_count *)v80[4];
                      if (v81)
                      {
                        v82 = (unint64_t *)&v81->__shared_owners_;
                        do
                          v83 = __ldaxr(v82);
                        while (__stlxr(v83 - 1, v82));
                        if (!v83)
                        {
                          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                          std::__shared_weak_count::__release_weak(v81);
                        }
                      }
                      v84 = (std::__shared_weak_count *)v80[2];
                      if (v84)
                      {
                        v85 = (unint64_t *)&v84->__shared_owners_;
                        do
                          v86 = __ldaxr(v85);
                        while (__stlxr(v86 - 1, v85));
                        if (!v86)
                        {
                          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                          std::__shared_weak_count::__release_weak(v84);
                        }
                      }
                      MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
                    }
                  }
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
                  if (*((_QWORD *)&v129 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v90 = *(std::__shared_weak_count **)&v128[16];
                  if (*(_QWORD *)&v128[16])
                  {
                    v91 = (unint64_t *)(*(_QWORD *)&v128[16] + 8);
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
LABEL_147:
                  if (v9)
                  {
                    v93 = (const char *)__dst;
                    if (v109 < 0)
                      v93 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v101, "%s", v93);
                    sub_20E863570((uint64_t)v101);
                  }
                  sub_20E863570((uint64_t)v101);
                  v94 = v107;
                  if (v107)
                  {
                    v95 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  if (SHIBYTE(v109) < 0)
                    operator delete(__dst[0]);
                  v110[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v97 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)v110 + *((_QWORD *)v110[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v111[0] = v97;
                  v111[1] = MEMORY[0x24BEDB848] + 16;
                  if (v117 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v120);
                  goto LABEL_161;
                }
              }
              memcpy(v44, v20, v43);
              goto LABEL_87;
            }
          }
          memmove(v28, v26, v27);
          goto LABEL_58;
        }
      }
      memmove(v15, v17, v14);
      goto LABEL_37;
    }
  }
LABEL_161:
  if (*(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 128))
    *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

void sub_20EAFD524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ***sub_20EAFD6D4(void ***a1)
{
  if (*a1)
  {
    sub_20EAB9D1C((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_20EAFD70C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void **v20;
  void *v21;
  void *v22;
  void *v23;
  void **v24;
  void **v25;
  void **v26;

  v2 = *(void ***)a1;
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685)
      sub_20EABADD4();
    v4 = *(void ***)(a1 + 8);
    v5 = 216 * a2;
    v6 = (char *)operator new(216 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_8:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 * 8];
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 216) = *(_OWORD *)&v4[v9 - 27];
        *((_QWORD *)v10 - 25) = v4[v9 - 25];
        *(v11 - 27) = 0;
        *(v11 - 26) = 0;
        v12 = *(_OWORD *)&v4[v9 - 24];
        *(v11 - 25) = 0;
        *((_OWORD *)v10 - 12) = v12;
        *((_QWORD *)v10 - 22) = v4[v9 - 22];
        *(v11 - 23) = 0;
        *(v11 - 22) = 0;
        *(v11 - 24) = 0;
        v13 = *(_OWORD *)&v4[v9 - 11];
        v14 = *(_OWORD *)&v4[v9 - 9];
        v15 = *(_OWORD *)&v4[v9 - 7];
        *(_OWORD *)(v10 - 104) = *(_OWORD *)&v4[v9 - 13];
        *(_OWORD *)(v10 - 56) = v15;
        *(_OWORD *)(v10 - 72) = v14;
        *(_OWORD *)(v10 - 88) = v13;
        v16 = *(_OWORD *)&v4[v9 - 21];
        v17 = *(_OWORD *)&v4[v9 - 19];
        v18 = *(_OWORD *)&v4[v9 - 17];
        *(_OWORD *)(v10 - 120) = *(_OWORD *)&v4[v9 - 15];
        *(_OWORD *)(v10 - 136) = v18;
        *(_OWORD *)(v10 - 152) = v17;
        *(_OWORD *)(v10 - 168) = v16;
        *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 5];
        *((_QWORD *)v10 - 3) = v4[v9 - 3];
        *(v11 - 5) = 0;
        *(v11 - 4) = 0;
        *(v11 - 3) = 0;
        v19 = v4[v9 - 2];
        *(v10 - 8) = (char)v4[v9 - 1];
        *((_QWORD *)v10 - 2) = v19;
        v9 -= 27;
      }
      while (&v4[v9] != v2);
      v2 = *(void ***)a1;
      v20 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9 * 8];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v20 != v2)
      {
        do
        {
          v22 = *(v20 - 5);
          if (v22)
          {
            *(v20 - 4) = v22;
            operator delete(v22);
          }
          v23 = *(v20 - 24);
          if (v23)
          {
            *(v20 - 23) = v23;
            operator delete(v23);
          }
          v24 = v20 - 27;
          v25 = (void **)*(v20 - 27);
          if (v25)
          {
            v26 = (void **)*(v20 - 26);
            v21 = *(v20 - 27);
            if (v26 != v25)
            {
              do
              {
                if (*((_BYTE *)v26 - 8))
                {
                  if (*((char *)v26 - 9) < 0)
                    operator delete(*(v26 - 4));
                }
                v26 -= 17;
              }
              while (v26 != v25);
              v21 = *v24;
            }
            *(v20 - 26) = v25;
            operator delete(v21);
          }
          v20 -= 27;
        }
        while (v24 != v2);
      }
      if (v2)
        goto LABEL_8;
    }
  }
}

void **sub_20EAFD91C(void ***a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  char *v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  void **v31;
  void *v32;
  void *v33;
  void *v34;
  void **v35;
  void **v36;
  void **v37;

  v3 = 0x84BDA12F684BDA13 * (a1[1] - *a1);
  v4 = v3 + 1;
  if (v3 + 1 > 0x12F684BDA12F684)
    sub_20EABADD4();
  if (0x97B425ED097B426 * (a1[2] - *a1) > v4)
    v4 = 0x97B425ED097B426 * (a1[2] - *a1);
  if (0x84BDA12F684BDA13 * (a1[2] - *a1) >= 0x97B425ED097B42)
    v6 = 0x12F684BDA12F684;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x12F684BDA12F684)
      sub_20E877A38();
    v7 = (char *)operator new(216 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[216 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = (void **)&v7[216 * v6];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 6) = v12;
  *((_OWORD *)v8 + 3) = v10;
  *((_OWORD *)v8 + 4) = v11;
  v13 = *(_OWORD *)(a2 + 112);
  v14 = *(_OWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v8 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v8 + 10) = v15;
  *((_OWORD *)v8 + 7) = v13;
  *((_OWORD *)v8 + 8) = v14;
  *((_QWORD *)v8 + 23) = 0;
  *((_QWORD *)v8 + 24) = 0;
  *((_OWORD *)v8 + 11) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v16 = *(_QWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 192) = 0;
  v8[208] = *(_BYTE *)(a2 + 208);
  *((_QWORD *)v8 + 24) = v16;
  *((_QWORD *)v8 + 25) = v17;
  v18 = (void **)(v8 + 216);
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = v18;
    a1[2] = v9;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v8[v21 * 8];
      v23 = &v20[v21];
      *((_QWORD *)v22 - 26) = 0;
      *((_QWORD *)v22 - 25) = 0;
      *(_OWORD *)(v22 - 216) = *(_OWORD *)&v20[v21 - 27];
      *((_QWORD *)v22 - 25) = v20[v21 - 25];
      *(v23 - 27) = 0;
      *(v23 - 26) = 0;
      *(v23 - 25) = 0;
      *((_QWORD *)v22 - 23) = 0;
      *((_QWORD *)v22 - 22) = 0;
      *((_OWORD *)v22 - 12) = *(_OWORD *)&v20[v21 - 24];
      *((_QWORD *)v22 - 22) = v20[v21 - 22];
      *(v23 - 23) = 0;
      *(v23 - 22) = 0;
      *(v23 - 24) = 0;
      v24 = *(_OWORD *)&v20[v21 - 21];
      v25 = *(_OWORD *)&v20[v21 - 19];
      v26 = *(_OWORD *)&v20[v21 - 17];
      *(_OWORD *)(v22 - 120) = *(_OWORD *)&v20[v21 - 15];
      *(_OWORD *)(v22 - 136) = v26;
      *(_OWORD *)(v22 - 152) = v25;
      *(_OWORD *)(v22 - 168) = v24;
      v27 = *(_OWORD *)&v20[v21 - 13];
      v28 = *(_OWORD *)&v20[v21 - 11];
      v29 = *(_OWORD *)&v20[v21 - 9];
      *(_OWORD *)(v22 - 56) = *(_OWORD *)&v20[v21 - 7];
      *(_OWORD *)(v22 - 72) = v29;
      *(_OWORD *)(v22 - 88) = v28;
      *(_OWORD *)(v22 - 104) = v27;
      *((_QWORD *)v22 - 4) = 0;
      *((_QWORD *)v22 - 3) = 0;
      *(_OWORD *)(v22 - 40) = *(_OWORD *)&v20[v21 - 5];
      *((_QWORD *)v22 - 3) = v20[v21 - 3];
      *(v23 - 5) = 0;
      *(v23 - 4) = 0;
      *(v23 - 3) = 0;
      v30 = v20[v21 - 2];
      *(v22 - 8) = (char)v20[v21 - 1];
      *((_QWORD *)v22 - 2) = v30;
      v21 -= 27;
    }
    while (&v20[v21] != v19);
    v20 = *a1;
    v31 = a1[1];
    *a1 = (void **)&v8[v21 * 8];
    a1[1] = v18;
    a1[2] = v9;
    if (v31 != v20)
    {
      do
      {
        v33 = *(v31 - 5);
        if (v33)
        {
          *(v31 - 4) = v33;
          operator delete(v33);
        }
        v34 = *(v31 - 24);
        if (v34)
        {
          *(v31 - 23) = v34;
          operator delete(v34);
        }
        v35 = v31 - 27;
        v36 = (void **)*(v31 - 27);
        if (v36)
        {
          v37 = (void **)*(v31 - 26);
          v32 = *(v31 - 27);
          if (v37 != v36)
          {
            do
            {
              if (*((_BYTE *)v37 - 8) && *((char *)v37 - 9) < 0)
                operator delete(*(v37 - 4));
              v37 -= 17;
            }
            while (v37 != v36);
            v32 = *v35;
          }
          *(v31 - 26) = v36;
          operator delete(v32);
        }
        v31 -= 27;
      }
      while (v35 != v20);
    }
  }
  if (v20)
    operator delete(v20);
  return v18;
}

uint64_t sub_20EAFDBE8(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void ***)(a1 + 16);
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    v3 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
      operator delete(v3);
  }
  return a1;
}

void sub_20EAFDC58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C47D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAFDC68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C47D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAFDC98(uint64_t a1)
{
  return sub_20E991850(a1 + 24);
}

char *sub_20EAFDCA4(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20E867F44();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_20E877A38();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

uint64_t sub_20EAFDDD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void **v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void **v18;

  if (*(_BYTE *)(a1 + 488))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(void **)(a1 + 176);
      if (v3 != v2)
      {
        do
        {
          v5 = *(void **)(v3 - 176);
          if (v5)
          {
            *(_QWORD *)(v3 - 168) = v5;
            operator delete(v5);
          }
          v3 -= 272;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 176);
      }
      *(_QWORD *)(a1 + 184) = v2;
      operator delete(v4);
    }
  }
  sub_20EAFDF54(a1 + 112);
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(void **)(a1 + 64);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v8);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v12 = *(void ***)(a1 + 32);
    if (v12)
    {
      do
      {
        v18 = (void **)*v12;
        if (*((char *)v12 + 39) < 0)
          operator delete(v12[2]);
        operator delete(v12);
        v12 = v18;
      }
      while (v18);
    }
    v13 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v13)
      operator delete(v13);
  }
  v14 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

uint64_t sub_20EAFDF54(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v11;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      v9 = v7 - 1;
      do
      {
        v11 = (_QWORD *)*v9;
        *v9 = 0;
        if (v11)
          sub_20E990B40((uint64_t)v9, v11);
      }
      while (v9-- != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20EAFE028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 56);
      v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v8 = *(std::__shared_weak_count **)(a1 + 32);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 16))
    return a1;
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

uint64_t sub_20EAFE15C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  v2 = (_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v3;
  v4 = result + 16;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 8) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v4;
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_OWORD *)(result + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_OWORD *)(result + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(result + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_OWORD *)(result + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(result + 248) = *(_QWORD *)(a2 + 248);
  v7 = result + 256;
  v8 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(result + 256) = v8;
  v9 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(result + 264) = v9;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(a2 + 248) = a2 + 256;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
  }
  else
  {
    *(_QWORD *)(result + 248) = v7;
  }
  *(_QWORD *)(result + 272) = *(_QWORD *)(a2 + 272);
  v10 = result + 280;
  v11 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 280) = v11;
  v12 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 288) = v12;
  if (v12)
  {
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(a2 + 272) = a2 + 280;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_BYTE *)(result + 296) = 0;
    *(_BYTE *)(result + 336) = 0;
    if (!*(_BYTE *)(a2 + 336))
      return result;
  }
  else
  {
    *(_QWORD *)(result + 272) = v10;
    *(_BYTE *)(result + 296) = 0;
    *(_BYTE *)(result + 336) = 0;
    if (!*(_BYTE *)(a2 + 336))
      return result;
  }
  v13 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(result + 296) = v13;
  *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v14 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(result + 312) = v14;
  v15 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(result + 320) = v15;
  *(_DWORD *)(result + 328) = *(_DWORD *)(a2 + 328);
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(result + 304);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17)
        v16 %= v17;
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(_QWORD *)(v13 + 8 * v16) = result + 312;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
  }
  *(_BYTE *)(result + 336) = 1;
  return result;
}

uint64_t sub_20EAFE3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8)
          v7 %= v8;
      }
      else
      {
        v7 &= v8 - 1;
      }
      *(_QWORD *)(v4 + 8 * v7) = a1 + 32;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  sub_20EAFE59C((_QWORD *)(a1 + 64), a2 + 64);
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    v9 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = v9;
    v10 = *(_OWORD *)(a2 + 264);
    v11 = *(_OWORD *)(a2 + 280);
    v12 = *(_QWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 296) = v12;
    *(_OWORD *)(a1 + 280) = v11;
    *(_OWORD *)(a1 + 264) = v10;
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    v13 = *(_OWORD *)(a2 + 320);
    v14 = *(_OWORD *)(a2 + 336);
    v15 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 336) = v14;
    *(_OWORD *)(a1 + 352) = v15;
    *(_OWORD *)(a1 + 320) = v13;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 448) = 0;
    if (*(_BYTE *)(a2 + 448))
    {
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      v16 = *(_OWORD *)(a2 + 392);
      v17 = *(_OWORD *)(a2 + 408);
      v18 = *(_OWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_OWORD *)(a1 + 408) = v17;
      *(_OWORD *)(a1 + 424) = v18;
      *(_OWORD *)(a1 + 392) = v16;
      *(_BYTE *)(a1 + 448) = 1;
    }
    v19 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 465) = *(_OWORD *)(a2 + 465);
    *(_OWORD *)(a1 + 456) = v19;
    *(_BYTE *)(a1 + 488) = 1;
  }
  return a1;
}

void sub_20EAFE580(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20EAFDBE8(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EAFE59C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[3] = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  a1[4] = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  a1[5] = v5;
  sub_20EAFE690((uint64_t)(a1 + 6), a2 + 48);
  return a1;
}

void sub_20EAFE614(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAFE690(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  sub_20E990A10(a1, a2);
  return a1;
}

void sub_20EAFE6E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (_QWORD *)*v2;
  if (*v2)
  {
    v8 = *(_QWORD **)(v1 + 16);
    v9 = (_QWORD *)*v2;
    if (v8 != v7)
    {
      v10 = v8 - 1;
      do
      {
        v12 = (_QWORD *)*v10;
        *v10 = 0;
        if (v12)
          sub_20E990B40((uint64_t)v10, v12);
      }
      while (v10-- != v7);
      v9 = (_QWORD *)*v2;
    }
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAFE778(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(void **)(a1 + 72);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 48);
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 16);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_20EAFE7D8(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 a4, mach_timebase_info *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  _BYTE *v13;
  unint64_t v14;
  int v15;
  int v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  int8x8_t v22;
  unsigned __int128 v23;
  _OWORD *v24;
  __int128 v25;
  void *v26;
  void **v27;
  char *v28;
  int v29;
  void **v30;
  void **v31;
  char *v32;
  int v33;
  void **v34;
  void **v35;
  char *v36;
  int v37;
  void **v38;
  void **v39;
  char *v40;
  int v41;
  void **v42;
  void **v43;
  char *v44;
  int v45;
  void **v46;
  uint64_t v47;
  std::string::size_type v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  void ***v51;
  void *v52;
  char v53;
  uint64_t v54;
  unsigned __int8 v55;
  int v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  void **i;
  _BYTE *v66;
  mach_timebase_info v67;
  mach_timebase_info v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  void **v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void **v80;
  void **v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void **v85;
  char *v86;
  unint64_t v87;
  void **v88;
  void *v89;
  void *v90;
  void **v91;
  unint64_t v92;
  void **v93;
  unint64_t v94;
  void **v95;
  void **v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void **v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  void **v116;
  void **v117;
  unint64_t v118;
  char *v119;
  char *v120;
  int64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  void **v125;
  uint64_t v126;
  unint64_t v127;
  void **v128;
  void **v129;
  unint64_t v130;
  void **v131;
  char *v132;
  void **v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  __int128 *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  void **v146;
  uint64_t v147;
  __int128 v148;
  uint64_t **v149;
  uint64_t **v150;
  _OWORD *v151;
  __int128 v152;
  int v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  void *v163;
  unsigned int *v164;
  unsigned int *j;
  unint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t k;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  _QWORD *v178;
  unint64_t v179;
  int v180;
  int v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  _QWORD *v193;
  unint64_t v194;
  int v195;
  int v196;
  uint64_t *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  void *v205;
  _QWORD *v206;
  _QWORD *v207;
  void *v208;
  char v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  _BYTE *v213;
  char *v214;
  int v215;
  std::string::size_type v216;
  char *v217;
  int v218;
  void **v219;
  char *v220;
  int v221;
  void **v222;
  uint64_t v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void ***v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  mach_timebase_info *v230;
  mach_timebase_info v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  __int128 v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  void **v254;
  void **v255;
  void *v256;
  void **v257;
  void **v258;
  void *v259;
  uint64_t v260;
  mach_timebase_info v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  _OWORD *v283;
  __int128 v284;
  uint64_t v285;
  _QWORD *v286;
  unsigned int *v287;
  unsigned int *v288;
  unsigned int *v289;
  unsigned int *v290;
  std::string::size_type v291;
  unint64_t v292;
  int v293;
  void *v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  _BYTE *v298;
  _BYTE *v299;
  _BYTE *v300;
  unint64_t v301;
  int8x8_t v302;
  void **v303;
  unint64_t v304;
  void **v305;
  int64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _BYTE *v311;
  void **v312;
  void **v313;
  int64_t v314;
  unint64_t v315;
  void **v316;
  void *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _OWORD *v321;
  void **v322;
  uint64_t v323;
  __int128 v324;
  char v325;
  _BYTE *v326;
  unint64_t v327;
  int v328;
  void *v329;
  uint64_t v330;
  unint64_t v331;
  char v332;
  _BYTE *v333;
  _BYTE *v334;
  _BYTE *v335;
  unint64_t v336;
  int8x8_t v337;
  _BYTE *v338;
  char v339;
  _BYTE *v340;
  unsigned __int128 v341;
  unsigned __int128 v342;
  _BYTE *v343;
  _BYTE *v344;
  void *v345;
  _BYTE *v346;
  unsigned __int128 v347;
  unsigned __int128 v348;
  unsigned __int128 v349;
  uint64_t v350;
  unsigned __int8 v351;
  void *v352;
  unsigned int **v353;
  std::string::size_type *v354;
  void **v355;
  void **v356;
  int64_t v357;
  _OWORD *v358;
  unint64_t v359;
  uint64_t v360;
  void **v361;
  _QWORD *v362;
  _OWORD *v363;
  __int128 *v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  std::string::size_type v368;
  _BYTE *v369;
  _QWORD *v370;
  char *v371;
  uint64_t v372;
  std::string::size_type v373;
  void **v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::string::size_type v378;
  void *v379;
  uint64_t v380;
  unint64_t *v381;
  std::string::size_type v382;
  std::string::size_type v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *size;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  void **v406;
  void **v407;
  void *v408;
  void **v409;
  void **v410;
  void *v411;
  std::__shared_weak_count *v412;
  std::__shared_weak_count *v413;
  void *v414;
  unsigned __int8 v415;
  uint64_t v416;
  uint64_t m;
  unsigned __int8 v418;
  uint64_t v419;
  unint64_t v420;
  char *v421;
  char *v422;
  unsigned int *v423;
  unsigned int *v424;
  char *v425;
  unint64_t v426;
  uint8x8_t v427;
  unint64_t v428;
  uint64_t **v429;
  uint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  int v441;
  uint64_t *v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  void **v447;
  char *v448;
  char *v449;
  int v450;
  void **v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  void ***v455;
  void *v456;
  char v457;
  int v458;
  int v459;
  char *v460;
  char *v461;
  unint64_t v462;
  void **v463;
  uint64_t v464;
  char *v465;
  char *v466;
  int v467;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  char *v475;
  void ***v476;
  void ***v477;
  char v478;
  void ***v479;
  void ***v480;
  void ***v481;
  _BYTE *v482;
  _BYTE *v483;
  _BYTE *v484;
  _BYTE *v485;
  unsigned __int128 v486;
  uint64_t v487;
  unsigned __int8 v488;
  std::string::size_type *v489;
  unint64_t *v490;
  unint64_t v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::string::size_type v497;
  std::string::size_type v498;
  unint64_t *v499;
  unint64_t v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  int v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  void **v523;
  void **v524;
  void *v525;
  std::__shared_weak_count *v526;
  std::__shared_weak_count *v527;
  void *v528;
  unint64_t *v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  _QWORD *v535;
  _QWORD *v536;
  void *v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  void *v541;
  void *v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  void *v549;
  _QWORD *v550;
  std::__shared_weak_count *v551;
  void *__src;
  void *v553;
  uint64_t *v554;
  unint64_t v555;
  unint64_t *v556;
  unsigned int *v557;
  uint64_t v558;
  void *v559;
  uint64_t v562;
  void **v563;
  void **v564;
  uint64_t v565;
  unint64_t v566;
  _QWORD *v567;
  _QWORD *v568;
  uint64_t v569;
  unint64_t v571;
  uint64_t *v572;
  void *v573;
  unsigned int **v574;
  int v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unsigned int **v579;
  void *v580;
  uint64_t v581;
  unsigned int *v582;
  char v583;
  unsigned int *v584;
  void *v585;
  _BYTE *v586;
  int v587;
  void **v588;
  void **v589;
  unint64_t *v590;
  uint64_t v591;
  int v592;
  void *v593[2];
  _BYTE *v594;
  __int128 v595;
  void **v596;
  void *v597;
  std::__shared_weak_count *v598;
  _BYTE *v599;
  void *v600[2];
  _BYTE *v601;
  char v602;
  void *v603;
  void **v604;
  void **v605;
  int v606;
  __int16 v607;
  _DWORD v608[2];
  _DWORD v609[2];
  _DWORD v610[4];
  _DWORD v611[2];
  _DWORD v612[2];
  void *v613[2];
  void *v614;
  char v615;
  mach_timebase_info v616;
  unint64_t v617;
  void *v618;
  __int16 v619;
  void *v620;
  void *v621;
  char v622;
  _QWORD *v623;
  char v624;
  _DWORD v625[2];
  _DWORD v626[2];
  _DWORD v627[4];
  _DWORD v628[2];
  _DWORD v629[2];
  void *v630[2];
  mach_timebase_info v631;
  unsigned __int8 v632;
  char v633;
  void **v634;
  char v635;
  void **v636;
  char v637;
  void **v638;
  char v639;
  void **v640;
  char v641;
  void **v642;
  _DWORD v643[2];
  _DWORD v644[2];
  void *v645;
  void *v646;
  uint64_t v647;
  _DWORD v648[5];
  unsigned int v649;
  char v650[8];
  void **v651;
  uint64_t (**v652)();
  unint64_t v653;
  std::__shared_weak_count *v654;
  void *v655[3];
  std::string::size_type v656;
  char *v657;
  std::__shared_weak_count *v658;
  void ***v659;
  std::__shared_weak_count *v660;
  _QWORD v661[2];
  _BYTE __dst[48];
  __int128 v663;
  unsigned __int128 v664;
  __int128 v665;
  __int128 v666;
  void *v667;
  _BYTE v668[24];
  uint64_t v669;
  uint64_t v670;
  unsigned __int128 v671;
  void *v672[2];
  __int128 v673;
  _BYTE v674[9];
  __int128 v675;
  uint64_t v676;
  unsigned __int128 v677;
  char v678;
  _QWORD v679[2];
  void *v680[4];
  __int128 v681;
  void *v682;
  unsigned __int128 v683;
  uint64_t v684;
  uint64_t v685;
  char v686;
  void *v687;
  _BYTE v688[15];
  char v689;
  uint64_t v690;
  uint64_t v691;
  char v692;
  void *v693[2];
  _BYTE *v694;
  char v695;
  _QWORD v696[2];
  _QWORD v697[2];
  std::string v698;
  char v699;
  _BYTE v700[24];
  unsigned __int128 v701;
  char v702;
  _QWORD v703[2];
  _QWORD v704[2];
  mach_timebase_info info[3];
  _BYTE v706[32];
  unsigned __int128 v707;
  char v708;
  _QWORD v709[2];
  _QWORD v710[2];
  _QWORD v711[2];
  __int128 v712;
  _BYTE v713[7];
  __int16 v714;
  void *v715;
  _BYTE v716[15];
  char v717;
  uint64_t v718;
  uint64_t v719;
  char v720;
  void *__p[2];
  uint64_t v722;
  unsigned __int128 v723;
  unsigned __int8 v724;
  _QWORD v725[2];
  void *v726;
  _BYTE v727[15];
  char v728;
  char v729;
  __int128 v730;
  uint64_t v731;
  unsigned __int128 v732;
  char v733;
  std::string v734;
  unint64_t v735;
  std::__shared_weak_count *v736;
  uint64_t v737;

  v737 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return;
  if (!*(_BYTE *)(v5 + 40))
    return;
  if (!*(_QWORD *)(v5 + 24))
    return;
  v8 = (*(uint64_t (**)(_QWORD *, const char *, uint64_t))(a2[1] + 48))(a2 + 1, "cv3d.reloc.relocalization", 25);
  v550 = a2 + 1;
  v576 = (*(uint64_t (**)(_QWORD *, const char *, uint64_t))(*v550 + 48))(v550, "cv3d.reloc.relocalization.matches", 33);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v547 = v8;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v576 + 24))(v576))
  {
    return;
  }
  v10 = *(_QWORD *)(v9 + 152);
  v546 = *(_QWORD *)(v9 + 160);
  if (v10 == v546)
    return;
  v569 = a4;
  while (2)
  {
    v650[0] = 0;
    v651 = 0;
    v649 = *(_DWORD *)(v10 + 24);
    v556 = (unint64_t *)(v10 + 16);
    sub_20EB04900((unint64_t *)(v10 + 16), (std::string *)"_", &v649);
    __src = v645;
    v11 = v646;
    v648[0] = v647;
    *(_DWORD *)((char *)v648 + 3) = *(_DWORD *)((char *)&v647 + 3);
    v12 = SHIBYTE(v647);
    v646 = 0;
    v645 = 0;
    v647 = 0;
    v557 = (unsigned int *)(v10 + 32);
    sub_20EB04AE4("keyframe_", (unsigned int *)(v10 + 32));
    v13 = v680[0];
    v725[0] = v680[1];
    *(void **)((char *)v725 + 7) = *(void **)((char *)&v680[1] + 7);
    v14 = HIBYTE(v680[2]);
    v15 = SHIBYTE(v680[2]);
    memset(v680, 0, 24);
    if (v12 < 0)
    {
      sub_20E860C04(__p, __src, (unint64_t)v11);
    }
    else
    {
      __p[0] = __src;
      __p[1] = v11;
      LODWORD(v722) = v648[0];
      *(_DWORD *)((char *)&v722 + 3) = *(_DWORD *)((char *)v648 + 3);
      HIBYTE(v722) = v12;
    }
    v723 = 0uLL;
    v16 = 1;
    v724 = 1;
    *(_QWORD *)__dst = v13;
    *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)v725 + 7);
    *(_QWORD *)&__dst[8] = v725[0];
    __dst[23] = v15;
    v725[0] = 0;
    *(_QWORD *)((char *)v725 + 7) = 0;
    v17 = __dst;
    if (v15 < 0)
      v17 = v13;
    v18 = *(_QWORD *)&__dst[8];
    if (v15 >= 0)
      v18 = v14;
    if (v18)
    {
      v19 = v17;
      if (v18 >= 8)
      {
        v19 = &v17[v18 & 0xFFFFFFFFFFFFFFF8];
        v20 = v17 + 3;
        v21 = v18 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v22 = vceq_s8(*(int8x8_t *)(v20 - 3), (int8x8_t)0x2323232323232323);
          if ((v22.i8[0] & 1) != 0)
          {
            *(v20 - 3) = 95;
            if ((v22.i8[1] & 1) == 0)
              goto LABEL_22;
          }
          else if ((v22.i8[1] & 1) == 0)
          {
LABEL_22:
            if ((v22.i8[2] & 1) != 0)
              goto LABEL_23;
            goto LABEL_31;
          }
          *(v20 - 2) = 95;
          if ((v22.i8[2] & 1) != 0)
          {
LABEL_23:
            *(v20 - 1) = 95;
            if ((v22.i8[3] & 1) == 0)
              goto LABEL_24;
            goto LABEL_32;
          }
LABEL_31:
          if ((v22.i8[3] & 1) == 0)
          {
LABEL_24:
            if ((v22.i8[4] & 1) != 0)
              goto LABEL_25;
            goto LABEL_33;
          }
LABEL_32:
          *v20 = 95;
          if ((v22.i8[4] & 1) != 0)
          {
LABEL_25:
            v20[1] = 95;
            if ((v22.i8[5] & 1) == 0)
              goto LABEL_26;
            goto LABEL_34;
          }
LABEL_33:
          if ((v22.i8[5] & 1) == 0)
          {
LABEL_26:
            if ((v22.i8[6] & 1) != 0)
              goto LABEL_27;
            goto LABEL_35;
          }
LABEL_34:
          v20[2] = 95;
          if ((v22.i8[6] & 1) != 0)
          {
LABEL_27:
            v20[3] = 95;
            if ((v22.i8[7] & 1) != 0)
              goto LABEL_36;
            goto LABEL_19;
          }
LABEL_35:
          if ((v22.i8[7] & 1) != 0)
LABEL_36:
            v20[4] = 95;
LABEL_19:
          v20 += 8;
          v21 -= 8;
          if (!v21)
          {
            if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_39;
            break;
          }
        }
      }
      v66 = &v17[v18];
      do
      {
        if (*v19 == 35)
          *v19 = 95;
        ++v19;
      }
      while (v19 != v66);
LABEL_39:
      v13 = *(_BYTE **)__dst;
      LOBYTE(v15) = __dst[23];
      v16 = v724;
    }
    *(_QWORD *)v727 = *(_QWORD *)&__dst[8];
    *(_QWORD *)&v727[7] = *(_QWORD *)&__dst[15];
    memset(__dst, 0, 24);
    v726 = v13;
    v728 = v15;
    v729 = 1;
    LOBYTE(v730) = 0;
    v733 = 0;
    if (v16)
    {
      v730 = *(_OWORD *)__p;
      v731 = v722;
      v722 = 0;
      __p[0] = 0;
      __p[1] = 0;
      do
        v23 = __ldaxp(&v723);
      while (__stlxp(v23, &v723));
      v732 = v23;
      v733 = 1;
      if (v724)
      {
        if (SHIBYTE(v722) < 0)
          operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v680[2]) < 0)
      operator delete(v680[0]);
    v616 = *a5;
    sub_20E893368((unsigned int *)__dst, (uint64_t *)&v616);
    v680[0] = (void *)((*(unsigned int *)__dst | ((unint64_t)__dst[4] << 32) | ((unint64_t)__dst[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__dst[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__dst[4]) & 0xF | 0x40u) << 48));
    v680[1] = (void *)(((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | *(_DWORD *)&__dst[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__dst[12] << 32) & 0xFF00000000000000 | ((unint64_t)__dst[14] << 48) | __dst[8] & 0x3F | 0x80);
    sub_2102323F4((unsigned __int8 *)v680, __dst);
    v24 = operator new(0x28uLL);
    v25 = *(_OWORD *)&__dst[16];
    *v24 = *(_OWORD *)__dst;
    v24[1] = v25;
    *((_DWORD *)v24 + 8) = *(_DWORD *)&__dst[32];
    *((_BYTE *)v24 + 36) = 0;
    sub_20E860C04(__dst, v24, 0x24uLL);
    v26 = *(void **)__dst;
    v711[0] = *(_QWORD *)&__dst[8];
    HIBYTE(v711[0]) = __dst[15];
    *(_DWORD *)__dst = v643[0];
    *(_DWORD *)&__dst[3] = *(_DWORD *)((char *)v643 + 3);
    v643[0] = 0;
    *(_DWORD *)((char *)v643 + 3) = 0;
    *(_DWORD *)v713 = *(_DWORD *)__dst;
    *(_DWORD *)&v713[3] = *(_DWORD *)&__dst[3];
    HIWORD(v712) = 0;
    strcpy((char *)&v712, "reloc_attempt");
    v714 = 269;
    v715 = v26;
    *(_QWORD *)&v716[7] = *(_QWORD *)&__dst[15];
    *(_QWORD *)v716 = v711[0];
    v717 = __dst[23];
    v711[0] = 0;
    *(_QWORD *)((char *)v711 + 7) = 0;
    v718 = 0;
    v719 = 0;
    v720 = 1;
    v27 = *(void ***)(v10 + 40);
    v641 = 6;
    v642 = v27;
    v28 = sub_20EB04C20((uint64_t)v650, "external_submap_id");
    v29 = *v28;
    *v28 = v641;
    v641 = v29;
    v30 = (void **)*((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v642;
    v642 = v30;
    sub_20EB07D94(&v642, v29);
    v640 = 0;
    v31 = (void **)*(unsigned __int8 *)(v10 + 9);
    v639 = 4;
    v640 = v31;
    v32 = sub_20EB04C20((uint64_t)v650, "relocalization_succeeded");
    v33 = *v32;
    *v32 = v639;
    v639 = v33;
    v34 = (void **)*((_QWORD *)v32 + 1);
    *((_QWORD *)v32 + 1) = v640;
    v640 = v34;
    sub_20EB07D94(&v640, v33);
    v35 = (void **)*(unsigned __int8 *)(v10 + 168);
    v637 = 4;
    v638 = v35;
    v36 = sub_20EB04C20((uint64_t)v650, "verification_failed");
    v37 = *v36;
    *v36 = v637;
    v637 = v37;
    v38 = (void **)*((_QWORD *)v36 + 1);
    *((_QWORD *)v36 + 1) = v638;
    v638 = v38;
    sub_20EB07D94(&v638, v37);
    v39 = (void **)*(unsigned __int8 *)(v10 + 169);
    v635 = 4;
    v636 = v39;
    v40 = sub_20EB04C20((uint64_t)v650, "cov_compute_failed");
    v41 = *v40;
    *v40 = v635;
    v635 = v41;
    v42 = (void **)*((_QWORD *)v40 + 1);
    *((_QWORD *)v40 + 1) = v636;
    v636 = v42;
    sub_20EB07D94(&v636, v41);
    v634 = 0;
    v633 = 3;
    v43 = (void **)operator new(0x18uLL);
    sub_20E860C04(v43, v24, 0x24uLL);
    v634 = v43;
    v44 = sub_20EB04C20((uint64_t)v650, "uuid");
    v45 = *v44;
    *v44 = v633;
    v633 = v45;
    v46 = (void **)*((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = v634;
    v634 = v46;
    sub_20EB07D94(&v634, v45);
    v47 = operator new();
    *(_BYTE *)v47 = v650[0];
    *(_QWORD *)(v47 + 8) = v651;
    v650[0] = 0;
    v651 = 0;
    *(_QWORD *)__dst = v47;
    v48 = operator new();
    sub_21009A830(v48, (uint64_t *)__dst);
    v49 = (std::__shared_weak_count *)operator new();
    v49->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA15F60;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)v48;
    v551 = v49;
    v51 = *(void ****)__dst;
    *(_QWORD *)__dst = 0;
    if (v51)
    {
      sub_20EB07D94(v51 + 1, *(unsigned __int8 *)v51);
      MEMORY[0x212BC6398](v51, 0x1022C40B06DCE69);
    }
    v549 = v24;
    v590 = p_shared_owners;
    sub_20E860C04(v680, v24, 0x24uLL);
    v52 = v680[0];
    v710[0] = v680[1];
    *(void **)((char *)v710 + 7) = *(void **)((char *)&v680[1] + 7);
    v53 = HIBYTE(v680[2]);
    sub_20EB054F8(v680, (__int128 *)&v726);
    sub_20EB05604(info, (uint64_t)v680, 1uLL);
    *(_OWORD *)v630 = *(_OWORD *)&info[0].numer;
    v631 = info[2];
    memset(info, 0, sizeof(info));
    v632 = 1;
    v54 = mach_continuous_time();
    v55 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
    if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
    {
      mach_timebase_info(&v616);
      LODWORD(v544) = v616.numer;
      LODWORD(v545) = v616.denom;
      *(double *)&qword_254A6D7C0 = (double)v544 / (double)v545;
      __cxa_guard_release(&qword_254A6D7C8);
    }
    *(_QWORD *)__dst = llround(*(double *)&qword_254A6D7C0 * (double)v54);
    *(_QWORD *)&__dst[8] = 2;
    strcpy(&__dst[16], "reloc_attempt");
    *(_WORD *)&__dst[30] = 0;
    *(_DWORD *)&__dst[32] = v644[0];
    *(_DWORD *)&__dst[35] = *(_DWORD *)((char *)v644 + 3);
    *(_WORD *)&__dst[39] = 269;
    LOBYTE(v663) = 0;
    BYTE8(v664) = 0;
    *(_QWORD *)&v665 = a3;
    *((_QWORD *)&v665 + 1) = v569;
    LOBYTE(v666) = 1;
    v667 = v52;
    *(_QWORD *)&v668[7] = *(_QWORD *)((char *)v710 + 7);
    *(_QWORD *)v668 = v710[0];
    v668[15] = v53;
    v710[0] = 0;
    *(_QWORD *)((char *)v710 + 7) = 0;
    v669 = 0;
    v670 = 0;
    LOBYTE(v671) = 1;
    v56 = v632;
    LOBYTE(v672[0]) = 0;
    BYTE8(v673) = 0;
    if (v632)
    {
      *(_OWORD *)v672 = *(_OWORD *)v630;
      *(mach_timebase_info *)&v673 = v631;
      v631 = 0;
      v630[0] = 0;
      v630[1] = 0;
      BYTE8(v673) = 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v547 + 24))(v547))
    {
      v57 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v547 + 56))(v547);
      v698.__r_.__value_.__r.__words[0] = v48;
      v698.__r_.__value_.__l.__size_ = (std::string::size_type)v551;
      do
        v58 = __ldxr(p_shared_owners);
      while (__stxr(v58 + 1, p_shared_owners));
      v59 = (_QWORD *)operator new();
      *v59 = &off_24CA07C30;
      v59[1] = v48;
      v59[2] = v551;
      *(_OWORD *)&v698.__r_.__value_.__l.__data_ = 0uLL;
      sub_20EB09F3C((uint64_t)(v59 + 4), (uint64_t)__dst);
      *v59 = &off_24CA07BC8;
      v734.__r_.__value_.__r.__words[0] = 0;
      v616 = (mach_timebase_info)&off_24CA0C0E8;
      v617 = (unint64_t)v59;
      v60 = (_QWORD *)operator new();
      *v60 = &off_24CA0C1E0;
      v60[1] = 0;
      v60[2] = 0;
      v60[3] = v59;
      v618 = v60;
      sub_20EB09324((uint64_t)a2, v57, (uint64_t)&v616);
      v61 = (std::__shared_weak_count *)v618;
      if (v618)
      {
        v62 = (unint64_t *)((char *)v618 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    sub_20EB0580C((uint64_t)__dst);
    if (v56)
    {
      v64 = (void **)v630[0];
      if (v630[0])
      {
        for (i = (void **)v630[1]; ; i -= 12)
        {
          if (i == v64)
          {
            v630[1] = v64;
            operator delete(v64);
            break;
          }
          if (*((_BYTE *)i - 16) && *((char *)i - 41) < 0)
          {
            operator delete(*(i - 8));
            if (!*((_BYTE *)i - 72))
              continue;
          }
          else if (!*((_BYTE *)i - 72))
          {
            continue;
          }
          if (*((char *)i - 73) < 0)
            operator delete(*(i - 12));
        }
      }
    }
    v67 = info[0];
    if (!*(_QWORD *)info)
      goto LABEL_91;
    v68 = info[1];
    v69 = (void *)info[0];
    if (*(_QWORD *)&info[1] != *(_QWORD *)info)
    {
      while (1)
      {
        if (*(_BYTE *)(*(_QWORD *)&v68 - 16) && *(char *)(*(_QWORD *)&v68 - 41) < 0)
        {
          operator delete(*(void **)(*(_QWORD *)&v68 - 64));
          if (*(_BYTE *)(*(_QWORD *)&v68 - 72))
          {
LABEL_85:
            if (*(char *)(*(_QWORD *)&v68 - 73) < 0)
              operator delete(*(void **)(*(_QWORD *)&v68 - 96));
          }
        }
        else if (*(_BYTE *)(*(_QWORD *)&v68 - 72))
        {
          goto LABEL_85;
        }
        *(_QWORD *)&v68 -= 96;
        if (v68 == v67)
        {
          v69 = (void *)info[0];
          break;
        }
      }
    }
    info[1] = v67;
    operator delete(v69);
LABEL_91:
    if ((_BYTE)v684 && SHIBYTE(v682) < 0)
      operator delete((void *)v681);
    if (LOBYTE(v680[3]) && SHIBYTE(v680[2]) < 0)
      operator delete(v680[0]);
    v548 = v12;
    v70 = *(_QWORD *)(v10 + 72);
    v591 = *(_QWORD *)(v10 + 80);
    v562 = v10;
    v71 = 0;
    if (v70 == v591)
    {
      v73 = 0;
      v74 = 0;
      v563 = 0;
      v150 = (uint64_t **)(v10 + 48);
      v149 = (uint64_t **)(v10 + 56);
      goto LABEL_191;
    }
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v563 = 0;
    do
    {
      v75 = (((char *)v73 - (char *)v74) << 6) - 1;
      v76 = (char *)v73 - (char *)v74;
      if (v73 == v74)
        v75 = 0;
      v577 = v71;
      if (v75 == v71)
      {
        v77 = v76 >> 3;
        v588 = v73;
        if (v76 >> 3 < (unint64_t)((v72 - (char *)v563) >> 3))
        {
          v78 = operator new(0x1000uLL);
          v79 = v78;
          if (v72 != (char *)v73)
          {
            *v73++ = v78;
            p_shared_owners = v590;
            goto LABEL_100;
          }
          if (v74 != v563)
          {
            *(v74 - 1) = v78;
            v80 = v74;
            v81 = (void **)v72;
            p_shared_owners = v590;
            goto LABEL_108;
          }
          if (v73 == v74)
            v127 = 1;
          else
            v127 = (v72 - (char *)v74) >> 2;
          if (v127 >> 61)
            sub_20E877A38();
          v128 = (void **)operator new(8 * v127);
          v129 = v128;
          v130 = (v127 + 3) >> 2;
          v80 = &v128[v130];
          v131 = v80;
          if (v73 != v74)
          {
            v131 = &v80[v77];
            v132 = (char *)&v128[v130];
            v133 = v74;
            if ((unint64_t)(v76 - 8) < 0x38)
              goto LABEL_1030;
            v134 = v130;
            v132 = (char *)&v128[v130];
            v133 = v74;
            if ((unint64_t)(v132 - (char *)v74) < 0x20)
              goto LABEL_1030;
            v135 = ((unint64_t)(v76 - 8) >> 3) + 1;
            v136 = v135 & 0x3FFFFFFFFFFFFFFCLL;
            v132 = (char *)&v80[v136];
            v133 = &v74[v136];
            v137 = (__int128 *)(v74 + 2);
            v138 = (char *)&v128[v134 + 2];
            v139 = v135 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v140 = *v137;
              *((_OWORD *)v138 - 1) = *(v137 - 1);
              *(_OWORD *)v138 = v140;
              v137 += 2;
              v138 += 32;
              v139 -= 4;
            }
            while (v139);
            if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1030:
              do
              {
                v141 = (uint64_t)*v133++;
                *(_QWORD *)v132 = v141;
                v132 += 8;
              }
              while (v132 != (char *)v131);
            }
          }
          v142 = v131;
          if (v74)
            operator delete(v74);
          v81 = &v129[v127];
          *(v80 - 1) = v79;
          v563 = v129;
          v86 = (char *)v142;
          p_shared_owners = v590;
          if (v142 != v81)
          {
LABEL_182:
            *(_QWORD *)v86 = v79;
            v72 = (char *)v81;
            v74 = v80;
            v73 = (void **)(v86 + 8);
            goto LABEL_100;
          }
LABEL_108:
          if (v80 > v563)
          {
            v82 = v80 - v563;
            if (v82 >= -1)
              v83 = v82 + 1;
            else
              v83 = v82 + 2;
            v84 = v83 >> 1;
            v85 = &v80[-v84];
            if (v81 != v80)
              memmove(&v80[-v84], v80, (char *)v81 - (char *)v80);
            v86 = (char *)v85 + (char *)v81 - (char *)v80;
            v80 = v85;
            goto LABEL_182;
          }
          if (v81 == v563)
            v115 = 1;
          else
            v115 = ((char *)v81 - (char *)v563) >> 2;
          if (v115 >> 61)
            sub_20E877A38();
          v116 = (void **)operator new(8 * v115);
          v117 = v116;
          v118 = v115 >> 2;
          v119 = (char *)&v116[v115 >> 2];
          v120 = v119;
          v121 = (char *)v81 - (char *)v80;
          p_shared_owners = v590;
          if (v81 != v80)
          {
            v120 = &v119[v121 & 0xFFFFFFFFFFFFFFF8];
            v122 = v121 - 8;
            if (v122 < 0x38 || (v123 = v118, (unint64_t)((char *)&v116[v118] - (char *)v80) < 0x20))
            {
              v124 = (char *)&v116[v115 >> 2];
              v125 = v80;
              goto LABEL_164;
            }
            v143 = (v122 >> 3) + 1;
            v144 = v143 & 0x3FFFFFFFFFFFFFFCLL;
            v124 = &v119[v144 * 8];
            v125 = &v80[v144];
            v145 = (__int128 *)(v80 + 2);
            v146 = &v116[v123 + 2];
            v147 = v143 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v148 = *v145;
              *((_OWORD *)v146 - 1) = *(v145 - 1);
              *(_OWORD *)v146 = v148;
              v145 += 2;
              v146 += 4;
              v147 -= 4;
            }
            while (v147);
            if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_164:
                v126 = (uint64_t)*v125++;
                *(_QWORD *)v124 = v126;
                v124 += 8;
              }
              while (v124 != v120);
            }
          }
          v81 = &v116[v115];
          if (v563)
            operator delete(v563);
          v80 = (void **)v119;
          v563 = v117;
          v86 = v120;
          goto LABEL_182;
        }
        if (v72 == (char *)v563)
          v87 = 1;
        else
          v87 = (v72 - (char *)v563) >> 2;
        if (v87 >> 61)
          sub_20E877A38();
        v88 = (void **)operator new(8 * v87);
        v89 = operator new(0x1000uLL);
        v90 = v89;
        v91 = &v88[v77];
        v72 = (char *)&v88[v87];
        if (v77 == v87)
        {
          if (v76 < 1)
          {
            if (v73 == v74)
              v94 = 1;
            else
              v94 = v76 >> 2;
            if (v94 >> 61)
              sub_20E877A38();
            p_shared_owners = v590;
            v91 = (void **)operator new(8 * v94);
            v72 = (char *)&v91[v94];
            operator delete(v88);
            v88 = v91;
            *v91 = v90;
            v73 = v91 + 1;
            v93 = v588;
            if (v588 == v74)
              goto LABEL_125;
            goto LABEL_136;
          }
          v92 = v77 + 2;
          if (v77 >= -1)
            v92 = v77 + 1;
          v91 -= v92 >> 1;
        }
        p_shared_owners = v590;
        *v91 = v89;
        v73 = v91 + 1;
        v93 = v588;
        if (v588 == v74)
        {
LABEL_125:
          if (v563)
            operator delete(v563);
          v74 = v91;
          v563 = v88;
          goto LABEL_100;
        }
        do
        {
LABEL_136:
          if (v91 == v88)
          {
            if (v73 >= (void **)v72)
            {
              if (v72 == (char *)v91)
                v100 = 1;
              else
                v100 = (v72 - (char *)v91) >> 2;
              if (v100 >> 61)
                sub_20E877A38();
              v101 = (void **)operator new(8 * v100);
              v88 = v101;
              v102 = (v100 + 3) >> 2;
              v95 = &v101[v102];
              v96 = v95;
              v103 = (char *)v73 - (char *)v91;
              if (v73 != v91)
              {
                v96 = (void **)((char *)v95 + (v103 & 0xFFFFFFFFFFFFFFF8));
                v104 = v103 - 8;
                v105 = (char *)&v101[v102];
                v106 = v91;
                if (v104 < 0x38)
                  goto LABEL_1031;
                v107 = v102;
                v105 = (char *)&v101[v102];
                v106 = v91;
                if ((unint64_t)(v105 - (char *)v91) < 0x20)
                  goto LABEL_1031;
                v108 = (v104 >> 3) + 1;
                v109 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                v105 = (char *)&v95[v109];
                v106 = &v91[v109];
                v110 = (__int128 *)(v91 + 2);
                v111 = (char *)&v101[v107 + 2];
                v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v113 = *v110;
                  *((_OWORD *)v111 - 1) = *(v110 - 1);
                  *(_OWORD *)v111 = v113;
                  v110 += 2;
                  v111 += 32;
                  v112 -= 4;
                }
                while (v112);
                if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1031:
                  do
                  {
                    v114 = (uint64_t)*v106++;
                    *(_QWORD *)v105 = v114;
                    v105 += 8;
                  }
                  while (v105 != (char *)v96);
                }
              }
              v72 = (char *)&v101[v100];
              operator delete(v91);
            }
            else
            {
              v98 = (v72 - (char *)v73) >> 3;
              if (v98 >= -1)
                v99 = v98 + 1;
              else
                v99 = v98 + 2;
              v96 = &v73[v99 >> 1];
              v95 = &v91[v99 >> 1];
              if (v73 == v91)
              {
                v88 = v73;
              }
              else
              {
                memmove(&v91[v99 >> 1], v91, (char *)v73 - (char *)v91);
                v88 = v91;
              }
            }
          }
          else
          {
            v95 = v91;
            v96 = v73;
          }
          v97 = *--v93;
          *(v95 - 1) = v97;
          v91 = v95 - 1;
          v73 = v96;
        }
        while (v93 != v74);
        goto LABEL_125;
      }
LABEL_100:
      (*(_QWORD **)((char *)v74 + ((v577 >> 6) & 0x3FFFFFFFFFFFFF8)))[v577 & 0x1FF] = v70;
      v71 = v577 + 1;
      v70 += 112;
    }
    while (v70 != v591);
    v149 = (uint64_t **)(v562 + 56);
    v150 = (uint64_t **)(v562 + 48);
    if (v71 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v562 + 56) - *(_QWORD *)(v562 + 48)) >> 3)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOMetadata.cpp", 239, (uint64_t)"cluster_debug_obj_ptr_q.size() <= reloc_debug_object.all_cluster_keyframe_ids.size()", 84, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
LABEL_191:
    v616 = *a5;
    sub_20E893368((unsigned int *)__dst, (uint64_t *)&v616);
    v680[0] = (void *)((*(unsigned int *)__dst | ((unint64_t)__dst[4] << 32) | ((unint64_t)__dst[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__dst[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__dst[4]) & 0xF | 0x40u) << 48));
    v680[1] = (void *)(((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | *(_DWORD *)&__dst[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__dst[12] << 32) & 0xFF00000000000000 | ((unint64_t)__dst[14] << 48) | __dst[8] & 0x3F | 0x80);
    sub_2102323F4((unsigned __int8 *)v680, __dst);
    v151 = operator new(0x28uLL);
    v578 = v71;
    v152 = *(_OWORD *)&__dst[16];
    *v151 = *(_OWORD *)__dst;
    v151[1] = v152;
    *((_DWORD *)v151 + 8) = *(_DWORD *)&__dst[32];
    *((_BYTE *)v151 + 36) = 0;
    v553 = v151;
    sub_20E860C04(__dst, v151, 0x24uLL);
    v559 = *(void **)__dst;
    v555 = *(_QWORD *)&__dst[8];
    v625[0] = *(_DWORD *)&__dst[16];
    HIBYTE(v625[0]) = __dst[19];
    v153 = __dst[23];
    *(_DWORD *)__dst = v626[0];
    *(_DWORD *)&__dst[3] = *(_DWORD *)((char *)v626 + 3);
    v626[0] = 0;
    *(_DWORD *)((char *)v626 + 3) = 0;
    *(_DWORD *)((char *)v628 + 3) = *(_DWORD *)&__dst[3];
    v628[0] = *(_DWORD *)__dst;
    *(_DWORD *)((char *)v627 + 3) = *(_DWORD *)&__dst[19];
    v627[0] = v625[0];
    v625[0] = 0;
    *(_DWORD *)((char *)v625 + 3) = 0;
    v572 = *v150;
    v554 = *v149;
    if (*v150 != *v149)
    {
      v154 = 0;
      v589 = v73;
      v592 = __dst[23];
      while (1)
      {
        v571 = v154;
        if (!v578)
        {
          v578 = 0;
          LOBYTE(v616.numer) = 0;
          goto LABEL_194;
        }
        v155 = (uint64_t *)(*(_QWORD **)((char *)v74 + ((v154 >> 6) & 0x3FFFFFFFFFFFFF8)))[v154 & 0x1FF];
        if (!v155
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOMetadata.cpp", 128, (uint64_t)"mcdo_ptr != nullptr", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1020;
        }
        v156 = v155[1];
        if (*v155 == v156)
        {
          v162 = 0;
          v157 = *v572;
          v158 = v572[1];
        }
        else
        {
          v157 = *v572;
          v158 = v572[1];
          if (*v572 == v158)
          {
            v162 = 0;
            v158 = *v572;
          }
          else
          {
            v159 = *v155;
            do
            {
              v160 = 0;
              v161 = *v572;
              do
              {
                if (*(_DWORD *)(v161 + 16) == *(_DWORD *)(v159 + 16) && *(_QWORD *)v161 == *(_QWORD *)v159)
                  v160 += *(_DWORD *)(v161 + 8) == *(_DWORD *)(v159 + 8);
                v161 += 24;
              }
              while (v161 != v158);
              v162 = v160 != 0;
              if (v160)
                break;
              v159 += 112;
            }
            while (v159 != v156);
          }
        }
        if (0x6DB6DB6DB6DB6DB7 * ((v156 - *v155) >> 4) != 0xAAAAAAAAAAAAAAABLL * ((v158 - v157) >> 3)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOMetadata.cpp", 138, (uint64_t)"mcdo_ptr->frame_debug_objects.size() == cluster_kf_ids.size()", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1020:
          abort();
        }
        if (!v162)
        {
          LOBYTE(v616.numer) = 0;
          v622 = 0;
          goto LABEL_194;
        }
        if (v571 + 1 >= 0x400)
        {
          v163 = *v74++;
          operator delete(v163);
          v571 -= 511;
        }
        else
        {
          ++v571;
        }
        memset(v680, 0, sizeof(v680));
        LODWORD(v681) = 1065353216;
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 1065353216;
        *(_WORD *)&__dst[40] = 0;
        v664 = 0u;
        v665 = 0u;
        v663 = 0u;
        if (v155[7] != v155[8])
        {
          v164 = (unsigned int *)v155[10];
          for (j = (unsigned int *)v155[11]; v164 != j; ++v164)
          {
            v166 = *v164;
            v167 = v155[7];
            if (v166 >= (v155[8] - v167) >> 2)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOMetadata.cpp", 153, (uint64_t)"idx < corr_2d_3d_query_indices.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v168 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v169 = qword_254A6DE40;
                for (k = qword_254A6DE48; v169 != k; v169 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v169)(*(_QWORD *)(v169 + 8), "idx < corr_2d_3d_query_indices.size()", 37, "", 0);
              }
              v171 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v153 = v592;
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "idx < corr_2d_3d_query_indices.size()", 37, "", 0);
              v167 = v155[7];
            }
            sub_20EABA148((uint64_t)__dst, (unsigned int *)(v167 + 4 * v166), (_DWORD *)(v167 + 4 * v166));
          }
        }
        *(_WORD *)&__dst[40] = *((_WORD *)v155 + 52);
        sub_20E8B3B5C((char **)&v663, 0x6DB6DB6DB6DB6DB7 * ((v155[1] - *v155) >> 4));
        sub_20E8B3B5C((char **)&v664 + 1, 0x6DB6DB6DB6DB6DB7 * ((v155[1] - *v155) >> 4));
        v172 = *v155;
        v173 = v155[1];
        v564 = v74;
        if (*v155 != v173)
          break;
LABEL_299:
        sub_20EB053B8((uint64_t)&v616, (uint64_t)__dst);
        v619 = *(_WORD *)&__dst[40];
        sub_20E8B40D4(&v620, (uint64_t)&v663);
        sub_20E8B40D4(&v621, (uint64_t)&v664 + 8);
        v622 = 1;
        v623 = v155;
        v624 = 1;
        if (*((_QWORD *)&v664 + 1))
          operator delete(*((void **)&v664 + 1));
        if ((_QWORD)v663)
          operator delete((void *)v663);
        v203 = *(_QWORD **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          do
          {
            v204 = (_QWORD *)*v203;
            operator delete(v203);
            v203 = v204;
          }
          while (v204);
        }
        v205 = *(void **)__dst;
        *(_QWORD *)__dst = 0;
        if (v205)
          operator delete(v205);
        v206 = v680[2];
        if (v680[2])
        {
          do
          {
            v207 = (_QWORD *)*v206;
            operator delete(v206);
            v206 = v207;
          }
          while (v207);
        }
        if (v680[0])
          operator delete(v680[0]);
        --v578;
        if (!v622)
          goto LABEL_194;
        if (!v624)
          goto LABEL_962;
        sub_20E860C04(v680, v553, 0x24uLL);
        v208 = v680[0];
        v709[0] = v680[1];
        *(void **)((char *)v709 + 7) = *(void **)((char *)&v680[1] + 7);
        v209 = HIBYTE(v680[2]);
        sub_20EB054F8(v680, &v712);
        sub_20EB05604(v655, (uint64_t)v680, 1uLL);
        *(_OWORD *)v613 = *(_OWORD *)v655;
        v614 = v655[2];
        memset(v655, 0, sizeof(v655));
        v615 = 1;
        v210 = mach_continuous_time();
        v211 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
        if ((v211 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
        {
          mach_timebase_info(info);
          LODWORD(v538) = info[0].numer;
          LODWORD(v539) = info[0].denom;
          *(double *)&qword_254A6D7C0 = (double)v538 / (double)v539;
          __cxa_guard_release(&qword_254A6D7C8);
          p_shared_owners = v590;
          v73 = v589;
          v153 = v592;
        }
        *(_QWORD *)__dst = llround(*(double *)&qword_254A6D7C0 * (double)v210);
        *(_QWORD *)&__dst[8] = 2;
        strcpy(&__dst[16], "cluster");
        *(_DWORD *)&__dst[32] = v629[0];
        *(_DWORD *)&__dst[35] = *(_DWORD *)((char *)v629 + 3);
        *(_WORD *)&__dst[39] = 263;
        LOBYTE(v663) = 0;
        BYTE8(v664) = 0;
        *(_QWORD *)&v665 = a3;
        *((_QWORD *)&v665 + 1) = v569;
        LOBYTE(v666) = 1;
        v667 = v208;
        *(_QWORD *)&v668[7] = *(_QWORD *)((char *)v709 + 7);
        *(_QWORD *)v668 = v709[0];
        v668[15] = v209;
        *(_QWORD *)((char *)v709 + 7) = 0;
        v709[0] = 0;
        v669 = 0;
        v670 = 0;
        LOBYTE(v671) = 1;
        LOBYTE(v672[0]) = 0;
        BYTE8(v673) = 0;
        if (v615)
        {
          *(_OWORD *)v672 = *(_OWORD *)v613;
          *(_QWORD *)&v673 = v614;
          v614 = 0;
          v613[1] = 0;
          v613[0] = 0;
          BYTE8(v673) = 1;
        }
        v212 = (*(uint64_t (**)(_QWORD *, const char *, uint64_t))(*v550 + 48))(v550, "cv3d.reloc.relocalization", 25);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v212 + 24))(v212))
        {
LABEL_357:
          sub_20EB0580C((uint64_t)__dst);
          if (!v615)
            goto LABEL_371;
LABEL_358:
          v254 = (void **)v613[0];
          if (!v613[0])
            goto LABEL_371;
          v255 = (void **)v613[1];
          v256 = v613[0];
          if (v613[1] == v613[0])
          {
LABEL_370:
            v613[1] = v254;
            operator delete(v256);
            goto LABEL_371;
          }
          while (1)
          {
            if (*((_BYTE *)v255 - 16) && *((char *)v255 - 41) < 0)
            {
              operator delete(*(v255 - 8));
              if (*((_BYTE *)v255 - 72))
              {
LABEL_365:
                if (*((char *)v255 - 73) < 0)
                  operator delete(*(v255 - 12));
              }
            }
            else if (*((_BYTE *)v255 - 72))
            {
              goto LABEL_365;
            }
            v255 -= 12;
            if (v255 == v254)
            {
              v256 = v613[0];
              goto LABEL_370;
            }
          }
        }
        LOBYTE(info[0].numer) = 0;
        info[1] = 0;
        v734.__r_.__value_.__l.__size_ = 0;
        v734.__r_.__value_.__s.__data_[0] = 3;
        v213 = operator new(0x18uLL);
        sub_20E860C04(v213, v553, 0x24uLL);
        v734.__r_.__value_.__l.__size_ = (std::string::size_type)v213;
        v214 = sub_20EB04C20((uint64_t)info, "cluster_id");
        v215 = *v214;
        *v214 = v734.__r_.__value_.__s.__data_[0];
        v734.__r_.__value_.__s.__data_[0] = v215;
        v216 = *((_QWORD *)v214 + 1);
        *((_QWORD *)v214 + 1) = v734.__r_.__value_.__l.__size_;
        v734.__r_.__value_.__l.__size_ = v216;
        sub_20EB07D94((void ***)&v734.__r_.__value_.__l.__size_, v215);
        LOBYTE(v652) = 4;
        v653 = v619;
        v217 = sub_20EB04C20((uint64_t)info, "pose_est_succeeded");
        v218 = *v217;
        *v217 = (char)v652;
        LOBYTE(v652) = v218;
        v219 = (void **)*((_QWORD *)v217 + 1);
        *((_QWORD *)v217 + 1) = v653;
        v653 = (unint64_t)v219;
        sub_20EB07D94((void ***)&v653, v218);
        LOBYTE(v603) = 4;
        v604 = (void **)HIBYTE(v619);
        v220 = sub_20EB04C20((uint64_t)info, "multi_frame_succeeded");
        v221 = *v220;
        *v220 = (char)v603;
        LOBYTE(v603) = v221;
        v222 = (void **)*((_QWORD *)v220 + 1);
        *((_QWORD *)v220 + 1) = v604;
        v604 = v222;
        sub_20EB07D94(&v604, v221);
        v223 = operator new();
        *(_BYTE *)v223 = info[0].numer;
        *(mach_timebase_info *)(v223 + 8) = info[1];
        LOBYTE(info[0].numer) = 0;
        info[1] = 0;
        v659 = (void ***)v223;
        v224 = (std::__shared_weak_count_vtbl *)operator new();
        sub_21009A830((uint64_t)v224, (uint64_t *)&v659);
        v597 = v224;
        v225 = (std::__shared_weak_count *)operator new();
        v225->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA15F60;
        v225->__shared_owners_ = 0;
        v225->__shared_weak_owners_ = 0;
        v225[1].__vftable = v224;
        v598 = v225;
        v226 = v659;
        v659 = 0;
        if (v226)
        {
          sub_20EB07D94(v226 + 1, *(unsigned __int8 *)v226);
          MEMORY[0x212BC6398](v226, 0x1022C40B06DCE69);
        }
        sub_20EB07D94((void ***)&info[1], LOBYTE(info[0].numer));
        sub_20EB0962C((uint64_t *)&v597, (uint64_t)__dst, &v698);
        v227 = v598;
        if (v598)
        {
          v228 = (unint64_t *)&v598->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v230 = (mach_timebase_info *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 56))(v212);
        v231 = *v230;
        v232 = (std::__shared_weak_count *)v230[1];
        if (v232)
        {
          v233 = (unint64_t *)&v232->__shared_owners_;
          do
            v234 = __ldxr(v233);
          while (__stxr(v234 + 1, v233));
        }
        v235 = *(_OWORD *)&v698.__r_.__value_.__r.__words[1];
        v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0C0E8;
        *(_OWORD *)&v734.__r_.__value_.__r.__words[1] = *(_OWORD *)&v698.__r_.__value_.__r.__words[1];
        *(_OWORD *)&v698.__r_.__value_.__r.__words[1] = 0uLL;
        info[0] = v231;
        info[1] = (mach_timebase_info)v232;
        if (v232)
        {
          v236 = (unint64_t *)&v232->__shared_owners_;
          do
            v237 = __ldxr(v236);
          while (__stxr(v237 + 1, v236));
        }
        info[2] = (mach_timebase_info)&off_24CA0C0E8;
        *(_OWORD *)v706 = v235;
        if (*((_QWORD *)&v235 + 1))
        {
          v238 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
          do
            v239 = __ldxr(v238);
          while (__stxr(v239 + 1, v238));
        }
        (*(void (**)(_QWORD *, mach_timebase_info *))(*a2 + 16))(a2, info);
        v240 = *(std::__shared_weak_count **)&v706[8];
        if (!*(_QWORD *)&v706[8])
          goto LABEL_337;
        v241 = (unint64_t *)(*(_QWORD *)&v706[8] + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
          v243 = (std::__shared_weak_count *)info[1];
          if (!*(_QWORD *)&info[1])
            goto LABEL_343;
        }
        else
        {
LABEL_337:
          v243 = (std::__shared_weak_count *)info[1];
          if (!*(_QWORD *)&info[1])
            goto LABEL_343;
        }
        v244 = (unint64_t *)&v243->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
          std::__shared_weak_count::__release_weak(v243);
        }
LABEL_343:
        v246 = (std::__shared_weak_count *)v734.__r_.__value_.__r.__words[2];
        if (!v734.__r_.__value_.__r.__words[2])
          goto LABEL_347;
        v247 = (unint64_t *)(v734.__r_.__value_.__r.__words[2] + 8);
        do
          v248 = __ldaxr(v247);
        while (__stlxr(v248 - 1, v247));
        if (!v248)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
          if (!v232)
            goto LABEL_353;
        }
        else
        {
LABEL_347:
          if (!v232)
            goto LABEL_353;
        }
        v249 = (unint64_t *)&v232->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
LABEL_353:
        v251 = (std::__shared_weak_count *)v698.__r_.__value_.__r.__words[2];
        if (!v698.__r_.__value_.__r.__words[2])
          goto LABEL_357;
        v252 = (unint64_t *)(v698.__r_.__value_.__r.__words[2] + 8);
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (v253)
          goto LABEL_357;
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
        sub_20EB0580C((uint64_t)__dst);
        if (v615)
          goto LABEL_358;
LABEL_371:
        v257 = (void **)v655[0];
        if (!v655[0])
          goto LABEL_384;
        v258 = (void **)v655[1];
        v259 = v655[0];
        if (v655[1] != v655[0])
        {
          while (1)
          {
            if (*((_BYTE *)v258 - 16) && *((char *)v258 - 41) < 0)
            {
              operator delete(*(v258 - 8));
              if (*((_BYTE *)v258 - 72))
              {
LABEL_378:
                if (*((char *)v258 - 73) < 0)
                  operator delete(*(v258 - 12));
              }
            }
            else if (*((_BYTE *)v258 - 72))
            {
              goto LABEL_378;
            }
            v258 -= 12;
            if (v258 == v257)
            {
              v259 = v655[0];
              break;
            }
          }
        }
        v655[1] = v257;
        operator delete(v259);
LABEL_384:
        if ((_BYTE)v684 && SHIBYTE(v682) < 0)
          operator delete((void *)v681);
        if (LOBYTE(v680[3]) && SHIBYTE(v680[2]) < 0)
          operator delete(v680[0]);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v576 + 24))(v576) & 1) == 0)
          goto LABEL_961;
        v581 = *v572;
        v558 = v572[1];
        if (*v572 == v558)
          goto LABEL_961;
        v260 = 0;
        while (2)
        {
          v261 = *a5;
          v262 = *(_QWORD *)(*(_QWORD *)a5 + 2496);
          v263 = (v262 + 1) % 0x270uLL;
          v264 = 4 * v262;
          v265 = 4 * v263;
          LODWORD(v262) = *(_DWORD *)(*(_QWORD *)a5 + 4 * ((v262 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(*(_QWORD *)a5 + 4 * v263) & 0x7FFFFFFE | *(_DWORD *)(*(_QWORD *)a5 + 4 * v262) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*(_QWORD *)a5 + 4 * v263) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(*(_QWORD *)a5 + v264) = v262;
          LODWORD(v262) = ((v262 ^ (v262 >> 11)) << 7) & 0x9D2C5680 ^ v262 ^ (v262 >> 11);
          v266 = ((_DWORD)v262 << 15) & 0xEFC60000 ^ v262 ^ ((((_DWORD)v262 << 15) & 0xEFC60000 ^ v262) >> 18);
          if (v263 == 623)
            v267 = 0;
          else
            v267 = v263 + 1;
          v268 = 4 * v267;
          if (v263 >= 0xE3)
            v269 = -227;
          else
            v269 = 397;
          v270 = *(_DWORD *)(*(_QWORD *)&v261 + 4 * (v269 + v263)) ^ ((*(_DWORD *)(*(_QWORD *)&v261 + 4 * v267) & 0x7FFFFFFE | *(_DWORD *)(*(_QWORD *)&v261 + 4 * v263) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*(_QWORD *)&v261 + 4 * v267) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(*(_QWORD *)&v261 + v265) = v270;
          v271 = ((v270 ^ (v270 >> 11)) << 7) & 0x9D2C5680 ^ v270 ^ (v270 >> 11);
          v272 = (v271 << 15) & 0xEFC60000 ^ v271;
          v273 = (v267 + 1) % 0x270;
          v274 = 4 * v273;
          v275 = *(_DWORD *)(*(_QWORD *)&v261 + 4 * ((v267 + 397) % 0x270)) ^ ((*(_DWORD *)(*(_QWORD *)&v261 + 4 * v273) & 0x7FFFFFFE | *(_DWORD *)(*(_QWORD *)&v261 + 4 * v267) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*(_QWORD *)&v261 + 4 * v273) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(*(_QWORD *)&v261 + v268) = v275;
          v276 = ((v275 ^ (v275 >> 11)) << 7) & 0x9D2C5680 ^ v275 ^ (v275 >> 11);
          v277 = (v276 << 15) & 0xEFC60000 ^ v276 ^ (((v276 << 15) & 0xEFC60000 ^ v276) >> 18);
          if (v273 == 623)
            v278 = 0;
          else
            v278 = v273 + 1;
          if (v273 >= 0xE3)
            v279 = -227;
          else
            v279 = 397;
          v280 = *(_DWORD *)(*(_QWORD *)&v261 + 4 * (v279 + v273)) ^ ((*(_DWORD *)(*(_QWORD *)&v261 + 4 * v278) & 0x7FFFFFFE | *(_DWORD *)(*(_QWORD *)&v261 + 4 * v273) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*(_QWORD *)&v261 + 4 * v278) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(*(_QWORD *)&v261 + v274) = v280;
          v281 = ((v280 ^ (v280 >> 11)) << 7) & 0x9D2C5680 ^ v280 ^ (v280 >> 11);
          v282 = (v281 << 15) & 0xEFC60000 ^ v281;
          *(_QWORD *)(*(_QWORD *)&v261 + 2496) = v278;
          v680[0] = (void *)(v266 | ((unint64_t)(v272 ^ (v272 >> 18)) << 32) | ((unint64_t)((unsigned __int16)(v272 ^ (v272 >> 18)) >> 8) << 40) | ((unint64_t)HIBYTE(v272) << 56) | ((unint64_t)(HIWORD(v272) & 0xF | 0x40) << 48));
          v680[1] = (void *)(((unint64_t)(v282 ^ (v282 >> 18)) << 32) | ((unint64_t)((unsigned __int16)(v282 ^ (v282 >> 18)) >> 8) << 40) | v277 & 0xFFFFFF00 | ((unint64_t)HIBYTE(v282) << 56) | ((unint64_t)BYTE2(v282) << 48) | v277 & 0x3F | 0x80);
          sub_2102323F4((unsigned __int8 *)v680, __dst);
          v283 = operator new(0x28uLL);
          v284 = *(_OWORD *)&__dst[16];
          *v283 = *(_OWORD *)__dst;
          v283[1] = v284;
          *((_DWORD *)v283 + 8) = *(_DWORD *)&__dst[32];
          *((_BYTE *)v283 + 36) = 0;
          v580 = v283;
          sub_20E860C04(__dst, v283, 0x24uLL);
          v573 = *(void **)__dst;
          v566 = *(_QWORD *)&__dst[8];
          v608[0] = *(_DWORD *)&__dst[16];
          HIBYTE(v608[0]) = __dst[19];
          v575 = __dst[23];
          *(_DWORD *)__dst = v609[0];
          *(_DWORD *)&__dst[3] = *(_DWORD *)((char *)v609 + 3);
          v609[0] = 0;
          *(_DWORD *)((char *)v609 + 3) = 0;
          *(_DWORD *)((char *)v611 + 3) = *(_DWORD *)&__dst[3];
          v611[0] = *(_DWORD *)__dst;
          *(_DWORD *)((char *)v610 + 3) = *(_DWORD *)&__dst[19];
          v610[0] = v608[0];
          v608[0] = 0;
          *(_DWORD *)((char *)v608 + 3) = 0;
          v565 = v260;
          v285 = *v623 + 112 * v260;
          v604 = 0;
          v603 = 0;
          v605 = 0;
          v288 = *(unsigned int **)(v285 + 64);
          v286 = (_QWORD *)(v285 + 64);
          v287 = v288;
          v289 = (unsigned int *)v286[3];
          v568 = v286 + 3;
          v290 = (unsigned int *)v286[1];
          v579 = (unsigned int **)(v286 + 1);
          v574 = (unsigned int **)v286;
          v584 = (unsigned int *)v286[4];
          v567 = v286 + 4;
          if (v288 != v290 || v289 != v584)
          {
            v303 = 0;
            v582 = (unsigned int *)v286[1];
            while (1)
            {
              while (1)
              {
                v304 = *v287 | ((unint64_t)*v289 << 32);
                if (v303 >= v605)
                  break;
                *v303++ = (void *)v304;
                v604 = v303;
                ++v287;
                ++v289;
                if (v287 == v290)
                {
LABEL_442:
                  if (v289 == v584)
                    goto LABEL_408;
                }
              }
              v305 = (void **)v603;
              v306 = (char *)v303 - (_BYTE *)v603;
              v307 = ((char *)v303 - (_BYTE *)v603) >> 3;
              v308 = v307 + 1;
              if ((unint64_t)(v307 + 1) >> 61)
                sub_20EB057F8();
              v309 = (char *)v605 - (_BYTE *)v603;
              if (((char *)v605 - (_BYTE *)v603) >> 2 > v308)
                v308 = v309 >> 2;
              v310 = (unint64_t)v309 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v308;
              if (v310)
              {
                if (v310 >> 61)
                  sub_20E877A38();
                v311 = operator new(8 * v310);
                v312 = (void **)&v311[8 * v307];
                *v312 = (void *)v304;
                v313 = v312 + 1;
                v314 = (char *)v303 - (char *)v305;
                if (v303 == v305)
                {
LABEL_461:
                  v603 = v312;
                  v604 = v313;
                  v605 = (void **)&v311[8 * v310];
                  if (!v303)
                    goto LABEL_458;
LABEL_457:
                  operator delete(v303);
                  goto LABEL_458;
                }
              }
              else
              {
                v311 = 0;
                v312 = (void **)(8 * v307);
                *(_QWORD *)(8 * v307) = v304;
                v313 = (void **)(8 * v307 + 8);
                v314 = (char *)v303 - (char *)v305;
                if (v303 == v305)
                  goto LABEL_461;
              }
              v315 = v314 - 8;
              if (v315 < 0x168)
                break;
              v318 = ((char *)(v303 - 1) - (char *)v305) & 0xFFFFFFFFFFFFFFF8;
              if (&v311[v306 - 8 - v318] > &v311[v306 - 8]
                || (void **)((char *)v303 - v318 - 8) > v303 - 1
                || (unint64_t)((char *)v303 - &v311[v306]) < 0x20)
              {
                break;
              }
              v319 = (v315 >> 3) + 1;
              v320 = 8 * (v319 & 0x3FFFFFFFFFFFFFFCLL);
              v316 = &v303[v320 / 0xFFFFFFFFFFFFFFF8];
              v312 = (void **)((char *)v312 - v320);
              v321 = &v311[8 * v307 - 16];
              v322 = v303 - 2;
              v323 = v319 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v324 = *(_OWORD *)v322;
                *(v321 - 1) = *((_OWORD *)v322 - 1);
                *v321 = v324;
                v321 -= 2;
                v322 -= 4;
                v323 -= 4;
              }
              while (v323);
              if (v319 != (v319 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_455;
LABEL_456:
              v303 = (void **)v603;
              v603 = v312;
              v604 = v313;
              v605 = (void **)&v311[8 * v310];
              if (v303)
                goto LABEL_457;
LABEL_458:
              v303 = v313;
              v290 = v582;
              v604 = v313;
              ++v287;
              ++v289;
              if (v287 == v582)
                goto LABEL_442;
            }
            v316 = v303;
            do
            {
LABEL_455:
              v317 = *--v316;
              *--v312 = v317;
            }
            while (v316 != v305);
            goto LABEL_456;
          }
LABEL_408:
          HIBYTE(v680[2]) = 10;
          strcpy((char *)v680, "keypoints_");
          LODWORD(v680[3]) = 1;
          std::to_string(&v698, *v557);
          *(_QWORD *)__dst = v680;
          *(_QWORD *)&__dst[8] = &v698;
          *(_QWORD *)&__dst[16] = v680;
          *(_QWORD *)&__dst[24] = &v698;
          *(_QWORD *)&__dst[32] = &v698;
          if (LODWORD(v680[3]) == -1)
            sub_20E877AB8();
          v655[0] = __dst;
          ((void (*)(void **, void **))off_24C9C4810[LODWORD(v680[3])])(v655, v680);
          if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v698.__r_.__value_.__l.__data_);
          if (LODWORD(v680[3]) == -1)
            sub_20E877AB8();
          *(_QWORD *)__dst = &v698;
          ((void (*)(std::string *__return_ptr, _BYTE *, void **))off_24C9C4840[LODWORD(v680[3])])(&v734, __dst, v680);
          if (LODWORD(v680[3]) != -1)
            ((void (*)(_BYTE *, void **))off_24C9C4828[LODWORD(v680[3])])(__dst, v680);
          v704[0] = v734.__r_.__value_.__l.__size_;
          v291 = v734.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)v704 + 7) = *(std::string::size_type *)((char *)&v734.__r_.__value_.__r.__words[1] + 7);
          v292 = HIBYTE(v734.__r_.__value_.__r.__words[2]);
          v293 = SHIBYTE(v734.__r_.__value_.__r.__words[2]);
          memset(&v734, 0, sizeof(v734));
          LODWORD(v698.__r_.__value_.__l.__data_) = *(_DWORD *)(v562 + 24);
          sub_20EB04900(v556, (std::string *)"_", (unsigned int *)&v698);
          v294 = v680[0];
          *(void **)__dst = v680[1];
          __dst[7] = HIBYTE(v680[1]);
          v295 = *(uint64_t *)((char *)&v680[1] + 7);
          *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)v704 + 7);
          *(_QWORD *)&__dst[8] = v704[0];
          v296 = v704[0];
          v703[0] = *(_QWORD *)__dst;
          v297 = HIBYTE(v680[2]);
          memset(v680, 0, 24);
          *(_QWORD *)((char *)v703 + 7) = v295;
          *(_QWORD *)__dst = v291;
          __dst[23] = v293;
          v704[0] = 0;
          *(_QWORD *)((char *)v704 + 7) = 0;
          if (v293 >= 0)
            v298 = __dst;
          else
            v298 = (_BYTE *)v291;
          if (v293 >= 0)
            v296 = v292;
          if (v296)
          {
            v299 = v298;
            if (v296 >= 8)
            {
              v299 = &v298[v296 & 0xFFFFFFFFFFFFFFF8];
              v300 = v298 + 3;
              v301 = v296 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v302 = vceq_s8(*(int8x8_t *)(v300 - 3), (int8x8_t)0x2323232323232323);
                if ((v302.i8[0] & 1) != 0)
                {
                  *(v300 - 3) = 95;
                  if ((v302.i8[1] & 1) == 0)
                    goto LABEL_425;
                }
                else if ((v302.i8[1] & 1) == 0)
                {
LABEL_425:
                  if ((v302.i8[2] & 1) != 0)
                    goto LABEL_426;
                  goto LABEL_434;
                }
                *(v300 - 2) = 95;
                if ((v302.i8[2] & 1) != 0)
                {
LABEL_426:
                  *(v300 - 1) = 95;
                  if ((v302.i8[3] & 1) == 0)
                    goto LABEL_427;
                  goto LABEL_435;
                }
LABEL_434:
                if ((v302.i8[3] & 1) == 0)
                {
LABEL_427:
                  if ((v302.i8[4] & 1) != 0)
                    goto LABEL_428;
                  goto LABEL_436;
                }
LABEL_435:
                *v300 = 95;
                if ((v302.i8[4] & 1) != 0)
                {
LABEL_428:
                  v300[1] = 95;
                  if ((v302.i8[5] & 1) == 0)
                    goto LABEL_429;
                  goto LABEL_437;
                }
LABEL_436:
                if ((v302.i8[5] & 1) == 0)
                {
LABEL_429:
                  if ((v302.i8[6] & 1) != 0)
                    goto LABEL_430;
                  goto LABEL_438;
                }
LABEL_437:
                v300[2] = 95;
                if ((v302.i8[6] & 1) != 0)
                {
LABEL_430:
                  v300[3] = 95;
                  if ((v302.i8[7] & 1) != 0)
                    goto LABEL_439;
                  goto LABEL_422;
                }
LABEL_438:
                if ((v302.i8[7] & 1) != 0)
LABEL_439:
                  v300[4] = 95;
LABEL_422:
                v300 += 8;
                v301 -= 8;
                if (!v301)
                {
                  if (v296 == (v296 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_472;
                  break;
                }
              }
            }
            v338 = &v298[v296];
            do
            {
              if (*v299 == 35)
                *v299 = 95;
              ++v299;
            }
            while (v299 != v338);
LABEL_472:
            v291 = *(_QWORD *)__dst;
            LOBYTE(v293) = __dst[23];
            v325 = HIBYTE(v680[2]);
          }
          else
          {
            v325 = 0;
          }
          info[1] = *(mach_timebase_info *)&__dst[8];
          *(mach_timebase_info *)((char *)&info[1].denom + 3) = *(mach_timebase_info *)&__dst[15];
          info[0] = (mach_timebase_info)v291;
          HIBYTE(info[2].denom) = v293;
          v706[0] = 1;
          *(_QWORD *)&v706[8] = v294;
          *(_QWORD *)&v706[16] = v703[0];
          *(_QWORD *)&v706[23] = *(_QWORD *)((char *)v703 + 7);
          v706[31] = v297;
          v703[0] = 0;
          *(_QWORD *)((char *)v703 + 7) = 0;
          v707 = 0uLL;
          v708 = 1;
          if (v325 < 0)
          {
            operator delete(v680[0]);
            if ((SHIBYTE(v734.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_475;
          }
          else if ((SHIBYTE(v734.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_475;
          }
          operator delete(v734.__r_.__value_.__l.__data_);
LABEL_475:
          HIBYTE(v680[2]) = 10;
          strcpy((char *)v680, "keypoints_");
          LODWORD(v680[3]) = 1;
          std::to_string(&v734, *(_DWORD *)(v581 + 16));
          *(_QWORD *)__dst = v680;
          *(_QWORD *)&__dst[8] = &v734;
          *(_QWORD *)&__dst[16] = v680;
          *(_QWORD *)&__dst[24] = &v734;
          *(_QWORD *)&__dst[32] = &v734;
          if (LODWORD(v680[3]) == -1)
            sub_20E877AB8();
          v652 = (uint64_t (**)())__dst;
          ((void (*)(uint64_t (***)(), void **))off_24C9C4810[LODWORD(v680[3])])(&v652, v680);
          if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v734.__r_.__value_.__l.__data_);
          if (LODWORD(v680[3]) == -1)
            sub_20E877AB8();
          *(_QWORD *)__dst = &v734;
          ((void (*)(void **__return_ptr, _BYTE *, void **))off_24C9C4840[LODWORD(v680[3])])(v655, __dst, v680);
          if (LODWORD(v680[3]) != -1)
            ((void (*)(_BYTE *, void **))off_24C9C4828[LODWORD(v680[3])])(__dst, v680);
          v326 = v655[0];
          v697[0] = v655[1];
          *(void **)((char *)v697 + 7) = *(void **)((char *)&v655[1] + 7);
          v327 = HIBYTE(v655[2]);
          v328 = SHIBYTE(v655[2]);
          memset(v655, 0, sizeof(v655));
          LODWORD(v734.__r_.__value_.__l.__data_) = *(_DWORD *)(v581 + 8);
          sub_20EB04900((unint64_t *)v581, (std::string *)"_", (unsigned int *)&v734);
          v329 = v680[0];
          *(void **)__dst = v680[1];
          __dst[7] = HIBYTE(v680[1]);
          v330 = *(uint64_t *)((char *)&v680[1] + 7);
          *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)v697 + 7);
          *(_QWORD *)&__dst[8] = v697[0];
          v331 = v697[0];
          v696[0] = *(_QWORD *)__dst;
          v332 = HIBYTE(v680[2]);
          memset(v680, 0, 24);
          *(_QWORD *)((char *)v696 + 7) = v330;
          *(_QWORD *)__dst = v326;
          __dst[23] = v328;
          v697[0] = 0;
          *(_QWORD *)((char *)v697 + 7) = 0;
          if (v328 >= 0)
            v333 = __dst;
          else
            v333 = v326;
          if (v328 >= 0)
            v331 = v327;
          if (v331)
          {
            v334 = v333;
            if (v331 >= 8)
            {
              v334 = &v333[v331 & 0xFFFFFFFFFFFFFFF8];
              v335 = v333 + 3;
              v336 = v331 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v337 = vceq_s8(*(int8x8_t *)(v335 - 3), (int8x8_t)0x2323232323232323);
                if ((v337.i8[0] & 1) != 0)
                {
                  *(v335 - 3) = 95;
                  if ((v337.i8[1] & 1) == 0)
                    goto LABEL_492;
                }
                else if ((v337.i8[1] & 1) == 0)
                {
LABEL_492:
                  if ((v337.i8[2] & 1) != 0)
                    goto LABEL_493;
                  goto LABEL_501;
                }
                *(v335 - 2) = 95;
                if ((v337.i8[2] & 1) != 0)
                {
LABEL_493:
                  *(v335 - 1) = 95;
                  if ((v337.i8[3] & 1) == 0)
                    goto LABEL_494;
                  goto LABEL_502;
                }
LABEL_501:
                if ((v337.i8[3] & 1) == 0)
                {
LABEL_494:
                  if ((v337.i8[4] & 1) != 0)
                    goto LABEL_495;
                  goto LABEL_503;
                }
LABEL_502:
                *v335 = 95;
                if ((v337.i8[4] & 1) != 0)
                {
LABEL_495:
                  v335[1] = 95;
                  if ((v337.i8[5] & 1) == 0)
                    goto LABEL_496;
                  goto LABEL_504;
                }
LABEL_503:
                if ((v337.i8[5] & 1) == 0)
                {
LABEL_496:
                  if ((v337.i8[6] & 1) != 0)
                    goto LABEL_497;
                  goto LABEL_505;
                }
LABEL_504:
                v335[2] = 95;
                if ((v337.i8[6] & 1) != 0)
                {
LABEL_497:
                  v335[3] = 95;
                  if ((v337.i8[7] & 1) != 0)
                    goto LABEL_506;
                  goto LABEL_489;
                }
LABEL_505:
                if ((v337.i8[7] & 1) != 0)
LABEL_506:
                  v335[4] = 95;
LABEL_489:
                v335 += 8;
                v336 -= 8;
                if (!v336)
                {
                  if (v331 == (v331 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_515;
                  break;
                }
              }
            }
            v340 = &v333[v331];
            do
            {
              if (*v334 == 35)
                *v334 = 95;
              ++v334;
            }
            while (v334 != v340);
LABEL_515:
            v326 = *(_BYTE **)__dst;
            LOBYTE(v328) = __dst[23];
            v339 = HIBYTE(v680[2]);
          }
          else
          {
            v339 = 0;
          }
          v698.__r_.__value_.__l.__size_ = *(_QWORD *)&__dst[8];
          *(std::string::size_type *)((char *)&v698.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&__dst[15];
          v698.__r_.__value_.__r.__words[0] = (std::string::size_type)v326;
          *((_BYTE *)&v698.__r_.__value_.__s + 23) = v328;
          v699 = 1;
          *(_QWORD *)v700 = v329;
          *(_QWORD *)&v700[8] = v696[0];
          *(_QWORD *)&v700[15] = *(_QWORD *)((char *)v696 + 7);
          v700[23] = v332;
          v696[0] = 0;
          *(_QWORD *)((char *)v696 + 7) = 0;
          v701 = 0uLL;
          v702 = 1;
          if (v339 < 0)
          {
            operator delete(v680[0]);
            if ((SHIBYTE(v655[2]) & 0x80000000) == 0)
              goto LABEL_518;
          }
          else if ((SHIBYTE(v655[2]) & 0x80000000) == 0)
          {
            goto LABEL_518;
          }
          operator delete(v655[0]);
LABEL_518:
          sub_20E860C04(__dst, v580, 0x24uLL);
          v585 = *(void **)__dst;
          v679[0] = *(_QWORD *)&__dst[8];
          *(_QWORD *)((char *)v679 + 7) = *(_QWORD *)&__dst[15];
          v583 = __dst[23];
          __dst[0] = 0;
          __dst[24] = 0;
          if (v706[0])
          {
            if (SHIBYTE(info[2].denom) < 0)
            {
              sub_20E860C04(__dst, *(void **)info, *(_QWORD *)&info[1]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)&info[0].numer;
              *(mach_timebase_info *)&__dst[16] = info[2];
            }
            __dst[24] = 1;
          }
          __dst[32] = 0;
          LOBYTE(v665) = 0;
          if (v708)
          {
            if ((v706[31] & 0x80000000) != 0)
            {
              sub_20E860C04(&__dst[32], *(void **)&v706[8], *(unint64_t *)&v706[16]);
            }
            else
            {
              *(_OWORD *)&__dst[32] = *(_OWORD *)&v706[8];
              *(_QWORD *)&v663 = *(_QWORD *)&v706[24];
            }
            do
              v341 = __ldaxp(&v707);
            while (__stlxp(v341, &v707));
            v664 = v341;
            LOBYTE(v665) = 1;
          }
          LOBYTE(v666) = 0;
          v668[0] = 0;
          if (v699)
          {
            if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_20E860C04(&v666, v698.__r_.__value_.__l.__data_, v698.__r_.__value_.__l.__size_);
            }
            else
            {
              v666 = *(_OWORD *)&v698.__r_.__value_.__l.__data_;
              v667 = (void *)v698.__r_.__value_.__r.__words[2];
            }
            v668[0] = 1;
          }
          v668[8] = 0;
          LOBYTE(v672[0]) = 0;
          if (v702)
          {
            if ((v700[23] & 0x80000000) != 0)
            {
              sub_20E860C04(&v668[8], *(void **)v700, *(unint64_t *)&v700[8]);
            }
            else
            {
              *(_OWORD *)&v668[8] = *(_OWORD *)v700;
              v669 = *(_QWORD *)&v700[16];
            }
            do
              v342 = __ldaxp(&v701);
            while (__stlxp(v342, &v701));
            v671 = v342;
            LOBYTE(v672[0]) = 1;
          }
          v673 = 0x72657473756C63uLL;
          *(_DWORD *)v674 = v628[0];
          *(_DWORD *)&v674[3] = *(_DWORD *)((char *)v628 + 3);
          *(_WORD *)&v674[7] = 263;
          LOBYTE(v675) = 0;
          v678 = 0;
          if (v592 < 0)
          {
            sub_20E860C04(&v675, v559, v555);
          }
          else
          {
            *(_QWORD *)&v675 = v559;
            *((_QWORD *)&v675 + 1) = v555;
            LODWORD(v676) = v627[0];
            *(_DWORD *)((char *)&v676 + 3) = *(_DWORD *)((char *)v627 + 3);
            HIBYTE(v676) = v592;
          }
          v677 = 0uLL;
          v678 = 1;
          v599 = 0;
          v597 = 0;
          v598 = 0;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v597;
          v734.__r_.__value_.__s.__data_[8] = 0;
          v343 = operator new(0x120uLL);
          v344 = v343;
          v597 = v343;
          v598 = (std::__shared_weak_count *)v343;
          v345 = v343 + 288;
          v599 = v343 + 288;
          *v343 = 0;
          v343[24] = 0;
          v346 = v343 + 24;
          if (__dst[24])
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              sub_20E860C04(v343, *(void **)__dst, *(unint64_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)v343 = *(_OWORD *)__dst;
              *((_QWORD *)v343 + 2) = *(_QWORD *)&__dst[16];
            }
            *v346 = 1;
          }
          v344[32] = 0;
          v344[80] = 0;
          if ((_BYTE)v665)
          {
            if (SBYTE7(v663) < 0)
            {
              sub_20E860C04(v344 + 32, *(void **)&__dst[32], *(unint64_t *)&__dst[40]);
            }
            else
            {
              *((_OWORD *)v344 + 2) = *(_OWORD *)&__dst[32];
              *((_QWORD *)v344 + 6) = v663;
            }
            do
              v347 = __ldaxp(&v664);
            while (__stlxp(v347, &v664));
            *((_OWORD *)v344 + 4) = v347;
            v344[80] = 1;
          }
          v344[96] = 0;
          v344[120] = 0;
          if (v668[0])
          {
            if (SHIBYTE(v667) < 0)
            {
              sub_20E860C04(v344 + 96, (void *)v666, *((unint64_t *)&v666 + 1));
            }
            else
            {
              *((_OWORD *)v344 + 6) = v666;
              *((_QWORD *)v344 + 14) = v667;
            }
            v344[120] = 1;
          }
          v344[176] = 0;
          v344[128] = 0;
          if (LOBYTE(v672[0]))
          {
            if (SHIBYTE(v669) < 0)
            {
              sub_20E860C04(v344 + 128, *(void **)&v668[8], *(unint64_t *)&v668[16]);
            }
            else
            {
              *((_OWORD *)v344 + 8) = *(_OWORD *)&v668[8];
              *((_QWORD *)v344 + 18) = v669;
            }
            do
              v348 = __ldaxp(&v671);
            while (__stlxp(v348, &v671));
            *((_OWORD *)v344 + 10) = v348;
            v344[176] = 1;
          }
          v344[192] = 0;
          v344[216] = 0;
          if (v674[8])
          {
            if ((v674[7] & 0x80000000) != 0)
            {
              sub_20E860C04(v344 + 192, (void *)v673, *((unint64_t *)&v673 + 1));
            }
            else
            {
              *((_OWORD *)v344 + 12) = v673;
              *((_QWORD *)v344 + 26) = *(_QWORD *)v674;
            }
            v344[216] = 1;
          }
          v344[224] = 0;
          v344[272] = 0;
          if (v678)
          {
            if (SHIBYTE(v676) < 0)
            {
              sub_20E860C04(v344 + 224, (void *)v675, *((unint64_t *)&v675 + 1));
            }
            else
            {
              *((_OWORD *)v344 + 14) = v675;
              *((_QWORD *)v344 + 30) = v676;
            }
            do
              v349 = __ldaxp(&v677);
            while (__stlxp(v349, &v677));
            *((_OWORD *)v344 + 16) = v349;
            v344[272] = 1;
          }
          v600[0] = v597;
          v600[1] = v345;
          v601 = v599;
          v597 = 0;
          v599 = 0;
          v598 = 0;
          v602 = 1;
          v350 = mach_continuous_time();
          v351 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
          v352 = v585;
          if ((v351 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
          {
            mach_timebase_info((mach_timebase_info_t)&v734);
            LODWORD(v532) = HIDWORD(v734.__r_.__value_.__r.__words[0]);
            LODWORD(v531) = v734.__r_.__value_.__l.__data_;
            *(double *)&qword_254A6D7C0 = (double)v531 / (double)v532;
            __cxa_guard_release(&qword_254A6D7C8);
            v352 = v585;
          }
          v680[0] = (void *)llround(*(double *)&qword_254A6D7C0 * (double)v350);
          v680[1] = (void *)2;
          strcpy((char *)&v680[2], "matches");
          LODWORD(v681) = v612[0];
          *(_DWORD *)((char *)&v681 + 3) = *(_DWORD *)((char *)v612 + 3);
          *(_WORD *)((char *)&v681 + 7) = 263;
          LOBYTE(v682) = 0;
          BYTE8(v683) = 0;
          v684 = a3;
          v685 = v569;
          v686 = 1;
          v687 = v352;
          *(_QWORD *)&v688[7] = *(_QWORD *)((char *)v679 + 7);
          *(_QWORD *)v688 = v679[0];
          v689 = v583;
          *(_QWORD *)((char *)v679 + 7) = 0;
          v679[0] = 0;
          v690 = 0;
          v691 = 0;
          v692 = 1;
          LOBYTE(v693[0]) = 0;
          v695 = 0;
          if (v602)
          {
            *(_OWORD *)v693 = *(_OWORD *)v600;
            v694 = v601;
            v601 = 0;
            v600[1] = 0;
            v600[0] = 0;
            v695 = 1;
          }
          v353 = v574;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v576 + 24))(v576))
          {
LABEL_651:
            if (!v695)
              goto LABEL_665;
            goto LABEL_652;
          }
          v354 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v576 + 56))(v576);
          v355 = (void **)v603;
          v356 = v604;
          memset(v655, 0, sizeof(v655));
          v357 = (char *)v604 - (_BYTE *)v603;
          if (v604 != v603)
          {
            if (v357 < 0)
              sub_20EB057F8();
            v358 = operator new((char *)v604 - (_BYTE *)v603);
            v655[0] = v358;
            v655[2] = (char *)v358 + 8 * (v357 >> 3);
            if ((unint64_t)(v357 - 8) < 0x18)
              goto LABEL_593;
            if ((unint64_t)((char *)v358 - (char *)v355) < 0x20)
              goto LABEL_593;
            v359 = ((unint64_t)(v357 - 8) >> 3) + 1;
            v360 = v359 & 0x3FFFFFFFFFFFFFFCLL;
            v361 = &v355[v360];
            v362 = (_QWORD *)((char *)v358 + v360 * 8);
            v363 = v358 + 1;
            v364 = (__int128 *)(v355 + 2);
            v365 = v359 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v366 = *v364;
              *(v363 - 1) = *(v364 - 1);
              *v363 = v366;
              v363 += 2;
              v364 += 2;
              v365 -= 4;
            }
            while (v365);
            v355 = v361;
            v358 = v362;
            if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_593:
              v362 = v358;
              do
              {
                v367 = (uint64_t)*v355++;
                *v362++ = v367;
              }
              while (v355 != v356);
            }
            v655[1] = v362;
          }
          v368 = operator new();
          v369 = v655[0];
          *(void **)v368 = v655[0];
          v586 = v655[1];
          *(_OWORD *)(v368 + 8) = *(_OWORD *)&v655[1];
          memset(v655, 0, sizeof(v655));
          v656 = v368;
          v370 = (_QWORD *)operator new();
          *v370 = &off_24C9C48E0;
          v370[1] = 0;
          v370[2] = 0;
          v370[3] = v368;
          v656 = 0;
          v734.__r_.__value_.__l.__size_ = v368;
          v734.__r_.__value_.__r.__words[2] = (std::string::size_type)v370;
          v660 = 0;
          v659 = 0;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20EB0C158;
          v371 = (char *)operator new(0x58uLL);
          *((_QWORD *)v371 + 1) = 0;
          *((_QWORD *)v371 + 2) = 0;
          if (v369)
            v372 = (v586 - v369) >> 2;
          else
            v372 = 0;
          *(_QWORD *)v371 = &off_24CA16E38;
          *(_OWORD *)(v371 + 40) = 0u;
          *(_OWORD *)(v371 + 56) = 0u;
          *(_OWORD *)(v371 + 72) = 0u;
          *(_OWORD *)(v371 + 24) = 0u;
          v657 = v371 + 24;
          v658 = (std::__shared_weak_count *)v371;
          v371[24] = 2;
          sub_20FE5F010((_QWORD *)v371 + 4, (void (**)(uint64_t))&v734);
          v373 = (std::string::size_type)v657;
          *((_QWORD *)v657 + 7) = v372;
          if (!v369 && v372)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v373 = (std::string::size_type)v657;
          }
          *(_QWORD *)(v373 + 40) = 4 * v372;
          *(_QWORD *)(v373 + 48) = v369;
          if (v734.__r_.__value_.__r.__words[0])
          {
            ((void (*)(int))v734.__r_.__value_.__l.__data_)(0);
            v373 = (std::string::size_type)v657;
          }
          v374 = (void **)&v658->__vftable;
          v658 = 0;
          v657 = 0;
          if ((*(_BYTE *)(v373 + 56) & 1) == 0)
            goto LABEL_611;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v375 = v658;
          if (!v658)
            goto LABEL_611;
          v376 = (unint64_t *)&v658->__shared_owners_;
          do
            v377 = __ldaxr(v376);
          while (__stlxr(v377 - 1, v376));
          if (!v377)
          {
            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
            std::__shared_weak_count::__release_weak(v375);
            v378 = v656;
            if (!v656)
              goto LABEL_615;
          }
          else
          {
LABEL_611:
            v378 = v656;
            if (!v656)
              goto LABEL_615;
          }
          v379 = *(void **)v378;
          if (*(_QWORD *)v378)
          {
            *(_QWORD *)(v378 + 8) = v379;
            operator delete(v379);
          }
          MEMORY[0x212BC6398](v378, 0x20C40960023A9);
LABEL_615:
          if (v655[0])
          {
            v655[1] = v655[0];
            operator delete(v655[0]);
          }
          v734.__r_.__value_.__r.__words[0] = v373;
          v734.__r_.__value_.__l.__size_ = (std::string::size_type)v374;
          v380 = operator new();
          *(_QWORD *)v380 = &off_24C9C4A40;
          *(_QWORD *)(v380 + 8) = v373;
          *(_QWORD *)(v380 + 16) = v374;
          *(_OWORD *)&v734.__r_.__value_.__l.__data_ = 0uLL;
          sub_20EB09F3C(v380 + 32, (uint64_t)v680);
          *(_QWORD *)v380 = &off_24C9C49C0;
          v652 = &off_24CA0C0E8;
          v653 = v380;
          v381 = (unint64_t *)operator new();
          *v381 = (unint64_t)&off_24CA0C1E0;
          v381[1] = 0;
          v381[2] = 0;
          v381[3] = v380;
          v654 = (std::__shared_weak_count *)v381;
          v383 = *v354;
          v382 = v354[1];
          v659 = (void ***)*v354;
          v660 = (std::__shared_weak_count *)v382;
          v353 = v574;
          if (v382)
          {
            v384 = (unint64_t *)(v382 + 8);
            do
              v385 = __ldxr(v384);
            while (__stxr(v385 + 1, v384));
            v381 = (unint64_t *)v654;
          }
          v386 = v653;
          v655[0] = &off_24CA0C0E8;
          v655[1] = (void *)v653;
          v655[2] = v381;
          v653 = 0;
          v654 = 0;
          v734.__r_.__value_.__r.__words[0] = v383;
          v734.__r_.__value_.__l.__size_ = v382;
          if (v382)
          {
            v387 = (unint64_t *)(v382 + 8);
            do
              v388 = __ldxr(v387);
            while (__stxr(v388 + 1, v387));
          }
          v734.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24CA0C0E8;
          v735 = v386;
          v736 = (std::__shared_weak_count *)v381;
          if (v381)
          {
            v389 = v381 + 1;
            do
              v390 = __ldxr(v389);
            while (__stxr(v390 + 1, v389));
          }
          (*(void (**)(_QWORD *, std::string *))(*a2 + 16))(a2, &v734);
          v391 = v736;
          if (!v736)
            goto LABEL_631;
          v392 = (unint64_t *)&v736->__shared_owners_;
          do
            v393 = __ldaxr(v392);
          while (__stlxr(v393 - 1, v392));
          if (!v393)
          {
            ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
            std::__shared_weak_count::__release_weak(v391);
            size = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
            if (!v734.__r_.__value_.__l.__size_)
              goto LABEL_637;
          }
          else
          {
LABEL_631:
            size = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
            if (!v734.__r_.__value_.__l.__size_)
              goto LABEL_637;
          }
          v395 = (unint64_t *)&size->__shared_owners_;
          do
            v396 = __ldaxr(v395);
          while (__stlxr(v396 - 1, v395));
          if (!v396)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
LABEL_637:
          v397 = (std::__shared_weak_count *)v655[2];
          if (!v655[2])
            goto LABEL_641;
          v398 = (unint64_t *)((char *)v655[2] + 8);
          do
            v399 = __ldaxr(v398);
          while (__stlxr(v399 - 1, v398));
          if (!v399)
          {
            ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
            std::__shared_weak_count::__release_weak(v397);
            v400 = v660;
            if (!v660)
              goto LABEL_647;
          }
          else
          {
LABEL_641:
            v400 = v660;
            if (!v660)
              goto LABEL_647;
          }
          v401 = (unint64_t *)&v400->__shared_owners_;
          do
            v402 = __ldaxr(v401);
          while (__stlxr(v402 - 1, v401));
          if (!v402)
          {
            ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
            std::__shared_weak_count::__release_weak(v400);
          }
LABEL_647:
          v403 = v654;
          if (!v654)
            goto LABEL_651;
          v404 = (unint64_t *)&v654->__shared_owners_;
          do
            v405 = __ldaxr(v404);
          while (__stlxr(v405 - 1, v404));
          if (v405)
            goto LABEL_651;
          ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
          std::__shared_weak_count::__release_weak(v403);
          if (!v695)
            goto LABEL_665;
LABEL_652:
          v406 = (void **)v693[0];
          if (v693[0])
          {
            v407 = (void **)v693[1];
            v408 = v693[0];
            if (v693[1] == v693[0])
            {
LABEL_664:
              v693[1] = v406;
              operator delete(v408);
              goto LABEL_665;
            }
            while (1)
            {
              if (*((_BYTE *)v407 - 16) && *((char *)v407 - 41) < 0)
              {
                operator delete(*(v407 - 8));
                if (*((_BYTE *)v407 - 72))
                {
LABEL_659:
                  if (*((char *)v407 - 73) < 0)
                    operator delete(*(v407 - 12));
                }
              }
              else if (*((_BYTE *)v407 - 72))
              {
                goto LABEL_659;
              }
              v407 -= 12;
              if (v407 == v406)
              {
                v408 = v693[0];
                goto LABEL_664;
              }
            }
          }
LABEL_665:
          if (v692 && v689 < 0)
            operator delete(v687);
          if (BYTE8(v683) && SBYTE7(v683) < 0)
            operator delete(v682);
          if (BYTE8(v681) && SBYTE7(v681) < 0)
            operator delete(v680[2]);
          if (v602)
          {
            v409 = (void **)v600[0];
            if (v600[0])
            {
              v410 = (void **)v600[1];
              v411 = v600[0];
              if (v600[1] == v600[0])
              {
LABEL_687:
                v600[1] = v409;
                operator delete(v411);
                goto LABEL_688;
              }
              while (1)
              {
                if (*((_BYTE *)v410 - 16) && *((char *)v410 - 41) < 0)
                {
                  operator delete(*(v410 - 8));
                  if (*((_BYTE *)v410 - 72))
                  {
LABEL_682:
                    if (*((char *)v410 - 73) < 0)
                      operator delete(*(v410 - 12));
                  }
                }
                else if (*((_BYTE *)v410 - 72))
                {
                  goto LABEL_682;
                }
                v410 -= 12;
                if (v410 == v409)
                {
                  v411 = v600[0];
                  goto LABEL_687;
                }
              }
            }
          }
LABEL_688:
          v412 = (std::__shared_weak_count *)v597;
          if (!v597)
            goto LABEL_701;
          v413 = v598;
          v414 = v597;
          if (v598 != v597)
          {
            while (1)
            {
              if (LOBYTE(v413[-1].__shared_owners_) && SHIBYTE(v413[-2].__vftable) < 0)
              {
                operator delete((void *)v413[-3].__shared_owners_);
                if (LOBYTE(v413[-3].__vftable))
                {
LABEL_695:
                  if (SHIBYTE(v413[-4].__shared_weak_owners_) < 0)
                    operator delete(v413[-4].__vftable);
                }
              }
              else if (LOBYTE(v413[-3].__vftable))
              {
                goto LABEL_695;
              }
              v413 -= 4;
              if (v413 == v412)
              {
                v414 = v597;
                break;
              }
            }
          }
          v598 = v412;
          operator delete(v414);
LABEL_701:
          if (v678 && SHIBYTE(v676) < 0)
            operator delete((void *)v675);
          if (v674[8] && (v674[7] & 0x80000000) != 0)
            operator delete((void *)v673);
          if (LOBYTE(v672[0]) && SHIBYTE(v669) < 0)
            operator delete(*(void **)&v668[8]);
          if (v668[0] && SHIBYTE(v667) < 0)
            operator delete((void *)v666);
          if ((_BYTE)v665 && SBYTE7(v663) < 0)
            operator delete(*(void **)&__dst[32]);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          LOBYTE(v657) = 0;
          v658 = 0;
          if ((char *)*v579 - (char *)*v353 != *v567 - *v568)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOMetadata.cpp", 323, (uint64_t)"query_correspondence_indices.size() == ref_correspondence_indices.size()", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v415 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v415 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v416 = qword_254A6DE40;
              for (m = qword_254A6DE48; v416 != m; v416 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v416)(*(_QWORD *)(v416 + 8), "query_correspondence_indices.size() == ref_correspondence_indices.size()", 72, "", 0);
            }
            v418 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v418 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "query_correspondence_indices.size() == ref_correspondence_indices.size()", 72, "", 0);
          }
          memset(__dst, 0, 24);
          v419 = (char *)*v579 - (char *)*v353;
          if (*v579 == *v353)
          {
            v446 = 0;
            v422 = 0;
            goto LABEL_791;
          }
          if (v419 < 0)
            sub_20E867F44();
          v420 = ((unint64_t)((v419 >> 2) - 1) >> 6) + 1;
          v421 = (char *)operator new(8 * v420);
          v422 = v421;
          *(_QWORD *)v421 = 0;
          *(_QWORD *)__dst = v421;
          *(_QWORD *)&__dst[16] = v420;
          v423 = *v353;
          v424 = *v579;
          if (*v353 == *v579)
          {
            v446 = 0;
            goto LABEL_791;
          }
          v425 = v421;
          while (2)
          {
            while (2)
            {
              if (!v617)
                goto LABEL_748;
              v426 = *v423;
              v427 = (uint8x8_t)vcnt_s8((int8x8_t)v617);
              v427.i16[0] = vaddlv_u8(v427);
              if (v427.u32[0] > 1uLL)
              {
                v428 = *v423;
                if (v617 <= v426)
                  v428 = v426 % v617;
              }
              else
              {
                v428 = ((_DWORD)v617 - 1) & v426;
              }
              v429 = *(uint64_t ***)(*(_QWORD *)&v616 + 8 * v428);
              if (!v429)
              {
LABEL_748:
                v430 = 0;
                v432 = *(_QWORD *)&__dst[8];
                v433 = *(_QWORD *)&__dst[16];
                if (*(_QWORD *)&__dst[8] == *(_QWORD *)&__dst[16] << 6)
                  goto LABEL_758;
                goto LABEL_749;
              }
              v430 = *v429;
              if (!*v429)
                goto LABEL_757;
              if (v427.u32[0] >= 2uLL)
              {
                while (1)
                {
                  v431 = v430[1];
                  if (v431 == v426)
                  {
                    if (*((_DWORD *)v430 + 4) == (_DWORD)v426)
                      goto LABEL_757;
                  }
                  else
                  {
                    if (v431 >= v617)
                      v431 %= v617;
                    if (v431 != v428)
                      goto LABEL_748;
                  }
                  v430 = (uint64_t *)*v430;
                  if (!v430)
                    goto LABEL_757;
                }
              }
              while (1)
              {
                v436 = v430[1];
                if (v436 == v426)
                {
                  if (*((_DWORD *)v430 + 4) == (_DWORD)v426)
                    goto LABEL_757;
                  goto LABEL_753;
                }
                if ((v436 & (v617 - 1)) != v428)
                  break;
LABEL_753:
                v430 = (uint64_t *)*v430;
                if (!v430)
                  goto LABEL_757;
              }
              v430 = 0;
LABEL_757:
              v432 = *(_QWORD *)&__dst[8];
              v433 = *(_QWORD *)&__dst[16];
              if (*(_QWORD *)&__dst[8] != *(_QWORD *)&__dst[16] << 6)
              {
LABEL_749:
                v422 = v425;
                goto LABEL_750;
              }
LABEL_758:
              if ((uint64_t)(v432 + 1) < 0)
                sub_20E867F44();
              if (v432 > 0x3FFFFFFFFFFFFFFELL)
              {
                v437 = 0x7FFFFFFFFFFFFFFFLL;
                if (v432 < 0x7FFFFFFFFFFFFFFFLL)
                  goto LABEL_766;
                v422 = v421;
                *(_QWORD *)&__dst[8] = 0;
                v434 = 0x3FFFFFFFFFFFFFFLL;
                v435 = 0;
                if (!v430)
                  goto LABEL_732;
LABEL_787:
                *(_QWORD *)&v422[8 * v434] |= v435;
                ++v423;
                v425 = v422;
                if (v423 != v424)
                  continue;
                goto LABEL_788;
              }
              break;
            }
            v437 = v433 << 7;
            if (v437 <= (v432 & 0xFFFFFFFFFFFFFFC0) + 64)
              v437 = (v432 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v432 >= v437)
            {
LABEL_784:
              v422 = v421;
              *(_QWORD *)&__dst[8] = v432 + 1;
              v434 = v432 >> 6;
              v435 = 1 << v432;
              if (!v430)
                goto LABEL_732;
              goto LABEL_787;
            }
            if ((v437 & 0x8000000000000000) != 0)
              sub_20E867F44();
LABEL_766:
            v438 = ((v437 - 1) >> 6) + 1;
            v421 = (char *)operator new(8 * v438);
            v439 = (v432 - 1) >> 6;
            if (v432 < 0x41)
              v439 = 0;
            *(_QWORD *)&v421[8 * v439] = 0;
            if (v432 > 0x3F || (v432 & 0x3F) != 0)
            {
              v440 = 0;
              v441 = 0;
              v442 = (uint64_t *)v421;
              v443 = v425;
              do
              {
                v444 = 1 << v440;
                if (((*(_QWORD *)v443 >> v441) & 1) != 0)
                  v445 = *v442 | v444;
                else
                  v445 = *v442 & ~v444;
                *v442 = v445;
                v443 += 8 * (v441 == 63);
                if (v441 == 63)
                  v441 = 0;
                else
                  ++v441;
                v442 += v440 == 63;
                if (v440 == 63)
                  v440 = 0;
                else
                  ++v440;
              }
              while (v441 != (v432 & 0x3F) || v443 != &v425[8 * (v432 >> 6)]);
            }
            *(_QWORD *)__dst = v421;
            *(_QWORD *)&__dst[16] = v438;
            v422 = v421;
            if (v425)
            {
              operator delete(v425);
              v432 = *(_QWORD *)&__dst[8];
              v421 = *(char **)__dst;
              goto LABEL_784;
            }
LABEL_750:
            *(_QWORD *)&__dst[8] = v432 + 1;
            v434 = v432 >> 6;
            v435 = 1 << v432;
            if (v430)
              goto LABEL_787;
LABEL_732:
            *(_QWORD *)&v422[8 * v434] &= ~v435;
            ++v423;
            v425 = v422;
            if (v423 != v424)
              continue;
            break;
          }
LABEL_788:
          v446 = *(_QWORD *)&__dst[8];
LABEL_791:
          v596 = 0;
          v447 = (void **)operator new(0x18uLL);
          *v447 = 0;
          v447[1] = 0;
          v447[2] = 0;
          v596 = v447;
          if (v446)
          {
            if (v446 >> 60)
              sub_20EB057F8();
            v448 = (char *)operator new(16 * v446);
            *v447 = v448;
            v447[1] = v448;
            v447[2] = &v448[16 * v446];
          }
          v587 = v446 & 0x3F;
          if (v446 > 0x3F || (v446 & 0x3F) != 0)
          {
            v458 = 0;
            v459 = 0;
            v460 = &v422[8 * (v446 >> 6)];
            v461 = v422;
            while (1)
            {
              v462 = *(_QWORD *)v461;
              v463 = v596;
              __dst[0] = 4;
              v464 = (v462 >> v459) & 1;
              *(_QWORD *)&__dst[8] = v464;
              v465 = (char *)v596[1];
              v466 = (char *)v596[2];
              if (v465 >= v466)
                break;
              v467 = 0;
              *v465 = 4;
              *((_QWORD *)v465 + 1) = *(_QWORD *)&__dst[8];
              __dst[0] = 0;
              *(_QWORD *)&__dst[8] = 0;
              v468 = v465 + 16;
LABEL_820:
              v463[1] = v468;
              sub_20EB07D94((void ***)&__dst[8], v467);
              v461 += 8 * (v458 == 63);
              if (v458 == 63)
                v459 = 0;
              else
                ++v459;
              v458 = v459;
              if (v461 == v460 && v587 == v459)
                goto LABEL_796;
            }
            v469 = (v465 - (_BYTE *)*v596) >> 4;
            v470 = v469 + 1;
            if ((unint64_t)(v469 + 1) >> 60)
              sub_20EB057F8();
            v471 = v466 - (_BYTE *)*v596;
            if (v471 >> 3 > v470)
              v470 = v471 >> 3;
            if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF0)
              v472 = 0xFFFFFFFFFFFFFFFLL;
            else
              v472 = v470;
            if (v472 >> 60)
              sub_20E877A38();
            v473 = (char *)operator new(16 * v472);
            v474 = &v473[16 * v469];
            v475 = &v473[16 * v472];
            *v474 = 4;
            *((_QWORD *)v474 + 1) = v464;
            __dst[0] = 0;
            *(_QWORD *)&__dst[8] = 0;
            v468 = v474 + 16;
            v476 = (void ***)*v463;
            v477 = (void ***)v463[1];
            if (v477 == *v463)
            {
              *v463 = v474;
              v463[1] = v468;
              v463[2] = v475;
              if (!v477)
                goto LABEL_819;
            }
            else
            {
              do
              {
                v478 = *((_BYTE *)v477 - 16);
                v477 -= 2;
                *(v474 - 16) = v478;
                v474 -= 16;
                *((_QWORD *)v474 + 1) = v477[1];
                *(_BYTE *)v477 = 0;
                v477[1] = 0;
              }
              while (v477 != v476);
              v477 = (void ***)*v463;
              v479 = (void ***)v463[1];
              *v463 = v474;
              v463[1] = v468;
              v463[2] = v475;
              if (v479 != v477)
              {
                v480 = v479 - 1;
                do
                {
                  v481 = v480 - 1;
                  sub_20EB07D94(v480, *((unsigned __int8 *)v480 - 8));
                  v480 -= 2;
                }
                while (v481 != v477);
              }
              if (!v477)
                goto LABEL_819;
            }
            operator delete(v477);
LABEL_819:
            v467 = __dst[0];
            goto LABEL_820;
          }
LABEL_796:
          v449 = sub_20EB04C20((uint64_t)&v657, "is_inlier");
          v450 = *v449;
          *v449 = 2;
          v451 = (void **)*((_QWORD *)v449 + 1);
          *((_QWORD *)v449 + 1) = v596;
          v596 = v451;
          sub_20EB07D94(&v596, v450);
          if (v422)
            operator delete(v422);
          v452 = operator new();
          *(_BYTE *)v452 = (_BYTE)v657;
          *(_QWORD *)(v452 + 8) = v658;
          LOBYTE(v657) = 0;
          v658 = 0;
          *(_QWORD *)__dst = v452;
          p_shared_owners = v590;
          v73 = v589;
          v74 = v564;
          v453 = operator new();
          sub_21009A830(v453, (uint64_t *)__dst);
          *(_QWORD *)&v595 = v453;
          v454 = (_QWORD *)operator new();
          *v454 = &off_24CA15F60;
          v454[1] = 0;
          v454[2] = 0;
          v454[3] = v453;
          *((_QWORD *)&v595 + 1) = v454;
          v455 = *(void ****)__dst;
          *(_QWORD *)__dst = 0;
          if (v455)
          {
            sub_20EB07D94(v455 + 1, *(unsigned __int8 *)v455);
            MEMORY[0x212BC6398](v455, 0x1022C40B06DCE69);
          }
          sub_20E860C04(v680, v580, 0x24uLL);
          v456 = v680[0];
          v661[0] = v680[1];
          *(void **)((char *)v661 + 7) = *(void **)((char *)&v680[1] + 7);
          v457 = HIBYTE(v680[2]);
          strcpy((char *)v680, "matches");
          v680[1] = 0;
          LODWORD(v680[2]) = v611[0];
          *(_DWORD *)((char *)&v680[2] + 3) = *(_DWORD *)((char *)v611 + 3);
          *(_WORD *)((char *)&v680[2] + 7) = 263;
          LOBYTE(v681) = 0;
          LOBYTE(v684) = 0;
          if (v575 < 0)
          {
            sub_20E860C04(&v681, v573, v566);
          }
          else
          {
            *(_QWORD *)&v681 = v573;
            *((_QWORD *)&v681 + 1) = v566;
            LODWORD(v682) = v610[0];
            *(_DWORD *)((char *)&v682 + 3) = *(_DWORD *)((char *)v610 + 3);
            HIBYTE(v682) = v575;
          }
          v683 = 0uLL;
          LOBYTE(v684) = 1;
          v599 = 0;
          v597 = 0;
          v598 = 0;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v597;
          v734.__r_.__value_.__s.__data_[8] = 0;
          v482 = operator new(0x60uLL);
          v483 = v482;
          v597 = v482;
          v598 = (std::__shared_weak_count *)v482;
          v484 = v482 + 96;
          v599 = v482 + 96;
          *v482 = 0;
          v482[24] = 0;
          if (!LOBYTE(v680[3]))
          {
LABEL_832:
            v482[32] = 0;
            v485 = v482 + 32;
            v482[80] = 0;
LABEL_833:
            if (SHIBYTE(v682) < 0)
            {
              sub_20E860C04(v485, (void *)v681, *((unint64_t *)&v681 + 1));
            }
            else
            {
              *(_OWORD *)v485 = v681;
              *((_QWORD *)v485 + 2) = v682;
            }
            do
              v486 = __ldaxp(&v683);
            while (__stlxp(v486, &v683));
            *((_OWORD *)v483 + 4) = v486;
            v483[80] = 1;
            goto LABEL_838;
          }
          if ((SHIBYTE(v680[2]) & 0x80000000) == 0)
          {
            *(_OWORD *)v482 = *(_OWORD *)v680;
            *((void **)v482 + 2) = v680[2];
            v482[24] = 1;
            goto LABEL_832;
          }
          sub_20E860C04(v482, v680[0], (unint64_t)v680[1]);
          v513 = v684;
          v483[32] = 0;
          v485 = v483 + 32;
          v483[24] = 1;
          v483[80] = 0;
          if (v513)
            goto LABEL_833;
LABEL_838:
          v593[0] = v597;
          v593[1] = v484;
          v594 = v599;
          v597 = 0;
          v599 = 0;
          v598 = 0;
          v487 = mach_continuous_time();
          v488 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
          if ((v488 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
          {
            mach_timebase_info((mach_timebase_info_t)&v734);
            LODWORD(v534) = HIDWORD(v734.__r_.__value_.__r.__words[0]);
            LODWORD(v533) = v734.__r_.__value_.__l.__data_;
            *(double *)&qword_254A6D7C0 = (double)v533 / (double)v534;
            __cxa_guard_release(&qword_254A6D7C8);
            p_shared_owners = v590;
            v73 = v589;
            v74 = v564;
          }
          *(_QWORD *)__dst = llround(*(double *)&qword_254A6D7C0 * (double)v487);
          *(_QWORD *)&__dst[8] = 2;
          strcpy(&__dst[16], "matches_metadata");
          *(_DWORD *)&__dst[33] = v606;
          *(_WORD *)&__dst[37] = v607;
          *(_WORD *)&__dst[39] = 272;
          LOBYTE(v663) = 0;
          BYTE8(v664) = 0;
          *(_QWORD *)&v665 = a3;
          *((_QWORD *)&v665 + 1) = v569;
          LOBYTE(v666) = 1;
          v667 = v456;
          *(_QWORD *)&v668[7] = *(_QWORD *)((char *)v661 + 7);
          *(_QWORD *)v668 = v661[0];
          v668[15] = v457;
          v661[0] = 0;
          *(_QWORD *)((char *)v661 + 7) = 0;
          v669 = 0;
          v670 = 0;
          LOBYTE(v671) = 1;
          *(_OWORD *)v672 = *(_OWORD *)v593;
          *(_QWORD *)&v673 = v594;
          BYTE8(v673) = 1;
          v153 = v592;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v576 + 24))(v576))
            goto LABEL_886;
          v489 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v576 + 56))(v576);
          *(_OWORD *)&v734.__r_.__value_.__l.__data_ = v595;
          if (*((_QWORD *)&v595 + 1))
          {
            v490 = (unint64_t *)(*((_QWORD *)&v595 + 1) + 8);
            do
              v491 = __ldxr(v490);
            while (__stxr(v491 + 1, v490));
          }
          v492 = operator new();
          *(_QWORD *)v492 = &off_24CA07C30;
          *(_OWORD *)(v492 + 8) = *(_OWORD *)&v734.__r_.__value_.__l.__data_;
          *(_OWORD *)&v734.__r_.__value_.__l.__data_ = 0uLL;
          sub_20EB09F3C(v492 + 32, (uint64_t)__dst);
          *(_QWORD *)v492 = &off_24CA07BC8;
          v655[0] = 0;
          v652 = &off_24CA0C0E8;
          v653 = v492;
          v493 = (std::__shared_weak_count *)operator new();
          v493->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0C1E0;
          v493->__shared_owners_ = 0;
          v493->__shared_weak_owners_ = 0;
          v493[1].__vftable = (std::__shared_weak_count_vtbl *)v492;
          v654 = v493;
          v655[0] = 0;
          v494 = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
          if (!v734.__r_.__value_.__l.__size_)
            goto LABEL_847;
          v495 = (unint64_t *)(v734.__r_.__value_.__l.__size_ + 8);
          do
            v496 = __ldaxr(v495);
          while (__stlxr(v496 - 1, v495));
          if (!v496)
          {
            ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
            std::__shared_weak_count::__release_weak(v494);
            v498 = *v489;
            v497 = v489[1];
            v659 = (void ***)*v489;
            v660 = (std::__shared_weak_count *)v497;
            if (v497)
              goto LABEL_848;
          }
          else
          {
LABEL_847:
            v498 = *v489;
            v497 = v489[1];
            v659 = (void ***)*v489;
            v660 = (std::__shared_weak_count *)v497;
            if (v497)
            {
LABEL_848:
              v499 = (unint64_t *)(v497 + 8);
              do
                v500 = __ldxr(v499);
              while (__stxr(v500 + 1, v499));
            }
          }
          v501 = v653;
          v502 = v654;
          v655[0] = &off_24CA0C0E8;
          v655[1] = (void *)v653;
          v655[2] = v654;
          v653 = 0;
          v654 = 0;
          v734.__r_.__value_.__r.__words[0] = v498;
          v734.__r_.__value_.__l.__size_ = v497;
          if (v497)
          {
            v503 = (unint64_t *)(v497 + 8);
            do
              v504 = __ldxr(v503);
            while (__stxr(v504 + 1, v503));
          }
          v734.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24CA0C0E8;
          v735 = v501;
          v736 = v502;
          if (v502)
          {
            v505 = (unint64_t *)&v502->__shared_owners_;
            do
              v506 = __ldxr(v505);
            while (__stxr(v506 + 1, v505));
          }
          (*(void (**)(_QWORD *, std::string *))(*a2 + 16))(a2, &v734);
          v507 = v736;
          if (!v736)
            goto LABEL_860;
          v508 = (unint64_t *)&v736->__shared_owners_;
          do
            v509 = __ldaxr(v508);
          while (__stlxr(v509 - 1, v508));
          if (!v509)
          {
            ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
            std::__shared_weak_count::__release_weak(v507);
            v510 = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
            if (v734.__r_.__value_.__l.__size_)
            {
LABEL_861:
              v511 = (unint64_t *)&v510->__shared_owners_;
              do
                v512 = __ldaxr(v511);
              while (__stlxr(v512 - 1, v511));
              if (!v512)
              {
                ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                std::__shared_weak_count::__release_weak(v510);
              }
            }
          }
          else
          {
LABEL_860:
            v510 = (std::__shared_weak_count *)v734.__r_.__value_.__l.__size_;
            if (v734.__r_.__value_.__l.__size_)
              goto LABEL_861;
          }
          v514 = (std::__shared_weak_count *)v655[2];
          if (!v655[2])
            goto LABEL_876;
          v515 = (unint64_t *)((char *)v655[2] + 8);
          do
            v516 = __ldaxr(v515);
          while (__stlxr(v516 - 1, v515));
          if (!v516)
          {
            ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
            std::__shared_weak_count::__release_weak(v514);
            v517 = v660;
            if (v660)
            {
LABEL_877:
              v518 = (unint64_t *)&v517->__shared_owners_;
              do
                v519 = __ldaxr(v518);
              while (__stlxr(v519 - 1, v518));
              if (!v519)
              {
                ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                std::__shared_weak_count::__release_weak(v517);
              }
            }
          }
          else
          {
LABEL_876:
            v517 = v660;
            if (v660)
              goto LABEL_877;
          }
          v520 = v654;
          if (!v654)
            goto LABEL_886;
          v521 = (unint64_t *)&v654->__shared_owners_;
          do
            v522 = __ldaxr(v521);
          while (__stlxr(v522 - 1, v521));
          if (v522)
          {
LABEL_886:
            if (BYTE8(v673))
              goto LABEL_887;
            goto LABEL_900;
          }
          ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
          std::__shared_weak_count::__release_weak(v520);
          if (!BYTE8(v673))
            goto LABEL_900;
LABEL_887:
          v523 = (void **)v672[0];
          if (v672[0])
          {
            v524 = (void **)v672[1];
            v525 = v672[0];
            if (v672[1] == v672[0])
            {
LABEL_899:
              v672[1] = v523;
              operator delete(v525);
              goto LABEL_900;
            }
            while (2)
            {
              if (*((_BYTE *)v524 - 16) && *((char *)v524 - 41) < 0)
              {
                operator delete(*(v524 - 8));
                if (*((_BYTE *)v524 - 72))
                  goto LABEL_894;
              }
              else if (*((_BYTE *)v524 - 72))
              {
LABEL_894:
                if (*((char *)v524 - 73) < 0)
                  operator delete(*(v524 - 12));
              }
              v524 -= 12;
              if (v524 == v523)
              {
                v525 = v672[0];
                goto LABEL_899;
              }
              continue;
            }
          }
LABEL_900:
          if ((_BYTE)v671 && (v668[15] & 0x80000000) != 0)
            operator delete(v667);
          if (BYTE8(v664) && SBYTE7(v664) < 0)
            operator delete((void *)v663);
          if (__dst[40] && (__dst[39] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
          v526 = (std::__shared_weak_count *)v597;
          if (v597)
          {
            v527 = v598;
            v528 = v597;
            if (v598 == v597)
            {
LABEL_921:
              v598 = v526;
              operator delete(v528);
              goto LABEL_922;
            }
            while (2)
            {
              if (LOBYTE(v527[-1].__shared_owners_) && SHIBYTE(v527[-2].__vftable) < 0)
              {
                operator delete((void *)v527[-3].__shared_owners_);
                if (LOBYTE(v527[-3].__vftable))
                  goto LABEL_916;
              }
              else if (LOBYTE(v527[-3].__vftable))
              {
LABEL_916:
                if (SHIBYTE(v527[-4].__shared_weak_owners_) < 0)
                  operator delete(v527[-4].__vftable);
              }
              v527 -= 4;
              if (v527 == v526)
              {
                v528 = v597;
                goto LABEL_921;
              }
              continue;
            }
          }
LABEL_922:
          if ((_BYTE)v684 && SHIBYTE(v682) < 0)
            operator delete((void *)v681);
          if (LOBYTE(v680[3]) && SHIBYTE(v680[2]) < 0)
            operator delete(v680[0]);
          if (*((_QWORD *)&v595 + 1))
          {
            v529 = (unint64_t *)(*((_QWORD *)&v595 + 1) + 8);
            do
              v530 = __ldaxr(v529);
            while (__stlxr(v530 - 1, v529));
            if (!v530)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v595 + 1) + 16))(*((_QWORD *)&v595 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v595 + 1));
            }
          }
          sub_20EB07D94((void ***)&v658, v657);
          if (v702 && (v700[23] & 0x80000000) != 0)
            operator delete(*(void **)v700);
          if (v699 && SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v698.__r_.__value_.__l.__data_);
          if (v708 && (v706[31] & 0x80000000) != 0)
            operator delete(*(void **)&v706[8]);
          if (v706[0] && SHIBYTE(info[2].denom) < 0)
            operator delete(*(void **)info);
          if (v603)
          {
            v604 = (void **)v603;
            operator delete(v603);
          }
          if (v575 < 0)
            operator delete(v573);
          operator delete(v580);
          v260 = v565 + 1;
          v581 += 24;
          if (v581 != v558)
            continue;
          break;
        }
LABEL_961:
        if (v622)
        {
LABEL_962:
          if (v621)
            operator delete(v621);
          if (v620)
            operator delete(v620);
          v535 = v618;
          if (v618)
          {
            do
            {
              v536 = (_QWORD *)*v535;
              operator delete(v535);
              v535 = v536;
            }
            while (v536);
          }
          v537 = (void *)v616;
          v616 = 0;
          if (v537)
            operator delete(v537);
        }
LABEL_194:
        v572 += 3;
        v154 = v571;
        if (v572 == v554)
          goto LABEL_974;
      }
      while (2)
      {
        v174 = *((_QWORD *)&v663 + 1);
        if (*((_QWORD *)&v663 + 1) == (_QWORD)v664 << 6)
        {
          if (*((_QWORD *)&v663 + 1) + 1 < 0)
            goto LABEL_1009;
          if (*((_QWORD *)&v663 + 1) > 0x3FFFFFFFFFFFFFFEuLL)
          {
            v175 = 0x7FFFFFFFFFFFFFFFLL;
            if (*((_QWORD *)&v663 + 1) < 0x7FFFFFFFFFFFFFFFuLL)
              goto LABEL_247;
            v174 = -1;
          }
          else
          {
            v175 = (_QWORD)v664 << 7;
            if ((_QWORD)v664 << 7 <= (*((_QWORD *)&v663 + 1) & 0xFFFFFFFFFFFFFFC0) + 64)
              v175 = (*((_QWORD *)&v663 + 1) & 0xFFFFFFFFFFFFFFC0) + 64;
            if (*((_QWORD *)&v663 + 1) < v175)
            {
              if ((v175 & 0x8000000000000000) != 0)
                goto LABEL_1016;
LABEL_247:
              v176 = ((v175 - 1) >> 6) + 1;
              v177 = (uint64_t *)operator new(8 * v176);
              v178 = (_QWORD *)v663;
              v179 = (v174 - 1) >> 6;
              if (v174 < 0x41)
                v179 = 0;
              v177[v179] = 0;
              if (v174 > 0x3F || (v174 & 0x3F) != 0)
              {
                v180 = 0;
                v181 = 0;
                v182 = v177;
                v183 = v178;
                do
                {
                  v184 = 1 << v180;
                  if (((*v183 >> v181) & 1) != 0)
                    v185 = *v182 | v184;
                  else
                    v185 = *v182 & ~v184;
                  *v182 = v185;
                  v183 += v181 == 63;
                  if (v181 == 63)
                    v181 = 0;
                  else
                    ++v181;
                  v182 += v180 == 63;
                  if (v180 == 63)
                    v180 = 0;
                  else
                    ++v180;
                }
                while (v181 != (v174 & 0x3F) || v183 != &v178[v174 >> 6]);
              }
              *(_QWORD *)&v663 = v177;
              *(_QWORD *)&v664 = v176;
              v153 = v592;
              if (v178)
              {
                operator delete(v178);
                v174 = *((_QWORD *)&v663 + 1);
              }
            }
          }
        }
        *((_QWORD *)&v663 + 1) = v174 + 1;
        v186 = v174 >> 6;
        v187 = 1 << v174;
        if (*(_BYTE *)(v172 + 25))
        {
          *(_QWORD *)(v663 + 8 * v186) |= v187;
          v188 = *((_QWORD *)&v665 + 1);
          v189 = v665;
          if ((_QWORD)v665 != *((_QWORD *)&v665 + 1) << 6)
            goto LABEL_297;
        }
        else
        {
          *(_QWORD *)(v663 + 8 * v186) &= ~v187;
          v188 = *((_QWORD *)&v665 + 1);
          v189 = v665;
          if ((_QWORD)v665 != *((_QWORD *)&v665 + 1) << 6)
            goto LABEL_297;
        }
        if ((uint64_t)(v189 + 1) < 0)
LABEL_1009:
          sub_20E867F44();
        if (v189 > 0x3FFFFFFFFFFFFFFELL)
        {
          v190 = 0x7FFFFFFFFFFFFFFFLL;
          if (v189 >= 0x7FFFFFFFFFFFFFFFLL)
          {
            v189 = -1;
            goto LABEL_297;
          }
LABEL_278:
          v191 = ((v190 - 1) >> 6) + 1;
          v192 = (uint64_t *)operator new(8 * v191);
          v193 = (_QWORD *)*((_QWORD *)&v664 + 1);
          v194 = (v189 - 1) >> 6;
          if (v189 < 0x41)
            v194 = 0;
          v192[v194] = 0;
          if (v189 > 0x3F || (v189 & 0x3F) != 0)
          {
            v195 = 0;
            v196 = 0;
            v197 = v192;
            v198 = v193;
            do
            {
              v199 = 1 << v195;
              if (((*v198 >> v196) & 1) != 0)
                v200 = *v197 | v199;
              else
                v200 = *v197 & ~v199;
              *v197 = v200;
              v198 += v196 == 63;
              if (v196 == 63)
                v196 = 0;
              else
                ++v196;
              v197 += v195 == 63;
              if (v195 == 63)
                v195 = 0;
              else
                ++v195;
            }
            while (v196 != (v189 & 0x3F) || v198 != &v193[v189 >> 6]);
          }
          *((_QWORD *)&v664 + 1) = v192;
          *((_QWORD *)&v665 + 1) = v191;
          v153 = v592;
          if (v193)
          {
            operator delete(v193);
            v189 = v665;
          }
        }
        else
        {
          v190 = v188 << 7;
          if (v190 <= (v189 & 0xFFFFFFFFFFFFFFC0) + 64)
            v190 = (v189 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v189 < v190)
          {
            if ((v190 & 0x8000000000000000) != 0)
LABEL_1016:
              sub_20E867F44();
            goto LABEL_278;
          }
        }
LABEL_297:
        *(_QWORD *)&v665 = v189 + 1;
        v201 = v189 >> 6;
        v202 = 1 << v189;
        if (*(_BYTE *)(v172 + 24))
        {
          *(_QWORD *)(*((_QWORD *)&v664 + 1) + 8 * v201) |= v202;
          v172 += 112;
          if (v172 == v173)
            goto LABEL_299;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v664 + 1) + 8 * v201) &= ~v202;
          v172 += 112;
          if (v172 == v173)
            goto LABEL_299;
        }
        continue;
      }
    }
LABEL_974:
    if (v153 < 0)
    {
      operator delete(v559);
      operator delete(v553);
      v540 = (char *)v73 - (char *)v74;
      if ((unint64_t)((char *)v73 - (char *)v74) >= 0x11)
      {
        do
        {
LABEL_978:
          v541 = *v74++;
          operator delete(v541);
          v540 -= 8;
        }
        while (v540 > 0x10);
      }
    }
    else
    {
      operator delete(v553);
      v540 = (char *)v73 - (char *)v74;
      if ((unint64_t)((char *)v73 - (char *)v74) >= 0x11)
        goto LABEL_978;
    }
    while (v74 != v73)
    {
      v542 = *v74++;
      operator delete(v542);
    }
    if (v563)
      operator delete(v563);
    do
      v543 = __ldaxr(p_shared_owners);
    while (__stlxr(v543 - 1, p_shared_owners));
    if (!v543)
    {
      ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
      std::__shared_weak_count::__release_weak(v551);
    }
    if (v720 && v717 < 0)
      operator delete(v715);
    if (HIBYTE(v714) && (char)v714 < 0)
      operator delete((void *)v712);
    operator delete(v549);
    if (v733 && SHIBYTE(v731) < 0)
      operator delete((void *)v730);
    if (v729 && v728 < 0)
      operator delete(v726);
    if (v548 < 0)
      operator delete(__src);
    sub_20EB07D94(&v651, v650[0]);
    v10 = v562 + 176;
    if (v562 + 176 != v546)
      continue;
    break;
  }
}

void sub_20EB03880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,std::__shared_weak_count *a32,void *a33)
{
  char v33;
  void *v34;
  int v35;
  uint64_t v36;
  unint64_t *v38;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A6D7C8);
  sub_20EB04EAC((uint64_t)&STACK[0x4B0]);
  sub_20EB04F50((void **)&STACK[0x880]);
  sub_20EB04E40((uint64_t)&STACK[0x710]);
  if (v33 < 0)
    operator delete(v34);
  v38 = (unint64_t *)STACK[0x2F8];
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
    std::__shared_weak_count::__release_weak(a32);
  }
  if (LOBYTE(STACK[0x960]) && SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (LOBYTE(STACK[0x928]) && SLOBYTE(STACK[0x927]) < 0)
    operator delete((void *)STACK[0x910]);
  operator delete(a30);
  if (*(_BYTE *)(v36 - 176) && *(char *)(v36 - 201) < 0)
    operator delete(*(void **)(v36 - 224));
  if (*(_BYTE *)(v36 - 232) && *(char *)(v36 - 233) < 0)
    operator delete(*(void **)(v36 - 256));
  if (v35 < 0)
    operator delete(a33);
  sub_20EB07D94(a13, LOBYTE(STACK[0x568]));
  _Unwind_Resume(a1);
}

uint64_t sub_20EB04900(unint64_t *a1, std::string *a2, unsigned int *a3)
{
  uint64_t result;
  _BYTE v6[24];
  int v7;
  std::string v8;
  std::string *v9;
  std::string *v10;
  _BYTE *v11;
  std::string *v12;
  std::string *v13;
  std::string **v14;

  v7 = 0;
  std::to_string(&v8, *a1);
  v9 = (std::string *)v6;
  v10 = &v8;
  v11 = v6;
  v12 = &v8;
  v13 = &v8;
  v14 = &v9;
  ((void (*)(std::string ***, _BYTE *))sub_20E877EA0)(&v14, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v9 = (std::string *)v6;
  v10 = a2;
  v11 = v6;
  v12 = a2;
  v13 = a2;
  if (v7 == -1)
    sub_20E877AB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  ((void (*)(std::string *, _BYTE *))off_24C9C48A0[v7])(&v8, v6);
  std::to_string(&v8, *a3);
  v9 = (std::string *)v6;
  v10 = &v8;
  v11 = v6;
  v12 = &v8;
  v13 = &v8;
  if (v7 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(std::string ***, _BYTE *))off_24C9C4810[v7])(&v14, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24C9C4840[v7])(&v9, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24C9C4828[v7])(&v9, v6);
  return result;
}

void sub_20EB04A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB04AE4(char *__s, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20E8A330C(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4810[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C4840[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C4828[v5])(v7, v4);
  return result;
}

void sub_20EB04BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB04BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EB04BECLL);
}

char *sub_20EB04C20(uint64_t a1, const char *a2)
{
  uint64_t *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *exception;
  char *v13;
  std::string v14;
  std::string __dst;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = (char *)sub_20EB08748((char *)a1);
      sub_20E8610C0(&v14, v13);
      sub_20E8B0848("cannot use operator[] with a string argument with ", &v14, &__dst);
      sub_20EB085D0(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C9C4970, (void (*)(void *))sub_20EB08770);
    }
    v4 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_12:
    memcpy(p_dst, a2, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  v14.__r_.__value_.__l.__size_ = 0;
  v10 = sub_20EB087A0(v4, (uint64_t)&__dst, (unsigned __int8 *)&v14);
  sub_20EB07D94((void ***)&v14.__r_.__value_.__l.__size_, v14.__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v10 + 24;
}

void sub_20EB04DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void ***v20;

  sub_20EB07D94(v20, a9);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EB04E40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EB04EAC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 8) = v2;
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
        {
          operator delete(*(v3 - 8));
          if (*((_BYTE *)v3 - 72))
          {
LABEL_9:
            if (*((char *)v3 - 73) < 0)
              operator delete(*(v3 - 12));
          }
        }
        else if (*((_BYTE *)v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 12;
        if (v3 == v2)
        {
          v4 = *(void ***)a1;
          goto LABEL_14;
        }
      }
    }
  }
  return a1;
}

void **sub_20EB04F50(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
      {
        operator delete(*(v3 - 8));
        if (*((_BYTE *)v3 - 72))
        {
LABEL_8:
          if (*((char *)v3 - 73) < 0)
            operator delete(*(v3 - 12));
        }
      }
      else if (*((_BYTE *)v3 - 72))
      {
        goto LABEL_8;
      }
      v3 -= 12;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

void sub_20EB04FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24[0] = v5;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (_BYTE *)a3;
  else
    v7 = *(_BYTE **)a3;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  sub_20EB052B4((_QWORD *)(v5 + 16), v7, &v7[v6], 0x22u, 0x5Cu);
  v8 = v24[0];
  v9 = *(_DWORD *)(v24[0] + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v24[0] + 112);
    v13 = *(_QWORD *)(v24[0] + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v24[0] + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v8 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_19;
    }
    v14 = *(const void **)(v24[0] + 40);
    v10 = *(_QWORD *)(v24[0] + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_27:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_18;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_18:
    memmove(v11, v14, v10);
LABEL_19:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v17 + 128);
    MEMORY[0x212BC6398](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_20E877AB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C9C4810[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20EB05260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EB05284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EB052A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB052B4(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_20E86A980(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_20EB05398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB053B8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_20EABA148(a1, i + 4, i + 4);
  return a1;
}

void sub_20EB054D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20EB054E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20EB054F8(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_20E860C04(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 4);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  return __dst;
}

void sub_20EB055C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EB05604(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x2AAAAAAAAAAAAABLL)
      sub_20EB057F8();
    v5 = 96 * a3;
    v6 = operator new(96 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_20EB054F8(&v6[v7], (__int128 *)(a2 + v7));
      v7 += 96;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20EB056B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB05738(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB056CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_20EB05738(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 16) && *(char *)(v13 - 41) < 0)
    {
      operator delete(*(void **)(v13 - 64));
      if (*(_BYTE *)(v13 - 72))
      {
LABEL_7:
        if (*(char *)(v10 + v11 - 73) < 0)
          operator delete(*(void **)(v13 - 96));
      }
    }
    else if (*(_BYTE *)(v13 - 72))
    {
      goto LABEL_7;
    }
    v11 -= 96;
    if (!v11)
      goto LABEL_2;
  }
}

void ***sub_20EB05738(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
        {
          operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
LABEL_10:
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
        }
        else if (*((_BYTE *)v4 - 72))
        {
          goto LABEL_10;
        }
        v4 -= 12;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

void sub_20EB057F8()
{
  sub_20E860B90("vector");
}

uint64_t sub_20EB0580C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(void **)(a1 + 176);
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 184) = v2;
        operator delete(v4);
        goto LABEL_15;
      }
      while (1)
      {
        if (*(_BYTE *)(v3 - 16) && *(char *)(v3 - 41) < 0)
        {
          operator delete(*(void **)(v3 - 64));
          if (*(_BYTE *)(v3 - 72))
          {
LABEL_9:
            if (*(char *)(v3 - 73) < 0)
              operator delete(*(void **)(v3 - 96));
          }
        }
        else if (*(_BYTE *)(v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 96;
        if (v3 == v2)
        {
          v4 = *(void **)(a1 + 176);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 160) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a1 + 72))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_21:
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_20EB05918(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  _QWORD *i;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _QWORD *v73;
  int64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t **v85;
  _QWORD *v86;
  char *v87;
  void *v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _QWORD *v113;
  void **v115;
  char **v116;
  void **v117;
  void **v118;
  uint64_t **v119;
  uint64_t **v120;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  void *__p;
  void *v128;
  uint64_t v129;
  void *v130[2];
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;

  v3 = (_QWORD *)a1;
  v144 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v4 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  v117 = (void **)(a1 + 64);
  v118 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 112) = 0u;
  v115 = (void **)(a1 + 88);
  v116 = (char **)(a1 + 112);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 32) = a2[12];
  v5 = (_QWORD *)a2[1];
  v6 = a2 + 2;
  if (v5 == a2 + 2)
  {
    v7 = 0;
    v8 = a2[14] - a2[13];
    v9 = v8 >> 4;
    if (!(v8 >> 4))
      goto LABEL_20;
    goto LABEL_14;
  }
  do
  {
    __p = 0;
    v128 = 0;
    v129 = 0;
    sub_20EB063DC((uint64_t)v130, v5 + 5, (uint64_t *)&__p);
    sub_20EB068E4(v4, v5 + 4, v5 + 4, (uint64_t)v130);
    sub_20E94FADC((uint64_t)v130);
    if (__p)
    {
      v128 = __p;
      operator delete(__p);
    }
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v5[2];
        v12 = *v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v12);
    }
    v5 = v11;
  }
  while (v11 != v6);
  v7 = (char *)v3[5];
  v8 = a2[14] - a2[13];
  v9 = v8 >> 4;
  if (v8 >> 4 > (unint64_t)((uint64_t)(v3[7] - (_QWORD)v7) >> 4))
  {
LABEL_14:
    if (v8 < 0)
      sub_20E9DEF2C();
    v13 = (char *)v3[6];
    v14 = (char *)operator new(v8);
    v15 = &v14[v13 - v7];
    v16 = v15;
    if (v13 != v7)
    {
      v16 = &v14[v13 - v7];
      do
      {
        v17 = *((_QWORD *)v13 - 2);
        v13 -= 16;
        v18 = *((_DWORD *)v13 + 2);
        *((_QWORD *)v16 - 2) = v17;
        v16 -= 16;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v13 != v7);
    }
    v3[5] = v16;
    v3[6] = v15;
    v3[7] = &v14[16 * v9];
    if (v7)
      operator delete(v7);
  }
LABEL_20:
  v19 = a2[13];
  v20 = a2[14];
  if (v19 != v20)
  {
    v21 = (char *)v3[6];
    do
    {
      v23 = *(_DWORD *)(v19 + 8);
      v24 = v3[7];
      if ((unint64_t)v21 < v24)
      {
        *(_QWORD *)v21 = *(_QWORD *)v19;
        *((_DWORD *)v21 + 2) = v23;
        v22 = v21 + 16;
        v3[6] = v21 + 16;
      }
      else
      {
        v25 = (char *)*v118;
        v26 = (v21 - (_BYTE *)*v118) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          sub_20E9DEF2C();
        v28 = v24 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 60)
            sub_20E877A38();
          v30 = (char *)operator new(16 * v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[16 * v26];
        *(_QWORD *)v31 = *(_QWORD *)v19;
        *((_DWORD *)v31 + 2) = v23;
        v32 = v31;
        if (v21 != v25)
        {
          do
          {
            v33 = *((_QWORD *)v21 - 2);
            v21 -= 16;
            v34 = *((_DWORD *)v21 + 2);
            *((_QWORD *)v32 - 2) = v33;
            v32 -= 16;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v21 != v25);
          v21 = (char *)*v118;
        }
        v35 = &v30[16 * v29];
        v22 = v31 + 16;
        v3 = (_QWORD *)a1;
        *(_QWORD *)(a1 + 40) = v32;
        *(_QWORD *)(a1 + 48) = v31 + 16;
        *(_QWORD *)(a1 + 56) = v35;
        if (v21)
          operator delete(v21);
      }
      v3[6] = v22;
      v19 += 16;
      v21 = v22;
    }
    while (v19 != v20);
  }
  sub_20EB0661C((uint64_t)v117, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[20] - a2[19]) >> 4));
  v37 = (_QWORD *)a2[19];
  for (i = (_QWORD *)a2[20]; v37 != i; v37 += 22)
  {
    sub_20F461020((uint64_t)v130, (uint64_t)(v37 + 1));
    v41 = *(_QWORD *)(a1 + 72);
    if (v41 < *(_QWORD *)(a1 + 80))
    {
      *(_QWORD *)v41 = *v37;
      v38 = *(_OWORD *)v130;
      v39 = v131;
      *(_QWORD *)(v41 + 40) = v132;
      *(_OWORD *)(v41 + 24) = v39;
      *(_OWORD *)(v41 + 8) = v38;
      *(_OWORD *)(v41 + 48) = v133;
      *(_QWORD *)(v41 + 64) = v134;
      v133 = 0uLL;
      v134 = 0;
      *(_QWORD *)(v41 + 88) = 0;
      *(_OWORD *)(v41 + 72) = v135;
      *(_QWORD *)(v41 + 88) = v136;
      v135 = 0uLL;
      v136 = 0;
      *(_QWORD *)(v41 + 112) = 0;
      *(_OWORD *)(v41 + 96) = v137;
      *(_QWORD *)(v41 + 112) = v138;
      v137 = 0uLL;
      v138 = 0;
      *(_QWORD *)(v41 + 136) = 0;
      *(_OWORD *)(v41 + 120) = v139;
      *(_QWORD *)(v41 + 136) = v140;
      v139 = 0uLL;
      v140 = 0;
      *(_QWORD *)(v41 + 160) = 0;
      *(_OWORD *)(v41 + 144) = v141;
      *(_QWORD *)(v41 + 160) = v142;
      v141 = 0uLL;
      v142 = 0;
      *(_WORD *)(v41 + 168) = v143;
      v40 = (char *)(v41 + 176);
    }
    else
    {
      v40 = sub_20EB0747C(v117, v37, (uint64_t)v130);
    }
    *(_QWORD *)(a1 + 72) = v40;
    sub_20E991548(v130);
  }
  v42 = a2[23] - a2[22];
  v43 = v42 >> 3;
  v44 = (_QWORD *)a1;
  v45 = *(_BYTE **)(a1 + 88);
  if (v42 >> 3 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v45) >> 3))
  {
    if (v42 < 0)
      sub_20E92CED8();
    v46 = *(_BYTE **)(a1 + 96);
    v47 = (char *)operator new(v42);
    v48 = v46 - v45;
    v49 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
    v50 = v49;
    if (v46 == v45)
      goto LABEL_56;
    if ((unint64_t)(v48 - 8) >= 0x58)
    {
      v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v46 - &v47[v48 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v51 = v48 >> 3;
        v52 = ((unint64_t)(v48 - 8) >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v54 = &v46[-v53];
        v50 = &v49[-v53];
        v55 = &v47[8 * v51 - 16];
        v56 = (__int128 *)(v46 - 16);
        v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *v56;
          *((_OWORD *)v55 - 1) = *(v56 - 1);
          *(_OWORD *)v55 = v58;
          v55 -= 32;
          v56 -= 2;
          v57 -= 4;
        }
        while (v57);
        v46 = v54;
        if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          *(_QWORD *)(a1 + 88) = v50;
          *(_QWORD *)(a1 + 96) = v49;
          *(_QWORD *)(a1 + 104) = &v47[8 * v43];
          if (v45)
            operator delete(v45);
          goto LABEL_58;
        }
      }
    }
    else
    {
      v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v59 = *((_QWORD *)v46 - 1);
      v46 -= 8;
      *((_QWORD *)v50 - 1) = v59;
      v50 -= 8;
    }
    while (v46 != v45);
    goto LABEL_56;
  }
LABEL_58:
  v60 = (uint64_t *)a2[22];
  v61 = (uint64_t *)a2[23];
  if (v60 != v61)
  {
    v62 = *(char **)(a1 + 96);
    while (1)
    {
      v64 = *v60;
      v65 = v44[13];
      if ((unint64_t)v62 >= v65)
        break;
      *(_QWORD *)v62 = v64;
      v63 = (uint64_t)(v62 + 8);
LABEL_61:
      *(_QWORD *)(a1 + 96) = v63;
      ++v60;
      v62 = (char *)v63;
      v44 = (_QWORD *)a1;
      if (v60 == v61)
        goto LABEL_89;
    }
    v66 = (char *)*v115;
    v67 = v62 - (_BYTE *)*v115;
    v68 = v67 >> 3;
    v69 = (v67 >> 3) + 1;
    if (v69 >> 61)
      sub_20E92CED8();
    v70 = v65 - (_QWORD)v66;
    if (v70 >> 2 > v69)
      v69 = v70 >> 2;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
      v71 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    if (v71)
    {
      if (v71 >> 61)
        sub_20E877A38();
      v72 = operator new(8 * v71);
      v73 = &v72[8 * v68];
      *v73 = v64;
      v63 = (uint64_t)(v73 + 1);
      v74 = v62 - v66;
      if (v62 == v66)
        goto LABEL_77;
    }
    else
    {
      v72 = 0;
      v73 = (_QWORD *)(8 * v68);
      *(_QWORD *)(8 * v68) = v64;
      v63 = 8 * v68 + 8;
      v74 = v62 - v66;
      if (v62 == v66)
        goto LABEL_77;
    }
    v75 = v74 - 8;
    if (v75 >= 0x168)
    {
      v78 = (v62 - 8 - v66) & 0xFFFFFFFFFFFFFFF8;
      if (&v72[v67 - 8 - v78] > &v72[v67 - 8])
      {
        v76 = v62;
      }
      else if (&v62[-v78 - 8] > v62 - 8)
      {
        v76 = v62;
      }
      else if ((unint64_t)(v62 - v72 - v67) >= 0x20)
      {
        v79 = (v75 >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = &v62[-v80];
        v73 = (_QWORD *)((char *)v73 - v80);
        v81 = &v72[8 * v68 - 16];
        v82 = v62 - 16;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          *(_QWORD *)(a1 + 88) = v73;
          *(_QWORD *)(a1 + 96) = v63;
          *(_QWORD *)(a1 + 104) = &v72[8 * v71];
          if (v66)
            operator delete(v66);
          goto LABEL_61;
        }
      }
      else
      {
        v76 = v62;
      }
    }
    else
    {
      v76 = v62;
    }
    do
    {
      v77 = *((_QWORD *)v76 - 1);
      v76 -= 8;
      *--v73 = v77;
    }
    while (v76 != v66);
    goto LABEL_77;
  }
LABEL_89:
  sub_20EB067C0((uint64_t)v116, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[29] - a2[28]) >> 3));
  v85 = (uint64_t **)a2[28];
  v119 = (uint64_t **)a2[29];
  if (v85 != v119)
  {
    while (1)
    {
      v130[0] = 0;
      v130[1] = 0;
      *(_QWORD *)&v131 = 0;
      v86 = (_QWORD *)v44[15];
      if ((unint64_t)v86 >= v44[16])
      {
        v87 = sub_20EB0770C(v116, (uint64_t)v130);
        v88 = v130[0];
        v44[15] = v87;
        if (v88)
        {
          v130[1] = v88;
          operator delete(v88);
          v87 = (char *)v44[15];
        }
      }
      else
      {
        *v86 = 0;
        v86[1] = 0;
        v86[2] = 0;
        *(_OWORD *)v86 = *(_OWORD *)v130;
        v86[2] = v131;
        v87 = (char *)(v86 + 3);
        v44[15] = v86 + 3;
      }
      v90 = *v85;
      v89 = v85[1];
      v120 = v85;
      if (*v85 != v89)
        break;
LABEL_91:
      v85 = v120 + 3;
      v44 = (_QWORD *)a1;
      if (v120 + 3 == v119)
        return v44;
    }
    v126 = (void **)(v87 - 24);
    v91 = (_QWORD *)*((_QWORD *)v87 - 2);
    v122 = v87;
    v123 = v85[1];
    while (1)
    {
      while (1)
      {
        v92 = *v90;
        v93 = *((unsigned int *)v90 + 2);
        v94 = *((_DWORD *)v90 + 4);
        v96 = *((unsigned int *)v90 + 6);
        v95 = *((unsigned int *)v90 + 7);
        v98 = *((unsigned int *)v90 + 8);
        v97 = *((unsigned int *)v90 + 9);
        v99 = *((_QWORD *)v87 - 1);
        if ((unint64_t)v91 >= v99)
          break;
        *v91 = v92;
        v91[1] = v93;
        *((_DWORD *)v91 + 4) = v94;
        v91[3] = v96;
        v91[4] = v95;
        v91[5] = v98;
        v91[6] = v97;
        *((_QWORD *)v87 - 2) = v91 + 7;
        v90 += 5;
        v91 += 7;
        if (v90 == v89)
          goto LABEL_91;
      }
      v100 = *v126;
      v101 = 0x6DB6DB6DB6DB6DB7 * (((char *)v91 - (_BYTE *)*v126) >> 3);
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) > 0x492492492492492)
        sub_20EABADD4();
      v103 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v99 - (_QWORD)v100) >> 3);
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0x249249249249249)
        v104 = 0x492492492492492;
      else
        v104 = v102;
      if (v104)
      {
        v124 = *v90;
        v125 = *((unsigned int *)v90 + 2);
        if (v104 > 0x492492492492492)
          sub_20E877A38();
        v105 = *((unsigned int *)v90 + 9);
        v106 = v104;
        v107 = (char *)operator new(56 * v104);
        v97 = v105;
        v92 = v124;
        v93 = v125;
        v104 = v106;
      }
      else
      {
        v107 = 0;
      }
      v108 = &v107[56 * v101];
      *(_QWORD *)v108 = v92;
      *((_QWORD *)v108 + 1) = v93;
      *((_DWORD *)v108 + 4) = v94;
      *((_QWORD *)v108 + 3) = v96;
      *((_QWORD *)v108 + 4) = v95;
      *((_QWORD *)v108 + 5) = v98;
      *((_QWORD *)v108 + 6) = v97;
      v109 = v108;
      if (v91 == v100)
      {
        v87 = v122;
        v113 = v108 + 56;
        *((_QWORD *)v122 - 3) = v108;
        *((_QWORD *)v122 - 2) = v108 + 56;
        *((_QWORD *)v122 - 1) = &v107[56 * v104];
        if (!v91)
          goto LABEL_115;
      }
      else
      {
        v87 = v122;
        do
        {
          v110 = *(_OWORD *)(v91 - 7);
          v111 = *(_OWORD *)(v91 - 5);
          v112 = *(_OWORD *)(v91 - 3);
          *((_QWORD *)v109 - 1) = *(v91 - 1);
          *(_OWORD *)(v109 - 24) = v112;
          *(_OWORD *)(v109 - 40) = v111;
          *(_OWORD *)(v109 - 56) = v110;
          v109 -= 56;
          v91 -= 7;
        }
        while (v91 != v100);
        v91 = *v126;
        v113 = v108 + 56;
        *((_QWORD *)v122 - 3) = v109;
        *((_QWORD *)v122 - 2) = v108 + 56;
        *((_QWORD *)v122 - 1) = &v107[56 * v104];
        if (!v91)
          goto LABEL_115;
      }
      operator delete(v91);
LABEL_115:
      v89 = v123;
      *((_QWORD *)v87 - 2) = v113;
      v90 += 5;
      v91 = v113;
      if (v90 == v123)
        goto LABEL_91;
    }
  }
  return v44;
}

void sub_20EB062E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, void **a12, void **a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  sub_20E9DD680(a13);
  v30 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v28 + 96) = v30;
    operator delete(v30);
    sub_20EAB9B98(a14);
    v31 = *a15;
    if (!*a15)
    {
LABEL_3:
      sub_20EAB9CD4(a11, *a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_20EAB9B98(a14);
    v31 = *a15;
    if (!*a15)
      goto LABEL_3;
  }
  *(_QWORD *)(v28 + 48) = v31;
  operator delete(v31);
  sub_20EAB9CD4(a11, *a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB063DC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  sub_20EB06A84(v24, a2, a3);
  v5 = v25;
  v4 = v26;
  *(_QWORD *)(a1 + 24) = v26;
  v6 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v5;
  v7 = v27;
  *(_QWORD *)(a1 + 32) = v27;
  if (v7)
  {
    *(_QWORD *)(v4 + 16) = v6;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_OWORD *)(a1 + 40) = v28;
  *(_QWORD *)(a1 + 56) = v29;
  v28 = 0uLL;
  *(_OWORD *)(a1 + 64) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  v29 = 0;
  v30 = 0uLL;
  v31 = 0;
  *(_OWORD *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 104) = v33;
  v33 = 0;
  v32 = 0uLL;
  *(_BYTE *)(a1 + 112) = v34;
  v8 = v36;
  *(_QWORD *)(a1 + 120) = v35;
  v9 = v37;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v9;
  v10 = a1 + 128;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v10;
    v35 = &v36;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v10;
  }
  v12 = v42;
  v11 = v43;
  *(_QWORD *)(a1 + 200) = v43;
  v13 = a1 + 200;
  v14 = v41;
  *(_QWORD *)(a1 + 160) = v39;
  *(_OWORD *)(a1 + 144) = v38;
  v38 = 0uLL;
  *(_OWORD *)(a1 + 168) = v40;
  v39 = 0;
  v40 = 0uLL;
  v41 = 0;
  *(_QWORD *)(a1 + 184) = v14;
  *(_QWORD *)(a1 + 192) = v12;
  v15 = v44;
  *(_QWORD *)(a1 + 208) = v44;
  if (v15)
  {
    *(_QWORD *)(v11 + 16) = v13;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v13;
  }
  v17 = v45;
  v16 = v46;
  *(_QWORD *)(a1 + 224) = v46;
  v18 = a1 + 224;
  *(_QWORD *)(a1 + 216) = v17;
  v19 = v47;
  *(_QWORD *)(a1 + 232) = v47;
  if (v19)
  {
    *(_QWORD *)(v16 + 16) = v18;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v18;
  }
  v20 = v50;
  *(_QWORD *)(a1 + 240) = v48;
  *(_OWORD *)(a1 + 248) = v49;
  *(_QWORD *)(a1 + 264) = v20;
  v49 = 0uLL;
  *(_OWORD *)(a1 + 272) = v51;
  *(_QWORD *)(a1 + 288) = v52;
  v50 = 0;
  v51 = 0uLL;
  v52 = 0;
  v21 = v54;
  *(_OWORD *)(a1 + 296) = v53;
  *(_OWORD *)(a1 + 312) = v21;
  v22 = v56;
  *(_QWORD *)(a1 + 328) = v55;
  *(_QWORD *)(a1 + 336) = v22;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 421) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  sub_20E94FBC8((uint64_t)v24);
  return a1;
}

void sub_20EB0661C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;

  v2 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x1745D1745D1745ELL)
      sub_20EABADD4();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 176 * a2;
    v6 = (char *)operator new(176 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v4[v9];
        v11 = &v8[v9];
        *((_QWORD *)v11 - 22) = *(_QWORD *)&v4[v9 - 176];
        v12 = *(_OWORD *)&v4[v9 - 168];
        v13 = *(_OWORD *)&v4[v9 - 152];
        *((_QWORD *)v11 - 17) = *(_QWORD *)&v4[v9 - 136];
        *(_OWORD *)(v11 - 152) = v13;
        *(_OWORD *)(v11 - 168) = v12;
        *((_OWORD *)v11 - 8) = *(_OWORD *)&v4[v9 - 128];
        *((_QWORD *)v11 - 14) = *(_QWORD *)&v4[v9 - 112];
        *((_QWORD *)v10 - 16) = 0;
        *((_QWORD *)v10 - 15) = 0;
        *((_QWORD *)v10 - 14) = 0;
        *(_OWORD *)(v11 - 104) = *(_OWORD *)&v4[v9 - 104];
        *((_QWORD *)v11 - 11) = *(_QWORD *)&v4[v9 - 88];
        *((_QWORD *)v10 - 13) = 0;
        *((_QWORD *)v10 - 12) = 0;
        *((_QWORD *)v10 - 11) = 0;
        *((_OWORD *)v11 - 5) = *(_OWORD *)&v4[v9 - 80];
        *((_QWORD *)v11 - 8) = *(_QWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 10) = 0;
        *((_QWORD *)v10 - 9) = 0;
        v14 = *(_OWORD *)&v4[v9 - 56];
        *((_QWORD *)v10 - 8) = 0;
        *(_OWORD *)(v11 - 56) = v14;
        *((_QWORD *)v11 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v10 - 7) = 0;
        *((_QWORD *)v10 - 6) = 0;
        *((_QWORD *)v10 - 5) = 0;
        *((_OWORD *)v11 - 2) = *(_OWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 2) = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v10 - 4) = 0;
        *((_QWORD *)v10 - 3) = 0;
        *((_QWORD *)v10 - 2) = 0;
        *((_WORD *)v11 - 4) = *(_WORD *)&v4[v9 - 8];
        v9 -= 176;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v15 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v15 != v2)
      {
        do
        {
          v16 = v15 - 176;
          sub_20E991548((_QWORD *)v15 - 21);
          v15 = v16;
        }
        while (v16 != v2);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

void sub_20EB067C0(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20EABADD4();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t **sub_20EB068E4(uint64_t **a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= v9)
        return v10;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    v12 = (char *)operator new(0x1E8uLL);
    *((_QWORD *)v12 + 4) = *a3;
    sub_20EAC7338((uint64_t)(v12 + 48), a4 + 8);
    *((_OWORD *)v12 + 18) = *(_OWORD *)(a4 + 248);
    *((_QWORD *)v12 + 38) = *(_QWORD *)(a4 + 264);
    *(_QWORD *)(a4 + 248) = 0;
    *(_QWORD *)(a4 + 256) = 0;
    *(_OWORD *)(v12 + 312) = *(_OWORD *)(a4 + 272);
    *((_QWORD *)v12 + 41) = *(_QWORD *)(a4 + 288);
    *(_QWORD *)(a4 + 264) = 0;
    *(_QWORD *)(a4 + 272) = 0;
    *(_QWORD *)(a4 + 280) = 0;
    *(_QWORD *)(a4 + 288) = 0;
    v13 = *(_OWORD *)(a4 + 312);
    *((_OWORD *)v12 + 21) = *(_OWORD *)(a4 + 296);
    *((_OWORD *)v12 + 22) = v13;
    v14 = *(_OWORD *)(a4 + 344);
    *((_OWORD *)v12 + 23) = *(_OWORD *)(a4 + 328);
    *((_OWORD *)v12 + 24) = v14;
    *(_QWORD *)(a4 + 344) = 0;
    *(_QWORD *)(a4 + 352) = 0;
    v15 = *(_QWORD *)(a4 + 360);
    v16 = *(_QWORD *)(a4 + 368);
    *(_QWORD *)(a4 + 360) = 0;
    *((_QWORD *)v12 + 50) = v15;
    *((_QWORD *)v12 + 51) = v16;
    v17 = v12 + 416;
    v18 = *(_QWORD *)(a4 + 376);
    v19 = *(_QWORD *)(a4 + 384);
    *((_QWORD *)v12 + 52) = v18;
    *((_QWORD *)v12 + 53) = v19;
    if (v19)
    {
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(a4 + 368) = a4 + 376;
      *(_QWORD *)(a4 + 376) = 0;
      *(_QWORD *)(a4 + 384) = 0;
    }
    else
    {
      *((_QWORD *)v12 + 51) = v17;
    }
    *((_DWORD *)v12 + 120) = *(_DWORD *)(a4 + 440);
    v20 = *(_OWORD *)(a4 + 408);
    *((_OWORD *)v12 + 27) = *(_OWORD *)(a4 + 392);
    *((_OWORD *)v12 + 28) = v20;
    *((_OWORD *)v12 + 29) = *(_OWORD *)(a4 + 424);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v10;
    *v8 = (uint64_t *)v12;
    v21 = (uint64_t *)**a1;
    v22 = (uint64_t *)v12;
    if (v21)
    {
      *a1 = v21;
      v22 = *v8;
    }
    sub_20E868578(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v12;
  }
}

_QWORD *sub_20EB06A84(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  char *v129;
  int v130;
  __int128 v131;
  _QWORD *v133;
  uint64_t *v134;
  _QWORD *v135;
  void **v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE __dst[648];
  _BYTE __src[648];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;

  v4 = a1;
  v186 = *MEMORY[0x24BDAC8D0];
  sub_20F446528(a2, a3, (uint64_t)(a1 + 1));
  *(_OWORD *)(v4 + 31) = 0u;
  v135 = v4;
  v136 = (void **)(v4 + 34);
  *(_OWORD *)(v4 + 37) = 0u;
  *(_OWORD *)(v4 + 39) = 0u;
  *(_OWORD *)(v4 + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  v4[41] = 0;
  v4[42] = -1;
  v4[43] = 0;
  v4[44] = 0;
  v4[45] = 0;
  v142 = v4 + 31;
  v133 = a2;
  v5 = a2[48];
  if (v5)
  {
    if (v5 >> 60)
      sub_20E92CED8();
    v6 = operator new(16 * v5);
    v4[31] = v6;
    v4[32] = v6;
    v4[33] = &v6[2 * v5];
    v7 = (_QWORD *)v133[47];
    if (!v7)
      goto LABEL_25;
LABEL_9:
    while (1)
    {
      v10 = v7[2];
      v9 = v7[3];
      v11 = v4[33];
      if ((unint64_t)v6 >= v11)
        break;
      *v6 = v10;
      v6[1] = v9;
      v8 = v6 + 2;
LABEL_8:
      v4[32] = v8;
      v7 = (_QWORD *)*v7;
      v6 = v8;
      if (!v7)
        goto LABEL_25;
    }
    v12 = (_QWORD *)*v142;
    v13 = ((uint64_t)v6 - *v142) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_20E92CED8();
    v15 = v11 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 60)
        sub_20E877A38();
      v17 = (char *)operator new(16 * v16);
      v18 = &v17[16 * v13];
      *(_QWORD *)v18 = v10;
      *((_QWORD *)v18 + 1) = v9;
      v19 = (uint64_t)v18;
      if (v6 == v12)
      {
LABEL_19:
        v8 = v18 + 16;
        v4[31] = v19;
        v4[32] = v18 + 16;
        v4[33] = &v17[16 * v16];
        if (!v6)
          goto LABEL_8;
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      v18 = (char *)(16 * v13);
      *(_QWORD *)v18 = v10;
      *((_QWORD *)v18 + 1) = v9;
      v19 = 16 * v13;
      if (v6 == v12)
        goto LABEL_19;
    }
    do
    {
      *(_OWORD *)(v19 - 16) = *((_OWORD *)v6 - 1);
      v19 -= 16;
      v6 -= 2;
    }
    while (v6 != v12);
    v6 = (_QWORD *)*v142;
    v8 = v18 + 16;
    v4[31] = v19;
    v4[32] = v18 + 16;
    v4[33] = &v17[16 * v16];
    if (!v6)
      goto LABEL_8;
LABEL_24:
    operator delete(v6);
    goto LABEL_8;
  }
  v6 = 0;
  v7 = (_QWORD *)v133[47];
  if (v7)
    goto LABEL_9;
LABEL_25:
  v20 = v133[53];
  if (v20)
  {
    v21 = 0x80BFA02FE80BFA03 * ((uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 4);
    v22 = (_BYTE *)v4[34];
    if (0x641511E8D2B3183BLL * ((uint64_t)(v4[36] - (_QWORD)v22) >> 3) < v21)
    {
      if (v21 > 0x21B641511E8D2BLL)
        sub_20E92CED8();
      v23 = (_BYTE *)v4[35];
      v24 = (char *)operator new(0xAF286BCA1AF286C8 * ((uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 4));
      v25 = &v24[1944 * v21];
      v26 = (v23 - v22) / 1944;
      v27 = &v24[1944 * v26];
      v28 = v27;
      if (v23 != v22)
      {
        v28 = &v24[1944 * v26];
        do
        {
          v28 -= 1944;
          v23 -= 1944;
          memcpy(v28, v23, 0x798uLL);
        }
        while (v23 != v22);
      }
      v4[34] = v28;
      v4[35] = v27;
      v4[36] = v25;
      if (v22)
        operator delete(v22);
    }
    v29 = v133[53];
    v30 = *(uint64_t **)(v29 + 80);
    v31 = *(uint64_t **)(v29 + 88);
    if (v30 != v31)
    {
      v32 = (char *)v4[35];
      v134 = *(uint64_t **)(v29 + 88);
      do
      {
        while (1)
        {
          v58 = *v30;
          v59 = *((_DWORD *)v30 + 2);
          v60 = v30[2];
          v61 = *((_DWORD *)v30 + 6);
          v62 = v30[4];
          v63 = *((_DWORD *)v30 + 10);
          v65 = v30[6];
          v64 = v30[7];
          v66 = v30[8];
          v153 = v30[9];
          v67 = v30[10];
          v143 = v30[11];
          v144 = v30[12];
          v68 = v30[14];
          v145 = v30[13];
          v146 = v30[15];
          v69 = *((_OWORD *)v30 + 8);
          v70 = *((_OWORD *)v30 + 9);
          v71 = *((_OWORD *)v30 + 10);
          v72 = *((_OWORD *)v30 + 11);
          v185 = v30[24];
          v183 = v71;
          v184 = v72;
          v181 = v69;
          v182 = v70;
          v73 = *(_OWORD *)(v30 + 25);
          v74 = *(_OWORD *)(v30 + 27);
          v75 = *(_OWORD *)(v30 + 29);
          v76 = *(_OWORD *)(v30 + 31);
          v180 = v30[33];
          v179 = v76;
          v178 = v75;
          v176 = v73;
          v177 = v74;
          v147 = v30[169];
          v148 = v30[170];
          v149 = v30[171];
          v150 = v30[172];
          v151 = v30[173];
          v152 = v30[174];
          v77 = *((_OWORD *)v30 + 17);
          v78 = *((_OWORD *)v30 + 18);
          v79 = *((_OWORD *)v30 + 19);
          v80 = *((_OWORD *)v30 + 20);
          v175 = v30[42];
          v174 = v80;
          v173 = v79;
          v171 = v77;
          v172 = v78;
          v81 = *(_OWORD *)(v30 + 43);
          v82 = *(_OWORD *)(v30 + 45);
          v83 = *(_OWORD *)(v30 + 47);
          v84 = *(_OWORD *)(v30 + 49);
          v170 = v30[51];
          v169 = v84;
          v168 = v83;
          v166 = v81;
          v167 = v82;
          v85 = *(_OWORD *)(v30 + 61);
          v86 = *(_OWORD *)(v30 + 63);
          v87 = *(_OWORD *)(v30 + 65);
          v88 = *(_OWORD *)(v30 + 67);
          v165 = v30[69];
          v164 = v88;
          v163 = v87;
          v161 = v85;
          v162 = v86;
          v89 = *((_OWORD *)v30 + 35);
          v90 = *((_OWORD *)v30 + 36);
          v91 = *((_OWORD *)v30 + 37);
          v92 = *((_OWORD *)v30 + 38);
          v160 = v30[78];
          v159 = v92;
          v158 = v91;
          v156 = v89;
          v157 = v90;
          memcpy(__src, v30 + 175, sizeof(__src));
          memcpy(__dst, v30 + 256, sizeof(__dst));
          v93 = v30[337];
          v94 = v30[338];
          v95 = v30[339];
          v96 = v30[340];
          v97 = v30[341];
          v98 = v4[36];
          if ((unint64_t)v32 >= v98)
            break;
          *(_QWORD *)v32 = v58;
          *((_DWORD *)v32 + 2) = v59;
          *((_QWORD *)v32 + 2) = v60;
          *((_DWORD *)v32 + 6) = v61;
          *((_QWORD *)v32 + 4) = v62;
          *((_DWORD *)v32 + 10) = v63;
          *((_QWORD *)v32 + 6) = v65;
          *((_QWORD *)v32 + 7) = v64;
          *((_QWORD *)v32 + 8) = v66;
          *((_QWORD *)v32 + 9) = v153;
          *((_QWORD *)v32 + 10) = v67;
          *((_QWORD *)v32 + 11) = v143;
          *((_QWORD *)v32 + 12) = v144;
          *((_QWORD *)v32 + 13) = v145;
          *((_QWORD *)v32 + 14) = v68;
          *((_QWORD *)v32 + 15) = v146;
          v33 = v94;
          v34 = v93;
          v35 = v181;
          v36 = v182;
          v37 = v183;
          v38 = v184;
          *((_QWORD *)v32 + 24) = v185;
          *((_OWORD *)v32 + 10) = v37;
          *((_OWORD *)v32 + 11) = v38;
          *((_OWORD *)v32 + 8) = v35;
          *((_OWORD *)v32 + 9) = v36;
          v39 = v177;
          *(_OWORD *)(v32 + 200) = v176;
          v40 = v178;
          v41 = v179;
          *((_QWORD *)v32 + 33) = v180;
          *(_OWORD *)(v32 + 248) = v41;
          *(_OWORD *)(v32 + 232) = v40;
          *(_OWORD *)(v32 + 216) = v39;
          *((_QWORD *)v32 + 34) = v147;
          *((_QWORD *)v32 + 35) = v148;
          *((_QWORD *)v32 + 36) = v149;
          *((_QWORD *)v32 + 37) = v150;
          *((_QWORD *)v32 + 38) = v151;
          *((_QWORD *)v32 + 39) = v152;
          v42 = v171;
          v43 = v172;
          v44 = v173;
          v45 = v174;
          *((_QWORD *)v32 + 48) = v175;
          *((_OWORD *)v32 + 22) = v44;
          *((_OWORD *)v32 + 23) = v45;
          *((_OWORD *)v32 + 20) = v42;
          *((_OWORD *)v32 + 21) = v43;
          v46 = v166;
          v47 = v167;
          v48 = v168;
          v49 = v169;
          *((_QWORD *)v32 + 57) = v170;
          *(_OWORD *)(v32 + 424) = v48;
          *(_OWORD *)(v32 + 440) = v49;
          *(_OWORD *)(v32 + 392) = v46;
          *(_OWORD *)(v32 + 408) = v47;
          v50 = v161;
          v51 = v162;
          v52 = v163;
          v53 = v164;
          *((_QWORD *)v32 + 66) = v165;
          *((_OWORD *)v32 + 31) = v52;
          *((_OWORD *)v32 + 32) = v53;
          *((_OWORD *)v32 + 29) = v50;
          *((_OWORD *)v32 + 30) = v51;
          v54 = v156;
          v55 = v157;
          v56 = v158;
          v57 = v159;
          *((_QWORD *)v32 + 75) = v160;
          *(_OWORD *)(v32 + 568) = v56;
          *(_OWORD *)(v32 + 584) = v57;
          *(_OWORD *)(v32 + 536) = v54;
          *(_OWORD *)(v32 + 552) = v55;
          memcpy(v32 + 608, __src, 0x288uLL);
          memcpy(v32 + 1256, __dst, 0x288uLL);
          *((_QWORD *)v32 + 238) = v34;
          *((_QWORD *)v32 + 239) = v33;
          *((_QWORD *)v32 + 240) = v95;
          *((_QWORD *)v32 + 241) = v96;
          *((_QWORD *)v32 + 242) = v97;
          v4[35] = v32 + 1944;
          v30 += 342;
          v32 += 1944;
          if (v30 == v31)
            goto LABEL_53;
        }
        v141 = v62;
        v99 = v63;
        v100 = (char *)*v136;
        v101 = 0x641511E8D2B3183BLL * ((v32 - (_BYTE *)*v136) >> 3);
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) > 0x21B641511E8D2BLL)
          sub_20E92CED8();
        v139 = v30[337];
        v140 = v30[338];
        v103 = 0x641511E8D2B3183BLL * ((uint64_t)(v98 - (_QWORD)v100) >> 3);
        if (2 * v103 > v102)
          v102 = 2 * v103;
        if (v103 >= 0x10DB20A88F4695)
          v104 = 0x21B641511E8D2BLL;
        else
          v104 = v102;
        if (v104 > 0x21B641511E8D2BLL)
          sub_20E877A38();
        v138 = v104;
        v137 = (char *)operator new(1944 * v104);
        v105 = &v137[1944 * v101];
        *(_QWORD *)v105 = v58;
        *((_DWORD *)v105 + 2) = v59;
        *((_QWORD *)v105 + 2) = v60;
        *((_DWORD *)v105 + 6) = v61;
        *((_QWORD *)v105 + 4) = v141;
        *((_DWORD *)v105 + 10) = v99;
        *((_QWORD *)v105 + 6) = v65;
        *((_QWORD *)v105 + 7) = v64;
        *((_QWORD *)v105 + 8) = v66;
        *((_QWORD *)v105 + 9) = v153;
        *((_QWORD *)v105 + 10) = v67;
        *((_QWORD *)v105 + 11) = v143;
        *((_QWORD *)v105 + 12) = v144;
        *((_QWORD *)v105 + 13) = v145;
        *((_QWORD *)v105 + 14) = v68;
        *((_QWORD *)v105 + 15) = v146;
        v106 = v181;
        v107 = v182;
        v108 = v183;
        v109 = v184;
        *((_QWORD *)v105 + 24) = v185;
        *((_OWORD *)v105 + 10) = v108;
        *((_OWORD *)v105 + 11) = v109;
        *((_OWORD *)v105 + 8) = v106;
        *((_OWORD *)v105 + 9) = v107;
        v110 = v177;
        *(_OWORD *)(v105 + 200) = v176;
        *((_QWORD *)v105 + 33) = v180;
        v111 = v178;
        *(_OWORD *)(v105 + 248) = v179;
        *(_OWORD *)(v105 + 232) = v111;
        *(_OWORD *)(v105 + 216) = v110;
        *((_QWORD *)v105 + 34) = v147;
        *((_QWORD *)v105 + 35) = v148;
        *((_QWORD *)v105 + 36) = v149;
        *((_QWORD *)v105 + 37) = v150;
        *((_QWORD *)v105 + 38) = v151;
        *((_QWORD *)v105 + 39) = v152;
        v112 = v171;
        v113 = v172;
        v114 = v173;
        v115 = v174;
        *((_QWORD *)v105 + 48) = v175;
        *((_OWORD *)v105 + 22) = v114;
        *((_OWORD *)v105 + 23) = v115;
        *((_OWORD *)v105 + 20) = v112;
        *((_OWORD *)v105 + 21) = v113;
        v116 = v166;
        v117 = v167;
        v118 = v168;
        v119 = v169;
        *((_QWORD *)v105 + 57) = v170;
        *(_OWORD *)(v105 + 424) = v118;
        *(_OWORD *)(v105 + 440) = v119;
        *(_OWORD *)(v105 + 392) = v116;
        *(_OWORD *)(v105 + 408) = v117;
        v120 = v161;
        v121 = v162;
        v122 = v163;
        v123 = v164;
        *((_QWORD *)v105 + 66) = v165;
        *((_OWORD *)v105 + 31) = v122;
        *((_OWORD *)v105 + 32) = v123;
        *((_OWORD *)v105 + 29) = v120;
        *((_OWORD *)v105 + 30) = v121;
        v124 = v156;
        v125 = v157;
        v126 = v158;
        v127 = v159;
        *((_QWORD *)v105 + 75) = v160;
        *(_OWORD *)(v105 + 568) = v126;
        *(_OWORD *)(v105 + 584) = v127;
        *(_OWORD *)(v105 + 536) = v124;
        *(_OWORD *)(v105 + 552) = v125;
        memcpy(v105 + 608, __src, 0x288uLL);
        memcpy(v105 + 1256, __dst, 0x288uLL);
        *((_QWORD *)v105 + 238) = v139;
        *((_QWORD *)v105 + 239) = v140;
        *((_QWORD *)v105 + 240) = v95;
        *((_QWORD *)v105 + 241) = v96;
        *((_QWORD *)v105 + 242) = v97;
        v128 = v105;
        if (v32 == v100)
        {
          v4 = v135;
          v129 = v105 + 1944;
          v135[34] = v105;
          v135[35] = v105 + 1944;
          v135[36] = &v137[1944 * v138];
          if (!v32)
            goto LABEL_49;
        }
        else
        {
          v4 = v135;
          do
          {
            v128 -= 1944;
            v32 -= 1944;
            memcpy(v128, v32, 0x798uLL);
          }
          while (v32 != v100);
          v32 = v100;
          v129 = v105 + 1944;
          v135[34] = v128;
          v135[35] = v105 + 1944;
          v135[36] = &v137[1944 * v138];
          if (!v100)
            goto LABEL_49;
        }
        operator delete(v32);
LABEL_49:
        v31 = v134;
        v4[35] = v129;
        v30 += 342;
        v32 = v129;
      }
      while (v30 != v134);
    }
  }
LABEL_53:
  *(_QWORD *)__src = v133[32];
  v130 = *((_DWORD *)v133 + 69);
  *(_DWORD *)&__src[8] = *((_DWORD *)v133 + 66);
  *(_DWORD *)&__src[20] = v130;
  *(_QWORD *)&__src[12] = *(_QWORD *)((char *)v133 + 268);
  *(_OWORD *)&__src[24] = *(_OWORD *)(v133 + 35);
  v4[41] = *(_QWORD *)&__src[32];
  v131 = *(_OWORD *)&__src[16];
  *(_OWORD *)(v4 + 37) = *(_OWORD *)__src;
  *(_OWORD *)(v4 + 39) = v131;
  v4[42] = v133[50];
  return v4;
}

void sub_20EB073CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v22;
  void *v23;

  sub_20EB07444(a9);
  v22 = *a14;
  if (*a14)
  {
    *(_QWORD *)(a13 + 280) = v22;
    operator delete(v22);
    v23 = *a21;
    if (!*a21)
    {
LABEL_3:
      sub_20E94DEFC(a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v23 = *a21;
    if (!*a21)
      goto LABEL_3;
  }
  *(_QWORD *)(a13 + 256) = v23;
  operator delete(v23);
  sub_20E94DEFC(a10);
  _Unwind_Resume(a1);
}

void ***sub_20EB07444(void ***a1)
{
  if (*a1)
  {
    sub_20E94CBA8((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

char *sub_20EB0747C(void **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;

  v4 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL)
    sub_20EABADD4();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v5)
    v5 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v6 = 0x1745D1745D1745DLL;
  else
    v6 = v5;
  if (v6 > 0x1745D1745D1745DLL)
    sub_20E877A38();
  v9 = 176 * v6;
  v10 = (char *)operator new(176 * v6);
  v11 = &v10[176 * v4];
  *(_QWORD *)v11 = *a2;
  v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a3;
  v13 = &v10[v9];
  *(_OWORD *)(v11 + 24) = v12;
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a3 + 32);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a3 + 40);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a3 + 64);
  *((_QWORD *)v11 + 11) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_OWORD *)v11 + 6) = *(_OWORD *)(a3 + 88);
  *((_QWORD *)v11 + 14) = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 17) = 0;
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(a3 + 112);
  *((_QWORD *)v11 + 17) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 20) = 0;
  *((_OWORD *)v11 + 9) = *(_OWORD *)(a3 + 136);
  *((_QWORD *)v11 + 20) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *((_WORD *)v11 + 84) = *(_WORD *)(a3 + 160);
  v14 = v11 + 176;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v16)
      return v14;
    goto LABEL_14;
  }
  v17 = 0;
  do
  {
    v18 = &v16[v17];
    v19 = &v11[v17];
    *((_QWORD *)v19 - 22) = *(_QWORD *)&v16[v17 - 176];
    v20 = *(_OWORD *)&v16[v17 - 168];
    v21 = *(_OWORD *)&v16[v17 - 152];
    *((_QWORD *)v19 - 17) = *(_QWORD *)&v16[v17 - 136];
    *(_OWORD *)(v19 - 152) = v21;
    *(_OWORD *)(v19 - 168) = v20;
    *((_OWORD *)v19 - 8) = *(_OWORD *)&v16[v17 - 128];
    *((_QWORD *)v19 - 14) = *(_QWORD *)&v16[v17 - 112];
    *((_QWORD *)v18 - 16) = 0;
    *((_QWORD *)v18 - 15) = 0;
    *((_QWORD *)v18 - 14) = 0;
    *(_OWORD *)(v19 - 104) = *(_OWORD *)&v16[v17 - 104];
    *((_QWORD *)v19 - 11) = *(_QWORD *)&v16[v17 - 88];
    *((_QWORD *)v18 - 13) = 0;
    *((_QWORD *)v18 - 12) = 0;
    *((_QWORD *)v18 - 11) = 0;
    *((_OWORD *)v19 - 5) = *(_OWORD *)&v16[v17 - 80];
    *((_QWORD *)v19 - 8) = *(_QWORD *)&v16[v17 - 64];
    *((_QWORD *)v18 - 10) = 0;
    *((_QWORD *)v18 - 9) = 0;
    v22 = *(_OWORD *)&v16[v17 - 56];
    *((_QWORD *)v18 - 8) = 0;
    *(_OWORD *)(v19 - 56) = v22;
    *((_QWORD *)v19 - 5) = *(_QWORD *)&v16[v17 - 40];
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v17 - 32];
    *((_QWORD *)v19 - 2) = *(_QWORD *)&v16[v17 - 16];
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_WORD *)v19 - 4) = *(_WORD *)&v16[v17 - 8];
    v17 -= 176;
  }
  while (&v16[v17] != v15);
  v16 = (char *)*a1;
  v23 = (char *)a1[1];
  *a1 = &v11[v17];
  a1[1] = v14;
  a1[2] = v13;
  if (v23 != v16)
  {
    do
    {
      v24 = v23 - 176;
      sub_20E991548((_QWORD *)v23 - 21);
      v23 = v24;
    }
    while (v24 != v16);
  }
  if (v16)
LABEL_14:
    operator delete(v16);
  return v14;
}

char *sub_20EB0770C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20EABADD4();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t *sub_20EB07858(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_20EB07A84(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a1;
  else
    v13 = *a1;
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  v14 = std::string::append(&v22, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_20EB07C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_20EB07D18(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_20EB07D20(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C9C4958;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_20EB07D50(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C9C4958;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EB07D94(void ***a1, int a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  void **v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  uint64_t *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_20EB083C4((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3));
    v7 = (char *)**a1;
    v8 = (char *)(*a1)[1];
    if (v7 != v8)
    {
      v9 = v66;
      v10 = v7 + 24;
      do
      {
        if (v9 < v67)
        {
          *v9 = *v10;
          *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
          *v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          v9 += 16;
        }
        else
        {
          v9 = sub_20EB084A8(&__p, v10);
        }
        v66 = v9;
        v11 = v10 + 16;
        v10 += 40;
      }
      while (v11 != v8);
    }
  }
  else if (a2 == 2)
  {
    sub_20EB083C4((uint64_t)&__p, ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4);
    v4 = (char *)**a1;
    v5 = (char *)(*a1)[1];
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *v4;
          *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
          *v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_20EB084A8(&__p, v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v13 = (char *)__p;
  v12 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v12 - 16);
      v64 = (uint64_t *)*((_QWORD *)v12 - 1);
      *(v12 - 16) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v15 = v66 - 16;
      sub_20EB07D94(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 != 1)
      {
        if (v63 != 2)
          goto LABEL_19;
        v16 = *v64;
        v17 = v64 + 1;
        v18 = v64[1];
        if (*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_102;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_103;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_20EB07D94(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 16;
          }
          while (v16 != v18);
          v16 = *v64;
          v17 = v64 + 1;
          v47 = v64[1];
          if (v47 == *v64)
          {
            *v17 = v47;
            goto LABEL_19;
          }
          v48 = v47 - 8;
          do
          {
            v49 = v48 - 8;
            sub_20EB07D94(v48, *(unsigned __int8 *)(v48 - 8));
            v48 -= 16;
          }
          while (v49 != v16);
        }
        *v17 = v16;
        goto LABEL_19;
      }
      v14 = *v64;
      v33 = v64 + 1;
      v34 = v64[1];
      if (*v64 == v34)
        goto LABEL_18;
      do
      {
        if (v15 < v67)
        {
          *v15 = *(_BYTE *)(v14 + 24);
          *((_QWORD *)v15 + 1) = *(_QWORD *)(v14 + 32);
          *(_BYTE *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          v35 = v15 + 16;
          goto LABEL_45;
        }
        v36 = (char *)__p;
        v37 = (v15 - (_BYTE *)__p) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
LABEL_102:
          sub_20EB057F8();
        v39 = v67 - (_BYTE *)__p;
        if ((v67 - (_BYTE *)__p) >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40 >> 60)
LABEL_103:
          sub_20E877A38();
        v41 = (char *)operator new(16 * v40);
        v42 = &v41[16 * v37];
        *v42 = *(_BYTE *)(v14 + 24);
        *((_QWORD *)v42 + 1) = *(_QWORD *)(v14 + 32);
        *(_BYTE *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        v35 = v42 + 16;
        if (v15 == v36)
        {
          __p = v42;
          v66 = v42 + 16;
          v67 = &v41[16 * v40];
LABEL_62:
          operator delete(v15);
          goto LABEL_45;
        }
        do
        {
          v43 = *(v15 - 16);
          v15 -= 16;
          *(v42 - 16) = v43;
          v42 -= 16;
          *((_QWORD *)v42 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v36);
        v15 = (char *)__p;
        v44 = v66;
        __p = v42;
        v66 = v35;
        v67 = &v41[16 * v40];
        if (v44 != v15)
        {
          v45 = v44 - 8;
          do
          {
            v46 = v45 - 8;
            sub_20EB07D94(v45, *(v45 - 8));
            v45 -= 16;
          }
          while (v46 != v15);
        }
        if (v15)
          goto LABEL_62;
LABEL_45:
        v66 = v35;
        v14 += 40;
        v15 = v35;
      }
      while (v14 != v34);
      v50 = *v64;
      v33 = v64 + 1;
      v14 = v64[1];
      if (v14 != *v64)
      {
        do
        {
          sub_20EB07D94(v14 - 8, *(unsigned __int8 *)(v14 - 16));
          if (*(char *)(v14 - 17) < 0)
            operator delete(*(void **)(v14 - 40));
          v14 -= 40;
        }
        while (v14 != v50);
        v14 = v50;
      }
LABEL_18:
      *v33 = v14;
LABEL_19:
      sub_20EB07D94(&v64, v63);
      v13 = (char *)__p;
      v12 = v66;
      if (__p == v66)
      {
        v3 = v62;
        break;
      }
    }
  }
  switch(v3)
  {
    case 0:
      v51 = *a1;
      v52 = (void **)**a1;
      if (!v52)
        goto LABEL_94;
      v53 = (void **)v51[1];
      v54 = **a1;
      if (v53 != v52)
      {
        do
        {
          sub_20EB07D94(v53 - 1, *((unsigned __int8 *)v53 - 16));
          if (*((char *)v53 - 17) < 0)
            operator delete(*(v53 - 5));
          v53 -= 5;
        }
        while (v53 != v52);
        v54 = *v51;
      }
      v51[1] = v52;
      break;
    case 1:
      v51 = *a1;
      v55 = (char *)**a1;
      if (!v55)
        goto LABEL_94;
      v56 = (char *)v51[1];
      v54 = **a1;
      if (v56 != v55)
      {
        v57 = v56 - 8;
        do
        {
          v58 = v57 - 8;
          sub_20EB07D94(v57, *(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v51;
      }
      v51[1] = v55;
      break;
    case 2:
      v51 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_94;
      v54 = *v51;
      break;
    case 7:
      v51 = *a1;
      v54 = **a1;
      if (!v54)
        goto LABEL_94;
      v51[1] = v54;
      break;
    default:
      goto LABEL_95;
  }
  operator delete(v54);
  v51 = *a1;
LABEL_94:
  operator delete(v51);
  v13 = (char *)__p;
LABEL_95:
  if (v13)
  {
    v59 = v13;
    if (v66 != v13)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_20EB07D94(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v13);
      v59 = __p;
    }
    v66 = v13;
    operator delete(v59);
  }
}

void sub_20EB083C4(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20EB057F8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_20EB07D94(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

char *sub_20EB084A8(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20EB057F8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_20E877A38();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_20EB07D94(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

void sub_20EB085D0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_20EB07A84((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24C9C4958;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24C9C4998;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20EB086F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *sub_20EB08748(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24C9C4A80[v1];
}

void sub_20EB08770(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C9C4958;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

char *sub_20EB087A0(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;

  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v8 = *(_BYTE *)(a2 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = *(unsigned __int8 **)a2;
    do
    {
      v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(_QWORD *)(v7 + 8)))
            return (char *)v7;
        }
        else
        {
          if (!*(_BYTE *)(v7 + 23))
            return (char *)v7;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v10[v13])
          {
            if (v11 == ++v13)
              return (char *)v7;
          }
        }
      }
      v7 += 40;
    }
    while (v7 != v6);
  }
  if (v6 >= a1[2])
  {
    v15 = sub_20EB08900(a1, a2, a3);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v14 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v14;
    }
    sub_20EB08AD0(v6 + 24, a3);
    v15 = (char *)(v6 + 40);
    a1[1] = v6 + 40;
  }
  a1[1] = (uint64_t)v15;
  return v15 - 40;
}

void sub_20EB088D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EB088E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_20EB08900(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  void ***v11;
  void ***v12;
  uint64_t v13;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_20EB057F8();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_20E877A38();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(&v9[40 * v4], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  sub_20EB08AD0((uint64_t)&v9[40 * v4 + 24], a3);
  sub_20EB09178((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, (uint64_t)&v9[40 * v4], (uint64_t)&v9[40 * v4]);
  v11 = (void ***)*a1;
  v12 = (void ***)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v10 + 40);
  a1[2] = (uint64_t)&v9[40 * v8];
  while (v12 != v11)
  {
    sub_20EB07D94(v12 - 1, *((unsigned __int8 *)v12 - 16));
    if (*((char *)v12 - 17) < 0)
      operator delete(*(v12 - 5));
    v12 -= 5;
  }
  if (v11)
    operator delete(v11);
  return v10 + 40;
}

void sub_20EB08A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_20EB09108((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20EB09108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB08AD0(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  __int128 **v14;
  uint64_t *v15;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (__int128 **)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20EB08CA4(v4, *v14, v14[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v14[1] - (char *)*v14) >> 3));
      goto LABEL_13;
    case 2:
      v15 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20EB08F08(v4, *v15, v15[1], (v15[1] - *v15) >> 4);
      goto LABEL_13;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_20E860C04(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_13;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_13;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_13;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_20E867F44();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_13:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_20EB08C44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EB08C58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EB08C6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EB08C80(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB08CA4(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_20EB057F8();
    result = operator new(40 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    v10 = result;
    if (a2 == a3)
    {
      v8 = result;
    }
    else
    {
      v8 = result;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_20E860C04(v8, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v9 = *a2;
          v8[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)v8 = v9;
        }
        result = (_QWORD *)sub_20EB08AD0(v8 + 3, (char *)a2 + 24);
        a2 = (__int128 *)((char *)a2 + 40);
        v8 = v10 + 5;
        v10 += 5;
      }
      while (a2 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EB08DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB08DFC(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB08DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20EB08E9C((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20EB08DFC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EB08DFC(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_20EB07D94(v4 - 1, *((unsigned __int8 *)v4 - 16));
          if (*((char *)v4 - 17) < 0)
            operator delete(*(v4 - 5));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EB08E9C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      sub_20EB07D94((void ***)(v3 - 8), *(unsigned __int8 *)(v3 - 16));
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 40;
    }
  }
  return a1;
}

_QWORD *sub_20EB08F08(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20EB057F8();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_20EB08AD0(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_20EB08FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB09008(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB08FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20EB090A4((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20EB09008(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EB09008(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;
  void ***v6;
  void ***v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_20EB07D94(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EB090A4(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void ***v4;
  void ***v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(void *****)(a1 + 16);
    v3 = **(void *****)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_20EB07D94(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_20EB09108(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_20EB07D94((void ***)(i - 8), *(unsigned __int8 *)(i - 16));
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EB09178(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v7 = a7;
  v13 = a6;
  v14 = a7;
  if (a3 != a5)
  {
    v9 = (void **)a3;
    do
    {
      v10 = (__int128 *)(v9 - 5);
      if (*((char *)v9 - 17) < 0)
      {
        sub_20E860C04((_BYTE *)(v7 - 40), *(v9 - 5), (unint64_t)*(v9 - 4));
      }
      else
      {
        v11 = *v10;
        *(_QWORD *)(v7 - 24) = *(v9 - 3);
        *(_OWORD *)(v7 - 40) = v11;
      }
      sub_20EB08AD0(v7 - 16, (unsigned __int8 *)v9 - 16);
      v7 = v14 - 40;
      v14 -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    return v13;
  }
  return a6;
}

void sub_20EB0923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EB09274((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB09250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 - 17) < 0)
    operator delete(*v10);
  sub_20EB09274((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB09274(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_20EB07D94((void ***)(v3 + 32), *(unsigned __int8 *)(v3 + 24));
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 40;
    }
  }
  return a1;
}

void sub_20EB092E0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C9C4958;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB09324(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v26 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a3 + 8);
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v25 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = v4;
  v28 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v29 = &off_24CA0C0E8;
  v30 = v8;
  v31 = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v27);
  v14 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
    return v13;
  v22 = (unint64_t *)&v26->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return v13;
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  return v13;
}

void sub_20EB094C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_20EB094E8((uint64_t)&a14);
  sub_20FF1C8E4((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB094E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD **sub_20EB09594(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = &off_24CA07C30;
    sub_20EB0580C((uint64_t)(v2 + 4));
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0x10B3C40E92279A6);
  }
  return a1;
}

_QWORD *sub_20EB0962C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24CA07C30;
  v7[1] = v5;
  v7[2] = v6;
  sub_20EB09F3C((uint64_t)(v7 + 4), a2);
  *v7 = &off_24CA07BC8;
  *a3 = &off_24CA0C0E8;
  a3[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[2] = result;
  return result;
}

void sub_20EB096F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EB09594((_QWORD **)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB09720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MEMORY[0x212BC6398](v2, 0x10B3C40E92279A6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB09784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB09798@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C9C4A40;
  v7[1] = v5;
  v7[2] = v6;
  sub_20EB09F3C((uint64_t)(v7 + 4), a2);
  *v7 = &off_24C9C49C0;
  *a3 = &off_24CA0C0E8;
  a3[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[2] = result;
  return result;
}

void sub_20EB0985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB09880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x212BC6398](v9, 0x10B3C40E92279A6);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB098E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB098F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9C4A40;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EB09970(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9C4A40;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB099E8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EB099F0(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24C9C4A00, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_2100C3D24(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20EB09A98(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20EB0BA70();
  sub_20EB09B4C(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20EB09B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB09B4C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A504E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A504E0))
  {
    v4 = sub_20EB0B040();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A504C8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A504D8 = *(_QWORD *)(v9 - 8);
      xmmword_254A504C8 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A504C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A504E0);
  }
  return sub_20EB0BE30(&xmmword_254A504C8, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)"}");
}

void sub_20EB09C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A504E0);
  _Unwind_Resume(a1);
}

void sub_20EB09C7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A504E0);
  _Unwind_Resume(a1);
}

void sub_20EB09C94(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_20EB09CC0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 3, a2);
}

_QWORD *sub_20EB09CF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9C4A40;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EB09D70(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9C4A40;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB09DE8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20EB0AADC();
  return sub_20EB0A30C(v2, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20EB09E40(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20EB0A538((uint64_t)v5, (uint64_t)v2, (_BYTE **)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C4840[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C4828[v3])(v5, v2);
  return result;
}

void sub_20EB09ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C4828[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20EB09F10(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20EB09F3C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v4;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v5;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v8;
    }
    v9 = (unsigned __int128 *)(a2 + 144);
    do
      v10 = __ldaxp(v9);
    while (__stlxp(v10, v9));
    *(_OWORD *)(a1 + 144) = v10;
    *(_BYTE *)(a1 + 160) = 1;
  }
  sub_20EB0A0E8(a1 + 176, a2 + 176);
  return a1;
}

void sub_20EB0A080(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[160] && v2[135] < 0)
    operator delete(*v4);
  if (v2[72] && v2[71] < 0)
    operator delete(*v3);
  if (v2[40])
  {
    if (v2[39] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB0A0E8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_20EB0A1D0((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20EB0A154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void ***)v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(void ***)(v1 + 8);
      v5 = *(void ***)v1;
      if (v4 != v3)
      {
        do
        {
          if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
            operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
          v4 -= 12;
        }
        while (v4 != v3);
        v5 = *(void ***)v1;
      }
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EB0A1D0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x2AAAAAAAAAAAAABLL)
      sub_20EB057F8();
    result = operator new(96 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[12 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EB054F8(&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 96;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EB0A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB05738(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB0A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_20EB05738(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 16) && *(char *)(v13 - 41) < 0)
    {
      operator delete(*(void **)(v13 - 64));
      if (*(_BYTE *)(v13 - 72))
      {
LABEL_7:
        if (*(char *)(v10 + v11 - 73) < 0)
          operator delete(*(void **)(v13 - 96));
      }
    }
    else if (*(_BYTE *)(v13 - 72))
    {
      goto LABEL_7;
    }
    v11 -= 96;
    if (!v11)
      goto LABEL_2;
  }
}

uint64_t sub_20EB0A30C(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20EB0A538((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48A0[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48A0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4840[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4828[v16])(&p_dst, &__dst);
  return result;
}

void sub_20EB0A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0A538(uint64_t a1, uint64_t a2, _BYTE **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_21022F254(v6, v23);
  sub_20E86A980(v7, (uint64_t)",", 1);
  v23[0] = v5 + 16;
  sub_2100C4CAC(**a3, (uint64_t)a3, (uint64_t)v23);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a2;
  v23[1] = __dst;
  v23[2] = a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24C9C4810[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20EB0A7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EB0A808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EB0A824(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FD0DE48((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_20EB0A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF1C744((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9C4810[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20EB0AA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EB0AAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EB0AAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20EB0AADC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50380))
    return &xmmword_254A50368;
  v2 = sub_20EB0ABB8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50368, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50378 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50368 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50368, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50380);
  return &xmmword_254A50368;
}

void sub_20EB0ABA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50380);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0ABB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A503A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A503A0))
    return &stru_254A50388;
  sub_20EB0AE5C((uint64_t)__p);
  sub_20EB0ACA8((char *)__p, &stru_254A50388);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50388, &dword_20E81F000);
  __cxa_guard_release(&qword_254A503A0);
  return &stru_254A50388;
}

void sub_20EB0AC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A503A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A503A0);
  _Unwind_Resume(a1);
}

void sub_20EB0ACA8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EB0B040();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20EB0AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EB0AE5C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50460);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50460))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Points<2>>]", qword_254A50448);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50448, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50460);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50480);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50480))
  {
    v5 = sub_20E8A2354(qword_254A50448, "<", 0);
    sub_20E89FC08(qword_254A50448, 0, v5, qword_254A50468);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50468, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50480);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A504A0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A504A0))
  {
    sub_21023CD84((uint64_t)qword_254A50468, (uint64_t)&xmmword_254A50488);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50488, &dword_20E81F000);
    __cxa_guard_release(&qword_254A504A0);
  }
  if (byte_254A5049F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50488, *((unint64_t *)&xmmword_254A50488 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50488;
    *(_QWORD *)(a1 + 16) = unk_254A50498;
  }
}

void sub_20EB0AFF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A504A0);
  _Unwind_Resume(a1);
}

void sub_20EB0B010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50480);
  _Unwind_Resume(a1);
}

void sub_20EB0B028(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50460);
  _Unwind_Resume(a1);
}

__int128 *sub_20EB0B040()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A503C0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A503C0))
    return &xmmword_254A503A8;
  v2 = sub_20EB0B11C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A503A8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A503B8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A503A8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A503A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A503C0);
  return &xmmword_254A503A8;
}

void sub_20EB0B104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A503C0);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0B11C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A503E0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A503E0))
    return &stru_254A503C8;
  sub_20EB0B334((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A503C8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A503C8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A503E0);
  return &stru_254A503C8;
}

void sub_20EB0B1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A503E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A503E0);
  _Unwind_Resume(a1);
}

void sub_20EB0B20C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EB0B518();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EB0B308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EB0B334(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50400);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50400))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Points<2>]", qword_254A503E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A503E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50400);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50420);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50420))
  {
    v5 = sub_20E8A2354(qword_254A503E8, "<", 0);
    sub_20E89FC08(qword_254A503E8, 0, v5, qword_254A50408);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50408, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50420);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50440);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50440))
  {
    sub_21023CD84((uint64_t)qword_254A50408, (uint64_t)&xmmword_254A50428);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50428, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50440);
  }
  if (byte_254A5043F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50428, *((unint64_t *)&xmmword_254A50428 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50428;
    *(_QWORD *)(a1 + 16) = unk_254A50438;
  }
}

void sub_20EB0B4D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50440);
  _Unwind_Resume(a1);
}

void sub_20EB0B4E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50420);
  _Unwind_Resume(a1);
}

void sub_20EB0B500(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50400);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0B518()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A502E0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A502E0))
    return &stru_254A502C8;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 2U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A502C8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A502C8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A502E0);
  return &stru_254A502C8;
}

void sub_20EB0B5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A502E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A502E0);
  _Unwind_Resume(a1);
}

__int128 *sub_20EB0B610()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50300);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50300))
    return &xmmword_254A502E8;
  v2 = (char *)sub_20EB0B6EC();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A502E8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A502F8 = *((_QWORD *)v2 + 2);
    xmmword_254A502E8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A502E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50300);
  return &xmmword_254A502E8;
}

void sub_20EB0B6D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50300);
  _Unwind_Resume(a1);
}

void *sub_20EB0B6EC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50320))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UnknownPackage]", qword_254A50308);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50308, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50320);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50340);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50340))
    return &unk_254A50328;
  sub_21023CD84((uint64_t)qword_254A50308, (uint64_t)&unk_254A50328);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50328, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50340);
  return &unk_254A50328;
}

void sub_20EB0B7DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50340);
  _Unwind_Resume(a1);
}

void sub_20EB0B7F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50320);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB0B80C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_20E89FEA0((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = &__dst;
  v17 = a3;
  v18 = &__dst;
  v19 = a3;
  v20 = a3;
  if (v15 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48B8[v15])(&p_p_dst, &__dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48A0[v15])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48A0[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4840[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4828[v15])(&p_dst, &__dst);
  return result;
}

void sub_20EB0B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0BA70()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A504C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A504C0))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20EB0B040();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_20EB0BD38();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A504A8, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A504A8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A504C0);
        return &stru_254A504A8;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A504A8;
}

void sub_20EB0BC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A504C0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A504C0);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0BD38()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50360);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50360))
    return &stru_254A50348;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 3U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50348);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50348, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50360);
  return &stru_254A50348;
}

void sub_20EB0BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50360);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50360);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB0BE30(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20EB0A538((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C48A0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4840[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9C4828[v11])(&p_dst, &__dst);
  return result;
}

void sub_20EB0BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB0BFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB0BFD8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x20C40960023A9);
  }
  return a1;
}

void (**sub_20EB0C02C(void (**a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*a1)
    (*a1)(0, a1, 0, 0, 0);
  return a1;
}

void sub_20EB0C074(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB0C098(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EB0C0E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EB0C158(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20EB0C18C()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20EB0C1D8(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20EB0C158;
  return result;
}

__n128 sub_20EB0C214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20EB0C158;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20EB0C240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_2103150A8)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t sub_20EB0C2C0(uint64_t a1, char **a2)
{
  char *v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  char *v10;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  void **v25;
  void **v26;
  unint64_t v27;
  char *v28;
  uint64_t **v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  __int128 v54;
  unint64_t v55;
  void *__p[43];
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  *(_QWORD *)a1 = *((_QWORD *)*a2 + 4);
  v5 = (_DWORD *)(a1 + 168);
  sub_20F3E44D4(a1 + 8, (uint64_t)(v4 + 376));
  sub_20F3E54C4(v5, (uint64_t)(*a2 + 4120));
  sub_20F3E66E8(a1 + 832, (uint64_t *)*a2 + 534);
  v6 = a1 + 952;
  v7 = *a2;
  if (!(*a2)[3832])
  {
    *(_BYTE *)(a1 + 928) = 0;
    *(_BYTE *)(a1 + 944) = 0;
    v10 = a2[2];
    v11 = v10[72];
    if (v11)
      goto LABEL_3;
LABEL_26:
    *(_BYTE *)v6 = 0;
    goto LABEL_27;
  }
  v8 = *((_QWORD *)v7 + 476);
  v9 = *((_WORD *)v7 + 1908);
  *(_QWORD *)(a1 + 928) = v8;
  *(_WORD *)(a1 + 936) = v9;
  *(_WORD *)(a1 + 938) = 0;
  *(_BYTE *)(a1 + 944) = 1;
  v10 = a2[2];
  v11 = v10[72];
  if (!v11)
    goto LABEL_26;
LABEL_3:
  v54 = 0uLL;
  v12 = (uint64_t)(*((_QWORD *)v10 + 7) - *((_QWORD *)v10 + 6)) >> 4;
  v55 = 0;
  sub_20EAFD70C((uint64_t)&v54, v12);
  v13 = (uint64_t *)*((_QWORD *)v10 + 6);
  for (i = (uint64_t *)*((_QWORD *)v10 + 7); v13 != i; v13 += 2)
  {
    v16 = *v13;
    if (!*v13)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOPoseMetadataSample.cpp", 43, (uint64_t)"elem", 4, (uint64_t)"Invalid plane debug pointer.", 28, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v16 = *v13;
    }
    sub_20F0E7238((uint64_t)__p, v16);
    v17 = *((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1) >= v55)
    {
      *((_QWORD *)&v54 + 1) = sub_20EAFD91C((void ***)&v54, (uint64_t)__p);
      if (__p[22])
      {
        __p[23] = __p[22];
        operator delete(__p[22]);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)&v54 + 1) + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_OWORD *)v17 = *(_OWORD *)__p;
      *(void **)(v17 + 16) = __p[2];
      memset(__p, 0, 24);
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      *(_OWORD *)(v17 + 24) = *(_OWORD *)&__p[3];
      *(void **)(v17 + 40) = __p[5];
      memset(&__p[3], 0, 24);
      v18 = *(_OWORD *)&__p[6];
      v19 = *(_OWORD *)&__p[8];
      v20 = *(_OWORD *)&__p[12];
      *(_OWORD *)(v17 + 80) = *(_OWORD *)&__p[10];
      *(_OWORD *)(v17 + 96) = v20;
      *(_OWORD *)(v17 + 48) = v18;
      *(_OWORD *)(v17 + 64) = v19;
      v21 = *(_OWORD *)&__p[14];
      v22 = *(_OWORD *)&__p[16];
      v23 = *(_OWORD *)&__p[20];
      *(_OWORD *)(v17 + 144) = *(_OWORD *)&__p[18];
      *(_OWORD *)(v17 + 160) = v23;
      *(_OWORD *)(v17 + 112) = v21;
      *(_OWORD *)(v17 + 128) = v22;
      *(_QWORD *)(v17 + 176) = 0;
      *(_QWORD *)(v17 + 184) = 0;
      *(_QWORD *)(v17 + 192) = 0;
      *(_OWORD *)(v17 + 176) = *(_OWORD *)&__p[22];
      *(void **)(v17 + 192) = __p[24];
      memset(&__p[22], 0, 24);
      v24 = __p[25];
      *(_BYTE *)(v17 + 208) = __p[26];
      *(_QWORD *)(v17 + 200) = v24;
      *((_QWORD *)&v54 + 1) = v17 + 216;
    }
    if (__p[3])
    {
      __p[4] = __p[3];
      operator delete(__p[3]);
    }
    v25 = (void **)__p[0];
    if (__p[0])
    {
      v26 = (void **)__p[1];
      v15 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((_BYTE *)v26 - 8) && *((char *)v26 - 9) < 0)
            operator delete(*(v26 - 4));
          v26 -= 17;
        }
        while (v26 != v25);
        v15 = __p[0];
      }
      __p[1] = v25;
      operator delete(v15);
    }
  }
  v27 = v55;
  v6 = a1 + 952;
  *(_OWORD *)(a1 + 952) = v54;
  *(_QWORD *)(a1 + 968) = v27;
  v11 = 1;
LABEL_27:
  *(_BYTE *)(a1 + 976) = v11;
  sub_20F3E30C4(a1 + 984, (uint64_t *)*a2 + 480);
  sub_20F3E507C(a1 + 1008, (uint64_t)(*a2 + 32));
  v28 = *a2;
  *(_WORD *)(a1 + 1360) = *((_WORD *)*a2 + 8);
  *(_QWORD *)(v6 + 412) = *(_QWORD *)(v28 + 20);
  *(_BYTE *)(a1 + 1372) = v28[5104];
  v29 = (uint64_t **)a2[2];
  if (*((_BYTE *)v29 + 16) && *v29)
  {
    sub_20F027D58((uint64_t)__p, *v29);
    *(_OWORD *)(a1 + 1384) = *(_OWORD *)&__p[1];
    *(void **)(a1 + 1400) = __p[3];
    *(_BYTE *)(a1 + 1408) = 0;
    *(_BYTE *)(a1 + 1720) = 0;
    if (v57)
    {
      *(_OWORD *)(a1 + 1408) = *(_OWORD *)&__p[4];
      *(void **)(a1 + 1424) = __p[6];
      memcpy((void *)(a1 + 1432), &__p[7], 0x119uLL);
      *(_BYTE *)(a1 + 1720) = 1;
    }
    *(_BYTE *)(a1 + 1728) = 1;
    v30 = a2[2];
    if (!v30[40])
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 1376) = 0;
    *(_BYTE *)(a1 + 1728) = 0;
    v30 = a2[2];
    if (!v30[40])
    {
LABEL_37:
      *(_BYTE *)(a1 + 1736) = 0;
      *(_BYTE *)(a1 + 1872) = 0;
      goto LABEL_40;
    }
  }
  v31 = (_QWORD *)*((_QWORD *)v30 + 3);
  if (!v31)
    goto LABEL_37;
  sub_20EB05918((uint64_t)__p, v31);
  *(void **)(a1 + 1736) = __p[0];
  v32 = __p[2];
  *(void **)(a1 + 1744) = __p[1];
  v33 = a1 + 1752;
  *(_QWORD *)(a1 + 1752) = v32;
  v34 = __p[3];
  *(void **)(a1 + 1760) = __p[3];
  if (v34)
  {
    v32[2] = v33;
    __p[1] = &__p[2];
    __p[2] = 0;
    __p[3] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1744) = v33;
  }
  *(void **)(a1 + 1768) = __p[4];
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)&__p[5];
  *(void **)(a1 + 1792) = __p[7];
  *(_OWORD *)&__p[5] = 0uLL;
  *(_OWORD *)(a1 + 1800) = *(_OWORD *)&__p[8];
  *(void **)(a1 + 1816) = __p[10];
  memset(&__p[7], 0, 32);
  *(_OWORD *)(a1 + 1824) = *(_OWORD *)&__p[11];
  *(void **)(a1 + 1840) = __p[13];
  *(_OWORD *)&__p[11] = 0uLL;
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)&__p[14];
  *(void **)(a1 + 1864) = __p[16];
  memset(&__p[13], 0, 32);
  *(_BYTE *)(a1 + 1872) = 1;
  sub_20EAB9ABC((uint64_t)__p);
LABEL_40:
  sub_20F3E328C(a1 + 1880, (uint64_t *)*a2 + 480);
  v35 = *a2;
  v36 = (uint64_t)(*a2 + 5036);
  v37 = **a2;
  v38 = (*a2)[3];
  v39 = (*a2)[2];
  *(_DWORD *)(a1 + 1904) = *((_DWORD *)*a2 + 1258);
  *(_BYTE *)(a1 + 1908) = *(_BYTE *)v36;
  *(_QWORD *)(a1 + 1912) = *((_QWORD *)v35 + 630);
  *(_BYTE *)(a1 + 1920) = *(_BYTE *)(v36 + 13);
  if (*(_BYTE *)(v36 + 60))
  {
    v40 = *(_BYTE *)(v36 + 52);
    v41 = *((_QWORD *)v35 + 635);
    v42 = *(_OWORD *)(v36 + 28);
    *(_DWORD *)(a1 + 1928) = *((_DWORD *)v35 + 1264);
    *(_OWORD *)(a1 + 1936) = v42;
    *(_BYTE *)(a1 + 1952) = v40;
    *(_QWORD *)(a1 + 1960) = v41;
    v43 = 1;
  }
  else
  {
    v43 = 0;
    *(_BYTE *)(a1 + 1928) = 0;
  }
  *(_BYTE *)(a1 + 1968) = v43;
  *(_BYTE *)(a1 + 1976) = v37;
  *(_BYTE *)(a1 + 1977) = v38;
  *(_BYTE *)(a1 + 1978) = v39;
  v44 = *a2;
  *(_QWORD *)(a1 + 1984) = *((_QWORD *)*a2 + 681);
  v45 = *((_QWORD *)v44 + 682);
  v46 = *((_QWORD *)v44 + 683);
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_QWORD *)(a1 + 2008) = 0;
  v47 = v46 - v45;
  if (v46 != v45)
  {
    if (v47 < 0)
      sub_20EABADD4();
    v48 = (char *)operator new(v46 - v45);
    v49 = 0;
    *(_QWORD *)(a1 + 1992) = v48;
    *(_QWORD *)(a1 + 2000) = v48;
    *(_QWORD *)(a1 + 2008) = &v48[32 * (v47 >> 5)];
    do
    {
      v50 = v45 + v49;
      v51 = &v48[v49];
      *(_QWORD *)v51 = *(_QWORD *)(v45 + v49);
      *((_DWORD *)v51 + 2) = *(_DWORD *)(v45 + v49 + 8);
      v51[12] = *(_BYTE *)(v45 + v49 + 12);
      *((_OWORD *)v51 + 1) = *(_OWORD *)(v45 + v49 + 16);
      v49 += 32;
    }
    while (v50 + 32 != v46);
    *(_QWORD *)(a1 + 2000) = &v48[v49];
  }
  v52 = *a2 + 5112;
  *(_OWORD *)(a1 + 2016) = *v52;
  *(_OWORD *)(a1 + 2032) = v52[1];
  return a1;
}

void sub_20EB0C8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, _QWORD *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void *v45;

  sub_20EAB9910(v40 + 1376);
  sub_20EAB99A0(v43);
  v45 = *v42;
  if (*v42)
  {
    *(_QWORD *)(v40 + 992) = v45;
    operator delete(v45);
  }
  sub_20EAB9A14(v41);
  sub_20EAB9E54(a9);
  sub_20EAB9A54(a10);
  sub_20EABA078(a11);
  _Unwind_Resume(a1);
}

void sub_20EB0CA74()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t **v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  char *v26;
  uint64_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t **v80;
  uint64_t **v81;
  unint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int v93;
  char *v94;
  char *k;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void **v142;
  void **v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void **v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  void *v164;
  int64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  __int128 v172;
  char *v173;
  char *v174;
  void *v175;
  void *v176;
  uint64_t **v177;
  uint64_t **v178;
  _QWORD *v179;
  char **v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  __int128 v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  __int128 v223;
  uint64_t v224;
  char v225;
  int *v226;
  int *v227;
  uint64_t v228;
  _DWORD *v229;
  int v230;
  int v231;
  int v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  _DWORD *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  _DWORD *v243;
  __int128 v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  _QWORD *v248;
  __int128 v249;
  uint64_t *v250;
  __int128 v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t *v254;
  char *v255;
  uint64_t **v256;
  uint64_t **v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  __int16 v263;
  int v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  _OWORD v269[4];
  __int128 v270;
  __int128 v271;
  _QWORD *v272;
  _QWORD v273[3];
  _QWORD v274[2];
  char v275;
  char v276;
  __int128 v277;
  __int128 v278;
  unint64_t v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  _BYTE v288[24];
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  char v296;
  _OWORD v297[2];
  uint64_t v298;
  __int128 *v299;

  v0 = MEMORY[0x24BDAC7A8]();
  *(_BYTE *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  v254 = (uint64_t *)v1;
  *(_OWORD *)v1 = 0u;
  v2 = (char *)operator new(0x1580uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C9B07F8;
  bzero(v2 + 24, 0x1568uLL);
  sub_20E91E37C((uint64_t)(v2 + 24));
  *v254 = (uint64_t)(v2 + 24);
  v254[1] = (uint64_t)v2;
  v3 = v254;
  v4 = (char *)operator new(0x68uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9C4AE0;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = v4 + 24;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  v254[2] = (uint64_t)(v4 + 24);
  v254[3] = (uint64_t)v4;
  v2[40] = *(_BYTE *)(v0 + 1360);
  *(_QWORD *)(v2 + 44) = *(_QWORD *)(v0 + 1364);
  sub_20F3E5CA4(v0 + 168, (uint64_t)&v277);
  sub_20EB0E45C((uint64_t)(v2 + 4144), (uint64_t)&v277);
  sub_20E91E818((uint64_t)&v277);
  sub_20F3E6ED4((uint64_t *)(v0 + 832), (uint64_t)&v277);
  sub_20E99015C((_QWORD *)v2 + 537, (uint64_t)&v277);
  sub_20E91E8B8((void **)&v277);
  if (*(_BYTE *)(v0 + 944))
  {
    *(_QWORD *)((char *)&v277 + 2) = 0;
    BYTE10(v277) = 0;
    v6 = *(_QWORD *)(v0 + 928);
    v7 = *(_BYTE *)(v0 + 936);
    v8 = *(_BYTE *)(v0 + 937);
    v9 = v2[3856];
    *(_QWORD *)(v2 + 3842) = (unsigned __int16)v277;
    *(_DWORD *)(v2 + 3849) = *(_DWORD *)((char *)&v277 + 7);
    if (!v9)
      v2[3856] = 1;
    *((_QWORD *)v2 + 479) = v6;
    v2[3840] = v7;
    v2[3841] = v8;
  }
  v253 = (_QWORD *)v0;
  if (*(_BYTE *)(v0 + 976))
  {
    v10 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v0 + 960) - *(_QWORD *)(v0 + 952)) >> 3);
    v256 = 0;
    v257 = 0;
    v255 = 0;
    sub_20EA647CC((uint64_t)&v255, v10);
    v11 = *(uint64_t **)(v0 + 952);
    v12 = *(uint64_t **)(v0 + 960);
    if (v11 != v12)
    {
      do
      {
        sub_20F0E7950(v11, (uint64_t)&v277);
        v13 = (char *)operator new(0x130uLL);
        v14 = v278;
        *(_OWORD *)(v13 + 24) = v277;
        v13[56] = v279;
        v15 = v283;
        *((_QWORD *)v13 + 10) = v281;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *(_QWORD *)v13 = &off_24C9C47D0;
        *(_OWORD *)(v13 + 40) = v14;
        *((_OWORD *)v13 + 4) = v280;
        v281 = 0;
        v280 = 0uLL;
        *(_OWORD *)(v13 + 88) = v282;
        *((_QWORD *)v13 + 13) = v15;
        v282 = 0uLL;
        v283 = 0;
        *((_OWORD *)v13 + 7) = v284;
        *((_QWORD *)v13 + 16) = v285;
        v284 = 0uLL;
        v285 = 0;
        v13[136] = 0;
        v13[160] = 0;
        if (v288[0])
        {
          *(_OWORD *)(v13 + 136) = v286;
          *((_QWORD *)v13 + 19) = v287;
          v287 = 0;
          v286 = 0uLL;
          v13[160] = 1;
        }
        v16 = v293;
        *(_OWORD *)(v13 + 232) = v292;
        *(_OWORD *)(v13 + 248) = v16;
        v17 = v295;
        *(_OWORD *)(v13 + 264) = v294;
        *(_OWORD *)(v13 + 280) = v17;
        v18 = v289;
        *(_OWORD *)(v13 + 168) = *(_OWORD *)&v288[8];
        *(_OWORD *)(v13 + 184) = v18;
        v19 = v291;
        *(_OWORD *)(v13 + 200) = v290;
        *(_OWORD *)(v13 + 216) = v19;
        v13[296] = v296;
        *(_QWORD *)&v297[0] = v13 + 24;
        *((_QWORD *)&v297[0] + 1) = v13;
        sub_20E991850((uint64_t)&v277);
        v20 = v256;
        if (v256 < v257)
        {
          *(_OWORD *)v256 = v297[0];
          v256 = v20 + 2;
        }
        else
        {
          v21 = sub_20EAFDCA4(&v255, (uint64_t)v297);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v297[0] + 1);
          v256 = (uint64_t **)v21;
          if (*((_QWORD *)&v297[0] + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v297[0] + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        v11 += 27;
      }
      while (v11 != v12);
      v5 = (char *)v254[2];
    }
    v26 = v255;
    v25 = v256;
    v27 = (uint64_t *)v257;
    if (v5[72])
    {
      v28 = (void **)(v5 + 48);
      v29 = *((_QWORD *)v5 + 6);
      if (v29)
      {
        v30 = *((_QWORD *)v5 + 7);
        v31 = (void *)*((_QWORD *)v5 + 6);
        if (v30 != v29)
        {
          do
          {
            v32 = *(std::__shared_weak_count **)(v30 - 8);
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(p_shared_owners);
              while (__stlxr(v34 - 1, p_shared_owners));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v30 -= 16;
          }
          while (v30 != v29);
          v31 = *v28;
        }
        *((_QWORD *)v5 + 7) = v29;
        operator delete(v31);
        *v28 = 0;
        *((_QWORD *)v5 + 7) = 0;
        *((_QWORD *)v5 + 8) = 0;
      }
      *((_QWORD *)v5 + 6) = v26;
      *((_QWORD *)v5 + 7) = v25;
      *((_QWORD *)v5 + 8) = v27;
      v0 = (uint64_t)v253;
      v3 = v254;
    }
    else
    {
      *((_QWORD *)v5 + 6) = v255;
      *((_QWORD *)v5 + 7) = v25;
      *((_QWORD *)v5 + 8) = v27;
      v5[72] = 1;
      v3 = v254;
    }
  }
  sub_20F3E31A0((char ***)(v0 + 984), &v277);
  v35 = *v3;
  v36 = *v3 + 3840;
  v37 = *(_QWORD **)v36;
  if (*(_QWORD *)v36)
  {
    *(_QWORD *)(v35 + 3848) = v37;
    operator delete(v37);
    *(_QWORD *)v36 = 0;
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 16) = 0;
  }
  *(_OWORD *)(v35 + 3840) = v277;
  *(_QWORD *)(v35 + 3856) = v278;
  sub_20F3E335C((char ***)(v0 + 1880), v297);
  v38 = *(_QWORD *)&v297[0];
  if (*((_QWORD *)&v297[0] + 1) != *(_QWORD *)&v297[0])
  {
    v39 = *(_QWORD *)(v35 + 3848);
    v40 = *(_QWORD *)(v35 + 3840);
    v41 = (v39 - v40) >> 5;
    if (v41 != (uint64_t)(*((_QWORD *)&v297[0] + 1) - *(_QWORD *)&v297[0]) >> 5
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/VIOPoseMetadataSample.cpp", 183, (uint64_t)"frame_size == switching_size", 28, (uint64_t)"camera_switching_frame_rates and camera_switching_events must be the same size", 78, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v208 = v39 == v40;
    v0 = (uint64_t)v253;
    if (!v208)
    {
      v42 = 0;
      v43 = *(_QWORD **)v36;
      do
      {
        v43[4 * v42 + 3] = *(_QWORD *)(v38 + 32 * v42 + 24);
        ++v42;
      }
      while (v41 != v42);
    }
  }
  sub_20F3E51F0(v0 + 1008, (uint64_t)&v277);
  sub_20EB0E7E8(v35 + 32, (uint64_t)&v277);
  sub_20E91EA40((uint64_t)&v277);
  *(_QWORD *)(v35 + 32) = *(_QWORD *)v0;
  sub_20F3E471C(v0 + 8, (uint64_t)&v277);
  *(_QWORD *)(v35 + 408) = v279;
  v44 = v278;
  *(_OWORD *)(v35 + 376) = v277;
  *(_OWORD *)(v35 + 392) = v44;
  sub_20EB0F138(v35 + 416, (uint64_t *)&v280);
  *(_BYTE *)(v35 + 456) = v283;
  v45 = v254;
  if (*(_QWORD *)(v35 + 488))
  {
    v46 = *(_QWORD **)(v35 + 480);
    if (v46)
    {
      do
      {
        v47 = (_QWORD *)*v46;
        operator delete(v46);
        v46 = v47;
      }
      while (v47);
    }
    *(_QWORD *)(v35 + 480) = 0;
    v48 = *(_QWORD *)(v35 + 472);
    if (v48)
    {
      for (i = 0; i != v48; ++i)
        *(_QWORD *)(*(_QWORD *)(v35 + 464) + 8 * i) = 0;
    }
    *(_QWORD *)(v35 + 488) = 0;
  }
  v50 = v284;
  *(_QWORD *)&v284 = 0;
  v51 = *(void **)(v35 + 464);
  *(_QWORD *)(v35 + 464) = v50;
  if (v51)
    operator delete(v51);
  v52 = *((_QWORD *)&v284 + 1);
  v53 = v285;
  *((_QWORD *)&v284 + 1) = 0;
  v54 = v286;
  *(_QWORD *)(v35 + 480) = v285;
  *(_QWORD *)(v35 + 488) = v54;
  *(_DWORD *)(v35 + 496) = DWORD2(v286);
  *(_QWORD *)(v35 + 472) = v52;
  if (v54)
  {
    v55 = *(_QWORD *)(v53 + 8);
    if ((v52 & (v52 - 1)) != 0)
    {
      if (v55 >= v52)
        v55 %= v52;
    }
    else
    {
      v55 &= v52 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v35 + 464) + 8 * v55) = v35 + 480;
    v285 = 0;
    *(_QWORD *)&v286 = 0;
  }
  if (*(_QWORD *)(v35 + 528))
  {
    v56 = *(_QWORD **)(v35 + 520);
    if (v56)
    {
      do
      {
        v57 = (_QWORD *)*v56;
        operator delete(v56);
        v56 = v57;
      }
      while (v57);
    }
    *(_QWORD *)(v35 + 520) = 0;
    v58 = *(_QWORD *)(v35 + 512);
    if (v58)
    {
      for (j = 0; j != v58; ++j)
        *(_QWORD *)(*(_QWORD *)(v35 + 504) + 8 * j) = 0;
    }
    *(_QWORD *)(v35 + 528) = 0;
  }
  v60 = v287;
  v287 = 0;
  v61 = *(void **)(v35 + 504);
  *(_QWORD *)(v35 + 504) = v60;
  if (v61)
    operator delete(v61);
  v62 = *(_QWORD *)v288;
  v63 = *(_QWORD *)&v288[8];
  *(_QWORD *)(v35 + 512) = *(_QWORD *)v288;
  *(_QWORD *)v288 = 0;
  v64 = *(_QWORD *)&v288[16];
  *(_QWORD *)(v35 + 528) = *(_QWORD *)&v288[16];
  *(_DWORD *)(v35 + 536) = v289;
  *(_QWORD *)(v35 + 520) = v63;
  if (v64)
  {
    v65 = *(_QWORD *)(v63 + 8);
    if ((v62 & (v62 - 1)) != 0)
    {
      if (v65 >= v62)
        v65 %= v62;
    }
    else
    {
      v65 &= v62 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v35 + 504) + 8 * v65) = v35 + 520;
    *(_QWORD *)&v288[8] = 0;
    *(_QWORD *)&v288[16] = 0;
  }
  *(_BYTE *)(v35 + 544) = BYTE8(v289);
  sub_20E91E748(&v277);
  *(_BYTE *)(v35 + 17) = *(_BYTE *)(v0 + 1361);
  if (*(_BYTE *)(v0 + 1728))
  {
    sub_20F027E24();
    v66 = operator new(0x208uLL);
    v66[1] = 0;
    v66[2] = 0;
    *v66 = &off_24C9C4B30;
    v67 = sub_20EAFE3B4((uint64_t)(v66 + 3), (uint64_t)&v277);
    v68 = v254[2];
    v69 = *(unsigned __int8 *)(v68 + 16);
    *(_QWORD *)v68 = v67;
    if (v69)
    {
      v70 = *(std::__shared_weak_count **)(v68 + 8);
      *(_QWORD *)(v68 + 8) = v66;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
    }
    else
    {
      *(_QWORD *)(v68 + 8) = v66;
      *(_BYTE *)(v68 + 16) = 1;
    }
    sub_20EAFDDD0((uint64_t)&v277);
    v45 = v254;
  }
  if (!*(_BYTE *)(v0 + 1872))
    goto LABEL_280;
  v257 = 0;
  v258 = 0;
  v256 = (uint64_t **)&v257;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0;
  v263 = 1;
  v264 = 0;
  v266 = 0u;
  v267 = 0u;
  v268 = 0u;
  memset(v269, 0, sizeof(v269));
  v270 = 0u;
  v271 = 0u;
  v272 = v273;
  v273[0] = 0;
  v274[0] = 0;
  v274[1] = 0;
  v273[1] = 0;
  v273[2] = v274;
  v275 = 0;
  v276 = 0;
  v255 = *(char **)(v0 + 1736);
  v265 = *(_QWORD *)(v0 + 1768);
  v73 = (_QWORD *)(v0 + 1752);
  v74 = *(_QWORD **)(v0 + 1744);
  if (v74 != (_QWORD *)(v0 + 1752))
  {
    do
    {
      sub_20E955E54();
      v78 = (uint64_t *)v257;
      v79 = v74[4];
      v80 = (uint64_t **)&v257;
      v81 = (uint64_t **)&v257;
      if (v257)
      {
        while (1)
        {
          while (1)
          {
            v81 = (uint64_t **)v78;
            v82 = v78[4];
            if (v79 >= v82)
              break;
            v78 = *v81;
            v80 = v81;
            if (!*v81)
              goto LABEL_92;
          }
          if (v82 >= v79)
            break;
          v78 = v81[1];
          if (!v78)
          {
            v80 = v81 + 1;
            goto LABEL_92;
          }
        }
      }
      else
      {
LABEL_92:
        v83 = (uint64_t *)operator new(0x1D8uLL);
        v83[4] = v79;
        sub_20E9573E4((uint64_t)(v83 + 5), (uint64_t *)&v277);
        *v83 = 0;
        v83[1] = 0;
        v83[2] = (uint64_t)v81;
        *v80 = v83;
        if (*v256)
        {
          v256 = (uint64_t **)*v256;
          v83 = *v80;
        }
        sub_20E868578((uint64_t *)v257, v83);
        ++v258;
      }
      sub_20E9545B0((uint64_t)&v277);
      v84 = (_QWORD *)v74[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (_QWORD *)v74[2];
          v208 = *v85 == (_QWORD)v74;
          v74 = v85;
        }
        while (!v208);
      }
      v74 = v85;
      v0 = (uint64_t)v253;
    }
    while (v85 != v73);
  }
  v75 = *(_QWORD *)(v0 + 1776);
  v76 = *(_QWORD *)(v0 + 1784);
  if (v75 != v76)
  {
    v77 = *((_QWORD *)&v266 + 1);
    do
    {
      if (v77 < (unint64_t)v267)
      {
        v86 = *(_DWORD *)(v75 + 8);
        *(_QWORD *)v77 = *(_QWORD *)v75;
        *(_DWORD *)(v77 + 8) = v86;
        v77 += 16;
      }
      else
      {
        v87 = (void *)v266;
        v88 = (uint64_t)(v77 - v266) >> 4;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 60)
          sub_20E867F44();
        v90 = v267 - v266;
        if ((uint64_t)(v267 - v266) >> 3 > v89)
          v89 = v90 >> 3;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91 >> 60)
          sub_20E877A38();
        v92 = (char *)operator new(16 * v91);
        v93 = *(_DWORD *)(v75 + 8);
        v94 = &v92[16 * v88];
        *(_QWORD *)v94 = *(_QWORD *)v75;
        *((_DWORD *)v94 + 2) = v93;
        for (k = v94; (void *)v77 != v87; *((_DWORD *)k + 2) = v97)
        {
          v96 = *(_QWORD *)(v77 - 16);
          v77 -= 16;
          v97 = *(_DWORD *)(v77 + 8);
          *((_QWORD *)k - 2) = v96;
          k -= 16;
        }
        v77 = (unint64_t)(v94 + 16);
        *(_QWORD *)&v266 = k;
        *((_QWORD *)&v266 + 1) = v94 + 16;
        *(_QWORD *)&v267 = &v92[16 * v91];
        if (v87)
          operator delete(v87);
      }
      *((_QWORD *)&v266 + 1) = v77;
      v75 += 16;
    }
    while (v75 != v76);
  }
  sub_20EB0F560((uint64_t)v269, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v253[226] - v253[225]) >> 4));
  v98 = (uint64_t *)v253[225];
  v99 = (uint64_t *)v253[226];
  if (v98 != v99)
  {
    v250 = (uint64_t *)v253[226];
    do
    {
      sub_20F462170((uint64_t)(v98 + 1), (uint64_t)&v277);
      v103 = *((_QWORD *)&v269[0] + 1);
      v104 = *v98;
      if (*((_QWORD *)&v269[0] + 1) < *(_QWORD *)&v269[1])
      {
        **((_QWORD **)&v269[0] + 1) = v104;
        v100 = v277;
        v101 = v278;
        *(_QWORD *)(v103 + 40) = v279;
        *(_OWORD *)(v103 + 24) = v101;
        *(_OWORD *)(v103 + 8) = v100;
        *(_OWORD *)(v103 + 48) = v280;
        *(_QWORD *)(v103 + 64) = v281;
        v280 = 0uLL;
        v281 = 0;
        *(_OWORD *)(v103 + 72) = v282;
        *(_QWORD *)(v103 + 88) = v283;
        v282 = 0uLL;
        v283 = 0;
        *(_OWORD *)(v103 + 96) = v284;
        *(_QWORD *)(v103 + 112) = v285;
        v284 = 0uLL;
        v285 = 0;
        *(_OWORD *)(v103 + 120) = v286;
        *(_QWORD *)(v103 + 136) = v287;
        v286 = 0uLL;
        v287 = 0;
        *(_OWORD *)(v103 + 144) = *(_OWORD *)v288;
        *(_QWORD *)(v103 + 160) = *(_QWORD *)&v288[16];
        memset(v288, 0, sizeof(v288));
        *(_WORD *)(v103 + 168) = v289;
        v102 = (char *)(v103 + 176);
      }
      else
      {
        v105 = *(_QWORD *)&v269[0];
        v106 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v269[0] + 1) - *(_QWORD *)&v269[0]) >> 4);
        v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) > 0x1745D1745D1745DLL)
          sub_20E867F44();
        if (0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)&v269[1] - *(_QWORD *)&v269[0]) >> 4) > v107)
          v107 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)&v269[1] - *(_QWORD *)&v269[0]) >> 4);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v269[1] - *(_QWORD *)&v269[0]) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
          v108 = 0x1745D1745D1745DLL;
        else
          v108 = v107;
        if (v108 > 0x1745D1745D1745DLL)
          sub_20E877A38();
        v109 = (char *)operator new(176 * v108);
        v110 = &v109[176 * v106];
        *(_QWORD *)v110 = v104;
        v111 = v278;
        *(_OWORD *)(v110 + 8) = v277;
        v112 = &v109[176 * v108];
        v113 = v281;
        *((_QWORD *)v110 + 5) = v279;
        *((_QWORD *)v110 + 8) = v113;
        *((_QWORD *)v110 + 11) = 0;
        v114 = v285;
        *((_QWORD *)v110 + 11) = v283;
        *((_QWORD *)v110 + 13) = 0;
        *((_QWORD *)v110 + 14) = 0;
        *((_QWORD *)v110 + 14) = v114;
        *((_QWORD *)v110 + 17) = 0;
        v115 = v287;
        v116 = *(_QWORD *)&v288[16];
        *((_QWORD *)v110 + 16) = 0;
        *((_QWORD *)v110 + 17) = v115;
        *(_OWORD *)(v110 + 24) = v111;
        *((_OWORD *)v110 + 3) = v280;
        v281 = 0;
        v280 = 0uLL;
        *(_OWORD *)(v110 + 72) = v282;
        v282 = 0uLL;
        v283 = 0;
        *((_OWORD *)v110 + 6) = v284;
        v284 = 0uLL;
        v285 = 0;
        *(_OWORD *)(v110 + 120) = v286;
        v286 = 0uLL;
        v287 = 0;
        *((_QWORD *)v110 + 19) = 0;
        *((_QWORD *)v110 + 20) = 0;
        *((_OWORD *)v110 + 9) = *(_OWORD *)v288;
        *((_QWORD *)v110 + 20) = v116;
        *(_QWORD *)v288 = 0;
        *(_QWORD *)&v288[8] = 0;
        *((_WORD *)v110 + 84) = v289;
        v102 = v110 + 176;
        *(_QWORD *)&v288[16] = 0;
        if (v103 != v105)
        {
          v117 = 0;
          do
          {
            v118 = v103 + v117;
            v119 = &v110[v117];
            *((_QWORD *)v119 - 22) = *(_QWORD *)(v103 + v117 - 176);
            v120 = *(_OWORD *)(v103 + v117 - 168);
            v121 = *(_OWORD *)(v103 + v117 - 152);
            *((_QWORD *)v119 - 17) = *(_QWORD *)(v103 + v117 - 136);
            *(_OWORD *)(v119 - 152) = v121;
            *(_OWORD *)(v119 - 168) = v120;
            *((_OWORD *)v119 - 8) = *(_OWORD *)(v103 + v117 - 128);
            *((_QWORD *)v119 - 14) = *(_QWORD *)(v103 + v117 - 112);
            *(_QWORD *)(v118 - 128) = 0;
            *(_QWORD *)(v118 - 120) = 0;
            *(_QWORD *)(v118 - 112) = 0;
            *(_OWORD *)(v119 - 104) = *(_OWORD *)(v103 + v117 - 104);
            *((_QWORD *)v119 - 11) = *(_QWORD *)(v103 + v117 - 88);
            *(_QWORD *)(v118 - 104) = 0;
            *(_QWORD *)(v118 - 96) = 0;
            *(_QWORD *)(v118 - 88) = 0;
            *((_OWORD *)v119 - 5) = *(_OWORD *)(v103 + v117 - 80);
            *((_QWORD *)v119 - 8) = *(_QWORD *)(v103 + v117 - 64);
            *(_QWORD *)(v118 - 80) = 0;
            *(_QWORD *)(v118 - 72) = 0;
            v122 = *(_OWORD *)(v103 + v117 - 56);
            *(_QWORD *)(v118 - 64) = 0;
            *(_OWORD *)(v119 - 56) = v122;
            *((_QWORD *)v119 - 5) = *(_QWORD *)(v103 + v117 - 40);
            *(_QWORD *)(v118 - 56) = 0;
            *(_QWORD *)(v118 - 48) = 0;
            *(_QWORD *)(v118 - 40) = 0;
            *((_OWORD *)v119 - 2) = *(_OWORD *)(v103 + v117 - 32);
            *((_QWORD *)v119 - 2) = *(_QWORD *)(v103 + v117 - 16);
            *(_QWORD *)(v118 - 32) = 0;
            *(_QWORD *)(v118 - 24) = 0;
            *(_QWORD *)(v118 - 16) = 0;
            *((_WORD *)v119 - 4) = *(_WORD *)(v103 + v117 - 8);
            v117 -= 176;
          }
          while (v103 + v117 != v105);
          v123 = *((_QWORD *)&v269[0] + 1);
          v103 = *(_QWORD *)&v269[0];
          *(_QWORD *)&v269[0] = &v110[v117];
          *((_QWORD *)&v269[0] + 1) = v110 + 176;
          *(_QWORD *)&v269[1] = v112;
          while (v123 != v103)
          {
            v125 = *(_QWORD *)(v123 - 32);
            if (v125)
            {
              v126 = *(_QWORD *)(v123 - 24);
              v127 = *(void **)(v123 - 32);
              if (v126 != v125)
              {
                do
                {
                  v129 = *(void **)(v126 - 24);
                  if (v129)
                  {
                    *(_QWORD *)(v126 - 16) = v129;
                    operator delete(v129);
                  }
                  v130 = *(_QWORD *)(v126 - 48);
                  if (v130)
                  {
                    v131 = *(_QWORD *)(v126 - 40);
                    v128 = *(void **)(v126 - 48);
                    if (v131 != v130)
                    {
                      do
                      {
                        v133 = *(void **)(v131 - 32);
                        if (v133)
                        {
                          *(_QWORD *)(v131 - 24) = v133;
                          operator delete(v133);
                        }
                        v134 = *(void **)(v131 - 56);
                        if (v134)
                        {
                          *(_QWORD *)(v131 - 48) = v134;
                          operator delete(v134);
                        }
                        v135 = *(void **)(v131 - 88);
                        if (v135)
                        {
                          *(_QWORD *)(v131 - 80) = v135;
                          operator delete(v135);
                        }
                        v136 = *(_QWORD *)(v131 - 112);
                        if (v136)
                        {
                          v137 = *(_QWORD *)(v131 - 104);
                          v132 = *(void **)(v131 - 112);
                          if (v137 != v136)
                          {
                            do
                            {
                              v138 = *(void **)(v137 - 24);
                              if (v138)
                              {
                                *(_QWORD *)(v137 - 16) = v138;
                                operator delete(v138);
                              }
                              v139 = *(void **)(v137 - 48);
                              if (v139)
                              {
                                *(_QWORD *)(v137 - 40) = v139;
                                operator delete(v139);
                              }
                              v137 -= 112;
                            }
                            while (v137 != v136);
                            v132 = *(void **)(v131 - 112);
                          }
                          *(_QWORD *)(v131 - 104) = v136;
                          operator delete(v132);
                        }
                        v131 -= 136;
                      }
                      while (v131 != v130);
                      v128 = *(void **)(v126 - 48);
                    }
                    *(_QWORD *)(v126 - 40) = v130;
                    operator delete(v128);
                  }
                  v126 -= 56;
                }
                while (v126 != v125);
                v127 = *(void **)(v123 - 32);
              }
              *(_QWORD *)(v123 - 24) = v125;
              operator delete(v127);
            }
            v140 = *(void **)(v123 - 56);
            if (v140)
            {
              *(_QWORD *)(v123 - 48) = v140;
              operator delete(v140);
            }
            v141 = *(void **)(v123 - 80);
            if (v141)
            {
              *(_QWORD *)(v123 - 72) = v141;
              operator delete(v141);
            }
            v142 = *(void ***)(v123 - 104);
            if (v142)
            {
              v143 = *(void ***)(v123 - 96);
              v144 = *(void **)(v123 - 104);
              if (v143 != v142)
              {
                do
                {
                  v146 = *(v143 - 4);
                  if (v146)
                  {
                    *(v143 - 3) = v146;
                    operator delete(v146);
                  }
                  v147 = *(v143 - 7);
                  if (v147)
                  {
                    *(v143 - 6) = v147;
                    operator delete(v147);
                  }
                  v148 = *(v143 - 11);
                  if (v148)
                  {
                    *(v143 - 10) = v148;
                    operator delete(v148);
                  }
                  v149 = v143 - 14;
                  v150 = (char *)*(v143 - 14);
                  if (v150)
                  {
                    v151 = (char *)*(v143 - 13);
                    v145 = *(v143 - 14);
                    if (v151 != v150)
                    {
                      do
                      {
                        v152 = (void *)*((_QWORD *)v151 - 3);
                        if (v152)
                        {
                          *((_QWORD *)v151 - 2) = v152;
                          operator delete(v152);
                        }
                        v153 = (void *)*((_QWORD *)v151 - 6);
                        if (v153)
                        {
                          *((_QWORD *)v151 - 5) = v153;
                          operator delete(v153);
                        }
                        v151 -= 112;
                      }
                      while (v151 != v150);
                      v145 = *v149;
                    }
                    *(v143 - 13) = v150;
                    operator delete(v145);
                  }
                  v143 -= 14;
                }
                while (v149 != v142);
                v144 = *(void **)(v123 - 104);
              }
              *(_QWORD *)(v123 - 96) = v142;
              operator delete(v144);
            }
            v154 = *(_QWORD *)(v123 - 128);
            if (v154)
            {
              v155 = *(_QWORD *)(v123 - 120);
              v124 = *(void **)(v123 - 128);
              if (v155 != v154)
              {
                v156 = *(_QWORD *)(v123 - 120);
                do
                {
                  v158 = *(void **)(v156 - 24);
                  v156 -= 24;
                  v157 = v158;
                  if (v158)
                  {
                    *(_QWORD *)(v155 - 16) = v157;
                    operator delete(v157);
                  }
                  v155 = v156;
                }
                while (v156 != v154);
                v124 = *(void **)(v123 - 128);
              }
              *(_QWORD *)(v123 - 120) = v154;
              operator delete(v124);
            }
            v123 -= 176;
          }
          v99 = v250;
          if (!v103)
            goto LABEL_118;
LABEL_200:
          operator delete((void *)v103);
          goto LABEL_118;
        }
        *(_QWORD *)&v269[0] = &v109[176 * v106];
        *((_QWORD *)&v269[0] + 1) = v110 + 176;
        *(_QWORD *)&v269[1] = v112;
        if (v103)
          goto LABEL_200;
      }
LABEL_118:
      *((_QWORD *)&v269[0] + 1) = v102;
      sub_20E991548(&v277);
      v98 += 22;
    }
    while (v98 != v99);
  }
  v159 = (char *)v253[228];
  v160 = (char *)v253[229];
  v277 = 0uLL;
  *(_QWORD *)&v278 = 0;
  v161 = v160 - v159;
  if (v160 == v159)
  {
    v163 = 0;
    v162 = 0uLL;
    v164 = (void *)*((_QWORD *)&v269[1] + 1);
    if (!*((_QWORD *)&v269[1] + 1))
      goto LABEL_207;
  }
  else
  {
    if (v161 < 0)
      sub_20E92CED8();
    *(_QWORD *)&v277 = operator new(v160 - v159);
    *((_QWORD *)&v277 + 1) = v277;
    *(_QWORD *)&v278 = v277 + 8 * (v161 >> 3);
    v299 = &v277;
    do
    {
      v298 = *(_QWORD *)v159;
      sub_20E9B2D04((uint64_t *)&v299, &v298);
      v159 += 8;
    }
    while (v159 != v160);
    v162 = v277;
    v163 = v278;
    v164 = (void *)*((_QWORD *)&v269[1] + 1);
    if (!*((_QWORD *)&v269[1] + 1))
      goto LABEL_207;
  }
  *(_QWORD *)&v269[2] = v164;
  v251 = v162;
  operator delete(v164);
  v162 = v251;
LABEL_207:
  *(_OWORD *)((char *)&v269[1] + 8) = v162;
  *((_QWORD *)&v269[2] + 1) = v163;
  v165 = v253[232] - v253[231];
  v166 = 0xAAAAAAAAAAAAAAABLL * (v165 >> 3);
  v167 = (char *)*((_QWORD *)&v270 + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v271 + 1) - *((_QWORD *)&v270 + 1)) >> 3) < v166)
  {
    if (v166 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v168 = (char *)v271;
    v169 = (char *)operator new(v165);
    v170 = &v169[24 * ((v168 - v167) / 24)];
    if (v168 == v167)
    {
      *((_QWORD *)&v270 + 1) = &v169[24 * ((v168 - v167) / 24)];
      *(_QWORD *)&v271 = *((_QWORD *)&v270 + 1);
      *((_QWORD *)&v271 + 1) = &v169[24 * v166];
    }
    else
    {
      v171 = &v169[24 * ((v168 - v167) / 24)];
      do
      {
        v172 = *(_OWORD *)(v168 - 24);
        v168 -= 24;
        *(_OWORD *)(v171 - 24) = v172;
        v171 -= 24;
        *((_QWORD *)v171 + 2) = *((_QWORD *)v168 + 2);
        *(_QWORD *)v168 = 0;
        *((_QWORD *)v168 + 1) = 0;
        *((_QWORD *)v168 + 2) = 0;
      }
      while (v168 != v167);
      v167 = (char *)*((_QWORD *)&v270 + 1);
      v173 = (char *)v271;
      *((_QWORD *)&v270 + 1) = v171;
      *(_QWORD *)&v271 = v170;
      *((_QWORD *)&v271 + 1) = &v169[24 * v166];
      if (v173 != v167)
      {
        v174 = v173;
        do
        {
          v176 = (void *)*((_QWORD *)v174 - 3);
          v174 -= 24;
          v175 = v176;
          if (v176)
          {
            *((_QWORD *)v173 - 2) = v175;
            operator delete(v175);
          }
          v173 = v174;
        }
        while (v174 != v167);
      }
    }
    if (v167)
      operator delete(v167);
  }
  v177 = (uint64_t **)v253[231];
  v178 = (uint64_t **)v253[232];
  if (v177 != v178)
  {
    while (1)
    {
      v179 = (_QWORD *)v271;
      if ((unint64_t)v271 >= *((_QWORD *)&v271 + 1))
      {
        v181 = (_QWORD *)*((_QWORD *)&v270 + 1);
        v182 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - *((_QWORD *)&v270 + 1)) >> 3);
        v183 = v182 + 1;
        if (v182 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v271 + 1) - *((_QWORD *)&v270 + 1)) >> 3) > v183)
          v183 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v271 + 1) - *((_QWORD *)&v270 + 1)) >> 3);
        v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v271 + 1) - *((_QWORD *)&v270 + 1)) >> 3) >= 0x555555555555555
             ? 0xAAAAAAAAAAAAAAALL
             : v183;
        if (v184)
        {
          if (v184 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v185 = (char *)operator new(24 * v184);
        }
        else
        {
          v185 = 0;
        }
        v186 = &v185[24 * v182];
        v187 = &v185[24 * v184];
        v180 = (char **)(v186 + 24);
        *(_QWORD *)v186 = 0;
        *((_QWORD *)v186 + 1) = 0;
        *((_QWORD *)v186 + 2) = 0;
        if (v179 == v181)
        {
          *((_QWORD *)&v270 + 1) = &v185[24 * v182];
          *(_QWORD *)&v271 = v186 + 24;
          *((_QWORD *)&v271 + 1) = v187;
        }
        else
        {
          do
          {
            v188 = v186;
            *((_QWORD *)v186 - 2) = 0;
            *((_QWORD *)v186 - 1) = 0;
            v189 = *(_OWORD *)(v179 - 3);
            v179 -= 3;
            *(_OWORD *)(v186 - 24) = v189;
            v186 -= 24;
            *((_QWORD *)v188 - 1) = v179[2];
            *v179 = 0;
            v179[1] = 0;
            v179[2] = 0;
          }
          while (v179 != v181);
          v179 = (_QWORD *)*((_QWORD *)&v270 + 1);
          v190 = (_QWORD *)v271;
          *((_QWORD *)&v270 + 1) = v186;
          *(_QWORD *)&v271 = v180;
          *((_QWORD *)&v271 + 1) = v187;
          if (v190 != v179)
          {
            v191 = v190;
            do
            {
              v193 = (void *)*(v191 - 3);
              v191 -= 3;
              v192 = v193;
              if (v193)
              {
                *(v190 - 2) = v192;
                operator delete(v192);
              }
              v190 = v191;
            }
            while (v191 != v179);
          }
        }
        if (v179)
          operator delete(v179);
      }
      else
      {
        v180 = (char **)(v271 + 24);
        *(_QWORD *)v271 = 0;
        v179[1] = 0;
        v179[2] = 0;
      }
      *(_QWORD *)&v271 = v180;
      v195 = *v177;
      v194 = v177[1];
      if (*v177 != v194)
        break;
LABEL_224:
      v177 += 3;
      if (v177 == v178)
        goto LABEL_272;
    }
    while (1)
    {
      v196 = *v195;
      v197 = *((unsigned int *)v195 + 2);
      v198 = *((_DWORD *)v195 + 4);
      v199 = *((unsigned int *)v195 + 10) | (unint64_t)(v195[6] << 32);
      v200 = *((unsigned int *)v195 + 6) | (unint64_t)(v195[4] << 32);
      *(_QWORD *)&v277 = *v195;
      *((_QWORD *)&v277 + 1) = v197;
      LODWORD(v278) = v198;
      *((_QWORD *)&v278 + 1) = v200;
      v279 = v199;
      v201 = (uint64_t)*(v180 - 3);
      v202 = (uint64_t)*(v180 - 2);
      if (v202 != v201)
        break;
LABEL_262:
      if (v201 == v202
        || (*(_DWORD *)(v201 + 16) == v198 ? (v208 = *(_QWORD *)v201 == v196) : (v208 = 0),
            v208 ? (v209 = *(_DWORD *)(v201 + 8) == (_DWORD)v197) : (v209 = 0),
            !v209))
      {
        sub_20EB0F704(v180 - 3, v201, (uint64_t)&v277);
      }
      v195 += 7;
      if (v195 == v194)
        goto LABEL_224;
    }
    v203 = 0xCCCCCCCCCCCCCCCDLL * ((v202 - v201) >> 3);
    while (1)
    {
      v204 = v203 >> 1;
      v205 = v201 + 40 * (v203 >> 1);
      v206 = *(_DWORD *)(v205 + 16);
      v207 = v206 >= v198;
      if (v206 != v198)
        goto LABEL_259;
      if (*(_QWORD *)v205 >= v196)
        break;
LABEL_253:
      v201 = v205 + 40;
      v204 = v203 + ~v204;
LABEL_254:
      v203 = v204;
      if (!v204)
        goto LABEL_262;
    }
    if (*(_QWORD *)v205 != v196)
      goto LABEL_254;
    v207 = *(_DWORD *)(v205 + 8) >= v197;
LABEL_259:
    if (v207)
      goto LABEL_254;
    goto LABEL_253;
  }
LABEL_272:
  v210 = operator new(0x170uLL);
  v210[1] = 0;
  v210[2] = 0;
  *v210 = &off_24C9C4B80;
  v211 = sub_20EAFE15C((uint64_t)(v210 + 3), (uint64_t)&v255);
  v0 = (uint64_t)v253;
  v212 = v254[2];
  v213 = *(unsigned __int8 *)(v212 + 40);
  *(_QWORD *)(v212 + 24) = v211;
  if (v213)
  {
    v214 = *(std::__shared_weak_count **)(v212 + 32);
    *(_QWORD *)(v212 + 32) = v210;
    if (v214)
    {
      v215 = (unint64_t *)&v214->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
  }
  else
  {
    *(_QWORD *)(v212 + 32) = v210;
    *(_BYTE *)(v212 + 40) = 1;
  }
  sub_20EAF9A2C((uint64_t)&v255);
  v45 = v254;
LABEL_280:
  v217 = *(_BYTE *)(v0 + 1908);
  v218 = *(_QWORD *)(v0 + 1912);
  v219 = *(_BYTE *)(v0 + 1920);
  v220 = *v45;
  v221 = *v45 + 5036;
  *(_DWORD *)(v220 + 5032) = *(_DWORD *)(v0 + 1904);
  *(_BYTE *)v221 = v217;
  *(_QWORD *)(v220 + 5040) = v218;
  *(_WORD *)(v221 + 12) = v219;
  if (*(_BYTE *)(v0 + 1968))
  {
    v222 = *(_DWORD *)(v0 + 1928);
    v223 = *(_OWORD *)(v0 + 1936);
    v224 = *(_QWORD *)(v0 + 1960);
    v225 = *(_BYTE *)(v0 + 1952);
    if (!*(_BYTE *)(v221 + 60))
      *(_BYTE *)(v221 + 60) = 1;
    *(_DWORD *)(v220 + 5056) = v222;
    *(_OWORD *)(v221 + 28) = v223;
    *(_QWORD *)(v220 + 5080) = v224;
    *(_BYTE *)(v221 + 52) = v225;
  }
  *(_BYTE *)v220 = *(_BYTE *)(v0 + 1976);
  *(_BYTE *)(v220 + 2) = *(_BYTE *)(v0 + 1978);
  *(_BYTE *)(v220 + 3) = *(_BYTE *)(v0 + 1977);
  *(_BYTE *)(v221 + 68) = *(_BYTE *)(v0 + 1372);
  *(_QWORD *)(v220 + 5448) = *(_QWORD *)(v0 + 1984);
  v226 = *(int **)(v0 + 1992);
  v227 = *(int **)(v0 + 2000);
  v277 = 0uLL;
  *(_QWORD *)&v278 = 0;
  v228 = (char *)v227 - (char *)v226;
  if (v227 != v226)
  {
    if (v228 < 0)
      sub_20EABADD4();
    v252 = v220;
    v229 = operator new((char *)v227 - (char *)v226);
    *(_QWORD *)&v277 = v229;
    *((_QWORD *)&v277 + 1) = v229;
    *(_QWORD *)&v278 = &v229[8 * (v228 >> 5)];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v230 = *v226;
          v231 = v226[1];
          v232 = v226[2];
          v233 = *((_BYTE *)v226 + 12);
          v235 = *((_QWORD *)v226 + 2);
          v234 = *((_QWORD *)v226 + 3);
          if ((unint64_t)v229 >= (unint64_t)v278)
            break;
          *v229 = v230;
          v229[1] = v231;
          v229[2] = v232;
          *((_BYTE *)v229 + 12) = v233;
          *((_QWORD *)v229 + 2) = v235;
          *((_QWORD *)v229 + 3) = v234;
          v229 += 8;
          *((_QWORD *)&v277 + 1) = v229;
          v226 += 8;
          if (v226 == v227)
            goto LABEL_306;
        }
        v236 = (_DWORD *)v277;
        v237 = (uint64_t)((uint64_t)v229 - v277) >> 5;
        v238 = v237 + 1;
        if ((unint64_t)(v237 + 1) >> 59)
          sub_20EABADD4();
        v239 = v278 - v277;
        if ((uint64_t)(v278 - v277) >> 4 > v238)
          v238 = v239 >> 4;
        v240 = (unint64_t)v239 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v238;
        if (v240)
        {
          if (v240 >> 59)
            sub_20E877A38();
          v241 = (char *)operator new(32 * v240);
        }
        else
        {
          v241 = 0;
        }
        v242 = &v241[32 * v237];
        *(_DWORD *)v242 = v230;
        *((_DWORD *)v242 + 1) = v231;
        *((_DWORD *)v242 + 2) = v232;
        v242[12] = v233;
        *((_QWORD *)v242 + 2) = v235;
        *((_QWORD *)v242 + 3) = v234;
        v243 = v242 + 32;
        if (v229 != v236)
          break;
        *(_QWORD *)&v277 = &v241[32 * v237];
        *((_QWORD *)&v277 + 1) = v242 + 32;
        v236 = v229;
        *(_QWORD *)&v278 = &v241[32 * v240];
LABEL_305:
        operator delete(v236);
        v229 = v243;
        *((_QWORD *)&v277 + 1) = v243;
        v226 += 8;
        if (v226 == v227)
        {
LABEL_306:
          v228 = v277;
          v245 = v278;
          v246 = *(void **)(v252 + 5456);
          v247 = v252;
          v248 = v253;
          if (v246)
            goto LABEL_307;
          goto LABEL_308;
        }
      }
      do
      {
        v244 = *((_OWORD *)v229 - 1);
        *((_OWORD *)v242 - 2) = *((_OWORD *)v229 - 2);
        *((_OWORD *)v242 - 1) = v244;
        v242 -= 32;
        v229 -= 8;
      }
      while (v229 != v236);
      *(_QWORD *)&v277 = v242;
      *((_QWORD *)&v277 + 1) = v243;
      *(_QWORD *)&v278 = &v241[32 * v240];
      if (v236)
        goto LABEL_305;
      v229 = v243;
      *((_QWORD *)&v277 + 1) = v243;
      v226 += 8;
      if (v226 == v227)
        goto LABEL_306;
    }
  }
  v245 = 0;
  v229 = 0;
  v246 = *(void **)(v220 + 5456);
  v247 = v220;
  v248 = v253;
  if (v246)
  {
LABEL_307:
    *(_QWORD *)(v247 + 5464) = v246;
    operator delete(v246);
    *(_QWORD *)(v247 + 5456) = 0;
    *(_QWORD *)(v247 + 5464) = 0;
    *(_QWORD *)(v247 + 5472) = 0;
  }
LABEL_308:
  *(_QWORD *)(v247 + 5456) = v228;
  *(_QWORD *)(v247 + 5464) = v229;
  *(_QWORD *)(v247 + 5472) = v245;
  *(_QWORD *)&v277 = v248[252];
  BYTE8(v277) = *((_BYTE *)v248 + 2024);
  *(_QWORD *)&v278 = v248[254];
  BYTE8(v278) = *((_BYTE *)v248 + 2040);
  v249 = v278;
  *(_OWORD *)(v247 + 5112) = v277;
  *(_OWORD *)(v247 + 5128) = v249;
  if (*(_QWORD *)&v297[0])
    operator delete(*(void **)&v297[0]);
}

void sub_20EB0E210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  sub_20EAF9A2C((uint64_t)va);
  v14 = *(void **)(v12 - 160);
  if (v14)
    operator delete(v14);
  sub_20E91D88C(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB0E45C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v4 = (_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = (_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v8 = (_OWORD *)(a1 + 56);
  v9 = (__int128 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a2 + 144))
  {
    if (!*(_BYTE *)(a1 + 144))
    {
      v36 = *v9;
      v37 = *(_OWORD *)(a2 + 72);
      v38 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v38;
      *v8 = v36;
      *(_OWORD *)(a1 + 72) = v37;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a1 + 144) = 1;
      sub_20E99015C((_QWORD *)(a1 + 152), a2 + 152);
      v14 = (_QWORD *)(a2 + 296);
      v15 = *(void **)(a1 + 296);
      if (!v15)
        goto LABEL_17;
LABEL_16:
      *(_QWORD *)(a1 + 304) = v15;
      operator delete(v15);
      *(_QWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 312) = 0;
      goto LABEL_17;
    }
    v16 = *(void **)(a1 + 120);
    if (v16)
    {
      *(_QWORD *)(a1 + 128) = v16;
      operator delete(v16);
    }
    *(_BYTE *)(a1 + 144) = 0;
LABEL_15:
    sub_20E99015C((_QWORD *)(a1 + 152), a2 + 152);
    v14 = (_QWORD *)(a2 + 296);
    v15 = *(void **)(a1 + 296);
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 144))
    goto LABEL_15;
  v10 = *v9;
  v11 = *(_OWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v12;
  *v8 = v10;
  *(_OWORD *)(a1 + 72) = v11;
  v13 = *(void **)(a1 + 120);
  if (v13)
  {
    *(_QWORD *)(a1 + 128) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  sub_20E99015C((_QWORD *)(a1 + 152), a2 + 152);
  v14 = (_QWORD *)(a2 + 296);
  v15 = *(void **)(a1 + 296);
  if (v15)
    goto LABEL_16;
LABEL_17:
  v17 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v17;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  v18 = *(void **)(a1 + 320);
  if (v18)
  {
    *(_QWORD *)(a1 + 328) = v18;
    operator delete(v18);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  v19 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 354) = *(_OWORD *)(a2 + 354);
  *(_OWORD *)(a1 + 344) = v19;
  v20 = *(void **)(a1 + 376);
  if (v20)
  {
    *(_QWORD *)(a1 + 384) = v20;
    operator delete(v20);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
  }
  v21 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v21;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  v22 = *(void **)(a1 + 408);
  if (v22)
  {
    *(_QWORD *)(a1 + 416) = v22;
    operator delete(v22);
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
  }
  v23 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v23;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  v24 = (_OWORD *)(a1 + 432);
  v25 = (__int128 *)(a2 + 432);
  if (*(unsigned __int8 *)(a1 + 904) == *(unsigned __int8 *)(a2 + 904))
  {
    if (*(_BYTE *)(a1 + 904))
    {
      v26 = *v25;
      v27 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 460);
      *v24 = v26;
      *(_OWORD *)(a1 + 448) = v27;
      v28 = *(_OWORD *)(a2 + 592);
      v30 = *(_OWORD *)(a2 + 544);
      v29 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 592) = v28;
      *(_OWORD *)(a1 + 544) = v30;
      *(_OWORD *)(a1 + 560) = v29;
      v31 = *(_OWORD *)(a2 + 480);
      v32 = *(_OWORD *)(a2 + 496);
      v33 = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
      *(_OWORD *)(a1 + 528) = v33;
      *(_OWORD *)(a1 + 480) = v31;
      *(_OWORD *)(a1 + 496) = v32;
      memcpy((void *)(a1 + 608), (const void *)(a2 + 608), 0x120uLL);
      v34 = *(_BYTE *)(a2 + 900);
      *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
      *(_BYTE *)(a1 + 900) = v34;
    }
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 904))
    {
      *(_BYTE *)(a1 + 904) = 0;
    }
    else
    {
      v39 = *v25;
      v40 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 460);
      *v24 = v39;
      *(_OWORD *)(a1 + 448) = v40;
      v41 = *(_OWORD *)(a2 + 592);
      v43 = *(_OWORD *)(a2 + 544);
      v42 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 592) = v41;
      *(_OWORD *)(a1 + 544) = v43;
      *(_OWORD *)(a1 + 560) = v42;
      v44 = *(_OWORD *)(a2 + 480);
      v45 = *(_OWORD *)(a2 + 496);
      v46 = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
      *(_OWORD *)(a1 + 528) = v46;
      *(_OWORD *)(a1 + 480) = v44;
      *(_OWORD *)(a1 + 496) = v45;
      memcpy((void *)(a1 + 608), (const void *)(a2 + 608), 0x120uLL);
      v47 = *(_BYTE *)(a2 + 900);
      *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
      *(_BYTE *)(a1 + 900) = v47;
      *(_BYTE *)(a1 + 904) = 1;
    }
    return a1;
  }
}

uint64_t sub_20EB0E7E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  __int128 *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  v8 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v12;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  v16 = *(_OWORD *)(a2 + 280);
  v17 = *(_OWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 296) = v17;
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 280) = v16;
  v19 = *(_OWORD *)(a2 + 344);
  v20 = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 360) = v20;
  sub_20EB0F138(a1 + 384, (uint64_t *)(a2 + 384));
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  sub_20EB0F04C(a1 + 432, (uint64_t *)(a2 + 432));
  sub_20EB0F04C(a1 + 472, (uint64_t *)(a2 + 472));
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  sub_20EB0EACC(a1 + 520, a2 + 520);
  sub_20EB0EACC(a1 + 600, a2 + 600);
  sub_20EB0EC64(a1 + 680, a2 + 680);
  v21 = *(_DWORD *)(a2 + 736);
  *(_WORD *)(a1 + 740) = *(_WORD *)(a2 + 740);
  *(_DWORD *)(a1 + 736) = v21;
  v22 = *(_QWORD *)(a1 + 744);
  if (v22)
  {
    v23 = (void **)(a1 + 744);
    v24 = *(_QWORD *)(a1 + 752);
    v25 = *(void **)(a1 + 744);
    if (v24 != v22)
    {
      v26 = *(_QWORD *)(a1 + 752);
      do
      {
        v28 = *(void **)(v26 - 24);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 16) = v27;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v22);
      v25 = *v23;
    }
    *(_QWORD *)(a1 + 752) = v22;
    operator delete(v25);
    *v23 = 0;
    *(_QWORD *)(a1 + 752) = 0;
    *(_QWORD *)(a1 + 760) = 0;
  }
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 744) = 0;
  *(_QWORD *)(a2 + 752) = 0;
  *(_QWORD *)(a2 + 760) = 0;
  memcpy((void *)(a1 + 768), (const void *)(a2 + 768), 0x7B9uLL);
  sub_20EB0ED94(a1 + 2752, (__int128 *)(a2 + 2752));
  v29 = (__int128 *)(a2 + 3656);
  if (*(unsigned __int8 *)(a1 + 3672) == *(unsigned __int8 *)(a2 + 3672))
  {
    if (*(_BYTE *)(a1 + 3672))
    {
      v30 = *v29;
      *(_QWORD *)v29 = 0;
      *(_QWORD *)(a2 + 3664) = 0;
      v31 = *(std::__shared_weak_count **)(a1 + 3664);
      *(_OWORD *)(a1 + 3656) = v30;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 3672))
  {
    v34 = *(std::__shared_weak_count **)(a1 + 3664);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    *(_BYTE *)(a1 + 3672) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 3656) = *(_QWORD *)(a2 + 3656);
    *(_QWORD *)(a1 + 3664) = *(_QWORD *)(a2 + 3664);
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(a2 + 3664) = 0;
    *(_BYTE *)(a1 + 3672) = 1;
  }
  v37 = *(_OWORD *)(a2 + 3680);
  *(_DWORD *)(a1 + 3696) = *(_DWORD *)(a2 + 3696);
  *(_OWORD *)(a1 + 3680) = v37;
  sub_20EB0F04C(a1 + 3704, (uint64_t *)(a2 + 3704));
  v38 = *(_OWORD *)(a2 + 3744);
  *(_OWORD *)(a1 + 3757) = *(_OWORD *)(a2 + 3757);
  *(_OWORD *)(a1 + 3744) = v38;
  return a1;
}

__n128 sub_20EB0EACC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  __n128 result;
  void *v8;
  void *v9;
  void *v10;

  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(void **)(a1 + 24);
      if (v5)
      {
        *(_QWORD *)(a1 + 32) = v5;
        operator delete(v5);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v6 = *(void **)(a1 + 48);
      if (v6)
      {
        *(_QWORD *)(a1 + 56) = v6;
        operator delete(v6);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      result = *(__n128 *)(a2 + 48);
      *(__n128 *)(a1 + 48) = result;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    v8 = *(void **)(a1 + 48);
    if (v8)
    {
      *(_QWORD *)(a1 + 56) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a1 + 24);
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = v9;
      operator delete(v9);
    }
    v10 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    result = *(__n128 *)(a2 + 48);
    *(__n128 *)(a1 + 48) = result;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

__n128 sub_20EB0EC64(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __n128 result;
  void *v7;
  void *v8;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(void **)(a1 + 24);
      if (v5)
      {
        *(_QWORD *)(a1 + 32) = v5;
        operator delete(v5);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      result = *(__n128 *)(a2 + 24);
      *(__n128 *)(a1 + 24) = result;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(void **)(a1 + 24);
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = v7;
      operator delete(v7);
    }
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

void sub_20EB0ED94(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  if (*(unsigned __int8 *)(a1 + 896) == *((unsigned __int8 *)a2 + 896))
  {
    if (*(_BYTE *)(a1 + 896))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      v6 = a2[3];
      v7 = a2[4];
      v8 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v8;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 64) = v7;
      v9 = a2[7];
      v10 = a2[8];
      v11 = a2[9];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 112) = v9;
      memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
      memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
      v12 = *(void **)(a1 + 744);
      if (v12)
      {
        *(_QWORD *)(a1 + 752) = v12;
        operator delete(v12);
        *(_QWORD *)(a1 + 744) = 0;
        *(_QWORD *)(a1 + 752) = 0;
        *(_QWORD *)(a1 + 760) = 0;
      }
      *(_QWORD *)(a1 + 744) = *((_QWORD *)a2 + 93);
      *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
      *(_QWORD *)(a1 + 760) = *((_QWORD *)a2 + 95);
      *((_QWORD *)a2 + 95) = 0;
      *(__int128 *)((char *)a2 + 744) = 0u;
      v13 = a2[48];
      *(_QWORD *)(a1 + 784) = *((_QWORD *)a2 + 98);
      *(_OWORD *)(a1 + 768) = v13;
      v14 = *(__int128 *)((char *)a2 + 792);
      *(_QWORD *)(a1 + 808) = *((_QWORD *)a2 + 101);
      *(_OWORD *)(a1 + 792) = v14;
      *(_OWORD *)(a1 + 816) = a2[51];
      v15 = *((_QWORD *)a2 + 104);
      *(_DWORD *)(a1 + 840) = *((_DWORD *)a2 + 210);
      *(_QWORD *)(a1 + 832) = v15;
      v16 = (_OWORD *)(a1 + 848);
      v17 = a2 + 53;
      if (*(unsigned __int8 *)(a1 + 872) == *((unsigned __int8 *)a2 + 872))
      {
        if (*(_BYTE *)(a1 + 872))
        {
          v18 = *v17;
          *(_QWORD *)(a1 + 864) = *((_QWORD *)a2 + 108);
          *v16 = v18;
        }
      }
      else if (*(_BYTE *)(a1 + 872))
      {
        *(_BYTE *)(a1 + 872) = 0;
      }
      else
      {
        v32 = *v17;
        *(_QWORD *)(a1 + 864) = *((_QWORD *)a2 + 108);
        *v16 = v32;
        *(_BYTE *)(a1 + 872) = 1;
      }
      v33 = *((_QWORD *)a2 + 110);
      *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
      *(_QWORD *)(a1 + 880) = v33;
    }
  }
  else if (*(_BYTE *)(a1 + 896))
  {
    v19 = *(void **)(a1 + 744);
    if (v19)
    {
      *(_QWORD *)(a1 + 752) = v19;
      operator delete(v19);
    }
    *(_BYTE *)(a1 + 896) = 0;
  }
  else
  {
    v20 = *a2;
    v21 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)a1 = v20;
    v22 = a2[3];
    v23 = a2[4];
    v24 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v24;
    *(_OWORD *)(a1 + 48) = v22;
    *(_OWORD *)(a1 + 64) = v23;
    v25 = a2[7];
    v26 = a2[8];
    v27 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v26;
    *(_OWORD *)(a1 + 144) = v27;
    *(_OWORD *)(a1 + 112) = v25;
    memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
    memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
    *(_QWORD *)(a1 + 744) = 0;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_QWORD *)(a1 + 744) = *((_QWORD *)a2 + 93);
    *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
    *(_QWORD *)(a1 + 760) = *((_QWORD *)a2 + 95);
    *(__int128 *)((char *)a2 + 744) = 0u;
    *((_QWORD *)a2 + 95) = 0;
    v28 = *((_QWORD *)a2 + 98);
    *(_OWORD *)(a1 + 768) = a2[48];
    *(_QWORD *)(a1 + 784) = v28;
    v29 = *((_QWORD *)a2 + 101);
    *(_OWORD *)(a1 + 792) = *(__int128 *)((char *)a2 + 792);
    *(_QWORD *)(a1 + 808) = v29;
    *(_OWORD *)(a1 + 816) = a2[51];
    *(_OWORD *)(a1 + 832) = a2[52];
    *(_BYTE *)(a1 + 848) = 0;
    *(_BYTE *)(a1 + 872) = 0;
    if (*((_BYTE *)a2 + 872))
    {
      v30 = a2[53];
      *(_QWORD *)(a1 + 864) = *((_QWORD *)a2 + 108);
      *(_OWORD *)(a1 + 848) = v30;
      *(_BYTE *)(a1 + 872) = 1;
    }
    v31 = *((_QWORD *)a2 + 110);
    *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
    *(_QWORD *)(a1 + 880) = v31;
    *(_BYTE *)(a1 + 896) = 1;
  }
}

void sub_20EB0F04C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void sub_20EB0F138(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (_QWORD *)*v4;
        v17 = (_QWORD *)v4[6];
        if (v17)
        {
          do
          {
            v18 = (_QWORD *)*v17;
            operator delete(v17);
            v17 = v18;
          }
          while (v18);
        }
        v19 = (void *)v4[4];
        v4[4] = 0;
        if (v19)
          operator delete(v19);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_20EB0F25C(uint64_t a1, _QWORD **a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_20E86A980(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtod((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_20E86A980(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_20EB0F45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20EB0F4C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EB0F4D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB0F508(uint64_t a1)
{
  return sub_20EAFE028(a1 + 24);
}

void sub_20EB0F514(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EB0F524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB0F554(uint64_t a1)
{
  return sub_20EAFDDD0(a1 + 24);
}

void sub_20EB0F560(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;

  v2 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x1745D1745D1745ELL)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 176 * a2;
    v6 = (char *)operator new(176 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v4[v9];
        v11 = &v8[v9];
        *((_QWORD *)v11 - 22) = *(_QWORD *)&v4[v9 - 176];
        v12 = *(_OWORD *)&v4[v9 - 168];
        v13 = *(_OWORD *)&v4[v9 - 152];
        *((_QWORD *)v11 - 17) = *(_QWORD *)&v4[v9 - 136];
        *(_OWORD *)(v11 - 152) = v13;
        *(_OWORD *)(v11 - 168) = v12;
        *((_OWORD *)v11 - 8) = *(_OWORD *)&v4[v9 - 128];
        *((_QWORD *)v11 - 14) = *(_QWORD *)&v4[v9 - 112];
        *((_QWORD *)v10 - 16) = 0;
        *((_QWORD *)v10 - 15) = 0;
        *((_QWORD *)v10 - 14) = 0;
        *(_OWORD *)(v11 - 104) = *(_OWORD *)&v4[v9 - 104];
        *((_QWORD *)v11 - 11) = *(_QWORD *)&v4[v9 - 88];
        *((_QWORD *)v10 - 13) = 0;
        *((_QWORD *)v10 - 12) = 0;
        *((_QWORD *)v10 - 11) = 0;
        *((_OWORD *)v11 - 5) = *(_OWORD *)&v4[v9 - 80];
        *((_QWORD *)v11 - 8) = *(_QWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 10) = 0;
        *((_QWORD *)v10 - 9) = 0;
        v14 = *(_OWORD *)&v4[v9 - 56];
        *((_QWORD *)v10 - 8) = 0;
        *(_OWORD *)(v11 - 56) = v14;
        *((_QWORD *)v11 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v10 - 7) = 0;
        *((_QWORD *)v10 - 6) = 0;
        *((_QWORD *)v10 - 5) = 0;
        *((_OWORD *)v11 - 2) = *(_OWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 2) = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v10 - 4) = 0;
        *((_QWORD *)v10 - 3) = 0;
        *((_QWORD *)v10 - 2) = 0;
        *((_WORD *)v11 - 4) = *(_WORD *)&v4[v9 - 8];
        v9 -= 176;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v15 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v15 != v2)
      {
        do
        {
          v16 = v15 - 176;
          sub_20E991548((_QWORD *)v15 - 21);
          v15 = v16;
        }
        while (v16 != v2);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

uint64_t sub_20EB0F704(char **a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __n128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __n128 v38;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 40;
  v8 = (uint64_t)&(*a1)[40 * v7];
  v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v16 > 0x666666666666666)
      sub_20E867F44();
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v5) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x333333333333333)
      v18 = 0x666666666666666;
    else
      v18 = v16;
    v44 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x666666666666666)
        sub_20E877A38();
      v19 = (char *)operator new(40 * v18);
    }
    else
    {
      v19 = 0;
    }
    v40 = v19;
    v41 = &v19[40 * v7];
    v42 = v41;
    v43 = &v19[40 * v18];
    sub_20EB0FA40((uint64_t)&v40, (__n128 *)a3);
    v22 = v41;
    v23 = *a1;
    v24 = v41;
    if (*a1 != (char *)v8)
    {
      v25 = v8;
      v26 = v41;
      do
      {
        v24 = v26 - 40;
        v27 = *(_OWORD *)(v25 - 40);
        v28 = *(_OWORD *)(v25 - 24);
        *((_QWORD *)v26 - 1) = *(_QWORD *)(v25 - 8);
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        v25 -= 40;
        v26 -= 40;
      }
      while ((char *)v25 != v23);
    }
    v41 = v24;
    v29 = a1[1];
    v30 = v42;
    if (v29 != (char *)v8)
    {
      do
      {
        v31 = *(_OWORD *)v8;
        v32 = *(_OWORD *)(v8 + 16);
        *((_QWORD *)v30 + 4) = *(_QWORD *)(v8 + 32);
        *(_OWORD *)v30 = v31;
        *((_OWORD *)v30 + 1) = v32;
        v8 += 40;
        v30 += 40;
      }
      while ((char *)v8 != v29);
      v24 = v41;
      v8 = (uint64_t)a1[1];
    }
    v33 = *a1;
    *a1 = v24;
    a1[1] = v30;
    v34 = a1[2];
    a1[2] = v43;
    v42 = (char *)v8;
    v43 = v34;
    v40 = v33;
    v41 = v33;
    if ((char *)v8 != v33)
      v42 = &v33[(v8 - (uint64_t)v33 - 40) % 0x28uLL];
    if (v33)
      operator delete(v33);
    return (uint64_t)v22;
  }
  else
  {
    if (v8 != v6)
    {
      v10 = v8 + 40;
      v11 = v6 - 40;
      if (v6 < 0x28)
      {
        a1[1] = (char *)v6;
        if (v6 == v10)
        {
LABEL_33:
          v38 = *(__n128 *)a3;
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
          *(__n128 *)v8 = v38;
          *(_OWORD *)&v5[40 * v7 + 24] = *(_OWORD *)(a3 + 24);
          return v8;
        }
      }
      else
      {
        v12 = v6 - 40;
        v13 = a1[1];
        do
        {
          v14 = *(_OWORD *)v12;
          v15 = *(_OWORD *)(v12 + 16);
          *((_QWORD *)v13 + 4) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)v13 = v14;
          *((_OWORD *)v13 + 1) = v15;
          v12 += 40;
          v13 += 40;
        }
        while (v12 < v6);
        a1[1] = v13;
        if (v6 == v10)
          goto LABEL_33;
      }
      v35 = 8 * ((uint64_t)(v6 - v10) >> 3);
      v36 = (uint64_t)&v5[40 * v7 - 16];
      do
      {
        v37 = *(_OWORD *)(v36 + v35 - 24);
        *(_DWORD *)(v11 + 16) = *(_DWORD *)(v36 + v35 - 8);
        *(_OWORD *)v11 = v37;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)(v36 + v35);
        v11 -= 40;
        v35 -= 40;
      }
      while (v35);
      goto LABEL_33;
    }
    v20 = *(__n128 *)a3;
    v21 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
    *(__n128 *)v8 = v20;
    *(_OWORD *)(v8 + 16) = v21;
    a1[1] = (char *)(v8 + 40);
  }
  return v8;
}

void sub_20EB0F9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v13;

  if (a12 == a11)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_20EB0FA40(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 v24;
  __int128 v25;
  __n128 result;
  __n128 v27;

  v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    v5 = *(__n128 **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 <= *(_QWORD *)a1)
    {
      v14 = 0x999999999999999ALL * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5)
        v14 = 1;
      if (v14 >= 0x666666666666667)
        sub_20E877A38();
      v15 = v14 >> 2;
      v16 = 40 * v14;
      v17 = (char *)operator new(40 * v14);
      v18 = (__n128 *)&v17[40 * v15];
      v20 = (uint64_t)v4 - v6;
      v19 = v4 == (__n128 *)v6;
      v4 = v18;
      if (!v19)
      {
        v21 = v20 / 40;
        v4 = (__n128 *)((char *)v18 + 40 * v21);
        v22 = 40 * v21;
        v23 = &v17[40 * v15];
        do
        {
          v24 = *(__n128 *)v6;
          v25 = *(_OWORD *)(v6 + 16);
          *((_QWORD *)v23 + 4) = *(_QWORD *)(v6 + 32);
          *(__n128 *)v23 = v24;
          *((_OWORD *)v23 + 1) = v25;
          v23 += 40;
          v6 += 40;
          v22 -= 40;
        }
        while (v22);
      }
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v17[v16];
      if (v5)
      {
        operator delete(v5);
        v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *(_QWORD *)a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -(v8 >> 1);
      if ((__n128 *)v6 == v4)
      {
        v13 = (__n128 *)(v6 - 40 * v9);
      }
      else
      {
        do
        {
          v11 = v6 + 40 * v10;
          v12 = *(__n128 *)v6;
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v6 + 16);
          *(__n128 *)v11 = v12;
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 24);
          v6 += 40;
        }
        while ((__n128 *)v6 != v4);
        v4 = *(__n128 **)(a1 + 8);
        v13 = (__n128 *)(v6 + 40 * v10);
      }
      *(_QWORD *)(a1 + 8) = (char *)v4 + 40 * v10;
      *(_QWORD *)(a1 + 16) = v13;
      v4 = v13;
    }
  }
  result = *a2;
  v27 = a2[1];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  *v4 = result;
  v4[1] = v27;
  *(_QWORD *)(a1 + 16) += 40;
  return result;
}

void sub_20EB0FBF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EB0FC00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB0FC30(uint64_t a1)
{
  return sub_20EAF9A2C(a1 + 24);
}

std::string *sub_20EB0FC3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50500);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50500))
    return &stru_254A504E8;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 1U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A504E8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A504E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50500);
  return &stru_254A504E8;
}

void sub_20EB0FCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50500);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50500);
  _Unwind_Resume(a1);
}

std::string *sub_20EB0FD34()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50520);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50520))
    return &stru_254A50508;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 8U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50508);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50508, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50520);
  return &stru_254A50508;
}

void sub_20EB0FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50520);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50520);
  _Unwind_Resume(a1);
}

void sub_20EB0FE2C(uint64_t a1, _QWORD **a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_20E86A980(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtof((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_20E86A980(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_20EB1002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB10098(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, double a8, double a9, double a10, float64x2_t a11, int64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  unsigned int v20;
  double v21;
  double v22;
  unsigned int v23;
  double v24;
  double v25;
  size_t v26;
  __n128 *v27;
  __n128 *v28;
  double v29;
  uint64_t v30;
  float64x2_t v31;
  __n128 *v32;
  int32x2_t v33;
  __n128 *v34;
  uint64_t v35;
  int32x2_t v36;
  uint64x2_t v37;
  float64x2_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  size_t v43;
  __n128 *v44;
  double v45;
  uint64_t v46;
  float64x2_t v47;
  int32x2_t v48;
  __n128 *v49;
  uint64_t v50;
  int32x2_t v51;
  uint64x2_t v52;
  float64x2_t v53;
  __int8 *v54;
  char *v55;
  void **v56;
  void *v57;
  void *v58;
  void *v59;
  char *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  float64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  float64_t v74;
  char *v75;
  unsigned int v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  unsigned int v88;
  double v89;
  double v90;
  unsigned int v91;
  double v92;
  double v93;
  double v94;
  unsigned int v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t **v98;
  double *v99;
  uint64_t v100;
  float64x2_t v101;
  int8x16_t v102;
  float64x2_t v103;
  int8x16_t v104;
  float64x2_t v105;
  int8x16_t v106;
  float64x2_t v107;
  int8x16_t v108;
  float64x2_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float64x2_t v114;
  int8x16_t v115;
  float64x2_t v116;
  int8x16_t v117;
  int8x16_t v118;
  float64x2_t v119;
  int8x16_t v120;
  float64x2_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  void **v144;
  unsigned int v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  int64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  int8x16_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  __int8 *v163;
  int8x16_t v164;
  float64x2_t v165;
  float64x2_t v166;
  char *v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  char *v171;
  int64x2_t v172;
  char *v173;
  char *v174;
  int8x16_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  uint64_t v180;
  int8x16_t v181;
  int8x16_t v182;
  float64x2_t v183;
  char *v184;
  uint64_t v185;

  *(_QWORD *)a1 = &off_24C9C4BD0;
  a11.f64[0] = (double)a5;
  *(double *)(a1 + 8) = (double)a4;
  *(double *)(a1 + 16) = (double)a5;
  *(double *)(a1 + 24) = a8;
  *(double *)(a1 + 32) = a9;
  *(_OWORD *)(a1 + 40) = 0u;
  v144 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v20 = *(_DWORD *)(a2 + 992);
  if (v20 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_142;
    }
    v20 = *(_DWORD *)(a2 + 992);
    if (v20 <= 7)
    {
LABEL_3:
      if (!v20)
        goto LABEL_141;
LABEL_8:
      v21 = *(double *)a2;
      if (v20 <= 7)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if (v20 <= 7)
  {
    goto LABEL_3;
  }
  if (v20 < 0xF)
    goto LABEL_8;
  v21 = *(double *)a2;
  if (v20 != -1)
  {
LABEL_16:
    v22 = (v21 + *(double *)(a2 + 32)) * 0.5 * ((v21 + *(double *)(a2 + 32)) * 0.5);
    goto LABEL_17;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_142;
  }
  v20 = *(_DWORD *)(a2 + 992);
  if (v20 <= 7)
  {
LABEL_9:
    if (v20 <= 1)
    {
      if (!v20)
        goto LABEL_141;
      v20 = 1;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (v20 <= 0xD)
    goto LABEL_16;
  v22 = (v21 + *(double *)(a2 + 32)) * 0.5 * ((v21 + *(double *)(a2 + 32)) * 0.5);
  if (v20 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_142;
    }
    v20 = *(_DWORD *)(a2 + 992);
    if (!v20)
      goto LABEL_141;
  }
LABEL_17:
  v145 = a7;
  if (v20 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_142;
    }
    if (!*(_DWORD *)(a2 + 992))
      goto LABEL_141;
    *(double *)(a1 + 136) = v22 * *(double *)(a2 + 152);
    v23 = *(_DWORD *)(a3 + 992);
    if (v23 != -1)
    {
LABEL_19:
      if (v23 <= 7)
        goto LABEL_20;
      goto LABEL_31;
    }
  }
  else
  {
    *(double *)(a1 + 136) = v22 * *(double *)(a2 + 152);
    v23 = *(_DWORD *)(a3 + 992);
    if (v23 != -1)
      goto LABEL_19;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_142;
  }
  v23 = *(_DWORD *)(a3 + 992);
  if (v23 <= 7)
  {
LABEL_20:
    if (!v23)
      goto LABEL_141;
LABEL_32:
    v24 = *(double *)a3;
    if (v23 <= 7)
      goto LABEL_33;
    goto LABEL_39;
  }
LABEL_31:
  if (v23 < 0xF)
    goto LABEL_32;
  v24 = *(double *)a3;
  if (v23 != -1)
  {
LABEL_40:
    v25 = (v24 + *(double *)(a3 + 32)) * 0.5 * ((v24 + *(double *)(a3 + 32)) * 0.5);
    goto LABEL_41;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_142;
  }
  v23 = *(_DWORD *)(a3 + 992);
  if (v23 <= 7)
  {
LABEL_33:
    if (v23 <= 1)
    {
      if (!v23)
        goto LABEL_141;
      v23 = 1;
    }
    goto LABEL_40;
  }
LABEL_39:
  if (v23 <= 0xD)
    goto LABEL_40;
  v25 = (v24 + *(double *)(a3 + 32)) * 0.5 * ((v24 + *(double *)(a3 + 32)) * 0.5);
  if (v23 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_142;
    }
    v23 = *(_DWORD *)(a3 + 992);
    if (!v23)
      goto LABEL_141;
  }
LABEL_41:
  if (v23 != -1)
  {
    *(double *)(a1 + 144) = v25 * *(double *)(a3 + 152);
    if (a6)
      goto LABEL_43;
    goto LABEL_138;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_142;
  }
  if (!*(_DWORD *)(a3 + 992))
  {
LABEL_141:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_142:
    abort();
  }
  *(double *)(a1 + 144) = v25 * *(double *)(a3 + 152);
  if (a6)
  {
LABEL_43:
    v26 = 8 * a6;
    v27 = (__n128 *)operator new(v26);
    bzero(v27, v26);
    v28 = (__n128 *)operator new(v26);
    v173 = (char *)v27 + v26;
    v171 = (char *)v27 + v26;
    bzero(v28, v26);
    v29 = (double)(a6 - 1);
    if (a6 >= 4)
    {
      v30 = a6 & 0xFFFFFFFC;
      v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29, 0);
      v32 = v27 + 1;
      v33 = (int32x2_t)0x100000000;
      v34 = v28 + 1;
      *(_QWORD *)&a11.f64[0] = 0x200000002;
      a12.i64[0] = 0x400000004;
      v35 = v30;
      do
      {
        v36 = vadd_s32(v33, (int32x2_t)0x200000002);
        v37.i64[0] = v33.u32[0];
        v37.i64[1] = v33.u32[1];
        v38 = vcvtq_f64_u64(v37);
        v37.i64[0] = v36.u32[0];
        v37.i64[1] = v36.u32[1];
        a14 = vdivq_f64(v38, v31);
        a13 = vdivq_f64(vcvtq_f64_u64(v37), v31);
        v32[-1] = (__n128)a14;
        *v32 = (__n128)a13;
        v34[-1] = (__n128)a14;
        *v34 = (__n128)a13;
        v33 = vadd_s32(v33, (int32x2_t)0x400000004);
        v32 += 2;
        v34 += 2;
        v35 -= 4;
      }
      while (v35);
      if (v30 == a6)
      {
LABEL_49:
        v167 = (char *)v28 + v26;
        v163 = &v28->n128_i8[8 * a6];
        if (a7)
          goto LABEL_50;
        goto LABEL_139;
      }
    }
    else
    {
      v30 = 0;
    }
    do
    {
      v39 = (double)v30 / v29;
      v40 = v30;
      v27->n128_f64[v40] = v39;
      v28->n128_f64[v40] = v39;
      ++v30;
    }
    while (a6 != v30);
    goto LABEL_49;
  }
LABEL_138:
  v27 = 0;
  v171 = 0;
  v173 = 0;
  v28 = 0;
  v167 = 0;
  v163 = 0;
  if (a7)
  {
LABEL_50:
    v41 = a7;
    v42 = a7;
    v43 = 8 * a7;
    v44 = (__n128 *)operator new(v43);
    bzero(v44, v43);
    v45 = (double)(v42 - 1);
    if (v42 >= 4)
    {
      v46 = v41 & 0xFFFFFFFC;
      v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45, 0);
      v48 = (int32x2_t)0x100000000;
      v49 = v44 + 1;
      *(_QWORD *)&a11.f64[0] = 0x200000002;
      a12.i64[0] = 0x400000004;
      v50 = v46;
      do
      {
        v51 = vadd_s32(v48, (int32x2_t)0x200000002);
        v52.i64[0] = v48.u32[0];
        v52.i64[1] = v48.u32[1];
        v53 = vcvtq_f64_u64(v52);
        v52.i64[0] = v51.u32[0];
        v52.i64[1] = v51.u32[1];
        a14 = vdivq_f64(v53, v47);
        a13 = vdivq_f64(vcvtq_f64_u64(v52), v47);
        v49[-1] = (__n128)a14;
        *v49 = (__n128)a13;
        v48 = vadd_s32(v48, (int32x2_t)0x400000004);
        v49 += 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == v41)
      {
LABEL_56:
        v54 = &v44->n128_i8[8 * v41];
        v55 = (char *)v44 + v43;
        v179 = 0uLL;
        v180 = 0;
        v56 = v144;
        v57 = *v144;
        if (!*v144)
          goto LABEL_58;
        goto LABEL_57;
      }
    }
    else
    {
      v46 = 0;
    }
    do
    {
      v44->n128_f64[v46] = (double)v46 / v45;
      ++v46;
    }
    while (v41 != v46);
    goto LABEL_56;
  }
LABEL_139:
  v44 = 0;
  v55 = 0;
  v54 = 0;
  v179 = 0uLL;
  v180 = 0;
  v56 = v144;
  v57 = *v144;
  if (*v144)
  {
LABEL_57:
    *(_QWORD *)(a1 + 48) = v57;
    operator delete(v57);
    *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
  }
LABEL_58:
  v58 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 40) = v27;
  *(_QWORD *)(a1 + 48) = v171;
  *(_QWORD *)(a1 + 56) = v173;
  if (v58)
  {
    *(_QWORD *)(a1 + 72) = v58;
    operator delete(v58);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  v59 = *(void **)(a1 + 88);
  v60 = v167;
  *(_QWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = v167;
  *(_QWORD *)(a1 + 80) = v163;
  if (v59)
  {
    *(_QWORD *)(a1 + 96) = v59;
    operator delete(v59);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v28 = *(__n128 **)(a1 + 64);
    v60 = *(char **)(a1 + 72);
  }
  *(_QWORD *)(a1 + 88) = v44;
  *(_QWORD *)(a1 + 96) = v55;
  *(_QWORD *)(a1 + 104) = v54;
  v61 = ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3)
      * ((unint64_t)(v55 - (char *)v44) >> 3)
      * ((unint64_t)(v60 - (char *)v28) >> 3);
  v62 = *(_QWORD **)(a1 + 112);
  v63 = *(_QWORD **)(a1 + 120);
  v64 = 0xAAAAAAAAAAAAAAABLL * (v63 - v62);
  v65 = v61 - v64;
  if (v61 <= v64)
  {
    v76 = v145;
    if (v61 >= v64)
      goto LABEL_96;
    v82 = &v62[3 * v61];
    if (v63 != v82)
    {
      v83 = *(_QWORD **)(a1 + 120);
      do
      {
        v85 = (void *)*(v83 - 3);
        v83 -= 3;
        v84 = v85;
        if (v85)
        {
          *(v63 - 2) = v84;
          operator delete(v84);
        }
        v63 = v83;
      }
      while (v83 != v82);
    }
LABEL_88:
    *(_QWORD *)(a1 + 120) = v82;
    goto LABEL_96;
  }
  v66 = *(_QWORD *)(a1 + 128);
  if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v63) >> 3) >= v65)
  {
    v82 = &v63[3 * v65];
    v86 = 24 * v61 - 24 * v64;
    v76 = v145;
    do
    {
      *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
      v87 = (char *)operator new(0x80uLL);
      v63[1] = v87 + 128;
      v63[2] = v87 + 128;
      *v63 = v87;
      v63 += 3;
      v86 -= 24;
    }
    while (v86);
    goto LABEL_88;
  }
  v67 = 0x5555555555555556 * ((v66 - (uint64_t)v62) >> 3);
  if (v67 <= v61)
    v67 = v61;
  if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 3) >= 0x555555555555555)
    v68 = 0xAAAAAAAAAAAAAAALL;
  else
    v68 = v67;
  v185 = a1 + 128;
  if (v68 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v69 = (char *)operator new(24 * v68);
  *(_QWORD *)&v70 = &v69[8 * (v63 - v62)];
  *(_QWORD *)&v183.f64[0] = v69;
  v183.f64[1] = v70;
  v174 = &v69[24 * v68];
  v184 = v174;
  v71 = 24 * v61;
  v72 = &v69[24 * v61];
  v73 = v71 - 8 * (v63 - v62);
  v74 = v70;
  do
  {
    **(_QWORD **)&v74 = 0;
    *(_QWORD *)(*(_QWORD *)&v74 + 8) = 0;
    *(_QWORD *)(*(_QWORD *)&v74 + 16) = 0;
    v75 = (char *)operator new(0x80uLL);
    *(_QWORD *)(*(_QWORD *)&v74 + 8) = v75 + 128;
    *(_QWORD *)(*(_QWORD *)&v74 + 16) = v75 + 128;
    **(_QWORD **)&v74 = v75;
    *(_QWORD *)&v74 += 24;
    v73 -= 24;
  }
  while (v73);
  if (v63 == v62)
  {
    *(float64_t *)(a1 + 112) = v70;
    *(_QWORD *)(a1 + 120) = v72;
    *(_QWORD *)(a1 + 128) = v174;
    v76 = v145;
  }
  else
  {
    v76 = v145;
    do
    {
      v77 = *(_OWORD *)(v63 - 3);
      v63 -= 3;
      *(_OWORD *)(*(_QWORD *)&v70 - 24) = v77;
      *(_QWORD *)&v70 -= 24;
      *(_QWORD *)(*(_QWORD *)&v70 + 16) = v63[2];
      *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
    }
    while (v63 != v62);
    v63 = *(_QWORD **)(a1 + 112);
    v78 = *(_QWORD **)(a1 + 120);
    *(float64_t *)(a1 + 112) = v70;
    *(_QWORD *)(a1 + 120) = v72;
    *(_QWORD *)(a1 + 128) = v174;
    if (v78 != v63)
    {
      v79 = v78;
      do
      {
        v81 = (void *)*(v79 - 3);
        v79 -= 3;
        v80 = v81;
        if (v81)
        {
          *(v78 - 2) = v80;
          operator delete(v80);
        }
        v78 = v79;
      }
      while (v79 != v63);
    }
  }
  if (v63)
    operator delete(v63);
LABEL_96:
  if (v76 && a6)
  {
    v88 = 0;
    v89 = (double)(v76 - 1);
    v90 = (double)(a6 - 1);
    v154 = (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL);
    do
    {
      v91 = 0;
      v92 = (double)v88 / v89;
      v93 = v92 + 0.0001;
      v94 = v92 + -0.0001;
      do
      {
        v95 = 0;
        *(double *)&v96 = (double)v91 / v90;
        v97 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v96 + -0.0001), 0);
        v150 = v97.f64[1];
        v155 = vdupq_lane_s64(COERCE__INT64(*(double *)&v96 + 0.0001), 0);
        v172 = vdupq_lane_s64(v96, 0);
        do
        {
          v98 = (float64x2_t **)(*(_QWORD *)(a1 + 112)
                               + 24
                               * (v95
                                + (v91 + v88 * ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3))
                                * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3)));
          v99 = (double *)*v98;
          v100 = (char *)v98[1] - (char *)*v98;
          if (v100 >= 1)
          {
            memset_pattern16(*v98, &unk_210315390, 16 * (((unint64_t)v100 >> 4) - ((unint64_t)v100 > 0xF)) + 16);
            v99 = (double *)*v98;
          }
          v97.f64[0] = (double)v95 / v90;
          *(_QWORD *)&v101.f64[1] = v172.i64[1];
          v175 = (int8x16_t)v97;
          v101.f64[0] = v97.f64[0];
          v168 = v101;
          v102 = (int8x16_t)vmulq_f64(v101, *(float64x2_t *)(a1 + 8));
          v183 = (float64x2_t)v102;
          *(double *)v102.i64 = a10;
          if (sub_20EB12568(v183.f64, a2, a3, v99, v102, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14))
          {
            *(_QWORD *)&v103.f64[1] = v172.i64[1];
            v97.f64[0] = *(double *)v175.i64 + 0.0001;
            v103.f64[0] = *(double *)v175.i64 + 0.0001;
            v160 = v103;
            v164 = (int8x16_t)v97;
            v104 = (int8x16_t)vmulq_f64(v103, *(float64x2_t *)(a1 + 8));
            v182 = v104;
            *(double *)v104.i64 = a10;
            if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v104, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
            {
              *(_QWORD *)&v105.f64[1] = v172.i64[1];
              v97.f64[0] = *(double *)v175.i64 + -0.0001;
              v105.f64[0] = *(double *)v175.i64 + -0.0001;
              v156 = v105;
              v158 = (int8x16_t)v97;
              v106 = (int8x16_t)vmulq_f64(v105, *(float64x2_t *)(a1 + 8));
              v181 = v106;
              *(double *)v106.i64 = a10;
              if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v106, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
              {
                (*v98)[1] = vdivq_f64(vsubq_f64(v183, v179), v154);
                *(_QWORD *)&v107.f64[1] = v155.i64[1];
                *(_QWORD *)&v107.f64[0] = v175.i64[0];
                v151 = v107;
                v108 = (int8x16_t)vmulq_f64(v107, *(float64x2_t *)(a1 + 8));
                v182 = v108;
                *(double *)v108.i64 = a10;
                if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v108, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v175, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                {
                  v109.f64[1] = v150;
                  v110 = v175;
                  *(_QWORD *)&v109.f64[0] = v175.i64[0];
                  v176 = v109;
                  v111 = (int8x16_t)vmulq_f64(v109, *(float64x2_t *)(a1 + 8));
                  v181 = v111;
                  *(double *)v111.i64 = a10;
                  if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v111, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v110, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                  {
                    (*v98)[2] = vdivq_f64(vsubq_f64(v183, v179), v154);
                    v112 = (int8x16_t)vmulq_f64(v168, *(float64x2_t *)(a1 + 8));
                    v182 = v112;
                    *(double *)v112.i64 = a10;
                    if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v112, *(double *)(a1 + 24) + v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                    {
                      v113 = (int8x16_t)vmulq_f64(v168, *(float64x2_t *)(a1 + 8));
                      v181 = v113;
                      *(double *)v113.i64 = a10;
                      if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v113, *(double *)(a1 + 24) + v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                      {
                        (*v98)[4] = vdivq_f64(vsubq_f64(v183, v179), v154);
                        *(_QWORD *)&v114.f64[1] = v155.i64[1];
                        *(_QWORD *)&v114.f64[0] = v164.i64[0];
                        v169 = v114;
                        v115 = (int8x16_t)vmulq_f64(v114, *(float64x2_t *)(a1 + 8));
                        v182 = v115;
                        *(double *)v115.i64 = a10;
                        if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v115, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v164, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                        {
                          v116.f64[1] = v150;
                          v117 = v164;
                          *(_QWORD *)&v116.f64[0] = v164.i64[0];
                          v165 = v116;
                          v118 = (int8x16_t)vmulq_f64(v116, *(float64x2_t *)(a1 + 8));
                          v181 = v118;
                          *(double *)v118.i64 = a10;
                          if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v118, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v117, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                          {
                            v147 = v179;
                            v148 = v183;
                            *(_QWORD *)&v119.f64[1] = v155.i64[1];
                            *(_QWORD *)&v119.f64[0] = v158.i64[0];
                            v146 = v119;
                            v120 = (int8x16_t)vmulq_f64(v119, *(float64x2_t *)(a1 + 8));
                            v182 = v120;
                            *(double *)v120.i64 = a10;
                            if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v120, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v158, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                            {
                              v121.f64[1] = v150;
                              v122 = v158;
                              *(_QWORD *)&v121.f64[0] = v158.i64[0];
                              v159 = v121;
                              v123 = (int8x16_t)vmulq_f64(v121, *(float64x2_t *)(a1 + 8));
                              v181 = v123;
                              *(double *)v123.i64 = a10;
                              if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v123, *(double *)(a1 + 24) + v92 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v122, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                              {
                                v124 = (int8x16_t)v179;
                                (*v98)[3] = vdivq_f64(vsubq_f64(vdivq_f64(vsubq_f64(v148, v147), v154), vdivq_f64(vsubq_f64(v183, v179), v154)), v154);
                                v125 = (int8x16_t)vmulq_f64(v151, *(float64x2_t *)(a1 + 8));
                                v182 = v125;
                                *(double *)v125.i64 = a10;
                                if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v125, *(double *)(a1 + 24) + v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v124, (int8x16_t)v154, a12, a13, a14) & 1) != 0)
                                {
                                  v126 = (int8x16_t)vmulq_f64(v151, *(float64x2_t *)(a1 + 8));
                                  v181 = v126;
                                  *(double *)v126.i64 = a10;
                                  if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v126, *(double *)(a1 + 24) + v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                  {
                                    v152 = v183;
                                    v149 = v179;
                                    v127 = (int8x16_t)vmulq_f64(v176, *(float64x2_t *)(a1 + 8));
                                    v182 = v127;
                                    *(double *)v127.i64 = a10;
                                    if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v127, *(double *)(a1 + 24) + v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                    {
                                      v128 = (int8x16_t)vmulq_f64(v176, *(float64x2_t *)(a1 + 8));
                                      v181 = v128;
                                      *(double *)v128.i64 = a10;
                                      if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v128, *(double *)(a1 + 24) + v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                      {
                                        v129 = (int8x16_t)v179;
                                        (*v98)[6] = vdivq_f64(vsubq_f64(vdivq_f64(vsubq_f64(v152, v149), v154), vdivq_f64(vsubq_f64(v183, v179), v154)), v154);
                                        v130 = (int8x16_t)vmulq_f64(v160, *(float64x2_t *)(a1 + 8));
                                        v182 = v130;
                                        *(double *)v130.i64 = a10;
                                        if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v130, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v129, (int8x16_t)v154, a12, a13, a14) & 1) != 0)
                                        {
                                          v131 = (int8x16_t)vmulq_f64(v160, *(float64x2_t *)(a1 + 8));
                                          v181 = v131;
                                          *(double *)v131.i64 = a10;
                                          if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v131, *(double *)(a1 + 24)+ v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                          {
                                            v177 = v183;
                                            v161 = v179;
                                            v132 = (int8x16_t)vmulq_f64(v156, *(float64x2_t *)(a1 + 8));
                                            v182 = v132;
                                            *(double *)v132.i64 = a10;
                                            if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v132, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                            {
                                              v133 = (int8x16_t)vmulq_f64(v156, *(float64x2_t *)(a1 + 8));
                                              v181 = v133;
                                              *(double *)v133.i64 = a10;
                                              if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v133, *(double *)(a1 + 24)+ v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                              {
                                                v134 = (int8x16_t)v179;
                                                (*v98)[5] = vdivq_f64(vsubq_f64(vdivq_f64(vsubq_f64(v177, v161), v154), vdivq_f64(vsubq_f64(v183, v179), v154)), v154);
                                                v135 = (int8x16_t)vmulq_f64(v169, *(float64x2_t *)(a1 + 8));
                                                v182 = v135;
                                                *(double *)v135.i64 = a10;
                                                if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v135, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), v134, (int8x16_t)v154, a12, a13, a14) & 1) != 0)
                                                {
                                                  v136 = (int8x16_t)vmulq_f64(v169, *(float64x2_t *)(a1 + 8));
                                                  v181 = v136;
                                                  *(double *)v136.i64 = a10;
                                                  if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v136, *(double *)(a1 + 24)+ v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                  {
                                                    v178 = v183;
                                                    v170 = v179;
                                                    v137 = (int8x16_t)vmulq_f64(v146, *(float64x2_t *)(a1 + 8));
                                                    v182 = v137;
                                                    *(double *)v137.i64 = a10;
                                                    if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v137, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                    {
                                                      v138 = (int8x16_t)vmulq_f64(v146, *(float64x2_t *)(a1 + 8));
                                                      v181 = v138;
                                                      *(double *)v138.i64 = a10;
                                                      if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v138, *(double *)(a1 + 24)+ v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                      {
                                                        v162 = v183;
                                                        v157 = v179;
                                                        v139 = (int8x16_t)vmulq_f64(v165, *(float64x2_t *)(a1 + 8));
                                                        v182 = v139;
                                                        *(double *)v139.i64 = a10;
                                                        if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v139, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                        {
                                                          v140 = (int8x16_t)vmulq_f64(v165, *(float64x2_t *)(a1 + 8));
                                                          v181 = v140;
                                                          *(double *)v140.i64 = a10;
                                                          if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v140, *(double *)(a1 + 24)+ v94 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                          {
                                                            v166 = v183;
                                                            v153 = v179;
                                                            v141 = (int8x16_t)vmulq_f64(v159, *(float64x2_t *)(a1 + 8));
                                                            v182 = v141;
                                                            *(double *)v141.i64 = a10;
                                                            if ((sub_20EB12568((double *)v182.i64, a2, a3, v183.f64, v141, *(double *)(a1 + 24)+ v93 * (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                            {
                                                              v142 = (int8x16_t)vmulq_f64(v159, *(float64x2_t *)(a1 + 8));
                                                              v181 = v142;
                                                              *(double *)v142.i64 = a10;
                                                              if ((sub_20EB12568((double *)v181.i64, a2, a3, v179.f64, v142, *(double *)(a1 + 24)+ v94* (*(double *)(a1 + 32) - *(double *)(a1 + 24)), (int8x16_t)v97, (int8x16_t)a11, a12, a13, a14) & 1) != 0)
                                                              {
                                                                a12 = (int64x2_t)v179;
                                                                a13 = v154;
                                                                v97 = vdivq_f64(vsubq_f64(v166, v153), v154);
                                                                a11 = vdivq_f64(vsubq_f64(v183, v179), v154);
                                                                (*v98)[7] = vdivq_f64(vsubq_f64(vsubq_f64(vaddq_f64(vdivq_f64(vsubq_f64(v178, v170), v154), a11), v97), vdivq_f64(vsubq_f64(v162, v157), v154)), (float64x2_t)vdupq_n_s64(0x3E65798EE2308C3AuLL));
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v95;
        }
        while (a6 != v95);
        ++v91;
      }
      while (v91 != a6);
      ++v88;
    }
    while (v88 != v145);
  }
  return a1;
}

void sub_20EB11400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  sub_20E9DD680(&a39);
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

void sub_20EB1141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;
  void *v10;

  if (v9)
  {
    operator delete(v9);
    if (!v10)
    {
LABEL_3:
      sub_20EB114D4(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  operator delete(v10);
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

void sub_20EB11464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v40 - 176) = v39;
  sub_20EB143E8(v40 - 192);
  sub_20E9DD680(&a39);
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

void sub_20EB1148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v39 + 120) = v40;
  sub_20E9DD680(&a39);
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

void sub_20EB114AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

void sub_20EB114C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EB114D4(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB114D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 80);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20EB11578(uint64_t a1, float64x2_t *a2, float64_t *a3, float64x2_t *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  unint64_t v21;
  double *v22;
  unint64_t v23;
  double *v24;
  double *v25;
  double v26;
  unint64_t v27;
  int v28;
  double v29;
  int v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double *v42;
  double v43;
  unint64_t v44;
  double *v45;
  unint64_t v46;
  double *v47;
  double *v48;
  double v49;
  unint64_t v50;
  int v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double *v62;
  double *v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  double *v67;
  double *v68;
  double v69;
  unint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  uint64_t v84;
  double v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  float64x2_t v97;
  double v98;
  double v101[13];

  v101[12] = *(double *)MEMORY[0x24BDAC8D0];
  v4.f64[0] = a3[2];
  v4.f64[1] = a3[5];
  v5 = *a2;
  _D4 = vsubq_f64(*a2, v4).f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  if (_D3 > *(double *)(a1 + 136))
    return 0;
  v13 = v5.f64[0] / *(double *)(a1 + 8);
  v14 = v5.f64[1] / *(double *)(a1 + 16);
  v15 = *(double *)(a1 + 24);
  v16 = a3[4] - v15;
  v17 = *(double *)(a1 + 32) - v15;
  v19 = *(double **)(a1 + 40);
  v18 = *(double **)(a1 + 48);
  if (*(v18 - 1) <= v13)
  {
    v27 = (char *)v18 - (char *)v19;
    v28 = -2;
  }
  else
  {
    if (v18 == v19)
    {
      v22 = *(double **)(a1 + 48);
    }
    else
    {
      v20 = *v19;
      v21 = v18 - v19;
      if (*v19 <= v13)
        v20 = v13;
      v22 = *(double **)(a1 + 40);
      do
      {
        v23 = v21 >> 1;
        v24 = &v22[v21 >> 1];
        v26 = *v24;
        v25 = v24 + 1;
        v21 += ~(v21 >> 1);
        if (v20 < v26)
          v21 = v23;
        else
          v22 = v25;
      }
      while (v21);
    }
    v27 = (char *)v22 - (char *)v19;
    v28 = -1;
  }
  v29 = v16 / v17;
  v30 = v28 + (v27 >> 3);
  v31 = v19[v30];
  v32 = v30 + 1;
  v33 = v19[v30 + 1] - v31;
  v34 = (v13 - v31) * (1.0 / v33);
  v35 = v34 * (v34 * v34);
  v36 = v34 * v34 * 3.0;
  v37 = v35 + v35 - v36 + 1.0;
  v38 = v36 - (v35 + v35);
  v101[0] = v37;
  v101[1] = v38;
  v39 = v34 + v35 - (v34 * v34 + v34 * v34);
  v40 = v35 - v34 * v34;
  v101[2] = v39;
  v101[3] = v40;
  v42 = *(double **)(a1 + 64);
  v41 = *(double **)(a1 + 72);
  if (*(v41 - 1) <= v14)
  {
    v50 = (char *)v41 - (char *)v42;
    v51 = -2;
  }
  else
  {
    if (v41 == v42)
    {
      v45 = *(double **)(a1 + 72);
    }
    else
    {
      v43 = *v42;
      v44 = v41 - v42;
      if (*v42 <= v14)
        v43 = v14;
      v45 = *(double **)(a1 + 64);
      do
      {
        v46 = v44 >> 1;
        v47 = &v45[v44 >> 1];
        v49 = *v47;
        v48 = v47 + 1;
        v44 += ~(v44 >> 1);
        if (v43 < v49)
          v44 = v46;
        else
          v45 = v48;
      }
      while (v44);
    }
    v50 = (char *)v45 - (char *)v42;
    v51 = -1;
  }
  v52 = v51 + (v50 >> 3);
  v53 = v42[v52];
  v54 = v42[v52 + 1] - v53;
  v55 = (v14 - v53) * (1.0 / v54);
  v56 = v55 * (v55 * v55);
  v57 = v55 * v55 * 3.0;
  v58 = v56 + v56 - v57 + 1.0;
  v59 = v57 - (v56 + v56);
  v101[4] = v58;
  v101[5] = v59;
  v60 = v55 + v56 - (v55 * v55 + v55 * v55);
  v61 = v56 - v55 * v55;
  v101[6] = v60;
  v101[7] = v61;
  v62 = *(double **)(a1 + 88);
  v63 = *(double **)(a1 + 96);
  if (*(v63 - 1) <= v29)
  {
    v70 = (char *)v63 - (char *)v62;
    v71 = -2;
  }
  else
  {
    if (v63 != v62)
    {
      v64 = *v62;
      v65 = v63 - v62;
      if (*v62 <= v29)
        v64 = v29;
      v63 = *(double **)(a1 + 88);
      do
      {
        v66 = v65 >> 1;
        v67 = &v63[v65 >> 1];
        v69 = *v67;
        v68 = v67 + 1;
        v65 += ~(v65 >> 1);
        if (v64 < v69)
          v65 = v66;
        else
          v63 = v68;
      }
      while (v65);
    }
    v70 = (char *)v63 - (char *)v62;
    v71 = -1;
  }
  v72 = 0;
  v73 = 0;
  v74 = v71 + (v70 >> 3);
  v75 = v62[v74];
  v76 = v62[v74 + 1] - v75;
  v77 = (v29 - v75) * (1.0 / v76);
  v78 = v77 * (v77 * v77);
  v79 = v77 * v77 * 3.0;
  v101[8] = v78 + v78 - v79 + 1.0;
  v101[9] = v79 - (v78 + v78);
  v101[10] = v77 + v78 - (v77 * v77 + v77 * v77);
  v101[11] = v78 - v77 * v77;
  v80 = (unint64_t)((char *)v18 - (char *)v19) >> 3;
  v81 = (unint64_t)((char *)v41 - (char *)v42) >> 3;
  v82 = *(_QWORD *)(a1 + 112);
  v83 = 0uLL;
  do
  {
    v84 = v72 & 0xFFFFFFFC;
    if (v73 <= 1)
      v85 = 1.0;
    else
      v85 = v76;
    v86 = v52 + ((v73 & 1) + v74) * v81;
    v87 = *(_QWORD *)(v82 + 24 * (v86 * v80 + v30));
    v88 = *(_QWORD *)(v82 + 24 * (v86 * v80 + v32));
    v89 = v84 | 1;
    v90 = v80 + v80 * v86;
    v91 = *(_QWORD *)(v82 + 24 * (v90 + v30));
    v92 = *(_QWORD *)(v82 + 24 * (v90 + v32));
    v93 = v72 | 2u;
    v94 = v72 | 3u;
    v95 = v101[v73 + 8];
    v96 = v54 * v85;
    v97 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v83, *(float64x2_t *)(v87 + 16 * v84), v85 * (v37 * (v58 * v95))), *(float64x2_t *)(v88 + 16 * v84), v85 * (v38 * (v58 * v95))), *(float64x2_t *)(v87 + 16 * v89), v33 * v85 * (v39 * (v58 * v95))), *(float64x2_t *)(v88 + 16 * v89), v33 * v85 * (v40 * (v58 * v95))), *(float64x2_t *)(v91 + 16 * v84),
                      v85 * (v37 * (v59 * v95))),
                    *(float64x2_t *)(v92 + 16 * v84),
                    v85 * (v38 * (v59 * v95))),
                  *(float64x2_t *)(v91 + 16 * v89),
                  v33 * v85 * (v39 * (v59 * v95))),
                *(float64x2_t *)(v92 + 16 * v89),
                v33 * v85 * (v40 * (v59 * v95))),
              *(float64x2_t *)(v87 + 16 * v93),
              v54 * v85 * (v37 * (v60 * v95))),
            *(float64x2_t *)(v88 + 16 * v93),
            v54 * v85 * (v38 * (v60 * v95)));
    v98 = v33 * v54 * v85;
    v83 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v97, *(float64x2_t *)(v87 + 16 * v94), v98 * (v39 * (v60 * v95))), *(float64x2_t *)(v88 + 16 * v94), v98 * (v40 * (v60 * v95))), *(float64x2_t *)(v91 + 16 * v93), v96 * (v37 * (v61 * v95))), *(float64x2_t *)(v92 + 16 * v93), v96 * (v38 * (v61 * v95))), *(float64x2_t *)(v91 + 16 * v94), v98 * (v39 * (v61 * v95))), *(float64x2_t *)(v92 + 16 * v94), v98 * (v40 * (v61 * v95)));
    ++v73;
    v72 += 2;
  }
  while (v73 != 4);
  _D2 = vsubq_f64(v83, v4).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  if (_D1 > *(double *)(a1 + 144))
    return 0;
  *a4 = v83;
  return 1;
}

void sub_20EB11C4C(uint64_t a1)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  double v23;
  double v24;
  std::string v25;
  std::string **v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  _DWORD v32[6];
  int v33;
  std::string *v34;
  std::string *v35;
  _DWORD *v36;
  std::string *v37;
  std::string *v38;

  v23 = sqrt(*(double *)(a1 + 136));
  v24 = v23;
  v3 = *(double **)(a1 + 40);
  v2 = *(double **)(a1 + 48);
  v5 = *(double **)(a1 + 64);
  v4 = *(double **)(a1 + 72);
  v6 = 0;
  for (i = (char *)v2 - (char *)v3; v3 != v2; ++v3)
  {
    v8 = 2654435769;
    if ((*(_QWORD *)v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v8 = llround(*v3 / 0.001) - 1640531527;
    v6 ^= (v6 >> 2) + (v6 << 6) + v8;
  }
  v10 = *(double **)(a1 + 88);
  v9 = *(double **)(a1 + 96);
  if (v5 != v4)
  {
    v11 = *(double **)(a1 + 64);
    do
    {
      v12 = 2654435769;
      if ((*(_QWORD *)v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v12 = llround(*v11 / 0.001) - 1640531527;
      v6 ^= (v6 >> 2) + (v6 << 6) + v12;
      ++v11;
    }
    while (v11 != v4);
  }
  if (v10 != v9)
  {
    v13 = *(double **)(a1 + 88);
    do
    {
      v14 = 2654435769;
      if ((*(_QWORD *)v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v14 = llround(*v13 / 0.001) - 1640531527;
      v6 ^= (v6 >> 2) + (v6 << 6) + v14;
      ++v13;
    }
    while (v13 != v9);
  }
  v15 = *(_QWORD *)(a1 + 112);
  for (j = *(_QWORD *)(a1 + 120); v15 != j; v15 += 24)
  {
    v18 = 2654435769;
    if ((**(_QWORD **)v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v18 = llround(**(double **)v15 / 0.001) - 1640531527;
    v19 = *(double *)(*(_QWORD *)v15 + 8);
    v20 = 2654435769;
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v20 = llround(v19 / 0.001) - 1640531527;
    v17 = ((v6 >> 2) + (v6 << 6) + v18) ^ v6;
    v6 = ((v17 >> 2) + (v17 << 6) + v20) ^ v17;
  }
  v33 = 0;
  sub_20E9EBBAC(v32, "TricubicHermiteSpline: [U: ");
  std::to_string(&v25, i >> 3);
  v34 = (std::string *)v32;
  v35 = &v25;
  v36 = v32;
  v37 = &v25;
  v38 = &v25;
  if (v33 == -1)
    sub_20E877AB8();
  v26 = &v34;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4C28[v33])(&v26, v32);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v34 = (std::string *)v32;
  v35 = (std::string *)"; V: ";
  v36 = v32;
  v37 = (std::string *)"; V: ";
  v38 = (std::string *)"; V: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4C40[v33])(&v25, v32);
  std::to_string(&v25, (unint64_t)((char *)v4 - (char *)v5) >> 3);
  v34 = (std::string *)v32;
  v35 = &v25;
  v36 = v32;
  v37 = &v25;
  v38 = &v25;
  if (v33 == -1)
    sub_20E877AB8();
  v26 = &v34;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4C28[v33])(&v26, v32);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v34 = (std::string *)v32;
  v35 = (std::string *)"; W: ";
  v36 = v32;
  v37 = (std::string *)"; W: ";
  v38 = (std::string *)"; W: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4C40[v33])(&v25, v32);
  std::to_string(&v25, (unint64_t)((char *)v9 - (char *)v10) >> 3);
  v34 = (std::string *)v32;
  v35 = &v25;
  v36 = v32;
  v37 = &v25;
  v38 = &v25;
  if (v33 == -1)
    sub_20E877AB8();
  v26 = &v34;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4C28[v33])(&v26, v32);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Hash: ";
  v36 = v32;
  v37 = (std::string *)"; Hash: ";
  v38 = (std::string *)"; Hash: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4C58[v33])(&v25, v32);
  std::to_string(&v25, v6);
  v34 = (std::string *)v32;
  v35 = &v25;
  v36 = v32;
  v37 = &v25;
  v38 = &v25;
  if (v33 == -1)
    sub_20E877AB8();
  v26 = &v34;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4C28[v33])(&v26, v32);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v34 = (std::string *)v32;
  v35 = (std::string *)"]";
  v36 = v32;
  v37 = (std::string *)"]";
  v38 = (std::string *)"]";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4C70[v33])(&v25, v32);
  if (v33 == -1)
    sub_20E877AB8();
  v34 = &v25;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C9C4C88[v33])(__p, &v34, v32);
  if (v33 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C9C4C10[v33])(&v34, v32);
  v33 = 0;
  sub_20EB13C68(v32, "ExternalLensUndistortionCubicSpline3D: [Width: ");
  sub_20E87876C((uint64_t)&v26, (uint64_t)v32, (double *)(a1 + 8));
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Height: ";
  v36 = v32;
  v37 = (std::string *)"; Height: ";
  v38 = (std::string *)"; Height: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CA0[v33])(&v25, v32);
  sub_20E87876C((uint64_t)&v31, (uint64_t)v32, (double *)(a1 + 16));
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Min Focal Length Y: ";
  v36 = v32;
  v37 = (std::string *)"; Min Focal Length Y: ";
  v38 = (std::string *)"; Min Focal Length Y: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CB8[v33])(&v25, v32);
  sub_20E87876C((uint64_t)&v30, (uint64_t)v32, (double *)(a1 + 24));
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Max Focal Length Y: ";
  v36 = v32;
  v37 = (std::string *)"; Max Focal Length Y: ";
  v38 = (std::string *)"; Max Focal Length Y: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CB8[v33])(&v25, v32);
  sub_20E87876C((uint64_t)&v29, (uint64_t)v32, (double *)(a1 + 32));
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Max Src Radius: ";
  v36 = v32;
  v37 = (std::string *)"; Max Src Radius: ";
  v38 = (std::string *)"; Max Src Radius: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CD0[v33])(&v25, v32);
  sub_20E87876C((uint64_t)&v28, (uint64_t)v32, &v24);
  v34 = (std::string *)v32;
  v35 = (std::string *)"; Max Dst Radius: ";
  v36 = v32;
  v37 = (std::string *)"; Max Dst Radius: ";
  v38 = (std::string *)"; Max Dst Radius: ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CD0[v33])(&v25, v32);
  sub_20E87876C((uint64_t)&v27, (uint64_t)v32, &v23);
  v34 = (std::string *)v32;
  v35 = (std::string *)"; ";
  v36 = v32;
  v37 = (std::string *)"; ";
  v38 = (std::string *)"; ";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4CE8[v33])(&v25, v32);
  v34 = (std::string *)v32;
  v35 = (std::string *)__p;
  v36 = v32;
  v37 = (std::string *)__p;
  v38 = (std::string *)__p;
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4D00[v33])(&v25, v32);
  v34 = (std::string *)v32;
  v35 = (std::string *)"]";
  v36 = v32;
  v37 = (std::string *)"]";
  v38 = (std::string *)"]";
  if (v33 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  ((void (*)(std::string *, _DWORD *))off_24C9C4C70[v33])(&v25, v32);
  if (v33 == -1)
    sub_20E877AB8();
  v34 = &v25;
  ((void (*)(std::string **, _DWORD *))off_24C9C4C88[v33])(&v34, v32);
  if (v33 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C9C4C10[v33])(&v34, v32);
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_20EB124A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_20E877A60((uint64_t)&a23);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EB12530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB12544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB12568(double *a1, uint64_t a2, uint64_t a3, double *a4, int8x16_t a5, double a6, int8x16_t a7, int8x16_t a8, int64x2_t a9, float64x2_t a10, float64x2_t a11)
{
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  float64x2_t *v26;
  _QWORD *v27;
  uint64_t v28;
  float64x2_t v29;
  double *v30;
  uint64_t v31;
  _QWORD *f64;
  float64x2_t *v33;
  uint64_t v34;
  char v35;
  float64x2_t *v36;
  int8x16_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  float64x2_t *v43;
  _QWORD *v44;
  uint64_t v45;
  double *v46;
  _QWORD *v47;
  uint64_t v48;
  double v49;
  int8x16_t v50;
  __int128 v51;
  double v58;
  uint64_t result;
  __int128 v62;
  int64x2_t v63;
  float64x2_t *v64;
  _QWORD *v65;
  uint64_t v66;
  double v67;
  float64x2_t v68;
  unsigned int v72;
  float64x2_t v73;
  char v74;
  double v75;
  double v76;
  double v78;
  double v81;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  double v88;
  double v92;
  double v93;
  double v94;
  double v95;
  double v98;
  double v99;
  double v100;
  double v101;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  int v110;
  double v111;
  int v112;
  int v113;
  float64x2_t v114;
  float64x2_t v115;
  double v117;
  double v119;
  int v120;
  double v121;
  int v122;
  double v123;
  uint64_t v124;
  BOOL v125;
  float64x2_t v126;
  double v127;
  double v129;
  int v130;
  double v131;
  int v132;
  double v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  unint64_t v139;
  float64x2_t v140;
  float64_t v141;
  unint64_t v142;
  double v143;
  float64x2_t *v144;
  float64x2_t *v145;
  float64x2_t *v146;
  float64x2_t *v147;
  uint64_t v148;
  int64x2_t v149;
  float64_t v150;
  int64x2_t v151;
  float64_t v152;
  float64x2_t v153;
  uint64_t v154;
  float64x2_t v155;
  int8x16_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int8x16_t v159;
  uint64_t v160;
  float64x2_t v161;
  float64_t v162;
  __int128 v163;
  unint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;

  v137 = (float64x2_t)a5;
  v167 = *MEMORY[0x24BDAC8D0];
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_230;
    }
    v16 = *(_DWORD *)(a2 + 992);
  }
  if (!v16)
    goto LABEL_229;
  v17 = *(double *)a2;
  v18 = *(double *)(a2 + 8);
  v19 = *(double *)(a2 + 16);
  v21 = *(double *)(a2 + 32);
  v20 = *(double *)(a2 + 40);
  if (v16 != -1)
  {
    v22 = v17 * a6 / v21;
    if (v16 <= 7)
      goto LABEL_7;
    goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_230:
    abort();
  }
  v16 = *(_DWORD *)(a2 + 992);
  v22 = v17 * a6 / v21;
  if (v16 <= 7)
  {
LABEL_7:
    if (v16)
    {
      v23 = v22 * a6;
LABEL_12:
      a10.f64[0] = a1[1];
      *(double *)a9.i64 = v18 / v23 * a10.f64[0];
      *(double *)a7.i64 = 1.0 / v22 * *a1 - *(double *)a9.i64;
      *(double *)a8.i64 = *(double *)a7.i64 - (v19 * a6 - v18 * v20) / v23;
      v24 = v20 / a6;
      *(double *)a5.i64 = 1.0 / a6 * a10.f64[0] - v20 / a6;
      v142 = a8.i64[0];
      v143 = *(double *)a5.i64;
      goto LABEL_13;
    }
LABEL_229:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_11:
  v23 = v22 * a6;
  if (v16 <= 0xD)
    goto LABEL_12;
  *(double *)a8.i64 = v19 * a6 - v18 * v20;
  a10.f64[0] = a1[1];
  *(double *)a9.i64 = v18 / v23 * a10.f64[0];
  *(double *)a5.i64 = 1.0 / v22 * *a1 - *(double *)a9.i64 - *(double *)a8.i64 / v23;
  *(double *)a7.i64 = v20 / a6;
  v24 = 1.0 / a6 * a10.f64[0] - v20 / a6;
  v142 = a5.i64[0];
  v143 = v24;
  if (v16 == 14)
  {
LABEL_13:
    v144 = &v140;
    v145 = (float64x2_t *)&v142;
    v147 = 0;
    v148 = 0;
    v146 = &v138;
    if (v16 <= 7)
      goto LABEL_14;
    goto LABEL_55;
  }
  v144 = &v140;
  v145 = (float64x2_t *)&v142;
  v147 = 0;
  v148 = 0;
  v146 = &v138;
  if (v16 != -1)
  {
    v37 = (int8x16_t *)v144;
    v36 = v145;
    v38 = v146;
    v39 = v147;
    v40 = v148;
    goto LABEL_82;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_14:
    if (v16 > 3)
    {
      v31 = (uint64_t)v144;
      v30 = (double *)v145;
      f64 = (_QWORD *)v146->f64;
      v33 = v147;
      v34 = v148;
      if (v16 > 5)
      {
        if (v16 == 6)
          v35 = sub_20EB41C58((double *)a2, (uint64_t)v144, v145->f64, v146, (uint64_t)v147, v148);
        else
          v35 = sub_20EB306CC(a2, (uint64_t)v144, v145, v146, (unint64_t)v147, v148, *(double *)a5.i64, v24, a7, a8, *(double *)a9.i64, a10.f64[0], a11);
      }
      else if (v16 == 5)
      {
        if (v146)
        {
          v146->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v34)
        {
          *(_QWORD *)(v34 + 64) = 0;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)v34 = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
        }
        if (v33)
          v35 = sub_20EB28F10(v31, (uint64_t)v33, v30, a2 + 168, 5);
        else
          v35 = sub_20EB2886C(v31, v30, a2 + 168, 5);
      }
      else
      {
        if (v146)
        {
          v146->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v34)
        {
          *(_QWORD *)(v34 + 64) = 0;
          a5 = 0uLL;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)v34 = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
        }
        if (v33)
        {
          if (!*(_BYTE *)(a2 + 468))
          {
            a5.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a5, v24, a7, a8).u64[0];
            *(_BYTE *)(a2 + 468) = 1;
          }
          v35 = sub_20EA8D684(v31, (uint64_t)v30, (int64x2_t *)(a2 + 168), (float *)(a2 + 204), v33, 5, *(double *)a5.i64, v24, *(double *)a7.i64, *(double *)a8.i64, *(double *)a9.i64, a10.f64[0], a11);
        }
        else
        {
          if (!*(_BYTE *)(a2 + 468))
          {
            a5.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a5, v24, a7, a8).u64[0];
            *(_BYTE *)(a2 + 468) = 1;
          }
          v35 = sub_20EA8D684(v31, (uint64_t)v30, (int64x2_t *)(a2 + 168), (float *)(a2 + 204), 0, 5, *(double *)a5.i64, v24, *(double *)a7.i64, *(double *)a8.i64, *(double *)a9.i64, a10.f64[0], a11);
        }
      }
    }
    else
    {
      if (v16 <= 1)
      {
        if (!v16)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v25 = (uint64_t)v144;
        v27 = (_QWORD *)v146->f64;
        v26 = v147;
        v28 = v148;
        v29 = *v145;
        *v144 = *v145;
        *(_QWORD *)(v25 + 16) = 0x3FF0000000000000;
        if (v27)
        {
          *v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
        }
        if (v26)
        {
          *v26 = (float64x2_t)xmmword_210312EC0;
          v26[1] = (float64x2_t)unk_210312ED0;
          v29.f64[1] = 0.0;
          v26[2] = (float64x2_t)xmmword_210312EE0;
        }
        if (v28)
        {
          *(_QWORD *)(v28 + 64) = 0;
          v29.f64[1] = 0.0;
          *(_OWORD *)(v28 + 32) = 0u;
          *(_OWORD *)(v28 + 48) = 0u;
          *(_OWORD *)v28 = 0u;
          *(_OWORD *)(v28 + 16) = 0u;
        }
        goto LABEL_103;
      }
      if (v16 == 2)
      {
        v35 = sub_20EA8D22C((uint64_t)&v144, a2);
      }
      else
      {
        v41 = (double *)v144;
        v42 = (double *)v145;
        v44 = (_QWORD *)v146->f64;
        v43 = v147;
        v45 = v148;
        if (v146)
        {
          v146->f64[0] = 0.0;
          v44[1] = 0;
          v44[2] = 0;
        }
        if (v45)
        {
          *(_QWORD *)(v45 + 64) = 0;
          a5.i16[0] = 0;
          a5.i8[2] = 0;
          a5.i8[3] = 0;
          a5.i8[4] = 0;
          a5.i8[5] = 0;
          a5.i8[6] = 0;
          a5.i8[7] = 0;
          *(_OWORD *)(v45 + 32) = 0u;
          *(_OWORD *)(v45 + 48) = 0u;
          *(_OWORD *)v45 = 0u;
          *(_OWORD *)(v45 + 16) = 0u;
        }
        if (v43)
          v35 = sub_20EB27398(v41, (uint64_t)v43, v42, (int64x2_t *)(a2 + 168), 20, *(double *)a5.i64, v24, *(double *)a7.i64, *(double *)a8.i64, a9);
        else
          v35 = sub_20EB23DF0((uint64_t)v41, v42, (int64x2_t *)(a2 + 168), 20, *(double *)a5.i64, v24, *(double *)a7.i64, *(double *)a8.i64, a9, a10);
      }
    }
    goto LABEL_102;
  }
LABEL_55:
  v37 = (int8x16_t *)v144;
  if (v16 > 0xB)
  {
    if (v16 <= 0xD)
    {
      if (v16 != 13)
      {
        v65 = (_QWORD *)v146->f64;
        v64 = v147;
        v66 = v148;
        if (v146)
        {
          v146->f64[0] = 0.0;
          v65[1] = 0;
          v65[2] = 0;
        }
        if (v66)
        {
          *(_QWORD *)(v66 + 64) = 0;
          *(_OWORD *)(v66 + 32) = 0u;
          *(_OWORD *)(v66 + 48) = 0u;
          *(_OWORD *)v66 = 0u;
          *(_OWORD *)(v66 + 16) = 0u;
        }
        v37->i64[0] = 0;
        v37->i64[1] = 0;
        v37[1].i64[0] = 0;
        if (v64)
        {
          v64[1] = 0u;
          v64[2] = 0u;
          *v64 = 0u;
        }
        return 0;
      }
      v35 = sub_20EB43734((double *)a2, (uint64_t)v144, (uint64_t)v145, v146, (uint64_t)v147, v148);
      goto LABEL_102;
    }
    v36 = v145;
    v38 = v146;
    v39 = v147;
    v40 = v148;
    if (v16 == 14)
    {
      if (v146)
      {
        v146->f64[0] = 0.0;
        v38->f64[1] = 0.0;
        v38[1].f64[0] = 0.0;
      }
      if (v40)
      {
        *(_QWORD *)(v40 + 64) = 0;
        *(_OWORD *)(v40 + 32) = 0u;
        *(_OWORD *)(v40 + 48) = 0u;
        *(_OWORD *)v40 = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
      }
      v58 = (*(double *)a2 + *(double *)(a2 + 32)) * 0.5;
      result = sub_20EB253A0((uint64_t)v37, (uint64_t)v36, (double *)(a2 + 168), (double *)(a2 + 392), 0x14u, v58);
      if (!v39)
      {
        if (!(_DWORD)result)
          return result;
        goto LABEL_103;
      }
      if ((result & 1) == 0)
        return 0;
      if (!sub_20EB2498C(&v155, (uint64_t)&v156, &v153, (uint64_t)v37, (double *)(a2 + 168), v58))
        return 0;
      v50.i64[0] = v37[1].i64[0];
      *(_QWORD *)&v51 = v157.i64[0];
      _Q3 = (float64x2_t)v156;
      v159 = *v37;
      v160 = v50.i64[0];
      v154 = 0;
      *(_QWORD *)&_Q5.f64[0] = v50.i64[0];
      *(_QWORD *)&_Q5.f64[1] = v159.i64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v158, _Q5), (float64x2_t)vzip2q_s64(v158, v157), (float64x2_t)vextq_s8(v159, v50, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v157, (float64x2_t)v159), 1), (float64x2_t)v158, (float64x2_t)v159).f64[0], *(double *)v157.i64)) < 0.00000001)return 0;
LABEL_81:
      *(_QWORD *)&v62 = vextq_s8(v156, v156, 8uLL).u64[0];
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
      *((_QWORD *)&v62 + 1) = v158.i64[0];
      *((_QWORD *)&v51 + 1) = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
      v161 = _Q3;
      v162 = *(double *)v159.i64;
      v164 = vextq_s8(v159, v159, 8uLL).u64[0];
      v163 = v62;
      v166 = v50.i64[0];
      v165 = v51;
      sub_20E8BE424((uint64_t)&v149);
      v29.f64[0] = v150;
      a7.i64[1] = v151.i64[1];
      v63 = vzip2q_s64(v149, v151);
      v29.f64[1] = v152;
      *(int64x2_t *)v39 = vzip1q_s64(v149, v151);
      v39[1] = (float64x2_t)v63;
      v39[2] = v29;
      goto LABEL_103;
    }
LABEL_82:
    v35 = sub_20EB3CED8(a2, (uint64_t)v37, v36, v38, v39, v40);
    goto LABEL_102;
  }
  v46 = (double *)v145;
  v47 = (_QWORD *)v146->f64;
  v39 = v147;
  v48 = v148;
  if (v16 <= 9)
  {
    if (v16 == 9)
    {
      v35 = sub_20EB35004(a2, (uint64_t)v144, v145, v146, (unint64_t)v147, v148, *(double *)a5.i64, v24, *(double *)a7.i64, (int32x4_t)a8, (int32x4_t)a9);
    }
    else
    {
      if (v146)
      {
        v146->f64[0] = 0.0;
        v47[1] = 0;
        v47[2] = 0;
      }
      if (v48)
      {
        *(_QWORD *)(v48 + 64) = 0;
        a5.i16[0] = 0;
        a5.i8[2] = 0;
        a5.i8[3] = 0;
        a5.i8[4] = 0;
        a5.i8[5] = 0;
        a5.i8[6] = 0;
        a5.i8[7] = 0;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)v48 = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
      }
      if (v39)
      {
        v35 = sub_20EB277C4((uint64_t)v37, (uint64_t)v39, v46, a2 + 168, 20, *(double *)a5.i64, v24, *(double *)a7.i64, (int32x4_t)a8, (int32x4_t)a9);
      }
      else
      {
        v67 = sqrt(*v46 * *v46 + v46[1] * v46[1]);
        v35 = sub_20EB24018((uint64_t)v37, v46, (double *)(a2 + 168), 20, v67, v67, *(double *)a7.i64, (int32x4_t)a8, (int32x4_t)a9);
      }
    }
    goto LABEL_102;
  }
  if (v16 != 10)
  {
    v35 = sub_20EB38E20(a2, (uint64_t)v144, v145, v146, v147, v148);
    goto LABEL_102;
  }
  if (v146)
  {
    v146->f64[0] = 0.0;
    v47[1] = 0;
    v47[2] = 0;
  }
  if (v48)
  {
    *(_QWORD *)(v48 + 64) = 0;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_OWORD *)v48 = 0u;
    *(_OWORD *)(v48 + 16) = 0u;
  }
  v49 = (*(double *)a2 + *(double *)(a2 + 32)) * 0.5;
  v35 = sub_20EB24F38((uint64_t)v37, (uint64_t)v46, a2 + 168, (double *)(a2 + 280), 0x14u, v49);
  if (v39)
  {
    if ((v35 & 1) == 0)
      return 0;
    if (!sub_20EB2450C(&v155, (uint64_t)&v156, &v153, (uint64_t)v37, (double *)(a2 + 168), v49))
      return 0;
    v50.i64[0] = v37[1].i64[0];
    *(_QWORD *)&v51 = v157.i64[0];
    _Q3 = (float64x2_t)v156;
    v159 = *v37;
    v160 = v50.i64[0];
    v154 = 0;
    *(_QWORD *)&_Q5.f64[0] = v50.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v159.i64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v158, _Q5), (float64x2_t)vzip2q_s64(v158, v157), (float64x2_t)vextq_s8(v159, v50, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v157, (float64x2_t)v159), 1), (float64x2_t)v158, (float64x2_t)v159).f64[0], *(double *)v157.i64)) < 0.00000001)return 0;
    goto LABEL_81;
  }
LABEL_102:
  if ((v35 & 1) == 0)
    return 0;
LABEL_103:
  v29.f64[0] = v141;
  a7.i64[0] = v139;
  v68 = vsubq_f64(v29, (float64x2_t)a7);
  _Q1 = vsubq_f64(v140, v138);
  _Q4 = vmulq_f64(_Q1, _Q1);
  _D5 = _Q1.f64[1];
  __asm { FMLA            D4, D5, V1.D[1] }
  _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v68.f64[0], v68.f64[0]));
  v140 = vmlaq_n_f64(v138, vmulq_n_f64(_Q1, _Q4.f64[0]), v137.f64[0]);
  *(_QWORD *)&v141 = *(_OWORD *)&vmlaq_f64((float64x2_t)a7, v137, vmulq_f64(v68, _Q4));
  v72 = *(_DWORD *)(a3 + 992);
  if (v72 != -1)
  {
    if (v72 <= 7)
      goto LABEL_105;
LABEL_112:
    if (v72 > 0xB)
    {
      if (v72 <= 0xD)
      {
        if (v72 == 13 && v141 >= 0.00000001)
        {
          _Q0 = vdivq_f64(v140, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v141, 0));
          v78 = (*(double *)a3 + *(double *)(a3 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v81 = v78 * (_D2 * v78);
          v73 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v81* (*(double *)(a3 + 168)+ v78 * *(double *)(a3 + 224)+ v81* (*(double *)(a3 + 176)+ v78 * *(double *)(a3 + 232)+ v81* (*(double *)(a3 + 184)+ v78 * *(double *)(a3 + 240)+ v81* (*(double *)(a3 + 192)+ v78 * *(double *)(a3 + 248)+ v81* (*(double *)(a3 + 200)+ v78 * *(double *)(a3 + 256)+ v81
                                      * (*(double *)(a3 + 208)
                                       + v78 * *(double *)(a3 + 264)
                                       + v81 * (*(double *)(a3 + 216) + *(double *)(a3 + 272) * v78 + v81 * 0.0)))))))
                                 / 100.0
                                 + 1.0),
                                 0));
          goto LABEL_133;
        }
        return 0;
      }
      if (v72 == 14)
        v74 = sub_20EB247C0(&v161, (uint64_t)&v140, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
      else
        v74 = sub_20EB3E39C(a3, &v161, &v140);
    }
    else if (v72 > 9)
    {
      if (v72 == 10)
        v74 = sub_20EB24288(&v161, (uint64_t)&v140, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
      else
        v74 = sub_20EB3A2E4(a3, &v161, &v140);
    }
    else
    {
      if (v72 != 9)
      {
        v88 = v141;
        _Q0 = v140;
        _D1 = v140.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v92 = sqrt(_D6);
        v93 = fabs(v141);
        v94 = fabs(v92);
        if (v93 >= v94)
          v95 = v94 / v93;
        else
          v95 = v93 / v94;
        if (v95 <= 0.414213562)
        {
          v109 = 1;
          v110 = 2;
          v108 = v95;
        }
        else
        {
          v108 = (v94 - v93) / (v93 + v94);
          if (v93 >= v94)
            v108 = -v108;
          v109 = -1;
          v110 = 1;
        }
        if (_D6 >= 0.00000001)
        {
          if (v93 < v94)
            v109 = -v109;
          else
            v110 = v95 > 0.414213562;
          v114 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v108 * v108), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v108 * v108), (float64x2_t)xmmword_210315370), v108 * v108 * (v108 * v108))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v108 * v108), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v108 * v108), (float64x2_t)xmmword_210315380), v108 * v108 * (v108 * v108))), v108 * v108 * (v108 * v108) * (v108 * v108 * (v108 * v108))));
          v115 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v114, 1);
          _ZF = v92 == INFINITY && v93 == INFINITY;
          v117 = v108 + v108 * vdivq_f64(v114, v115).f64[0];
          if (_ZF)
            v117 = 0.785398163;
          if (v92 == 0.0 && v141 == 0.0)
            v119 = 0.0;
          else
            v119 = v117;
          if (v141 < 0.0)
          {
            v110 = 4 - v110;
            v109 = -v109;
          }
          if (v92 >= 0.0)
            v120 = v110;
          else
            v120 = -v110;
          v121 = (double)v120;
          if (v92 >= 0.0)
            v122 = v109;
          else
            v122 = -v109;
          v123 = v121 * 3.061617e-17 + v121 * 0.785398163 + v119 * (double)v122;
          v85 = vmulq_n_f64(v140, 1.0/ v92* (v123* (v123* v123* (*(double *)(a3 + 168)+ v123* v123* (*(double *)(a3 + 176)+ v123* v123* (*(double *)(a3 + 184)+ v123* v123* (*(double *)(a3 + 192)+ v123* v123* (*(double *)(a3 + 200)
                       + v123 * v123 * (*(double *)(a3 + 208) + v123 * v123 * *(double *)(a3 + 216)))))))
                  + 1.0)));
          goto LABEL_147;
        }
        goto LABEL_221;
      }
      v74 = sub_20EB3641C(a3, &v161, &v140);
    }
    goto LABEL_145;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v72 = *(_DWORD *)(a3 + 992);
  if (v72 > 7)
    goto LABEL_112;
LABEL_105:
  if (v72 > 3)
  {
    if (v72 <= 5)
    {
      if (v72 != 5)
      {
        v88 = v141;
        _Q0 = v140;
        _D1 = v140.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v98 = sqrt(_D6);
        v99 = fabs(v141);
        v100 = fabs(v98);
        if (v99 >= v100)
          v101 = v100 / v99;
        else
          v101 = v99 / v100;
        if (v101 <= 0.414213562)
        {
          v112 = 1;
          v113 = 2;
          v111 = v101;
        }
        else
        {
          v111 = (v100 - v99) / (v99 + v100);
          if (v99 >= v100)
            v111 = -v111;
          v112 = -1;
          v113 = 1;
        }
        if (_D6 < 0.00000001)
          goto LABEL_221;
        goto LABEL_196;
      }
      v75 = v140.f64[0] * v140.f64[0] + v140.f64[1] * v140.f64[1];
      if (v75 >= 0.00000001)
      {
        v104 = sqrt(v75);
        if (v104 <= v141)
        {
          v135 = v104 / v141 * 0.785398163
               - v104 / v141 * (v104 / v141 + -1.0) * (v104 / v141 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v104 <= -v141)
          {
            v106 = v104 / v141 * 0.785398163
                 - v104 / v141 * (-1.0 - v104 / v141) * (v104 / v141 * -0.0663008339 + 0.244711287);
            v107 = 3.14159265;
          }
          else
          {
            v105 = fabs(v141 / v104);
            v106 = v141 / v104 * (v105 + -1.0) * (v105 * 0.0663008339 + 0.244711287) + v141 / v104 * -0.785398163;
            v107 = 1.57079633;
          }
          v135 = v106 + v107;
        }
        v136 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), v135 * v135)), v135 * v135);
        v76 = (v135 + v135 * (v136.f64[0] + vmuld_lane_f64(v135 * v135 * (v135 * v135), v136, 1))) / v104;
        goto LABEL_228;
      }
      if (v141 != 0.0)
      {
        v76 = 1.0 / v141;
LABEL_228:
        v161.f64[0] = v140.f64[0] * v76;
        v161.f64[1] = v140.f64[1] * v76;
        goto LABEL_146;
      }
      return 0;
    }
    if (v72 == 6)
    {
      v86 = vaddq_f64(vdivq_f64(v140, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v141, 0)), *(float64x2_t *)(a3 + 192));
      v87 = sqrt(vaddvq_f64(vmulq_f64(v86, v86)));
      v73 = vaddq_f64(*(float64x2_t *)(a3 + 208), vmulq_n_f64(v86, v87 * (v87 * (*(double *)(a3 + 168) + v87 * (*(double *)(a3 + 176) + *(double *)(a3 + 184) * v87)))+ 1.0));
      goto LABEL_133;
    }
    v74 = sub_20EB31FFC(a3, &v161, &v140);
LABEL_145:
    if ((v74 & 1) != 0)
      goto LABEL_146;
    return 0;
  }
  if (v72 <= 1)
  {
    if (!v72)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v141 >= 0.00000001)
    {
      v73 = vmulq_n_f64(v140, 1.0 / v141);
LABEL_133:
      v161 = v73;
LABEL_146:
      v85 = v161;
      goto LABEL_147;
    }
    return 0;
  }
  if (v72 != 2)
  {
    v88 = v141;
    _Q0 = v140;
    _D1 = v140.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v98 = sqrt(_D6);
    v99 = fabs(v141);
    v100 = fabs(v98);
    if (v99 >= v100)
      v101 = v100 / v99;
    else
      v101 = v99 / v100;
    if (v101 <= 0.414213562)
    {
      v112 = 1;
      v113 = 2;
      v111 = v101;
    }
    else
    {
      v111 = (v100 - v99) / (v99 + v100);
      if (v99 >= v100)
        v111 = -v111;
      v112 = -1;
      v113 = 1;
    }
    if (_D6 < 0.00000001)
    {
LABEL_221:
      v85 = vmulq_n_f64(_Q0, 1.0 / v88);
      goto LABEL_147;
    }
LABEL_196:
    v124 = *(_QWORD *)&v88;
    if (v99 < v100)
      v112 = -v112;
    else
      v113 = v101 > 0.414213562;
    v125 = v98 == INFINITY && v99 == INFINITY;
    v126 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v111 * v111), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v111 * v111), (float64x2_t)xmmword_210315370), v111 * v111 * (v111 * v111))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v111 * v111), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v111 * v111), (float64x2_t)xmmword_210315380), v111 * v111 * (v111 * v111))), v111 * v111 * (v111 * v111) * (v111 * v111 * (v111 * v111))));
    v127 = v111 + v111 * vdivq_f64(v126, (float64x2_t)vdupq_laneq_s64((int64x2_t)v126, 1)).f64[0];
    if (v125)
      v127 = 0.785398163;
    if (v98 == 0.0 && v88 == 0.0)
      v129 = 0.0;
    else
      v129 = v127;
    if (v124 < 0)
    {
      v113 = 4 - v113;
      v112 = -v112;
    }
    if (v98 >= 0.0)
      v130 = v113;
    else
      v130 = -v113;
    v131 = (double)v130;
    if (v98 >= 0.0)
      v132 = v112;
    else
      v132 = -v112;
    v133 = v131 * 3.061617e-17 + v131 * 0.785398163 + v129 * (double)v132;
    v134 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), v133 * v133)), v133 * v133);
    v85 = vmulq_n_f64(_Q0, 1.0 / v98 * (v133 + v133 * (v134.f64[0] + vmuld_lane_f64(v133 * v133 * (v133 * v133), v134, 1))));
    goto LABEL_147;
  }
  if (*(_DWORD *)(a3 + 212))
  {
    if (v141 >= 0.00000001)
    {
      _Q3 = vmulq_n_f64(v140, 1.0 / v141);
      _D0 = vmuld_lane_f64(1.0 / v141, v140, 1);
      __asm { FMLA            D2, D0, V3.D[1] }
      v85 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a3 + 192), *(int8x16_t *)(a3 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a3 + 192), *(float64x2_t *)(a3 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(a3 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(a3 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(a3 + 184) * *(double *)&_D2))));
LABEL_147:
      *a4 = v19 + vmuld_lane_f64(v18, v85, 1) + v22 * v85.f64[0];
      a4[1] = v20 + vmuld_lane_f64(a6, v85, 1);
      return 1;
    }
    return 0;
  }
  result = sub_20EB14380(&v161, &v140, (double *)(a3 + 168));
  if ((_DWORD)result)
    goto LABEL_146;
  return result;
}

_QWORD *sub_20EB138E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *a1 = &off_24C9C4BD0;
  v2 = a1[14];
  if (v2)
  {
    v3 = a1[15];
    v4 = (void *)a1[14];
    if (v3 != v2)
    {
      v5 = a1[15];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[14];
    }
    a1[15] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_20EB13990(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *a1 = &off_24C9C4BD0;
  v2 = a1[14];
  if (v2)
  {
    v3 = a1[15];
    v4 = (void *)a1[14];
    if (v3 != v2)
    {
      v5 = a1[15];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[14];
    }
    a1[15] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  JUMPOUT(0x212BC6398);
}

double sub_20EB13A54(uint64_t a1, double a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 992);
  if (v4 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_DWORD *)(a1 + 992);
    if (v4 <= 7)
      goto LABEL_3;
LABEL_9:
    if (v4 > 0xB)
    {
      if (v4 > 0xD)
      {
        if (v4 == 14)
          return sub_20EB30120(a1, a2);
        else
          return sub_20EB404F8(a1, a2);
      }
      else if (v4 == 13)
      {
        return sub_20EB43BF0(a1, a2);
      }
      else
      {
        return sub_20EB2EF70(a1, a2);
      }
    }
    else if (v4 > 9)
    {
      if (v4 == 10)
        return sub_20EB2F848(a1, a2);
      else
        return sub_20EB3C440(a1, a2);
    }
    else if (v4 == 9)
    {
      return sub_20EB3857C(a1);
    }
    else
    {
      return sub_20EB2E4F0(a1, a2);
    }
  }
  if (v4 > 7)
    goto LABEL_9;
LABEL_3:
  if (v4 > 3)
  {
    if (v4 > 5)
    {
      if (v4 == 6)
        return sub_20EB42EA0(a1, a2);
      else
        return sub_20EB34974(a1);
    }
    else if (v4 == 5)
    {
      return sub_20EB2DC4C(a1, a2);
    }
    else
    {
      return sub_20EB2D1CC(a1, a2);
    }
  }
  else if (v4 > 1)
  {
    if (v4 == 2)
      return sub_20EB41A64(a1, a2);
    else
      return sub_20EB2BC88(a1, a2);
  }
  else
  {
    if (!v4)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    return sub_20EB4356C(a1, a2);
  }
}

_DWORD *sub_20EB13C68(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C4C10[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EB13D58(_DWORD ***a1)
{
  return sub_20E8ECA30(**a1, (char *)(*a1)[1]);
}

void sub_20EB13D64(uint64_t a1, uint64_t a2)
{
  sub_20EB13D74((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EB13D74(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C4C10[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB13F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EB13F6C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EB14064((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EB1405C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EB14064(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EB14260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20EB14274(uint64_t a1)
{
  double *v1;
  double *v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = *(double **)a1;
  v1 = *(double **)(a1 + 8);
  v3 = *(double **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = v3[1];
  v7 = v3[4];
  v8 = v3[5];
  v9 = *v3 * v7;
  v10 = 1.0 / *v3;
  v11 = -v6 / v9;
  result = 1.0 / v7;
  *v2 = v10 * *v1 + v11 * v1[1] - (v7 * v3[2] - v6 * v8) / v9;
  v2[1] = 1.0 / v7 * v1[1] - v8 / v7;
  if (v4)
  {
    *(double *)v4 = v10;
    *(double *)(v4 + 8) = v11;
    *(_QWORD *)(v4 + 16) = 0;
    *(double *)(v4 + 24) = result;
  }
  if (v5)
  {
    v13 = *v3;
    v14 = v3[1];
    v15 = v1[1];
    v16 = v3[4];
    v17 = v3[5];
    v18 = v15 * v14 / (v13 * v13 * v16) - *v1 / (v13 * v13) + (v16 * v3[2] - v14 * v17) / (v13 * v13 * v16);
    v19 = *v3 * v16;
    v20 = -1.0 / *v3;
    *(double *)v5 = v18;
    *(double *)(v5 + 8) = v15 * v14 / (v16 * v19) - v14 * v17 / (v16 * v19);
    *(double *)(v5 + 16) = v20;
    *(double *)(v5 + 24) = v14 / v19;
    *(_QWORD *)(v5 + 32) = 0;
    *(double *)(v5 + 40) = -(v15 - v17) / (v16 * v16);
    *(_QWORD *)(v5 + 48) = 0;
    result = -1.0 / v16;
    *(double *)(v5 + 56) = -1.0 / v16;
  }
  return result;
}

BOOL sub_20EB14380(float64x2_t *a1, float64x2_t *a2, double *a3)
{
  double v3;

  v3 = a2[1].f64[0];
  if (v3 >= 0.00000001)
  {
    _Q5 = vmulq_n_f64(*a2, 1.0 / v3);
    _D3 = vmuld_lane_f64(1.0 / v3, *a2, 1);
    __asm { FMLA            D4, D3, V5.D[1] }
    *a1 = vmulq_n_f64(_Q5, *a3 * _D4 + 1.0 + _D4 * _D4 * (a3[1] + a3[2] * _D4));
  }
  return v3 >= 0.00000001;
}

uint64_t sub_20EB143E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EB14454(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, size_t __sz, double a8)
{
  int v8;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  double v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int v33;
  unsigned int v34;
  double v35;
  float64x2_t v36;
  uint64_t v37;
  float64x2_t *v38;
  size_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  double v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v47;
  char *v48;
  float64x2_t v49;
  float64x2_t *v50;
  int32x2_t v51;
  float64x2_t *v52;
  uint64_t v53;
  int32x2_t v54;
  uint64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t v62;
  int64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  double v75;
  float64x2_t v76;
  unsigned int v77;
  double v78;
  _OWORD *v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  int64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  int64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  int64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  char *v118;
  float64x2_t v119;
  uint64_t v120;
  char *v121;
  double v122;
  int64x2_t v123;
  int64x2_t v124;
  float64x2_t v125[3];
  __int128 v126;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;

  v8 = __sz;
  *(_QWORD *)a1 = &off_24C9C4D38;
  *(double *)(a1 + 8) = (double)a4;
  *(double *)(a1 + 16) = (double)a5;
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_27;
    }
    v16 = *(_DWORD *)(a2 + 992);
    if (v16 <= 7)
    {
LABEL_3:
      if (!v16)
        goto LABEL_26;
LABEL_8:
      *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
      if (v16 <= 7)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if (v16 <= 7)
  {
    goto LABEL_3;
  }
  if (v16 < 0xF)
    goto LABEL_8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
  if (v16 != -1)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    goto LABEL_20;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_27;
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_9:
    if (!v16)
      goto LABEL_26;
LABEL_16:
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    if (v16 <= 7)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_15:
  if (v16 < 0xF)
    goto LABEL_16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (v16 != -1)
  {
LABEL_20:
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 16);
    goto LABEL_29;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_27;
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_17:
    if (!v16)
      goto LABEL_26;
LABEL_24:
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 16);
    if (v16 <= 7)
      goto LABEL_25;
    goto LABEL_39;
  }
LABEL_23:
  if (v16 < 0xF)
    goto LABEL_24;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 16);
  if (v16 != -1)
  {
LABEL_29:
    v17 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = 0;
    v18 = (uint64_t *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v17;
    goto LABEL_30;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_27:
    abort();
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_25:
    if (!v16)
    {
LABEL_26:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      goto LABEL_27;
    }
LABEL_40:
    v22 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = 0;
    v18 = (uint64_t *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v22;
    if (v16 <= 7)
      goto LABEL_41;
    goto LABEL_46;
  }
LABEL_39:
  if (v16 < 0xF)
    goto LABEL_40;
  v23 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  v18 = (uint64_t *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v23;
  if (v16 != -1)
  {
LABEL_30:
    v19 = *(double *)a2;
    goto LABEL_31;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_41:
    if (!v16)
      goto LABEL_136;
LABEL_47:
    v19 = *(double *)a2;
    if (v16 <= 7)
      goto LABEL_48;
    goto LABEL_54;
  }
LABEL_46:
  if (v16 < 0xF)
    goto LABEL_47;
  v19 = *(double *)a2;
  if (v16 != -1)
  {
LABEL_31:
    v20 = (v19 + *(double *)(a2 + 32)) * 0.5 * ((v19 + *(double *)(a2 + 32)) * 0.5);
    goto LABEL_32;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_137;
  }
  v16 = *(_DWORD *)(a2 + 992);
  if (v16 <= 7)
  {
LABEL_48:
    if (v16 <= 1)
    {
      if (!v16)
      {
LABEL_136:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_137:
        abort();
      }
      v16 = 1;
    }
    goto LABEL_31;
  }
LABEL_54:
  if (v16 <= 0xD)
    goto LABEL_31;
  v20 = (v19 + *(double *)(a2 + 32)) * 0.5 * ((v19 + *(double *)(a2 + 32)) * 0.5);
  if (v16 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_137;
    }
    v16 = *(_DWORD *)(a2 + 992);
    if (!v16)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
LABEL_32:
  if (v16 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_135;
    }
    if (!*(_DWORD *)(a2 + 992))
      goto LABEL_134;
    *(double *)(a1 + 64) = v20 * *(double *)(a2 + 152);
    v21 = *(_DWORD *)(a3 + 992);
    if (v21 != -1)
    {
LABEL_34:
      if (v21 <= 7)
        goto LABEL_35;
      goto LABEL_64;
    }
  }
  else
  {
    *(double *)(a1 + 64) = v20 * *(double *)(a2 + 152);
    v21 = *(_DWORD *)(a3 + 992);
    if (v21 != -1)
      goto LABEL_34;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_135;
  }
  v21 = *(_DWORD *)(a3 + 992);
  if (v21 <= 7)
  {
LABEL_35:
    if (!v21)
      goto LABEL_134;
LABEL_65:
    v24 = *(double *)a3;
    if (v21 <= 7)
      goto LABEL_66;
    goto LABEL_72;
  }
LABEL_64:
  if (v21 < 0xF)
    goto LABEL_65;
  v24 = *(double *)a3;
  if (v21 != -1)
  {
LABEL_73:
    v25 = (v24 + *(double *)(a3 + 32)) * 0.5 * ((v24 + *(double *)(a3 + 32)) * 0.5);
    goto LABEL_74;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_135;
  }
  v21 = *(_DWORD *)(a3 + 992);
  if (v21 <= 7)
  {
LABEL_66:
    if (v21 <= 1)
    {
      if (!v21)
      {
LABEL_134:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        goto LABEL_135;
      }
      v21 = 1;
    }
    goto LABEL_73;
  }
LABEL_72:
  if (v21 <= 0xD)
    goto LABEL_73;
  v25 = (v24 + *(double *)(a3 + 32)) * 0.5 * ((v24 + *(double *)(a3 + 32)) * 0.5);
  if (v21 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_135;
    }
    v21 = *(_DWORD *)(a3 + 992);
    if (!v21)
      goto LABEL_134;
  }
LABEL_74:
  if (v21 != -1)
  {
    *(double *)(a1 + 72) = v25 * *(double *)(a3 + 152);
    if (a4)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_135;
  }
  if (!*(_DWORD *)(a3 + 992))
    goto LABEL_134;
  *(double *)(a1 + 72) = v25 * *(double *)(a3 + 152);
  if (!a4)
  {
LABEL_84:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/ExternalLensUndistortionLinearCameraIntrinsics.cpp", 49, (uint64_t)"image_width > 0", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_135;
    }
  }
LABEL_85:
  if (!a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/ExternalLensUndistortionLinearCameraIntrinsics.cpp", 50, (uint64_t)"image_height > 0", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a8 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/ExternalLensUndistortionLinearCameraIntrinsics.cpp", 51, (uint64_t)"scene_distance > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v26 = a6 - 1, a6 <= 1)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/ExternalLensUndistortionLinearCameraIntrinsics.cpp",
         52,
         (uint64_t)"num_knots > 1",
         13,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
LABEL_135:
    abort();
  }
  v27 = a6;
  if (v8 == 1)
  {
    if (!a6)
    {
      v40 = 0;
      v121 = 0;
      v118 = 0;
      v41 = 0;
      v47 = 0;
      v48 = 0;
      goto LABEL_112;
    }
    v39 = 8 * a6;
    v40 = (float64x2_t *)operator new(v39);
    bzero(v40, v39);
    v41 = (float64x2_t *)operator new(v39);
    v118 = (char *)v40 + v39;
    v121 = (char *)v40 + v39;
    bzero(v41, v39);
    v42 = (double)v26;
    if (a6 >= 4)
    {
      v43 = a6 & 0xFFFFFFFC;
      v49 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
      v50 = v40 + 1;
      v51 = (int32x2_t)0x100000000;
      v52 = v41 + 1;
      v53 = v43;
      do
      {
        v54 = vadd_s32(v51, (int32x2_t)0x200000002);
        v55.i64[0] = v51.u32[0];
        v55.i64[1] = v51.u32[1];
        v56 = vcvtq_f64_u64(v55);
        v55.i64[0] = v54.u32[0];
        v55.i64[1] = v54.u32[1];
        v57 = vdivq_f64(v56, v49);
        v58 = vdivq_f64(vcvtq_f64_u64(v55), v49);
        v50[-1] = v57;
        *v50 = v58;
        v52[-1] = v57;
        *v52 = v58;
        v51 = vadd_s32(v51, (int32x2_t)0x400000004);
        v50 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v43 == a6)
        goto LABEL_111;
    }
    else
    {
      v43 = 0;
    }
    do
    {
      v59 = (double)v43 / v42;
      v60 = v43;
      v40->f64[v60] = v59;
      v41->f64[v60] = v59;
      ++v43;
    }
    while (a6 != v43);
LABEL_111:
    v48 = (char *)&v41->f64[a6];
    v47 = (char *)v41 + v39;
LABEL_112:
    v61 = operator new();
    v66 = v61;
    *(_QWORD *)(v61 + 56) = 0;
    v67 = (_QWORD *)(v61 + 56);
    *(_QWORD *)(v61 + 64) = 0;
    *(_QWORD *)v61 = &off_24C9C4D88;
    *(_QWORD *)(v61 + 8) = v40;
    *(_QWORD *)(v61 + 16) = v121;
    *(_QWORD *)(v61 + 24) = v118;
    *(_QWORD *)(v61 + 32) = v41;
    *(_QWORD *)(v61 + 40) = v47;
    *(_QWORD *)(v61 + 48) = v48;
    v68 = (unint64_t)(v121 - (char *)v40) >> 3;
    v69 = (unint64_t)(v47 - (char *)v41) >> 3;
    v70 = v69 * (unint64_t)v68;
    *(_DWORD *)(v61 + 72) = v68;
    *(_DWORD *)(v61 + 76) = v69;
    if (v70)
    {
      *(_QWORD *)(v61 + 56) = 0;
      *(_QWORD *)(v61 + 64) = 320 * v70 / 0x140;
      v71 = operator new(320 * (320 * v70 / 0x140), (std::align_val_t)0x20uLL);
      v72 = a6 - 1;
      *v67 = v71;
      v73 = v69 * v68;
      if (!((_DWORD)v69 * (_DWORD)v68))
        goto LABEL_115;
    }
    else
    {
      v71 = 0;
      v72 = a6 - 1;
      v73 = v69 * v68;
      if (!((_DWORD)v69 * (_DWORD)v68))
      {
LABEL_115:
        if (a6)
        {
          v74 = 0;
          v75 = (double)v72;
          v124 = vdupq_n_s64(0x7FF8000000000000uLL);
          v76 = (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL);
          v119 = v76;
          do
          {
            v77 = 0;
            v78 = (double)v74 / v75;
            v122 = v78 + 0.0001;
            v117 = v78 + -0.0001;
            do
            {
              v79 = (_OWORD *)(*(_QWORD *)(v66 + 56) + 320 * (v77 + v74 * *(_DWORD *)(v66 + 72)));
              *v79 = v124;
              v79[1] = v124;
              v79[2] = v124;
              v79[3] = v124;
              v79[4] = v124;
              v79[5] = v124;
              v79[6] = v124;
              v79[7] = v124;
              v79[8] = v124;
              v79[9] = v124;
              v79[10] = v124;
              v79[11] = v124;
              v79[12] = v124;
              v79[13] = v124;
              v80 = (double)v77 / v75;
              v79[14] = v124;
              v79[15] = v124;
              v79[16] = v124;
              v79[17] = v124;
              v79[18] = v124;
              v79[19] = v124;
              v76.f64[0] = v80;
              if ((sub_20EB1611C(a1, a2, a3, (uint64_t)v125, v76, (double)v74 / v75, a8, v62.f64[0], v63, v64, v65) & 1) != 0)
              {
                v81 = v125[0];
                v82 = v125[1];
                v83 = v125[2];
                v84 = *(double *)&v126;
                v85 = v127;
                v79[3] = v126;
                v79[4] = v85;
                v79[1] = v82;
                v79[2] = v83;
                *v79 = v81;
                v81.f64[0] = v80 + 0.0001;
                if (sub_20EB1611C(a1, a2, a3, (uint64_t)&v133, v81, (double)v74 / v75, a8, v84, v85, v64, v65))
                {
                  v76.f64[0] = v80 + -0.0001;
                  if ((sub_20EB1611C(a1, a2, a3, (uint64_t)&v128, v76, (double)v74 / v75, a8, v62.f64[0], v63, v64, v65) & 1) != 0)
                  {
                    v86 = v129;
                    v87 = vdivq_f64(vsubq_f64(v133, v128), v119);
                    v88 = vdivq_f64(vsubq_f64(v134, v129), v119);
                    v89 = vdivq_f64(vsubq_f64(v135, v130), v119);
                    v90 = vdivq_f64(vsubq_f64(v136, v131), v119);
                    v91 = (int64x2_t)vdivq_f64(vsubq_f64(v137, v132), v119);
                    v79[8] = v90;
                    v79[9] = v91;
                    v79[6] = v88;
                    v79[7] = v89;
                    v79[5] = v87;
                    v87.f64[0] = (double)v77 / v75;
                    if (sub_20EB1611C(a1, a2, a3, (uint64_t)&v133, v87, v122, a8, v90.f64[0], v91, v119, v86))
                    {
                      v76.f64[0] = (double)v77 / v75;
                      if ((sub_20EB1611C(a1, a2, a3, (uint64_t)&v128, v76, v117, a8, v62.f64[0], v63, v64, v65) & 1) != 0)
                      {
                        v92 = v129;
                        v93 = vdivq_f64(vsubq_f64(v133, v128), v119);
                        v94 = vdivq_f64(vsubq_f64(v134, v129), v119);
                        v95 = vdivq_f64(vsubq_f64(v135, v130), v119);
                        v96 = vdivq_f64(vsubq_f64(v136, v131), v119);
                        v97 = (int64x2_t)vdivq_f64(vsubq_f64(v137, v132), v119);
                        v79[13] = v96;
                        v79[14] = v97;
                        v79[11] = v94;
                        v79[12] = v95;
                        v79[10] = v93;
                        v93.f64[0] = v80 + 0.0001;
                        if (sub_20EB1611C(a1, a2, a3, (uint64_t)&v133, v93, v122, a8, v96.f64[0], v97, v119, v92))
                        {
                          v76.f64[0] = v80 + -0.0001;
                          if ((sub_20EB1611C(a1, a2, a3, (uint64_t)&v128, v76, v122, a8, v62.f64[0], v63, v64, v65) & 1) != 0)
                          {
                            v115 = v136;
                            v116 = v137;
                            v113 = v132;
                            v114 = v135;
                            v111 = v131;
                            v112 = v134;
                            v109 = v130;
                            v110 = v133;
                            v98.f64[1] = v128.f64[1];
                            v107 = v128;
                            v108 = v129;
                            v98.f64[0] = v80 + 0.0001;
                            if (sub_20EB1611C(a1, a2, a3, (uint64_t)&v133, v98, v117, a8, v133.f64[0], v63, v64, v65))
                            {
                              v76.f64[0] = v80 + -0.0001;
                              if ((sub_20EB1611C(a1, a2, a3, (uint64_t)&v128, v76, v117, a8, v62.f64[0], v63, v64, v65) & 1) != 0)
                              {
                                v99 = vdivq_f64(vsubq_f64(v116, v113), v119);
                                v100 = vdivq_f64(vsubq_f64(v115, v111), v119);
                                v101 = vdivq_f64(vsubq_f64(v114, v109), v119);
                                v102 = vdivq_f64(vsubq_f64(v112, v108), v119);
                                v103 = vdivq_f64(vsubq_f64(v110, v107), v119);
                                v64 = (float64x2_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL);
                                v65 = (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL);
                                *(_QWORD *)&v103.f64[1] = vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u64[0];
                                *(_QWORD *)&v102.f64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
                                *(_QWORD *)&v101.f64[1] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
                                v104 = vsubq_f64(v101, vdivq_f64(vsubq_f64(v135, v130), v119));
                                v100.f64[1] = v65.f64[0];
                                v99.f64[1] = v64.f64[0];
                                v63 = (int64x2_t)vdivq_f64(vsubq_f64(v99, vdivq_f64(vsubq_f64(v137, v132), v119)), v119);
                                v62 = vdivq_f64(vsubq_f64(v100, vdivq_f64(vsubq_f64(v136, v131), v119)), v119);
                                v105 = vdivq_f64(vsubq_f64(v102, vdivq_f64(vsubq_f64(v134, v129), v119)), v119);
                                v79[15] = vdivq_f64(vsubq_f64(v103, vdivq_f64(vsubq_f64(v133, v128), v119)), v119);
                                v79[16] = v105;
                                v76 = vdivq_f64(v104, v119);
                                v79[17] = v76;
                                v79[18] = v62;
                                v79[19] = v63;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v77;
            }
            while (a6 != v77);
            ++v74;
          }
          while (v74 != a6);
        }
        v45 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v66;
        if (v45)
          goto LABEL_104;
        return a1;
      }
    }
    bzero(v71, 320 * ((320 * (unint64_t)v73 - 320) / 0x140) + 320);
    goto LABEL_115;
  }
  if (!v8)
  {
    v106 = v18;
    v120 = (((80 * a6 * a6 + 31) & 0xFFFFFFFFE0) * (unsigned __int128)0x333333333333334uLL) >> 64;
    v28 = (char *)operator new(80 * v120, (std::align_val_t)0x20uLL);
    if (a6)
    {
      v33 = 0;
      v34 = 0;
      v35 = (double)v26;
      v36 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
      v123 = (int64x2_t)v36;
      do
      {
        v37 = 0;
        do
        {
          v38 = (float64x2_t *)&v28[80 * (v33 + v37)];
          v36.f64[0] = (double)v37 / v35;
          if ((sub_20EB1611C(a1, a2, a3, (uint64_t)v38, v36, (double)v34 / v35, a8, v29, v30, v31, v32) & 1) == 0)
          {
            *(_QWORD *)&v36.f64[1] = v123.i64[1];
            *v38 = (float64x2_t)v123;
            v38[1] = (float64x2_t)v123;
            v38[2] = (float64x2_t)v123;
            v38[3] = (float64x2_t)v123;
            v38[4] = (float64x2_t)v123;
          }
          ++v37;
        }
        while (v27 != v37);
        ++v34;
        v33 += v27;
      }
      while (v34 != (_DWORD)v27);
    }
    v44 = (_QWORD *)operator new();
    *v44 = &off_24C9C4E48;
    v44[1] = v28;
    v44[2] = v120;
    v44[3] = v27 | (v27 << 32);
    v45 = *v106;
    *v106 = (uint64_t)v44;
    if (v45)
LABEL_104:
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  return a1;
}

void sub_20EB154C0()
{
  _QWORD *v0;

  sub_20EB17898(v0);
}

BOOL sub_20EB15578(uint64_t a1, float64x2_t *a2, double *a3, float64x2_t *a4)
{
  float64x2_t v8;
  float64x2_t v16;
  float64x2_t v19;
  float64x2_t v20[5];
  float64x2_t v21;

  if (!*(_QWORD *)(a1 + 56)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/ExternalLensUndistortionLinearCameraIntrinsics.cpp", 67, (uint64_t)"interpolator_", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8.f64[0] = a3[2];
  v8.f64[1] = a3[5];
  _D3 = vsubq_f64(*a2, v8).f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  if (_D2 > *(double *)(a1 + 64))
    return 0;
  v19 = v8;
  v21 = vdivq_f64(*a2, *(float64x2_t *)(a1 + 8));
  (*(void (**)(float64x2_t *__return_ptr, _QWORD, float64x2_t *, _QWORD))(**(_QWORD **)(a1 + 56) + 16))(v20, *(_QWORD *)(a1 + 56), &v21, 0);
  v16 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v20[0], v20[1], *a3 - *(double *)(a1 + 24)), v20[2], a3[4] - *(double *)(a1 + 32)), v20[3], a3[2] - *(double *)(a1 + 40)), v20[4], a3[5] - *(double *)(a1 + 48));
  *a4 = v16;
  _D2 = vsubq_f64(v16, v19).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  return _D1 <= *(double *)(a1 + 72);
}

void sub_20EB15774(uint64_t a1, _OWORD *a2)
{
  _QWORD *v2;
  unsigned int v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  size_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  char v74;

  v2 = a2;
  *a2 = *(_OWORD *)(a1 + 8);
  a2[1] = *(_OWORD *)(a1 + 24);
  a2[2] = *(_OWORD *)(a1 + 40);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 56) + 24))(&v71);
  if (!v74)
    goto LABEL_61;
  v3 = v72;
  v4 = 10 * v72 * v73;
  v5 = (_BYTE *)v2[6];
  if (v4 > (uint64_t)(v2[8] - (_QWORD)v5) >> 3)
  {
    v6 = (_BYTE *)v2[7];
    v7 = (char *)operator new(8 * v4);
    v8 = v6 - v5;
    v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
    v10 = v9;
    if (v6 == v5)
      goto LABEL_11;
    if ((unint64_t)(v8 - 8) >= 0x58)
    {
      v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v6[-(v8 & 0xFFFFFFFFFFFFFFF8)] - v7) >= 0x20)
      {
        v11 = v8 >> 3;
        v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        v14 = &v6[-v13];
        v10 = &v9[-v13];
        v15 = &v7[8 * v11 - 16];
        v16 = (__int128 *)(v6 - 16);
        v17 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = *v16;
          *((_OWORD *)v15 - 1) = *(v16 - 1);
          *(_OWORD *)v15 = v18;
          v15 -= 32;
          v16 -= 2;
          v17 -= 4;
        }
        while (v17);
        v6 = v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_11:
          v2[6] = v10;
          v2[7] = v9;
          v2[8] = &v7[8 * v4];
          if (v5)
          {
            operator delete(v5);
            v3 = v72;
          }
          goto LABEL_13;
        }
      }
    }
    else
    {
      v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v19 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v10 - 1) = v19;
      v10 -= 8;
    }
    while (v6 != v5);
    goto LABEL_11;
  }
LABEL_13:
  if (v3)
  {
    v69 = v2;
    v70 = 0;
    v20 = v73;
    while (!v20)
    {
LABEL_16:
      if (++v70 >= (unint64_t)v3)
        goto LABEL_61;
    }
    v21 = 0;
    while (1)
    {
      v22 = (char *)(v71 + 80 * (v70 + v72 * (_DWORD)v21));
      v24 = v2[6];
      v23 = v2[7];
      v25 = v23 - v24;
      v26 = (uint64_t)(v23 - v24) >> 3;
      v27 = (char *)(v24 + ((v23 - v24) & 0xFFFFFFFFFFFFFFF8));
      v28 = v2[8];
      if ((uint64_t)(v28 - v23) < 80)
        break;
      v33 = v23 - (_QWORD)v27;
      if ((uint64_t)(v23 - (_QWORD)v27) > 79)
      {
        v34 = v22 + 80;
        v35 = (char *)v2[7];
LABEL_34:
        v36 = v35 - (v27 + 80);
        v37 = v36 >> 3;
        v38 = v35 - 80;
        v39 = v35;
        if ((unint64_t)(v35 - 80) < v23)
        {
          v40 = (v25 & 0xFFFFFFFFFFFFFFF8) + v36;
          v41 = v24 + v40 + 8;
          if (v23 > v41)
            v41 = v23;
          v42 = v41 + ~v24 - v40;
          if (v42 < 0x58)
          {
            v39 = v35;
            goto LABEL_56;
          }
          v61 = (v42 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v38 += v62;
          v39 = &v35[v62];
          v63 = v35 + 16;
          v64 = (__int128 *)(v24 + 8 * v37 + 8 * v26 + 16);
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v64;
            *(v63 - 1) = *(v64 - 1);
            *v63 = v66;
            v63 += 2;
            v64 += 2;
            v65 -= 4;
          }
          while (v65);
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_56:
              v67 = *(_QWORD *)v38;
              v38 += 8;
              *(_QWORD *)v39 = v67;
              v39 += 8;
            }
            while ((unint64_t)v38 < v23);
          }
        }
        v2[7] = v39;
        if (v35 != v27 + 80)
          memmove(&v35[-8 * v37], (const void *)(v24 + ((v23 - v24) & 0xFFFFFFFFFFFFFFF8)), v36);
        if (v34 != v22)
          memmove((void *)(v24 + ((v23 - v24) & 0xFFFFFFFFFFFFFFF8)), v22, v34 - v22);
        goto LABEL_19;
      }
      v34 = &v22[v33];
      memmove((void *)v2[7], &v22[v33], 80 - v33);
      v35 = v27 + 80;
      v2 = v69;
      v69[7] = v27 + 80;
      if (v33 >= 1)
        goto LABEL_34;
LABEL_19:
      ++v21;
      v20 = v73;
      if (v21 >= v73)
      {
        v3 = v72;
        goto LABEL_16;
      }
    }
    v29 = v26 + 10;
    if ((unint64_t)(v26 + 10) >> 61)
      sub_20E867F44();
    v30 = v28 - v24;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        sub_20E877A38();
      v32 = operator new(8 * v31);
    }
    else
    {
      v32 = 0;
    }
    v43 = &v32[8 * v26];
    *v43 = *(_OWORD *)v22;
    v44 = *((_OWORD *)v22 + 1);
    v45 = *((_OWORD *)v22 + 2);
    v46 = *((_OWORD *)v22 + 4);
    v43[3] = *((_OWORD *)v22 + 3);
    v43[4] = v46;
    v43[1] = v44;
    v43[2] = v45;
    if (v24 == v23)
    {
      v49 = &v32[8 * v26];
    }
    else
    {
      v47 = v25 - 8;
      if (v25 - 8 >= 0x68)
      {
        v50 = v24 + (v25 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v32[v25 & 0xFFFFFFFFFFFFFFF8];
        v48 = (char *)(v24 + ((v23 - v24) & 0xFFFFFFFFFFFFFFF8));
        v49 = &v32[8 * v26];
        if (v50 >= 0x20)
        {
          v51 = (v47 >> 3) + 1;
          v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v27[-v52];
          v49 = (char *)v43 - v52;
          v53 = &v32[8 * v26 - 16];
          v54 = (__int128 *)(v24 + 8 * v26 - 16);
          v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *v54;
            *(v53 - 1) = *(v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 2;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v48 = (char *)(v24 + ((v23 - v24) & 0xFFFFFFFFFFFFFFF8));
        v49 = &v32[8 * v26];
      }
      do
      {
        v57 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *((_QWORD *)v49 - 1) = v57;
        v49 -= 8;
      }
      while (v48 != (char *)v24);
    }
LABEL_49:
    v58 = v43 + 5;
    v59 = v23 - (_QWORD)v27;
    if (v59)
      memmove(v43 + 5, v27, v59);
    v60 = &v32[8 * v31];
    v2 = v69;
    v69[6] = v49;
    v69[7] = (char *)v58 + v59;
    v69[8] = v60;
    if (v24)
      operator delete((void *)v24);
    goto LABEL_19;
  }
LABEL_61:
  *(_OWORD *)(v2 + 9) = *(_OWORD *)(a1 + 64);
  if (v74)
  {
    if (v71)
      MEMORY[0x212BC6368](v71, 0x1000C804247E4FDLL);
  }
}

void sub_20EB15C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    if (a13)
      MEMORY[0x212BC6368](a13, 0x1000C804247E4FDLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EB15C70(uint64_t a1)
{
  void *__p[2];
  char v3;
  double v4;
  double v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _DWORD v14[6];
  int v15;
  _QWORD **v16;
  const char *v17;
  _DWORD *v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;

  v4 = sqrt(*(double *)(a1 + 64));
  v5 = v4;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 56) + 32))(__p);
  v15 = 0;
  sub_20EA7728C(v14, "ExternalLensUndistortionLinearCameraIntrinsics: [Width: ");
  sub_20E87876C((uint64_t)&v13, (uint64_t)v14, (double *)(a1 + 8));
  v16 = (_QWORD **)v14;
  v17 = "; Height: ";
  v18 = v14;
  v19 = "; Height: ";
  v20 = "; Height: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4ED0[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v12, (uint64_t)v14, (double *)(a1 + 16));
  v16 = (_QWORD **)v14;
  v17 = "; Fx: ";
  v18 = v14;
  v19 = "; Fx: ";
  v20 = "; Fx: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EB8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v11, (uint64_t)v14, (double *)(a1 + 24));
  v16 = (_QWORD **)v14;
  v17 = "; Fy: ";
  v18 = v14;
  v19 = "; Fy: ";
  v20 = "; Fy: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EB8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v10, (uint64_t)v14, (double *)(a1 + 32));
  v16 = (_QWORD **)v14;
  v17 = "; Cx: ";
  v18 = v14;
  v19 = "; Cx: ";
  v20 = "; Cx: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EB8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v9, (uint64_t)v14, (double *)(a1 + 40));
  v16 = (_QWORD **)v14;
  v17 = "; Cy: ";
  v18 = v14;
  v19 = "; Cy: ";
  v20 = "; Cy: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EB8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v8, (uint64_t)v14, (double *)(a1 + 48));
  v16 = (_QWORD **)v14;
  v17 = "; Max Src Radius: ";
  v18 = v14;
  v19 = "; Max Src Radius: ";
  v20 = "; Max Src Radius: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EE8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v7, (uint64_t)v14, &v5);
  v16 = (_QWORD **)v14;
  v17 = "; Max Dst Radius: ";
  v18 = v14;
  v19 = "; Max Dst Radius: ";
  v20 = "; Max Dst Radius: ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EE8[v15])(&v21, v14);
  sub_20E87876C((uint64_t)&v6, (uint64_t)v14, &v4);
  v16 = (_QWORD **)v14;
  v17 = "; ";
  v18 = v14;
  v19 = "; ";
  v20 = "; ";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4EA0[v15])(&v21, v14);
  v16 = (_QWORD **)v14;
  v17 = (const char *)__p;
  v18 = v14;
  v19 = (const char *)__p;
  v20 = (const char *)__p;
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4F00[v15])(&v21, v14);
  v16 = (_QWORD **)v14;
  v17 = "]";
  v18 = v14;
  v19 = "]";
  v20 = "]";
  if (v15 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C4E08[v15])(&v21, v14);
  if (v15 == -1)
    sub_20E877AB8();
  v16 = &v21;
  ((void (*)(_QWORD ***, _DWORD *))off_24C9C4E20[v15])(&v16, v14);
  if (v15 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24C9C4DD8[v15])(&v16, v14);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20EB160AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_20E877A60((uint64_t)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB1611C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t a5, float64_t a6, double a7, double a8, int64x2_t a9, float64x2_t a10, float64x2_t a11)
{
  int v15;
  __int128 v16;
  int8x16_t v17;
  float64x2_t v18;
  int8x16_t v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  double v24;
  int8x16_t v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int8x16_t v37;
  double v38;
  int8x16_t v39;
  double v40;
  int8x16_t v41;
  int8x16_t v42;
  int64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  double v52;
  int8x16_t v53;
  double v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  int8x16_t v65;
  double v66;
  int8x16_t v67;
  double v68;
  int8x16_t v69;
  int8x16_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v75;
  double v76;
  __int128 v77;
  char v78;
  uint64_t v79[4];
  int8x16_t v80;
  __int128 v81;
  int8x16_t v82;
  int8x16_t v83;
  __int128 v84;
  uint64_t v85;
  double v86;
  float64x2_t v87;
  char v88;
  float64x2_t v89;
  char v90;
  __int128 v91;
  int8x16_t v92;
  int8x16_t v93;
  __int128 v94;
  uint64_t v95;

  v86 = a7;
  v15 = *(_DWORD *)(a2 + 992);
  if (v15 == -1)
  {
    v75 = *(_QWORD *)&a5.f64[0];
    v76 = a6;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_17;
    }
    v15 = *(_DWORD *)(a2 + 992);
    *(_QWORD *)&a5.f64[0] = v75;
    a6 = v76;
  }
  if (!v15)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_17:
    abort();
  }
  v16 = *(_OWORD *)(a2 + 48);
  v83 = *(int8x16_t *)(a2 + 32);
  v84 = v16;
  v85 = *(_QWORD *)(a2 + 64);
  v17 = *(int8x16_t *)(a2 + 16);
  v81 = *(_OWORD *)a2;
  v82 = v17;
  v18 = *(float64x2_t *)(a1 + 8);
  a5.f64[1] = a6;
  v80 = (int8x16_t)vmulq_f64(v18, a5);
  v79[0] = a2;
  v79[1] = (uint64_t)&v80;
  v79[2] = (uint64_t)&v86;
  v79[3] = a3;
  sub_20EB16478((uint64_t)&v77, v79, (double *)&v81, v80, a6, (int8x16_t)v18, v17, a9, a10, a11);
  if (!v78)
    return 0;
  *(_OWORD *)a4 = v77;
  *((_QWORD *)&v91 + 1) = *((_QWORD *)&v81 + 1);
  v92 = v82;
  v23.i64[1] = *((_QWORD *)&v84 + 1);
  v93 = v83;
  v94 = v84;
  v95 = v85;
  v24 = *(double *)&v81;
  *(double *)v23.i64 = *(double *)&v81 + 0.0001;
  *(double *)&v91 = *(double *)&v81 + 0.0001;
  sub_20EB16478((uint64_t)&v89, v79, (double *)&v91, v23, *(double *)v82.i64, v83, v19, v20, v21, v22);
  if (!v90)
    return 0;
  *(double *)v25.i64 = v24 + -0.0001;
  *(double *)&v91 = v24 + -0.0001;
  sub_20EB16478((uint64_t)&v87, v79, (double *)&v91, v25, v26, v27, v28, v29, v30, v31);
  if (!v88)
    return 0;
  *(float64x2_t *)(a4 + 16) = vdivq_f64(vsubq_f64(v89, v87), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  v93.i64[1] = v83.i64[1];
  v94 = v84;
  v95 = v85;
  v37.i64[1] = v82.i64[1];
  v91 = v81;
  v92 = v82;
  v38 = *(double *)v83.i64;
  *(double *)v37.i64 = *(double *)v83.i64 + 0.0001;
  *(double *)v93.i64 = *(double *)v83.i64 + 0.0001;
  sub_20EB16478((uint64_t)&v89, v79, (double *)&v91, v37, *(double *)&v81, v32, v33, v34, v35, v36);
  if (!v90)
    return 0;
  *(double *)v39.i64 = v38 + -0.0001;
  *(double *)v93.i64 = v38 + -0.0001;
  sub_20EB16478((uint64_t)&v87, v79, (double *)&v91, v39, v40, v41, v42, v43, v44, v45);
  if (!v88)
    return 0;
  *(float64x2_t *)(a4 + 32) = vdivq_f64(vsubq_f64(v89, v87), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  v93 = v83;
  v94 = v84;
  v95 = v85;
  v51.i64[1] = v82.i64[1];
  v91 = v81;
  v92.i64[1] = v82.i64[1];
  v52 = *(double *)v82.i64;
  *(double *)v51.i64 = *(double *)v82.i64 + 0.0001;
  *(double *)v92.i64 = *(double *)v82.i64 + 0.0001;
  sub_20EB16478((uint64_t)&v89, v79, (double *)&v91, v51, *(double *)&v81, v46, v47, v48, v49, v50);
  if (!v90)
    return 0;
  *(double *)v53.i64 = v52 + -0.0001;
  *(double *)v92.i64 = v52 + -0.0001;
  sub_20EB16478((uint64_t)&v87, v79, (double *)&v91, v53, v54, v55, v56, v57, v58, v59);
  if (!v88)
    return 0;
  *(float64x2_t *)(a4 + 48) = vdivq_f64(vsubq_f64(v89, v87), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  v93.i64[0] = v83.i64[0];
  v94 = v84;
  v95 = v85;
  v65.i64[1] = v82.i64[1];
  v91 = v81;
  v92 = v82;
  v66 = *(double *)&v83.i64[1];
  *(double *)v65.i64 = *(double *)&v83.i64[1] + 0.0001;
  *(double *)&v93.i64[1] = *(double *)&v83.i64[1] + 0.0001;
  sub_20EB16478((uint64_t)&v89, v79, (double *)&v91, v65, *(double *)&v81, v60, v61, v62, v63, v64);
  if (!v90)
    return 0;
  *(double *)v67.i64 = v66 + -0.0001;
  *(double *)&v93.i64[1] = v66 + -0.0001;
  sub_20EB16478((uint64_t)&v87, v79, (double *)&v91, v67, v68, v69, v70, v71, v72, v73);
  if (!v88)
    return 0;
  *(float64x2_t *)(a4 + 64) = vdivq_f64(vsubq_f64(v89, v87), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  return 1;
}

void sub_20EB16478(uint64_t a1, uint64_t *a2, double *a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7, int64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  uint64_t v13;
  double *v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  float64x2_t *v21;
  _QWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  double *v25;
  uint64_t v26;
  _QWORD *f64;
  float64x2_t *v28;
  uint64_t v29;
  char v30;
  double v31;
  double v32;
  float64x2_t *v33;
  int8x16_t *v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v37;
  double *v38;
  double *v39;
  float64x2_t *v40;
  _QWORD *v41;
  uint64_t v42;
  double *v43;
  _QWORD *v44;
  uint64_t v45;
  double v46;
  int8x16_t v47;
  __int128 v48;
  double v55;
  __int128 v58;
  int64x2_t v59;
  float64x2_t *v60;
  _QWORD *v61;
  uint64_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v68;
  float64x2_t v69;
  double *v70;
  uint64_t v71;
  unsigned int v72;
  char v73;
  double v74;
  double v75;
  double v77;
  double v80;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  double v87;
  double v91;
  double v92;
  double v93;
  double v94;
  double v97;
  double v98;
  double v99;
  double v100;
  double v103;
  double v104;
  char v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int v111;
  int v112;
  double v113;
  int v114;
  int v115;
  float64x2_t v116;
  float64x2_t v117;
  double v119;
  double v121;
  int v122;
  double v123;
  int v124;
  double v125;
  uint64_t v126;
  BOOL v127;
  float64x2_t v128;
  double v129;
  double v131;
  int v132;
  double v133;
  int v134;
  double v135;
  float64x2_t v136;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  unint64_t v140;
  float64x2_t v141;
  float64_t v142;
  unint64_t v143;
  double v144;
  float64x2_t *v145;
  float64x2_t *v146;
  float64x2_t *v147;
  float64x2_t *v148;
  uint64_t v149;
  int64x2_t v150;
  float64_t v151;
  int64x2_t v152;
  float64_t v153;
  float64x2_t v154;
  uint64_t v155;
  float64x2_t v156;
  int8x16_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int8x16_t v160;
  uint64_t v161;
  float64x2_t v162;
  float64_t v163;
  __int128 v164;
  unint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v14 = (double *)a2[1];
  v15 = *(_DWORD *)(*a2 + 992);
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v15 = *(_DWORD *)(v13 + 992);
    if (v15 <= 7)
      goto LABEL_3;
  }
  else if (v15 <= 7)
  {
LABEL_3:
    if (!v15)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_8;
  }
  if (v15 <= 0xD)
  {
LABEL_8:
    v16 = a3[1];
    a9.f64[0] = a3[4];
    a10.f64[0] = a3[5];
    *(double *)a8.i64 = a9.f64[0] * a3[2] - v16 * a10.f64[0];
    v17 = v14[1];
    v18 = *a3 * a9.f64[0];
    *(double *)a6.i64 = 1.0 / *a3 * *v14 - v16 / v18 * v17;
    *(double *)a7.i64 = *(double *)a6.i64 - *(double *)a8.i64 / v18;
    v19 = a10.f64[0] / a9.f64[0];
    *(double *)a4.i64 = 1.0 / a9.f64[0] * v17 - a10.f64[0] / a9.f64[0];
    v143 = a7.i64[0];
    v144 = *(double *)a4.i64;
    goto LABEL_9;
  }
  v31 = a3[1];
  a9.f64[0] = a3[4];
  a10.f64[0] = a3[5];
  *(double *)a8.i64 = a9.f64[0] * a3[2] - v31 * a10.f64[0];
  v32 = v14[1];
  *(double *)a7.i64 = 1.0 / *a3 * *v14;
  v19 = *(double *)a7.i64 - v31 / (*a3 * a9.f64[0]) * v32 - *(double *)a8.i64 / (*a3 * a9.f64[0]);
  *(double *)a6.i64 = a10.f64[0] / a9.f64[0];
  *(double *)a4.i64 = 1.0 / a9.f64[0] * v32 - a10.f64[0] / a9.f64[0];
  v143 = *(_QWORD *)&v19;
  v144 = *(double *)a4.i64;
  if (v15 == 14)
  {
LABEL_9:
    v145 = &v141;
    v146 = (float64x2_t *)&v143;
    v148 = 0;
    v149 = 0;
    v147 = &v139;
    if (v15 <= 7)
      goto LABEL_10;
    goto LABEL_51;
  }
  v145 = &v141;
  v146 = (float64x2_t *)&v143;
  v148 = 0;
  v149 = 0;
  v147 = &v139;
  if (v15 != -1)
  {
    v34 = (int8x16_t *)v145;
    v33 = v146;
    v35 = v147;
    v36 = v148;
    v37 = v149;
    goto LABEL_78;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *(_DWORD *)(v13 + 992);
  if (v15 <= 7)
  {
LABEL_10:
    if (v15 > 3)
    {
      v26 = (uint64_t)v145;
      v25 = (double *)v146;
      f64 = (_QWORD *)v147->f64;
      v28 = v148;
      v29 = v149;
      if (v15 > 5)
      {
        if (v15 == 6)
          v30 = sub_20EB41C58((double *)v13, (uint64_t)v145, v146->f64, v147, (uint64_t)v148, v149);
        else
          v30 = sub_20EB306CC(v13, (uint64_t)v145, v146, v147, (unint64_t)v148, v149, *(double *)a4.i64, v19, a6, a7, *(double *)a8.i64, a9.f64[0], a10);
      }
      else if (v15 == 5)
      {
        if (v147)
        {
          v147->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v29)
        {
          *(_QWORD *)(v29 + 64) = 0;
          *(_OWORD *)(v29 + 32) = 0u;
          *(_OWORD *)(v29 + 48) = 0u;
          *(_OWORD *)v29 = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
        }
        if (v28)
          v30 = sub_20EB28F10(v26, (uint64_t)v28, v25, v13 + 168, 5);
        else
          v30 = sub_20EB2886C(v26, v25, v13 + 168, 5);
      }
      else
      {
        if (v147)
        {
          v147->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v29)
        {
          *(_QWORD *)(v29 + 64) = 0;
          a4 = 0uLL;
          *(_OWORD *)(v29 + 32) = 0u;
          *(_OWORD *)(v29 + 48) = 0u;
          *(_OWORD *)v29 = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
        }
        if (v28)
        {
          if (!*(_BYTE *)(v13 + 468))
          {
            a4.i64[0] = sub_20EB27C0C(v13 + 204, (double *)(v13 + 168), 0x32uLL, a4, v19, a6, a7).u64[0];
            *(_BYTE *)(v13 + 468) = 1;
          }
          v30 = sub_20EA8D684(v26, (uint64_t)v25, (int64x2_t *)(v13 + 168), (float *)(v13 + 204), v28, 5, *(double *)a4.i64, v19, *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
        }
        else
        {
          if (!*(_BYTE *)(v13 + 468))
          {
            a4.i64[0] = sub_20EB27C0C(v13 + 204, (double *)(v13 + 168), 0x32uLL, a4, v19, a6, a7).u64[0];
            *(_BYTE *)(v13 + 468) = 1;
          }
          v30 = sub_20EA8D684(v26, (uint64_t)v25, (int64x2_t *)(v13 + 168), (float *)(v13 + 204), 0, 5, *(double *)a4.i64, v19, *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
        }
      }
    }
    else
    {
      if (v15 <= 1)
      {
        if (!v15)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v20 = (uint64_t)v145;
        v22 = (_QWORD *)v147->f64;
        v21 = v148;
        v23 = v149;
        v24 = *v146;
        *v145 = *v146;
        *(_QWORD *)(v20 + 16) = 0x3FF0000000000000;
        if (v22)
        {
          *v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
        }
        if (v21)
        {
          *v21 = (float64x2_t)xmmword_210312EC0;
          v21[1] = (float64x2_t)unk_210312ED0;
          v24.f64[1] = 0.0;
          v21[2] = (float64x2_t)xmmword_210312EE0;
        }
        if (v23)
        {
          *(_QWORD *)(v23 + 64) = 0;
          v24.f64[1] = 0.0;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)v23 = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
        }
        goto LABEL_99;
      }
      if (v15 == 2)
      {
        v30 = sub_20EA8D22C((uint64_t)&v145, v13);
      }
      else
      {
        v38 = (double *)v145;
        v39 = (double *)v146;
        v41 = (_QWORD *)v147->f64;
        v40 = v148;
        v42 = v149;
        if (v147)
        {
          v147->f64[0] = 0.0;
          v41[1] = 0;
          v41[2] = 0;
        }
        if (v42)
        {
          *(_QWORD *)(v42 + 64) = 0;
          a4.i16[0] = 0;
          a4.i8[2] = 0;
          a4.i8[3] = 0;
          a4.i8[4] = 0;
          a4.i8[5] = 0;
          a4.i8[6] = 0;
          a4.i8[7] = 0;
          *(_OWORD *)(v42 + 32) = 0u;
          *(_OWORD *)(v42 + 48) = 0u;
          *(_OWORD *)v42 = 0u;
          *(_OWORD *)(v42 + 16) = 0u;
        }
        if (v40)
          v30 = sub_20EB27398(v38, (uint64_t)v40, v39, (int64x2_t *)(v13 + 168), 20, *(double *)a4.i64, v19, *(double *)a6.i64, *(double *)a7.i64, a8);
        else
          v30 = sub_20EB23DF0((uint64_t)v38, v39, (int64x2_t *)(v13 + 168), 20, *(double *)a4.i64, v19, *(double *)a6.i64, *(double *)a7.i64, a8, a9);
      }
    }
    goto LABEL_98;
  }
LABEL_51:
  v34 = (int8x16_t *)v145;
  if (v15 > 0xB)
  {
    if (v15 <= 0xD)
    {
      if (v15 != 13)
      {
        v61 = (_QWORD *)v147->f64;
        v60 = v148;
        v62 = v149;
        if (v147)
        {
          v147->f64[0] = 0.0;
          v61[1] = 0;
          v61[2] = 0;
        }
        if (v62)
        {
          *(_QWORD *)(v62 + 64) = 0;
          *(_OWORD *)(v62 + 32) = 0u;
          *(_OWORD *)(v62 + 48) = 0u;
          *(_OWORD *)v62 = 0u;
          *(_OWORD *)(v62 + 16) = 0u;
        }
        v34->i64[0] = 0;
        v34->i64[1] = 0;
        v34[1].i64[0] = 0;
        if (v60)
        {
          v60[1] = 0u;
          v60[2] = 0u;
          *v60 = 0u;
        }
        goto LABEL_215;
      }
      v30 = sub_20EB43734((double *)v13, (uint64_t)v145, (uint64_t)v146, v147, (uint64_t)v148, v149);
      goto LABEL_98;
    }
    v33 = v146;
    v35 = v147;
    v36 = v148;
    v37 = v149;
    if (v15 == 14)
    {
      if (v147)
      {
        v147->f64[0] = 0.0;
        v35->f64[1] = 0.0;
        v35[1].f64[0] = 0.0;
      }
      if (v37)
      {
        *(_QWORD *)(v37 + 64) = 0;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
      }
      v55 = (*(double *)v13 + *(double *)(v13 + 32)) * 0.5;
      v30 = sub_20EB253A0((uint64_t)v34, (uint64_t)v33, (double *)(v13 + 168), (double *)(v13 + 392), 0x14u, v55);
      if (!v36)
        goto LABEL_98;
      if ((v30 & 1) == 0)
        goto LABEL_215;
      if (!sub_20EB2498C(&v156, (uint64_t)&v157, &v154, (uint64_t)v34, (double *)(v13 + 168), v55))
        goto LABEL_215;
      v47.i64[0] = v34[1].i64[0];
      *(_QWORD *)&v48 = v158.i64[0];
      _Q3 = (float64x2_t)v157;
      v160 = *v34;
      v161 = v47.i64[0];
      v155 = 0;
      *(_QWORD *)&_Q5.f64[0] = v47.i64[0];
      *(_QWORD *)&_Q5.f64[1] = v160.i64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v159, _Q5), (float64x2_t)vzip2q_s64(v159, v158), (float64x2_t)vextq_s8(v160, v47, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v158, (float64x2_t)v160), 1), (float64x2_t)v159, (float64x2_t)v160).f64[0], *(double *)v158.i64)) < 0.00000001)goto LABEL_215;
LABEL_77:
      *(_QWORD *)&v58 = vextq_s8(v157, v157, 8uLL).u64[0];
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
      *((_QWORD *)&v58 + 1) = v159.i64[0];
      *((_QWORD *)&v48 + 1) = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
      v162 = _Q3;
      v163 = *(double *)v160.i64;
      v165 = vextq_s8(v160, v160, 8uLL).u64[0];
      v164 = v58;
      v167 = v47.i64[0];
      v166 = v48;
      sub_20E8BE424((uint64_t)&v150);
      v24.f64[0] = v151;
      a6.i64[1] = v152.i64[1];
      v59 = vzip2q_s64(v150, v152);
      v24.f64[1] = v153;
      *(int64x2_t *)v36 = vzip1q_s64(v150, v152);
      v36[1] = (float64x2_t)v59;
      v36[2] = v24;
      goto LABEL_99;
    }
LABEL_78:
    v30 = sub_20EB3CED8(v13, (uint64_t)v34, v33, v35, v36, v37);
    goto LABEL_98;
  }
  v43 = (double *)v146;
  v44 = (_QWORD *)v147->f64;
  v36 = v148;
  v45 = v149;
  if (v15 <= 9)
  {
    if (v15 == 9)
    {
      v30 = sub_20EB35004(v13, (uint64_t)v145, v146, v147, (unint64_t)v148, v149, *(double *)a4.i64, v19, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
    }
    else
    {
      if (v147)
      {
        v147->f64[0] = 0.0;
        v44[1] = 0;
        v44[2] = 0;
      }
      if (v45)
      {
        *(_QWORD *)(v45 + 64) = 0;
        a4.i16[0] = 0;
        a4.i8[2] = 0;
        a4.i8[3] = 0;
        a4.i8[4] = 0;
        a4.i8[5] = 0;
        a4.i8[6] = 0;
        a4.i8[7] = 0;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
      }
      if (v36)
      {
        v30 = sub_20EB277C4((uint64_t)v34, (uint64_t)v36, v43, v13 + 168, 20, *(double *)a4.i64, v19, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
      }
      else
      {
        v63 = sqrt(*v43 * *v43 + v43[1] * v43[1]);
        v30 = sub_20EB24018((uint64_t)v34, v43, (double *)(v13 + 168), 20, v63, v63, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
      }
    }
    goto LABEL_98;
  }
  if (v15 != 10)
  {
    v30 = sub_20EB38E20(v13, (uint64_t)v145, v146, v147, v148, v149);
    goto LABEL_98;
  }
  if (v147)
  {
    v147->f64[0] = 0.0;
    v44[1] = 0;
    v44[2] = 0;
  }
  if (v45)
  {
    *(_QWORD *)(v45 + 64) = 0;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_OWORD *)(v45 + 48) = 0u;
    *(_OWORD *)v45 = 0u;
    *(_OWORD *)(v45 + 16) = 0u;
  }
  v46 = (*(double *)v13 + *(double *)(v13 + 32)) * 0.5;
  v30 = sub_20EB24F38((uint64_t)v34, (uint64_t)v43, v13 + 168, (double *)(v13 + 280), 0x14u, v46);
  if (v36)
  {
    if ((v30 & 1) == 0)
      goto LABEL_215;
    if (!sub_20EB2450C(&v156, (uint64_t)&v157, &v154, (uint64_t)v34, (double *)(v13 + 168), v46))
      goto LABEL_215;
    v47.i64[0] = v34[1].i64[0];
    *(_QWORD *)&v48 = v158.i64[0];
    _Q3 = (float64x2_t)v157;
    v160 = *v34;
    v161 = v47.i64[0];
    v155 = 0;
    *(_QWORD *)&_Q5.f64[0] = v47.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v160.i64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v159, _Q5), (float64x2_t)vzip2q_s64(v159, v158), (float64x2_t)vextq_s8(v160, v47, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v158, (float64x2_t)v160), 1), (float64x2_t)v159, (float64x2_t)v160).f64[0], *(double *)v158.i64)) < 0.00000001)goto LABEL_215;
    goto LABEL_77;
  }
LABEL_98:
  if ((v30 & 1) == 0)
    goto LABEL_215;
LABEL_99:
  v24.f64[0] = v142;
  a6.i64[0] = v140;
  v64 = vsubq_f64(v24, (float64x2_t)a6);
  _Q1 = vsubq_f64(v141, v139);
  _Q4 = vmulq_f64(_Q1, _Q1);
  _D5 = _Q1.f64[1];
  __asm { FMLA            D4, D5, V1.D[1] }
  _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v64.f64[0], v64.f64[0]));
  v68 = vmulq_f64(v64, _Q4);
  v69 = vmulq_n_f64(_Q1, _Q4.f64[0]);
  v70 = (double *)a2[2];
  v71 = a2[3];
  _Q4.f64[0] = *v70;
  v141 = vmlaq_n_f64(v139, v69, *v70);
  *(_QWORD *)&v142 = *(_OWORD *)&vmlaq_f64((float64x2_t)a6, _Q4, v68);
  v72 = *(_DWORD *)(v71 + 992);
  if (v72 != -1)
  {
    if (v72 <= 7)
      goto LABEL_101;
LABEL_108:
    if (v72 > 0xB)
    {
      if (v72 <= 0xD)
      {
        if (v72 == 13 && v142 >= 0.00000001)
        {
          _Q0 = vdivq_f64(v141, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v142, 0));
          v77 = (*(double *)v71 + *(double *)(v71 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v80 = v77 * (_D2 * v77);
          v162 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v80* (*(double *)(v71 + 168)+ v77 * *(double *)(v71 + 224)+ v80* (*(double *)(v71 + 176)+ v77 * *(double *)(v71 + 232)+ v80* (*(double *)(v71 + 184)+ v77 * *(double *)(v71 + 240)+ v80* (*(double *)(v71 + 192)+ v77 * *(double *)(v71 + 248)+ v80* (*(double *)(v71 + 200)+ v77 * *(double *)(v71 + 256)+ v80
                                       * (*(double *)(v71 + 208)
                                        + v77 * *(double *)(v71 + 264)
                                        + v80 * (*(double *)(v71 + 216) + *(double *)(v71 + 272) * v77 + v80 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
          goto LABEL_141;
        }
LABEL_215:
        v105 = 0;
        *(_BYTE *)a1 = 0;
        goto LABEL_216;
      }
      if (v72 == 14)
        v73 = sub_20EB247C0(&v162, (uint64_t)&v141, (double *)(v71 + 168), (*(double *)v71 + *(double *)(v71 + 32)) * 0.5);
      else
        v73 = sub_20EB3E39C(v71, &v162, &v141);
    }
    else if (v72 > 9)
    {
      if (v72 == 10)
        v73 = sub_20EB24288(&v162, (uint64_t)&v141, (double *)(v71 + 168), (*(double *)v71 + *(double *)(v71 + 32)) * 0.5);
      else
        v73 = sub_20EB3A2E4(v71, &v162, &v141);
    }
    else
    {
      if (v72 != 9)
      {
        v87 = v142;
        _Q0 = v141;
        _D1 = v141.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v91 = sqrt(_D6);
        v92 = fabs(v142);
        v93 = fabs(v91);
        if (v92 >= v93)
          v94 = v93 / v92;
        else
          v94 = v92 / v93;
        if (v94 <= 0.414213562)
        {
          v111 = 1;
          v112 = 2;
          v110 = v94;
        }
        else
        {
          v110 = (v93 - v92) / (v92 + v93);
          if (v92 >= v93)
            v110 = -v110;
          v111 = -1;
          v112 = 1;
        }
        if (_D6 >= 0.00000001)
        {
          if (v92 < v93)
            v111 = -v111;
          else
            v112 = v94 > 0.414213562;
          v116 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v110 * v110), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v110 * v110), (float64x2_t)xmmword_210315370), v110 * v110 * (v110 * v110))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v110 * v110), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v110 * v110), (float64x2_t)xmmword_210315380), v110 * v110 * (v110 * v110))), v110 * v110 * (v110 * v110) * (v110 * v110 * (v110 * v110))));
          v117 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1);
          _ZF = v91 == INFINITY && v92 == INFINITY;
          v119 = v110 + v110 * vdivq_f64(v116, v117).f64[0];
          if (_ZF)
            v119 = 0.785398163;
          if (v91 == 0.0 && v142 == 0.0)
            v121 = 0.0;
          else
            v121 = v119;
          if (v142 < 0.0)
          {
            v112 = 4 - v112;
            v111 = -v111;
          }
          if (v91 >= 0.0)
            v122 = v112;
          else
            v122 = -v112;
          v123 = (double)v122;
          if (v91 >= 0.0)
            v124 = v111;
          else
            v124 = -v111;
          v125 = v123 * 3.061617e-17 + v123 * 0.785398163 + v121 * (double)v124;
          v84 = vmulq_n_f64(v141, 1.0/ v91* (v125* (v125* v125* (*(double *)(v71 + 168)+ v125* v125* (*(double *)(v71 + 176)+ v125* v125* (*(double *)(v71 + 184)+ v125* v125* (*(double *)(v71 + 192)+ v125* v125* (*(double *)(v71 + 200)
                       + v125 * v125 * (*(double *)(v71 + 208) + v125 * v125 * *(double *)(v71 + 216)))))))
                  + 1.0)));
          goto LABEL_142;
        }
        goto LABEL_213;
      }
      v73 = sub_20EB3641C(v71, &v162, &v141);
    }
    goto LABEL_140;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v72 = *(_DWORD *)(v71 + 992);
  if (v72 > 7)
    goto LABEL_108;
LABEL_101:
  if (v72 > 3)
  {
    if (v72 <= 5)
    {
      if (v72 == 5)
      {
        v74 = v141.f64[0] * v141.f64[0] + v141.f64[1] * v141.f64[1];
        if (v74 >= 0.00000001)
        {
          v106 = sqrt(v74);
          if (v106 <= v142)
          {
            v137 = v106 / v142 * 0.785398163
                 - v106 / v142 * (v106 / v142 + -1.0) * (v106 / v142 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v106 <= -v142)
            {
              v108 = v106 / v142 * 0.785398163
                   - v106 / v142 * (-1.0 - v106 / v142) * (v106 / v142 * -0.0663008339 + 0.244711287);
              v109 = 3.14159265;
            }
            else
            {
              v107 = fabs(v142 / v106);
              v108 = v142 / v106 * (v107 + -1.0) * (v107 * 0.0663008339 + 0.244711287) + v142 / v106 * -0.785398163;
              v109 = 1.57079633;
            }
            v137 = v108 + v109;
          }
          v138 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v71 + 168), *(int64x2_t *)(v71 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v71 + 168), *(int64x2_t *)(v71 + 184)), v137 * v137)), v137 * v137);
          v75 = (v137 + v137 * (v138.f64[0] + vmuld_lane_f64(v137 * v137 * (v137 * v137), v138, 1))) / v106;
        }
        else
        {
          if (v142 == 0.0)
            goto LABEL_215;
          v75 = 1.0 / v142;
        }
        v162.f64[0] = v141.f64[0] * v75;
        v162.f64[1] = v141.f64[1] * v75;
        goto LABEL_141;
      }
      v87 = v142;
      _Q0 = v141;
      _D1 = v141.f64[1];
      __asm { FMLA            D6, D1, V0.D[1] }
      v97 = sqrt(_D6);
      v98 = fabs(v142);
      v99 = fabs(v97);
      if (v98 >= v99)
        v100 = v99 / v98;
      else
        v100 = v98 / v99;
      if (v100 <= 0.414213562)
      {
        v114 = 1;
        v115 = 2;
        v113 = v100;
      }
      else
      {
        v113 = (v99 - v98) / (v98 + v99);
        if (v98 >= v99)
          v113 = -v113;
        v114 = -1;
        v115 = 1;
      }
      if (_D6 < 0.00000001)
      {
LABEL_213:
        v84 = vmulq_n_f64(_Q0, 1.0 / v87);
        goto LABEL_142;
      }
LABEL_188:
      v126 = *(_QWORD *)&v87;
      if (v98 < v99)
        v114 = -v114;
      else
        v115 = v100 > 0.414213562;
      v127 = v97 == INFINITY && v98 == INFINITY;
      v128 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v113 * v113), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v113 * v113), (float64x2_t)xmmword_210315370), v113 * v113 * (v113 * v113))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v113 * v113), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v113 * v113), (float64x2_t)xmmword_210315380), v113 * v113 * (v113 * v113))), v113 * v113 * (v113 * v113) * (v113 * v113 * (v113 * v113))));
      v129 = v113 + v113 * vdivq_f64(v128, (float64x2_t)vdupq_laneq_s64((int64x2_t)v128, 1)).f64[0];
      if (v127)
        v129 = 0.785398163;
      if (v97 == 0.0 && v87 == 0.0)
        v131 = 0.0;
      else
        v131 = v129;
      if (v126 < 0)
      {
        v115 = 4 - v115;
        v114 = -v114;
      }
      if (v97 >= 0.0)
        v132 = v115;
      else
        v132 = -v115;
      v133 = (double)v132;
      if (v97 >= 0.0)
        v134 = v114;
      else
        v134 = -v114;
      v135 = v133 * 3.061617e-17 + v133 * 0.785398163 + v131 * (double)v134;
      v136 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v71 + 168), *(int64x2_t *)(v71 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v71 + 168), *(int64x2_t *)(v71 + 184)), v135 * v135)), v135 * v135);
      v84 = vmulq_n_f64(_Q0, 1.0 / v97 * (v135 + v135 * (v136.f64[0] + vmuld_lane_f64(v135 * v135 * (v135 * v135), v136, 1))));
      goto LABEL_142;
    }
    if (v72 == 6)
    {
      v85 = vaddq_f64(vdivq_f64(v141, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v142, 0)), *(float64x2_t *)(v71 + 192));
      v86 = sqrt(vaddvq_f64(vmulq_f64(v85, v85)));
      v162 = vaddq_f64(*(float64x2_t *)(v71 + 208), vmulq_n_f64(v85, v86 * (v86 * (*(double *)(v71 + 168) + v86 * (*(double *)(v71 + 176) + *(double *)(v71 + 184) * v86)))+ 1.0));
      goto LABEL_141;
    }
    v73 = sub_20EB31FFC(v71, &v162, &v141);
LABEL_140:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    goto LABEL_215;
  }
  if (v72 <= 1)
  {
    if (!v72)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v142 >= 0.00000001)
    {
      v162 = vmulq_n_f64(v141, 1.0 / v142);
LABEL_141:
      v84 = v162;
      goto LABEL_142;
    }
    goto LABEL_215;
  }
  if (v72 != 2)
  {
    v87 = v142;
    _Q0 = v141;
    _D1 = v141.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v97 = sqrt(_D6);
    v98 = fabs(v142);
    v99 = fabs(v97);
    if (v98 >= v99)
      v100 = v99 / v98;
    else
      v100 = v98 / v99;
    if (v100 <= 0.414213562)
    {
      v114 = 1;
      v115 = 2;
      v113 = v100;
    }
    else
    {
      v113 = (v99 - v98) / (v98 + v99);
      if (v98 >= v99)
        v113 = -v113;
      v114 = -1;
      v115 = 1;
    }
    if (_D6 < 0.00000001)
      goto LABEL_213;
    goto LABEL_188;
  }
  if (!*(_DWORD *)(v71 + 212))
  {
    if (sub_20EB14380(&v162, &v141, (double *)(v71 + 168)))
      goto LABEL_141;
    goto LABEL_215;
  }
  if (v142 < 0.00000001)
    goto LABEL_215;
  _Q3 = vmulq_n_f64(v141, 1.0 / v142);
  _D0 = vmuld_lane_f64(1.0 / v142, v141, 1);
  __asm { FMLA            D2, D0, V3.D[1] }
  v84 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v71 + 192), *(int8x16_t *)(v71 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v71 + 192), *(float64x2_t *)(v71 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v71 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v71 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v71 + 184) * *(double *)&_D2))));
LABEL_142:
  v103 = a3[2] + *a3 * v84.f64[0] + vmuld_lane_f64(a3[1], v84, 1);
  v104 = vmuld_lane_f64(a3[4], v84, 1) + a3[5];
  *(double *)a1 = v103;
  *(double *)(a1 + 8) = v104;
  v105 = 1;
LABEL_216:
  *(_BYTE *)(a1 + 16) = v105;
}

_QWORD *sub_20EB17798(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9C4D38;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EB177DC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9C4D38;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EB17830(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_24C9C4D88;
  v2 = a1[7];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C80B2834900);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB17898(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_24C9C4D88;
  v2 = a1[7];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C80B2834900);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EB17910(uint64_t a1@<X0>, double *a2@<X1>, int8x16_t *a3@<X2>, float64x2_t *a4@<X8>)
{
  _QWORD *v8;
  _BOOL4 v9;
  float64x2_t *v10;
  unsigned int v11;
  unsigned int v12;
  float64x2_t *v13;
  unsigned int v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  int v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  float64_t v78;
  float64_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  unint64_t v84;
  float64x2_t v85;
  unint64_t v86;
  float64x2_t v87;
  unint64_t v88;
  float64x2_t v89;
  unint64_t v90;
  float64x2_t v91;
  unint64_t v92;
  float64x2_t v93;
  unint64_t v94;
  float64x2_t v95;
  unint64_t v96;
  float64x2_t v97;
  unint64_t v98;
  float64x2_t v99;
  unint64_t v100;
  float64x2_t v101;
  unint64_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float64x2_t v106;
  int8x16_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  int8x16_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  unint64_t v340;
  float64x2_t v341;
  unint64_t v342;
  float64x2_t v343;
  unint64_t v344;
  float64x2_t v345;
  unint64_t v346;
  float64x2_t v347;
  unint64_t v348;
  float64x2_t v349;
  unint64_t v350;
  float64x2_t v351;
  unint64_t v352;
  float64x2_t v353;
  unint64_t v354;
  float64x2_t v355;
  unint64_t v356;
  float64x2_t v357;
  unint64_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  _BYTE v363[32];
  double v364;
  double v365;
  double v366;
  double v367;
  float64_t v368;
  float64_t v369;
  float64_t v370;
  float64_t v371;
  double v372;
  double v373;
  double v374;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  _OWORD v386[10];
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  int8x16_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  uint64_t v447;

  v447 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 8);
  v9 = a3 == 0;
  if (a3)
    v10 = (float64x2_t *)&v368;
  else
    v10 = 0;
  sub_20EA95FCC((double **)(a1 + 8), &v372, v10, *a2);
  v12 = v11;
  if (v9)
    v13 = 0;
  else
    v13 = (float64x2_t *)v363;
  sub_20EA95FCC((double **)(a1 + 32), &v364, v13, a2[1]);
  v15 = *(double *)(*v8 + 8 * (v12 + 1)) - *(double *)(*v8 + 8 * v12);
  v16 = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (v14 + 1)) - *(double *)(*(_QWORD *)(a1 + 32) + 8 * v14);
  v17 = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = (float64x2_t *)(v18 + 320 * (v17 * v14 + v12));
  v20 = (float64x2_t *)(v18 + 320 * (v17 * v14 + v12 + 1));
  v21 = v17 * (v14 + 1);
  v22 = (float64x2_t *)(v18 + 320 * (v21 + v12));
  v23 = (float64x2_t *)(v18 + 320 * (v21 + v12 + 1));
  v319 = vmulq_n_f64(v19[8], v15);
  v321 = vmulq_n_f64(v19[9], v15);
  v315 = vmulq_n_f64(v19[6], v15);
  v317 = vmulq_n_f64(v19[7], v15);
  v300 = v19[4];
  v303 = vmulq_n_f64(v19[5], v15);
  v307 = vmulq_n_f64(v20[9], v15);
  v309 = vmulq_n_f64(v20[8], v15);
  v311 = vmulq_n_f64(v20[7], v15);
  v313 = vmulq_n_f64(v20[6], v15);
  v305 = vmulq_n_f64(v20[5], v15);
  v327 = vmulq_n_f64(v22[9], v15);
  v329 = vmulq_n_f64(v22[8], v15);
  v333 = vmulq_n_f64(v22[7], v15);
  v335 = vmulq_n_f64(v22[6], v15);
  v294 = v20[4];
  v297 = v22[4];
  v339 = vmulq_n_f64(v23[8], v15);
  v341 = vmulq_n_f64(v23[9], v15);
  v337 = vmulq_n_f64(v23[7], v15);
  v331 = vmulq_n_f64(v23[6], v15);
  v292 = v23[4];
  v323 = vmulq_n_f64(v23[5], v15);
  v325 = vmulq_n_f64(v22[5], v15);
  v343 = vmulq_n_f64(v19[14], v16);
  v345 = vmulq_n_f64(v19[13], v16);
  v347 = vmulq_n_f64(v19[12], v16);
  v349 = vmulq_n_f64(v19[11], v16);
  v351 = vmulq_n_f64(v19[10], v16);
  v24 = vmulq_n_f64(v20[14], v16);
  v25 = vmulq_n_f64(v20[13], v16);
  v26 = vmulq_n_f64(v20[12], v16);
  v27 = vmulq_n_f64(v20[11], v16);
  v28 = vmulq_n_f64(v20[10], v16);
  v29 = v15 * v16;
  v359 = vmulq_n_f64(v22[13], v16);
  v361 = vmulq_n_f64(v22[14], v16);
  v355 = vmulq_n_f64(v22[11], v16);
  v357 = vmulq_n_f64(v22[12], v16);
  v353 = vmulq_n_f64(v22[10], v16);
  v30 = vmulq_n_f64(v23[14], v16);
  v31 = vmulq_n_f64(v23[13], v16);
  v32 = vmulq_n_f64(v23[12], v16);
  v33 = vmulq_n_f64(v23[11], v16);
  v34 = vmulq_n_f64(v23[10], v16);
  v35 = vmulq_n_f64(v19[19], v15 * v16);
  v36 = vmulq_n_f64(v19[18], v15 * v16);
  v37 = vmulq_n_f64(v19[17], v15 * v16);
  v38 = vmulq_n_f64(v19[16], v15 * v16);
  v39 = vmulq_n_f64(v19[15], v15 * v16);
  v40 = vmulq_n_f64(v20[19], v29);
  v41 = vmulq_n_f64(v20[18], v29);
  v42 = vmulq_n_f64(v20[17], v29);
  v43 = vmulq_n_f64(v20[16], v29);
  v44 = vmulq_n_f64(v20[15], v29);
  v45 = vmulq_n_f64(v22[19], v29);
  v46 = vmulq_n_f64(v22[18], v29);
  v63 = vmulq_n_f64(v22[17], v29);
  v290 = (int8x16_t)vmulq_n_f64(v22[16], v29);
  v47 = vmulq_n_f64(v22[15], v29);
  v48 = vmulq_n_f64(v23[19], v29);
  v49 = vmulq_n_f64(v23[18], v29);
  v50 = vmulq_n_f64(v23[17], v29);
  v51 = vmulq_n_f64(v23[16], v29);
  v52 = vmulq_n_f64(v23[15], v29);
  v53 = v19[1];
  v376 = *v19;
  v377 = v53;
  v54 = v19[3];
  v378 = v19[2];
  v379 = v54;
  v380 = v300;
  v55 = v20[1];
  v381 = *v20;
  v382 = v55;
  v56 = v20[3];
  v383 = v20[2];
  v384 = v56;
  v385 = v294;
  v57 = v22[1];
  v387 = *v22;
  v388 = v57;
  v58 = v22[3];
  v389 = v22[2];
  v390 = v58;
  v59 = *v23;
  v60 = v23[1];
  v391 = v297;
  v392 = v59;
  v61 = v23[2];
  v62 = v23[3];
  v393 = v60;
  v394 = v61;
  v395 = v62;
  v396 = v292;
  v386[4] = v321;
  v386[3] = v319;
  v386[2] = v317;
  v386[1] = v315;
  v386[0] = v303;
  v386[8] = v309;
  v386[9] = v307;
  v386[6] = v313;
  v386[7] = v311;
  v386[5] = v305;
  v399 = v333;
  v400 = v329;
  v397 = v325;
  v398 = v335;
  v405 = v339;
  v406 = v341;
  v403 = v331;
  v404 = v337;
  v401 = v327;
  v402 = v323;
  v409 = v347;
  v410 = v345;
  v407 = v351;
  v408 = v349;
  v415 = v25;
  v416 = v24;
  v413 = v27;
  v414 = v26;
  v411 = v343;
  v412 = v28;
  v260 = v28;
  v262 = v38;
  v264 = v37;
  v266 = v36;
  v419 = v37;
  v420 = v36;
  v417 = v39;
  v418 = v38;
  v259 = v39;
  v269 = v41;
  v425 = v41;
  v426 = v40;
  v271 = v42;
  v273 = v43;
  v423 = v43;
  v424 = v42;
  v275 = v44;
  v421 = v35;
  v422 = v44;
  v429 = v357;
  v430 = v359;
  v427 = v353;
  v428 = v355;
  v298 = v30;
  v301 = v50;
  v435 = v31;
  v436 = v30;
  v295 = v51;
  v287 = v33;
  v433 = v33;
  v434 = v32;
  v431 = v361;
  v432 = v34;
  v283 = v45;
  v285 = v34;
  v279 = v63;
  v281 = v46;
  v439 = v63;
  v440 = v46;
  *(_QWORD *)&v63.f64[0] = v290.i64[0];
  v437 = v47;
  v438 = v290;
  v445 = v49;
  v446 = v48;
  v443 = v51;
  v444 = v50;
  v441 = v45;
  v442 = v52;
  if (v9)
  {
    v155 = v49;
    v156 = v52;
    v157 = v48;
    v159 = v319;
    v158 = v321;
    *(_QWORD *)&v158.f64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
    *(_QWORD *)&v159.f64[1] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
    v161 = v315;
    v160 = v317;
    *(_QWORD *)&v160.f64[1] = vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL).u64[0];
    *(_QWORD *)&v161.f64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
    v162 = v303;
    v163 = v305;
    *(_QWORD *)&v162.f64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
    v164 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v376, v372), (float64x2_t)0), vmulq_n_f64(v381, v373)), vmulq_n_f64(v162, v374));
    v165 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v377, v372), (float64x2_t)0), vmulq_n_f64(v382, v373)), vmulq_n_f64(v161, v374));
    v166 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v378, v372), (float64x2_t)0), vmulq_n_f64(v383, v373)), vmulq_n_f64(v160, v374));
    v167 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v379, v372), (float64x2_t)0), vmulq_n_f64(v384, v373)), vmulq_n_f64(v159, v374));
    v168 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v380, v372), (float64x2_t)0), vmulq_n_f64(v385, v373)), vmulq_n_f64(v158, v374));
    *(_QWORD *)&v163.f64[1] = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
    v170 = v311;
    v169 = v313;
    *(_QWORD *)&v169.f64[1] = vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL).u64[0];
    *(_QWORD *)&v170.f64[1] = vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL).u64[0];
    v172 = v307;
    v171 = v309;
    *(_QWORD *)&v171.f64[1] = vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL).u64[0];
    *(_QWORD *)&v172.f64[1] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
    v173 = vaddq_f64(v167, vmulq_n_f64(v171, v375));
    v174 = vaddq_f64(v166, vmulq_n_f64(v170, v375));
    v175 = vmulq_n_f64(vaddq_f64(v164, vmulq_n_f64(v163, v375)), v364);
    v176 = vmulq_n_f64(vaddq_f64(v165, vmulq_n_f64(v169, v375)), v364);
    v177 = vmulq_n_f64(v173, v364);
    v178 = vmulq_n_f64(vaddq_f64(v168, vmulq_n_f64(v172, v375)), v364);
    v180 = v325;
    v179 = v327;
    *(_QWORD *)&v180.f64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u64[0];
    v182 = v333;
    v181 = v335;
    *(_QWORD *)&v181.f64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
    *(_QWORD *)&v182.f64[1] = vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL).u64[0];
    v183 = v329;
    *(_QWORD *)&v183.f64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u64[0];
    *(_QWORD *)&v179.f64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
    v184 = vaddq_f64(vmulq_n_f64(v179, v374), vaddq_f64(vaddq_f64(vmulq_n_f64(v391, v372), (float64x2_t)0), vmulq_n_f64(v396, v373)));
    v185 = vaddq_f64(vmulq_n_f64(v183, v374), vaddq_f64(vaddq_f64(vmulq_n_f64(v390, v372), (float64x2_t)0), vmulq_n_f64(v395, v373)));
    v186 = vaddq_f64(vmulq_n_f64(v182, v374), vaddq_f64(vaddq_f64(vmulq_n_f64(v389, v372), (float64x2_t)0), vmulq_n_f64(v394, v373)));
    v187 = vaddq_f64(vmulq_n_f64(v181, v374), vaddq_f64(vaddq_f64(vmulq_n_f64(v388, v372), (float64x2_t)0), vmulq_n_f64(v393, v373)));
    v188 = vaddq_f64(vmulq_n_f64(v180, v374), vaddq_f64(vaddq_f64(vmulq_n_f64(v387, v372), (float64x2_t)0), vmulq_n_f64(v392, v373)));
    v190 = v339;
    v189 = v341;
    *(_QWORD *)&v189.f64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
    *(_QWORD *)&v190.f64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
    v191 = v337;
    *(_QWORD *)&v191.f64[1] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
    v192 = v331;
    *(_QWORD *)&v192.f64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u64[0];
    v193 = v323;
    *(_QWORD *)&v193.f64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
    v194 = vaddq_f64(vmulq_n_f64(v193, v375), v188);
    v195 = vaddq_f64(vmulq_n_f64(v191, v375), v186);
    v196 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v189, v375), v184), v365);
    v197 = vaddq_f64(vaddq_f64(v175, (float64x2_t)0), vmulq_n_f64(v194, v365));
    v198 = vaddq_f64(vaddq_f64(v176, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v192, v375), v187), v365));
    v199 = vaddq_f64(vaddq_f64(vmulq_n_f64(v174, v364), (float64x2_t)0), vmulq_n_f64(v195, v365));
    v200 = vaddq_f64(vaddq_f64(v177, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v190, v375), v185), v365));
    v201 = v343;
    v202 = v345;
    *(_QWORD *)&v201.f64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
    *(_QWORD *)&v202.f64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
    v203 = v347;
    v204 = v349;
    *(_QWORD *)&v203.f64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u64[0];
    *(_QWORD *)&v204.f64[1] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
    v205 = v351;
    *(_QWORD *)&v205.f64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
    v206 = v260;
    *(_QWORD *)&v206.f64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
    v208 = v26;
    v207 = v27;
    *(_QWORD *)&v207.f64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
    *(_QWORD *)&v208.f64[1] = vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
    v210 = v24;
    v209 = v25;
    *(_QWORD *)&v209.f64[1] = vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL).u64[0];
    *(_QWORD *)&v210.f64[1] = vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u64[0];
    v211 = vaddq_f64(vaddq_f64(v178, (float64x2_t)0), v196);
    v212 = vaddq_f64(vaddq_f64(vmulq_n_f64(v201, v372), (float64x2_t)0), vmulq_n_f64(v210, v373));
    v213 = vaddq_f64(vaddq_f64(vmulq_n_f64(v202, v372), (float64x2_t)0), vmulq_n_f64(v209, v373));
    v214 = vaddq_f64(vaddq_f64(vmulq_n_f64(v203, v372), (float64x2_t)0), vmulq_n_f64(v208, v373));
    v215 = vaddq_f64(vaddq_f64(vmulq_n_f64(v204, v372), (float64x2_t)0), vmulq_n_f64(v207, v373));
    v216 = vaddq_f64(vaddq_f64(vmulq_n_f64(v205, v372), (float64x2_t)0), vmulq_n_f64(v206, v373));
    v217 = v35;
    *(_QWORD *)&v217.f64[1] = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
    v219 = v264;
    v218 = v266;
    *(_QWORD *)&v218.f64[1] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
    *(_QWORD *)&v219.f64[1] = vextq_s8((int8x16_t)v219, (int8x16_t)v219, 8uLL).u64[0];
    v220 = v262;
    *(_QWORD *)&v220.f64[1] = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
    v221 = v259;
    *(_QWORD *)&v221.f64[1] = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    v222 = vaddq_f64(v216, vmulq_n_f64(v221, v374));
    v223 = vaddq_f64(v215, vmulq_n_f64(v220, v374));
    v224 = vaddq_f64(v214, vmulq_n_f64(v219, v374));
    v225 = vaddq_f64(v213, vmulq_n_f64(v218, v374));
    v227 = v273;
    v226 = v275;
    *(_QWORD *)&v226.f64[1] = vextq_s8((int8x16_t)v226, (int8x16_t)v226, 8uLL).u64[0];
    *(_QWORD *)&v227.f64[1] = vextq_s8((int8x16_t)v227, (int8x16_t)v227, 8uLL).u64[0];
    v229 = v269;
    v228 = v271;
    *(_QWORD *)&v228.f64[1] = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
    *(_QWORD *)&v229.f64[1] = vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
    v230 = v40;
    *(_QWORD *)&v230.f64[1] = vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
    v231 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(v212, vmulq_n_f64(v217, v374)), vmulq_n_f64(v230, v375)), v366), v211);
    v232 = vaddq_f64(vmulq_n_f64(vaddq_f64(v225, vmulq_n_f64(v229, v375)), v366), v200);
    v233 = vaddq_f64(vmulq_n_f64(vaddq_f64(v224, vmulq_n_f64(v228, v375)), v366), v199);
    v234 = vaddq_f64(vmulq_n_f64(vaddq_f64(v223, vmulq_n_f64(v227, v375)), v366), v198);
    v235 = vaddq_f64(vmulq_n_f64(vaddq_f64(v222, vmulq_n_f64(v226, v375)), v366), v197);
    v237 = v353;
    v236 = v355;
    *(_QWORD *)&v237.f64[1] = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
    *(_QWORD *)&v236.f64[1] = vextq_s8((int8x16_t)v236, (int8x16_t)v236, 8uLL).u64[0];
    v238 = v357;
    v239 = v359;
    *(_QWORD *)&v238.f64[1] = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    *(_QWORD *)&v239.f64[1] = vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
    v240 = v361;
    *(_QWORD *)&v240.f64[1] = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
    v241 = v298;
    *(_QWORD *)&v241.f64[1] = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u64[0];
    v242 = v31;
    *(_QWORD *)&v242.f64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u64[0];
    v244 = v287;
    v243 = v32;
    *(_QWORD *)&v243.f64[1] = vextq_s8((int8x16_t)v243, (int8x16_t)v243, 8uLL).u64[0];
    *(_QWORD *)&v244.f64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
    v245 = v285;
    *(_QWORD *)&v245.f64[1] = vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u64[0];
    v246 = vaddq_f64(vaddq_f64(vmulq_n_f64(v237, v372), (float64x2_t)0), vmulq_n_f64(v245, v373));
    v247 = vaddq_f64(vaddq_f64(vmulq_n_f64(v236, v372), (float64x2_t)0), vmulq_n_f64(v244, v373));
    v248 = vaddq_f64(vaddq_f64(vmulq_n_f64(v238, v372), (float64x2_t)0), vmulq_n_f64(v243, v373));
    v249 = vaddq_f64(vaddq_f64(vmulq_n_f64(v239, v372), (float64x2_t)0), vmulq_n_f64(v242, v373));
    v251 = v47;
    v250 = v279;
    *(_QWORD *)&v251.f64[1] = vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL).u64[0];
    *(_QWORD *)&v63.f64[1] = vextq_s8(v290, v290, 8uLL).u64[0];
    *(_QWORD *)&v250.f64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u64[0];
    v252 = v281;
    v253 = v283;
    *(_QWORD *)&v252.f64[1] = vextq_s8((int8x16_t)v252, (int8x16_t)v252, 8uLL).u64[0];
    *(_QWORD *)&v253.f64[1] = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u64[0];
    v254 = vaddq_f64(v249, vmulq_n_f64(v252, v374));
    v255 = vaddq_f64(v248, vmulq_n_f64(v250, v374));
    *(_QWORD *)&v157.f64[1] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
    *(_QWORD *)&v155.f64[1] = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
    v256 = v301;
    *(_QWORD *)&v256.f64[1] = vextq_s8((int8x16_t)v256, (int8x16_t)v256, 8uLL).u64[0];
    v257 = v295;
    *(_QWORD *)&v257.f64[1] = vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL).u64[0];
    *(_QWORD *)&v156.f64[1] = vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL).u64[0];
    v258 = vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v240, v372), (float64x2_t)0), vmulq_n_f64(v241, v373)), vmulq_n_f64(v253, v374)), vmulq_n_f64(v157, v375)), v367);
    v93 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(v246, vmulq_n_f64(v251, v374)), vmulq_n_f64(v156, v375)), v367), v235);
    v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
    v95 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(v247, vmulq_n_f64(v63, v374)), vmulq_n_f64(v257, v375)), v367), v234);
    v96 = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
    v97 = vaddq_f64(vmulq_n_f64(vaddq_f64(v255, vmulq_n_f64(v256, v375)), v367), v233);
    v98 = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
    v99 = vaddq_f64(vmulq_n_f64(vaddq_f64(v254, vmulq_n_f64(v155, v375)), v367), v232);
    v100 = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
    v101 = vaddq_f64(v258, v231);
    v102 = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
  }
  else
  {
    v64 = 0;
    v65.f64[0] = v374;
    v66.f64[0] = v375;
    v67.f64[0] = v372;
    v68.f64[0] = v373;
    v69.f64[0] = v372;
    v69.f64[1] = v372;
    v330 = v69;
    v69.f64[1] = v372;
    v328 = v69;
    v69.f64[0] = v372;
    v326 = v69;
    v69.f64[0] = v372;
    v69.f64[1] = v372;
    v324 = v69;
    v69.f64[0] = v369;
    v70.f64[0] = v368;
    v67.f64[1] = v372;
    v334 = v67;
    v67.f64[0] = v368;
    v67.f64[1] = v368;
    v318 = v67;
    v71 = v368;
    v72.f64[0] = v368;
    v73.f64[0] = v373;
    v74.f64[0] = v373;
    v75 = v373;
    v76.f64[0] = v373;
    v77.f64[0] = v369;
    v78 = v369;
    v79 = v369;
    v80.f64[0] = v369;
    v81.f64[0] = v374;
    v67.f64[1] = v368;
    v89.f64[1] = v368;
    v314 = v89;
    v316 = v67;
    v72.f64[1] = v368;
    v70.f64[1] = v368;
    v73.f64[1] = v373;
    v310 = v73;
    v312 = v72;
    v74.f64[1] = v373;
    v91.f64[1] = v373;
    v306 = v91;
    v308 = v74;
    v76.f64[1] = v373;
    v68.f64[1] = v373;
    v332 = v68;
    v77.f64[1] = v369;
    v302 = v77;
    v304 = v76;
    v85.f64[1] = v369;
    v87.f64[1] = v369;
    v296 = v87;
    v299 = v85;
    v80.f64[1] = v369;
    v69.f64[1] = v369;
    v320 = v70;
    v322 = v69;
    v81.f64[1] = v374;
    v291 = v81;
    v293 = v80;
    v67.f64[0] = v374;
    v68.f64[0] = v374;
    v67.f64[1] = v374;
    v68.f64[1] = v374;
    v288 = v68;
    v289 = v67;
    v67.f64[0] = v374;
    v67.f64[1] = v374;
    v286 = v67;
    v65.f64[1] = v374;
    v338 = v65;
    v65.f64[0] = v370;
    v67.f64[0] = v371;
    v68.f64[0] = v370;
    v68.f64[1] = v370;
    v280 = v68;
    v68.f64[1] = v370;
    v278 = v68;
    v68.f64[0] = v370;
    v277 = v68;
    v68.f64[0] = v370;
    v68.f64[1] = v370;
    v65.f64[1] = v370;
    v284 = v65;
    v65.f64[0] = v375;
    v65.f64[1] = v375;
    v274 = v65;
    v276 = v68;
    v65.f64[1] = v375;
    v272 = v65;
    v65.f64[0] = v375;
    v270 = v65;
    v65.f64[0] = v375;
    v65.f64[1] = v375;
    v268 = v65;
    v66.f64[1] = v375;
    v336 = v66;
    v65.f64[0] = v371;
    v65.f64[1] = v371;
    v267 = v65;
    v65.f64[1] = v371;
    v265 = v65;
    v65.f64[0] = v371;
    v263 = v65;
    v65.f64[0] = v371;
    v65.f64[1] = v371;
    v261 = v65;
    v67.f64[1] = v371;
    v282 = v67;
    v82 = (float64x2_t *)v386;
    v83.f64[0] = 0.0;
    v84 = 0;
    v85.f64[0] = 0.0;
    v86 = 0;
    v87.f64[0] = 0.0;
    v88 = 0;
    v89.f64[0] = 0.0;
    v90 = 0;
    v91.f64[0] = 0.0;
    v92 = 0;
    v93.f64[0] = 0.0;
    v94 = 0;
    v95.f64[0] = 0.0;
    v96 = 0;
    v97.f64[0] = 0.0;
    v98 = 0;
    v99.f64[0] = 0.0;
    v100 = 0;
    v101.f64[0] = 0.0;
    v102 = 0;
    v103 = 0uLL;
    v104 = 0uLL;
    v105 = 0uLL;
    v106 = 0uLL;
    v107 = 0uLL;
    do
    {
      v340 = v84;
      v342 = v100;
      v344 = v94;
      v346 = v102;
      v348 = v96;
      v350 = v98;
      v352 = v92;
      v354 = v86;
      v356 = v88;
      v358 = v90;
      v360 = (float64x2_t)v105;
      v362 = (float64x2_t)v104;
      v109 = v82[-10];
      v108 = v82[-9];
      v110 = v82[-8];
      v111 = v82[-7];
      v112 = v82[-6];
      v113 = v82[-5];
      v115 = v82[-4];
      v114 = v82[-3];
      v116 = v82[-2];
      v117 = v82[-1];
      v118 = (float64x2_t)v107;
      v119 = (float64x2_t)v103;
      v120 = vaddq_f64(vaddq_f64(vmulq_f64(v328, v108), (float64x2_t)0), vmulq_f64(v304, v115));
      v121 = vaddq_f64(vaddq_f64(vmulq_f64(v326, v110), (float64x2_t)0), vmulq_f64(v306, v114));
      v122 = vaddq_f64(vaddq_f64(vmulq_f64(v324, v111), (float64x2_t)0), vmulq_f64(v308, v116));
      v123 = vaddq_f64(vaddq_f64(vmulq_f64(v334, v112), (float64x2_t)0), vmulq_f64(v310, v117));
      v124 = vaddq_f64(vaddq_f64(vmulq_f64(v318, v112), (float64x2_t)0), vmulq_f64(v322, v117));
      v125 = vaddq_f64(vaddq_f64(vmulq_f64(v316, v111), (float64x2_t)0), vmulq_f64(v293, v116));
      v126 = vaddq_f64(vaddq_f64(vmulq_f64(v314, v110), (float64x2_t)0), vmulq_f64(v296, v114));
      v127 = vaddq_f64(vaddq_f64(vmulq_f64(v312, v108), (float64x2_t)0), vmulq_f64(v299, v115));
      v129 = v82[2];
      v128 = v82[3];
      v130 = v82[1];
      v131 = v82[4];
      v132 = v82[5];
      v133 = vaddq_f64(v123, vmulq_f64(v338, v131));
      v134 = vaddq_f64(v122, vmulq_f64(v286, v128));
      v135 = vaddq_f64(v121, vmulq_f64(v288, v129));
      v136 = vaddq_f64(v120, vmulq_f64(v289, v130));
      v137 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v330, v109), (float64x2_t)0), vmulq_f64(v332, v113)), vmulq_f64(v291, *v82));
      v138 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v320, v109), (float64x2_t)0), vmulq_f64(v302, v113)), vmulq_f64(v284, *v82));
      v139 = vaddq_f64(v127, vmulq_f64(v276, v130));
      v140 = vaddq_f64(v126, vmulq_f64(v277, v129));
      v141 = vaddq_f64(v125, vmulq_f64(v278, v128));
      v142 = v82[6];
      v143 = v82[7];
      v144 = vaddq_f64(v124, vmulq_f64(v280, v131));
      v145 = v82[8];
      v146 = v82[9];
      v147 = vaddq_f64(v137, vmulq_f64(v336, v132));
      v148 = vaddq_f64(v136, vmulq_f64(v268, v142));
      v149 = vaddq_f64(v135, vmulq_f64(v270, v143));
      v150 = vaddq_f64(v134, vmulq_f64(v272, v145));
      v151 = vaddq_f64(v133, vmulq_f64(v274, v146));
      v152 = vaddq_f64(v141, vmulq_f64(v261, v145));
      v153 = vaddq_f64(v139, vmulq_f64(v265, v142));
      *(_QWORD *)&v93.f64[1] = v344;
      v133.f64[0] = *(double *)((char *)&v364 + v64);
      *(_QWORD *)&v95.f64[1] = v348;
      v93 = vaddq_f64(v93, vmulq_n_f64(v147, v133.f64[0]));
      v95 = vaddq_f64(v95, vmulq_n_f64(v148, v133.f64[0]));
      *(_QWORD *)&v97.f64[1] = v350;
      v97 = vaddq_f64(v97, vmulq_n_f64(v149, v133.f64[0]));
      *(_QWORD *)&v99.f64[1] = v342;
      *(_QWORD *)&v101.f64[1] = v346;
      v99 = vaddq_f64(v99, vmulq_n_f64(v150, v133.f64[0]));
      v101 = vaddq_f64(v101, vmulq_n_f64(v151, v133.f64[0]));
      v154 = vmulq_n_f64(vaddq_f64(v138, vmulq_f64(v267, v132)), v133.f64[0]);
      v106 = vaddq_f64(vmulq_n_f64(vaddq_f64(v144, vmulq_f64(v282, v146)), v133.f64[0]), v106);
      v105 = (int8x16_t)vaddq_f64(vmulq_n_f64(v152, v133.f64[0]), v360);
      v104 = (int8x16_t)vaddq_f64(vmulq_n_f64(vaddq_f64(v140, vmulq_f64(v263, v143)), v133.f64[0]), v362);
      v103 = (int8x16_t)vaddq_f64(vmulq_n_f64(v153, v133.f64[0]), v119);
      v107 = (int8x16_t)vaddq_f64(v154, v118);
      *(_QWORD *)&v83.f64[1] = v340;
      *(_QWORD *)&v85.f64[1] = v354;
      v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      v96 = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
      *(_QWORD *)&v87.f64[1] = v356;
      *(_QWORD *)&v89.f64[1] = v358;
      v98 = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
      v140.f64[0] = *(float64_t *)&v363[v64];
      *(_QWORD *)&v91.f64[1] = v352;
      v100 = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
      v91 = vaddq_f64(v91, vmulq_n_f64(v151, v140.f64[0]));
      v102 = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
      v89 = vaddq_f64(v89, vmulq_n_f64(v150, v140.f64[0]));
      v87 = vaddq_f64(v87, vmulq_n_f64(v149, v140.f64[0]));
      v85 = vaddq_f64(v85, vmulq_n_f64(v148, v140.f64[0]));
      v83 = vaddq_f64(v83, vmulq_n_f64(v147, v140.f64[0]));
      v84 = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v86 = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
      v88 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
      v64 += 8;
      v90 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      v82 += 20;
      v92 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
    }
    while (v64 != 32);
    v107.i64[1] = vextq_s8(v107, v107, 8uLL).u64[0];
    v103.i64[1] = vextq_s8(v103, v103, 8uLL).u64[0];
    *a3 = v107;
    a3[1] = v103;
    v104.i64[1] = vextq_s8(v104, v104, 8uLL).u64[0];
    v105.i64[1] = vextq_s8(v105, v105, 8uLL).u64[0];
    a3[2] = v104;
    a3[3] = v105;
    *(_QWORD *)&v106.f64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
    *(_QWORD *)&v83.f64[1] = v84;
    a3[4] = (int8x16_t)v106;
    a3[5] = (int8x16_t)v83;
    *(_QWORD *)&v85.f64[1] = v86;
    *(_QWORD *)&v87.f64[1] = v88;
    a3[6] = (int8x16_t)v85;
    a3[7] = (int8x16_t)v87;
    *(_QWORD *)&v89.f64[1] = v90;
    *(_QWORD *)&v91.f64[1] = v92;
    a3[8] = (int8x16_t)v89;
    a3[9] = (int8x16_t)v91;
  }
  *(_QWORD *)&v93.f64[1] = v94;
  *(_QWORD *)&v95.f64[1] = v96;
  *a4 = v93;
  a4[1] = v95;
  *(_QWORD *)&v97.f64[1] = v98;
  *(_QWORD *)&v99.f64[1] = v100;
  a4[2] = v97;
  a4[3] = v99;
  *(_QWORD *)&v101.f64[1] = v102;
  a4[4] = v101;
}

void sub_20EB189E8(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_20EB189F4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double *i;
  uint64_t v9;
  unsigned int v10;
  double *v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;

  v1 = *(_DWORD *)(a1 + 72);
  v2 = *(_DWORD *)(a1 + 76);
  v34 = v1;
  v33 = v2;
  v3 = *(double **)(a1 + 8);
  v4 = *(double **)(a1 + 16);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = 2654435769;
      if ((*(_QWORD *)v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v6 = llround(*v3 / 0.001) - 1640531527;
      v5 ^= (v5 >> 2) + (v5 << 6) + v6;
      ++v3;
    }
    while (v3 != v4);
  }
  v7 = *(double **)(a1 + 32);
  for (i = *(double **)(a1 + 40); v7 != i; ++v7)
  {
    v9 = 2654435769;
    if ((*(_QWORD *)v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v9 = llround(*v7 / 0.001) - 1640531527;
    v5 ^= (v5 >> 2) + (v5 << 6) + v9;
  }
  v10 = v2 * v1;
  if (v10)
  {
    v11 = *(double **)(a1 + 56);
    v12 = &v11[40 * v10];
    do
    {
      v21 = 2654435769;
      if ((*(_QWORD *)v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v21 = llround(*v11 / 0.001) - 1640531527;
      v22 = 2654435769;
      if (((_QWORD)v11[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v22 = llround(v11[1] / 0.001) - 1640531527;
      v23 = 2654435769;
      if (((_QWORD)v11[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v23 = llround(v11[2] / 0.001) - 1640531527;
      v24 = 2654435769;
      if (((_QWORD)v11[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v24 = llround(v11[3] / 0.001) - 1640531527;
      v25 = 2654435769;
      if (((_QWORD)v11[4] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v25 = llround(v11[4] / 0.001) - 1640531527;
      v26 = 2654435769;
      if (((_QWORD)v11[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v26 = llround(v11[5] / 0.001) - 1640531527;
      v27 = 2654435769;
      if (((_QWORD)v11[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v27 = llround(v11[6] / 0.001) - 1640531527;
      v28 = 2654435769;
      if (((_QWORD)v11[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v28 = llround(v11[7] / 0.001) - 1640531527;
      v29 = 2654435769;
      if (((_QWORD)v11[8] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v29 = llround(v11[8] / 0.001) - 1640531527;
      v30 = 2654435769;
      if (((_QWORD)v11[9] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v30 = llround(v11[9] / 0.001) - 1640531527;
      v13 = (((((v5 >> 2) + (v5 << 6) + v21) ^ v5) >> 2) + ((((v5 >> 2) + (v5 << 6) + v21) ^ v5) << 6) + v22) ^ ((v5 >> 2) + (v5 << 6) + v21) ^ v5;
      v14 = ((v13 >> 2) + (v13 << 6) + v23) ^ v13;
      v15 = ((v14 >> 2) + (v14 << 6) + v24) ^ v14;
      v16 = ((v15 >> 2) + (v15 << 6) + v25) ^ v15;
      v17 = ((v16 >> 2) + (v16 << 6) + v26) ^ v16;
      v18 = ((v17 >> 2) + (v17 << 6) + v27) ^ v17;
      v19 = ((v18 >> 2) + (v18 << 6) + v28) ^ v18;
      v20 = ((v19 >> 2) + (v19 << 6) + v29) ^ v19;
      v5 = ((v20 >> 2) + (v20 << 6) + v30) ^ v20;
      v11 += 40;
    }
    while (v11 != v12);
  }
  v32 = v5;
  return sub_20EA960E4("BicubicHermiteSpline: [U: ", &v34, (std::string *)"; V ",
           &v33,
           (std::string *)"; Hash: ",
           &v32,
           (std::string *)"]");
}

_QWORD *sub_20EB18D88(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9C4E48;
  v2 = a1[1];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C804247E4FDLL);
  return a1;
}

void sub_20EB18DD0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C9C4E48;
  v1 = a1[1];
  if (v1)
    MEMORY[0x212BC6368](v1, 0x1000C804247E4FDLL);
  JUMPOUT(0x212BC6398);
}

float64x2_t sub_20EB18E28@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X8>)
{
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  int v24;
  double v25;
  int v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  float64x2_t *v31;
  int v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  int v59;
  uint64_t v60;
  float64x2_t *v61;
  double v62;
  int v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  float64x2_t *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t result;
  double v96;

  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 24);
  if (v9 <= 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/UniformIntervalBilinearInterpolator.hpp", 48, (uint64_t)"dimension > 1", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_24;
  }
  v10 = 1.0 / (double)(unint64_t)(v9 - 1);
  if (v8 / v10 >= 0.0)
    v11 = v8 / v10 + 1.0;
  else
    v11 = 1.0;
  v12 = (int)v11;
  v13 = v10 * (double)(int)v11;
  if (v13 > 1.0)
    v13 = 1.0;
  v14 = v13 >= 0.0 ? v13 : 0.0;
  v15 = a2[1];
  v16 = *(unsigned int *)(a1 + 28);
  if (v16 <= 1)
  {
    v96 = v10;
    v17 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/UniformIntervalBilinearInterpolator.hpp", 48, (uint64_t)"dimension > 1", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v10 = v96;
    if (v17)
LABEL_24:
      abort();
  }
  v18 = v12 - 1;
  v19 = 1.0 - (v14 - v8) / v10;
  v20 = 1.0 / (double)(unint64_t)(v16 - 1);
  if (v15 / v20 >= 0.0)
    v21 = v15 / v20 + 1.0;
  else
    v21 = 1.0;
  v22 = (int)v21;
  v23 = v20 * (double)(int)v21;
  if (v23 > 1.0)
    v23 = 1.0;
  if (v23 < 0.0)
    v23 = 0.0;
  v24 = v22 - 1;
  v25 = 1.0 - (v23 - v15) / v20;
  v26 = *(_DWORD *)(a1 + 24);
  if (a3)
  {
    v27 = 1.0 - v25;
    v28 = -(1.0 - v25);
    v29 = v26 * v24;
    v30 = *(_QWORD *)(a1 + 8);
    v31 = (float64x2_t *)(v30 + 80 * (v26 * v24 + v18));
    v32 = v26 * v22;
    v33 = (float64x2_t *)(v30 + 80 * (v32 + v18));
    v34 = (float64x2_t *)(v30 + 80 * (v29 + v12));
    v35 = vsubq_f64(vmulq_n_f64(v31[2], v28), vmulq_n_f64(v33[2], v25));
    v36 = vsubq_f64(vmulq_n_f64(v31[3], v28), vmulq_n_f64(v33[3], v25));
    v37 = (float64x2_t *)(v30 + 80 * (v32 + v12));
    v38 = vaddq_f64(vaddq_f64(vsubq_f64(vmulq_n_f64(*v31, v28), vmulq_n_f64(*v33, v25)), vmulq_n_f64(*v34, 1.0 - v25)), vmulq_n_f64(*v37, v25));
    v39 = vaddq_f64(vaddq_f64(vsubq_f64(vmulq_n_f64(v31[1], v28), vmulq_n_f64(v33[1], v25)), vmulq_n_f64(v34[1], 1.0 - v25)), vmulq_n_f64(v37[1], v25));
    v40 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
    v41 = vdivq_f64(vaddq_f64(vaddq_f64(vsubq_f64(vmulq_n_f64(v31[4], v28), vmulq_n_f64(v33[4], v25)), vmulq_n_f64(v34[4], 1.0 - v25)), vmulq_n_f64(v37[4], v25)), v40);
    v42 = vdivq_f64(vaddq_f64(vaddq_f64(v36, vmulq_n_f64(v34[3], 1.0 - v25)), vmulq_n_f64(v37[3], v25)), v40);
    v43 = vdivq_f64(vaddq_f64(vaddq_f64(v35, vmulq_n_f64(v34[2], 1.0 - v25)), vmulq_n_f64(v37[2], v25)), v40);
    v44 = vdivq_f64(v39, v40);
    v45 = vdivq_f64(v38, v40);
    *a3 = v45;
    a3[1] = v44;
    a3[2] = v43;
    a3[3] = v42;
    a3[4] = v41;
    v46 = 1.0 - v19;
    v38.f64[0] = -(1.0 - v19);
    LODWORD(v37) = *(_DWORD *)(a1 + 24);
    LODWORD(v34) = (_DWORD)v37 * v24;
    v47 = *(_QWORD *)(a1 + 8);
    v48 = (float64x2_t *)(v47 + 80 * ((_DWORD)v37 * v24 + v18));
    LODWORD(v37) = (_DWORD)v37 * v22;
    v49 = (float64x2_t *)(v47 + 80 * ((_DWORD)v37 + v18));
    v50 = (float64x2_t *)(v47 + 80 * ((_DWORD)v34 + v12));
    v51 = (float64x2_t *)(v47 + 80 * ((_DWORD)v37 + v12));
    v52 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0);
    v53 = vdivq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64(v48[4], v38.f64[0]), vmulq_n_f64(v49[4], 1.0 - v19)), vmulq_n_f64(v50[4], v19)), vmulq_n_f64(v51[4], v19)), v52);
    v54 = vdivq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64(v48[3], v38.f64[0]), vmulq_n_f64(v49[3], 1.0 - v19)), vmulq_n_f64(v50[3], v19)), vmulq_n_f64(v51[3], v19)), v52);
    v55 = vdivq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64(v48[2], v38.f64[0]), vmulq_n_f64(v49[2], 1.0 - v19)), vmulq_n_f64(v50[2], v19)), vmulq_n_f64(v51[2], v19)), v52);
    v56 = vdivq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64(v48[1], v38.f64[0]), vmulq_n_f64(v49[1], 1.0 - v19)), vmulq_n_f64(v50[1], v19)), vmulq_n_f64(v51[1], v19)), v52);
    v57 = vdivq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64(*v48, v38.f64[0]), vmulq_n_f64(*v49, 1.0 - v19)), vmulq_n_f64(*v50, v19)), vmulq_n_f64(*v51, v19)), v52);
    a3[2] = v43;
    a3[3] = v42;
    *a3 = v45;
    a3[1] = v44;
    a3[4] = v41;
    a3[5] = v57;
    a3[6] = v56;
    a3[7] = v55;
    a3[8] = v54;
    a3[9] = v53;
    v26 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v46 = 1.0 - v19;
    v27 = 1.0 - v25;
  }
  v58 = v27 * v46;
  v59 = v26 * v24;
  v60 = *(_QWORD *)(a1 + 8);
  v61 = (float64x2_t *)(v60 + 80 * (v59 + v18));
  v62 = v25 * v46;
  v63 = v26 * v22;
  v64 = (float64x2_t *)(v60 + 80 * (v63 + v18));
  v65 = vmulq_n_f64(v61[4], v58);
  v66 = vmulq_n_f64(v61[3], v58);
  v67 = vmulq_n_f64(v61[2], v58);
  v68 = vmulq_n_f64(v61[1], v58);
  v69 = vmulq_n_f64(v64[4], v62);
  v70 = vmulq_n_f64(v64[3], v62);
  v71 = vmulq_n_f64(v64[2], v62);
  v72 = vmulq_n_f64(v64[1], v62);
  v73 = vmulq_n_f64(*v64, v62);
  v74 = v19 * v27;
  v75 = (float64x2_t *)(v60 + 80 * (v59 + v12));
  v76 = vaddq_f64(vmulq_n_f64(*v61, v58), v73);
  v77 = vaddq_f64(v68, v72);
  v78 = vaddq_f64(v67, v71);
  v79 = vaddq_f64(v66, v70);
  v80 = vaddq_f64(v65, v69);
  v81 = vmulq_n_f64(*v75, v74);
  v82 = vmulq_n_f64(v75[1], v74);
  v83 = vmulq_n_f64(v75[2], v74);
  v84 = vmulq_n_f64(v75[3], v74);
  v85 = vmulq_n_f64(v75[4], v74);
  v86 = v19 * v25;
  v87 = (float64x2_t *)(v60 + 80 * (v63 + v12));
  v88 = vaddq_f64(v80, v85);
  v89 = vaddq_f64(v79, v84);
  v90 = vaddq_f64(v78, v83);
  v91 = vmulq_n_f64(v87[4], v86);
  v92 = vmulq_n_f64(v87[3], v86);
  v93 = vmulq_n_f64(v87[2], v86);
  v94 = vmulq_n_f64(v87[1], v86);
  result = vaddq_f64(vaddq_f64(v76, v81), vmulq_n_f64(*v87, v86));
  a4[3] = vaddq_f64(v89, v92);
  a4[4] = vaddq_f64(v88, v91);
  a4[1] = vaddq_f64(vaddq_f64(v77, v82), v94);
  a4[2] = vaddq_f64(v90, v93);
  *a4 = result;
  return result;
}

void *sub_20EB1930C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  void *result;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v6 = (((80 * (v5 * v4) + 31) & 0xFFFFFFFFE0) * (unsigned __int128)0x333333333333334uLL) >> 64;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6;
  result = operator new(80 * v6, (std::align_val_t)0x20uLL);
  *(_QWORD *)a2 = result;
  if (v5 * v4)
    result = memcpy(result, *(const void **)(a1 + 8), 80 * (v5 * v4));
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_20EB19398(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double *v4;
  double *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _DWORD v25[6];
  int v26;
  std::string v27;
  std::string **v28;
  std::string *v29;
  std::string *v30;
  _DWORD *v31;
  std::string *v32;
  std::string *v33;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(_DWORD *)(a1 + 28);
  v3 = 0;
  if (v1 * v2)
  {
    v4 = *(double **)(a1 + 8);
    v5 = &v4[10 * v1 * v2];
    do
    {
      v14 = 2654435769;
      if ((*(_QWORD *)v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v14 = llround(*v4 / 0.001) - 1640531527;
      v15 = 2654435769;
      if (((_QWORD)v4[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v15 = llround(v4[1] / 0.001) - 1640531527;
      v16 = 2654435769;
      if (((_QWORD)v4[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v16 = llround(v4[2] / 0.001) - 1640531527;
      v17 = 2654435769;
      if (((_QWORD)v4[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v17 = llround(v4[3] / 0.001) - 1640531527;
      v18 = 2654435769;
      if (((_QWORD)v4[4] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v18 = llround(v4[4] / 0.001) - 1640531527;
      v19 = 2654435769;
      if (((_QWORD)v4[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v19 = llround(v4[5] / 0.001) - 1640531527;
      v20 = 2654435769;
      if (((_QWORD)v4[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v20 = llround(v4[6] / 0.001) - 1640531527;
      v21 = 2654435769;
      if (((_QWORD)v4[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v21 = llround(v4[7] / 0.001) - 1640531527;
      v22 = 2654435769;
      if (((_QWORD)v4[8] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v22 = llround(v4[8] / 0.001) - 1640531527;
      v23 = 2654435769;
      if (((_QWORD)v4[9] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v23 = llround(v4[9] / 0.001) - 1640531527;
      v6 = ((v3 >> 2) + (v3 << 6) + v14) ^ v3;
      v7 = (((((v6 >> 2) + (v6 << 6) + v15) ^ v6) >> 2) + ((((v6 >> 2) + (v6 << 6) + v15) ^ v6) << 6) + v16) ^ ((v6 >> 2) + (v6 << 6) + v15) ^ v6;
      v8 = ((v7 >> 2) + (v7 << 6) + v17) ^ v7;
      v9 = ((v8 >> 2) + (v8 << 6) + v18) ^ v8;
      v10 = ((v9 >> 2) + (v9 << 6) + v19) ^ v9;
      v11 = ((v10 >> 2) + (v10 << 6) + v20) ^ v10;
      v12 = ((v11 >> 2) + (v11 << 6) + v21) ^ v11;
      v13 = ((v12 >> 2) + (v12 << 6) + v22) ^ v12;
      v3 = ((v13 >> 2) + (v13 << 6) + v23) ^ v13;
      v4 += 10;
    }
    while (v4 != v5);
  }
  v26 = 0;
  sub_20E995D04(v25, "UniformIntervalBilinearInterpolator: [");
  v29 = (std::string *)v25;
  v30 = (std::string *)"U: ";
  v31 = v25;
  v32 = (std::string *)"U: ";
  v33 = (std::string *)"U: ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4E88[v26])(&v27, v25);
  std::to_string(&v27, v2);
  v29 = (std::string *)v25;
  v30 = &v27;
  v31 = v25;
  v32 = &v27;
  v33 = &v27;
  if (v26 == -1)
    sub_20E877AB8();
  v28 = &v29;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4DF0[v26])(&v28, v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v29 = (std::string *)v25;
  v30 = (std::string *)"; ";
  v31 = v25;
  v32 = (std::string *)"; ";
  v33 = (std::string *)"; ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4EA0[v26])(&v27, v25);
  v29 = (std::string *)v25;
  v30 = (std::string *)"V: ";
  v31 = v25;
  v32 = (std::string *)"V: ";
  v33 = (std::string *)"V: ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4E88[v26])(&v27, v25);
  std::to_string(&v27, v1);
  v29 = (std::string *)v25;
  v30 = &v27;
  v31 = v25;
  v32 = &v27;
  v33 = &v27;
  if (v26 == -1)
    sub_20E877AB8();
  v28 = &v29;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4DF0[v26])(&v28, v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v29 = (std::string *)v25;
  v30 = (std::string *)"; ";
  v31 = v25;
  v32 = (std::string *)"; ";
  v33 = (std::string *)"; ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4EA0[v26])(&v27, v25);
  v29 = (std::string *)v25;
  v30 = (std::string *)"Hash: ";
  v31 = v25;
  v32 = (std::string *)"Hash: ";
  v33 = (std::string *)"Hash: ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4EB8[v26])(&v27, v25);
  std::to_string(&v27, v3);
  v29 = (std::string *)v25;
  v30 = &v27;
  v31 = v25;
  v32 = &v27;
  v33 = &v27;
  if (v26 == -1)
    sub_20E877AB8();
  v28 = &v29;
  ((void (*)(std::string ***, _DWORD *))off_24C9C4DF0[v26])(&v28, v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v29 = (std::string *)v25;
  v30 = (std::string *)"]";
  v31 = v25;
  v32 = (std::string *)"]";
  v33 = (std::string *)"]";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  ((void (*)(std::string *, _DWORD *))off_24C9C4E08[v26])(&v27, v25);
  if (v26 == -1)
    sub_20E877AB8();
  v29 = &v27;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9C4E20[v26])(&v29, v25);
  if (v26 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9C4DD8[v26])(&v29, v25);
  return result;
}

void sub_20EB19988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9C4DD8[a12])(v18 - 65, &a9);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20EB19A04(_DWORD ***a1)
{
  return sub_20EB19A20(**a1, (char *)(*a1)[1]);
}

void sub_20EB19A10(uint64_t a1, uint64_t a2)
{
  sub_20EB19B10((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EB19A20(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C4DD8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EB19B10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C4DD8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB19CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EB19D08(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EB19E00((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EB19DF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EB19E00(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EB19FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB1A010(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B260);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B260))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.geometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B258);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B260);
  }
  *a1 = qword_254A5B258;
}

void sub_20EB1A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B260);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B260);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB1A104(uint64_t *a1, __int128 **a2)
{
  double v3;
  char *v4;
  int v5;
  int64_t v6;
  size_t v7;
  size_t v8;
  double v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void **v38;
  uint64_t v39;
  __int128 v41;
  void *__p;
  size_t v43;
  int64_t v44;
  std::string __b;
  std::string v46;
  void *v47[2];
  int64_t v48;

  v3 = *((double *)*a2 + 2);
  v41 = **a2;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v6)
  {
    if (v6 <= (uint64_t)(v7 + 2))
      v6 = v7 + 2;
    v8 = v6 + ~v7;
    v9 = __exp10((double)-(uint64_t)v7);
    v10 = v8 - 1;
    if (v8 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v11 = v9;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v8 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v8 - 1;
      p_b = &__b;
      if (v8 == 1)
      {
        LODWORD(v8) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v7);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v8) = 4;
  }
  memset(p_b, 32, v10);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    p_p = operator new(v18 + 1);
    v43 = v7;
    v44 = v19 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v44) = v7;
  p_p = &__p;
  if (v7)
LABEL_20:
    memset(p_p, 32, v7);
  *((_BYTE *)p_p + v7) = 0;
  if (v44 >= 0)
    v20 = (const std::string::value_type *)&__p;
  else
    v20 = (const std::string::value_type *)__p;
  if (v44 >= 0)
    v21 = HIBYTE(v44);
  else
    v21 = v43;
  v22 = std::string::append(&v46, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v48 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v47 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_42:
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  operator delete(__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_29:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
LABEL_43:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v46.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v24 = a1 + 1;
  v26 = a1 + 2;
  v25 = *a1;
  v27 = (int)v8 + (int)v7 + 1;
  v28 = (int)v7 - 3;
  v29 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v29[9] & 1) != 0)
  {
    if (*(double *)&v41 != 0.0)
    {
      *((_QWORD *)v29 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = v28;
      std::ostream::operator<<();
      goto LABEL_45;
    }
  }
  else if (fabs(*(double *)&v41) >= v11)
  {
    *((_QWORD *)v29 + 3) = v27;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v25 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = (int)v7;
    std::ostream::operator<<();
    goto LABEL_45;
  }
  if (v48 >= 0)
    v30 = v47;
  else
    v30 = (void **)v47[0];
  if (v48 >= 0)
    v31 = HIBYTE(v48);
  else
    v31 = (uint64_t)v47[1];
  sub_20E86A980(a1, (uint64_t)v30, v31);
LABEL_45:
  v46.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v32 = *a1;
  v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v33[9] & 1) != 0)
  {
    if (*((double *)&v41 + 1) != 0.0)
    {
      *((_QWORD *)v33 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v32 - 24)) = v28;
      std::ostream::operator<<();
      goto LABEL_57;
    }
  }
  else if (fabs(*((double *)&v41 + 1)) >= v11)
  {
    *((_QWORD *)v33 + 3) = v27;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v32 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v26 + *(_QWORD *)(v32 - 24)) = (int)v7;
    std::ostream::operator<<();
    goto LABEL_57;
  }
  if (v48 >= 0)
    v34 = v47;
  else
    v34 = (void **)v47[0];
  if (v48 >= 0)
    v35 = HIBYTE(v48);
  else
    v35 = (uint64_t)v47[1];
  sub_20E86A980(a1, (uint64_t)v34, v35);
LABEL_57:
  v46.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v36 = *a1;
  v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v37[9] & 1) == 0)
  {
    if (fabs(v3) >= v11)
    {
      *((_QWORD *)v37 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v36 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v36 - 24)) = (int)v7;
      std::ostream::operator<<();
      goto LABEL_69;
    }
LABEL_61:
    if (v48 >= 0)
      v38 = v47;
    else
      v38 = (void **)v47[0];
    if (v48 >= 0)
      v39 = HIBYTE(v48);
    else
      v39 = (uint64_t)v47[1];
    sub_20E86A980(a1, (uint64_t)v38, v39);
    goto LABEL_69;
  }
  if (v3 == 0.0)
    goto LABEL_61;
  *((_QWORD *)v37 + 3) = v27;
  *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) |= 0x400u;
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v36 - 24)) = v28;
  std::ostream::operator<<();
LABEL_69:
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v5;
  if (SHIBYTE(v48) < 0)
    operator delete(v47[0]);
  return a1;
}

void sub_20EB1A628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB1A6BC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  size_t v37;
  size_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  const char *v94;
  _QWORD v95[3];
  int v96;
  const char *v97;
  int v98;
  const char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *__dst[2];
  int64_t v103;
  _QWORD v104[2];
  _QWORD v105[3];
  const void *v106;
  uint64_t v107;
  const void *v108;
  unint64_t v109;
  void *__p;
  char v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  char *v118;
  std::__shared_weak_count *v119;
  _QWORD *v120;
  __int128 v121;
  _BYTE v122[24];
  __int128 v123;
  void *v124[2];
  unint64_t v125;
  char v126;
  _QWORD v127[5];

  v127[2] = *MEMORY[0x24BDAC8D0];
  if (a1 > 3)
  {
    sub_20EB1A010(&v115);
    if (**(int **)(v115 + 56) > 5
      || ((v3 = *(unsigned __int8 *)(v115 + 72), v4 = sub_20E8C31DC(v115, "OSLogSurrogateAppender", 1, 0), !v3)
        ? (v5 = v4 == 0)
        : (v5 = 0),
          v5))
    {
LABEL_145:
      v1 = 0;
      v2 = 0;
      return v2 | v1;
    }
    v6 = v4;
    sub_20E863438((uint64_t)v104);
    sub_20E86A980(v105, (uint64_t)"Ray mapper type is out of range: ", 33);
    std::ostream::operator<<();
    if ((v113 & 0x10) != 0)
    {
      v9 = v112;
      if (v112 < v109)
      {
        v112 = v109;
        v9 = v109;
      }
      v10 = v108;
      v7 = v9 - (_QWORD)v108;
      if (v9 - (unint64_t)v108 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_66;
    }
    else
    {
      if ((v113 & 8) == 0)
      {
        v7 = 0;
        HIBYTE(v103) = 0;
        v8 = __dst;
        goto LABEL_21;
      }
      v10 = v106;
      v7 = v107 - (_QWORD)v106;
      if ((unint64_t)(v107 - (_QWORD)v106) > 0x7FFFFFFFFFFFFFF7)
LABEL_66:
        sub_20E860B7C();
    }
    if (v7 >= 0x17)
    {
      v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v11 = v7 | 7;
      v12 = v11 + 1;
      v8 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)v7;
      v103 = v12 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v103) = v7;
      v8 = __dst;
      if (!v7)
      {
LABEL_21:
        *((_BYTE *)v8 + v7) = 0;
        v95[0] = &v115;
        v95[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v95[2] = std::chrono::system_clock::now().__d_.__rep_;
        v96 = 5;
        v97 = "unknown file";
        v98 = 76;
        v100 = 0;
        v101 = 0;
        v99 = "unknown function";
        if (v103 >= 0)
          v13 = (const char *)__dst;
        else
          v13 = (const char *)__dst[0];
        v14 = *(_QWORD *)v95[0];
        v15 = *(_QWORD *)v95[0] + 16;
        if (*(char *)(*(_QWORD *)v95[0] + 39) < 0)
        {
          v17 = *(const char **)(v14 + 16);
          v16 = *(_QWORD *)(v14 + 24);
          v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v19 & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          v16 = *(unsigned __int8 *)(*(_QWORD *)v95[0] + 39);
          v17 = (const char *)(*(_QWORD *)v95[0] + 16);
          v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v18 & 1) != 0)
            goto LABEL_28;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v122);
          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v122);
          if ((_BYTE)v123 && (v122[23] & 0x80000000) != 0)
            operator delete(*(void **)v122);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_28:
        if (byte_254A4A50F >= 0)
          v20 = (const char *)&xmmword_254A4A4F8;
        else
          v20 = (const char *)xmmword_254A4A4F8;
        if (byte_254A4A50F >= 0)
          v21 = byte_254A4A50F;
        else
          v21 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
        *(_QWORD *)v122 = os_log_create(v20, v17);
        v22 = &v122[8];
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v94 = v17;
          v23 = v6;
          v24 = v14;
          v25 = v13;
          v26 = v3;
          v27 = v15;
          v28 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v28 = v21 | 7;
          v29 = v28 + 1;
          v22 = operator new(v28 + 1);
          *(_QWORD *)&v122[16] = v21;
          *(_QWORD *)&v123 = v29 | 0x8000000000000000;
          *(_QWORD *)&v122[8] = v22;
          v15 = v27;
          v3 = v26;
          v13 = v25;
          v14 = v24;
          v6 = v23;
          v17 = v94;
        }
        else
        {
          BYTE7(v123) = v21;
          if (!v21)
          {
LABEL_42:
            v22[v21] = 0;
            BYTE8(v123) = 1;
            v30 = v124;
            if (v16 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v16 >= 0x17)
            {
              v31 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v16 | 7) != 0x17)
                v31 = v16 | 7;
              v32 = v31 + 1;
              v30 = (void **)operator new(v31 + 1);
              v124[1] = (void *)v16;
              v125 = v32 | 0x8000000000000000;
              v124[0] = v30;
            }
            else
            {
              HIBYTE(v125) = v16;
              if (!v16)
              {
LABEL_50:
                *((_BYTE *)v30 + v16) = 0;
                v126 = 1;
                v33 = *(NSObject **)v122;
                if (SHIBYTE(v125) < 0)
                  operator delete(v124[0]);
                if (BYTE8(v123) && SBYTE7(v123) < 0)
                  operator delete(*(void **)&v122[8]);
                if (*(_QWORD *)v122)
                  os_release(*(void **)v122);
                if (!v6 || !*(_QWORD *)(v6 + 24))
                {
                  os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v122 = 136315138;
                  *(_QWORD *)&v122[4] = v13;
                  v40 = (void *)_os_log_send_and_compose_impl();
                  if (v40)
                    free(v40);
                  goto LABEL_131;
                }
                v34 = _os_log_pack_size();
                v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
                v36 = (std::__shared_weak_count *)operator new();
                v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v36->__shared_owners_ = 0;
                v36->__shared_weak_owners_ = 0;
                v36[1].__vftable = v35;
                *(_QWORD *)&v116 = v35;
                *((_QWORD *)&v116 + 1) = v35;
                v118 = 0;
                v119 = 0;
                v117 = v36;
                v37 = strlen(v13);
                if (v37 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v38 = v37;
                if (v37 >= 0x17)
                {
                  v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v37 | 7) != 0x17)
                    v41 = v37 | 7;
                  v42 = v41 + 1;
                  v39 = operator new(v41 + 1);
                  *(_QWORD *)&v121 = v38;
                  *((_QWORD *)&v121 + 1) = v42 | 0x8000000000000000;
                  v120 = v39;
                }
                else
                {
                  HIBYTE(v121) = v37;
                  v39 = &v120;
                  if (!v37)
                  {
LABEL_71:
                    *((_BYTE *)v39 + v38) = 0;
                    v43 = v120;
                    v127[0] = v121;
                    *(_QWORD *)((char *)v127 + 7) = *(_QWORD *)((char *)&v121 + 7);
                    v44 = HIBYTE(v121);
                    v45 = operator new(0x38uLL);
                    v45[1] = 0;
                    v45[2] = 0;
                    v45[3] = off_24C9ABC20;
                    *v45 = &off_24C9ABBD0;
                    v46 = v127[0];
                    v45[4] = v43;
                    v45[5] = v46;
                    *(_QWORD *)((char *)v45 + 47) = *(_QWORD *)((char *)v127 + 7);
                    *((_BYTE *)v45 + 55) = v44;
                    v127[0] = 0;
                    *(_QWORD *)((char *)v127 + 7) = 0;
                    v47 = v119;
                    v118 = (char *)(v45 + 3);
                    v119 = (std::__shared_weak_count *)v45;
                    if (v47)
                    {
                      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
                      do
                        v49 = __ldaxr(p_shared_owners);
                      while (__stlxr(v49 - 1, p_shared_owners));
                      if (!v49)
                      {
                        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                        std::__shared_weak_count::__release_weak(v47);
                      }
                    }
                    *(_OWORD *)v122 = v116;
                    v50 = v118;
                    *(_QWORD *)&v122[16] = v117;
                    if (v117)
                    {
                      v51 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v52 = __ldxr(v51);
                      while (__stxr(v52 + 1, v51));
                    }
                    v53 = v119;
                    *(_QWORD *)&v123 = v50;
                    *((_QWORD *)&v123 + 1) = v119;
                    if (v119)
                    {
                      v54 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v55 = __ldxr(v54);
                      while (__stxr(v55 + 1, v54));
                      v124[0] = v50;
                      do
                        v56 = __ldaxr(v54);
                      while (__stlxr(v56 - 1, v54));
                      if (!v56)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                    else
                    {
                      v124[0] = v50;
                    }
                    v57 = v117;
                    if (v117)
                    {
                      v58 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v59 = __ldaxr(v58);
                      while (__stlxr(v59 - 1, v58));
                      if (!v59)
                      {
                        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                        std::__shared_weak_count::__release_weak(v57);
                      }
                    }
                    v60 = *(_QWORD *)v122;
                    if (*((char *)v124[0] + 31) >= 0)
                      v61 = (char *)v124[0] + 8;
                    else
                      v61 = (char *)*((_QWORD *)v124[0] + 1);
                    v62 = _os_log_pack_fill();
                    *(_DWORD *)v62 = 136315138;
                    *(_QWORD *)(v62 + 4) = v61;
                    v63 = operator new();
                    v64 = *(unsigned __int8 *)(v14 + 39);
                    v65 = *(_QWORD *)(v14 + 16);
                    v66 = *(_QWORD *)(v14 + 24);
                    v67 = v123;
                    *(_OWORD *)(v63 + 8) = *(_OWORD *)&v122[8];
                    if ((v64 & 0x80u) != 0)
                      v64 = v66;
                    else
                      v65 = v15;
                    *(_QWORD *)v63 = v60;
                    *(_QWORD *)&v122[8] = 0;
                    *(_QWORD *)&v122[16] = 0;
                    *(_OWORD *)(v63 + 24) = v67;
                    v123 = 0uLL;
                    *(_QWORD *)(v63 + 40) = v65;
                    *(_QWORD *)(v63 + 48) = v64;
                    *(_BYTE *)(v63 + 56) = 16;
                    v120 = 0;
                    *(_QWORD *)&v116 = v63;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v116);
                    v68 = v116;
                    *(_QWORD *)&v116 = 0;
                    if (v68)
                    {
                      v69 = *(std::__shared_weak_count **)(v68 + 32);
                      if (v69)
                      {
                        v70 = (unint64_t *)&v69->__shared_owners_;
                        do
                          v71 = __ldaxr(v70);
                        while (__stlxr(v71 - 1, v70));
                        if (!v71)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      v72 = *(std::__shared_weak_count **)(v68 + 16);
                      if (v72)
                      {
                        v73 = (unint64_t *)&v72->__shared_owners_;
                        do
                          v74 = __ldaxr(v73);
                        while (__stlxr(v74 - 1, v73));
                        if (!v74)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                      }
                      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
                      v75 = v120;
                      v120 = 0;
                      if (v75)
                      {
                        v76 = (std::__shared_weak_count *)v75[4];
                        if (v76)
                        {
                          v77 = (unint64_t *)&v76->__shared_owners_;
                          do
                            v78 = __ldaxr(v77);
                          while (__stlxr(v78 - 1, v77));
                          if (!v78)
                          {
                            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                            std::__shared_weak_count::__release_weak(v76);
                          }
                        }
                        v79 = (std::__shared_weak_count *)v75[2];
                        if (v79)
                        {
                          v80 = (unint64_t *)&v79->__shared_owners_;
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
                      }
                    }
                    v82 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
                    if (*((_QWORD *)&v123 + 1))
                    {
                      v83 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    v85 = *(std::__shared_weak_count **)&v122[16];
                    if (*(_QWORD *)&v122[16])
                    {
                      v86 = (unint64_t *)(*(_QWORD *)&v122[16] + 8);
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
LABEL_131:
                    if (v3)
                    {
                      v88 = (const char *)__dst;
                      if (v103 < 0)
                        v88 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v95, "%s", v88);
                      sub_20E863570((uint64_t)v95);
                    }
                    sub_20E863570((uint64_t)v95);
                    v89 = v101;
                    if (v101)
                    {
                      v90 = (unint64_t *)&v101->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    if (SHIBYTE(v103) < 0)
                      operator delete(__dst[0]);
                    v104[0] = *MEMORY[0x24BEDB7F0];
                    v92 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v104 + *(_QWORD *)(v104[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v105[0] = v92;
                    v105[1] = MEMORY[0x24BEDB848] + 16;
                    if (v111 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v114);
                    goto LABEL_145;
                  }
                }
                memcpy(v39, v13, v38);
                goto LABEL_71;
              }
            }
            memmove(v30, v17, v16);
            goto LABEL_50;
          }
        }
        memmove(v22, v20, v21);
        goto LABEL_42;
      }
    }
    memmove(v8, v10, v7);
    goto LABEL_21;
  }
  v1 = a1;
  v2 = 0x100000000;
  return v2 | v1;
}

void sub_20EB1B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB1B278(uint64_t result, uint64_t a2, char a3, int a4, double a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)result = &off_24C9C2508;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v5;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(result + 80) = a4;
  *(_QWORD *)(result + 88) = 0x7FF8000000000000;
  *(_BYTE *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  v6 = "F-theta mapper is not implemented";
  v7 = 457;
  v8 = 33;
  switch(a4)
  {
    case 0:
      goto LABEL_5;
    case 1:
      goto LABEL_3;
    case 2:
      v6 = "Ellipsoidal mapper is not implemented";
      v7 = 463;
      v8 = 37;
LABEL_5:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/FreeformLensDistortion.cpp", v7, (uint64_t)&unk_21025445B, 0, (uint64_t)v6, v8, (void (*)(void **))sub_21023DDB0);
      abort();
    case 3:
      *(_DWORD *)(result + 104) = 1;
LABEL_3:
      *(double *)(result + 88) = a5;
      *(_BYTE *)(result + 96) = a3;
      break;
    default:
      return result;
  }
  return result;
}

void sub_20EB1B38C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20EA93718(v1);
  _Unwind_Resume(a1);
}

double *sub_20EB1B3A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  std::runtime_error *exception;

  v4 = *a2;
  if (*a2)
  {
    v5 = (uint64_t *)a2[1];
    v7 = *v5;
    v6 = (uint64_t)(v5 + 1);
    v8 = v7;
    if (v4 > 0)
      goto LABEL_7;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/FreeformLensDistortion.cpp", 229, (uint64_t)"!array.empty()", 14, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v4 = *a2;
    v9 = (uint64_t *)a2[1];
    v10 = *v9;
    v6 = (uint64_t)(v9 + 1);
    v8 = v10;
    if (v4 > 0)
      goto LABEL_7;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_16:
    abort();
  }
LABEL_7:
  v11 = (double *)sub_20EB1B5A4(a1, (8 * v4 - 8) >> 3, v6);
  v12 = *v11;
  v13 = sub_20EB1A6BC(v11[1]);
  if ((v13 & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to deserialize an FreeformLensDistortion object");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_DWORD *)(a1 + 80) = v13;
  switch((int)v13)
  {
    case 0:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/FreeformLensDistortion.cpp", 457, (uint64_t)&unk_21025445B, 0, (uint64_t)"F-theta mapper is not implemented", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    case 1:
      if (*(_DWORD *)(a1 + 104))
        *(_DWORD *)(a1 + 104) = 0;
      goto LABEL_13;
    case 2:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/FreeformLensDistortion.cpp", 463, (uint64_t)&unk_21025445B, 0, (uint64_t)"Ellipsoidal mapper is not implemented", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    case 3:
      if (*(_DWORD *)(a1 + 104) != 1)
        *(_DWORD *)(a1 + 104) = 1;
LABEL_13:
      *(_QWORD *)(a1 + 88) = v8;
      *(_BYTE *)(a1 + 96) = v12 != 0.0;
      break;
    default:
      return v11 + 2;
  }
  return v11 + 2;
}

void sub_20EB1B590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20EB1B5A4(uint64_t a1, size_t a2, uint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  const void *v23;

  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/CubicSplineKnots.hpp", 92, (uint64_t)"!array.empty()", 14, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  v6 = (unint64_t)*(double *)a3;
  if (a2 <= v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/CubicSplineKnots.hpp", 94, (uint64_t)"array.size() > size", 19, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  v7 = (char *)(a3 + 8 + 8 * v6);
  sub_20E86811C((_QWORD *)(a1 + 8), (char *)(a3 + 8), v7, v6);
  v8 = (char *)(a3 + 8 * a2);
  if (v8 < v7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  if (v8 == v7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/CubicSplineKnots.hpp", 92, (uint64_t)"!array.empty()", 14, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  v9 = (unint64_t)*(double *)v7;
  if ((v8 - v7) >> 3 <= v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/CubicSplineKnots.hpp", 94, (uint64_t)"array.size() > size", 19, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  v10 = v7 + 8;
  v11 = (uint64_t)&v7[8 * v9 + 8];
  sub_20E86811C((_QWORD *)(a1 + 32), v10, (char *)v11, v9);
  v13 = *(double *)v11;
  v14 = *(double *)(v11 + 8);
  v12 = (char *)(v11 + 16);
  v15 = v13;
  v16 = v14;
  *(_DWORD *)(a1 + 72) = v13;
  *(_DWORD *)(a1 + 76) = v14;
  v17 = v14 * (unint64_t)v13;
  if (*(_QWORD *)(a1 + 64) < v17)
  {
    v18 = *(_QWORD *)(a1 + 56);
    if (v18)
      MEMORY[0x212BC6368](v18, 0x1000C808070C27FLL);
    v19 = 192 * v17 / 0xC0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v19;
    *(_QWORD *)(a1 + 56) = operator new(192 * v19, (std::align_val_t)0x20uLL);
  }
  if (24 * v15 * v16 > (v8 - v12) >> 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/BicubicHermiteSpline.hpp", 124, (uint64_t)"std::distance(it, array.end()) >= rows * columns * ControlPointType::nElements", 78, (uint64_t)&unk_21025445B, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_26:
    abort();
  }
  if (v15)
    v20 = v16 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = 0;
    do
    {
      v22 = 0;
      do
      {
        v23 = v12;
        v12 += 192;
        memmove((void *)(*(_QWORD *)(a1 + 56) + 192 * (v22 + v21 * *(_DWORD *)(a1 + 72))), v23, 0xC0uLL);
        ++v22;
      }
      while (v15 != v22);
      ++v21;
    }
    while (v21 != v16);
  }
  return v12;
}

void sub_20EB1B860(uint64_t a1, double **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  double *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  double *v18;
  double *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  _OWORD *v25;
  double *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  double *v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  char *v38;
  double *v39;
  double *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  char *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  double v50;
  double *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  double *v59;
  int64_t v60;
  unint64_t v61;
  double *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  double *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  double v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  double *v80;
  double *v81;
  int64_t v82;
  unint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  double *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  double *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  BOOL v109;
  int64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  __int128 *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  _OWORD *v138;
  size_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  double v150;
  double *v151;
  double *v152;
  double *v153;
  double *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  double *v161;
  int64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  _OWORD *v167;
  double *v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  double *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  double *v180;
  double *v181;
  int64_t v182;
  unint64_t v183;
  double *v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  double *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  char **v193;
  char *v194;
  int v195;
  char v196;
  char *v197;

  v2 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v2 == -1)
    goto LABEL_181;
  v4 = a1;
  v5 = a1 + 88;
  v197 = &v196;
  v6 = ((double (*)(char **, uint64_t))off_24C9C4F18[v2])(&v197, a1 + 88);
  v7 = v6;
  v9 = a2[1];
  v8 = (unint64_t)a2[2];
  v192 = v5;
  if ((unint64_t)v9 < v8)
  {
    *v9 = v6;
    v10 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  v11 = *a2;
  v12 = (char *)v9 - (char *)*a2;
  v13 = v12 >> 3;
  v14 = (v12 >> 3) + 1;
  if (v14 >> 61)
    goto LABEL_179;
  v15 = v8 - (_QWORD)v11;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      goto LABEL_180;
    v17 = operator new(8 * v16);
    v18 = (double *)&v17[8 * v13];
    v19 = (double *)&v17[8 * v16];
    *v18 = v7;
    v10 = (uint64_t)(v18 + 1);
    v20 = (char *)v9 - (char *)v11;
    if (v9 == v11)
      goto LABEL_21;
    goto LABEL_15;
  }
  v17 = 0;
  v18 = (double *)(8 * v13);
  v19 = 0;
  *(double *)(8 * v13) = v6;
  v10 = 8 * v13 + 8;
  v20 = (char *)v9 - (char *)v11;
  if (v9 != v11)
  {
LABEL_15:
    v21 = v20 - 8;
    if (v21 < 0x58)
      goto LABEL_184;
    if ((unint64_t)((char *)v9 - v17 - v12) < 0x20)
      goto LABEL_184;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v9[v23 / 0xFFFFFFFFFFFFFFF8];
    v18 = (double *)((char *)v18 - v23);
    v25 = &v17[8 * v13 - 16];
    v26 = v9 - 2;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 4;
      v27 -= 4;
    }
    while (v27);
    v9 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_184:
      do
      {
        v29 = *((_QWORD *)v9-- - 1);
        *((_QWORD *)v18-- - 1) = v29;
      }
      while (v9 != v11);
    }
  }
LABEL_21:
  *a2 = v18;
  a2[1] = (double *)v10;
  a2[2] = v19;
  if (v11)
    operator delete(v11);
LABEL_23:
  a2[1] = (double *)v10;
  sub_20EB2148C((char **)(v4 + 8), (unint64_t *)a2);
  sub_20EB2148C((char **)(v4 + 32), (unint64_t *)a2);
  v30 = *(_DWORD *)(v4 + 72);
  v31 = *a2;
  v32 = a2[1];
  v33 = (char *)v32 - (char *)*a2;
  v34 = v33 >> 3;
  v35 = (v33 >> 3) + ((24 * v30 * *(_DWORD *)(v4 + 76)) | 2);
  v36 = a2[2];
  if (v35 <= v36 - *a2)
  {
    v39 = a2[1];
    goto LABEL_36;
  }
  if (v35 >> 61)
    goto LABEL_179;
  v37 = 8 * v35;
  v38 = (char *)operator new(8 * v35);
  v39 = (double *)&v38[8 * v34];
  v36 = (double *)&v38[v37];
  v40 = v39;
  if (v32 != v31)
  {
    v41 = (char *)v32 - (char *)v31 - 8;
    if (v41 < 0x58)
    {
      v40 = (double *)&v38[8 * v34];
      do
      {
LABEL_33:
        v49 = *((_QWORD *)v32-- - 1);
        *((_QWORD *)v40-- - 1) = v49;
      }
      while (v32 != v31);
      goto LABEL_34;
    }
    v40 = (double *)&v38[8 * v34];
    if ((unint64_t)((char *)v32 - &v38[v33]) < 0x20)
      goto LABEL_33;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v32[v43 / 0xFFFFFFFFFFFFFFF8];
    v40 = &v39[v43 / 0xFFFFFFFFFFFFFFF8];
    v45 = &v38[8 * v34 - 16];
    v46 = (__int128 *)(v32 - 2);
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *((_OWORD *)v45 - 1) = *(v46 - 1);
      *(_OWORD *)v45 = v48;
      v45 -= 32;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    v32 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_33;
  }
LABEL_34:
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v36;
  if (v31)
  {
    operator delete(v31);
    v30 = *(_DWORD *)(v4 + 72);
    v39 = a2[1];
    v36 = a2[2];
  }
LABEL_36:
  v50 = (double)v30;
  if (v39 < v36)
  {
    *v39 = v50;
    v51 = v39 + 1;
    goto LABEL_59;
  }
  v52 = *a2;
  v53 = (char *)v39 - (char *)*a2;
  v54 = v53 >> 3;
  v55 = (v53 >> 3) + 1;
  if (v55 >> 61)
    goto LABEL_179;
  v56 = (char *)v36 - (char *)v52;
  if (v56 >> 2 > v55)
    v55 = v56 >> 2;
  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
    v57 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v57 = v55;
  if (v57)
  {
    if (v57 >> 61)
      goto LABEL_180;
    v58 = operator new(8 * v57);
    v59 = (double *)&v58[8 * v54];
    v36 = (double *)&v58[8 * v57];
    *v59 = v50;
    v51 = v59 + 1;
    v60 = (char *)v39 - (char *)v52;
    if (v39 == v52)
      goto LABEL_57;
  }
  else
  {
    v58 = 0;
    v59 = (double *)(8 * v54);
    v36 = 0;
    *(double *)(8 * v54) = v50;
    v51 = (double *)(8 * v54 + 8);
    v60 = (char *)v39 - (char *)v52;
    if (v39 == v52)
      goto LABEL_57;
  }
  v61 = v60 - 8;
  if (v61 < 0x58)
  {
    v62 = v39;
    goto LABEL_56;
  }
  if ((unint64_t)((char *)v39 - &v58[v53]) < 0x20)
  {
    v62 = v39;
    do
    {
LABEL_56:
      v69 = *((_QWORD *)v62-- - 1);
      *((_QWORD *)v59-- - 1) = v69;
    }
    while (v62 != v52);
    goto LABEL_57;
  }
  v63 = (v61 >> 3) + 1;
  v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
  v62 = &v39[v64 / 0xFFFFFFFFFFFFFFF8];
  v59 = (double *)((char *)v59 - v64);
  v65 = &v58[8 * v54 - 16];
  v66 = v39 - 2;
  v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v68 = *(_OWORD *)v66;
    *(v65 - 1) = *((_OWORD *)v66 - 1);
    *v65 = v68;
    v65 -= 2;
    v66 -= 4;
    v67 -= 4;
  }
  while (v67);
  if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_56;
LABEL_57:
  *a2 = v59;
  a2[1] = v51;
  a2[2] = v36;
  if (v52)
  {
    operator delete(v52);
    v36 = a2[2];
  }
LABEL_59:
  a2[1] = v51;
  v70 = *(_DWORD *)(v4 + 76);
  v71 = (double)v70;
  if (v51 < v36)
  {
    *v51 = v71;
    v72 = (uint64_t)(v51 + 1);
    goto LABEL_82;
  }
  v73 = *a2;
  v74 = (char *)v51 - (char *)*a2;
  v75 = v74 >> 3;
  v76 = (v74 >> 3) + 1;
  if (v76 >> 61)
    goto LABEL_179;
  v77 = (char *)v36 - (char *)v73;
  if (v77 >> 2 > v76)
    v76 = v77 >> 2;
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
    v78 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
  {
    if (v78 >> 61)
      goto LABEL_180;
    v79 = operator new(8 * v78);
    v80 = (double *)&v79[8 * v75];
    v81 = (double *)&v79[8 * v78];
    *v80 = v71;
    v72 = (uint64_t)(v80 + 1);
    v82 = (char *)v51 - (char *)v73;
    if (v51 == v73)
      goto LABEL_80;
  }
  else
  {
    v79 = 0;
    v80 = (double *)(8 * v75);
    v81 = 0;
    *(double *)(8 * v75) = v71;
    v72 = 8 * v75 + 8;
    v82 = (char *)v51 - (char *)v73;
    if (v51 == v73)
      goto LABEL_80;
  }
  v83 = v82 - 8;
  if (v83 < 0x58)
  {
    v84 = v51;
    goto LABEL_79;
  }
  if ((unint64_t)((char *)v51 - &v79[v74]) < 0x20)
  {
    v84 = v51;
    do
    {
LABEL_79:
      v91 = *((_QWORD *)v84-- - 1);
      *((_QWORD *)v80-- - 1) = v91;
    }
    while (v84 != v73);
    goto LABEL_80;
  }
  v85 = (v83 >> 3) + 1;
  v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
  v84 = &v51[v86 / 0xFFFFFFFFFFFFFFF8];
  v80 = (double *)((char *)v80 - v86);
  v87 = &v79[8 * v75 - 16];
  v88 = v51 - 2;
  v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v90 = *(_OWORD *)v88;
    *(v87 - 1) = *((_OWORD *)v88 - 1);
    *v87 = v90;
    v87 -= 2;
    v88 -= 4;
    v89 -= 4;
  }
  while (v89);
  if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_79;
LABEL_80:
  *a2 = v80;
  a2[1] = (double *)v72;
  a2[2] = v81;
  if (v73)
  {
    operator delete(v73);
    v70 = *(_DWORD *)(v4 + 76);
  }
LABEL_82:
  a2[1] = (double *)v72;
  if (v70)
  {
    v92 = *(_DWORD *)(v4 + 72);
    if (v92)
    {
      v195 = 0;
      v93 = 1;
      v193 = (char **)a2;
      while (!v93)
      {
LABEL_86:
        if (++v195 >= v70)
          goto LABEL_133;
      }
      v94 = 0;
      while (1)
      {
        v95 = (char *)(*(_QWORD *)(v4 + 56) + 192 * (v94 + v92 * v195));
        v97 = (unint64_t)*a2;
        v96 = (unint64_t)a2[1];
        v98 = v96 - (_QWORD)*a2;
        v99 = v98 >> 3;
        v100 = (char *)*a2 + (v98 & 0xFFFFFFFFFFFFFFF8);
        v101 = a2[2];
        if ((uint64_t)((uint64_t)v101 - v96) < 192)
          break;
        v106 = v4;
        v107 = v96 - (_QWORD)v100;
        if ((uint64_t)(v96 - (_QWORD)v100) > 191)
        {
          v194 = v95 + 192;
          v108 = a2[1];
LABEL_105:
          v110 = (char *)v108 - (v100 + 192);
          v111 = v110 >> 3;
          v112 = (char *)(v108 - 24);
          v113 = (char *)v108;
          if ((unint64_t)(v108 - 24) < v96)
          {
            v114 = (v98 & 0xFFFFFFFFFFFFFFF8) + v110;
            v115 = v97 + v114 + 8;
            if (v96 > v115)
              v115 = v96;
            v116 = v115 + ~v97 - v114;
            if (v116 < 0x58)
            {
              v113 = (char *)v108;
              goto LABEL_128;
            }
            v113 = (char *)v108;
            if ((unint64_t)&v100[-(v98 & 0xFFFFFFFFFFFFFFF8) + 192 - v97] < 0x20)
              goto LABEL_185;
            v141 = (v116 >> 3) + 1;
            v142 = v141 & 0x3FFFFFFFFFFFFFFCLL;
            v112 += v142 * 8;
            v113 = (char *)&v108[v142];
            v143 = v108 + 2;
            v144 = (__int128 *)(v97 + 8 * v111 + 8 * v99 + 16);
            v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v146 = *v144;
              *(v143 - 1) = *(v144 - 1);
              *v143 = v146;
              v143 += 2;
              v144 += 2;
              v145 -= 4;
            }
            while (v145);
            if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_185:
              do
              {
LABEL_128:
                v147 = *(_QWORD *)v112;
                v112 += 8;
                *(_QWORD *)v113 = v147;
                v113 += 8;
              }
              while ((unint64_t)v112 < v96);
            }
          }
          a2[1] = (double *)v113;
          v4 = v106;
          if (v108 != (double *)(v100 + 192))
            memmove(&v108[-v111], v100, v110);
          if (v194 != v95)
            memmove(v100, v95, v194 - v95);
          goto LABEL_89;
        }
        v194 = &v95[v107];
        memmove(a2[1], &v95[v107], 192 - v107);
        v108 = (double *)(v100 + 192);
        a2 = (double **)v193;
        v193[1] = v100 + 192;
        v109 = v107 < 1;
        v4 = v106;
        if (!v109)
          goto LABEL_105;
LABEL_89:
        ++v94;
        v92 = *(_DWORD *)(v4 + 72);
        if (v94 >= v92)
        {
          v70 = *(_DWORD *)(v4 + 76);
          v93 = *(_DWORD *)(v4 + 72);
          goto LABEL_86;
        }
      }
      v102 = v99 + 24;
      if ((unint64_t)(v99 + 24) >> 61)
        goto LABEL_179;
      v103 = (uint64_t)v101 - v97;
      if (v103 >> 2 > v102)
        v102 = v103 >> 2;
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
        v104 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        if (v104 >> 61)
          goto LABEL_180;
        v105 = (char *)operator new(8 * v104);
      }
      else
      {
        v105 = 0;
      }
      v117 = &v105[8 * v99];
      v118 = *(_OWORD *)v95;
      v119 = *((_OWORD *)v95 + 1);
      v120 = *((_OWORD *)v95 + 3);
      *((_OWORD *)v117 + 2) = *((_OWORD *)v95 + 2);
      *((_OWORD *)v117 + 3) = v120;
      *(_OWORD *)v117 = v118;
      *((_OWORD *)v117 + 1) = v119;
      v121 = *((_OWORD *)v95 + 4);
      v122 = *((_OWORD *)v95 + 5);
      v123 = *((_OWORD *)v95 + 7);
      *((_OWORD *)v117 + 6) = *((_OWORD *)v95 + 6);
      *((_OWORD *)v117 + 7) = v123;
      *((_OWORD *)v117 + 4) = v121;
      *((_OWORD *)v117 + 5) = v122;
      v124 = *((_OWORD *)v95 + 8);
      v125 = *((_OWORD *)v95 + 9);
      v126 = *((_OWORD *)v95 + 11);
      *((_OWORD *)v117 + 10) = *((_OWORD *)v95 + 10);
      *((_OWORD *)v117 + 11) = v126;
      *((_OWORD *)v117 + 8) = v124;
      *((_OWORD *)v117 + 9) = v125;
      if (v97 == v96)
      {
        v129 = &v105[8 * v99];
      }
      else
      {
        v127 = v98 - 8;
        if ((unint64_t)(v98 - 8) >= 0x68)
        {
          v130 = v97 + (v98 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v105[v98 & 0xFFFFFFFFFFFFFFF8];
          v128 = v100;
          v129 = &v105[8 * v99];
          if (v130 >= 0x20)
          {
            v131 = (v127 >> 3) + 1;
            v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
            v128 = &v100[-v132];
            v129 = &v117[-v132];
            v133 = &v105[8 * v99 - 16];
            v134 = (__int128 *)(v97 + 8 * v99 - 16);
            v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v136 = *v134;
              *((_OWORD *)v133 - 1) = *(v134 - 1);
              *(_OWORD *)v133 = v136;
              v133 -= 32;
              v134 -= 2;
              v135 -= 4;
            }
            while (v135);
            if (v131 == (v131 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_120;
          }
        }
        else
        {
          v128 = v100;
          v129 = &v105[8 * v99];
        }
        do
        {
          v137 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v129 - 1) = v137;
          v129 -= 8;
        }
        while (v128 != (char *)v97);
      }
LABEL_120:
      v138 = v117 + 192;
      v139 = v96 - (_QWORD)v100;
      if (v139)
        memmove(v117 + 192, v100, v139);
      v140 = &v105[8 * v104];
      a2 = (double **)v193;
      *v193 = v129;
      v193[1] = (char *)v138 + v139;
      v193[2] = v140;
      if (v97)
        operator delete((void *)v97);
      goto LABEL_89;
    }
  }
LABEL_133:
  v148 = *(unsigned int *)(v4 + 104);
  if ((_DWORD)v148 == -1)
LABEL_181:
    sub_20E877AB8();
  v197 = &v196;
  v150 = (double)((unsigned int (*)(char **, uint64_t))off_24C9C4F28[v148])(&v197, v192);
  v152 = a2[1];
  v151 = a2[2];
  if (v152 < v151)
  {
    *v152 = v150;
    v153 = v152 + 1;
    goto LABEL_155;
  }
  v154 = *a2;
  v155 = (char *)v152 - (char *)*a2;
  v156 = v155 >> 3;
  v157 = (v155 >> 3) + 1;
  if (v157 >> 61)
    goto LABEL_179;
  v158 = (char *)v151 - (char *)v154;
  if (v158 >> 2 > v157)
    v157 = v158 >> 2;
  if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
    v159 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v159 = v157;
  if (v159)
  {
    if (v159 >> 61)
      goto LABEL_180;
    v160 = operator new(8 * v159);
    v161 = (double *)&v160[8 * v156];
    v151 = (double *)&v160[8 * v159];
    *v161 = v150;
    v153 = v161 + 1;
    v162 = (char *)v152 - (char *)v154;
    if (v152 == v154)
      goto LABEL_153;
    goto LABEL_147;
  }
  v160 = 0;
  v161 = (double *)(8 * v156);
  v151 = 0;
  *(double *)(8 * v156) = v150;
  v153 = (double *)(8 * v156 + 8);
  v162 = (char *)v152 - (char *)v154;
  if (v152 != v154)
  {
LABEL_147:
    v163 = v162 - 8;
    if (v163 < 0x58)
      goto LABEL_186;
    if ((unint64_t)((char *)v152 - &v160[v155]) < 0x20)
      goto LABEL_186;
    v164 = (v163 >> 3) + 1;
    v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
    v166 = &v152[v165 / 0xFFFFFFFFFFFFFFF8];
    v161 = (double *)((char *)v161 - v165);
    v167 = &v160[8 * v156 - 16];
    v168 = v152 - 2;
    v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v149 = *(_OWORD *)v168;
      *(v167 - 1) = *((_OWORD *)v168 - 1);
      *v167 = v149;
      v167 -= 2;
      v168 -= 4;
      v169 -= 4;
    }
    while (v169);
    v152 = v166;
    if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_186:
      do
      {
        v170 = *((_QWORD *)v152-- - 1);
        DWORD1(v149) = HIDWORD(v170);
        *((_QWORD *)v161-- - 1) = v170;
      }
      while (v152 != v154);
    }
  }
LABEL_153:
  *a2 = v161;
  a2[1] = v153;
  a2[2] = v151;
  if (v154)
  {
    operator delete(v154);
    v151 = a2[2];
  }
LABEL_155:
  a2[1] = v153;
  LODWORD(v149) = *(_DWORD *)(v4 + 80);
  v171 = (double)(unint64_t)v149;
  if (v153 < v151)
  {
    *v153 = v171;
    v172 = (uint64_t)(v153 + 1);
    goto LABEL_178;
  }
  v173 = *a2;
  v174 = (char *)v153 - (char *)*a2;
  v175 = v174 >> 3;
  v176 = (v174 >> 3) + 1;
  if (v176 >> 61)
LABEL_179:
    sub_20E867F44();
  v177 = (char *)v151 - (char *)v173;
  if (v177 >> 2 > v176)
    v176 = v177 >> 2;
  if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8)
    v178 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v178 = v176;
  if (!v178)
  {
    v179 = 0;
    v180 = (double *)(8 * v175);
    v181 = 0;
    *(double *)(8 * v175) = v171;
    v172 = 8 * v175 + 8;
    v182 = (char *)v153 - (char *)v173;
    if (v153 == v173)
      goto LABEL_176;
    goto LABEL_168;
  }
  if (v178 >> 61)
LABEL_180:
    sub_20E877A38();
  v179 = operator new(8 * v178);
  v180 = (double *)&v179[8 * v175];
  v181 = (double *)&v179[8 * v178];
  *v180 = v171;
  v172 = (uint64_t)(v180 + 1);
  v182 = (char *)v153 - (char *)v173;
  if (v153 == v173)
    goto LABEL_176;
LABEL_168:
  v183 = v182 - 8;
  if (v183 < 0x58)
  {
    v184 = v153;
    goto LABEL_175;
  }
  if ((unint64_t)((char *)v153 - &v179[v174]) < 0x20)
  {
    v184 = v153;
    do
    {
LABEL_175:
      v191 = *((_QWORD *)v184-- - 1);
      *((_QWORD *)v180-- - 1) = v191;
    }
    while (v184 != v173);
    goto LABEL_176;
  }
  v185 = (v183 >> 3) + 1;
  v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
  v184 = &v153[v186 / 0xFFFFFFFFFFFFFFF8];
  v180 = (double *)((char *)v180 - v186);
  v187 = &v179[8 * v175 - 16];
  v188 = v153 - 2;
  v189 = v185 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v190 = *(_OWORD *)v188;
    *(v187 - 1) = *((_OWORD *)v188 - 1);
    *v187 = v190;
    v187 -= 2;
    v188 -= 4;
    v189 -= 4;
  }
  while (v189);
  if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_175;
LABEL_176:
  *a2 = v180;
  a2[1] = (double *)v172;
  a2[2] = v181;
  if (v173)
    operator delete(v173);
LABEL_178:
  a2[1] = (double *)v172;
}

void sub_20EB1C3A0(uint64_t a1@<X0>, float64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v29;
  __int128 v31;
  float64x2_t v32;
  __int128 v33;
  __int128 v34;
  float64x2_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  __int128 v46;
  float64x2_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float64x2_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v65;
  int8x16_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int8x16_t v73;
  float64x2_t v74;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  __int128 v84;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  __int128 v91;
  __int128 v92;
  float64x2_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float64x2_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  float64x2_t v106;
  __int128 v107;
  __int128 v108;
  float64x2_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  float64x2_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  __int128 v124;
  float64x2_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  float64x2_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  float64x2_t v138;
  __int128 v139;
  __int128 v140;
  float64x2_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  float64x2_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  float64x2_t v154;
  __int128 v155;
  __int128 v156;
  float64x2_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  float64x2_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  float64x2_t v170;
  __int128 v171;
  __int128 v172;
  float64x2_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  float64x2_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  float64x2_t v186;
  float64_t v187;
  float64x2_t v188;
  float64_t v189;
  double v190[2];
  char v191;
  double v192[2];
  char v193;
  float64x2_t v194;
  float64_t v195;
  float64x2_t v196;
  float64_t v197;
  float64x2_t v198;
  float64_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64_t v202;
  float64x2_t v203;
  uint64_t v204;
  double v205[2];
  char v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  __int128 v212;
  uint64_t v213;

  if (a3)
  {
    v198.f64[0] = a2;
    *(_QWORD *)&v198.f64[1] = &v207;
    v7 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v7 == -1)
      goto LABEL_19;
    *(_QWORD *)&v210.f64[0] = &v198;
    ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C9C4F38[v7])(v205, &v210, a1 + 88);
    if (v206)
    {
      sub_20EA95534(a1, v205, &v198, &v210);
      if (!v206)
        sub_20E866B34();
      if (v205[1] < 2.22044605e-16)
      {
        v12 = 0;
        v13 = 5;
        v89 = (float64x2_t)vdupq_n_s64(0x3EC0C6F7A0B5ED8DuLL);
        while (1)
        {
          v196 = **(float64x2_t **)&a2;
          v197 = *(double *)(*(_QWORD *)&a2 + 16);
          v194 = **(float64x2_t **)&a2;
          v14 = v196.f64[v12];
          v195 = *(double *)(*(_QWORD *)&a2 + 16);
          v196.f64[v12] = v14 + 0.000001;
          v194.f64[v12] = v194.f64[v12] + -0.000001;
          *(_QWORD *)&v186.f64[0] = &v196;
          v15 = *(unsigned int *)(a1 + 104);
          if ((_DWORD)v15 == -1)
            break;
          *(_QWORD *)&v188.f64[0] = &v186;
          ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C9C4F48[v15])(v192, &v188, a1 + 88);
          *(_QWORD *)&v186.f64[0] = &v194;
          v16 = *(unsigned int *)(a1 + 104);
          if ((_DWORD)v16 == -1)
            break;
          *(_QWORD *)&v188.f64[0] = &v186;
          ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C9C4F58[v16])(v190, &v188, a1 + 88);
          if (!v193 || !v191)
            goto LABEL_16;
          sub_20EA95534(a1, v192, 0, &v188);
          sub_20EA95534(a1, v190, 0, &v186);
          v17.f64[0] = v189;
          v18.f64[0] = v187;
          v19 = v186;
          v20 = (int64x2_t)vsubq_f64(v17, v18);
          v21.f64[0] = v197;
          _Q4 = v196;
          _Q7 = vmulq_f64(_Q4, _Q4);
          _D16 = v196.f64[1];
          __asm { FMLA            D7, D16, V4.D[1] }
          v29.f64[0] = v195;
          _Q17 = v194;
          v31 = *(_OWORD *)(a3 + 128);
          v32 = *(float64x2_t *)a3;
          v33 = *(_OWORD *)(a3 + 16);
          v34 = *(_OWORD *)(a3 + 32);
          v35 = *(float64x2_t *)(a3 + 48);
          v36 = *(_OWORD *)(a3 + 64);
          v37 = *(_OWORD *)(a3 + 80);
          v38 = *(_OWORD *)(a3 + 96);
          _Q7.f64[0] = sqrt(_Q7.f64[0] + v21.f64[0] * v21.f64[0]);
          v39 = vmlaq_f64(v21, v17, _Q7);
          v40 = vmlaq_n_f64(v196, v188, _Q7.f64[0]);
          _Q6 = vmulq_f64(_Q17, _Q17);
          _Q7.f64[0] = v194.f64[1];
          __asm { FMLA            D6, D7, V17.D[1] }
          v42 = vdivq_f64(vsubq_f64(v188, v186), v89);
          v177 = *(float64x2_t *)(a3 + 112);
          v176 = v38;
          v175 = v37;
          v174 = v36;
          v173 = v35;
          v172 = v34;
          v171 = v33;
          v170 = v32;
          v178 = v31;
          v170.f64[((_BYTE)v13 - 5) & 0x1F] = v42.f64[0];
          _Q6.f64[0] = sqrt(_Q6.f64[0] + v29.f64[0] * v29.f64[0]);
          v43 = (int8x16_t)vmlsq_lane_f64(vsubq_f64(v40, _Q17), v19, _Q6.f64[0], 0);
          v44 = vdivq_f64((float64x2_t)vextq_s8(v43, (int8x16_t)vmlsq_f64(vsubq_f64(v39, v29), v18, _Q6), 8uLL), v89);
          v45 = vdivq_f64((float64x2_t)vzip1q_s64(v20, (int64x2_t)v43), v89);
          v169 = v185;
          v168 = v184;
          v167 = v183;
          v166 = v182;
          v165 = v181;
          v164 = v180;
          v163 = v179;
          v162 = v178;
          v161 = v177;
          v160 = v176;
          v159 = v175;
          v158 = v174;
          v157 = v173;
          v156 = v172;
          v155 = v171;
          v154 = v170;
          v154.f64[((_BYTE)v13 - 4) & 0x1F] = v42.f64[1];
          v152 = v168;
          v153 = v169;
          v150 = v166;
          v151 = v167;
          v148 = v164;
          v149 = v165;
          v146 = v162;
          v147 = v163;
          v144 = v160;
          v145 = v161;
          v142 = v158;
          v143 = v159;
          v140 = v156;
          v141 = v157;
          v138 = v154;
          v139 = v155;
          v138.f64[((_BYTE)v13 - 3) & 0x1F] = v45.f64[0];
          v136 = v152;
          v137 = v153;
          v134 = v150;
          v135 = v151;
          v132 = v148;
          v133 = v149;
          v130 = v146;
          v131 = v147;
          v128 = v144;
          v129 = v145;
          v126 = v142;
          v127 = v143;
          v124 = v140;
          v125 = v141;
          v122 = v138;
          v123 = v139;
          v122.f64[((_BYTE)v13 - 2) & 0x1F] = v45.f64[1];
          v120 = v136;
          v121 = v137;
          v118 = v134;
          v119 = v135;
          v116 = v132;
          v117 = v133;
          v114 = v130;
          v115 = v131;
          v112 = v128;
          v113 = v129;
          v110 = v126;
          v111 = v127;
          v108 = v124;
          v109 = v125;
          v106 = v122;
          v107 = v123;
          v106.f64[((_BYTE)v13 - 1) & 0x1F] = v44.f64[0];
          v104 = v120;
          v105 = v121;
          v102 = v118;
          v103 = v119;
          v100 = v116;
          v101 = v117;
          v98 = v114;
          v99 = v115;
          v96 = v112;
          v97 = v113;
          v94 = v110;
          v95 = v111;
          v92 = v108;
          v93 = v109;
          v90 = v106;
          v91 = v107;
          v90.f64[v13 & 0x1F] = v44.f64[1];
          v47 = v97;
          v46 = v98;
          v49 = v95;
          v48 = v96;
          v51 = v93;
          v50 = v94;
          v53 = v91;
          v52 = v92;
          *(float64x2_t *)a3 = v90;
          *(_OWORD *)(a3 + 16) = v53;
          *(_OWORD *)(a3 + 32) = v52;
          *(float64x2_t *)(a3 + 48) = v51;
          *(_OWORD *)(a3 + 64) = v50;
          *(_OWORD *)(a3 + 80) = v49;
          *(_OWORD *)(a3 + 96) = v48;
          *(float64x2_t *)(a3 + 112) = v47;
          v13 += 6;
          ++v12;
          *(_OWORD *)(a3 + 128) = v46;
          if (v13 == 23)
            goto LABEL_18;
        }
LABEL_19:
        sub_20E877AB8();
      }
      _Q2 = v207;
      _Q1 = v208;
      _Q0 = v209;
      v9.f64[0] = v199;
      _D17 = v204;
      v10.f64[0] = v202;
      __asm { FMLA            D16, D17, V2.D[1] }
      v60 = v207.f64[1];
      v61 = vmlaq_laneq_f64(vmulq_n_f64(v200, v208.f64[0]), v203, v208, 1);
      __asm { FMLA            D21, D17, V1.D[1] }
      v62 = v208.f64[1];
      v63 = vmlaq_laneq_f64(vmulq_n_f64(v200, v209.f64[0]), v203, v209, 1);
      __asm { FMLA            D4, D17, V0.D[1] }
      v65 = v209.f64[1];
      *(float64x2_t *)a3 = vmlaq_laneq_f64(vmulq_n_f64(v200, v207.f64[0]), v203, v207, 1);
      *(_QWORD *)(a3 + 16) = _D16;
      *(float64x2_t *)(a3 + 48) = v61;
      *(_QWORD *)(a3 + 64) = _Q21.i64[0];
      *(float64x2_t *)(a3 + 96) = v63;
      *(_QWORD *)(a3 + 112) = _D4;
      v63.f64[0] = *(float64_t *)(*(_QWORD *)&a2 + 16);
      _Q4 = **(float64x2_t **)&a2;
      _Q5 = vmulq_f64(_Q4, _Q4);
      _D16 = *(_QWORD *)(*(_QWORD *)&a2 + 8);
      __asm { FMLA            D5, D16, V4.D[1] }
      _Q5.f64[0] = sqrt(_Q5.f64[0] + v63.f64[0] * v63.f64[0]);
      *(double *)_Q21.i64 = v211 * **(double **)&a2;
      v69 = (int8x16_t)vmulq_laneq_f64(v210, **(float64x2_t **)&a2, 1);
      _Q4.f64[0] = vmuld_lane_f64(v211, **(float64x2_t **)&a2, 1);
      v70 = vmulq_n_f64(v210, v63.f64[0]);
      v63.f64[0] = v211 * v63.f64[0];
      v71 = (float64x2_t)vzip1q_s64(_Q21, (int64x2_t)v69);
      v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0);
      v73 = (int8x16_t)vdivq_f64((float64x2_t)vextq_s8(v69, (int8x16_t)_Q4, 8uLL), v72);
      v74 = vdivq_f64(v71, v72);
      __asm { FMOV            V23.2D, #1.0 }
      v76 = vaddq_f64(vdivq_f64(v63, _Q5), _Q23);
      *(_QWORD *)&v77 = *(_OWORD *)&vmulq_f64(v9, _Q5);
      v78 = vmulq_n_f64(v198, _Q5.f64[0]);
      *(_QWORD *)&v79 = *(_OWORD *)&vmulq_f64(v10, _Q5);
      v80 = vmulq_n_f64(v201, _Q5.f64[0]);
      v81 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q2.f64[0]), v80, _Q2, 1);
      _Q2.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q2.f64[0]), v60, v79);
      v82 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q1.f64[0]), v80, _Q1, 1);
      _Q1.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q1.f64[0]), v62, v79);
      v83 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q0.f64[0]), v80, _Q0, 1);
      _Q0.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q0.f64[0]), v65, v79);
      v51 = vaddq_f64(vaddq_f64(vdivq_f64(vmulq_n_f64(v210, **(double **)&a2), v72), (float64x2_t)xmmword_21030D320), v81);
      *(float64x2_t *)(a3 + 24) = v51;
      *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(vaddq_f64(v74, (float64x2_t)0), _Q2);
      *(float64x2_t *)(a3 + 72) = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v74, v73, 8uLL), (float64x2_t)xmmword_2102DD520), v82);
      *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v73, 1), (float64x2_t)0), _Q1);
      v47 = vaddq_f64(vaddq_f64(vdivq_f64(v70, v72), (float64x2_t)0), v83);
      *(float64x2_t *)(a3 + 120) = v47;
      *(_QWORD *)(a3 + 136) = *(_OWORD *)&vaddq_f64(v76, _Q0);
      goto LABEL_18;
    }
LABEL_16:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
    return;
  }
  v207.f64[0] = a2;
  v54 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v54 == -1)
    goto LABEL_19;
  *(_QWORD *)&v210.f64[0] = &v207;
  ((void (*)(float64x2_t *__return_ptr, float64x2_t *, uint64_t))off_24C9C4F68[v54])(&v198, &v210, a1 + 88);
  if (!LOBYTE(v199))
    goto LABEL_16;
  sub_20EA95534(a1, v198.f64, 0, &v210);
LABEL_18:
  v84 = v212;
  v47.f64[0] = *(float64_t *)(*(_QWORD *)&a2 + 16);
  _Q2 = **(float64x2_t **)&a2;
  _Q3 = vmulq_f64(_Q2, _Q2);
  _D4 = *(_QWORD *)(*(_QWORD *)&a2 + 8);
  __asm { FMLA            D3, D4, V2.D[1] }
  _Q3.f64[0] = sqrt(_Q3.f64[0] + v47.f64[0] * v47.f64[0]);
  v51.f64[0] = v211;
  v88 = v210;
  *(_QWORD *)(a4 + 16) = v213;
  *(_OWORD *)a4 = v84;
  *(float64x2_t *)(a4 + 24) = vmlaq_n_f64(_Q2, v88, _Q3.f64[0]);
  *(_QWORD *)(a4 + 40) = *(_OWORD *)&vmlaq_f64(v47, v51, _Q3);
  *(_BYTE *)(a4 + 48) = 1;
}

void sub_20EB1CAB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>, double a7@<D0>, float64x2_t a8@<Q1>)
{
  int v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  int8x16_t v36;
  int64x2_t v39;
  float64x2_t v41;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v88;
  float64x2_t v90;
  double v96;
  float64x2_t v98;
  _BYTE *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  int8x16_t v105;
  float64x2_t v106;
  float64x2_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  size_t v113;
  float64x2_t *p_dst;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  size_t v119;
  float64x2_t *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  size_t v125;
  void *v126;
  float64_t v127;
  const void **v128;
  const void *v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t *v134;
  size_t v135;
  const char *v136;
  unsigned __int8 v137;
  const char *v138;
  size_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  const char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  float64_t v151;
  float64_t v152;
  const void **v153;
  float64_t v154;
  const void **v155;
  const void *v156;
  uint64_t v157;
  uint64_t v158;
  float64_t v159;
  uint64_t v160;
  uint64_t *v161;
  size_t v162;
  const char *v163;
  unsigned __int8 v164;
  const char *v165;
  size_t v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  float64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  const void *v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  uint64_t v182;
  uint64_t *v183;
  size_t v184;
  const char *v185;
  unsigned __int8 v186;
  const char *v187;
  size_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  void **v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  float64x2_t v202;
  float64_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  int8x16_t v208;
  double v209;
  double v210;
  float64x2_t v211;
  void **v212;
  void *v213[2];
  int64_t v214;
  int **v215;
  float64x2_t v216;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v217;
  int v218;
  const char *v219;
  int v220;
  const char *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  float64x2_t __dst;
  double v225;
  float64x2_t v226;
  uint64_t v227;
  float64x2_t v228;
  uint64_t v229;
  float64x2_t v230;
  double v231;
  double v232;
  void *v233;
  char v234;
  double v235;
  int v236;
  uint64_t v237;
  float64x2_t v238;
  int64_t v239;
  float64x2_t v240;
  double v241;
  char v242;
  void *object[2];
  float64x2_t v244;
  void *__p[2];
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64_t v253;
  float64x2_t v254;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  float64x2_t v256;
  void **v257;
  float64x2_t v258;
  std::__shared_weak_count *v259;

  if (*(double *)(a2 + 16) < 0.0)
    goto LABEL_19;
  a8.f64[0] = *(float64_t *)(a2 + 16);
  _Q0 = *(float64x2_t *)a2;
  _Q2 = vmulq_f64(_Q0, _Q0);
  _D3 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  _Q2.f64[0] = _Q2.f64[0] + a8.f64[0] * a8.f64[0];
  if (_Q2.f64[0] == 0.0)
    goto LABEL_19;
  v201 = a6;
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v252 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(_QWORD *)&v253 = *(_OWORD *)&vmulq_f64(a8, _Q2);
  if (a3 <= 1)
    v21 = 1;
  else
    v21 = a3;
  sub_20EB1C3A0(a1, COERCE_FLOAT64_T(&v252), (uint64_t)object, (uint64_t)&v238);
  if (!v242)
  {
LABEL_18:
    a6 = v201;
LABEL_19:
    *a6 = 0;
    a6[24] = 0;
    return;
  }
  __asm { FMOV            V0.2D, #1.0 }
  v202 = _Q0;
  while (1)
  {
    _Q7 = v240;
    _Q0 = vmulq_f64(_Q7, _Q7);
    _Q1.f64[0] = v240.f64[1];
    __asm { FMLA            D0, D1, V7.D[1] }
    v26.f64[0] = v241;
    *(_QWORD *)&_Q1.f64[0] = v239;
    v24.f64[0] = _Q0.f64[0] + v26.f64[0] * v26.f64[0];
    _Q0.f64[0] = *(float64_t *)(a2 + 16);
    v30 = vsubq_f64(_Q0, _Q1);
    v31 = vsubq_f64(*(float64x2_t *)a2, v238);
    _Q0.f64[0] = v31.f64[1];
    __asm { FMLA            D18, D0, V7.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v241, v30.f64[0]);
    v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
    v33 = vdivq_f64(vmulq_n_f64(v240, _Q18.f64[0]), v32);
    v34 = vdivq_f64(vmulq_f64(v26, _Q18), v24);
    *(_QWORD *)&v35 = *(_OWORD *)&vabdq_f64(v34, v30);
    v36 = (int8x16_t)vabdq_f64(v33, v31);
    if (*(double *)v36.i64 <= a7 && *(double *)&v36.i64[1] <= a7 && v35 <= a7)
    {
      if (a5)
      {
        *(float64x2_t *)a5 = v238;
        *(_QWORD *)(a5 + 16) = v239;
        *(float64x2_t *)(a5 + 24) = v240;
        *(double *)(a5 + 40) = v241;
      }
      v99 = v201;
      if (!a4)
        goto LABEL_33;
      __dst = *(float64x2_t *)a2;
      v225 = *(double *)(a2 + 16);
      __dst.f64[0] = __dst.f64[0] + 0.0001;
      sub_20EB1CAB8(&v216, a1, &__dst, a3, 0, 0, a7);
      if ((_BYTE)v218)
      {
        __dst.f64[0] = __dst.f64[0] + -0.0002;
        sub_20EB1CAB8(&v238, a1, &__dst, a3, 0, 0, a7);
        if (!LOBYTE(v240.f64[0]))
          goto LABEL_52;
        if (!(_BYTE)v218)
          goto LABEL_240;
        *(_QWORD *)&v100.f64[0] = v217;
        *(_QWORD *)&v101.f64[0] = v239;
        v102 = vsubq_f64(v100, v101);
        v101.f64[0] = 0.0002;
        v211 = v101;
        *(_QWORD *)&v102.f64[0] = *(_OWORD *)&vdivq_f64(v102, v101);
        v102.f64[1] = *(float64_t *)(a4 + 24);
        *(float64x2_t *)a4 = vdivq_f64(vsubq_f64(v216, v238), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
        *(float64x2_t *)(a4 + 16) = v102;
        __dst = *(float64x2_t *)a2;
        v225 = *(double *)(a2 + 16);
        __dst.f64[1] = __dst.f64[1] + 0.0001;
        sub_20EB1CAB8(&v216, a1, &__dst, a3, 0, 0, a7);
        if ((_BYTE)v218)
        {
          __dst.f64[1] = __dst.f64[1] + -0.0002;
          sub_20EB1CAB8(&v238, a1, &__dst, a3, 0, 0, a7);
          if (!LOBYTE(v240.f64[0]))
            goto LABEL_52;
          if (!(_BYTE)v218)
            goto LABEL_240;
          *(_QWORD *)&v103.f64[0] = v217;
          *(_QWORD *)&v104.f64[0] = v239;
          v105 = (int8x16_t)vdivq_f64(vsubq_f64(v216, v238), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
          *(int64x2_t *)(a4 + 16) = vzip1q_s64(*(int64x2_t *)(a4 + 16), (int64x2_t)v105);
          *(int8x16_t *)(a4 + 32) = vextq_s8(v105, (int8x16_t)vdivq_f64(vsubq_f64(v103, v104), v211), 8uLL);
          v225 = *(double *)(a2 + 16);
          __dst = *(float64x2_t *)a2;
          v225 = v225 + 0.0001;
          sub_20EB1CAB8(&v216, a1, &__dst, a3, 0, 0, a7);
          if ((_BYTE)v218)
          {
            v225 = v225 + -0.0002;
            sub_20EB1CAB8(&v238, a1, &__dst, a3, 0, 0, a7);
            if (LOBYTE(v240.f64[0]))
            {
              if ((_BYTE)v218)
              {
                *(_QWORD *)&v106.f64[0] = v217;
                *(_QWORD *)&v107.f64[0] = v239;
                *(float64x2_t *)(a4 + 48) = vdivq_f64(vsubq_f64(v216, v238), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
                *(_QWORD *)(a4 + 64) = *(_OWORD *)&vdivq_f64(vsubq_f64(v106, v107), v211);
LABEL_33:
                *(float64x2_t *)v201 = v252;
                *((float64_t *)v201 + 2) = v253;
                v201[24] = 1;
                return;
              }
LABEL_240:
              sub_20E866B34();
            }
LABEL_52:
            sub_20EB1A010(&v215);
            if (*v215[7] > 2)
              goto LABEL_239;
            v121 = *((unsigned __int8 *)v215 + 72);
            v122 = sub_20E8C31DC((uint64_t)v215, "OSLogSurrogateAppender", 1, 0);
            v123 = v122 ? v122 + 16 : 0;
            if (!v121 && !v122)
              goto LABEL_239;
            sub_20E863438((uint64_t)&v226);
            v124 = sub_20E86A980(&v227, (uint64_t)"failed to project in calculating Jacobian: point + delta = ", 59);
            object[0] = &__dst;
            sub_20EB1A104(v124, (__int128 **)object);
            if ((v236 & 0x10) != 0)
            {
              v154 = v235;
              if (*(_QWORD *)&v235 < *(_QWORD *)&v232)
              {
                v235 = v232;
                v154 = v232;
              }
              v155 = (const void **)&v231;
            }
            else
            {
              if ((v236 & 8) == 0)
              {
                v125 = 0;
                HIBYTE(v214) = 0;
                v126 = v213;
                goto LABEL_189;
              }
              v155 = (const void **)&v229;
              v154 = v230.f64[1];
            }
            v178 = *v155;
            v125 = *(_QWORD *)&v154 - (_QWORD)*v155;
            if (v125 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v125 >= 0x17)
            {
              v179 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v125 | 7) != 0x17)
                v179 = v125 | 7;
              v180 = v179 + 1;
              v126 = operator new(v179 + 1);
              v213[1] = (void *)v125;
              v214 = v180 | 0x8000000000000000;
              v213[0] = v126;
            }
            else
            {
              HIBYTE(v214) = LOBYTE(v154) - *(_BYTE *)v155;
              v126 = v213;
              if (!v125)
              {
LABEL_189:
                *((_BYTE *)v126 + v125) = 0;
                *(_QWORD *)&v254.f64[0] = &v215;
                *(std::chrono::steady_clock::time_point *)&v254.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
                rep = std::chrono::system_clock::now().__d_.__rep_;
                LODWORD(v256.f64[0]) = 2;
                *(_QWORD *)&v256.f64[1] = "unknown file";
                LODWORD(v257) = 380;
                v258.f64[1] = 0.0;
                v259 = 0;
                *(_QWORD *)&v258.f64[0] = "unknown function";
                v181 = v213;
                if (v214 < 0)
                  v181 = (void **)v213[0];
                v212 = v181;
                v182 = **(_QWORD **)&v254.f64[0];
                v183 = (uint64_t *)(**(_QWORD **)&v254.f64[0] + 16);
                if (*(char *)(**(_QWORD **)&v254.f64[0] + 39) < 0)
                {
                  v185 = *(const char **)(v182 + 16);
                  v184 = *(_QWORD *)(v182 + 24);
                }
                else
                {
                  v184 = *(unsigned __int8 *)(**(_QWORD **)&v254.f64[0] + 39);
                  v185 = (const char *)(v182 + 16);
                }
                v186 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)object);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                  if (LOBYTE(v244.f64[1]) && SHIBYTE(v244.f64[0]) < 0)
                    operator delete(object[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v99 = v201;
                }
                if (byte_254A4A4F8[23] >= 0)
                  v187 = byte_254A4A4F8;
                else
                  v187 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v188 = byte_254A4A4F8[23];
                else
                  v188 = *(_QWORD *)&byte_254A4A4F8[8];
                object[0] = os_log_create(v187, v185);
                v189 = &object[1];
                if (v188 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v188 >= 0x17)
                {
                  v190 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v188 | 7) != 0x17)
                    v190 = v188 | 7;
                  v191 = v190 + 1;
                  v189 = (void **)operator new(v190 + 1);
                  *(_QWORD *)&v244.f64[1] = v191 | 0x8000000000000000;
                  object[1] = v189;
                  *(_QWORD *)&v244.f64[0] = v188;
                  v99 = v201;
                }
                else
                {
                  HIBYTE(v244.f64[1]) = v188;
                  if (!v188)
                  {
LABEL_209:
                    *((_BYTE *)v189 + v188) = 0;
                    LOBYTE(__p[0]) = 1;
                    v192 = &__p[1];
                    if (v184 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v184 >= 0x17)
                    {
                      v193 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v184 | 7) != 0x17)
                        v193 = v184 | 7;
                      v194 = v193 + 1;
                      v192 = (void **)operator new(v193 + 1);
                      *(_QWORD *)&v246.f64[1] = v194 | 0x8000000000000000;
                      __p[1] = v192;
                      *(_QWORD *)&v246.f64[0] = v184;
                    }
                    else
                    {
                      HIBYTE(v246.f64[1]) = v184;
                      if (!v184)
                        goto LABEL_217;
                    }
                    memmove(v192, v185, v184);
LABEL_217:
                    *((_BYTE *)v192 + v184) = 0;
                    LOBYTE(v247.f64[0]) = 1;
                    v195 = object[0];
                    if (SHIBYTE(v246.f64[1]) < 0)
                      operator delete(__p[1]);
                    if (LOBYTE(__p[0]) && SHIBYTE(v244.f64[1]) < 0)
                      operator delete(object[1]);
                    if (object[0])
                      os_release(object[0]);
                    sub_20EB226E8(v123, v183, v195, OS_LOG_TYPE_DEBUG, (const char **)&v212);
                    if (v121)
                    {
                      v196 = v213;
                      if (v214 < 0)
                        v196 = (void **)v213[0];
                      sub_20E8C003C((uint64_t)&v254, "%s", (const char *)v196);
                      sub_20E863570((uint64_t)&v254);
                    }
                    sub_20E863570((uint64_t)&v254);
                    v197 = v259;
                    if (v259)
                    {
                      p_shared_owners = (unint64_t *)&v259->__shared_owners_;
                      do
                        v199 = __ldaxr(p_shared_owners);
                      while (__stlxr(v199 - 1, p_shared_owners));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                      }
                    }
                    if ((SHIBYTE(v214) & 0x80000000) == 0)
                      goto LABEL_236;
                    v151 = *(double *)v213;
                    goto LABEL_235;
                  }
                }
                memmove(v189, v187, v188);
                goto LABEL_209;
              }
            }
            memmove(v126, v178, v125);
            goto LABEL_189;
          }
        }
      }
      sub_20EB1A010(v213);
      if (**((int **)v213[0] + 7) > 2)
        goto LABEL_239;
      v115 = *((unsigned __int8 *)v213[0] + 72);
      v116 = sub_20E8C31DC((uint64_t)v213[0], "OSLogSurrogateAppender", 1, 0);
      v117 = v116 ? v116 + 16 : 0;
      if (!v115 && !v116)
        goto LABEL_239;
      sub_20E863438((uint64_t)&v226);
      v118 = sub_20E86A980(&v227, (uint64_t)"failed to project in calculating Jacobian: point + delta = ", 59);
      object[0] = &__dst;
      sub_20EB1A104(v118, (__int128 **)object);
      if ((v236 & 0x10) != 0)
      {
        v152 = v235;
        if (*(_QWORD *)&v235 < *(_QWORD *)&v232)
        {
          v235 = v232;
          v152 = v232;
        }
        v153 = (const void **)&v231;
      }
      else
      {
        if ((v236 & 8) == 0)
        {
          v119 = 0;
          HIBYTE(v239) = 0;
          v120 = &v238;
          goto LABEL_134;
        }
        v153 = (const void **)&v229;
        v152 = v230.f64[1];
      }
      v156 = *v153;
      v119 = *(_QWORD *)&v152 - (_QWORD)*v153;
      if (v119 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v119 >= 0x17)
      {
        v157 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17)
          v157 = v119 | 7;
        v158 = v157 + 1;
        v120 = (float64x2_t *)operator new(v157 + 1);
        v239 = v158 | 0x8000000000000000;
        *(_QWORD *)&v238.f64[0] = v120;
        *(_QWORD *)&v238.f64[1] = v119;
      }
      else
      {
        HIBYTE(v239) = LOBYTE(v152) - *(_BYTE *)v153;
        v120 = &v238;
        if (!v119)
        {
LABEL_134:
          *((_BYTE *)v120->f64 + v119) = 0;
          *(_QWORD *)&v254.f64[0] = v213;
          *(std::chrono::steady_clock::time_point *)&v254.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v256.f64[0]) = 2;
          *(_QWORD *)&v256.f64[1] = "unknown file";
          LODWORD(v257) = 372;
          v258.f64[1] = 0.0;
          v259 = 0;
          *(_QWORD *)&v258.f64[0] = "unknown function";
          v159 = COERCE_DOUBLE(&v238);
          if (v239 < 0)
            v159 = v238.f64[0];
          v215 = *(int ***)&v159;
          v160 = **(_QWORD **)&v254.f64[0];
          v161 = (uint64_t *)(**(_QWORD **)&v254.f64[0] + 16);
          if (*(char *)(**(_QWORD **)&v254.f64[0] + 39) < 0)
          {
            v163 = *(const char **)(v160 + 16);
            v162 = *(_QWORD *)(v160 + 24);
          }
          else
          {
            v162 = *(unsigned __int8 *)(**(_QWORD **)&v254.f64[0] + 39);
            v163 = (const char *)(v160 + 16);
          }
          v164 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (LOBYTE(v244.f64[1]) && SHIBYTE(v244.f64[0]) < 0)
              operator delete(object[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v99 = v201;
          }
          if (byte_254A4A4F8[23] >= 0)
            v165 = byte_254A4A4F8;
          else
            v165 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v166 = byte_254A4A4F8[23];
          else
            v166 = *(_QWORD *)&byte_254A4A4F8[8];
          object[0] = os_log_create(v165, v163);
          v167 = &object[1];
          if (v166 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v166 >= 0x17)
          {
            v168 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v166 | 7) != 0x17)
              v168 = v166 | 7;
            v169 = v168 + 1;
            v167 = (void **)operator new(v168 + 1);
            *(_QWORD *)&v244.f64[1] = v169 | 0x8000000000000000;
            object[1] = v167;
            *(_QWORD *)&v244.f64[0] = v166;
            v99 = v201;
          }
          else
          {
            HIBYTE(v244.f64[1]) = v166;
            if (!v166)
            {
LABEL_154:
              *((_BYTE *)v167 + v166) = 0;
              LOBYTE(__p[0]) = 1;
              v170 = &__p[1];
              if (v162 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v162 >= 0x17)
              {
                v171 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v162 | 7) != 0x17)
                  v171 = v162 | 7;
                v172 = v171 + 1;
                v170 = (void **)operator new(v171 + 1);
                *(_QWORD *)&v246.f64[1] = v172 | 0x8000000000000000;
                __p[1] = v170;
                *(_QWORD *)&v246.f64[0] = v162;
              }
              else
              {
                HIBYTE(v246.f64[1]) = v162;
                if (!v162)
                  goto LABEL_162;
              }
              memmove(v170, v163, v162);
LABEL_162:
              *((_BYTE *)v170 + v162) = 0;
              LOBYTE(v247.f64[0]) = 1;
              v173 = object[0];
              if (SHIBYTE(v246.f64[1]) < 0)
                operator delete(__p[1]);
              if (LOBYTE(__p[0]) && SHIBYTE(v244.f64[1]) < 0)
                operator delete(object[1]);
              if (object[0])
                os_release(object[0]);
              sub_20EB220E4(v117, v161, v173, OS_LOG_TYPE_DEBUG, (const char **)&v215);
              if (v115)
              {
                v174 = COERCE_DOUBLE(&v238);
                if (v239 < 0)
                  v174 = v238.f64[0];
                sub_20E8C003C((uint64_t)&v254, "%s", *(const char **)&v174);
                sub_20E863570((uint64_t)&v254);
              }
              sub_20E863570((uint64_t)&v254);
              v175 = v259;
              if (v259)
              {
                v176 = (unint64_t *)&v259->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              if ((SHIBYTE(v239) & 0x80000000) == 0)
                goto LABEL_236;
              v151 = v238.f64[0];
LABEL_235:
              operator delete(*(void **)&v151);
              goto LABEL_236;
            }
          }
          memmove(v167, v165, v166);
          goto LABEL_154;
        }
      }
      memmove(v120, v156, v119);
      goto LABEL_134;
    }
    v39 = (int64x2_t)vsubq_f64(v34, v30);
    v208 = (int8x16_t)vsubq_f64(v33, v31);
    *(_QWORD *)&v209 = vextq_s8(v208, v208, 8uLL).u64[0];
    v210 = *(double *)v39.i64;
    if (!--v21)
      break;
    *(double *)v39.i64 = v241 * v240.f64[0];
    _Q2 = (int8x16_t)vmulq_laneq_f64(v240, v240, 1);
    *(double *)v36.i64 = vmuld_lane_f64(v241, v240, 1);
    v23.f64[0] = v241 * v241;
    v41 = vdivq_f64(vmulq_n_f64(v240, v240.f64[0]), v32);
    _Q23 = vdivq_f64((float64x2_t)vzip1q_s64(v39, (int64x2_t)_Q2), v32);
    _Q24 = vdivq_f64((float64x2_t)vextq_s8(_Q2, v36, 8uLL), v32);
    v44 = vdivq_f64(vmulq_n_f64(v240, v241), v32);
    _Q28 = vdivq_f64(v23, v24);
    v46.f64[1] = v202.f64[1];
    v47 = vsubq_f64((float64x2_t)0, v44);
    _Q21 = (int8x16_t)vsubq_f64((float64x2_t)xmmword_21030D320, _Q24);
    _Q1 = (int8x16_t)vsubq_f64((float64x2_t)0, _Q23);
    v50 = vsubq_f64((float64x2_t)xmmword_21030D320, v41);
    _Q2.i64[0] = vextq_s8(_Q21, _Q21, 8uLL).u64[0];
    *(_QWORD *)&v51.f64[0] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    v52 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q24, 8uLL);
    v53.f64[1] = 1.0;
    v46.f64[0] = v241 * v31.f64[0];
    v53.f64[0] = vmuld_lane_f64(v241, v31, 1);
    v26.f64[0] = v241 * v30.f64[0];
    v54 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_21030D320, vaddq_f64(v41, v41)), _Q18.f64[0]), v240, v31.f64[0]);
    _Q29 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_2102DD520, vaddq_f64(v52, v52)), _Q18.f64[0]), v240, v31, 1);
    _Q27 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64((float64x2_t)0, vaddq_f64(v44, v44)), _Q18.f64[0]), v240, v30.f64[0]);
    _Q20 = vmlaq_f64(v26, _Q18, vsubq_f64(v202, vaddq_f64(_Q28, _Q28)));
    v58 = (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(v46, _Q18, vsubq_f64((float64x2_t)0, vaddq_f64(_Q23, _Q23))), (int64x2_t)_Q29);
    *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vdivq_f64((float64x2_t)vextq_s8(_Q29, (int8x16_t)vmlaq_f64(v53, _Q18, vsubq_f64((float64x2_t)0, (float64x2_t)vdupq_laneq_s64((int64x2_t)vaddq_f64(_Q24, _Q24), 1))), 8uLL), v32);
    _Q7 = (int8x16_t)vdivq_f64(v58, v32);
    *(_QWORD *)&v60.f64[0] = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
    _D6 = *(_OWORD *)&vdivq_f64(_Q20, v24);
    v62 = vdivq_f64(_Q27, v32);
    v63 = vdivq_f64(v54, v32);
    _V11.D[1] = object[1];
    _V10.D[1] = v244.f64[1];
    _Q28.f64[1] = v247.f64[1];
    _Q27.f64[1] = v248.f64[1];
    _V12.D[1] = __p[1];
    _Q29.i64[1] = *(_QWORD *)&v246.f64[1];
    _Q23.f64[1] = v250.f64[1];
    _Q20.f64[1] = v251.f64[1];
    _Q24.f64[1] = v249.f64[1];
    *(_QWORD *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
    *(_QWORD *)&v50.f64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
    *(_QWORD *)&v51.f64[1] = _Q21.i64[0];
    v60.f64[1] = v46.f64[0];
    *(_QWORD *)&v63.f64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
    *(_QWORD *)&v62.f64[1] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, *(double *)object), v51, *(float64x2_t *)object, 1), v47, v244.f64[0]), v63, v244, 1), v60, *(double *)__p), v62, *(float64x2_t *)__p, 1);
    __asm
    {
      FMLA            D21, D2, V11.D[1]
      FMLA            D21, D7, V10.D[1]
      FMLA            D21, D6, V12.D[1]
    }
    v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v246.f64[0]), v51, v246, 1), v47, v247.f64[0]), v63, v247, 1), v60, v248.f64[0]), v62, v248, 1);
    __asm
    {
      FMLA            D26, D2, V29.D[1]
      FMLA            D26, D7, V28.D[1]
      FMLA            D26, D6, V27.D[1]
    }
    _Q4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v249.f64[0]), v51, v249, 1), v47, v250.f64[0]), v63, v250, 1), v60, v251.f64[0]), v62, v251, 1);
    __asm
    {
      FMLA            D1, D2, V24.D[1]
      FMLA            D1, D7, V23.D[1]
      FMLA            D1, D6, V20.D[1]
    }
    *(_QWORD *)&v51.f64[0] = _Q1.i64[0];
    v73 = (float64x2_t)vzip1q_s64((int64x2_t)v67, (int64x2_t)v68);
    v74 = vmulq_n_f64(v73, v67.f64[0]);
    v75 = v73;
    v76 = (float64x2_t)vzip2q_s64((int64x2_t)v67, (int64x2_t)v68);
    v77 = vmlaq_laneq_f64(v74, v76, v67, 1);
    v78 = v76;
    *(_QWORD *)&v76.f64[0] = _Q21.i64[0];
    v76.f64[1] = _D26;
    v79 = vmlaq_n_f64(v77, v76, *(double *)_Q21.i64);
    v80 = v76;
    _Q1 = vmulq_f64(_Q4, v67);
    _Q2.i64[0] = *(_QWORD *)&v67.f64[1];
    __asm { FMLA            D1, D2, V4.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + v51.f64[0] * *(double *)_Q21.i64;
    _Q6 = v75;
    v206 = v78;
    v207 = v75;
    v83 = v78;
    v84 = v80;
    v204 = v51.f64[0];
    v205 = v80;
    v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v68.f64[0]), v78, v68, 1), v80, _D26);
    _Q7 = _Q4;
    v203 = _Q4.f64[1];
    _Q3 = vmulq_f64(_Q4, v68);
    _Q4.f64[0] = v68.f64[1];
    __asm { FMLA            D3, D4, V7.D[1] }
    v80.f64[0] = v51.f64[0];
    _Q3.f64[0] = _Q3.f64[0] + v51.f64[0] * _D26;
    v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q7.f64[0]), v83, _Q7, 1), v84, v51.f64[0]);
    _Q5 = vmulq_f64(_Q7, _Q7);
    _Q6.f64[0] = _Q7.f64[1];
    __asm { FMLA            D5, D6, V7.D[1] }
    _Q5.f64[0] = _Q5.f64[0] + v80.f64[0] * v80.f64[0];
    _Q6.f64[1] = 0.001;
    _Q6.f64[0] = 0.001;
    v254 = vaddq_f64(v79, (float64x2_t)xmmword_210315550);
    v256 = vaddq_f64(v85, (float64x2_t)xmmword_210315560);
    rep = *(_OWORD *)&vaddq_f64(_Q1, (float64x2_t)0);
    v257 = (void **)*(_OWORD *)&vaddq_f64(_Q3, (float64x2_t)0);
    v258 = vaddq_f64(v88, (float64x2_t)0);
    v259 = (std::__shared_weak_count *)*(_OWORD *)&vaddq_f64(_Q5, _Q6);
    sub_20E8BE424((uint64_t)&v226);
    v90.f64[0] = v253;
    _D4 = v229;
    _D19 = v209;
    _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v207, *(double *)v208.i64), v206, v209), v205, v210);
    _V20.D[1] = v203;
    __asm { FMLA            D17, D19, V20.D[1] }
    v96 = _D17 + v204 * v210;
    __asm { FMLA            D2, D4, V16.D[1] }
    v98.f64[0] = _D2 + v231 * v96;
    v252 = vsubq_f64(v252, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, _Q16.f64[0]), v228, _Q16, 1), v230, v96));
    *(_QWORD *)&v253 = *(_OWORD *)&vsubq_f64(v90, v98);
    sub_20EB1C3A0(a1, COERCE_FLOAT64_T(&v252), (uint64_t)object, (uint64_t)&v238);
    if (!v242)
      goto LABEL_18;
  }
  sub_20EB1A010(v213);
  v99 = v201;
  if (**((int **)v213[0] + 7) > 2)
    goto LABEL_239;
  v108 = *((unsigned __int8 *)v213[0] + 72);
  v109 = sub_20E8C31DC((uint64_t)v213[0], "OSLogSurrogateAppender", 1, 0);
  v110 = v109 ? v109 + 16 : 0;
  if (!v108 && !v109)
    goto LABEL_239;
  sub_20E863438((uint64_t)&v226);
  sub_20E86A980(&v227, (uint64_t)"ProjectPoint did not converge: num_iterations=", 46);
  v111 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v111, (uint64_t)", max_residual=", 15);
  v112 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v112, (uint64_t)", |residual|=", 13);
  std::ostream::operator<<();
  if ((v236 & 0x10) != 0)
  {
    v127 = v235;
    if (*(_QWORD *)&v235 < *(_QWORD *)&v232)
    {
      v235 = v232;
      v127 = v232;
    }
    v128 = (const void **)&v231;
  }
  else
  {
    if ((v236 & 8) == 0)
    {
      v113 = 0;
      HIBYTE(v225) = 0;
      p_dst = &__dst;
      goto LABEL_73;
    }
    v128 = (const void **)&v229;
    v127 = v230.f64[1];
  }
  v129 = *v128;
  v113 = *(_QWORD *)&v127 - (_QWORD)*v128;
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v113 >= 0x17)
  {
    v130 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v130 = v113 | 7;
    v131 = v130 + 1;
    p_dst = (float64x2_t *)operator new(v130 + 1);
    *(_QWORD *)&__dst.f64[1] = v113;
    *(_QWORD *)&v225 = v131 | 0x8000000000000000;
    *(_QWORD *)&__dst.f64[0] = p_dst;
    goto LABEL_72;
  }
  HIBYTE(v225) = LOBYTE(v127) - *(_BYTE *)v128;
  p_dst = &__dst;
  if (v113)
LABEL_72:
    memmove(p_dst, v129, v113);
LABEL_73:
  *((_BYTE *)p_dst->f64 + v113) = 0;
  *(_QWORD *)&v216.f64[0] = v213;
  *(std::chrono::steady_clock::time_point *)&v216.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  v217 = std::chrono::system_clock::now().__d_.__rep_;
  v218 = 2;
  v219 = "unknown file";
  v220 = 352;
  v222 = 0;
  v223 = 0;
  v221 = "unknown function";
  v132 = (const char *)&__dst;
  if (v225 < 0.0)
    v132 = *(const char **)&__dst.f64[0];
  v215 = (int **)v132;
  v133 = **(_QWORD **)&v216.f64[0];
  v134 = (uint64_t *)(**(_QWORD **)&v216.f64[0] + 16);
  if (*(char *)(**(_QWORD **)&v216.f64[0] + 39) < 0)
  {
    v136 = *(const char **)(v133 + 16);
    v135 = *(_QWORD *)(v133 + 24);
  }
  else
  {
    v135 = *(unsigned __int8 *)(**(_QWORD **)&v216.f64[0] + 39);
    v136 = (const char *)(**(_QWORD **)&v216.f64[0] + 16);
  }
  v137 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v254);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v254);
    if (LOBYTE(v256.f64[0]) && SHIBYTE(rep) < 0)
      operator delete(*(void **)&v254.f64[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v99 = v201;
  }
  if (byte_254A4A4F8[23] >= 0)
    v138 = byte_254A4A4F8;
  else
    v138 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v139 = byte_254A4A4F8[23];
  else
    v139 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)&v254.f64[0] = os_log_create(v138, v136);
  v140 = (char *)&v254.f64[1];
  if (v139 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v139 >= 0x17)
  {
    v141 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v139 | 7) != 0x17)
      v141 = v139 | 7;
    v142 = v141 + 1;
    v140 = (char *)operator new(v141 + 1);
    rep = v139;
    *(_QWORD *)&v256.f64[0] = v142 | 0x8000000000000000;
    *(_QWORD *)&v254.f64[1] = v140;
    v99 = v201;
    goto LABEL_92;
  }
  HIBYTE(v256.f64[0]) = v139;
  if (v139)
LABEL_92:
    memmove(v140, v138, v139);
  v140[v139] = 0;
  LOBYTE(v256.f64[1]) = 1;
  v143 = (void **)&v257;
  if (v135 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v135 >= 0x17)
  {
    v144 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17)
      v144 = v135 | 7;
    v145 = v144 + 1;
    v143 = (void **)operator new(v144 + 1);
    *(_QWORD *)&v258.f64[0] = v135;
    *(_QWORD *)&v258.f64[1] = v145 | 0x8000000000000000;
    v257 = v143;
    goto LABEL_100;
  }
  HIBYTE(v258.f64[1]) = v135;
  if (v135)
LABEL_100:
    memmove(v143, v136, v135);
  *((_BYTE *)v143 + v135) = 0;
  LOBYTE(v259) = 1;
  v146 = *(NSObject **)&v254.f64[0];
  if (SHIBYTE(v258.f64[1]) < 0)
    operator delete(v257);
  if (LOBYTE(v256.f64[1]) && SHIBYTE(v256.f64[0]) < 0)
    operator delete(*(void **)&v254.f64[1]);
  if (*(_QWORD *)&v254.f64[0])
    os_release(*(void **)&v254.f64[0]);
  sub_20EB21AE0(v110, v134, v146, OS_LOG_TYPE_DEBUG, (const char **)&v215);
  if (v108)
  {
    v147 = (const char *)&__dst;
    if (v225 < 0.0)
      v147 = *(const char **)&__dst.f64[0];
    sub_20E8C003C((uint64_t)&v216, "%s", v147);
    sub_20E863570((uint64_t)&v216);
  }
  sub_20E863570((uint64_t)&v216);
  v148 = v223;
  if (v223)
  {
    v149 = (unint64_t *)&v223->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v225) < 0)
  {
    v151 = __dst.f64[0];
    goto LABEL_235;
  }
LABEL_236:
  v226.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
  v200 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(float64_t *)((char *)v226.f64 + *(_QWORD *)(*(_QWORD *)&v226.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
  v227 = v200;
  *(_QWORD *)&v228.f64[0] = MEMORY[0x24BEDB848] + 16;
  if (v234 < 0)
    operator delete(v233);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v237);
LABEL_239:
  *v99 = 0;
  v99[24] = 0;
}

void sub_20EB1DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (LOBYTE(STACK[0x2C8]) && SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v56 - 216);
  if (a41 < 0)
  {
    operator delete(a36);
    sub_20E863784((uint64_t)&a56);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB1E278(uint64_t a1)
{
  uint64_t v1;
  double v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  int8x16_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  uint64_t result;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v33;
  void **v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  size_t v46;
  const char *v47;
  unint64_t v48;
  void **v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  const char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  size_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  size_t v77;
  size_t v78;
  uint64_t *v79;
  void *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  float64x2_t v84;
  int8x16_t v85;
  float64x2_t v86;
  int8x16_t v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  char *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  const char *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  unsigned __int8 v141;
  const char *v142;
  size_t v143;
  void *v144;
  unint64_t v145;
  const char *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  size_t v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unsigned __int8 v190;
  const char *v191;
  size_t v192;
  void *v193;
  unint64_t v194;
  const char *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  size_t v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  unint64_t *v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v241;
  uint64_t v242;
  uint64_t *v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t *v249;
  unsigned __int8 v250;
  const char *v251;
  size_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  void **v256;
  uint64_t v257;
  uint64_t v258;
  NSObject *v259;
  unint64_t *v260;
  unsigned __int8 v261;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v262;
  const char *v263;
  NSObject *v264;
  unsigned __int8 v265;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v266;
  const char *v267;
  NSObject *v268;
  const char *v269;
  int v270;
  uint64_t *v271;
  int v272[2];
  int v273[2];
  uint64_t *v274;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v276;
  int v277;
  const char *v278;
  int v279;
  const char *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  void *__dst[2];
  int64_t v284;
  void *object;
  void *__p[2];
  __int128 v287;
  void **v288;
  size_t v289;
  unint64_t v290;
  void **v291;
  unint64_t v292;
  void *v293;
  char v294;
  unint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  std::__shared_weak_count *v300;
  char *v301;
  std::__shared_weak_count *v302;
  uint64_t *v303;
  __int128 v304;
  _BYTE v305[24];
  __int128 v306;
  char *v307;
  const char *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  _QWORD v311[5];

  v311[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v1 == -1)
    sub_20E877AB8();
  object = v305;
  v3 = ((double (*)(void **, uint64_t))off_24C9C4F78[v1])(&object, a1 + 88);
  if (v3 >= 0.0 && v3 <= 3.14159265)
  {
    v4 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v5 = v4 >> 3;
    v6 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
    if ((v6 & 0x7FFFFFFF8) != 0)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 56);
      v9 = (v6 >> 3);
      v10 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
      while (1)
      {
        v11 = (float64x2_t *)(v8 + 192 * v7);
        v12 = (float64x2_t *)(v8 + 192 * ((_DWORD)v5 - 1 + v7));
        v13 = (int8x16_t)vabdq_f64(*v11, *v12);
        if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10, (float64x2_t)vextq_s8(v13, v13, 8uLL)), (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[1], v12[1]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[2], v12[2])), (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[3], v12[3]))))), vmvnq_s8((int8x16_t)vuzp1q_s16(
                                                            (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[4], v12[4])), (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[5], v12[5]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[6], v12[6])), (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[7], v12[7]))))))) & 1) != 0|| vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_210315570, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10,
                                                                                             vabdq_f64(v11[8], v12[8])),
                                                                                (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[9], v12[9]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[10], v12[10])), (int32x4_t)vcgeq_f64(v10, vabdq_f64(v11[11], v12[11])))))))
        {
          break;
        }
        v7 += *(_DWORD *)(a1 + 72);
        if (!--v9)
          goto LABEL_9;
      }
      sub_20EB1A010(&v303);
      if (*(int *)v303[7] > 5)
        return 0;
      v35 = *((unsigned __int8 *)v303 + 72);
      v36 = sub_20E8C31DC((uint64_t)v303, "OSLogSurrogateAppender", 1, 0);
      v37 = v36;
      if (!v35 && !v36)
        return 0;
      *(_QWORD *)v305 = &v303;
      *(std::chrono::steady_clock::time_point *)&v305[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v305[16] = std::chrono::system_clock::now();
      LODWORD(v306) = 5;
      *((_QWORD *)&v306 + 1) = "unknown file";
      LODWORD(v307) = 406;
      v309 = 0;
      v310 = 0;
      v308 = "unknown function";
      v38 = **(_QWORD **)v305;
      if (*(char *)(**(_QWORD **)v305 + 39) < 0)
      {
        v40 = *(const char **)(v38 + 16);
        v39 = *(_QWORD *)(v38 + 24);
      }
      else
      {
        v39 = *(unsigned __int8 *)(**(_QWORD **)v305 + 39);
        v40 = (const char *)(v38 + 16);
      }
      *(_QWORD *)v272 = v38 + 16;
      v141 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v287 && SHIBYTE(__p[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v142 = byte_254A4A4F8;
      else
        v142 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v143 = byte_254A4A4F8[23];
      else
        v143 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v142, v40);
      v144 = __p;
      if (v143 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v143 >= 0x17)
      {
        v145 = v37;
        v146 = v40;
        v147 = v38;
        v148 = v35;
        v149 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v143 | 7) != 0x17)
          v149 = v143 | 7;
        v150 = v149 + 1;
        v144 = operator new(v149 + 1);
        __p[1] = (void *)v143;
        *(_QWORD *)&v287 = v150 | 0x8000000000000000;
        __p[0] = v144;
        v35 = v148;
        v38 = v147;
        v40 = v146;
        v37 = v145;
      }
      else
      {
        BYTE7(v287) = v143;
        if (!v143)
        {
LABEL_211:
          *((_BYTE *)v144 + v143) = 0;
          BYTE8(v287) = 1;
          v151 = (void **)&v288;
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v152 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v152 = v39 | 7;
            v153 = v152 + 1;
            v151 = (void **)operator new(v152 + 1);
            v289 = v39;
            v290 = v153 | 0x8000000000000000;
            v288 = v151;
          }
          else
          {
            HIBYTE(v290) = v39;
            if (!v39)
            {
LABEL_219:
              *((_BYTE *)v151 + v39) = 0;
              LOBYTE(v291) = 1;
              v154 = object;
              if (SHIBYTE(v290) < 0)
                operator delete(v288);
              if (BYTE8(v287) && SBYTE7(v287) < 0)
                operator delete(__p[0]);
              if (object)
                os_release(object);
              if (v37 && *(_QWORD *)(v37 + 24))
              {
                v155 = _os_log_pack_size();
                v156 = (std::__shared_weak_count_vtbl *)operator new(v155, (std::align_val_t)8uLL);
                v157 = (std::__shared_weak_count *)operator new();
                v158 = v157;
                v157->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v157->__shared_owners_;
                v157->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v157->__shared_weak_owners_ = 0;
                v157[1].__vftable = v156;
                object = v156;
                __p[0] = v156;
                __p[1] = v157;
                do
                  v160 = __ldxr(p_shared_owners);
                while (__stxr(v160 + 1, p_shared_owners));
                v287 = 0uLL;
                v288 = 0;
                do
                  v161 = __ldaxr(p_shared_owners);
                while (__stlxr(v161 - 1, p_shared_owners));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                  std::__shared_weak_count::__release_weak(v158);
                }
                v162 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v163 = operator new();
                v164 = *(unsigned __int8 *)(v38 + 39);
                v165 = *(_QWORD *)v272;
                if ((v164 & 0x80u) != 0)
                {
                  v165 = *(_QWORD *)(v38 + 16);
                  v164 = *(_QWORD *)(v38 + 24);
                }
                *(_QWORD *)v163 = v162;
                *(_OWORD *)(v163 + 8) = *(_OWORD *)__p;
                __p[0] = 0;
                __p[1] = 0;
                *(_OWORD *)(v163 + 24) = v287;
                v287 = 0uLL;
                *(_QWORD *)(v163 + 40) = v165;
                *(_QWORD *)(v163 + 48) = v164;
                *(_BYTE *)(v163 + 56) = 16;
                *(_QWORD *)&v299 = 0;
                v274 = (uint64_t *)v163;
                (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v37 + 24) + 40))(*(_QWORD *)(v37 + 24), &v274);
                v166 = (uint64_t)v274;
                v274 = 0;
                if (v166)
                {
                  v167 = *(std::__shared_weak_count **)(v166 + 32);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)(v166 + 16);
                  if (v170)
                  {
                    v171 = (unint64_t *)&v170->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                  v173 = v299;
                  *(_QWORD *)&v299 = 0;
                  if (v173)
                  {
                    v174 = *(std::__shared_weak_count **)(v173 + 32);
                    if (v174)
                    {
                      v175 = (unint64_t *)&v174->__shared_owners_;
                      do
                        v176 = __ldaxr(v175);
                      while (__stlxr(v176 - 1, v175));
                      if (!v176)
                      {
                        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                        std::__shared_weak_count::__release_weak(v174);
                      }
                    }
                    v177 = *(std::__shared_weak_count **)(v173 + 16);
                    if (v177)
                    {
                      v178 = (unint64_t *)&v177->__shared_owners_;
                      do
                        v179 = __ldaxr(v178);
                      while (__stlxr(v179 - 1, v178));
                      if (!v179)
                      {
                        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                        std::__shared_weak_count::__release_weak(v177);
                      }
                    }
                    MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                  }
                }
                v180 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
                if (*((_QWORD *)&v287 + 1))
                {
                  v181 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
                v183 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v184 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v154, OS_LOG_TYPE_ERROR);
                LOWORD(object) = 0;
                v186 = (void *)_os_log_send_and_compose_impl();
                if (v186)
                  free(v186);
              }
              if (v35)
              {
                sub_20E8C003C((uint64_t)v305, "U coordinate is not closed.");
                sub_20E863570((uint64_t)v305);
              }
              sub_20E863570((uint64_t)v305);
              v187 = v310;
              if (v310)
              {
                v188 = (unint64_t *)&v310->__shared_owners_;
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
LABEL_413:
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              return 0;
            }
          }
          memmove(v151, v40, v39);
          goto LABEL_219;
        }
      }
      memmove(v144, v142, v143);
      goto LABEL_211;
    }
LABEL_9:
    if (!(_DWORD)v5)
      return 1;
    v14 = *(float64x2_t **)(a1 + 56);
    v19 = *v14;
    v17 = v14[1];
    v15 = v14 + 2;
    v18 = v14[2];
    v16 = (v4 >> 3);
    *(_QWORD *)&v17.f64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    v20 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
    v21 = v16;
    while (1)
    {
      v22 = (int8x16_t)vabsq_f64(vsubq_f64(v19, v15[-2]));
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, (float64x2_t)vextq_s8(v22, v22, 8uLL)), (int32x4_t)vcgeq_f64(v20, vabsq_f64(vsubq_f64(v17, v15[-1]))))))) & 1) != 0)break;
      v23 = vabsq_f64(vsubq_f64(v18, *v15));
      if (v23.f64[0] > 0.00000001 || v23.f64[1] > 0.00000001)
        break;
      v15 += 12;
      if (!--v21)
      {
        v24 = v14 + 5;
        v25 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
        while (1)
        {
          v26 = (int8x16_t)vabsq_f64(v24[-2]);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v25, (float64x2_t)vextq_s8(v26, v26, 8uLL)), (int32x4_t)vcgeq_f64(v25, vabsq_f64(v24[-1])))))) & 1) != 0)break;
          v27 = vabsq_f64(*v24);
          if (v27.f64[0] > 0.00000001 || v27.f64[1] > 0.00000001)
            break;
          v24 += 12;
          if (!--v16)
          {
            if ((v5 & 1) == 0)
              return 1;
            v82 = 192 * ((v5 - 1) >> 1);
            v83 = -192;
            v84 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
            result = 1;
            while (1)
            {
              v85 = (int8x16_t)vabsq_f64(vsubq_f64(vnegq_f64(v14[6]), v14[(unint64_t)v82 / 0x10 + 6]));
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v84, (float64x2_t)vextq_s8(v85, v85, 8uLL)), (int32x4_t)vcgeq_f64(v84, vabsq_f64(vsubq_f64(vnegq_f64(v14[7]), v14[(unint64_t)v82 / 0x10 + 7]))))))) & 1) != 0)break;
              v86 = vabsq_f64(vsubq_f64(vnegq_f64(v14[8]), v14[(unint64_t)v82 / 0x10 + 8]));
              if (v86.f64[0] > 0.00000001 || v86.f64[1] > 0.00000001)
                break;
              v87 = (int8x16_t)vabsq_f64(vsubq_f64(vnegq_f64(v14[9]), v14[(unint64_t)v82 / 0x10 + 9]));
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v84, (float64x2_t)vextq_s8(v87, v87, 8uLL)), (int32x4_t)vcgeq_f64(v84, vabsq_f64(vsubq_f64(vnegq_f64(v14[10]), v14[(unint64_t)v82 / 0x10 + 10]))))))) & 1) != 0|| (v88 = vabsq_f64(vsubq_f64(vnegq_f64(v14[11]), v14[(unint64_t)v82 / 0x10 + 11])), v88.f64[0] > 0.00000001)|| v88.f64[1] > 0.00000001)
              {
                sub_20EB1A010(&v303);
                if (*(int *)v303[7] <= 5)
                {
                  v244 = *((unsigned __int8 *)v303 + 72);
                  v245 = sub_20E8C31DC((uint64_t)v303, "OSLogSurrogateAppender", 1, 0);
                  v246 = v245 ? v245 + 16 : 0;
                  if (v244 || v245)
                  {
                    *(_QWORD *)v305 = &v303;
                    *(std::chrono::steady_clock::time_point *)&v305[8] = std::chrono::steady_clock::now();
                    *(std::chrono::system_clock::time_point *)&v305[16] = std::chrono::system_clock::now();
                    LODWORD(v306) = 5;
                    *((_QWORD *)&v306 + 1) = "unknown file";
                    LODWORD(v307) = 436;
                    v309 = 0;
                    v310 = 0;
                    v308 = "unknown function";
                    v247 = v303 + 2;
                    if (*((char *)v303 + 39) < 0)
                    {
                      v249 = (uint64_t *)v303[2];
                      v248 = v303[3];
                    }
                    else
                    {
                      v248 = *((unsigned __int8 *)v303 + 39);
                      v249 = v303 + 2;
                    }
                    *(_QWORD *)&v299 = v249;
                    *((_QWORD *)&v299 + 1) = v248;
                    v265 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)&object);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                      if ((_BYTE)v287 && SHIBYTE(__p[1]) < 0)
                        operator delete(object);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    v266 = byte_254A4A4F8[23];
                    if (byte_254A4A4F8[23] >= 0)
                    {
                      v267 = byte_254A4A4F8;
                    }
                    else
                    {
                      v266 = *(_QWORD *)&byte_254A4A4F8[8];
                      v267 = *(const char **)byte_254A4A4F8;
                    }
                    v274 = (uint64_t *)v267;
                    rep = v266;
                    object = os_log_create(v267, (const char *)v299);
                    sub_20E86E5A8(__p, (uint64_t)&v274);
                    sub_20E86E5A8(&v288, (uint64_t)&v299);
                    v268 = object;
                    sub_20E86E44C((uint64_t)&object);
                    sub_20EB234C4(v246, v247, v268, OS_LOG_TYPE_ERROR);
                    if (v244)
                    {
                      sub_20E8C003C((uint64_t)v305, "Inconsistent mixed gradient at the pole.");
                      sub_20E863570((uint64_t)v305);
                    }
LABEL_430:
                    sub_20E863714((uint64_t)v305);
                    return 0;
                  }
                }
                return 0;
              }
              v14 += 12;
              v83 += 192;
              if (v82 == v83)
                return result;
            }
            sub_20EB1A010(&v303);
            if (*(int *)v303[7] <= 5)
            {
              v237 = *((unsigned __int8 *)v303 + 72);
              v238 = sub_20E8C31DC((uint64_t)v303, "OSLogSurrogateAppender", 1, 0);
              v239 = v238 ? v238 + 16 : 0;
              if (v237 || v238 != 0)
              {
                *(_QWORD *)v305 = &v303;
                *(std::chrono::steady_clock::time_point *)&v305[8] = std::chrono::steady_clock::now();
                *(std::chrono::system_clock::time_point *)&v305[16] = std::chrono::system_clock::now();
                LODWORD(v306) = 5;
                *((_QWORD *)&v306 + 1) = "unknown file";
                LODWORD(v307) = 431;
                v309 = 0;
                v310 = 0;
                v308 = "unknown function";
                v241 = v303 + 2;
                if (*((char *)v303 + 39) < 0)
                {
                  v243 = (uint64_t *)v303[2];
                  v242 = v303[3];
                }
                else
                {
                  v242 = *((unsigned __int8 *)v303 + 39);
                  v243 = v303 + 2;
                }
                *(_QWORD *)&v299 = v243;
                *((_QWORD *)&v299 + 1) = v242;
                v261 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v261 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&object);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                  if ((_BYTE)v287 && SHIBYTE(__p[1]) < 0)
                    operator delete(object);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                v262 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v263 = byte_254A4A4F8;
                }
                else
                {
                  v262 = *(_QWORD *)&byte_254A4A4F8[8];
                  v263 = *(const char **)byte_254A4A4F8;
                }
                v274 = (uint64_t *)v263;
                rep = v262;
                object = os_log_create(v263, (const char *)v299);
                sub_20E86E5A8(__p, (uint64_t)&v274);
                sub_20E86E5A8(&v288, (uint64_t)&v299);
                v264 = object;
                sub_20E86E44C((uint64_t)&object);
                sub_20EB230D8(v239, v241, v264, OS_LOG_TYPE_ERROR);
                if (v237)
                {
                  sub_20E8C003C((uint64_t)v305, "Inconsistent radial gradient at the pole.");
                  sub_20E863570((uint64_t)v305);
                }
                goto LABEL_430;
              }
            }
            return 0;
          }
        }
        sub_20EB1A010(&v274);
        if (*(int *)v274[7] > 5)
          return 0;
        v50 = *((unsigned __int8 *)v274 + 72);
        v51 = sub_20E8C31DC((uint64_t)v274, "OSLogSurrogateAppender", 1, 0);
        v52 = v51 ? v51 + 16 : 0;
        if (!v50 && v51 == 0)
          return 0;
        *(_QWORD *)v305 = &v274;
        *(std::chrono::steady_clock::time_point *)&v305[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v305[16] = std::chrono::system_clock::now();
        LODWORD(v306) = 5;
        *((_QWORD *)&v306 + 1) = "unknown file";
        LODWORD(v307) = 422;
        v309 = 0;
        v310 = 0;
        v308 = "unknown function";
        v54 = **(_QWORD **)v305;
        v55 = (const char *)(**(_QWORD **)v305 + 16);
        v271 = (uint64_t *)v55;
        if (*(char *)(**(_QWORD **)v305 + 39) < 0)
        {
          v55 = *(const char **)(v54 + 16);
          v56 = *(_QWORD *)(v54 + 24);
        }
        else
        {
          v56 = *(unsigned __int8 *)(**(_QWORD **)v305 + 39);
        }
        v250 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v250 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v287 && SHIBYTE(__p[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v251 = byte_254A4A4F8;
        else
          v251 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v252 = byte_254A4A4F8[23];
        else
          v252 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v251, v55);
        v253 = __p;
        if (v252 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v252 >= 0x17)
        {
          v254 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v252 | 7) != 0x17)
            v254 = v252 | 7;
          v255 = v254 + 1;
          v253 = operator new(v254 + 1);
          __p[1] = (void *)v252;
          *(_QWORD *)&v287 = v255 | 0x8000000000000000;
          __p[0] = v253;
        }
        else
        {
          BYTE7(v287) = v252;
          if (!v252)
          {
LABEL_393:
            *((_BYTE *)v253 + v252) = 0;
            BYTE8(v287) = 1;
            v256 = (void **)&v288;
            if (v56 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v56 >= 0x17)
            {
              v257 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v56 | 7) != 0x17)
                v257 = v56 | 7;
              v258 = v257 + 1;
              v256 = (void **)operator new(v257 + 1);
              v289 = v56;
              v290 = v258 | 0x8000000000000000;
              v288 = v256;
            }
            else
            {
              HIBYTE(v290) = v56;
              if (!v56)
              {
LABEL_401:
                *((_BYTE *)v256 + v56) = 0;
                LOBYTE(v291) = 1;
                v259 = object;
                if (SHIBYTE(v290) < 0)
                  operator delete(v288);
                if (BYTE8(v287) && SBYTE7(v287) < 0)
                  operator delete(__p[0]);
                if (object)
                  os_release(object);
                sub_20EB22CEC(v52, v271, v259, OS_LOG_TYPE_ERROR);
                if (v50)
                {
                  sub_20E8C003C((uint64_t)v305, "Inconsistent tangential gradient at the pole.");
                  sub_20E863570((uint64_t)v305);
                }
                sub_20E863570((uint64_t)v305);
                v187 = v310;
                if (v310)
                {
                  v260 = (unint64_t *)&v310->__shared_owners_;
                  do
                    v189 = __ldaxr(v260);
                  while (__stlxr(v189 - 1, v260));
                  goto LABEL_413;
                }
                return 0;
              }
            }
            memmove(v256, v55, v56);
            goto LABEL_401;
          }
        }
        memmove(v253, v251, v252);
        goto LABEL_393;
      }
    }
    sub_20EB1A010(&v303);
    if (*(int *)v303[7] > 5)
      return 0;
    v41 = *((unsigned __int8 *)v303 + 72);
    v42 = sub_20E8C31DC((uint64_t)v303, "OSLogSurrogateAppender", 1, 0);
    v43 = v42;
    if (!v41 && v42 == 0)
      return 0;
    *(_QWORD *)v305 = &v303;
    *(std::chrono::steady_clock::time_point *)&v305[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v305[16] = std::chrono::system_clock::now();
    LODWORD(v306) = 5;
    *((_QWORD *)&v306 + 1) = "unknown file";
    LODWORD(v307) = 414;
    v309 = 0;
    v310 = 0;
    v308 = "unknown function";
    v45 = **(_QWORD **)v305;
    if (*(char *)(**(_QWORD **)v305 + 39) < 0)
    {
      v47 = *(const char **)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
    }
    else
    {
      v46 = *(unsigned __int8 *)(**(_QWORD **)v305 + 39);
      v47 = (const char *)(v45 + 16);
    }
    *(_QWORD *)v273 = v45 + 16;
    v190 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v190 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v287 && SHIBYTE(__p[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v191 = byte_254A4A4F8;
    else
      v191 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v192 = byte_254A4A4F8[23];
    else
      v192 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v191, v47);
    v193 = __p;
    if (v192 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v192 >= 0x17)
    {
      v194 = v43;
      v195 = v47;
      v196 = v45;
      v197 = v41;
      v198 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v192 | 7) != 0x17)
        v198 = v192 | 7;
      v199 = v198 + 1;
      v193 = operator new(v198 + 1);
      __p[1] = (void *)v192;
      *(_QWORD *)&v287 = v199 | 0x8000000000000000;
      __p[0] = v193;
      v41 = v197;
      v45 = v196;
      v47 = v195;
      v43 = v194;
    }
    else
    {
      BYTE7(v287) = v192;
      if (!v192)
      {
LABEL_293:
        *((_BYTE *)v193 + v192) = 0;
        BYTE8(v287) = 1;
        v200 = (void **)&v288;
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v46 >= 0x17)
        {
          v201 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v201 = v46 | 7;
          v202 = v201 + 1;
          v200 = (void **)operator new(v201 + 1);
          v289 = v46;
          v290 = v202 | 0x8000000000000000;
          v288 = v200;
        }
        else
        {
          HIBYTE(v290) = v46;
          if (!v46)
          {
LABEL_301:
            *((_BYTE *)v200 + v46) = 0;
            LOBYTE(v291) = 1;
            v203 = object;
            if (SHIBYTE(v290) < 0)
              operator delete(v288);
            if (BYTE8(v287) && SBYTE7(v287) < 0)
              operator delete(__p[0]);
            if (object)
              os_release(object);
            if (v43 && *(_QWORD *)(v43 + 24))
            {
              v204 = _os_log_pack_size();
              v205 = (std::__shared_weak_count_vtbl *)operator new(v204, (std::align_val_t)8uLL);
              v206 = (std::__shared_weak_count *)operator new();
              v207 = v206;
              v206->__shared_owners_ = 0;
              v208 = (unint64_t *)&v206->__shared_owners_;
              v206->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v206->__shared_weak_owners_ = 0;
              v206[1].__vftable = v205;
              object = v205;
              __p[0] = v205;
              __p[1] = v206;
              do
                v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
              v287 = 0uLL;
              v288 = 0;
              do
                v210 = __ldaxr(v208);
              while (__stlxr(v210 - 1, v208));
              if (!v210)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v207);
              }
              v211 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v212 = operator new();
              v213 = *(unsigned __int8 *)(v45 + 39);
              v214 = *(_QWORD *)v273;
              if ((v213 & 0x80u) != 0)
              {
                v214 = *(_QWORD *)(v45 + 16);
                v213 = *(_QWORD *)(v45 + 24);
              }
              *(_QWORD *)v212 = v211;
              *(_OWORD *)(v212 + 8) = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              *(_OWORD *)(v212 + 24) = v287;
              v287 = 0uLL;
              *(_QWORD *)(v212 + 40) = v214;
              *(_QWORD *)(v212 + 48) = v213;
              *(_BYTE *)(v212 + 56) = 16;
              *(_QWORD *)&v299 = 0;
              v274 = (uint64_t *)v212;
              (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), &v274);
              v215 = (uint64_t)v274;
              v274 = 0;
              if (v215)
              {
                v216 = *(std::__shared_weak_count **)(v215 + 32);
                if (v216)
                {
                  v217 = (unint64_t *)&v216->__shared_owners_;
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                  if (!v218)
                  {
                    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                    std::__shared_weak_count::__release_weak(v216);
                  }
                }
                v219 = *(std::__shared_weak_count **)(v215 + 16);
                if (v219)
                {
                  v220 = (unint64_t *)&v219->__shared_owners_;
                  do
                    v221 = __ldaxr(v220);
                  while (__stlxr(v221 - 1, v220));
                  if (!v221)
                  {
                    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                    std::__shared_weak_count::__release_weak(v219);
                  }
                }
                MEMORY[0x212BC6398](v215, 0x10F0C40B62ED6C6);
                v222 = v299;
                *(_QWORD *)&v299 = 0;
                if (v222)
                {
                  v223 = *(std::__shared_weak_count **)(v222 + 32);
                  if (v223)
                  {
                    v224 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  v226 = *(std::__shared_weak_count **)(v222 + 16);
                  if (v226)
                  {
                    v227 = (unint64_t *)&v226->__shared_owners_;
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 - 1, v227));
                    if (!v228)
                    {
                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                      std::__shared_weak_count::__release_weak(v226);
                    }
                  }
                  MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
                }
              }
              v229 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
              if (*((_QWORD *)&v287 + 1))
              {
                v230 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
              v232 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v233 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v234 = __ldaxr(v233);
                while (__stlxr(v234 - 1, v233));
                if (!v234)
                {
                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                  std::__shared_weak_count::__release_weak(v232);
                }
              }
            }
            else
            {
              os_log_type_enabled(v203, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v235 = (void *)_os_log_send_and_compose_impl();
              if (v235)
                free(v235);
            }
            if (v41)
            {
              sub_20E8C003C((uint64_t)v305, "Inconsistent function value at the pole.");
              sub_20E863570((uint64_t)v305);
            }
            sub_20E863570((uint64_t)v305);
            v187 = v310;
            if (v310)
            {
              v236 = (unint64_t *)&v310->__shared_owners_;
              do
                v189 = __ldaxr(v236);
              while (__stlxr(v189 - 1, v236));
              goto LABEL_413;
            }
            return 0;
          }
        }
        memmove(v200, v47, v46);
        goto LABEL_301;
      }
    }
    memmove(v193, v191, v192);
    goto LABEL_293;
  }
  sub_20EB1A010(&v298);
  if (**(int **)(v298 + 56) <= 5)
  {
    v29 = *(unsigned __int8 *)(v298 + 72);
    v30 = sub_20E8C31DC(v298, "OSLogSurrogateAppender", 1, 0);
    v31 = v30;
    if (v29 || v30 != 0)
    {
      sub_20E863438((uint64_t)&object);
      sub_20E86A980(&__p[1], (uint64_t)"Invalid half fov: ", 18);
      std::ostream::operator<<();
      v270 = v29;
      if ((v296 & 0x10) != 0)
      {
        v48 = v295;
        if (v295 < v292)
        {
          v295 = v292;
          v48 = v292;
        }
        v49 = v291;
        v33 = v48 - (_QWORD)v291;
        if (v48 - (unint64_t)v291 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_107;
      }
      else
      {
        if ((v296 & 8) == 0)
        {
          v33 = 0;
          HIBYTE(v284) = 0;
          v34 = __dst;
          goto LABEL_62;
        }
        v49 = v288;
        v33 = v290 - (_QWORD)v288;
        if (v290 - (unint64_t)v288 > 0x7FFFFFFFFFFFFFF7)
LABEL_107:
          sub_20E860B7C();
      }
      if (v33 >= 0x17)
      {
        v57 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v57 = v33 | 7;
        v58 = v57 + 1;
        v34 = (void **)operator new(v57 + 1);
        __dst[1] = (void *)v33;
        v284 = v58 | 0x8000000000000000;
        __dst[0] = v34;
      }
      else
      {
        HIBYTE(v284) = v33;
        v34 = __dst;
        if (!v33)
        {
LABEL_62:
          *((_BYTE *)v34 + v33) = 0;
          v274 = &v298;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v276 = std::chrono::system_clock::now().__d_.__rep_;
          v277 = 5;
          v278 = "unknown file";
          v279 = 397;
          v281 = 0;
          v282 = 0;
          v280 = "unknown function";
          if (v284 >= 0)
            v59 = (const char *)__dst;
          else
            v59 = (const char *)__dst[0];
          v60 = *v274;
          v61 = (const char *)(*v274 + 16);
          v269 = v61;
          if (*(char *)(*v274 + 39) < 0)
          {
            v61 = *(const char **)(v60 + 16);
            v62 = *(_QWORD *)(v60 + 24);
            v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v64 & 1) != 0)
              goto LABEL_69;
          }
          else
          {
            v62 = *(unsigned __int8 *)(*v274 + 39);
            v63 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v63 & 1) != 0)
              goto LABEL_69;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v305);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v305);
            if ((_BYTE)v306 && (v305[23] & 0x80000000) != 0)
              operator delete(*(void **)v305);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_69:
          if (byte_254A4A4F8[23] >= 0)
            v65 = byte_254A4A4F8;
          else
            v65 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v66 = byte_254A4A4F8[23];
          else
            v66 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v305 = os_log_create(v65, v61);
          v67 = &v305[8];
          if (v66 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v66 >= 0x17)
          {
            v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v66 | 7) != 0x17)
              v68 = v66 | 7;
            v69 = v68 + 1;
            v67 = operator new(v68 + 1);
            *(_QWORD *)&v305[16] = v66;
            *(_QWORD *)&v306 = v69 | 0x8000000000000000;
            *(_QWORD *)&v305[8] = v67;
          }
          else
          {
            BYTE7(v306) = v66;
            if (!v66)
            {
LABEL_83:
              v67[v66] = 0;
              BYTE8(v306) = 1;
              v70 = (char *)&v307;
              if (v62 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v62 >= 0x17)
              {
                v71 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v62 | 7) != 0x17)
                  v71 = v62 | 7;
                v72 = v71 + 1;
                v70 = (char *)operator new(v71 + 1);
                v308 = (const char *)v62;
                v309 = v72 | 0x8000000000000000;
                v307 = v70;
              }
              else
              {
                HIBYTE(v309) = v62;
                if (!v62)
                {
LABEL_91:
                  v70[v62] = 0;
                  LOBYTE(v310) = 1;
                  v73 = *(NSObject **)v305;
                  if (SHIBYTE(v309) < 0)
                    operator delete(v307);
                  if (BYTE8(v306) && SBYTE7(v306) < 0)
                    operator delete(*(void **)&v305[8]);
                  if (*(_QWORD *)v305)
                    os_release(*(void **)v305);
                  if (!v31 || !*(_QWORD *)(v31 + 24))
                  {
                    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v305 = 136315138;
                    *(_QWORD *)&v305[4] = v59;
                    v80 = (void *)_os_log_send_and_compose_impl();
                    v81 = v270;
                    if (v80)
                      free(v80);
                    goto LABEL_181;
                  }
                  v74 = _os_log_pack_size();
                  v75 = (std::__shared_weak_count_vtbl *)operator new(v74, (std::align_val_t)8uLL);
                  v76 = (std::__shared_weak_count *)operator new();
                  v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v76->__shared_owners_ = 0;
                  v76->__shared_weak_owners_ = 0;
                  v76[1].__vftable = v75;
                  *(_QWORD *)&v299 = v75;
                  *((_QWORD *)&v299 + 1) = v75;
                  v301 = 0;
                  v302 = 0;
                  v300 = v76;
                  v77 = strlen(v59);
                  if (v77 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v78 = v77;
                  if (v77 >= 0x17)
                  {
                    v89 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v77 | 7) != 0x17)
                      v89 = v77 | 7;
                    v90 = v89 + 1;
                    v79 = (uint64_t *)operator new(v89 + 1);
                    *(_QWORD *)&v304 = v78;
                    *((_QWORD *)&v304 + 1) = v90 | 0x8000000000000000;
                    v303 = v79;
                  }
                  else
                  {
                    HIBYTE(v304) = v77;
                    v79 = (uint64_t *)&v303;
                    if (!v77)
                    {
LABEL_121:
                      *((_BYTE *)v79 + v78) = 0;
                      v91 = (uint64_t)v303;
                      v311[0] = v304;
                      *(_QWORD *)((char *)v311 + 7) = *(_QWORD *)((char *)&v304 + 7);
                      v92 = HIBYTE(v304);
                      v93 = operator new(0x38uLL);
                      v93[1] = 0;
                      v93[2] = 0;
                      v93[3] = off_24C9ABC20;
                      *v93 = &off_24C9ABBD0;
                      v94 = v311[0];
                      v93[4] = v91;
                      v93[5] = v94;
                      *(_QWORD *)((char *)v93 + 47) = *(_QWORD *)((char *)v311 + 7);
                      *((_BYTE *)v93 + 55) = v92;
                      v311[0] = 0;
                      *(_QWORD *)((char *)v311 + 7) = 0;
                      v95 = v302;
                      v301 = (char *)(v93 + 3);
                      v302 = (std::__shared_weak_count *)v93;
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
                      *(_OWORD *)v305 = v299;
                      v98 = v301;
                      *(_QWORD *)&v305[16] = v300;
                      if (v300)
                      {
                        v99 = (unint64_t *)&v300->__shared_owners_;
                        do
                          v100 = __ldxr(v99);
                        while (__stxr(v100 + 1, v99));
                      }
                      v101 = v302;
                      *(_QWORD *)&v306 = v98;
                      *((_QWORD *)&v306 + 1) = v302;
                      if (v302)
                      {
                        v102 = (unint64_t *)&v302->__shared_owners_;
                        do
                          v103 = __ldxr(v102);
                        while (__stxr(v103 + 1, v102));
                        v307 = v98;
                        do
                          v104 = __ldaxr(v102);
                        while (__stlxr(v104 - 1, v102));
                        if (!v104)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
                      else
                      {
                        v307 = v98;
                      }
                      v105 = v300;
                      if (v300)
                      {
                        v106 = (unint64_t *)&v300->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (v307[31] >= 0)
                        v108 = v307 + 8;
                      else
                        v108 = (char *)*((_QWORD *)v307 + 1);
                      v109 = *(_QWORD *)v305;
                      v110 = _os_log_pack_fill();
                      *(_DWORD *)v110 = 136315138;
                      *(_QWORD *)(v110 + 4) = v108;
                      v111 = operator new();
                      v112 = *(unsigned __int8 *)(v60 + 39);
                      v113 = *(const char **)(v60 + 16);
                      v114 = *(_QWORD *)(v60 + 24);
                      v115 = v306;
                      *(_OWORD *)(v111 + 8) = *(_OWORD *)&v305[8];
                      if ((v112 & 0x80u) != 0)
                        v112 = v114;
                      else
                        v113 = v269;
                      *(_QWORD *)v111 = v109;
                      *(_QWORD *)&v305[8] = 0;
                      *(_QWORD *)&v305[16] = 0;
                      *(_OWORD *)(v111 + 24) = v115;
                      v306 = 0uLL;
                      *(_QWORD *)(v111 + 40) = v113;
                      *(_QWORD *)(v111 + 48) = v112;
                      *(_BYTE *)(v111 + 56) = 16;
                      v303 = 0;
                      *(_QWORD *)&v299 = v111;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v299);
                      v116 = v299;
                      *(_QWORD *)&v299 = 0;
                      v81 = v270;
                      if (v116)
                      {
                        v117 = *(std::__shared_weak_count **)(v116 + 32);
                        if (v117)
                        {
                          v118 = (unint64_t *)&v117->__shared_owners_;
                          do
                            v119 = __ldaxr(v118);
                          while (__stlxr(v119 - 1, v118));
                          if (!v119)
                          {
                            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                            std::__shared_weak_count::__release_weak(v117);
                          }
                        }
                        v120 = *(std::__shared_weak_count **)(v116 + 16);
                        if (v120)
                        {
                          v121 = (unint64_t *)&v120->__shared_owners_;
                          do
                            v122 = __ldaxr(v121);
                          while (__stlxr(v122 - 1, v121));
                          if (!v122)
                          {
                            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                            std::__shared_weak_count::__release_weak(v120);
                          }
                        }
                        MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                        v123 = (uint64_t)v303;
                        v303 = 0;
                        if (v123)
                        {
                          v124 = *(std::__shared_weak_count **)(v123 + 32);
                          if (v124)
                          {
                            v125 = (unint64_t *)&v124->__shared_owners_;
                            do
                              v126 = __ldaxr(v125);
                            while (__stlxr(v126 - 1, v125));
                            if (!v126)
                            {
                              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                              std::__shared_weak_count::__release_weak(v124);
                            }
                          }
                          v127 = *(std::__shared_weak_count **)(v123 + 16);
                          if (v127)
                          {
                            v128 = (unint64_t *)&v127->__shared_owners_;
                            do
                              v129 = __ldaxr(v128);
                            while (__stlxr(v129 - 1, v128));
                            if (!v129)
                            {
                              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                              std::__shared_weak_count::__release_weak(v127);
                            }
                          }
                          MEMORY[0x212BC6398](v123, 0x10F0C40B62ED6C6);
                        }
                      }
                      v130 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
                      if (*((_QWORD *)&v306 + 1))
                      {
                        v131 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
                        do
                          v132 = __ldaxr(v131);
                        while (__stlxr(v132 - 1, v131));
                        if (!v132)
                        {
                          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                          std::__shared_weak_count::__release_weak(v130);
                        }
                      }
                      v133 = *(std::__shared_weak_count **)&v305[16];
                      if (*(_QWORD *)&v305[16])
                      {
                        v134 = (unint64_t *)(*(_QWORD *)&v305[16] + 8);
                        do
                          v135 = __ldaxr(v134);
                        while (__stlxr(v135 - 1, v134));
                        if (!v135)
                        {
                          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                          std::__shared_weak_count::__release_weak(v133);
                        }
                      }
LABEL_181:
                      if (v81)
                      {
                        v136 = (const char *)__dst;
                        if (v284 < 0)
                          v136 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)&v274, "%s", v136);
                        sub_20E863570((uint64_t)&v274);
                      }
                      sub_20E863570((uint64_t)&v274);
                      v137 = v282;
                      if (v282)
                      {
                        v138 = (unint64_t *)&v282->__shared_owners_;
                        do
                          v139 = __ldaxr(v138);
                        while (__stlxr(v139 - 1, v138));
                        if (!v139)
                        {
                          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                          std::__shared_weak_count::__release_weak(v137);
                        }
                      }
                      if (SHIBYTE(v284) < 0)
                        operator delete(__dst[0]);
                      object = (void *)*MEMORY[0x24BEDB7F0];
                      v140 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)&__p[-1] + *((_QWORD *)object - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      __p[1] = v140;
                      *(_QWORD *)&v287 = MEMORY[0x24BEDB848] + 16;
                      if (v294 < 0)
                        operator delete(v293);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v297);
                      return 0;
                    }
                  }
                  memcpy(v79, v59, v78);
                  goto LABEL_121;
                }
              }
              memmove(v70, v61, v62);
              goto LABEL_91;
            }
          }
          memmove(v67, v65, v66);
          goto LABEL_83;
        }
      }
      memmove(v34, v49, v33);
      goto LABEL_62;
    }
  }
  return 0;
}

void sub_20EB20420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v33 - 208);
  _Unwind_Resume(a1);
}

void sub_20EB20480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *object)
{
  uint64_t v30;
  uint64_t v31;

  if (*(_BYTE *)(v31 - 184) && *(char *)(v31 - 185) < 0)
    operator delete(*(void **)(v30 + 24));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&object);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20EB2086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20EB2087C(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  void **v9;
  void *__p[2];
  unsigned __int8 v11;
  char v12;
  void *v13[2];
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[10];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a1[26];
  if ((_DWORD)v3 == -1)
    sub_20E877AB8();
  v17[0] = (unint64_t)&v12;
  ((void (*)(void **__return_ptr, unint64_t *, _DWORD *))off_24C9C4F88[v3])(v13, v17, a1 + 22);
  v5 = a1[18];
  v15 = a1[19];
  v16 = v5;
  v17[0] = sub_20EA963EC((uint64_t)a1);
  sub_20EA960E4("BicubicHermiteSpline: [U: ", &v16, (std::string *)"; V ",
    &v15,
    (std::string *)"; Hash: ",
    v17,
    (std::string *)"]");
  v17[0] = (unint64_t)"FreeformLensDistortion: [";
  v17[1] = 25;
  v6 = v14;
  v7 = v13;
  if ((v14 & 0x80u) != 0)
  {
    v7 = (void **)v13[0];
    v6 = (unint64_t)v13[1];
  }
  v17[2] = (unint64_t)v7;
  v17[3] = v6;
  v17[4] = (unint64_t)"; ";
  v17[5] = 2;
  v8 = v11;
  if ((v11 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v11 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  v17[6] = (unint64_t)v9;
  v17[7] = v8;
  v17[8] = (unint64_t)"]";
  v17[9] = 1;
  sub_20E8778D4((uint64_t)v17, (uint64_t)&v18, 0, 0, a2);
  if (((char)v11 & 0x80000000) == 0)
  {
    if (((char)v14 & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v13[0]);
    return;
  }
  operator delete(__p[0]);
  if ((char)v14 < 0)
    goto LABEL_13;
}

void sub_20EB20A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

double sub_20EB20A54(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_20EB20A5C(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t sub_20EB20A64(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_20EB20A6C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8);
}

void sub_20EB20A74(__int128 ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  float64x2_t *v6;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  char v20;
  long double v21;
  double v22;
  double v23;
  long double v24;
  long double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;

  v5 = **a1;
  v6 = (float64x2_t *)(*a1)[1];
  _Q0 = *v5;
  _D1 = *((double *)v5 + 1);
  __asm { FMLA            D2, D1, V0.D[1] }
  v35 = _D2;
  v14 = sqrt(_D2);
  v16 = *(double *)v5;
  v15 = _D1;
  v17 = *((double *)v5 + 2);
  v18 = 1.57079633 - atan2(v17, v14);
  v19 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v18 <= v19)
  {
    v21 = atan2(v15, v16) + 3.14159265;
    v22 = 1.0 / (1.0 - cos(v19));
    v34 = fmin(fmax(v21 * 0.159154943, 0.0), 1.0);
    v23 = fmin(fmax((1.0 - cos(v18)) * v22, 0.0), 1.0);
    if (v6)
    {
      if (v14 <= 2.22044605e-16)
      {
        v27 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v28 = v27;
        v29 = v27;
      }
      else
      {
        v31 = -v15 / v35;
        v33 = v16 / v35;
        v24 = v35 + v17 * v17;
        v30 = v16 * v17 / (v14 * v24);
        v32 = v15 * v17 / (v14 * v24);
        v36 = -v14 / v24;
        v25 = sin(v18);
        v26.f64[0] = 0.0;
        v26.f64[1] = v25 * v22;
        v27 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_210315580, v31), v26, v30);
        v28 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_210315580, v33), v26, v32);
        v29 = vmlaq_n_f64((float64x2_t)0, v26, v36);
      }
      *v6 = v27;
      v6[1] = v28;
      v6[2] = v29;
    }
    *(double *)a3 = v34;
    *(double *)(a3 + 8) = v23;
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v20;
}

void sub_20EB20C50(__int128 ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  float64x2_t *v6;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;

  v5 = **a1;
  v6 = (float64x2_t *)(*a1)[1];
  _Q0 = *v5;
  _D1 = *((double *)v5 + 1);
  __asm { FMLA            D2, D1, V0.D[1] }
  v31 = _D2;
  v14 = sqrt(_D2);
  v16 = *(double *)v5;
  v15 = _D1;
  v17 = *((double *)v5 + 2);
  v18 = 1.57079633 - atan2(v17, v14);
  v19 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v18 <= v19)
  {
    v21 = 1.0 / v19;
    v22 = fmin(fmax((atan2(v15, v16) + 3.14159265) * 0.159154943, 0.0), 1.0);
    v23 = fmax(v18 * v21, 0.0);
    if (v23 >= 1.0)
      v24 = 0.95;
    else
      v24 = v23 * -0.05 + 1.0;
    v25 = log(v24);
    if (v6)
    {
      if (v14 <= 2.22044605e-16)
      {
        v28 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v29 = v28;
        v30 = v28;
      }
      else
      {
        v26 = v31 + v17 * v17;
        v27.f64[0] = 0.0;
        v27.f64[1] = v21 * (0.974786287 / v24);
        v28 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_210315580, -v15 / v31), v27, v16 * v17 / (v14 * v26));
        v29 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_210315580, v16 / v31), v27, v15 * v17 / (v14 * v26));
        v30 = vmlaq_n_f64((float64x2_t)0, v27, -v14 / v26);
      }
      *v6 = v28;
      v6[1] = v29;
      v6[2] = v30;
    }
    *(double *)a3 = v22;
    *(double *)(a3 + 8) = v25 * -19.4957257;
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v20;
}

void sub_20EB20E20(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_20EB20F14@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_20EB21024(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_20EB21118@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_20EB21228(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_20EB2131C@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

double sub_20EB2142C(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_20EB21434(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_20EB2143C(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_20EB21444(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t sub_20EB2144C(uint64_t a1, uint64_t a2)
{
  return sub_20EB7A814("RayMapperPolar: [Half FoV: ", (double *)a2, (const char **)"; Allow Extrapolation: ",
           (_BYTE *)(a2 + 8),
           (const char **)"]");
}

uint64_t sub_20EB2146C(uint64_t a1, uint64_t a2)
{
  return sub_20EB7AA3C("RayMapperPolarMuLaw: [Half FoV: ", (double *)a2, (const char **)"; Allow Extrapolation: ",
           (_BYTE *)(a2 + 8),
           (const char **)"]");
}

char *sub_20EB2148C(char **a1, unint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  char *v12;
  double *v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  void *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  double *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  double *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v4 = (char *)*a2;
  v5 = (char *)a2[1];
  v6 = (uint64_t)&v5[-*a2];
  v7 = v6 >> 3;
  v8 = v5;
  v9 = (v6 >> 3) + ((a1[1] - *a1) >> 3) + 1;
  v10 = (double *)a2[2];
  if (v9 <= (uint64_t)((uint64_t)v10 - *a2) >> 3)
  {
    v13 = (double *)a2[1];
    goto LABEL_14;
  }
  if (v9 >> 61)
    goto LABEL_38;
  v11 = 8 * v9;
  v12 = (char *)operator new(8 * v9);
  v13 = (double *)&v12[8 * v7];
  v10 = (double *)&v12[v11];
  v14 = v13;
  if (v5 != v4)
  {
    v15 = v5 - v4 - 8;
    if (v15 < 0x58)
    {
      v14 = (double *)&v12[8 * v7];
      do
      {
LABEL_11:
        v22 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v14-- - 1) = v22;
      }
      while (v8 != v4);
      goto LABEL_12;
    }
    v14 = (double *)&v12[8 * v7];
    if ((unint64_t)(v5 - &v12[v6]) < 0x20)
      goto LABEL_11;
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v5[-v17];
    v14 = &v13[v17 / 0xFFFFFFFFFFFFFFF8];
    v18 = &v12[8 * v7 - 16];
    v19 = v5 - 16;
    v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *(_OWORD *)v19;
      *((_OWORD *)v18 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_11;
  }
LABEL_12:
  *a2 = (unint64_t)v14;
  a2[1] = (unint64_t)v13;
  a2[2] = (unint64_t)v10;
  if (v4)
  {
    operator delete(v4);
    v13 = (double *)a2[1];
    v10 = (double *)a2[2];
  }
LABEL_14:
  v23 = (double)(unint64_t)((a1[1] - *a1) >> 3);
  if (v13 < v10)
  {
    *v13 = v23;
    v24 = v13 + 1;
    goto LABEL_37;
  }
  v25 = (double *)*a2;
  v26 = (uint64_t)v13 - *a2;
  v27 = v26 >> 3;
  v28 = (v26 >> 3) + 1;
  if (v28 >> 61)
LABEL_38:
    sub_20E867F44();
  v29 = (char *)v10 - (char *)v25;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 >> 61)
      sub_20E877A38();
    v31 = operator new(8 * v30);
    v32 = (double *)&v31[8 * v27];
    v33 = &v31[8 * v30];
    *v32 = v23;
    v24 = v32 + 1;
    v34 = (char *)v13 - (char *)v25;
    if (v13 == v25)
      goto LABEL_35;
  }
  else
  {
    v31 = 0;
    v32 = (double *)(8 * v27);
    v33 = 0;
    *(double *)(8 * v27) = v23;
    v24 = (void *)(8 * v27 + 8);
    v34 = (char *)v13 - (char *)v25;
    if (v13 == v25)
      goto LABEL_35;
  }
  v35 = v34 - 8;
  if (v35 < 0x58)
  {
    v36 = v13;
    goto LABEL_34;
  }
  if ((unint64_t)((char *)v13 - v31 - v26) < 0x20)
  {
    v36 = v13;
    do
    {
LABEL_34:
      v43 = *((_QWORD *)v36-- - 1);
      *((_QWORD *)v32-- - 1) = v43;
    }
    while (v36 != v25);
    goto LABEL_35;
  }
  v37 = (v35 >> 3) + 1;
  v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
  v36 = &v13[v38 / 0xFFFFFFFFFFFFFFF8];
  v32 = (double *)((char *)v32 - v38);
  v39 = &v31[8 * v27 - 16];
  v40 = v13 - 2;
  v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v42 = *(_OWORD *)v40;
    *(v39 - 1) = *((_OWORD *)v40 - 1);
    *v39 = v42;
    v39 -= 2;
    v40 -= 4;
    v41 -= 4;
  }
  while (v41);
  if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_34;
LABEL_35:
  *a2 = (unint64_t)v32;
  a2[1] = (unint64_t)v24;
  a2[2] = (unint64_t)v33;
  if (v25)
    operator delete(v25);
LABEL_37:
  a2[1] = (unint64_t)v24;
  return sub_20EB21730(a2, v24, *a1, a1[1], (a1[1] - *a1) >> 3);
}

char *sub_20EB21730(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  unint64_t v68;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      sub_20E867F44();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v35 = &v21[8 * v13];
    v36 = &v35[8 * a5];
    v37 = v35;
    v38 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_56;
    v37 = &v21[8 * v13];
    v38 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_56;
    v39 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v35[v40];
    v38 = &v11[v40];
    v41 = (__int128 *)(v11 + 16);
    v42 = &v21[8 * v13 + 16];
    v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v45 = *(_QWORD *)v38;
        v38 += 8;
        *(_QWORD *)v37 = v45;
        v37 += 8;
      }
      while (v37 != v36);
    }
    v46 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_57;
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_57;
      v48 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v8[-v49];
      v46 = &v35[-v49];
      v50 = 8 * v13 - 16;
      v51 = &v21[v50];
      v52 = (__int128 *)(v6 + v50);
      v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          v55 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v46 - 1) = v55;
          v46 -= 8;
        }
        while (v47 != (char *)v6);
      }
    }
    v56 = &v21[8 * v18];
    v57 = v15 - (_QWORD)v8;
    if (v57)
      memmove(&v35[8 * a5], v8, v57);
    *a1 = (unint64_t)v46;
    a1[1] = (unint64_t)&v36[v57];
    a1[2] = (unint64_t)v56;
    if (v6)
      operator delete((void *)v6);
    return v35;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v68 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v68;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = v32 + v6 + 8;
    if (v15 > v33)
      v33 = v15;
    v34 = v33 + ~v6 - v32;
    if (v34 < 0x58)
    {
      v31 = (_QWORD *)v26;
      do
      {
LABEL_45:
        v64 = *v30++;
        *v31++ = v64;
      }
      while ((unint64_t)v30 < v15);
      goto LABEL_46;
    }
    v31 = (_QWORD *)v26;
    if ((unint64_t)&v27[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20)
      goto LABEL_45;
    v58 = (v34 >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (uint64_t *)((char *)v30 + v59);
    v31 = (_QWORD *)(v26 + v59);
    v60 = (_OWORD *)(v26 + 16);
    v61 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
    v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      *v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_45;
  }
LABEL_46:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v65 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v65;
  }
  if (v24 != v11)
  {
    v35 = v8;
    memmove(v8, v11, v24 - v11);
    return v35;
  }
  return v8;
}

void sub_20EB21AE0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EB22054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EB22078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB2208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EB220E4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EB22658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EB2267C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB22690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EB226E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EB22C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EB22C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB22C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EB22CEC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB2307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB230A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB230B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EB230D8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB23468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB2348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB234A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EB234C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB23854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB23878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB2388C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

float64x2_t *sub_20EB238B0@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, float64x2_t *a4@<X3>, float64x2_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, float64x2_t a8@<Q5>, float64x2_t a9@<Q7>)
{
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  __int128 v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  float64x2_t v48;
  __int128 v49;
  float64x2_t v50;
  double v51;
  double v52;
  _OWORD v53[5];
  int8x16_t v54;
  _BYTE v55[16];
  double v56;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  double v60;

  a8.f64[0] = a5[1].f64[0];
  v11 = *a5;
  v12 = *(float64x2_t *)a6;
  v13 = *(_OWORD *)(a6 + 8);
  v14 = *(double *)(a6 + 16);
  v16 = *a4;
  v15 = a4[1];
  v18 = a4[2];
  v17 = a4[3];
  v20 = a4[4];
  v19 = a4[5];
  v22 = a4[6];
  v21 = a4[7];
  a9.f64[0] = result[1].f64[0];
  v23 = vsubq_f64(a9, a8).f64[0];
  v24 = vsubq_f64(*result, *a5);
  v59 = v24;
  v60 = v23;
  v24.f64[0] = a2[1].f64[0];
  v9.f64[0] = *(float64_t *)(a6 + 16);
  *(_QWORD *)&v25 = *(_OWORD *)&vsubq_f64(v24, v9);
  v57 = vsubq_f64(*a2, *(float64x2_t *)a6);
  v58 = v25;
  if (v23 >= 0.00000001 && v25 >= 0.00000001 && *(double *)(a3 + 16) >= 0.00000001)
  {
    __asm { FMOV            V23.2D, #1.0 }
    *(_QWORD *)&_Q23.f64[0] = *(_OWORD *)&vnegq_f64(a8);
    v33 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v16.f64[0]), (float64x2_t)xmmword_2102DD520, v16, 1), (float64x2_t)0, v15.f64[0]), v11, v15, 1);
    v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v16.f64[0]), (float64x2_t)0, v16, 1), (float64x2_t)xmmword_21030D320, v15.f64[0]), _Q23, v15, 1);
    v35 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v18.f64[0]), (float64x2_t)xmmword_2102DD520, v18, 1), (float64x2_t)0, v17.f64[0]), v11, v17, 1);
    v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v18.f64[0]), (float64x2_t)0, v18, 1), (float64x2_t)xmmword_21030D320, v17.f64[0]), _Q23, v17, 1);
    v37 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v20.f64[0]), (float64x2_t)xmmword_2102DD520, v20, 1), (float64x2_t)0, v19.f64[0]), v11, v19, 1);
    v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v20.f64[0]), (float64x2_t)0, v20, 1), (float64x2_t)xmmword_21030D320, v19.f64[0]), _Q23, v19, 1);
    v39 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v22.f64[0]), (float64x2_t)xmmword_2102DD520, v22, 1), (float64x2_t)0, v21.f64[0]), v11, v21, 1);
    v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v22.f64[0]), (float64x2_t)0, v22, 1), (float64x2_t)xmmword_21030D320, v21.f64[0]), _Q23, v21, 1);
    v41 = vmulq_f64(v33, (float64x2_t)0);
    v42 = vmulq_n_f64(v33, v12.f64[0]);
    v43 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v33, (float64x2_t)0, v35), (float64x2_t)0, v37), (float64x2_t)0, v39);
    v44 = vmulq_f64(v34, (float64x2_t)0);
    v45 = (int64x2_t)vmlaq_f64(vmlaq_f64(vaddq_f64(v35, v41), (float64x2_t)0, v37), (float64x2_t)0, v39);
    v46 = (int64x2_t)vmlaq_f64(vaddq_f64(v37, vmlaq_f64(v41, (float64x2_t)0, v35)), (float64x2_t)0, v39);
    v47 = (int64x2_t)vaddq_f64(v39, vmlaq_n_f64(vmlaq_n_f64(v42, v35, *(double *)&v13), v37, v14));
    v48 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v34, v12.f64[0]), v36, *(double *)&v13), v38, v14);
    *(_QWORD *)&v49 = vdupq_laneq_s64(v46, 1).u64[0];
    *((_QWORD *)&v49 + 1) = v47.i64[1];
    v50 = vaddq_f64(v40, v48);
    v53[1] = vzip1q_s64(v46, v47);
    v53[0] = vzip1q_s64(v43, v45);
    v53[2] = vzip2q_s64(v43, v45);
    v53[3] = v49;
    v54 = (int8x16_t)vzip1q_s64((int64x2_t)vmlaq_f64(vaddq_f64(v38, vmlaq_f64(v44, (float64x2_t)0, v36)), (float64x2_t)0, v40), (int64x2_t)v50);
    v53[4] = vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v34, (float64x2_t)0, v36), (float64x2_t)0, v38), (float64x2_t)0, v40), (int64x2_t)vmlaq_f64(vmlaq_f64(vaddq_f64(v36, v44), (float64x2_t)0, v38), (float64x2_t)0, v40));
    result = (float64x2_t *)sub_20EB86B28((uint64_t)v55, (uint64_t)&v59, (uint64_t)&v57, (uint64_t)v53, v54, v50);
    if ((result & 1) != 0)
    {
      v51 = *(double *)(a3 + 16);
      v52 = v56 + a5[1].f64[0] - v51;
      *(double *)a7 = v51;
      *(double *)(a7 + 8) = v52;
      *(_BYTE *)(a7 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 16) = 0;
    }
  }
  else
  {
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 16) = 0;
  }
  return result;
}

double sub_20EB23B1C(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, __int128 *a7)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[4];
  __int128 v18;
  double v19[4];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _OWORD v48[2];
  double v49;
  uint64_t v50;

  v8 = a2[1];
  v19[0] = *a2;
  v19[1] = v8;
  v19[2] = 0.0;
  v19[3] = 0.0;
  v20 = xmmword_21030D320;
  v9 = a3[1];
  v21 = *a3;
  v22 = v9;
  v23 = 0;
  v24 = 0;
  v25 = 0x3FF0000000000000;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v19[0];
  v30 = v8;
  v31 = xmmword_2102DD520;
  v32 = 0;
  v33 = 0;
  v34 = v21;
  v35 = v9;
  v36 = xmmword_2102DD520;
  v10 = a4[1];
  v37 = *a4;
  v38 = v10;
  v39 = 0;
  v40 = 0;
  v41 = 0x3FF0000000000000;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = v37;
  v46 = v10;
  v47 = xmmword_2102DD520;
  v11 = a5[1];
  v12 = *a6;
  v13 = a6[1];
  v17[0] = *a5;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = v13;
  v18 = *a7;
  if (sub_21020A4D8((uint64_t)v48, v19, (uint64_t)v17, 6uLL, 0.0000001))
  {
    v15 = v48[1];
    *(_OWORD *)a1 = v48[0];
    result = v49;
    v16 = v50;
    *(double *)(a1 + 16) = v49;
    *(_OWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  }
  return result;
}

BOOL sub_20EB23C08(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5)
{
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  _BOOL8 result;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  float64_t v36;
  float64_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;

  __asm { FMOV            V2.2D, #0.5 }
  v40 = vmulq_f64(vaddq_f64(*a2, *a3), _Q2);
  v11 = vsubq_f64(*a2, v40);
  v43 = v11;
  v38 = vmulq_f64(vaddq_f64(*a4, *a5), _Q2);
  v12 = vsubq_f64(*a4, v38);
  v13 = sqrt(vaddvq_f64(vmulq_f64(v11, v11)));
  if (v13 == 0.0)
    v14 = 1.0;
  else
    v14 = 1.0 / v13;
  v15 = vmulq_n_f64(v11, v14);
  v16 = v12.f64[1];
  v17 = sqrt(vmulq_f64(v12, v12).f64[0] + vmuld_lane_f64(v12.f64[1], v12, 1));
  if (v17 == 0.0)
    v18 = 1.0;
  else
    v18 = 1.0 / v17;
  v39 = v12.f64[0];
  v41 = vmulq_n_f64(v12, v18);
  v42 = v15;
  v19 = acos(vmulq_f64(v15, v41).f64[0] + vmuld_lane_f64(v15.f64[1], v41, 1));
  if (vmuld_lane_f64(v41.f64[0], v42, 1) - vmuld_lane_f64(v42.f64[0], v41, 1) > 0.0)
    v19 = -v19;
  v20 = __sincos_stret(v19);
  v21.f64[0] = -v20.__sinval;
  v21.f64[1] = v20.__cosval;
  v22.f64[0] = v20.__cosval;
  v22.f64[1] = v20.__sinval;
  v23 = vmlaq_laneq_f64(vmulq_n_f64(v22, v43.f64[0]), v21, v43, 1);
  v24 = v23.f64[1];
  result = v23.f64[1] != 0.0 || v23.f64[0] != 0.0;
  if (result)
  {
    v26 = vsubq_f64(v40, v38);
    v27 = fabs(v23.f64[0]);
    v28 = fabs(v23.f64[1]);
    if (v23.f64[1] == 0.0)
      v24 = 1.0;
    v29 = v16 / v24;
    if (v23.f64[0] == 0.0)
      v23.f64[0] = 1.0;
    v30 = v39 / v23.f64[0];
    if (v27 <= v28)
      v30 = v29;
    v31 = v20.__cosval * v30;
    v32 = v20.__sinval * v30;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v33 = vsubq_f64(v40, v26);
    v34 = 0.0 * v40.f64[0] + vmuld_lane_f64(0.0, v40, 1) + 1.0;
    if (v34 == 0.0)
      v35 = 1.0;
    else
      v35 = 1.0 / v34;
    v36 = v33.f64[1] - v35 * (v32 * v40.f64[0] + vmuld_lane_f64(v31, v40, 1) + 0.0);
    v37 = v33.f64[0] - v35 * (v31 * v40.f64[0] - vmuld_lane_f64(v32, v40, 1) + 0.0);
    *(double *)a1 = v31 + v37 * 0.0;
    *(float64_t *)(a1 + 8) = v37 * 0.0 - v32;
    *(float64_t *)(a1 + 16) = v37 + 0.0;
    *(double *)(a1 + 24) = v32 + v36 * 0.0;
    *(double *)(a1 + 32) = v31 + v36 * 0.0;
    *(float64_t *)(a1 + 40) = v36 + 0.0;
    *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  }
  return result;
}

uint64_t sub_20EB23DF0(uint64_t a1, double *a2, int64x2_t *a3, uint64_t a4, double a5, double a6, double a7, double a8, int64x2_t a9, float64x2_t a10)
{
  double v10;
  double v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;
  double v22;
  float64x2_t v28;
  int64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  double v32;
  double v33;

  v10 = *a2;
  v11 = sqrt(v10 * v10 + a2[1] * a2[1]);
  if (a4)
  {
    v12 = a3[1];
    v13 = (float64x2_t)vzip1q_s64(*a3, v12);
    a9 = vzip2q_s64(*a3, v12);
    a10 = vmulq_f64((float64x2_t)a9, (float64x2_t)xmmword_210312E20);
    v14 = vmulq_f64(v13, (float64x2_t)xmmword_210312E10);
    v15 = v11;
    do
    {
      v16 = vmulq_n_f64(vaddq_f64(v14, vmulq_n_f64(a10, v15 * v15)), v15 * v15);
      v17 = v15 * v15 * (v15 * v15);
      v18 = v16.f64[0] + vmuld_lane_f64(v17, v16, 1) + 1.0;
      v19 = vmulq_n_f64(vaddq_f64(v13, vmulq_n_f64((float64x2_t)a9, v15 * v15)), v15 * v15);
      v20 = v11 - (v15 + v15 * (v19.f64[0] + vmuld_lane_f64(v17, v19, 1)));
      if (v18 == 0.0)
        break;
      v15 = fmax(v15 + v20 / v18, 0.0);
      --a4;
    }
    while (a4);
  }
  else
  {
    v20 = 0.0;
    v15 = v11;
  }
  LODWORD(v21) = fabs(v20) <= 0.0001;
  a9.i32[1] = 1074340347;
  if (v15 <= 3.14159265)
    v21 = v21;
  else
    v21 = 0;
  if ((_DWORD)v21 == 1)
  {
    a9.i32[0] = 0;
    a10.f64[0] = v15 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
    v22 = v15 + a10.f64[0] * -1.57079633 + a10.f64[0] * -5.39030286e-15 + a10.f64[0] * -8.84372057e-29;
    __asm { FMOV            V20.2D, #1.0 }
    v28 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v22 * v22), _Q20), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v22 * v22), (float64x2_t)xmmword_210312E80), v22 * v22 * (v22 * v22))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v22 * v22), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v22 * v22), (float64x2_t)xmmword_210312E90), v22 * v22 * (v22 * v22))), v22 * v22 * (v22 * v22) * (v22 * v22 * (v22 * v22))));
    _Q20.f64[0] = v22;
    v29 = (int64x2_t)vmulq_f64(v28, vmulq_f64(_Q20, xmmword_2103155F0[(int)a10.f64[0] & 3]));
    LODWORD(a10.f64[0]) = (int)a10.f64[0] & 1;
    v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)a10, (int32x4_t)a9), 0);
    v31 = vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)vdupq_lane_s64(v29.i64[0], 0));
    v32 = *(double *)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)vdupq_laneq_s64(v29, 1)).i64 / v11;
    _NF = v11 < 0.0001;
    v33 = 1.0;
    if (!_NF)
      v33 = v32;
    *(double *)a1 = v10 * v33;
    *(double *)(a1 + 8) = a2[1] * v33;
    *(_QWORD *)(a1 + 16) = v31.i64[1];
  }
  return v21;
}

uint64_t sub_20EB24018(uint64_t a1, double *a2, double *a3, uint64_t a4, double a5, double a6, double a7, int32x4_t a8, int32x4_t a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  float64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  double v29;

  if (a4)
  {
    v9 = a3[1];
    v10 = a3[2];
    v11 = a3[3];
    v12 = a3[4];
    v13 = a3[5];
    v14 = a3[6];
    do
    {
      v15 = a6
          * a6
          * (*a3 * 3.0
           + a6
           * a6
           * (v9 * 5.0
            + a6
            * a6
            * (v10 * 7.0
             + a6 * a6 * (v11 * 9.0 + a6 * a6 * (v12 * 11.0 + a6 * a6 * (v13 * 13.0 + v14 * (a6 * a6 * 15.0)))))))
          + 1.0;
      v16 = a5
          - a6
          * (a6
           * a6
           * (*a3
            + a6 * a6 * (v9 + a6 * a6 * (v10 + a6 * a6 * (v11 + a6 * a6 * (v12 + a6 * a6 * (v13 + v14 * (a6 * a6)))))))
           + 1.0);
      if (v15 == 0.0)
        break;
      a6 = fmax(a6 + v16 / v15, 0.0);
      --a4;
    }
    while (a4);
  }
  else
  {
    v16 = 0.0;
  }
  LODWORD(v17) = fabs(v16) <= 0.0001;
  a8.i32[1] = 1074340347;
  if (a6 <= 3.14159265)
    v17 = v17;
  else
    v17 = 0;
  if ((_DWORD)v17 == 1)
  {
    a8.i32[0] = 0;
    *(double *)a9.i64 = a6 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
    v18 = a6
        + *(double *)a9.i64 * -1.57079633
        + *(double *)a9.i64 * -5.39030286e-15
        + *(double *)a9.i64 * -8.84372057e-29;
    __asm { FMOV            V19.2D, #1.0 }
    v24 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v18 * v18), _Q19), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v18 * v18), (float64x2_t)xmmword_210312E80), v18 * v18 * (v18 * v18))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v18 * v18), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v18 * v18), (float64x2_t)xmmword_210312E90), v18 * v18 * (v18 * v18))), v18 * v18 * (v18 * v18) * (v18 * v18 * (v18 * v18))));
    _Q19.f64[0] = v18;
    v25 = (int64x2_t)vmulq_f64(v24, vmulq_f64(_Q19, xmmword_2103155F0[(int)*(double *)a9.i64 & 3]));
    a9.i32[0] = (int)*(double *)a9.i64 & 1;
    v26 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a9, a8), 0);
    v27 = vbslq_s8(v26, (int8x16_t)v25, (int8x16_t)vdupq_lane_s64(v25.i64[0], 0));
    v28 = *(double *)vbslq_s8(v26, (int8x16_t)v25, (int8x16_t)vdupq_laneq_s64(v25, 1)).i64 / a5;
    _NF = a5 < 0.0001;
    v29 = 1.0;
    if (!_NF)
      v29 = v28;
    *(double *)a1 = *a2 * v29;
    *(double *)(a1 + 8) = a2[1] * v29;
    *(_QWORD *)(a1 + 16) = v27.i64[1];
  }
  return v17;
}

uint64_t sub_20EB24288(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  double v4;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  double v33;
  double v35;
  int v36;
  double v37;
  int v38;
  double v39;

  v4 = *(double *)(a2 + 16);
  _Q1 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D6, D2, V1.D[1] }
  v11 = sqrt(_D6);
  v12 = fabs(v4);
  v13 = fabs(v11);
  if (v12 < v13)
  {
    v14 = v12 / v13;
    if (v12 / v13 <= 0.414213562)
      goto LABEL_3;
LABEL_28:
    v17 = (v13 - v12) / (v12 + v13);
    if (v12 >= v13)
      v17 = -v17;
    v15 = -1;
    v16 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_4;
LABEL_31:
    *a1 = vmulq_n_f64(_Q1, 1.0 / v4);
    return 1;
  }
  v14 = v13 / v12;
  if (v13 / v12 > 0.414213562)
    goto LABEL_28;
LABEL_3:
  v15 = 1;
  v16 = 2;
  v17 = v14;
  if (_D6 < 0.00000001)
    goto LABEL_31;
LABEL_4:
  v18 = a3[8] / a4;
  v19 = a3[9] / a4;
  v20 = a3[10] / a4;
  v21 = a3[11] / a4;
  v22 = a3[12] / a4;
  v23 = a3[13] / a4;
  v24 = *a3 + a3[7] / a4;
  v25 = a3[1] + v18;
  v26 = a3[2] + v19;
  v27 = a3[3] + v20;
  v28 = a3[4] + v21;
  v29 = a3[5] + v22;
  if (v12 < v13)
    v15 = -v15;
  else
    v16 = v14 > 0.414213562;
  v30 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v17 * v17), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v17 * v17), (float64x2_t)xmmword_210315370), v17 * v17 * (v17 * v17))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v17 * v17), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v17 * v17), (float64x2_t)xmmword_210315380), v17 * v17 * (v17 * v17))), v17 * v17 * (v17 * v17) * (v17 * v17 * (v17 * v17))));
  v31 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1);
  _ZF = v11 == INFINITY && v12 == INFINITY;
  v33 = v17 + v17 * vdivq_f64(v30, v31).f64[0];
  if (_ZF)
    v33 = 0.785398163;
  if (v11 == 0.0 && v4 == 0.0)
    v35 = 0.0;
  else
    v35 = v33;
  if (*(uint64_t *)(a2 + 16) < 0)
  {
    v16 = 4 - v16;
    v15 = -v15;
  }
  if (v11 >= 0.0)
    v36 = v16;
  else
    v36 = -v16;
  v37 = (double)v36;
  if (v11 >= 0.0)
    v38 = v15;
  else
    v38 = -v15;
  v39 = v37 * 3.061617e-17 + v37 * 0.785398163 + v35 * (double)v38;
  *a1 = vmulq_n_f64(_Q1, 1.0/ v11* (v39* (v39* v39* (v24+ v39* v39* (v25+ v39* v39* (v26 + v39 * v39 * (v27 + v39 * v39 * (v28 + v39 * v39 * (v29 + (a3[6] + v23) * (v39 * v39)))))))+ 1.0)));
  return 1;
}

uint64_t sub_20EB2450C(float64x2_t *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  long double v17;
  long double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  double v40;
  double v41;
  long double v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  double v48;
  float64x2_t v50;
  double v51;

  _Q2 = *(float64x2_t *)a4;
  _D0 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D1, D0, V2.D[1] }
  v17 = *(double *)(a4 + 16);
  if (_D1 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
    *(long double *)a2 = 1.0 / v17;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(long double *)(a2 + 32) = 1.0 / v17;
    *(_QWORD *)(a2 + 40) = 0;
    if (a3)
    {
      a3->f64[0] = 0.0;
      a3->f64[1] = 0.0;
    }
  }
  else
  {
    v20 = v17 * v17 + _D1;
    v21 = sqrt(_D1);
    v50 = *(float64x2_t *)a4;
    v51 = _D1;
    v22 = atan2(v21, v17);
    v23 = a5[1];
    v24 = a5[2];
    v25 = a5[3];
    v26 = a5[4];
    v27 = a5[5];
    v28 = v22 * v22 * 15.0;
    v29 = a5[6];
    v30 = a5[7];
    v31 = v22
        * v22
        * (*a5 * 3.0
         + v22
         * v22
         * (v23 * 5.0
          + v22
          * v22
          * (v24 * 7.0 + v22 * v22 * (v25 * 9.0 + v22 * v22 * (v26 * 11.0 + v22 * v22 * (v27 * 13.0 + v28 * v29))))))
        + 1.0;
    v32 = v22
        * (v22
         * v22
         * (*a5
          + v22
          * v22
          * (v23 + v22 * v22 * (v24 + v22 * v22 * (v25 + v22 * v22 * (v26 + v22 * v22 * (v27 + v22 * v22 * v29))))))
         + 1.0);
    v33 = a5[8];
    v34 = a5[9];
    v35 = a5[10];
    v36 = a5[11];
    v37 = a5[12];
    v38 = a5[13];
    v39 = v22
        * v22
        * (v30 * 3.0
         + v22
         * v22
         * (v33 * 5.0
          + v22
          * v22
          * (v34 * 7.0 + v22 * v22 * (v35 * 9.0 + v22 * v22 * (v36 * 11.0 + v22 * v22 * (v37 * 13.0 + v28 * v38))))))
        + 1.0;
    v40 = v22
        * (v22
         * v22
         * (v30
          + v22
          * v22
          * (v33 + v22 * v22 * (v34 + v22 * v22 * (v35 + v22 * v22 * (v36 + v22 * v22 * (v37 + v22 * v22 * v38))))))
         + 1.0)
        - v22;
    v41 = (v32 + v40 / a6) / v21;
    *a1 = vmulq_n_f64(v50, v41);
    v42 = (v31 + (v39 + -1.0) / a6) / v20;
    v43 = vmulq_n_f64(*(float64x2_t *)a4, (v17 * v42 - v41) / v51);
    v44 = -v42;
    v45 = vmulq_n_f64(v43, *(double *)a4);
    v46 = v44 * *(double *)a4;
    v47 = vmulq_laneq_f64(v43, *(float64x2_t *)a4, 1);
    v48 = vmuld_lane_f64(v44, *(float64x2_t *)a4, 1);
    *(float64x2_t *)a2 = v45;
    *(double *)(a2 + 16) = v46;
    *(float64x2_t *)(a2 + 24) = v47;
    *(double *)a2 = v41 + v45.f64[0];
    *(double *)(a2 + 32) = v41 + v47.f64[1];
    *(double *)(a2 + 40) = v48;
    if (a3)
      *a3 = vmulq_n_f64(*(float64x2_t *)a4, -v40 / (a6 * a6) / v21);
  }
  return 1;
}

uint64_t sub_20EB247C0(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  long double v15;
  long double v16;
  float64x2_t v17;

  _Q2 = *(float64x2_t *)a2;
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D0, D1, V2.D[1] }
  if (_D0 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
  }
  else
  {
    v15 = sqrt(_D0);
    v17 = *(float64x2_t *)a2;
    v16 = atan2(v15, *(long double *)(a2 + 16));
    *a1 = vmulq_n_f64(v17, (v16* (v16* (*a3+ v16* (a3[1]+ v16* (a3[2]+ v16* (a3[3]+ v16* (a3[4]+ v16* (a3[5]+ v16* (a3[6]+ v16* (a3[7]+ v16
                    * (a3[8] + v16 * (a3[9] + v16 * (a3[10] + v16 * (a3[11] + v16 * (a3[12] + v16 * (a3[13] + 0.0))))))))))))))
            + 1.0)
           + (v16
            * (v16
             * (a3[14]
              + v16
              * (a3[15]
               + v16
               * (a3[16]
                + v16
                * (a3[17]
                 + v16
                 * (a3[18]
                  + v16
                  * (a3[19]
                   + v16
                   * (a3[20]
                    + v16
                    * (a3[21]
                     + v16
                     * (a3[22] + v16
                               * (a3[23] + v16 * (a3[24] + v16 * (a3[25] + v16 * (a3[26] + v16 * (a3[27] + 0.0))))))))))))))
             + 1.0)
            - v16)
           / a4)
          / v15);
  }
  return 1;
}

uint64_t sub_20EB2498C(float64x2_t *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  long double v16;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;

  _Q3 = *(float64x2_t *)a4;
  _D1 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D2, D1, V3.D[1] }
  v16 = *(double *)(a4 + 16);
  if (_D2 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
    if (a2)
    {
      *(long double *)a2 = 1.0 / v16;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(long double *)(a2 + 32) = 1.0 / v16;
      *(_QWORD *)(a2 + 40) = 0;
    }
    if (a3)
    {
      a3->f64[0] = 0.0;
      a3->f64[1] = 0.0;
    }
  }
  else
  {
    v61 = _D2;
    v20 = sqrt(_D2);
    v62 = *(float64x2_t *)a4;
    v21 = atan2(v20, v16);
    v22 = a5[12];
    v60 = a5[13];
    v23 = a5[10];
    v58 = a5[11];
    v25 = a5[8];
    v24 = a5[9];
    v27 = a5[6];
    v26 = a5[7];
    v29 = a5[4];
    v28 = a5[5];
    v31 = a5[2];
    v30 = a5[3];
    v33 = *a5;
    v32 = a5[1];
    v34 = a5[26];
    v59 = a5[27];
    v36 = a5[24];
    v35 = a5[25];
    v38 = a5[22];
    v37 = a5[23];
    v40 = a5[20];
    v39 = a5[21];
    v41 = a5[18];
    v42 = a5[19];
    v44 = a5[16];
    v43 = a5[17];
    v46 = a5[14];
    v45 = a5[15];
    v47 = v21
        * (v21
         * (v46
          + v21
          * (v45
           + v21
           * (v44
            + v21
            * (v43
             + v21
             * (v41
              + v21
              * (v42
               + v21
               * (v40
                + v21 * (v39 + v21 * (v38 + v21 * (v37 + v21 * (v36 + v21 * (v35 + v21 * (v34 + v21 * (v59 + 0.0))))))))))))))
         + 1.0)
        - v21;
    v48 = (v21
         * (v21
          * (*a5
           + v21
           * (v32
            + v21
            * (v31
             + v21
             * (v30
              + v21
              * (v29
               + v21
               * (v28
                + v21
                * (v27
                 + v21 * (v26 + v21 * (v25 + v21 * (v24 + v21 * (v23 + v21 * (v58 + v21 * (v22 + v21 * (v60 + 0.0))))))))))))))
          + 1.0)
         + v47 / a6)
        / v20;
    *a1 = vmulq_n_f64(v62, v48);
    if (a2)
    {
      v49 = (v21
           * (v33
            + v33
            + v21
            * (v32 * 3.0
             + v21
             * (v31 * 4.0
              + v21
              * (v30 * 5.0
               + v21
               * (v29 * 6.0
                + v21
                * (v28 * 7.0
                 + v21
                 * (v27 * 8.0
                  + v21
                  * (v26 * 9.0
                   + v21
                   * (v25 * 10.0
                    + v21
                    * (v24 * 11.0
                     + v21 * (v23 * 12.0 + v21 * (v58 * 13.0 + v21 * (v22 * 14.0 + v21 * (v60 * 15.0 + 0.0))))))))))))))
           + 1.0
           + (v21
            * (v46
             + v46
             + v21
             * (v45 * 3.0
              + v21
              * (v44 * 4.0
               + v21
               * (v43 * 5.0
                + v21
                * (v41 * 6.0
                 + v21
                 * (v42 * 7.0
                  + v21
                  * (v40 * 8.0
                   + v21
                   * (v39 * 9.0
                    + v21
                    * (v38 * 10.0
                     + v21
                     * (v37 * 11.0
                      + v21 * (v36 * 12.0 + v21 * (v35 * 13.0 + v21 * (v34 * 14.0 + v21 * (v59 * 15.0 + 0.0))))))))))))))
            + 1.0
            + -1.0)
           / a6)
          / (v16 * v16 + v61);
      v50 = vmulq_n_f64(*(float64x2_t *)a4, (v16 * v49 - v48) / v61);
      v51 = -v49;
      v52 = vmulq_n_f64(v50, *(double *)a4);
      v53 = v51 * *(double *)a4;
      v54 = vmulq_laneq_f64(v50, *(float64x2_t *)a4, 1);
      v55 = vmuld_lane_f64(v51, *(float64x2_t *)a4, 1);
      *(double *)(a2 + 16) = v53;
      *(float64x2_t *)a2 = v52;
      *(float64x2_t *)(a2 + 24) = v54;
      v52.f64[1] = v54.f64[1];
      *(double *)(a2 + 40) = v55;
      v56 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48, 0), v52);
      *(float64_t *)a2 = v56.f64[0];
      *(float64_t *)(a2 + 32) = v56.f64[1];
    }
    if (a3)
      *a3 = vmulq_n_f64(*(float64x2_t *)a4, -v47 / (a6 * a6) / v20);
  }
  return 1;
}

BOOL sub_20EB24E04(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  double v11;
  double v12;
  double v13;
  double v14;
  _BOOL8 v15;
  long double v17;
  float64x2_t v19;

  _Q19 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D1, D2, V19.D[1] }
  v11 = sqrt(_D1);
  v12 = v11
      * v11
      * (*a3
       + a3[7] / a4
       + v11
       * v11
       * (a3[1]
        + a3[8] / a4
        + v11
        * v11
        * (a3[2]
         + a3[9] / a4
         + v11
         * v11
         * (a3[3]
          + a3[10] / a4
          + v11 * v11 * (a3[4] + a3[11] / a4 + v11 * v11 * (a3[5] + a3[12] / a4 + v11 * v11 * (a3[6] + a3[13] / a4)))))));
  v13 = 1.0;
  v14 = v11 * (v12 + 1.0);
  v15 = v14 <= 3.14159265 && v14 >= 0.0;
  if (v15)
  {
    if (v11 >= 0.0001)
    {
      v19 = *(float64x2_t *)a2;
      v17 = sin(v14);
      _Q19 = v19;
      v13 = v17 / v11;
    }
    *a1 = vmulq_n_f64(_Q19, v13);
    a1[1].f64[0] = cos(v14);
  }
  return v15;
}

uint64_t sub_20EB24F38(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned int a5, double a6)
{
  uint64_t result;
  long double v11;
  double v19;
  int32x4_t v23;
  double v24;
  _OWORD v25[3];
  double v26;

  if (a4)
  {
    v24 = a6;
    result = sub_20EB24E04((float64x2_t *)a1, a2, a4, a6);
    if (!(_DWORD)result)
      return result;
    v11 = *(double *)(a1 + 16);
    a6 = v24;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
    v11 = 1.0;
  }
  _Q2 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
  _Q3 = vaddq_f64(*(float64x2_t *)(a3 + 16), vdivq_f64(*(float64x2_t *)(a3 + 72), _Q2));
  v25[0] = vaddq_f64(*(float64x2_t *)a3, vdivq_f64(*(float64x2_t *)(a3 + 56), _Q2));
  v25[1] = _Q3;
  v25[2] = vaddq_f64(*(float64x2_t *)(a3 + 32), vdivq_f64(*(float64x2_t *)(a3 + 88), _Q2));
  v26 = *(double *)(a3 + 48) + *(double *)(a3 + 104) / a6;
  _Q0 = *(float64x2_t *)a1;
  _Q3.f64[0] = *(float64_t *)(a1 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  v19 = atan2(sqrt(_Q2.f64[0]), v11);
  _Q0 = *(_OWORD *)a2;
  _Q3.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  return sub_20EB24018(a1, (double *)a2, (double *)v25, a5, sqrt(_D2), v19, _D2, _Q3, v23);
}

uint64_t sub_20EB25044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, unsigned int a7, double a8)
{
  uint64_t result;
  int8x16_t v14;
  float64x2_t v15;
  __int128 v16;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v29;
  float64_t v30;
  int64x2_t v31;
  float64_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  int8x16_t v43;
  float64_t v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;

  result = sub_20EB24F38(a1, a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    result = sub_20EB2450C(&v37, (uint64_t)&v38, &v35, a1, a5, a8);
    if ((_DWORD)result)
    {
      v14.i64[0] = *(_QWORD *)(a1 + 16);
      v15 = *(float64x2_t *)a1;
      *(_QWORD *)&v16 = v39.i64[0];
      _Q3 = v38;
      v41 = v15;
      v42 = v14.i64[0];
      v36 = 0.0;
      *(_QWORD *)&_Q5.f64[0] = v14.i64[0];
      _Q5.f64[1] = v15.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v40, _Q5), (float64x2_t)vzip2q_s64(v40, v39), (float64x2_t)vextq_s8(*(int8x16_t *)&v15, v14, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v39, v15), 1), (float64x2_t)v40, v15).f64[0], *(double *)v39.i64)) >= 0.00000001)
      {
        *(_QWORD *)&v24 = vextq_s8(v38, v38, 8uLL).u64[0];
        _Q3.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        *((_QWORD *)&v24 + 1) = v40.i64[0];
        *((_QWORD *)&v16 + 1) = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v43 = _Q3;
        v44 = v15.f64[0];
        v46 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
        v45 = v24;
        v48 = v14.i64[0];
        v47 = v16;
        sub_20E8BE424((uint64_t)&v29);
        _Q0.f64[0] = v30;
        v25 = vzip2q_s64(v29, v31);
        _Q0.f64[1] = v32;
        *(int64x2_t *)a2 = vzip1q_s64(v29, v31);
        *(int64x2_t *)(a2 + 16) = v25;
        *(float64x2_t *)(a2 + 32) = _Q0;
        if (a3)
        {
          _D2 = v32;
          _V7.D[1] = v35.f64[1];
          __asm { FMLA            D0, D2, V7.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + v34 * v36;
          *(float64x2_t *)a3 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v29, v35.f64[0]), (float64x2_t)v31, v35, 1), v33, v36));
          *(_QWORD *)(a3 + 16) = *(_OWORD *)&vnegq_f64(_Q0);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20EB251F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, unsigned int a7, double a8)
{
  uint64_t result;
  int8x16_t v14;
  float64x2_t v15;
  __int128 v16;
  __int128 v24;
  int64x2_t v26;
  int64x2_t v29;
  float64_t v30;
  int64x2_t v31;
  float64_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  int8x16_t v43;
  float64_t v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;

  result = sub_20EB253A0(a1, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    result = sub_20EB2498C(&v37, (uint64_t)&v38, &v35, a1, a5, a8);
    if ((_DWORD)result)
    {
      v14.i64[0] = *(_QWORD *)(a1 + 16);
      v15 = *(float64x2_t *)a1;
      *(_QWORD *)&v16 = v39.i64[0];
      _Q3 = v38;
      v41 = v15;
      v42 = v14.i64[0];
      v36 = 0.0;
      *(_QWORD *)&_Q5.f64[0] = v14.i64[0];
      _Q5.f64[1] = v15.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v40, _Q5), (float64x2_t)vzip2q_s64(v40, v39), (float64x2_t)vextq_s8(*(int8x16_t *)&v15, v14, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v39, v15), 1), (float64x2_t)v40, v15).f64[0], *(double *)v39.i64)) >= 0.00000001)
      {
        *(_QWORD *)&v24 = vextq_s8(v38, v38, 8uLL).u64[0];
        _Q3.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        *((_QWORD *)&v24 + 1) = v40.i64[0];
        *((_QWORD *)&v16 + 1) = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v43 = _Q3;
        v44 = v15.f64[0];
        v46 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
        v45 = v24;
        v48 = v14.i64[0];
        v47 = v16;
        sub_20E8BE424((uint64_t)&v29);
        if (a2)
        {
          _Q0.f64[0] = v30;
          v26 = vzip2q_s64(v29, v31);
          _Q0.f64[1] = v32;
          *(int64x2_t *)a2 = vzip1q_s64(v29, v31);
          *(int64x2_t *)(a2 + 16) = v26;
          *(float64x2_t *)(a2 + 32) = _Q0;
        }
        if (a3)
        {
          _D2 = v32;
          _V7.D[1] = v35.f64[1];
          __asm { FMLA            D0, D2, V7.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + v34 * v36;
          *(float64x2_t *)a3 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v29, v35.f64[0]), (float64x2_t)v31, v35, 1), v33, v36));
          *(_QWORD *)(a3 + 16) = *(_OWORD *)&vnegq_f64(_Q0);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20EB253A0(uint64_t a1, uint64_t a2, double *a3, double *a4, unsigned int a5, double a6)
{
  uint64_t result;
  double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v35;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;

  if (a4)
  {
    result = 0;
    _Q25 = *(float64x2_t *)a2;
    _D0 = *(_QWORD *)(a2 + 8);
    __asm { FMLA            D3, D0, V25.D[1] }
    v19 = sqrt(_D3);
    v20 = v19
        * (v19
         * (*a4
          + a4[14] / a6
          + v19
          * (a4[1]
           + a4[15] / a6
           + v19
           * (a4[2]
            + a4[16] / a6
            + v19
            * (a4[3]
             + a4[17] / a6
             + v19
             * (a4[4]
              + a4[18] / a6
              + v19
              * (a4[5]
               + a4[19] / a6
               + v19
               * (a4[6]
                + a4[20] / a6
                + v19
                * (a4[7]
                 + a4[21] / a6
                 + v19
                 * (a4[8]
                  + a4[22] / a6
                  + v19
                  * (a4[9]
                   + a4[23] / a6
                   + v19
                   * (a4[10]
                    + a4[24] / a6
                    + v19 * (a4[11] + a4[25] / a6 + v19 * (a4[12] + a4[26] / a6 + v19 * (a4[13] + a4[27] / a6 + 0.0))))))))))))))
         + 1.0);
    if (v20 < 0.0 || v20 > 3.14159265)
      return result;
    v21 = 1.0;
    if (v19 >= 0.0001)
    {
      v81 = *(float64x2_t *)a2;
      v22 = sin(v20);
      _Q25 = v81;
      v21 = v22 / v19;
    }
    v82 = vmulq_n_f64(_Q25, v21);
    *(float64x2_t *)a1 = v82;
    v23 = cos(v20);
    _Q3.f64[1] = v82.f64[1];
    v25 = v23;
    *(long double *)(a1 + 16) = v23;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
    _Q3 = *(float64x2_t *)a1;
    v25 = 1.0;
  }
  v79 = a3[1];
  v80 = *a3;
  v26 = a3[14];
  v77 = a3[3];
  v78 = a3[2];
  v27 = a3[16];
  v66 = a3[17];
  v67 = a3[15];
  v75 = a3[5];
  v76 = a3[4];
  v28 = a3[18];
  v73 = a3[7];
  v74 = a3[6];
  v29 = a3[20];
  v64 = a3[21];
  v65 = a3[19];
  v71 = a3[9];
  v72 = a3[8];
  v30 = a3[22];
  v69 = a3[11];
  v70 = a3[10];
  v31 = a3[24];
  v62 = a3[25];
  v63 = a3[23];
  v68 = a3[12];
  v32 = a3[26];
  _D2 = _Q3.f64[1];
  __asm { FMLA            D0, D2, V3.D[1] }
  v35 = atan2(sqrt(_D0), v25);
  _Q3 = *(float64x2_t *)a2;
  _Q1 = (int32x4_t)vmulq_f64(_Q3, _Q3);
  _Q2.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D1, D2, V3.D[1] }
  v83 = sqrt(*(double *)_Q1.i64);
  if (a5)
  {
    v39 = v80 + v26 / a6;
    v40 = v79 + v67 / a6;
    v41 = a3[13] + a3[27] / a6;
    v42 = v68 + v32 / a6;
    v43 = v69 + v62 / a6;
    v44 = a5;
    v45 = v70 + v31 / a6;
    v46 = v71 + v63 / a6;
    v47 = v72 + v30 / a6;
    v48 = v73 + v64 / a6;
    v49 = v74 + v29 / a6;
    v50 = v75 + v65 / a6;
    v51 = v76 + v28 / a6;
    v52 = v77 + v66 / a6;
    do
    {
      v53 = v35
          * (v39
           + v39
           + v35
           * (v40 * 3.0
            + v35
            * ((v78 + v27 / a6) * 4.0
             + v35
             * (v52 * 5.0
              + v35
              * (v51 * 6.0
               + v35
               * (v50 * 7.0
                + v35
                * (v49 * 8.0
                 + v35
                 * (v48 * 9.0
                  + v35
                  * (v47 * 10.0
                   + v35
                   * (v46 * 11.0
                    + v35 * (v45 * 12.0 + v35 * (v43 * 13.0 + v35 * (v42 * 14.0 + (v41 * 15.0 + 0.0) * v35)))))))))))))
          + 1.0;
      v54 = v83
          - v35
          * (v35
           * (v39
            + v35
            * (v40
             + v35
             * (v78
              + v27 / a6
              + v35
              * (v52
               + v35
               * (v51
                + v35
                * (v50
                 + v35
                 * (v49
                  + v35
                  * (v48 + v35 * (v47 + v35 * (v46 + v35 * (v45 + v35 * (v43 + v35 * (v42 + (v41 + 0.0) * v35)))))))))))))
           + 1.0);
      if (v53 == 0.0)
        break;
      v35 = fmax(v35 + v54 / v53, 0.0);
      --v44;
    }
    while (v44);
  }
  else
  {
    v54 = 0.0;
  }
  result = 0;
  if (fabs(v54) <= 0.0001)
  {
    _Q1.i32[1] = 1074340347;
    if (v35 <= 3.14159265)
    {
      _Q1.i32[0] = 0;
      *(double *)_Q2.i64 = v35 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
      v55 = v35
          + *(double *)_Q2.i64 * -1.57079633
          + *(double *)_Q2.i64 * -5.39030286e-15
          + *(double *)_Q2.i64 * -8.84372057e-29;
      __asm { FMOV            V18.2D, #1.0 }
      v57 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v55 * v55), _Q18), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v55 * v55), (float64x2_t)xmmword_210312E80), v55 * v55 * (v55 * v55))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v55 * v55), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v55 * v55), (float64x2_t)xmmword_210312E90), v55 * v55 * (v55 * v55))), v55 * v55 * (v55 * v55) * (v55 * v55 * (v55 * v55))));
      _Q18.f64[0] = v55;
      v58 = (int8x16_t)vmulq_f64(v57, vmulq_f64(_Q18, xmmword_2103155F0[(int)*(double *)_Q2.i64 & 3]));
      _Q2.i32[0] = (int)*(double *)_Q2.i64 & 1;
      v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(_Q2, _Q1), 0);
      v60 = vbslq_s8(v59, v58, (int8x16_t)vdupq_lane_s64(v58.i64[0], 0));
      v61 = *(double *)vbslq_s8(v59, v58, (int8x16_t)vdupq_laneq_s64((int64x2_t)v58, 1)).i64 / v83;
      if (v83 < 0.0001)
        v61 = 1.0;
      *(double *)a1 = *(double *)a2 * v61;
      *(double *)(a1 + 8) = *(double *)(a2 + 8) * v61;
      *(_QWORD *)(a1 + 16) = v60.i64[1];
      return 1;
    }
  }
  return result;
}

uint64_t sub_20EB25A6C@<X0>(double *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  double v6;
  double v7;
  int v9;
  double *v10;
  size_t v11;
  double *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t i;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v48;
  size_t v49;
  void *v50;
  void *v51;
  _OWORD *v52;
  size_t __sz;
  double v54;
  double v55;
  double v56;
  double v57;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  double v68;
  int v69;
  int v70;
  int v71;
  double v72;
  double v73;
  void *v74;
  uint64_t v75;
  int v76;
  int v77;
  _QWORD v78[2];
  int v79;
  _QWORD v80[2];
  int v81;
  int v82;
  int v83;
  char v84;
  _QWORD v85[2];
  int v86;
  void **v87;
  _QWORD v88[2];
  _QWORD v89[2];
  double v90[2];
  _QWORD v91[2];
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;

  v6 = a4;
  v7 = a3;
  v104 = *MEMORY[0x24BDAC8D0];
  if (a3 > a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 793, (uint64_t)"min_focal_length <= max_focal_length", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a5 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 794, (uint64_t)"max_angle_degree > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v6 <= v7)
    v9 = 1;
  else
    v9 = 10;
  v52 = a2;
  __sz = (11200 * v9);
  v10 = (double *)operator new(__sz, (std::align_val_t)0x20uLL);
  v11 = (800 * v9);
  v85[1] = v11 >> 3;
  v71 = 800 * v9;
  v12 = (double *)operator new(v11, (std::align_val_t)0x20uLL);
  v13 = 0;
  v14 = 0;
  v15 = 100 * v9;
  v69 = 200 * v9;
  v70 = 700 * v9;
  v85[0] = v12;
  v86 = v15;
  v68 = a5 * 0.0174532925;
  v55 = v6 - v7;
  v66 = 300 * v9;
  v67 = 900 * v9;
  v65 = 1000 * v9;
  v64 = 400 * v9;
  v63 = 1100 * v9;
  v62 = 500 * v9;
  v54 = (double)(v9 - 1);
  v16 = 1200 * v9;
  v17 = 600 * v9;
  v59 = v9;
  v18 = 1300 * v9;
  v61 = v15;
  v56 = v7;
  v57 = v6;
  do
  {
    v19 = v6;
    if (v6 > v7)
      v19 = v55 * (double)v14 / v54 + v7;
    v60 = v14;
    v20 = 0;
    v72 = a1[1] + a1[8] / v19;
    v73 = *a1 + a1[7] / v19;
    v21 = a1[2] + a1[9] / v19;
    v22 = a1[3] + a1[10] / v19;
    v23 = a1[4] + a1[11] / v19;
    v24 = a1[5] + a1[12] / v19;
    v25 = a1[6] + a1[13] / v19;
    do
    {
      v26 = v68 * sin(((double)v20 + (double)v20 + 1.0) / 400.0 * 3.14159265);
      v27 = v26
          * (v26
           * v26
           * (v73
            + v26
            * v26
            * (v72 + v26 * v26 * (v21 + v26 * v26 * (v22 + v26 * v26 * (v23 + v26 * v26 * (v24 + v25 * (v26 * v26)))))))
           + 1.0);
      v28 = v27 * (v27 * v27);
      v10[v13] = v28;
      v10[v13 + v70] = v28 / v19;
      v29 = v27 * v27 * v28;
      v10[v13 + v15] = v29;
      v10[v13 + v71] = v29 / v19;
      v30 = v27 * v27 * v29;
      v10[v13 + v69] = v30;
      v10[v13 + v67] = v30 / v19;
      v31 = v27 * v27 * v30;
      v10[v13 + v66] = v31;
      v10[v13 + v65] = v31 / v19;
      v32 = v27 * v27 * v31;
      v10[v13 + v64] = v32;
      v10[v13 + v63] = v32 / v19;
      v33 = v27 * v27 * v32;
      v10[v13 + v62] = v33;
      v10[v13 + v16] = v33 / v19;
      v34 = v27 * v27 * v33;
      v10[v13 + v17] = v34;
      v10[v13 + v18] = v34 / v19;
      if (v27 <= 0.0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 825, (uint64_t)"theta_d > 0", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v38 = qword_254A6DE40;
          for (i = qword_254A6DE48; v38 != i; v38 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v38)(*(_QWORD *)(v38 + 8), "theta_d > 0", 11, "", 0);
        }
        v36 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v15 = v61;
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "theta_d > 0", 11, "", 0);
        v12 = (double *)v85[0];
      }
      v12[v13++] = v26 - v27;
      ++v20;
    }
    while (v20 != 100);
    v14 = v60 + 1;
    v7 = v56;
    v6 = v57;
  }
  while (v60 + 1 != v59);
  v82 = v15;
  v83 = 14;
  v39 = operator new(__sz, (std::align_val_t)0x20uLL);
  memcpy(v39, v10, __sz);
  v81 = 14;
  v80[1] = 16;
  v80[0] = operator new(0x80uLL, (std::align_val_t)0x20uLL);
  v76 = v15;
  v77 = 14;
  v75 = (1400 * v59);
  v79 = 14;
  v74 = operator new(8 * v75, (std::align_val_t)0x20uLL);
  v78[1] = 196;
  v78[0] = operator new(0x620uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v93 = 0;
  v100 = 0;
  sub_20E8BEC48();
  v51 = operator new((8 * 0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BEC48();
  MEMORY[0x212BC6368](v51, 0x1000C8000313F17);
  v84 = 1;
  MEMORY[0x212BC6368](v39, 0x1000C8000313F17);
  v89[0] = 0xE0000000ELL;
  v89[1] = v80;
  *(_QWORD *)&v90[0] = v89;
  v90[1] = 0.000000001;
  v87 = &v74;
  v88[0] = &v87;
  v88[1] = v85;
  v91[0] = v90;
  v91[1] = v88;
  v92 = v78;
  v101 = &v92;
  v102 = v91;
  v103 = 0x3FF0000000000000;
  if ((_OWORD *)v78[0] == v52)
  {
    sub_20EB2ABD8((uint64_t)&v93, (uint64_t)&v100);
    v40 = v93;
    v41 = v94;
    v42 = v95;
    v43 = v96;
    v44 = v97;
    v45 = v99;
    v52[5] = v98;
    v52[6] = v45;
    v52[3] = v43;
    v52[4] = v44;
    v52[1] = v41;
    v52[2] = v42;
    *v52 = v40;
    v46 = v80[0];
    if (!v80[0])
      goto LABEL_32;
    goto LABEL_31;
  }
  v48 = HIDWORD(v89[0]);
  v49 = (8 * HIDWORD(v89[0]) + 31) & 0xFFFFFFFE0;
  *((_QWORD *)&v93 + 1) = v49 >> 3;
  v50 = operator new(v49, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v93 = v50;
  LODWORD(v94) = v48;
  sub_20EB2AD44((uint64_t *)&v93, v90, v88);
  sub_20E8BE6CC();
  MEMORY[0x212BC6368](v50, 0x1000C8000313F17);
  v46 = v80[0];
  if (v80[0])
LABEL_31:
    MEMORY[0x212BC6368](v46, 0x1000C8000313F17);
LABEL_32:
  if (v78[0])
    MEMORY[0x212BC6368](v78[0], 0x1000C8000313F17);
  if (v74)
    MEMORY[0x212BC6368](v74, 0x1000C8000313F17);
  if (v85[0])
    MEMORY[0x212BC6368](v85[0], 0x1000C8000313F17);
  return MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
}

void sub_20EB263F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x212BC6368](v46, 0x1000C8000313F17);
  sub_20EB26564(&a33);
  if (a45)
    MEMORY[0x212BC6368](a45, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v45, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20EB26534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a45)
    JUMPOUT(0x20EB264D8);
  JUMPOUT(0x20EB264C4);
}

void sub_20EB26544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a45)
    JUMPOUT(0x20EB264D8);
  JUMPOUT(0x20EB264C4);
}

void sub_20EB26554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a45)
    JUMPOUT(0x20EB264D8);
  JUMPOUT(0x20EB264C4);
}

_QWORD *sub_20EB26564(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[6];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[3];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  if (*a1)
    MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20EB265D8@<X0>(double *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  double v6;
  double v7;
  int v10;
  double *v11;
  size_t v12;
  char *v13;
  int v14;
  unsigned int v15;
  int v16;
  double v17;
  long double v18;
  long double v19;
  uint64_t v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double v28;
  long double v29;
  long double v30;
  long double v31;
  long double v32;
  long double v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v50;
  size_t v51;
  void *v52;
  void *v53;
  size_t __sz;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  unsigned int v86;
  void *v87;
  uint64_t v88;
  int v89;
  int v90;
  _QWORD v91[2];
  int v92;
  _QWORD v93[2];
  int v94;
  int v95;
  int v96;
  char v97;
  _QWORD v98[2];
  int v99;
  void **v100;
  _QWORD v101[2];
  _QWORD v102[2];
  double v103[2];
  _QWORD v104[2];
  _QWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;

  v6 = a4;
  v7 = a3;
  v124 = *MEMORY[0x24BDAC8D0];
  if (a3 > a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 842, (uint64_t)"min_focal_length <= max_focal_length", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a5 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 843, (uint64_t)"max_angle_degree > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v6 <= v7)
    v10 = 1;
  else
    v10 = 10;
  __sz = (22400 * v10);
  v11 = (double *)operator new(__sz, (std::align_val_t)0x20uLL);
  v12 = (800 * v10);
  v98[1] = v12 >> 3;
  v13 = (char *)operator new(v12, (std::align_val_t)0x20uLL);
  v14 = 0;
  v15 = 0;
  v98[0] = v13;
  v99 = 100 * v10;
  v55 = v6 - v7;
  v82 = a1[1];
  v83 = *a1;
  v80 = a1[15];
  v81 = a1[14];
  v78 = a1[3];
  v79 = a1[2];
  v76 = a1[17];
  v77 = a1[16];
  v74 = a1[5];
  v75 = a1[4];
  v72 = a1[19];
  v73 = a1[18];
  v70 = a1[7];
  v71 = a1[6];
  v68 = a1[21];
  v69 = a1[20];
  v66 = a1[9];
  v67 = a1[8];
  v64 = a1[23];
  v65 = a1[22];
  v62 = a1[11];
  v63 = a1[10];
  v60 = a1[25];
  v61 = a1[24];
  v58 = a1[13];
  v59 = a1[12];
  v56 = a1[27];
  v57 = a1[26];
  v84 = v7;
  v85 = v6;
  do
  {
    if (v6 > v7)
      v6 = v55 * (double)v15 / (double)(v10 - 1) + v7;
    v86 = v15;
    v16 = 0;
    v17 = 0.0;
    do
    {
      v18 = a5 * 0.0174532925 * sin((v17 + v17 + 1.0) / 400.0 * 3.14159265);
      v19 = v18
          * (v18
           * (v83
            + v81 / v6
            + v18
            * (v82
             + v80 / v6
             + v18
             * (v79
              + v77 / v6
              + v18
              * (v78
               + v76 / v6
               + v18
               * (v75
                + v73 / v6
                + v18
                * (v74
                 + v72 / v6
                 + v18
                 * (v71
                  + v69 / v6
                  + v18
                  * (v70
                   + v68 / v6
                   + v18
                   * (v67
                    + v65 / v6
                    + v18
                    * (v66
                     + v64 / v6
                     + v18
                     * (v63 + v61 / v6 + v18 * (v62 + v60 / v6 + v18 * (v59 + v57 / v6 + (v58 + v56 / v6 + 0.0) * v18)))))))))))))
           + 1.0);
      v20 = (v14 + v16);
      v11[v20] = v19 * v19;
      v11[1400 * v10 + v14 + v16] = v19 * v19 / v6;
      v21 = v19 * (v19 * v19);
      v11[100 * v10 + v14 + v16] = v21;
      v11[1500 * v10 + v14 + v16] = v21 / v6;
      v22 = v19 * v21;
      v11[200 * v10 + v14 + v16] = v22;
      v11[1600 * v10 + v14 + v16] = v22 / v6;
      v23 = v19 * v22;
      v11[300 * v10 + v14 + v16] = v23;
      v11[1700 * v10 + v14 + v16] = v23 / v6;
      v24 = v19 * v23;
      v11[400 * v10 + v14 + v16] = v24;
      v11[1800 * v10 + v14 + v16] = v24 / v6;
      v25 = v19 * v24;
      v11[500 * v10 + v14 + v16] = v25;
      v11[1900 * v10 + v14 + v16] = v25 / v6;
      v26 = v19 * v25;
      v11[600 * v10 + v14 + v16] = v26;
      v11[2000 * v10 + v14 + v16] = v26 / v6;
      v27 = v19 * v26;
      v11[700 * v10 + v14 + v16] = v27;
      v11[2100 * v10 + v14 + v16] = v27 / v6;
      v28 = v19 * v27;
      v11[800 * v10 + v14 + v16] = v28;
      v11[2200 * v10 + v14 + v16] = v28 / v6;
      v29 = v19 * v28;
      v11[900 * v10 + v14 + v16] = v29;
      v11[2300 * v10 + v14 + v16] = v29 / v6;
      v30 = v19 * v29;
      v11[1000 * v10 + v14 + v16] = v30;
      v11[2400 * v10 + v14 + v16] = v30 / v6;
      v31 = v19 * v30;
      v11[1100 * v10 + v14 + v16] = v31;
      v11[2500 * v10 + v14 + v16] = v31 / v6;
      v32 = v19 * v31;
      v11[1200 * v10 + v14 + v16] = v32;
      v11[2600 * v10 + v14 + v16] = v32 / v6;
      v33 = v19 * v32;
      v11[1300 * v10 + v14 + v16] = v33;
      v11[2700 * v10 + v14 + v16] = v33 / v6;
      *(long double *)&v13[v20 * 8] = v18 - v19;
      v17 = v17 + 1.0;
      ++v16;
    }
    while (v16 != 100);
    v15 = v86 + 1;
    v14 += 100;
    v7 = v84;
    v6 = v85;
  }
  while (v86 + 1 != v10);
  v95 = 100 * v10;
  v96 = 28;
  v34 = operator new(__sz, (std::align_val_t)0x20uLL);
  memcpy(v34, v11, __sz);
  v94 = 28;
  v93[1] = 28;
  v93[0] = operator new(0xE0uLL, (std::align_val_t)0x20uLL);
  v89 = 100 * v10;
  v90 = 28;
  v88 = (2800 * v10);
  v92 = 28;
  v87 = operator new(8 * v88, (std::align_val_t)0x20uLL);
  v91[1] = 784;
  v91[0] = operator new(0x1880uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v106 = 0;
  v120 = 0;
  sub_20E8BEC48();
  v53 = operator new((8 * 0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BEC48();
  MEMORY[0x212BC6368](v53, 0x1000C8000313F17);
  v97 = 1;
  MEMORY[0x212BC6368](v34, 0x1000C8000313F17);
  v105 = v91;
  v102[0] = 0x1C0000001CLL;
  v102[1] = v93;
  *(_QWORD *)&v103[0] = v102;
  v103[1] = 0.000000001;
  v100 = &v87;
  v101[0] = &v100;
  v101[1] = v98;
  v104[0] = v103;
  v104[1] = v101;
  v121 = &v105;
  v122 = v104;
  v123 = 0x3FF0000000000000;
  if ((_OWORD *)v91[0] == a2)
  {
    sub_20EB2B050(&v106, (uint64_t)&v120);
    v35 = v106;
    v36 = v107;
    v37 = v108;
    v38 = v109;
    v39 = v110;
    v40 = v111;
    v41 = v112;
    v42 = v113;
    v43 = v114;
    v44 = v115;
    v45 = v116;
    v46 = v117;
    v47 = v119;
    a2[12] = v118;
    a2[13] = v47;
    a2[10] = v45;
    a2[11] = v46;
    a2[8] = v43;
    a2[9] = v44;
    a2[6] = v41;
    a2[7] = v42;
    a2[4] = v39;
    a2[5] = v40;
    a2[2] = v37;
    a2[3] = v38;
    *a2 = v35;
    a2[1] = v36;
    v48 = v93[0];
    if (!v93[0])
      goto LABEL_18;
    goto LABEL_17;
  }
  v50 = HIDWORD(v102[0]);
  v51 = (8 * HIDWORD(v102[0]) + 31) & 0xFFFFFFFE0;
  *((_QWORD *)&v106 + 1) = v51 >> 3;
  v52 = operator new(v51, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v106 = v52;
  LODWORD(v107) = v50;
  sub_20EB2AD44((uint64_t *)&v106, v103, v101);
  sub_20E8BE6CC();
  MEMORY[0x212BC6368](v52, 0x1000C8000313F17);
  v48 = v93[0];
  if (v93[0])
LABEL_17:
    MEMORY[0x212BC6368](v48, 0x1000C8000313F17);
LABEL_18:
  if (v91[0])
    MEMORY[0x212BC6368](v91[0], 0x1000C8000313F17);
  if (v87)
    MEMORY[0x212BC6368](v87, 0x1000C8000313F17);
  if (v98[0])
    MEMORY[0x212BC6368](v98[0], 0x1000C8000313F17);
  return MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
}

void sub_20EB2725C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  sub_20EB26564(&STACK[0x2A0]);
  if (STACK[0x300])
    MEMORY[0x212BC6368](STACK[0x300], 0x1000C8000313F17);
  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB27398(double *a1, uint64_t a2, double *a3, int64x2_t *a4, uint64_t a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  double v13;
  double v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  uint64_t result;
  double v26;
  double v27;
  double v28;
  float64x2_t v34;
  float64x2_t v35;
  int v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t v39;
  int8x16_t v40;
  long double v41;
  double v42;
  double v43;
  double v45;
  float64x2_t v48;
  unint64_t v49;
  long double v50;
  long double v51;
  long double v52;
  int64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64_t v57;
  __int128 v59;
  float64x2_t v60;
  __int128 v61;
  int8x16_t v62;
  float64x2_t v64;
  __int128 v66;
  __int128 v67;
  int64x2_t v68;
  double v69;
  double v70;
  float64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  int64x2_t v74;
  uint64_t v75;
  __int128 v76;
  double v77;
  __int128 v78;
  unint64_t v79;
  __int128 v80;
  float64_t v81;

  v13 = *a3;
  v14 = sqrt(v13 * v13 + a3[1] * a3[1]);
  if (a5)
  {
    v15 = a4[1];
    v16 = (float64x2_t)vzip1q_s64(*a4, v15);
    a10 = vzip2q_s64(*a4, v15);
    v17 = vmulq_f64((float64x2_t)a10, (float64x2_t)xmmword_210312E20);
    v18 = vmulq_f64(v16, (float64x2_t)xmmword_210312E10);
    v19 = v14;
    do
    {
      v20 = vmulq_n_f64(vaddq_f64(v18, vmulq_n_f64(v17, v19 * v19)), v19 * v19);
      v21 = v19 * v19 * (v19 * v19);
      v22 = v20.f64[0] + vmuld_lane_f64(v21, v20, 1) + 1.0;
      v23 = vmulq_n_f64(vaddq_f64(v16, vmulq_n_f64((float64x2_t)a10, v19 * v19)), v19 * v19);
      v24 = v14 - (v19 + v19 * (v23.f64[0] + vmuld_lane_f64(v21, v23, 1)));
      if (v22 == 0.0)
        break;
      v19 = fmax(v19 + v24 / v22, 0.0);
      --a5;
    }
    while (a5);
  }
  else
  {
    v24 = 0.0;
    v19 = v14;
  }
  result = 0;
  if (fabs(v24) <= 0.0001)
  {
    a10.i32[1] = 1074340347;
    if (v19 <= 3.14159265)
    {
      a10.i32[0] = 0;
      v26 = v19 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
      v27 = v19 + v26 * -1.57079633 + v26 * -5.39030286e-15 + v26 * -8.84372057e-29;
      v28 = v27 * v27 * (v27 * v27);
      __asm { FMOV            V20.2D, #1.0 }
      v34 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v27 * v27), _Q20), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v27 * v27), (float64x2_t)xmmword_210312E80), v28));
      v35 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v27 * v27), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v27 * v27), (float64x2_t)xmmword_210312E90), v28)), v28 * v28);
      _Q20.f64[0] = v27;
      v36 = (int)v26;
      v37 = vmulq_f64(_Q20, xmmword_2103155F0[(int)v26 & 3]);
      v38 = (int8x16_t)vmulq_f64(vaddq_f64(v34, v35), v37);
      LODWORD(v37.f64[0]) = v36 & 1;
      v39 = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v37, (int32x4_t)a10), 0);
      v40 = vbslq_s8((int8x16_t)v39, v38, (int8x16_t)vdupq_lane_s64(v38.i64[0], 0));
      v41 = *(double *)&v40.i64[1];
      v42 = *(double *)vbslq_s8((int8x16_t)v39, v38, (int8x16_t)vdupq_laneq_s64((int64x2_t)v38, 1)).i64 / v14;
      if (v14 >= 0.0001)
        v43 = v42;
      else
        v43 = 1.0;
      *a1 = v13 * v43;
      a1[1] = a3[1] * v43;
      a1[2] = *(double *)&v40.i64[1];
      _Q5 = *(float64x2_t *)a1;
      *(_QWORD *)&v45 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      _Q1 = vmulq_f64(_Q5, _Q5);
      _D0 = *((_QWORD *)a1 + 1);
      __asm { FMLA            D1, D0, V5.D[1] }
      if (_Q1.f64[0] >= 0.00000001)
      {
        v50 = v41 * v41 + _Q1.f64[0];
        v51 = sqrt(_Q1.f64[0]);
        v69 = _Q1.f64[0];
        v70 = v45;
        v71 = *(float64x2_t *)a1;
        v52 = atan2(v51, v41);
        v53 = a4[1];
        v54 = (float64x2_t)vzip2q_s64(*a4, v53);
        v55 = (float64x2_t)vzip1q_s64(*a4, v53);
        v39 = vmulq_n_f64(vmulq_f64(v54, (float64x2_t)xmmword_210312E20), v52 * v52);
        v56 = vmulq_n_f64(vaddq_f64(vmulq_f64(v55, (float64x2_t)xmmword_210312E10), v39), v52 * v52);
        v39.f64[0] = v52 * v52 * (v52 * v52);
        v56.f64[0] = v56.f64[0] + vmuld_lane_f64(v39.f64[0], v56, 1) + 1.0;
        _Q1 = vmulq_n_f64(vaddq_f64(v55, vmulq_n_f64(v54, v52 * v52)), v52 * v52);
        v45 = v70;
        _Q5 = v71;
        v39.f64[0] = (v52 + v52 * (_Q1.f64[0] + vmuld_lane_f64(v39.f64[0], _Q1, 1))) / v51;
        v57 = v56.f64[0] / v50;
        v48 = vmulq_n_f64(v71, (v41 * (v56.f64[0] / v50) - v39.f64[0]) / v69);
        _Q1.f64[0] = -v57;
        v49 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      }
      else
      {
        v39.f64[0] = 1.0 / v41;
        _Q1.f64[0] = -(v39.f64[0] * v39.f64[0]);
        v48.f64[0] = 0.0;
        v49 = 0;
      }
      *(_QWORD *)&v48.f64[1] = v49;
      _Q3 = (int64x2_t)vmulq_n_f64(v48, _Q5.f64[0]);
      *(double *)&v59 = _Q1.f64[0] * _Q5.f64[0];
      v60 = vmulq_laneq_f64(v48, _Q5, 1);
      _Q1.f64[0] = _Q1.f64[0] * v45;
      *(double *)&v61 = v39.f64[0] + *(double *)_Q3.i64;
      v35.f64[0] = v39.f64[0] + v60.f64[1];
      v39.f64[0] = a1[2];
      v62 = *(int8x16_t *)a1;
      _Q17.f64[0] = v35.f64[0];
      _Q17.f64[1] = _Q1.f64[0];
      v64.f64[0] = v39.f64[0];
      v64.f64[1] = *a1;
      _Q17.f64[0] = vmlsq_f64(vmulq_f64(_Q17, v64), (float64x2_t)vzip1q_s64(*(int64x2_t *)&_Q1, *(int64x2_t *)&v60), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v39, 8uLL)).f64[1];
      __asm { FMLA            D16, D17, V3.D[1] }
      if (fabs(vmlad_n_f64(_D16, *(double *)&v59, vmlsq_f64(vmulq_laneq_f64(v60, *(float64x2_t *)a1, 1), v35, *(float64x2_t *)a1).f64[0])) < 0.00000001)
      {
        return 0;
      }
      else
      {
        *((_QWORD *)&v61 + 1) = *(_QWORD *)&v60.f64[0];
        *(_QWORD *)&v66 = vdupq_laneq_s64(_Q3, 1).u64[0];
        *((_QWORD *)&v66 + 1) = *(_QWORD *)&v35.f64[0];
        *((_QWORD *)&v59 + 1) = *(_QWORD *)&_Q1.f64[0];
        v77 = *a1;
        v76 = v61;
        v79 = vextq_s8(v62, v62, 8uLL).u64[0];
        v78 = v66;
        v81 = v39.f64[0];
        v80 = v59;
        sub_20E8BE424((uint64_t)&v72);
        *(_QWORD *)&v67 = v73;
        v68 = vzip2q_s64(v72, v74);
        *((_QWORD *)&v67 + 1) = v75;
        *(int64x2_t *)a2 = vzip1q_s64(v72, v74);
        *(int64x2_t *)(a2 + 16) = v68;
        *(_OWORD *)(a2 + 32) = v67;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20EB277C4(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  double v13;
  uint64_t result;
  float64x2_t v15;
  float64x2_t v16;
  long double v17;
  double v19;
  float64x2_t v26;
  unint64_t v27;
  long double v28;
  long double v29;
  long double v30;
  int64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  __int128 v37;
  float64x2_t v38;
  __int128 v39;
  int8x16_t v40;
  float64x2_t v42;
  __int128 v44;
  __int128 v45;
  int64x2_t v46;
  double v47;
  double v48;
  float64x2_t v49;
  int64x2_t v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  __int128 v58;
  float64_t v59;

  v13 = sqrt(*a3 * *a3 + a3[1] * a3[1]);
  result = sub_20EB24018(a1, a3, (double *)a4, a5, v13, v13, a8, a9, a10);
  if ((_DWORD)result)
  {
    v17 = *(double *)(a1 + 16);
    _Q5 = *(float64x2_t *)a1;
    *(_QWORD *)&v19 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q1 = vmulq_f64(_Q5, _Q5);
    _D0 = *(_QWORD *)(a1 + 8);
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_Q1.f64[0] >= 0.00000001)
    {
      v28 = v17 * v17 + _Q1.f64[0];
      v29 = sqrt(_Q1.f64[0]);
      v47 = _Q1.f64[0];
      v48 = v19;
      v49 = *(float64x2_t *)a1;
      v30 = atan2(v29, v17);
      v31 = *(int64x2_t *)(a4 + 16);
      v32 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v31);
      v33 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v31);
      v15 = vmulq_n_f64(vmulq_f64(v32, (float64x2_t)xmmword_210312E20), v30 * v30);
      v34 = vmulq_n_f64(vaddq_f64(vmulq_f64(v33, (float64x2_t)xmmword_210312E10), v15), v30 * v30);
      v15.f64[0] = v30 * v30 * (v30 * v30);
      v34.f64[0] = v34.f64[0] + vmuld_lane_f64(v15.f64[0], v34, 1) + 1.0;
      _Q1 = vmulq_n_f64(vaddq_f64(v33, vmulq_n_f64(v32, v30 * v30)), v30 * v30);
      v19 = v48;
      _Q5 = v49;
      v15.f64[0] = (v30 + v30 * (_Q1.f64[0] + vmuld_lane_f64(v15.f64[0], _Q1, 1))) / v29;
      v35 = v34.f64[0] / v28;
      v26 = vmulq_n_f64(v49, (v17 * (v34.f64[0] / v28) - v15.f64[0]) / v47);
      _Q1.f64[0] = -v35;
      v27 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    }
    else
    {
      v15.f64[0] = 1.0 / v17;
      _Q1.f64[0] = -(v15.f64[0] * v15.f64[0]);
      v26.f64[0] = 0.0;
      v27 = 0;
    }
    *(_QWORD *)&v26.f64[1] = v27;
    _Q3 = (int64x2_t)vmulq_n_f64(v26, _Q5.f64[0]);
    *(double *)&v37 = _Q1.f64[0] * _Q5.f64[0];
    v38 = vmulq_laneq_f64(v26, _Q5, 1);
    _Q1.f64[0] = _Q1.f64[0] * v19;
    *(double *)&v39 = v15.f64[0] + *(double *)_Q3.i64;
    v16.f64[0] = v15.f64[0] + v38.f64[1];
    v15.f64[0] = *(float64_t *)(a1 + 16);
    v40 = *(int8x16_t *)a1;
    _Q17.f64[0] = v16.f64[0];
    _Q17.f64[1] = _Q1.f64[0];
    v42.f64[0] = v15.f64[0];
    v42.f64[1] = *(float64_t *)a1;
    _Q17.f64[0] = vmlsq_f64(vmulq_f64(_Q17, v42), (float64x2_t)vzip1q_s64(*(int64x2_t *)&_Q1, *(int64x2_t *)&v38), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v15, 8uLL)).f64[1];
    __asm { FMLA            D16, D17, V3.D[1] }
    if (fabs(vmlad_n_f64(_D16, *(double *)&v37, vmlsq_f64(vmulq_laneq_f64(v38, *(float64x2_t *)a1, 1), v16, *(float64x2_t *)a1).f64[0])) < 0.00000001)
    {
      return 0;
    }
    else
    {
      *((_QWORD *)&v39 + 1) = *(_QWORD *)&v38.f64[0];
      *(_QWORD *)&v44 = vdupq_laneq_s64(_Q3, 1).u64[0];
      *((_QWORD *)&v44 + 1) = *(_QWORD *)&v16.f64[0];
      *((_QWORD *)&v37 + 1) = *(_QWORD *)&_Q1.f64[0];
      v55 = *(_QWORD *)a1;
      v54 = v39;
      v57 = vextq_s8(v40, v40, 8uLL).u64[0];
      v56 = v44;
      v59 = v15.f64[0];
      v58 = v37;
      sub_20E8BE424((uint64_t)&v50);
      *(_QWORD *)&v45 = v51;
      v46 = vzip2q_s64(v50, v52);
      *((_QWORD *)&v45 + 1) = v53;
      *(int64x2_t *)a2 = vzip1q_s64(v50, v52);
      *(int64x2_t *)(a2 + 16) = v46;
      *(_OWORD *)(a2 + 32) = v45;
      return 1;
    }
  }
  return result;
}

uint64_t sub_20EB27A00(double *a1, int8x16_t a2, double a3, int8x16_t a4, int8x16_t a5, double a6)
{
  double v7;
  uint64_t result;
  double v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  float64x2_t v27;
  double v28[3];

  if (*(double *)a2.i64 == 0.0)
  {
    *(double *)a2.i64 = a3;
    v7 = *(double *)a4.i64;
    a4.i64[0] = a5.i64[0];
    *(double *)a5.i64 = a6;
    return sub_20EB2A960(a1, a2, v7, a4, a5);
  }
  else
  {
    *(double *)a2.i64 = 1.0 / *(double *)a2.i64;
    v9 = *(double *)a2.i64 * a3;
    v10 = *(double *)a2.i64 * *(double *)a4.i64;
    v11 = *(double *)a2.i64 * *(double *)a5.i64;
    v12 = -(*(double *)a2.i64 * *(double *)a4.i64);
    *(double *)a4.i64 = v9 * (*(double *)a2.i64 * *(double *)a5.i64) - *(double *)a2.i64 * a6 * 4.0;
    *(double *)a5.i64 = v10 * (*(double *)a2.i64 * a6 * 4.0) - v9 * (v9 * (*(double *)a2.i64 * a6)) - v11 * v11;
    a2.i64[0] = 1.0;
    result = sub_20EB2A960(v28, a2, v12, a4, a5);
    if (result)
    {
      v17 = v9 * v9 * 0.25 - v10 + v28[0];
      if (v17 <= 0.0)
      {
        return 0;
      }
      else
      {
        v18 = sqrt(v17);
        if (v18 == 0.0)
        {
          return 0;
        }
        else
        {
          v19 = (v9 * v28[0] * 0.5 - v11) / (v18 + v18);
          *(double *)v15.i64 = v9 * 0.5 - v18;
          v20 = v28[0] * 0.5;
          *(double *)v16.i64 = *(double *)v15.i64 * *(double *)v15.i64 + (v28[0] * 0.5 - v19) * -4.0;
          if (*(double *)v16.i64 >= 0.0)
          {
            *(double *)v16.i64 = sqrt(*(double *)v16.i64);
            v22.f64[0] = NAN;
            v22.f64[1] = NAN;
            v23 = (*(double *)v15.i64 + *(double *)vbslq_s8((int8x16_t)vnegq_f64(v22), v16, v15).i64) * -0.5;
            *a1 = v23;
            if (v23 == 0.0)
            {
              v21 = 1;
            }
            else
            {
              a1[1] = (v20 - v19) / v23;
              v21 = 2;
            }
          }
          else
          {
            v21 = 0;
          }
          *(double *)v14.i64 = v9 * 0.5 + v18;
          v24 = v20 + v19;
          *(double *)v13.i64 = *(double *)v14.i64 * *(double *)v14.i64 + (v20 + v19) * -4.0;
          if (*(double *)v13.i64 >= 0.0)
          {
            v26 = &a1[v21];
            *(double *)v13.i64 = sqrt(*(double *)v13.i64);
            v27.f64[0] = NAN;
            v27.f64[1] = NAN;
            *(double *)v13.i64 = (*(double *)v14.i64 + *(double *)vbslq_s8((int8x16_t)vnegq_f64(v27), v13, v14).i64)
                               * -0.5;
            *v26 = *(double *)v13.i64;
            if (*(double *)v13.i64 == 0.0)
            {
              v25 = 1;
            }
            else
            {
              v26[1] = v24 / *(double *)v13.i64;
              v25 = 2;
            }
          }
          else
          {
            v25 = 0;
          }
          return v25 + v21;
        }
      }
    }
  }
  return result;
}

float32x4_t sub_20EB27C0C(uint64_t a1, double *a2, unint64_t a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  float v14;
  double v15;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  double v19;
  float v20;
  double v21;
  double v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  unint64_t i;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float32x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float32x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float32x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float32x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float32x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float32x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float32x2_t v68;
  float64x2_t v69;
  float32x4_t result;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  _BYTE v89[264];

  *(double *)a4.i64 = a2[3] * 9.0;
  *(double *)a6.i64 = a2[1] * 5.0;
  *(double *)a7.i64 = *a2 * 3.0;
  v10 = sub_20EB27A00((double *)v89, a4, a2[2] * 7.0, a6, a7, 1.0);
  std::__sort<std::__less<double,double> &,double *>();
  if (v10)
  {
    v11 = 8 * v10;
    v12 = (double *)v89;
    while (*v12 <= 0.274155678)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_11;
    }
  }
  else
  {
    v12 = (double *)v89;
  }
  if (v12 == (double *)&v89[8 * v10])
  {
LABEL_11:
    v14 = 1.0;
  }
  else
  {
    v13 = sqrt(*v12) + -0.0174532925;
    if (v13 > 1.57079633)
      v13 = 1.57079633;
    v14 = v13;
  }
  *(float *)(a1 + 4) = v14;
  v15 = v14;
  v17 = *(int64x2_t *)a2;
  v16 = *(int64x2_t *)(a2 + 2);
  v18 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, v16), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)a2, v16), v15 * v15)), v15 * v15);
  *(_QWORD *)v89 = 0;
  v73.f64[0] = 0.0;
  v19 = ((v18.f64[0] + vmuld_lane_f64(v15 * v15 * (v15 * v15), v18, 1)) * v15 + v15) * 0.03125;
  v20 = 1.0 / v19;
  *(float *)a1 = v20;
  v21 = *(double *)&v16.i64[1] + *(double *)v16.i64 + *(double *)&v17.i64[1] + *(double *)v17.i64 + 1.0;
  if (v21 <= 1.0)
    v22 = 1.0;
  else
    v22 = 1.0 / v21;
  if (a3)
  {
    v23 = *(int64x2_t *)(a2 + 2);
    v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, v23);
    v25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, v23);
    v26 = vmulq_f64(v25, (float64x2_t)xmmword_210312E20);
    v27 = vmulq_f64(v24, (float64x2_t)xmmword_210312E10);
    for (i = 1; i != 33; ++i)
    {
      v29 = v19 * (double)i;
      v73.f64[i] = v29;
      v30 = v22 * v29;
      v31 = 1;
      do
      {
        v32 = v30 * v30;
        v33 = vmulq_n_f64(vaddq_f64(v27, vmulq_n_f64(v26, v30 * v30)), v30 * v30);
        v34 = v32 * v32;
        v35 = v33.f64[0] + vmuld_lane_f64(v32 * v32, v33, 1) + 1.0;
        if (v35 == 0.0)
          break;
        v36 = vmulq_n_f64(vaddq_f64(v24, vmulq_n_f64(v25, v32)), v32);
        v36.f64[0] = (v29 - (v30 + v30 * (v36.f64[0] + vmuld_lane_f64(v34, v36, 1)))) / v35;
        v30 = v30 + v36.f64[0];
      }
      while (fabs(v36.f64[0]) >= 2.22044605e-16 && v31++ < a3);
      *(double *)&v89[8 * i] = v30;
    }
  }
  else
  {
    v73.f64[1] = v19;
    v74.f64[0] = v19 + v19;
    *(double *)&v89[8] = v22 * v19;
    *(double *)&v89[16] = v22 * (v19 + v19);
    v74.f64[1] = v19 * 3.0;
    v75.f64[0] = v19 * 4.0;
    *(double *)&v89[24] = v22 * (v19 * 3.0);
    *(double *)&v89[32] = v22 * (v19 * 4.0);
    v75.f64[1] = v19 * 5.0;
    v76.f64[0] = v19 * 6.0;
    *(double *)&v89[40] = v22 * (v19 * 5.0);
    *(double *)&v89[48] = v22 * (v19 * 6.0);
    v76.f64[1] = v19 * 7.0;
    v77.f64[0] = v19 * 8.0;
    *(double *)&v89[56] = v22 * (v19 * 7.0);
    *(double *)&v89[64] = v22 * (v19 * 8.0);
    v77.f64[1] = v19 * 9.0;
    v78.f64[0] = v19 * 10.0;
    *(double *)&v89[72] = v22 * (v19 * 9.0);
    *(double *)&v89[80] = v22 * (v19 * 10.0);
    v78.f64[1] = v19 * 11.0;
    v79.f64[0] = v19 * 12.0;
    *(double *)&v89[88] = v22 * (v19 * 11.0);
    *(double *)&v89[96] = v22 * (v19 * 12.0);
    v79.f64[1] = v19 * 13.0;
    v80.f64[0] = v19 * 14.0;
    *(double *)&v89[104] = v22 * (v19 * 13.0);
    *(double *)&v89[112] = v22 * (v19 * 14.0);
    v80.f64[1] = v19 * 15.0;
    v81.f64[0] = v19 * 16.0;
    *(double *)&v89[120] = v22 * (v19 * 15.0);
    *(double *)&v89[128] = v22 * (v19 * 16.0);
    v81.f64[1] = v19 * 17.0;
    v82.f64[0] = v19 * 18.0;
    *(double *)&v89[136] = v22 * (v19 * 17.0);
    *(double *)&v89[144] = v22 * (v19 * 18.0);
    v82.f64[1] = v19 * 19.0;
    v83.f64[0] = v19 * 20.0;
    *(double *)&v89[152] = v22 * (v19 * 19.0);
    *(double *)&v89[160] = v22 * (v19 * 20.0);
    v83.f64[1] = v19 * 21.0;
    v84.f64[0] = v19 * 22.0;
    *(double *)&v89[168] = v22 * (v19 * 21.0);
    *(double *)&v89[176] = v22 * (v19 * 22.0);
    v84.f64[1] = v19 * 23.0;
    v85.f64[0] = v19 * 24.0;
    *(double *)&v89[184] = v22 * (v19 * 23.0);
    *(double *)&v89[192] = v22 * (v19 * 24.0);
    v85.f64[1] = v19 * 25.0;
    v86.f64[0] = v19 * 26.0;
    *(double *)&v89[200] = v22 * (v19 * 25.0);
    *(double *)&v89[208] = v22 * (v19 * 26.0);
    v86.f64[1] = v19 * 27.0;
    v87.f64[0] = v19 * 28.0;
    *(double *)&v89[216] = v22 * (v19 * 27.0);
    *(double *)&v89[224] = v22 * (v19 * 28.0);
    v87.f64[1] = v19 * 29.0;
    v88.f64[0] = v19 * 30.0;
    *(double *)&v89[232] = v22 * (v19 * 29.0);
    *(double *)&v89[240] = v22 * (v19 * 30.0);
    v38 = vmulq_n_f64((float64x2_t)xmmword_2103155A0, v19);
    v88.f64[1] = v38.f64[0];
    *(float64x2_t *)&v89[248] = vmulq_n_f64(v38, v22);
  }
  v39 = v20;
  v40 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[216], *(float64x2_t *)&v89[208]), v39);
  v41 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[184], *(float64x2_t *)&v89[176]), v39);
  v42 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[152], *(float64x2_t *)&v89[144]), v39);
  v72 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[248], *(float64x2_t *)&v89[240]), v39);
  v71 = vmlsq_f64(*(float64x2_t *)&v89[240], v88, vcvtq_f64_f32(vcvt_f32_f64(v72)));
  v43 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[232], *(float64x2_t *)&v89[224]), v39));
  v44 = vmlsq_f64(*(float64x2_t *)&v89[224], v87, vcvtq_f64_f32(v43));
  v45 = vmlsq_f64(*(float64x2_t *)&v89[208], v86, vcvtq_f64_f32(vcvt_f32_f64(v40)));
  v46 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[200], *(float64x2_t *)&v89[192]), v39));
  v47 = vmlsq_f64(*(float64x2_t *)&v89[192], v85, vcvtq_f64_f32(v46));
  v48 = vmlsq_f64(*(float64x2_t *)&v89[176], v84, vcvtq_f64_f32(vcvt_f32_f64(v41)));
  v49 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[168], *(float64x2_t *)&v89[160]), v39));
  v50 = vmlsq_f64(*(float64x2_t *)&v89[160], v83, vcvtq_f64_f32(v49));
  v51 = vmlsq_f64(*(float64x2_t *)&v89[144], v82, vcvtq_f64_f32(vcvt_f32_f64(v42)));
  v52 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[120], *(float64x2_t *)&v89[112]), v39);
  v53 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[136], *(float64x2_t *)&v89[128]), v39));
  v54 = vmlsq_f64(*(float64x2_t *)&v89[128], v81, vcvtq_f64_f32(v53));
  v55 = vmlsq_f64(*(float64x2_t *)&v89[112], v80, vcvtq_f64_f32(vcvt_f32_f64(v52)));
  v56 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[88], *(float64x2_t *)&v89[80]), v39);
  v57 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[56], *(float64x2_t *)&v89[48]), v39);
  v58 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[104], *(float64x2_t *)&v89[96]), v39));
  v59 = vmlsq_f64(*(float64x2_t *)&v89[96], v79, vcvtq_f64_f32(v58));
  v60 = vmlsq_f64(*(float64x2_t *)&v89[80], v78, vcvtq_f64_f32(vcvt_f32_f64(v56)));
  v61 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[72], *(float64x2_t *)&v89[64]), v39));
  v62 = vmlsq_f64(*(float64x2_t *)&v89[64], v77, vcvtq_f64_f32(v61));
  v63 = vmlsq_f64(*(float64x2_t *)&v89[48], v76, vcvtq_f64_f32(vcvt_f32_f64(v57)));
  v64 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[40], *(float64x2_t *)&v89[32]), v39));
  v65 = vmlsq_f64(*(float64x2_t *)&v89[32], v75, vcvtq_f64_f32(v64));
  v66 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[24], *(float64x2_t *)&v89[16]), v39);
  v67 = vmlsq_f64(*(float64x2_t *)&v89[16], v74, vcvtq_f64_f32(vcvt_f32_f64(v66)));
  v68 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[8], *(float64x2_t *)v89), v39));
  v69 = vmlsq_f64(*(float64x2_t *)v89, v73, vcvtq_f64_f32(v68));
  *(float32x4_t *)(a1 + 8) = vcvt_hight_f32_f64((int32x2_t)v68, v66);
  *(float32x4_t *)(a1 + 24) = vcvt_hight_f32_f64((int32x2_t)v64, v57);
  *(float32x4_t *)(a1 + 40) = vcvt_hight_f32_f64((int32x2_t)v61, v56);
  *(float32x4_t *)(a1 + 56) = vcvt_hight_f32_f64((int32x2_t)v58, v52);
  *(float32x4_t *)(a1 + 72) = vcvt_hight_f32_f64((int32x2_t)v53, v42);
  *(float32x4_t *)(a1 + 88) = vcvt_hight_f32_f64((int32x2_t)v49, v41);
  *(float32x4_t *)(a1 + 104) = vcvt_hight_f32_f64((int32x2_t)v46, v40);
  *(float32x4_t *)(a1 + 120) = vcvt_hight_f32_f64((int32x2_t)v43, v72);
  *(float32x4_t *)(a1 + 136) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v69), v67);
  *(float32x4_t *)(a1 + 152) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v65), v63);
  *(float32x4_t *)(a1 + 168) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v60);
  *(float32x4_t *)(a1 + 184) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v59), v55);
  *(float32x4_t *)(a1 + 200) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v54), v51);
  *(float32x4_t *)(a1 + 216) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v48);
  *(float32x4_t *)(a1 + 232) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v45);
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), v71);
  *(float32x4_t *)(a1 + 248) = result;
  return result;
}

double sub_20EB2837C(float64x2_t *a1, double *a2, float64x2_t *a3, double *a4, float64x2_t *a5, double *a6)
{
  float64x2_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  float64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double result;

  v6 = vaddq_f64(*a3, *a5);
  v7 = sqrt(vaddvq_f64(vmulq_f64(v6, v6)));
  v8 = v7 * (v7 * (*a4 + v7 * (a4[1] + a4[2] * v7))) + 1.0;
  v9 = vmulq_n_f64(v6, v8);
  *a1 = v9;
  a1->f64[0] = *a6 + v9.f64[0];
  a1->f64[1] = a6[1] + v9.f64[1];
  v9.f64[0] = *a4 + *a4;
  v10 = a4[1] * 3.0;
  v11 = v7 * (a4[2] * 4.0);
  v12 = v7 == 0.00001;
  v13 = v7 < 0.00001;
  v14 = v9.f64[0] + v7 * v10;
  v15 = v14 + v7 * v11 * v6.f64[0];
  v16 = v14 + vmuld_lane_f64(v7 * v11, v6, 1);
  v17 = v15 * v6.f64[0];
  v18 = v16 * v6.f64[0];
  v19 = vmuld_lane_f64(v15, v6, 1);
  v20 = vmuld_lane_f64(v16, v6, 1);
  v9.f64[0] = v7 * (v9.f64[0] + v7 * (v10 + v11));
  v21 = 1.0 / v7;
  v22 = v21 * v6.f64[0];
  v23 = vmuld_lane_f64(v21, v6, 1);
  v24 = v22 * (v9.f64[0] * v6.f64[0]);
  v25 = v23 * (v9.f64[0] * v6.f64[0]);
  v6.f64[0] = vmuld_lane_f64(v9.f64[0], v6, 1);
  v26 = v22 * v6.f64[0];
  v27 = v23 * v6.f64[0];
  if (v13 || v12)
    v28 = v17;
  else
    v28 = v24;
  if (v13 || v12)
    v29 = v18;
  else
    v29 = v25;
  if (v13 || v12)
  {
    v26 = v19;
    v27 = v20;
  }
  *a2 = v8 + v28;
  a2[1] = v29;
  result = v8 + v27;
  a2[2] = v26;
  a2[3] = result;
  return result;
}

BOOL sub_20EB28490(float64x2_t *a1, simd_double2 *a2, float64x2_t *a3, double *a4, float64x2_t *a5, uint64_t a6)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  simd_double2 v36;
  simd_double2x2 v38;
  simd_double2x2 v39;

  v7 = *a3;
  if (a6)
  {
    v8 = *a5;
    v9 = vaddq_f64(v8, v8);
    v10 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
    v11 = *a3;
    do
    {
      v12 = vmulq_f64(v11, v11);
      v13 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12);
      v12.f64[0] = vaddvq_f64(v12);
      v14 = *a4 * v12.f64[0]
          + 1.0
          + v12.f64[0] * (a4[1] * v12.f64[0])
          + v12.f64[0] * (v12.f64[0] * (a4[2] * v12.f64[0]));
      v15 = vmulq_n_f64(v9, v11.f64[0]);
      v16 = vaddq_f64(v11, v11);
      if (v14 == 0.0)
        v14 = 1.0;
      v11 = vdivq_f64(vsubq_f64(v7, vaddq_f64(vmulq_laneq_f64(v15, v11, 1), vmulq_f64(v10, vaddq_f64(vmulq_f64(v11, v16), (float64x2_t)vdupq_lane_s64(v13, 0))))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
      --a6;
    }
    while (a6);
    v17 = v11.f64[1];
    v7.f64[0] = v11.f64[0];
  }
  else
  {
    v17 = a3->f64[1];
  }
  a1->f64[0] = v7.f64[0];
  a1->f64[1] = v17;
  v18 = a4[1];
  v19 = a4[2];
  _Q4 = *a1;
  _D6 = _Q4.f64[1];
  __asm { FMLA            D5, D6, V4.D[1] }
  v27 = *a4 * _D5 + 1.0 + _D5 * _D5 * (v18 + v19 * _D5);
  v28 = vmulq_n_f64(*a1, *a4 + *a4 + _D5 * (v18 * 4.0 + v19 * 6.0 * _D5));
  v29 = vmulq_n_f64(v28, a1->f64[0]);
  v30 = vmulq_laneq_f64(v28, *a1, 1);
  v31 = *a5;
  v32 = vaddq_f64(v31, v31);
  v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0);
  v33.f64[0] = vmuld_lane_f64(6.0, *a5, 1);
  v34 = vaddq_f64(vmulq_n_f64(v32, v17), vmulq_n_f64(v33, a1->f64[0]));
  v29.f64[0] = v27 + v29.f64[0];
  v39.columns[0] = (simd_double2)vaddq_f64(v34, v29);
  *(_QWORD *)&v39.columns[1].f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1), v30);
  v39.columns[1].f64[1] = v17 * (6.0 * v31.f64[0]) + vmulq_laneq_f64(_Q4, v32, 1).f64[0] + v27 + v30.f64[1];
  v35 = sub_20E8BE318((double *)&v39);
  if (v35 != 0.0)
  {
    sub_20E8BE3B0(&v39, &v38);
    v36 = v38.columns[1];
    *a2 = v38.columns[0];
    a2[1] = v36;
  }
  return v35 != 0.0;
}

BOOL sub_20EB28658(double *a1, simd_double2 *a2, double *a3, double *a4, double *a5, double *a6, uint64_t a7)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  simd_double2 v46;
  simd_double2x2 v48;
  simd_double2x2 v49;

  v8 = *a3 - *a6;
  v9 = a3[1] - a6[1];
  v10 = 1.0;
  if (a7)
  {
    v11 = sqrt(v8 * v8 + v9 * v9);
    v12 = a4[1];
    v13 = a4[2];
    v10 = 1.0;
    do
    {
      v14 = v11 * v10 * (v11 * v10 * (*a4 * 3.0 + v11 * v10 * (v12 * 4.0 + v13 * 5.0 * (v11 * v10)))) + 1.0;
      if (v14 == 0.0)
        v14 = 1.0;
      v10 = v10 - (v10 * (v11 * v10 * (v11 * v10 * (*a4 + v11 * v10 * (v12 + v13 * (v11 * v10)))) + 1.0) + -1.0) / v14;
      --a7;
    }
    while (a7);
  }
  v15 = v8 * v10 - *a5;
  *a1 = v15;
  v16 = v9 * v10 - a5[1];
  a1[1] = v16;
  v17 = v15 + *a5;
  v18 = v16 + a5[1];
  v19 = sqrt(v17 * v17 + v18 * v18);
  v20 = a4[1];
  v21 = a4[2];
  v22 = v19 * (v19 * (*a4 + v19 * (v20 + v21 * v19))) + 1.0;
  v23 = *a4 + *a4;
  v24 = v20 * 3.0;
  v25 = v19 * (v21 * 4.0);
  v26 = v19 <= 0.00001;
  v27 = v23 + v24 * v19;
  v28 = v27 + v17 * (v19 * v25);
  v29 = v27 + v18 * (v19 * v25);
  v30 = v17 * v28;
  v31 = v17 * v29;
  v32 = v18 * v28;
  v33 = v18 * v29;
  v34 = v19 * (v23 + v19 * (v24 + v25));
  v35 = 1.0 / v19;
  v36 = v17 * (1.0 / v19);
  v37 = v18 * v35;
  v38 = v17 * v34;
  v39 = v36 * v38;
  v40 = v37 * v38;
  v41 = v18 * v34;
  v42 = v36 * v41;
  v43 = v37 * v41;
  if (v26)
    v44 = v30;
  else
    v44 = v39;
  if (v26)
  {
    v40 = v31;
    v42 = v32;
    v43 = v33;
  }
  v49.columns[0].f64[0] = v22 + v44;
  v49.columns[0].f64[1] = v40;
  v49.columns[1].f64[0] = v42;
  v49.columns[1].f64[1] = v22 + v43;
  v45 = sub_20E8BE318((double *)&v49);
  if (v45 != 0.0)
  {
    sub_20E8BE3B0(&v49, &v48);
    v46 = v48.columns[1];
    *a2 = v48.columns[0];
    a2[1] = v46;
  }
  return v45 != 0.0;
}

uint64_t sub_20EB2886C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int32x4_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v45;
  int v46;
  float64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  double v51;

  v6 = *a2;
  v7 = sqrt(v6 * v6 + a2[1] * a2[1]);
  v8 = *(double *)a3 + 1.0 + *(double *)(a3 + 8) + *(double *)(a3 + 16) + *(double *)(a3 + 24);
  if (v8 <= 1.0)
    v9 = 1.0;
  else
    v9 = 1.0 / v8;
  v10 = v7 * v9;
  if (a4)
  {
    v11 = *(int64x2_t *)(a3 + 16);
    v12 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v11);
    v13 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v11);
    v14 = vmulq_f64(v13, (float64x2_t)xmmword_210312E20);
    v15 = vmulq_f64(v12, (float64x2_t)xmmword_210312E10);
    do
    {
      v16 = vmulq_n_f64(vaddq_f64(v15, vmulq_n_f64(v14, v10 * v10)), v10 * v10);
      v17 = v10 * v10 * (v10 * v10);
      v18 = v16.f64[0] + vmuld_lane_f64(v17, v16, 1) + 1.0;
      v19 = vmulq_n_f64(vaddq_f64(v12, vmulq_n_f64(v13, v10 * v10)), v10 * v10);
      v20 = v7 - (v10 + v10 * (v19.f64[0] + vmuld_lane_f64(v17, v19, 1)));
      if (v18 == 0.0)
        v18 = 1.0;
      v10 = fmax(v10 + v20 / v18, 0.0);
      --a4;
    }
    while (a4);
  }
  if (v10 > 3.14159265)
    return 0;
  v22 = 1.0 / tan(v10);
  if (v22 >= 1.0)
  {
    v24 = 1.0 / v22 * 0.785398163 - 1.0 / v22 * (1.0 / v22 + -1.0) * (1.0 / v22 * 0.0663008339 + 0.244711287);
  }
  else if (v22 <= -1.0)
  {
    v24 = 1.0 / v22 * 0.785398163
        - 1.0 / v22 * (-1.0 - 1.0 / v22) * (1.0 / v22 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v23 = fabs(v22);
    v24 = v22 * (v23 + -1.0) * (v23 * 0.0663008339 + 0.244711287) + v22 * -0.785398163 + 1.57079633;
  }
  v25 = fmax(v10 + v10 - v24, 0.0);
  v26 = 1.0 / tan(v25);
  if (v26 >= 1.0)
  {
    v28 = 1.0 / v26 * 0.785398163 - 1.0 / v26 * (1.0 / v26 + -1.0) * (1.0 / v26 * 0.0663008339 + 0.244711287);
  }
  else if (v26 <= -1.0)
  {
    v28 = 1.0 / v26 * 0.785398163
        - 1.0 / v26 * (-1.0 - 1.0 / v26) * (1.0 / v26 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v27 = fabs(v26);
    v28 = v26 * (v27 + -1.0) * (v27 * 0.0663008339 + 0.244711287) + v26 * -0.785398163 + 1.57079633;
  }
  v29 = fmax(v25 + v10 - v28, 0.0);
  v30 = 1.0 / tan(v29);
  if (v30 >= 1.0)
  {
    v32 = 1.0 / v30 * 0.785398163 - 1.0 / v30 * (1.0 / v30 + -1.0) * (1.0 / v30 * 0.0663008339 + 0.244711287);
  }
  else if (v30 <= -1.0)
  {
    v32 = 1.0 / v30 * 0.785398163
        - 1.0 / v30 * (-1.0 - 1.0 / v30) * (1.0 / v30 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v31 = fabs(v30);
    v32 = v30 * (v31 + -1.0) * (v31 * 0.0663008339 + 0.244711287) + v30 * -0.785398163 + 1.57079633;
  }
  v33 = fmax(v29 + v10 - v32, 0.0);
  *(double *)v34.i64 = 1.0 / tan(v33);
  if (*(double *)v34.i64 >= 1.0)
  {
    *(double *)v34.i64 = v33
                       + v10
                       - (1.0 / *(double *)v34.i64 * 0.785398163
                        - 1.0
                        / *(double *)v34.i64
                        * (1.0 / *(double *)v34.i64 + -1.0)
                        * (1.0 / *(double *)v34.i64 * 0.0663008339 + 0.244711287));
    v36 = fmax(*(double *)v34.i64, 0.0);
    if (v36 <= 3.14159265)
      goto LABEL_33;
    return 0;
  }
  if (*(double *)v34.i64 <= -1.0)
  {
    *(double *)v34.i64 = v33
                       + v10
                       - (1.0 / *(double *)v34.i64 * 0.785398163
                        - 1.0
                        / *(double *)v34.i64
                        * (-1.0 - 1.0 / *(double *)v34.i64)
                        * (1.0 / *(double *)v34.i64 * -0.0663008339 + 0.244711287)
                        + 3.14159265);
    v36 = fmax(*(double *)v34.i64, 0.0);
    if (v36 <= 3.14159265)
      goto LABEL_33;
    return 0;
  }
  v35 = fabs(*(double *)v34.i64);
  *(double *)v34.i64 = v33
                     + v10
                     - (*(double *)v34.i64 * (v35 + -1.0) * (v35 * 0.0663008339 + 0.244711287)
                      + *(double *)v34.i64 * -0.785398163
                      + 1.57079633);
  v36 = fmax(*(double *)v34.i64, 0.0);
  if (v36 > 3.14159265)
    return 0;
LABEL_33:
  v34.i32[0] = 0;
  v37 = v36 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
  v38 = v36 + v37 * -1.57079633 + v37 * -5.39030286e-15 + v37 * -8.84372057e-29;
  v39 = v38 * v38 * (v38 * v38);
  __asm { FMOV            V17.2D, #1.0 }
  v45 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v38 * v38), _Q17), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v38 * v38), (float64x2_t)xmmword_210312E80), v39));
  _Q17.f64[0] = v38;
  v46 = (int)v37;
  v47 = vmulq_f64(_Q17, xmmword_2103155F0[(int)v37 & 3]);
  v48 = (int8x16_t)vmulq_f64(vaddq_f64(v45, vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v38 * v38), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v38 * v38), (float64x2_t)xmmword_210312E90), v39)), v39 * v39)), v47);
  LODWORD(v47.f64[0]) = v46 & 1;
  v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v47, v34), 0);
  v50 = vbslq_s8(v49, v48, (int8x16_t)vdupq_lane_s64(v48.i64[0], 0));
  v51 = *(double *)vbslq_s8(v49, v48, (int8x16_t)vdupq_laneq_s64((int64x2_t)v48, 1)).i64 / v7;
  if (v7 < 0.0001)
    v51 = 1.0;
  *(double *)a1 = v6 * v51;
  *(double *)(a1 + 8) = a2[1] * v51;
  *(_QWORD *)(a1 + 16) = v50.i64[1];
  return 1;
}

uint64_t sub_20EB28F10(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  unint64_t v20;
  double v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64_t v27;
  __int128 v29;
  float64x2_t v30;
  int64x2_t v31;
  int8x16_t v33;
  float64x2_t v35;
  __int128 v41;
  __int128 v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  float64_t v53;

  result = sub_20EB2886C(a1, a3, a4, a5);
  if ((_DWORD)result)
  {
    v11 = *(float64x2_t *)a1;
    v12 = *(double *)(a1 + 16);
    v13 = vaddvq_f64(vmulq_f64(v11, v11));
    if (v13 >= 0.00000001)
    {
      v14 = sqrt(v13);
      if (v14 <= v12)
      {
        v18 = v14 / v12 * 0.785398163 - v14 / v12 * (v14 / v12 + -1.0) * (v14 / v12 * 0.0663008339 + 0.244711287);
      }
      else
      {
        if (v14 <= -v12)
        {
          v16 = v14 / v12 * 0.785398163 - v14 / v12 * (-1.0 - v14 / v12) * (v14 / v12 * -0.0663008339 + 0.244711287);
          v17 = 3.14159265;
        }
        else
        {
          v15 = fabs(v12 / v14);
          v16 = v12 / v14 * (v15 + -1.0) * (v15 * 0.0663008339 + 0.244711287) + v12 / v14 * -0.785398163;
          v17 = 1.57079633;
        }
        v18 = v16 + v17;
      }
      v22 = *(int64x2_t *)(a4 + 16);
      v23 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v22);
      v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v22);
      v10 = vmulq_n_f64(vaddq_f64(vmulq_f64(v24, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v23, (float64x2_t)xmmword_210312E20), v18 * v18)), v18 * v18);
      v25 = v18 * v18 * (v18 * v18);
      v26 = vmulq_n_f64(vaddq_f64(v24, vmulq_n_f64(v23, v18 * v18)), v18 * v18);
      v21 = (v18 + v18 * (v26.f64[0] + vmuld_lane_f64(v25, v26, 1))) / v14;
      v27 = (v10.f64[0] + vmuld_lane_f64(v25, v10, 1) + 1.0) / (v13 + v12 * v12);
      v19 = vmulq_n_f64(v11, (v12 * v27 - v21) / v13);
      v9.f64[0] = -v27;
      v20 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    }
    else
    {
      if (v12 == 0.0)
        return 0;
      v9.f64[0] = v12 * v12;
      v19.f64[0] = 0.0;
      v20 = 0;
      v21 = 1.0 / v12;
    }
    *(_QWORD *)&v19.f64[1] = v20;
    _Q5 = (int8x16_t)vmulq_n_f64(v19, v11.f64[0]);
    *(_QWORD *)&v29 = *(_OWORD *)&vmulq_f64(v11, v9);
    v30 = vmulq_laneq_f64(v19, v11, 1);
    v31 = (int64x2_t)vmulq_laneq_f64(v9, v11, 1);
    v11.f64[0] = v21 + *(double *)_Q5.i64;
    v10.f64[0] = v21 + v30.f64[1];
    v19.f64[0] = *(float64_t *)(a1 + 16);
    v33 = *(int8x16_t *)a1;
    _Q18.f64[0] = v10.f64[0];
    *(_QWORD *)&_Q18.f64[1] = v31.i64[0];
    v35.f64[0] = v19.f64[0];
    v35.f64[1] = *(float64_t *)a1;
    _Q18.f64[0] = vmlsq_f64(vmulq_f64(_Q18, v35), (float64x2_t)vzip1q_s64(v31, *(int64x2_t *)&v30), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v19, 8uLL)).f64[1];
    __asm { FMLA            D17, D18, V5.D[1] }
    if (fabs(vmlad_n_f64(_D17, vmlsq_f64(vmulq_laneq_f64(v30, *(float64x2_t *)a1, 1), v10, *(float64x2_t *)a1).f64[0], *(double *)&v29)) >= 0.00000001)
    {
      v11.f64[1] = v30.f64[0];
      *(_QWORD *)&v41 = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
      *((_QWORD *)&v41 + 1) = *(_QWORD *)&v10.f64[0];
      *((_QWORD *)&v29 + 1) = v31.i64[0];
      v49 = *(_QWORD *)a1;
      v48 = v11;
      v51 = vextq_s8(v33, v33, 8uLL).u64[0];
      v50 = v41;
      v53 = v19.f64[0];
      v52 = v29;
      sub_20E8BE424((uint64_t)&v44);
      *(_QWORD *)&v42 = v45;
      v43 = vzip2q_s64(v44, v46);
      *((_QWORD *)&v42 + 1) = v47;
      *(int64x2_t *)a2 = vzip1q_s64(v44, v46);
      *(int64x2_t *)(a2 + 16) = v43;
      *(_OWORD *)(a2 + 32) = v42;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20EB29218(double *a1, uint64_t a2, float64x2_t *a3, int64x2_t *a4)
{
  float64x2_t v4;
  double v5;
  float64x2_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  unint64_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64_t v22;
  float64x2_t v23;
  float64x2_t v24;

  v4 = *a3;
  v5 = a3[1].f64[0];
  v6 = vmulq_f64(v4, v4);
  v6.f64[0] = vaddvq_f64(v6);
  if (v6.f64[0] >= 0.00000001)
  {
    v8 = sqrt(v6.f64[0]);
    if (v8 <= v5)
    {
      v12 = v8 / v5 * 0.785398163 - v8 / v5 * (v8 / v5 + -1.0) * (v8 / v5 * 0.0663008339 + 0.244711287);
    }
    else
    {
      if (v8 <= -v5)
      {
        v10 = v8 / v5 * 0.785398163 - v8 / v5 * (-1.0 - v8 / v5) * (v8 / v5 * -0.0663008339 + 0.244711287);
        v11 = 3.14159265;
      }
      else
      {
        v9 = fabs(v5 / v8);
        v10 = v5 / v8 * (v9 + -1.0) * (v9 * 0.0663008339 + 0.244711287) + v5 / v8 * -0.785398163;
        v11 = 1.57079633;
      }
      v12 = v10 + v11;
    }
    v16 = a4[1];
    v17 = (float64x2_t)vzip2q_s64(*a4, v16);
    v18 = (float64x2_t)vzip1q_s64(*a4, v16);
    v19 = vmulq_n_f64(vaddq_f64(vmulq_f64(v18, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v17, (float64x2_t)xmmword_210312E20), v12 * v12)), v12 * v12);
    v20 = v12 * v12 * (v12 * v12);
    v21 = vmulq_n_f64(vaddq_f64(v18, vmulq_n_f64(v17, v12 * v12)), v12 * v12);
    v15 = (v12 + v12 * (v21.f64[0] + vmuld_lane_f64(v20, v21, 1))) / v8;
    v22 = (v19.f64[0] + vmuld_lane_f64(v20, v19, 1) + 1.0) / (v6.f64[0] + v5 * v5);
    v13 = vmulq_n_f64(v4, (v5 * v22 - v15) / v6.f64[0]);
    v6.f64[0] = -v22;
    v14 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  }
  else
  {
    if (v5 == 0.0)
    {
      *a1 = 0.0;
      a1[1] = 0.0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      return 0;
    }
    v6.f64[0] = v5 * v5;
    v13.f64[0] = 0.0;
    v14 = 0;
    v15 = 1.0 / v5;
  }
  *a1 = v15 * v4.f64[0];
  a1[1] = vmuld_lane_f64(v15, v4, 1);
  *(_QWORD *)&v13.f64[1] = v14;
  v23 = vmulq_n_f64(v13, v4.f64[0]);
  *(float64x2_t *)a2 = v23;
  *(_QWORD *)(a2 + 16) = *(_OWORD *)&vmulq_f64(v4, v6);
  v24 = vmulq_laneq_f64(v13, v4, 1);
  *(float64x2_t *)(a2 + 24) = v24;
  *(double *)a2 = v15 + v23.f64[0];
  *(double *)(a2 + 32) = v15 + v24.f64[1];
  *(_QWORD *)(a2 + 40) = *(_OWORD *)&vmulq_laneq_f64(v6, v4, 1);
  return 1;
}

uint64_t sub_20EB29430(double *a1, double *a2, int64x2_t *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = v4 * v4 + v3 * v3;
  if (v6 >= 0.00000001)
  {
    v8 = sqrt(v6);
    if (v8 <= v5)
    {
      v13 = v8 / v5 * 0.785398163 - v8 / v5 * (v8 / v5 + -1.0) * (v8 / v5 * 0.0663008339 + 0.244711287);
    }
    else
    {
      if (v8 <= -v5)
      {
        v11 = v8 / v5 * 0.785398163 - v8 / v5 * (-1.0 - v8 / v5) * (v8 / v5 * -0.0663008339 + 0.244711287);
        v12 = 3.14159265;
      }
      else
      {
        v9 = v5 / v8;
        v10 = fabs(v9);
        v11 = v9 * (v10 + -1.0) * (v10 * 0.0663008339 + 0.244711287) + v9 * -0.785398163;
        v12 = 1.57079633;
      }
      v13 = v11 + v12;
    }
    v14 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*a3, a3[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*a3, a3[1]), v13 * v13)), v13 * v13);
    v15 = (v13 + v13 * (v14.f64[0] + vmuld_lane_f64(v13 * v13 * (v13 * v13), v14, 1))) / v8;
    *a1 = v4 * v15;
    a1[1] = v3 * v15;
    return 1;
  }
  else if (v5 == 0.0)
  {
    *a1 = 0.0;
    a1[1] = 0.0;
    return 0;
  }
  else
  {
    *a1 = v4 * (1.0 / v5);
    a1[1] = v3 * (1.0 / v5);
    return 1;
  }
}

uint64_t sub_20EB295B8(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  double v45;
  float64x2_t v46;
  double v47;

  _Q3 = *(float64x2_t *)a4;
  _D2 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D1, D2, V3.D[1] }
  v13 = _D1 * a6 * a6;
  v15 = a5[12];
  v14 = a5[13];
  v16 = a5[7];
  v17 = a5[6] + v14 * a6;
  v18 = a5[5] + v15 * a6;
  v19 = v13 * (v13 * (v17 + 0.0) + v18);
  v20 = v18 * 6.0 + v13 * (v17 * 7.0 + v13 * 0.0);
  v21 = a5[10];
  v22 = a5[11];
  v23 = a5[4] + v22 * a6;
  v24 = v13 * (v19 + v23);
  v25 = v23 * 5.0 + v13 * v20;
  v26 = a5[3] + v21 * a6;
  v27 = v13 * (v24 + v26);
  v28 = v26 * 4.0 + v13 * v25;
  v29 = a5[8];
  v30 = a5[9];
  v31 = a5[2] + v30 * a6;
  v32 = v13 * (v27 + v31);
  v33 = v31 * 3.0 + v13 * v28;
  v34 = a5[1] + v29 * a6;
  v35 = v13 * (v32 + v34);
  v36 = v34 + v34 + v13 * v33;
  v37 = *a5 + v16 * a6;
  v38 = v37 + v13 * v36;
  v39 = 1.0 / (v13 * (v35 + v37) / 100.0 + 1.0);
  *a1 = vmulq_n_f64(*(float64x2_t *)a4, v39);
  v40 = -(v39 * v39) / 100.0;
  v41 = a6 + a6;
  v42 = (a6 + a6) * a6;
  v43 = vmulq_n_f64(*(float64x2_t *)a4, v38 * v40);
  v44 = v42 * *(double *)a4;
  v45 = vmuld_lane_f64(v42, *(float64x2_t *)a4, 1);
  v46.f64[0] = 0.0;
  v46.f64[1] = v39;
  *a2 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v39, v43, v44);
  a2[1] = vmlaq_n_f64(v46, v43, v45);
  if (a3)
  {
    v47 = v13 * (v16 + v13 * (v29 + v13 * (v30 + v13 * (v21 + v13 * (v22 + v13 * (v15 + (v14 + 0.0) * v13))))));
    _Q1 = *(float64x2_t *)a4;
    _D4 = *(_QWORD *)(a4 + 8);
    __asm { FMLA            D2, D4, V1.D[1] }
    *a3 = vmulq_n_f64(*(float64x2_t *)a4, v40 * (v47 + v38 * (v41 * _D2)));
  }
  return 1;
}

uint64_t sub_20EB29790@<X0>(double *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  __int128 v5;
  double v6;
  _BOOL4 v9;
  unsigned int v10;
  double *v11;
  int v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  uint16x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  int32x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint32x4_t v39;
  int32x2_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  int8x16_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint64x2_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  double v73;
  double v74;
  int64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  int8x16_t v95;
  __int16 v96;
  int16x8_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int8x16_t v102;
  __int16 v103;
  __int16 v104;
  int8x16_t v105;
  __int16 v106;
  int8x16_t v107;
  __int16 v108;
  __int16 v109;
  int v110;
  int32x2_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64x2_t v114;
  float64x2_t v115;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  uint64_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  unsigned int v138;
  int v139;
  int v140;
  unsigned __int32 v141;
  double v142;
  unsigned __int32 v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  long double v147;
  long double v148;
  long double v149;
  long double v150;
  long double v151;
  uint64_t v152;
  long double v153;
  long double v154;
  long double v155;
  long double v156;
  long double v157;
  long double v158;
  void *v159;
  __int128 *v160;
  __int128 *v161;
  size_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *v170;
  _OWORD *v171;
  int32x2_t v172;
  int64x2_t v173;
  int32x2_t v174;
  double v175;
  double v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  uint64x2_t v182;
  uint64x2_t v183;
  uint64x2_t v184;
  unsigned int v185;
  __int32 v186;
  int32x4_t v187;
  int32x4_t v188;
  int v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  int v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v205;
  __int32 v206;
  int v207;
  int v208;
  unsigned int v209;
  uint64x2_t v210;
  unsigned __int32 v211;
  uint64x2_t v212;
  unsigned __int32 v213;
  uint64x2_t v214;
  uint64x2_t v215;
  float64x2_t v216;
  char *__src;
  uint64x2_t v218;
  float64x2_t v219;
  unsigned int v220;
  uint64x2_t v221;
  float64x2_t v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  __int128 v232;
  float64x2_t v233;
  __int128 v234;
  float64x2_t v235;
  __int128 v236;
  float64x2_t v237;
  __int128 __x;
  float64x2_t __xa;
  __int128 v240;
  long double v241;
  __int128 v242;
  float64x2_t v243;
  double v244;
  double v245;
  __int128 v246;
  unsigned int v247;
  void *v248;
  void *v249;

  v6 = a3;
  v244 = a5;
  if (a3 > a4
    && (v9 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 1434, (uint64_t)"min_focal_length <= max_focal_length", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), a5 = v244, v9)|| (v171 = a2, a5 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensDistortionFunctions.cpp", 1435, (uint64_t)"max_radius > 0", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a4 <= v6)
    v10 = 1;
  else
    v10 = 10;
  v11 = (double *)operator new(11200 * v10, (std::align_val_t)0x20uLL);
  v12 = 800 * v10;
  v13 = (char *)operator new(800 * v10, (std::align_val_t)0x20uLL);
  v20 = 0;
  v21 = 0;
  LODWORD(v22) = 100 * v10;
  v176 = a4 - v6;
  v24 = a1[12];
  v23 = a1[13];
  v25 = a1[5];
  v199 = a1[11];
  v200 = a1[4];
  v197 = a1[3];
  v198 = a1[10];
  v195 = a1[9];
  v196 = a1[2];
  v193 = a1[1];
  v194 = a1[8];
  v191 = a1[6];
  v192 = *a1;
  v190 = a1[7];
  v26 = (uint16x4_t)vdup_n_s16(v10);
  v27 = vmull_u16(v26, (uint16x4_t)0x4B001F4044C0190);
  v28 = vmull_u16(v26, (uint16x4_t)0x3E8012C038400C8);
  v208 = 600 * v10;
  v207 = 1300 * v10;
  v29.i32[0] = 100 * v10;
  v189 = 700 * v10;
  v29.i32[1] = 700 * v10;
  v174 = v29;
  v30 = vdupq_n_s64((unint64_t)v11);
  v173 = v30;
  v206 = v28.i32[1];
  v31 = v28.i64[1];
  v32 = v27.i64[0];
  v30.i32[0] = 800 * v10;
  v172 = vzip1_s32(*(int32x2_t *)v30.i8, *(int32x2_t *)v28.i8);
  v187 = (int32x4_t)v28;
  v186 = v28.i32[0];
  v188 = (int32x4_t)v27;
  v205 = __PAIR64__(v27.u32[2], v27.u32[3]);
  __src = v13;
  v203 = 100 * v10;
  v202 = v10;
  v201 = 800 * v10;
  v175 = v25;
  do
  {
    *(double *)&v5 = v6;
    if (a4 > v6)
      *(double *)&v5 = v176 * (double)v21 / 9.0 + v6;
    v245 = v191 + v23 * *(double *)&v5 + 0.0;
    *(double *)&v14 = v25 + v24 * *(double *)&v5;
    *(double *)&v15 = v200 + v199 * *(double *)&v5;
    *(double *)&v16 = v197 + v198 * *(double *)&v5;
    *(double *)&v17 = v196 + v195 * *(double *)&v5;
    *(double *)&v18 = v193 + v194 * *(double *)&v5;
    *(double *)&v19 = v192 + v190 * *(double *)&v5;
    v33 = v189 + v20;
    v34 = v22 + v20;
    v35 = v12 + v20;
    v36 = vdupq_n_s32(v20);
    v37 = v208 + v20;
    v38 = v207 + v20;
    v39.i64[0] = 0x6300000063;
    v39.i64[1] = 0x6300000063;
    v247 = v20;
    v209 = v21;
    v246 = v5;
    v240 = v15;
    v242 = v14;
    v236 = v17;
    __x = v16;
    v232 = v19;
    v234 = v18;
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)vaddq_s32(v187, v36), v39), (int16x8_t)vcgtq_u32((uint32x4_t)vaddq_s32(v188, v36), v39)))) & 1) != 0)goto LABEL_50;
    if (v33 > 0xFFFFFF9C)
      goto LABEL_50;
    if (v20 > 0xFFFFFF9C)
      goto LABEL_50;
    if (v34 > 0xFFFFFF9C)
      goto LABEL_50;
    if (v35 > 0xFFFFFF9C)
      goto LABEL_50;
    if (v37 > 0xFFFFFF9C)
      goto LABEL_50;
    if (v38 >= 0xFFFFFF9D)
      goto LABEL_50;
    v40 = vdup_n_s32(v20);
    v41.i64[1] = v173.i64[1];
    v42 = (int8x16_t)vaddq_s64((int64x2_t)vshll_n_u32((uint32x2_t)vadd_s32(v174, v40), 3uLL), v173);
    v43 = (int8x16_t)vaddq_s64((int64x2_t)vshll_n_u32((uint32x2_t)vadd_s32(v172, v40), 3uLL), v173);
    v226 = v31 + v20;
    v44 = (uint64_t)&v11[v31 + v20];
    v230 = HIDWORD(v31) + v20;
    v45 = (unint64_t)&v11[HIDWORD(v31) + v20];
    v228 = v32 + v20;
    v46 = (uint64_t)&v11[v32 + v20];
    v181 = HIDWORD(v32) + v20;
    v47 = (uint64_t)&v11[HIDWORD(v32) + v20];
    v180 = HIDWORD(v205) + v20;
    v48 = (uint64_t)&v11[HIDWORD(v205) + v20];
    v179 = v205 + v20;
    v49 = (uint64_t)&v11[v205 + v20];
    v178 = v208 + v20;
    v50 = (uint64_t)&v11[v208 + v20];
    v51 = vdupq_n_s64((unint64_t)&v11[v206 + v20]);
    v52.i64[0] = (uint64_t)&v11[v206 + v20];
    v52.i64[1] = v44;
    v53.i64[0] = v45;
    v53.i64[1] = v46;
    v54.i64[0] = v47;
    v54.i64[1] = v48;
    v177 = v207 + v20;
    v55 = (uint64_t)&v11[v207 + v20];
    v56.i64[0] = v49;
    v56.i64[1] = v50;
    v41.i64[0] = v55;
    v57 = (int64x2_t)vextq_s8(v54, v56, 8uLL);
    v58 = (int64x2_t)vextq_s8(v53, v54, 8uLL);
    v59 = (int64x2_t)vextq_s8(v52, v53, 8uLL);
    v60.i64[0] = v50;
    v60.i64[1] = v55;
    v61 = (int64x2_t)vextq_s8(v56, v41, 8uLL);
    v62 = vdupq_lane_s64(v43.i64[0], 0);
    v63 = (int64x2_t)vextq_s8(v43, v52, 8uLL);
    v182 = (uint64x2_t)vsubq_s64(v59, v62);
    v64 = (uint64x2_t)vsubq_s64(v58, v62);
    v65 = (uint64x2_t)vsubq_s64(v57, v62);
    v66 = (uint64x2_t)vsubq_s64(v63, v62);
    v67 = (uint64x2_t)vsubq_s64(v60, v62);
    v62.i64[0] = v55;
    v60.i64[0] = v55;
    v60.i64[1] = v42.i64[0];
    v68 = vdupq_n_s64(v45);
    v68.i64[0] = v55;
    v41.i64[1] = v44;
    v69 = vdupq_laneq_s64((int64x2_t)v43, 1);
    v70 = vdupq_lane_s64(v42.i64[0], 0);
    v71 = (int64x2_t)vextq_s8(v42, v42, 8uLL);
    v72 = vdupq_n_s64((unint64_t)&v11[v20]);
    v73 = v23;
    v74 = v6;
    v75 = vdupq_laneq_s64((int64x2_t)v42, 1);
    v76 = (uint64x2_t)vsubq_s64((int64x2_t)v42, v72);
    v42.i64[0] = (uint64_t)&v11[v20];
    v215 = (uint64x2_t)vsubq_s64(v58, v70);
    v183 = (uint64x2_t)vsubq_s64((int64x2_t)v41, v63);
    v77 = (uint64x2_t)vsubq_s64(v68, (int64x2_t)v52);
    v78 = (uint64x2_t)vsubq_s64(v60, (int64x2_t)v42);
    v79 = (uint64x2_t)vsubq_s64(v57, v70);
    v218 = (uint64x2_t)vsubq_s64(v62, v71);
    v221 = (uint64x2_t)vsubq_s64(v59, v70);
    v212 = (uint64x2_t)vsubq_s64((int64x2_t)v52, v75);
    v214 = (uint64x2_t)vsubq_s64(v63, v70);
    v210 = (uint64x2_t)vsubq_s64((int64x2_t)v53, v75);
    v184 = (uint64x2_t)vsubq_s64((int64x2_t)v54, v75);
    v80 = (uint64x2_t)vsubq_s64((int64x2_t)v56, v75);
    v81 = (uint64x2_t)vsubq_s64((int64x2_t)v54, v69);
    v82 = (uint64x2_t)vsubq_s64((int64x2_t)v56, v69);
    v83 = (uint64x2_t)vsubq_s64((int64x2_t)v53, v51);
    v84 = (uint64x2_t)vsubq_s64(v61, v70);
    v85 = (uint64x2_t)vsubq_s64((int64x2_t)v54, v51);
    v86 = (uint64x2_t)vsubq_s64((int64x2_t)v56, v51);
    v87 = (uint64x2_t)vsubq_s64((int64x2_t)v43, v75);
    v88 = (uint64x2_t)vsubq_s64((int64x2_t)v54, v72);
    v89 = (uint64x2_t)vsubq_s64((int64x2_t)v56, v72);
    *(double *)v42.i64 = v24;
    v90 = (uint64x2_t)vsubq_s64((int64x2_t)v43, v72);
    v91 = (uint64x2_t)vsubq_s64((int64x2_t)v53, v69);
    v92 = (uint64x2_t)vsubq_s64((int64x2_t)v53, v72);
    v93 = (uint64x2_t)vsubq_s64((int64x2_t)v52, v72);
    v94 = (uint64x2_t)vdupq_n_s64(0x10uLL);
    v95 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v79), (int32x4_t)vcgtq_u64(v94, v84)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v66), (int32x4_t)vcgtq_u64(v94, v182))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v64), (int32x4_t)vcgtq_u64(v94, v65)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v67), (int32x4_t)vcgtq_u64(v94, (uint64x2_t)vsubq_s64((int64x2_t)v52, v69))))), 7uLL)), (int8x16_t)xmmword_2103155B0);
    v52.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
    v52.i8[0] = vaddv_s8(*(int8x8_t *)v52.i8);
    v96 = v52.i16[0];
    v97 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v93), (int32x4_t)vcgtq_u64(v94, v92));
    v98 = (int32x4_t)vcgtq_u64(v94, v90);
    v24 = *(double *)v42.i64;
    v99 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v76), v98), v97);
    v100 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v88), (int32x4_t)vcgtq_u64(v94, v89));
    v101 = (int32x4_t)vcgtq_u64(v94, v87);
    v6 = v74;
    v23 = v73;
    v25 = v175;
    v102 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8(v99, (int8x16_t)vuzp1q_s16(v100, (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v78), v101))), 7uLL)), (int8x16_t)xmmword_2103155B0);
    v99.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
    v99.i8[0] = vaddv_s8(*(int8x8_t *)v99.i8);
    v102.i8[0] = vaddv_s8(*(int8x8_t *)v102.i8);
    v103 = v102.i16[0];
    v102.i8[0] = vaddv_s8(*(int8x8_t *)v95.i8);
    v104 = v102.i16[0];
    v105 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v91), (int32x4_t)vcgtq_u64(v94, v81)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v82), (int32x4_t)vcgtq_u64(v94, v183))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v83), (int32x4_t)vcgtq_u64(v94, v85)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v86), (int32x4_t)vcgtq_u64(v94, v77)))), 7uLL)), (int8x16_t)xmmword_2103155B0);
    v95.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
    v95.i8[0] = vaddv_s8(*(int8x8_t *)v95.i8);
    v106 = v95.i16[0];
    v107 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v212), (int32x4_t)vcgtq_u64(v94, v210)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v184), (int32x4_t)vcgtq_u64(v94, v80))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v218), (int32x4_t)vcgtq_u64(v94, v214)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v94, v221), (int32x4_t)vcgtq_u64(v94, v215)))), 7uLL)), (int8x16_t)xmmword_2103155B0);
    v95.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
    v95.i8[0] = vaddv_s8(*(int8x8_t *)v95.i8);
    v107.i8[0] = vaddv_s8(*(int8x8_t *)v107.i8);
    v108 = v107.i16[0];
    v107.i8[0] = vaddv_s8(*(int8x8_t *)v105.i8);
    v109 = v103 | ((v99.i16[0] | (unsigned __int16)v96) << 8);
    v38 = v207 + v20;
    v37 = v37;
    if ((unsigned __int16)(v109 | v104) | (unsigned __int16)(v108 | ((v95.i16[0] | (unsigned __int16)v106) << 8) | v107.i16[0])
      || (unint64_t)(v46 - v44) < 0x10
      || (unint64_t)(v47 - v44) < 0x10
      || (unint64_t)(v48 - v44) < 0x10
      || (unint64_t)(v49 - v44) < 0x10
      || (unint64_t)(v50 - v44) < 0x10
      || (unint64_t)(v55 - v44) < 0x10
      || v46 - v45 < 0x10
      || v47 - v45 < 0x10
      || v48 - v45 < 0x10
      || v49 - v45 < 0x10
      || v50 - v45 < 0x10
      || v55 - v45 < 0x10
      || (unint64_t)(v47 - v46) < 0x10
      || (unint64_t)(v48 - v46) < 0x10
      || (unint64_t)(v49 - v46) < 0x10
      || (unint64_t)(v50 - v46) < 0x10
      || (unint64_t)(v55 - v46) < 0x10
      || (unint64_t)(v48 - v47) < 0x10
      || (unint64_t)(v49 - v47) < 0x10
      || (unint64_t)(v50 - v47) < 0x10
      || (unint64_t)(v55 - v47) < 0x10
      || (unint64_t)(v49 - v48) < 0x10
      || (unint64_t)(v50 - v48) < 0x10
      || (unint64_t)(v55 - v48) < 0x10
      || (unint64_t)(v50 - v49) < 0x10
      || (unint64_t)(v55 - v49) < 0x10
      || (unint64_t)(v55 - v50) < 0x10)
    {
LABEL_50:
      v139 = 0;
      v231 = v205 + v20;
      v229 = v189 + v20;
      v227 = HIDWORD(v205) + v20;
      v225 = HIDWORD(v32) + v20;
      v223 = v32 + v20;
      v220 = HIDWORD(v31) + v20;
      v140 = v31 + v20;
      v141 = v206 + v20;
      v142 = 0.0;
      v143 = v186 + v20;
      do
      {
        v144 = v20 + v139;
        v145 = v37;
        v146 = v38;
        v147 = sin((v142 + v142 + 1.0) / 400.0 * 3.14159265);
        v38 = v146;
        v37 = v145;
        *((_QWORD *)&v19 + 1) = *((_QWORD *)&v232 + 1);
        *((_QWORD *)&v18 + 1) = *((_QWORD *)&v234 + 1);
        *((_QWORD *)&v17 + 1) = *((_QWORD *)&v236 + 1);
        *((_QWORD *)&v16 + 1) = *((_QWORD *)&__x + 1);
        *((_QWORD *)&v15 + 1) = *((_QWORD *)&v240 + 1);
        *((_QWORD *)&v14 + 1) = *((_QWORD *)&v242 + 1);
        *((_QWORD *)&v5 + 1) = *((_QWORD *)&v246 + 1);
        v20 = v247;
        v148 = v147 * v244;
        v149 = *(double *)&v246 * v148 * (*(double *)&v246 * v148);
        v150 = v148
             / (v149
              * (*(double *)&v232
               + v149
               * (*(double *)&v234
                + v149
                * (*(double *)&v236
                 + v149 * (*(double *)&__x + v149 * (*(double *)&v240 + v149 * (*(double *)&v242 + v245 * v149))))))
              / 100.0
              + 1.0);
        v151 = *(double *)&v246 * (*(double *)&v246 * (v150 * v150));
        v152 = v144;
        v13 = __src;
        v11[v152] = v151;
        v11[v229 + v139] = *(double *)&v246 * v151;
        v11[v34 + v139] = v151 * v151;
        v11[v35 + v139] = *(double *)&v246 * (v151 * v151);
        v153 = v151 * (v151 * v151);
        v11[v143 + v139] = v153;
        v11[v141 + v139] = *(double *)&v246 * v153;
        v154 = v151 * v153;
        v11[v140 + v139] = v154;
        v155 = *(double *)&v246 * v154;
        v156 = v151 * v154;
        v11[v220 + v139] = v155;
        v11[v223 + v139] = v156;
        v11[v225 + v139] = *(double *)&v246 * v156;
        v157 = v151 * v156;
        v11[v227 + v139] = v157;
        v11[v231 + v139] = *(double *)&v246 * v157;
        v158 = v151 * v157;
        v11[(v145 + v139)] = v158;
        v11[(v146 + v139)] = *(double *)&v246 * v158;
        *(long double *)&__src[v152 * 8] = (v150 / v148 + -1.0) * 100.0;
        v142 = v142 + 1.0;
        ++v139;
      }
      while (v139 != 100);
      v20 = v247 + 100;
      v22 = v203;
      v138 = v202;
      v12 = v201;
      v21 = v209;
    }
    else
    {
      v224 = v22 + v20;
      v110 = 0;
      v219 = (float64x2_t)vdupq_lane_s64(v240, 0);
      v222 = (float64x2_t)vdupq_lane_s64(v242, 0);
      v216 = (float64x2_t)vdupq_lane_s64(__x, 0);
      v235 = (float64x2_t)vdupq_lane_s64(v234, 0);
      v237 = (float64x2_t)vdupq_lane_s64(v236, 0);
      v185 = v20 + 100;
      v233 = (float64x2_t)vdupq_lane_s64(v232, 0);
      v213 = v186 + v20;
      v211 = v206 + v20;
      v111 = (int32x2_t)0x100000000;
      do
      {
        v112 = v33;
        v113 = v20 + v110;
        v114.i64[0] = v111.u32[0];
        v114.i64[1] = v111.u32[1];
        v115 = vcvtq_f64_u64(v114);
        __asm { FMOV            V2.2D, #1.0 }
        v243 = _Q2;
        __xa = vmulq_f64(vdivq_f64(vaddq_f64(vaddq_f64(v115, v115), _Q2), (float64x2_t)vdupq_n_s64(0x4079000000000000uLL)), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL));
        v241 = sin(__xa.f64[1]);
        v121.f64[0] = sin(__xa.f64[0]);
        v20 = v247;
        v121.f64[1] = v241;
        v122 = vmulq_n_f64(v121, v244);
        *((_QWORD *)&v14 + 1) = *((_QWORD *)&v5 + 1);
        v123 = vmulq_n_f64(v122, *(double *)&v5);
        v124 = vmulq_f64(v123, v123);
        v125 = vmulq_f64(v124, vaddq_f64(v233, vmulq_f64(v124, vaddq_f64(v235, vmulq_f64(v124, vaddq_f64(v237, vmulq_f64(v124, vaddq_f64(v216, vmulq_f64(v124, vaddq_f64(v219, vmulq_f64(v124, vaddq_f64(v222, vmulq_n_f64(v124, v245)))))))))))));
        v126 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        v127 = vdivq_f64(v122, vaddq_f64(vdivq_f64(v125, v126), v243));
        v128 = vmulq_n_f64(vmulq_n_f64(vmulq_f64(v127, v127), *(double *)&v5), *(double *)&v5);
        v129 = v113;
        v33 = v112;
        *(float64x2_t *)&v11[v129] = v128;
        *(float64x2_t *)&v11[(v112 + v110)] = vmulq_n_f64(v128, *(double *)&v5);
        v130 = vmulq_f64(v128, v128);
        *(float64x2_t *)&v11[v224 + v110] = v130;
        *(float64x2_t *)&v11[v35 + v110] = vmulq_n_f64(v130, *(double *)&v5);
        v131 = vmulq_f64(v128, v130);
        *(float64x2_t *)&v11[v213 + v110] = v131;
        *(float64x2_t *)&v11[v211 + v110] = vmulq_n_f64(v131, *(double *)&v5);
        v132 = vmulq_f64(v128, v131);
        *(float64x2_t *)&v11[v226 + v110] = v132;
        *(float64x2_t *)&v11[v230 + v110] = vmulq_n_f64(v132, *(double *)&v5);
        v133 = vmulq_f64(v128, v132);
        *(float64x2_t *)&v11[v228 + v110] = v133;
        *(float64x2_t *)&v11[v181 + v110] = vmulq_n_f64(v133, *(double *)&v5);
        v134 = vmulq_f64(v128, v133);
        *(float64x2_t *)&v11[v180 + v110] = v134;
        v135 = vmulq_f64(v128, v134);
        *(float64x2_t *)&v11[v179 + v110] = vmulq_n_f64(v134, *(double *)&v5);
        *(float64x2_t *)&v11[v178 + v110] = v135;
        v136 = vdivq_f64(v127, v122);
        __asm { FMOV            V2.2D, #-1.0 }
        *(float64x2_t *)&v11[v177 + v110] = vmulq_n_f64(v135, *(double *)&v5);
        *(float64x2_t *)&v13[v129 * 8] = vmulq_f64(vaddq_f64(v136, _Q2), v126);
        v110 += 2;
        v111 = vadd_s32(v111, (int32x2_t)0x200000002);
      }
      while (v110 != 100);
      v22 = v203;
      v12 = v201;
      v138 = v202;
      v20 = v185;
    }
    ++v21;
  }
  while (v21 != v138);
  v248 = operator new(11200 * v138, (std::align_val_t)0x20uLL);
  v249 = operator new(0x80uLL, (std::align_val_t)0x20uLL);
  memcpy(v248, v11, 11200 * v138);
  sub_20E8BECF4();
  v159 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BECF4();
  MEMORY[0x212BC6368](v159, 0x1000C8000313F17);
  v160 = (__int128 *)operator new((8 * v22 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v161 = v160;
  if (v22 <= ((8 * v22 + 31) & 0xFFFFFFFE0uLL) >> 3)
  {
    v162 = 8 * v22;
  }
  else
  {
    MEMORY[0x212BC6368](v160, 0x1000C8000313F17);
    v162 = 8 * v22;
    v161 = (__int128 *)operator new(8 * v22, (std::align_val_t)0x20uLL);
  }
  memcpy(v161, __src, v162);
  if (!sub_20E8BEA4C())
  {
    v170 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    sub_20E8BEA4C();
    MEMORY[0x212BC6368](v170, 0x1000C8000313F17);
  }
  sub_20E8BED2C();
  v163 = *v161;
  v164 = v161[1];
  v165 = v161[2];
  v166 = v161[3];
  v167 = v161[4];
  v168 = v161[6];
  v171[5] = v161[5];
  v171[6] = v168;
  v171[3] = v166;
  v171[4] = v167;
  v171[1] = v164;
  v171[2] = v165;
  *v171 = v163;
  MEMORY[0x212BC6368](v161, 0x1000C8000313F17);
  if (v249)
    MEMORY[0x212BC6368](v249, 0x1000C8000313F17);
  if (v248)
    MEMORY[0x212BC6368](v248, 0x1000C8000313F17);
  MEMORY[0x212BC6368](__src, 0x1000C8000313F17);
  return MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
}

void sub_20EB2A804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  MEMORY[0x212BC6368](v70, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v69, 0x1000C8000313F17);
  sub_20EB2A908((_QWORD *)(v71 - 256));
  MEMORY[0x212BC6368](a68, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v68, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB2A908(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[7];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  if (*a1)
    MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20EB2A960(double *a1, int8x16_t a2, double a3, int8x16_t a4, int8x16_t a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;

  if (*(double *)a2.i64 != 0.0)
  {
    v7 = a3 / *(double *)a2.i64;
    v8 = *(double *)a4.i64 / *(double *)a2.i64;
    v9 = (v7 * v7 + v8 * -3.0) / 9.0;
    v10 = (*(double *)a5.i64 / *(double *)a2.i64 * 27.0 + v7 * (v7 * v7 + v7 * v7) - v7 * 9.0 * v8) / 54.0;
    v11 = v10 * v10 - v9 * (v9 * v9);
    if (v11 < 0.0)
    {
      v12 = sqrt(v9);
      v13 = acos(fmax(fmin(v10 / (v9 * v12), 1.0), -1.0));
      v14 = v7 / 3.0;
      v15 = cos(v13 / 3.0);
      v16 = sqrt(fmax(1.0 - v15 * v15, 0.0)) * 1.73205081;
      *a1 = v12 * -2.0 * v15 - v14;
      a1[1] = v12 * (v15 + v16) - v14;
      a1[2] = v12 * (v15 - v16) - v14;
      return 3;
    }
    if (v11 > 0.0)
    {
      *(double *)a4.i64 = -v10;
      a5.i64[0] = 1.0;
      v18.f64[0] = NAN;
      v18.f64[1] = NAN;
      v19 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v18), a5, a4).i64 * cbrt(fabs(v10) + sqrt(v11));
      v20 = v7 / 3.0;
      if (v19 == 0.0)
        v6 = -v20;
      else
        v6 = v19 + v9 / v19 - v20;
      goto LABEL_19;
    }
    v23 = v7 / 3.0;
    v24 = *(_QWORD *)&v10;
    v25 = sqrt(v9);
    if (v24 < 0)
      v25 = -v25;
    v26 = v25 * -2.0 - v23;
    v22 = v25 - v23;
    *a1 = v26;
LABEL_17:
    a1[1] = v22;
    return 2;
  }
  if (a3 == 0.0)
  {
    if (*(double *)a4.i64 != 0.0)
    {
      v6 = -*(double *)a5.i64 / *(double *)a4.i64;
LABEL_19:
      *a1 = v6;
      return 1;
    }
    return 0;
  }
  *(double *)a2.i64 = *(double *)a4.i64 * *(double *)a4.i64 + a3 * -4.0 * *(double *)a5.i64;
  if (*(double *)a2.i64 < 0.0)
    return 0;
  *(double *)a2.i64 = sqrt(*(double *)a2.i64);
  v21.f64[0] = NAN;
  v21.f64[1] = NAN;
  *(double *)a2.i64 = (*(double *)vbslq_s8((int8x16_t)vnegq_f64(v21), a2, a4).i64 + *(double *)a4.i64) * -0.5;
  *a1 = *(double *)a2.i64 / a3;
  if (*(double *)a2.i64 != 0.0)
  {
    v22 = *(double *)a5.i64 / *(double *)a2.i64;
    goto LABEL_17;
  }
  return 1;
}

__n128 sub_20EB2ABD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double **v4;
  double *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v3 == a1)
  {
    sub_20EB2ABD8(&v12, a2);
    v10 = v17;
    *(_OWORD *)(a1 + 64) = v16;
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 96) = v18;
    v11 = v13;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v11;
    result = v15;
    *(_OWORD *)(a1 + 32) = v14;
    *(__n128 *)(a1 + 48) = result;
  }
  else if (16 * *(_DWORD *)(v3 + 16) == 2 * *(_DWORD *)(v3 + 16)
         || (v4 = *(double ***)(a2 + 16), v5 = *v4, v6 = *(unsigned int *)(*(_QWORD *)*v4 + 4), !(_DWORD)v6))
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v12 + 1) = v7 >> 3;
    v8 = operator new(v7, (std::align_val_t)0x20uLL);
    *(_QWORD *)&v12 = v8;
    LODWORD(v13) = v6;
    sub_20EB2AD44((uint64_t *)&v12, v5, v4[1]);
    sub_20E8BE6CC();
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  return result;
}

void sub_20EB2AD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20EB2AD44(uint64_t *a1, double *a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  __n128 v11;
  __n128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = **(_DWORD **)a2;
  if (v6 >= *(_DWORD *)(*(_QWORD *)a2 + 4))
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  v24 = v6;
  v7 = *a3;
  v8 = *(unsigned int *)(*(_QWORD *)*a3 + 20);
  v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
  v25[1] = v9 >> 3;
  v25[0] = operator new(v9, (std::align_val_t)0x20uLL);
  v26 = v8;
  v10 = a3[1];
  v29 = v7;
  v30 = v10;
  v31 = 0x3FF0000000000000;
  sub_20EB2AEFC((uint64_t)v25, (uint64_t)v28);
  v27 = 0;
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (**(_DWORD **)a2 < v13)
    v13 = **(_DWORD **)a2;
  v14 = v25[0];
  if (v24)
  {
    v15 = 0;
    v16 = 0;
    v17 = *a1;
    v18 = **(_QWORD **)(*(_QWORD *)a2 + 8);
    v11.n128_u64[0] = 1.0;
    v12.n128_u64[0] = 0;
    do
    {
      v19 = *(double *)(v18 + 8 * (v15 % v13));
      v20 = fabs(v19);
      v21 = 1.0 / v19;
      if (v20 < a2[1])
        v21 = 0.0;
      *(double *)(v17 + 8 * v15) = *(double *)(v14 + 8 * v16) * v21;
      v16 = (v16 + 1);
      ++v15;
    }
    while (v24 != (_DWORD)v15);
  }
  else if (!v25[0])
  {
    goto LABEL_13;
  }
  MEMORY[0x212BC6368](v11, v12);
LABEL_13:
  v22 = *(unsigned int *)(*(_QWORD *)*a3 + 20);
  v23 = *((_DWORD *)a1 + 4);
  if (v23 > v22)
    bzero((void *)(*a1 + 8 * v22), 8 * (v23 - v22));
}

void sub_20EB2AED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20EB2AEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  int v14;

  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == *(_QWORD *)a1))
  {
    v6 = *(unsigned int *)(v4 + 20);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    v12 = operator new(v7, (std::align_val_t)0x20uLL);
    v14 = v6;
    sub_20EB2AEFC(&v12, a2);
    v8 = *(void **)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    v12 = v8;
    v13 = v9;
    *(_DWORD *)(a1 + 16) = v14;
    v14 = 0;
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20) && *(_DWORD *)(v5 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      bzero(*(void **)a1, 8 * v11);
  }
}

void sub_20EB2B028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double sub_20EB2B050(_OWORD *a1, uint64_t a2)
{
  uint64_t v3;
  double **v4;
  double *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = **(_QWORD **)(a2 + 8);
  if (*(_OWORD **)v3 == a1)
  {
    sub_20EB2B050(&v17, a2);
    v10 = v28;
    a1[10] = v27;
    a1[11] = v10;
    v11 = v30;
    a1[12] = v29;
    a1[13] = v11;
    v12 = v24;
    a1[6] = v23;
    a1[7] = v12;
    v13 = v26;
    a1[8] = v25;
    a1[9] = v13;
    v14 = v20;
    a1[2] = v19;
    a1[3] = v14;
    v15 = v22;
    a1[4] = v21;
    a1[5] = v15;
    result = *(double *)&v17;
    v16 = v18;
    *a1 = v17;
    a1[1] = v16;
  }
  else if (32 * *(_DWORD *)(v3 + 16) == 4 * *(_DWORD *)(v3 + 16)
         || (v4 = *(double ***)(a2 + 16), v5 = *v4, v6 = *(unsigned int *)(*(_QWORD *)*v4 + 4), !(_DWORD)v6))
  {
    result = 0.0;
    a1[12] = 0u;
    a1[13] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else
  {
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v17 + 1) = v7 >> 3;
    v8 = operator new(v7, (std::align_val_t)0x20uLL);
    *(_QWORD *)&v17 = v8;
    LODWORD(v18) = v6;
    sub_20EB2AD44((uint64_t *)&v17, v5, v4[1]);
    sub_20E8BE6CC();
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  return result;
}

void sub_20EB2B1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20EB2B1E0(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = a1[v5];
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a1[v5];
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = a1[v5];
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = (__int128 *)(v4 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = a1 + 9;
  v28 = a1 + 18;
  do
  {
    while (1)
    {
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v39 = (uint64_t)(v38 + 8);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v43;
        v38 -= 8;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 -= v46;
    v47 = &v37[8 * v33 - 16];
    v48 = (__int128 *)(v4 - 16);
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v38;
    a2[1] = (char *)v39;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = (char *)v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = a2[2];
  if (v4 < v51)
  {
    *(_QWORD *)v4 = a1[21];
    v52 = v4 + 8;
    goto LABEL_86;
  }
  v53 = *a2;
  v54 = v4 - *a2;
  v55 = v54 >> 3;
  v56 = (v54 >> 3) + 1;
  if (v56 >> 61)
    goto LABEL_160;
  v57 = v51 - v53;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_75;
    }
LABEL_161:
    sub_20E877A38();
  }
  v59 = 0;
LABEL_75:
  v60 = &v59[8 * v55];
  v51 = &v59[8 * v58];
  *(_QWORD *)v60 = a1[21];
  v52 = v60 + 8;
  if (v4 != v53)
  {
    v61 = v4 - v53 - 8;
    if (v61 < 0x58)
    {
      v62 = v4;
      goto LABEL_83;
    }
    if ((unint64_t)(v4 - v59 - v54) < 0x20)
    {
      v62 = v4;
      goto LABEL_83;
    }
    v63 = (v61 >> 3) + 1;
    v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v4[-v64];
    v60 -= v64;
    v65 = &v59[8 * v55 - 16];
    v66 = (__int128 *)(v4 - 16);
    v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *v66;
      *(v65 - 1) = *(v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 2;
      v67 -= 4;
    }
    while (v67);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v69 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v60 - 1) = v69;
        v60 -= 8;
      }
      while (v62 != v53);
    }
  }
  *a2 = v60;
  a2[1] = v52;
  a2[2] = v51;
  if (v53)
  {
    operator delete(v53);
    v51 = a2[2];
  }
LABEL_86:
  a2[1] = v52;
  if (v52 < v51)
  {
    *(_QWORD *)v52 = a1[22];
    v70 = v52 + 8;
    goto LABEL_109;
  }
  v71 = *a2;
  v72 = v52 - *a2;
  v73 = v72 >> 3;
  v74 = (v72 >> 3) + 1;
  if (v74 >> 61)
    goto LABEL_160;
  v75 = v51 - v71;
  if (v75 >> 2 > v74)
    v74 = v75 >> 2;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v74;
  if (v76)
  {
    if (v76 >> 61)
      goto LABEL_161;
    v77 = operator new(8 * v76);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[8 * v73];
  v51 = &v77[8 * v76];
  *(_QWORD *)v78 = a1[22];
  v70 = v78 + 8;
  if (v52 != v71)
  {
    v79 = v52 - v71 - 8;
    if (v79 < 0x58)
    {
      v80 = v52;
      goto LABEL_106;
    }
    if ((unint64_t)(v52 - &v77[v72]) < 0x20)
    {
      v80 = v52;
      goto LABEL_106;
    }
    v81 = (v79 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v80 = &v52[-v82];
    v78 -= v82;
    v83 = &v77[8 * v73 - 16];
    v84 = v52 - 16;
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *(_OWORD *)v84;
      *(v83 - 1) = *((_OWORD *)v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 32;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v87 = *((_QWORD *)v80 - 1);
        v80 -= 8;
        *((_QWORD *)v78 - 1) = v87;
        v78 -= 8;
      }
      while (v80 != v71);
    }
  }
  *a2 = v78;
  a2[1] = v70;
  a2[2] = v51;
  if (v71)
  {
    operator delete(v71);
    v51 = a2[2];
  }
LABEL_109:
  a2[1] = v70;
  if (v70 < v51)
  {
    *(_QWORD *)v70 = a1[23];
    v88 = v70 + 8;
    goto LABEL_132;
  }
  v89 = *a2;
  v90 = v70 - *a2;
  v91 = v90 >> 3;
  v92 = (v90 >> 3) + 1;
  if (v92 >> 61)
    goto LABEL_160;
  v93 = v51 - v89;
  if (v93 >> 2 > v92)
    v92 = v93 >> 2;
  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
    v94 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v94 = v92;
  if (v94)
  {
    if (v94 >> 61)
      goto LABEL_161;
    v95 = operator new(8 * v94);
  }
  else
  {
    v95 = 0;
  }
  v96 = &v95[8 * v91];
  v51 = &v95[8 * v94];
  *(_QWORD *)v96 = a1[23];
  v88 = v96 + 8;
  if (v70 != v89)
  {
    v97 = v70 - v89 - 8;
    if (v97 < 0x58)
    {
      v98 = v70;
      goto LABEL_129;
    }
    if ((unint64_t)(v70 - &v95[v90]) < 0x20)
    {
      v98 = v70;
      goto LABEL_129;
    }
    v99 = (v97 >> 3) + 1;
    v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v70[-v100];
    v96 -= v100;
    v101 = &v95[8 * v91 - 16];
    v102 = v70 - 16;
    v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 4;
    }
    while (v103);
    if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v105 = *((_QWORD *)v98 - 1);
        v98 -= 8;
        *((_QWORD *)v96 - 1) = v105;
        v96 -= 8;
      }
      while (v98 != v89);
    }
  }
  *a2 = v96;
  a2[1] = v88;
  a2[2] = v51;
  if (v89)
  {
    operator delete(v89);
    v51 = a2[2];
  }
LABEL_132:
  a2[1] = v88;
  if (v88 < v51)
  {
    *(_QWORD *)v88 = a1[24];
    v106 = v88 + 8;
    goto LABEL_155;
  }
  v107 = *a2;
  v108 = v88 - *a2;
  v109 = v108 >> 3;
  v110 = (v108 >> 3) + 1;
  if (v110 >> 61)
LABEL_160:
    sub_20E867F44();
  v111 = v51 - v107;
  if (v111 >> 2 > v110)
    v110 = v111 >> 2;
  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
    v112 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v112 = v110;
  if (v112)
  {
    if (v112 >> 61)
      goto LABEL_161;
    v113 = operator new(8 * v112);
  }
  else
  {
    v113 = 0;
  }
  v114 = &v113[8 * v109];
  *(_QWORD *)v114 = a1[24];
  v106 = v114 + 8;
  if (v88 != v107)
  {
    v115 = v88 - v107 - 8;
    if (v115 < 0x58)
    {
      v116 = v88;
      goto LABEL_152;
    }
    if ((unint64_t)(v88 - &v113[v108]) < 0x20)
    {
      v116 = v88;
      goto LABEL_152;
    }
    v117 = (v115 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v88[-v118];
    v114 -= v118;
    v119 = &v113[8 * v109 - 16];
    v120 = v88 - 16;
    v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122 = *(_OWORD *)v120;
      *(v119 - 1) = *((_OWORD *)v120 - 1);
      *v119 = v122;
      v119 -= 2;
      v120 -= 32;
      v121 -= 4;
    }
    while (v121);
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v123 = *((_QWORD *)v116 - 1);
        v116 -= 8;
        *((_QWORD *)v114 - 1) = v123;
        v114 -= 8;
      }
      while (v116 != v107);
    }
  }
  *a2 = v114;
  a2[1] = v106;
  a2[2] = &v113[8 * v112];
  if (v107)
    operator delete(v107);
LABEL_155:
  a2[1] = v106;
}

void sub_20EB2BA48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB2BA78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v5;
  int64x2_t result;

  v3 = *a2;
  if (a2[1] - *a2 != 176)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 177, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *a2;
  }
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(v3 + 136);
  v5 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a1 + 168) = v5;
  *(_BYTE *)(a1 + 468) = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 160) = 0;
  return result;
}

void sub_20EB2BB94(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B270);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B270))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.geometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B268);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B270);
  }
  *a1 = qword_254A5B268;
}

void sub_20EB2BC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B270);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B270);
  _Unwind_Resume(a1);
}

double sub_20EB2BC88(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _BYTE v22[301];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), sizeof(v22));
  v27 = 3;
  v28 = 0x7FF8000000000000;
  v29 = 0xFFEFFFFFFFFFFFFFLL;
  v30 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v27 != -1)
  {
    if (v27 > 7)
    {
      if (v27 > 0xB)
      {
        if (v27 < 0xF)
          return v5;
        v6 = v26;
        if (!v26)
          return v5;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v27 > 9)
      {
        if (v27 == 10)
          return v5;
        v6 = v25;
        if (!v25)
          return v5;
        v11 = (unint64_t *)&v25->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v27 != 9)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        v9 = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v27 != 7)
        return v5;
      v6 = v23;
      if (!v23)
        return v5;
      v7 = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2BE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20EB2BE70(uint64_t a1, double a2)
{
  int64x2_t *v4;
  double v5;
  double v6;
  double v7;
  unsigned int v9;
  char v10;
  double v11;
  double v12;
  double v14;
  double v20;
  float64x2_t v24;
  double v25;
  double v26;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  int v44;
  float64x2_t v46;
  double v47;
  double v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  BOOL v57;
  float64x2_t v58;
  double v59;
  double v61;
  double v62;
  double v66;
  float64x2_t v67;
  float64x2_t v71;
  float64x2_t v72;
  _BYTE v73[24];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if ((a2 <= 0.0 || a2 >= 1.57079633)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 55, (uint64_t)"0 < ang_step && ang_step < M_PI_2", 33, (uint64_t)"ang_step must be between 0 and M_PI_2.", 38, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (int64x2_t *)(a1 + 168);
  v5 = 0.0;
  v6 = -1.0;
  while (1)
  {
    v7 = v5;
    *(_QWORD *)v73 = tan(v5);
    *(_OWORD *)&v73[8] = xmmword_2102DD520;
    v9 = *(_DWORD *)(a1 + 992);
    if (v9 == -1)
      break;
    if (v9 <= 7)
      goto LABEL_7;
LABEL_14:
    if (v9 <= 0xB)
    {
      if (v9 > 9)
      {
        if (v9 == 10)
          v10 = sub_20EB24288(&v72, (uint64_t)v73, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v10 = sub_20EB3A2E4(a1, &v72, (float64x2_t *)v73);
      }
      else
      {
        if (v9 != 9)
        {
          v26 = *(double *)&v73[16];
          _Q0 = *(float64x2_t *)v73;
          _D1 = *(_QWORD *)&v73[8];
          __asm { FMLA            D6, D1, V0.D[1] }
          v30 = sqrt(_D6);
          v39 = fabs(*(double *)&v73[16]);
          v40 = fabs(v30);
          v41 = v39 / v40;
          if (v39 >= v40)
            v41 = v40 / v39;
          if (v41 <= 0.414213562)
          {
            v43 = 1;
            v44 = 2;
            v42 = v41;
            if (_D6 < 0.00000001)
              goto LABEL_80;
          }
          else
          {
            v42 = (v40 - v39) / (v39 + v40);
            if (v39 >= v40)
              v42 = -v42;
            v43 = -1;
            v44 = 1;
            if (_D6 < 0.00000001)
            {
LABEL_80:
              v72 = vmulq_n_f64(_Q0, 1.0 / v26);
              goto LABEL_108;
            }
          }
          if (v39 < v40)
            v43 = -v43;
          else
            v44 = v41 > 0.414213562;
          v57 = v30 == INFINITY && v39 == INFINITY;
          v58 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v42 * v42), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v42 * v42), (float64x2_t)xmmword_210315370), v42 * v42 * (v42 * v42))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v42 * v42), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v42 * v42), (float64x2_t)xmmword_210315380), v42 * v42 * (v42 * v42))), v42 * v42 * (v42 * v42) * (v42 * v42 * (v42 * v42))));
          v59 = v42 + v42 * vdivq_f64(v58, (float64x2_t)vdupq_laneq_s64((int64x2_t)v58, 1)).f64[0];
          if (v57)
            v59 = 0.785398163;
          if (v30 == 0.0 && *(double *)&v73[16] == 0.0)
            v61 = 0.0;
          else
            v61 = v59;
          if (*(uint64_t *)&v73[16] < 0)
          {
            v44 = 4 - v44;
            v43 = -v43;
          }
          if (v30 < 0.0)
          {
            v44 = -v44;
            v43 = -v43;
          }
          v62 = (double)v44 * 3.061617e-17 + (double)v44 * 0.785398163 + v61 * (double)v43;
          v52 = v62
              * (v62
               * v62
               * (*(double *)(a1 + 168)
                + v62
                * v62
                * (*(double *)(a1 + 176)
                 + v62
                 * v62
                 * (*(double *)(a1 + 184)
                  + v62
                  * v62
                  * (*(double *)(a1 + 192)
                   + v62
                   * v62
                   * (*(double *)(a1 + 200) + v62 * v62 * (*(double *)(a1 + 208) + v62 * v62 * *(double *)(a1 + 216)))))))
               + 1.0);
          goto LABEL_100;
        }
        v10 = sub_20EB3641C(a1, &v72, (float64x2_t *)v73);
      }
      goto LABEL_54;
    }
    if (v9 > 0xD)
    {
      if (v9 == 14)
        v10 = sub_20EB247C0(&v72, (uint64_t)v73, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      else
        v10 = sub_20EB3E39C(a1, &v72, (float64x2_t *)v73);
LABEL_54:
      if ((v10 & 1) == 0)
        goto LABEL_112;
      goto LABEL_108;
    }
    if (v9 != 13 || *(double *)&v73[16] < 0.00000001)
      goto LABEL_112;
    _Q0 = vdivq_f64(*(float64x2_t *)v73, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73[16], 0));
    v14 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    _D3 = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v20 = v14 * (_D2 * v14);
    v72 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v20* (*(double *)(a1 + 168)+ v14 * *(double *)(a1 + 224)+ v20* (*(double *)(a1 + 176)+ v14 * *(double *)(a1 + 232)+ v20* (*(double *)(a1 + 184)+ v14 * *(double *)(a1 + 240)+ v20* (*(double *)(a1 + 192)+ v14 * *(double *)(a1 + 248)+ v20* (*(double *)(a1 + 200)+ v14 * *(double *)(a1 + 256)+ v20
                                * (*(double *)(a1 + 208)
                                 + v14 * *(double *)(a1 + 264)
                                 + v20 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v14 + v20 * 0.0)))))))
                           / 100.0
                           + 1.0),
                           0));
LABEL_108:
    _Q0 = v72;
    _Q2 = vmulq_f64(_Q0, _Q0);
    _D1 = v72.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    if (_Q2.f64[0] <= v6)
      goto LABEL_112;
    v5 = v7 + a2;
    v6 = _Q2.f64[0];
    if (v7 + a2 >= 1.57079633)
    {
      v71 = _Q2;
      if (_Q2.f64[0] > 0.0)
        return (__n128)v71;
      goto LABEL_113;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *(_DWORD *)(a1 + 992);
  if (v9 > 7)
    goto LABEL_14;
LABEL_7:
  if (v9 > 3)
  {
    if (v9 > 5)
    {
      if (v9 == 6)
      {
        v24 = vaddq_f64(vdivq_f64(*(float64x2_t *)v73, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73[16], 0)), *(float64x2_t *)(a1 + 192));
        v25 = sqrt(vaddvq_f64(vmulq_f64(v24, v24)));
        v72 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v24, v25 * (v25 * (*(double *)(a1 + 168) + v25 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v25)))+ 1.0));
        goto LABEL_108;
      }
      v10 = sub_20EB31FFC(a1, &v72, (float64x2_t *)v73);
      goto LABEL_54;
    }
    if (v9 != 5)
      goto LABEL_37;
    v11 = *(double *)v73 * *(double *)v73 + *(double *)&v73[8] * *(double *)&v73[8];
    if (v11 >= 0.00000001)
    {
      v53 = sqrt(v11);
      if (v53 <= *(double *)&v73[16])
      {
        v66 = v53 / *(double *)&v73[16] * 0.785398163
            - v53
            / *(double *)&v73[16]
            * (v53 / *(double *)&v73[16] + -1.0)
            * (v53 / *(double *)&v73[16] * 0.0663008339 + 0.244711287);
      }
      else
      {
        if (v53 <= -*(double *)&v73[16])
        {
          v55 = v53 / *(double *)&v73[16] * 0.785398163
              - v53
              / *(double *)&v73[16]
              * (-1.0 - v53 / *(double *)&v73[16])
              * (v53 / *(double *)&v73[16] * -0.0663008339 + 0.244711287);
          v56 = 3.14159265;
        }
        else
        {
          v54 = fabs(*(double *)&v73[16] / v53);
          v55 = *(double *)&v73[16] / v53 * (v54 + -1.0) * (v54 * 0.0663008339 + 0.244711287)
              + *(double *)&v73[16] / v53 * -0.785398163;
          v56 = 1.57079633;
        }
        v66 = v55 + v56;
      }
      v67 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v4, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v4, *(int64x2_t *)(a1 + 184)), v66 * v66)), v66 * v66);
      v12 = (v66 + v66 * (v67.f64[0] + vmuld_lane_f64(v66 * v66 * (v66 * v66), v67, 1))) / v53;
    }
    else
    {
      if (*(double *)&v73[16] == 0.0)
        goto LABEL_112;
      v12 = 1.0 / *(double *)&v73[16];
    }
    v72.f64[0] = *(double *)v73 * v12;
    v72.f64[1] = *(double *)&v73[8] * v12;
    goto LABEL_108;
  }
  if (v9 > 1)
  {
    if (v9 != 2)
    {
LABEL_37:
      v26 = *(double *)&v73[16];
      _Q0 = *(float64x2_t *)v73;
      _D1 = *(_QWORD *)&v73[8];
      __asm { FMLA            D6, D1, V0.D[1] }
      v30 = sqrt(_D6);
      v31 = fabs(*(double *)&v73[16]);
      v32 = fabs(v30);
      v33 = v31 / v32;
      if (v31 >= v32)
        v33 = v32 / v31;
      if (v33 <= 0.414213562)
      {
        v35 = 1;
        v36 = 2;
        v34 = v33;
        if (_D6 < 0.00000001)
          goto LABEL_80;
      }
      else
      {
        v34 = (v32 - v31) / (v31 + v32);
        if (v31 >= v32)
          v34 = -v34;
        v35 = -1;
        v36 = 1;
        if (_D6 < 0.00000001)
          goto LABEL_80;
      }
      if (v31 < v32)
        v35 = -v35;
      else
        v36 = v33 > 0.414213562;
      _ZF = v30 == INFINITY && v31 == INFINITY;
      v46 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v34 * v34), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v34 * v34), (float64x2_t)xmmword_210315370), v34 * v34 * (v34 * v34))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v34 * v34), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v34 * v34), (float64x2_t)xmmword_210315380), v34 * v34 * (v34 * v34))), v34 * v34 * (v34 * v34) * (v34 * v34 * (v34 * v34))));
      v47 = v34 + v34 * vdivq_f64(v46, (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1)).f64[0];
      if (_ZF)
        v47 = 0.785398163;
      if (v30 == 0.0 && *(double *)&v73[16] == 0.0)
        v49 = 0.0;
      else
        v49 = v47;
      if (*(uint64_t *)&v73[16] < 0)
      {
        v36 = 4 - v36;
        v35 = -v35;
      }
      if (v30 < 0.0)
      {
        v36 = -v36;
        v35 = -v35;
      }
      v50 = (double)v36 * 3.061617e-17 + (double)v36 * 0.785398163 + v49 * (double)v35;
      v51 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v4, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v4, *(int64x2_t *)(a1 + 184)), v50 * v50)), v50 * v50);
      v52 = v50 + v50 * (v51.f64[0] + vmuld_lane_f64(v50 * v50 * (v50 * v50), v51, 1));
LABEL_100:
      v72 = vmulq_n_f64(_Q0, 1.0 / v30 * v52);
      goto LABEL_108;
    }
    if (*(_DWORD *)(a1 + 212))
    {
      if (*(double *)&v73[16] < 0.00000001)
        goto LABEL_112;
      _Q2 = vmulq_n_f64(*(float64x2_t *)v73, 1.0 / *(double *)&v73[16]);
      _D0 = vmuld_lane_f64(1.0 / *(double *)&v73[16], *(float64x2_t *)v73, 1);
      __asm { FMLA            D1, D0, V2.D[1] }
      v72 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
    }
    else
    {
      if (*(double *)&v73[16] < 0.00000001)
        goto LABEL_112;
      _Q2 = vmulq_n_f64(*(float64x2_t *)v73, 1.0 / *(double *)&v73[16]);
      _D0 = vmuld_lane_f64(1.0 / *(double *)&v73[16], *(float64x2_t *)v73, 1);
      __asm { FMLA            D1, D0, V2.D[1] }
      v72 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
    }
    goto LABEL_108;
  }
  if (!v9)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_210254955, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (*(double *)&v73[16] >= 0.00000001)
  {
    v72 = vmulq_n_f64(*(float64x2_t *)v73, 1.0 / *(double *)&v73[16]);
    goto LABEL_108;
  }
LABEL_112:
  _Q2.f64[0] = v6;
  v71 = _Q2;
  if (v6 > 0.0)
    return (__n128)v71;
LABEL_113:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 73, (uint64_t)"maxVal > 0", 10, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return (__n128)v71;
}

void sub_20EB2C934(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = a1[v5];
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a1[v5];
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = a1[v5];
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = (__int128 *)(v4 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = a1 + 9;
  v28 = a1 + 18;
  do
  {
    while (1)
    {
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v39 = (uint64_t)(v38 + 8);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v43;
        v38 -= 8;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 -= v46;
    v47 = &v37[8 * v33 - 16];
    v48 = (__int128 *)(v4 - 16);
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v38;
    a2[1] = (char *)v39;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = (char *)v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = a2[2];
  if (v4 < v51)
  {
    *(_QWORD *)v4 = a1[21];
    v52 = v4 + 8;
    goto LABEL_86;
  }
  v53 = *a2;
  v54 = v4 - *a2;
  v55 = v54 >> 3;
  v56 = (v54 >> 3) + 1;
  if (v56 >> 61)
    goto LABEL_160;
  v57 = v51 - v53;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_75;
    }
LABEL_161:
    sub_20E877A38();
  }
  v59 = 0;
LABEL_75:
  v60 = &v59[8 * v55];
  v51 = &v59[8 * v58];
  *(_QWORD *)v60 = a1[21];
  v52 = v60 + 8;
  if (v4 != v53)
  {
    v61 = v4 - v53 - 8;
    if (v61 < 0x58)
    {
      v62 = v4;
      goto LABEL_83;
    }
    if ((unint64_t)(v4 - v59 - v54) < 0x20)
    {
      v62 = v4;
      goto LABEL_83;
    }
    v63 = (v61 >> 3) + 1;
    v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v4[-v64];
    v60 -= v64;
    v65 = &v59[8 * v55 - 16];
    v66 = (__int128 *)(v4 - 16);
    v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *v66;
      *(v65 - 1) = *(v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 2;
      v67 -= 4;
    }
    while (v67);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v69 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v60 - 1) = v69;
        v60 -= 8;
      }
      while (v62 != v53);
    }
  }
  *a2 = v60;
  a2[1] = v52;
  a2[2] = v51;
  if (v53)
  {
    operator delete(v53);
    v51 = a2[2];
  }
LABEL_86:
  a2[1] = v52;
  if (v52 < v51)
  {
    *(_QWORD *)v52 = a1[22];
    v70 = v52 + 8;
    goto LABEL_109;
  }
  v71 = *a2;
  v72 = v52 - *a2;
  v73 = v72 >> 3;
  v74 = (v72 >> 3) + 1;
  if (v74 >> 61)
    goto LABEL_160;
  v75 = v51 - v71;
  if (v75 >> 2 > v74)
    v74 = v75 >> 2;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v74;
  if (v76)
  {
    if (v76 >> 61)
      goto LABEL_161;
    v77 = operator new(8 * v76);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[8 * v73];
  v51 = &v77[8 * v76];
  *(_QWORD *)v78 = a1[22];
  v70 = v78 + 8;
  if (v52 != v71)
  {
    v79 = v52 - v71 - 8;
    if (v79 < 0x58)
    {
      v80 = v52;
      goto LABEL_106;
    }
    if ((unint64_t)(v52 - &v77[v72]) < 0x20)
    {
      v80 = v52;
      goto LABEL_106;
    }
    v81 = (v79 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v80 = &v52[-v82];
    v78 -= v82;
    v83 = &v77[8 * v73 - 16];
    v84 = v52 - 16;
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *(_OWORD *)v84;
      *(v83 - 1) = *((_OWORD *)v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 32;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v87 = *((_QWORD *)v80 - 1);
        v80 -= 8;
        *((_QWORD *)v78 - 1) = v87;
        v78 -= 8;
      }
      while (v80 != v71);
    }
  }
  *a2 = v78;
  a2[1] = v70;
  a2[2] = v51;
  if (v71)
  {
    operator delete(v71);
    v51 = a2[2];
  }
LABEL_109:
  a2[1] = v70;
  if (v70 < v51)
  {
    *(_QWORD *)v70 = a1[23];
    v88 = v70 + 8;
    goto LABEL_132;
  }
  v89 = *a2;
  v90 = v70 - *a2;
  v91 = v90 >> 3;
  v92 = (v90 >> 3) + 1;
  if (v92 >> 61)
    goto LABEL_160;
  v93 = v51 - v89;
  if (v93 >> 2 > v92)
    v92 = v93 >> 2;
  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
    v94 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v94 = v92;
  if (v94)
  {
    if (v94 >> 61)
      goto LABEL_161;
    v95 = operator new(8 * v94);
  }
  else
  {
    v95 = 0;
  }
  v96 = &v95[8 * v91];
  v51 = &v95[8 * v94];
  *(_QWORD *)v96 = a1[23];
  v88 = v96 + 8;
  if (v70 != v89)
  {
    v97 = v70 - v89 - 8;
    if (v97 < 0x58)
    {
      v98 = v70;
      goto LABEL_129;
    }
    if ((unint64_t)(v70 - &v95[v90]) < 0x20)
    {
      v98 = v70;
      goto LABEL_129;
    }
    v99 = (v97 >> 3) + 1;
    v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v70[-v100];
    v96 -= v100;
    v101 = &v95[8 * v91 - 16];
    v102 = v70 - 16;
    v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 4;
    }
    while (v103);
    if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v105 = *((_QWORD *)v98 - 1);
        v98 -= 8;
        *((_QWORD *)v96 - 1) = v105;
        v96 -= 8;
      }
      while (v98 != v89);
    }
  }
  *a2 = v96;
  a2[1] = v88;
  a2[2] = v51;
  if (v89)
  {
    operator delete(v89);
    v51 = a2[2];
  }
LABEL_132:
  a2[1] = v88;
  if (v88 < v51)
  {
    *(_QWORD *)v88 = a1[24];
    v106 = v88 + 8;
    goto LABEL_155;
  }
  v107 = *a2;
  v108 = v88 - *a2;
  v109 = v108 >> 3;
  v110 = (v108 >> 3) + 1;
  if (v110 >> 61)
LABEL_160:
    sub_20E867F44();
  v111 = v51 - v107;
  if (v111 >> 2 > v110)
    v110 = v111 >> 2;
  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
    v112 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v112 = v110;
  if (v112)
  {
    if (v112 >> 61)
      goto LABEL_161;
    v113 = operator new(8 * v112);
  }
  else
  {
    v113 = 0;
  }
  v114 = &v113[8 * v109];
  *(_QWORD *)v114 = a1[24];
  v106 = v114 + 8;
  if (v88 != v107)
  {
    v115 = v88 - v107 - 8;
    if (v115 < 0x58)
    {
      v116 = v88;
      goto LABEL_152;
    }
    if ((unint64_t)(v88 - &v113[v108]) < 0x20)
    {
      v116 = v88;
      goto LABEL_152;
    }
    v117 = (v115 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v88[-v118];
    v114 -= v118;
    v119 = &v113[8 * v109 - 16];
    v120 = v88 - 16;
    v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122 = *(_OWORD *)v120;
      *(v119 - 1) = *((_OWORD *)v120 - 1);
      *v119 = v122;
      v119 -= 2;
      v120 -= 32;
      v121 -= 4;
    }
    while (v121);
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v123 = *((_QWORD *)v116 - 1);
        v116 -= 8;
        *((_QWORD *)v114 - 1) = v123;
        v114 -= 8;
      }
      while (v116 != v107);
    }
  }
  *a2 = v114;
  a2[1] = v106;
  a2[2] = &v113[8 * v112];
  if (v107)
    operator delete(v107);
LABEL_155:
  a2[1] = v106;
}

void sub_20EB2D19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB2D1CC(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _BYTE v22[301];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), sizeof(v22));
  v27 = 4;
  v28 = 0x7FF8000000000000;
  v29 = 0xFFEFFFFFFFFFFFFFLL;
  v30 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v27 != -1)
  {
    if (v27 > 7)
    {
      if (v27 > 0xB)
      {
        if (v27 < 0xF)
          return v5;
        v6 = v26;
        if (!v26)
          return v5;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v27 > 9)
      {
        if (v27 == 10)
          return v5;
        v6 = v25;
        if (!v25)
          return v5;
        v11 = (unint64_t *)&v25->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v27 != 9)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        v9 = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v27 != 7)
        return v5;
      v6 = v23;
      if (!v23)
        return v5;
      v7 = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB2D3B4(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = a1[v5];
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a1[v5];
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = a1[v5];
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = (__int128 *)(v4 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = a1 + 9;
  v28 = a1 + 18;
  do
  {
    while (1)
    {
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v39 = (uint64_t)(v38 + 8);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v43;
        v38 -= 8;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 -= v46;
    v47 = &v37[8 * v33 - 16];
    v48 = (__int128 *)(v4 - 16);
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v38;
    a2[1] = (char *)v39;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = (char *)v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = a2[2];
  if (v4 < v51)
  {
    *(_QWORD *)v4 = a1[21];
    v52 = v4 + 8;
    goto LABEL_86;
  }
  v53 = *a2;
  v54 = v4 - *a2;
  v55 = v54 >> 3;
  v56 = (v54 >> 3) + 1;
  if (v56 >> 61)
    goto LABEL_160;
  v57 = v51 - v53;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_75;
    }
LABEL_161:
    sub_20E877A38();
  }
  v59 = 0;
LABEL_75:
  v60 = &v59[8 * v55];
  v51 = &v59[8 * v58];
  *(_QWORD *)v60 = a1[21];
  v52 = v60 + 8;
  if (v4 != v53)
  {
    v61 = v4 - v53 - 8;
    if (v61 < 0x58)
    {
      v62 = v4;
      goto LABEL_83;
    }
    if ((unint64_t)(v4 - v59 - v54) < 0x20)
    {
      v62 = v4;
      goto LABEL_83;
    }
    v63 = (v61 >> 3) + 1;
    v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v4[-v64];
    v60 -= v64;
    v65 = &v59[8 * v55 - 16];
    v66 = (__int128 *)(v4 - 16);
    v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *v66;
      *(v65 - 1) = *(v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 2;
      v67 -= 4;
    }
    while (v67);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v69 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v60 - 1) = v69;
        v60 -= 8;
      }
      while (v62 != v53);
    }
  }
  *a2 = v60;
  a2[1] = v52;
  a2[2] = v51;
  if (v53)
  {
    operator delete(v53);
    v51 = a2[2];
  }
LABEL_86:
  a2[1] = v52;
  if (v52 < v51)
  {
    *(_QWORD *)v52 = a1[22];
    v70 = v52 + 8;
    goto LABEL_109;
  }
  v71 = *a2;
  v72 = v52 - *a2;
  v73 = v72 >> 3;
  v74 = (v72 >> 3) + 1;
  if (v74 >> 61)
    goto LABEL_160;
  v75 = v51 - v71;
  if (v75 >> 2 > v74)
    v74 = v75 >> 2;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v74;
  if (v76)
  {
    if (v76 >> 61)
      goto LABEL_161;
    v77 = operator new(8 * v76);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[8 * v73];
  v51 = &v77[8 * v76];
  *(_QWORD *)v78 = a1[22];
  v70 = v78 + 8;
  if (v52 != v71)
  {
    v79 = v52 - v71 - 8;
    if (v79 < 0x58)
    {
      v80 = v52;
      goto LABEL_106;
    }
    if ((unint64_t)(v52 - &v77[v72]) < 0x20)
    {
      v80 = v52;
      goto LABEL_106;
    }
    v81 = (v79 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v80 = &v52[-v82];
    v78 -= v82;
    v83 = &v77[8 * v73 - 16];
    v84 = v52 - 16;
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *(_OWORD *)v84;
      *(v83 - 1) = *((_OWORD *)v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 32;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v87 = *((_QWORD *)v80 - 1);
        v80 -= 8;
        *((_QWORD *)v78 - 1) = v87;
        v78 -= 8;
      }
      while (v80 != v71);
    }
  }
  *a2 = v78;
  a2[1] = v70;
  a2[2] = v51;
  if (v71)
  {
    operator delete(v71);
    v51 = a2[2];
  }
LABEL_109:
  a2[1] = v70;
  if (v70 < v51)
  {
    *(_QWORD *)v70 = a1[23];
    v88 = v70 + 8;
    goto LABEL_132;
  }
  v89 = *a2;
  v90 = v70 - *a2;
  v91 = v90 >> 3;
  v92 = (v90 >> 3) + 1;
  if (v92 >> 61)
    goto LABEL_160;
  v93 = v51 - v89;
  if (v93 >> 2 > v92)
    v92 = v93 >> 2;
  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
    v94 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v94 = v92;
  if (v94)
  {
    if (v94 >> 61)
      goto LABEL_161;
    v95 = operator new(8 * v94);
  }
  else
  {
    v95 = 0;
  }
  v96 = &v95[8 * v91];
  v51 = &v95[8 * v94];
  *(_QWORD *)v96 = a1[23];
  v88 = v96 + 8;
  if (v70 != v89)
  {
    v97 = v70 - v89 - 8;
    if (v97 < 0x58)
    {
      v98 = v70;
      goto LABEL_129;
    }
    if ((unint64_t)(v70 - &v95[v90]) < 0x20)
    {
      v98 = v70;
      goto LABEL_129;
    }
    v99 = (v97 >> 3) + 1;
    v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v70[-v100];
    v96 -= v100;
    v101 = &v95[8 * v91 - 16];
    v102 = v70 - 16;
    v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 4;
    }
    while (v103);
    if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v105 = *((_QWORD *)v98 - 1);
        v98 -= 8;
        *((_QWORD *)v96 - 1) = v105;
        v96 -= 8;
      }
      while (v98 != v89);
    }
  }
  *a2 = v96;
  a2[1] = v88;
  a2[2] = v51;
  if (v89)
  {
    operator delete(v89);
    v51 = a2[2];
  }
LABEL_132:
  a2[1] = v88;
  if (v88 < v51)
  {
    *(_QWORD *)v88 = a1[24];
    v106 = v88 + 8;
    goto LABEL_155;
  }
  v107 = *a2;
  v108 = v88 - *a2;
  v109 = v108 >> 3;
  v110 = (v108 >> 3) + 1;
  if (v110 >> 61)
LABEL_160:
    sub_20E867F44();
  v111 = v51 - v107;
  if (v111 >> 2 > v110)
    v110 = v111 >> 2;
  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
    v112 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v112 = v110;
  if (v112)
  {
    if (v112 >> 61)
      goto LABEL_161;
    v113 = operator new(8 * v112);
  }
  else
  {
    v113 = 0;
  }
  v114 = &v113[8 * v109];
  *(_QWORD *)v114 = a1[24];
  v106 = v114 + 8;
  if (v88 != v107)
  {
    v115 = v88 - v107 - 8;
    if (v115 < 0x58)
    {
      v116 = v88;
      goto LABEL_152;
    }
    if ((unint64_t)(v88 - &v113[v108]) < 0x20)
    {
      v116 = v88;
      goto LABEL_152;
    }
    v117 = (v115 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v88[-v118];
    v114 -= v118;
    v119 = &v113[8 * v109 - 16];
    v120 = v88 - 16;
    v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122 = *(_OWORD *)v120;
      *(v119 - 1) = *((_OWORD *)v120 - 1);
      *v119 = v122;
      v119 -= 2;
      v120 -= 32;
      v121 -= 4;
    }
    while (v121);
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v123 = *((_QWORD *)v116 - 1);
        v116 -= 8;
        *((_QWORD *)v114 - 1) = v123;
        v114 -= 8;
      }
      while (v116 != v107);
    }
  }
  *a2 = v114;
  a2[1] = v106;
  a2[2] = &v113[8 * v112];
  if (v107)
    operator delete(v107);
LABEL_155:
  a2[1] = v106;
}

void sub_20EB2DC1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB2DC4C(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _BYTE v22[301];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), sizeof(v22));
  v27 = 5;
  v28 = 0x7FF8000000000000;
  v29 = 0xFFEFFFFFFFFFFFFFLL;
  v30 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v27 != -1)
  {
    if (v27 > 7)
    {
      if (v27 > 0xB)
      {
        if (v27 < 0xF)
          return v5;
        v6 = v26;
        if (!v26)
          return v5;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v27 > 9)
      {
        if (v27 == 10)
          return v5;
        v6 = v25;
        if (!v25)
          return v5;
        v11 = (unint64_t *)&v25->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v27 != 9)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        v9 = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v27 != 7)
        return v5;
      v6 = v23;
      if (!v23)
        return v5;
      v7 = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2DE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB2DE34(uint64_t *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = a1[v5];
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a1[v5];
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = a1[v5];
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = v4 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = a1 + 9;
  v28 = a1 + 18;
  do
  {
    while (1)
    {
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v39 = (uint64_t)(v38 + 8);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v43;
        v38 -= 8;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 -= v46;
    v47 = &v37[8 * v33 - 16];
    v48 = v4 - 16;
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v38;
    a2[1] = (char *)v39;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = (char *)v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = a1 + 21;
  v52 = a1 + 28;
  do
  {
    v54 = (unint64_t)a2[2];
    if ((unint64_t)v4 < v54)
    {
      *(_QWORD *)v4 = *v51;
      v53 = (uint64_t)(v4 + 8);
      goto LABEL_65;
    }
    v55 = *a2;
    v56 = v4 - *a2;
    v57 = v56 >> 3;
    v58 = (v56 >> 3) + 1;
    if (v58 >> 61)
      sub_20E867F44();
    v59 = v54 - (_QWORD)v55;
    if (v59 >> 2 > v58)
      v58 = v59 >> 2;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v60 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      if (v60 >> 61)
        sub_20E877A38();
      v61 = operator new(8 * v60);
      v62 = &v61[8 * v57];
      *(_QWORD *)v62 = *v51;
      v53 = (uint64_t)(v62 + 8);
      v63 = v4 - v55;
      if (v4 == v55)
        goto LABEL_81;
    }
    else
    {
      v61 = 0;
      v62 = (char *)(8 * v57);
      *(_QWORD *)(8 * v57) = *v51;
      v53 = 8 * v57 + 8;
      v63 = v4 - v55;
      if (v4 == v55)
        goto LABEL_81;
    }
    v64 = v63 - 8;
    if (v64 >= 0x168)
    {
      v67 = (v4 - 8 - v55) & 0xFFFFFFFFFFFFFFF8;
      if (&v61[v56 - 8 - v67] > &v61[v56 - 8])
      {
        v65 = v4;
      }
      else if (&v4[-v67 - 8] > v4 - 8)
      {
        v65 = v4;
      }
      else if ((unint64_t)(v4 - v61 - v56) >= 0x20)
      {
        v68 = (v64 >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v65 = &v4[-v69];
        v62 -= v69;
        v70 = &v61[8 * v57 - 16];
        v71 = v4 - 16;
        v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73 = *(_OWORD *)v71;
          *(v70 - 1) = *((_OWORD *)v71 - 1);
          *v70 = v73;
          v70 -= 2;
          v71 -= 32;
          v72 -= 4;
        }
        while (v72);
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_81;
      }
      else
      {
        v65 = v4;
      }
    }
    else
    {
      v65 = v4;
    }
    do
    {
      v66 = *((_QWORD *)v65 - 1);
      v65 -= 8;
      *((_QWORD *)v62 - 1) = v66;
      v62 -= 8;
    }
    while (v65 != v55);
LABEL_81:
    *a2 = v62;
    a2[1] = (char *)v53;
    a2[2] = &v61[8 * v60];
    if (v55)
      operator delete(v55);
LABEL_65:
    a2[1] = (char *)v53;
    ++v51;
    v4 = (char *)v53;
  }
  while (v51 != v52);
}

void sub_20EB2E394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB2E3C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int64x2_t result;

  v3 = *a2;
  if (a2[1] - *a2 != 200)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 177, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *a2;
  }
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(v3 + 136);
  v5 = *(_OWORD *)(v3 + 144);
  v6 = *(_OWORD *)(v3 + 160);
  v7 = *(_OWORD *)(v3 + 176);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(v3 + 192);
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  *(_OWORD *)(a1 + 168) = v5;
  *(_BYTE *)(a1 + 492) = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 160) = 0;
  return result;
}

double sub_20EB2E4F0(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _QWORD v22[42];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), 0x145uLL);
  v26 = 8;
  v27 = 0x7FF8000000000000;
  v28 = 0xFFEFFFFFFFFFFFFFLL;
  v29 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v26 != -1)
  {
    if (v26 > 7)
    {
      if (v26 > 0xB)
      {
        if (v26 < 0xF)
          return v5;
        v6 = v25;
        if (!v25)
          return v5;
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v26 > 9)
      {
        if (v26 == 10)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        v11 = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v26 != 9)
          return v5;
        v6 = v23;
        if (!v23)
          return v5;
        v9 = (unint64_t *)&v23->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v26 != 7)
        return v5;
      v6 = (std::__shared_weak_count *)v22[39];
      if (!v22[39])
        return v5;
      v7 = (unint64_t *)(v22[39] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB2E6D8(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = a1[v5];
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a1[v5];
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = a1[v5];
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = (__int128 *)(v4 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = a1 + 9;
  v28 = a1 + 18;
  do
  {
    while (1)
    {
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v39 = (uint64_t)(v38 + 8);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v43;
        v38 -= 8;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 -= v46;
    v47 = &v37[8 * v33 - 16];
    v48 = (__int128 *)(v4 - 16);
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v38;
    a2[1] = (char *)v39;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = (char *)v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = a2[2];
  if (v4 < v51)
  {
    *(_QWORD *)v4 = a1[21];
    v52 = v4 + 8;
    goto LABEL_86;
  }
  v53 = *a2;
  v54 = v4 - *a2;
  v55 = v54 >> 3;
  v56 = (v54 >> 3) + 1;
  if (v56 >> 61)
    goto LABEL_160;
  v57 = v51 - v53;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_75;
    }
LABEL_161:
    sub_20E877A38();
  }
  v59 = 0;
LABEL_75:
  v60 = &v59[8 * v55];
  v51 = &v59[8 * v58];
  *(_QWORD *)v60 = a1[21];
  v52 = v60 + 8;
  if (v4 != v53)
  {
    v61 = v4 - v53 - 8;
    if (v61 < 0x58)
    {
      v62 = v4;
      goto LABEL_83;
    }
    if ((unint64_t)(v4 - v59 - v54) < 0x20)
    {
      v62 = v4;
      goto LABEL_83;
    }
    v63 = (v61 >> 3) + 1;
    v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v4[-v64];
    v60 -= v64;
    v65 = &v59[8 * v55 - 16];
    v66 = (__int128 *)(v4 - 16);
    v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *v66;
      *(v65 - 1) = *(v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 2;
      v67 -= 4;
    }
    while (v67);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v69 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v60 - 1) = v69;
        v60 -= 8;
      }
      while (v62 != v53);
    }
  }
  *a2 = v60;
  a2[1] = v52;
  a2[2] = v51;
  if (v53)
  {
    operator delete(v53);
    v51 = a2[2];
  }
LABEL_86:
  a2[1] = v52;
  if (v52 < v51)
  {
    *(_QWORD *)v52 = a1[22];
    v70 = v52 + 8;
    goto LABEL_109;
  }
  v71 = *a2;
  v72 = v52 - *a2;
  v73 = v72 >> 3;
  v74 = (v72 >> 3) + 1;
  if (v74 >> 61)
    goto LABEL_160;
  v75 = v51 - v71;
  if (v75 >> 2 > v74)
    v74 = v75 >> 2;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v74;
  if (v76)
  {
    if (v76 >> 61)
      goto LABEL_161;
    v77 = operator new(8 * v76);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[8 * v73];
  v51 = &v77[8 * v76];
  *(_QWORD *)v78 = a1[22];
  v70 = v78 + 8;
  if (v52 != v71)
  {
    v79 = v52 - v71 - 8;
    if (v79 < 0x58)
    {
      v80 = v52;
      goto LABEL_106;
    }
    if ((unint64_t)(v52 - &v77[v72]) < 0x20)
    {
      v80 = v52;
      goto LABEL_106;
    }
    v81 = (v79 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v80 = &v52[-v82];
    v78 -= v82;
    v83 = &v77[8 * v73 - 16];
    v84 = v52 - 16;
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *(_OWORD *)v84;
      *(v83 - 1) = *((_OWORD *)v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 32;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v87 = *((_QWORD *)v80 - 1);
        v80 -= 8;
        *((_QWORD *)v78 - 1) = v87;
        v78 -= 8;
      }
      while (v80 != v71);
    }
  }
  *a2 = v78;
  a2[1] = v70;
  a2[2] = v51;
  if (v71)
  {
    operator delete(v71);
    v51 = a2[2];
  }
LABEL_109:
  a2[1] = v70;
  if (v70 < v51)
  {
    *(_QWORD *)v70 = a1[23];
    v88 = v70 + 8;
    goto LABEL_132;
  }
  v89 = *a2;
  v90 = v70 - *a2;
  v91 = v90 >> 3;
  v92 = (v90 >> 3) + 1;
  if (v92 >> 61)
    goto LABEL_160;
  v93 = v51 - v89;
  if (v93 >> 2 > v92)
    v92 = v93 >> 2;
  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
    v94 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v94 = v92;
  if (v94)
  {
    if (v94 >> 61)
      goto LABEL_161;
    v95 = operator new(8 * v94);
  }
  else
  {
    v95 = 0;
  }
  v96 = &v95[8 * v91];
  v51 = &v95[8 * v94];
  *(_QWORD *)v96 = a1[23];
  v88 = v96 + 8;
  if (v70 != v89)
  {
    v97 = v70 - v89 - 8;
    if (v97 < 0x58)
    {
      v98 = v70;
      goto LABEL_129;
    }
    if ((unint64_t)(v70 - &v95[v90]) < 0x20)
    {
      v98 = v70;
      goto LABEL_129;
    }
    v99 = (v97 >> 3) + 1;
    v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v70[-v100];
    v96 -= v100;
    v101 = &v95[8 * v91 - 16];
    v102 = v70 - 16;
    v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 4;
    }
    while (v103);
    if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v105 = *((_QWORD *)v98 - 1);
        v98 -= 8;
        *((_QWORD *)v96 - 1) = v105;
        v96 -= 8;
      }
      while (v98 != v89);
    }
  }
  *a2 = v96;
  a2[1] = v88;
  a2[2] = v51;
  if (v89)
  {
    operator delete(v89);
    v51 = a2[2];
  }
LABEL_132:
  a2[1] = v88;
  if (v88 < v51)
  {
    *(_QWORD *)v88 = a1[24];
    v106 = v88 + 8;
    goto LABEL_155;
  }
  v107 = *a2;
  v108 = v88 - *a2;
  v109 = v108 >> 3;
  v110 = (v108 >> 3) + 1;
  if (v110 >> 61)
LABEL_160:
    sub_20E867F44();
  v111 = v51 - v107;
  if (v111 >> 2 > v110)
    v110 = v111 >> 2;
  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
    v112 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v112 = v110;
  if (v112)
  {
    if (v112 >> 61)
      goto LABEL_161;
    v113 = operator new(8 * v112);
  }
  else
  {
    v113 = 0;
  }
  v114 = &v113[8 * v109];
  *(_QWORD *)v114 = a1[24];
  v106 = v114 + 8;
  if (v88 != v107)
  {
    v115 = v88 - v107 - 8;
    if (v115 < 0x58)
    {
      v116 = v88;
      goto LABEL_152;
    }
    if ((unint64_t)(v88 - &v113[v108]) < 0x20)
    {
      v116 = v88;
      goto LABEL_152;
    }
    v117 = (v115 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v88[-v118];
    v114 -= v118;
    v119 = &v113[8 * v109 - 16];
    v120 = v88 - 16;
    v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122 = *(_OWORD *)v120;
      *(v119 - 1) = *((_OWORD *)v120 - 1);
      *v119 = v122;
      v119 -= 2;
      v120 -= 32;
      v121 -= 4;
    }
    while (v121);
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v123 = *((_QWORD *)v116 - 1);
        v116 -= 8;
        *((_QWORD *)v114 - 1) = v123;
        v114 -= 8;
      }
      while (v116 != v107);
    }
  }
  *a2 = v114;
  a2[1] = v106;
  a2[2] = &v113[8 * v112];
  if (v107)
    operator delete(v107);
LABEL_155:
  a2[1] = v106;
}

void sub_20EB2EF40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB2EF70(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _BYTE v22[301];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), sizeof(v22));
  v27 = 12;
  v28 = 0x7FF8000000000000;
  v29 = 0xFFEFFFFFFFFFFFFFLL;
  v30 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v27 != -1)
  {
    if (v27 > 7)
    {
      if (v27 > 0xB)
      {
        if (v27 < 0xF)
          return v5;
        v6 = v26;
        if (!v26)
          return v5;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v27 > 9)
      {
        if (v27 == 10)
          return v5;
        v6 = v25;
        if (!v25)
          return v5;
        v11 = (unint64_t *)&v25->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v27 != 9)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        v9 = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v27 != 7)
        return v5;
      v6 = v23;
      if (!v23)
        return v5;
      v7 = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20EB2F158@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = *(_QWORD *)(a1 + 8 * v5);
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = (char *)*a2;
    v8 = (uint64_t)&v4[-*a2];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *v14 = *(_QWORD *)(a1 + 8 * v5);
      v15 = (uint64_t)(v14 + 1);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (_QWORD *)(8 * v9);
      *(_QWORD *)(8 * v9) = *(_QWORD *)(a1 + 8 * v5);
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v14 = v19;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 = (_QWORD *)((char *)v14 - v22);
    v23 = &v13[8 * v9 - 16];
    v24 = v4 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = (unint64_t)v14;
    a2[1] = v15;
    a2[2] = (unint64_t)&v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = (uint64_t *)(a1 + 72);
  v28 = (uint64_t *)(a1 + 144);
  do
  {
    while (1)
    {
      v30 = a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = (char *)*a2;
    v32 = (uint64_t)&v4[-*a2];
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = (uint64_t *)&v37[8 * v33];
      *v38 = *v27;
      v39 = (uint64_t)(v38 + 1);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (uint64_t *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *--v38 = v43;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 = (uint64_t *)((char *)v38 - v46);
    v47 = &v37[8 * v33 - 16];
    v48 = v4 - 16;
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = (unint64_t)v38;
    a2[1] = v39;
    a2[2] = (unint64_t)&v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = (uint64_t *)(a1 + 168);
  v52 = (uint64_t *)(a1 + 280);
  do
  {
    while (1)
    {
      v54 = a2[2];
      if ((unint64_t)v4 >= v54)
        break;
      v53 = *v51++;
      *(_QWORD *)v4 = v53;
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (v51 == v52)
        return sub_20EB44158(a2, v4, (char *)(a1 + 280), (char *)(a1 + 392), 14);
    }
    v55 = (char *)*a2;
    v56 = (uint64_t)&v4[-*a2];
    v57 = v56 >> 3;
    v58 = (v56 >> 3) + 1;
    if (v58 >> 61)
      sub_20E867F44();
    v59 = v54 - (_QWORD)v55;
    if (v59 >> 2 > v58)
      v58 = v59 >> 2;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v60 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      if (v60 >> 61)
        sub_20E877A38();
      v61 = operator new(8 * v60);
      v62 = (uint64_t *)&v61[8 * v57];
      *v62 = *v51;
      v63 = (uint64_t)(v62 + 1);
      v64 = v4 - v55;
      if (v4 == v55)
        goto LABEL_80;
    }
    else
    {
      v61 = 0;
      v62 = (uint64_t *)(8 * v57);
      *(_QWORD *)(8 * v57) = *v51;
      v63 = 8 * v57 + 8;
      v64 = v4 - v55;
      if (v4 == v55)
        goto LABEL_80;
    }
    v65 = v64 - 8;
    if (v65 < 0x168)
    {
      v66 = v4;
      goto LABEL_79;
    }
    v68 = (v4 - 8 - v55) & 0xFFFFFFFFFFFFFFF8;
    if (&v61[v56 - 8 - v68] > &v61[v56 - 8])
    {
      v66 = v4;
      do
      {
LABEL_79:
        v67 = *((_QWORD *)v66 - 1);
        v66 -= 8;
        *--v62 = v67;
      }
      while (v66 != v55);
      goto LABEL_80;
    }
    if (&v4[-v68 - 8] > v4 - 8)
    {
      v66 = v4;
      goto LABEL_79;
    }
    if ((unint64_t)(v4 - v61 - v56) < 0x20)
    {
      v66 = v4;
      goto LABEL_79;
    }
    v69 = (v65 >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v66 = &v4[-v70];
    v62 = (uint64_t *)((char *)v62 - v70);
    v71 = &v61[8 * v57 - 16];
    v72 = v4 - 16;
    v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 4;
    }
    while (v73);
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_79;
LABEL_80:
    *a2 = (unint64_t)v62;
    a2[1] = v63;
    a2[2] = (unint64_t)&v61[8 * v60];
    if (v55)
      operator delete(v55);
    v4 = (char *)v63;
    a2[1] = v63;
    ++v51;
  }
  while (v51 != v52);
  return sub_20EB44158(a2, v4, (char *)(a1 + 280), (char *)(a1 + 392), 14);
}

void sub_20EB2F6D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB2F70C(int64x2_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  int64x2_t result;

  v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 368)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 177, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *a2;
  }
  a1->i64[0] = *v4;
  a1->i64[1] = v4[1];
  a1[1].i64[0] = v4[2];
  a1[1].i64[1] = v4[3];
  a1[2].i64[0] = v4[4];
  a1[2].i64[1] = v4[5];
  a1[3].i64[0] = v4[6];
  a1[3].i64[1] = v4[7];
  a1[4].i64[0] = v4[8];
  a1[4].i64[1] = v4[9];
  a1[5].i64[0] = v4[10];
  a1[5].i64[1] = v4[11];
  a1[6].i64[0] = v4[12];
  a1[6].i64[1] = v4[13];
  a1[7].i64[0] = v4[14];
  a1[7].i64[1] = v4[15];
  a1[8].i64[0] = v4[16];
  a1[8].i64[1] = v4[17];
  memmove(&a1[10].u64[1], v4 + 18, 0x70uLL);
  memmove(&a1[17].u64[1], *a2 + 32, 0x70uLL);
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[9] = result;
  a1[10].i8[0] = 0;
  return result;
}

double sub_20EB2F848(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _QWORD v22[63];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), 0x1E9uLL);
  v25 = 10;
  v26 = 0x7FF8000000000000;
  v27 = 0xFFEFFFFFFFFFFFFFLL;
  v28 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v25 != -1)
  {
    if (v25 > 7)
    {
      if (v25 > 0xB)
      {
        if (v25 < 0xF)
          return v5;
        v6 = v24;
        if (!v24)
          return v5;
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v25 > 9)
      {
        if (v25 == 10)
          return v5;
        v6 = v23;
        if (!v23)
          return v5;
        v11 = (unint64_t *)&v23->__shared_owners_;
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v25 != 9)
          return v5;
        v6 = (std::__shared_weak_count *)v22[42];
        if (!v22[42])
          return v5;
        v9 = (unint64_t *)(v22[42] + 8);
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v25 != 7)
        return v5;
      v6 = (std::__shared_weak_count *)v22[39];
      if (!v22[39])
        return v5;
      v7 = (unint64_t *)(v22[39] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB2FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20EB2FA30@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = *(_QWORD *)(a1 + 8 * v5);
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = (char *)*a2;
    v8 = (uint64_t)&v4[-*a2];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *v14 = *(_QWORD *)(a1 + 8 * v5);
      v15 = (uint64_t)(v14 + 1);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (_QWORD *)(8 * v9);
      *(_QWORD *)(8 * v9) = *(_QWORD *)(a1 + 8 * v5);
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v14 = v19;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 = (_QWORD *)((char *)v14 - v22);
    v23 = &v13[8 * v9 - 16];
    v24 = v4 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = (unint64_t)v14;
    a2[1] = v15;
    a2[2] = (unint64_t)&v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = (uint64_t *)(a1 + 72);
  v28 = (uint64_t *)(a1 + 144);
  do
  {
    while (1)
    {
      v30 = a2[2];
      if ((unint64_t)v4 >= v30)
        break;
      v29 = *v27++;
      *(_QWORD *)v4 = v29;
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (v27 == v28)
        goto LABEL_63;
    }
    v31 = (char *)*a2;
    v32 = (uint64_t)&v4[-*a2];
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = (uint64_t *)&v37[8 * v33];
      *v38 = *v27;
      v39 = (uint64_t)(v38 + 1);
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    else
    {
      v37 = 0;
      v38 = (uint64_t *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v39 = 8 * v33 + 8;
      v40 = v4 - v31;
      if (v4 == v31)
        goto LABEL_49;
    }
    v41 = v40 - 8;
    if (v41 < 0x168)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v44 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
    if (&v37[v32 - 8 - v44] > &v37[v32 - 8])
    {
      v42 = v4;
      do
      {
LABEL_48:
        v43 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *--v38 = v43;
      }
      while (v42 != v31);
      goto LABEL_49;
    }
    if (&v4[-v44 - 8] > v4 - 8)
    {
      v42 = v4;
      goto LABEL_48;
    }
    if ((unint64_t)(v4 - v37 - v32) < 0x20)
    {
      v42 = v4;
      goto LABEL_48;
    }
    v45 = (v41 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v4[-v46];
    v38 = (uint64_t *)((char *)v38 - v46);
    v47 = &v37[8 * v33 - 16];
    v48 = v4 - 16;
    v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 4;
    }
    while (v49);
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = (unint64_t)v38;
    a2[1] = v39;
    a2[2] = (unint64_t)&v37[8 * v36];
    if (v31)
      operator delete(v31);
    v4 = (char *)v39;
    a2[1] = v39;
    ++v27;
  }
  while (v27 != v28);
LABEL_63:
  v51 = (uint64_t *)(a1 + 168);
  v52 = (uint64_t *)(a1 + 392);
  do
  {
    while (1)
    {
      v54 = a2[2];
      if ((unint64_t)v4 >= v54)
        break;
      v53 = *v51++;
      *(_QWORD *)v4 = v53;
      v4 += 8;
      a2[1] = (unint64_t)v4;
      if (v51 == v52)
        return sub_20EB44158(a2, v4, (char *)(a1 + 392), (char *)(a1 + 616), 28);
    }
    v55 = (char *)*a2;
    v56 = (uint64_t)&v4[-*a2];
    v57 = v56 >> 3;
    v58 = (v56 >> 3) + 1;
    if (v58 >> 61)
      sub_20E867F44();
    v59 = v54 - (_QWORD)v55;
    if (v59 >> 2 > v58)
      v58 = v59 >> 2;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v60 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      if (v60 >> 61)
        sub_20E877A38();
      v61 = operator new(8 * v60);
      v62 = (uint64_t *)&v61[8 * v57];
      *v62 = *v51;
      v63 = (uint64_t)(v62 + 1);
      v64 = v4 - v55;
      if (v4 == v55)
        goto LABEL_80;
    }
    else
    {
      v61 = 0;
      v62 = (uint64_t *)(8 * v57);
      *(_QWORD *)(8 * v57) = *v51;
      v63 = 8 * v57 + 8;
      v64 = v4 - v55;
      if (v4 == v55)
        goto LABEL_80;
    }
    v65 = v64 - 8;
    if (v65 < 0x168)
    {
      v66 = v4;
      goto LABEL_79;
    }
    v68 = (v4 - 8 - v55) & 0xFFFFFFFFFFFFFFF8;
    if (&v61[v56 - 8 - v68] > &v61[v56 - 8])
    {
      v66 = v4;
      do
      {
LABEL_79:
        v67 = *((_QWORD *)v66 - 1);
        v66 -= 8;
        *--v62 = v67;
      }
      while (v66 != v55);
      goto LABEL_80;
    }
    if (&v4[-v68 - 8] > v4 - 8)
    {
      v66 = v4;
      goto LABEL_79;
    }
    if ((unint64_t)(v4 - v61 - v56) < 0x20)
    {
      v66 = v4;
      goto LABEL_79;
    }
    v69 = (v65 >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v66 = &v4[-v70];
    v62 = (uint64_t *)((char *)v62 - v70);
    v71 = &v61[8 * v57 - 16];
    v72 = v4 - 16;
    v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 4;
    }
    while (v73);
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_79;
LABEL_80:
    *a2 = (unint64_t)v62;
    a2[1] = v63;
    a2[2] = (unint64_t)&v61[8 * v60];
    if (v55)
      operator delete(v55);
    v4 = (char *)v63;
    a2[1] = v63;
    ++v51;
  }
  while (v51 != v52);
  return sub_20EB44158(a2, v4, (char *)(a1 + 392), (char *)(a1 + 616), 28);
}

void sub_20EB2FFB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB2FFE4(int64x2_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  int64x2_t result;

  v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 592)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 177, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *a2;
  }
  a1->i64[0] = *v4;
  a1->i64[1] = v4[1];
  a1[1].i64[0] = v4[2];
  a1[1].i64[1] = v4[3];
  a1[2].i64[0] = v4[4];
  a1[2].i64[1] = v4[5];
  a1[3].i64[0] = v4[6];
  a1[3].i64[1] = v4[7];
  a1[4].i64[0] = v4[8];
  a1[4].i64[1] = v4[9];
  a1[5].i64[0] = v4[10];
  a1[5].i64[1] = v4[11];
  a1[6].i64[0] = v4[12];
  a1[6].i64[1] = v4[13];
  a1[7].i64[0] = v4[14];
  a1[7].i64[1] = v4[15];
  a1[8].i64[0] = v4[16];
  a1[8].i64[1] = v4[17];
  memmove(&a1[10].u64[1], v4 + 18, 0xE0uLL);
  memmove(&a1[24].u64[1], *a2 + 46, 0xE0uLL);
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[9] = result;
  a1[10].i8[0] = 0;
  return result;
}

double sub_20EB30120(uint64_t a1, double a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  _QWORD v22[91];
  std::__shared_weak_count *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  v15 = *(_OWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 144);
  memcpy(v22, (const void *)(a1 + 168), 0x2C9uLL);
  v24 = 14;
  v25 = 0x7FF8000000000000;
  v26 = 0xFFEFFFFFFFFFFFFFLL;
  v27 = xmmword_2102E3C60;
  *(_QWORD *)&v5 = sub_20EB2BE70((uint64_t)v13, a2).n128_u64[0];
  if (v24 != -1)
  {
    if (v24 > 7)
    {
      if (v24 > 0xB)
      {
        if (v24 < 0xF)
          return v5;
        v6 = v23;
        if (!v23)
          return v5;
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
      }
      else if (v24 > 9)
      {
        if (v24 == 10)
          return v5;
        v6 = (std::__shared_weak_count *)v22[63];
        if (!v22[63])
          return v5;
        v11 = (unint64_t *)(v22[63] + 8);
        do
          v8 = __ldaxr(v11);
        while (__stlxr(v8 - 1, v11));
      }
      else
      {
        if (v24 != 9)
          return v5;
        v6 = (std::__shared_weak_count *)v22[42];
        if (!v22[42])
          return v5;
        v9 = (unint64_t *)(v22[42] + 8);
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
      }
    }
    else
    {
      if (v24 != 7)
        return v5;
      v6 = (std::__shared_weak_count *)v22[39];
      if (!v22[39])
        return v5;
      v7 = (unint64_t *)(v22[39] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_20EB302F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20EB30308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4 + 112;
  sub_20EB44158((unint64_t *)a2, v4, (char *)a1, (char *)(a1 + 72), 9);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 168), (char *)(a1 + 200), 4);
  sub_20EB1B860(*(_QWORD *)(a1 + 472), (double **)a2);
  return sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 488), (char *)(a1 + 560), 9);
}

void sub_20EB30398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB303C0(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double result;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v7 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0x70)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 520, (uint64_t)"data.size() > camera_matrix_.elements() + radial_.size() + 1", 60, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v7 = *a2;
  }
  a5.f64[0] = *(float64_t *)(v7 + 64);
  v9 = *(float64x2_t *)(v7 + 32);
  v8 = *(float64x2_t *)(v7 + 48);
  v11 = *(int8x16_t *)v7;
  v10 = *(float64x2_t *)(v7 + 16);
  v12 = (int8x16_t)vabdq_f64(*(float64x2_t *)v7, *(float64x2_t *)a1);
  v13 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v14 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, (float64x2_t)vextq_s8(v12, v12, 8uLL)), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v10, *(float64x2_t *)(a1 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, vabdq_f64(v9, *(float64x2_t *)(a1 + 32))), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v8, *(float64x2_t *)(a1 + 48))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v14)) & 1) != 0
    || (v14.f64[0] = *(float64_t *)(a1 + 64), vabdq_f64(a5, v14).f64[0] > 1.0e-10))
  {
    v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    *(_QWORD *)&v10.f64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    *(int8x16_t *)a1 = v11;
    *(float64x2_t *)(a1 + 16) = v10;
    *(_QWORD *)&v9.f64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    *(float64_t *)(a1 + 64) = a5.f64[0];
    *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    *(float64x2_t *)(a1 + 32) = v9;
    *(float64x2_t *)(a1 + 48) = v8;
    v15 = *(double *)v7 * *(double *)(v7 + 32);
    *(double *)(a1 + 72) = 1.0 / *(double *)v7;
    *(double *)(a1 + 80) = -*(double *)(v7 + 8) / v15;
    *(double *)(a1 + 88) = -(*(double *)(v7 + 32) * *(double *)(v7 + 16) - *(double *)(v7 + 8) * *(double *)(v7 + 40))
                         / v15;
    *(_QWORD *)(a1 + 96) = 0;
    *(double *)(a1 + 104) = 1.0 / *(double *)(v7 + 32);
    *(double *)(a1 + 112) = -*(double *)(v7 + 40) / *(double *)(v7 + 32);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
    *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 160) = 0;
    v7 = *a2;
  }
  v16 = *(_OWORD *)(v7 + 72);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v7 + 88);
  *(_OWORD *)(a1 + 168) = v16;
  *(_BYTE *)(a1 + 468) = 0;
  *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 160) = 0;
  v17 = v7 + 104;
  v18 = (char *)operator new(0x88uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C9C4FA8;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_QWORD *)v18 + 12) = 0;
  *((_DWORD *)v18 + 26) = 1;
  *((_QWORD *)v18 + 14) = 0x7FF8000000000000;
  v19 = *(std::__shared_weak_count **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v18;
  *((_QWORD *)v18 + 3) = &off_24C9C2508;
  *(_QWORD *)(a1 + 472) = v18 + 24;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v31 = a2[1];
      v23 = *(_QWORD *)(a1 + 472);
      v32 = (uint64_t)(v31 - v17) >> 3;
      v33 = v17;
      if (v31 >= v17)
        goto LABEL_13;
LABEL_12:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_13;
LABEL_16:
      abort();
    }
  }
  v22 = a2[1];
  v23 = *(_QWORD *)(a1 + 472);
  v32 = (uint64_t)(v22 - v17) >> 3;
  v33 = v17;
  if (v22 < v17)
    goto LABEL_12;
LABEL_13:
  v24 = a1 + 488;
  v25 = sub_20EB1B3A0(v23, &v32);
  result = v25[2];
  v27 = *((_QWORD *)v25 + 5);
  v28 = *(_OWORD *)(v25 + 3);
  v29 = *((_QWORD *)v25 + 8);
  v30 = *((_OWORD *)v25 + 3);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(double *)(v24 + 16) = result;
  *(_OWORD *)(v24 + 24) = v28;
  *(_QWORD *)(v24 + 40) = v27;
  *(_OWORD *)(v24 + 48) = v30;
  *(_QWORD *)(v24 + 64) = v29;
  return result;
}

BOOL sub_20EB306CC(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6, double a7, double a8, int8x16_t a9, int8x16_t a10, double a11, double a12, float64x2_t a13)
{
  float64x2_t v19;
  int8x16_t v20;
  double *v21;
  _BOOL8 v22;
  int64x2_t *v23;
  float64x2_t v25;
  int8x16_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v36;
  int64x2_t v37;
  double v38;
  float64x2_t v40;
  float64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v46;
  float64_t v47;
  float64_t v49;
  float64x2_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  size_t v57;
  void **v58;
  int8x16_t v59;
  float64x2_t v63;
  float64x2_t v65;
  double v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  unint64_t v77;
  float64x2_t v78;
  unint64_t v79;
  float64x2_t v80;
  int8x16_t v82;
  int8x16_t v83;
  double v84;
  int8x16_t v85;
  double v86;
  double v87;
  int8x16_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  int8x16_t v92;
  float64x2_t v93;
  double v95;
  float64x2_t v96;
  float64x2_t v98;
  float64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  double v106;
  float64x2_t v109;
  int64x2_t v110;
  float64x2_t v111;
  int64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v122;
  float64x2_t v123;
  double v127;
  float64x2_t v128;
  double v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int8x16_t v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v142;
  int8x16_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int8x16_t v146;
  float64x2_t v147;
  float64x2_t v148;
  double v149;
  float64x2_t v151;
  double v152;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v166;
  float64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  float64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  int64x2_t v181;
  float64x2_t v182;
  double v184;
  unint64_t v186;
  double v188;
  float64x2_t v189;
  float64x2_t v191;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v196;
  unint64_t v198;
  const void **v199;
  const void *v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  const char *v205;
  size_t v206;
  unsigned __int8 v207;
  const char *v208;
  size_t v209;
  _BYTE *v210;
  uint64_t v211;
  unint64_t v212;
  const char *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  void **v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  size_t v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  size_t v224;
  size_t v225;
  _QWORD *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  char v231;
  _QWORD *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *p_shared_owners;
  unint64_t v236;
  void *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  _QWORD *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  const char *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  float64x2_t v282;
  unint64_t v283;
  int8x16_t v284;
  float64_t v285;
  float64_t v286;
  float64_t v287;
  float64x2_t v288;
  unint64_t v289;
  float64_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64_t v294;
  double v295;
  float64x2_t v296;
  const char *v297;
  double v298;
  const char *v299;
  _QWORD v300[3];
  int v301;
  const char *v302;
  int v303;
  const char *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  void *__dst[2];
  int64_t v308;
  _QWORD v309[2];
  _QWORD v310[3];
  _QWORD v311[3];
  uint64_t v312;
  unint64_t v313;
  void *__p;
  char v315;
  unint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  float64x2_t v320;
  double v321;
  float64x2_t v322;
  float64_t v323;
  char v324;
  int8x16_t v325;
  float64_t v326;
  float64x2_t v327;
  double v328;
  float64x2_t v329;
  uint64_t v330;
  int8x16_t v331;
  double v332;
  int8x16_t v333;
  float64_t v334;
  int8x16_t v335;
  double v336;
  float64x2_t v337;
  double v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  double v343;
  __int128 v344;
  std::__shared_weak_count *v345;
  char *v346;
  std::__shared_weak_count *v347;
  _QWORD *v348;
  __int128 v349;
  int8x16_t v350;
  _BYTE v351[24];
  __int128 v352;
  void *v353[2];
  unint64_t v354;
  char v355;
  _QWORD v356[5];

  v356[2] = *MEMORY[0x24BDAC8D0];
  v19 = *(float64x2_t *)(a1 + 560);
  v20 = (int8x16_t)vsubq_f64(*a3, v19);
  v350 = v20;
  v21 = (double *)(a1 + 168);
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 468))
    {
      v20.i64[0] = sub_20EB27C0C(a1 + 204, v21, 0x32uLL, v20, v19.f64[0], a9, a10).u64[0];
      *(_BYTE *)(a1 + 468) = 1;
    }
    if ((sub_20EA8D684((uint64_t)&v342, (uint64_t)&v350, (int64x2_t *)v21, (float *)(a1 + 204), &v339, 5, *(double *)v20.i64, v19.f64[0], *(double *)a9.i64, *(double *)a10.i64, a11, a12, a13) & 1) == 0)return 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 468))
    {
      v20.i64[0] = sub_20EB27C0C(a1 + 204, v21, 0x32uLL, v20, v19.f64[0], a9, a10).u64[0];
      *(_BYTE *)(a1 + 468) = 1;
    }
    if (!sub_20EA8D684((uint64_t)&v342, (uint64_t)&v350, (int64x2_t *)v21, (float *)(a1 + 204), 0, 5, *(double *)v20.i64, v19.f64[0], *(double *)a9.i64, *(double *)a10.i64, a11, a12, a13))return 0;
  }
  if (v343 < 0.0)
    return 0;
  v23 = (int64x2_t *)(a1 + 488);
  v342 = vaddq_f64(v342, vmulq_n_f64(*(float64x2_t *)(a1 + 560), v343));
  _D3 = *(_QWORD *)(a1 + 528);
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), v342.f64[0]), *(float64x2_t *)(a1 + 512), v342, 1), *(float64x2_t *)(a1 + 536), v343);
  __asm { FMLA            D1, D3, V0.D[1] }
  v338 = _D1 + *(double *)(a1 + 552) * v343;
  v337 = v25;
  if (a5 | a6)
    v31 = &v325;
  else
    v31 = 0;
  sub_20EB1C3A0(*(_QWORD *)(a1 + 472), COERCE_FLOAT64_T(&v337), (uint64_t)v31, (uint64_t)&v320);
  v22 = v324 != 0;
  if (v324)
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 504);
    v36 = *(double *)(a1 + 528);
    v37 = *(int64x2_t *)(a1 + 512);
    v38 = *(double *)(a1 + 552);
    _Q5 = *(_OWORD *)(a1 + 536);
    v40 = (float64x2_t)vzip1q_s64(*v23, v37);
    v41 = _Q3.f64[0];
    _Q7.f64[1] = v36;
    v32.f64[0] = v321;
    v42 = v320;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v320.f64[0]), (float64x2_t)vzip2q_s64(*v23, v37), v320, 1), _Q7, v321);
    _Q7.f64[0] = v320.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    v296 = v32;
    _Q7.f64[0] = _D4 + v38 * v321;
    v46 = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v47 = v43.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v46;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 504);
      v36 = *(double *)(a1 + 528);
      v40 = (float64x2_t)vzip1q_s64(*v23, *(int64x2_t *)(a1 + 512));
      _D20 = *(_QWORD *)(a1 + 544);
      v49 = *(double *)(a1 + 520);
      v50.f64[0] = *(float64_t *)(a1 + 496);
      v38 = *(double *)(a1 + 552);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 544);
      v49 = *(double *)(a1 + 520);
      v50.f64[0] = *(float64_t *)(a1 + 496);
    }
    v59 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL);
    v33.f64[0] = v323;
    _Q26 = v322;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v322.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v33.f64[0] * v33.f64[0]);
    v63 = vmulq_f64(v33, _Q16);
    _Q21 = vmulq_n_f64(v322, _Q16.f64[0]);
    _Q3.f64[1] = v36;
    *(_QWORD *)&v40.f64[1] = v59.i64[0];
    v50.f64[1] = v49;
    v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q21.f64[0]), v50, _Q21, 1), _Q3, v63.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v38, v63.f64[0]);
    *(_QWORD *)&v43.f64[1] = v46;
    *(float64x2_t *)a2 = vaddq_f64(v43, v65);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v66 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v67 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v68.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v68.f64[1] = v67;
      v69.f64[0] = _Q16.f64[0];
      v69.f64[1] = _Q16.f64[0];
      v70 = vmulq_f64(v69, v68);
      v288 = v63;
      v71 = vmulq_f64(_Q16, v63);
      v72 = v33.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v71.f64[0];
      v33.f64[0] = v66 * _Q16.f64[0] * v71.f64[0];
      v71.f64[0] = v72 * v71.f64[0];
      v73.f64[0] = 0.0;
      v73.f64[1] = _Q16.f64[0];
      v74 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v70, _Q21.f64[0], 0);
      v75 = (float64x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL);
      *(_QWORD *)&v298 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v76 = vmlsq_lane_f64(v73, v70, v66 * _Q16.f64[0], 0);
      v77 = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
      *(_QWORD *)&v295 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v33);
      v78 = vmlsq_lane_f64((float64x2_t)0, v70, v72, 0);
      v79 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
      v80 = vsubq_f64(_Q16, v71);
      _Q22 = v327;
      v82 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL);
      v83 = v331;
      *(_QWORD *)&v84 = vextq_s8(v83, v83, 8uLL).u64[0];
      v85 = v335;
      *(_QWORD *)&v86 = vextq_s8(v85, v85, 8uLL).u64[0];
      v87 = v328;
      v70.f64[0] = v326;
      v88 = v325;
      v89 = v332;
      v59.i64[0] = v330;
      v90 = v329;
      *(_QWORD *)&v290 = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
      v291 = v70;
      v91 = v336;
      v34.f64[0] = v334;
      v92 = v333;
      v93 = (float64x2_t)vextq_s8(v92, v92, 8uLL);
      v294 = v93.f64[0];
      v292 = (float64x2_t)v59;
      v293 = v34;
      v289 = vextq_s8(v88, v88, 8uLL).u64[0];
      if (a5)
      {
        _Q5.f64[0] = *(float64_t *)(a1 + 504);
        v95 = *(double *)(a1 + 528);
        v96 = *(float64x2_t *)(a1 + 512);
        _Q3 = *(float64x2_t *)(a1 + 536);
        v281 = v67;
        v282 = v75;
        v98.f64[0] = v74.f64[0];
        v98.f64[1] = v75.f64[0];
        _Q18.f64[0] = v76.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v77;
        v284 = v82;
        v286 = v327.f64[0];
        v100 = v78.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v79;
        v101 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v327.f64[0]), _Q18, *(double *)v82.i64), _Q22, v328);
        v283 = v79;
        v93.f64[0] = v298 * v327.f64[0] + v295 * *(double *)v82.i64 + v80.f64[0] * v328;
        v280 = v77;
        v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *(double *)v331.i64), _Q18, v84), _Q22, v332);
        v103 = vmlaq_n_f64(vmulq_n_f64(v98, *(double *)v335.i64), _Q18, v86);
        *(_QWORD *)&_Q18.f64[0] = v333.i64[0];
        _Q18.f64[1] = v294;
        _Q17 = vaddq_f64(vmlaq_n_f64(v103, _Q22, v336), _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 496);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 520);
        __asm { FMLA            D22, D2, V17.D[1] }
        v106 = v86;
        _D31 = *(_QWORD *)(a1 + 544);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v298 * *(double *)v331.i64 + v295 * v84 + v80.f64[0] * v332;
        *(_QWORD *)&v109.f64[0] = v325.i64[0];
        *(_QWORD *)&v109.f64[1] = v289;
        v110 = (int64x2_t)vaddq_f64(v101, v109);
        v111.f64[0] = v329.f64[0];
        v111.f64[1] = v290;
        v112 = (int64x2_t)vaddq_f64(v102, v111);
        v113 = (float64x2_t)vzip1q_s64(v110, v112);
        _Q30 = (float64x2_t)vzip2q_s64(v110, v112);
        v115 = vmlaq_laneq_f64(vmulq_n_f64(v113, *(double *)v23->i64), _Q30, *(float64x2_t *)v23, 1);
        v116 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v93, v291), (int64x2_t)vaddq_f64(_Q17, v292));
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v113, v96.f64[0]), _Q30, v96, 1);
        v118 = vmlaq_laneq_f64(vmulq_n_f64(v113, _Q3.f64[0]), _Q30, _Q3, 1);
        _Q30.f64[0] = *(float64_t *)(a1 + 552);
        _Q8 = vmlaq_n_f64(v115, v116, _Q5.f64[0]);
        _Q31 = vmlaq_n_f64(v117, v116, v95);
        _Q10 = vmlaq_n_f64(v118, v116, _Q30.f64[0]);
        v116.f64[0] = v298 * *(double *)v335.i64 + v295 * v106 + v80.f64[0] * v336;
        *(_QWORD *)&v116.f64[0] = *(_OWORD *)&vaddq_f64(v116, v293);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q5.f64[0], v116.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v95, v116.f64[0]);
        v122 = vmlad_n_f64(_D2, _Q30.f64[0], v116.f64[0]);
        v123 = (float64x2_t)vzip1q_s64(*v23, (int64x2_t)v96);
        _Q16 = (float64x2_t)vzip2q_s64(*v23, (int64x2_t)v96);
        _Q5.f64[1] = v95;
        _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, _Q8.f64[0]), _Q16, _Q8, 1), _Q5, _Q18.f64[0]);
        _Q8.f64[0] = _Q8.f64[1];
        __asm { FMLA            D6, D8, V3.D[1] }
        v127 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        v128 = vmlaq_laneq_f64(vmulq_n_f64(v123, _Q31.f64[0]), _Q16, _Q31, 1);
        _Q31.f64[0] = _Q31.f64[1];
        __asm { FMLA            D8, D31, V3.D[1] }
        _Q18 = vmlaq_n_f64(v128, _Q5, _Q22.f64[0]);
        _Q22.f64[0] = _Q8.f64[0] + _Q30.f64[0] * _Q22.f64[0];
        _Q8.f64[0] = *(float64_t *)(a1 + 568);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, _Q10.f64[0]), _Q16, _Q10, 1), _Q5, v122);
        _Q16.f64[0] = _Q10.f64[1];
        __asm { FMLA            D5, D16, V3.D[1] }
        v131 = _Q5.f64[0] + _Q30.f64[0] * v122;
        __asm
        {
          FMLA            D30, D8, V25.D[1]
          FMLA            D10, D8, V18.D[1]
          FMLA            D16, D8, V17.D[1]
        }
        v79 = v283;
        v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q25.f64[0]), (float64x2_t)xmmword_2102DD520, _Q25, 1), (float64x2_t)0, v127);
        v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1), (float64x2_t)0, _Q22.f64[0]);
        v134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q17.f64[0]), (float64x2_t)xmmword_2102DD520, _Q17, 1), (float64x2_t)0, v131);
        v135 = vmlaq_laneq_f64(vmulq_n_f64(v339, v132.f64[0]), v340, v132, 1);
        v136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v133.f64[0]), v340, v133, 1), v341, _Q22.f64[0] + _Q10.f64[0]);
        v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v134.f64[0]), v340, v134, 1), v341, v131 + _Q16.f64[0]);
        v75 = v282;
        v87 = v328;
        *(float64x2_t *)a5 = vmlaq_n_f64(v135, v341, v127 + _Q30.f64[0]);
        *(float64x2_t *)(a5 + 16) = v136;
        v86 = v106;
        v82 = v284;
        _Q22.f64[0] = v286;
        *(float64x2_t *)(a5 + 32) = v137;
        v77 = v280;
        v67 = v281;
      }
      v285 = *(double *)v92.i64;
      v287 = v90.f64[0];
      *(_QWORD *)&v90.f64[0] = v88.i64[0];
      if (a6)
      {
        v138 = v82;
        v139 = *(double *)v85.i64;
        v140 = v89;
        v141 = v87;
        v142.f64[0] = 0.0;
        v142.f64[1] = v338;
        *(_QWORD *)&_Q21.f64[1] = v67;
        v143 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
        *(_QWORD *)&v42.f64[1] = v143.i64[0];
        v144 = vaddq_f64(v42, _Q21);
        v145 = vaddq_f64(v296, v288);
        v74.f64[1] = v75.f64[0];
        *(_QWORD *)&v76.f64[1] = v77;
        v143.i64[0] = *(_QWORD *)(a1 + 504);
        v146.i64[1] = v138.i64[1];
        v147 = vmlaq_n_f64(vmulq_n_f64(v74, _Q22.f64[0]), v76, *(double *)v138.i64);
        _Q21.f64[0] = v298 * _Q22.f64[0] + v295 * *(double *)v138.i64;
        v148 = vmlaq_n_f64(vmulq_n_f64(v74, *(double *)v83.i64), v76, v84);
        v149 = v298 * *(double *)v83.i64 + v295 * v84;
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v74, v139), v76, v86);
        v146.i64[0] = *(_QWORD *)(a1 + 528);
        v151 = *(float64x2_t *)(a1 + 512);
        v152 = v298 * v139 + v295 * v86;
        v75.f64[0] = *(float64_t *)(a1 + 552);
        _Q20 = *(float64x2_t *)(a1 + 536);
        *(_QWORD *)&v78.f64[1] = v79;
        v154 = (float64x2_t)vzip1q_s64(*v23, (int64x2_t)v151);
        v155 = vmlaq_n_f64(v147, v78, v141);
        v156.f64[1] = v80.f64[1];
        _Q21.f64[0] = _Q21.f64[0] + v80.f64[0] * v141;
        v157 = (float64x2_t)vextq_s8((int8x16_t)_Q20, v143, 8uLL);
        v158 = vmlaq_n_f64(v148, v78, v140);
        v76.f64[0] = v149 + v80.f64[0] * v140;
        v159.f64[0] = v285;
        v160 = (float64x2_t)vzip2q_s64(*v23, (int64x2_t)v151);
        v156.f64[0] = v152 + v80.f64[0] * v91;
        v159.f64[1] = v294;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v78, v91), v159);
        _D29 = *(_QWORD *)(a1 + 496);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(a1 + 520);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(a1 + 544);
        __asm { FMLA            D30, D31, V27.D[1] }
        v166 = (float64x2_t)vextq_s8((int8x16_t)v157, v146, 8uLL);
        v167 = vmulq_f64(v145, v157);
        v168 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v160, v145.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v143, (int64x2_t)v146), v144, 1);
        v169 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v144, v75.f64[0]), v145, _Q20);
        v170 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v166, v144.f64[0]), v154, v145.f64[0], 0);
        *(_QWORD *)&v90.f64[1] = v289;
        v171.f64[0] = v287;
        v171.f64[1] = v290;
        v172 = (int64x2_t)vaddq_f64(v155, v90);
        v173 = (int64x2_t)vaddq_f64(v158, v171);
        v174 = (float64x2_t)vzip1q_s64(v172, v173);
        v175 = (float64x2_t)vzip2q_s64(v172, v173);
        v176 = vmlaq_laneq_f64(vmulq_n_f64(v174, *(double *)v23->i64), v175, *(float64x2_t *)v23, 1);
        v177 = vmlaq_laneq_f64(vmulq_n_f64(v174, v151.f64[0]), v175, v151, 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v174, _Q20.f64[0]), v175, _Q20, 1);
        v179 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v144, 1), v144, _Q20, 1);
        v180 = vmlsq_lane_f64(vmulq_laneq_f64(v154, v144, 1), v160, v144.f64[0], 0);
        v181 = (int64x2_t)vmlsq_laneq_f64(v167, v75, v144, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v156, v293);
        v182 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v291), (int64x2_t)vaddq_f64(v76, v292));
        _Q4 = vmlaq_n_f64(v176, v182, *(double *)v143.i64);
        v184 = vmlad_n_f64(_D22, *(double *)v143.i64, _Q20.f64[0]);
        _Q5 = v337;
        v186 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v338);
        _Q7 = vmlaq_n_f64(v177, v182, *(double *)v146.i64);
        v188 = vmlad_n_f64(_D29, *(double *)v146.i64, _Q20.f64[0]);
        v189 = vnegq_f64(v337);
        _Q6 = vmlaq_n_f64(v178, v182, v75.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v75.f64[0], _Q20.f64[0]);
        v191 = vmlaq_laneq_f64(vmulq_n_f64(v142, _Q4.f64[0]), (float64x2_t)v186, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v193 = vmlaq_laneq_f64(vmulq_n_f64(v142, _Q7.f64[0]), (float64x2_t)v186, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v194 = vmlaq_laneq_f64(vmulq_n_f64(v142, _Q6.f64[0]), (float64x2_t)v186, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v196 = (float64x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v189, 8uLL);
        _Q7.f64[0] = _D18 + v184 * 0.0;
        v189.f64[0] = _Q20.f64[0] + v188 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v168, v170), vmlaq_n_f64(v191, v196, v184));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v180, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v168, v170), vmlaq_n_f64(v193, v196, v188));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v180, 1), v189);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v181, v169), vmlaq_n_f64(v194, v196, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v179, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
    return v22;
  }
  sub_20EB2BB94(&v319);
  if (**(int **)(v319 + 56) > 2)
    return v22;
  v51 = *(unsigned __int8 *)(v319 + 72);
  v52 = *(_BYTE *)(v319 + 72) != 0;
  v53 = sub_20E8C31DC(v319, "OSLogSurrogateAppender", 1, 0);
  if (((v53 == 0) & ~v52) != 0)
    return v22;
  sub_20E863438((uint64_t)v309);
  v54 = sub_20E86A980(v310, (uint64_t)"failed to unproject: xd=", 24);
  v55 = sub_20EB31B20(v54, *(__n128 *)a3);
  v56 = sub_20E86A980(v55, (uint64_t)", xc=", 5);
  *(_QWORD *)v351 = &v342;
  sub_20EB1A104(v56, (__int128 **)v351);
  if ((v317 & 0x10) != 0)
  {
    v198 = v316;
    if (v316 < v313)
    {
      v316 = v313;
      v198 = v313;
    }
    v199 = (const void **)&v312;
  }
  else
  {
    if ((v317 & 8) == 0)
    {
      v57 = 0;
      HIBYTE(v308) = 0;
      v58 = __dst;
      goto LABEL_41;
    }
    v199 = (const void **)v311;
    v198 = v311[2];
  }
  v200 = *v199;
  v57 = v198 - (_QWORD)*v199;
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v57 >= 0x17)
  {
    v201 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v201 = v57 | 7;
    v202 = v201 + 1;
    v58 = (void **)operator new(v201 + 1);
    __dst[1] = (void *)v57;
    v308 = v202 | 0x8000000000000000;
    __dst[0] = v58;
    goto LABEL_40;
  }
  HIBYTE(v308) = v198 - *(_BYTE *)v199;
  v58 = __dst;
  if (v57)
LABEL_40:
    memmove(v58, v200, v57);
LABEL_41:
  *((_BYTE *)v58 + v57) = 0;
  v300[0] = &v319;
  v300[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v300[2] = std::chrono::system_clock::now().__d_.__rep_;
  v301 = 2;
  v302 = "unknown file";
  v303 = 685;
  v305 = 0;
  v306 = 0;
  v304 = "unknown function";
  if (v308 >= 0)
    v203 = (const char *)__dst;
  else
    v203 = (const char *)__dst[0];
  v204 = *(_QWORD *)v300[0];
  v205 = (const char *)(*(_QWORD *)v300[0] + 16);
  v299 = v205;
  if (*(char *)(*(_QWORD *)v300[0] + 39) < 0)
  {
    v205 = *(const char **)(v204 + 16);
    v206 = *(_QWORD *)(v204 + 24);
  }
  else
  {
    v206 = *(unsigned __int8 *)(*(_QWORD *)v300[0] + 39);
  }
  v207 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v207 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v351);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v351);
    if ((_BYTE)v352 && (v351[23] & 0x80000000) != 0)
      operator delete(*(void **)v351);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v208 = byte_254A4A4F8;
  else
    v208 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v209 = byte_254A4A4F8[23];
  else
    v209 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v351 = os_log_create(v208, v205);
  v210 = &v351[8];
  if (v209 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v209 >= 0x17)
  {
    v297 = v205;
    v211 = v204;
    v212 = v53;
    v213 = v203;
    v214 = v51;
    v215 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17)
      v215 = v209 | 7;
    v216 = v215 + 1;
    v210 = operator new(v215 + 1);
    *(_QWORD *)&v351[16] = v209;
    *(_QWORD *)&v352 = v216 | 0x8000000000000000;
    *(_QWORD *)&v351[8] = v210;
    v51 = v214;
    v203 = v213;
    v53 = v212;
    v204 = v211;
    v205 = v297;
    goto LABEL_61;
  }
  BYTE7(v352) = v209;
  if (v209)
LABEL_61:
    memmove(v210, v208, v209);
  v210[v209] = 0;
  BYTE8(v352) = 1;
  v217 = v353;
  if (v206 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v206 >= 0x17)
  {
    v218 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v206 | 7) != 0x17)
      v218 = v206 | 7;
    v219 = v218 + 1;
    v217 = (void **)operator new(v218 + 1);
    v353[1] = (void *)v206;
    v354 = v219 | 0x8000000000000000;
    v353[0] = v217;
    goto LABEL_69;
  }
  HIBYTE(v354) = v206;
  if (v206)
LABEL_69:
    memmove(v217, v205, v206);
  *((_BYTE *)v217 + v206) = 0;
  v355 = 1;
  v220 = *(NSObject **)v351;
  if (SHIBYTE(v354) < 0)
    operator delete(v353[0]);
  if (BYTE8(v352) && SBYTE7(v352) < 0)
    operator delete(*(void **)&v351[8]);
  if (*(_QWORD *)v351)
    os_release(*(void **)v351);
  if (!v53 || !*(_QWORD *)(v53 + 24))
  {
    os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v351 = 136315138;
    *(_QWORD *)&v351[4] = v203;
    v227 = (void *)_os_log_send_and_compose_impl();
    if (v227)
      free(v227);
    goto LABEL_149;
  }
  v221 = _os_log_pack_size();
  v222 = (std::__shared_weak_count_vtbl *)operator new(v221, (std::align_val_t)8uLL);
  v223 = (std::__shared_weak_count *)operator new();
  v223->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v223->__shared_owners_ = 0;
  v223->__shared_weak_owners_ = 0;
  v223[1].__vftable = v222;
  *(_QWORD *)&v344 = v222;
  *((_QWORD *)&v344 + 1) = v222;
  v347 = 0;
  v345 = v223;
  v346 = 0;
  v224 = strlen(v203);
  if (v224 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v225 = v224;
  if (v224 >= 0x17)
  {
    v228 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17)
      v228 = v224 | 7;
    v229 = v228 + 1;
    v226 = operator new(v228 + 1);
    *((_QWORD *)&v349 + 1) = v229 | 0x8000000000000000;
    v348 = v226;
    *(_QWORD *)&v349 = v225;
    goto LABEL_88;
  }
  HIBYTE(v349) = v224;
  v226 = &v348;
  if (v224)
LABEL_88:
    memcpy(v226, v203, v225);
  *((_BYTE *)v226 + v225) = 0;
  v230 = v348;
  v356[0] = v349;
  *(_QWORD *)((char *)v356 + 7) = *(_QWORD *)((char *)&v349 + 7);
  v231 = HIBYTE(v349);
  v232 = operator new(0x38uLL);
  v232[1] = 0;
  v232[2] = 0;
  v232[3] = off_24C9ABC20;
  *v232 = &off_24C9ABBD0;
  v233 = v356[0];
  v232[4] = v230;
  v232[5] = v233;
  *(_QWORD *)((char *)v232 + 47) = *(_QWORD *)((char *)v356 + 7);
  *((_BYTE *)v232 + 55) = v231;
  v356[0] = 0;
  *(_QWORD *)((char *)v356 + 7) = 0;
  v234 = v347;
  v346 = (char *)(v232 + 3);
  v347 = (std::__shared_weak_count *)v232;
  if (v234)
  {
    p_shared_owners = (unint64_t *)&v234->__shared_owners_;
    do
      v236 = __ldaxr(p_shared_owners);
    while (__stlxr(v236 - 1, p_shared_owners));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  *(_OWORD *)v351 = v344;
  v237 = v346;
  *(_QWORD *)&v351[16] = v345;
  if (v345)
  {
    v238 = (unint64_t *)&v345->__shared_owners_;
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
  }
  v240 = v347;
  *(_QWORD *)&v352 = v237;
  *((_QWORD *)&v352 + 1) = v347;
  if (v347)
  {
    v241 = (unint64_t *)&v347->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
    v353[0] = v237;
    do
      v243 = __ldaxr(v241);
    while (__stlxr(v243 - 1, v241));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  else
  {
    v353[0] = v237;
  }
  v244 = v345;
  if (v345)
  {
    v245 = (unint64_t *)&v345->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = *(_QWORD *)v351;
  if (*((char *)v353[0] + 31) >= 0)
    v248 = (char *)v353[0] + 8;
  else
    v248 = (char *)*((_QWORD *)v353[0] + 1);
  v249 = _os_log_pack_fill();
  *(_DWORD *)v249 = 136315138;
  *(_QWORD *)(v249 + 4) = v248;
  v250 = operator new();
  v251 = *(unsigned __int8 *)(v204 + 39);
  v252 = *(const char **)(v204 + 16);
  v253 = *(_QWORD *)(v204 + 24);
  v254 = v352;
  *(_OWORD *)(v250 + 8) = *(_OWORD *)&v351[8];
  if ((v251 & 0x80u) != 0)
    v251 = v253;
  else
    v252 = v299;
  *(_QWORD *)v250 = v247;
  *(_QWORD *)&v351[8] = 0;
  *(_QWORD *)&v351[16] = 0;
  *(_OWORD *)(v250 + 24) = v254;
  v352 = 0uLL;
  *(_QWORD *)(v250 + 40) = v252;
  *(_QWORD *)(v250 + 48) = v251;
  *(_BYTE *)(v250 + 56) = 2;
  v348 = 0;
  *(_QWORD *)&v344 = v250;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v53 + 24) + 40))(*(_QWORD *)(v53 + 24), &v344);
  v255 = v344;
  *(_QWORD *)&v344 = 0;
  if (v255)
  {
    v256 = *(std::__shared_weak_count **)(v255 + 32);
    if (v256)
    {
      v257 = (unint64_t *)&v256->__shared_owners_;
      do
        v258 = __ldaxr(v257);
      while (__stlxr(v258 - 1, v257));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
      }
    }
    v259 = *(std::__shared_weak_count **)(v255 + 16);
    if (v259)
    {
      v260 = (unint64_t *)&v259->__shared_owners_;
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    MEMORY[0x212BC6398](v255, 0x10F0C40B62ED6C6);
    v262 = v348;
    v348 = 0;
    if (v262)
    {
      v263 = (std::__shared_weak_count *)v262[4];
      if (v263)
      {
        v264 = (unint64_t *)&v263->__shared_owners_;
        do
          v265 = __ldaxr(v264);
        while (__stlxr(v265 - 1, v264));
        if (!v265)
        {
          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
      v266 = (std::__shared_weak_count *)v262[2];
      if (v266)
      {
        v267 = (unint64_t *)&v266->__shared_owners_;
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
          std::__shared_weak_count::__release_weak(v266);
        }
      }
      MEMORY[0x212BC6398](v262, 0x10F0C40B62ED6C6);
    }
  }
  v269 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (*((_QWORD *)&v352 + 1))
  {
    v270 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = *(std::__shared_weak_count **)&v351[16];
  if (*(_QWORD *)&v351[16])
  {
    v273 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
LABEL_149:
  if (v51)
  {
    v275 = (const char *)__dst;
    if (v308 < 0)
      v275 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v300, "%s", v275);
    sub_20E863570((uint64_t)v300);
  }
  sub_20E863570((uint64_t)v300);
  v276 = v306;
  if (v306)
  {
    v277 = (unint64_t *)&v306->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (SHIBYTE(v308) < 0)
    operator delete(__dst[0]);
  v309[0] = *MEMORY[0x24BEDB7F0];
  v279 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v309 + *(_QWORD *)(v309[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v310[0] = v279;
  v310[1] = MEMORY[0x24BEDB848] + 16;
  if (v315 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v318);
  return v22;
}

void sub_20EB319A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 232) && *(char *)(v66 - 233) < 0)
    operator delete(*(void **)(v66 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  if (a65 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a66);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB31B20(uint64_t *a1, __n128 a2)
{
  char *v3;
  int v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void *p_p;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  void *__p;
  size_t v38;
  int64_t v39;
  std::string __b;
  std::string v41;
  void *v42[2];
  int64_t v43;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_DWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    p_p = operator new(v17 + 1);
    v38 = v6;
    v39 = v18 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v39) = v6;
  p_p = &__p;
  if (v6)
LABEL_20:
    memset(p_p, 32, v6);
  *((_BYTE *)p_p + v6) = 0;
  if (v39 >= 0)
    v19 = (const std::string::value_type *)&__p;
  else
    v19 = (const std::string::value_type *)__p;
  if (v39 >= 0)
    v20 = HIBYTE(v39);
  else
    v20 = v38;
  v21 = std::string::append(&v41, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v43 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)v42 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_42:
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  operator delete(__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_29:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
LABEL_43:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v41.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v41, 1);
  v23 = a1 + 1;
  v25 = a1 + 2;
  v24 = *a1;
  v26 = (int)v7 + (int)v6 + 1;
  v27 = (int)v6 - 3;
  v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v28[9] & 1) != 0)
  {
    if (a2.n128_f64[0] != 0.0)
    {
      *((_QWORD *)v28 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = v27;
      std::ostream::operator<<();
      goto LABEL_45;
    }
  }
  else if (fabs(a2.n128_f64[0]) >= v10)
  {
    *((_QWORD *)v28 + 3) = v26;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v24 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = (int)v6;
    std::ostream::operator<<();
    goto LABEL_45;
  }
  if (v43 >= 0)
    v29 = v42;
  else
    v29 = (void **)v42[0];
  if (v43 >= 0)
    v30 = HIBYTE(v43);
  else
    v30 = (uint64_t)v42[1];
  sub_20E86A980(a1, (uint64_t)v29, v30);
LABEL_45:
  v41.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v41, 1);
  v31 = *a1;
  v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v32[9] & 1) == 0)
  {
    if (fabs(a2.n128_f64[1]) >= v10)
    {
      *((_QWORD *)v32 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v31 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v31 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_57;
    }
LABEL_49:
    if (v43 >= 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if (v43 >= 0)
      v34 = HIBYTE(v43);
    else
      v34 = (uint64_t)v42[1];
    sub_20E86A980(a1, (uint64_t)v33, v34);
    goto LABEL_57;
  }
  if (a2.n128_f64[1] == 0.0)
    goto LABEL_49;
  *((_QWORD *)v32 + 3) = v26;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) |= 0x400u;
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v31 - 24)) = v27;
  std::ostream::operator<<();
LABEL_57:
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
  return a1;
}

void sub_20EB31F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB31FFC(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  double v8;
  double v17;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  uint64_t v28;
  float64x2_t v30;
  double v31;
  double v33;
  int v34;
  double v35;
  int v36;
  double v37;
  float64x2_t v38;
  double v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t *v43;
  size_t v44;
  void **v45;
  float64x2_t v46;
  unint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  const char *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  const char *v59;
  size_t v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  size_t v76;
  size_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  const char *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  const char *v130;
  _QWORD v131[3];
  int v132;
  const char *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *__dst[2];
  int64_t v139;
  _QWORD v140[2];
  _QWORD v141[2];
  const void *v142;
  uint64_t v143;
  const void *v144;
  unint64_t v145;
  void *__p;
  char v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int8x16_t v152;
  double v153;
  char v154;
  float64x2_t v155;
  double v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  char *v159;
  std::__shared_weak_count *v160;
  _QWORD *v161;
  __int128 v162;
  _BYTE v163[24];
  __int128 v164;
  void *v165[2];
  unint64_t v166;
  char v167;
  _QWORD v168[5];
  float64x2x3_t v169;

  v168[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 488;
  _D2 = *(_QWORD *)(a1 + 528);
  v7 = *(double *)(a1 + 552);
  v8 = a3[1].f64[0];
  _Q7 = *a3;
  __asm { FMLA            D0, D2, V7.D[1] }
  v155 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), a3->f64[0]), *(float64x2_t *)(a1 + 512), *a3, 1), *(float64x2_t *)(a1 + 536), v8);
  v156 = _D0 + v7 * v8;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 472), (uint64_t)&v155, 30, 0, 0, &v152, 0.00000001, v155);
  if (!v154)
  {
    sub_20EB2BB94(&v151);
    if (**(int **)(v151 + 56) > 2)
      return 0;
    v40 = *(unsigned __int8 *)(v151 + 72);
    v41 = *(_BYTE *)(v151 + 72) != 0;
    v42 = sub_20E8C31DC(v151, "OSLogSurrogateAppender", 1, 0);
    if (((v42 == 0) & ~v41) != 0)
      return 0;
    sub_20E863438((uint64_t)v140);
    v43 = sub_20E86A980(v141, (uint64_t)"failed to project: xc=", 22);
    *(_QWORD *)v163 = &v155;
    sub_20EB32EA4(v43, (__int128 **)v163);
    if ((v149 & 0x10) != 0)
    {
      v48 = v148;
      if (v148 < v145)
      {
        v148 = v145;
        v48 = v145;
      }
      v49 = v144;
      v44 = v48 - (_QWORD)v144;
      if (v48 - (unint64_t)v144 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_95;
    }
    else
    {
      if ((v149 & 8) == 0)
      {
        v44 = 0;
        HIBYTE(v139) = 0;
        v45 = __dst;
        goto LABEL_50;
      }
      v49 = v142;
      v44 = v143 - (_QWORD)v142;
      if ((unint64_t)(v143 - (_QWORD)v142) > 0x7FFFFFFFFFFFFFF7)
LABEL_95:
        sub_20E860B7C();
    }
    if (v44 >= 0x17)
    {
      v50 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v50 = v44 | 7;
      v51 = v50 + 1;
      v45 = (void **)operator new(v50 + 1);
      __dst[1] = (void *)v44;
      v139 = v51 | 0x8000000000000000;
      __dst[0] = v45;
    }
    else
    {
      HIBYTE(v139) = v44;
      v45 = __dst;
      if (!v44)
      {
LABEL_50:
        *((_BYTE *)v45 + v44) = 0;
        v131[0] = &v151;
        v131[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v131[2] = std::chrono::system_clock::now().__d_.__rep_;
        v132 = 2;
        v133 = "unknown file";
        v134 = 727;
        v136 = 0;
        v137 = 0;
        v135 = "unknown function";
        if (v139 >= 0)
          v52 = (const char *)__dst;
        else
          v52 = (const char *)__dst[0];
        v53 = *(_QWORD *)v131[0];
        v54 = *(_QWORD *)v131[0] + 16;
        if (*(char *)(*(_QWORD *)v131[0] + 39) < 0)
        {
          v56 = *(const char **)(v53 + 16);
          v55 = *(_QWORD *)(v53 + 24);
          v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v58 & 1) != 0)
            goto LABEL_57;
        }
        else
        {
          v55 = *(unsigned __int8 *)(*(_QWORD *)v131[0] + 39);
          v56 = (const char *)(*(_QWORD *)v131[0] + 16);
          v57 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v57 & 1) != 0)
            goto LABEL_57;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v163);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v163);
          if ((_BYTE)v164 && (v163[23] & 0x80000000) != 0)
            operator delete(*(void **)v163);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_57:
        if (byte_254A4A4F8[23] >= 0)
          v59 = byte_254A4A4F8;
        else
          v59 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v60 = byte_254A4A4F8[23];
        else
          v60 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v163 = os_log_create(v59, v56);
        v61 = &v163[8];
        if (v60 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v60 >= 0x17)
        {
          v130 = v56;
          v62 = v42;
          v63 = v53;
          v64 = v52;
          v65 = v40;
          v66 = v54;
          v67 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v67 = v60 | 7;
          v68 = v67 + 1;
          v61 = operator new(v67 + 1);
          *(_QWORD *)&v163[16] = v60;
          *(_QWORD *)&v164 = v68 | 0x8000000000000000;
          *(_QWORD *)&v163[8] = v61;
          v54 = v66;
          v40 = v65;
          v52 = v64;
          v53 = v63;
          v42 = v62;
          v56 = v130;
        }
        else
        {
          BYTE7(v164) = v60;
          if (!v60)
          {
LABEL_71:
            v61[v60] = 0;
            BYTE8(v164) = 1;
            v69 = v165;
            if (v55 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v55 >= 0x17)
            {
              v70 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17)
                v70 = v55 | 7;
              v71 = v70 + 1;
              v69 = (void **)operator new(v70 + 1);
              v165[1] = (void *)v55;
              v166 = v71 | 0x8000000000000000;
              v165[0] = v69;
            }
            else
            {
              HIBYTE(v166) = v55;
              if (!v55)
              {
LABEL_79:
                *((_BYTE *)v69 + v55) = 0;
                v167 = 1;
                v72 = *(NSObject **)v163;
                if (SHIBYTE(v166) < 0)
                  operator delete(v165[0]);
                if (BYTE8(v164) && SBYTE7(v164) < 0)
                  operator delete(*(void **)&v163[8]);
                if (*(_QWORD *)v163)
                  os_release(*(void **)v163);
                if (!v42 || !*(_QWORD *)(v42 + 24))
                {
                  os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v163 = 136315138;
                  *(_QWORD *)&v163[4] = v52;
                  v79 = (void *)_os_log_send_and_compose_impl();
                  if (v79)
                    free(v79);
                  goto LABEL_162;
                }
                v73 = _os_log_pack_size();
                v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
                v75 = (std::__shared_weak_count *)operator new();
                v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v75->__shared_owners_ = 0;
                v75->__shared_weak_owners_ = 0;
                v75[1].__vftable = v74;
                *(_QWORD *)&v157 = v74;
                *((_QWORD *)&v157 + 1) = v74;
                v159 = 0;
                v160 = 0;
                v158 = v75;
                v76 = strlen(v52);
                if (v76 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v77 = v76;
                if (v76 >= 0x17)
                {
                  v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v76 | 7) != 0x17)
                    v80 = v76 | 7;
                  v81 = v80 + 1;
                  v78 = operator new(v80 + 1);
                  *(_QWORD *)&v162 = v77;
                  *((_QWORD *)&v162 + 1) = v81 | 0x8000000000000000;
                  v161 = v78;
                }
                else
                {
                  HIBYTE(v162) = v76;
                  v78 = &v161;
                  if (!v76)
                  {
LABEL_100:
                    *((_BYTE *)v78 + v77) = 0;
                    v82 = v161;
                    v168[0] = v162;
                    *(_QWORD *)((char *)v168 + 7) = *(_QWORD *)((char *)&v162 + 7);
                    v83 = HIBYTE(v162);
                    v84 = operator new(0x38uLL);
                    v84[1] = 0;
                    v84[2] = 0;
                    v84[3] = off_24C9ABC20;
                    *v84 = &off_24C9ABBD0;
                    v85 = v168[0];
                    v84[4] = v82;
                    v84[5] = v85;
                    *(_QWORD *)((char *)v84 + 47) = *(_QWORD *)((char *)v168 + 7);
                    *((_BYTE *)v84 + 55) = v83;
                    v168[0] = 0;
                    *(_QWORD *)((char *)v168 + 7) = 0;
                    v86 = v160;
                    v159 = (char *)(v84 + 3);
                    v160 = (std::__shared_weak_count *)v84;
                    if (v86)
                    {
                      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(p_shared_owners);
                      while (__stlxr(v88 - 1, p_shared_owners));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    *(_OWORD *)v163 = v157;
                    v89 = v159;
                    *(_QWORD *)&v163[16] = v158;
                    if (v158)
                    {
                      v90 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                    }
                    v92 = v160;
                    *(_QWORD *)&v164 = v89;
                    *((_QWORD *)&v164 + 1) = v160;
                    if (v160)
                    {
                      v93 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v94 = __ldxr(v93);
                      while (__stxr(v94 + 1, v93));
                      v165[0] = v89;
                      do
                        v95 = __ldaxr(v93);
                      while (__stlxr(v95 - 1, v93));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                        std::__shared_weak_count::__release_weak(v92);
                      }
                    }
                    else
                    {
                      v165[0] = v89;
                    }
                    v96 = v158;
                    if (v158)
                    {
                      v97 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    v99 = *(_QWORD *)v163;
                    if (*((char *)v165[0] + 31) >= 0)
                      v100 = (char *)v165[0] + 8;
                    else
                      v100 = (char *)*((_QWORD *)v165[0] + 1);
                    v101 = _os_log_pack_fill();
                    *(_DWORD *)v101 = 136315138;
                    *(_QWORD *)(v101 + 4) = v100;
                    v102 = operator new();
                    v103 = *(unsigned __int8 *)(v53 + 39);
                    if ((v103 & 0x80u) == 0)
                      v104 = v54;
                    else
                      v104 = *(_QWORD *)(v53 + 16);
                    if ((v103 & 0x80u) != 0)
                      v103 = *(_QWORD *)(v53 + 24);
                    *(_QWORD *)v102 = v99;
                    *(_OWORD *)(v102 + 8) = *(_OWORD *)&v163[8];
                    *(_QWORD *)&v163[8] = 0;
                    *(_QWORD *)&v163[16] = 0;
                    *(_OWORD *)(v102 + 24) = v164;
                    v164 = 0uLL;
                    *(_QWORD *)(v102 + 40) = v104;
                    *(_QWORD *)(v102 + 48) = v103;
                    *(_BYTE *)(v102 + 56) = 2;
                    v161 = 0;
                    *(_QWORD *)&v157 = v102;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), &v157);
                    v105 = v157;
                    *(_QWORD *)&v157 = 0;
                    if (v105)
                    {
                      v106 = *(std::__shared_weak_count **)(v105 + 32);
                      if (v106)
                      {
                        v107 = (unint64_t *)&v106->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      v109 = *(std::__shared_weak_count **)(v105 + 16);
                      if (v109)
                      {
                        v110 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
                      v112 = v161;
                      v161 = 0;
                      if (v112)
                      {
                        v113 = (std::__shared_weak_count *)v112[4];
                        if (v113)
                        {
                          v114 = (unint64_t *)&v113->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        v116 = (std::__shared_weak_count *)v112[2];
                        if (v116)
                        {
                          v117 = (unint64_t *)&v116->__shared_owners_;
                          do
                            v118 = __ldaxr(v117);
                          while (__stlxr(v118 - 1, v117));
                          if (!v118)
                          {
                            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                            std::__shared_weak_count::__release_weak(v116);
                          }
                        }
                        MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
                      }
                    }
                    v119 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
                    if (*((_QWORD *)&v164 + 1))
                    {
                      v120 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    v122 = *(std::__shared_weak_count **)&v163[16];
                    if (*(_QWORD *)&v163[16])
                    {
                      v123 = (unint64_t *)(*(_QWORD *)&v163[16] + 8);
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
LABEL_162:
                    if (v40)
                    {
                      v125 = (const char *)__dst;
                      if (v139 < 0)
                        v125 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v131, "%s", v125);
                      sub_20E863570((uint64_t)v131);
                    }
                    sub_20E863570((uint64_t)v131);
                    v126 = v137;
                    if (v137)
                    {
                      v127 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    if (SHIBYTE(v139) < 0)
                      operator delete(__dst[0]);
                    v140[0] = *MEMORY[0x24BEDB7F0];
                    v129 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v140 + *(_QWORD *)(v140[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v141[0] = v129;
                    v141[1] = MEMORY[0x24BEDB848] + 16;
                    if (v147 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v150);
                    return 0;
                  }
                }
                memcpy(v78, v52, v77);
                goto LABEL_100;
              }
            }
            memmove(v69, v56, v55);
            goto LABEL_79;
          }
        }
        memmove(v61, v59, v60);
        goto LABEL_71;
      }
    }
    memmove(v45, v49, v44);
    goto LABEL_50;
  }
  _Q3 = *(_OWORD *)(v5 + 48);
  _D5 = v152.i64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v17 = _D4 + *(double *)(v5 + 64) * v153;
  if (v17 >= 0.0)
  {
    v169 = vld3q_f64((const double *)v5);
    _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169.val[0], *(double *)v152.i64), v169.val[1], *(double *)vextq_s8(v152, v152, 8uLL).i64), v169.val[2], v153), vmulq_n_f64(*(float64x2_t *)(a1 + 560), v17));
    _D1 = _Q0.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v21 = sqrt(_D6);
    v22 = fabs(v17);
    v23 = fabs(v21);
    v24 = v22 / v23;
    if (v22 >= v23)
      v24 = v23 / v22;
    if (v24 <= 0.414213562)
    {
      v26 = 1;
      v27 = 2;
      v25 = v24;
      if (_D6 >= 0.00000001)
      {
LABEL_9:
        v28 = *(_QWORD *)&v17;
        if (v22 < v23)
          v26 = -v26;
        else
          v27 = v24 > 0.414213562;
        _ZF = v21 == INFINITY && v22 == INFINITY;
        v30 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v25 * v25), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v25 * v25), (float64x2_t)xmmword_210315370), v25 * v25 * (v25 * v25))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v25 * v25), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v25 * v25), (float64x2_t)xmmword_210315380), v25 * v25 * (v25 * v25))), v25 * v25 * (v25 * v25) * (v25 * v25 * (v25 * v25))));
        v31 = v25 + v25 * vdivq_f64(v30, (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1)).f64[0];
        if (_ZF)
          v31 = 0.785398163;
        if (v21 == 0.0 && v17 == 0.0)
          v33 = 0.0;
        else
          v33 = v31;
        if (v28 < 0)
        {
          v27 = 4 - v27;
          v26 = -v26;
        }
        if (v21 >= 0.0)
          v34 = v27;
        else
          v34 = -v27;
        v35 = (double)v34;
        if (v21 >= 0.0)
          v36 = v26;
        else
          v36 = -v26;
        v37 = v35 * 3.061617e-17 + v35 * 0.785398163 + v33 * (double)v36;
        v38 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v37 * v37)), v37 * v37);
        v39 = 1.0 / v21 * (v37 + v37 * (v38.f64[0] + vmuld_lane_f64(v37 * v37 * (v37 * v37), v38, 1)));
        goto LABEL_39;
      }
    }
    else
    {
      v25 = (v23 - v22) / (v22 + v23);
      if (v22 >= v23)
        v25 = -v25;
      v26 = -1;
      v27 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_9;
    }
    v39 = 1.0 / v17;
LABEL_39:
    v46 = vmulq_n_f64(_Q0, v39);
    *a2 = v46;
    a2->f64[0] = *(double *)(a1 + 560) + v46.f64[0];
    a2->f64[1] = *(double *)(a1 + 568) + v46.f64[1];
    return 1;
  }
  return 0;
}

void sub_20EB32D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v4 - 184) && *(char *)(v4 - 185) < 0)
    operator delete(*(void **)(v4 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB32EA4(uint64_t *a1, __int128 **a2)
{
  double v3;
  char *v4;
  int v5;
  int64_t v6;
  size_t v7;
  size_t v8;
  double v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void **v38;
  uint64_t v39;
  __int128 v41;
  void *__p;
  size_t v43;
  int64_t v44;
  std::string __b;
  std::string v46;
  void *v47[2];
  int64_t v48;

  v3 = *((double *)*a2 + 2);
  v41 = **a2;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v6)
  {
    if (v6 <= (uint64_t)(v7 + 2))
      v6 = v7 + 2;
    v8 = v6 + ~v7;
    v9 = __exp10((double)-(uint64_t)v7);
    v10 = v8 - 1;
    if (v8 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v11 = v9;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v8 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v8 - 1;
      p_b = &__b;
      if (v8 == 1)
      {
        LODWORD(v8) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v7);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v8) = 4;
  }
  memset(p_b, 32, v10);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    p_p = operator new(v18 + 1);
    v43 = v7;
    v44 = v19 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v44) = v7;
  p_p = &__p;
  if (v7)
LABEL_20:
    memset(p_p, 32, v7);
  *((_BYTE *)p_p + v7) = 0;
  if (v44 >= 0)
    v20 = (const std::string::value_type *)&__p;
  else
    v20 = (const std::string::value_type *)__p;
  if (v44 >= 0)
    v21 = HIBYTE(v44);
  else
    v21 = v43;
  v22 = std::string::append(&v46, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v48 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v47 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_42:
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  operator delete(__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_29:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
LABEL_43:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v46.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v24 = a1 + 1;
  v26 = a1 + 2;
  v25 = *a1;
  v27 = (int)v8 + (int)v7 + 1;
  v28 = (int)v7 - 3;
  v29 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v29[9] & 1) != 0)
  {
    if (*(double *)&v41 != 0.0)
    {
      *((_QWORD *)v29 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = v28;
      std::ostream::operator<<();
      goto LABEL_45;
    }
  }
  else if (fabs(*(double *)&v41) >= v11)
  {
    *((_QWORD *)v29 + 3) = v27;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v25 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = (int)v7;
    std::ostream::operator<<();
    goto LABEL_45;
  }
  if (v48 >= 0)
    v30 = v47;
  else
    v30 = (void **)v47[0];
  if (v48 >= 0)
    v31 = HIBYTE(v48);
  else
    v31 = (uint64_t)v47[1];
  sub_20E86A980(a1, (uint64_t)v30, v31);
LABEL_45:
  v46.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v32 = *a1;
  v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v33[9] & 1) != 0)
  {
    if (*((double *)&v41 + 1) != 0.0)
    {
      *((_QWORD *)v33 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v32 - 24)) = v28;
      std::ostream::operator<<();
      goto LABEL_57;
    }
  }
  else if (fabs(*((double *)&v41 + 1)) >= v11)
  {
    *((_QWORD *)v33 + 3) = v27;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v32 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v24 + *(_QWORD *)(v32 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v26 + *(_QWORD *)(v32 - 24)) = (int)v7;
    std::ostream::operator<<();
    goto LABEL_57;
  }
  if (v48 >= 0)
    v34 = v47;
  else
    v34 = (void **)v47[0];
  if (v48 >= 0)
    v35 = HIBYTE(v48);
  else
    v35 = (uint64_t)v47[1];
  sub_20E86A980(a1, (uint64_t)v34, v35);
LABEL_57:
  v46.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v46, 1);
  v36 = *a1;
  v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v37[9] & 1) == 0)
  {
    if (fabs(v3) >= v11)
    {
      *((_QWORD *)v37 + 3) = v27;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v36 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v36 - 24)) = (int)v7;
      std::ostream::operator<<();
      goto LABEL_69;
    }
LABEL_61:
    if (v48 >= 0)
      v38 = v47;
    else
      v38 = (void **)v47[0];
    if (v48 >= 0)
      v39 = HIBYTE(v48);
    else
      v39 = (uint64_t)v47[1];
    sub_20E86A980(a1, (uint64_t)v38, v39);
    goto LABEL_69;
  }
  if (v3 == 0.0)
    goto LABEL_61;
  *((_QWORD *)v37 + 3) = v27;
  *(_DWORD *)((char *)v24 + *(_QWORD *)(v36 - 24)) |= 0x400u;
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v36 - 24)) = v28;
  std::ostream::operator<<();
LABEL_69:
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v5;
  if (SHIBYTE(v48) < 0)
    operator delete(v47[0]);
  return a1;
}

void sub_20EB333C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB3345C(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  float64x2_t v5;
  uint64_t v10;
  double v12;
  float64x2_t v14;
  float64x2_t v20;
  double v21;
  double v25;
  float64x2_t v26;
  double v27;
  int8x16_t v28;
  double v30;
  int8x16_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v39;
  double v40;
  double v43;
  double v44;
  float64x2_t v45;
  double v47;
  long double v48;
  long double v49;
  int64x2_t v50;
  int64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  long double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64_t v57;
  float64x2_t v60;
  double v61;
  double v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v68;
  float64x2_t v69;
  double v71;
  float64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v76;
  double v78;
  float64x2_t v80;
  float64x2_t v81;
  double v83;
  double v84;
  const double *v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v92;
  int8x16_t v94;
  float64x2_t v95;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  double v131;
  double v132;
  int8x16_t v133;
  double v134;
  __int128 v135;
  double v136;
  double v137;
  double v138;
  double v139;
  float64x2_t v140;
  __int128 v141;
  double v142;
  int8x16_t v143;
  double v144;
  int8x16_t v145;
  double v146;
  char v147;
  int64x2_t v148;
  float64_t v149;
  int64x2_t v150;
  float64_t v151;
  __int128 v152;
  double v153;
  float64x2_t v154;
  double v155;
  float64x2x3_t v156;

  v10 = a1 + 488;
  _D2 = *(_QWORD *)(a1 + 528);
  v12 = a4[1].f64[0];
  _Q7 = *a4;
  v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), a4->f64[0]), *(float64x2_t *)(a1 + 512), *a4, 1), *(float64x2_t *)(a1 + 536), v12);
  __asm { FMLA            D0, D2, V7.D[1] }
  v155 = _D0 + *(double *)(a1 + 552) * v12;
  v154 = v14;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 472), (uint64_t)&v154, 30, (uint64_t)&v148, 0, &v145, 0.00000001, v14);
  if (!v147)
    return 0;
  v5.f64[0] = v146;
  v20 = (float64x2_t)v145;
  v21 = *(double *)(v10 + 64);
  _Q24 = *(int8x16_t *)(v10 + 48);
  _D1 = v145.i64[1];
  __asm { FMLA            D0, D1, V24.D[1] }
  v25 = _D0 + v21 * v146;
  if (v25 < 0.0)
    return 0;
  v26 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
  v27 = *(double *)(v10 + 16);
  v28 = *(int8x16_t *)v10;
  *(_QWORD *)&_D29 = vextq_s8(v28, v28, 8uLL).u64[0];
  v30 = *(double *)(v10 + 40);
  v31 = *(int8x16_t *)(v10 + 24);
  *(_QWORD *)&_D28 = vextq_s8(v31, v31, 8uLL).u64[0];
  *(_QWORD *)&_D25 = vextq_s8(_Q24, _Q24, 8uLL).u64[0];
  v34.f64[0] = v27;
  v34.f64[1] = v30;
  v35.f64[0] = _D29;
  v35.f64[1] = _D28;
  v36.f64[0] = *(float64_t *)v10;
  v36.f64[1] = *(float64_t *)(v10 + 24);
  v37 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, *(double *)v145.i64), v35, v26.f64[0]), v34, v146);
  _Q0 = *(float64x2_t *)(a1 + 560);
  _Q26 = vsubq_f64(v37, vmulq_n_f64(_Q0, v25));
  v39 = -_Q0.f64[0];
  v40 = -*(double *)(a1 + 568);
  _Q0.f64[0] = _Q26.f64[1];
  __asm { FMLA            D2, D0, V26.D[1] }
  if (_D2 >= 0.00000001)
  {
    v144 = v39;
    v47 = v25 * v25 + _D2;
    v48 = sqrt(_D2);
    v143 = v145;
    v141 = *(_OWORD *)(v10 + 48);
    v142 = *(double *)(v10 + 64);
    v139 = _D25;
    v140 = _Q26;
    v137 = *(double *)(v10 + 16);
    v138 = *(double *)(v10 + 40);
    v135 = *(_OWORD *)(v10 + 24);
    v136 = _D28;
    v133 = *(int8x16_t *)v10;
    v134 = _D29;
    v131 = v25;
    v132 = _D2;
    v49 = atan2(v48, v25);
    v28.i64[0] = v133.i64[0];
    _D29 = v134;
    v31.i64[0] = v135;
    _D28 = v136;
    v27 = v137;
    v30 = v138;
    _D25 = v139;
    _Q26 = v140;
    _Q24.i64[0] = v141;
    v21 = v142;
    v20 = (float64x2_t)v143;
    v50 = *(int64x2_t *)(a1 + 184);
    v51 = *(int64x2_t *)(a1 + 168);
    v52 = (float64x2_t)vzip2q_s64(v51, v50);
    v53 = (float64x2_t)vzip1q_s64(v51, v50);
    v54 = v49 * v49;
    v55 = vmulq_n_f64(vaddq_f64(vmulq_f64(v53, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v52, (float64x2_t)xmmword_210312E20), v49 * v49)), v49 * v49);
    v56 = vmulq_n_f64(vaddq_f64(v53, vmulq_n_f64(v52, v49 * v49)), v49 * v49);
    v43 = (v49 + v49 * (v56.f64[0] + vmuld_lane_f64(v54 * v54, v56, 1))) / v48;
    v57 = (v55.f64[0] + vmuld_lane_f64(v54 * v54, v55, 1) + 1.0) / v47;
    v39 = v144;
    v45 = vmulq_n_f64(v140, (v131 * v57 - v43) / v132);
    v44 = -v57;
    _Q0 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
  }
  else
  {
    v43 = 1.0 / v25;
    v44 = -(v43 * v43);
    v45.f64[0] = 0.0;
    _Q0.f64[0] = 0.0;
  }
  _Q5 = vmulq_n_f64(_Q26, v43);
  *a2 = _Q5;
  v45.f64[1] = _Q0.f64[0];
  _Q1 = vmulq_n_f64(v45, _Q26.f64[0]);
  _Q0.f64[0] = v44 * _Q26.f64[0];
  v60 = vmulq_laneq_f64(v45, _Q26, 1);
  v61 = v43 + _Q1.f64[0];
  v62 = v43 + v60.f64[1];
  a2->f64[0] = *(double *)(a1 + 560) + _Q5.f64[0];
  a2->f64[1] = *(double *)(a1 + 568) + _Q5.f64[1];
  _Q5.f64[0] = v149;
  _V19.D[1] = *((_QWORD *)&v152 + 1);
  v64 = (float64x2_t)vzip1q_s64(v148, v150);
  v65 = (float64x2_t)vzip2q_s64(v148, v150);
  _Q5.f64[1] = v151;
  v66 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, *(double *)v28.i64), v65, _D29), _Q5, v27);
  __asm { FMLA            D16, D29, V19.D[1] }
  v68 = _D16 + v153 * v27;
  v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, *(double *)v31.i64), v65, _D28), _Q5, v30);
  __asm { FMLA            D22, D28, V19.D[1] }
  v71 = _D22 + v153 * v30;
  v88 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, *(double *)_Q24.i64), v65, _D25), _Q5, v21);
  __asm { FMLA            D5, D25, V19.D[1] }
  v72 = _Q5.f64[0] + v153 * v21;
  v73 = vmulq_f64(v66, (float64x2_t)0);
  v74 = vmlaq_n_f64(vmlaq_f64(v66, (float64x2_t)0, v69), v88, v39);
  _D6 = 0;
  v76 = v68 + v71 * 0.0 + v72 * v39;
  _Q24 = vmlaq_n_f64(vaddq_f64(v69, v73), v88, v40);
  v78 = v68 * 0.0;
  _D25 = v71 + v78 + v72 * v40;
  v80 = vaddq_f64(v88, vmlaq_f64(v73, (float64x2_t)0, v69));
  v88.f64[0] = v72 + v78 + v71 * 0.0;
  v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, v61), _Q24, _Q1, 1), v80, v44 * _Q26.f64[0]);
  __asm { FMLA            D18, D25, V1.D[1] }
  v83 = _D18 + v88.f64[0] * (v44 * _Q26.f64[0]);
  v84 = vmuld_lane_f64(v44, _Q26, 1);
  v85 = (const double *)v10;
  v156 = vld3q_f64(v85);
  v85 += 6;
  v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v74, v60.f64[0]), _Q24, v62), v80, v84);
  v87 = v76 * v60.f64[0] + _D25 * v62 + v88.f64[0] * v84;
  v88.f64[0] = *(float64_t *)(v10 + 64);
  _Q21 = *(_OWORD *)v85;
  v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v156.val[0], v81.f64[0]), v156.val[1], v81, 1), v156.val[2], v83);
  _Q24.f64[0] = v81.f64[1];
  __asm { FMLA            D23, D24, V21.D[1] }
  v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v156.val[0], v86.f64[0]), v156.val[1], v86, 1), v156.val[2], v87);
  v156.val[0].f64[0] = v86.f64[1];
  __asm { FMLA            D25, D26, V21.D[1] }
  *(float64x2_t *)a3 = v90;
  *(double *)(a3 + 16) = _D23 + v88.f64[0] * v83;
  *(float64x2_t *)(a3 + 24) = v92;
  *(double *)(a3 + 40) = _D25 + v88.f64[0] * v87;
  if (a5)
  {
    v88.f64[0] = *(float64_t *)(v10 + 64);
    v94 = *(int8x16_t *)(v10 + 32);
    v95 = *(float64x2_t *)(v10 + 48);
    v97 = *(float64x2_t *)v10;
    _Q23 = *(float64x2_t *)(v10 + 16);
    v98 = (float64x2_t)vextq_s8(*(int8x16_t *)v10, v94, 8uLL);
    v97.f64[1] = *(float64_t *)(v10 + 24);
    v99 = (float64x2_t)vextq_s8((int8x16_t)v95, (int8x16_t)_Q23, 8uLL);
    v100 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)v95, 8uLL);
    _Q23.f64[1] = *(float64_t *)(v10 + 40);
    v101 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v94, 1), (int64x2_t)v88);
    v102 = (int64x2_t)vmlsq_f64(vmulq_f64(v5, v99), v26, v88);
    v103 = (float64x2_t)vextq_s8((int8x16_t)v99, (int8x16_t)v101, 8uLL);
    v104 = (int64x2_t)vmlsq_laneq_f64(vmulq_laneq_f64(v20, v101, 1), v5, v100, 1);
    v105 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v103, v20.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(_QWORD *)v10, 0), (int8x16_t)v100, 8uLL), v5.f64[0], 0);
    v106 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v98, v5.f64[0]), _Q23, v26.f64[0], 0);
    _Q24 = vmlsq_lane_f64(vmulq_n_f64(v97, v26.f64[0]), v98, v20.f64[0], 0);
    v103.f64[0] = vmlsq_laneq_f64(vmulq_f64(v26, v95), v20, v95, 1).f64[0];
    *(_QWORD *)&v95.f64[0] = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v155);
    v108.f64[0] = 0.0;
    v108.f64[1] = v155;
    v109 = vmlaq_f64(vmulq_n_f64(v108, v81.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v81, 1), (float64x2_t)*(unint64_t *)&v95.f64[0]);
    v110 = vmlaq_f64(vmulq_n_f64(v108, v86.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v86, 1), (float64x2_t)*(unint64_t *)&v95.f64[0]);
    v111 = vnegq_f64(v154);
    v112 = (float64x2_t)vextq_s8((int8x16_t)v154, (int8x16_t)v111, 8uLL);
    v113 = vmlaq_f64(v109, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v83, 0), v112);
    v114 = vmlaq_f64(v110, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v87, 0), v112);
    v81.f64[0] = vmuld_lane_f64(v81.f64[0], v111, 1)
               + v154.f64[0] * *(double *)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).i64
               + v83 * 0.0;
    v115 = vmuld_lane_f64(v86.f64[0], v111, 1);
    v116 = (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL);
    v116.f64[0] = v115 + v154.f64[0] * v116.f64[0] + v87 * 0.0;
    v117 = (float64x2_t)vzip1q_s64(v106, v105);
    _Q19 = (float64x2_t)vzip2q_s64(v106, v105);
    v119 = vmulq_f64(v117, (float64x2_t)0);
    v120 = vmlaq_f64(v117, (float64x2_t)0, _Q19);
    __asm { FMLA            D23, D6, V24.D[1] }
    v121 = vaddq_f64(_Q19, v119);
    v122 = vmlaq_f64(v119, (float64x2_t)0, _Q19);
    v123 = _Q24.f64[1] + 0.0 * _Q24.f64[0];
    __asm { FMLA            D19, D6, V24.D[1] }
    v124 = (float64x2_t)vzip1q_s64(v102, v104);
    v125 = vmlaq_f64(v120, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0), v124);
    v126 = vmlaq_f64(v121, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0), v124);
    v127 = vaddq_f64(v124, v122);
    v128 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v125, v61), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q1, 1), v126), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0), v127);
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v39, v103.f64[0]);
    v129 = vmlad_n_f64(v123, v40, v103.f64[0]);
    v130 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
    _Q0.f64[0] = _Q23.f64[0] * v61 + v129 * v130.f64[0] + (v103.f64[0] + _Q19.f64[0]) * _Q0.f64[0];
    v130.f64[0] = _Q23.f64[0] * v60.f64[0] + v129 * v62 + (v103.f64[0] + _Q19.f64[0]) * v84;
    *(_QWORD *)(a5 + 16) = *(_OWORD *)&vaddq_f64(v81, _Q0);
    *(float64x2_t *)a5 = vaddq_f64(v113, v128);
    *(_QWORD *)(a5 + 40) = *(_OWORD *)&vaddq_f64(v116, v130);
    *(float64x2_t *)(a5 + 24) = vaddq_f64(v114, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v125, v60.f64[0]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0), v126), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v84, 0), v127));
  }
  return 1;
}

BOOL sub_20EB339E4(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v6;
  double v8;
  double v9;
  int v16;
  const double *v17;
  double v18;
  float64x2_t v19;
  float64x2_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v110;
  const char *v111;
  unint64_t v112;
  _QWORD v113[3];
  int v114;
  const char *v115;
  int v116;
  const char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *__dst[2];
  int64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *__p;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  __int128 v146;
  _BYTE v147[24];
  __int128 v148;
  void *v149[2];
  unint64_t v150;
  char v151;
  _QWORD v152[5];
  float64x2x3_t v153;
  float64x2x3_t v154;

  v152[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 488;
  _D2 = *(_QWORD *)(a1 + 528);
  v8 = *(double *)(a1 + 552);
  v9 = a4[1].f64[0];
  _Q7 = *a4;
  __asm { FMLA            D0, D2, V7.D[1] }
  v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), a4->f64[0]), *(float64x2_t *)(a1 + 512), *a4, 1), *(float64x2_t *)(a1 + 536), v9);
  v140 = _D0 + v8 * v9;
  v135 = 0uLL;
  v136 = 0.0;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 472), (uint64_t)&v139, 30, 0, (uint64_t)&v135, v122, 0.00000001, v139);
  v16 = v124;
  if ((_BYTE)v124)
  {
    v17 = (const double *)v6;
    v153 = vld3q_f64(v17);
    v17 += 6;
    v18 = v136;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v153.val[0], v137.f64[0]), v153.val[1], v137, 1), v153.val[2], v138);
    v153.val[0] = *(float64x2_t *)v17;
    v153.val[2].f64[0] = v137.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v153.val[0].f64[0] = v153.val[1].f64[0] + *(double *)(v6 + 64) * v138;
    *a2 = v19;
    a2[1].f64[0] = v153.val[0].f64[0];
    v154 = vld3q_f64((const double *)v6);
    _Q4 = *(float64x2_t *)v17;
    v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v154.val[0], v135.f64[0]), v154.val[1], v135, 1), v154.val[2], v18);
    v154.val[1].f64[0] = v135.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    a3[1].f64[0] = v154.val[0].f64[0] + *(double *)(v6 + 64) * v18;
    *a3 = v21;
    return v16 != 0;
  }
  sub_20EB2BB94(&v134);
  if (**(int **)(v134 + 56) <= 2)
  {
    v22 = *(unsigned __int8 *)(v134 + 72);
    v23 = *(_BYTE *)(v134 + 72) != 0;
    v24 = sub_20E8C31DC(v134, "OSLogSurrogateAppender", 1, 0);
    if (((v24 == 0) & ~v23) == 0)
    {
      sub_20E863438((uint64_t)v122);
      v25 = sub_20E86A980(&v123, (uint64_t)"failed to project: xc=", 22);
      *(_QWORD *)v147 = &v139;
      sub_20EB1A104(v25, (__int128 **)v147);
      v112 = v24;
      if ((v132 & 0x10) != 0)
      {
        v28 = v131;
        if (v131 < v128)
        {
          v131 = v128;
          v28 = v128;
        }
        v29 = v127;
        v26 = v28 - (_QWORD)v127;
        if (v28 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_63;
      }
      else
      {
        if ((v132 & 8) == 0)
        {
          v26 = 0;
          HIBYTE(v121) = 0;
          v27 = __dst;
          goto LABEL_18;
        }
        v29 = v125;
        v26 = v126 - (_QWORD)v125;
        if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
          sub_20E860B7C();
      }
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        v27 = (void **)operator new(v30 + 1);
        __dst[1] = (void *)v26;
        v121 = v31 | 0x8000000000000000;
        __dst[0] = v27;
      }
      else
      {
        HIBYTE(v121) = v26;
        v27 = __dst;
        if (!v26)
        {
LABEL_18:
          *((_BYTE *)v27 + v26) = 0;
          v113[0] = &v134;
          v113[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v113[2] = std::chrono::system_clock::now().__d_.__rep_;
          v114 = 2;
          v115 = "unknown file";
          v116 = 838;
          v118 = 0;
          v119 = 0;
          v117 = "unknown function";
          if (v121 >= 0)
            v32 = __dst;
          else
            v32 = (void **)__dst[0];
          v33 = *(_QWORD *)v113[0];
          v34 = (const char *)(*(_QWORD *)v113[0] + 16);
          v110 = *(_QWORD *)v113[0];
          v111 = v34;
          if (*(char *)(*(_QWORD *)v113[0] + 39) < 0)
          {
            v34 = *(const char **)(v33 + 16);
            v35 = *(_QWORD *)(v33 + 24);
            v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v37 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            v35 = *(unsigned __int8 *)(*(_QWORD *)v113[0] + 39);
            v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v36 & 1) != 0)
              goto LABEL_25;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v147);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v147);
            if ((_BYTE)v148 && (v147[23] & 0x80000000) != 0)
              operator delete(*(void **)v147);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_25:
          if (byte_254A4A4F8[23] >= 0)
            v38 = byte_254A4A4F8;
          else
            v38 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v39 = byte_254A4A4F8[23];
          else
            v39 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v147 = os_log_create(v38, v34);
          v40 = &v147[8];
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v41 = v22;
            v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v42 = v39 | 7;
            v43 = v42 + 1;
            v40 = operator new(v42 + 1);
            *(_QWORD *)&v147[16] = v39;
            *(_QWORD *)&v148 = v43 | 0x8000000000000000;
            *(_QWORD *)&v147[8] = v40;
            v22 = v41;
          }
          else
          {
            BYTE7(v148) = v39;
            if (!v39)
            {
LABEL_39:
              v40[v39] = 0;
              BYTE8(v148) = 1;
              v44 = v149;
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v45 = (const char *)v32;
              if (v35 >= 0x17)
              {
                v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v47 = v35 | 7;
                v48 = v47 + 1;
                v46 = v112;
                v44 = (void **)operator new(v47 + 1);
                v149[1] = (void *)v35;
                v150 = v48 | 0x8000000000000000;
                v149[0] = v44;
              }
              else
              {
                HIBYTE(v150) = v35;
                v46 = v112;
                if (!v35)
                {
LABEL_47:
                  *((_BYTE *)v44 + v35) = 0;
                  v151 = 1;
                  v49 = *(NSObject **)v147;
                  if (SHIBYTE(v150) < 0)
                    operator delete(v149[0]);
                  if (BYTE8(v148) && SBYTE7(v148) < 0)
                    operator delete(*(void **)&v147[8]);
                  if (*(_QWORD *)v147)
                    os_release(*(void **)v147);
                  if (!v46 || !*(_QWORD *)(v46 + 24))
                  {
                    os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v147 = 136315138;
                    *(_QWORD *)&v147[4] = v45;
                    v56 = (void *)_os_log_send_and_compose_impl();
                    if (v56)
                      free(v56);
                    goto LABEL_128;
                  }
                  v50 = _os_log_pack_size();
                  v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
                  v52 = (std::__shared_weak_count *)operator new();
                  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v52->__shared_owners_ = 0;
                  v52->__shared_weak_owners_ = 0;
                  v52[1].__vftable = v51;
                  *(_QWORD *)&v141 = v51;
                  *((_QWORD *)&v141 + 1) = v51;
                  v143 = 0;
                  v144 = 0;
                  v142 = v52;
                  v53 = strlen(v45);
                  if (v53 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v54 = v53;
                  if (v53 >= 0x17)
                  {
                    v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v53 | 7) != 0x17)
                      v57 = v53 | 7;
                    v58 = v57 + 1;
                    v55 = operator new(v57 + 1);
                    *(_QWORD *)&v146 = v54;
                    *((_QWORD *)&v146 + 1) = v58 | 0x8000000000000000;
                    v145 = v55;
                  }
                  else
                  {
                    HIBYTE(v146) = v53;
                    v55 = &v145;
                    if (!v53)
                    {
LABEL_68:
                      *((_BYTE *)v55 + v54) = 0;
                      v59 = v145;
                      v152[0] = v146;
                      *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)&v146 + 7);
                      v60 = HIBYTE(v146);
                      v61 = operator new(0x38uLL);
                      v61[1] = 0;
                      v61[2] = 0;
                      v61[3] = off_24C9ABC20;
                      *v61 = &off_24C9ABBD0;
                      v62 = v152[0];
                      v61[4] = v59;
                      v61[5] = v62;
                      *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v152 + 7);
                      *((_BYTE *)v61 + 55) = v60;
                      v152[0] = 0;
                      *(_QWORD *)((char *)v152 + 7) = 0;
                      v63 = v144;
                      v143 = (char *)(v61 + 3);
                      v144 = (std::__shared_weak_count *)v61;
                      if (v63)
                      {
                        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                        do
                          v65 = __ldaxr(p_shared_owners);
                        while (__stlxr(v65 - 1, p_shared_owners));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      *(_OWORD *)v147 = v141;
                      v66 = v143;
                      *(_QWORD *)&v147[16] = v142;
                      if (v142)
                      {
                        v67 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v68 = __ldxr(v67);
                        while (__stxr(v68 + 1, v67));
                      }
                      v69 = v144;
                      *(_QWORD *)&v148 = v66;
                      *((_QWORD *)&v148 + 1) = v144;
                      if (v144)
                      {
                        v70 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                        v149[0] = v66;
                        do
                          v72 = __ldaxr(v70);
                        while (__stlxr(v72 - 1, v70));
                        if (!v72)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      else
                      {
                        v149[0] = v66;
                      }
                      v73 = v142;
                      if (v142)
                      {
                        v74 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = *(_QWORD *)v147;
                      if (*((char *)v149[0] + 31) >= 0)
                        v77 = (char *)v149[0] + 8;
                      else
                        v77 = (char *)*((_QWORD *)v149[0] + 1);
                      v78 = _os_log_pack_fill();
                      *(_DWORD *)v78 = 136315138;
                      *(_QWORD *)(v78 + 4) = v77;
                      v79 = operator new();
                      v80 = *(unsigned __int8 *)(v110 + 39);
                      v81 = *(const char **)(v110 + 16);
                      v82 = *(_QWORD *)(v110 + 24);
                      v83 = v148;
                      *(_OWORD *)(v79 + 8) = *(_OWORD *)&v147[8];
                      if ((v80 & 0x80u) != 0)
                        v80 = v82;
                      else
                        v81 = v111;
                      *(_QWORD *)v79 = v76;
                      *(_QWORD *)&v147[8] = 0;
                      *(_QWORD *)&v147[16] = 0;
                      *(_OWORD *)(v79 + 24) = v83;
                      v148 = 0uLL;
                      *(_QWORD *)(v79 + 40) = v81;
                      *(_QWORD *)(v79 + 48) = v80;
                      *(_BYTE *)(v79 + 56) = 2;
                      v145 = 0;
                      *(_QWORD *)&v141 = v79;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v141);
                      v84 = v141;
                      *(_QWORD *)&v141 = 0;
                      if (v84)
                      {
                        v85 = *(std::__shared_weak_count **)(v84 + 32);
                        if (v85)
                        {
                          v86 = (unint64_t *)&v85->__shared_owners_;
                          do
                            v87 = __ldaxr(v86);
                          while (__stlxr(v87 - 1, v86));
                          if (!v87)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                        }
                        v88 = *(std::__shared_weak_count **)(v84 + 16);
                        if (v88)
                        {
                          v89 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
                        v91 = v145;
                        v145 = 0;
                        if (v91)
                        {
                          v92 = (std::__shared_weak_count *)v91[4];
                          if (v92)
                          {
                            v93 = (unint64_t *)&v92->__shared_owners_;
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = (std::__shared_weak_count *)v91[2];
                          if (v95)
                          {
                            v96 = (unint64_t *)&v95->__shared_owners_;
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                        }
                      }
                      v98 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                      if (*((_QWORD *)&v148 + 1))
                      {
                        v99 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v101 = *(std::__shared_weak_count **)&v147[16];
                      if (*(_QWORD *)&v147[16])
                      {
                        v102 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
LABEL_128:
                      if (v22)
                      {
                        v104 = (const char *)__dst;
                        if (v121 < 0)
                          v104 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v113, "%s", v104);
                        sub_20E863570((uint64_t)v113);
                      }
                      sub_20E863570((uint64_t)v113);
                      v105 = v119;
                      if (v119)
                      {
                        v106 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (SHIBYTE(v121) < 0)
                        operator delete(__dst[0]);
                      v122[0] = *MEMORY[0x24BEDB7F0];
                      v108 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v122 + *(_QWORD *)(v122[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v123 = v108;
                      v124 = MEMORY[0x24BEDB848] + 16;
                      if (v130 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v133);
                      return v16 != 0;
                    }
                  }
                  memcpy(v55, v45, v54);
                  goto LABEL_68;
                }
              }
              memmove(v44, v34, v35);
              goto LABEL_47;
            }
          }
          memmove(v40, v38, v39);
          goto LABEL_39;
        }
      }
      memmove(v27, v29, v26);
      goto LABEL_18;
    }
  }
  return v16 != 0;
}

void sub_20EB3452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);
  _Unwind_Resume(a1);
}

float64x2_t sub_20EB34694(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  float64x2_t v9;
  float64x2_t result;
  double v18;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  _BOOL4 v28;
  float64x2_t v29;
  double v30;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int8x16_t v40;
  double v41;
  char v42;
  float64x2_t v43;
  double v44;
  float64x2x3_t v45;

  v5 = a1 + 488;
  _D2 = *(_QWORD *)(a1 + 528);
  v7 = a3[1].f64[0];
  _Q7 = *a3;
  v9 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), a3->f64[0]), *(float64x2_t *)(a1 + 512), *a3, 1), *(float64x2_t *)(a1 + 536), v7);
  __asm { FMLA            D0, D2, V7.D[1] }
  v44 = _D0 + *(double *)(a1 + 552) * v7;
  v43 = v9;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 472), (uint64_t)&v43, 30, 0, 0, &v40, 0.00000001, v9);
  if (!v42)
    goto LABEL_4;
  _Q3 = *(_OWORD *)(v5 + 48);
  _D5 = v40.i64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v18 = _D4 + *(double *)(v5 + 64) * v41;
  if (v18 < 0.0)
    goto LABEL_4;
  v45 = vld3q_f64((const double *)v5);
  _Q1 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45.val[0], *(double *)v40.i64), v45.val[1], *(double *)vextq_s8(v40, v40, 8uLL).i64), v45.val[2], v41), vmulq_n_f64(*(float64x2_t *)(a1 + 560), v18));
  v45.val[0].f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  if (_D2 >= 0.00000001)
  {
    *(double *)&v21 = sqrt(_D2);
    v22 = fabs(v18);
    v23 = fabs(*(double *)&v21);
    v24 = v22 / v23;
    if (v22 >= v23)
      v24 = v23 / v22;
    if (v24 <= 0.414213562)
    {
      v26 = 1;
      v27 = 2;
      v25 = v24;
    }
    else
    {
      v25 = (v23 - v22) / (v22 + v23);
      if (v22 >= v23)
        v25 = -v25;
      v26 = -1;
      v27 = 1;
    }
    v28 = v24 > 0.414213562;
    v29 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v25 * v25), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v25 * v25), (float64x2_t)xmmword_210315370), v25 * v25 * (v25 * v25))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v25 * v25), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v25 * v25), (float64x2_t)xmmword_210315380), v25 * v25 * (v25 * v25))), v25 * v25 * (v25 * v25) * (v25 * v25 * (v25 * v25))));
    v30 = v25 + v25 * vdivq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)).f64[0];
    if (*(double *)&v21 == INFINITY && v22 == INFINITY)
      v30 = 0.785398163;
    if (v22 >= v23)
      v27 = v28;
    else
      v26 = -v26;
    if (v18 < 0.0)
    {
      v26 = -v26;
      v27 = 4 - v27;
    }
    if (v21 < 0)
    {
      v26 = -v26;
      v27 = -v27;
    }
    if (*(double *)&v21 == 0.0 && v18 == 0.0)
      v33 = 0.0;
    else
      v33 = v30;
    v34 = (double)v27 * 3.061617e-17 + (double)v27 * 0.785398163 + v33 * (double)v26;
    v35 = v34 * v34;
    v36.f64[0] = v34 * (v34 * v34);
    v36.f64[1] = v35 * v36.f64[0];
    v37 = vmulq_n_f64(v36, v35 * v35);
    v38 = vdivq_f64(_Q1, (float64x2_t)vdupq_lane_s64(v21, 0));
    v39 = vmulq_n_f64(v36, v38.f64[0]);
    result = vmulq_laneq_f64(v36, v38, 1);
    *a2 = v39;
    a2[1] = vmulq_n_f64(v37, v38.f64[0]);
    a2[2] = result;
    a2[3] = vmulq_laneq_f64(v37, v38, 1);
  }
  else
  {
LABEL_4:
    result.f64[0] = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_20EB34974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  char v11;
  char *v12;

  v1 = *(_QWORD *)(a1 + 472);
  v2 = *(unsigned int *)(v1 + 104);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v12 = &v11;
  v4 = ((double (*)(char **, uint64_t))off_24C9C4FE8[v2])(&v12, v1 + 88);
  if (v4 <= 0.0)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 922, (uint64_t)&unk_210254955, 0, (uint64_t)"Invalid lens distortion.", 24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v5 = __sincos_stret(v4);
  v6 = *(double *)(a1 + 560);
  v7 = *(double *)(a1 + 568);
  v8.f64[1] = v5.__sinval - v5.__cosval * v7;
  v8.f64[0] = v5.__sinval * 0.0 - v5.__cosval * v6;
  v9 = vmulq_n_f64(v8, v5.__cosval);
  return (v6 + v9.f64[0]) * (v6 + v9.f64[0]) + (v7 + v9.f64[1]) * (v7 + v9.f64[1]);
}

char *sub_20EB34C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (char *)operator new(0x88uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4 + 136;
  sub_20EB44158((unint64_t *)a2, v4, (char *)a1, (char *)(a1 + 72), 9);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 168), (char *)(a1 + 224), 7);
  sub_20EB1B860(*(_QWORD *)(a1 + 496), (double **)a2);
  return sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 512), (char *)(a1 + 584), 9);
}

void sub_20EB34CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB34CE8(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double result;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v7 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0x88)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 520, (uint64_t)"data.size() > camera_matrix_.elements() + radial_.size() + 1", 60, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v7 = *a2;
  }
  a5.f64[0] = *(float64_t *)(v7 + 64);
  v9 = *(float64x2_t *)(v7 + 32);
  v8 = *(float64x2_t *)(v7 + 48);
  v11 = *(int8x16_t *)v7;
  v10 = *(float64x2_t *)(v7 + 16);
  v12 = (int8x16_t)vabdq_f64(*(float64x2_t *)v7, *(float64x2_t *)a1);
  v13 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v14 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, (float64x2_t)vextq_s8(v12, v12, 8uLL)), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v10, *(float64x2_t *)(a1 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, vabdq_f64(v9, *(float64x2_t *)(a1 + 32))), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v8, *(float64x2_t *)(a1 + 48))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v14)) & 1) != 0
    || (v14.f64[0] = *(float64_t *)(a1 + 64), vabdq_f64(a5, v14).f64[0] > 1.0e-10))
  {
    v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    *(_QWORD *)&v10.f64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    *(int8x16_t *)a1 = v11;
    *(float64x2_t *)(a1 + 16) = v10;
    *(_QWORD *)&v9.f64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    *(float64_t *)(a1 + 64) = a5.f64[0];
    *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    *(float64x2_t *)(a1 + 32) = v9;
    *(float64x2_t *)(a1 + 48) = v8;
    v15 = *(double *)v7 * *(double *)(v7 + 32);
    *(double *)(a1 + 72) = 1.0 / *(double *)v7;
    *(double *)(a1 + 80) = -*(double *)(v7 + 8) / v15;
    *(double *)(a1 + 88) = -(*(double *)(v7 + 32) * *(double *)(v7 + 16) - *(double *)(v7 + 8) * *(double *)(v7 + 40))
                         / v15;
    *(_QWORD *)(a1 + 96) = 0;
    *(double *)(a1 + 104) = 1.0 / *(double *)(v7 + 32);
    *(double *)(a1 + 112) = -*(double *)(v7 + 40) / *(double *)(v7 + 32);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
    *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 160) = 0;
    v7 = *a2;
  }
  v16 = *(_OWORD *)(v7 + 72);
  v17 = *(_OWORD *)(v7 + 88);
  v18 = *(_OWORD *)(v7 + 104);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(v7 + 120);
  *(_OWORD *)(a1 + 200) = v18;
  *(_OWORD *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 168) = v16;
  *(_BYTE *)(a1 + 492) = 0;
  *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 160) = 0;
  v19 = v7 + 128;
  v20 = (char *)operator new(0x88uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C9C4FA8;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *((_QWORD *)v20 + 12) = 0;
  *((_DWORD *)v20 + 26) = 1;
  *((_QWORD *)v20 + 14) = 0x7FF8000000000000;
  v21 = *(std::__shared_weak_count **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v20;
  *((_QWORD *)v20 + 3) = &off_24C9C2508;
  *(_QWORD *)(a1 + 496) = v20 + 24;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v33 = a2[1];
      v25 = *(_QWORD *)(a1 + 496);
      v34 = (uint64_t)(v33 - v19) >> 3;
      v35 = v19;
      if (v33 >= v19)
        goto LABEL_13;
LABEL_12:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_13;
LABEL_16:
      abort();
    }
  }
  v24 = a2[1];
  v25 = *(_QWORD *)(a1 + 496);
  v34 = (uint64_t)(v24 - v19) >> 3;
  v35 = v19;
  if (v24 < v19)
    goto LABEL_12;
LABEL_13:
  v26 = a1 + 512;
  v27 = sub_20EB1B3A0(v25, &v34);
  result = v27[2];
  v29 = *((_QWORD *)v27 + 5);
  v30 = *(_OWORD *)(v27 + 3);
  v31 = *((_QWORD *)v27 + 8);
  v32 = *((_OWORD *)v27 + 3);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(double *)(v26 + 16) = result;
  *(_OWORD *)(v26 + 24) = v30;
  *(_QWORD *)(v26 + 40) = v29;
  *(_OWORD *)(v26 + 48) = v32;
  *(_QWORD *)(v26 + 64) = v31;
  return result;
}

BOOL sub_20EB35004(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11)
{
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  _BOOL8 v22;
  float64x2_t v24;
  int8x16_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64_t v35;
  int64x2_t v36;
  double v37;
  float64x2_t v39;
  float64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  unint64_t v45;
  float64_t v46;
  float64_t v48;
  float64x2_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  size_t v56;
  void **v57;
  int8x16_t v58;
  float64x2_t v62;
  float64x2_t v64;
  double v65;
  unint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  unint64_t v76;
  float64x2_t v77;
  unint64_t v78;
  float64x2_t v79;
  int8x16_t v81;
  int8x16_t v82;
  double v83;
  int8x16_t v84;
  double v85;
  double v86;
  int8x16_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  int8x16_t v91;
  float64x2_t v92;
  double v94;
  float64x2_t v95;
  float64x2_t v97;
  float64_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  double v105;
  float64x2_t v108;
  int64x2_t v109;
  float64x2_t v110;
  int64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v121;
  float64x2_t v122;
  double v126;
  float64x2_t v127;
  double v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  int8x16_t v137;
  double v138;
  double v139;
  double v140;
  float64x2_t v141;
  int8x16_t v142;
  float64x2_t v143;
  float64x2_t v144;
  int8x16_t v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  float64x2_t v150;
  double v151;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v165;
  float64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  float64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  int64x2_t v180;
  float64x2_t v181;
  double v183;
  unint64_t v185;
  double v187;
  float64x2_t v188;
  float64x2_t v190;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v195;
  unint64_t v197;
  const void **v198;
  const void *v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  const char *v204;
  size_t v205;
  unsigned __int8 v206;
  const char *v207;
  size_t v208;
  _BYTE *v209;
  uint64_t v210;
  unint64_t v211;
  const char *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  void **v216;
  uint64_t v217;
  uint64_t v218;
  NSObject *v219;
  size_t v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  size_t v223;
  size_t v224;
  _QWORD *v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  char v230;
  _QWORD *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *p_shared_owners;
  unint64_t v235;
  void *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  const char *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  float64x2_t v281;
  unint64_t v282;
  int8x16_t v283;
  float64_t v284;
  float64_t v285;
  float64_t v286;
  float64x2_t v287;
  unint64_t v288;
  float64_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64_t v293;
  double v294;
  float64x2_t v295;
  const char *v296;
  double v297;
  const char *v298;
  _QWORD v299[3];
  int v300;
  const char *v301;
  int v302;
  const char *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  void *__dst[2];
  int64_t v307;
  _QWORD v308[2];
  _QWORD v309[3];
  _QWORD v310[3];
  uint64_t v311;
  unint64_t v312;
  void *__p;
  char v314;
  unint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  float64x2_t v319;
  double v320;
  float64x2_t v321;
  float64_t v322;
  char v323;
  int8x16_t v324;
  float64_t v325;
  float64x2_t v326;
  double v327;
  float64x2_t v328;
  uint64_t v329;
  int8x16_t v330;
  double v331;
  int8x16_t v332;
  float64_t v333;
  int8x16_t v334;
  double v335;
  float64x2_t v336;
  double v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  double v342;
  __int128 v343;
  std::__shared_weak_count *v344;
  char *v345;
  std::__shared_weak_count *v346;
  _QWORD *v347;
  __int128 v348;
  float64x2_t v349;
  _BYTE v350[24];
  __int128 v351;
  void *v352[2];
  unint64_t v353;
  char v354;
  _QWORD v355[5];

  v355[2] = *MEMORY[0x24BDAC8D0];
  v17 = a1 + 512;
  v18 = *(float64x2_t *)(a1 + 584);
  v19 = vsubq_f64(*a3, v18);
  v349 = v19;
  v20 = (double *)(a1 + 168);
  if (a5)
  {
    if ((sub_20EB277C4((uint64_t)&v341, (uint64_t)&v338, v349.f64, (uint64_t)v20, 20, v19.f64[0], v18.f64[0], a9, a10, a11) & 1) == 0)return 0;
  }
  else
  {
    v21 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)));
    if (!sub_20EB24018((uint64_t)&v341, v349.f64, v20, 20, v21, v21, a9, a10, a11))
      return 0;
  }
  if (v342 < 0.0)
    return 0;
  v341 = vaddq_f64(v341, vmulq_n_f64(*(float64x2_t *)(v17 + 72), v342));
  _D3 = *(_QWORD *)(v17 + 40);
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v17, v341.f64[0]), *(float64x2_t *)(v17 + 24), v341, 1), *(float64x2_t *)(v17 + 48), v342);
  __asm { FMLA            D1, D3, V0.D[1] }
  v337 = _D1 + *(double *)(v17 + 64) * v342;
  v336 = v24;
  if (a5 | a6)
    v30 = &v324;
  else
    v30 = 0;
  sub_20EB1C3A0(*(_QWORD *)(a1 + 496), COERCE_FLOAT64_T(&v336), (uint64_t)v30, (uint64_t)&v319);
  v22 = v323 != 0;
  if (v323)
  {
    _Q3.f64[0] = *(float64_t *)(v17 + 16);
    v35 = *(double *)(v17 + 40);
    v36 = *(int64x2_t *)(v17 + 24);
    v37 = *(double *)(v17 + 64);
    _Q5 = *(_OWORD *)(v17 + 48);
    v39 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v17, v36);
    v40 = _Q3.f64[0];
    _Q7.f64[1] = v35;
    v31.f64[0] = v320;
    v41 = v319;
    v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v319.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v17, v36), v319, 1), _Q7, v320);
    _Q7.f64[0] = v319.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    v295 = v31;
    _Q7.f64[0] = _D4 + v37 * v320;
    v45 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v46 = v42.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v45;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(v17 + 16);
      v35 = *(double *)(v17 + 40);
      v39 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v17, *(int64x2_t *)(v17 + 24));
      _D20 = *(_QWORD *)(v17 + 56);
      v48 = *(double *)(v17 + 32);
      v49.f64[0] = *(float64_t *)(v17 + 8);
      v37 = *(double *)(v17 + 64);
    }
    else
    {
      _D20 = *(_QWORD *)(v17 + 56);
      v48 = *(double *)(v17 + 32);
      v49.f64[0] = *(float64_t *)(v17 + 8);
    }
    v58 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    v32.f64[0] = v322;
    _Q26 = v321;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v321.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v32.f64[0] * v32.f64[0]);
    v62 = vmulq_f64(v32, _Q16);
    _Q21 = vmulq_n_f64(v321, _Q16.f64[0]);
    _Q3.f64[1] = v35;
    *(_QWORD *)&v39.f64[1] = v58.i64[0];
    v49.f64[1] = v48;
    v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q21.f64[0]), v49, _Q21, 1), _Q3, v62.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v37, v62.f64[0]);
    *(_QWORD *)&v42.f64[1] = v45;
    *(float64x2_t *)a2 = vaddq_f64(v42, v64);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v65 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v66 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v67.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v67.f64[1] = v66;
      v68.f64[0] = _Q16.f64[0];
      v68.f64[1] = _Q16.f64[0];
      v69 = vmulq_f64(v68, v67);
      v287 = v62;
      v70 = vmulq_f64(_Q16, v62);
      v71 = v32.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v70.f64[0];
      v32.f64[0] = v65 * _Q16.f64[0] * v70.f64[0];
      v70.f64[0] = v71 * v70.f64[0];
      v72.f64[0] = 0.0;
      v72.f64[1] = _Q16.f64[0];
      v73 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v69, _Q21.f64[0], 0);
      v74 = (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL);
      *(_QWORD *)&v297 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v75 = vmlsq_lane_f64(v72, v69, v65 * _Q16.f64[0], 0);
      v76 = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
      *(_QWORD *)&v294 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v32);
      v77 = vmlsq_lane_f64((float64x2_t)0, v69, v71, 0);
      v78 = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
      v79 = vsubq_f64(_Q16, v70);
      _Q22 = v326;
      v81 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL);
      v82 = v330;
      *(_QWORD *)&v83 = vextq_s8(v82, v82, 8uLL).u64[0];
      v84 = v334;
      *(_QWORD *)&v85 = vextq_s8(v84, v84, 8uLL).u64[0];
      v86 = v327;
      v69.f64[0] = v325;
      v87 = v324;
      v88 = v331;
      v58.i64[0] = v329;
      v89 = v328;
      *(_QWORD *)&v289 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      v290 = v69;
      v90 = v335;
      v33.f64[0] = v333;
      v91 = v332;
      v92 = (float64x2_t)vextq_s8(v91, v91, 8uLL);
      v293 = v92.f64[0];
      v291 = (float64x2_t)v58;
      v292 = v33;
      v288 = vextq_s8(v87, v87, 8uLL).u64[0];
      if (a5)
      {
        _Q5.f64[0] = *(float64_t *)(v17 + 16);
        v94 = *(double *)(v17 + 40);
        v95 = *(float64x2_t *)(v17 + 24);
        _Q3 = *(float64x2_t *)(v17 + 48);
        v280 = v66;
        v281 = v74;
        v97.f64[0] = v73.f64[0];
        v97.f64[1] = v74.f64[0];
        _Q18.f64[0] = v75.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v76;
        v283 = v81;
        v285 = v326.f64[0];
        v99 = v77.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v78;
        v100 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, v326.f64[0]), _Q18, *(double *)v81.i64), _Q22, v327);
        v282 = v78;
        v92.f64[0] = v297 * v326.f64[0] + v294 * *(double *)v81.i64 + v79.f64[0] * v327;
        v279 = v76;
        v101 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v330.i64), _Q18, v83), _Q22, v331);
        v102 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v334.i64), _Q18, v85);
        *(_QWORD *)&_Q18.f64[0] = v332.i64[0];
        _Q18.f64[1] = v293;
        _Q17 = vaddq_f64(vmlaq_n_f64(v102, _Q22, v335), _Q18);
        _Q22.f64[0] = *(float64_t *)(v17 + 8);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(v17 + 32);
        __asm { FMLA            D22, D2, V17.D[1] }
        v105 = v85;
        _D31 = *(_QWORD *)(v17 + 56);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v297 * *(double *)v330.i64 + v294 * v83 + v79.f64[0] * v331;
        *(_QWORD *)&v108.f64[0] = v324.i64[0];
        *(_QWORD *)&v108.f64[1] = v288;
        v109 = (int64x2_t)vaddq_f64(v100, v108);
        v110.f64[0] = v328.f64[0];
        v110.f64[1] = v289;
        v111 = (int64x2_t)vaddq_f64(v101, v110);
        v112 = (float64x2_t)vzip1q_s64(v109, v111);
        _Q30 = (float64x2_t)vzip2q_s64(v109, v111);
        v114 = vmlaq_laneq_f64(vmulq_n_f64(v112, *(double *)v17), _Q30, *(float64x2_t *)v17, 1);
        v115 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v92, v290), (int64x2_t)vaddq_f64(_Q17, v291));
        v116 = vmlaq_laneq_f64(vmulq_n_f64(v112, v95.f64[0]), _Q30, v95, 1);
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v112, _Q3.f64[0]), _Q30, _Q3, 1);
        _Q30.f64[0] = *(float64_t *)(v17 + 64);
        _Q8 = vmlaq_n_f64(v114, v115, _Q5.f64[0]);
        _Q31 = vmlaq_n_f64(v116, v115, v94);
        _Q10 = vmlaq_n_f64(v117, v115, _Q30.f64[0]);
        v115.f64[0] = v297 * *(double *)v334.i64 + v294 * v105 + v79.f64[0] * v335;
        *(_QWORD *)&v115.f64[0] = *(_OWORD *)&vaddq_f64(v115, v292);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q5.f64[0], v115.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v94, v115.f64[0]);
        v121 = vmlad_n_f64(_D2, _Q30.f64[0], v115.f64[0]);
        v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v17, (int64x2_t)v95);
        _Q16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v17, (int64x2_t)v95);
        _Q5.f64[1] = v94;
        _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, _Q8.f64[0]), _Q16, _Q8, 1), _Q5, _Q18.f64[0]);
        _Q8.f64[0] = _Q8.f64[1];
        __asm { FMLA            D6, D8, V3.D[1] }
        v126 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        v127 = vmlaq_laneq_f64(vmulq_n_f64(v122, _Q31.f64[0]), _Q16, _Q31, 1);
        _Q31.f64[0] = _Q31.f64[1];
        __asm { FMLA            D8, D31, V3.D[1] }
        _Q18 = vmlaq_n_f64(v127, _Q5, _Q22.f64[0]);
        _Q22.f64[0] = _Q8.f64[0] + _Q30.f64[0] * _Q22.f64[0];
        _Q8.f64[0] = *(float64_t *)(a1 + 592);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, _Q10.f64[0]), _Q16, _Q10, 1), _Q5, v121);
        _Q16.f64[0] = _Q10.f64[1];
        __asm { FMLA            D5, D16, V3.D[1] }
        v130 = _Q5.f64[0] + _Q30.f64[0] * v121;
        __asm
        {
          FMLA            D30, D8, V25.D[1]
          FMLA            D10, D8, V18.D[1]
          FMLA            D16, D8, V17.D[1]
        }
        v78 = v282;
        v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q25.f64[0]), (float64x2_t)xmmword_2102DD520, _Q25, 1), (float64x2_t)0, v126);
        v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1), (float64x2_t)0, _Q22.f64[0]);
        v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q17.f64[0]), (float64x2_t)xmmword_2102DD520, _Q17, 1), (float64x2_t)0, v130);
        v134 = vmlaq_laneq_f64(vmulq_n_f64(v338, v131.f64[0]), v339, v131, 1);
        v135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v132.f64[0]), v339, v132, 1), v340, _Q22.f64[0] + _Q10.f64[0]);
        v136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v133.f64[0]), v339, v133, 1), v340, v130 + _Q16.f64[0]);
        v74 = v281;
        v86 = v327;
        *(float64x2_t *)a5 = vmlaq_n_f64(v134, v340, v126 + _Q30.f64[0]);
        *(float64x2_t *)(a5 + 16) = v135;
        v85 = v105;
        v81 = v283;
        _Q22.f64[0] = v285;
        *(float64x2_t *)(a5 + 32) = v136;
        v76 = v279;
        v66 = v280;
      }
      v284 = *(double *)v91.i64;
      v286 = v89.f64[0];
      *(_QWORD *)&v89.f64[0] = v87.i64[0];
      if (a6)
      {
        v137 = v81;
        v138 = *(double *)v84.i64;
        v139 = v88;
        v140 = v86;
        v141.f64[0] = 0.0;
        v141.f64[1] = v337;
        *(_QWORD *)&_Q21.f64[1] = v66;
        v142 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
        *(_QWORD *)&v41.f64[1] = v142.i64[0];
        v143 = vaddq_f64(v41, _Q21);
        v144 = vaddq_f64(v295, v287);
        v73.f64[1] = v74.f64[0];
        *(_QWORD *)&v75.f64[1] = v76;
        v142.i64[0] = *(_QWORD *)(v17 + 16);
        v145.i64[1] = v137.i64[1];
        v146 = vmlaq_n_f64(vmulq_n_f64(v73, _Q22.f64[0]), v75, *(double *)v137.i64);
        _Q21.f64[0] = v297 * _Q22.f64[0] + v294 * *(double *)v137.i64;
        v147 = vmlaq_n_f64(vmulq_n_f64(v73, *(double *)v82.i64), v75, v83);
        v148 = v297 * *(double *)v82.i64 + v294 * v83;
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v73, v138), v75, v85);
        v145.i64[0] = *(_QWORD *)(v17 + 40);
        v150 = *(float64x2_t *)(v17 + 24);
        v151 = v297 * v138 + v294 * v85;
        v74.f64[0] = *(float64_t *)(v17 + 64);
        _Q20 = *(float64x2_t *)(v17 + 48);
        *(_QWORD *)&v77.f64[1] = v78;
        v153 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v17, (int64x2_t)v150);
        v154 = vmlaq_n_f64(v146, v77, v140);
        v155.f64[1] = v79.f64[1];
        _Q21.f64[0] = _Q21.f64[0] + v79.f64[0] * v140;
        v156 = (float64x2_t)vextq_s8((int8x16_t)_Q20, v142, 8uLL);
        v157 = vmlaq_n_f64(v147, v77, v139);
        v75.f64[0] = v148 + v79.f64[0] * v139;
        v158.f64[0] = v284;
        v159 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v17, (int64x2_t)v150);
        v155.f64[0] = v151 + v79.f64[0] * v90;
        v158.f64[1] = v293;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v77, v90), v158);
        _D29 = *(_QWORD *)(v17 + 8);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(v17 + 32);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(v17 + 56);
        __asm { FMLA            D30, D31, V27.D[1] }
        v165 = (float64x2_t)vextq_s8((int8x16_t)v156, v145, 8uLL);
        v166 = vmulq_f64(v144, v156);
        v167 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v159, v144.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v145), v143, 1);
        v168 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v143, v74.f64[0]), v144, _Q20);
        v169 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v165, v143.f64[0]), v153, v144.f64[0], 0);
        *(_QWORD *)&v89.f64[1] = v288;
        v170.f64[0] = v286;
        v170.f64[1] = v289;
        v171 = (int64x2_t)vaddq_f64(v154, v89);
        v172 = (int64x2_t)vaddq_f64(v157, v170);
        v173 = (float64x2_t)vzip1q_s64(v171, v172);
        v174 = (float64x2_t)vzip2q_s64(v171, v172);
        v175 = vmlaq_laneq_f64(vmulq_n_f64(v173, *(double *)v17), v174, *(float64x2_t *)v17, 1);
        v176 = vmlaq_laneq_f64(vmulq_n_f64(v173, v150.f64[0]), v174, v150, 1);
        v177 = vmlaq_laneq_f64(vmulq_n_f64(v173, _Q20.f64[0]), v174, _Q20, 1);
        v178 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v143, 1), v143, _Q20, 1);
        v179 = vmlsq_lane_f64(vmulq_laneq_f64(v153, v143, 1), v159, v143.f64[0], 0);
        v180 = (int64x2_t)vmlsq_laneq_f64(v166, v74, v143, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v155, v292);
        v181 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v290), (int64x2_t)vaddq_f64(v75, v291));
        _Q4 = vmlaq_n_f64(v175, v181, *(double *)v142.i64);
        v183 = vmlad_n_f64(_D22, *(double *)v142.i64, _Q20.f64[0]);
        _Q5 = v336;
        v185 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v337);
        _Q7 = vmlaq_n_f64(v176, v181, *(double *)v145.i64);
        v187 = vmlad_n_f64(_D29, *(double *)v145.i64, _Q20.f64[0]);
        v188 = vnegq_f64(v336);
        _Q6 = vmlaq_n_f64(v177, v181, v74.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v74.f64[0], _Q20.f64[0]);
        v190 = vmlaq_laneq_f64(vmulq_n_f64(v141, _Q4.f64[0]), (float64x2_t)v185, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v192 = vmlaq_laneq_f64(vmulq_n_f64(v141, _Q7.f64[0]), (float64x2_t)v185, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v193 = vmlaq_laneq_f64(vmulq_n_f64(v141, _Q6.f64[0]), (float64x2_t)v185, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v195 = (float64x2_t)vextq_s8((int8x16_t)v336, (int8x16_t)v188, 8uLL);
        _Q7.f64[0] = _D18 + v183 * 0.0;
        v188.f64[0] = _Q20.f64[0] + v187 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v167, v169), vmlaq_n_f64(v190, v195, v183));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v179, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v167, v169), vmlaq_n_f64(v192, v195, v187));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v179, 1), v188);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v180, v168), vmlaq_n_f64(v193, v195, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v178, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
    return v22;
  }
  sub_20EB2BB94(&v318);
  if (**(int **)(v318 + 56) > 2)
    return v22;
  v50 = *(unsigned __int8 *)(v318 + 72);
  v51 = *(_BYTE *)(v318 + 72) != 0;
  v52 = sub_20E8C31DC(v318, "OSLogSurrogateAppender", 1, 0);
  if (((v52 == 0) & ~v51) != 0)
    return v22;
  sub_20E863438((uint64_t)v308);
  v53 = sub_20E86A980(v309, (uint64_t)"failed to unproject: xd=", 24);
  v54 = sub_20EB31B20(v53, *(__n128 *)a3);
  v55 = sub_20E86A980(v54, (uint64_t)", xc=", 5);
  *(_QWORD *)v350 = &v341;
  sub_20EB1A104(v55, (__int128 **)v350);
  if ((v316 & 0x10) != 0)
  {
    v197 = v315;
    if (v315 < v312)
    {
      v315 = v312;
      v197 = v312;
    }
    v198 = (const void **)&v311;
  }
  else
  {
    if ((v316 & 8) == 0)
    {
      v56 = 0;
      HIBYTE(v307) = 0;
      v57 = __dst;
      goto LABEL_37;
    }
    v198 = (const void **)v310;
    v197 = v310[2];
  }
  v199 = *v198;
  v56 = v197 - (_QWORD)*v198;
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v56 >= 0x17)
  {
    v200 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v200 = v56 | 7;
    v201 = v200 + 1;
    v57 = (void **)operator new(v200 + 1);
    __dst[1] = (void *)v56;
    v307 = v201 | 0x8000000000000000;
    __dst[0] = v57;
    goto LABEL_36;
  }
  HIBYTE(v307) = v197 - *(_BYTE *)v198;
  v57 = __dst;
  if (v56)
LABEL_36:
    memmove(v57, v199, v56);
LABEL_37:
  *((_BYTE *)v57 + v56) = 0;
  v299[0] = &v318;
  v299[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v299[2] = std::chrono::system_clock::now().__d_.__rep_;
  v300 = 2;
  v301 = "unknown file";
  v302 = 685;
  v304 = 0;
  v305 = 0;
  v303 = "unknown function";
  if (v307 >= 0)
    v202 = (const char *)__dst;
  else
    v202 = (const char *)__dst[0];
  v203 = *(_QWORD *)v299[0];
  v204 = (const char *)(*(_QWORD *)v299[0] + 16);
  v298 = v204;
  if (*(char *)(*(_QWORD *)v299[0] + 39) < 0)
  {
    v204 = *(const char **)(v203 + 16);
    v205 = *(_QWORD *)(v203 + 24);
  }
  else
  {
    v205 = *(unsigned __int8 *)(*(_QWORD *)v299[0] + 39);
  }
  v206 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v206 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v350);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v350);
    if ((_BYTE)v351 && (v350[23] & 0x80000000) != 0)
      operator delete(*(void **)v350);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v207 = byte_254A4A4F8;
  else
    v207 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v208 = byte_254A4A4F8[23];
  else
    v208 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v350 = os_log_create(v207, v204);
  v209 = &v350[8];
  if (v208 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v208 >= 0x17)
  {
    v296 = v204;
    v210 = v203;
    v211 = v52;
    v212 = v202;
    v213 = v50;
    v214 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17)
      v214 = v208 | 7;
    v215 = v214 + 1;
    v209 = operator new(v214 + 1);
    *(_QWORD *)&v350[16] = v208;
    *(_QWORD *)&v351 = v215 | 0x8000000000000000;
    *(_QWORD *)&v350[8] = v209;
    v50 = v213;
    v202 = v212;
    v52 = v211;
    v203 = v210;
    v204 = v296;
    goto LABEL_57;
  }
  BYTE7(v351) = v208;
  if (v208)
LABEL_57:
    memmove(v209, v207, v208);
  v209[v208] = 0;
  BYTE8(v351) = 1;
  v216 = v352;
  if (v205 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v205 >= 0x17)
  {
    v217 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v205 | 7) != 0x17)
      v217 = v205 | 7;
    v218 = v217 + 1;
    v216 = (void **)operator new(v217 + 1);
    v352[1] = (void *)v205;
    v353 = v218 | 0x8000000000000000;
    v352[0] = v216;
    goto LABEL_65;
  }
  HIBYTE(v353) = v205;
  if (v205)
LABEL_65:
    memmove(v216, v204, v205);
  *((_BYTE *)v216 + v205) = 0;
  v354 = 1;
  v219 = *(NSObject **)v350;
  if (SHIBYTE(v353) < 0)
    operator delete(v352[0]);
  if (BYTE8(v351) && SBYTE7(v351) < 0)
    operator delete(*(void **)&v350[8]);
  if (*(_QWORD *)v350)
    os_release(*(void **)v350);
  if (!v52 || !*(_QWORD *)(v52 + 24))
  {
    os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v350 = 136315138;
    *(_QWORD *)&v350[4] = v202;
    v226 = (void *)_os_log_send_and_compose_impl();
    if (v226)
      free(v226);
    goto LABEL_145;
  }
  v220 = _os_log_pack_size();
  v221 = (std::__shared_weak_count_vtbl *)operator new(v220, (std::align_val_t)8uLL);
  v222 = (std::__shared_weak_count *)operator new();
  v222->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v222->__shared_owners_ = 0;
  v222->__shared_weak_owners_ = 0;
  v222[1].__vftable = v221;
  *(_QWORD *)&v343 = v221;
  *((_QWORD *)&v343 + 1) = v221;
  v346 = 0;
  v344 = v222;
  v345 = 0;
  v223 = strlen(v202);
  if (v223 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v224 = v223;
  if (v223 >= 0x17)
  {
    v227 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17)
      v227 = v223 | 7;
    v228 = v227 + 1;
    v225 = operator new(v227 + 1);
    *((_QWORD *)&v348 + 1) = v228 | 0x8000000000000000;
    v347 = v225;
    *(_QWORD *)&v348 = v224;
    goto LABEL_84;
  }
  HIBYTE(v348) = v223;
  v225 = &v347;
  if (v223)
LABEL_84:
    memcpy(v225, v202, v224);
  *((_BYTE *)v225 + v224) = 0;
  v229 = v347;
  v355[0] = v348;
  *(_QWORD *)((char *)v355 + 7) = *(_QWORD *)((char *)&v348 + 7);
  v230 = HIBYTE(v348);
  v231 = operator new(0x38uLL);
  v231[1] = 0;
  v231[2] = 0;
  v231[3] = off_24C9ABC20;
  *v231 = &off_24C9ABBD0;
  v232 = v355[0];
  v231[4] = v229;
  v231[5] = v232;
  *(_QWORD *)((char *)v231 + 47) = *(_QWORD *)((char *)v355 + 7);
  *((_BYTE *)v231 + 55) = v230;
  v355[0] = 0;
  *(_QWORD *)((char *)v355 + 7) = 0;
  v233 = v346;
  v345 = (char *)(v231 + 3);
  v346 = (std::__shared_weak_count *)v231;
  if (v233)
  {
    p_shared_owners = (unint64_t *)&v233->__shared_owners_;
    do
      v235 = __ldaxr(p_shared_owners);
    while (__stlxr(v235 - 1, p_shared_owners));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  *(_OWORD *)v350 = v343;
  v236 = v345;
  *(_QWORD *)&v350[16] = v344;
  if (v344)
  {
    v237 = (unint64_t *)&v344->__shared_owners_;
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  v239 = v346;
  *(_QWORD *)&v351 = v236;
  *((_QWORD *)&v351 + 1) = v346;
  if (v346)
  {
    v240 = (unint64_t *)&v346->__shared_owners_;
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
    v352[0] = v236;
    do
      v242 = __ldaxr(v240);
    while (__stlxr(v242 - 1, v240));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  else
  {
    v352[0] = v236;
  }
  v243 = v344;
  if (v344)
  {
    v244 = (unint64_t *)&v344->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = *(_QWORD *)v350;
  if (*((char *)v352[0] + 31) >= 0)
    v247 = (char *)v352[0] + 8;
  else
    v247 = (char *)*((_QWORD *)v352[0] + 1);
  v248 = _os_log_pack_fill();
  *(_DWORD *)v248 = 136315138;
  *(_QWORD *)(v248 + 4) = v247;
  v249 = operator new();
  v250 = *(unsigned __int8 *)(v203 + 39);
  v251 = *(const char **)(v203 + 16);
  v252 = *(_QWORD *)(v203 + 24);
  v253 = v351;
  *(_OWORD *)(v249 + 8) = *(_OWORD *)&v350[8];
  if ((v250 & 0x80u) != 0)
    v250 = v252;
  else
    v251 = v298;
  *(_QWORD *)v249 = v246;
  *(_QWORD *)&v350[8] = 0;
  *(_QWORD *)&v350[16] = 0;
  *(_OWORD *)(v249 + 24) = v253;
  v351 = 0uLL;
  *(_QWORD *)(v249 + 40) = v251;
  *(_QWORD *)(v249 + 48) = v250;
  *(_BYTE *)(v249 + 56) = 2;
  v347 = 0;
  *(_QWORD *)&v343 = v249;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v52 + 24) + 40))(*(_QWORD *)(v52 + 24), &v343);
  v254 = v343;
  *(_QWORD *)&v343 = 0;
  if (v254)
  {
    v255 = *(std::__shared_weak_count **)(v254 + 32);
    if (v255)
    {
      v256 = (unint64_t *)&v255->__shared_owners_;
      do
        v257 = __ldaxr(v256);
      while (__stlxr(v257 - 1, v256));
      if (!v257)
      {
        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
        std::__shared_weak_count::__release_weak(v255);
      }
    }
    v258 = *(std::__shared_weak_count **)(v254 + 16);
    if (v258)
    {
      v259 = (unint64_t *)&v258->__shared_owners_;
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
    }
    MEMORY[0x212BC6398](v254, 0x10F0C40B62ED6C6);
    v261 = v347;
    v347 = 0;
    if (v261)
    {
      v262 = (std::__shared_weak_count *)v261[4];
      if (v262)
      {
        v263 = (unint64_t *)&v262->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      v265 = (std::__shared_weak_count *)v261[2];
      if (v265)
      {
        v266 = (unint64_t *)&v265->__shared_owners_;
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
          std::__shared_weak_count::__release_weak(v265);
        }
      }
      MEMORY[0x212BC6398](v261, 0x10F0C40B62ED6C6);
    }
  }
  v268 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
  if (*((_QWORD *)&v351 + 1))
  {
    v269 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = *(std::__shared_weak_count **)&v350[16];
  if (*(_QWORD *)&v350[16])
  {
    v272 = (unint64_t *)(*(_QWORD *)&v350[16] + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
LABEL_145:
  if (v50)
  {
    v274 = (const char *)__dst;
    if (v307 < 0)
      v274 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v299, "%s", v274);
    sub_20E863570((uint64_t)v299);
  }
  sub_20E863570((uint64_t)v299);
  v275 = v305;
  if (v305)
  {
    v276 = (unint64_t *)&v305->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (SHIBYTE(v307) < 0)
    operator delete(__dst[0]);
  v308[0] = *MEMORY[0x24BEDB7F0];
  v278 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v308 + *(_QWORD *)(v308[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v309[0] = v278;
  v309[1] = MEMORY[0x24BEDB848] + 16;
  if (v314 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v317);
  return v22;
}

void sub_20EB362A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 232) && *(char *)(v66 - 233) < 0)
    operator delete(*(void **)(v66 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  if (a65 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a66);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3641C(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  double v8;
  double v17;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v32;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t *v43;
  size_t v44;
  void **v45;
  float64x2_t v46;
  unint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  const char *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  const char *v59;
  size_t v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  size_t v76;
  size_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  const char *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  const char *v130;
  _QWORD v131[3];
  int v132;
  const char *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *__dst[2];
  int64_t v139;
  _QWORD v140[2];
  _QWORD v141[2];
  const void *v142;
  uint64_t v143;
  const void *v144;
  unint64_t v145;
  void *__p;
  char v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int8x16_t v152;
  double v153;
  char v154;
  float64x2_t v155;
  double v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  char *v159;
  std::__shared_weak_count *v160;
  _QWORD *v161;
  __int128 v162;
  _BYTE v163[24];
  __int128 v164;
  void *v165[2];
  unint64_t v166;
  char v167;
  _QWORD v168[5];
  float64x2x3_t v169;

  v168[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 512;
  _D2 = *(_QWORD *)(a1 + 552);
  v7 = *(double *)(a1 + 576);
  v8 = a3[1].f64[0];
  _Q7 = *a3;
  __asm { FMLA            D0, D2, V7.D[1] }
  v155 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 512), a3->f64[0]), *(float64x2_t *)(a1 + 536), *a3, 1), *(float64x2_t *)(a1 + 560), v8);
  v156 = _D0 + v7 * v8;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 496), (uint64_t)&v155, 30, 0, 0, &v152, 0.00000001, v155);
  if (!v154)
  {
    sub_20EB2BB94(&v151);
    if (**(int **)(v151 + 56) > 2)
      return 0;
    v40 = *(unsigned __int8 *)(v151 + 72);
    v41 = *(_BYTE *)(v151 + 72) != 0;
    v42 = sub_20E8C31DC(v151, "OSLogSurrogateAppender", 1, 0);
    if (((v42 == 0) & ~v41) != 0)
      return 0;
    sub_20E863438((uint64_t)v140);
    v43 = sub_20E86A980(v141, (uint64_t)"failed to project: xc=", 22);
    *(_QWORD *)v163 = &v155;
    sub_20EB32EA4(v43, (__int128 **)v163);
    if ((v149 & 0x10) != 0)
    {
      v48 = v148;
      if (v148 < v145)
      {
        v148 = v145;
        v48 = v145;
      }
      v49 = v144;
      v44 = v48 - (_QWORD)v144;
      if (v48 - (unint64_t)v144 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_95;
    }
    else
    {
      if ((v149 & 8) == 0)
      {
        v44 = 0;
        HIBYTE(v139) = 0;
        v45 = __dst;
        goto LABEL_50;
      }
      v49 = v142;
      v44 = v143 - (_QWORD)v142;
      if ((unint64_t)(v143 - (_QWORD)v142) > 0x7FFFFFFFFFFFFFF7)
LABEL_95:
        sub_20E860B7C();
    }
    if (v44 >= 0x17)
    {
      v50 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v50 = v44 | 7;
      v51 = v50 + 1;
      v45 = (void **)operator new(v50 + 1);
      __dst[1] = (void *)v44;
      v139 = v51 | 0x8000000000000000;
      __dst[0] = v45;
    }
    else
    {
      HIBYTE(v139) = v44;
      v45 = __dst;
      if (!v44)
      {
LABEL_50:
        *((_BYTE *)v45 + v44) = 0;
        v131[0] = &v151;
        v131[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v131[2] = std::chrono::system_clock::now().__d_.__rep_;
        v132 = 2;
        v133 = "unknown file";
        v134 = 727;
        v136 = 0;
        v137 = 0;
        v135 = "unknown function";
        if (v139 >= 0)
          v52 = (const char *)__dst;
        else
          v52 = (const char *)__dst[0];
        v53 = *(_QWORD *)v131[0];
        v54 = *(_QWORD *)v131[0] + 16;
        if (*(char *)(*(_QWORD *)v131[0] + 39) < 0)
        {
          v56 = *(const char **)(v53 + 16);
          v55 = *(_QWORD *)(v53 + 24);
          v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v58 & 1) != 0)
            goto LABEL_57;
        }
        else
        {
          v55 = *(unsigned __int8 *)(*(_QWORD *)v131[0] + 39);
          v56 = (const char *)(*(_QWORD *)v131[0] + 16);
          v57 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v57 & 1) != 0)
            goto LABEL_57;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v163);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v163);
          if ((_BYTE)v164 && (v163[23] & 0x80000000) != 0)
            operator delete(*(void **)v163);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_57:
        if (byte_254A4A4F8[23] >= 0)
          v59 = byte_254A4A4F8;
        else
          v59 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v60 = byte_254A4A4F8[23];
        else
          v60 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v163 = os_log_create(v59, v56);
        v61 = &v163[8];
        if (v60 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v60 >= 0x17)
        {
          v130 = v56;
          v62 = v42;
          v63 = v53;
          v64 = v52;
          v65 = v40;
          v66 = v54;
          v67 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v67 = v60 | 7;
          v68 = v67 + 1;
          v61 = operator new(v67 + 1);
          *(_QWORD *)&v163[16] = v60;
          *(_QWORD *)&v164 = v68 | 0x8000000000000000;
          *(_QWORD *)&v163[8] = v61;
          v54 = v66;
          v40 = v65;
          v52 = v64;
          v53 = v63;
          v42 = v62;
          v56 = v130;
        }
        else
        {
          BYTE7(v164) = v60;
          if (!v60)
          {
LABEL_71:
            v61[v60] = 0;
            BYTE8(v164) = 1;
            v69 = v165;
            if (v55 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v55 >= 0x17)
            {
              v70 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17)
                v70 = v55 | 7;
              v71 = v70 + 1;
              v69 = (void **)operator new(v70 + 1);
              v165[1] = (void *)v55;
              v166 = v71 | 0x8000000000000000;
              v165[0] = v69;
            }
            else
            {
              HIBYTE(v166) = v55;
              if (!v55)
              {
LABEL_79:
                *((_BYTE *)v69 + v55) = 0;
                v167 = 1;
                v72 = *(NSObject **)v163;
                if (SHIBYTE(v166) < 0)
                  operator delete(v165[0]);
                if (BYTE8(v164) && SBYTE7(v164) < 0)
                  operator delete(*(void **)&v163[8]);
                if (*(_QWORD *)v163)
                  os_release(*(void **)v163);
                if (!v42 || !*(_QWORD *)(v42 + 24))
                {
                  os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v163 = 136315138;
                  *(_QWORD *)&v163[4] = v52;
                  v79 = (void *)_os_log_send_and_compose_impl();
                  if (v79)
                    free(v79);
                  goto LABEL_162;
                }
                v73 = _os_log_pack_size();
                v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
                v75 = (std::__shared_weak_count *)operator new();
                v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v75->__shared_owners_ = 0;
                v75->__shared_weak_owners_ = 0;
                v75[1].__vftable = v74;
                *(_QWORD *)&v157 = v74;
                *((_QWORD *)&v157 + 1) = v74;
                v159 = 0;
                v160 = 0;
                v158 = v75;
                v76 = strlen(v52);
                if (v76 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v77 = v76;
                if (v76 >= 0x17)
                {
                  v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v76 | 7) != 0x17)
                    v80 = v76 | 7;
                  v81 = v80 + 1;
                  v78 = operator new(v80 + 1);
                  *(_QWORD *)&v162 = v77;
                  *((_QWORD *)&v162 + 1) = v81 | 0x8000000000000000;
                  v161 = v78;
                }
                else
                {
                  HIBYTE(v162) = v76;
                  v78 = &v161;
                  if (!v76)
                  {
LABEL_100:
                    *((_BYTE *)v78 + v77) = 0;
                    v82 = v161;
                    v168[0] = v162;
                    *(_QWORD *)((char *)v168 + 7) = *(_QWORD *)((char *)&v162 + 7);
                    v83 = HIBYTE(v162);
                    v84 = operator new(0x38uLL);
                    v84[1] = 0;
                    v84[2] = 0;
                    v84[3] = off_24C9ABC20;
                    *v84 = &off_24C9ABBD0;
                    v85 = v168[0];
                    v84[4] = v82;
                    v84[5] = v85;
                    *(_QWORD *)((char *)v84 + 47) = *(_QWORD *)((char *)v168 + 7);
                    *((_BYTE *)v84 + 55) = v83;
                    v168[0] = 0;
                    *(_QWORD *)((char *)v168 + 7) = 0;
                    v86 = v160;
                    v159 = (char *)(v84 + 3);
                    v160 = (std::__shared_weak_count *)v84;
                    if (v86)
                    {
                      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(p_shared_owners);
                      while (__stlxr(v88 - 1, p_shared_owners));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    *(_OWORD *)v163 = v157;
                    v89 = v159;
                    *(_QWORD *)&v163[16] = v158;
                    if (v158)
                    {
                      v90 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                    }
                    v92 = v160;
                    *(_QWORD *)&v164 = v89;
                    *((_QWORD *)&v164 + 1) = v160;
                    if (v160)
                    {
                      v93 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v94 = __ldxr(v93);
                      while (__stxr(v94 + 1, v93));
                      v165[0] = v89;
                      do
                        v95 = __ldaxr(v93);
                      while (__stlxr(v95 - 1, v93));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                        std::__shared_weak_count::__release_weak(v92);
                      }
                    }
                    else
                    {
                      v165[0] = v89;
                    }
                    v96 = v158;
                    if (v158)
                    {
                      v97 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    v99 = *(_QWORD *)v163;
                    if (*((char *)v165[0] + 31) >= 0)
                      v100 = (char *)v165[0] + 8;
                    else
                      v100 = (char *)*((_QWORD *)v165[0] + 1);
                    v101 = _os_log_pack_fill();
                    *(_DWORD *)v101 = 136315138;
                    *(_QWORD *)(v101 + 4) = v100;
                    v102 = operator new();
                    v103 = *(unsigned __int8 *)(v53 + 39);
                    if ((v103 & 0x80u) == 0)
                      v104 = v54;
                    else
                      v104 = *(_QWORD *)(v53 + 16);
                    if ((v103 & 0x80u) != 0)
                      v103 = *(_QWORD *)(v53 + 24);
                    *(_QWORD *)v102 = v99;
                    *(_OWORD *)(v102 + 8) = *(_OWORD *)&v163[8];
                    *(_QWORD *)&v163[8] = 0;
                    *(_QWORD *)&v163[16] = 0;
                    *(_OWORD *)(v102 + 24) = v164;
                    v164 = 0uLL;
                    *(_QWORD *)(v102 + 40) = v104;
                    *(_QWORD *)(v102 + 48) = v103;
                    *(_BYTE *)(v102 + 56) = 2;
                    v161 = 0;
                    *(_QWORD *)&v157 = v102;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), &v157);
                    v105 = v157;
                    *(_QWORD *)&v157 = 0;
                    if (v105)
                    {
                      v106 = *(std::__shared_weak_count **)(v105 + 32);
                      if (v106)
                      {
                        v107 = (unint64_t *)&v106->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      v109 = *(std::__shared_weak_count **)(v105 + 16);
                      if (v109)
                      {
                        v110 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
                      v112 = v161;
                      v161 = 0;
                      if (v112)
                      {
                        v113 = (std::__shared_weak_count *)v112[4];
                        if (v113)
                        {
                          v114 = (unint64_t *)&v113->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        v116 = (std::__shared_weak_count *)v112[2];
                        if (v116)
                        {
                          v117 = (unint64_t *)&v116->__shared_owners_;
                          do
                            v118 = __ldaxr(v117);
                          while (__stlxr(v118 - 1, v117));
                          if (!v118)
                          {
                            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                            std::__shared_weak_count::__release_weak(v116);
                          }
                        }
                        MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
                      }
                    }
                    v119 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
                    if (*((_QWORD *)&v164 + 1))
                    {
                      v120 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    v122 = *(std::__shared_weak_count **)&v163[16];
                    if (*(_QWORD *)&v163[16])
                    {
                      v123 = (unint64_t *)(*(_QWORD *)&v163[16] + 8);
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
LABEL_162:
                    if (v40)
                    {
                      v125 = (const char *)__dst;
                      if (v139 < 0)
                        v125 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v131, "%s", v125);
                      sub_20E863570((uint64_t)v131);
                    }
                    sub_20E863570((uint64_t)v131);
                    v126 = v137;
                    if (v137)
                    {
                      v127 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    if (SHIBYTE(v139) < 0)
                      operator delete(__dst[0]);
                    v140[0] = *MEMORY[0x24BEDB7F0];
                    v129 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v140 + *(_QWORD *)(v140[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v141[0] = v129;
                    v141[1] = MEMORY[0x24BEDB848] + 16;
                    if (v147 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v150);
                    return 0;
                  }
                }
                memcpy(v78, v52, v77);
                goto LABEL_100;
              }
            }
            memmove(v69, v56, v55);
            goto LABEL_79;
          }
        }
        memmove(v61, v59, v60);
        goto LABEL_71;
      }
    }
    memmove(v45, v49, v44);
    goto LABEL_50;
  }
  _Q3 = *(_OWORD *)(v5 + 48);
  _D5 = v152.i64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v17 = _D4 + *(double *)(v5 + 64) * v153;
  if (v17 >= 0.0)
  {
    v169 = vld3q_f64((const double *)v5);
    _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169.val[0], *(double *)v152.i64), v169.val[1], *(double *)vextq_s8(v152, v152, 8uLL).i64), v169.val[2], v153), vmulq_n_f64(*(float64x2_t *)(v5 + 72), v17));
    _D1 = _Q0.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v21 = sqrt(_D6);
    v22 = fabs(v17);
    v23 = fabs(v21);
    v24 = v22 / v23;
    if (v22 >= v23)
      v24 = v23 / v22;
    if (v24 <= 0.414213562)
    {
      v26 = 1;
      v27 = 2;
      v25 = v24;
      if (_D6 >= 0.00000001)
      {
LABEL_9:
        v28 = *(_QWORD *)&v17;
        if (v22 < v23)
          v26 = -v26;
        else
          v27 = v24 > 0.414213562;
        v29 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v25 * v25), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v25 * v25), (float64x2_t)xmmword_210315370), v25 * v25 * (v25 * v25))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v25 * v25), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v25 * v25), (float64x2_t)xmmword_210315380), v25 * v25 * (v25 * v25))), v25 * v25 * (v25 * v25) * (v25 * v25 * (v25 * v25))));
        v30 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
        _ZF = v21 == INFINITY && v22 == INFINITY;
        v32 = v25 + v25 * vdivq_f64(v29, v30).f64[0];
        if (_ZF)
          v32 = 0.785398163;
        if (v21 == 0.0 && v17 == 0.0)
          v34 = 0.0;
        else
          v34 = v32;
        if (v28 < 0)
        {
          v27 = 4 - v27;
          v26 = -v26;
        }
        if (v21 >= 0.0)
          v35 = v27;
        else
          v35 = -v27;
        v36 = (double)v35;
        if (v21 >= 0.0)
          v37 = v26;
        else
          v37 = -v26;
        v38 = v36 * 3.061617e-17 + v36 * 0.785398163 + v34 * (double)v37;
        v39 = 1.0
            / v21
            * (v38
             * (v38
              * v38
              * (*(double *)(a1 + 168)
               + v38
               * v38
               * (*(double *)(a1 + 176)
                + v38
                * v38
                * (*(double *)(a1 + 184)
                 + v38
                 * v38
                 * (*(double *)(a1 + 192)
                  + v38
                  * v38
                  * (*(double *)(a1 + 200) + v38 * v38 * (*(double *)(a1 + 208) + v38 * v38 * *(double *)(a1 + 216)))))))
              + 1.0));
        goto LABEL_39;
      }
    }
    else
    {
      v25 = (v23 - v22) / (v22 + v23);
      if (v22 >= v23)
        v25 = -v25;
      v26 = -1;
      v27 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_9;
    }
    v39 = 1.0 / v17;
LABEL_39:
    v46 = vmulq_n_f64(_Q0, v39);
    *a2 = v46;
    a2->f64[0] = *(double *)(a1 + 584) + v46.f64[0];
    a2->f64[1] = *(double *)(a1 + 592) + v46.f64[1];
    return 1;
  }
  return 0;
}

void sub_20EB37178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v4 - 184) && *(char *)(v4 - 185) < 0)
    operator delete(*(void **)(v4 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB372E0(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  float64x2_t v5;
  uint64_t v10;
  double v12;
  double v13;
  float64x2_t v20;
  double v21;
  double v25;
  float64x2_t v26;
  double v27;
  int8x16_t v28;
  double v30;
  int8x16_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v39;
  double v40;
  double v43;
  double v44;
  float64x2_t v45;
  double v47;
  long double v48;
  long double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  long double v57;
  long double v58;
  long double v59;
  float64x2_t v62;
  double v63;
  double v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v70;
  float64x2_t v71;
  double v73;
  float64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v78;
  double v80;
  float64x2_t v82;
  float64x2_t v83;
  double v85;
  double v86;
  const double *v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v94;
  int8x16_t v96;
  float64x2_t v97;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  float64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  double v131;
  float64x2_t v132;
  double v133;
  double v134;
  int8x16_t v135;
  double v136;
  __int128 v137;
  double v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v142;
  __int128 v143;
  double v144;
  int8x16_t v145;
  double v146;
  int8x16_t v147;
  double v148;
  char v149;
  int64x2_t v150;
  float64_t v151;
  int64x2_t v152;
  float64_t v153;
  __int128 v154;
  double v155;
  float64x2_t v156;
  double v157;
  float64x2x3_t v158;

  v10 = a1 + 512;
  _D2 = *(_QWORD *)(a1 + 552);
  v12 = *(double *)(a1 + 576);
  v13 = a4[1].f64[0];
  _Q7 = *a4;
  __asm { FMLA            D0, D2, V7.D[1] }
  v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 512), a4->f64[0]), *(float64x2_t *)(a1 + 536), *a4, 1), *(float64x2_t *)(a1 + 560), v13);
  v157 = _D0 + v12 * v13;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 496), (uint64_t)&v156, 30, (uint64_t)&v150, 0, &v147, 0.00000001, v156);
  if (!v149)
    return 0;
  v5.f64[0] = v148;
  v20 = (float64x2_t)v147;
  v21 = *(double *)(v10 + 64);
  _Q24 = *(int8x16_t *)(v10 + 48);
  _D1 = v147.i64[1];
  __asm { FMLA            D0, D1, V24.D[1] }
  v25 = _D0 + v21 * v148;
  if (v25 < 0.0)
    return 0;
  v26 = (float64x2_t)vextq_s8(v147, v147, 8uLL);
  v27 = *(double *)(v10 + 16);
  v28 = *(int8x16_t *)v10;
  *(_QWORD *)&_D29 = vextq_s8(v28, v28, 8uLL).u64[0];
  v30 = *(double *)(v10 + 40);
  v31 = *(int8x16_t *)(v10 + 24);
  *(_QWORD *)&_D28 = vextq_s8(v31, v31, 8uLL).u64[0];
  *(_QWORD *)&_D25 = vextq_s8(_Q24, _Q24, 8uLL).u64[0];
  v34.f64[0] = v27;
  v34.f64[1] = v30;
  v35.f64[0] = _D29;
  v35.f64[1] = _D28;
  v36.f64[0] = *(float64_t *)v10;
  v36.f64[1] = *(float64_t *)(v10 + 24);
  v37 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, *(double *)v147.i64), v35, v26.f64[0]), v34, v148);
  _Q0 = *(float64x2_t *)(v10 + 72);
  _Q26 = vsubq_f64(v37, vmulq_n_f64(_Q0, v25));
  v39 = -_Q0.f64[0];
  v40 = -*(double *)(v10 + 80);
  _Q0.f64[0] = _Q26.f64[1];
  __asm { FMLA            D2, D0, V26.D[1] }
  if (_D2 >= 0.00000001)
  {
    v146 = v39;
    v47 = v25 * v25 + _D2;
    v48 = sqrt(_D2);
    v145 = v147;
    v143 = *(_OWORD *)(v10 + 48);
    v144 = *(double *)(v10 + 64);
    v141 = _D25;
    v142 = _Q26;
    v139 = *(double *)(v10 + 16);
    v140 = *(double *)(v10 + 40);
    v137 = *(_OWORD *)(v10 + 24);
    v138 = _D28;
    v135 = *(int8x16_t *)v10;
    v136 = _D29;
    v133 = v25;
    v134 = _D2;
    v49 = atan2(v48, v25);
    v28.i64[0] = v135.i64[0];
    _D29 = v136;
    _D28 = v138;
    v30 = v140;
    _D25 = v141;
    _Q26 = v142;
    _Q24.i64[0] = v143;
    v20 = (float64x2_t)v145;
    v50 = *(double *)(a1 + 168);
    v51 = *(double *)(a1 + 176);
    v52 = *(double *)(a1 + 184);
    v53 = *(double *)(a1 + 192);
    v54 = *(double *)(a1 + 200);
    v55 = *(double *)(a1 + 208);
    v56 = *(double *)(a1 + 216);
    v31.i64[0] = v137;
    v27 = v139;
    v57 = v49
        * v49
        * (v50 * 3.0
         + v49
         * v49
         * (v51 * 5.0
          + v49
          * v49
          * (v52 * 7.0
           + v49 * v49 * (v53 * 9.0 + v49 * v49 * (v54 * 11.0 + v49 * v49 * (v55 * 13.0 + v49 * v49 * 15.0 * v56))))))
        + 1.0;
    v58 = v49 * v49 * v56;
    v21 = v144;
    v43 = v49
        * (v49
         * v49
         * (v50 + v49
                * v49
                * (v51 + v49 * v49 * (v52 + v49 * v49 * (v53 + v49 * v49 * (v54 + v49 * v49 * (v55 + v58))))))
         + 1.0)
        / v48;
    v59 = v57 / v47;
    v39 = v146;
    v45 = vmulq_n_f64(v142, (v133 * v59 - v43) / v134);
    v44 = -v59;
    _Q0 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
  }
  else
  {
    v43 = 1.0 / v25;
    v44 = -(v43 * v43);
    v45.f64[0] = 0.0;
    _Q0.f64[0] = 0.0;
  }
  _Q5 = vmulq_n_f64(_Q26, v43);
  *a2 = _Q5;
  v45.f64[1] = _Q0.f64[0];
  _Q1 = vmulq_n_f64(v45, _Q26.f64[0]);
  _Q0.f64[0] = v44 * _Q26.f64[0];
  v62 = vmulq_laneq_f64(v45, _Q26, 1);
  v63 = v43 + _Q1.f64[0];
  v64 = v43 + v62.f64[1];
  a2->f64[0] = *(double *)(a1 + 584) + _Q5.f64[0];
  a2->f64[1] = *(double *)(a1 + 592) + _Q5.f64[1];
  _Q5.f64[0] = v151;
  _V19.D[1] = *((_QWORD *)&v154 + 1);
  v66 = (float64x2_t)vzip1q_s64(v150, v152);
  v67 = (float64x2_t)vzip2q_s64(v150, v152);
  _Q5.f64[1] = v153;
  v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v66, *(double *)v28.i64), v67, _D29), _Q5, v27);
  __asm { FMLA            D16, D29, V19.D[1] }
  v70 = _D16 + v155 * v27;
  v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v66, *(double *)v31.i64), v67, _D28), _Q5, v30);
  __asm { FMLA            D22, D28, V19.D[1] }
  v73 = _D22 + v155 * v30;
  v90 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v66, *(double *)_Q24.i64), v67, _D25), _Q5, v21);
  __asm { FMLA            D5, D25, V19.D[1] }
  v74 = _Q5.f64[0] + v155 * v21;
  v75 = vmulq_f64(v68, (float64x2_t)0);
  v76 = vmlaq_n_f64(vmlaq_f64(v68, (float64x2_t)0, v71), v90, v39);
  _D6 = 0;
  v78 = v70 + v73 * 0.0 + v74 * v39;
  _Q24 = vmlaq_n_f64(vaddq_f64(v71, v75), v90, v40);
  v80 = v70 * 0.0;
  _D25 = v73 + v80 + v74 * v40;
  v82 = vaddq_f64(v90, vmlaq_f64(v75, (float64x2_t)0, v71));
  v90.f64[0] = v74 + v80 + v73 * 0.0;
  v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v63), _Q24, _Q1, 1), v82, v44 * _Q26.f64[0]);
  __asm { FMLA            D18, D25, V1.D[1] }
  v85 = _D18 + v90.f64[0] * (v44 * _Q26.f64[0]);
  v86 = vmuld_lane_f64(v44, _Q26, 1);
  v87 = (const double *)v10;
  v158 = vld3q_f64(v87);
  v87 += 6;
  v88 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v76, v62.f64[0]), _Q24, v64), v82, v86);
  v89 = v78 * v62.f64[0] + _D25 * v64 + v90.f64[0] * v86;
  v90.f64[0] = *(float64_t *)(v10 + 64);
  _Q21 = *(_OWORD *)v87;
  v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v158.val[0], v83.f64[0]), v158.val[1], v83, 1), v158.val[2], v85);
  _Q24.f64[0] = v83.f64[1];
  __asm { FMLA            D23, D24, V21.D[1] }
  v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v158.val[0], v88.f64[0]), v158.val[1], v88, 1), v158.val[2], v89);
  v158.val[0].f64[0] = v88.f64[1];
  __asm { FMLA            D25, D26, V21.D[1] }
  *(float64x2_t *)a3 = v92;
  *(double *)(a3 + 16) = _D23 + v90.f64[0] * v85;
  *(float64x2_t *)(a3 + 24) = v94;
  *(double *)(a3 + 40) = _D25 + v90.f64[0] * v89;
  if (a5)
  {
    v90.f64[0] = *(float64_t *)(v10 + 64);
    v96 = *(int8x16_t *)(v10 + 32);
    v97 = *(float64x2_t *)(v10 + 48);
    v99 = *(float64x2_t *)v10;
    _Q23 = *(float64x2_t *)(v10 + 16);
    v100 = (float64x2_t)vextq_s8(*(int8x16_t *)v10, v96, 8uLL);
    v99.f64[1] = *(float64_t *)(v10 + 24);
    v101 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)_Q23, 8uLL);
    v102 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)v97, 8uLL);
    _Q23.f64[1] = *(float64_t *)(v10 + 40);
    v103 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v96, 1), (int64x2_t)v90);
    v104 = (int64x2_t)vmlsq_f64(vmulq_f64(v5, v101), v26, v90);
    v105 = (float64x2_t)vextq_s8((int8x16_t)v101, (int8x16_t)v103, 8uLL);
    v106 = (int64x2_t)vmlsq_laneq_f64(vmulq_laneq_f64(v20, v103, 1), v5, v102, 1);
    v107 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v105, v20.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(_QWORD *)v10, 0), (int8x16_t)v102, 8uLL), v5.f64[0], 0);
    v108 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v100, v5.f64[0]), _Q23, v26.f64[0], 0);
    _Q24 = vmlsq_lane_f64(vmulq_n_f64(v99, v26.f64[0]), v100, v20.f64[0], 0);
    v105.f64[0] = vmlsq_laneq_f64(vmulq_f64(v26, v97), v20, v97, 1).f64[0];
    *(_QWORD *)&v97.f64[0] = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v157);
    v110.f64[0] = 0.0;
    v110.f64[1] = v157;
    v111 = vmlaq_f64(vmulq_n_f64(v110, v83.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v83, 1), (float64x2_t)*(unint64_t *)&v97.f64[0]);
    v112 = vmlaq_f64(vmulq_n_f64(v110, v88.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1), (float64x2_t)*(unint64_t *)&v97.f64[0]);
    v113 = vnegq_f64(v156);
    v114 = (float64x2_t)vextq_s8((int8x16_t)v156, (int8x16_t)v113, 8uLL);
    v115 = vmlaq_f64(v111, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v85, 0), v114);
    v116 = vmlaq_f64(v112, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v89, 0), v114);
    v83.f64[0] = vmuld_lane_f64(v83.f64[0], v113, 1)
               + v156.f64[0] * *(double *)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).i64
               + v85 * 0.0;
    v117 = vmuld_lane_f64(v88.f64[0], v113, 1);
    v118 = (float64x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL);
    v118.f64[0] = v117 + v156.f64[0] * v118.f64[0] + v89 * 0.0;
    v119 = (float64x2_t)vzip1q_s64(v108, v107);
    _Q19 = (float64x2_t)vzip2q_s64(v108, v107);
    v121 = vmulq_f64(v119, (float64x2_t)0);
    v122 = vmlaq_f64(v119, (float64x2_t)0, _Q19);
    __asm { FMLA            D23, D6, V24.D[1] }
    v123 = vaddq_f64(_Q19, v121);
    v124 = vmlaq_f64(v121, (float64x2_t)0, _Q19);
    v125 = _Q24.f64[1] + 0.0 * _Q24.f64[0];
    __asm { FMLA            D19, D6, V24.D[1] }
    v126 = (float64x2_t)vzip1q_s64(v104, v106);
    v127 = vmlaq_f64(v122, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0), v126);
    v128 = vmlaq_f64(v123, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0), v126);
    v129 = vaddq_f64(v126, v124);
    v130 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v127, v63), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q1, 1), v128), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0), v129);
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v39, v105.f64[0]);
    v131 = vmlad_n_f64(v125, v40, v105.f64[0]);
    v132 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
    _Q0.f64[0] = _Q23.f64[0] * v63 + v131 * v132.f64[0] + (v105.f64[0] + _Q19.f64[0]) * _Q0.f64[0];
    v132.f64[0] = _Q23.f64[0] * v62.f64[0] + v131 * v64 + (v105.f64[0] + _Q19.f64[0]) * v86;
    *(_QWORD *)(a5 + 16) = *(_OWORD *)&vaddq_f64(v83, _Q0);
    *(float64x2_t *)a5 = vaddq_f64(v115, v130);
    *(_QWORD *)(a5 + 40) = *(_OWORD *)&vaddq_f64(v118, v132);
    *(float64x2_t *)(a5 + 24) = vaddq_f64(v116, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v127, v62.f64[0]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v64, 0), v128), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v86, 0), v129));
  }
  return 1;
}

BOOL sub_20EB378CC(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v6;
  double v8;
  double v9;
  int v16;
  const double *v17;
  double v18;
  float64x2_t v19;
  float64x2_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v110;
  const char *v111;
  unint64_t v112;
  _QWORD v113[3];
  int v114;
  const char *v115;
  int v116;
  const char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *__dst[2];
  int64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *__p;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  __int128 v146;
  _BYTE v147[24];
  __int128 v148;
  void *v149[2];
  unint64_t v150;
  char v151;
  _QWORD v152[5];
  float64x2x3_t v153;
  float64x2x3_t v154;

  v152[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 512;
  _D2 = *(_QWORD *)(a1 + 552);
  v8 = *(double *)(a1 + 576);
  v9 = a4[1].f64[0];
  _Q7 = *a4;
  __asm { FMLA            D0, D2, V7.D[1] }
  v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 512), a4->f64[0]), *(float64x2_t *)(a1 + 536), *a4, 1), *(float64x2_t *)(a1 + 560), v9);
  v140 = _D0 + v8 * v9;
  v135 = 0uLL;
  v136 = 0.0;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 496), (uint64_t)&v139, 30, 0, (uint64_t)&v135, v122, 0.00000001, v139);
  v16 = v124;
  if ((_BYTE)v124)
  {
    v17 = (const double *)v6;
    v153 = vld3q_f64(v17);
    v17 += 6;
    v18 = v136;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v153.val[0], v137.f64[0]), v153.val[1], v137, 1), v153.val[2], v138);
    v153.val[0] = *(float64x2_t *)v17;
    v153.val[2].f64[0] = v137.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v153.val[0].f64[0] = v153.val[1].f64[0] + *(double *)(v6 + 64) * v138;
    *a2 = v19;
    a2[1].f64[0] = v153.val[0].f64[0];
    v154 = vld3q_f64((const double *)v6);
    _Q4 = *(float64x2_t *)v17;
    v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v154.val[0], v135.f64[0]), v154.val[1], v135, 1), v154.val[2], v18);
    v154.val[1].f64[0] = v135.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    a3[1].f64[0] = v154.val[0].f64[0] + *(double *)(v6 + 64) * v18;
    *a3 = v21;
    return v16 != 0;
  }
  sub_20EB2BB94(&v134);
  if (**(int **)(v134 + 56) <= 2)
  {
    v22 = *(unsigned __int8 *)(v134 + 72);
    v23 = *(_BYTE *)(v134 + 72) != 0;
    v24 = sub_20E8C31DC(v134, "OSLogSurrogateAppender", 1, 0);
    if (((v24 == 0) & ~v23) == 0)
    {
      sub_20E863438((uint64_t)v122);
      v25 = sub_20E86A980(&v123, (uint64_t)"failed to project: xc=", 22);
      *(_QWORD *)v147 = &v139;
      sub_20EB1A104(v25, (__int128 **)v147);
      v112 = v24;
      if ((v132 & 0x10) != 0)
      {
        v28 = v131;
        if (v131 < v128)
        {
          v131 = v128;
          v28 = v128;
        }
        v29 = v127;
        v26 = v28 - (_QWORD)v127;
        if (v28 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_63;
      }
      else
      {
        if ((v132 & 8) == 0)
        {
          v26 = 0;
          HIBYTE(v121) = 0;
          v27 = __dst;
          goto LABEL_18;
        }
        v29 = v125;
        v26 = v126 - (_QWORD)v125;
        if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
          sub_20E860B7C();
      }
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        v27 = (void **)operator new(v30 + 1);
        __dst[1] = (void *)v26;
        v121 = v31 | 0x8000000000000000;
        __dst[0] = v27;
      }
      else
      {
        HIBYTE(v121) = v26;
        v27 = __dst;
        if (!v26)
        {
LABEL_18:
          *((_BYTE *)v27 + v26) = 0;
          v113[0] = &v134;
          v113[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v113[2] = std::chrono::system_clock::now().__d_.__rep_;
          v114 = 2;
          v115 = "unknown file";
          v116 = 838;
          v118 = 0;
          v119 = 0;
          v117 = "unknown function";
          if (v121 >= 0)
            v32 = __dst;
          else
            v32 = (void **)__dst[0];
          v33 = *(_QWORD *)v113[0];
          v34 = (const char *)(*(_QWORD *)v113[0] + 16);
          v110 = *(_QWORD *)v113[0];
          v111 = v34;
          if (*(char *)(*(_QWORD *)v113[0] + 39) < 0)
          {
            v34 = *(const char **)(v33 + 16);
            v35 = *(_QWORD *)(v33 + 24);
            v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v37 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            v35 = *(unsigned __int8 *)(*(_QWORD *)v113[0] + 39);
            v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v36 & 1) != 0)
              goto LABEL_25;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v147);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v147);
            if ((_BYTE)v148 && (v147[23] & 0x80000000) != 0)
              operator delete(*(void **)v147);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_25:
          if (byte_254A4A4F8[23] >= 0)
            v38 = byte_254A4A4F8;
          else
            v38 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v39 = byte_254A4A4F8[23];
          else
            v39 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v147 = os_log_create(v38, v34);
          v40 = &v147[8];
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v41 = v22;
            v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v42 = v39 | 7;
            v43 = v42 + 1;
            v40 = operator new(v42 + 1);
            *(_QWORD *)&v147[16] = v39;
            *(_QWORD *)&v148 = v43 | 0x8000000000000000;
            *(_QWORD *)&v147[8] = v40;
            v22 = v41;
          }
          else
          {
            BYTE7(v148) = v39;
            if (!v39)
            {
LABEL_39:
              v40[v39] = 0;
              BYTE8(v148) = 1;
              v44 = v149;
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v45 = (const char *)v32;
              if (v35 >= 0x17)
              {
                v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v47 = v35 | 7;
                v48 = v47 + 1;
                v46 = v112;
                v44 = (void **)operator new(v47 + 1);
                v149[1] = (void *)v35;
                v150 = v48 | 0x8000000000000000;
                v149[0] = v44;
              }
              else
              {
                HIBYTE(v150) = v35;
                v46 = v112;
                if (!v35)
                {
LABEL_47:
                  *((_BYTE *)v44 + v35) = 0;
                  v151 = 1;
                  v49 = *(NSObject **)v147;
                  if (SHIBYTE(v150) < 0)
                    operator delete(v149[0]);
                  if (BYTE8(v148) && SBYTE7(v148) < 0)
                    operator delete(*(void **)&v147[8]);
                  if (*(_QWORD *)v147)
                    os_release(*(void **)v147);
                  if (!v46 || !*(_QWORD *)(v46 + 24))
                  {
                    os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v147 = 136315138;
                    *(_QWORD *)&v147[4] = v45;
                    v56 = (void *)_os_log_send_and_compose_impl();
                    if (v56)
                      free(v56);
                    goto LABEL_128;
                  }
                  v50 = _os_log_pack_size();
                  v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
                  v52 = (std::__shared_weak_count *)operator new();
                  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v52->__shared_owners_ = 0;
                  v52->__shared_weak_owners_ = 0;
                  v52[1].__vftable = v51;
                  *(_QWORD *)&v141 = v51;
                  *((_QWORD *)&v141 + 1) = v51;
                  v143 = 0;
                  v144 = 0;
                  v142 = v52;
                  v53 = strlen(v45);
                  if (v53 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v54 = v53;
                  if (v53 >= 0x17)
                  {
                    v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v53 | 7) != 0x17)
                      v57 = v53 | 7;
                    v58 = v57 + 1;
                    v55 = operator new(v57 + 1);
                    *(_QWORD *)&v146 = v54;
                    *((_QWORD *)&v146 + 1) = v58 | 0x8000000000000000;
                    v145 = v55;
                  }
                  else
                  {
                    HIBYTE(v146) = v53;
                    v55 = &v145;
                    if (!v53)
                    {
LABEL_68:
                      *((_BYTE *)v55 + v54) = 0;
                      v59 = v145;
                      v152[0] = v146;
                      *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)&v146 + 7);
                      v60 = HIBYTE(v146);
                      v61 = operator new(0x38uLL);
                      v61[1] = 0;
                      v61[2] = 0;
                      v61[3] = off_24C9ABC20;
                      *v61 = &off_24C9ABBD0;
                      v62 = v152[0];
                      v61[4] = v59;
                      v61[5] = v62;
                      *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v152 + 7);
                      *((_BYTE *)v61 + 55) = v60;
                      v152[0] = 0;
                      *(_QWORD *)((char *)v152 + 7) = 0;
                      v63 = v144;
                      v143 = (char *)(v61 + 3);
                      v144 = (std::__shared_weak_count *)v61;
                      if (v63)
                      {
                        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                        do
                          v65 = __ldaxr(p_shared_owners);
                        while (__stlxr(v65 - 1, p_shared_owners));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      *(_OWORD *)v147 = v141;
                      v66 = v143;
                      *(_QWORD *)&v147[16] = v142;
                      if (v142)
                      {
                        v67 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v68 = __ldxr(v67);
                        while (__stxr(v68 + 1, v67));
                      }
                      v69 = v144;
                      *(_QWORD *)&v148 = v66;
                      *((_QWORD *)&v148 + 1) = v144;
                      if (v144)
                      {
                        v70 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                        v149[0] = v66;
                        do
                          v72 = __ldaxr(v70);
                        while (__stlxr(v72 - 1, v70));
                        if (!v72)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      else
                      {
                        v149[0] = v66;
                      }
                      v73 = v142;
                      if (v142)
                      {
                        v74 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = *(_QWORD *)v147;
                      if (*((char *)v149[0] + 31) >= 0)
                        v77 = (char *)v149[0] + 8;
                      else
                        v77 = (char *)*((_QWORD *)v149[0] + 1);
                      v78 = _os_log_pack_fill();
                      *(_DWORD *)v78 = 136315138;
                      *(_QWORD *)(v78 + 4) = v77;
                      v79 = operator new();
                      v80 = *(unsigned __int8 *)(v110 + 39);
                      v81 = *(const char **)(v110 + 16);
                      v82 = *(_QWORD *)(v110 + 24);
                      v83 = v148;
                      *(_OWORD *)(v79 + 8) = *(_OWORD *)&v147[8];
                      if ((v80 & 0x80u) != 0)
                        v80 = v82;
                      else
                        v81 = v111;
                      *(_QWORD *)v79 = v76;
                      *(_QWORD *)&v147[8] = 0;
                      *(_QWORD *)&v147[16] = 0;
                      *(_OWORD *)(v79 + 24) = v83;
                      v148 = 0uLL;
                      *(_QWORD *)(v79 + 40) = v81;
                      *(_QWORD *)(v79 + 48) = v80;
                      *(_BYTE *)(v79 + 56) = 2;
                      v145 = 0;
                      *(_QWORD *)&v141 = v79;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v141);
                      v84 = v141;
                      *(_QWORD *)&v141 = 0;
                      if (v84)
                      {
                        v85 = *(std::__shared_weak_count **)(v84 + 32);
                        if (v85)
                        {
                          v86 = (unint64_t *)&v85->__shared_owners_;
                          do
                            v87 = __ldaxr(v86);
                          while (__stlxr(v87 - 1, v86));
                          if (!v87)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                        }
                        v88 = *(std::__shared_weak_count **)(v84 + 16);
                        if (v88)
                        {
                          v89 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
                        v91 = v145;
                        v145 = 0;
                        if (v91)
                        {
                          v92 = (std::__shared_weak_count *)v91[4];
                          if (v92)
                          {
                            v93 = (unint64_t *)&v92->__shared_owners_;
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = (std::__shared_weak_count *)v91[2];
                          if (v95)
                          {
                            v96 = (unint64_t *)&v95->__shared_owners_;
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                        }
                      }
                      v98 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                      if (*((_QWORD *)&v148 + 1))
                      {
                        v99 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v101 = *(std::__shared_weak_count **)&v147[16];
                      if (*(_QWORD *)&v147[16])
                      {
                        v102 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
LABEL_128:
                      if (v22)
                      {
                        v104 = (const char *)__dst;
                        if (v121 < 0)
                          v104 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v113, "%s", v104);
                        sub_20E863570((uint64_t)v113);
                      }
                      sub_20E863570((uint64_t)v113);
                      v105 = v119;
                      if (v119)
                      {
                        v106 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (SHIBYTE(v121) < 0)
                        operator delete(__dst[0]);
                      v122[0] = *MEMORY[0x24BEDB7F0];
                      v108 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v122 + *(_QWORD *)(v122[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v123 = v108;
                      v124 = MEMORY[0x24BEDB848] + 16;
                      if (v130 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v133);
                      return v16 != 0;
                    }
                  }
                  memcpy(v55, v45, v54);
                  goto LABEL_68;
                }
              }
              memmove(v44, v34, v35);
              goto LABEL_47;
            }
          }
          memmove(v40, v38, v39);
          goto LABEL_39;
        }
      }
      memmove(v27, v29, v26);
      goto LABEL_18;
    }
  }
  return v16 != 0;
}

void sub_20EB38414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);
  _Unwind_Resume(a1);
}

double sub_20EB3857C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  char v11;
  char *v12;

  v1 = *(_QWORD *)(a1 + 496);
  v2 = *(unsigned int *)(v1 + 104);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v12 = &v11;
  v4 = ((double (*)(char **, uint64_t))off_24C9C4FE8[v2])(&v12, v1 + 88);
  if (v4 <= 0.0)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 922, (uint64_t)&unk_210254955, 0, (uint64_t)"Invalid lens distortion.", 24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v5 = __sincos_stret(v4);
  v6 = *(double *)(a1 + 584);
  v7 = *(double *)(a1 + 592);
  v8.f64[1] = v5.__sinval - v5.__cosval * v7;
  v8.f64[0] = v5.__sinval * 0.0 - v5.__cosval * v6;
  v9 = vmulq_n_f64(v8, v5.__cosval);
  return (v6 + v9.f64[0]) * (v6 + v9.f64[0]) + (v7 + v9.f64[1]) * (v7 + v9.f64[1]);
}

uint64_t sub_20EB38854(uint64_t a1, __int128 *a2, void *__src, _OWORD *a4, uint64_t a5, _OWORD *a6, const void *a7)
{
  int64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int64x2_t v20;

  v10 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = 0;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v12;
  *(double *)&v12 = *(double *)a2 * *((double *)a2 + 4);
  *(double *)(a1 + 72) = 1.0 / *(double *)a2;
  *(double *)(a1 + 80) = -*((double *)a2 + 1) / *(double *)&v12;
  *(double *)(a1 + 88) = -(*((double *)a2 + 4) * *((double *)a2 + 2) - *((double *)a2 + 1) * *((double *)a2 + 5))
                       / *(double *)&v12;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = 1.0 / *((double *)a2 + 4);
  *(double *)&v11 = -*((double *)a2 + 5) / *((double *)a2 + 4);
  *(int64x2_t *)(a1 + 168) = v10;
  v15 = (void *)(a1 + 168);
  *(_QWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
  *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(int64x2_t *)(a1 + 184) = v10;
  *(int64x2_t *)(a1 + 200) = v10;
  *(int64x2_t *)(a1 + 216) = v10;
  *(int64x2_t *)(a1 + 232) = v10;
  v20 = v10;
  *(int64x2_t *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = *a4;
  *a4 = 0u;
  *(_OWORD *)(a1 + 680) = *(_OWORD *)a5;
  v16 = *(_OWORD *)(a5 + 16);
  v17 = *(_OWORD *)(a5 + 32);
  v18 = *(_OWORD *)(a5 + 48);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 712) = v17;
  *(_OWORD *)(a1 + 728) = v18;
  *(_OWORD *)(a1 + 696) = v16;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 752) = *a6;
  if (!a7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 493, (uint64_t)"inverse_radial", 14, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memmove(v15, __src, 0x70uLL);
  memmove((void *)(a1 + 280), a7, 0x70uLL);
  *(int64x2_t *)(a1 + 144) = v20;
  *(_BYTE *)(a1 + 160) = 0;
  return a1;
}

void sub_20EB38A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

char *sub_20EB38A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (char *)operator new(0xC0uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4 + 192;
  sub_20EB44158((unint64_t *)a2, v4, (char *)a1, (char *)(a1 + 72), 9);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 168), (char *)(a1 + 280), 14);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 280), (char *)(a1 + 392), 14);
  sub_20EB1B860(*(_QWORD *)(a1 + 664), (double **)a2);
  return sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 680), (char *)(a1 + 752), 9);
}

void sub_20EB38AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB38AFC(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double result;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v7 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0xC0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 520, (uint64_t)"data.size() > camera_matrix_.elements() + radial_.size() + 1", 60, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v7 = *a2;
  }
  a5.f64[0] = *(float64_t *)(v7 + 64);
  v9 = *(float64x2_t *)(v7 + 32);
  v8 = *(float64x2_t *)(v7 + 48);
  v11 = *(int8x16_t *)v7;
  v10 = *(float64x2_t *)(v7 + 16);
  v12 = (int8x16_t)vabdq_f64(*(float64x2_t *)v7, *(float64x2_t *)a1);
  v13 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v14 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, (float64x2_t)vextq_s8(v12, v12, 8uLL)), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v10, *(float64x2_t *)(a1 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, vabdq_f64(v9, *(float64x2_t *)(a1 + 32))), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v8, *(float64x2_t *)(a1 + 48))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v14)) & 1) != 0
    || (v14.f64[0] = *(float64_t *)(a1 + 64), vabdq_f64(a5, v14).f64[0] > 1.0e-10))
  {
    v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    *(_QWORD *)&v10.f64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    *(int8x16_t *)a1 = v11;
    *(float64x2_t *)(a1 + 16) = v10;
    *(_QWORD *)&v9.f64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    *(float64_t *)(a1 + 64) = a5.f64[0];
    *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    *(float64x2_t *)(a1 + 32) = v9;
    *(float64x2_t *)(a1 + 48) = v8;
    v15 = *(double *)v7 * *(double *)(v7 + 32);
    *(double *)(a1 + 72) = 1.0 / *(double *)v7;
    *(double *)(a1 + 80) = -*(double *)(v7 + 8) / v15;
    *(double *)(a1 + 88) = -(*(double *)(v7 + 32) * *(double *)(v7 + 16) - *(double *)(v7 + 8) * *(double *)(v7 + 40))
                         / v15;
    *(_QWORD *)(a1 + 96) = 0;
    *(double *)(a1 + 104) = 1.0 / *(double *)(v7 + 32);
    *(double *)(a1 + 112) = -*(double *)(v7 + 40) / *(double *)(v7 + 32);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
    *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 160) = 0;
    v7 = *a2;
  }
  memmove((void *)(a1 + 168), (const void *)(v7 + 72), 0x70uLL);
  memmove((void *)(a1 + 280), (const void *)(v7 + 184), 0x70uLL);
  *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  v16 = v7 + 296;
  v17 = (char *)operator new(0x88uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C9C4FA8;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_QWORD *)v17 + 12) = 0;
  *((_DWORD *)v17 + 26) = 1;
  *((_QWORD *)v17 + 14) = 0x7FF8000000000000;
  v18 = *(std::__shared_weak_count **)(a1 + 672);
  *(_QWORD *)(a1 + 672) = v17;
  *((_QWORD *)v17 + 3) = &off_24C9C2508;
  *(_QWORD *)(a1 + 664) = v17 + 24;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v30 = a2[1];
      v22 = *(_QWORD *)(a1 + 664);
      v31 = (uint64_t)(v30 - v16) >> 3;
      v32 = v16;
      if (v30 >= v16)
        goto LABEL_13;
LABEL_12:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_13;
LABEL_16:
      abort();
    }
  }
  v21 = a2[1];
  v22 = *(_QWORD *)(a1 + 664);
  v31 = (uint64_t)(v21 - v16) >> 3;
  v32 = v16;
  if (v21 < v16)
    goto LABEL_12;
LABEL_13:
  v23 = a1 + 680;
  v24 = sub_20EB1B3A0(v22, &v31);
  result = v24[2];
  v26 = *((_QWORD *)v24 + 5);
  v27 = *(_OWORD *)(v24 + 3);
  v28 = *((_QWORD *)v24 + 8);
  v29 = *((_OWORD *)v24 + 3);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(double *)(v23 + 16) = result;
  *(_OWORD *)(v23 + 24) = v27;
  *(_QWORD *)(v23 + 40) = v26;
  *(_OWORD *)(v23 + 48) = v29;
  *(_QWORD *)(v23 + 64) = v28;
  return result;
}

BOOL sub_20EB38E20(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, uint64_t a6)
{
  _BOOL4 v12;
  double *v13;
  double v14;
  int v15;
  void *v16;
  int8x16_t v17;
  __int128 v18;
  __int128 v26;
  double v27;
  _BOOL8 v28;
  int64x2_t *v30;
  float64x2_t v32;
  int8x16_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64_t v38;
  int64x2_t v39;
  double v40;
  float64x2_t v42;
  float64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  unint64_t v48;
  float64_t v49;
  float64_t v51;
  float64x2_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  size_t v59;
  void **v60;
  float64x2_t v64;
  float64x2_t v66;
  double v67;
  int8x16_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82;
  int8x16_t v83;
  double v84;
  float64x2_t v86;
  int8x16_t v87;
  double v88;
  double v89;
  double v90;
  int8x16_t v91;
  double v92;
  float64x2_t v93;
  unint64_t v94;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v120;
  float64x2_t v121;
  double v126;
  double v129;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int8x16_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t v147;
  double v148;
  float64x2_t v149;
  double v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v162;
  float64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  float64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  float64x2_t v178;
  double v180;
  unint64_t v182;
  double v184;
  float64x2_t v185;
  float64x2_t v187;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v192;
  unint64_t v193;
  const void **v194;
  const void *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  size_t v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void **v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  size_t v217;
  size_t v218;
  _QWORD *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  char v224;
  _QWORD *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *p_shared_owners;
  unint64_t v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  int64x2_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  const char *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  double v272;
  int8x16_t v273;
  double v274;
  float64x2_t v275;
  float64_t v276;
  double v277;
  int8x16_t v278;
  int8x16_t v279;
  int8x16_t v280;
  float64_t v281;
  float64_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  unint64_t v286;
  unint64_t v287;
  void *v288;
  int8x16_t v289;
  float64_t v290;
  uint64_t v291;
  int8x16_t v292;
  const char *v293;
  float64x2_t v294;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v296;
  const char *v297;
  int v298;
  const char *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  void *__dst[2];
  int64_t v303;
  int8x16_t v304;
  float64_t v305;
  __int128 v306;
  unint64_t v307;
  __int128 v308;
  double v309;
  unint64_t v310;
  void *__p;
  char v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  float64x2_t v317;
  double v318;
  float64x2_t v319;
  float64_t v320;
  char v321;
  int8x16_t v322;
  _BYTE v323[32];
  int8x16_t v324;
  double v325;
  float64x2_t v326;
  double v327;
  float64x2_t v328;
  uint64_t v329;
  int8x16_t v330;
  double v331;
  float64x2_t v332;
  double v333;
  int8x16_t v334;
  double v335;
  __int128 v336;
  std::__shared_weak_count *v337;
  char *v338;
  uint64_t v339;
  _QWORD *v340;
  __int128 v341;
  float64x2_t v342;
  _BYTE v343[24];
  int64x2_t v344;
  void *v345[2];
  unint64_t v346;
  char v347;
  _QWORD v348[5];

  v348[2] = *MEMORY[0x24BDAC8D0];
  v342 = vsubq_f64(*a3, *(float64x2_t *)(a1 + 752));
  v12 = a5 != 0;
  v13 = (double *)(a1 + 168);
  v14 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  v15 = sub_20EB24F38((uint64_t)&v334, (uint64_t)&v342, a1 + 168, (double *)(a1 + 280), 0x14u, v14);
  if (!v12)
  {
    if (v15)
    {
      v292.i64[0] = (uint64_t)v16;
      v287 = (unint64_t)v16;
      v289.i64[0] = (uint64_t)v16;
      v286 = (unint64_t)v16;
      v290 = *(double *)&v16;
      v288 = v16;
      v27 = v335;
      if (v335 >= 0.0)
        goto LABEL_11;
    }
    return 0;
  }
  if (!v15)
    return 0;
  if (!sub_20EB2450C(&v317, (uint64_t)&v322, &v294, (uint64_t)&v334, v13, v14))
    return 0;
  *(double *)v17.i64 = v335;
  *(_QWORD *)&v18 = *(_QWORD *)v323;
  _Q3 = v322;
  v324 = v334;
  v325 = v335;
  rep = 0;
  _Q5.f64[0] = v335;
  *(_QWORD *)&_Q5.f64[1] = v334.i64[0];
  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)(v323 + 16), _Q5), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v323 + 16), *(int64x2_t *)v323), (float64x2_t)vextq_s8(v334, v17, 8uLL)).f64[1];
  __asm { FMLA            D6, D5, V3.D[1] }
  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)v323, (float64x2_t)v334), 1), *(float64x2_t *)&v323[16], (float64x2_t)v334).f64[0], *(double *)v323)) < 0.00000001)return 0;
  *(_QWORD *)&v26 = vextq_s8(v322, v322, 8uLL).u64[0];
  _Q3.i64[1] = vextq_s8(*(int8x16_t *)v323, *(int8x16_t *)v323, 8uLL).u64[0];
  *((_QWORD *)&v26 + 1) = *(_QWORD *)&v323[16];
  *((_QWORD *)&v18 + 1) = vextq_s8(*(int8x16_t *)&v323[16], *(int8x16_t *)&v323[16], 8uLL).u64[0];
  v305 = *(double *)v334.i64;
  v304 = _Q3;
  v307 = vextq_s8(v334, v334, 8uLL).u64[0];
  v306 = v26;
  v309 = v335;
  v308 = v18;
  sub_20E8BE424((uint64_t)v343);
  v288 = v345[0];
  v289 = (int8x16_t)vzip2q_s64(*(int64x2_t *)v343, v344);
  v290 = *(double *)&v343[16];
  v292 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v343, v344);
  v286 = vextq_s8(v289, v289, 8uLL).u64[0];
  v287 = vextq_s8(v292, v292, 8uLL).u64[0];
  v27 = v335;
  if (v335 < 0.0)
    return 0;
LABEL_11:
  v30 = (int64x2_t *)(a1 + 680);
  v334 = (int8x16_t)vaddq_f64((float64x2_t)v334, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v27));
  _D3 = *(_QWORD *)(a1 + 720);
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), *(double *)v334.i64), *(float64x2_t *)(a1 + 704), (float64x2_t)v334, 1), *(float64x2_t *)(a1 + 728), v335);
  __asm { FMLA            D1, D3, V0.D[1] }
  v333 = _D1 + *(double *)(a1 + 744) * v335;
  v332 = v32;
  if ((unint64_t)a5 | a6)
    v34 = &v322;
  else
    v34 = 0;
  sub_20EB1C3A0(*(_QWORD *)(a1 + 664), COERCE_FLOAT64_T(&v332), (uint64_t)v34, (uint64_t)&v317);
  v28 = v321 != 0;
  if (v321)
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 696);
    v38 = *(double *)(a1 + 720);
    v39 = *(int64x2_t *)(a1 + 704);
    v40 = *(double *)(a1 + 744);
    _Q5 = *(_OWORD *)(a1 + 728);
    v42 = (float64x2_t)vzip1q_s64(*v30, v39);
    v43 = _Q3.f64[0];
    _Q7.f64[1] = v38;
    v35.f64[0] = v318;
    v44 = v317;
    v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v317.f64[0]), (float64x2_t)vzip2q_s64(*v30, v39), v317, 1), _Q7, v318);
    _Q7.f64[0] = v317.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    _Q7.f64[0] = _D4 + v40 * v318;
    v48 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v49 = v45.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v48;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 696);
      v38 = *(double *)(a1 + 720);
      v42 = (float64x2_t)vzip1q_s64(*v30, *(int64x2_t *)(a1 + 704));
      _D20 = *(_QWORD *)(a1 + 736);
      v51 = *(double *)(a1 + 712);
      v52.f64[0] = *(float64_t *)(a1 + 688);
      v40 = *(double *)(a1 + 744);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 736);
      v51 = *(double *)(a1 + 712);
      v52.f64[0] = *(float64_t *)(a1 + 688);
    }
    v36.f64[0] = v320;
    _Q26 = v319;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v319.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v36.f64[0] * v36.f64[0]);
    v64 = vmulq_f64(v36, _Q16);
    _Q21 = vmulq_n_f64(v319, _Q16.f64[0]);
    _Q3.f64[1] = v38;
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    v52.f64[1] = v51;
    v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q21.f64[0]), v52, _Q21, 1), _Q3, v64.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v40, v64.f64[0]);
    *(_QWORD *)&v45.f64[1] = v48;
    *(float64x2_t *)a2 = vaddq_f64(v45, v66);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if ((unint64_t)a5 | a6)
    {
      v67 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v68 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL);
      v69.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v69.f64[1] = v68.i64[0];
      v70.f64[0] = _Q16.f64[0];
      v70.f64[1] = _Q16.f64[0];
      v71 = vmulq_f64(v70, v69);
      v72 = vmulq_f64(_Q16, v64);
      v73 = v36.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v72.f64[0];
      v36.f64[0] = v67 * _Q16.f64[0] * v72.f64[0];
      v72.f64[0] = v73 * v72.f64[0];
      v74.f64[0] = 0.0;
      v74.f64[1] = _Q16.f64[0];
      v75 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v71, _Q21.f64[0], 0);
      v76 = (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL);
      *(_QWORD *)&v77 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v78 = vmlsq_lane_f64(v74, v71, v67 * _Q16.f64[0], 0);
      v79 = vsubq_f64((float64x2_t)0, v36);
      v277 = v79.f64[0];
      v80 = vmlsq_lane_f64((float64x2_t)0, v71, v73, 0);
      v81 = (float64x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL);
      *(_QWORD *)&v82 = *(_OWORD *)&vsubq_f64(_Q16, v72);
      v83 = *(int8x16_t *)&v323[8];
      *(_QWORD *)&v84 = vextq_s8(v83, v83, 8uLL).u64[0];
      _Q31 = v326;
      v86 = (float64x2_t)vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL);
      v87 = v330;
      *(_QWORD *)&v88 = vextq_s8(v87, v87, 8uLL).u64[0];
      v89 = *(double *)&v323[24];
      v79.f64[0] = *(float64_t *)v323;
      v285 = v79;
      *(_QWORD *)&v79.f64[1] = v322.i64[1];
      v279 = v322;
      v280 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL);
      v90 = v327;
      v79.f64[0] = v325;
      v284 = v79;
      v278 = v324;
      v91 = vextq_s8(v278, v278, 8uLL);
      v281 = *(double *)v91.i64;
      *(_QWORD *)&v282 = vextq_s8(v279, v279, 8uLL).u64[0];
      v92 = v331;
      v91.i64[0] = v329;
      v283 = (float64x2_t)v91;
      v93 = v328;
      v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      if (a5)
      {
        _Q3.f64[0] = *(float64_t *)(a1 + 696);
        v96 = *(double *)(a1 + 720);
        v97 = *(float64x2_t *)(a1 + 704);
        v273 = v68;
        v274 = v84;
        v98.f64[0] = v75.f64[0];
        v98.f64[1] = v76.f64[0];
        _Q5 = *(float64x2_t *)(a1 + 728);
        v275 = v76;
        _Q18.f64[0] = v78.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v280.i64[0];
        _Q22.f64[0] = v80.f64[0];
        _Q22.f64[1] = v81.f64[0];
        v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *(double *)&v323[8]), _Q18, v84), _Q22, *(double *)&v323[24]);
        v276 = v81.f64[0];
        v81.f64[0] = v77 * *(double *)&v323[8] + v277 * v84 + v82 * *(double *)&v323[24];
        v103 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v326.f64[0]), _Q18, v86.f64[0]), _Q22, v327);
        v104 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *(double *)v330.i64), _Q18, v88), _Q22, v331);
        _Q18.f64[0] = v328.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v94;
        _Q17 = vaddq_f64(v104, _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 688);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 712);
        __asm { FMLA            D22, D2, V17.D[1] }
        _D31 = *(_QWORD *)(a1 + 736);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v77 * v326.f64[0] + v277 * v86.f64[0] + v82 * v327;
        *(_QWORD *)&v109.f64[0] = v322.i64[0];
        v109.f64[1] = v282;
        v110 = (int64x2_t)vaddq_f64(v102, v109);
        *(_QWORD *)&v109.f64[0] = v324.i64[0];
        v109.f64[1] = v281;
        v111 = (int64x2_t)vaddq_f64(v103, v109);
        v112 = (float64x2_t)vzip1q_s64(v110, v111);
        _Q30 = (float64x2_t)vzip2q_s64(v110, v111);
        v114 = vmlaq_laneq_f64(vmulq_n_f64(v112, *(double *)v30->i64), _Q30, *(float64x2_t *)v30, 1);
        v115 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v81, v285), (int64x2_t)vaddq_f64(_Q17, v284));
        v116 = vmlaq_laneq_f64(vmulq_n_f64(v112, v97.f64[0]), _Q30, v97, 1);
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v112, _Q5.f64[0]), _Q30, _Q5, 1);
        _Q30.f64[0] = *(float64_t *)(a1 + 744);
        _Q31 = vmlaq_n_f64(v114, v115, _Q3.f64[0]);
        v118 = vmlaq_n_f64(v116, v115, v96);
        _Q10 = vmlaq_n_f64(v117, v115, _Q30.f64[0]);
        v115.f64[0] = v77 * *(double *)v330.i64 + v277 * v88 + v82 * v331;
        *(_QWORD *)&v115.f64[0] = *(_OWORD *)&vaddq_f64(v115, v283);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q3.f64[0], v115.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v96, v115.f64[0]);
        v120 = vmlad_n_f64(_D2, _Q30.f64[0], v115.f64[0]);
        v121 = (float64x2_t)vzip1q_s64(*v30, (int64x2_t)v97);
        _Q25 = (float64x2_t)vzip2q_s64(*v30, (int64x2_t)v97);
        _Q3.f64[1] = v96;
        _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, _Q31.f64[0]), _Q25, _Q31, 1), _Q3, _Q18.f64[0]);
        _D16 = _Q31.f64[1];
        __asm { FMLA            D6, D16, V5.D[1] }
        v126 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        _Q31.f64[0] = v118.f64[1];
        __asm { FMLA            D16, D31, V5.D[1] }
        _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v118.f64[0]), _Q25, v118, 1), _Q3, _Q22.f64[0]);
        v129 = _D16 + _Q30.f64[0] * _Q22.f64[0];
        _Q22.f64[0] = *(float64_t *)(a1 + 760);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, _Q10.f64[0]), _Q25, _Q10, 1), _Q3, v120);
        _Q25.f64[0] = _Q10.f64[1];
        __asm { FMLA            D3, D25, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _Q30.f64[0] * v120;
        __asm { FMLA            D30, D22, V11.D[1] }
        v131 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
        __asm { FMLA            D10, D22, V18.D[1] }
        _Q31.f64[0] = v326.f64[0];
        v83.i64[0] = *(_QWORD *)&v323[8];
        __asm { FMLA            D18, D22, V17.D[1] }
        *(_QWORD *)&_Q25.f64[0] = v289.i64[0];
        *(_QWORD *)&_Q25.f64[1] = v286;
        *(_QWORD *)&_Q22.f64[0] = v292.i64[0];
        *(_QWORD *)&_Q22.f64[1] = v287;
        v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q11.f64[0]), (float64x2_t)xmmword_2102DD520, _Q11, 1), (float64x2_t)0, v126);
        v81 = vmlaq_n_f64(v131, (float64x2_t)0, v129);
        v93 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q17.f64[0]), (float64x2_t)xmmword_2102DD520, _Q17, 1), (float64x2_t)0, _Q3.f64[0]);
        v133 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v132.f64[0]), _Q25, v132, 1);
        v134 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v81.f64[0]), _Q25, v81, 1);
        v135 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v93.f64[0]), _Q25, v93, 1);
        v93.f64[0] = v126 + _Q30.f64[0];
        v136 = v129 + _Q10.f64[0];
        _Q3.f64[0] = _Q3.f64[0] + _Q18.f64[0];
        v137.f64[0] = v290;
        *(_QWORD *)&v137.f64[1] = v288;
        v76 = v275;
        v138 = vmlaq_n_f64(v133, v137, v93.f64[0]);
        v93.f64[0] = v328.f64[0];
        v81.f64[0] = v276;
        *a5 = v138;
        a5[1] = vmlaq_n_f64(v134, v137, v136);
        v68 = v273;
        v84 = v274;
        a5[2] = vmlaq_n_f64(v135, v137, _Q3.f64[0]);
      }
      if (a6)
      {
        v139.f64[0] = 0.0;
        v139.f64[1] = v333;
        *(_QWORD *)&_Q21.f64[1] = v68.i64[0];
        *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
        v140 = vaddq_f64(v44, _Q21);
        v141 = vaddq_f64(v35, v64);
        v75.f64[1] = v76.f64[0];
        v142.i64[1] = v280.i64[1];
        *(_QWORD *)&v78.f64[1] = v280.i64[0];
        v142.i64[0] = *(_QWORD *)(a1 + 696);
        v143 = vmlaq_n_f64(vmulq_n_f64(v75, *(double *)v83.i64), v78, v84);
        _Q21.f64[0] = v77 * *(double *)v83.i64 + v277 * v84;
        v144 = vmlaq_n_f64(vmulq_n_f64(v75, _Q31.f64[0]), v78, v86.f64[0]);
        v145 = v77 * _Q31.f64[0] + v277 * v86.f64[0];
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v75, *(double *)v87.i64), v78, v88);
        v68.i64[0] = *(_QWORD *)(a1 + 720);
        v147 = *(float64x2_t *)(a1 + 704);
        v148 = v77 * *(double *)v87.i64 + v277 * v88;
        v76.f64[0] = *(float64_t *)(a1 + 744);
        *(_QWORD *)&v149.f64[0] = v278.i64[0];
        v150 = v92;
        _Q20 = *(float64x2_t *)(a1 + 728);
        v80.f64[1] = v81.f64[0];
        v152 = (float64x2_t)vzip1q_s64(*v30, (int64x2_t)v147);
        v153 = vmlaq_n_f64(v143, v80, v89);
        _Q21.f64[0] = _Q21.f64[0] + v82 * v89;
        v154 = (float64x2_t)vextq_s8((int8x16_t)_Q20, v142, 8uLL);
        v155 = vmlaq_n_f64(v144, v80, v90);
        v78.f64[0] = v145 + v82 * v90;
        v156 = (float64x2_t)vzip2q_s64(*v30, (int64x2_t)v147);
        v86.f64[0] = v148 + v82 * v150;
        *(_QWORD *)&v93.f64[1] = v94;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v80, v150), v93);
        _D29 = *(_QWORD *)(a1 + 688);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(a1 + 712);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(a1 + 736);
        __asm { FMLA            D30, D31, V27.D[1] }
        v162 = (float64x2_t)vextq_s8((int8x16_t)v154, v68, 8uLL);
        v163 = vmulq_f64(v141, v154);
        v164 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v156, v141.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v68), v140, 1);
        v165 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v140, v76.f64[0]), v141, _Q20);
        v166 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v162, v140.f64[0]), v152, v141.f64[0], 0);
        *(_QWORD *)&v167.f64[0] = v279.i64[0];
        v167.f64[1] = v282;
        v149.f64[1] = v281;
        v168 = (int64x2_t)vaddq_f64(v153, v167);
        v169 = (int64x2_t)vaddq_f64(v155, v149);
        v170 = (float64x2_t)vzip1q_s64(v168, v169);
        v171 = (float64x2_t)vzip2q_s64(v168, v169);
        v172 = vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)v30->i64), v171, *(float64x2_t *)v30, 1);
        v173 = vmlaq_laneq_f64(vmulq_n_f64(v170, v147.f64[0]), v171, v147, 1);
        v174 = vmlaq_laneq_f64(vmulq_n_f64(v170, _Q20.f64[0]), v171, _Q20, 1);
        v175 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v140, 1), v140, _Q20, 1);
        v176 = vmlsq_lane_f64(vmulq_laneq_f64(v152, v140, 1), v156, v140.f64[0], 0);
        v177 = (int64x2_t)vmlsq_laneq_f64(v163, v76, v140, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v86, v283);
        v178 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v285), (int64x2_t)vaddq_f64(v78, v284));
        _Q4 = vmlaq_n_f64(v172, v178, *(double *)v142.i64);
        v180 = vmlad_n_f64(_D22, *(double *)v142.i64, _Q20.f64[0]);
        _Q5 = v332;
        v182 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v333);
        _Q7 = vmlaq_n_f64(v173, v178, *(double *)v68.i64);
        v184 = vmlad_n_f64(_D29, *(double *)v68.i64, _Q20.f64[0]);
        v185 = vnegq_f64(v332);
        _Q6 = vmlaq_n_f64(v174, v178, v76.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v76.f64[0], _Q20.f64[0]);
        v187 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q4.f64[0]), (float64x2_t)v182, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v189 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q7.f64[0]), (float64x2_t)v182, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v190 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q6.f64[0]), (float64x2_t)v182, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v192 = (float64x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v185, 8uLL);
        _Q7.f64[0] = _D18 + v180 * 0.0;
        v185.f64[0] = _Q20.f64[0] + v184 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v164, v166), vmlaq_n_f64(v187, v192, v180));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v176, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v164, v166), vmlaq_n_f64(v189, v192, v184));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v176, 1), v185);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v177, v165), vmlaq_n_f64(v190, v192, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v175, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
    return v28;
  }
  sub_20EB2BB94(&v316);
  if (**(int **)(v316 + 56) > 2)
    return v28;
  v53 = *(unsigned __int8 *)(v316 + 72);
  v54 = *(_BYTE *)(v316 + 72) != 0;
  v55 = sub_20E8C31DC(v316, "OSLogSurrogateAppender", 1, 0);
  if (((v55 == 0) & ~v54) != 0)
    return v28;
  sub_20E863438((uint64_t)&v304);
  v56 = sub_20E86A980(&v305, (uint64_t)"failed to unproject: xd=", 24);
  v57 = sub_20EB31B20(v56, *(__n128 *)a3);
  v58 = sub_20E86A980(v57, (uint64_t)", xc=", 5);
  *(_QWORD *)v343 = &v334;
  sub_20EB1A104(v58, (__int128 **)v343);
  if ((v314 & 0x10) != 0)
  {
    v193 = v313;
    if (v313 < v310)
    {
      v313 = v310;
      v193 = v310;
    }
    v194 = (const void **)&v309;
  }
  else
  {
    if ((v314 & 8) == 0)
    {
      v59 = 0;
      HIBYTE(v303) = 0;
      v60 = __dst;
      goto LABEL_40;
    }
    v194 = (const void **)&v307;
    v193 = *((_QWORD *)&v308 + 1);
  }
  v195 = *v194;
  v59 = v193 - (_QWORD)*v194;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v59 >= 0x17)
  {
    v196 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v196 = v59 | 7;
    v197 = v196 + 1;
    v60 = (void **)operator new(v196 + 1);
    __dst[1] = (void *)v59;
    v303 = v197 | 0x8000000000000000;
    __dst[0] = v60;
    goto LABEL_39;
  }
  HIBYTE(v303) = v193 - *(_BYTE *)v194;
  v60 = __dst;
  if (v59)
LABEL_39:
    memmove(v60, v195, v59);
LABEL_40:
  *((_BYTE *)v60 + v59) = 0;
  *(_QWORD *)&v294.f64[0] = &v316;
  *(std::chrono::steady_clock::time_point *)&v294.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v296 = 2;
  v297 = "unknown file";
  v298 = 685;
  v300 = 0;
  v301 = 0;
  v299 = "unknown function";
  if (v303 >= 0)
    v198 = (const char *)__dst;
  else
    v198 = (const char *)__dst[0];
  v199 = **(_QWORD **)&v294.f64[0];
  v200 = (const char *)(**(_QWORD **)&v294.f64[0] + 16);
  v293 = v200;
  v291 = **(_QWORD **)&v294.f64[0];
  if (*(char *)(**(_QWORD **)&v294.f64[0] + 39) < 0)
  {
    v200 = *(const char **)(v199 + 16);
    v201 = *(_QWORD *)(v199 + 24);
  }
  else
  {
    v201 = *(unsigned __int8 *)(**(_QWORD **)&v294.f64[0] + 39);
  }
  v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v343);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v343);
    if (v344.i8[0] && (v343[23] & 0x80000000) != 0)
      operator delete(*(void **)v343);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v203 = byte_254A4A4F8;
  else
    v203 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v204 = byte_254A4A4F8[23];
  else
    v204 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v343 = os_log_create(v203, v200);
  v205 = &v343[8];
  if (v204 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v204 >= 0x17)
  {
    v206 = v53;
    v207 = v55;
    v208 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v204 | 7) != 0x17)
      v208 = v204 | 7;
    v209 = v208 + 1;
    v205 = operator new(v208 + 1);
    *(_QWORD *)&v343[16] = v204;
    v344.i64[0] = v209 | 0x8000000000000000;
    *(_QWORD *)&v343[8] = v205;
    v55 = v207;
    v53 = v206;
    goto LABEL_60;
  }
  v344.i8[7] = v204;
  if (v204)
LABEL_60:
    memmove(v205, v203, v204);
  v205[v204] = 0;
  v344.i8[8] = 1;
  v210 = v345;
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v201 >= 0x17)
  {
    v211 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v211 = v201 | 7;
    v212 = v211 + 1;
    v210 = (void **)operator new(v211 + 1);
    v345[1] = (void *)v201;
    v346 = v212 | 0x8000000000000000;
    v345[0] = v210;
    goto LABEL_68;
  }
  HIBYTE(v346) = v201;
  if (v201)
LABEL_68:
    memmove(v210, v200, v201);
  *((_BYTE *)v210 + v201) = 0;
  v347 = 1;
  v213 = *(NSObject **)v343;
  if (SHIBYTE(v346) < 0)
    operator delete(v345[0]);
  if (v344.i8[8] && v344.i8[7] < 0)
    operator delete(*(void **)&v343[8]);
  if (*(_QWORD *)v343)
    os_release(*(void **)v343);
  if (!v55 || !*(_QWORD *)(v55 + 24))
  {
    os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v343 = 136315138;
    *(_QWORD *)&v343[4] = v198;
    v220 = (void *)_os_log_send_and_compose_impl();
    if (v220)
      free(v220);
    goto LABEL_148;
  }
  v214 = _os_log_pack_size();
  v215 = (std::__shared_weak_count_vtbl *)operator new(v214, (std::align_val_t)8uLL);
  v216 = (std::__shared_weak_count *)operator new();
  v216->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v216->__shared_owners_ = 0;
  v216->__shared_weak_owners_ = 0;
  v216[1].__vftable = v215;
  *(_QWORD *)&v336 = v215;
  *((_QWORD *)&v336 + 1) = v215;
  v339 = 0;
  v337 = v216;
  v338 = 0;
  v217 = strlen(v198);
  if (v217 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v218 = v217;
  if (v217 >= 0x17)
  {
    v221 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17)
      v221 = v217 | 7;
    v222 = v221 + 1;
    v219 = operator new(v221 + 1);
    *((_QWORD *)&v341 + 1) = v222 | 0x8000000000000000;
    v340 = v219;
    *(_QWORD *)&v341 = v218;
    goto LABEL_87;
  }
  HIBYTE(v341) = v217;
  v219 = &v340;
  if (v217)
LABEL_87:
    memcpy(v219, v198, v218);
  *((_BYTE *)v219 + v218) = 0;
  v223 = v340;
  v348[0] = v341;
  *(_QWORD *)((char *)v348 + 7) = *(_QWORD *)((char *)&v341 + 7);
  v224 = HIBYTE(v341);
  v225 = operator new(0x38uLL);
  v225[1] = 0;
  v225[2] = 0;
  v225[3] = off_24C9ABC20;
  *v225 = &off_24C9ABBD0;
  v226 = v348[0];
  v225[4] = v223;
  v225[5] = v226;
  *(_QWORD *)((char *)v225 + 47) = *(_QWORD *)((char *)v348 + 7);
  *((_BYTE *)v225 + 55) = v224;
  v348[0] = 0;
  *(_QWORD *)((char *)v348 + 7) = 0;
  v227 = (std::__shared_weak_count *)v339;
  v338 = (char *)(v225 + 3);
  v339 = (uint64_t)v225;
  if (v227)
  {
    p_shared_owners = (unint64_t *)&v227->__shared_owners_;
    do
      v229 = __ldaxr(p_shared_owners);
    while (__stlxr(v229 - 1, p_shared_owners));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  *(_OWORD *)v343 = v336;
  v230 = v338;
  *(_QWORD *)&v343[16] = v337;
  if (v337)
  {
    v231 = (unint64_t *)&v337->__shared_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  v233 = (std::__shared_weak_count *)v339;
  v344.i64[0] = (uint64_t)v230;
  v344.i64[1] = v339;
  if (v339)
  {
    v234 = (unint64_t *)(v339 + 8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    v345[0] = v230;
    do
      v236 = __ldaxr(v234);
    while (__stlxr(v236 - 1, v234));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  else
  {
    v345[0] = v230;
  }
  v237 = v337;
  if (v337)
  {
    v238 = (unint64_t *)&v337->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = *(_QWORD *)v343;
  if (*((char *)v345[0] + 31) >= 0)
    v241 = (char *)v345[0] + 8;
  else
    v241 = (char *)*((_QWORD *)v345[0] + 1);
  v242 = _os_log_pack_fill();
  *(_DWORD *)v242 = 136315138;
  *(_QWORD *)(v242 + 4) = v241;
  v243 = operator new();
  v244 = *(unsigned __int8 *)(v291 + 39);
  v245 = *(const char **)(v291 + 16);
  v246 = *(_QWORD *)(v291 + 24);
  v247 = v344;
  *(_OWORD *)(v243 + 8) = *(_OWORD *)&v343[8];
  if ((v244 & 0x80u) != 0)
    v244 = v246;
  else
    v245 = v293;
  *(_QWORD *)v243 = v240;
  *(_QWORD *)&v343[8] = 0;
  *(_QWORD *)&v343[16] = 0;
  *(int64x2_t *)(v243 + 24) = v247;
  v344 = 0uLL;
  *(_QWORD *)(v243 + 40) = v245;
  *(_QWORD *)(v243 + 48) = v244;
  *(_BYTE *)(v243 + 56) = 2;
  v340 = 0;
  *(_QWORD *)&v336 = v243;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v55 + 24) + 40))(*(_QWORD *)(v55 + 24), &v336);
  v248 = v336;
  *(_QWORD *)&v336 = 0;
  if (v248)
  {
    v249 = *(std::__shared_weak_count **)(v248 + 32);
    if (v249)
    {
      v250 = (unint64_t *)&v249->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    v252 = *(std::__shared_weak_count **)(v248 + 16);
    if (v252)
    {
      v253 = (unint64_t *)&v252->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    MEMORY[0x212BC6398](v248, 0x10F0C40B62ED6C6);
    v255 = v340;
    v340 = 0;
    if (v255)
    {
      v256 = (std::__shared_weak_count *)v255[4];
      if (v256)
      {
        v257 = (unint64_t *)&v256->__shared_owners_;
        do
          v258 = __ldaxr(v257);
        while (__stlxr(v258 - 1, v257));
        if (!v258)
        {
          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
          std::__shared_weak_count::__release_weak(v256);
        }
      }
      v259 = (std::__shared_weak_count *)v255[2];
      if (v259)
      {
        v260 = (unint64_t *)&v259->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      MEMORY[0x212BC6398](v255, 0x10F0C40B62ED6C6);
    }
  }
  v262 = (std::__shared_weak_count *)v344.i64[1];
  if (v344.i64[1])
  {
    v263 = (unint64_t *)(v344.i64[1] + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = *(std::__shared_weak_count **)&v343[16];
  if (*(_QWORD *)&v343[16])
  {
    v266 = (unint64_t *)(*(_QWORD *)&v343[16] + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
LABEL_148:
  if (v53)
  {
    v268 = (const char *)__dst;
    if (v303 < 0)
      v268 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v294, "%s", v268);
    sub_20E863570((uint64_t)&v294);
  }
  sub_20E863570((uint64_t)&v294);
  v269 = v301;
  if (v301)
  {
    v270 = (unint64_t *)&v301->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (SHIBYTE(v303) < 0)
    operator delete(__dst[0]);
  v304.i64[0] = *MEMORY[0x24BEDB7F0];
  v272 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v304.i64 + *(_QWORD *)(v304.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v305 = v272;
  *(_QWORD *)&v306 = MEMORY[0x24BEDB848] + 16;
  if (v312 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v315);
  return v28;
}

void sub_20EB3A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  char a70;
  uint64_t v70;

  if (*(_BYTE *)(v70 - 232) && *(char *)(v70 - 233) < 0)
    operator delete(*(void **)(v70 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a55);
  if (a69 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a70);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3A2E4(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  double v8;
  const double *v15;
  float64x2_t v17;
  double v18;
  uint64_t result;
  double v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  size_t v25;
  void **v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  _QWORD v108[3];
  int v109;
  const char *v110;
  int v111;
  const char *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *__dst[2];
  int64_t v116;
  float64x2_t v117;
  _QWORD v118[3];
  const void *v119;
  uint64_t v120;
  const void *v121;
  unint64_t v122;
  void *__p;
  char v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  float64x2_t v129;
  double v130;
  char v131;
  float64x2_t v132;
  double v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  char *v136;
  std::__shared_weak_count *v137;
  _QWORD *v138;
  __int128 v139;
  _BYTE v140[24];
  __int128 v141;
  void *v142[2];
  unint64_t v143;
  char v144;
  _QWORD v145[5];
  float64x2x3_t v146;

  v145[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 680;
  _D2 = *(_QWORD *)(a1 + 720);
  v7 = *(double *)(a1 + 744);
  v8 = a3[1].f64[0];
  _Q7 = *a3;
  __asm { FMLA            D0, D2, V7.D[1] }
  v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), a3->f64[0]), *(float64x2_t *)(a1 + 704), *a3, 1), *(float64x2_t *)(a1 + 728), v8);
  v133 = _D0 + v7 * v8;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 664), (uint64_t)&v132, 30, 0, 0, &v129, 0.00000001, v132);
  if (!v131)
  {
    sub_20EB2BB94(&v128);
    if (**(int **)(v128 + 56) > 2)
      return 0;
    v21 = *(unsigned __int8 *)(v128 + 72);
    v22 = *(_BYTE *)(v128 + 72) != 0;
    v23 = sub_20E8C31DC(v128, "OSLogSurrogateAppender", 1, 0);
    if (((v23 == 0) & ~v22) != 0)
      return 0;
    sub_20E863438((uint64_t)&v117);
    v24 = sub_20E86A980(v118, (uint64_t)"failed to project: xc=", 22);
    *(_QWORD *)v140 = &v132;
    sub_20EB32EA4(v24, (__int128 **)v140);
    if ((v126 & 0x10) != 0)
    {
      v27 = v125;
      if (v125 < v122)
      {
        v125 = v122;
        v27 = v122;
      }
      v28 = v121;
      v25 = v27 - (_QWORD)v121;
      if (v27 - (unint64_t)v121 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_65;
    }
    else
    {
      if ((v126 & 8) == 0)
      {
        v25 = 0;
        HIBYTE(v116) = 0;
        v26 = __dst;
        goto LABEL_20;
      }
      v28 = v119;
      v25 = v120 - (_QWORD)v119;
      if ((unint64_t)(v120 - (_QWORD)v119) > 0x7FFFFFFFFFFFFFF7)
LABEL_65:
        sub_20E860B7C();
    }
    if (v25 >= 0x17)
    {
      v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v29 = v25 | 7;
      v30 = v29 + 1;
      v26 = (void **)operator new(v29 + 1);
      __dst[1] = (void *)v25;
      v116 = v30 | 0x8000000000000000;
      __dst[0] = v26;
    }
    else
    {
      HIBYTE(v116) = v25;
      v26 = __dst;
      if (!v25)
      {
LABEL_20:
        *((_BYTE *)v26 + v25) = 0;
        v108[0] = &v128;
        v108[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v108[2] = std::chrono::system_clock::now().__d_.__rep_;
        v109 = 2;
        v110 = "unknown file";
        v111 = 727;
        v113 = 0;
        v114 = 0;
        v112 = "unknown function";
        if (v116 >= 0)
          v31 = (const char *)__dst;
        else
          v31 = (const char *)__dst[0];
        v32 = *(_QWORD *)v108[0];
        v33 = (const char *)(*(_QWORD *)v108[0] + 16);
        v106 = *(_QWORD *)v108[0];
        v107 = v33;
        if (*(char *)(*(_QWORD *)v108[0] + 39) < 0)
        {
          v33 = *(const char **)(v32 + 16);
          v34 = *(_QWORD *)(v32 + 24);
          v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v36 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)v108[0] + 39);
          v35 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v35 & 1) != 0)
            goto LABEL_27;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v140);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v140);
          if ((_BYTE)v141 && (v140[23] & 0x80000000) != 0)
            operator delete(*(void **)v140);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_27:
        if (byte_254A4A4F8[23] >= 0)
          v37 = byte_254A4A4F8;
        else
          v37 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v38 = byte_254A4A4F8[23];
        else
          v38 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v140 = os_log_create(v37, v33);
        v39 = &v140[8];
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v38 >= 0x17)
        {
          v40 = v21;
          v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v41 = v38 | 7;
          v42 = v41 + 1;
          v39 = operator new(v41 + 1);
          *(_QWORD *)&v140[16] = v38;
          *(_QWORD *)&v141 = v42 | 0x8000000000000000;
          *(_QWORD *)&v140[8] = v39;
          v21 = v40;
        }
        else
        {
          BYTE7(v141) = v38;
          if (!v38)
          {
LABEL_41:
            v39[v38] = 0;
            BYTE8(v141) = 1;
            v43 = v142;
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              v43 = (void **)operator new(v44 + 1);
              v142[1] = (void *)v34;
              v143 = v45 | 0x8000000000000000;
              v142[0] = v43;
            }
            else
            {
              HIBYTE(v143) = v34;
              if (!v34)
              {
LABEL_49:
                *((_BYTE *)v43 + v34) = 0;
                v144 = 1;
                v46 = *(NSObject **)v140;
                if (SHIBYTE(v143) < 0)
                  operator delete(v142[0]);
                if (BYTE8(v141) && SBYTE7(v141) < 0)
                  operator delete(*(void **)&v140[8]);
                if (*(_QWORD *)v140)
                  os_release(*(void **)v140);
                if (!v23 || !*(_QWORD *)(v23 + 24))
                {
                  os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v140 = 136315138;
                  *(_QWORD *)&v140[4] = v31;
                  v53 = (void *)_os_log_send_and_compose_impl();
                  if (v53)
                    free(v53);
                  goto LABEL_130;
                }
                v47 = _os_log_pack_size();
                v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
                v49 = (std::__shared_weak_count *)operator new();
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v49->__shared_owners_ = 0;
                v49->__shared_weak_owners_ = 0;
                v49[1].__vftable = v48;
                *(_QWORD *)&v134 = v48;
                *((_QWORD *)&v134 + 1) = v48;
                v136 = 0;
                v137 = 0;
                v135 = v49;
                v50 = strlen(v31);
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v51 = v50;
                if (v50 >= 0x17)
                {
                  v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v54 = v50 | 7;
                  v55 = v54 + 1;
                  v52 = operator new(v54 + 1);
                  *(_QWORD *)&v139 = v51;
                  *((_QWORD *)&v139 + 1) = v55 | 0x8000000000000000;
                  v138 = v52;
                }
                else
                {
                  HIBYTE(v139) = v50;
                  v52 = &v138;
                  if (!v50)
                  {
LABEL_70:
                    *((_BYTE *)v52 + v51) = 0;
                    v56 = v138;
                    v145[0] = v139;
                    *(_QWORD *)((char *)v145 + 7) = *(_QWORD *)((char *)&v139 + 7);
                    v57 = HIBYTE(v139);
                    v58 = operator new(0x38uLL);
                    v58[1] = 0;
                    v58[2] = 0;
                    v58[3] = off_24C9ABC20;
                    *v58 = &off_24C9ABBD0;
                    v59 = v145[0];
                    v58[4] = v56;
                    v58[5] = v59;
                    *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)v145 + 7);
                    *((_BYTE *)v58 + 55) = v57;
                    v145[0] = 0;
                    *(_QWORD *)((char *)v145 + 7) = 0;
                    v60 = v137;
                    v136 = (char *)(v58 + 3);
                    v137 = (std::__shared_weak_count *)v58;
                    if (v60)
                    {
                      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
                      do
                        v62 = __ldaxr(p_shared_owners);
                      while (__stlxr(v62 - 1, p_shared_owners));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                    *(_OWORD *)v140 = v134;
                    v63 = v136;
                    *(_QWORD *)&v140[16] = v135;
                    if (v135)
                    {
                      v64 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v65 = __ldxr(v64);
                      while (__stxr(v65 + 1, v64));
                    }
                    v66 = v137;
                    *(_QWORD *)&v141 = v63;
                    *((_QWORD *)&v141 + 1) = v137;
                    if (v137)
                    {
                      v67 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v68 = __ldxr(v67);
                      while (__stxr(v68 + 1, v67));
                      v142[0] = v63;
                      do
                        v69 = __ldaxr(v67);
                      while (__stlxr(v69 - 1, v67));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                    }
                    else
                    {
                      v142[0] = v63;
                    }
                    v70 = v135;
                    if (v135)
                    {
                      v71 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                    v73 = *(_QWORD *)v140;
                    if (*((char *)v142[0] + 31) >= 0)
                      v74 = (char *)v142[0] + 8;
                    else
                      v74 = (char *)*((_QWORD *)v142[0] + 1);
                    v75 = _os_log_pack_fill();
                    *(_DWORD *)v75 = 136315138;
                    *(_QWORD *)(v75 + 4) = v74;
                    v76 = operator new();
                    v77 = *(unsigned __int8 *)(v106 + 39);
                    v78 = *(const char **)(v106 + 16);
                    v79 = *(_QWORD *)(v106 + 24);
                    v80 = v141;
                    *(_OWORD *)(v76 + 8) = *(_OWORD *)&v140[8];
                    if ((v77 & 0x80u) != 0)
                      v77 = v79;
                    else
                      v78 = v107;
                    *(_QWORD *)v76 = v73;
                    *(_QWORD *)&v140[8] = 0;
                    *(_QWORD *)&v140[16] = 0;
                    *(_OWORD *)(v76 + 24) = v80;
                    v141 = 0uLL;
                    *(_QWORD *)(v76 + 40) = v78;
                    *(_QWORD *)(v76 + 48) = v77;
                    *(_BYTE *)(v76 + 56) = 2;
                    v138 = 0;
                    *(_QWORD *)&v134 = v76;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), &v134);
                    v81 = v134;
                    *(_QWORD *)&v134 = 0;
                    if (v81)
                    {
                      v82 = *(std::__shared_weak_count **)(v81 + 32);
                      if (v82)
                      {
                        v83 = (unint64_t *)&v82->__shared_owners_;
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      v85 = *(std::__shared_weak_count **)(v81 + 16);
                      if (v85)
                      {
                        v86 = (unint64_t *)&v85->__shared_owners_;
                        do
                          v87 = __ldaxr(v86);
                        while (__stlxr(v87 - 1, v86));
                        if (!v87)
                        {
                          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                          std::__shared_weak_count::__release_weak(v85);
                        }
                      }
                      MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
                      v88 = v138;
                      v138 = 0;
                      if (v88)
                      {
                        v89 = (std::__shared_weak_count *)v88[4];
                        if (v89)
                        {
                          v90 = (unint64_t *)&v89->__shared_owners_;
                          do
                            v91 = __ldaxr(v90);
                          while (__stlxr(v91 - 1, v90));
                          if (!v91)
                          {
                            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                            std::__shared_weak_count::__release_weak(v89);
                          }
                        }
                        v92 = (std::__shared_weak_count *)v88[2];
                        if (v92)
                        {
                          v93 = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldaxr(v93);
                          while (__stlxr(v94 - 1, v93));
                          if (!v94)
                          {
                            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                            std::__shared_weak_count::__release_weak(v92);
                          }
                        }
                        MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
                      }
                    }
                    v95 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                    if (*((_QWORD *)&v141 + 1))
                    {
                      v96 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                    v98 = *(std::__shared_weak_count **)&v140[16];
                    if (*(_QWORD *)&v140[16])
                    {
                      v99 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 - 1, v99));
                      if (!v100)
                      {
                        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                        std::__shared_weak_count::__release_weak(v98);
                      }
                    }
LABEL_130:
                    if (v21)
                    {
                      v101 = (const char *)__dst;
                      if (v116 < 0)
                        v101 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v108, "%s", v101);
                      sub_20E863570((uint64_t)v108);
                    }
                    sub_20E863570((uint64_t)v108);
                    v102 = v114;
                    if (v114)
                    {
                      v103 = (unint64_t *)&v114->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    if (SHIBYTE(v116) < 0)
                      operator delete(__dst[0]);
                    v117.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                    v105 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(float64_t *)((char *)v117.f64 + *(_QWORD *)(*(_QWORD *)&v117.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                    v118[0] = v105;
                    v118[1] = MEMORY[0x24BEDB848] + 16;
                    if (v124 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v127);
                    return 0;
                  }
                }
                memcpy(v52, v31, v51);
                goto LABEL_70;
              }
            }
            memmove(v43, v33, v34);
            goto LABEL_49;
          }
        }
        memmove(v39, v37, v38);
        goto LABEL_41;
      }
    }
    memmove(v26, v28, v25);
    goto LABEL_20;
  }
  v15 = (const double *)v5;
  v146 = vld3q_f64(v15);
  v15 += 6;
  _Q5 = *(_OWORD *)v15;
  v17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v146.val[0], v129.f64[0]), v146.val[1], v129, 1), v146.val[2], v130);
  v146.val[1].f64[0] = v129.f64[1];
  __asm { FMLA            D1, D2, V5.D[1] }
  v18 = v146.val[0].f64[0] + *(double *)(v5 + 64) * v130;
  v117 = v17;
  *(double *)v118 = v18;
  if (v18 < 0.0)
    return 0;
  v117 = vsubq_f64(v17, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v18));
  result = sub_20EB24288(a2, (uint64_t)&v117, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
  if ((_DWORD)result)
  {
    v20 = a2->f64[1];
    a2->f64[0] = *(double *)(a1 + 752) + a2->f64[0];
    a2->f64[1] = *(double *)(a1 + 760) + v20;
    return 1;
  }
  return result;
}

void sub_20EB3AE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3AF98(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  uint64_t v9;
  double v11;
  float64x2_t v13;
  float64x2_t v19;
  float64_t v20;
  int64x2_t v21;
  float64_t v22;
  int64x2_t v23;
  double v24;
  float64x2_t v27;
  double v29;
  uint64_t result;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  double v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v53;
  uint64_t v56;
  uint64_t v58;
  float64x2_t v60;
  double v62;
  const double *v63;
  float64x2_t v64;
  double v65;
  float64x2_t v67;
  float64x2_t v70;
  float64x2_t v71;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  int64x2_t v80;
  float64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  int8x16_t v107;
  double v108;
  int8x16_t v109;
  double v110;
  int8x16_t v111;
  double v112;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  double v121;
  char v122;
  int64x2_t v123;
  float64_t v124;
  int64x2_t v125;
  float64_t v126;
  __int128 v127;
  double v128;
  float64x2_t v129;
  double v130;
  float64x2x3_t v131;

  v9 = a1 + 680;
  _D2 = *(_QWORD *)(a1 + 720);
  v11 = a4[1].f64[0];
  _Q7 = *a4;
  v13 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), a4->f64[0]), *(float64x2_t *)(a1 + 704), *a4, 1), *(float64x2_t *)(a1 + 728), v11);
  __asm { FMLA            D0, D2, V7.D[1] }
  v130 = _D0 + *(double *)(a1 + 744) * v11;
  v129 = v13;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 664), (uint64_t)&v129, 30, (uint64_t)&v123, 0, &v120, 0.00000001, v13);
  if (!v122)
    return 0;
  v19.f64[0] = v121;
  v20 = *(double *)(v9 + 16);
  v21 = *(int64x2_t *)v9;
  v22 = *(double *)(v9 + 40);
  v23 = *(int64x2_t *)(v9 + 24);
  v24 = *(double *)(v9 + 64);
  _Q6 = *(int8x16_t *)(v9 + 48);
  _Q1.f64[0] = v20;
  _Q1.f64[1] = v22;
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v9, v23), v120.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, v23), v120, 1), _Q1, v121);
  _D2 = v120.f64[1];
  __asm { FMLA            D1, D2, V6.D[1] }
  v29 = _Q1.f64[0] + v24 * v121;
  v119 = v29;
  v118 = v27;
  if (v29 < 0.0)
    return 0;
  v107 = (int8x16_t)v21;
  v108 = v20;
  v109 = (int8x16_t)v23;
  v110 = v22;
  v111 = _Q6;
  v112 = v24;
  v105 = v19;
  v106 = v120;
  v113 = *(float64x2_t *)(a1 + 752);
  v118 = vsubq_f64(v27, vmulq_n_f64(v113, v29));
  result = sub_20EB2450C(a2, (uint64_t)&v114, 0, (uint64_t)&v118, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
  if ((_DWORD)result)
  {
    *(_QWORD *)&_D1 = vextq_s8(v107, v107, 8uLL).u64[0];
    *(_QWORD *)&_D2 = vextq_s8(v109, v109, 8uLL).u64[0];
    *(_QWORD *)&_D3 = vextq_s8(v111, v111, 8uLL).u64[0];
    _Q23 = v113;
    v35 = a2->f64[1];
    a2->f64[0] = *(double *)(a1 + 752) + a2->f64[0];
    a2->f64[1] = *(double *)(a1 + 760) + v35;
    v36.f64[0] = v124;
    _V17.D[1] = *((_QWORD *)&v127 + 1);
    v38 = (float64x2_t)vzip1q_s64(v123, v125);
    v39 = (float64x2_t)vzip2q_s64(v123, v125);
    v36.f64[1] = v126;
    v40 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v107.i64), v39, _D1), v36, v108);
    __asm { FMLA            D6, D1, V17.D[1] }
    v42 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v109.i64), v39, _D2), v36, v110);
    __asm { FMLA            D1, D2, V17.D[1] }
    v44 = _D1 + v128 * v110;
    v45 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v111.i64), v39, _D3), v36, v112);
    __asm { FMLA            D1, D3, V17.D[1] }
    _D3 = _D1 + v128 * v112;
    v48 = 0uLL;
    v49 = vmulq_f64(v40, (float64x2_t)0);
    v50 = vmlsq_lane_f64(vmlaq_f64(v40, (float64x2_t)0, v42), v45, v113.f64[0], 0);
    _D4 = 0;
    __asm { FMLS            D20, D3, V23.D[0] }
    v53 = vmlsq_lane_f64(vaddq_f64(v42, v49), v45, v113.f64[1], 0);
    __asm { FMLS            D22, D3, V23.D[1] }
    _Q18 = vaddq_f64(v45, vmlaq_f64(v49, (float64x2_t)0, v42));
    v42.f64[0] = _D3 + (_D6 + v128 * v108) * 0.0 + v44 * 0.0;
    *(double *)&v56 = v115;
    _Q5 = (int8x16_t)v114;
    *(double *)&v58 = v117;
    _Q6 = (int8x16_t)v116;
    v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v114.f64[0]), v53, v114, 1), _Q18, v115);
    __asm { FMLA            D17, D22, V5.D[1] }
    v62 = _D17 + v42.f64[0] * v115;
    v63 = (const double *)v9;
    v131 = vld3q_f64(v63);
    v63 += 6;
    v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v116.f64[0]), v53, v116, 1), _Q18, v117);
    __asm { FMLA            D18, D22, V6.D[1] }
    v65 = _Q18.f64[0] + v42.f64[0] * v117;
    v42.f64[0] = *(float64_t *)(v9 + 64);
    _Q20 = *(_OWORD *)v63;
    v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131.val[0], v60.f64[0]), v131.val[1], v60, 1), v131.val[2], v62);
    _D26 = v60.f64[1];
    __asm { FMLA            D22, D26, V20.D[1] }
    v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131.val[0], v64.f64[0]), v131.val[1], v64, 1), v131.val[2], v65);
    v131.val[1].f64[0] = v64.f64[1];
    __asm { FMLA            D23, D24, V20.D[1] }
    *(float64x2_t *)a3 = v67;
    *(double *)(a3 + 16) = _D22 + v42.f64[0] * v62;
    *(float64x2_t *)(a3 + 24) = v70;
    *(double *)(a3 + 40) = v131.val[0].f64[0] + v42.f64[0] * v65;
    if (a5)
    {
      v71 = (float64x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL);
      v67.f64[0] = *(float64_t *)(v9 + 64);
      v72 = *(int8x16_t *)(v9 + 32);
      v73 = *(float64x2_t *)(v9 + 48);
      v75 = *(float64x2_t *)v9;
      _Q23 = *(float64x2_t *)(v9 + 16);
      v76 = (float64x2_t)vextq_s8(*(int8x16_t *)v9, v72, 8uLL);
      v75.f64[1] = *(float64_t *)(v9 + 24);
      v77 = (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)_Q23, 8uLL);
      v78 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v72, 1), (int64x2_t)v67);
      v79 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)v73, 8uLL);
      _Q23.f64[1] = *(float64_t *)(v9 + 40);
      v80 = (int64x2_t)vmlsq_f64(vmulq_f64(v105, v77), v71, v67);
      v81 = (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 8uLL);
      v82 = (int64x2_t)vmlsq_laneq_f64(vmulq_laneq_f64(v106, v78, 1), v105, v79, 1);
      v83 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v81, v106.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(_QWORD *)v9, 0), (int8x16_t)v79, 8uLL), v105.f64[0], 0);
      v84 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v76, v105.f64[0]), _Q23, v71.f64[0], 0);
      _Q24 = vmlsq_lane_f64(vmulq_n_f64(v75, v71.f64[0]), v76, v106.f64[0], 0);
      v71.f64[0] = vmlsq_laneq_f64(vmulq_f64(v71, v73), v106, v73, 1).f64[0];
      *(_QWORD *)&v73.f64[0] = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v130);
      v76.f64[0] = 0.0;
      v76.f64[1] = v130;
      v86 = vmlaq_f64(vmulq_n_f64(v76, v60.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v60, 1), (float64x2_t)*(unint64_t *)&v73.f64[0]);
      v87 = vmlaq_f64(vmulq_n_f64(v76, v64.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v64, 1), (float64x2_t)*(unint64_t *)&v73.f64[0]);
      v88 = vnegq_f64(v129);
      v89 = (float64x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v88, 8uLL);
      v90 = vmlaq_f64(v86, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0), v89);
      v91 = vmlaq_f64(v87, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0), v89);
      v60.f64[0] = vmuld_lane_f64(v60.f64[0], v88, 1)
                 + v129.f64[0] * *(double *)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).i64
                 + v62 * 0.0;
      v92 = vmuld_lane_f64(v64.f64[0], v88, 1);
      v93 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
      v93.f64[0] = v92 + v129.f64[0] * v93.f64[0] + v65 * 0.0;
      v94 = (float64x2_t)vzip1q_s64(v84, v83);
      _Q18 = (float64x2_t)vzip2q_s64(v84, v83);
      v96 = vmulq_f64(v94, (float64x2_t)0);
      v97 = vmlaq_f64(v94, (float64x2_t)0, _Q18);
      __asm { FMLA            D23, D4, V24.D[1] }
      v98 = vaddq_f64(_Q18, v96);
      v99 = vmlaq_f64(v96, (float64x2_t)0, _Q18);
      __asm { FMLA            D18, D4, V24.D[1] }
      v100 = (float64x2_t)vzip1q_s64(v80, v82);
      v101 = vmlaq_f64(v97, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v113.f64[0]), 0), v100);
      v102 = vmlaq_f64(v98, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v113.f64[1]), 0), v100);
      v103 = vaddq_f64(v100, v99);
      _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], -v113.f64[0], v71.f64[0]);
      v48.f64[0] = vmlad_n_f64(_Q24.f64[1] + 0.0 * _Q24.f64[0], -v113.f64[1], v71.f64[0]);
      v104 = (float64x2_t)vextq_s8(_Q5, _Q5, 8uLL);
      v104.f64[0] = _Q23.f64[0] * *(double *)_Q5.i64
                  + v48.f64[0] * v104.f64[0]
                  + (v71.f64[0] + _Q18.f64[0]) * *(double *)&v56;
      v48.f64[0] = _Q23.f64[0] * *(double *)_Q6.i64
                 + v48.f64[0] * *(double *)vextq_s8(_Q6, _Q6, 8uLL).i64
                 + (v71.f64[0] + _Q18.f64[0]) * *(double *)&v58;
      *(_QWORD *)(a5 + 16) = *(_OWORD *)&vaddq_f64(v60, v104);
      *(float64x2_t *)a5 = vaddq_f64(v90, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)_Q5.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q5, 1), v102), (float64x2_t)vdupq_lane_s64(v56, 0), v103));
      *(_QWORD *)(a5 + 40) = *(_OWORD *)&vaddq_f64(v93, v48);
      *(float64x2_t *)(a5 + 24) = vaddq_f64(v91, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)_Q6.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), v102), (float64x2_t)vdupq_lane_s64(v58, 0), v103));
    }
  }
  return result;
}

BOOL sub_20EB3B45C(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v6;
  double v8;
  double v9;
  int v16;
  const double *v17;
  double v18;
  float64x2_t v19;
  float64x2_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v110;
  const char *v111;
  unint64_t v112;
  _QWORD v113[3];
  int v114;
  const char *v115;
  int v116;
  const char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *__dst[2];
  int64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *__p;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  __int128 v146;
  _BYTE v147[24];
  __int128 v148;
  void *v149[2];
  unint64_t v150;
  char v151;
  _QWORD v152[5];
  float64x2x3_t v153;
  float64x2x3_t v154;

  v152[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 680;
  _D2 = *(_QWORD *)(a1 + 720);
  v8 = *(double *)(a1 + 744);
  v9 = a4[1].f64[0];
  _Q7 = *a4;
  __asm { FMLA            D0, D2, V7.D[1] }
  v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), a4->f64[0]), *(float64x2_t *)(a1 + 704), *a4, 1), *(float64x2_t *)(a1 + 728), v9);
  v140 = _D0 + v8 * v9;
  v135 = 0uLL;
  v136 = 0.0;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 664), (uint64_t)&v139, 30, 0, (uint64_t)&v135, v122, 0.00000001, v139);
  v16 = v124;
  if ((_BYTE)v124)
  {
    v17 = (const double *)v6;
    v153 = vld3q_f64(v17);
    v17 += 6;
    v18 = v136;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v153.val[0], v137.f64[0]), v153.val[1], v137, 1), v153.val[2], v138);
    v153.val[0] = *(float64x2_t *)v17;
    v153.val[2].f64[0] = v137.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v153.val[0].f64[0] = v153.val[1].f64[0] + *(double *)(v6 + 64) * v138;
    *a2 = v19;
    a2[1].f64[0] = v153.val[0].f64[0];
    v154 = vld3q_f64((const double *)v6);
    _Q4 = *(float64x2_t *)v17;
    v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v154.val[0], v135.f64[0]), v154.val[1], v135, 1), v154.val[2], v18);
    v154.val[1].f64[0] = v135.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    a3[1].f64[0] = v154.val[0].f64[0] + *(double *)(v6 + 64) * v18;
    *a3 = v21;
    return v16 != 0;
  }
  sub_20EB2BB94(&v134);
  if (**(int **)(v134 + 56) <= 2)
  {
    v22 = *(unsigned __int8 *)(v134 + 72);
    v23 = *(_BYTE *)(v134 + 72) != 0;
    v24 = sub_20E8C31DC(v134, "OSLogSurrogateAppender", 1, 0);
    if (((v24 == 0) & ~v23) == 0)
    {
      sub_20E863438((uint64_t)v122);
      v25 = sub_20E86A980(&v123, (uint64_t)"failed to project: xc=", 22);
      *(_QWORD *)v147 = &v139;
      sub_20EB1A104(v25, (__int128 **)v147);
      v112 = v24;
      if ((v132 & 0x10) != 0)
      {
        v28 = v131;
        if (v131 < v128)
        {
          v131 = v128;
          v28 = v128;
        }
        v29 = v127;
        v26 = v28 - (_QWORD)v127;
        if (v28 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_63;
      }
      else
      {
        if ((v132 & 8) == 0)
        {
          v26 = 0;
          HIBYTE(v121) = 0;
          v27 = __dst;
          goto LABEL_18;
        }
        v29 = v125;
        v26 = v126 - (_QWORD)v125;
        if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
          sub_20E860B7C();
      }
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        v27 = (void **)operator new(v30 + 1);
        __dst[1] = (void *)v26;
        v121 = v31 | 0x8000000000000000;
        __dst[0] = v27;
      }
      else
      {
        HIBYTE(v121) = v26;
        v27 = __dst;
        if (!v26)
        {
LABEL_18:
          *((_BYTE *)v27 + v26) = 0;
          v113[0] = &v134;
          v113[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v113[2] = std::chrono::system_clock::now().__d_.__rep_;
          v114 = 2;
          v115 = "unknown file";
          v116 = 838;
          v118 = 0;
          v119 = 0;
          v117 = "unknown function";
          if (v121 >= 0)
            v32 = __dst;
          else
            v32 = (void **)__dst[0];
          v33 = *(_QWORD *)v113[0];
          v34 = (const char *)(*(_QWORD *)v113[0] + 16);
          v110 = *(_QWORD *)v113[0];
          v111 = v34;
          if (*(char *)(*(_QWORD *)v113[0] + 39) < 0)
          {
            v34 = *(const char **)(v33 + 16);
            v35 = *(_QWORD *)(v33 + 24);
            v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v37 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            v35 = *(unsigned __int8 *)(*(_QWORD *)v113[0] + 39);
            v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v36 & 1) != 0)
              goto LABEL_25;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v147);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v147);
            if ((_BYTE)v148 && (v147[23] & 0x80000000) != 0)
              operator delete(*(void **)v147);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_25:
          if (byte_254A4A4F8[23] >= 0)
            v38 = byte_254A4A4F8;
          else
            v38 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v39 = byte_254A4A4F8[23];
          else
            v39 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v147 = os_log_create(v38, v34);
          v40 = &v147[8];
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v41 = v22;
            v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v42 = v39 | 7;
            v43 = v42 + 1;
            v40 = operator new(v42 + 1);
            *(_QWORD *)&v147[16] = v39;
            *(_QWORD *)&v148 = v43 | 0x8000000000000000;
            *(_QWORD *)&v147[8] = v40;
            v22 = v41;
          }
          else
          {
            BYTE7(v148) = v39;
            if (!v39)
            {
LABEL_39:
              v40[v39] = 0;
              BYTE8(v148) = 1;
              v44 = v149;
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v45 = (const char *)v32;
              if (v35 >= 0x17)
              {
                v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v47 = v35 | 7;
                v48 = v47 + 1;
                v46 = v112;
                v44 = (void **)operator new(v47 + 1);
                v149[1] = (void *)v35;
                v150 = v48 | 0x8000000000000000;
                v149[0] = v44;
              }
              else
              {
                HIBYTE(v150) = v35;
                v46 = v112;
                if (!v35)
                {
LABEL_47:
                  *((_BYTE *)v44 + v35) = 0;
                  v151 = 1;
                  v49 = *(NSObject **)v147;
                  if (SHIBYTE(v150) < 0)
                    operator delete(v149[0]);
                  if (BYTE8(v148) && SBYTE7(v148) < 0)
                    operator delete(*(void **)&v147[8]);
                  if (*(_QWORD *)v147)
                    os_release(*(void **)v147);
                  if (!v46 || !*(_QWORD *)(v46 + 24))
                  {
                    os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v147 = 136315138;
                    *(_QWORD *)&v147[4] = v45;
                    v56 = (void *)_os_log_send_and_compose_impl();
                    if (v56)
                      free(v56);
                    goto LABEL_128;
                  }
                  v50 = _os_log_pack_size();
                  v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
                  v52 = (std::__shared_weak_count *)operator new();
                  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v52->__shared_owners_ = 0;
                  v52->__shared_weak_owners_ = 0;
                  v52[1].__vftable = v51;
                  *(_QWORD *)&v141 = v51;
                  *((_QWORD *)&v141 + 1) = v51;
                  v143 = 0;
                  v144 = 0;
                  v142 = v52;
                  v53 = strlen(v45);
                  if (v53 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v54 = v53;
                  if (v53 >= 0x17)
                  {
                    v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v53 | 7) != 0x17)
                      v57 = v53 | 7;
                    v58 = v57 + 1;
                    v55 = operator new(v57 + 1);
                    *(_QWORD *)&v146 = v54;
                    *((_QWORD *)&v146 + 1) = v58 | 0x8000000000000000;
                    v145 = v55;
                  }
                  else
                  {
                    HIBYTE(v146) = v53;
                    v55 = &v145;
                    if (!v53)
                    {
LABEL_68:
                      *((_BYTE *)v55 + v54) = 0;
                      v59 = v145;
                      v152[0] = v146;
                      *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)&v146 + 7);
                      v60 = HIBYTE(v146);
                      v61 = operator new(0x38uLL);
                      v61[1] = 0;
                      v61[2] = 0;
                      v61[3] = off_24C9ABC20;
                      *v61 = &off_24C9ABBD0;
                      v62 = v152[0];
                      v61[4] = v59;
                      v61[5] = v62;
                      *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v152 + 7);
                      *((_BYTE *)v61 + 55) = v60;
                      v152[0] = 0;
                      *(_QWORD *)((char *)v152 + 7) = 0;
                      v63 = v144;
                      v143 = (char *)(v61 + 3);
                      v144 = (std::__shared_weak_count *)v61;
                      if (v63)
                      {
                        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                        do
                          v65 = __ldaxr(p_shared_owners);
                        while (__stlxr(v65 - 1, p_shared_owners));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      *(_OWORD *)v147 = v141;
                      v66 = v143;
                      *(_QWORD *)&v147[16] = v142;
                      if (v142)
                      {
                        v67 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v68 = __ldxr(v67);
                        while (__stxr(v68 + 1, v67));
                      }
                      v69 = v144;
                      *(_QWORD *)&v148 = v66;
                      *((_QWORD *)&v148 + 1) = v144;
                      if (v144)
                      {
                        v70 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                        v149[0] = v66;
                        do
                          v72 = __ldaxr(v70);
                        while (__stlxr(v72 - 1, v70));
                        if (!v72)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      else
                      {
                        v149[0] = v66;
                      }
                      v73 = v142;
                      if (v142)
                      {
                        v74 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = *(_QWORD *)v147;
                      if (*((char *)v149[0] + 31) >= 0)
                        v77 = (char *)v149[0] + 8;
                      else
                        v77 = (char *)*((_QWORD *)v149[0] + 1);
                      v78 = _os_log_pack_fill();
                      *(_DWORD *)v78 = 136315138;
                      *(_QWORD *)(v78 + 4) = v77;
                      v79 = operator new();
                      v80 = *(unsigned __int8 *)(v110 + 39);
                      v81 = *(const char **)(v110 + 16);
                      v82 = *(_QWORD *)(v110 + 24);
                      v83 = v148;
                      *(_OWORD *)(v79 + 8) = *(_OWORD *)&v147[8];
                      if ((v80 & 0x80u) != 0)
                        v80 = v82;
                      else
                        v81 = v111;
                      *(_QWORD *)v79 = v76;
                      *(_QWORD *)&v147[8] = 0;
                      *(_QWORD *)&v147[16] = 0;
                      *(_OWORD *)(v79 + 24) = v83;
                      v148 = 0uLL;
                      *(_QWORD *)(v79 + 40) = v81;
                      *(_QWORD *)(v79 + 48) = v80;
                      *(_BYTE *)(v79 + 56) = 2;
                      v145 = 0;
                      *(_QWORD *)&v141 = v79;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v141);
                      v84 = v141;
                      *(_QWORD *)&v141 = 0;
                      if (v84)
                      {
                        v85 = *(std::__shared_weak_count **)(v84 + 32);
                        if (v85)
                        {
                          v86 = (unint64_t *)&v85->__shared_owners_;
                          do
                            v87 = __ldaxr(v86);
                          while (__stlxr(v87 - 1, v86));
                          if (!v87)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                        }
                        v88 = *(std::__shared_weak_count **)(v84 + 16);
                        if (v88)
                        {
                          v89 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
                        v91 = v145;
                        v145 = 0;
                        if (v91)
                        {
                          v92 = (std::__shared_weak_count *)v91[4];
                          if (v92)
                          {
                            v93 = (unint64_t *)&v92->__shared_owners_;
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = (std::__shared_weak_count *)v91[2];
                          if (v95)
                          {
                            v96 = (unint64_t *)&v95->__shared_owners_;
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                        }
                      }
                      v98 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                      if (*((_QWORD *)&v148 + 1))
                      {
                        v99 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v101 = *(std::__shared_weak_count **)&v147[16];
                      if (*(_QWORD *)&v147[16])
                      {
                        v102 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
LABEL_128:
                      if (v22)
                      {
                        v104 = (const char *)__dst;
                        if (v121 < 0)
                          v104 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v113, "%s", v104);
                        sub_20E863570((uint64_t)v113);
                      }
                      sub_20E863570((uint64_t)v113);
                      v105 = v119;
                      if (v119)
                      {
                        v106 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (SHIBYTE(v121) < 0)
                        operator delete(__dst[0]);
                      v122[0] = *MEMORY[0x24BEDB7F0];
                      v108 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v122 + *(_QWORD *)(v122[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v123 = v108;
                      v124 = MEMORY[0x24BEDB848] + 16;
                      if (v130 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v133);
                      return v16 != 0;
                    }
                  }
                  memcpy(v55, v45, v54);
                  goto LABEL_68;
                }
              }
              memmove(v44, v34, v35);
              goto LABEL_47;
            }
          }
          memmove(v40, v38, v39);
          goto LABEL_39;
        }
      }
      memmove(v27, v29, v26);
      goto LABEL_18;
    }
  }
  return v16 != 0;
}

void sub_20EB3BFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3C10C(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  _OWORD v32[4];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  _QWORD v41[63];
  std::__shared_weak_count *v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;

  v2 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v2 == 64;
    v2 += 8;
  }
  while (!v4);
  if (!v3)
    return 0;
  v5 = 72;
  do
  {
    v6 = (*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v5 == 136;
    v5 += 8;
  }
  while (!v4);
  if (!v6
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v7 = 168;
  do
  {
    v8 = (*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v7 == 272;
    v7 += 8;
  }
  while (!v4);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 664);
  if (!v9 || !sub_20EB1E278(v9))
    return 0;
  v10 = *(_OWORD *)(a1 + 48);
  v32[2] = *(_OWORD *)(a1 + 32);
  v32[3] = v10;
  v11 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v11;
  v12 = *(_OWORD *)(a1 + 72);
  v35 = *(_OWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 104);
  v37 = v13;
  v33 = *(_QWORD *)(a1 + 64);
  v38 = *(_QWORD *)(a1 + 136);
  v34 = v12;
  v40 = *(_BYTE *)(a1 + 160);
  v39 = *(_OWORD *)(a1 + 144);
  memcpy(v41, (const void *)(a1 + 168), 0x1E9uLL);
  v41[62] = *(_QWORD *)(a1 + 664);
  v19 = *(std::__shared_weak_count **)(a1 + 672);
  v42 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(_OWORD *)(a1 + 728);
  v45 = *(_OWORD *)(a1 + 712);
  v46 = v22;
  v23 = *(__n128 *)(a1 + 696);
  v43 = *(__n128 *)(a1 + 680);
  v44 = v23;
  v47 = *(_QWORD *)(a1 + 744);
  v48 = *(_OWORD *)(a1 + 752);
  v50 = 11;
  v51 = 0x7FF8000000000000;
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v23.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v53 = xmmword_2102E3C60;
  v23.n128_u64[0] = 0.5;
  v24 = sub_20EB44B68((uint64_t)v32, 0, 0, v23, v43, v14, v15, v16, v17, v18);
  if (v50 != -1)
  {
    if (v50 > 7)
    {
      if (v50 > 0xB)
      {
        if (v50 < 0xF)
          return v24;
        v25 = v49;
        if (!v49)
          return v24;
        v30 = (unint64_t *)&v49->__shared_owners_;
        do
          v27 = __ldaxr(v30);
        while (__stlxr(v27 - 1, v30));
      }
      else if (v50 > 9)
      {
        if (v50 == 10)
          return v24;
        v25 = v42;
        if (!v42)
          return v24;
        v31 = (unint64_t *)&v42->__shared_owners_;
        do
          v27 = __ldaxr(v31);
        while (__stlxr(v27 - 1, v31));
      }
      else
      {
        if (v50 != 9)
          return v24;
        v25 = (std::__shared_weak_count *)v41[42];
        if (!v41[42])
          return v24;
        v29 = (unint64_t *)(v41[42] + 8);
        do
          v27 = __ldaxr(v29);
        while (__stlxr(v27 - 1, v29));
      }
    }
    else
    {
      if (v50 != 7)
        return v24;
      v25 = (std::__shared_weak_count *)v41[39];
      if (!v41[39])
        return v24;
      v26 = (unint64_t *)(v41[39] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
    }
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v24;
}

void sub_20EB3C42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20EB3C440(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  __double2 v7;
  double v8;
  __double2 v9;
  double v10;
  double result;
  float64x2_t v17;
  double v18[4];

  v18[3] = *(double *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 664);
  v3 = *(unsigned int *)(v2 + 104);
  if ((_DWORD)v3 == -1)
    sub_20E877AB8();
  *(_QWORD *)&v18[0] = &v17;
  v6 = ((double (*)(double *, uint64_t))off_24C9C4FE8[v3])(v18, v2 + 88);
  if (v6 <= 0.0)
  {
LABEL_7:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 922, (uint64_t)&unk_210254955, 0, (uint64_t)"Invalid lens distortion.", 24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_3:
  v7 = __sincos_stret(v6);
  v8 = 0.0;
  while (1)
  {
    v9 = __sincos_stret(v8);
    v10 = v7.__cosval * *(double *)(a1 + 760);
    v18[0] = v7.__sinval * v9.__sinval - v7.__cosval * *(double *)(a1 + 752);
    v18[1] = v7.__sinval * v9.__cosval - v10;
    v18[2] = v7.__cosval;
    if ((sub_20EB24288(&v17, (uint64_t)v18, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) != 0)
      break;
    v8 = v8 + a2;
    if (v8 >= 6.28318531)
    {
      v6 = v6 - a2;
      if (v6 <= 0.0)
        goto LABEL_7;
      goto LABEL_3;
    }
  }
  _D2 = vaddq_f64(*(float64x2_t *)(a1 + 752), v17).f64[1];
  __asm { FMLA            D0, D2, V1.D[1] }
  return result;
}

double sub_20EB3C5DC(uint64_t a1)
{
  int64x2_t v1;
  double result;

  v1 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 160) = 0;
  *(int64x2_t *)a1 = v1;
  *(int64x2_t *)(a1 + 16) = v1;
  *(int64x2_t *)(a1 + 32) = v1;
  *(int64x2_t *)(a1 + 48) = v1;
  *(int64x2_t *)(a1 + 64) = v1;
  *(int64x2_t *)(a1 + 80) = v1;
  *(int64x2_t *)(a1 + 96) = v1;
  *(int64x2_t *)(a1 + 112) = v1;
  *(int64x2_t *)(a1 + 128) = v1;
  *(int64x2_t *)(a1 + 144) = v1;
  *(_QWORD *)(a1 + 168) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 176) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 208) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 216) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 224) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 232) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 240) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 248) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 256) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 280) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 288) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 296) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 304) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 312) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 320) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 336) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 344) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 352) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 360) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 368) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 376) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 384) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 880) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_QWORD *)(a1 + 904) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 936) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 968) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 976) = 0u;
  return result;
}

uint64_t sub_20EB3C668(uint64_t a1, __int128 *a2, void *__src, _OWORD *a4, uint64_t a5, _OWORD *a6, const void *a7)
{
  int64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int64x2_t v20;

  v10 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = 0;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v12;
  *(double *)&v12 = *(double *)a2 * *((double *)a2 + 4);
  *(double *)(a1 + 72) = 1.0 / *(double *)a2;
  *(double *)(a1 + 80) = -*((double *)a2 + 1) / *(double *)&v12;
  *(double *)(a1 + 88) = -(*((double *)a2 + 4) * *((double *)a2 + 2) - *((double *)a2 + 1) * *((double *)a2 + 5))
                       / *(double *)&v12;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = 1.0 / *((double *)a2 + 4);
  *(double *)&v11 = -*((double *)a2 + 5) / *((double *)a2 + 4);
  *(int64x2_t *)(a1 + 168) = v10;
  v15 = (void *)(a1 + 168);
  *(_QWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
  *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(int64x2_t *)(a1 + 184) = v10;
  *(int64x2_t *)(a1 + 200) = v10;
  *(int64x2_t *)(a1 + 216) = v10;
  *(int64x2_t *)(a1 + 232) = v10;
  *(int64x2_t *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 272) = v10;
  *(int64x2_t *)(a1 + 288) = v10;
  *(int64x2_t *)(a1 + 304) = v10;
  *(int64x2_t *)(a1 + 320) = v10;
  *(int64x2_t *)(a1 + 336) = v10;
  *(int64x2_t *)(a1 + 352) = v10;
  v20 = v10;
  *(int64x2_t *)(a1 + 368) = v10;
  *(_QWORD *)(a1 + 384) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 888) = *a4;
  *a4 = 0u;
  *(_OWORD *)(a1 + 904) = *(_OWORD *)a5;
  v16 = *(_OWORD *)(a5 + 16);
  v17 = *(_OWORD *)(a5 + 32);
  v18 = *(_OWORD *)(a5 + 48);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 936) = v17;
  *(_OWORD *)(a1 + 952) = v18;
  *(_OWORD *)(a1 + 920) = v16;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 976) = *a6;
  if (!a7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 493, (uint64_t)"inverse_radial", 14, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memmove(v15, __src, 0xE0uLL);
  memmove((void *)(a1 + 392), a7, 0xE0uLL);
  *(int64x2_t *)(a1 + 144) = v20;
  *(_BYTE *)(a1 + 160) = 0;
  return a1;
}

void sub_20EB3C83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

char *sub_20EB3C850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (char *)operator new(0x130uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4 + 304;
  sub_20EB44158((unint64_t *)a2, v4, (char *)a1, (char *)(a1 + 72), 9);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 168), (char *)(a1 + 392), 28);
  sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 392), (char *)(a1 + 616), 28);
  sub_20EB1B860(*(_QWORD *)(a1 + 888), (double **)a2);
  return sub_20EB44158((unint64_t *)a2, *(void **)(a2 + 8), (char *)(a1 + 904), (char *)(a1 + 976), 9);
}

void sub_20EB3C904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EB3C930(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double result;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v7 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0x130)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 520, (uint64_t)"data.size() > camera_matrix_.elements() + radial_.size() + 1", 60, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v7 = *a2;
  }
  a5.f64[0] = *(float64_t *)(v7 + 64);
  v9 = *(float64x2_t *)(v7 + 32);
  v8 = *(float64x2_t *)(v7 + 48);
  v11 = *(int8x16_t *)v7;
  v10 = *(float64x2_t *)(v7 + 16);
  v12 = (int8x16_t)vabdq_f64(*(float64x2_t *)v7, *(float64x2_t *)a1);
  v13 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v14 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, (float64x2_t)vextq_s8(v12, v12, 8uLL)), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v10, *(float64x2_t *)(a1 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v13, vabdq_f64(v9, *(float64x2_t *)(a1 + 32))), (int32x4_t)vcgeq_f64(v13, vabdq_f64(v8, *(float64x2_t *)(a1 + 48))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v14)) & 1) != 0
    || (v14.f64[0] = *(float64_t *)(a1 + 64), vabdq_f64(a5, v14).f64[0] > 1.0e-10))
  {
    v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    *(_QWORD *)&v10.f64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    *(int8x16_t *)a1 = v11;
    *(float64x2_t *)(a1 + 16) = v10;
    *(_QWORD *)&v9.f64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    *(float64_t *)(a1 + 64) = a5.f64[0];
    *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    *(float64x2_t *)(a1 + 32) = v9;
    *(float64x2_t *)(a1 + 48) = v8;
    v15 = *(double *)v7 * *(double *)(v7 + 32);
    *(double *)(a1 + 72) = 1.0 / *(double *)v7;
    *(double *)(a1 + 80) = -*(double *)(v7 + 8) / v15;
    *(double *)(a1 + 88) = -(*(double *)(v7 + 32) * *(double *)(v7 + 16) - *(double *)(v7 + 8) * *(double *)(v7 + 40))
                         / v15;
    *(_QWORD *)(a1 + 96) = 0;
    *(double *)(a1 + 104) = 1.0 / *(double *)(v7 + 32);
    *(double *)(a1 + 112) = -*(double *)(v7 + 40) / *(double *)(v7 + 32);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
    *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 160) = 0;
    v7 = *a2;
  }
  memmove((void *)(a1 + 168), (const void *)(v7 + 72), 0xE0uLL);
  memmove((void *)(a1 + 392), (const void *)(v7 + 296), 0xE0uLL);
  *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  v16 = v7 + 520;
  v17 = (char *)operator new(0x88uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C9C4FA8;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_QWORD *)v17 + 12) = 0;
  *((_DWORD *)v17 + 26) = 1;
  *((_QWORD *)v17 + 14) = 0x7FF8000000000000;
  v18 = *(std::__shared_weak_count **)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v17;
  *((_QWORD *)v17 + 3) = &off_24C9C2508;
  *(_QWORD *)(a1 + 888) = v17 + 24;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v30 = a2[1];
      v22 = *(_QWORD *)(a1 + 888);
      v31 = (uint64_t)(v30 - v16) >> 3;
      v32 = v16;
      if (v30 >= v16)
        goto LABEL_13;
LABEL_12:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_13;
LABEL_16:
      abort();
    }
  }
  v21 = a2[1];
  v22 = *(_QWORD *)(a1 + 888);
  v31 = (uint64_t)(v21 - v16) >> 3;
  v32 = v16;
  if (v21 < v16)
    goto LABEL_12;
LABEL_13:
  v23 = a1 + 904;
  v24 = sub_20EB1B3A0(v22, &v31);
  result = v24[2];
  v26 = *((_QWORD *)v24 + 5);
  v27 = *(_OWORD *)(v24 + 3);
  v28 = *((_QWORD *)v24 + 8);
  v29 = *((_OWORD *)v24 + 3);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(double *)(v23 + 16) = result;
  *(_OWORD *)(v23 + 24) = v27;
  *(_QWORD *)(v23 + 40) = v26;
  *(_OWORD *)(v23 + 48) = v29;
  *(_QWORD *)(v23 + 64) = v28;
  return result;
}

int32x4_t sub_20EB3CC54(uint64_t a1, float64x2_t *__src)
{
  float64x2_t *v4;
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int v9;
  int32x4_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[14];
  char v26;

  v5 = *(float64x2_t *)(a1 + 168);
  v4 = (float64x2_t *)(a1 + 168);
  v6 = (int8x16_t)vabdq_f64(v5, *__src);
  v7 = (float64x2_t)vextq_s8(v6, v6, 8uLL);
  v8 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, v7), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[1], __src[1]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[2], __src[2])), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[3], __src[3]))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[4], __src[4])), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[5], __src[5]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[6], __src[6])), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[7], __src[7]))))))) & 1) != 0|| ((v9 = vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_210315570, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                                              v8,
                                                                                              vabdq_f64(v4[8], __src[8])),
                                                                                 (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[9], __src[9]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[10], __src[10])), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[11], __src[11])))))), result = (int32x4_t)vbicq_s8((int8x16_t)xmmword_21030C960, (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[12], __src[12])), (int32x4_t)vcgeq_f64(v8, vabdq_f64(v4[13], __src[13])))), result.i32[0] = vaddvq_s32(result),
         !v9)
      ? (v11 = (result.i8[0] & 0xF) == 0)
      : (v11 = 0),
        !v11))
  {
    memmove(v4, __src, 0xE0uLL);
    v12 = *(_QWORD *)(a1 + 888);
    v13 = *(unsigned int *)(v12 + 104);
    if ((_DWORD)v13 == -1)
      sub_20E877AB8();
    v14 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    v15 = v14 * 1.05;
    v16 = v14 * 0.95;
    *(_QWORD *)&v25[0] = &v26;
    v17 = ((double (*)(_OWORD *, uint64_t))off_24C9C4FE8[v13])(v25, v12 + 88);
    sub_20EB265D8(__src->f64, v25, v16, v15, v17 * 57.2957795);
    v18 = v25[11];
    *(_OWORD *)(a1 + 552) = v25[10];
    *(_OWORD *)(a1 + 568) = v18;
    v19 = v25[13];
    *(_OWORD *)(a1 + 584) = v25[12];
    *(_OWORD *)(a1 + 600) = v19;
    v20 = v25[7];
    *(_OWORD *)(a1 + 488) = v25[6];
    *(_OWORD *)(a1 + 504) = v20;
    v21 = v25[9];
    *(_OWORD *)(a1 + 520) = v25[8];
    *(_OWORD *)(a1 + 536) = v21;
    v22 = v25[3];
    *(_OWORD *)(a1 + 424) = v25[2];
    *(_OWORD *)(a1 + 440) = v22;
    v23 = v25[5];
    *(_OWORD *)(a1 + 456) = v25[4];
    *(_OWORD *)(a1 + 472) = v23;
    v24 = v25[1];
    *(_OWORD *)(a1 + 392) = v25[0];
    *(_OWORD *)(a1 + 408) = v24;
    result = (int32x4_t)vdupq_n_s64(0x7FF8000000000000uLL);
    *(int32x4_t *)(a1 + 144) = result;
    *(_BYTE *)(a1 + 160) = 0;
  }
  return result;
}

BOOL sub_20EB3CED8(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, uint64_t a6)
{
  _BOOL4 v12;
  double *v13;
  double v14;
  int v15;
  void *v16;
  int8x16_t v17;
  __int128 v18;
  __int128 v26;
  double v27;
  _BOOL8 v28;
  int64x2_t *v30;
  float64x2_t v32;
  int8x16_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64_t v38;
  int64x2_t v39;
  double v40;
  float64x2_t v42;
  float64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  unint64_t v48;
  float64_t v49;
  float64_t v51;
  float64x2_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  size_t v59;
  void **v60;
  float64x2_t v64;
  float64x2_t v66;
  double v67;
  int8x16_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82;
  int8x16_t v83;
  double v84;
  float64x2_t v86;
  int8x16_t v87;
  double v88;
  double v89;
  double v90;
  int8x16_t v91;
  double v92;
  float64x2_t v93;
  unint64_t v94;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v120;
  float64x2_t v121;
  double v126;
  double v129;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int8x16_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t v147;
  double v148;
  float64x2_t v149;
  double v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v162;
  float64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  float64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  float64x2_t v178;
  double v180;
  unint64_t v182;
  double v184;
  float64x2_t v185;
  float64x2_t v187;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v192;
  unint64_t v193;
  const void **v194;
  const void *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  size_t v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void **v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  size_t v217;
  size_t v218;
  _QWORD *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  char v224;
  _QWORD *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *p_shared_owners;
  unint64_t v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  int64x2_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  const char *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  double v272;
  int8x16_t v273;
  double v274;
  float64x2_t v275;
  float64_t v276;
  double v277;
  int8x16_t v278;
  int8x16_t v279;
  int8x16_t v280;
  float64_t v281;
  float64_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  unint64_t v286;
  unint64_t v287;
  void *v288;
  int8x16_t v289;
  float64_t v290;
  uint64_t v291;
  int8x16_t v292;
  const char *v293;
  float64x2_t v294;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v296;
  const char *v297;
  int v298;
  const char *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  void *__dst[2];
  int64_t v303;
  int8x16_t v304;
  float64_t v305;
  __int128 v306;
  unint64_t v307;
  __int128 v308;
  double v309;
  unint64_t v310;
  void *__p;
  char v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  float64x2_t v317;
  double v318;
  float64x2_t v319;
  float64_t v320;
  char v321;
  int8x16_t v322;
  _BYTE v323[32];
  int8x16_t v324;
  double v325;
  float64x2_t v326;
  double v327;
  float64x2_t v328;
  uint64_t v329;
  int8x16_t v330;
  double v331;
  float64x2_t v332;
  double v333;
  int8x16_t v334;
  double v335;
  __int128 v336;
  std::__shared_weak_count *v337;
  char *v338;
  uint64_t v339;
  _QWORD *v340;
  __int128 v341;
  float64x2_t v342;
  _BYTE v343[24];
  int64x2_t v344;
  void *v345[2];
  unint64_t v346;
  char v347;
  _QWORD v348[5];

  v348[2] = *MEMORY[0x24BDAC8D0];
  v342 = vsubq_f64(*a3, *(float64x2_t *)(a1 + 976));
  v12 = a5 != 0;
  v13 = (double *)(a1 + 168);
  v14 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  v15 = sub_20EB253A0((uint64_t)&v334, (uint64_t)&v342, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v14);
  if (!v12)
  {
    if (v15)
    {
      v292.i64[0] = (uint64_t)v16;
      v287 = (unint64_t)v16;
      v289.i64[0] = (uint64_t)v16;
      v286 = (unint64_t)v16;
      v290 = *(double *)&v16;
      v288 = v16;
      v27 = v335;
      if (v335 >= 0.0)
        goto LABEL_11;
    }
    return 0;
  }
  if (!v15)
    return 0;
  if (!sub_20EB2498C(&v317, (uint64_t)&v322, &v294, (uint64_t)&v334, v13, v14))
    return 0;
  *(double *)v17.i64 = v335;
  *(_QWORD *)&v18 = *(_QWORD *)v323;
  _Q3 = v322;
  v324 = v334;
  v325 = v335;
  rep = 0;
  _Q5.f64[0] = v335;
  *(_QWORD *)&_Q5.f64[1] = v334.i64[0];
  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)(v323 + 16), _Q5), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v323 + 16), *(int64x2_t *)v323), (float64x2_t)vextq_s8(v334, v17, 8uLL)).f64[1];
  __asm { FMLA            D6, D5, V3.D[1] }
  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)v323, (float64x2_t)v334), 1), *(float64x2_t *)&v323[16], (float64x2_t)v334).f64[0], *(double *)v323)) < 0.00000001)return 0;
  *(_QWORD *)&v26 = vextq_s8(v322, v322, 8uLL).u64[0];
  _Q3.i64[1] = vextq_s8(*(int8x16_t *)v323, *(int8x16_t *)v323, 8uLL).u64[0];
  *((_QWORD *)&v26 + 1) = *(_QWORD *)&v323[16];
  *((_QWORD *)&v18 + 1) = vextq_s8(*(int8x16_t *)&v323[16], *(int8x16_t *)&v323[16], 8uLL).u64[0];
  v305 = *(double *)v334.i64;
  v304 = _Q3;
  v307 = vextq_s8(v334, v334, 8uLL).u64[0];
  v306 = v26;
  v309 = v335;
  v308 = v18;
  sub_20E8BE424((uint64_t)v343);
  v288 = v345[0];
  v289 = (int8x16_t)vzip2q_s64(*(int64x2_t *)v343, v344);
  v290 = *(double *)&v343[16];
  v292 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v343, v344);
  v286 = vextq_s8(v289, v289, 8uLL).u64[0];
  v287 = vextq_s8(v292, v292, 8uLL).u64[0];
  v27 = v335;
  if (v335 < 0.0)
    return 0;
LABEL_11:
  v30 = (int64x2_t *)(a1 + 904);
  v334 = (int8x16_t)vaddq_f64((float64x2_t)v334, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v27));
  _D3 = *(_QWORD *)(a1 + 944);
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), *(double *)v334.i64), *(float64x2_t *)(a1 + 928), (float64x2_t)v334, 1), *(float64x2_t *)(a1 + 952), v335);
  __asm { FMLA            D1, D3, V0.D[1] }
  v333 = _D1 + *(double *)(a1 + 968) * v335;
  v332 = v32;
  if ((unint64_t)a5 | a6)
    v34 = &v322;
  else
    v34 = 0;
  sub_20EB1C3A0(*(_QWORD *)(a1 + 888), COERCE_FLOAT64_T(&v332), (uint64_t)v34, (uint64_t)&v317);
  v28 = v321 != 0;
  if (v321)
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 920);
    v38 = *(double *)(a1 + 944);
    v39 = *(int64x2_t *)(a1 + 928);
    v40 = *(double *)(a1 + 968);
    _Q5 = *(_OWORD *)(a1 + 952);
    v42 = (float64x2_t)vzip1q_s64(*v30, v39);
    v43 = _Q3.f64[0];
    _Q7.f64[1] = v38;
    v35.f64[0] = v318;
    v44 = v317;
    v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v317.f64[0]), (float64x2_t)vzip2q_s64(*v30, v39), v317, 1), _Q7, v318);
    _Q7.f64[0] = v317.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    _Q7.f64[0] = _D4 + v40 * v318;
    v48 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v49 = v45.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v48;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 920);
      v38 = *(double *)(a1 + 944);
      v42 = (float64x2_t)vzip1q_s64(*v30, *(int64x2_t *)(a1 + 928));
      _D20 = *(_QWORD *)(a1 + 960);
      v51 = *(double *)(a1 + 936);
      v52.f64[0] = *(float64_t *)(a1 + 912);
      v40 = *(double *)(a1 + 968);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 960);
      v51 = *(double *)(a1 + 936);
      v52.f64[0] = *(float64_t *)(a1 + 912);
    }
    v36.f64[0] = v320;
    _Q26 = v319;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v319.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v36.f64[0] * v36.f64[0]);
    v64 = vmulq_f64(v36, _Q16);
    _Q21 = vmulq_n_f64(v319, _Q16.f64[0]);
    _Q3.f64[1] = v38;
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    v52.f64[1] = v51;
    v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q21.f64[0]), v52, _Q21, 1), _Q3, v64.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v40, v64.f64[0]);
    *(_QWORD *)&v45.f64[1] = v48;
    *(float64x2_t *)a2 = vaddq_f64(v45, v66);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if ((unint64_t)a5 | a6)
    {
      v67 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v68 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL);
      v69.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v69.f64[1] = v68.i64[0];
      v70.f64[0] = _Q16.f64[0];
      v70.f64[1] = _Q16.f64[0];
      v71 = vmulq_f64(v70, v69);
      v72 = vmulq_f64(_Q16, v64);
      v73 = v36.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v72.f64[0];
      v36.f64[0] = v67 * _Q16.f64[0] * v72.f64[0];
      v72.f64[0] = v73 * v72.f64[0];
      v74.f64[0] = 0.0;
      v74.f64[1] = _Q16.f64[0];
      v75 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v71, _Q21.f64[0], 0);
      v76 = (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL);
      *(_QWORD *)&v77 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v78 = vmlsq_lane_f64(v74, v71, v67 * _Q16.f64[0], 0);
      v79 = vsubq_f64((float64x2_t)0, v36);
      v277 = v79.f64[0];
      v80 = vmlsq_lane_f64((float64x2_t)0, v71, v73, 0);
      v81 = (float64x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL);
      *(_QWORD *)&v82 = *(_OWORD *)&vsubq_f64(_Q16, v72);
      v83 = *(int8x16_t *)&v323[8];
      *(_QWORD *)&v84 = vextq_s8(v83, v83, 8uLL).u64[0];
      _Q31 = v326;
      v86 = (float64x2_t)vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL);
      v87 = v330;
      *(_QWORD *)&v88 = vextq_s8(v87, v87, 8uLL).u64[0];
      v89 = *(double *)&v323[24];
      v79.f64[0] = *(float64_t *)v323;
      v285 = v79;
      *(_QWORD *)&v79.f64[1] = v322.i64[1];
      v279 = v322;
      v280 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL);
      v90 = v327;
      v79.f64[0] = v325;
      v284 = v79;
      v278 = v324;
      v91 = vextq_s8(v278, v278, 8uLL);
      v281 = *(double *)v91.i64;
      *(_QWORD *)&v282 = vextq_s8(v279, v279, 8uLL).u64[0];
      v92 = v331;
      v91.i64[0] = v329;
      v283 = (float64x2_t)v91;
      v93 = v328;
      v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      if (a5)
      {
        _Q3.f64[0] = *(float64_t *)(a1 + 920);
        v96 = *(double *)(a1 + 944);
        v97 = *(float64x2_t *)(a1 + 928);
        v273 = v68;
        v274 = v84;
        v98.f64[0] = v75.f64[0];
        v98.f64[1] = v76.f64[0];
        _Q5 = *(float64x2_t *)(a1 + 952);
        v275 = v76;
        _Q18.f64[0] = v78.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v280.i64[0];
        _Q22.f64[0] = v80.f64[0];
        _Q22.f64[1] = v81.f64[0];
        v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *(double *)&v323[8]), _Q18, v84), _Q22, *(double *)&v323[24]);
        v276 = v81.f64[0];
        v81.f64[0] = v77 * *(double *)&v323[8] + v277 * v84 + v82 * *(double *)&v323[24];
        v103 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v326.f64[0]), _Q18, v86.f64[0]), _Q22, v327);
        v104 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *(double *)v330.i64), _Q18, v88), _Q22, v331);
        _Q18.f64[0] = v328.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v94;
        _Q17 = vaddq_f64(v104, _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 912);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 936);
        __asm { FMLA            D22, D2, V17.D[1] }
        _D31 = *(_QWORD *)(a1 + 960);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v77 * v326.f64[0] + v277 * v86.f64[0] + v82 * v327;
        *(_QWORD *)&v109.f64[0] = v322.i64[0];
        v109.f64[1] = v282;
        v110 = (int64x2_t)vaddq_f64(v102, v109);
        *(_QWORD *)&v109.f64[0] = v324.i64[0];
        v109.f64[1] = v281;
        v111 = (int64x2_t)vaddq_f64(v103, v109);
        v112 = (float64x2_t)vzip1q_s64(v110, v111);
        _Q30 = (float64x2_t)vzip2q_s64(v110, v111);
        v114 = vmlaq_laneq_f64(vmulq_n_f64(v112, *(double *)v30->i64), _Q30, *(float64x2_t *)v30, 1);
        v115 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v81, v285), (int64x2_t)vaddq_f64(_Q17, v284));
        v116 = vmlaq_laneq_f64(vmulq_n_f64(v112, v97.f64[0]), _Q30, v97, 1);
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v112, _Q5.f64[0]), _Q30, _Q5, 1);
        _Q30.f64[0] = *(float64_t *)(a1 + 968);
        _Q31 = vmlaq_n_f64(v114, v115, _Q3.f64[0]);
        v118 = vmlaq_n_f64(v116, v115, v96);
        _Q10 = vmlaq_n_f64(v117, v115, _Q30.f64[0]);
        v115.f64[0] = v77 * *(double *)v330.i64 + v277 * v88 + v82 * v331;
        *(_QWORD *)&v115.f64[0] = *(_OWORD *)&vaddq_f64(v115, v283);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q3.f64[0], v115.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v96, v115.f64[0]);
        v120 = vmlad_n_f64(_D2, _Q30.f64[0], v115.f64[0]);
        v121 = (float64x2_t)vzip1q_s64(*v30, (int64x2_t)v97);
        _Q25 = (float64x2_t)vzip2q_s64(*v30, (int64x2_t)v97);
        _Q3.f64[1] = v96;
        _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, _Q31.f64[0]), _Q25, _Q31, 1), _Q3, _Q18.f64[0]);
        _D16 = _Q31.f64[1];
        __asm { FMLA            D6, D16, V5.D[1] }
        v126 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        _Q31.f64[0] = v118.f64[1];
        __asm { FMLA            D16, D31, V5.D[1] }
        _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v118.f64[0]), _Q25, v118, 1), _Q3, _Q22.f64[0]);
        v129 = _D16 + _Q30.f64[0] * _Q22.f64[0];
        _Q22.f64[0] = *(float64_t *)(a1 + 984);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, _Q10.f64[0]), _Q25, _Q10, 1), _Q3, v120);
        _Q25.f64[0] = _Q10.f64[1];
        __asm { FMLA            D3, D25, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _Q30.f64[0] * v120;
        __asm { FMLA            D30, D22, V11.D[1] }
        v131 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
        __asm { FMLA            D10, D22, V18.D[1] }
        _Q31.f64[0] = v326.f64[0];
        v83.i64[0] = *(_QWORD *)&v323[8];
        __asm { FMLA            D18, D22, V17.D[1] }
        *(_QWORD *)&_Q25.f64[0] = v289.i64[0];
        *(_QWORD *)&_Q25.f64[1] = v286;
        *(_QWORD *)&_Q22.f64[0] = v292.i64[0];
        *(_QWORD *)&_Q22.f64[1] = v287;
        v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q11.f64[0]), (float64x2_t)xmmword_2102DD520, _Q11, 1), (float64x2_t)0, v126);
        v81 = vmlaq_n_f64(v131, (float64x2_t)0, v129);
        v93 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q17.f64[0]), (float64x2_t)xmmword_2102DD520, _Q17, 1), (float64x2_t)0, _Q3.f64[0]);
        v133 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v132.f64[0]), _Q25, v132, 1);
        v134 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v81.f64[0]), _Q25, v81, 1);
        v135 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v93.f64[0]), _Q25, v93, 1);
        v93.f64[0] = v126 + _Q30.f64[0];
        v136 = v129 + _Q10.f64[0];
        _Q3.f64[0] = _Q3.f64[0] + _Q18.f64[0];
        v137.f64[0] = v290;
        *(_QWORD *)&v137.f64[1] = v288;
        v76 = v275;
        v138 = vmlaq_n_f64(v133, v137, v93.f64[0]);
        v93.f64[0] = v328.f64[0];
        v81.f64[0] = v276;
        *a5 = v138;
        a5[1] = vmlaq_n_f64(v134, v137, v136);
        v68 = v273;
        v84 = v274;
        a5[2] = vmlaq_n_f64(v135, v137, _Q3.f64[0]);
      }
      if (a6)
      {
        v139.f64[0] = 0.0;
        v139.f64[1] = v333;
        *(_QWORD *)&_Q21.f64[1] = v68.i64[0];
        *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
        v140 = vaddq_f64(v44, _Q21);
        v141 = vaddq_f64(v35, v64);
        v75.f64[1] = v76.f64[0];
        v142.i64[1] = v280.i64[1];
        *(_QWORD *)&v78.f64[1] = v280.i64[0];
        v142.i64[0] = *(_QWORD *)(a1 + 920);
        v143 = vmlaq_n_f64(vmulq_n_f64(v75, *(double *)v83.i64), v78, v84);
        _Q21.f64[0] = v77 * *(double *)v83.i64 + v277 * v84;
        v144 = vmlaq_n_f64(vmulq_n_f64(v75, _Q31.f64[0]), v78, v86.f64[0]);
        v145 = v77 * _Q31.f64[0] + v277 * v86.f64[0];
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v75, *(double *)v87.i64), v78, v88);
        v68.i64[0] = *(_QWORD *)(a1 + 944);
        v147 = *(float64x2_t *)(a1 + 928);
        v148 = v77 * *(double *)v87.i64 + v277 * v88;
        v76.f64[0] = *(float64_t *)(a1 + 968);
        *(_QWORD *)&v149.f64[0] = v278.i64[0];
        v150 = v92;
        _Q20 = *(float64x2_t *)(a1 + 952);
        v80.f64[1] = v81.f64[0];
        v152 = (float64x2_t)vzip1q_s64(*v30, (int64x2_t)v147);
        v153 = vmlaq_n_f64(v143, v80, v89);
        _Q21.f64[0] = _Q21.f64[0] + v82 * v89;
        v154 = (float64x2_t)vextq_s8((int8x16_t)_Q20, v142, 8uLL);
        v155 = vmlaq_n_f64(v144, v80, v90);
        v78.f64[0] = v145 + v82 * v90;
        v156 = (float64x2_t)vzip2q_s64(*v30, (int64x2_t)v147);
        v86.f64[0] = v148 + v82 * v150;
        *(_QWORD *)&v93.f64[1] = v94;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v80, v150), v93);
        _D29 = *(_QWORD *)(a1 + 912);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(a1 + 936);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(a1 + 960);
        __asm { FMLA            D30, D31, V27.D[1] }
        v162 = (float64x2_t)vextq_s8((int8x16_t)v154, v68, 8uLL);
        v163 = vmulq_f64(v141, v154);
        v164 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v156, v141.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v68), v140, 1);
        v165 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v140, v76.f64[0]), v141, _Q20);
        v166 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v162, v140.f64[0]), v152, v141.f64[0], 0);
        *(_QWORD *)&v167.f64[0] = v279.i64[0];
        v167.f64[1] = v282;
        v149.f64[1] = v281;
        v168 = (int64x2_t)vaddq_f64(v153, v167);
        v169 = (int64x2_t)vaddq_f64(v155, v149);
        v170 = (float64x2_t)vzip1q_s64(v168, v169);
        v171 = (float64x2_t)vzip2q_s64(v168, v169);
        v172 = vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)v30->i64), v171, *(float64x2_t *)v30, 1);
        v173 = vmlaq_laneq_f64(vmulq_n_f64(v170, v147.f64[0]), v171, v147, 1);
        v174 = vmlaq_laneq_f64(vmulq_n_f64(v170, _Q20.f64[0]), v171, _Q20, 1);
        v175 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v140, 1), v140, _Q20, 1);
        v176 = vmlsq_lane_f64(vmulq_laneq_f64(v152, v140, 1), v156, v140.f64[0], 0);
        v177 = (int64x2_t)vmlsq_laneq_f64(v163, v76, v140, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v86, v283);
        v178 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v285), (int64x2_t)vaddq_f64(v78, v284));
        _Q4 = vmlaq_n_f64(v172, v178, *(double *)v142.i64);
        v180 = vmlad_n_f64(_D22, *(double *)v142.i64, _Q20.f64[0]);
        _Q5 = v332;
        v182 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v333);
        _Q7 = vmlaq_n_f64(v173, v178, *(double *)v68.i64);
        v184 = vmlad_n_f64(_D29, *(double *)v68.i64, _Q20.f64[0]);
        v185 = vnegq_f64(v332);
        _Q6 = vmlaq_n_f64(v174, v178, v76.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v76.f64[0], _Q20.f64[0]);
        v187 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q4.f64[0]), (float64x2_t)v182, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v189 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q7.f64[0]), (float64x2_t)v182, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v190 = vmlaq_laneq_f64(vmulq_n_f64(v139, _Q6.f64[0]), (float64x2_t)v182, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v192 = (float64x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v185, 8uLL);
        _Q7.f64[0] = _D18 + v180 * 0.0;
        v185.f64[0] = _Q20.f64[0] + v184 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v164, v166), vmlaq_n_f64(v187, v192, v180));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v176, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v164, v166), vmlaq_n_f64(v189, v192, v184));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v176, 1), v185);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v177, v165), vmlaq_n_f64(v190, v192, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v175, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
    return v28;
  }
  sub_20EB2BB94(&v316);
  if (**(int **)(v316 + 56) > 2)
    return v28;
  v53 = *(unsigned __int8 *)(v316 + 72);
  v54 = *(_BYTE *)(v316 + 72) != 0;
  v55 = sub_20E8C31DC(v316, "OSLogSurrogateAppender", 1, 0);
  if (((v55 == 0) & ~v54) != 0)
    return v28;
  sub_20E863438((uint64_t)&v304);
  v56 = sub_20E86A980(&v305, (uint64_t)"failed to unproject: xd=", 24);
  v57 = sub_20EB31B20(v56, *(__n128 *)a3);
  v58 = sub_20E86A980(v57, (uint64_t)", xc=", 5);
  *(_QWORD *)v343 = &v334;
  sub_20EB1A104(v58, (__int128 **)v343);
  if ((v314 & 0x10) != 0)
  {
    v193 = v313;
    if (v313 < v310)
    {
      v313 = v310;
      v193 = v310;
    }
    v194 = (const void **)&v309;
  }
  else
  {
    if ((v314 & 8) == 0)
    {
      v59 = 0;
      HIBYTE(v303) = 0;
      v60 = __dst;
      goto LABEL_40;
    }
    v194 = (const void **)&v307;
    v193 = *((_QWORD *)&v308 + 1);
  }
  v195 = *v194;
  v59 = v193 - (_QWORD)*v194;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v59 >= 0x17)
  {
    v196 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v196 = v59 | 7;
    v197 = v196 + 1;
    v60 = (void **)operator new(v196 + 1);
    __dst[1] = (void *)v59;
    v303 = v197 | 0x8000000000000000;
    __dst[0] = v60;
    goto LABEL_39;
  }
  HIBYTE(v303) = v193 - *(_BYTE *)v194;
  v60 = __dst;
  if (v59)
LABEL_39:
    memmove(v60, v195, v59);
LABEL_40:
  *((_BYTE *)v60 + v59) = 0;
  *(_QWORD *)&v294.f64[0] = &v316;
  *(std::chrono::steady_clock::time_point *)&v294.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v296 = 2;
  v297 = "unknown file";
  v298 = 685;
  v300 = 0;
  v301 = 0;
  v299 = "unknown function";
  if (v303 >= 0)
    v198 = (const char *)__dst;
  else
    v198 = (const char *)__dst[0];
  v199 = **(_QWORD **)&v294.f64[0];
  v200 = (const char *)(**(_QWORD **)&v294.f64[0] + 16);
  v293 = v200;
  v291 = **(_QWORD **)&v294.f64[0];
  if (*(char *)(**(_QWORD **)&v294.f64[0] + 39) < 0)
  {
    v200 = *(const char **)(v199 + 16);
    v201 = *(_QWORD *)(v199 + 24);
  }
  else
  {
    v201 = *(unsigned __int8 *)(**(_QWORD **)&v294.f64[0] + 39);
  }
  v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v343);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v343);
    if (v344.i8[0] && (v343[23] & 0x80000000) != 0)
      operator delete(*(void **)v343);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v203 = byte_254A4A4F8;
  else
    v203 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v204 = byte_254A4A4F8[23];
  else
    v204 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v343 = os_log_create(v203, v200);
  v205 = &v343[8];
  if (v204 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v204 >= 0x17)
  {
    v206 = v53;
    v207 = v55;
    v208 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v204 | 7) != 0x17)
      v208 = v204 | 7;
    v209 = v208 + 1;
    v205 = operator new(v208 + 1);
    *(_QWORD *)&v343[16] = v204;
    v344.i64[0] = v209 | 0x8000000000000000;
    *(_QWORD *)&v343[8] = v205;
    v55 = v207;
    v53 = v206;
    goto LABEL_60;
  }
  v344.i8[7] = v204;
  if (v204)
LABEL_60:
    memmove(v205, v203, v204);
  v205[v204] = 0;
  v344.i8[8] = 1;
  v210 = v345;
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v201 >= 0x17)
  {
    v211 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v211 = v201 | 7;
    v212 = v211 + 1;
    v210 = (void **)operator new(v211 + 1);
    v345[1] = (void *)v201;
    v346 = v212 | 0x8000000000000000;
    v345[0] = v210;
    goto LABEL_68;
  }
  HIBYTE(v346) = v201;
  if (v201)
LABEL_68:
    memmove(v210, v200, v201);
  *((_BYTE *)v210 + v201) = 0;
  v347 = 1;
  v213 = *(NSObject **)v343;
  if (SHIBYTE(v346) < 0)
    operator delete(v345[0]);
  if (v344.i8[8] && v344.i8[7] < 0)
    operator delete(*(void **)&v343[8]);
  if (*(_QWORD *)v343)
    os_release(*(void **)v343);
  if (!v55 || !*(_QWORD *)(v55 + 24))
  {
    os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v343 = 136315138;
    *(_QWORD *)&v343[4] = v198;
    v220 = (void *)_os_log_send_and_compose_impl();
    if (v220)
      free(v220);
    goto LABEL_148;
  }
  v214 = _os_log_pack_size();
  v215 = (std::__shared_weak_count_vtbl *)operator new(v214, (std::align_val_t)8uLL);
  v216 = (std::__shared_weak_count *)operator new();
  v216->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v216->__shared_owners_ = 0;
  v216->__shared_weak_owners_ = 0;
  v216[1].__vftable = v215;
  *(_QWORD *)&v336 = v215;
  *((_QWORD *)&v336 + 1) = v215;
  v339 = 0;
  v337 = v216;
  v338 = 0;
  v217 = strlen(v198);
  if (v217 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v218 = v217;
  if (v217 >= 0x17)
  {
    v221 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17)
      v221 = v217 | 7;
    v222 = v221 + 1;
    v219 = operator new(v221 + 1);
    *((_QWORD *)&v341 + 1) = v222 | 0x8000000000000000;
    v340 = v219;
    *(_QWORD *)&v341 = v218;
    goto LABEL_87;
  }
  HIBYTE(v341) = v217;
  v219 = &v340;
  if (v217)
LABEL_87:
    memcpy(v219, v198, v218);
  *((_BYTE *)v219 + v218) = 0;
  v223 = v340;
  v348[0] = v341;
  *(_QWORD *)((char *)v348 + 7) = *(_QWORD *)((char *)&v341 + 7);
  v224 = HIBYTE(v341);
  v225 = operator new(0x38uLL);
  v225[1] = 0;
  v225[2] = 0;
  v225[3] = off_24C9ABC20;
  *v225 = &off_24C9ABBD0;
  v226 = v348[0];
  v225[4] = v223;
  v225[5] = v226;
  *(_QWORD *)((char *)v225 + 47) = *(_QWORD *)((char *)v348 + 7);
  *((_BYTE *)v225 + 55) = v224;
  v348[0] = 0;
  *(_QWORD *)((char *)v348 + 7) = 0;
  v227 = (std::__shared_weak_count *)v339;
  v338 = (char *)(v225 + 3);
  v339 = (uint64_t)v225;
  if (v227)
  {
    p_shared_owners = (unint64_t *)&v227->__shared_owners_;
    do
      v229 = __ldaxr(p_shared_owners);
    while (__stlxr(v229 - 1, p_shared_owners));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  *(_OWORD *)v343 = v336;
  v230 = v338;
  *(_QWORD *)&v343[16] = v337;
  if (v337)
  {
    v231 = (unint64_t *)&v337->__shared_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  v233 = (std::__shared_weak_count *)v339;
  v344.i64[0] = (uint64_t)v230;
  v344.i64[1] = v339;
  if (v339)
  {
    v234 = (unint64_t *)(v339 + 8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    v345[0] = v230;
    do
      v236 = __ldaxr(v234);
    while (__stlxr(v236 - 1, v234));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  else
  {
    v345[0] = v230;
  }
  v237 = v337;
  if (v337)
  {
    v238 = (unint64_t *)&v337->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = *(_QWORD *)v343;
  if (*((char *)v345[0] + 31) >= 0)
    v241 = (char *)v345[0] + 8;
  else
    v241 = (char *)*((_QWORD *)v345[0] + 1);
  v242 = _os_log_pack_fill();
  *(_DWORD *)v242 = 136315138;
  *(_QWORD *)(v242 + 4) = v241;
  v243 = operator new();
  v244 = *(unsigned __int8 *)(v291 + 39);
  v245 = *(const char **)(v291 + 16);
  v246 = *(_QWORD *)(v291 + 24);
  v247 = v344;
  *(_OWORD *)(v243 + 8) = *(_OWORD *)&v343[8];
  if ((v244 & 0x80u) != 0)
    v244 = v246;
  else
    v245 = v293;
  *(_QWORD *)v243 = v240;
  *(_QWORD *)&v343[8] = 0;
  *(_QWORD *)&v343[16] = 0;
  *(int64x2_t *)(v243 + 24) = v247;
  v344 = 0uLL;
  *(_QWORD *)(v243 + 40) = v245;
  *(_QWORD *)(v243 + 48) = v244;
  *(_BYTE *)(v243 + 56) = 2;
  v340 = 0;
  *(_QWORD *)&v336 = v243;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v55 + 24) + 40))(*(_QWORD *)(v55 + 24), &v336);
  v248 = v336;
  *(_QWORD *)&v336 = 0;
  if (v248)
  {
    v249 = *(std::__shared_weak_count **)(v248 + 32);
    if (v249)
    {
      v250 = (unint64_t *)&v249->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    v252 = *(std::__shared_weak_count **)(v248 + 16);
    if (v252)
    {
      v253 = (unint64_t *)&v252->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    MEMORY[0x212BC6398](v248, 0x10F0C40B62ED6C6);
    v255 = v340;
    v340 = 0;
    if (v255)
    {
      v256 = (std::__shared_weak_count *)v255[4];
      if (v256)
      {
        v257 = (unint64_t *)&v256->__shared_owners_;
        do
          v258 = __ldaxr(v257);
        while (__stlxr(v258 - 1, v257));
        if (!v258)
        {
          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
          std::__shared_weak_count::__release_weak(v256);
        }
      }
      v259 = (std::__shared_weak_count *)v255[2];
      if (v259)
      {
        v260 = (unint64_t *)&v259->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      MEMORY[0x212BC6398](v255, 0x10F0C40B62ED6C6);
    }
  }
  v262 = (std::__shared_weak_count *)v344.i64[1];
  if (v344.i64[1])
  {
    v263 = (unint64_t *)(v344.i64[1] + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = *(std::__shared_weak_count **)&v343[16];
  if (*(_QWORD *)&v343[16])
  {
    v266 = (unint64_t *)(*(_QWORD *)&v343[16] + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
LABEL_148:
  if (v53)
  {
    v268 = (const char *)__dst;
    if (v303 < 0)
      v268 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v294, "%s", v268);
    sub_20E863570((uint64_t)&v294);
  }
  sub_20E863570((uint64_t)&v294);
  v269 = v301;
  if (v301)
  {
    v270 = (unint64_t *)&v301->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (SHIBYTE(v303) < 0)
    operator delete(__dst[0]);
  v304.i64[0] = *MEMORY[0x24BEDB7F0];
  v272 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v304.i64 + *(_QWORD *)(v304.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v305 = v272;
  *(_QWORD *)&v306 = MEMORY[0x24BEDB848] + 16;
  if (v312 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v315);
  return v28;
}

void sub_20EB3E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  char a70;
  uint64_t v70;

  if (*(_BYTE *)(v70 - 232) && *(char *)(v70 - 233) < 0)
    operator delete(*(void **)(v70 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a55);
  if (a69 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a70);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3E39C(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  double v8;
  const double *v15;
  float64x2_t v17;
  double v18;
  uint64_t result;
  double v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  size_t v25;
  void **v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  _QWORD v108[3];
  int v109;
  const char *v110;
  int v111;
  const char *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *__dst[2];
  int64_t v116;
  float64x2_t v117;
  _QWORD v118[3];
  const void *v119;
  uint64_t v120;
  const void *v121;
  unint64_t v122;
  void *__p;
  char v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  float64x2_t v129;
  double v130;
  char v131;
  float64x2_t v132;
  double v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  char *v136;
  std::__shared_weak_count *v137;
  _QWORD *v138;
  __int128 v139;
  _BYTE v140[24];
  __int128 v141;
  void *v142[2];
  unint64_t v143;
  char v144;
  _QWORD v145[5];
  float64x2x3_t v146;

  v145[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 904;
  _D2 = *(_QWORD *)(a1 + 944);
  v7 = *(double *)(a1 + 968);
  v8 = a3[1].f64[0];
  _Q7 = *a3;
  __asm { FMLA            D0, D2, V7.D[1] }
  v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), a3->f64[0]), *(float64x2_t *)(a1 + 928), *a3, 1), *(float64x2_t *)(a1 + 952), v8);
  v133 = _D0 + v7 * v8;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 888), (uint64_t)&v132, 30, 0, 0, &v129, 0.00000001, v132);
  if (!v131)
  {
    sub_20EB2BB94(&v128);
    if (**(int **)(v128 + 56) > 2)
      return 0;
    v21 = *(unsigned __int8 *)(v128 + 72);
    v22 = *(_BYTE *)(v128 + 72) != 0;
    v23 = sub_20E8C31DC(v128, "OSLogSurrogateAppender", 1, 0);
    if (((v23 == 0) & ~v22) != 0)
      return 0;
    sub_20E863438((uint64_t)&v117);
    v24 = sub_20E86A980(v118, (uint64_t)"failed to project: xc=", 22);
    *(_QWORD *)v140 = &v132;
    sub_20EB32EA4(v24, (__int128 **)v140);
    if ((v126 & 0x10) != 0)
    {
      v27 = v125;
      if (v125 < v122)
      {
        v125 = v122;
        v27 = v122;
      }
      v28 = v121;
      v25 = v27 - (_QWORD)v121;
      if (v27 - (unint64_t)v121 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_65;
    }
    else
    {
      if ((v126 & 8) == 0)
      {
        v25 = 0;
        HIBYTE(v116) = 0;
        v26 = __dst;
        goto LABEL_20;
      }
      v28 = v119;
      v25 = v120 - (_QWORD)v119;
      if ((unint64_t)(v120 - (_QWORD)v119) > 0x7FFFFFFFFFFFFFF7)
LABEL_65:
        sub_20E860B7C();
    }
    if (v25 >= 0x17)
    {
      v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v29 = v25 | 7;
      v30 = v29 + 1;
      v26 = (void **)operator new(v29 + 1);
      __dst[1] = (void *)v25;
      v116 = v30 | 0x8000000000000000;
      __dst[0] = v26;
    }
    else
    {
      HIBYTE(v116) = v25;
      v26 = __dst;
      if (!v25)
      {
LABEL_20:
        *((_BYTE *)v26 + v25) = 0;
        v108[0] = &v128;
        v108[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v108[2] = std::chrono::system_clock::now().__d_.__rep_;
        v109 = 2;
        v110 = "unknown file";
        v111 = 727;
        v113 = 0;
        v114 = 0;
        v112 = "unknown function";
        if (v116 >= 0)
          v31 = (const char *)__dst;
        else
          v31 = (const char *)__dst[0];
        v32 = *(_QWORD *)v108[0];
        v33 = (const char *)(*(_QWORD *)v108[0] + 16);
        v106 = *(_QWORD *)v108[0];
        v107 = v33;
        if (*(char *)(*(_QWORD *)v108[0] + 39) < 0)
        {
          v33 = *(const char **)(v32 + 16);
          v34 = *(_QWORD *)(v32 + 24);
          v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v36 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)v108[0] + 39);
          v35 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v35 & 1) != 0)
            goto LABEL_27;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v140);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v140);
          if ((_BYTE)v141 && (v140[23] & 0x80000000) != 0)
            operator delete(*(void **)v140);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_27:
        if (byte_254A4A4F8[23] >= 0)
          v37 = byte_254A4A4F8;
        else
          v37 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v38 = byte_254A4A4F8[23];
        else
          v38 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v140 = os_log_create(v37, v33);
        v39 = &v140[8];
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v38 >= 0x17)
        {
          v40 = v21;
          v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v41 = v38 | 7;
          v42 = v41 + 1;
          v39 = operator new(v41 + 1);
          *(_QWORD *)&v140[16] = v38;
          *(_QWORD *)&v141 = v42 | 0x8000000000000000;
          *(_QWORD *)&v140[8] = v39;
          v21 = v40;
        }
        else
        {
          BYTE7(v141) = v38;
          if (!v38)
          {
LABEL_41:
            v39[v38] = 0;
            BYTE8(v141) = 1;
            v43 = v142;
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              v43 = (void **)operator new(v44 + 1);
              v142[1] = (void *)v34;
              v143 = v45 | 0x8000000000000000;
              v142[0] = v43;
            }
            else
            {
              HIBYTE(v143) = v34;
              if (!v34)
              {
LABEL_49:
                *((_BYTE *)v43 + v34) = 0;
                v144 = 1;
                v46 = *(NSObject **)v140;
                if (SHIBYTE(v143) < 0)
                  operator delete(v142[0]);
                if (BYTE8(v141) && SBYTE7(v141) < 0)
                  operator delete(*(void **)&v140[8]);
                if (*(_QWORD *)v140)
                  os_release(*(void **)v140);
                if (!v23 || !*(_QWORD *)(v23 + 24))
                {
                  os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v140 = 136315138;
                  *(_QWORD *)&v140[4] = v31;
                  v53 = (void *)_os_log_send_and_compose_impl();
                  if (v53)
                    free(v53);
                  goto LABEL_130;
                }
                v47 = _os_log_pack_size();
                v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
                v49 = (std::__shared_weak_count *)operator new();
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v49->__shared_owners_ = 0;
                v49->__shared_weak_owners_ = 0;
                v49[1].__vftable = v48;
                *(_QWORD *)&v134 = v48;
                *((_QWORD *)&v134 + 1) = v48;
                v136 = 0;
                v137 = 0;
                v135 = v49;
                v50 = strlen(v31);
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v51 = v50;
                if (v50 >= 0x17)
                {
                  v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v54 = v50 | 7;
                  v55 = v54 + 1;
                  v52 = operator new(v54 + 1);
                  *(_QWORD *)&v139 = v51;
                  *((_QWORD *)&v139 + 1) = v55 | 0x8000000000000000;
                  v138 = v52;
                }
                else
                {
                  HIBYTE(v139) = v50;
                  v52 = &v138;
                  if (!v50)
                  {
LABEL_70:
                    *((_BYTE *)v52 + v51) = 0;
                    v56 = v138;
                    v145[0] = v139;
                    *(_QWORD *)((char *)v145 + 7) = *(_QWORD *)((char *)&v139 + 7);
                    v57 = HIBYTE(v139);
                    v58 = operator new(0x38uLL);
                    v58[1] = 0;
                    v58[2] = 0;
                    v58[3] = off_24C9ABC20;
                    *v58 = &off_24C9ABBD0;
                    v59 = v145[0];
                    v58[4] = v56;
                    v58[5] = v59;
                    *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)v145 + 7);
                    *((_BYTE *)v58 + 55) = v57;
                    v145[0] = 0;
                    *(_QWORD *)((char *)v145 + 7) = 0;
                    v60 = v137;
                    v136 = (char *)(v58 + 3);
                    v137 = (std::__shared_weak_count *)v58;
                    if (v60)
                    {
                      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
                      do
                        v62 = __ldaxr(p_shared_owners);
                      while (__stlxr(v62 - 1, p_shared_owners));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                    *(_OWORD *)v140 = v134;
                    v63 = v136;
                    *(_QWORD *)&v140[16] = v135;
                    if (v135)
                    {
                      v64 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v65 = __ldxr(v64);
                      while (__stxr(v65 + 1, v64));
                    }
                    v66 = v137;
                    *(_QWORD *)&v141 = v63;
                    *((_QWORD *)&v141 + 1) = v137;
                    if (v137)
                    {
                      v67 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v68 = __ldxr(v67);
                      while (__stxr(v68 + 1, v67));
                      v142[0] = v63;
                      do
                        v69 = __ldaxr(v67);
                      while (__stlxr(v69 - 1, v67));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                    }
                    else
                    {
                      v142[0] = v63;
                    }
                    v70 = v135;
                    if (v135)
                    {
                      v71 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                    v73 = *(_QWORD *)v140;
                    if (*((char *)v142[0] + 31) >= 0)
                      v74 = (char *)v142[0] + 8;
                    else
                      v74 = (char *)*((_QWORD *)v142[0] + 1);
                    v75 = _os_log_pack_fill();
                    *(_DWORD *)v75 = 136315138;
                    *(_QWORD *)(v75 + 4) = v74;
                    v76 = operator new();
                    v77 = *(unsigned __int8 *)(v106 + 39);
                    v78 = *(const char **)(v106 + 16);
                    v79 = *(_QWORD *)(v106 + 24);
                    v80 = v141;
                    *(_OWORD *)(v76 + 8) = *(_OWORD *)&v140[8];
                    if ((v77 & 0x80u) != 0)
                      v77 = v79;
                    else
                      v78 = v107;
                    *(_QWORD *)v76 = v73;
                    *(_QWORD *)&v140[8] = 0;
                    *(_QWORD *)&v140[16] = 0;
                    *(_OWORD *)(v76 + 24) = v80;
                    v141 = 0uLL;
                    *(_QWORD *)(v76 + 40) = v78;
                    *(_QWORD *)(v76 + 48) = v77;
                    *(_BYTE *)(v76 + 56) = 2;
                    v138 = 0;
                    *(_QWORD *)&v134 = v76;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), &v134);
                    v81 = v134;
                    *(_QWORD *)&v134 = 0;
                    if (v81)
                    {
                      v82 = *(std::__shared_weak_count **)(v81 + 32);
                      if (v82)
                      {
                        v83 = (unint64_t *)&v82->__shared_owners_;
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      v85 = *(std::__shared_weak_count **)(v81 + 16);
                      if (v85)
                      {
                        v86 = (unint64_t *)&v85->__shared_owners_;
                        do
                          v87 = __ldaxr(v86);
                        while (__stlxr(v87 - 1, v86));
                        if (!v87)
                        {
                          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                          std::__shared_weak_count::__release_weak(v85);
                        }
                      }
                      MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
                      v88 = v138;
                      v138 = 0;
                      if (v88)
                      {
                        v89 = (std::__shared_weak_count *)v88[4];
                        if (v89)
                        {
                          v90 = (unint64_t *)&v89->__shared_owners_;
                          do
                            v91 = __ldaxr(v90);
                          while (__stlxr(v91 - 1, v90));
                          if (!v91)
                          {
                            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                            std::__shared_weak_count::__release_weak(v89);
                          }
                        }
                        v92 = (std::__shared_weak_count *)v88[2];
                        if (v92)
                        {
                          v93 = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldaxr(v93);
                          while (__stlxr(v94 - 1, v93));
                          if (!v94)
                          {
                            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                            std::__shared_weak_count::__release_weak(v92);
                          }
                        }
                        MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
                      }
                    }
                    v95 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                    if (*((_QWORD *)&v141 + 1))
                    {
                      v96 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                    v98 = *(std::__shared_weak_count **)&v140[16];
                    if (*(_QWORD *)&v140[16])
                    {
                      v99 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 - 1, v99));
                      if (!v100)
                      {
                        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                        std::__shared_weak_count::__release_weak(v98);
                      }
                    }
LABEL_130:
                    if (v21)
                    {
                      v101 = (const char *)__dst;
                      if (v116 < 0)
                        v101 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v108, "%s", v101);
                      sub_20E863570((uint64_t)v108);
                    }
                    sub_20E863570((uint64_t)v108);
                    v102 = v114;
                    if (v114)
                    {
                      v103 = (unint64_t *)&v114->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    if (SHIBYTE(v116) < 0)
                      operator delete(__dst[0]);
                    v117.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                    v105 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(float64_t *)((char *)v117.f64 + *(_QWORD *)(*(_QWORD *)&v117.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                    v118[0] = v105;
                    v118[1] = MEMORY[0x24BEDB848] + 16;
                    if (v124 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v127);
                    return 0;
                  }
                }
                memcpy(v52, v31, v51);
                goto LABEL_70;
              }
            }
            memmove(v43, v33, v34);
            goto LABEL_49;
          }
        }
        memmove(v39, v37, v38);
        goto LABEL_41;
      }
    }
    memmove(v26, v28, v25);
    goto LABEL_20;
  }
  v15 = (const double *)v5;
  v146 = vld3q_f64(v15);
  v15 += 6;
  _Q5 = *(_OWORD *)v15;
  v17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v146.val[0], v129.f64[0]), v146.val[1], v129, 1), v146.val[2], v130);
  v146.val[1].f64[0] = v129.f64[1];
  __asm { FMLA            D1, D2, V5.D[1] }
  v18 = v146.val[0].f64[0] + *(double *)(v5 + 64) * v130;
  v117 = v17;
  *(double *)v118 = v18;
  if (v18 < 0.0)
    return 0;
  v117 = vsubq_f64(v17, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v18));
  result = sub_20EB247C0(a2, (uint64_t)&v117, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
  if ((_DWORD)result)
  {
    v20 = a2->f64[1];
    a2->f64[0] = *(double *)(a1 + 976) + a2->f64[0];
    a2->f64[1] = *(double *)(a1 + 984) + v20;
    return 1;
  }
  return result;
}

void sub_20EB3EEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB3F050(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  uint64_t v9;
  double v11;
  float64x2_t v13;
  float64x2_t v19;
  float64_t v20;
  int64x2_t v21;
  float64_t v22;
  int64x2_t v23;
  double v24;
  float64x2_t v27;
  double v29;
  uint64_t result;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  double v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v53;
  uint64_t v56;
  uint64_t v58;
  float64x2_t v60;
  double v62;
  const double *v63;
  float64x2_t v64;
  double v65;
  float64x2_t v67;
  float64x2_t v70;
  float64x2_t v71;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  int64x2_t v80;
  float64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  int8x16_t v107;
  double v108;
  int8x16_t v109;
  double v110;
  int8x16_t v111;
  double v112;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  double v121;
  char v122;
  int64x2_t v123;
  float64_t v124;
  int64x2_t v125;
  float64_t v126;
  __int128 v127;
  double v128;
  float64x2_t v129;
  double v130;
  float64x2x3_t v131;

  v9 = a1 + 904;
  _D2 = *(_QWORD *)(a1 + 944);
  v11 = a4[1].f64[0];
  _Q7 = *a4;
  v13 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), a4->f64[0]), *(float64x2_t *)(a1 + 928), *a4, 1), *(float64x2_t *)(a1 + 952), v11);
  __asm { FMLA            D0, D2, V7.D[1] }
  v130 = _D0 + *(double *)(a1 + 968) * v11;
  v129 = v13;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 888), (uint64_t)&v129, 30, (uint64_t)&v123, 0, &v120, 0.00000001, v13);
  if (!v122)
    return 0;
  v19.f64[0] = v121;
  v20 = *(double *)(v9 + 16);
  v21 = *(int64x2_t *)v9;
  v22 = *(double *)(v9 + 40);
  v23 = *(int64x2_t *)(v9 + 24);
  v24 = *(double *)(v9 + 64);
  _Q6 = *(int8x16_t *)(v9 + 48);
  _Q1.f64[0] = v20;
  _Q1.f64[1] = v22;
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v9, v23), v120.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, v23), v120, 1), _Q1, v121);
  _D2 = v120.f64[1];
  __asm { FMLA            D1, D2, V6.D[1] }
  v29 = _Q1.f64[0] + v24 * v121;
  v119 = v29;
  v118 = v27;
  if (v29 < 0.0)
    return 0;
  v107 = (int8x16_t)v21;
  v108 = v20;
  v109 = (int8x16_t)v23;
  v110 = v22;
  v111 = _Q6;
  v112 = v24;
  v105 = v19;
  v106 = v120;
  v113 = *(float64x2_t *)(a1 + 976);
  v118 = vsubq_f64(v27, vmulq_n_f64(v113, v29));
  result = sub_20EB2498C(a2, (uint64_t)&v114, 0, (uint64_t)&v118, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
  if ((_DWORD)result)
  {
    *(_QWORD *)&_D1 = vextq_s8(v107, v107, 8uLL).u64[0];
    *(_QWORD *)&_D2 = vextq_s8(v109, v109, 8uLL).u64[0];
    *(_QWORD *)&_D3 = vextq_s8(v111, v111, 8uLL).u64[0];
    _Q23 = v113;
    v35 = a2->f64[1];
    a2->f64[0] = *(double *)(a1 + 976) + a2->f64[0];
    a2->f64[1] = *(double *)(a1 + 984) + v35;
    v36.f64[0] = v124;
    _V17.D[1] = *((_QWORD *)&v127 + 1);
    v38 = (float64x2_t)vzip1q_s64(v123, v125);
    v39 = (float64x2_t)vzip2q_s64(v123, v125);
    v36.f64[1] = v126;
    v40 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v107.i64), v39, _D1), v36, v108);
    __asm { FMLA            D6, D1, V17.D[1] }
    v42 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v109.i64), v39, _D2), v36, v110);
    __asm { FMLA            D1, D2, V17.D[1] }
    v44 = _D1 + v128 * v110;
    v45 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, *(double *)v111.i64), v39, _D3), v36, v112);
    __asm { FMLA            D1, D3, V17.D[1] }
    _D3 = _D1 + v128 * v112;
    v48 = 0uLL;
    v49 = vmulq_f64(v40, (float64x2_t)0);
    v50 = vmlsq_lane_f64(vmlaq_f64(v40, (float64x2_t)0, v42), v45, v113.f64[0], 0);
    _D4 = 0;
    __asm { FMLS            D20, D3, V23.D[0] }
    v53 = vmlsq_lane_f64(vaddq_f64(v42, v49), v45, v113.f64[1], 0);
    __asm { FMLS            D22, D3, V23.D[1] }
    _Q18 = vaddq_f64(v45, vmlaq_f64(v49, (float64x2_t)0, v42));
    v42.f64[0] = _D3 + (_D6 + v128 * v108) * 0.0 + v44 * 0.0;
    *(double *)&v56 = v115;
    _Q5 = (int8x16_t)v114;
    *(double *)&v58 = v117;
    _Q6 = (int8x16_t)v116;
    v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v114.f64[0]), v53, v114, 1), _Q18, v115);
    __asm { FMLA            D17, D22, V5.D[1] }
    v62 = _D17 + v42.f64[0] * v115;
    v63 = (const double *)v9;
    v131 = vld3q_f64(v63);
    v63 += 6;
    v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v116.f64[0]), v53, v116, 1), _Q18, v117);
    __asm { FMLA            D18, D22, V6.D[1] }
    v65 = _Q18.f64[0] + v42.f64[0] * v117;
    v42.f64[0] = *(float64_t *)(v9 + 64);
    _Q20 = *(_OWORD *)v63;
    v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131.val[0], v60.f64[0]), v131.val[1], v60, 1), v131.val[2], v62);
    _D26 = v60.f64[1];
    __asm { FMLA            D22, D26, V20.D[1] }
    v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131.val[0], v64.f64[0]), v131.val[1], v64, 1), v131.val[2], v65);
    v131.val[1].f64[0] = v64.f64[1];
    __asm { FMLA            D23, D24, V20.D[1] }
    *(float64x2_t *)a3 = v67;
    *(double *)(a3 + 16) = _D22 + v42.f64[0] * v62;
    *(float64x2_t *)(a3 + 24) = v70;
    *(double *)(a3 + 40) = v131.val[0].f64[0] + v42.f64[0] * v65;
    if (a5)
    {
      v71 = (float64x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL);
      v67.f64[0] = *(float64_t *)(v9 + 64);
      v72 = *(int8x16_t *)(v9 + 32);
      v73 = *(float64x2_t *)(v9 + 48);
      v75 = *(float64x2_t *)v9;
      _Q23 = *(float64x2_t *)(v9 + 16);
      v76 = (float64x2_t)vextq_s8(*(int8x16_t *)v9, v72, 8uLL);
      v75.f64[1] = *(float64_t *)(v9 + 24);
      v77 = (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)_Q23, 8uLL);
      v78 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v72, 1), (int64x2_t)v67);
      v79 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)v73, 8uLL);
      _Q23.f64[1] = *(float64_t *)(v9 + 40);
      v80 = (int64x2_t)vmlsq_f64(vmulq_f64(v105, v77), v71, v67);
      v81 = (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 8uLL);
      v82 = (int64x2_t)vmlsq_laneq_f64(vmulq_laneq_f64(v106, v78, 1), v105, v79, 1);
      v83 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v81, v106.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(_QWORD *)v9, 0), (int8x16_t)v79, 8uLL), v105.f64[0], 0);
      v84 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v76, v105.f64[0]), _Q23, v71.f64[0], 0);
      _Q24 = vmlsq_lane_f64(vmulq_n_f64(v75, v71.f64[0]), v76, v106.f64[0], 0);
      v71.f64[0] = vmlsq_laneq_f64(vmulq_f64(v71, v73), v106, v73, 1).f64[0];
      *(_QWORD *)&v73.f64[0] = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v130);
      v76.f64[0] = 0.0;
      v76.f64[1] = v130;
      v86 = vmlaq_f64(vmulq_n_f64(v76, v60.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v60, 1), (float64x2_t)*(unint64_t *)&v73.f64[0]);
      v87 = vmlaq_f64(vmulq_n_f64(v76, v64.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v64, 1), (float64x2_t)*(unint64_t *)&v73.f64[0]);
      v88 = vnegq_f64(v129);
      v89 = (float64x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v88, 8uLL);
      v90 = vmlaq_f64(v86, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0), v89);
      v91 = vmlaq_f64(v87, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0), v89);
      v60.f64[0] = vmuld_lane_f64(v60.f64[0], v88, 1)
                 + v129.f64[0] * *(double *)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).i64
                 + v62 * 0.0;
      v92 = vmuld_lane_f64(v64.f64[0], v88, 1);
      v93 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
      v93.f64[0] = v92 + v129.f64[0] * v93.f64[0] + v65 * 0.0;
      v94 = (float64x2_t)vzip1q_s64(v84, v83);
      _Q18 = (float64x2_t)vzip2q_s64(v84, v83);
      v96 = vmulq_f64(v94, (float64x2_t)0);
      v97 = vmlaq_f64(v94, (float64x2_t)0, _Q18);
      __asm { FMLA            D23, D4, V24.D[1] }
      v98 = vaddq_f64(_Q18, v96);
      v99 = vmlaq_f64(v96, (float64x2_t)0, _Q18);
      __asm { FMLA            D18, D4, V24.D[1] }
      v100 = (float64x2_t)vzip1q_s64(v80, v82);
      v101 = vmlaq_f64(v97, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v113.f64[0]), 0), v100);
      v102 = vmlaq_f64(v98, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v113.f64[1]), 0), v100);
      v103 = vaddq_f64(v100, v99);
      _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], -v113.f64[0], v71.f64[0]);
      v48.f64[0] = vmlad_n_f64(_Q24.f64[1] + 0.0 * _Q24.f64[0], -v113.f64[1], v71.f64[0]);
      v104 = (float64x2_t)vextq_s8(_Q5, _Q5, 8uLL);
      v104.f64[0] = _Q23.f64[0] * *(double *)_Q5.i64
                  + v48.f64[0] * v104.f64[0]
                  + (v71.f64[0] + _Q18.f64[0]) * *(double *)&v56;
      v48.f64[0] = _Q23.f64[0] * *(double *)_Q6.i64
                 + v48.f64[0] * *(double *)vextq_s8(_Q6, _Q6, 8uLL).i64
                 + (v71.f64[0] + _Q18.f64[0]) * *(double *)&v58;
      *(_QWORD *)(a5 + 16) = *(_OWORD *)&vaddq_f64(v60, v104);
      *(float64x2_t *)a5 = vaddq_f64(v90, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)_Q5.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q5, 1), v102), (float64x2_t)vdupq_lane_s64(v56, 0), v103));
      *(_QWORD *)(a5 + 40) = *(_OWORD *)&vaddq_f64(v93, v48);
      *(float64x2_t *)(a5 + 24) = vaddq_f64(v91, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)_Q6.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), v102), (float64x2_t)vdupq_lane_s64(v58, 0), v103));
    }
  }
  return result;
}

BOOL sub_20EB3F514(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v6;
  double v8;
  double v9;
  int v16;
  const double *v17;
  double v18;
  float64x2_t v19;
  float64x2_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v110;
  const char *v111;
  unint64_t v112;
  _QWORD v113[3];
  int v114;
  const char *v115;
  int v116;
  const char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *__dst[2];
  int64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *__p;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  __int128 v146;
  _BYTE v147[24];
  __int128 v148;
  void *v149[2];
  unint64_t v150;
  char v151;
  _QWORD v152[5];
  float64x2x3_t v153;
  float64x2x3_t v154;

  v152[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 904;
  _D2 = *(_QWORD *)(a1 + 944);
  v8 = *(double *)(a1 + 968);
  v9 = a4[1].f64[0];
  _Q7 = *a4;
  __asm { FMLA            D0, D2, V7.D[1] }
  v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), a4->f64[0]), *(float64x2_t *)(a1 + 928), *a4, 1), *(float64x2_t *)(a1 + 952), v9);
  v140 = _D0 + v8 * v9;
  v135 = 0uLL;
  v136 = 0.0;
  sub_20EB1CAB8(*(_QWORD *)(a1 + 888), (uint64_t)&v139, 30, 0, (uint64_t)&v135, v122, 0.00000001, v139);
  v16 = v124;
  if ((_BYTE)v124)
  {
    v17 = (const double *)v6;
    v153 = vld3q_f64(v17);
    v17 += 6;
    v18 = v136;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v153.val[0], v137.f64[0]), v153.val[1], v137, 1), v153.val[2], v138);
    v153.val[0] = *(float64x2_t *)v17;
    v153.val[2].f64[0] = v137.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v153.val[0].f64[0] = v153.val[1].f64[0] + *(double *)(v6 + 64) * v138;
    *a2 = v19;
    a2[1].f64[0] = v153.val[0].f64[0];
    v154 = vld3q_f64((const double *)v6);
    _Q4 = *(float64x2_t *)v17;
    v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v154.val[0], v135.f64[0]), v154.val[1], v135, 1), v154.val[2], v18);
    v154.val[1].f64[0] = v135.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    a3[1].f64[0] = v154.val[0].f64[0] + *(double *)(v6 + 64) * v18;
    *a3 = v21;
    return v16 != 0;
  }
  sub_20EB2BB94(&v134);
  if (**(int **)(v134 + 56) <= 2)
  {
    v22 = *(unsigned __int8 *)(v134 + 72);
    v23 = *(_BYTE *)(v134 + 72) != 0;
    v24 = sub_20E8C31DC(v134, "OSLogSurrogateAppender", 1, 0);
    if (((v24 == 0) & ~v23) == 0)
    {
      sub_20E863438((uint64_t)v122);
      v25 = sub_20E86A980(&v123, (uint64_t)"failed to project: xc=", 22);
      *(_QWORD *)v147 = &v139;
      sub_20EB1A104(v25, (__int128 **)v147);
      v112 = v24;
      if ((v132 & 0x10) != 0)
      {
        v28 = v131;
        if (v131 < v128)
        {
          v131 = v128;
          v28 = v128;
        }
        v29 = v127;
        v26 = v28 - (_QWORD)v127;
        if (v28 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_63;
      }
      else
      {
        if ((v132 & 8) == 0)
        {
          v26 = 0;
          HIBYTE(v121) = 0;
          v27 = __dst;
          goto LABEL_18;
        }
        v29 = v125;
        v26 = v126 - (_QWORD)v125;
        if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
          sub_20E860B7C();
      }
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        v27 = (void **)operator new(v30 + 1);
        __dst[1] = (void *)v26;
        v121 = v31 | 0x8000000000000000;
        __dst[0] = v27;
      }
      else
      {
        HIBYTE(v121) = v26;
        v27 = __dst;
        if (!v26)
        {
LABEL_18:
          *((_BYTE *)v27 + v26) = 0;
          v113[0] = &v134;
          v113[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v113[2] = std::chrono::system_clock::now().__d_.__rep_;
          v114 = 2;
          v115 = "unknown file";
          v116 = 838;
          v118 = 0;
          v119 = 0;
          v117 = "unknown function";
          if (v121 >= 0)
            v32 = __dst;
          else
            v32 = (void **)__dst[0];
          v33 = *(_QWORD *)v113[0];
          v34 = (const char *)(*(_QWORD *)v113[0] + 16);
          v110 = *(_QWORD *)v113[0];
          v111 = v34;
          if (*(char *)(*(_QWORD *)v113[0] + 39) < 0)
          {
            v34 = *(const char **)(v33 + 16);
            v35 = *(_QWORD *)(v33 + 24);
            v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v37 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            v35 = *(unsigned __int8 *)(*(_QWORD *)v113[0] + 39);
            v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v36 & 1) != 0)
              goto LABEL_25;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v147);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v147);
            if ((_BYTE)v148 && (v147[23] & 0x80000000) != 0)
              operator delete(*(void **)v147);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_25:
          if (byte_254A4A4F8[23] >= 0)
            v38 = byte_254A4A4F8;
          else
            v38 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v39 = byte_254A4A4F8[23];
          else
            v39 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v147 = os_log_create(v38, v34);
          v40 = &v147[8];
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v41 = v22;
            v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v42 = v39 | 7;
            v43 = v42 + 1;
            v40 = operator new(v42 + 1);
            *(_QWORD *)&v147[16] = v39;
            *(_QWORD *)&v148 = v43 | 0x8000000000000000;
            *(_QWORD *)&v147[8] = v40;
            v22 = v41;
          }
          else
          {
            BYTE7(v148) = v39;
            if (!v39)
            {
LABEL_39:
              v40[v39] = 0;
              BYTE8(v148) = 1;
              v44 = v149;
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v45 = (const char *)v32;
              if (v35 >= 0x17)
              {
                v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v47 = v35 | 7;
                v48 = v47 + 1;
                v46 = v112;
                v44 = (void **)operator new(v47 + 1);
                v149[1] = (void *)v35;
                v150 = v48 | 0x8000000000000000;
                v149[0] = v44;
              }
              else
              {
                HIBYTE(v150) = v35;
                v46 = v112;
                if (!v35)
                {
LABEL_47:
                  *((_BYTE *)v44 + v35) = 0;
                  v151 = 1;
                  v49 = *(NSObject **)v147;
                  if (SHIBYTE(v150) < 0)
                    operator delete(v149[0]);
                  if (BYTE8(v148) && SBYTE7(v148) < 0)
                    operator delete(*(void **)&v147[8]);
                  if (*(_QWORD *)v147)
                    os_release(*(void **)v147);
                  if (!v46 || !*(_QWORD *)(v46 + 24))
                  {
                    os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v147 = 136315138;
                    *(_QWORD *)&v147[4] = v45;
                    v56 = (void *)_os_log_send_and_compose_impl();
                    if (v56)
                      free(v56);
                    goto LABEL_128;
                  }
                  v50 = _os_log_pack_size();
                  v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
                  v52 = (std::__shared_weak_count *)operator new();
                  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v52->__shared_owners_ = 0;
                  v52->__shared_weak_owners_ = 0;
                  v52[1].__vftable = v51;
                  *(_QWORD *)&v141 = v51;
                  *((_QWORD *)&v141 + 1) = v51;
                  v143 = 0;
                  v144 = 0;
                  v142 = v52;
                  v53 = strlen(v45);
                  if (v53 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v54 = v53;
                  if (v53 >= 0x17)
                  {
                    v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v53 | 7) != 0x17)
                      v57 = v53 | 7;
                    v58 = v57 + 1;
                    v55 = operator new(v57 + 1);
                    *(_QWORD *)&v146 = v54;
                    *((_QWORD *)&v146 + 1) = v58 | 0x8000000000000000;
                    v145 = v55;
                  }
                  else
                  {
                    HIBYTE(v146) = v53;
                    v55 = &v145;
                    if (!v53)
                    {
LABEL_68:
                      *((_BYTE *)v55 + v54) = 0;
                      v59 = v145;
                      v152[0] = v146;
                      *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)&v146 + 7);
                      v60 = HIBYTE(v146);
                      v61 = operator new(0x38uLL);
                      v61[1] = 0;
                      v61[2] = 0;
                      v61[3] = off_24C9ABC20;
                      *v61 = &off_24C9ABBD0;
                      v62 = v152[0];
                      v61[4] = v59;
                      v61[5] = v62;
                      *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v152 + 7);
                      *((_BYTE *)v61 + 55) = v60;
                      v152[0] = 0;
                      *(_QWORD *)((char *)v152 + 7) = 0;
                      v63 = v144;
                      v143 = (char *)(v61 + 3);
                      v144 = (std::__shared_weak_count *)v61;
                      if (v63)
                      {
                        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                        do
                          v65 = __ldaxr(p_shared_owners);
                        while (__stlxr(v65 - 1, p_shared_owners));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      *(_OWORD *)v147 = v141;
                      v66 = v143;
                      *(_QWORD *)&v147[16] = v142;
                      if (v142)
                      {
                        v67 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v68 = __ldxr(v67);
                        while (__stxr(v68 + 1, v67));
                      }
                      v69 = v144;
                      *(_QWORD *)&v148 = v66;
                      *((_QWORD *)&v148 + 1) = v144;
                      if (v144)
                      {
                        v70 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                        v149[0] = v66;
                        do
                          v72 = __ldaxr(v70);
                        while (__stlxr(v72 - 1, v70));
                        if (!v72)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      else
                      {
                        v149[0] = v66;
                      }
                      v73 = v142;
                      if (v142)
                      {
                        v74 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = *(_QWORD *)v147;
                      if (*((char *)v149[0] + 31) >= 0)
                        v77 = (char *)v149[0] + 8;
                      else
                        v77 = (char *)*((_QWORD *)v149[0] + 1);
                      v78 = _os_log_pack_fill();
                      *(_DWORD *)v78 = 136315138;
                      *(_QWORD *)(v78 + 4) = v77;
                      v79 = operator new();
                      v80 = *(unsigned __int8 *)(v110 + 39);
                      v81 = *(const char **)(v110 + 16);
                      v82 = *(_QWORD *)(v110 + 24);
                      v83 = v148;
                      *(_OWORD *)(v79 + 8) = *(_OWORD *)&v147[8];
                      if ((v80 & 0x80u) != 0)
                        v80 = v82;
                      else
                        v81 = v111;
                      *(_QWORD *)v79 = v76;
                      *(_QWORD *)&v147[8] = 0;
                      *(_QWORD *)&v147[16] = 0;
                      *(_OWORD *)(v79 + 24) = v83;
                      v148 = 0uLL;
                      *(_QWORD *)(v79 + 40) = v81;
                      *(_QWORD *)(v79 + 48) = v80;
                      *(_BYTE *)(v79 + 56) = 2;
                      v145 = 0;
                      *(_QWORD *)&v141 = v79;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v141);
                      v84 = v141;
                      *(_QWORD *)&v141 = 0;
                      if (v84)
                      {
                        v85 = *(std::__shared_weak_count **)(v84 + 32);
                        if (v85)
                        {
                          v86 = (unint64_t *)&v85->__shared_owners_;
                          do
                            v87 = __ldaxr(v86);
                          while (__stlxr(v87 - 1, v86));
                          if (!v87)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                        }
                        v88 = *(std::__shared_weak_count **)(v84 + 16);
                        if (v88)
                        {
                          v89 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
                        v91 = v145;
                        v145 = 0;
                        if (v91)
                        {
                          v92 = (std::__shared_weak_count *)v91[4];
                          if (v92)
                          {
                            v93 = (unint64_t *)&v92->__shared_owners_;
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = (std::__shared_weak_count *)v91[2];
                          if (v95)
                          {
                            v96 = (unint64_t *)&v95->__shared_owners_;
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                        }
                      }
                      v98 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                      if (*((_QWORD *)&v148 + 1))
                      {
                        v99 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v101 = *(std::__shared_weak_count **)&v147[16];
                      if (*(_QWORD *)&v147[16])
                      {
                        v102 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
LABEL_128:
                      if (v22)
                      {
                        v104 = (const char *)__dst;
                        if (v121 < 0)
                          v104 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v113, "%s", v104);
                        sub_20E863570((uint64_t)v113);
                      }
                      sub_20E863570((uint64_t)v113);
                      v105 = v119;
                      if (v119)
                      {
                        v106 = (unint64_t *)&v119->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (SHIBYTE(v121) < 0)
                        operator delete(__dst[0]);
                      v122[0] = *MEMORY[0x24BEDB7F0];
                      v108 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v122 + *(_QWORD *)(v122[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v123 = v108;
                      v124 = MEMORY[0x24BEDB848] + 16;
                      if (v130 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v133);
                      return v16 != 0;
                    }
                  }
                  memcpy(v55, v45, v54);
                  goto LABEL_68;
                }
              }
              memmove(v44, v34, v35);
              goto LABEL_47;
            }
          }
          memmove(v40, v38, v39);
          goto LABEL_39;
        }
      }
      memmove(v27, v29, v26);
      goto LABEL_18;
    }
  }
  return v16 != 0;
}

void sub_20EB4005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB401C4(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  _OWORD v32[4];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  _QWORD v41[91];
  std::__shared_weak_count *v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;

  v2 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v2 == 64;
    v2 += 8;
  }
  while (!v4);
  if (!v3)
    return 0;
  v5 = 72;
  do
  {
    v6 = (*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v5 == 136;
    v5 += 8;
  }
  while (!v4);
  if (!v6
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v7 = 168;
  do
  {
    v8 = (*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v7 == 384;
    v7 += 8;
  }
  while (!v4);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 888);
  if (!v9 || !sub_20EB1E278(v9))
    return 0;
  v10 = *(_OWORD *)(a1 + 48);
  v32[2] = *(_OWORD *)(a1 + 32);
  v32[3] = v10;
  v11 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v11;
  v12 = *(_OWORD *)(a1 + 72);
  v35 = *(_OWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 104);
  v37 = v13;
  v33 = *(_QWORD *)(a1 + 64);
  v38 = *(_QWORD *)(a1 + 136);
  v34 = v12;
  v40 = *(_BYTE *)(a1 + 160);
  v39 = *(_OWORD *)(a1 + 144);
  memcpy(v41, (const void *)(a1 + 168), 0x2C9uLL);
  v41[90] = *(_QWORD *)(a1 + 888);
  v19 = *(std::__shared_weak_count **)(a1 + 896);
  v42 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(_OWORD *)(a1 + 952);
  v45 = *(_OWORD *)(a1 + 936);
  v46 = v22;
  v23 = *(__n128 *)(a1 + 920);
  v43 = *(__n128 *)(a1 + 904);
  v44 = v23;
  v47 = *(_QWORD *)(a1 + 968);
  v48 = *(_OWORD *)(a1 + 976);
  v49 = 15;
  v50 = 0x7FF8000000000000;
  v51 = 0xFFEFFFFFFFFFFFFFLL;
  v23.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v52 = xmmword_2102E3C60;
  v23.n128_u64[0] = 0.5;
  v24 = sub_20EB44B68((uint64_t)v32, 0, 0, v23, v43, v14, v15, v16, v17, v18);
  if (v49 != -1)
  {
    if (v49 > 7)
    {
      if (v49 > 0xB)
      {
        if (v49 < 0xF)
          return v24;
        v25 = v42;
        if (!v42)
          return v24;
        v30 = (unint64_t *)&v42->__shared_owners_;
        do
          v27 = __ldaxr(v30);
        while (__stlxr(v27 - 1, v30));
      }
      else if (v49 > 9)
      {
        if (v49 == 10)
          return v24;
        v25 = (std::__shared_weak_count *)v41[63];
        if (!v41[63])
          return v24;
        v31 = (unint64_t *)(v41[63] + 8);
        do
          v27 = __ldaxr(v31);
        while (__stlxr(v27 - 1, v31));
      }
      else
      {
        if (v49 != 9)
          return v24;
        v25 = (std::__shared_weak_count *)v41[42];
        if (!v41[42])
          return v24;
        v29 = (unint64_t *)(v41[42] + 8);
        do
          v27 = __ldaxr(v29);
        while (__stlxr(v27 - 1, v29));
      }
    }
    else
    {
      if (v49 != 7)
        return v24;
      v25 = (std::__shared_weak_count *)v41[39];
      if (!v41[39])
        return v24;
      v26 = (unint64_t *)(v41[39] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
    }
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v24;
}

void sub_20EB404E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20EB404F8(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  __double2 v7;
  double v8;
  __double2 v9;
  double v10;
  double result;
  float64x2_t v17;
  double v18[4];

  v18[3] = *(double *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(unsigned int *)(v2 + 104);
  if ((_DWORD)v3 == -1)
    sub_20E877AB8();
  *(_QWORD *)&v18[0] = &v17;
  v6 = ((double (*)(double *, uint64_t))off_24C9C4FE8[v3])(v18, v2 + 88);
  if (v6 <= 0.0)
  {
LABEL_7:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 922, (uint64_t)&unk_210254955, 0, (uint64_t)"Invalid lens distortion.", 24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_3:
  v7 = __sincos_stret(v6);
  v8 = 0.0;
  while (1)
  {
    v9 = __sincos_stret(v8);
    v10 = v7.__cosval * *(double *)(a1 + 984);
    v18[0] = v7.__sinval * v9.__sinval - v7.__cosval * *(double *)(a1 + 976);
    v18[1] = v7.__sinval * v9.__cosval - v10;
    v18[2] = v7.__cosval;
    if ((sub_20EB247C0(&v17, (uint64_t)v18, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) != 0)
      break;
    v8 = v8 + a2;
    if (v8 >= 6.28318531)
    {
      v6 = v6 - a2;
      if (v6 <= 0.0)
        goto LABEL_7;
      goto LABEL_3;
    }
  }
  _D2 = vaddq_f64(*(float64x2_t *)(a1 + 976), v17).f64[1];
  __asm { FMLA            D0, D2, V1.D[1] }
  return result;
}

uint64_t sub_20EB40694(const void **a1)
{
  int v2;
  unint64_t v3;
  const void *v4;
  size_t v5;
  size_t v7;
  size_t v9;
  size_t v11;
  size_t v13;
  size_t v14;
  size_t v15;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (unint64_t)a1[1];
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = *a1;
  if (v3 >= 0xA)
    v5 = 10;
  else
    v5 = v3;
  if (!memcmp(v4, "LinearLens", v5) && v3 == 10)
    return 0;
  if (v3 >= 0xF)
    v7 = 15;
  else
    v7 = v3;
  if (!memcmp(v4, "PerspectiveLens", v7) && v3 == 15)
    return 1;
  if (v3 >= 0xB)
    v9 = 11;
  else
    v9 = v3;
  if (!memcmp(v4, "FisheyeLens", v9) && v3 == 11)
    return 2;
  if (v3 >= 0x10)
    v11 = 16;
  else
    v11 = v3;
  if (!memcmp(v4, "FisheyeLensFast1", v11) && v3 == 16)
    return 3;
  if (!memcmp(v4, "FisheyeLensFast2", v11) && v3 == 16)
    return 4;
  if (v3 >= 0x16)
    v13 = 22;
  else
    v13 = v3;
  if (!memcmp(v4, "FlyoverPerspectiveLens", v13) && v3 == 22)
    return 5;
  if (v3 >= 0xE)
    v14 = 14;
  else
    v14 = v3;
  if (!memcmp(v4, "NoncentricLens", v14) && v3 == 14)
    return 6;
  if (!memcmp(v4, "FisheyeLensKR7", v14) && v3 == 14)
    return 7;
  if (v3 >= 0x11)
    v15 = 17;
  else
    v15 = v3;
  if (!memcmp(v4, "NoncentricLensKR7", v15) && v3 == 17)
    return 8;
  if (!std::string::compare((const std::string *)a1, "FisheyeLensKDR7"))
    return 9;
  if (!std::string::compare((const std::string *)a1, "NoncentricLensKDR7"))
    return 10;
  if (!std::string::compare((const std::string *)a1, "FisheyeLensHermesKR4"))
    return 11;
  if (!std::string::compare((const std::string *)a1, "I15Lens"))
    return 12;
  if (!std::string::compare((const std::string *)a1, "FisheyeLensKDRC7"))
    return 13;
  if (std::string::compare((const std::string *)a1, "NoncentricLensKDRC7"))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 148, (uint64_t)&unk_210254955, 0, (uint64_t)"Invalid lens type", 17, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return 14;
}

void sub_20EB409F8(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  char *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  char *v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  char *v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  char *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _BYTE *v183;
  char *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  char *v202;
  char *v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD *v208;
  char *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;

  v3 = 0;
  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v3 >= v5)
        break;
      *(_QWORD *)v3 = a1[v4];
      v3 += 8;
      a2[1] = v3;
      if (++v4 == 9)
        goto LABEL_32;
    }
    v6 = *a2;
    v7 = v3 - *a2;
    v8 = v7 >> 3;
    v9 = (v7 >> 3) + 1;
    if (v9 >> 61)
      sub_20E867F44();
    v10 = v5 - (_QWORD)v6;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20E877A38();
      v12 = operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a1[v4];
    v14 = v13 + 8;
    if (v3 != v6)
    {
      v15 = v3 - v6 - 8;
      if (v15 < 0x168)
      {
        v16 = v3;
        goto LABEL_17;
      }
      v18 = (v3 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
      if (&v12[v7 - 8 - v18] > &v12[v7 - 8])
      {
        v16 = v3;
        do
        {
LABEL_17:
          v17 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v16 != v6);
        goto LABEL_18;
      }
      if (&v3[-v18 - 8] > v3 - 8)
      {
        v16 = v3;
        goto LABEL_17;
      }
      if ((unint64_t)(v3 - v12 - v7) < 0x20)
      {
        v16 = v3;
        goto LABEL_17;
      }
      v19 = (v15 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v16 = &v3[-v20];
      v13 -= v20;
      v21 = &v12[8 * v8 - 16];
      v22 = (__int128 *)(v3 - 16);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_17;
    }
LABEL_18:
    *a2 = v13;
    a2[1] = v14;
    a2[2] = &v12[8 * v11];
    if (v6)
      operator delete(v6);
    v3 = v14;
    a2[1] = v14;
    ++v4;
  }
  while (v4 != 9);
LABEL_32:
  v25 = a1 + 9;
  v26 = a1 + 18;
  do
  {
    while (1)
    {
      v28 = (unint64_t)a2[2];
      if ((unint64_t)v3 >= v28)
        break;
      v27 = *v25++;
      *(_QWORD *)v3 = v27;
      v3 += 8;
      a2[1] = v3;
      if (v25 == v26)
        goto LABEL_63;
    }
    v29 = *a2;
    v30 = v3 - *a2;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      sub_20E867F44();
    v33 = v28 - (_QWORD)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        sub_20E877A38();
      v35 = operator new(8 * v34);
      v36 = &v35[8 * v31];
      *(_QWORD *)v36 = *v25;
      v37 = (uint64_t)(v36 + 8);
      v38 = v3 - v29;
      if (v3 == v29)
        goto LABEL_49;
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      *(_QWORD *)(8 * v31) = *v25;
      v37 = 8 * v31 + 8;
      v38 = v3 - v29;
      if (v3 == v29)
        goto LABEL_49;
    }
    v39 = v38 - 8;
    if (v39 < 0x168)
    {
      v40 = v3;
      goto LABEL_48;
    }
    v42 = (v3 - 8 - v29) & 0xFFFFFFFFFFFFFFF8;
    if (&v35[v30 - 8 - v42] > &v35[v30 - 8])
    {
      v40 = v3;
      do
      {
LABEL_48:
        v41 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v36 - 1) = v41;
        v36 -= 8;
      }
      while (v40 != v29);
      goto LABEL_49;
    }
    if (&v3[-v42 - 8] > v3 - 8)
    {
      v40 = v3;
      goto LABEL_48;
    }
    if ((unint64_t)(v3 - v35 - v30) < 0x20)
    {
      v40 = v3;
      goto LABEL_48;
    }
    v43 = (v39 >> 3) + 1;
    v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v3[-v44];
    v36 -= v44;
    v45 = &v35[8 * v31 - 16];
    v46 = (__int128 *)(v3 - 16);
    v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v36;
    a2[1] = (char *)v37;
    a2[2] = &v35[8 * v34];
    if (v29)
      operator delete(v29);
    v3 = (char *)v37;
    a2[1] = (char *)v37;
    ++v25;
  }
  while (v25 != v26);
LABEL_63:
  v49 = a2[2];
  if (v3 < v49)
  {
    *(_QWORD *)v3 = a1[21];
    v50 = v3 + 8;
    goto LABEL_86;
  }
  v51 = *a2;
  v52 = v3 - *a2;
  v53 = v52 >> 3;
  v54 = (v52 >> 3) + 1;
  if (v54 >> 61)
    goto LABEL_276;
  v55 = v49 - v51;
  if (v55 >> 2 > v54)
    v54 = v55 >> 2;
  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
    v56 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
  {
    if (!(v56 >> 61))
    {
      v57 = operator new(8 * v56);
      goto LABEL_75;
    }
LABEL_279:
    sub_20E877A38();
  }
  v57 = 0;
LABEL_75:
  v58 = &v57[8 * v53];
  v49 = &v57[8 * v56];
  *(_QWORD *)v58 = a1[21];
  v50 = v58 + 8;
  if (v3 != v51)
  {
    v59 = v3 - v51 - 8;
    if (v59 < 0x58)
    {
      v60 = v3;
      goto LABEL_83;
    }
    if ((unint64_t)(v3 - v57 - v52) < 0x20)
    {
      v60 = v3;
      goto LABEL_83;
    }
    v61 = (v59 >> 3) + 1;
    v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = &v3[-v62];
    v58 -= v62;
    v63 = &v57[8 * v53 - 16];
    v64 = (__int128 *)(v3 - 16);
    v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v66 = *v64;
      *(v63 - 1) = *(v64 - 1);
      *v63 = v66;
      v63 -= 2;
      v64 -= 2;
      v65 -= 4;
    }
    while (v65);
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v67 = *((_QWORD *)v60 - 1);
        v60 -= 8;
        *((_QWORD *)v58 - 1) = v67;
        v58 -= 8;
      }
      while (v60 != v51);
    }
  }
  *a2 = v58;
  a2[1] = v50;
  a2[2] = v49;
  if (v51)
  {
    operator delete(v51);
    v49 = a2[2];
  }
LABEL_86:
  a2[1] = v50;
  if (v50 < v49)
  {
    *(_QWORD *)v50 = a1[22];
    v68 = v50 + 8;
    goto LABEL_109;
  }
  v69 = *a2;
  v70 = v50 - *a2;
  v71 = v70 >> 3;
  v72 = (v70 >> 3) + 1;
  if (v72 >> 61)
    goto LABEL_276;
  v73 = v49 - v69;
  if (v73 >> 2 > v72)
    v72 = v73 >> 2;
  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
    v74 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 >> 61)
      goto LABEL_279;
    v75 = operator new(8 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[8 * v71];
  v49 = &v75[8 * v74];
  *(_QWORD *)v76 = a1[22];
  v68 = v76 + 8;
  if (v50 != v69)
  {
    v77 = v50 - v69 - 8;
    if (v77 < 0x58)
    {
      v78 = v50;
      goto LABEL_106;
    }
    if ((unint64_t)(v50 - &v75[v70]) < 0x20)
    {
      v78 = v50;
      goto LABEL_106;
    }
    v79 = (v77 >> 3) + 1;
    v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
    v78 = &v50[-v80];
    v76 -= v80;
    v81 = &v75[8 * v71 - 16];
    v82 = v50 - 16;
    v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v84 = *(_OWORD *)v82;
      *(v81 - 1) = *((_OWORD *)v82 - 1);
      *v81 = v84;
      v81 -= 2;
      v82 -= 32;
      v83 -= 4;
    }
    while (v83);
    if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v85 = *((_QWORD *)v78 - 1);
        v78 -= 8;
        *((_QWORD *)v76 - 1) = v85;
        v76 -= 8;
      }
      while (v78 != v69);
    }
  }
  *a2 = v76;
  a2[1] = v68;
  a2[2] = v49;
  if (v69)
  {
    operator delete(v69);
    v49 = a2[2];
  }
LABEL_109:
  a2[1] = v68;
  if (v68 < v49)
  {
    *(_QWORD *)v68 = a1[23];
    v86 = v68 + 8;
    goto LABEL_132;
  }
  v87 = *a2;
  v88 = v68 - *a2;
  v89 = v88 >> 3;
  v90 = (v88 >> 3) + 1;
  if (v90 >> 61)
LABEL_276:
    sub_20E867F44();
  v91 = v49 - v87;
  if (v91 >> 2 > v90)
    v90 = v91 >> 2;
  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
    v92 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v92 = v90;
  if (v92)
  {
    if (v92 >> 61)
      goto LABEL_279;
    v93 = operator new(8 * v92);
  }
  else
  {
    v93 = 0;
  }
  v94 = &v93[8 * v89];
  v49 = &v93[8 * v92];
  *(_QWORD *)v94 = a1[23];
  v86 = v94 + 8;
  if (v68 != v87)
  {
    v95 = v68 - v87 - 8;
    if (v95 < 0x58)
    {
      v96 = v68;
      goto LABEL_129;
    }
    if ((unint64_t)(v68 - &v93[v88]) < 0x20)
    {
      v96 = v68;
      goto LABEL_129;
    }
    v97 = (v95 >> 3) + 1;
    v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
    v96 = &v68[-v98];
    v94 -= v98;
    v99 = &v93[8 * v89 - 16];
    v100 = v68 - 16;
    v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *(_OWORD *)v100;
      *(v99 - 1) = *((_OWORD *)v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 32;
      v101 -= 4;
    }
    while (v101);
    if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v103 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *((_QWORD *)v94 - 1) = v103;
        v94 -= 8;
      }
      while (v96 != v87);
    }
  }
  *a2 = v94;
  a2[1] = v86;
  a2[2] = v49;
  if (v87)
  {
    operator delete(v87);
    v49 = a2[2];
  }
LABEL_132:
  a2[1] = v86;
  if (v86 < v49)
  {
    *(_QWORD *)v86 = a1[24];
    v104 = v86 + 8;
    goto LABEL_155;
  }
  v105 = *a2;
  v106 = v86 - *a2;
  v107 = v106 >> 3;
  v108 = (v106 >> 3) + 1;
  if (v108 >> 61)
    goto LABEL_278;
  v109 = v49 - v105;
  if (v109 >> 2 > v108)
    v108 = v109 >> 2;
  if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
    v110 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v110 = v108;
  if (v110)
  {
    if (!(v110 >> 61))
    {
      v111 = operator new(8 * v110);
      goto LABEL_144;
    }
LABEL_280:
    sub_20E877A38();
  }
  v111 = 0;
LABEL_144:
  v112 = &v111[8 * v107];
  v49 = &v111[8 * v110];
  *(_QWORD *)v112 = a1[24];
  v104 = v112 + 8;
  if (v86 != v105)
  {
    v113 = v86 - v105 - 8;
    if (v113 < 0x58)
    {
      v114 = v86;
      goto LABEL_152;
    }
    if ((unint64_t)(v86 - &v111[v106]) < 0x20)
    {
      v114 = v86;
      goto LABEL_152;
    }
    v115 = (v113 >> 3) + 1;
    v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
    v114 = &v86[-v116];
    v112 -= v116;
    v117 = &v111[8 * v107 - 16];
    v118 = v86 - 16;
    v119 = v115 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v120 = *(_OWORD *)v118;
      *(v117 - 1) = *((_OWORD *)v118 - 1);
      *v117 = v120;
      v117 -= 2;
      v118 -= 32;
      v119 -= 4;
    }
    while (v119);
    if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v121 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *((_QWORD *)v112 - 1) = v121;
        v112 -= 8;
      }
      while (v114 != v105);
    }
  }
  *a2 = v112;
  a2[1] = v104;
  a2[2] = v49;
  if (v105)
  {
    operator delete(v105);
    v49 = a2[2];
  }
LABEL_155:
  a2[1] = v104;
  if (v104 < v49)
  {
    *(_QWORD *)v104 = a1[25];
    v122 = v104 + 8;
    goto LABEL_178;
  }
  v123 = *a2;
  v124 = v104 - *a2;
  v125 = v124 >> 3;
  v126 = (v124 >> 3) + 1;
  if (v126 >> 61)
LABEL_278:
    sub_20E867F44();
  v127 = v49 - v123;
  if (v127 >> 2 > v126)
    v126 = v127 >> 2;
  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
    v128 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v128 = v126;
  if (v128)
  {
    if (v128 >> 61)
      goto LABEL_280;
    v129 = operator new(8 * v128);
  }
  else
  {
    v129 = 0;
  }
  v130 = &v129[8 * v125];
  v49 = &v129[8 * v128];
  *(_QWORD *)v130 = a1[25];
  v122 = v130 + 8;
  if (v104 != v123)
  {
    v131 = v104 - v123 - 8;
    if (v131 < 0x58)
    {
      v132 = v104;
      goto LABEL_175;
    }
    if ((unint64_t)(v104 - &v129[v124]) < 0x20)
    {
      v132 = v104;
      goto LABEL_175;
    }
    v133 = (v131 >> 3) + 1;
    v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
    v132 = &v104[-v134];
    v130 -= v134;
    v135 = &v129[8 * v125 - 16];
    v136 = v104 - 16;
    v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v138 = *(_OWORD *)v136;
      *(v135 - 1) = *((_OWORD *)v136 - 1);
      *v135 = v138;
      v135 -= 2;
      v136 -= 32;
      v137 -= 4;
    }
    while (v137);
    if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_175:
        v139 = *((_QWORD *)v132 - 1);
        v132 -= 8;
        *((_QWORD *)v130 - 1) = v139;
        v130 -= 8;
      }
      while (v132 != v123);
    }
  }
  *a2 = v130;
  a2[1] = v122;
  a2[2] = v49;
  if (v123)
  {
    operator delete(v123);
    v49 = a2[2];
  }
LABEL_178:
  a2[1] = v122;
  if (v122 < v49)
  {
    *(_QWORD *)v122 = a1[27];
    v140 = v122 + 8;
    goto LABEL_201;
  }
  v141 = *a2;
  v142 = v122 - *a2;
  v143 = v142 >> 3;
  v144 = (v142 >> 3) + 1;
  if (v144 >> 61)
    goto LABEL_275;
  v145 = v49 - v141;
  if (v145 >> 2 > v144)
    v144 = v145 >> 2;
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
    v146 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v146 = v144;
  if (v146)
  {
    if (!(v146 >> 61))
    {
      v147 = operator new(8 * v146);
      goto LABEL_190;
    }
LABEL_277:
    sub_20E877A38();
  }
  v147 = 0;
LABEL_190:
  v148 = &v147[8 * v143];
  v49 = &v147[8 * v146];
  *(_QWORD *)v148 = a1[27];
  v140 = v148 + 8;
  if (v122 != v141)
  {
    v149 = v122 - v141 - 8;
    if (v149 < 0x58)
    {
      v150 = v122;
      goto LABEL_198;
    }
    if ((unint64_t)(v122 - &v147[v142]) < 0x20)
    {
      v150 = v122;
      goto LABEL_198;
    }
    v151 = (v149 >> 3) + 1;
    v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
    v150 = &v122[-v152];
    v148 -= v152;
    v153 = &v147[8 * v143 - 16];
    v154 = v122 - 16;
    v155 = v151 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v156 = *(_OWORD *)v154;
      *(v153 - 1) = *((_OWORD *)v154 - 1);
      *v153 = v156;
      v153 -= 2;
      v154 -= 32;
      v155 -= 4;
    }
    while (v155);
    if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_198:
        v157 = *((_QWORD *)v150 - 1);
        v150 -= 8;
        *((_QWORD *)v148 - 1) = v157;
        v148 -= 8;
      }
      while (v150 != v141);
    }
  }
  *a2 = v148;
  a2[1] = v140;
  a2[2] = v49;
  if (v141)
  {
    operator delete(v141);
    v49 = a2[2];
  }
LABEL_201:
  a2[1] = v140;
  if (v140 < v49)
  {
    *(_QWORD *)v140 = a1[28];
    v158 = v140 + 8;
    goto LABEL_224;
  }
  v159 = *a2;
  v160 = v140 - *a2;
  v161 = v160 >> 3;
  v162 = (v160 >> 3) + 1;
  if (v162 >> 61)
    goto LABEL_275;
  v163 = v49 - v159;
  if (v163 >> 2 > v162)
    v162 = v163 >> 2;
  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
    v164 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v164 = v162;
  if (v164)
  {
    if (v164 >> 61)
      goto LABEL_277;
    v165 = operator new(8 * v164);
  }
  else
  {
    v165 = 0;
  }
  v166 = &v165[8 * v161];
  v49 = &v165[8 * v164];
  *(_QWORD *)v166 = a1[28];
  v158 = v166 + 8;
  if (v140 != v159)
  {
    v167 = v140 - v159 - 8;
    if (v167 < 0x58)
    {
      v168 = v140;
      goto LABEL_221;
    }
    if ((unint64_t)(v140 - &v165[v160]) < 0x20)
    {
      v168 = v140;
      goto LABEL_221;
    }
    v169 = (v167 >> 3) + 1;
    v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
    v168 = &v140[-v170];
    v166 -= v170;
    v171 = &v165[8 * v161 - 16];
    v172 = v140 - 16;
    v173 = v169 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v174 = *(_OWORD *)v172;
      *(v171 - 1) = *((_OWORD *)v172 - 1);
      *v171 = v174;
      v171 -= 2;
      v172 -= 32;
      v173 -= 4;
    }
    while (v173);
    if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_221:
        v175 = *((_QWORD *)v168 - 1);
        v168 -= 8;
        *((_QWORD *)v166 - 1) = v175;
        v166 -= 8;
      }
      while (v168 != v159);
    }
  }
  *a2 = v166;
  a2[1] = v158;
  a2[2] = v49;
  if (v159)
  {
    operator delete(v159);
    v49 = a2[2];
  }
LABEL_224:
  a2[1] = v158;
  if (v158 < v49)
  {
    *(_QWORD *)v158 = a1[29];
    v176 = v158 + 8;
    goto LABEL_247;
  }
  v177 = *a2;
  v178 = v158 - *a2;
  v179 = v178 >> 3;
  v180 = (v178 >> 3) + 1;
  if (v180 >> 61)
    goto LABEL_275;
  v181 = v49 - v177;
  if (v181 >> 2 > v180)
    v180 = v181 >> 2;
  if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
    v182 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v182 = v180;
  if (v182)
  {
    if (v182 >> 61)
      goto LABEL_277;
    v183 = operator new(8 * v182);
  }
  else
  {
    v183 = 0;
  }
  v184 = &v183[8 * v179];
  v49 = &v183[8 * v182];
  *(_QWORD *)v184 = a1[29];
  v176 = v184 + 8;
  if (v158 != v177)
  {
    v185 = v158 - v177 - 8;
    if (v185 < 0x58)
    {
      v186 = v158;
      goto LABEL_244;
    }
    if ((unint64_t)(v158 - &v183[v178]) < 0x20)
    {
      v186 = v158;
      goto LABEL_244;
    }
    v187 = (v185 >> 3) + 1;
    v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
    v186 = &v158[-v188];
    v184 -= v188;
    v189 = &v183[8 * v179 - 16];
    v190 = v158 - 16;
    v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v192 = *(_OWORD *)v190;
      *(v189 - 1) = *((_OWORD *)v190 - 1);
      *v189 = v192;
      v189 -= 2;
      v190 -= 32;
      v191 -= 4;
    }
    while (v191);
    if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_244:
        v193 = *((_QWORD *)v186 - 1);
        v186 -= 8;
        *((_QWORD *)v184 - 1) = v193;
        v184 -= 8;
      }
      while (v186 != v177);
    }
  }
  *a2 = v184;
  a2[1] = v176;
  a2[2] = v49;
  if (v177)
  {
    operator delete(v177);
    v49 = a2[2];
  }
LABEL_247:
  a2[1] = v176;
  if (v176 < v49)
  {
    *(_QWORD *)v176 = a1[30];
    v194 = v176 + 8;
    goto LABEL_270;
  }
  v195 = *a2;
  v196 = v176 - *a2;
  v197 = v196 >> 3;
  v198 = (v196 >> 3) + 1;
  if (v198 >> 61)
LABEL_275:
    sub_20E867F44();
  v199 = v49 - v195;
  if (v199 >> 2 > v198)
    v198 = v199 >> 2;
  if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
    v200 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v200 = v198;
  if (v200)
  {
    if (v200 >> 61)
      goto LABEL_277;
    v201 = operator new(8 * v200);
  }
  else
  {
    v201 = 0;
  }
  v202 = &v201[8 * v197];
  v203 = &v201[8 * v200];
  *(_QWORD *)v202 = a1[30];
  v194 = v202 + 8;
  if (v176 != v195)
  {
    v204 = v176 - v195 - 8;
    if (v204 < 0x58)
    {
      v205 = v176;
      goto LABEL_267;
    }
    if ((unint64_t)(v176 - &v201[v196]) < 0x20)
    {
      v205 = v176;
      goto LABEL_267;
    }
    v206 = (v204 >> 3) + 1;
    v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
    v205 = &v176[-v207];
    v202 -= v207;
    v208 = &v201[8 * v197 - 16];
    v209 = v176 - 16;
    v210 = v206 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v211 = *(_OWORD *)v209;
      *(v208 - 1) = *((_OWORD *)v209 - 1);
      *v208 = v211;
      v208 -= 2;
      v209 -= 32;
      v210 -= 4;
    }
    while (v210);
    if (v206 != (v206 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_267:
        v212 = *((_QWORD *)v205 - 1);
        v205 -= 8;
        *((_QWORD *)v202 - 1) = v212;
        v202 -= 8;
      }
      while (v205 != v195);
    }
  }
  *a2 = v202;
  a2[1] = v194;
  a2[2] = v203;
  if (v195)
    operator delete(v195);
LABEL_270:
  a2[1] = v194;
}

void sub_20EB41894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20EB418D4(_BOOL8 result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  int64x2_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = result;
  v4 = *a2;
  if (a2[1] - *a2 != 216)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 258, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
    v4 = *a2;
  }
  *(_QWORD *)v3 = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v3 + 56) = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v3 + 88) = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(v4 + 136);
  v5 = *(_OWORD *)(v4 + 144);
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(v4 + 160);
  *(_OWORD *)(v3 + 168) = v5;
  *(_QWORD *)&v5 = *(_QWORD *)(v4 + 160);
  v6 = 2;
  if (*(double *)&v5 == 0.0)
    v7 = 2;
  else
    v7 = 3;
  *(_DWORD *)(v3 + 208) = v7;
  v8 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v3 + 144) = v8;
  *(_BYTE *)(v3 + 160) = 0;
  v9 = *a2;
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(*a2 + 168);
  if (*(double *)(v9 + 168) == 0.0)
    v6 = 2 * (*(double *)(v9 + 176) != 0.0);
  *(_DWORD *)(v3 + 212) = v6;
  *(int64x2_t *)(v3 + 144) = v8;
  v10 = (_QWORD *)*a2;
  *(_QWORD *)(v3 + 216) = *(_QWORD *)(*a2 + 184);
  *(_QWORD *)(v3 + 224) = v10[24];
  *(_QWORD *)(v3 + 232) = v10[25];
  *(_QWORD *)(v3 + 240) = v10[26];
  *(int64x2_t *)(v3 + 144) = v8;
  *(_BYTE *)(v3 + 160) = 0;
  return result;
}

double sub_20EB41A64(uint64_t a1, double a2)
{
  __int128 v2;
  __int128 v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  _OWORD v12[4];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v2;
  v13 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 136);
  v14 = *(_OWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 144);
  v21 = *(_OWORD *)(a1 + 168);
  v25 = *(_OWORD *)(a1 + 232);
  v24 = *(_OWORD *)(a1 + 216);
  v23 = *(_OWORD *)(a1 + 200);
  v22 = *(_OWORD *)(a1 + 184);
  v30 = 2;
  v31 = 0x7FF8000000000000;
  v32 = 0xFFEFFFFFFFFFFFFFLL;
  v33 = xmmword_2102E3C60;
  *(_QWORD *)&v4 = sub_20EB2BE70((uint64_t)v12, a2).n128_u64[0];
  if (v30 != -1)
  {
    if (v30 > 7)
    {
      if (v30 > 0xB)
      {
        if (v30 < 0xF)
          return v4;
        v5 = v29;
        if (!v29)
          return v4;
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
      }
      else if (v30 > 9)
      {
        if (v30 == 10)
          return v4;
        v5 = v28;
        if (!v28)
          return v4;
        v10 = (unint64_t *)&v28->__shared_owners_;
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
      }
      else
      {
        if (v30 != 9)
          return v4;
        v5 = v27;
        if (!v27)
          return v4;
        v8 = (unint64_t *)&v27->__shared_owners_;
        do
          v7 = __ldaxr(v8);
        while (__stlxr(v7 - 1, v8));
      }
    }
    else
    {
      if (v30 != 7)
        return v4;
      v5 = v26;
      if (!v26)
        return v4;
      v6 = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20EB41C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20EB41C58(double *a1, uint64_t a2, double *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;

  if (!a5)
  {
    v11 = *a3 - a1[26];
    v12 = a3[1] - a1[27];
    v13 = sqrt(v11 * v11 + v12 * v12);
    v14 = a1[21];
    v15 = a1[22];
    v16 = v14 * 3.0;
    v17 = v15 * 4.0;
    v18 = a1[23];
    v19 = v18 * 5.0;
    v20 = v13 * (v13 * (v14 * 3.0 + v13 * (v15 * 4.0 + v18 * 5.0 * v13))) + 1.0;
    if (v20 == 0.0)
      v20 = 1.0;
    v21 = 1.0 - (v13 * (v13 * (v14 + v13 * (v15 + v18 * v13))) + 1.0 + -1.0) / v20;
    v22 = v13 * v21 * (v13 * v21 * (v16 + v13 * v21 * (v17 + v19 * (v13 * v21)))) + 1.0;
    if (v22 == 0.0)
      v22 = 1.0;
    v23 = v21 - (v21 * (v13 * v21 * (v13 * v21 * (v14 + v13 * v21 * (v15 + v18 * (v13 * v21)))) + 1.0) + -1.0) / v22;
    v24 = v13 * v23 * (v13 * v23 * (v16 + v13 * v23 * (v17 + v19 * (v13 * v23)))) + 1.0;
    if (v24 == 0.0)
      v24 = 1.0;
    v25 = v23 - (v23 * (v13 * v23 * (v13 * v23 * (v14 + v13 * v23 * (v15 + v18 * (v13 * v23)))) + 1.0) + -1.0) / v24;
    v26 = v13 * v25 * (v13 * v25 * (v16 + v13 * v25 * (v17 + v19 * (v13 * v25)))) + 1.0;
    if (v26 == 0.0)
      v26 = 1.0;
    v27 = v25 - (v25 * (v13 * v25 * (v13 * v25 * (v14 + v13 * v25 * (v15 + v18 * (v13 * v25)))) + 1.0) + -1.0) / v26;
    v28 = v13 * v27;
    v29 = v27 * (v28 * (v28 * (v14 + v28 * (v15 + v18 * v28))) + 1.0) + -1.0;
    v30 = v28 * (v28 * (v16 + v28 * (v17 + v19 * v28))) + 1.0;
    if (v30 == 0.0)
      v30 = 1.0;
    v31 = v27 - v29 / v30;
    *(double *)a2 = v11 * v31 - a1[24];
    *(double *)(a2 + 8) = v12 * v31 - a1[25];
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    if (!a4)
      goto LABEL_17;
    goto LABEL_16;
  }
  result = sub_20EB28658((double *)a2, (simd_double2 *)a5, a3, a1 + 21, a1 + 24, a1 + 26, 5);
  if (!result)
    return result;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  if (a4)
  {
LABEL_16:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
LABEL_17:
  if (a6)
  {
    *(_QWORD *)(a6 + 64) = 0;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return 1;
}

uint64_t sub_20EB41EEC(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  const double *f64;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  f64 = a3[1].f64;
  v4 = vld1q_dup_f64(f64);
  v5 = vaddq_f64(vdivq_f64(*a3, v4), a1[12]);
  v4.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v5, v5)));
  v6 = vmulq_n_f64(v5, v4.f64[0] * (v4.f64[0] * (a1[10].f64[1] + v4.f64[0] * (a1[11].f64[0] + a1[11].f64[1] * v4.f64[0]))) + 1.0);
  *a2 = v6;
  a2->f64[0] = a1[13].f64[0] + v6.f64[0];
  a2->f64[1] = a1[13].f64[1] + v6.f64[1];
  return 1;
}

uint64_t sub_20EB41F64(float64x2_t *a1, float64x2_t *a2, double *a3, double *a4, _OWORD *a5)
{
  double v7;
  double v8;
  float64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a4[2];
  if (v7 == 0.0)
    v8 = 1.0;
  else
    v8 = 1.0 / v7;
  v10 = v8 * a4[1];
  v24.f64[0] = *a4 * v8;
  v9 = v24.f64[0];
  v24.f64[1] = v10;
  sub_20EB2837C(a2, &v20, &v24, &a1[10].f64[1], a1 + 12, a1[13].f64);
  v11 = v20;
  v12 = v21;
  v13 = v8 * v21;
  *a3 = v8 * v20;
  a3[1] = v13;
  v14 = v22;
  v15 = v23;
  v16 = v8 * v22;
  v17 = -(v11 * v9) - v10 * v12;
  v18 = v8 * v23;
  a3[2] = v8 * v17;
  a3[3] = v16;
  a3[4] = v18;
  a3[5] = v8 * (-(v14 * v9) - v10 * v15);
  if (a5)
  {
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return 1;
}

void sub_20EB42068()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 354, (uint64_t)&unk_210254955, 0, (uint64_t)"Not implemented yet.", 20, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20EB420A4()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 364, (uint64_t)&unk_210254955, 0, (uint64_t)"Not implemented.", 16, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20EB420E0(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  char *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  char *v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  char *v166;
  char *v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;

  v3 = 0;
  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v3 >= v5)
        break;
      *(_QWORD *)v3 = a1[v4];
      v3 += 8;
      a2[1] = v3;
      if (++v4 == 9)
        goto LABEL_32;
    }
    v6 = *a2;
    v7 = v3 - *a2;
    v8 = v7 >> 3;
    v9 = (v7 >> 3) + 1;
    if (v9 >> 61)
      sub_20E867F44();
    v10 = v5 - (_QWORD)v6;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20E877A38();
      v12 = operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a1[v4];
    v14 = v13 + 8;
    if (v3 != v6)
    {
      v15 = v3 - v6 - 8;
      if (v15 < 0x168)
      {
        v16 = v3;
        goto LABEL_17;
      }
      v18 = (v3 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
      if (&v12[v7 - 8 - v18] > &v12[v7 - 8])
      {
        v16 = v3;
        do
        {
LABEL_17:
          v17 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v16 != v6);
        goto LABEL_18;
      }
      if (&v3[-v18 - 8] > v3 - 8)
      {
        v16 = v3;
        goto LABEL_17;
      }
      if ((unint64_t)(v3 - v12 - v7) < 0x20)
      {
        v16 = v3;
        goto LABEL_17;
      }
      v19 = (v15 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v16 = &v3[-v20];
      v13 -= v20;
      v21 = &v12[8 * v8 - 16];
      v22 = (__int128 *)(v3 - 16);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_17;
    }
LABEL_18:
    *a2 = v13;
    a2[1] = v14;
    a2[2] = &v12[8 * v11];
    if (v6)
      operator delete(v6);
    v3 = v14;
    a2[1] = v14;
    ++v4;
  }
  while (v4 != 9);
LABEL_32:
  v25 = a1 + 9;
  v26 = a1 + 18;
  do
  {
    while (1)
    {
      v28 = (unint64_t)a2[2];
      if ((unint64_t)v3 >= v28)
        break;
      v27 = *v25++;
      *(_QWORD *)v3 = v27;
      v3 += 8;
      a2[1] = v3;
      if (v25 == v26)
        goto LABEL_63;
    }
    v29 = *a2;
    v30 = v3 - *a2;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      sub_20E867F44();
    v33 = v28 - (_QWORD)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        sub_20E877A38();
      v35 = operator new(8 * v34);
      v36 = &v35[8 * v31];
      *(_QWORD *)v36 = *v25;
      v37 = (uint64_t)(v36 + 8);
      v38 = v3 - v29;
      if (v3 == v29)
        goto LABEL_49;
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      *(_QWORD *)(8 * v31) = *v25;
      v37 = 8 * v31 + 8;
      v38 = v3 - v29;
      if (v3 == v29)
        goto LABEL_49;
    }
    v39 = v38 - 8;
    if (v39 < 0x168)
    {
      v40 = v3;
      goto LABEL_48;
    }
    v42 = (v3 - 8 - v29) & 0xFFFFFFFFFFFFFFF8;
    if (&v35[v30 - 8 - v42] > &v35[v30 - 8])
    {
      v40 = v3;
      do
      {
LABEL_48:
        v41 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v36 - 1) = v41;
        v36 -= 8;
      }
      while (v40 != v29);
      goto LABEL_49;
    }
    if (&v3[-v42 - 8] > v3 - 8)
    {
      v40 = v3;
      goto LABEL_48;
    }
    if ((unint64_t)(v3 - v35 - v30) < 0x20)
    {
      v40 = v3;
      goto LABEL_48;
    }
    v43 = (v39 >> 3) + 1;
    v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v3[-v44];
    v36 -= v44;
    v45 = &v35[8 * v31 - 16];
    v46 = (__int128 *)(v3 - 16);
    v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_48;
LABEL_49:
    *a2 = v36;
    a2[1] = (char *)v37;
    a2[2] = &v35[8 * v34];
    if (v29)
      operator delete(v29);
    v3 = (char *)v37;
    a2[1] = (char *)v37;
    ++v25;
  }
  while (v25 != v26);
LABEL_63:
  v49 = a2[2];
  if (v3 < v49)
  {
    *(_QWORD *)v3 = a1[21];
    v50 = v3 + 8;
    goto LABEL_86;
  }
  v51 = *a2;
  v52 = v3 - *a2;
  v53 = v52 >> 3;
  v54 = (v52 >> 3) + 1;
  if (v54 >> 61)
    goto LABEL_229;
  v55 = v49 - v51;
  if (v55 >> 2 > v54)
    v54 = v55 >> 2;
  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
    v56 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
  {
    if (!(v56 >> 61))
    {
      v57 = operator new(8 * v56);
      goto LABEL_75;
    }
LABEL_232:
    sub_20E877A38();
  }
  v57 = 0;
LABEL_75:
  v58 = &v57[8 * v53];
  v49 = &v57[8 * v56];
  *(_QWORD *)v58 = a1[21];
  v50 = v58 + 8;
  if (v3 != v51)
  {
    v59 = v3 - v51 - 8;
    if (v59 < 0x58)
    {
      v60 = v3;
      goto LABEL_83;
    }
    if ((unint64_t)(v3 - v57 - v52) < 0x20)
    {
      v60 = v3;
      goto LABEL_83;
    }
    v61 = (v59 >> 3) + 1;
    v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = &v3[-v62];
    v58 -= v62;
    v63 = &v57[8 * v53 - 16];
    v64 = (__int128 *)(v3 - 16);
    v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v66 = *v64;
      *(v63 - 1) = *(v64 - 1);
      *v63 = v66;
      v63 -= 2;
      v64 -= 2;
      v65 -= 4;
    }
    while (v65);
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_83:
        v67 = *((_QWORD *)v60 - 1);
        v60 -= 8;
        *((_QWORD *)v58 - 1) = v67;
        v58 -= 8;
      }
      while (v60 != v51);
    }
  }
  *a2 = v58;
  a2[1] = v50;
  a2[2] = v49;
  if (v51)
  {
    operator delete(v51);
    v49 = a2[2];
  }
LABEL_86:
  a2[1] = v50;
  if (v50 < v49)
  {
    *(_QWORD *)v50 = a1[22];
    v68 = v50 + 8;
    goto LABEL_109;
  }
  v69 = *a2;
  v70 = v50 - *a2;
  v71 = v70 >> 3;
  v72 = (v70 >> 3) + 1;
  if (v72 >> 61)
    goto LABEL_229;
  v73 = v49 - v69;
  if (v73 >> 2 > v72)
    v72 = v73 >> 2;
  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
    v74 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 >> 61)
      goto LABEL_232;
    v75 = operator new(8 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[8 * v71];
  v49 = &v75[8 * v74];
  *(_QWORD *)v76 = a1[22];
  v68 = v76 + 8;
  if (v50 != v69)
  {
    v77 = v50 - v69 - 8;
    if (v77 < 0x58)
    {
      v78 = v50;
      goto LABEL_106;
    }
    if ((unint64_t)(v50 - &v75[v70]) < 0x20)
    {
      v78 = v50;
      goto LABEL_106;
    }
    v79 = (v77 >> 3) + 1;
    v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
    v78 = &v50[-v80];
    v76 -= v80;
    v81 = &v75[8 * v71 - 16];
    v82 = v50 - 16;
    v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v84 = *(_OWORD *)v82;
      *(v81 - 1) = *((_OWORD *)v82 - 1);
      *v81 = v84;
      v81 -= 2;
      v82 -= 32;
      v83 -= 4;
    }
    while (v83);
    if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v85 = *((_QWORD *)v78 - 1);
        v78 -= 8;
        *((_QWORD *)v76 - 1) = v85;
        v76 -= 8;
      }
      while (v78 != v69);
    }
  }
  *a2 = v76;
  a2[1] = v68;
  a2[2] = v49;
  if (v69)
  {
    operator delete(v69);
    v49 = a2[2];
  }
LABEL_109:
  a2[1] = v68;
  if (v68 < v49)
  {
    *(_QWORD *)v68 = a1[23];
    v86 = v68 + 8;
    goto LABEL_132;
  }
  v87 = *a2;
  v88 = v68 - *a2;
  v89 = v88 >> 3;
  v90 = (v88 >> 3) + 1;
  if (v90 >> 61)
LABEL_229:
    sub_20E867F44();
  v91 = v49 - v87;
  if (v91 >> 2 > v90)
    v90 = v91 >> 2;
  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
    v92 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v92 = v90;
  if (v92)
  {
    if (v92 >> 61)
      goto LABEL_232;
    v93 = operator new(8 * v92);
  }
  else
  {
    v93 = 0;
  }
  v94 = &v93[8 * v89];
  v49 = &v93[8 * v92];
  *(_QWORD *)v94 = a1[23];
  v86 = v94 + 8;
  if (v68 != v87)
  {
    v95 = v68 - v87 - 8;
    if (v95 < 0x58)
    {
      v96 = v68;
      goto LABEL_129;
    }
    if ((unint64_t)(v68 - &v93[v88]) < 0x20)
    {
      v96 = v68;
      goto LABEL_129;
    }
    v97 = (v95 >> 3) + 1;
    v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
    v96 = &v68[-v98];
    v94 -= v98;
    v99 = &v93[8 * v89 - 16];
    v100 = v68 - 16;
    v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *(_OWORD *)v100;
      *(v99 - 1) = *((_OWORD *)v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 32;
      v101 -= 4;
    }
    while (v101);
    if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_129:
        v103 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *((_QWORD *)v94 - 1) = v103;
        v94 -= 8;
      }
      while (v96 != v87);
    }
  }
  *a2 = v94;
  a2[1] = v86;
  a2[2] = v49;
  if (v87)
  {
    operator delete(v87);
    v49 = a2[2];
  }
LABEL_132:
  a2[1] = v86;
  if (v86 < v49)
  {
    *(_QWORD *)v86 = a1[24];
    v104 = v86 + 8;
    goto LABEL_155;
  }
  v105 = *a2;
  v106 = v86 - *a2;
  v107 = v106 >> 3;
  v108 = (v106 >> 3) + 1;
  if (v108 >> 61)
    goto LABEL_230;
  v109 = v49 - v105;
  if (v109 >> 2 > v108)
    v108 = v109 >> 2;
  if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
    v110 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v110 = v108;
  if (v110)
  {
    if (!(v110 >> 61))
    {
      v111 = operator new(8 * v110);
      goto LABEL_144;
    }
LABEL_233:
    sub_20E877A38();
  }
  v111 = 0;
LABEL_144:
  v112 = &v111[8 * v107];
  v49 = &v111[8 * v110];
  *(_QWORD *)v112 = a1[24];
  v104 = v112 + 8;
  if (v86 != v105)
  {
    v113 = v86 - v105 - 8;
    if (v113 < 0x58)
    {
      v114 = v86;
      goto LABEL_152;
    }
    if ((unint64_t)(v86 - &v111[v106]) < 0x20)
    {
      v114 = v86;
      goto LABEL_152;
    }
    v115 = (v113 >> 3) + 1;
    v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
    v114 = &v86[-v116];
    v112 -= v116;
    v117 = &v111[8 * v107 - 16];
    v118 = v86 - 16;
    v119 = v115 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v120 = *(_OWORD *)v118;
      *(v117 - 1) = *((_OWORD *)v118 - 1);
      *v117 = v120;
      v117 -= 2;
      v118 -= 32;
      v119 -= 4;
    }
    while (v119);
    if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_152:
        v121 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *((_QWORD *)v112 - 1) = v121;
        v112 -= 8;
      }
      while (v114 != v105);
    }
  }
  *a2 = v112;
  a2[1] = v104;
  a2[2] = v49;
  if (v105)
  {
    operator delete(v105);
    v49 = a2[2];
  }
LABEL_155:
  a2[1] = v104;
  if (v104 < v49)
  {
    *(_QWORD *)v104 = a1[25];
    v122 = v104 + 8;
    goto LABEL_178;
  }
  v123 = *a2;
  v124 = v104 - *a2;
  v125 = v124 >> 3;
  v126 = (v124 >> 3) + 1;
  if (v126 >> 61)
LABEL_230:
    sub_20E867F44();
  v127 = v49 - v123;
  if (v127 >> 2 > v126)
    v126 = v127 >> 2;
  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
    v128 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v128 = v126;
  if (v128)
  {
    if (v128 >> 61)
      goto LABEL_233;
    v129 = operator new(8 * v128);
  }
  else
  {
    v129 = 0;
  }
  v130 = &v129[8 * v125];
  v49 = &v129[8 * v128];
  *(_QWORD *)v130 = a1[25];
  v122 = v130 + 8;
  if (v104 != v123)
  {
    v131 = v104 - v123 - 8;
    if (v131 < 0x58)
    {
      v132 = v104;
      goto LABEL_175;
    }
    if ((unint64_t)(v104 - &v129[v124]) < 0x20)
    {
      v132 = v104;
      goto LABEL_175;
    }
    v133 = (v131 >> 3) + 1;
    v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
    v132 = &v104[-v134];
    v130 -= v134;
    v135 = &v129[8 * v125 - 16];
    v136 = v104 - 16;
    v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v138 = *(_OWORD *)v136;
      *(v135 - 1) = *((_OWORD *)v136 - 1);
      *v135 = v138;
      v135 -= 2;
      v136 -= 32;
      v137 -= 4;
    }
    while (v137);
    if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_175:
        v139 = *((_QWORD *)v132 - 1);
        v132 -= 8;
        *((_QWORD *)v130 - 1) = v139;
        v130 -= 8;
      }
      while (v132 != v123);
    }
  }
  *a2 = v130;
  a2[1] = v122;
  a2[2] = v49;
  if (v123)
  {
    operator delete(v123);
    v49 = a2[2];
  }
LABEL_178:
  a2[1] = v122;
  if (v122 < v49)
  {
    *(_QWORD *)v122 = a1[26];
    v140 = v122 + 8;
    goto LABEL_201;
  }
  v141 = *a2;
  v142 = v122 - *a2;
  v143 = v142 >> 3;
  v144 = (v142 >> 3) + 1;
  if (v144 >> 61)
    goto LABEL_231;
  v145 = v49 - v141;
  if (v145 >> 2 > v144)
    v144 = v145 >> 2;
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
    v146 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v146 = v144;
  if (v146)
  {
    if (!(v146 >> 61))
    {
      v147 = operator new(8 * v146);
      goto LABEL_190;
    }
LABEL_234:
    sub_20E877A38();
  }
  v147 = 0;
LABEL_190:
  v148 = &v147[8 * v143];
  v49 = &v147[8 * v146];
  *(_QWORD *)v148 = a1[26];
  v140 = v148 + 8;
  if (v122 != v141)
  {
    v149 = v122 - v141 - 8;
    if (v149 < 0x58)
    {
      v150 = v122;
      goto LABEL_198;
    }
    if ((unint64_t)(v122 - &v147[v142]) < 0x20)
    {
      v150 = v122;
      goto LABEL_198;
    }
    v151 = (v149 >> 3) + 1;
    v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
    v150 = &v122[-v152];
    v148 -= v152;
    v153 = &v147[8 * v143 - 16];
    v154 = v122 - 16;
    v155 = v151 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v156 = *(_OWORD *)v154;
      *(v153 - 1) = *((_OWORD *)v154 - 1);
      *v153 = v156;
      v153 -= 2;
      v154 -= 32;
      v155 -= 4;
    }
    while (v155);
    if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_198:
        v157 = *((_QWORD *)v150 - 1);
        v150 -= 8;
        *((_QWORD *)v148 - 1) = v157;
        v148 -= 8;
      }
      while (v150 != v141);
    }
  }
  *a2 = v148;
  a2[1] = v140;
  a2[2] = v49;
  if (v141)
  {
    operator delete(v141);
    v49 = a2[2];
  }
LABEL_201:
  a2[1] = v140;
  if (v140 < v49)
  {
    *(_QWORD *)v140 = a1[27];
    v158 = v140 + 8;
    goto LABEL_224;
  }
  v159 = *a2;
  v160 = v140 - *a2;
  v161 = v160 >> 3;
  v162 = (v160 >> 3) + 1;
  if (v162 >> 61)
LABEL_231:
    sub_20E867F44();
  v163 = v49 - v159;
  if (v163 >> 2 > v162)
    v162 = v163 >> 2;
  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
    v164 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v164 = v162;
  if (v164)
  {
    if (v164 >> 61)
      goto LABEL_234;
    v165 = operator new(8 * v164);
  }
  else
  {
    v165 = 0;
  }
  v166 = &v165[8 * v161];
  v167 = &v165[8 * v164];
  *(_QWORD *)v166 = a1[27];
  v158 = v166 + 8;
  if (v140 != v159)
  {
    v168 = v140 - v159 - 8;
    if (v168 < 0x58)
    {
      v169 = v140;
      goto LABEL_221;
    }
    if ((unint64_t)(v140 - &v165[v160]) < 0x20)
    {
      v169 = v140;
      goto LABEL_221;
    }
    v170 = (v168 >> 3) + 1;
    v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
    v169 = &v140[-v171];
    v166 -= v171;
    v172 = &v165[8 * v161 - 16];
    v173 = v140 - 16;
    v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v175 = *(_OWORD *)v173;
      *(v172 - 1) = *((_OWORD *)v173 - 1);
      *v172 = v175;
      v172 -= 2;
      v173 -= 32;
      v174 -= 4;
    }
    while (v174);
    if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_221:
        v176 = *((_QWORD *)v169 - 1);
        v169 -= 8;
        *((_QWORD *)v166 - 1) = v176;
        v166 -= 8;
      }
      while (v169 != v159);
    }
  }
  *a2 = v166;
  a2[1] = v158;
  a2[2] = v167;
  if (v159)
    operator delete(v159);
LABEL_224:
  a2[1] = v158;
}

void sub_20EB42D1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB42D5C(int64x2_t *a1, uint64_t a2)
{
  uint64_t *v3;
  int64x2_t result;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 200)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 391, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(uint64_t **)a2;
  }
  a1->i64[0] = *v3;
  a1->i64[1] = v3[1];
  a1[1].i64[0] = v3[2];
  a1[1].i64[1] = v3[3];
  a1[2].i64[0] = v3[4];
  a1[2].i64[1] = v3[5];
  a1[3].i64[0] = v3[6];
  a1[3].i64[1] = v3[7];
  a1[4].i64[0] = v3[8];
  a1[4].i64[1] = v3[9];
  a1[5].i64[0] = v3[10];
  a1[5].i64[1] = v3[11];
  a1[6].i64[0] = v3[12];
  a1[6].i64[1] = v3[13];
  a1[7].i64[0] = v3[14];
  a1[7].i64[1] = v3[15];
  a1[8].i64[0] = v3[16];
  a1[8].i64[1] = v3[17];
  a1[10].i64[1] = v3[18];
  a1[11].i64[0] = v3[19];
  a1[11].i64[1] = v3[20];
  a1[12].i64[0] = v3[21];
  a1[12].i64[1] = v3[22];
  a1[13].i64[0] = v3[23];
  a1[13].i64[1] = v3[24];
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[9] = result;
  a1[10].i8[0] = 0;
  return result;
}

double sub_20EB42EA0(uint64_t a1, double a2)
{
  __int128 v2;
  __int128 v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  _OWORD v12[4];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v2;
  v13 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 136);
  v14 = *(_OWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 144);
  v24 = *(_QWORD *)(a1 + 216);
  v23 = *(_OWORD *)(a1 + 200);
  v22 = *(_OWORD *)(a1 + 184);
  v21 = *(_OWORD *)(a1 + 168);
  v29 = 6;
  v30 = 0x7FF8000000000000;
  v31 = 0xFFEFFFFFFFFFFFFFLL;
  v32 = xmmword_2102E3C60;
  *(_QWORD *)&v4 = sub_20EB2BE70((uint64_t)v12, a2).n128_u64[0];
  if (v29 != -1)
  {
    if (v29 > 7)
    {
      if (v29 > 0xB)
      {
        if (v29 < 0xF)
          return v4;
        v5 = v28;
        if (!v28)
          return v4;
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
      }
      else if (v29 > 9)
      {
        if (v29 == 10)
          return v4;
        v5 = v27;
        if (!v27)
          return v4;
        v10 = (unint64_t *)&v27->__shared_owners_;
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
      }
      else
      {
        if (v29 != 9)
          return v4;
        v5 = v26;
        if (!v26)
          return v4;
        v8 = (unint64_t *)&v26->__shared_owners_;
        do
          v7 = __ldaxr(v8);
        while (__stlxr(v7 - 1, v8));
      }
    }
    else
    {
      if (v29 != 7)
        return v4;
      v5 = v25;
      if (!v25)
        return v4;
      v6 = (unint64_t *)&v25->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20EB43078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB4308C(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    while (1)
    {
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
        break;
      *(_QWORD *)v4 = *(_QWORD *)(a1 + 8 * v5);
      v4 += 8;
      a2[1] = v4;
      if (++v5 == 9)
        goto LABEL_32;
    }
    v7 = *a2;
    v8 = v4 - *a2;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v6 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *(_QWORD *)(a1 + 8 * v5);
      v15 = (uint64_t)(v14 + 8);
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v9);
      *(_QWORD *)(8 * v9) = *(_QWORD *)(a1 + 8 * v5);
      v15 = 8 * v9 + 8;
      v16 = v4 - v7;
      if (v4 == v7)
        goto LABEL_18;
    }
    v17 = v16 - 8;
    if (v17 < 0x168)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v20 = (v4 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v8 - 8 - v20] > &v13[v8 - 8])
    {
      v18 = v4;
      do
      {
LABEL_17:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v7);
      goto LABEL_18;
    }
    if (&v4[-v20 - 8] > v4 - 8)
    {
      v18 = v4;
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v13 - v8) < 0x20)
    {
      v18 = v4;
      goto LABEL_17;
    }
    v21 = (v17 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = &v4[-v22];
    v14 -= v22;
    v23 = &v13[8 * v9 - 16];
    v24 = v4 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    *a2 = v14;
    a2[1] = (char *)v15;
    a2[2] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
    v4 = (char *)v15;
    a2[1] = (char *)v15;
    ++v5;
  }
  while (v5 != 9);
LABEL_32:
  v27 = (_QWORD *)(a1 + 72);
  v28 = (_QWORD *)(a1 + 144);
  do
  {
    v30 = (unint64_t)a2[2];
    if ((unint64_t)v4 < v30)
    {
      *(_QWORD *)v4 = *v27;
      v29 = (uint64_t)(v4 + 8);
      goto LABEL_34;
    }
    v31 = *a2;
    v32 = v4 - *a2;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_20E867F44();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = *v27;
      v29 = (uint64_t)(v38 + 8);
      v39 = v4 - v31;
      if (v4 == v31)
        goto LABEL_50;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = *v27;
      v29 = 8 * v33 + 8;
      v39 = v4 - v31;
      if (v4 == v31)
        goto LABEL_50;
    }
    v40 = v39 - 8;
    if (v40 >= 0x168)
    {
      v43 = (v4 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
      if (&v37[v32 - 8 - v43] > &v37[v32 - 8])
      {
        v41 = v4;
      }
      else if (&v4[-v43 - 8] > v4 - 8)
      {
        v41 = v4;
      }
      else if ((unint64_t)(v4 - v37 - v32) >= 0x20)
      {
        v44 = (v40 >> 3) + 1;
        v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v4[-v45];
        v38 -= v45;
        v46 = &v37[8 * v33 - 16];
        v47 = v4 - 16;
        v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *(_OWORD *)v47;
          *(v46 - 1) = *((_OWORD *)v47 - 1);
          *v46 = v49;
          v46 -= 2;
          v47 -= 32;
          v48 -= 4;
        }
        while (v48);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
      }
      else
      {
        v41 = v4;
      }
    }
    else
    {
      v41 = v4;
    }
    do
    {
      v42 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v38 - 1) = v42;
      v38 -= 8;
    }
    while (v41 != v31);
LABEL_50:
    *a2 = v38;
    a2[1] = (char *)v29;
    a2[2] = &v37[8 * v36];
    if (v31)
      operator delete(v31);
LABEL_34:
    a2[1] = (char *)v29;
    ++v27;
    v4 = (char *)v29;
  }
  while (v27 != v28);
}

void sub_20EB43438(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20EB43460(int64x2_t *a1, uint64_t a2)
{
  uint64_t *v3;
  int64x2_t result;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 144)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 448, (uint64_t)"data.size() == total_size", 25, (uint64_t)&unk_210254955, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(uint64_t **)a2;
  }
  a1->i64[0] = *v3;
  a1->i64[1] = v3[1];
  a1[1].i64[0] = v3[2];
  a1[1].i64[1] = v3[3];
  a1[2].i64[0] = v3[4];
  a1[2].i64[1] = v3[5];
  a1[3].i64[0] = v3[6];
  a1[3].i64[1] = v3[7];
  a1[4].i64[0] = v3[8];
  a1[4].i64[1] = v3[9];
  a1[5].i64[0] = v3[10];
  a1[5].i64[1] = v3[11];
  a1[6].i64[0] = v3[12];
  a1[6].i64[1] = v3[13];
  a1[7].i64[0] = v3[14];
  a1[7].i64[1] = v3[15];
  a1[8].i64[0] = v3[16];
  a1[8].i64[1] = v3[17];
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[9] = result;
  a1[10].i8[0] = 0;
  return result;
}

double sub_20EB4356C(uint64_t a1, double a2)
{
  __int128 v2;
  __int128 v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  _OWORD v12[4];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v2;
  v13 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 136);
  v14 = *(_OWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 144);
  v25 = 1;
  v26 = 0x7FF8000000000000;
  v27 = 0xFFEFFFFFFFFFFFFFLL;
  v28 = xmmword_2102E3C60;
  *(_QWORD *)&v4 = sub_20EB2BE70((uint64_t)v12, a2).n128_u64[0];
  if (v25 != -1)
  {
    if (v25 > 7)
    {
      if (v25 > 0xB)
      {
        if (v25 < 0xF)
          return v4;
        v5 = v24;
        if (!v24)
          return v4;
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
      }
      else if (v25 > 9)
      {
        if (v25 == 10)
          return v4;
        v5 = v23;
        if (!v23)
          return v4;
        v10 = (unint64_t *)&v23->__shared_owners_;
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
      }
      else
      {
        if (v25 != 9)
          return v4;
        v5 = v22;
        if (!v22)
          return v4;
        v8 = (unint64_t *)&v22->__shared_owners_;
        do
          v7 = __ldaxr(v8);
        while (__stlxr(v7 - 1, v8));
      }
    }
    else
    {
      if (v25 != 7)
        return v4;
      v5 = v21;
      if (!v21)
        return v4;
      v6 = (unint64_t *)&v21->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20EB43720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB43734(double *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  double v9;
  uint64_t result;
  double v19;

  v9 = (*a1 + a1[4]) * 0.5;
  if (!a5)
  {
    _Q1 = *(float64x2_t *)a3;
    _D3 = *(_QWORD *)(a3 + 8);
    __asm { FMLA            D2, D3, V1.D[1] }
    v19 = v9 * (v9 * _D2);
    *(float64x2_t *)a2 = vdivq_f64(*(float64x2_t *)a3, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v19* (a1[35]+ v9 * a1[42]+ v19* (a1[36]+ v9 * a1[43]+ v19* (a1[37]+ v9 * a1[44]+ v19* (a1[38]+ v9 * a1[45]+ v19* (a1[39]+ v9 * a1[46]+ v19 * (a1[40] + v9 * a1[47] + v19 * (a1[41] + v9 * a1[48] + v19 * 0.0)))))))
                                          / 100.0
                                          + 1.0),
                                          0));
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    if (!a4)
      goto LABEL_7;
LABEL_6:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_7;
  }
  result = sub_20EB295B8((float64x2_t *)a2, (float64x2_t *)a5, 0, a3, a1 + 35, v9);
  if (!(_DWORD)result)
    return result;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  if (a4)
    goto LABEL_6;
LABEL_7:
  if (a6)
  {
    *(_QWORD *)(a6 + 64) = 0;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return 1;
}

BOOL sub_20EB438A4(double *a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  double v5;
  double v12;

  v3 = *(uint64_t *)&a3[1].f64[0];
  if (*(double *)&v3 >= 0.00000001)
  {
    _Q2 = vdivq_f64(*a3, (float64x2_t)vdupq_lane_s64(v3, 0));
    v5 = (*a1 + a1[4]) * 0.5;
    _D5 = _Q2.f64[1];
    __asm { FMLA            D4, D5, V2.D[1] }
    v12 = v5 * (_D4 * v5);
    *a2 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v12* (a1[21]+ v5 * a1[28]+ v12* (a1[22]+ v5 * a1[29]+ v12* (a1[23]+ v5 * a1[30]+ v12* (a1[24]+ v5 * a1[31]+ v12* (a1[25]+ v5 * a1[32]+ v12 * (a1[26] + v5 * a1[33] + v12 * (a1[27] + a1[34] * v5 + v12 * 0.0)))))))
                           / 100.0
                           + 1.0),
                           0));
  }
  return *(double *)&v3 >= 0.00000001;
}

uint64_t sub_20EB439AC(double *a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t result;
  double v11;
  double v12;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v24;
  double v26;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;

  v5 = *(uint64_t *)&a4[1].f64[0];
  if (*(double *)&v5 < 0.00000001)
    return 0;
  _Q0 = vdivq_f64(*a4, (float64x2_t)vdupq_lane_s64(v5, 0));
  v32 = _Q0;
  if (!a3)
  {
    v26 = (*a1 + a1[4]) * 0.5;
    _D3 = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v29 = v26 * (_D2 * v26);
    *a2 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v29* (a1[21]+ v26 * a1[28]+ v29* (a1[22]+ v26 * a1[29]+ v29* (a1[23]+ v26 * a1[30]+ v29* (a1[24]+ v26 * a1[31]+ v29* (a1[25]+ v26 * a1[32]+ v29 * (a1[26] + v26 * a1[33] + v29 * (a1[27] + a1[34] * v26 + v29 * 0.0)))))))
                           / 100.0
                           + 1.0),
                           0));
    if (!a5)
      return 1;
LABEL_9:
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
    return 1;
  }
  result = sub_20EB295B8(a2, &v30, 0, (uint64_t)&v32, a1 + 21, (*a1 + a1[4]) * 0.5);
  if ((_DWORD)result)
  {
    v11 = a4[1].f64[0];
    v12 = 1.0 / v11;
    _D0 = -a4->f64[1] / (v11 * v11);
    _V3.D[1] = v30.f64[1];
    _V4.D[1] = v31.f64[1];
    v16.f64[0] = 0.0;
    v17 = v12;
    v16.f64[1] = v12;
    v18 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v12, v30.f64[0]), v16, v30, 1);
    __asm { FMLA            D7, D0, V3.D[1] }
    v24 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v17, v31.f64[0]), v16, v31, 1);
    *(_QWORD *)(a3 + 16) = _D7;
    *(float64x2_t *)a3 = v18;
    __asm { FMLA            D2, D0, V4.D[1] }
    *(_QWORD *)(a3 + 40) = _D2;
    *(float64x2_t *)(a3 + 24) = v24;
    if (!a5)
      return 1;
    goto LABEL_9;
  }
  return result;
}

void sub_20EB43BB4()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 1025, (uint64_t)&unk_210254955, 0, (uint64_t)"Not implemented yet.", 20, (void (*)(void **))sub_21023DDB0);
  abort();
}

double sub_20EB43BF0(uint64_t a1, double a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *p_shared_owners;
  unint64_t *v14;
  _OWORD v16[4];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v2;
  v17 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v3;
  v19 = *(_OWORD *)(a1 + 88);
  v20 = *(_OWORD *)(a1 + 104);
  v21 = *(_OWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 136);
  v18 = *(_OWORD *)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 160);
  v23 = *(_OWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 312);
  v33 = *(_OWORD *)(a1 + 296);
  v34 = v4;
  v5 = *(_OWORD *)(a1 + 280);
  v31 = *(_OWORD *)(a1 + 264);
  v32 = v5;
  v6 = *(_OWORD *)(a1 + 376);
  v37 = *(_OWORD *)(a1 + 360);
  v38 = v6;
  v7 = *(_OWORD *)(a1 + 344);
  v35 = *(_OWORD *)(a1 + 328);
  v36 = v7;
  v26 = *(_OWORD *)(a1 + 184);
  v25 = *(_OWORD *)(a1 + 168);
  v30 = *(_OWORD *)(a1 + 248);
  v29 = *(_OWORD *)(a1 + 232);
  v28 = *(_OWORD *)(a1 + 216);
  v27 = *(_OWORD *)(a1 + 200);
  v43 = 13;
  v44 = 0x7FF8000000000000;
  v45 = 0xFFEFFFFFFFFFFFFFLL;
  v46 = xmmword_2102E3C60;
  *(_QWORD *)&v8 = sub_20EB2BE70((uint64_t)v16, a2).n128_u64[0];
  if (v43 != -1)
  {
    if (v43 > 7)
    {
      if (v43 > 0xB)
      {
        if (v43 < 0xF)
          return v8;
        v9 = v42;
        if (!v42)
          return v8;
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
      }
      else if (v43 > 9)
      {
        if (v43 == 10)
          return v8;
        v9 = v41;
        if (!v41)
          return v8;
        v14 = (unint64_t *)&v41->__shared_owners_;
        do
          v11 = __ldaxr(v14);
        while (__stlxr(v11 - 1, v14));
      }
      else
      {
        if (v43 != 9)
          return v8;
        v9 = v40;
        if (!v40)
          return v8;
        v12 = (unint64_t *)&v40->__shared_owners_;
        do
          v11 = __ldaxr(v12);
        while (__stlxr(v11 - 1, v12));
      }
    }
    else
    {
      if (v43 != 7)
        return v8;
      v9 = v39;
      if (!v39)
        return v8;
      v10 = (unint64_t *)&v39->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
    }
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_20EB43E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB43E14(uint64_t a1, double a2, double a3, double a4, double a5, int64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v33;
  unint64_t *p_shared_owners;
  unint64_t *v35;
  _OWORD v36[4];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int8x16_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;

  v8 = 0;
  v67 = *MEMORY[0x24BDAC8D0];
  do
  {
    v9 = (*(_QWORD *)(a1 + v8) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v8 == 64;
    v8 += 8;
  }
  while (!v10);
  if (!v9)
    return 0;
  v11 = 72;
  do
  {
    v12 = (*(_QWORD *)(a1 + v11) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v11) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v11 == 136;
    v11 += 8;
  }
  while (!v10);
  if (!v12
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v13 = 280;
  do
  {
    v14 = (*(_QWORD *)(a1 + v13) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v13 == 384;
    v13 += 8;
  }
  while (!v10);
  if (!v14)
    return 0;
  v15 = 168;
  do
  {
    v16 = (*(_QWORD *)(a1 + v15) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v15) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v15 == 272;
    v15 += 8;
  }
  while (!v10);
  if (!v16)
    return 0;
  v17 = *(_OWORD *)(a1 + 48);
  v36[2] = *(_OWORD *)(a1 + 32);
  v36[3] = v17;
  v18 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v18;
  v19 = *(_OWORD *)(a1 + 72);
  v39 = *(_OWORD *)(a1 + 88);
  v20 = *(int8x16_t *)(a1 + 120);
  v40 = *(_OWORD *)(a1 + 104);
  v41 = v20;
  v38 = v19;
  v43 = *(_OWORD *)(a1 + 144);
  v21 = *(_OWORD *)(a1 + 312);
  v53 = *(_OWORD *)(a1 + 296);
  v54 = v21;
  v22 = *(_OWORD *)(a1 + 280);
  v51 = *(_OWORD *)(a1 + 264);
  v52 = v22;
  v23 = *(_OWORD *)(a1 + 376);
  v57 = *(_OWORD *)(a1 + 360);
  v58 = v23;
  v24 = *(__n128 *)(a1 + 344);
  v55 = *(_OWORD *)(a1 + 328);
  v56 = v24;
  v25 = *(_OWORD *)(a1 + 168);
  v46 = *(_OWORD *)(a1 + 184);
  v45 = v25;
  v26 = *(_OWORD *)(a1 + 232);
  v50 = *(_OWORD *)(a1 + 248);
  v49 = v26;
  v27 = *(__n128 *)(a1 + 200);
  v48 = *(_OWORD *)(a1 + 216);
  v37 = *(_QWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 136);
  v44 = *(_BYTE *)(a1 + 160);
  v47 = v27;
  v63 = 13;
  v64 = 0x7FF8000000000000;
  v65 = 0xFFEFFFFFFFFFFFFFLL;
  v24.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v66 = xmmword_2102E3C60;
  v24.n128_u64[0] = 0.5;
  v28 = sub_20EB44B68((uint64_t)v36, 0, 0, v24, v27, v20, a5, a6, a7, a8);
  if (v63 != -1)
  {
    if (v63 > 7)
    {
      if (v63 > 0xB)
      {
        if (v63 < 0xF)
          return v28;
        v29 = v62;
        if (!v62)
          return v28;
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
      }
      else if (v63 > 9)
      {
        if (v63 == 10)
          return v28;
        v29 = v61;
        if (!v61)
          return v28;
        v35 = (unint64_t *)&v61->__shared_owners_;
        do
          v31 = __ldaxr(v35);
        while (__stlxr(v31 - 1, v35));
      }
      else
      {
        if (v63 != 9)
          return v28;
        v29 = v60;
        if (!v60)
          return v28;
        v33 = (unint64_t *)&v60->__shared_owners_;
        do
          v31 = __ldaxr(v33);
        while (__stlxr(v31 - 1, v33));
      }
    }
    else
    {
      if (v63 != 7)
        return v28;
      v29 = v59;
      if (!v59)
        return v28;
      v30 = (unint64_t *)&v59->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v28;
}

void sub_20EB44144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20EB44158(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 3)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 3);
    if (v14 >> 61)
      sub_20E867F44();
    v15 = v12 - v6;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_20E877A38();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
      v18 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
      v18 = 0;
    }
    v32 = 8 * a5;
    v57 = 8 * a5;
    v33 = &v18[8 * (v7 >> 3)];
    v34 = v18;
    memcpy(v33, __src, v32);
    v35 = v33;
    if ((void *)v6 != a2)
    {
      v36 = v17;
      v35 = v33;
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_50;
      v36 = v17;
      v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_50;
      v37 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = &v17[-v38];
      v35 = &v33[-v38];
      v39 = 8 * (v7 >> 3) - 16;
      v40 = &v34[v39];
      v41 = (__int128 *)(v6 + v39);
      v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 4;
      }
      while (v42);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_50:
        do
        {
          v44 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v35 - 1) = v44;
          v35 -= 8;
        }
        while (v36 != (char *)v6);
      }
    }
    v45 = &v34[8 * v16];
    v46 = v13 - (_QWORD)v17;
    if (v46)
      memmove(&v33[v57], v17, v46);
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6)
      operator delete((void *)v6);
    return v33;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[8 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v20], a4 - v21);
      v8 = (char *)v56;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[8 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 3;
  v27 = (uint64_t *)(v23 - 8 * a5);
  v28 = (_QWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFF8) + v25;
    v30 = v29 + v6 + 8;
    if (v13 > v30)
      v30 = v13;
    v31 = v30 + ~v6 - v29;
    if (v31 < 0x58)
    {
      v28 = (_QWORD *)v23;
      do
      {
LABEL_39:
        v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    v28 = (_QWORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20)
      goto LABEL_39;
    v47 = (v31 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = (uint64_t *)((char *)v27 + v48);
    v28 = (_QWORD *)(v23 + v48);
    v49 = (_OWORD *)(v23 + 16);
    v50 = (__int128 *)(8 * v26 + 8 * (v7 >> 3) + v6 + 16);
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_39;
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v54 = v8;
    memmove((void *)(v23 - 8 * v26), v8, v25);
    v8 = v54;
  }
  if (v21 != __src)
  {
    v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

void sub_20EB4448C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EB4449C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EB444CC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  a1[3] = &off_24C9C2508;
  v2 = a1[10];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C808070C27FLL);
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

uint64_t sub_20EB4453C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int *v5;
  int v6;
  int v7;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  char *v67;
  char *v68;
  std::logic_error *exception;
  int v72;
  const void **v73;
  size_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  const void *v78;
  _BYTE v79[25];
  _BYTE v80[7];

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  switch(v2)
  {
    case 7:
      if (v3 >= 0)
        v5 = (int *)a2;
      else
        v5 = (int *)*a2;
      v6 = *v5;
      v7 = *(int *)((char *)v5 + 3);
      if (v6 != 1278554441 || v7 != 1936614732)
        goto LABEL_140;
      v9 = 10;
      break;
    case 10:
      if (v3 >= 0)
        v54 = a2;
      else
        v54 = (uint64_t *)*a2;
      v55 = *v54;
      v56 = *((unsigned __int16 *)v54 + 4);
      if (v55 != 0x654C7261656E694CLL || v56 != 29550)
        goto LABEL_140;
      v9 = 0;
      break;
    case 11:
      if (v3 >= 0)
        v39 = a2;
      else
        v39 = (uint64_t *)*a2;
      v40 = *v39;
      v41 = *(uint64_t *)((char *)v39 + 3);
      if (v40 != 0x4C65796568736946 || v41 != 0x736E654C65796568)
        goto LABEL_140;
      goto LABEL_87;
    case 14:
      if (v3 >= 0)
        v49 = a2;
      else
        v49 = (uint64_t *)*a2;
      if (*v49 == 0x72746E65636E6F4ELL && *(uint64_t *)((char *)v49 + 6) == 0x736E654C63697274)
      {
        v9 = 4;
      }
      else
      {
        v51 = *v49;
        v52 = *(uint64_t *)((char *)v49 + 6);
        if (v51 != 0x4C65796568736946 || v52 != 0x37524B736E654C65)
          goto LABEL_140;
        v9 = 5;
      }
      break;
    case 15:
      if (v3 >= 0)
        v28 = a2;
      else
        v28 = (uint64_t *)*a2;
      if (*v28 == 0x7463657073726550 && *(uint64_t *)((char *)v28 + 7) == 0x736E654C65766974)
      {
        v9 = 1;
      }
      else
      {
        v30 = *v28;
        v31 = *(uint64_t *)((char *)v28 + 7);
        if (v30 != 0x4C65796568736946 || v31 != 0x3752444B736E654CLL)
          goto LABEL_140;
        v9 = 7;
      }
      break;
    case 16:
      if (v3 >= 0)
        v33 = a2;
      else
        v33 = (uint64_t *)*a2;
      v34 = *v33 == 0x4C65796568736946 && v33[1] == 0x3174736146736E65;
      if (v34 || (*v33 == 0x4C65796568736946 ? (v35 = v33[1] == 0x3274736146736E65) : (v35 = 0), v35))
      {
LABEL_87:
        v9 = 2;
      }
      else
      {
        v37 = *v33;
        v36 = v33[1];
        if (v37 != 0x4C65796568736946 || v36 != 0x374352444B736E65)
        {
LABEL_140:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          v72 = *((char *)a2 + 23);
          v73 = (const void **)a2;
          if (v72 >= 0)
            v74 = *((unsigned __int8 *)a2 + 23);
          else
            v74 = a2[1];
          v75 = v74 + 25;
          if (v74 + 25 >= 0x7FFFFFFFFFFFFFF8)
            sub_20E860B7C();
          if (v75 > 0x16)
          {
            v77 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v75 | 7) != 0x17)
              v77 = v75 | 7;
            *(_QWORD *)&v79[8] = v74 + 25;
            *(_QWORD *)&v79[16] = (v77 + 1) | 0x8000000000000000;
            *(_QWORD *)v79 = operator new(v77 + 1);
            qmemcpy(*(void **)v79, "unsupported type string: ", 25);
            v76 = (_BYTE *)(*(_QWORD *)v79 + 25);
            if (!v74)
            {
LABEL_155:
              v76[v74] = 0;
              std::logic_error::logic_error(exception, (const std::string *)v79);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
              __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
            }
          }
          else
          {
            qmemcpy(v79, "unsupported type string: ", sizeof(v79));
            v76 = v80;
          }
          if (v72 >= 0)
            v78 = v73;
          else
            v78 = *v73;
          memmove(v76, v78, v74);
          goto LABEL_155;
        }
        v9 = 11;
      }
      break;
    case 17:
      if (v3 >= 0)
        v58 = a2;
      else
        v58 = (uint64_t *)*a2;
      v59 = *v58;
      v60 = v58[1];
      v61 = *((unsigned __int8 *)v58 + 16);
      if (v59 != 0x72746E65636E6F4ELL || v60 != 0x524B736E654C6369 || v61 != 55)
        goto LABEL_140;
      v9 = 6;
      break;
    case 18:
      if (v3 >= 0)
        v43 = a2;
      else
        v43 = (uint64_t *)*a2;
      v44 = *v43;
      v45 = v43[1];
      v46 = *((unsigned __int16 *)v43 + 8);
      if (v44 != 0x72746E65636E6F4ELL || v45 != 0x444B736E654C6369 || v46 != 14162)
        goto LABEL_140;
      v9 = 8;
      break;
    case 19:
      if (v3 >= 0)
        v22 = a2;
      else
        v22 = (uint64_t *)*a2;
      v23 = *v22;
      v24 = v22[1];
      v25 = *(uint64_t *)((char *)v22 + 11);
      if (v23 != 0x72746E65636E6F4ELL || v24 != 0x444B736E654C6369 || v25 != 0x374352444B736E65)
        goto LABEL_140;
      v9 = 12;
      break;
    case 20:
      if (v3 >= 0)
        v10 = a2;
      else
        v10 = (uint64_t *)*a2;
      v11 = *v10;
      v12 = v10[1];
      v13 = *((_DWORD *)v10 + 4);
      if (v11 != 0x4C65796568736946 || v12 != 0x656D726548736E65 || v13 != 877808499)
        goto LABEL_140;
      v9 = 9;
      break;
    case 22:
      if (v3 >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      v17 = *v16;
      v18 = v16[1];
      v19 = *(uint64_t *)((char *)v16 + 14);
      if (v17 != 0x507265766F796C46 || v18 != 0x6974636570737265 || v19 != 0x736E654C65766974)
        goto LABEL_140;
      v9 = 3;
      break;
    default:
      goto LABEL_140;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = v9;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v65 = (_BYTE *)a2[3];
  v64 = (_BYTE *)a2[4];
  v66 = v64 - v65;
  if (v64 != v65)
  {
    if (v66 < 0)
      sub_20E867F44();
    v67 = (char *)operator new(v64 - v65);
    *(_QWORD *)(a1 + 8) = v67;
    *(_QWORD *)(a1 + 16) = v67;
    v68 = &v67[8 * (v66 >> 3)];
    *(_QWORD *)(a1 + 24) = v68;
    memcpy(v67, v65, v66);
    *(_QWORD *)(a1 + 16) = v68;
  }
  return a1;
}

void sub_20EB44B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  int v14;
  void *v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v14 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v14)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB44B68(uint64_t a1, uint64_t a2, char a3, __n128 a4, __n128 a5, int8x16_t a6, double a7, int64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  double v12;
  unsigned int v14;
  double v15;
  uint64_t v16;
  int64x2_t *v17;
  double v18;
  unsigned int v19;
  double v20;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __double2 v26;
  unsigned int v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  char v32;
  double v33;
  double v35;
  float64x2_t v40;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  int v56;
  double v57;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  int v65;
  int v66;
  double v67;
  double v71;
  double v72;
  int v73;
  int v74;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float64x2_t v88;
  double v89;
  double v91;
  double v92;
  int v93;
  double v94;
  BOOL v95;
  float64x2_t v96;
  double v97;
  double v99;
  double v100;
  int v101;
  double v102;
  int64x2_t v103;
  double v104;
  BOOL v105;
  float64x2_t v106;
  double v107;
  double v109;
  double v110;
  int v111;
  double v112;
  int64x2_t v113;
  float64x2_t v114;
  int32x4_t v115;
  double v116;
  float64x2_t v119;
  uint64_t v120;
  float64x2_t *v121;
  float64x2_t *v122;
  uint64_t v123;
  unsigned int v124;
  char v125;
  double v127;
  double v130;
  double *v131;
  uint64_t v132;
  float64x2_t *v133;
  float64x2_t *v134;
  uint64_t v135;
  char v136;
  double v137;
  float64x2_t *v138;
  float64x2_t *v139;
  uint64_t v140;
  float64x2_t *v141;
  float64x2_t *v142;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  int v151;
  int v152;
  double v153;
  double *v154;
  double *v155;
  float64x2_t *v156;
  float64x2_t *v157;
  uint64_t v158;
  double *v159;
  float64x2_t *v160;
  uint64_t v161;
  float64x2_t *v162;
  float64x2_t *v163;
  uint64_t v164;
  double v165;
  int8x16_t v166;
  __int128 v167;
  double v171;
  int v172;
  __int128 v175;
  float64x2_t v176;
  int64x2_t v177;
  BOOL v178;
  float64x2_t v179;
  double v180;
  double v182;
  double v183;
  int v184;
  double v185;
  float64x2_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  float64x2_t v191;
  double v192;
  float64x2_t v196;
  float64x2_t v197;
  double v198;
  BOOL v199;
  int v200;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  int v209;
  int v210;
  double v211;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  int v220;
  int v221;
  double v222;
  double v223;
  float64x2_t v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  BOOL v231;
  float64x2_t v232;
  double v233;
  double v235;
  double v236;
  int v237;
  double v238;
  float64x2_t v239;
  BOOL v240;
  float64x2_t v241;
  double v242;
  double v244;
  double v245;
  int v246;
  double v247;
  float64x2_t v248;
  double v254;
  double v255;
  int64x2_t v256;
  double v257;
  float64x2_t v258;
  double v259;
  float64x2_t v260;
  double v261;
  double v262;
  double v263;
  unsigned int v264;
  int8x16_t v265;
  int32x4_t v266;
  double v267;
  uint64_t v268;
  float64x2_t *v269;
  float64x2_t *v270;
  uint64_t v271;
  float64x2_t *v272;
  float64x2_t *v273;
  uint64_t v274;
  float64x2_t *v275;
  float64x2_t *v276;
  double *v277;
  uint64_t v278;
  float64x2_t *v279;
  float64x2_t *v280;
  uint64_t v281;
  char v282;
  double *v283;
  double *v284;
  float64x2_t *v285;
  float64x2_t *v286;
  uint64_t v287;
  double *v288;
  uint64_t v289;
  float64x2_t *v290;
  uint64_t v291;
  float64x2_t *v292;
  uint64_t v293;
  float64x2_t *v294;
  _QWORD *f64;
  double v296;
  int8x16_t v297;
  __int128 v298;
  double v302;
  int v303;
  __int128 v306;
  float64x2_t v307;
  int64x2_t v308;
  double v309;
  double v313;
  unsigned __int8 v314;
  int v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  size_t v320;
  const char *v321;
  unsigned __int8 v322;
  const char *v323;
  size_t v324;
  _BYTE *v325;
  const char *v326;
  unint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  double v337;
  size_t v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  std::__shared_weak_count *v341;
  unint64_t *p_shared_owners;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  void *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  float *v377;
  float *v378;
  __n128 v379;
  double v380;
  __n128 v381;
  float64x2_t v382;
  float64x2_t v383;
  uint64_t v384;
  float64x2_t v385;
  double __x;
  float64x2_t *v387;
  float64x2_t *p_sinval;
  float64x2_t *v389;
  float64x2_t *v390;
  uint64_t v391;
  int64x2_t v392;
  float64_t v393;
  int64x2_t v394;
  float64_t v395;
  float64x2_t v396;
  uint64_t v397;
  int8x16_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int8x16_t v401;
  std::__shared_weak_count *v402;
  double sinval;
  double v404;
  float64x2_t v405;
  _BYTE v406[48];
  __int128 v407;
  uint64_t v408;
  uint64_t v409;

  v12 = a4.n128_f64[0];
  v409 = *MEMORY[0x24BDAC8D0];
  v14 = *(_DWORD *)(a1 + 992);
  if (v14 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_732;
    }
    v14 = *(_DWORD *)(a1 + 992);
    if (v14 <= 7)
    {
LABEL_3:
      if (!v14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (v14 <= 7)
  {
    goto LABEL_3;
  }
  if (v14 >= 0xF)
  {
    a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
    v381 = a4;
    if (v14 != -1)
      goto LABEL_9;
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      if (!*(_DWORD *)(a1 + 992))
      {
LABEL_4:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      goto LABEL_9;
    }
LABEL_732:
    abort();
  }
LABEL_8:
  a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v381 = a4;
LABEL_9:
  if (a3)
  {
    v15 = *(double *)&a2;
    goto LABEL_11;
  }
  a5.n128_u64[0] = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v260.f64[0] = v381.n128_u64[0];
  v379 = a5;
  *(_QWORD *)&v260.f64[1] = a5.n128_u64[0];
  v261 = vmaxnmvq_f64(v260);
  if (v261 <= 0.0)
    return 0;
  v378 = (float *)(a1 + 204);
  v262 = -1.0;
  v263 = 0.0;
  while (1)
  {
    v264 = *(_DWORD *)(a1 + 992);
    if (v264 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v264 = *(_DWORD *)(a1 + 992);
      v265.i64[1] = v381.n128_i64[1];
      *(double *)v265.i64 = v381.n128_f64[0] + v263;
      if (v264 <= 7)
      {
LABEL_521:
        if (!v264)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        a6.i64[0] = *(_QWORD *)(a1 + 80);
        v266 = (int32x4_t)v379;
        v405.f64[0] = *(double *)(a1 + 88)
                    + *(double *)v265.i64 * *(double *)(a1 + 72)
                    + v379.n128_f64[0] * *(double *)a6.i64;
        v267 = *(double *)(a1 + 112);
        *(double *)v265.i64 = v379.n128_f64[0] * *(double *)(a1 + 104) + v267;
LABEL_526:
        *(_QWORD *)&v405.f64[1] = v265.i64[0];
LABEL_527:
        v387 = &v385;
        p_sinval = &v405;
        v390 = 0;
        v391 = 0;
        v389 = 0;
        if (v264 <= 7)
          goto LABEL_528;
        goto LABEL_569;
      }
    }
    else
    {
      v265.i64[1] = v381.n128_i64[1];
      *(double *)v265.i64 = v381.n128_f64[0] + v263;
      if (v264 <= 7)
        goto LABEL_521;
    }
    a6.i64[0] = *(_QWORD *)(a1 + 80);
    v266 = (int32x4_t)v379;
    v405.f64[0] = *(double *)(a1 + 88)
                + *(double *)v265.i64 * *(double *)(a1 + 72)
                + v379.n128_f64[0] * *(double *)a6.i64;
    v267 = *(double *)(a1 + 112);
    *(double *)v265.i64 = v379.n128_f64[0] * *(double *)(a1 + 104) + v267;
    if (v264 < 0xE)
      goto LABEL_526;
    v405.f64[1] = v379.n128_f64[0] * *(double *)(a1 + 104) + v267;
    if (v264 == 14)
      goto LABEL_527;
    v272 = &v385;
    v273 = &v405;
    v387 = &v385;
    p_sinval = &v405;
    v390 = 0;
    v391 = 0;
    v389 = 0;
    if (v264 != -1)
    {
      v274 = 0;
      v275 = 0;
      v276 = 0;
LABEL_596:
      v282 = sub_20EB3CED8(a1, (uint64_t)v272, v273, v276, v275, v274);
LABEL_610:
      if ((v282 & 1) == 0)
        goto LABEL_638;
      goto LABEL_611;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v264 = *(_DWORD *)(a1 + 992);
    if (v264 <= 7)
    {
LABEL_528:
      if (v264 > 3)
      {
        v278 = (uint64_t)v387;
        v277 = (double *)p_sinval;
        v279 = v389;
        v280 = v390;
        v281 = v391;
        if (v264 > 5)
        {
          if (v264 == 6)
            v282 = sub_20EB41C58((double *)a1, (uint64_t)v387, p_sinval->f64, v389, (uint64_t)v390, v391);
          else
            v282 = sub_20EB306CC(a1, (uint64_t)v387, p_sinval, v389, (unint64_t)v390, v391, *(double *)v265.i64, v267, a6, (int8x16_t)v266, *(double *)a8.i64, a9.f64[0], a10);
        }
        else if (v264 == 5)
        {
          if (v389)
          {
            v389->f64[0] = 0.0;
            v279->f64[1] = 0.0;
            v279[1].f64[0] = 0.0;
          }
          if (v281)
          {
            *(_QWORD *)(v281 + 64) = 0;
            *(_OWORD *)(v281 + 32) = 0u;
            *(_OWORD *)(v281 + 48) = 0u;
            *(_OWORD *)v281 = 0u;
            *(_OWORD *)(v281 + 16) = 0u;
          }
          if (v280)
            v282 = sub_20EB28F10(v278, (uint64_t)v280, v277, a1 + 168, 5);
          else
            v282 = sub_20EB2886C(v278, v277, a1 + 168, 5);
        }
        else
        {
          if (v389)
          {
            v389->f64[0] = 0.0;
            v279->f64[1] = 0.0;
            v279[1].f64[0] = 0.0;
          }
          if (v281)
          {
            *(_QWORD *)(v281 + 64) = 0;
            v265 = 0uLL;
            *(_OWORD *)(v281 + 32) = 0u;
            *(_OWORD *)(v281 + 48) = 0u;
            *(_OWORD *)v281 = 0u;
            *(_OWORD *)(v281 + 16) = 0u;
          }
          if (v280)
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              v265.i64[0] = sub_20EB27C0C((uint64_t)v378, (double *)(a1 + 168), 0x32uLL, v265, v267, a6, (int8x16_t)v266).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v282 = sub_20EA8D684(v278, (uint64_t)v277, (int64x2_t *)(a1 + 168), v378, v280, 5, *(double *)v265.i64, v267, *(double *)a6.i64, *(double *)v266.i64, *(double *)a8.i64, a9.f64[0], a10);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              v265.i64[0] = sub_20EB27C0C((uint64_t)v378, (double *)(a1 + 168), 0x32uLL, v265, v267, a6, (int8x16_t)v266).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v282 = sub_20EA8D684(v278, (uint64_t)v277, (int64x2_t *)(a1 + 168), v378, 0, 5, *(double *)v265.i64, v267, *(double *)a6.i64, *(double *)v266.i64, *(double *)a8.i64, a9.f64[0], a10);
          }
        }
      }
      else
      {
        if (v264 <= 1)
        {
          if (!v264)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v268 = (uint64_t)v387;
          v270 = v389;
          v269 = v390;
          v271 = v391;
          *v387 = *p_sinval;
          *(_QWORD *)(v268 + 16) = 0x3FF0000000000000;
          if (v270)
          {
            v270->f64[0] = 0.0;
            v270->f64[1] = 0.0;
            v270[1].f64[0] = 0.0;
          }
          if (v269)
          {
            *v269 = (float64x2_t)xmmword_210312EC0;
            v269[1] = (float64x2_t)unk_210312ED0;
            v269[2] = (float64x2_t)xmmword_210312EE0;
          }
          if (v271)
          {
            *(_QWORD *)(v271 + 64) = 0;
            *(_OWORD *)(v271 + 32) = 0u;
            *(_OWORD *)(v271 + 48) = 0u;
            *(_OWORD *)v271 = 0u;
            *(_OWORD *)(v271 + 16) = 0u;
          }
          goto LABEL_611;
        }
        if (v264 == 2)
        {
          v282 = sub_20EA8D22C((uint64_t)&v387, a1);
        }
        else
        {
          v283 = (double *)v387;
          v284 = (double *)p_sinval;
          v286 = v389;
          v285 = v390;
          v287 = v391;
          if (v389)
          {
            v389->f64[0] = 0.0;
            v286->f64[1] = 0.0;
            v286[1].f64[0] = 0.0;
          }
          if (v287)
          {
            *(_QWORD *)(v287 + 64) = 0;
            v265.i64[0] = 0;
            *(_OWORD *)(v287 + 32) = 0u;
            *(_OWORD *)(v287 + 48) = 0u;
            *(_OWORD *)v287 = 0u;
            *(_OWORD *)(v287 + 16) = 0u;
          }
          if (v285)
            v282 = sub_20EB27398(v283, (uint64_t)v285, v284, (int64x2_t *)(a1 + 168), 20, *(double *)v265.i64, v267, *(double *)a6.i64, *(double *)v266.i64, a8);
          else
            v282 = sub_20EB23DF0((uint64_t)v283, v284, (int64x2_t *)(a1 + 168), 20, *(double *)v265.i64, v267, *(double *)a6.i64, *(double *)v266.i64, a8, a9);
        }
      }
      goto LABEL_610;
    }
LABEL_569:
    if (v264 <= 0xB)
    {
      v289 = (uint64_t)v387;
      v288 = (double *)p_sinval;
      v290 = v389;
      v275 = v390;
      v291 = v391;
      if (v264 > 9)
      {
        if (v264 == 10)
        {
          if (v389)
          {
            v389->f64[0] = 0.0;
            v290->f64[1] = 0.0;
            v290[1].f64[0] = 0.0;
          }
          if (v291)
          {
            *(_QWORD *)(v291 + 64) = 0;
            *(_OWORD *)(v291 + 32) = 0u;
            *(_OWORD *)(v291 + 48) = 0u;
            *(_OWORD *)v291 = 0u;
            *(_OWORD *)(v291 + 16) = 0u;
          }
          v296 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
          v282 = sub_20EB24F38(v289, (uint64_t)v288, a1 + 168, (double *)(a1 + 280), 0x14u, v296);
          if (v275)
          {
            if ((v282 & 1) == 0)
              goto LABEL_638;
            if (!sub_20EB2450C(&v383, (uint64_t)&v398, &v396, v289, (double *)(a1 + 168), v296))
              goto LABEL_638;
            v297.i64[0] = *(_QWORD *)(v289 + 16);
            *(_QWORD *)&v298 = v399.i64[0];
            _Q3 = v398;
            v401 = *(int8x16_t *)v289;
            v402 = (std::__shared_weak_count *)v297.i64[0];
            v397 = 0;
            *(_QWORD *)&_Q5.f64[0] = v297.i64[0];
            *(_QWORD *)&_Q5.f64[1] = v401.i64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v400, _Q5), (float64x2_t)vzip2q_s64(v400, v399), (float64x2_t)vextq_s8(v401, v297, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v399, (float64x2_t)v401), 1), (float64x2_t)v400, (float64x2_t)v401).f64[0], *(double *)v399.i64)) < 0.00000001)goto LABEL_638;
LABEL_595:
            *(_QWORD *)&v306 = vextq_s8(v398, v398, 8uLL).u64[0];
            _Q3.i64[1] = vextq_s8((int8x16_t)v399, (int8x16_t)v399, 8uLL).u64[0];
            *((_QWORD *)&v306 + 1) = v400.i64[0];
            *((_QWORD *)&v298 + 1) = vextq_s8((int8x16_t)v400, (int8x16_t)v400, 8uLL).u64[0];
            *(int8x16_t *)v406 = _Q3;
            *(_QWORD *)&v406[16] = v401.i64[0];
            *(_QWORD *)&v406[40] = vextq_s8(v401, v401, 8uLL).u64[0];
            *(_OWORD *)&v406[24] = v306;
            v408 = v297.i64[0];
            v407 = v298;
            sub_20E8BE424((uint64_t)&v392);
            v307.f64[0] = v393;
            v308 = vzip2q_s64(v392, v394);
            v307.f64[1] = v395;
            *(int64x2_t *)v275 = vzip1q_s64(v392, v394);
            v275[1] = (float64x2_t)v308;
            v275[2] = v307;
            goto LABEL_611;
          }
        }
        else
        {
          v282 = sub_20EB38E20(a1, (uint64_t)v387, p_sinval, v389, v390, v391);
        }
      }
      else if (v264 == 9)
      {
        v282 = sub_20EB35004(a1, (uint64_t)v387, p_sinval, v389, (unint64_t)v390, v391, *(double *)v265.i64, v267, *(double *)a6.i64, v266, (int32x4_t)a8);
      }
      else
      {
        if (v389)
        {
          v389->f64[0] = 0.0;
          v290->f64[1] = 0.0;
          v290[1].f64[0] = 0.0;
        }
        if (v291)
        {
          *(_QWORD *)(v291 + 64) = 0;
          v265.i64[0] = 0;
          *(_OWORD *)(v291 + 32) = 0u;
          *(_OWORD *)(v291 + 48) = 0u;
          *(_OWORD *)v291 = 0u;
          *(_OWORD *)(v291 + 16) = 0u;
        }
        if (v275)
        {
          v282 = sub_20EB277C4(v289, (uint64_t)v275, v288, a1 + 168, 20, *(double *)v265.i64, v267, *(double *)a6.i64, v266, (int32x4_t)a8);
        }
        else
        {
          v309 = sqrt(*v288 * *v288 + v288[1] * v288[1]);
          v282 = sub_20EB24018(v289, v288, (double *)(a1 + 168), 20, v309, v309, *(double *)a6.i64, v266, (int32x4_t)a8);
        }
      }
      goto LABEL_610;
    }
    if (v264 <= 0xD)
      break;
    v272 = v387;
    v273 = p_sinval;
    v276 = v389;
    v275 = v390;
    v274 = v391;
    if (v264 != 14)
      goto LABEL_596;
    if (v389)
    {
      v389->f64[0] = 0.0;
      v276->f64[1] = 0.0;
      v276[1].f64[0] = 0.0;
    }
    if (v274)
    {
      *(_QWORD *)(v274 + 64) = 0;
      *(_OWORD *)(v274 + 32) = 0u;
      *(_OWORD *)(v274 + 48) = 0u;
      *(_OWORD *)v274 = 0u;
      *(_OWORD *)(v274 + 16) = 0u;
    }
    v302 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    v303 = sub_20EB253A0((uint64_t)v272, (uint64_t)v273, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v302);
    if (v275)
    {
      if ((v303 & 1) == 0)
        goto LABEL_638;
      if (!sub_20EB2498C(&v383, (uint64_t)&v398, &v396, (uint64_t)v272, (double *)(a1 + 168), v302))
        goto LABEL_638;
      v297.i64[0] = *(_QWORD *)&v272[1].f64[0];
      *(_QWORD *)&v298 = v399.i64[0];
      _Q3 = v398;
      v401 = *(int8x16_t *)v272;
      v402 = (std::__shared_weak_count *)v297.i64[0];
      v397 = 0;
      *(_QWORD *)&_Q5.f64[0] = v297.i64[0];
      *(_QWORD *)&_Q5.f64[1] = v401.i64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v400, _Q5), (float64x2_t)vzip2q_s64(v400, v399), (float64x2_t)vextq_s8(v401, v297, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v399, (float64x2_t)v401), 1), (float64x2_t)v400, (float64x2_t)v401).f64[0], *(double *)v399.i64)) < 0.00000001)goto LABEL_638;
      goto LABEL_595;
    }
    if (!v303)
      goto LABEL_638;
LABEL_611:
    _V0.D[1] = v385.f64[1];
    _D2 = v385.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v313 = atan2(sqrt(_D1), __x);
    if (v313 <= v262)
      goto LABEL_638;
    v15 = v313;
    v263 = v263 + 1.0;
    v262 = v313;
    if (v263 >= v261)
      goto LABEL_639;
  }
  v292 = v390;
  v293 = v391;
  v294 = v389;
  f64 = (_QWORD *)v387->f64;
  if (v264 == 13)
  {
    v282 = sub_20EB43734((double *)a1, (uint64_t)v387, (uint64_t)p_sinval, v389, (uint64_t)v390, v391);
    goto LABEL_610;
  }
  if (v389)
  {
    v389->f64[0] = 0.0;
    v294->f64[1] = 0.0;
    v294[1].f64[0] = 0.0;
  }
  if (v293)
  {
    *(_QWORD *)(v293 + 64) = 0;
    *(_OWORD *)(v293 + 32) = 0u;
    *(_OWORD *)(v293 + 48) = 0u;
    *(_OWORD *)v293 = 0u;
    *(_OWORD *)(v293 + 16) = 0u;
  }
  *f64 = 0;
  f64[1] = 0;
  f64[2] = 0;
  if (v292)
  {
    v292[1] = 0u;
    v292[2] = 0u;
    *v292 = 0u;
  }
LABEL_638:
  v15 = v262;
LABEL_639:
  if (v15 < 0.0)
    return 0;
LABEL_11:
  v16 = 1;
  if (v15 < 0.0)
    return v16;
  v17 = (int64x2_t *)(a1 + 168);
  v18 = v12 * v12;
  v377 = (float *)(a1 + 204);
  v19 = *(_DWORD *)(a1 + 992);
  v20 = 0.0;
  while (2)
  {
    v26 = __sincos_stret(v20);
    v385 = (float64x2_t)*(unint64_t *)&v26.__sinval;
    __x = v26.__cosval;
    if (v19 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v19 = *(_DWORD *)(a1 + 992);
      if (v19 > 7)
        goto LABEL_28;
LABEL_15:
      if (v19 <= 3)
      {
        if (v19 <= 1)
        {
          if (!v19)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          if (__x < 0.00000001)
            return 0;
          _Q0 = (__double2)vmulq_n_f64(v385, 1.0 / __x);
          *(__double2 *)v406 = _Q0;
          v27 = *(_DWORD *)(a1 + 992);
          if (v27 != -1)
            goto LABEL_113;
          goto LABEL_20;
        }
        if (v19 == 2)
        {
          if (*(_DWORD *)(a1 + 212))
          {
            if (__x < 0.00000001)
              return 0;
            _Q2 = vmulq_n_f64(v385, 1.0 / __x);
            _D0 = vmuld_lane_f64(1.0 / __x, v385, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v44 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1)));
            v45 = *(float64x2_t *)(a1 + 192);
            v23 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
            v24 = vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2));
            _Q2 = vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v45, v45), _Q2.f64[0]), _Q2, 1);
            _Q0 = (__double2)vaddq_f64(vaddq_f64(vmulq_f64(v23, vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), v24)), _Q2), v44);
            *(double *)v406 = _Q0.__sinval;
          }
          else
          {
            if (__x < 0.00000001)
              return 0;
            _Q2 = vmulq_n_f64(v385, 1.0 / __x);
            _D0 = vmuld_lane_f64(1.0 / __x, v385, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v23.f64[0] = *(double *)(a1 + 184) * _D1;
            _Q0 = (__double2)vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(a1 + 176) + v23.f64[0]));
          }
LABEL_218:
          v119.f64[0] = *(double *)(a1 + 16)
                      + *(double *)a1 * _Q0.__sinval
                      + vmuld_lane_f64(*(double *)(a1 + 8), (float64x2_t)_Q0, 1);
          v119.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), (float64x2_t)_Q0, 1) + *(double *)(a1 + 40);
          v382 = v119;
          v27 = 2;
          goto LABEL_202;
        }
        _V0.D[1] = v385.f64[1];
        _D1 = v385.f64[1];
        __asm { FMLA            D7, D1, V0.D[1] }
        v71 = sqrt(_D7);
        v23.f64[0] = fabs(__x);
        v24.f64[0] = fabs(v71);
        v25.f64[0] = v23.f64[0] / v24.f64[0];
        if (v23.f64[0] >= v24.f64[0])
          v25.f64[0] = v24.f64[0] / v23.f64[0];
        v72 = (v24.f64[0] - v23.f64[0]) / (v23.f64[0] + v24.f64[0]);
        if (v23.f64[0] >= v24.f64[0])
          v72 = -v72;
        if (v25.f64[0] > 0.414213562)
          v73 = 1;
        else
          v73 = 2;
        if (v25.f64[0] > 0.414213562)
          v74 = -1;
        else
          v74 = 1;
        if (v25.f64[0] <= 0.414213562)
          v72 = v25.f64[0];
        if (_D7 >= 0.00000001)
        {
          if (v23.f64[0] < v24.f64[0])
            v74 = -v74;
          else
            v73 = v25.f64[0] > 0.414213562;
          v105 = v71 == INFINITY && v23.f64[0] == INFINITY;
          v106 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v72 * v72), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v72 * v72), (float64x2_t)xmmword_210315370), v72 * v72 * (v72 * v72))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v72 * v72), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v72 * v72), (float64x2_t)xmmword_210315380), v72 * v72 * (v72 * v72))), v72 * v72 * (v72 * v72) * (v72 * v72 * (v72 * v72))));
          v107 = v72 + v72 * vdivq_f64(v106, (float64x2_t)vdupq_laneq_s64((int64x2_t)v106, 1)).f64[0];
          if (v105)
            v107 = 0.785398163;
          if (v71 == 0.0 && __x == 0.0)
            v109 = 0.0;
          else
            v109 = v107;
          if (__x < 0.0)
          {
            v73 = 4 - v73;
            v74 = -v74;
          }
          if (v71 < 0.0)
            v73 = -v73;
          v110 = (double)v73;
          if (v71 >= 0.0)
            v111 = v74;
          else
            v111 = -v74;
          v112 = v110 * 3.061617e-17 + v110 * 0.785398163 + v109 * (double)v111;
          v24 = *(float64x2_t *)v17;
          v113 = *(int64x2_t *)(a1 + 184);
          v25 = (float64x2_t)vzip1q_s64(*v17, v113);
          v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, v113), v112 * v112)), v112 * v112);
          v75 = 1.0 / v71 * (v112 + v112 * (v23.f64[0] + vmuld_lane_f64(v112 * v112 * (v112 * v112), v23, 1)));
        }
        else
        {
          v75 = 1.0 / __x;
        }
        _Q0 = (__double2)vmulq_n_f64(v385, v75);
LABEL_200:
        v114.f64[0] = *(double *)(a1 + 16)
                    + *(double *)a1 * _Q0.__sinval
                    + vmuld_lane_f64(*(double *)(a1 + 8), (float64x2_t)_Q0, 1);
        v114.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), (float64x2_t)_Q0, 1) + *(double *)(a1 + 40);
        v382 = v114;
        v27 = 3;
        goto LABEL_201;
      }
      if (v19 > 5)
      {
        if (v19 != 6)
        {
          v32 = sub_20EB31FFC(a1, (float64x2_t *)v406, &v385);
          goto LABEL_111;
        }
        _Q2 = *(float64x2_t *)(a1 + 208);
        v46 = vaddq_f64(vdivq_f64(v385, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0)), *(float64x2_t *)(a1 + 192));
        v47 = sqrt(vaddvq_f64(vmulq_f64(v46, v46)));
        v24.f64[0] = *(double *)(a1 + 184) * v47;
        v23.f64[0] = v47 * (*(double *)(a1 + 176) + v24.f64[0]);
        _Q0 = (__double2)vaddq_f64(_Q2, vmulq_n_f64(v46, v47 * (v47 * (*(double *)(a1 + 168) + v23.f64[0])) + 1.0));
        *(__double2 *)v406 = _Q0;
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 != -1)
          goto LABEL_113;
        goto LABEL_20;
      }
      if (v19 == 5)
      {
        v23.f64[0] = v385.f64[1] * v385.f64[1];
        v33 = v385.f64[0] * v385.f64[0] + v385.f64[1] * v385.f64[1];
        if (v33 >= 0.00000001)
        {
          v83 = sqrt(v33);
          if (v83 <= __x)
          {
            v254 = v83 / __x * 0.785398163 - v83 / __x * (v83 / __x + -1.0) * (v83 / __x * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v83 <= -__x)
            {
              v85 = v83 / __x * 0.785398163 - v83 / __x * (-1.0 - v83 / __x) * (v83 / __x * -0.0663008339 + 0.244711287);
              v86 = 3.14159265;
            }
            else
            {
              v84 = fabs(__x / v83);
              v85 = __x / v83 * (v84 + -1.0) * (v84 * 0.0663008339 + 0.244711287) + __x / v83 * -0.785398163;
              v86 = 1.57079633;
            }
            v254 = v85 + v86;
          }
          v24 = *(float64x2_t *)v17;
          v256 = *(int64x2_t *)(a1 + 184);
          v25 = (float64x2_t)vzip1q_s64(*v17, v256);
          v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, v256), v254 * v254)), v254 * v254);
          v24.f64[0] = vmuld_lane_f64(v254 * v254 * (v254 * v254), v23, 1);
          v23.f64[0] = v254 * (v23.f64[0] + v24.f64[0]);
          v257 = (v254 + v23.f64[0]) / v83;
          *(double *)v406 = v385.f64[0] * v257;
          *(double *)&v406[8] = v385.f64[1] * v257;
          v27 = *(_DWORD *)(a1 + 992);
          if (v27 != -1)
            goto LABEL_113;
        }
        else
        {
          if (__x == 0.0)
            return 0;
          *(double *)v406 = v385.f64[0] * (1.0 / __x);
          *(double *)&v406[8] = v385.f64[1] * (1.0 / __x);
          v27 = *(_DWORD *)(a1 + 992);
          if (v27 != -1)
            goto LABEL_113;
        }
        goto LABEL_20;
      }
      _Q0.__cosval = v385.f64[1];
      _D1 = v385.f64[1];
      __asm { FMLA            D7, D1, V0.D[1] }
      v60 = sqrt(_D7);
      v61 = fabs(__x);
      v62 = fabs(v60);
      v63 = v61 / v62;
      if (v61 >= v62)
        v63 = v62 / v61;
      v64 = (v62 - v61) / (v61 + v62);
      if (v61 >= v62)
        v64 = -v64;
      if (v63 > 0.414213562)
        v65 = 1;
      else
        v65 = 2;
      if (v63 > 0.414213562)
        v66 = -1;
      else
        v66 = 1;
      if (v63 <= 0.414213562)
        v64 = v63;
      if (_D7 >= 0.00000001)
      {
        if (v61 < v62)
          v66 = -v66;
        else
          v65 = v63 > 0.414213562;
        v95 = v60 == INFINITY && v61 == INFINITY;
        v96 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v64 * v64), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v64 * v64), (float64x2_t)xmmword_210315370), v64 * v64 * (v64 * v64))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v64 * v64), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v64 * v64), (float64x2_t)xmmword_210315380), v64 * v64 * (v64 * v64))), v64 * v64 * (v64 * v64) * (v64 * v64 * (v64 * v64))));
        v97 = v64 + v64 * vdivq_f64(v96, (float64x2_t)vdupq_laneq_s64((int64x2_t)v96, 1)).f64[0];
        if (v95)
          v97 = 0.785398163;
        if (v60 == 0.0 && __x == 0.0)
          v99 = 0.0;
        else
          v99 = v97;
        if (__x < 0.0)
        {
          v65 = 4 - v65;
          v66 = -v66;
        }
        if (v60 < 0.0)
          v65 = -v65;
        v100 = (double)v65;
        if (v60 >= 0.0)
          v101 = v66;
        else
          v101 = -v66;
        v102 = v100 * 3.061617e-17 + v100 * 0.785398163 + v99 * (double)v101;
        v24 = *(float64x2_t *)v17;
        v103 = *(int64x2_t *)(a1 + 184);
        v25 = (float64x2_t)vzip1q_s64(*v17, v103);
        v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, v103), v102 * v102)), v102 * v102);
        v67 = 1.0 / v60 * (v102 + v102 * (v23.f64[0] + vmuld_lane_f64(v102 * v102 * (v102 * v102), v23, 1)));
      }
      else
      {
        v67 = 1.0 / __x;
      }
      v77 = vmulq_n_f64(v385, v67);
      v76 = *(double *)a1;
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = v77.f64[1];
      v78 = *(double *)(a1 + 16);
      v80 = *(double *)(a1 + 32);
      v79 = *(double *)(a1 + 40);
LABEL_176:
      v104 = v76 * v77.f64[0];
      v23.f64[0] = v25.f64[0] * v24.f64[0];
      _Q2.f64[0] = v78 + v104 + v25.f64[0] * v24.f64[0];
      _Q2.f64[1] = v24.f64[0] * v80 + v79;
      v382 = _Q2;
      v27 = 4;
      goto LABEL_202;
    }
    if (v19 <= 7)
      goto LABEL_15;
LABEL_28:
    if (v19 > 0xB)
    {
      if (v19 > 0xD)
      {
        if (v19 == 14)
          v32 = sub_20EB247C0((float64x2_t *)v406, (uint64_t)&v385, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v32 = sub_20EB3E39C(a1, (float64x2_t *)v406, &v385);
        goto LABEL_111;
      }
      if (v19 != 13 || __x < 0.00000001)
        return 0;
      _Q0 = vdivq_f64(v385, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0));
      v35 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
      _Q2 = vmulq_f64(_Q0, _Q0);
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      _Q2.f64[0] = v35 * (_Q2.f64[0] * v35);
      v25.f64[0] = *(float64_t *)(a1 + 224);
      v24.f64[0] = *(float64_t *)(a1 + 176);
      v23.f64[0] = v24.f64[0] + v35 * *(double *)(a1 + 232);
      _Q0 = (__double2)vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(_Q2.f64[0]* (*(double *)(a1 + 168)+ v35 * v25.f64[0]+ _Q2.f64[0]* (v23.f64[0]+ _Q2.f64[0]* (*(double *)(a1 + 184)+ v35 * *(double *)(a1 + 240)+ _Q2.f64[0]* (*(double *)(a1 + 192)+ v35 * *(double *)(a1 + 248)+ _Q2.f64[0]* (*(double *)(a1 + 200)+ v35 * *(double *)(a1 + 256)+ _Q2.f64[0]* (*(double *)(a1 + 208)
                                              + v35 * *(double *)(a1 + 264)
                                              + _Q2.f64[0]
                                              * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v35 + _Q2.f64[0] * 0.0)))))))
                                        / 100.0
                                        + 1.0),
                                        0));
      *(__double2 *)v406 = _Q0;
      v27 = *(_DWORD *)(a1 + 992);
      if (v27 == -1)
        goto LABEL_20;
LABEL_113:
      if (v27 > 7)
        goto LABEL_22;
      goto LABEL_114;
    }
    if (v19 <= 9)
    {
      if (v19 == 9)
      {
        v32 = sub_20EB3641C(a1, (float64x2_t *)v406, &v385);
        goto LABEL_111;
      }
      _Q0.__cosval = v385.f64[1];
      _D1 = v385.f64[1];
      __asm { FMLA            D7, D1, V0.D[1] }
      v50 = sqrt(_D7);
      v51 = fabs(__x);
      v52 = fabs(v50);
      v53 = v51 / v52;
      if (v51 >= v52)
        v53 = v52 / v51;
      v54 = (v52 - v51) / (v51 + v52);
      if (v51 >= v52)
        v54 = -v54;
      if (v53 > 0.414213562)
        v55 = 1;
      else
        v55 = 2;
      if (v53 > 0.414213562)
        v56 = -1;
      else
        v56 = 1;
      if (v53 <= 0.414213562)
        v54 = v53;
      if (_D7 >= 0.00000001)
      {
        if (v51 < v52)
          v56 = -v56;
        else
          v55 = v53 > 0.414213562;
        _ZF = v50 == INFINITY && v51 == INFINITY;
        v25 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v54 * v54), (float64x2_t)xmmword_210315340);
        v88 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v54 * v54), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v54 * v54), (float64x2_t)xmmword_210315370), v54 * v54 * (v54 * v54))), vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v54 * v54), (float64x2_t)xmmword_210315380), v54 * v54 * (v54 * v54))), v54 * v54 * (v54 * v54) * (v54 * v54 * (v54 * v54))));
        v24 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1);
        v23 = vdivq_f64(v88, v24);
        v89 = v54 + v54 * v23.f64[0];
        if (_ZF)
          v89 = 0.785398163;
        if (v50 == 0.0 && __x == 0.0)
          v91 = 0.0;
        else
          v91 = v89;
        if (__x < 0.0)
        {
          v55 = 4 - v55;
          v56 = -v56;
        }
        if (v50 < 0.0)
          v55 = -v55;
        v92 = (double)v55;
        if (v50 >= 0.0)
          v93 = v56;
        else
          v93 = -v56;
        v94 = v92 * 3.061617e-17 + v92 * 0.785398163 + v91 * (double)v93;
        v57 = 1.0
            / v50
            * (v94
             * (v94
              * v94
              * (*(double *)(a1 + 168)
               + v94
               * v94
               * (*(double *)(a1 + 176)
                + v94
                * v94
                * (*(double *)(a1 + 184)
                 + v94
                 * v94
                 * (*(double *)(a1 + 192)
                  + v94
                  * v94
                  * (*(double *)(a1 + 200) + v94 * v94 * (*(double *)(a1 + 208) + v94 * v94 * *(double *)(a1 + 216)))))))
              + 1.0));
      }
      else
      {
        v57 = 1.0 / __x;
      }
      v29 = vmulq_n_f64(v385, v57);
      v28 = *(double *)a1;
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = v29.f64[1];
      v23.f64[0] = *(float64_t *)(a1 + 16);
      v31 = *(double *)(a1 + 32);
      v30 = *(double *)(a1 + 40);
LABEL_152:
      _Q2.f64[0] = v23.f64[0] + v28 * v29.f64[0] + v25.f64[0] * v24.f64[0];
      _Q2.f64[1] = v24.f64[0] * v31 + v30;
      v382 = _Q2;
      v27 = 8;
      goto LABEL_219;
    }
    if (v19 == 10)
      v32 = sub_20EB24288((float64x2_t *)v406, (uint64_t)&v385, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
    else
      v32 = sub_20EB3A2E4(a1, (float64x2_t *)v406, &v385);
LABEL_111:
    if ((v32 & 1) == 0)
      return 0;
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 != -1)
      goto LABEL_113;
LABEL_20:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 <= 7)
    {
LABEL_114:
      if (v27 <= 3)
      {
        if (v27 <= 1)
        {
          if (!v27)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          _Q2.f64[0] = *(double *)(a1 + 16)
                     + *(double *)a1 * *(double *)v406
                     + *(double *)(a1 + 8) * *(double *)&v406[8];
          _Q2.f64[1] = *(double *)&v406[8] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
          v382 = _Q2;
          v27 = 1;
          goto LABEL_202;
        }
        _Q0 = *(__double2 *)v406;
        if (v27 == 2)
          goto LABEL_218;
        goto LABEL_200;
      }
      v76 = *(double *)a1;
      v77.f64[0] = *(float64_t *)v406;
      v78 = *(double *)(a1 + 16);
      v80 = *(double *)(a1 + 32);
      v79 = *(double *)(a1 + 40);
      if (v27 > 5)
      {
        v82 = v76 * *(double *)v406;
        v24.f64[0] = *(float64_t *)&v406[8];
        v23.f64[0] = *(double *)(a1 + 8) * *(double *)&v406[8];
        _Q2.f64[0] = v78 + v82 + v23.f64[0];
        _Q2.f64[1] = v79 + v80 * *(double *)&v406[8];
        v382 = _Q2;
        if (v27 == 6)
          v27 = 6;
        else
          v27 = 7;
        goto LABEL_202;
      }
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = *(float64_t *)&v406[8];
      if (v27 == 5)
      {
        v81 = v76 * *(double *)v406;
        v23.f64[0] = v25.f64[0] * *(double *)&v406[8];
        _Q2.f64[0] = v78 + v81 + v25.f64[0] * *(double *)&v406[8];
        _Q2.f64[1] = *(double *)&v406[8] * v80 + v79;
        v382 = _Q2;
        v27 = 5;
        goto LABEL_202;
      }
      goto LABEL_176;
    }
LABEL_22:
    v28 = *(double *)a1;
    v29.f64[0] = *(float64_t *)v406;
    if (v27 > 0xB)
    {
      v23.f64[0] = *(float64_t *)(a1 + 40);
      v24.f64[0] = *(float64_t *)&v406[8];
      v40.f64[0] = *(double *)(a1 + 16) + v28 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
      v40.f64[1] = v23.f64[0] + *(double *)(a1 + 32) * *(double *)&v406[8];
      v382 = v40;
      if (v27 <= 0xD)
      {
        if (v27 == 13)
          v27 = 13;
        else
          v27 = 12;
        goto LABEL_219;
      }
      if (v27 != 14)
      {
        if (v27 != -1)
          goto LABEL_270;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 > 7)
          goto LABEL_219;
LABEL_202:
        if (v27 > 3)
        {
          v115 = (int32x4_t)v382;
          _Q0.__sinval = *(double *)(a1 + 88)
                       + *(double *)(a1 + 72) * v382.f64[0]
                       + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
          sinval = _Q0.__sinval;
          v404 = v116;
          if (v27 > 5)
          {
            if (v27 == 6)
              v27 = 6;
            else
              v27 = 7;
          }
          else if (v27 == 5)
          {
            v27 = 5;
          }
          else
          {
            v27 = 4;
          }
        }
        else if (v27 > 1)
        {
          v115 = (int32x4_t)v382;
          _Q0.__sinval = *(double *)(a1 + 88)
                       + *(double *)(a1 + 72) * v382.f64[0]
                       + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
          sinval = _Q0.__sinval;
          v404 = v116;
          if (v27 == 2)
            v27 = 2;
          else
            v27 = 3;
        }
        else
        {
          if (!v27)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v115 = (int32x4_t)v382;
          _Q0.__sinval = *(double *)(a1 + 88)
                       + *(double *)(a1 + 72) * v382.f64[0]
                       + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
          sinval = _Q0.__sinval;
          v404 = v116;
          v27 = 1;
        }
LABEL_233:
        v387 = &v383;
        p_sinval = (float64x2_t *)&sinval;
        v390 = 0;
        v391 = 0;
        v389 = 0;
        if (v27 > 7)
          goto LABEL_305;
LABEL_234:
        if (v27 > 3)
        {
          v132 = (uint64_t)v387;
          v131 = (double *)p_sinval;
          v133 = v389;
          v134 = v390;
          v135 = v391;
          if (v27 > 5)
          {
            if (v27 == 6)
              v136 = sub_20EB41C58((double *)a1, (uint64_t)v387, p_sinval->f64, v389, (uint64_t)v390, v391);
            else
              v136 = sub_20EB306CC(a1, (uint64_t)v387, p_sinval, v389, (unint64_t)v390, v391, _Q0.__sinval, v116, (int8x16_t)_Q2, (int8x16_t)v115, v23.f64[0], v24.f64[0], v25);
          }
          else if (v27 == 5)
          {
            if (v389)
            {
              v389->f64[0] = 0.0;
              v133->f64[1] = 0.0;
              v133[1].f64[0] = 0.0;
            }
            if (v135)
            {
              *(_QWORD *)(v135 + 64) = 0;
              *(_OWORD *)(v135 + 32) = 0u;
              *(_OWORD *)(v135 + 48) = 0u;
              *(_OWORD *)v135 = 0u;
              *(_OWORD *)(v135 + 16) = 0u;
            }
            if (v134)
              v136 = sub_20EB28F10(v132, (uint64_t)v134, v131, a1 + 168, 5);
            else
              v136 = sub_20EB2886C(v132, v131, a1 + 168, 5);
          }
          else
          {
            if (v389)
            {
              v389->f64[0] = 0.0;
              v133->f64[1] = 0.0;
              v133[1].f64[0] = 0.0;
            }
            if (v135)
            {
              *(_QWORD *)(v135 + 64) = 0;
              _Q0.__sinval = 0.0;
              _Q0.__cosval = 0.0;
              *(_OWORD *)(v135 + 32) = 0u;
              *(_OWORD *)(v135 + 48) = 0u;
              *(_OWORD *)v135 = 0u;
              *(_OWORD *)(v135 + 16) = 0u;
            }
            if (v134)
            {
              if (!*(_BYTE *)(a1 + 468))
              {
                *(_QWORD *)&_Q0.__sinval = sub_20EB27C0C((uint64_t)v377, (double *)(a1 + 168), 0x32uLL, (int8x16_t)_Q0, v116, (int8x16_t)_Q2, (int8x16_t)v115).u64[0];
                *(_BYTE *)(a1 + 468) = 1;
              }
              v136 = sub_20EA8D684(v132, (uint64_t)v131, (int64x2_t *)(a1 + 168), v377, v134, 5, _Q0.__sinval, v116, _Q2.f64[0], *(double *)v115.i64, v23.f64[0], v24.f64[0], v25);
            }
            else
            {
              if (!*(_BYTE *)(a1 + 468))
              {
                *(_QWORD *)&_Q0.__sinval = sub_20EB27C0C((uint64_t)v377, (double *)(a1 + 168), 0x32uLL, (int8x16_t)_Q0, v116, (int8x16_t)_Q2, (int8x16_t)v115).u64[0];
                *(_BYTE *)(a1 + 468) = 1;
              }
              v136 = sub_20EA8D684(v132, (uint64_t)v131, (int64x2_t *)(a1 + 168), v377, 0, 5, _Q0.__sinval, v116, _Q2.f64[0], *(double *)v115.i64, v23.f64[0], v24.f64[0], v25);
            }
          }
        }
        else
        {
          if (v27 <= 1)
          {
            if (!v27)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v120 = (uint64_t)v387;
            v122 = v389;
            v121 = v390;
            v123 = v391;
            *v387 = *p_sinval;
            *(_QWORD *)(v120 + 16) = 0x3FF0000000000000;
            if (v122)
            {
              v122->f64[0] = 0.0;
              v122->f64[1] = 0.0;
              v122[1].f64[0] = 0.0;
            }
            if (v121)
            {
              *v121 = (float64x2_t)xmmword_210312EC0;
              v121[1] = (float64x2_t)unk_210312ED0;
              v121[2] = (float64x2_t)xmmword_210312EE0;
            }
            if (v123)
            {
              *(_QWORD *)(v123 + 64) = 0;
              *(_OWORD *)(v123 + 32) = 0u;
              *(_OWORD *)(v123 + 48) = 0u;
              *(_OWORD *)v123 = 0u;
              *(_OWORD *)(v123 + 16) = 0u;
              v124 = *(_DWORD *)(a1 + 992);
              if (v124 == -1)
                goto LABEL_243;
              goto LABEL_372;
            }
            goto LABEL_371;
          }
          if (v27 == 2)
          {
            v136 = sub_20EA8D22C((uint64_t)&v387, a1);
          }
          else
          {
            v154 = (double *)v387;
            v155 = (double *)p_sinval;
            v157 = v389;
            v156 = v390;
            v158 = v391;
            if (v389)
            {
              v389->f64[0] = 0.0;
              v157->f64[1] = 0.0;
              v157[1].f64[0] = 0.0;
            }
            if (v158)
            {
              *(_QWORD *)(v158 + 64) = 0;
              _Q0.__sinval = 0.0;
              *(_OWORD *)(v158 + 32) = 0u;
              *(_OWORD *)(v158 + 48) = 0u;
              *(_OWORD *)v158 = 0u;
              *(_OWORD *)(v158 + 16) = 0u;
            }
            if (v156)
              v136 = sub_20EB27398(v154, (uint64_t)v156, v155, (int64x2_t *)(a1 + 168), 20, _Q0.__sinval, v116, _Q2.f64[0], *(double *)v115.i64, (int64x2_t)v23);
            else
              v136 = sub_20EB23DF0((uint64_t)v154, v155, (int64x2_t *)(a1 + 168), 20, _Q0.__sinval, v116, _Q2.f64[0], *(double *)v115.i64, (int64x2_t)v23, v24);
          }
        }
LABEL_370:
        if ((v136 & 1) == 0)
          return 0;
        goto LABEL_371;
      }
LABEL_201:
      if (v27 > 7)
        goto LABEL_219;
      goto LABEL_202;
    }
    v23.f64[0] = *(float64_t *)(a1 + 16);
    v31 = *(double *)(a1 + 32);
    v30 = *(double *)(a1 + 40);
    if (v27 > 9)
    {
      v24.f64[0] = *(float64_t *)&v406[8];
      _Q2.f64[0] = v23.f64[0] + v28 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
      _Q2.f64[1] = v30 + v31 * *(double *)&v406[8];
      v382 = _Q2;
      if (v27 == 10)
        v27 = 10;
      else
        v27 = 11;
    }
    else
    {
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = *(float64_t *)&v406[8];
      if (v27 != 9)
        goto LABEL_152;
      _Q2.f64[0] = v23.f64[0] + v28 * *(double *)v406 + v25.f64[0] * *(double *)&v406[8];
      _Q2.f64[1] = *(double *)&v406[8] * v31 + v30;
      v382 = _Q2;
      v27 = 9;
    }
LABEL_219:
    if (v27 <= 0xB)
    {
      v115 = (int32x4_t)v382;
      _Q0.__sinval = *(double *)(a1 + 88)
                   + *(double *)(a1 + 72) * v382.f64[0]
                   + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
      sinval = _Q0.__sinval;
      v404 = v116;
      if (v27 > 9)
      {
        if (v27 == 10)
          v27 = 10;
        else
          v27 = 11;
      }
      else if (v27 == 9)
      {
        v27 = 9;
      }
      else
      {
        v27 = 8;
      }
      goto LABEL_233;
    }
    if (v27 <= 0xD)
    {
      v115 = (int32x4_t)v382;
      _Q0.__sinval = *(double *)(a1 + 88)
                   + *(double *)(a1 + 72) * v382.f64[0]
                   + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
      sinval = _Q0.__sinval;
      v404 = v116;
      if (v27 == 13)
        v27 = 13;
      else
        v27 = 12;
      goto LABEL_233;
    }
    if (v27 == 14)
    {
      v115 = (int32x4_t)v382;
      _Q0.__sinval = *(double *)(a1 + 88)
                   + *(double *)(a1 + 72) * v382.f64[0]
                   + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v116 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + _Q2.f64[0];
      sinval = _Q0.__sinval;
      v404 = v116;
      goto LABEL_233;
    }
LABEL_270:
    v137 = vmuld_lane_f64(*(double *)(a1 + 104), v382, 1) + *(double *)(a1 + 112);
    sinval = *(double *)(a1 + 88) + *(double *)(a1 + 72) * v382.f64[0] + vmuld_lane_f64(*(double *)(a1 + 80), v382, 1);
    v404 = v137;
    v138 = &v383;
    v139 = (float64x2_t *)&sinval;
    v387 = &v383;
    p_sinval = (float64x2_t *)&sinval;
    v390 = 0;
    v391 = 0;
    v389 = 0;
    if (v27 != -1)
    {
      v140 = 0;
      v141 = 0;
      v142 = 0;
      goto LABEL_333;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 <= 7)
      goto LABEL_234;
LABEL_305:
    v138 = v387;
    if (v27 > 0xB)
    {
      if (v27 <= 0xD)
      {
        v162 = v389;
        v163 = v390;
        v164 = v391;
        if (v27 != 13)
        {
          if (v389)
          {
            v389->f64[0] = 0.0;
            v162->f64[1] = 0.0;
            v162[1].f64[0] = 0.0;
          }
          if (v164)
          {
            *(_QWORD *)(v164 + 64) = 0;
            *(_OWORD *)(v164 + 32) = 0u;
            *(_OWORD *)(v164 + 48) = 0u;
            *(_OWORD *)v164 = 0u;
            *(_OWORD *)(v164 + 16) = 0u;
          }
          v138->f64[0] = 0.0;
          v138->f64[1] = 0.0;
          v138[1].f64[0] = 0.0;
          if (v163)
          {
            v163[1] = 0u;
            v163[2] = 0u;
            *v163 = 0u;
            return 0;
          }
          return 0;
        }
        v136 = sub_20EB43734((double *)a1, (uint64_t)v387, (uint64_t)p_sinval, v389, (uint64_t)v390, v391);
        goto LABEL_370;
      }
      v139 = p_sinval;
      v142 = v389;
      v141 = v390;
      v140 = v391;
      if (v27 != 14)
      {
LABEL_333:
        v136 = sub_20EB3CED8(a1, (uint64_t)v138, v139, v142, v141, v140);
        goto LABEL_370;
      }
      if (v389)
      {
        v389->f64[0] = 0.0;
        v142->f64[1] = 0.0;
        v142[1].f64[0] = 0.0;
      }
      if (v140)
      {
        *(_QWORD *)(v140 + 64) = 0;
        *(_OWORD *)(v140 + 32) = 0u;
        *(_OWORD *)(v140 + 48) = 0u;
        *(_OWORD *)v140 = 0u;
        *(_OWORD *)(v140 + 16) = 0u;
      }
      v171 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
      v172 = sub_20EB253A0((uint64_t)v138, (uint64_t)v139, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v171);
      if (v141)
      {
        if ((v172 & 1) == 0)
          return 0;
        if (!sub_20EB2498C(&v405, (uint64_t)&v398, &v396, (uint64_t)v138, (double *)(a1 + 168), v171))
          return 0;
        v166.i64[0] = *(_QWORD *)&v138[1].f64[0];
        *(_QWORD *)&v167 = v399.i64[0];
        _Q3 = v398;
        v401 = *(int8x16_t *)v138;
        v402 = (std::__shared_weak_count *)v166.i64[0];
        v397 = 0;
        *(_QWORD *)&_Q5.f64[0] = v166.i64[0];
        *(_QWORD *)&_Q5.f64[1] = v401.i64[0];
        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v400, _Q5), (float64x2_t)vzip2q_s64(v400, v399), (float64x2_t)vextq_s8(v401, v166, 8uLL)).f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v399, (float64x2_t)v401), 1), (float64x2_t)v400, (float64x2_t)v401).f64[0], *(double *)v399.i64)) < 0.00000001)return 0;
        goto LABEL_331;
      }
      if (!v172)
        return 0;
LABEL_371:
      v124 = *(_DWORD *)(a1 + 992);
      if (v124 == -1)
        goto LABEL_243;
LABEL_372:
      if (v124 > 7)
        goto LABEL_245;
      goto LABEL_373;
    }
    v159 = (double *)p_sinval;
    v160 = v389;
    v141 = v390;
    v161 = v391;
    if (v27 <= 9)
    {
      if (v27 == 9)
      {
        v136 = sub_20EB35004(a1, (uint64_t)v387, p_sinval, v389, (unint64_t)v390, v391, _Q0.__sinval, v116, _Q2.f64[0], v115, (int32x4_t)v23);
      }
      else
      {
        if (v389)
        {
          v389->f64[0] = 0.0;
          v160->f64[1] = 0.0;
          v160[1].f64[0] = 0.0;
        }
        if (v161)
        {
          *(_QWORD *)(v161 + 64) = 0;
          _Q0.__sinval = 0.0;
          *(_OWORD *)(v161 + 32) = 0u;
          *(_OWORD *)(v161 + 48) = 0u;
          *(_OWORD *)v161 = 0u;
          *(_OWORD *)(v161 + 16) = 0u;
        }
        if (v141)
        {
          v136 = sub_20EB277C4((uint64_t)v138, (uint64_t)v141, v159, a1 + 168, 20, _Q0.__sinval, v116, _Q2.f64[0], v115, (int32x4_t)v23);
        }
        else
        {
          v190 = sqrt(*v159 * *v159 + v159[1] * v159[1]);
          v136 = sub_20EB24018((uint64_t)v138, v159, (double *)(a1 + 168), 20, v190, v190, _Q2.f64[0], v115, (int32x4_t)v23);
        }
      }
      goto LABEL_370;
    }
    if (v27 != 10)
    {
      v136 = sub_20EB38E20(a1, (uint64_t)v387, p_sinval, v389, v390, v391);
      goto LABEL_370;
    }
    if (v389)
    {
      v389->f64[0] = 0.0;
      v160->f64[1] = 0.0;
      v160[1].f64[0] = 0.0;
    }
    if (v161)
    {
      *(_QWORD *)(v161 + 64) = 0;
      *(_OWORD *)(v161 + 32) = 0u;
      *(_OWORD *)(v161 + 48) = 0u;
      *(_OWORD *)v161 = 0u;
      *(_OWORD *)(v161 + 16) = 0u;
    }
    v165 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    v136 = sub_20EB24F38((uint64_t)v138, (uint64_t)v159, a1 + 168, (double *)(a1 + 280), 0x14u, v165);
    if (!v141)
      goto LABEL_370;
    if ((v136 & 1) == 0)
      return 0;
    if (!sub_20EB2450C(&v405, (uint64_t)&v398, &v396, (uint64_t)v138, (double *)(a1 + 168), v165))
      return 0;
    v166.i64[0] = *(_QWORD *)&v138[1].f64[0];
    *(_QWORD *)&v167 = v399.i64[0];
    _Q3 = v398;
    v401 = *(int8x16_t *)v138;
    v402 = (std::__shared_weak_count *)v166.i64[0];
    v397 = 0;
    *(_QWORD *)&_Q5.f64[0] = v166.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v401.i64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v400, _Q5), (float64x2_t)vzip2q_s64(v400, v399), (float64x2_t)vextq_s8(v401, v166, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v399, (float64x2_t)v401), 1), (float64x2_t)v400, (float64x2_t)v401).f64[0], *(double *)v399.i64)) < 0.00000001)return 0;
LABEL_331:
    *(_QWORD *)&v175 = vextq_s8(v398, v398, 8uLL).u64[0];
    _Q3.i64[1] = vextq_s8((int8x16_t)v399, (int8x16_t)v399, 8uLL).u64[0];
    *((_QWORD *)&v175 + 1) = v400.i64[0];
    *((_QWORD *)&v167 + 1) = vextq_s8((int8x16_t)v400, (int8x16_t)v400, 8uLL).u64[0];
    *(int8x16_t *)v406 = _Q3;
    *(_QWORD *)&v406[16] = v401.i64[0];
    *(_QWORD *)&v406[40] = vextq_s8(v401, v401, 8uLL).u64[0];
    *(_OWORD *)&v406[24] = v175;
    v408 = v166.i64[0];
    v407 = v167;
    sub_20E8BE424((uint64_t)&v392);
    v176.f64[0] = v393;
    v177 = vzip2q_s64(v392, v394);
    v176.f64[1] = v395;
    *(int64x2_t *)v141 = vzip1q_s64(v392, v394);
    v141[1] = (float64x2_t)v177;
    v141[2] = v176;
    v124 = *(_DWORD *)(a1 + 992);
    if (v124 != -1)
      goto LABEL_372;
LABEL_243:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v124 = *(_DWORD *)(a1 + 992);
    if (v124 <= 7)
    {
LABEL_373:
      if (v124 <= 3)
      {
        if (v124 <= 1)
        {
          if (!v124)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          if (*(double *)&v384 < 0.00000001)
            return 0;
          *(float64x2_t *)v406 = vmulq_n_f64(v383, 1.0 / *(double *)&v384);
          v19 = *(_DWORD *)(a1 + 992);
          if (v19 != -1)
            goto LABEL_434;
          goto LABEL_378;
        }
        if (v124 == 2)
        {
          if (*(_DWORD *)(a1 + 212))
          {
            if (*(double *)&v384 < 0.00000001)
              return 0;
            _Q2 = vmulq_n_f64(v383, 1.0 / *(double *)&v384);
            _D0 = vmuld_lane_f64(1.0 / *(double *)&v384, v383, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v196 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
            *(float64_t *)v406 = v196.f64[0];
          }
          else
          {
            if (*(double *)&v384 < 0.00000001)
              return 0;
            _Q2 = vmulq_n_f64(v383, 1.0 / *(double *)&v384);
            _D0 = vmuld_lane_f64(1.0 / *(double *)&v384, v383, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v196 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
          }
          goto LABEL_501;
        }
        _V0.D[1] = v383.f64[1];
        _D1 = v383.f64[1];
        __asm { FMLA            D7, D1, V0.D[1] }
        v215 = sqrt(_D7);
        v216 = fabs(*(double *)&v384);
        v217 = fabs(v215);
        v218 = v216 / v217;
        if (v216 >= v217)
          v218 = v217 / v216;
        v219 = (v217 - v216) / (v216 + v217);
        if (v216 >= v217)
          v219 = -v219;
        if (v218 > 0.414213562)
          v220 = 1;
        else
          v220 = 2;
        if (v218 > 0.414213562)
          v221 = -1;
        else
          v221 = 1;
        if (v218 <= 0.414213562)
          v219 = v218;
        if (_D7 >= 0.00000001)
        {
          if (v216 < v217)
            v221 = -v221;
          else
            v220 = v218 > 0.414213562;
          v240 = v215 == INFINITY && v216 == INFINITY;
          v241 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v219 * v219), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v219 * v219), (float64x2_t)xmmword_210315370), v219 * v219 * (v219 * v219))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v219 * v219), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v219 * v219), (float64x2_t)xmmword_210315380), v219 * v219 * (v219 * v219))), v219 * v219 * (v219 * v219) * (v219 * v219 * (v219 * v219))));
          v242 = v219 + v219 * vdivq_f64(v241, (float64x2_t)vdupq_laneq_s64((int64x2_t)v241, 1)).f64[0];
          if (v240)
            v242 = 0.785398163;
          if (v215 == 0.0 && *(double *)&v384 == 0.0)
            v244 = 0.0;
          else
            v244 = v242;
          if (v384 < 0)
          {
            v220 = 4 - v220;
            v221 = -v221;
          }
          if (v215 < 0.0)
            v220 = -v220;
          v245 = (double)v220;
          if (v215 >= 0.0)
            v246 = v221;
          else
            v246 = -v221;
          v247 = v245 * 3.061617e-17 + v245 * 0.785398163 + v244 * (double)v246;
          v248 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v17, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, *(int64x2_t *)(a1 + 184)), v247 * v247)), v247 * v247);
          v222 = 1.0 / v215 * (v247 + v247 * (v248.f64[0] + vmuld_lane_f64(v247 * v247 * (v247 * v247), v248, 1)));
        }
        else
        {
          v222 = 1.0 / *(double *)&v384;
        }
        v196 = vmulq_n_f64(v383, v222);
LABEL_498:
        v191.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v196.f64[0] + vmuld_lane_f64(*(double *)(a1 + 8), v196, 1);
        v191.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v196, 1) + *(double *)(a1 + 40);
        v19 = 3;
        goto LABEL_502;
      }
      if (v124 > 5)
      {
        if (v124 != 6)
        {
          v125 = sub_20EB31FFC(a1, (float64x2_t *)v406, &v383);
          goto LABEL_432;
        }
        v197 = vaddq_f64(vdivq_f64(v383, (float64x2_t)vdupq_lane_s64(v384, 0)), *(float64x2_t *)(a1 + 192));
        v198 = sqrt(vaddvq_f64(vmulq_f64(v197, v197)));
        *(float64x2_t *)v406 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v197, v198* (v198* (*(double *)(a1 + 168)+ v198 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v198)))+ 1.0));
        v19 = *(_DWORD *)(a1 + 992);
        if (v19 != -1)
          goto LABEL_434;
        goto LABEL_378;
      }
      if (v124 == 5)
      {
        v192 = v383.f64[0] * v383.f64[0] + v383.f64[1] * v383.f64[1];
        if (v192 >= 0.00000001)
        {
          v227 = sqrt(v192);
          if (v227 <= *(double *)&v384)
          {
            v255 = v227 / *(double *)&v384 * 0.785398163
                 - v227
                 / *(double *)&v384
                 * (v227 / *(double *)&v384 + -1.0)
                 * (v227 / *(double *)&v384 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v227 <= -*(double *)&v384)
            {
              v229 = v227 / *(double *)&v384 * 0.785398163
                   - v227
                   / *(double *)&v384
                   * (-1.0 - v227 / *(double *)&v384)
                   * (v227 / *(double *)&v384 * -0.0663008339 + 0.244711287);
              v230 = 3.14159265;
            }
            else
            {
              v228 = fabs(*(double *)&v384 / v227);
              v229 = *(double *)&v384 / v227 * (v228 + -1.0) * (v228 * 0.0663008339 + 0.244711287)
                   + *(double *)&v384 / v227 * -0.785398163;
              v230 = 1.57079633;
            }
            v255 = v229 + v230;
          }
          v258 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v17, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, *(int64x2_t *)(a1 + 184)), v255 * v255)), v255 * v255);
          v259 = (v255 + v255 * (v258.f64[0] + vmuld_lane_f64(v255 * v255 * (v255 * v255), v258, 1))) / v227;
          *(double *)v406 = v383.f64[0] * v259;
          *(double *)&v406[8] = v383.f64[1] * v259;
          v19 = *(_DWORD *)(a1 + 992);
          if (v19 != -1)
            goto LABEL_434;
        }
        else
        {
          if (*(double *)&v384 == 0.0)
            return 0;
          *(double *)v406 = v383.f64[0] * (1.0 / *(double *)&v384);
          *(double *)&v406[8] = v383.f64[1] * (1.0 / *(double *)&v384);
          v19 = *(_DWORD *)(a1 + 992);
          if (v19 != -1)
            goto LABEL_434;
        }
        goto LABEL_378;
      }
      _V0.D[1] = v383.f64[1];
      _D1 = v383.f64[1];
      __asm { FMLA            D7, D1, V0.D[1] }
      v204 = sqrt(_D7);
      v205 = fabs(*(double *)&v384);
      v206 = fabs(v204);
      v207 = v205 / v206;
      if (v205 >= v206)
        v207 = v206 / v205;
      v208 = (v206 - v205) / (v205 + v206);
      if (v205 >= v206)
        v208 = -v208;
      if (v207 > 0.414213562)
        v209 = 1;
      else
        v209 = 2;
      if (v207 > 0.414213562)
        v210 = -1;
      else
        v210 = 1;
      if (v207 <= 0.414213562)
        v208 = v207;
      if (_D7 >= 0.00000001)
      {
        if (v205 < v206)
          v210 = -v210;
        else
          v209 = v207 > 0.414213562;
        v231 = v204 == INFINITY && v205 == INFINITY;
        v232 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v208 * v208), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v208 * v208), (float64x2_t)xmmword_210315370), v208 * v208 * (v208 * v208))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v208 * v208), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v208 * v208), (float64x2_t)xmmword_210315380), v208 * v208 * (v208 * v208))), v208 * v208 * (v208 * v208) * (v208 * v208 * (v208 * v208))));
        v233 = v208 + v208 * vdivq_f64(v232, (float64x2_t)vdupq_laneq_s64((int64x2_t)v232, 1)).f64[0];
        if (v231)
          v233 = 0.785398163;
        if (v204 == 0.0 && *(double *)&v384 == 0.0)
          v235 = 0.0;
        else
          v235 = v233;
        if (v384 < 0)
        {
          v209 = 4 - v209;
          v210 = -v210;
        }
        if (v204 < 0.0)
          v209 = -v209;
        v236 = (double)v209;
        if (v204 >= 0.0)
          v237 = v210;
        else
          v237 = -v210;
        v238 = v236 * 3.061617e-17 + v236 * 0.785398163 + v235 * (double)v237;
        v239 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v17, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v17, *(int64x2_t *)(a1 + 184)), v238 * v238)), v238 * v238);
        v211 = 1.0 / v204 * (v238 + v238 * (v239.f64[0] + vmuld_lane_f64(v238 * v238 * (v238 * v238), v239, 1)));
      }
      else
      {
        v211 = 1.0 / *(double *)&v384;
      }
      v224 = vmulq_n_f64(v383, v211);
      v223 = *(double *)a1;
      v225 = v224.f64[1];
      v226 = *(double *)(a1 + 32);
LABEL_474:
      v191.f64[0] = *(double *)(a1 + 16) + v223 * v224.f64[0] + *(double *)(a1 + 8) * v225;
      v191.f64[1] = v225 * v226 + *(double *)(a1 + 40);
      v19 = 4;
      goto LABEL_502;
    }
LABEL_245:
    if (v124 > 0xB)
    {
      if (v124 > 0xD)
      {
        if (v124 == 14)
          v125 = sub_20EB247C0((float64x2_t *)v406, (uint64_t)&v383, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v125 = sub_20EB3E39C(a1, (float64x2_t *)v406, &v383);
        goto LABEL_432;
      }
      if (v124 != 13 || *(double *)&v384 < 0.00000001)
        return 0;
      _Q0 = vdivq_f64(v383, (float64x2_t)vdupq_lane_s64(v384, 0));
      v127 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v130 = v127 * (_D2 * v127);
      *(float64x2_t *)v406 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v130* (*(double *)(a1 + 168)+ v127 * *(double *)(a1 + 224)+ v130* (*(double *)(a1 + 176)+ v127 * *(double *)(a1 + 232)+ v130* (*(double *)(a1 + 184)+ v127 * *(double *)(a1 + 240)+ v130* (*(double *)(a1 + 192)+ v127 * *(double *)(a1 + 248)+ v130* (*(double *)(a1 + 200)+ v127 * *(double *)(a1 + 256)+ v130
                                                   * (*(double *)(a1 + 208)
                                                    + v127 * *(double *)(a1 + 264)
                                                    + v130
                                                    * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v127 + v130 * 0.0)))))))
                                              / 100.0
                                              + 1.0),
                                              0));
      v19 = *(_DWORD *)(a1 + 992);
      if (v19 == -1)
        goto LABEL_378;
LABEL_434:
      if (v19 > 7)
        goto LABEL_380;
      goto LABEL_435;
    }
    if (v124 <= 9)
    {
      if (v124 == 9)
      {
        v125 = sub_20EB3641C(a1, (float64x2_t *)v406, &v383);
        goto LABEL_432;
      }
      _V0.D[1] = v383.f64[1];
      _D1 = v383.f64[1];
      __asm { FMLA            D7, D1, V0.D[1] }
      v146 = sqrt(_D7);
      v147 = fabs(*(double *)&v384);
      v148 = fabs(v146);
      v149 = v147 / v148;
      if (v147 >= v148)
        v149 = v148 / v147;
      v150 = (v148 - v147) / (v147 + v148);
      if (v147 >= v148)
        v150 = -v150;
      if (v149 > 0.414213562)
        v151 = 1;
      else
        v151 = 2;
      if (v149 > 0.414213562)
        v152 = -1;
      else
        v152 = 1;
      if (v149 <= 0.414213562)
        v150 = v149;
      if (_D7 >= 0.00000001)
      {
        if (v147 < v148)
          v152 = -v152;
        else
          v151 = v149 > 0.414213562;
        v178 = v146 == INFINITY && v147 == INFINITY;
        v179 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v150 * v150), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v150 * v150), (float64x2_t)xmmword_210315370), v150 * v150 * (v150 * v150))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v150 * v150), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v150 * v150), (float64x2_t)xmmword_210315380), v150 * v150 * (v150 * v150))), v150 * v150 * (v150 * v150) * (v150 * v150 * (v150 * v150))));
        v180 = v150 + v150 * vdivq_f64(v179, (float64x2_t)vdupq_laneq_s64((int64x2_t)v179, 1)).f64[0];
        if (v178)
          v180 = 0.785398163;
        if (v146 == 0.0 && *(double *)&v384 == 0.0)
          v182 = 0.0;
        else
          v182 = v180;
        if (v384 < 0)
        {
          v151 = 4 - v151;
          v152 = -v152;
        }
        if (v146 < 0.0)
          v151 = -v151;
        v183 = (double)v151;
        if (v146 >= 0.0)
          v184 = v152;
        else
          v184 = -v152;
        v185 = v183 * 3.061617e-17 + v183 * 0.785398163 + v182 * (double)v184;
        v153 = 1.0
             / v146
             * (v185
              * (v185
               * v185
               * (*(double *)(a1 + 168)
                + v185
                * v185
                * (*(double *)(a1 + 176)
                 + v185
                 * v185
                 * (*(double *)(a1 + 184)
                  + v185
                  * v185
                  * (*(double *)(a1 + 192)
                   + v185
                   * v185
                   * (*(double *)(a1 + 200) + v185
                                            * v185
                                            * (*(double *)(a1 + 208) + v185 * v185 * *(double *)(a1 + 216)))))))
               + 1.0));
      }
      else
      {
        v153 = 1.0 / *(double *)&v384;
      }
      v186 = vmulq_n_f64(v383, v153);
      v187 = *(double *)a1;
      v188 = v186.f64[1];
      v189 = *(double *)(a1 + 32);
LABEL_401:
      v191.f64[0] = *(double *)(a1 + 16) + v187 * v186.f64[0] + *(double *)(a1 + 8) * v188;
      v191.f64[1] = v188 * v189 + *(double *)(a1 + 40);
      v19 = 8;
      goto LABEL_502;
    }
    if (v124 == 10)
      v125 = sub_20EB24288((float64x2_t *)v406, (uint64_t)&v383, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
    else
      v125 = sub_20EB3A2E4(a1, (float64x2_t *)v406, &v383);
LABEL_432:
    if ((v125 & 1) == 0)
      return 0;
    v19 = *(_DWORD *)(a1 + 992);
    if (v19 != -1)
      goto LABEL_434;
LABEL_378:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v19 = *(_DWORD *)(a1 + 992);
    if (v19 <= 7)
    {
LABEL_435:
      if (v19 <= 3)
      {
        if (v19 <= 1)
        {
          if (!v19)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v191.f64[0] = *(double *)(a1 + 16)
                      + *(double *)a1 * *(double *)v406
                      + *(double *)(a1 + 8) * *(double *)&v406[8];
          v191.f64[1] = *(double *)&v406[8] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
          v19 = 1;
          goto LABEL_502;
        }
        v196 = *(float64x2_t *)v406;
        if (v19 == 2)
        {
LABEL_501:
          v191.f64[0] = *(double *)(a1 + 16)
                      + *(double *)a1 * v196.f64[0]
                      + vmuld_lane_f64(*(double *)(a1 + 8), v196, 1);
          v191.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v196, 1) + *(double *)(a1 + 40);
          v19 = 2;
          goto LABEL_502;
        }
        goto LABEL_498;
      }
      v223 = *(double *)a1;
      v224.f64[0] = *(float64_t *)v406;
      if (v19 > 5)
      {
        v191.f64[0] = *(double *)(a1 + 16) + v223 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
        v191.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * *(double *)&v406[8];
        v199 = v19 == 6;
        v200 = 6;
LABEL_445:
        if (v199)
          v19 = v200;
        else
          v19 = v200 + 1;
        goto LABEL_502;
      }
      v225 = *(double *)&v406[8];
      v226 = *(double *)(a1 + 32);
      if (v19 == 5)
      {
        v191.f64[0] = *(double *)(a1 + 16) + v223 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
        v191.f64[1] = *(double *)&v406[8] * v226 + *(double *)(a1 + 40);
        v19 = 5;
        goto LABEL_502;
      }
      goto LABEL_474;
    }
LABEL_380:
    v187 = *(double *)a1;
    v186.f64[0] = *(float64_t *)v406;
    if (v19 > 0xB)
    {
      v191.f64[0] = *(double *)(a1 + 16) + v187 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
      v191.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * *(double *)&v406[8];
      if (v19 <= 0xD)
      {
        if (v19 == 13)
          v19 = 13;
        else
          v19 = 12;
      }
      goto LABEL_502;
    }
    if (v19 > 9)
    {
      v191.f64[0] = *(double *)(a1 + 16) + v187 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
      v191.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * *(double *)&v406[8];
      v199 = v19 == 10;
      v200 = 10;
      goto LABEL_445;
    }
    v188 = *(double *)&v406[8];
    v189 = *(double *)(a1 + 32);
    if (v19 != 9)
      goto LABEL_401;
    v191.f64[0] = *(double *)(a1 + 16) + v187 * *(double *)v406 + *(double *)(a1 + 8) * *(double *)&v406[8];
    v191.f64[1] = *(double *)&v406[8] * v189 + *(double *)(a1 + 40);
    v19 = 9;
LABEL_502:
    _D1 = vsubq_f64(v382, v191).f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    if (_D2 <= v18)
    {
      v20 = v20 + 0.01;
      if (v20 > v15)
        return 1;
      continue;
    }
    break;
  }
  v380 = _D2;
  v314 = atomic_load((unsigned __int8 *)&qword_254A5B280);
  if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B280))
  {
    sub_21021D3D8(&v398);
    sub_20E8610C0(v406, "cv3d.vio.geometry");
    sub_20E8C4068((uint64_t **)&v398, (uint64_t)v406, &qword_254A5B278);
    if ((v406[23] & 0x80000000) != 0)
      operator delete(*(void **)v406);
    __cxa_guard_release(&qword_254A5B280);
  }
  *(_QWORD *)&v396.f64[0] = qword_254A5B278;
  if (**(int **)(qword_254A5B278 + 56) > 4)
    return 0;
  v315 = *(unsigned __int8 *)(qword_254A5B278 + 72);
  v316 = sub_20E8C31DC(qword_254A5B278, "OSLogSurrogateAppender", 1, 0);
  v317 = v316;
  if (!v315 && !v316)
    return 0;
  v398.i64[0] = (uint64_t)&v396;
  v398.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v399.i8 = std::chrono::system_clock::now();
  v399.i32[2] = 4;
  v400.i64[0] = (uint64_t)"unknown file";
  v400.i32[2] = 80;
  v401.i64[1] = 0;
  v402 = 0;
  v401.i64[0] = (uint64_t)"unknown function";
  v318 = *(_QWORD *)v398.i64[0];
  v319 = *(_QWORD *)v398.i64[0] + 16;
  if (*(char *)(*(_QWORD *)v398.i64[0] + 39) < 0)
  {
    v321 = *(const char **)(v318 + 16);
    v320 = *(_QWORD *)(v318 + 24);
  }
  else
  {
    v320 = *(unsigned __int8 *)(*(_QWORD *)v398.i64[0] + 39);
    v321 = (const char *)(*(_QWORD *)v398.i64[0] + 16);
  }
  v322 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v322 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v406);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v406);
    if (v406[24] && (v406[23] & 0x80000000) != 0)
      operator delete(*(void **)v406);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v323 = byte_254A4A4F8;
  else
    v323 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v324 = byte_254A4A4F8[23];
  else
    v324 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v406 = os_log_create(v323, v321);
  v325 = &v406[8];
  if (v324 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v324 >= 0x17)
  {
    v326 = v321;
    v327 = v317;
    v328 = v318;
    v329 = v315;
    v330 = v319;
    v331 = (v324 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v324 | 7) != 0x17)
      v331 = v324 | 7;
    v332 = v331 + 1;
    v325 = operator new(v331 + 1);
    *(_QWORD *)&v406[16] = v324;
    *(_QWORD *)&v406[24] = v332 | 0x8000000000000000;
    *(_QWORD *)&v406[8] = v325;
    v319 = v330;
    v315 = v329;
    v318 = v328;
    v317 = v327;
    v321 = v326;
    goto LABEL_656;
  }
  v406[31] = v324;
  if (v324)
LABEL_656:
    memmove(v325, v323, v324);
  v325[v324] = 0;
  v406[32] = 1;
  v333 = &v406[40];
  if (v320 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v320 >= 0x17)
  {
    v334 = (v320 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v320 | 7) != 0x17)
      v334 = v320 | 7;
    v335 = v334 + 1;
    v333 = operator new(v334 + 1);
    *(_QWORD *)&v407 = v320;
    *((_QWORD *)&v407 + 1) = v335 | 0x8000000000000000;
    *(_QWORD *)&v406[40] = v333;
    goto LABEL_664;
  }
  HIBYTE(v407) = v320;
  if (v320)
LABEL_664:
    memmove(v333, v321, v320);
  v333[v320] = 0;
  LOBYTE(v408) = 1;
  v336 = *(NSObject **)v406;
  if (SHIBYTE(v407) < 0)
    operator delete(*(void **)&v406[40]);
  if (v406[32] && (v406[31] & 0x80000000) != 0)
    operator delete(*(void **)&v406[8]);
  if (*(_QWORD *)v406)
    os_release(*(void **)v406);
  v337 = sqrt(v380);
  if (v317 && *(_QWORD *)(v317 + 24))
  {
    v338 = _os_log_pack_size();
    v339 = (std::__shared_weak_count_vtbl *)operator new(v338, (std::align_val_t)8uLL);
    v340 = (std::__shared_weak_count *)operator new();
    v341 = v340;
    v340->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v340->__shared_owners_;
    v340->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v340->__shared_weak_owners_ = 0;
    v340[1].__vftable = v339;
    *(_QWORD *)v406 = v339;
    *(_QWORD *)&v406[8] = v339;
    *(_QWORD *)&v406[16] = v340;
    do
      v343 = __ldxr(p_shared_owners);
    while (__stxr(v343 + 1, p_shared_owners));
    memset(&v406[24], 0, 24);
    do
      v344 = __ldaxr(p_shared_owners);
    while (__stlxr(v344 - 1, p_shared_owners));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v341);
    }
    v345 = *(_QWORD *)v406;
    v346 = _os_log_pack_fill();
    *(_DWORD *)v346 = 134218752;
    *(double *)(v346 + 4) = v337;
    *(_WORD *)(v346 + 12) = 2048;
    *(float64_t *)(v346 + 14) = v382.f64[0];
    *(_WORD *)(v346 + 22) = 2048;
    *(float64_t *)(v346 + 24) = v382.f64[1];
    *(_WORD *)(v346 + 32) = 2048;
    *(double *)(v346 + 34) = v20;
    v347 = operator new();
    v348 = *(unsigned __int8 *)(v318 + 39);
    v349 = *(_QWORD *)(v318 + 16);
    v350 = *(_QWORD *)(v318 + 24);
    v351 = *(_OWORD *)&v406[24];
    *(_OWORD *)(v347 + 8) = *(_OWORD *)&v406[8];
    if ((v348 & 0x80u) != 0)
      v348 = v350;
    else
      v349 = v319;
    *(_QWORD *)v347 = v345;
    *(_QWORD *)&v406[8] = 0;
    *(_QWORD *)&v406[16] = 0;
    *(_OWORD *)(v347 + 24) = v351;
    *(_QWORD *)&v406[24] = 0;
    *(_QWORD *)&v406[32] = 0;
    *(_QWORD *)(v347 + 40) = v349;
    *(_QWORD *)(v347 + 48) = v348;
    *(_BYTE *)(v347 + 56) = 16;
    v387 = 0;
    v392.i64[0] = v347;
    (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v317 + 24) + 40))(*(_QWORD *)(v317 + 24), &v392);
    v352 = v392.i64[0];
    v392.i64[0] = 0;
    if (v352)
    {
      v353 = *(std::__shared_weak_count **)(v352 + 32);
      if (v353)
      {
        v354 = (unint64_t *)&v353->__shared_owners_;
        do
          v355 = __ldaxr(v354);
        while (__stlxr(v355 - 1, v354));
        if (!v355)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
      v356 = *(std::__shared_weak_count **)(v352 + 16);
      if (v356)
      {
        v357 = (unint64_t *)&v356->__shared_owners_;
        do
          v358 = __ldaxr(v357);
        while (__stlxr(v358 - 1, v357));
        if (!v358)
        {
          ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
          std::__shared_weak_count::__release_weak(v356);
        }
      }
      MEMORY[0x212BC6398](v352, 0x10F0C40B62ED6C6);
      v359 = (uint64_t)v387;
      v387 = 0;
      if (v359)
      {
        v360 = *(std::__shared_weak_count **)(v359 + 32);
        if (v360)
        {
          v361 = (unint64_t *)&v360->__shared_owners_;
          do
            v362 = __ldaxr(v361);
          while (__stlxr(v362 - 1, v361));
          if (!v362)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
        }
        v363 = *(std::__shared_weak_count **)(v359 + 16);
        if (v363)
        {
          v364 = (unint64_t *)&v363->__shared_owners_;
          do
            v365 = __ldaxr(v364);
          while (__stlxr(v365 - 1, v364));
          if (!v365)
          {
            ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
            std::__shared_weak_count::__release_weak(v363);
          }
        }
        MEMORY[0x212BC6398](v359, 0x10F0C40B62ED6C6);
      }
    }
    v366 = *(std::__shared_weak_count **)&v406[32];
    if (*(_QWORD *)&v406[32])
    {
      v367 = (unint64_t *)(*(_QWORD *)&v406[32] + 8);
      do
        v368 = __ldaxr(v367);
      while (__stlxr(v368 - 1, v367));
      if (!v368)
      {
        ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
        std::__shared_weak_count::__release_weak(v366);
      }
    }
    v369 = *(std::__shared_weak_count **)&v406[16];
    if (*(_QWORD *)&v406[16])
    {
      v370 = (unint64_t *)(*(_QWORD *)&v406[16] + 8);
      do
        v371 = __ldaxr(v370);
      while (__stlxr(v371 - 1, v370));
      if (!v371)
      {
        ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
        std::__shared_weak_count::__release_weak(v369);
      }
    }
  }
  else
  {
    os_log_type_enabled(v336, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v406 = 134218752;
    *(double *)&v406[4] = v337;
    *(_WORD *)&v406[12] = 2048;
    *(float64_t *)&v406[14] = v382.f64[0];
    *(_WORD *)&v406[22] = 2048;
    *(float64_t *)&v406[24] = v382.f64[1];
    *(_WORD *)&v406[32] = 2048;
    *(double *)&v406[34] = v20;
    v372 = (void *)_os_log_send_and_compose_impl();
    if (v372)
      free(v372);
  }
  if (v315)
  {
    sub_20E8C003C((uint64_t)&v398, "Round-trip error in radial distortion is %f pixels at (%f, %f), half_fov = %f", v337, v382.f64[0], v382.f64[1], v20);
    sub_20E863570((uint64_t)&v398);
  }
  sub_20E863570((uint64_t)&v398);
  v373 = v402;
  if (!v402)
    return 0;
  v374 = (unint64_t *)&v402->__shared_owners_;
  do
    v375 = __ldaxr(v374);
  while (__stlxr(v375 - 1, v374));
  if (v375)
    return 0;
  ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
  std::__shared_weak_count::__release_weak(v373);
  return 0;
}

void sub_20EB482C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 216))
  {
    if (*(char *)(v52 - 217) < 0)
      operator delete(*(void **)(v52 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB48304(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 217) < 0)
  {
    operator delete(*(void **)(v1 - 240));
    __cxa_guard_abort(&qword_254A5B280);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B280);
  _Unwind_Resume(a1);
}

void sub_20EB4835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  sub_20E86E8C4(&a40);
  sub_20E86E8C4(&a35);
  sub_20E86E658(v52 - 240);
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB48388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  sub_20E86E658(v52 - 240);
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB483A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  MEMORY[0x212BC6398](v52, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB483D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB483E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB483F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20E863714((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20EB4840C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EB48474(uint64_t *a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v5 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a1;
  v7 = a1[1];
  v8 = (v7 - *a1) >> 5;
  v9 = v8 / a2 + 1;
  if (v8 / a2 != -1)
  {
    if (v9 >> 60)
      sub_20E867F44();
    v5 = (char *)operator new(16 * v9);
    *a3 = v5;
    a3[1] = v5;
    a3[2] = &v5[16 * v9];
  }
  if (v7 != v6)
  {
    v10 = v6 + 32 * v8;
    do
    {
      v11 = v6;
      v12 = (v10 - v6) >> 5;
      if (v12 >= a2)
        v12 = a2;
      v6 += 32 * v12;
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v5 < v13)
      {
        *(_QWORD *)v5 = v11;
        *((_QWORD *)v5 + 1) = v6;
        v5 += 16;
      }
      else
      {
        v14 = *a3;
        v15 = (v5 - *a3) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          sub_20E867F44();
        v17 = v13 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18 >> 60)
          sub_20E877A38();
        v19 = (char *)operator new(16 * v18);
        v20 = &v19[16 * v15];
        *(_QWORD *)v20 = v11;
        *((_QWORD *)v20 + 1) = v6;
        if (v5 != v14)
        {
          v21 = &v19[16 * v15];
          do
          {
            v22 = v21 - 16;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v5 - 1);
            v5 -= 16;
            v21 -= 16;
          }
          while (v5 != v14);
          v5 = v20 + 16;
          *a3 = v22;
          a3[1] = v20 + 16;
          a3[2] = &v19[16 * v18];
          if (!v14)
            goto LABEL_7;
LABEL_24:
          operator delete(v14);
          goto LABEL_7;
        }
        v5 = v20 + 16;
        *a3 = v20;
        a3[1] = v20 + 16;
        a3[2] = &v19[16 * v18];
        if (v14)
          goto LABEL_24;
      }
LABEL_7:
      a3[1] = v5;
    }
    while (v6 != v10);
  }
}

void sub_20EB48614(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB48638(uint64_t a1)
{
  uint64_t result;
  void *v3;

  sub_20E8BEC48();
  v3 = operator new((8 * 0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BEC48();
  result = MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  *(_BYTE *)(a1 + 176) = 1;
  return result;
}

void sub_20EB48794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB487B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v10;
  uint64_t v11;
  float64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  __int128 v18;
  float64x2_t v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v25[6];
  char v26;
  uint64_t v27;
  float64x2_t v28[4];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v10 = *a4;
  v11 = a4[1] - *a4;
  if (v11 != *((_QWORD *)a5 + 1) - *(_QWORD *)a5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/FivePointPreemptiveRansac.cpp", 35, (uint64_t)"p.size() == q.size()", 20, (uint64_t)&unk_210254DDD, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_11;
    }
    v10 = *a4;
    v11 = a4[1] - *a4;
  }
  if ((v11 & 8) == 0)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/FivePointPreemptiveRansac.cpp", 36, (uint64_t)"p.size() % 2 == 0", 17, (uint64_t)&unk_210254DDD, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_11:
    abort();
  }
  v10 = *a4;
  v11 = a4[1] - *a4;
LABEL_7:
  v12 = *a5;
  v27 = v10;
  v28[0].f64[0] = v12;
  sub_20EB48994(a1 + 32, &v27, (unint64_t)(v11 >> 3) >> 1);
  v27 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  *(double *)v25 = 1.0 / (*(double *)(a1 + 24) * *(double *)(a1 + 24));
  v13 = sub_20EB48B5C((uint64_t)&v27, (uint64_t *)(a1 + 32), (uint64_t)&v26, (double *)v25, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
  if ((_DWORD)v13)
  {
    v18 = (__int128)v28[1];
    v19 = v28[3];
    *(float64x2_t *)(a3 + 32) = v28[2];
    *(float64x2_t *)(a3 + 48) = v19;
    *(_QWORD *)(a3 + 64) = v29;
    v20 = v28[0];
    *(float64x2_t *)a3 = v28[0];
    *(_OWORD *)(a3 + 16) = v18;
    sub_20EB54A78((__int128 *)v28, (uint64_t)v25, v20, v19, v14, v15, v16, v17);
    v21 = v25[3];
    *(_OWORD *)(a2 + 32) = v25[2];
    *(_OWORD *)(a2 + 48) = v21;
    v22 = v25[5];
    *(_OWORD *)(a2 + 64) = v25[4];
    *(_OWORD *)(a2 + 80) = v22;
    v23 = v25[1];
    *(_OWORD *)a2 = v25[0];
    *(_OWORD *)(a2 + 16) = v23;
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = xmmword_21030D320;
  }
  return v13;
}

void sub_20EB48994(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;

  v6 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (a3 > (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 5)
  {
    if (a3 >> 59)
LABEL_27:
      sub_20E867F44();
    v7 = 4 * a3;
    v8 = operator new(32 * a3);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[v7];
    if (v6)
    {
      operator delete(v6);
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v6 = v8;
    }
    goto LABEL_8;
  }
  if (a3)
  {
LABEL_8:
    v9 = 0;
    while (1)
    {
      v11 = a2[1];
      v12 = *(_QWORD *)(*a2 + 16 * v9);
      v13 = (16 * v9) | 8;
      v14 = *(_QWORD *)(*a2 + v13);
      v15 = *(_QWORD *)(v11 + 16 * v9);
      v16 = *(_QWORD *)(v11 + v13);
      v17 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v6 >= v17)
        break;
      *v6 = v12;
      v6[1] = v14;
      v10 = v6 + 4;
      v6[2] = v15;
      v6[3] = v16;
LABEL_10:
      *(_QWORD *)(a1 + 8) = v10;
      ++v9;
      v6 = v10;
      if (v9 == a3)
        return;
    }
    v18 = *(_QWORD **)a1;
    v19 = ((uint64_t)v6 - *(_QWORD *)a1) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      goto LABEL_27;
    v21 = v17 - (_QWORD)v18;
    if (v21 >> 4 > v20)
      v20 = v21 >> 4;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 59)
        sub_20E877A38();
      v23 = (char *)operator new(32 * v22);
      v24 = &v23[32 * v19];
      *(_QWORD *)v24 = v12;
      *((_QWORD *)v24 + 1) = v14;
      *((_QWORD *)v24 + 2) = v15;
      *((_QWORD *)v24 + 3) = v16;
      v25 = (uint64_t)v24;
      if (v6 == v18)
        goto LABEL_25;
    }
    else
    {
      v23 = 0;
      v24 = (char *)(32 * v19);
      *(_QWORD *)v24 = v12;
      *((_QWORD *)v24 + 1) = v14;
      *((_QWORD *)v24 + 2) = v15;
      *((_QWORD *)v24 + 3) = v16;
      v25 = 32 * v19;
      if (v6 == v18)
      {
LABEL_25:
        v10 = v24 + 32;
        *(_QWORD *)a1 = v25;
        *(_QWORD *)(a1 + 8) = v24 + 32;
        *(_QWORD *)(a1 + 16) = &v23[32 * v22];
        if (v6)
          operator delete(v6);
        goto LABEL_10;
      }
    }
    do
    {
      v26 = *((_OWORD *)v6 - 1);
      *(_OWORD *)(v25 - 32) = *((_OWORD *)v6 - 2);
      *(_OWORD *)(v25 - 16) = v26;
      v25 -= 32;
      v6 -= 4;
    }
    while (v6 != v18);
    v6 = *(_QWORD **)a1;
    goto LABEL_25;
  }
}

uint64_t sub_20EB48B5C(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *v29;
  unsigned int v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  double *v34;
  double **v35;
  double *v36;
  unsigned int v37;
  double *v38;
  double *v39;
  double *v40;
  double v41;
  double *v42;
  float64x2_t v43;
  int64x2_t v44;
  double v45;
  double *v46;
  double v47;
  double v50;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  double *v65;
  unint64_t v66;
  uint64_t v67;
  double *v68;
  double v69;
  unint64_t v70;
  double *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  double v76;
  uint64_t v77;
  double *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float64x2_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  double *v92;
  double *v93;
  double v94;
  double v95;
  double v96;
  double *v97;
  double v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  float64x2_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  double v125;
  double v126;
  double *v127;
  double v128;
  double *v129;
  double v130;
  double v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  double v141;
  double v142;
  double v143;
  double *v144;
  double v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  double v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  float64x2_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  double *v173;
  double v174;
  double v175;
  double *v176;
  double *v177;
  double *v178;
  double v179;
  double v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  float64x2_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  size_t v200;
  char *v201;
  double *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  double v211;
  double *v212;
  unint64_t v213;
  uint64_t v214;
  double *v215;
  double v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  char *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  __int128 v235;
  char *v236;
  __int128 v237;
  char *v238;
  __int128 v239;
  char *v240;
  __int128 v241;
  char *v242;
  __int128 v243;
  char *v244;
  __int128 v245;
  _BOOL4 v246;
  _BOOL4 v247;
  int v248;
  int v249;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t *v254;
  double v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v264;
  double v265;
  double v266;
  double v267;
  uint64_t v268;
  uint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  char *v277;
  double *v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  _OWORD *v287;
  uint64_t v288;
  unint64_t v290;
  uint64_t v292;
  uint64_t v293;
  double **v294;
  char *v295;
  double *__p;
  double v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v301;
  double v302;
  float64x2_t v303;
  float64x2_t v304;
  unint64_t v305;
  float64x2_t v306;
  unsigned int v307;
  void *v308;
  _BYTE *v309;
  char *v310;
  void *v311[2];
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  float64x2_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;

  v340 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v16 = a1 + 8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v17 = (_OWORD *)(a1 + 80);
  v331 = 0u;
  v332 = 0u;
  v329 = 0u;
  v330 = 0u;
  v333 = 0u;
  v334 = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v18 = v331;
  *(_OWORD *)(a1 + 96) = v330;
  *(_OWORD *)(a1 + 112) = v18;
  v19 = v333;
  *(_OWORD *)(a1 + 128) = v332;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v334;
  v308 = 0;
  v309 = 0;
  v310 = 0;
  v20 = *a2;
  v21 = a2[1];
  v22 = v21 - *a2;
  if (v21 == *a2)
  {
    v30 = 12345;
    v290 = a7;
    if (a6)
      goto LABEL_14;
  }
  else
  {
    if (v22 < 0)
      sub_20E867F44();
    v23 = (__int128 *)operator new(v21 - *a2);
    v24 = 0;
    v308 = v23;
    v310 = (char *)&v23[2 * (v22 >> 5)];
    do
    {
      v25 = v20 + v24;
      v26 = &v23[(unint64_t)v24 / 0x10];
      *v26 = *(_OWORD *)(v20 + v24);
      v26[1] = *(_OWORD *)(v20 + v24 + 16);
      v24 += 32;
    }
    while (v25 + 32 != v21);
    v309 = (char *)v23 + (v24 & 0xFFFFFFFFFFFFFFE0);
    if (v24)
    {
      v27 = 0;
      v28 = v24 >> 5;
      v29 = v23 + 1;
      v30 = 12345;
      do
      {
        v30 = 214013 * v30 + 2531011;
        v31 = &v23[2 * ((HIWORD(v30) & 0x7FFF) % v28) + 2 * v27];
        v32 = *v31;
        *v31 = *(v29 - 1);
        *(v29 - 1) = v32;
        v33 = v31[1];
        v31[1] = *v29;
        *v29 = v33;
        v29 += 2;
        ++v27;
        --v28;
      }
      while (v28);
      v290 = a7;
      if (a6)
        goto LABEL_14;
    }
    else
    {
      v30 = 12345;
      v290 = a7;
      if (a6)
        goto LABEL_14;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)&unk_210254DDD, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_230;
  }
LABEL_14:
  if (a6 > a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)&unk_210254DDD, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_230:
    abort();
  }
  v287 = v17;
  v288 = v16;
  if ((unint64_t)(v309 - (_BYTE *)v308) < 0xC0)
  {
    v295 = 0;
    __p = 0;
    v34 = 0;
    goto LABEL_18;
  }
  if (!a6)
  {
    v34 = 0;
    v295 = 0;
    __p = 0;
    if (!a5)
      goto LABEL_18;
    goto LABEL_169;
  }
  if (a6 > 0x1745D1745D1745DLL)
    sub_20E867F44();
  v34 = (double *)operator new(176 * a6);
  v295 = (char *)&v34[22 * a6];
  __p = v34;
  if (a5)
  {
LABEL_169:
    v224 = 0;
    while (1)
    {
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v318 = 0u;
      v316 = 0u;
      v317 = 0u;
      v314 = 0u;
      v315 = 0u;
      v312 = 0u;
      v313 = 0u;
      v229 = (char *)v308;
      v230 = v309 - (_BYTE *)v308;
      *(_OWORD *)v311 = 0u;
      if ((unint64_t)(v309 - (_BYTE *)v308) <= 0xA0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)&unk_210254DDD, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v229 = (char *)v308;
        v230 = v309 - (_BYTE *)v308;
      }
      v231 = 0;
      v232 = v230 >> 5;
      do
      {
        v30 = 214013 * v30 + 2531011;
        v233 = (HIWORD(v30) & 0x7FFF) % v232;
        *(_QWORD *)&v329.f64[v231] = v233;
        if (v231
          && (*(_QWORD *)&v329.f64[0] == v233
           || v231 != 1
           && (*(_QWORD *)&v329.f64[1] == v233
            || v231 != 2
            && ((_QWORD)v330 == v233
             || v231 != 3 && (*((_QWORD *)&v330 + 1) == v233 || v231 != 4 && (_QWORD)v331 == v233)))))
        {
          --v231;
        }
        ++v231;
      }
      while (v231 < 6);
      v234 = &v229[32 * *(_QWORD *)&v329.f64[0]];
      v235 = *((_OWORD *)v234 + 1);
      *(_OWORD *)v311 = *(_OWORD *)v234;
      v312 = v235;
      v236 = &v229[32 * *(_QWORD *)&v329.f64[1]];
      v237 = *((_OWORD *)v236 + 1);
      v313 = *(_OWORD *)v236;
      v314 = v237;
      v238 = &v229[32 * v330];
      v239 = *((_OWORD *)v238 + 1);
      v315 = *(_OWORD *)v238;
      v316 = v239;
      v240 = &v229[32 * *((_QWORD *)&v330 + 1)];
      v241 = *((_OWORD *)v240 + 1);
      v317 = *(_OWORD *)v240;
      v318 = v241;
      v242 = &v229[32 * v331];
      v243 = *((_OWORD *)v242 + 1);
      v319 = *(_OWORD *)v242;
      v320 = v243;
      v244 = &v229[32 * *((_QWORD *)&v331 + 1)];
      v245 = *((_OWORD *)v244 + 1);
      v321 = *(_OWORD *)v244;
      v322 = v245;
      bzero(&v329, 0x2D0uLL);
      LODWORD(v339) = 0;
      v246 = sub_20EB4A4D8(&v329, &v339, (double *)v311, (double *)&v312, (double *)&v313, (float64_t *)&v314, (double *)&v315, (float64_t *)&v316, (double *)&v317, (float64_t *)&v318, (double *)&v319, (double *)&v320);
      if ((_DWORD)v339)
        v247 = v246;
      else
        v247 = 0;
      if (v247)
      {
        if ((int)v339 < 1)
        {
          v268 = 0;
        }
        else
        {
          v248 = 0;
          v249 = 0;
          _D1 = *((_QWORD *)&v321 + 1);
          _D3 = *((_QWORD *)&v322 + 1);
          v252 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v321 + 1), 0);
          v253 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v322 + 1), 0);
          v254 = &v329;
          v255 = 1.0e11;
          do
          {
            v256.f64[0] = v254[1].f64[0];
            v257 = *(float64x2_t *)((char *)v254 + 24);
            v256.f64[1] = v254[2].f64[1];
            _Q20 = v254[3];
            _Q7 = vaddq_f64(v256, vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v254, (int64x2_t)v257), *(double *)&v321), v252, (float64x2_t)vzip2q_s64(*(int64x2_t *)v254, (int64x2_t)v257)));
            __asm { FMLA            D18, D1, V20.D[1] }
            v261 = vaddq_f64(_Q20, vmlaq_f64(vmulq_n_f64(*v254, *(double *)&v322), v253, v257));
            v262 = vmulq_f64(_Q7, _Q7);
            __asm { FMLA            D19, D3, V7.D[1] }
            v264 = vmulq_f64(v261, v261);
            v265 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v264, 1), vaddq_f64(vaddq_f64(v262, (float64x2_t)vdupq_laneq_s64((int64x2_t)v262, 1)), v264)).f64[0];
            if (v265 == 0.0)
              v266 = 1.0;
            else
              v266 = 1.0 / v265;
            v267 = (v254[4].f64[0] + _D18 + _D19) * (v254[4].f64[0] + _D18 + _D19) * v266;
            if (v267 < v255)
            {
              v249 = v248;
              v255 = v267;
            }
            ++v248;
            v254 = (float64x2_t *)((char *)v254 + 72);
          }
          while ((_DWORD)v339 != v248);
          v268 = 9 * v249;
        }
        v269 = (uint64_t *)&v329.f64[v268];
        v10 = v269[2];
        v292 = v269[1];
        v293 = *v269;
        v11 = v269[3];
        v13 = v269[4];
        v7 = v269[5];
        v8 = v269[6];
        v9 = v269[7];
        v12 = v269[8];
      }
      v323 = *(_OWORD *)v311;
      v324 = v312;
      v325 = v313;
      v326 = v314;
      v327 = v315;
      v328 = v316;
      if (v247)
        break;
LABEL_172:
      if (++v224 == a5)
        goto LABEL_18;
    }
    if (v34 < (double *)v295)
    {
      *v34 = 0.0;
      *((_QWORD *)v34 + 1) = v293;
      *((_QWORD *)v34 + 2) = v292;
      *((_QWORD *)v34 + 3) = v10;
      *((_QWORD *)v34 + 4) = v11;
      *((_QWORD *)v34 + 5) = v13;
      *((_QWORD *)v34 + 6) = v7;
      *((_QWORD *)v34 + 7) = v8;
      *((_QWORD *)v34 + 8) = v9;
      *((_QWORD *)v34 + 9) = v12;
      v225 = v326;
      *((_OWORD *)v34 + 7) = v325;
      *((_OWORD *)v34 + 8) = v225;
      v226 = v328;
      *((_OWORD *)v34 + 9) = v327;
      *((_OWORD *)v34 + 10) = v226;
      v227 = v324;
      *((_OWORD *)v34 + 5) = v323;
      *((_OWORD *)v34 + 6) = v227;
      v34 += 22;
      v228 = (char *)__p;
      goto LABEL_171;
    }
    v270 = 0x2E8BA2E8BA2E8BA3 * (((char *)v34 - (char *)__p) >> 4) + 1;
    if (v270 > 0x1745D1745D1745DLL)
      sub_20E867F44();
    if (0x5D1745D1745D1746 * ((v295 - (char *)__p) >> 4) > v270)
      v270 = 0x5D1745D1745D1746 * ((v295 - (char *)__p) >> 4);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v295 - (char *)__p) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
      v271 = 0x1745D1745D1745DLL;
    else
      v271 = v270;
    if (v271)
    {
      if (v271 > 0x1745D1745D1745DLL)
        sub_20E877A38();
      v272 = (char *)operator new(176 * v271);
    }
    else
    {
      v272 = 0;
    }
    v273 = &v272[16 * (((char *)v34 - (char *)__p) >> 4)];
    *(_QWORD *)v273 = 0;
    *((_QWORD *)v273 + 1) = v293;
    *((_QWORD *)v273 + 2) = v292;
    *((_QWORD *)v273 + 3) = v10;
    *((_QWORD *)v273 + 4) = v11;
    *((_QWORD *)v273 + 5) = v13;
    *((_QWORD *)v273 + 6) = v7;
    *((_QWORD *)v273 + 7) = v8;
    *((_QWORD *)v273 + 8) = v9;
    *((_QWORD *)v273 + 9) = v12;
    v274 = v326;
    *((_OWORD *)v273 + 7) = v325;
    *((_OWORD *)v273 + 8) = v274;
    v275 = v328;
    *((_OWORD *)v273 + 9) = v327;
    *((_OWORD *)v273 + 10) = v275;
    v276 = v324;
    *((_OWORD *)v273 + 5) = v323;
    *((_OWORD *)v273 + 6) = v276;
    if (v34 == __p)
    {
      v228 = &v272[16 * (((char *)v34 - (char *)__p) >> 4)];
      v278 = __p;
      v295 = &v272[176 * v271];
      v34 = (double *)(v273 + 176);
      if (__p)
LABEL_221:
        operator delete(v278);
    }
    else
    {
      v277 = &v272[16 * (((char *)v34 - (char *)__p) >> 4)];
      v278 = __p;
      do
      {
        v228 = v277 - 176;
        v279 = *((_OWORD *)v34 - 11);
        v280 = *((_OWORD *)v34 - 9);
        *((_OWORD *)v277 - 10) = *((_OWORD *)v34 - 10);
        *((_OWORD *)v277 - 9) = v280;
        *((_OWORD *)v277 - 11) = v279;
        v281 = *((_OWORD *)v34 - 8);
        v282 = *((_OWORD *)v34 - 7);
        v283 = *((_OWORD *)v34 - 5);
        *((_OWORD *)v277 - 6) = *((_OWORD *)v34 - 6);
        *((_OWORD *)v277 - 5) = v283;
        *((_OWORD *)v277 - 8) = v281;
        *((_OWORD *)v277 - 7) = v282;
        v284 = *((_OWORD *)v34 - 4);
        v285 = *((_OWORD *)v34 - 3);
        v286 = *((_OWORD *)v34 - 1);
        *((_OWORD *)v277 - 2) = *((_OWORD *)v34 - 2);
        *((_OWORD *)v277 - 1) = v286;
        *((_OWORD *)v277 - 4) = v284;
        *((_OWORD *)v277 - 3) = v285;
        v34 -= 22;
        v277 -= 176;
      }
      while (v34 != __p);
      v295 = &v272[176 * v271];
      v34 = (double *)(v273 + 176);
      if (__p)
        goto LABEL_221;
    }
LABEL_171:
    __p = (double *)v228;
    if (0x2E8BA2E8BA2E8BA3 * (((char *)v34 - v228) >> 4) == a6)
      goto LABEL_18;
    goto LABEL_172;
  }
LABEL_18:
  sub_20EB48474((uint64_t *)&v308, v290, (char **)v311);
  v35 = (double **)v311[0];
  v294 = (double **)v311[1];
  if (v311[0] != v311[1])
  {
    v36 = __p;
    if (__p == v34)
      goto LABEL_159;
    v37 = 0;
    v38 = v34;
    while (1)
    {
      if (v36 == v38)
      {
        v40 = *v35;
        v39 = v35[1];
        v62 = (char *)v38 - (char *)v36;
        v63 = 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (char *)v36) >> 4);
        if (v63 < 2)
          goto LABEL_128;
      }
      else
      {
        v40 = *v35;
        v39 = v35[1];
        if (*v35 == v39)
        {
          v64 = (char *)v38 - (char *)v36 - 176;
          v65 = v36;
          if (v64 < 0xB0)
            goto LABEL_235;
          v66 = v64 / 0xB0 + 1;
          v65 = &v36[22 * (v66 & 0x3FFFFFFFFFFFFFELL)];
          v67 = v66 & 0x3FFFFFFFFFFFFFELL;
          v68 = v36;
          do
          {
            v69 = v68[22] + 0.0;
            *v68 = *v68 + 0.0;
            v68[22] = v69;
            v68 += 44;
            v67 -= 2;
          }
          while (v67);
          if (v66 != (v66 & 0x3FFFFFFFFFFFFFELL))
          {
LABEL_235:
            do
            {
              *v65 = *v65 + 0.0;
              v65 += 22;
            }
            while (v65 != v38);
          }
          v39 = v40;
          v62 = (char *)v38 - (char *)v36;
          v63 = 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (char *)v36) >> 4);
          if (v63 < 2)
            goto LABEL_128;
        }
        else
        {
          v41 = *a4;
          v42 = v36;
          do
          {
            v43.f64[0] = v42[3];
            v44 = *(int64x2_t *)(v42 + 1);
            v302 = v42[9];
            v303 = *(float64x2_t *)(v42 + 4);
            v304 = (float64x2_t)v44;
            v298 = (float64x2_t)vzip2q_s64(v44, (int64x2_t)v303);
            v299 = (float64x2_t)vzip1q_s64(v44, (int64x2_t)v303);
            v43.f64[1] = v42[6];
            v306 = v43;
            v301 = *(float64x2_t *)(v42 + 7);
            *(_QWORD *)&v297 = vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u64[0];
            v45 = 0.0;
            v46 = v40;
            do
            {
              v47 = v46[1];
              _D3 = v46[3];
              _Q4 = vaddq_f64(v306, vmlaq_n_f64(vmulq_n_f64(v299, *v46), v298, v47));
              v50 = v302 + v301.f64[0] * *v46 + v297 * v47;
              __asm { FMLA            D1, D3, V4.D[1] }
              v56 = v50 + _D1;
              v57 = vaddq_f64(v301, vmlaq_n_f64(vmulq_n_f64(v304, v46[2]), v303, _D3));
              v58 = vmulq_f64(_Q4, _Q4);
              v59 = vmulq_f64(v57, v57);
              v60 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v59, 1), vaddq_f64(vaddq_f64(v58, (float64x2_t)vdupq_laneq_s64((int64x2_t)v58, 1)), v59)).f64[0];
              if (v60 == 0.0)
                v61 = 1.0;
              else
                v61 = 1.0 / v60;
              v45 = v45 + log1p(v41 * (v56 * v56 * v61));
              v46 += 4;
            }
            while (v46 != v39);
            *v42 = v45 + *v42;
            v42 += 22;
          }
          while (v42 != v38);
          v62 = (char *)v38 - (char *)v36;
          v63 = 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (char *)v36) >> 4);
          if (v63 < 2)
            goto LABEL_128;
        }
      }
      v307 = v37;
      v70 = (v63 - 1) >> 1;
      if (v62 == 352)
        v70 = 1;
      v71 = &v36[22 * v70];
      if (v71 != v38)
      {
        v305 = v70;
        do
        {
          v72 = 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (char *)v36) >> 4);
          if (v72 < 2)
            break;
          if (v72 == 3)
          {
            sub_20EB52354((uint64_t)v36, (uint64_t)(v36 + 22), (uint64_t)(v38 - 22));
            break;
          }
          if (v72 == 2)
          {
            v155 = *v36;
            if (*(v38 - 22) < *v36)
            {
              v156 = *(_OWORD *)(v36 + 3);
              v157 = *(_OWORD *)(v36 + 5);
              v158 = *(_OWORD *)(v36 + 7);
              *(double *)&v333 = v36[9];
              v159 = *(float64x2_t *)(v36 + 1);
              v331 = v157;
              v332 = v158;
              v329 = v159;
              v330 = v156;
              v160 = *((_OWORD *)v36 + 6);
              v323 = *((_OWORD *)v36 + 5);
              v339 = v160;
              v161 = *((_OWORD *)v36 + 8);
              v338 = *((_OWORD *)v36 + 7);
              v337 = v161;
              v162 = *((_OWORD *)v36 + 9);
              v335 = *((_OWORD *)v36 + 10);
              v336 = v162;
              *v36 = *(v38 - 22);
              *(_OWORD *)(v36 + 1) = *(_OWORD *)(v38 - 21);
              v163 = *(_OWORD *)(v38 - 19);
              v164 = *(_OWORD *)(v38 - 17);
              v165 = *(_OWORD *)(v38 - 15);
              v36[9] = *(v38 - 13);
              *(_OWORD *)(v36 + 7) = v165;
              *(_OWORD *)(v36 + 5) = v164;
              *(_OWORD *)(v36 + 3) = v163;
              *((_OWORD *)v36 + 5) = *((_OWORD *)v38 - 6);
              *((_OWORD *)v36 + 6) = *((_OWORD *)v38 - 5);
              *((_OWORD *)v36 + 7) = *((_OWORD *)v38 - 4);
              *((_OWORD *)v36 + 8) = *((_OWORD *)v38 - 3);
              *((_OWORD *)v36 + 9) = *((_OWORD *)v38 - 2);
              *((_OWORD *)v36 + 10) = *((_OWORD *)v38 - 1);
              *(v38 - 22) = v155;
              *(float64x2_t *)(v38 - 21) = v329;
              v166 = v330;
              v167 = v331;
              v168 = v332;
              *((_QWORD *)v38 - 13) = v333;
              *(_OWORD *)(v38 - 15) = v168;
              *(_OWORD *)(v38 - 17) = v167;
              *(_OWORD *)(v38 - 19) = v166;
              *((_OWORD *)v38 - 6) = v323;
              *((_OWORD *)v38 - 5) = v339;
              *((_OWORD *)v38 - 4) = v338;
              *((_OWORD *)v38 - 3) = v337;
              *((_OWORD *)v38 - 2) = v336;
              *((_OWORD *)v38 - 1) = v335;
            }
            break;
          }
          if ((char *)v38 - (char *)v36 <= 1407)
          {
            while (v36 != v38 - 22)
            {
              v173 = v36;
              v36 += 22;
              if (v173 != v38 && v36 != v38)
              {
                v174 = *v173;
                v175 = *v173;
                v176 = v36;
                v177 = v173;
                v178 = v36;
                do
                {
                  v179 = *v178;
                  v178 += 22;
                  v180 = v179;
                  if (v179 < v175)
                  {
                    v175 = v180;
                    v177 = v176;
                  }
                  v176 = v178;
                }
                while (v178 != v38);
                if (v177 != v173)
                {
                  v181 = *(_OWORD *)(v173 + 3);
                  v182 = *(_OWORD *)(v173 + 5);
                  v183 = *(_OWORD *)(v173 + 7);
                  *(double *)&v333 = v173[9];
                  v184 = *(float64x2_t *)(v173 + 1);
                  v331 = v182;
                  v332 = v183;
                  v329 = v184;
                  v330 = v181;
                  v185 = *((_OWORD *)v173 + 6);
                  v323 = *((_OWORD *)v173 + 5);
                  v339 = v185;
                  v186 = *((_OWORD *)v173 + 8);
                  v338 = *((_OWORD *)v173 + 7);
                  v337 = v186;
                  v187 = *((_OWORD *)v173 + 9);
                  v335 = *((_OWORD *)v173 + 10);
                  v336 = v187;
                  *v173 = *v177;
                  *(_OWORD *)(v173 + 1) = *(_OWORD *)(v177 + 1);
                  v188 = *(_OWORD *)(v177 + 3);
                  v189 = *(_OWORD *)(v177 + 5);
                  v190 = *(_OWORD *)(v177 + 7);
                  v173[9] = v177[9];
                  *(_OWORD *)(v173 + 7) = v190;
                  *(_OWORD *)(v173 + 5) = v189;
                  *(_OWORD *)(v173 + 3) = v188;
                  *((_OWORD *)v173 + 5) = *((_OWORD *)v177 + 5);
                  *((_OWORD *)v173 + 6) = *((_OWORD *)v177 + 6);
                  *((_OWORD *)v173 + 7) = *((_OWORD *)v177 + 7);
                  *((_OWORD *)v173 + 8) = *((_OWORD *)v177 + 8);
                  *((_OWORD *)v173 + 9) = *((_OWORD *)v177 + 9);
                  *((_OWORD *)v173 + 10) = *((_OWORD *)v177 + 10);
                  *v177 = v174;
                  *(float64x2_t *)(v177 + 1) = v329;
                  v191 = v330;
                  v192 = v331;
                  v193 = v332;
                  *((_QWORD *)v177 + 9) = v333;
                  *(_OWORD *)(v177 + 7) = v193;
                  *(_OWORD *)(v177 + 5) = v192;
                  *(_OWORD *)(v177 + 3) = v191;
                  v194 = v339;
                  *((_OWORD *)v177 + 5) = v323;
                  *((_OWORD *)v177 + 6) = v194;
                  v195 = v337;
                  *((_OWORD *)v177 + 7) = v338;
                  *((_OWORD *)v177 + 8) = v195;
                  v196 = v335;
                  *((_OWORD *)v177 + 9) = v336;
                  *((_OWORD *)v177 + 10) = v196;
                }
              }
            }
            break;
          }
          v73 = (uint64_t)&v36[22 * (v72 >> 1)];
          v74 = (unint64_t)(v38 - 22);
          v75 = sub_20EB52354((uint64_t)v36, v73, (uint64_t)(v38 - 22));
          v76 = *v36;
          if (*v36 < *(double *)v73)
          {
LABEL_53:
            v92 = v36 + 22;
            if ((unint64_t)(v36 + 22) >= v74)
            {
              v97 = v36 + 22;
            }
            else
            {
              v93 = v36 + 22;
              while (1)
              {
                v94 = *(double *)v73;
                do
                {
                  v95 = *v93;
                  v93 += 22;
                  v96 = v95;
                }
                while (v95 < v94);
                v97 = v93 - 22;
                do
                {
                  v98 = *(double *)(v74 - 176);
                  v74 -= 176;
                }
                while (v98 >= v94);
                if ((unint64_t)v97 >= v74)
                  break;
                v329 = *(float64x2_t *)(v93 - 21);
                v99 = *(_OWORD *)(v93 - 19);
                v100 = *(_OWORD *)(v93 - 17);
                v101 = *(_OWORD *)(v93 - 15);
                *(double *)&v333 = *(v93 - 13);
                v331 = v100;
                v332 = v101;
                v330 = v99;
                v323 = *((_OWORD *)v93 - 6);
                v339 = *((_OWORD *)v93 - 5);
                v338 = *((_OWORD *)v93 - 4);
                v337 = *((_OWORD *)v93 - 3);
                v336 = *((_OWORD *)v93 - 2);
                v335 = *((_OWORD *)v93 - 1);
                *(v93 - 22) = *(double *)v74;
                *(_OWORD *)(v93 - 21) = *(_OWORD *)(v74 + 8);
                v102 = *(_OWORD *)(v74 + 24);
                v103 = *(_OWORD *)(v74 + 40);
                v104 = *(_OWORD *)(v74 + 56);
                *(v93 - 13) = *(double *)(v74 + 72);
                *(_OWORD *)(v93 - 15) = v104;
                *(_OWORD *)(v93 - 17) = v103;
                *(_OWORD *)(v93 - 19) = v102;
                *((_OWORD *)v93 - 6) = *(_OWORD *)(v74 + 80);
                *((_OWORD *)v93 - 5) = *(_OWORD *)(v74 + 96);
                *((_OWORD *)v93 - 4) = *(_OWORD *)(v74 + 112);
                *((_OWORD *)v93 - 3) = *(_OWORD *)(v74 + 128);
                *((_OWORD *)v93 - 2) = *(_OWORD *)(v74 + 144);
                *((_OWORD *)v93 - 1) = *(_OWORD *)(v74 + 160);
                *(double *)v74 = v96;
                *(float64x2_t *)(v74 + 8) = v329;
                v105 = v330;
                v106 = v331;
                v107 = v332;
                *(_QWORD *)(v74 + 72) = v333;
                *(_OWORD *)(v74 + 56) = v107;
                *(_OWORD *)(v74 + 40) = v106;
                *(_OWORD *)(v74 + 24) = v105;
                *(_OWORD *)(v74 + 80) = v323;
                *(_OWORD *)(v74 + 96) = v339;
                *(_OWORD *)(v74 + 112) = v338;
                *(_OWORD *)(v74 + 128) = v337;
                *(_OWORD *)(v74 + 144) = v336;
                *(_OWORD *)(v74 + 160) = v335;
                ++v75;
                if (v97 == (double *)v73)
                  v73 = v74;
              }
            }
            if (v97 != (double *)v73)
            {
              v108 = *v97;
              if (*(double *)v73 < *v97)
              {
                v109 = *(_OWORD *)(v97 + 3);
                v110 = *(_OWORD *)(v97 + 5);
                v111 = *(_OWORD *)(v97 + 7);
                *(double *)&v333 = v97[9];
                v112 = *(float64x2_t *)(v97 + 1);
                v331 = v110;
                v332 = v111;
                v329 = v112;
                v330 = v109;
                v113 = *((_OWORD *)v97 + 6);
                v323 = *((_OWORD *)v97 + 5);
                v339 = v113;
                v114 = *((_OWORD *)v97 + 8);
                v338 = *((_OWORD *)v97 + 7);
                v337 = v114;
                v115 = *((_OWORD *)v97 + 9);
                v335 = *((_OWORD *)v97 + 10);
                v336 = v115;
                *v97 = *(double *)v73;
                *(_OWORD *)(v97 + 1) = *(_OWORD *)(v73 + 8);
                v116 = *(_OWORD *)(v73 + 24);
                v117 = *(_OWORD *)(v73 + 40);
                v118 = *(_OWORD *)(v73 + 56);
                v97[9] = *(double *)(v73 + 72);
                *(_OWORD *)(v97 + 7) = v118;
                *(_OWORD *)(v97 + 5) = v117;
                *(_OWORD *)(v97 + 3) = v116;
                *((_OWORD *)v97 + 5) = *(_OWORD *)(v73 + 80);
                *((_OWORD *)v97 + 6) = *(_OWORD *)(v73 + 96);
                *((_OWORD *)v97 + 7) = *(_OWORD *)(v73 + 112);
                *((_OWORD *)v97 + 8) = *(_OWORD *)(v73 + 128);
                *((_OWORD *)v97 + 9) = *(_OWORD *)(v73 + 144);
                *((_OWORD *)v97 + 10) = *(_OWORD *)(v73 + 160);
                *(double *)v73 = v108;
                *(float64x2_t *)(v73 + 8) = v329;
                v119 = v330;
                v120 = v331;
                v121 = v332;
                *(_QWORD *)(v73 + 72) = v333;
                *(_OWORD *)(v73 + 56) = v121;
                *(_OWORD *)(v73 + 40) = v120;
                *(_OWORD *)(v73 + 24) = v119;
                v122 = v339;
                *(_OWORD *)(v73 + 80) = v323;
                *(_OWORD *)(v73 + 96) = v122;
                v123 = v337;
                *(_OWORD *)(v73 + 112) = v338;
                *(_OWORD *)(v73 + 128) = v123;
                v124 = v335;
                *(_OWORD *)(v73 + 144) = v336;
                *(_OWORD *)(v73 + 160) = v124;
                ++v75;
              }
            }
            if (v97 == v71)
              break;
            if (!v75)
            {
              if (v97 <= v71)
              {
                v129 = v97 + 22;
                while (v129 != v38)
                {
                  v130 = *v129;
                  v131 = *(v129 - 22);
                  v129 += 22;
                  if (v130 < v131)
                    goto LABEL_69;
                }
              }
              else
              {
                while (v92 != v97)
                {
                  v125 = *v92;
                  v126 = *(v92 - 22);
                  v92 += 22;
                  if (v125 < v126)
                    goto LABEL_69;
                }
              }
              break;
            }
LABEL_69:
            if (v97 <= v71)
              v36 = v97 + 22;
            else
              v38 = v97;
          }
          else
          {
            v77 = 0;
            while (1)
            {
              v78 = &v38[v77 - 44];
              if (v78 == v36)
                break;
              v77 -= 22;
              if (*v78 < *(double *)v73)
              {
                v79 = *(_OWORD *)(v36 + 3);
                v80 = *(_OWORD *)(v36 + 5);
                v81 = *(_OWORD *)(v36 + 7);
                *(double *)&v333 = v36[9];
                v82 = *(float64x2_t *)(v36 + 1);
                v331 = v80;
                v332 = v81;
                v329 = v82;
                v330 = v79;
                v83 = *((_OWORD *)v36 + 6);
                v323 = *((_OWORD *)v36 + 5);
                v339 = v83;
                v84 = *((_OWORD *)v36 + 8);
                v338 = *((_OWORD *)v36 + 7);
                v337 = v84;
                v85 = *((_OWORD *)v36 + 9);
                v335 = *((_OWORD *)v36 + 10);
                v336 = v85;
                v74 = (unint64_t)&v38[v77 - 22];
                *v36 = *(double *)v74;
                *(_OWORD *)(v36 + 1) = *(_OWORD *)&v38[v77 - 21];
                v86 = *(_OWORD *)&v38[v77 - 19];
                v87 = *(_OWORD *)&v38[v77 - 17];
                v88 = *(_OWORD *)&v38[v77 - 15];
                v36[9] = v38[v77 - 13];
                *(_OWORD *)(v36 + 7) = v88;
                *(_OWORD *)(v36 + 5) = v87;
                *(_OWORD *)(v36 + 3) = v86;
                *((_OWORD *)v36 + 5) = *(_OWORD *)&v38[v77 - 12];
                *((_OWORD *)v36 + 6) = *(_OWORD *)&v38[v77 - 10];
                *((_OWORD *)v36 + 7) = *(_OWORD *)&v38[v77 - 8];
                *((_OWORD *)v36 + 8) = *(_OWORD *)&v38[v77 - 6];
                *((_OWORD *)v36 + 9) = *(_OWORD *)&v38[v77 - 4];
                *((_OWORD *)v36 + 10) = *(_OWORD *)&v38[v77 - 2];
                *(double *)v74 = v76;
                *(float64x2_t *)(v74 + 8) = v329;
                v89 = v330;
                v90 = v331;
                v91 = v332;
                *(_QWORD *)(v74 + 72) = v333;
                *(_OWORD *)(v74 + 56) = v91;
                *(_OWORD *)(v74 + 40) = v90;
                *(_OWORD *)(v74 + 24) = v89;
                *(_OWORD *)(v74 + 80) = v323;
                *(_OWORD *)(v74 + 96) = v339;
                *(_OWORD *)(v74 + 112) = v338;
                *(_OWORD *)(v74 + 128) = v337;
                *(_OWORD *)(v74 + 144) = v336;
                *(_OWORD *)(v74 + 160) = v335;
                ++v75;
                goto LABEL_53;
              }
            }
            v127 = v36 + 22;
            if (v76 >= *(double *)v74)
            {
              if (v127 == (double *)v74)
                break;
              v127 = v36 + 44;
              while (1)
              {
                v128 = *(v127 - 22);
                if (v76 < v128)
                  break;
                _ZF = v127 == (double *)v74;
                v127 += 22;
                if (_ZF)
                  goto LABEL_102;
              }
              v329 = *(float64x2_t *)(v127 - 21);
              v132 = *(_OWORD *)(v127 - 19);
              v133 = *(_OWORD *)(v127 - 17);
              v134 = *(_OWORD *)(v127 - 15);
              *(double *)&v333 = *(v127 - 13);
              v331 = v133;
              v332 = v134;
              v330 = v132;
              v323 = *((_OWORD *)v127 - 6);
              v339 = *((_OWORD *)v127 - 5);
              v338 = *((_OWORD *)v127 - 4);
              v337 = *((_OWORD *)v127 - 3);
              v336 = *((_OWORD *)v127 - 2);
              v335 = *((_OWORD *)v127 - 1);
              *(v127 - 22) = *(v38 - 22);
              *(_OWORD *)(v127 - 21) = *(_OWORD *)(v38 - 21);
              v135 = *(_OWORD *)(v38 - 19);
              v136 = *(_OWORD *)(v38 - 17);
              v137 = *(_OWORD *)(v38 - 15);
              *(v127 - 13) = *(v38 - 13);
              *(_OWORD *)(v127 - 15) = v137;
              *(_OWORD *)(v127 - 17) = v136;
              *(_OWORD *)(v127 - 19) = v135;
              *((_OWORD *)v127 - 6) = *((_OWORD *)v38 - 6);
              *((_OWORD *)v127 - 5) = *((_OWORD *)v38 - 5);
              *((_OWORD *)v127 - 4) = *((_OWORD *)v38 - 4);
              *((_OWORD *)v127 - 3) = *((_OWORD *)v38 - 3);
              *((_OWORD *)v127 - 2) = *((_OWORD *)v38 - 2);
              *((_OWORD *)v127 - 1) = *((_OWORD *)v38 - 1);
              *(v38 - 22) = v128;
              *(float64x2_t *)(v38 - 21) = v329;
              v138 = v330;
              v139 = v331;
              v140 = v332;
              *((_QWORD *)v38 - 13) = v333;
              *(_OWORD *)(v38 - 15) = v140;
              *(_OWORD *)(v38 - 17) = v139;
              *(_OWORD *)(v38 - 19) = v138;
              *((_OWORD *)v38 - 6) = v323;
              *((_OWORD *)v38 - 5) = v339;
              *((_OWORD *)v38 - 4) = v338;
              *((_OWORD *)v38 - 3) = v337;
              *((_OWORD *)v38 - 2) = v336;
              *((_OWORD *)v38 - 1) = v335;
            }
            if (v127 == (double *)v74)
              break;
            while (1)
            {
              v141 = *v36;
              do
              {
                v142 = *v127;
                v127 += 22;
                v143 = v142;
              }
              while (v141 >= v142);
              v144 = v127 - 22;
              do
              {
                v145 = *(double *)(v74 - 176);
                v74 -= 176;
              }
              while (v141 < v145);
              if ((unint64_t)v144 >= v74)
                break;
              v329 = *(float64x2_t *)(v127 - 21);
              v146 = *(_OWORD *)(v127 - 19);
              v147 = *(_OWORD *)(v127 - 17);
              v148 = *(_OWORD *)(v127 - 15);
              *(double *)&v333 = *(v127 - 13);
              v331 = v147;
              v332 = v148;
              v330 = v146;
              v323 = *((_OWORD *)v127 - 6);
              v339 = *((_OWORD *)v127 - 5);
              v338 = *((_OWORD *)v127 - 4);
              v337 = *((_OWORD *)v127 - 3);
              v336 = *((_OWORD *)v127 - 2);
              v335 = *((_OWORD *)v127 - 1);
              *(v127 - 22) = *(double *)v74;
              *(_OWORD *)(v127 - 21) = *(_OWORD *)(v74 + 8);
              v149 = *(_OWORD *)(v74 + 24);
              v150 = *(_OWORD *)(v74 + 40);
              v151 = *(_OWORD *)(v74 + 56);
              *(v127 - 13) = *(double *)(v74 + 72);
              *(_OWORD *)(v127 - 15) = v151;
              *(_OWORD *)(v127 - 17) = v150;
              *(_OWORD *)(v127 - 19) = v149;
              *((_OWORD *)v127 - 6) = *(_OWORD *)(v74 + 80);
              *((_OWORD *)v127 - 5) = *(_OWORD *)(v74 + 96);
              *((_OWORD *)v127 - 4) = *(_OWORD *)(v74 + 112);
              *((_OWORD *)v127 - 3) = *(_OWORD *)(v74 + 128);
              *((_OWORD *)v127 - 2) = *(_OWORD *)(v74 + 144);
              *((_OWORD *)v127 - 1) = *(_OWORD *)(v74 + 160);
              *(double *)v74 = v143;
              *(float64x2_t *)(v74 + 8) = v329;
              v152 = v330;
              v153 = v331;
              v154 = v332;
              *(_QWORD *)(v74 + 72) = v333;
              *(_OWORD *)(v74 + 56) = v154;
              *(_OWORD *)(v74 + 40) = v153;
              *(_OWORD *)(v74 + 24) = v152;
              *(_OWORD *)(v74 + 80) = v323;
              *(_OWORD *)(v74 + 96) = v339;
              *(_OWORD *)(v74 + 112) = v338;
              *(_OWORD *)(v74 + 128) = v337;
              *(_OWORD *)(v74 + 144) = v336;
              *(_OWORD *)(v74 + 160) = v335;
            }
            v36 = v127 - 22;
            if (v144 > v71)
              break;
          }
        }
        while (v38 != v71);
LABEL_102:
        v36 = __p;
        v63 = 0x2E8BA2E8BA2E8BA3 * (((char *)v34 - (char *)__p) >> 4);
        v38 = v34;
        v70 = v305;
      }
      v169 = v70 - v63;
      if (v70 <= v63)
      {
        if (v70 < v63)
        {
          v34 = &v36[22 * v70];
          v38 = v34;
        }
        goto LABEL_127;
      }
      if (0x2E8BA2E8BA2E8BA3 * ((v295 - (char *)v38) >> 4) >= v169)
      {
        bzero(v38, 176 * ((176 * v169 - 176) / 0xB0) + 176);
        v34 = &v38[22 * ((176 * v169 - 176) / 0xB0) + 22];
        v36 = __p;
        v38 = v34;
LABEL_127:
        v37 = v307;
LABEL_128:
        v37 += (unint64_t)((char *)v39 - (char *)v40) >> 5;
        v197 = (char *)v38 - (char *)v36;
        v198 = (char *)v38 - (char *)v36 - 176;
        if ((char *)v38 - (char *)v36 == 176)
          goto LABEL_145;
        goto LABEL_129;
      }
      v170 = 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (char *)__p) >> 4) + v169;
      if (v170 > 0x1745D1745D1745DLL)
        sub_20E867F44();
      if (0x5D1745D1745D1746 * ((v295 - (char *)__p) >> 4) > v170)
        v170 = 0x5D1745D1745D1746 * ((v295 - (char *)__p) >> 4);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v295 - (char *)__p) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v171 = 0x1745D1745D1745DLL;
      else
        v171 = v170;
      if (v171)
      {
        if (v171 > 0x1745D1745D1745DLL)
          sub_20E877A38();
        v172 = (char *)operator new(176 * v171);
      }
      else
      {
        v172 = 0;
      }
      v199 = &v172[16 * (((char *)v38 - (char *)__p) >> 4)];
      v200 = 176 * ((176 * v169 - 176) / 0xB0) + 176;
      bzero(v199, v200);
      if (v38 == __p)
      {
        v36 = (double *)&v172[16 * (((char *)v38 - (char *)__p) >> 4)];
        v202 = __p;
        v295 = &v172[176 * v171];
        v34 = (double *)&v199[v200];
        if (__p)
          goto LABEL_136;
      }
      else
      {
        v201 = &v172[16 * (((char *)v38 - (char *)__p) >> 4)];
        v202 = __p;
        do
        {
          v36 = (double *)(v201 - 176);
          v203 = *((_OWORD *)v38 - 11);
          v204 = *((_OWORD *)v38 - 9);
          *((_OWORD *)v201 - 10) = *((_OWORD *)v38 - 10);
          *((_OWORD *)v201 - 9) = v204;
          *((_OWORD *)v201 - 11) = v203;
          v205 = *((_OWORD *)v38 - 8);
          v206 = *((_OWORD *)v38 - 7);
          v207 = *((_OWORD *)v38 - 5);
          *((_OWORD *)v201 - 6) = *((_OWORD *)v38 - 6);
          *((_OWORD *)v201 - 5) = v207;
          *((_OWORD *)v201 - 8) = v205;
          *((_OWORD *)v201 - 7) = v206;
          v208 = *((_OWORD *)v38 - 4);
          v209 = *((_OWORD *)v38 - 3);
          v210 = *((_OWORD *)v38 - 1);
          *((_OWORD *)v201 - 2) = *((_OWORD *)v38 - 2);
          *((_OWORD *)v201 - 1) = v210;
          *((_OWORD *)v201 - 4) = v208;
          *((_OWORD *)v201 - 3) = v209;
          v38 -= 22;
          v201 -= 176;
        }
        while (v38 != __p);
        v295 = &v172[176 * v171];
        v34 = (double *)&v199[v200];
        if (__p)
LABEL_136:
          operator delete(v202);
      }
      __p = v36;
      v38 = v34;
      v37 = v307 + ((unint64_t)((char *)v39 - (char *)v40) >> 5);
      v197 = (char *)v34 - (char *)v36;
      v198 = (char *)v34 - (char *)v36 - 176;
      if ((char *)v34 - (char *)v36 == 176)
      {
LABEL_145:
        if (v37)
        {
          if (v36 != v38)
          {
            v211 = (double)v37;
            v212 = v36;
            if (v198 < 0xB0)
              goto LABEL_236;
            v213 = v198 / 0xB0 + 1;
            v212 = &v36[22 * (v213 & 0x3FFFFFFFFFFFFFELL)];
            v214 = v213 & 0x3FFFFFFFFFFFFFELL;
            v215 = v36;
            do
            {
              v216 = v215[22] / v211;
              *v215 = *v215 / v211;
              v215[22] = v216;
              v215 += 44;
              v214 -= 2;
            }
            while (v214);
            if (v213 != (v213 & 0x3FFFFFFFFFFFFFELL))
            {
LABEL_236:
              do
              {
                *v212 = *v212 / v211;
                v212 += 22;
              }
              while (v212 != v38);
            }
          }
          v217 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (v197 >> 4));
          if (v36 == v38)
            v218 = 0;
          else
            v218 = v217;
          sub_20EB52890((uint64_t)v36, (unint64_t)v38, v218, 1);
        }
        v36 = __p;
        if (__p != v34)
        {
          *(double *)a1 = *__p;
          *(_OWORD *)v288 = *(_OWORD *)(__p + 1);
          v219 = *(_OWORD *)(__p + 3);
          v220 = *(_OWORD *)(__p + 5);
          v221 = *(_OWORD *)(__p + 7);
          *(double *)(v288 + 64) = __p[9];
          *(_OWORD *)(v288 + 32) = v220;
          *(_OWORD *)(v288 + 48) = v221;
          *(_OWORD *)(v288 + 16) = v219;
          *v287 = *((_OWORD *)__p + 5);
          *(_OWORD *)(a1 + 96) = *((_OWORD *)__p + 6);
          *(_OWORD *)(a1 + 112) = *((_OWORD *)__p + 7);
          *(_OWORD *)(a1 + 128) = *((_OWORD *)__p + 8);
          *(_OWORD *)(a1 + 144) = *((_OWORD *)__p + 9);
          *(_OWORD *)(a1 + 160) = *((_OWORD *)__p + 10);
          v222 = 1;
          v35 = (double **)v311[0];
          if (!v311[0])
            goto LABEL_161;
LABEL_160:
          v311[1] = v35;
          operator delete(v35);
          goto LABEL_161;
        }
LABEL_159:
        v222 = 0;
        v35 = (double **)v311[0];
        if (!v311[0])
          goto LABEL_161;
        goto LABEL_160;
      }
LABEL_129:
      v35 += 2;
      if (v35 == v294)
        goto LABEL_145;
    }
  }
  v222 = 0;
  v36 = __p;
  if (v311[0])
    goto LABEL_160;
LABEL_161:
  if (v36)
    operator delete(v36);
  if (v308)
  {
    v309 = v308;
    operator delete(v308);
  }
  return v222;
}

void sub_20EB4A458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  void *v53;

  if (a51)
  {
    operator delete(a51);
    if (!a30)
    {
LABEL_3:
      v53 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!a30)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  v53 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v53);
  goto LABEL_5;
}

BOOL sub_20EB4A4D8(float64x2_t *a1, _DWORD *a2, double *a3, double *a4, double *a5, float64_t *a6, double *a7, float64_t *a8, double *a9, float64_t *a10, double *a11, double *a12)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64_t v19;
  double v20;
  float64_t v21;
  double v22;
  double v23;
  float64_t v24;
  double v25;
  float64_t v26;
  double v27;
  double v28;
  float64_t v29;
  double v30;
  float64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  int64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  float64x2_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  int8x16_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  float64x2_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  float64x2_t v301;
  float64x2_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  int8x16_t v324;
  float64x2_t v325;
  int8x16_t v326;
  float64x2_t v327;
  int8x16_t v328;
  float64x2_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  int8x16_t v364;
  int8x16_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  int8x16_t v370;
  int8x16_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  int8x16_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  int8x16_t v435;
  int8x16_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  _BOOL8 v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  _BYTE *v445;
  uint64_t v446;
  float64x2_t *v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  uint64_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  double *v473;
  double v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  double v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  double v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  double v566;
  double v567;
  double v568;
  float64x2_t v569;
  float64x2_t v570;
  double v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  double v584;
  double v585;
  double v586;
  float64x2_t v587;
  int8x16_t v588;
  int8x16_t v589;
  double v590;
  int8x16_t v591;
  double v592;
  int8x16_t v593;
  int8x16_t v594;
  double v595;
  int8x16_t v596;
  float64x2_t v597;
  float64x2_t v598;
  int8x16_t v599;
  float64x2_t v600;
  float64x2_t v601;
  int8x16_t v602;
  double v603;
  int8x16_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  int8x16_t v608;
  float64x2_t v609;
  float64x2_t v610;
  int8x16_t v611;
  int8x16_t v612;
  float64x2_t v613;
  float64x2_t v614;
  int8x16_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  int8x16_t v619;
  float64x2_t v620;
  float64x2_t v621;
  int8x16_t v622;
  int8x16_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  int8x16_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  int8x16_t v632;
  double v633;
  int8x16_t v634;
  float64x2_t v635;
  double v636;
  int8x16_t v637;
  float64x2_t v638;
  float64x2_t v639;
  int8x16_t v640;
  int8x16_t v641;
  float64x2_t v642;
  double v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  double v647;
  int8x16_t v648;
  int8x16_t v649;
  float64x2_t v650;
  double v651;
  int8x16_t v652;
  int8x16_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int8x16_t v660;
  double v661;
  float64x2_t v662;
  float64x2_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  float64x2_t v681;
  float64x2_t v682;
  double v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  float64x2_t v687;
  float64x2_t v688;
  double v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  float64x2_t v693;
  float64x2_t v694;
  double v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  float64x2_t v699;
  double v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  float64x2_t v704;
  float64x2_t v705;
  double v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  float64x2_t v710;
  double v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  float64x2_t v716;
  float64x2_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  float64x2_t v721;
  float64x2_t v722;
  void *__p;
  _BYTE *v724;
  char *v725;
  float64x2_t v726[4];
  float64x2_t v727;
  uint64_t v728;
  float64x2_t v729;
  _BYTE v730[48];
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  _BYTE v735[32];
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  _BYTE v744[32];
  double v745;
  double v746;
  double v747;
  double v748;
  _BYTE v749[80];
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  _BYTE v754[24];
  _BYTE v755[56];
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  double v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  _BYTE v769[32];
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  _BYTE v778[32];
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  _BYTE v787[32];
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  _BYTE v796[32];
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  _BYTE v805[32];
  float64x2_t v806;
  _BYTE v807[144];
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  _BYTE v814[32];
  _BYTE v815[32];
  _BYTE v816[160];
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  _BYTE v823[32];
  _BYTE v824[32];
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  _BYTE v830[32];
  float64x2_t v831;
  _BYTE v832[32];
  uint64_t v833;

  v833 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  v15 = a4[1];
  v16 = *a4 * v13;
  v729.f64[0] = *a4 * *a3;
  v729.f64[1] = v16;
  *(double *)v730 = v14;
  *(double *)&v730[8] = v12 * v15;
  *(double *)&v730[16] = v13 * v15;
  *(double *)&v730[24] = v15;
  *(double *)&v730[32] = v12;
  *(double *)&v730[40] = v13;
  v731.f64[0] = 1.0;
  v17 = *a5;
  v18 = a5[1];
  v19 = *a6;
  v20 = a6[1];
  v21 = *a6 * v18;
  v731.f64[1] = *a6 * *a5;
  v732.f64[0] = v21;
  v732.f64[1] = v19;
  v733.f64[0] = v17 * v20;
  v733.f64[1] = v18 * v20;
  v734.f64[0] = v20;
  v734.f64[1] = v17;
  *(double *)v735 = v18;
  *(_QWORD *)&v735[8] = 0x3FF0000000000000;
  v22 = *a7;
  v23 = a7[1];
  v24 = *a8;
  v25 = a8[1];
  v26 = *a8 * v23;
  *(double *)&v735[16] = *a8 * *a7;
  *(float64_t *)&v735[24] = v26;
  v736.f64[0] = v24;
  v736.f64[1] = v22 * v25;
  v737.f64[0] = v23 * v25;
  v737.f64[1] = v25;
  v738.f64[0] = v22;
  v738.f64[1] = v23;
  v739.f64[0] = 1.0;
  v27 = *a9;
  v28 = a9[1];
  v29 = *a10;
  v30 = a10[1];
  v31 = *a10 * v28;
  v739.f64[1] = *a10 * *a9;
  v740.f64[0] = v31;
  v740.f64[1] = v29;
  v741.f64[0] = v27 * v30;
  v741.f64[1] = v28 * v30;
  v742.f64[0] = v30;
  v742.f64[1] = v27;
  v743.f64[0] = v28;
  v743.f64[1] = 1.0;
  v32 = *a11;
  v33 = a11[1];
  v34 = *a12;
  v35 = a12[1];
  v36 = *a12 * v33;
  *(double *)v744 = *a12 * *a11;
  *(double *)&v744[8] = v36;
  *(double *)&v744[16] = v34;
  *(double *)&v744[24] = v32 * v35;
  v745 = v33 * v35;
  v746 = v35;
  v747 = v32;
  v748 = v33;
  v760 = 0.0;
  v759 = 0u;
  v758 = 0u;
  v757.f64[0] = 0.0;
  v756 = 0u;
  memset(&v755[8], 0, 48);
  memset(v754, 0, sizeof(v754));
  v753 = 0u;
  v752 = 0u;
  v751 = 0u;
  v750.f64[0] = 0.0;
  v757.f64[1] = 1.0;
  *(_QWORD *)v755 = 0x3FF0000000000000;
  v750.f64[1] = 1.0;
  __asm { FMOV            V0.2D, #1.0 }
  memset(&v749[16], 0, 64);
  *(_OWORD *)v749 = _Q0;
  sub_20EB509E8((uint64_t)&v729, 9, 9u);
  v711 = *(double *)&v749[16];
  v586 = v756.f64[1];
  v636 = v750.f64[1];
  v643 = *(double *)&v749[72];
  v706 = *(double *)&v749[40];
  v695 = *(double *)&v755[16];
  v700 = v752.f64[0];
  v568 = *(double *)&v749[48];
  *(double *)&v730[24] = *(double *)&v749[16] * *(double *)&v749[48];
  v595 = v752.f64[1];
  *(double *)&v730[40] = v750.f64[1] * v752.f64[1];
  v731.f64[1] = v750.f64[1] * *(double *)&v749[48] + *(double *)&v749[16] * v752.f64[1];
  v732.f64[1] = *(double *)&v754[16] * *(double *)&v749[48] + *(double *)&v749[16] * *(double *)&v755[24];
  v733.f64[0] = v756.f64[1] * *(double *)&v749[48] + *(double *)&v749[16] * v758.f64[1];
  v734.f64[0] = *(double *)&v754[16] * v752.f64[1] + v750.f64[1] * *(double *)&v755[24];
  v734.f64[1] = v756.f64[1] * v752.f64[1] + v750.f64[1] * v758.f64[1];
  v647 = *(double *)&v755[24];
  *(double *)&v735[8] = *(double *)&v754[16] * *(double *)&v755[24];
  *(double *)&v735[16] = v756.f64[1] * *(double *)&v755[24] + *(double *)&v754[16] * v758.f64[1];
  v651 = v758.f64[1];
  *(double *)&v735[24] = v756.f64[1] * v758.f64[1];
  v689 = *(double *)&v749[24];
  v738.f64[1] = *(double *)&v749[24] * *(double *)&v749[40];
  v603 = v751.f64[0];
  v739.f64[1] = v751.f64[0] * v752.f64[0];
  v740.f64[1] = v751.f64[0] * *(double *)&v749[40] + *(double *)&v749[24] * v752.f64[0];
  v741.f64[1] = *(double *)v755 * *(double *)&v749[40] + *(double *)&v749[24] * *(double *)&v755[16];
  v742.f64[0] = v757.f64[0] * *(double *)&v749[40] + *(double *)&v749[24] * v758.f64[0];
  v743.f64[0] = *(double *)v755 * v752.f64[0] + v751.f64[0] * *(double *)&v755[16];
  v743.f64[1] = v757.f64[0] * v752.f64[0] + v751.f64[0] * v758.f64[0];
  v683 = *(double *)v755;
  *(double *)&v744[8] = *(double *)v755 * *(double *)&v755[16];
  *(double *)&v744[16] = v757.f64[0] * *(double *)&v755[16] + *(double *)v755 * v758.f64[0];
  v571 = v757.f64[0];
  *(double *)&v744[24] = v757.f64[0] * v758.f64[0];
  *(_QWORD *)&v730[16] = 0;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  *(_QWORD *)v735 = 0;
  v676 = *(float64x2_t *)&v730[16];
  v669 = *(float64x2_t *)&v730[32];
  v662 = v731;
  v657 = v732;
  v629 = (float64x2_t)*(unint64_t *)&v733.f64[0];
  v625 = v734;
  v620 = *(float64x2_t *)v735;
  v616 = *(float64x2_t *)&v735[16];
  *(double *)&v730[24] = *(double *)&v749[24] * *(double *)&v749[32];
  *(double *)&v730[40] = v751.f64[0] * v751.f64[1];
  v731.f64[1] = v751.f64[0] * *(double *)&v749[32] + *(double *)&v749[24] * v751.f64[1];
  v732.f64[1] = *(double *)v755 * *(double *)&v749[32] + *(double *)&v749[24] * *(double *)&v755[8];
  v733.f64[0] = v757.f64[0] * *(double *)&v749[32] + *(double *)&v749[24] * v757.f64[1];
  v734.f64[0] = *(double *)v755 * v751.f64[1] + v751.f64[0] * *(double *)&v755[8];
  v734.f64[1] = v757.f64[0] * v751.f64[1] + v751.f64[0] * v757.f64[1];
  *(double *)&v735[8] = *(double *)v755 * *(double *)&v755[8];
  *(double *)&v735[16] = v757.f64[0] * *(double *)&v755[8] + *(double *)v755 * v757.f64[1];
  *(double *)&v735[24] = v757.f64[0] * v757.f64[1];
  v738.f64[0] = 0.0;
  v739.f64[0] = 0.0;
  v740.f64[0] = 0.0;
  v741.f64[0] = 0.0;
  *(_QWORD *)v744 = 0;
  v613 = v738;
  v609 = v739;
  v605 = v740;
  v597 = v741;
  v587 = (float64x2_t)*(unint64_t *)&v742.f64[0];
  v581 = *(float64x2_t *)v744;
  v583 = v743;
  v600 = *(float64x2_t *)&v744[16];
  v738.f64[1] = *(double *)&v749[8] * *(double *)&v749[48];
  v739.f64[1] = v750.f64[0] * v752.f64[1];
  v740.f64[1] = v750.f64[0] * *(double *)&v749[48] + *(double *)&v749[8] * v752.f64[1];
  v741.f64[1] = *(double *)&v754[8] * *(double *)&v749[48] + *(double *)&v749[8] * *(double *)&v755[24];
  v742.f64[0] = v756.f64[0] * *(double *)&v749[48] + *(double *)&v749[8] * v758.f64[1];
  v743.f64[0] = *(double *)&v754[8] * v752.f64[1] + v750.f64[0] * *(double *)&v755[24];
  v743.f64[1] = v756.f64[0] * v752.f64[1] + v750.f64[0] * v758.f64[1];
  *(double *)&v744[8] = *(double *)&v754[8] * *(double *)&v755[24];
  *(double *)&v744[16] = v756.f64[0] * *(double *)&v755[24] + *(double *)&v754[8] * v758.f64[1];
  *(double *)&v744[24] = v756.f64[0] * v758.f64[1];
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  *(_QWORD *)v735 = 0;
  v739.f64[0] = 0.0;
  v740.f64[0] = 0.0;
  v741.f64[0] = 0.0;
  *(_QWORD *)v744 = 0;
  v42 = vsubq_f64(*(float64x2_t *)&v735[16], *(float64x2_t *)&v744[16]);
  v43 = vsubq_f64(*(float64x2_t *)v735, *(float64x2_t *)v744);
  v44 = vsubq_f64(v734, v743);
  v45 = vsubq_f64((float64x2_t)*(unint64_t *)&v733.f64[0], (float64x2_t)*(unint64_t *)&v742.f64[0]).f64[0];
  v46 = vsubq_f64(v732, v741);
  v47 = vsubq_f64(v731, v740);
  v48 = vsubq_f64(*(float64x2_t *)&v730[32], v739);
  *(_QWORD *)&v730[16] = 0;
  v738.f64[0] = 0.0;
  v49 = vsubq_f64(*(float64x2_t *)&v730[16], v738);
  v633 = *(double *)&v749[64];
  v566 = v753.f64[1];
  v584 = *(double *)&v755[40];
  v585 = v759.f64[1];
  v736.f64[1] = vmuld_lane_f64(v753.f64[1], v48, 1);
  v737.f64[0] = vmuld_lane_f64(v753.f64[1], v49, 1) + vmuld_lane_f64(*(double *)&v749[64], v47, 1);
  v737.f64[1] = vmuld_lane_f64(*(double *)&v749[64], v48, 1) + vmuld_lane_f64(v753.f64[1], v47, 1);
  v738.f64[0] = vmuld_lane_f64(*(double *)&v755[40], v49, 1) + vmuld_lane_f64(*(double *)&v749[64], v46, 1);
  v738.f64[1] = vmuld_lane_f64(v759.f64[1], v49, 1) + *(double *)&v749[64] * v45;
  v739.f64[0] = vmuld_lane_f64(*(double *)&v755[40], v48, 1) + v753.f64[1] * v44.f64[0];
  v739.f64[1] = vmuld_lane_f64(v759.f64[1], v48, 1) + vmuld_lane_f64(v753.f64[1], v44, 1);
  v740.f64[0] = vmuld_lane_f64(v753.f64[1], v46, 1)
              + vmuld_lane_f64(*(double *)&v755[40], v47, 1)
              + *(double *)&v749[64] * v44.f64[0];
  v740.f64[1] = v753.f64[1] * v45 + vmuld_lane_f64(v759.f64[1], v47, 1) + vmuld_lane_f64(*(double *)&v749[64], v44, 1);
  v741.f64[0] = vmuld_lane_f64(*(double *)&v755[40], v46, 1) + vmuld_lane_f64(*(double *)&v749[64], v43, 1);
  v741.f64[1] = vmuld_lane_f64(v759.f64[1], v46, 1) + *(double *)&v755[40] * v45 + *(double *)&v749[64] * v42.f64[0];
  v742.f64[0] = v759.f64[1] * v45 + vmuld_lane_f64(*(double *)&v749[64], v42, 1);
  v742.f64[1] = *(double *)&v755[40] * v44.f64[0] + vmuld_lane_f64(v753.f64[1], v43, 1);
  v743.f64[0] = v759.f64[1] * v44.f64[0] + vmuld_lane_f64(*(double *)&v755[40], v44, 1) + v753.f64[1] * v42.f64[0];
  v743.f64[1] = vmuld_lane_f64(v759.f64[1], v44, 1) + vmuld_lane_f64(v753.f64[1], v42, 1);
  *(_QWORD *)v744 = vmuld_lane_f64(*(double *)&v755[40], v43, 1);
  *(float64x2_t *)&v744[8] = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v42, 8uLL), v759.f64[1]), vmulq_n_f64(v42, *(double *)&v755[40]));
  *(_QWORD *)&v744[24] = vmuld_lane_f64(v759.f64[1], v42, 1);
  v579 = *(float64x2_t *)&v744[16];
  *(double *)&v744[16] = v756.f64[1] * *(double *)&v755[8] + *(double *)&v754[16] * v757.f64[1];
  *(double *)&v730[24] = *(double *)&v749[8] * *(double *)&v749[40];
  *(double *)&v730[40] = v750.f64[0] * v752.f64[0];
  v574 = v738;
  v572 = v739;
  v569 = v740;
  v563 = v741;
  v560 = v742;
  v557 = v743;
  v553 = *(float64x2_t *)v744;
  v738.f64[1] = *(double *)&v749[16] * *(double *)&v749[32];
  v739.f64[1] = v750.f64[1] * v751.f64[1];
  *(_QWORD *)&v730[32] = 0;
  v739.f64[0] = 0.0;
  v50 = vsubq_f64(*(float64x2_t *)&v730[32], v739);
  v736.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v49, 1);
  v740.f64[1] = v750.f64[1] * *(double *)&v749[32] + *(double *)&v749[16] * v751.f64[1];
  v741.f64[1] = *(double *)&v754[16] * *(double *)&v749[32] + *(double *)&v749[16] * *(double *)&v755[8];
  v742.f64[0] = v756.f64[1] * *(double *)&v749[32] + *(double *)&v749[16] * v757.f64[1];
  v743.f64[0] = *(double *)&v754[16] * v751.f64[1] + v750.f64[1] * *(double *)&v755[8];
  v743.f64[1] = v756.f64[1] * v751.f64[1] + v750.f64[1] * v757.f64[1];
  *(double *)&v744[8] = *(double *)&v754[16] * *(double *)&v755[8];
  *(double *)&v744[24] = v756.f64[1] * v757.f64[1];
  v738.f64[0] = 0.0;
  v546 = v736;
  v549 = v737;
  v740.f64[0] = 0.0;
  v741.f64[0] = 0.0;
  *(_QWORD *)v744 = 0;
  v736.f64[1] = vmuld_lane_f64(*(double *)v754, v50, 1);
  v731.f64[1] = v750.f64[0] * *(double *)&v749[40] + *(double *)&v749[8] * v752.f64[0];
  v731.f64[0] = 0.0;
  v51 = vsubq_f64(v731, v740);
  *(_QWORD *)&v730[16] = 0;
  v577 = vsubq_f64(*(float64x2_t *)&v730[16], v738);
  v737.f64[0] = vmuld_lane_f64(*(double *)v754, v577, 1) + vmuld_lane_f64(*(double *)&v749[72], v51, 1);
  v737.f64[1] = vmuld_lane_f64(*(double *)&v749[72], v50, 1) + vmuld_lane_f64(*(double *)v754, v51, 1);
  v732.f64[1] = *(double *)&v754[8] * *(double *)&v749[40] + *(double *)&v749[8] * *(double *)&v755[16];
  v732.f64[0] = 0.0;
  v52 = vsubq_f64(v732, v741);
  v738.f64[0] = vmuld_lane_f64(*(double *)&v755[48], v577, 1) + vmuld_lane_f64(*(double *)&v749[72], v52, 1);
  v733.f64[0] = v756.f64[0] * *(double *)&v749[40] + *(double *)&v749[8] * v758.f64[0];
  v53 = vsubq_f64((float64x2_t)*(unint64_t *)&v733.f64[0], (float64x2_t)*(unint64_t *)&v742.f64[0]).f64[0];
  v738.f64[1] = vmuld_lane_f64(v760, v577, 1) + *(double *)&v749[72] * v53;
  v734.f64[0] = *(double *)&v754[8] * v752.f64[0] + v750.f64[0] * *(double *)&v755[16];
  v734.f64[1] = v756.f64[0] * v752.f64[0] + v750.f64[0] * v758.f64[0];
  v54 = vsubq_f64(v734, v743);
  v590 = *(double *)v754;
  v739.f64[0] = vmuld_lane_f64(*(double *)&v755[48], v50, 1) + *(double *)v754 * v54.f64[0];
  v739.f64[1] = vmuld_lane_f64(v760, v50, 1) + vmuld_lane_f64(*(double *)v754, v54, 1);
  v740.f64[0] = vmuld_lane_f64(*(double *)v754, v52, 1)
              + vmuld_lane_f64(*(double *)&v755[48], v51, 1)
              + *(double *)&v749[72] * v54.f64[0];
  v740.f64[1] = *(double *)v754 * v53 + vmuld_lane_f64(v760, v51, 1) + vmuld_lane_f64(*(double *)&v749[72], v54, 1);
  *(double *)&v735[8] = *(double *)&v754[8] * *(double *)&v755[16];
  *(_QWORD *)v735 = 0;
  v55 = vsubq_f64(*(float64x2_t *)v735, *(float64x2_t *)v744);
  v741.f64[0] = vmuld_lane_f64(*(double *)&v755[48], v52, 1) + vmuld_lane_f64(*(double *)&v749[72], v55, 1);
  v56 = vsubq_f64(v616, v600);
  v57 = vsubq_f64(v620, v581);
  v58 = vsubq_f64(v625, v583);
  v59 = vsubq_f64(v629, v587).f64[0];
  v60 = vsubq_f64(v657, v597);
  v61 = vsubq_f64(v662, v605);
  v62 = vsubq_f64(v669, v609);
  v63 = vsubq_f64(v676, v613);
  v64 = v756.f64[0];
  *(double *)&v735[16] = v756.f64[0] * *(double *)&v755[16] + *(double *)&v754[8] * v758.f64[0];
  *(double *)&v735[24] = v756.f64[0] * v758.f64[0];
  v65 = vsubq_f64(*(float64x2_t *)&v735[16], *(float64x2_t *)&v744[16]);
  v761.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v63, 1);
  v761.f64[1] = vmuld_lane_f64(v753.f64[0], v62, 1);
  v762.f64[0] = vmuld_lane_f64(v753.f64[0], v63, 1) + vmuld_lane_f64(*(double *)&v749[56], v61, 1);
  v762.f64[1] = vmuld_lane_f64(*(double *)&v749[56], v62, 1) + vmuld_lane_f64(v753.f64[0], v61, 1);
  v763.f64[0] = vmuld_lane_f64(*(double *)&v755[32], v63, 1) + vmuld_lane_f64(*(double *)&v749[56], v60, 1);
  v763.f64[1] = vmuld_lane_f64(v759.f64[0], v63, 1) + *(double *)&v749[56] * v59;
  v764.f64[0] = vmuld_lane_f64(*(double *)&v755[32], v62, 1) + v753.f64[0] * v58.f64[0];
  v764.f64[1] = vmuld_lane_f64(v759.f64[0], v62, 1) + vmuld_lane_f64(v753.f64[0], v58, 1);
  v765.f64[0] = vmuld_lane_f64(v753.f64[0], v60, 1)
              + vmuld_lane_f64(*(double *)&v755[32], v61, 1)
              + *(double *)&v749[56] * v58.f64[0];
  v765.f64[1] = v753.f64[0] * v59 + vmuld_lane_f64(v759.f64[0], v61, 1) + vmuld_lane_f64(*(double *)&v749[56], v58, 1);
  v766.f64[0] = vmuld_lane_f64(*(double *)&v755[32], v60, 1) + vmuld_lane_f64(*(double *)&v749[56], v57, 1);
  v766.f64[1] = vmuld_lane_f64(v759.f64[0], v60, 1) + *(double *)&v755[32] * v59 + *(double *)&v749[56] * v56.f64[0];
  v767.f64[0] = v759.f64[0] * v59 + vmuld_lane_f64(*(double *)&v749[56], v56, 1);
  v767.f64[1] = *(double *)&v755[32] * v58.f64[0] + vmuld_lane_f64(v753.f64[0], v57, 1);
  v768.f64[0] = v759.f64[0] * v58.f64[0] + vmuld_lane_f64(*(double *)&v755[32], v58, 1) + v753.f64[0] * v56.f64[0];
  v768.f64[1] = vmuld_lane_f64(v759.f64[0], v58, 1) + vmuld_lane_f64(v753.f64[0], v56, 1);
  v741.f64[1] = vmuld_lane_f64(v760, v52, 1) + *(double *)&v755[48] * v53 + *(double *)&v749[72] * v65.f64[0];
  *(float64x2_t *)&v769[8] = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v56, 8uLL), v759.f64[0]), vmulq_n_f64(v56, *(double *)&v755[32]));
  *(_QWORD *)v769 = vmuld_lane_f64(*(double *)&v755[32], v57, 1);
  v66 = vaddq_f64(v768, v557);
  v67 = vaddq_f64(v767, v560);
  v68 = vaddq_f64(v763, v574);
  *(_QWORD *)&v769[24] = vmuld_lane_f64(v759.f64[0], v56, 1);
  v567 = *(double *)&v755[48];
  v592 = v760;
  v742.f64[0] = v760 * v53 + vmuld_lane_f64(*(double *)&v749[72], v65, 1);
  v742.f64[1] = *(double *)&v755[48] * v54.f64[0] + vmuld_lane_f64(*(double *)v754, v55, 1);
  v743.f64[0] = v760 * v54.f64[0] + vmuld_lane_f64(*(double *)&v755[48], v54, 1) + *(double *)v754 * v65.f64[0];
  v743.f64[1] = vmuld_lane_f64(v760, v54, 1) + vmuld_lane_f64(*(double *)v754, v65, 1);
  *(_QWORD *)v744 = vmuld_lane_f64(*(double *)&v755[48], v55, 1);
  *(float64x2_t *)&v744[8] = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v65, 8uLL), v760), vmulq_n_f64(v65, *(double *)&v755[48]));
  *(_QWORD *)&v744[24] = vmuld_lane_f64(v760, v65, 1);
  v575 = vaddq_f64(vaddq_f64(*(float64x2_t *)&v769[16], v579), *(float64x2_t *)&v744[16]);
  v736.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v577, 1);
  v617 = vaddq_f64(vaddq_f64(v762, v549), v737);
  v606 = vaddq_f64(v68, v738);
  v522 = vaddq_f64(vaddq_f64(v764, v572), v739);
  v524 = vaddq_f64(vaddq_f64(v761, v546), v736);
  v561 = vaddq_f64(vaddq_f64(v766, v563), v741);
  v564 = vaddq_f64(vaddq_f64(v765, v569), v740);
  v558 = vaddq_f64(v67, v742);
  v532 = vaddq_f64(v66, v743);
  v520 = vaddq_f64(vaddq_f64(*(float64x2_t *)v769, v553), *(float64x2_t *)v744);
  *(double *)&v730[24] = v711 * v711;
  *(double *)&v730[40] = v636 * v636;
  v731.f64[1] = v711 * v636 + v711 * v636;
  v63.f64[0] = v750.f64[0];
  v63.f64[1] = *(float64_t *)&v754[8];
  v69 = *(double *)&v749[8];
  v70 = vmulq_n_f64(v63, *(double *)&v749[8]);
  v71 = vaddq_f64(v70, v70);
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v72 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)0, (int64x2_t)v71), v731);
  v62.f64[0] = 0.0;
  v62.f64[1] = v71.f64[1];
  v47.f64[0] = *(float64_t *)&v754[16];
  v732.f64[1] = v711 * v47.f64[0] + v711 * v47.f64[0];
  v732.f64[0] = 0.0;
  v73 = vaddq_f64(v62, v732);
  v733.f64[0] = v711 * v586 + v711 * v586;
  v734.f64[0] = v636 * v47.f64[0] + v636 * v47.f64[0];
  v734.f64[1] = v636 * v586 + v636 * v586;
  v71.f64[0] = *(float64_t *)&v754[8];
  v71.f64[1] = v756.f64[0];
  v74 = vmulq_n_f64(v71, v750.f64[0]);
  v75 = vaddq_f64(vaddq_f64(v74, v74), v734);
  v76 = *(double *)&v754[8];
  v62.f64[0] = v76 * v64 + v76 * v64;
  v62.f64[1] = v64 * v64;
  *(double *)&v735[8] = *(double *)&v754[16] * *(double *)&v754[16];
  *(double *)&v735[16] = *(double *)&v754[16] * v586 + *(double *)&v754[16] * v586;
  *(double *)&v735[24] = v586 * v586;
  *(_QWORD *)v735 = 0;
  v77 = vaddq_f64(v62, *(float64x2_t *)&v735[16]);
  v47.f64[0] = 0.0;
  v47.f64[1] = v69 * v69;
  *(_QWORD *)&v730[16] = 0;
  v78 = vaddq_f64(v47, *(float64x2_t *)&v730[16]);
  v79.f64[0] = 0.0;
  v79.f64[1] = v750.f64[0] * v750.f64[0];
  v80 = vaddq_f64(v79, *(float64x2_t *)&v730[32]);
  v81 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v69 * v64 + v69 * v64), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v68.f64[0] = 0.0;
  v68.f64[1] = v76 * v76;
  v82 = vaddq_f64(v68, *(float64x2_t *)v735);
  *(double *)&v730[24] = v689 * v689;
  *(double *)&v730[40] = v603 * v603;
  v731.f64[1] = v689 * v603 + v689 * v603;
  v732.f64[1] = v689 * v683 + v689 * v683;
  v733.f64[0] = v689 * v571 + v689 * v571;
  v734.f64[0] = v603 * v683 + v603 * v683;
  v734.f64[1] = v603 * v571 + v603 * v571;
  *(double *)&v735[8] = v683 * v683;
  *(double *)&v735[16] = v683 * v571 + v683 * v571;
  *(double *)&v735[24] = v571 * v571;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  *(_QWORD *)v735 = 0;
  v547 = vaddq_f64(v75, v734);
  v554 = vaddq_f64(v73, v732);
  v550 = vaddq_f64(v72, v731);
  v542 = vaddq_f64(v77, *(float64x2_t *)&v735[16]);
  v544 = vaddq_f64(v82, *(float64x2_t *)v735);
  v536 = vaddq_f64(v80, *(float64x2_t *)&v730[32]);
  v538 = vaddq_f64(v81, (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v506 = vaddq_f64(v78, *(float64x2_t *)&v730[16]);
  v80.f64[0] = *(double *)&v754[8] * v751.f64[1] + v750.f64[0] * *(double *)&v755[8];
  v82.f64[0] = v756.f64[0] * *(double *)&v755[8] + *(double *)&v754[8] * v757.f64[1];
  v80.f64[1] = v756.f64[0] * v751.f64[1] + v750.f64[0] * v757.f64[1];
  *(double *)&v730[24] = *(double *)&v749[16] * *(double *)&v749[40];
  *(double *)&v730[40] = v750.f64[1] * v752.f64[0];
  v731.f64[1] = v750.f64[1] * *(double *)&v749[40] + *(double *)&v749[16] * v752.f64[0];
  v732.f64[1] = *(double *)&v754[16] * *(double *)&v749[40] + *(double *)&v749[16] * *(double *)&v755[16];
  v733.f64[0] = v756.f64[1] * *(double *)&v749[40] + *(double *)&v749[16] * v758.f64[0];
  v734.f64[0] = *(double *)&v754[16] * v752.f64[0] + v750.f64[1] * *(double *)&v755[16];
  v734.f64[1] = v756.f64[1] * v752.f64[0] + v750.f64[1] * v758.f64[0];
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v83 = vaddq_f64(v80, v734);
  v84 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v750.f64[0] * *(double *)&v749[32] + *(double *)&v749[8] * v751.f64[1]), 0), v731);
  v68.f64[0] = 0.0;
  v68.f64[1] = *(double *)&v754[8] * *(double *)&v749[32] + *(double *)&v749[8] * *(double *)&v755[8];
  v85 = vaddq_f64(v68, v732);
  v86 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v756.f64[0] * *(double *)&v749[32] + *(double *)&v749[8] * v757.f64[1]), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v82.f64[1] = v756.f64[0] * v757.f64[1];
  *(double *)&v735[8] = *(double *)&v754[16] * *(double *)&v755[16];
  *(double *)&v735[16] = v756.f64[1] * *(double *)&v755[16] + *(double *)&v754[16] * v758.f64[0];
  *(double *)&v735[24] = v756.f64[1] * v758.f64[0];
  *(_QWORD *)v735 = 0;
  v87 = vaddq_f64(v82, *(float64x2_t *)&v735[16]);
  *(_QWORD *)&v730[16] = 0;
  v88 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v749[8] * *(double *)&v749[32]), 0), *(float64x2_t *)&v730[16]);
  v82.f64[0] = 0.0;
  v82.f64[1] = v750.f64[0] * v751.f64[1];
  v89 = vaddq_f64(v82, *(float64x2_t *)&v730[32]);
  v90 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v754[8] * *(double *)&v755[8]), 0), *(float64x2_t *)v735);
  *(double *)&v730[24] = *(double *)&v749[24] * *(double *)&v749[48];
  *(double *)&v730[40] = v751.f64[0] * v752.f64[1];
  v731.f64[1] = v751.f64[0] * *(double *)&v749[48] + *(double *)&v749[24] * v752.f64[1];
  v732.f64[1] = *(double *)v755 * *(double *)&v749[48] + *(double *)&v749[24] * *(double *)&v755[24];
  v733.f64[0] = v757.f64[0] * *(double *)&v749[48] + *(double *)&v749[24] * v758.f64[1];
  v734.f64[0] = *(double *)v755 * v752.f64[1] + v751.f64[0] * *(double *)&v755[24];
  v734.f64[1] = v757.f64[0] * v752.f64[1] + v751.f64[0] * v758.f64[1];
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v507 = vaddq_f64(v83, v734);
  *(double *)&v735[8] = *(double *)v755 * *(double *)&v755[24];
  *(double *)&v735[16] = v757.f64[0] * *(double *)&v755[24] + *(double *)v755 * v758.f64[1];
  *(double *)&v735[24] = v757.f64[0] * v758.f64[1];
  *(_QWORD *)v735 = 0;
  v535 = vaddq_f64(v87, *(float64x2_t *)&v735[16]);
  v582 = vaddq_f64(v85, v732);
  v583.f64[0] = vaddq_f64(v86, (float64x2_t)*(unint64_t *)&v733.f64[0]).f64[0];
  v626 = vaddq_f64(v84, v731);
  v630 = vaddq_f64(v90, *(float64x2_t *)v735);
  v580 = vaddq_f64(v89, *(float64x2_t *)&v730[32]);
  v621 = vaddq_f64(v88, *(float64x2_t *)&v730[16]);
  v87.f64[0] = *(double *)&v754[8] * v753.f64[0] + v750.f64[0] * *(double *)&v755[32];
  v86.f64[0] = v756.f64[0] * *(double *)&v755[32] + *(double *)&v754[8] * v759.f64[0];
  v87.f64[1] = v756.f64[0] * v753.f64[0] + v750.f64[0] * v759.f64[0];
  *(double *)&v730[24] = *(double *)&v749[16] * *(double *)&v749[64];
  *(double *)&v730[40] = v750.f64[1] * v753.f64[1];
  v731.f64[1] = v750.f64[1] * *(double *)&v749[64] + *(double *)&v749[16] * v753.f64[1];
  v732.f64[1] = *(double *)&v754[16] * *(double *)&v749[64] + *(double *)&v749[16] * *(double *)&v755[40];
  v733.f64[0] = v756.f64[1] * *(double *)&v749[64] + *(double *)&v749[16] * v759.f64[1];
  v734.f64[0] = *(double *)&v754[16] * v753.f64[1] + v750.f64[1] * *(double *)&v755[40];
  v734.f64[1] = v756.f64[1] * v753.f64[1] + v750.f64[1] * v759.f64[1];
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v91 = vaddq_f64(v87, v734);
  v92 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v750.f64[0] * *(double *)&v749[56] + *(double *)&v749[8] * v753.f64[0]), 0), v731);
  v88.f64[0] = 0.0;
  v88.f64[1] = *(double *)&v754[8] * *(double *)&v749[56] + *(double *)&v749[8] * *(double *)&v755[32];
  v93 = vaddq_f64(v88, v732);
  v94 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v756.f64[0] * *(double *)&v749[56] + *(double *)&v749[8] * v759.f64[0]), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v89.f64[0] = 0.0;
  v89.f64[1] = v750.f64[0] * v753.f64[0];
  v86.f64[1] = v756.f64[0] * v759.f64[0];
  *(double *)&v735[8] = *(double *)&v754[16] * *(double *)&v755[40];
  *(double *)&v735[16] = v756.f64[1] * *(double *)&v755[40] + *(double *)&v754[16] * v759.f64[1];
  *(double *)&v735[24] = v756.f64[1] * v759.f64[1];
  *(_QWORD *)v735 = 0;
  v95 = vaddq_f64(v86, *(float64x2_t *)&v735[16]);
  *(_QWORD *)&v730[16] = 0;
  v96 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v749[8] * *(double *)&v749[56]), 0), *(float64x2_t *)&v730[16]);
  v97 = vaddq_f64(v89, *(float64x2_t *)&v730[32]);
  v98 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v754[8] * *(double *)&v755[32]), 0), *(float64x2_t *)v735);
  *(double *)&v730[24] = *(double *)&v749[24] * *(double *)&v749[72];
  *(double *)&v730[40] = v751.f64[0] * *(double *)v754;
  v731.f64[1] = v751.f64[0] * *(double *)&v749[72] + *(double *)&v749[24] * *(double *)v754;
  v732.f64[1] = *(double *)v755 * *(double *)&v749[72] + *(double *)&v749[24] * *(double *)&v755[48];
  v733.f64[0] = v757.f64[0] * *(double *)&v749[72] + *(double *)&v749[24] * v760;
  v734.f64[0] = *(double *)v755 * *(double *)v754 + v751.f64[0] * *(double *)&v755[48];
  v734.f64[1] = v757.f64[0] * *(double *)v754 + v751.f64[0] * v760;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v526 = vaddq_f64(v91, v734);
  *(double *)&v735[8] = *(double *)v755 * *(double *)&v755[48];
  *(double *)&v735[16] = v757.f64[0] * *(double *)&v755[48] + *(double *)v755 * v760;
  *(double *)&v735[24] = v757.f64[0] * v760;
  *(_QWORD *)v735 = 0;
  v570 = vaddq_f64(v95, *(float64x2_t *)&v735[16]);
  v657.f64[0] = vaddq_f64(v94, (float64x2_t)*(unint64_t *)&v733.f64[0]).f64[0];
  v598 = vaddq_f64(v93, v732);
  v677 = vaddq_f64(v92, v731);
  v663 = vaddq_f64(v98, *(float64x2_t *)v735);
  v601 = vaddq_f64(v97, *(float64x2_t *)&v730[32]);
  v670 = vaddq_f64(v96, *(float64x2_t *)&v730[16]);
  *(double *)&v730[24] = v706 * v706;
  *(double *)&v730[40] = v700 * v700;
  v731.f64[1] = v706 * v700 + v706 * v700;
  v92.f64[0] = v751.f64[1];
  v82.f64[0] = *(float64_t *)&v755[8];
  v92.f64[1] = *(float64_t *)&v755[8];
  v99 = vmulq_n_f64(v92, *(double *)&v749[32]);
  v100 = vaddq_f64(v99, v99);
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v101 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)0, (int64x2_t)v100), v731);
  v94.f64[0] = 0.0;
  v94.f64[1] = v100.f64[1];
  v732.f64[1] = v706 * v695 + v706 * v695;
  v732.f64[0] = 0.0;
  v102 = vaddq_f64(v94, v732);
  v100.f64[0] = v82.f64[0] * v757.f64[1] + v82.f64[0] * v757.f64[1];
  v100.f64[1] = v757.f64[1] * v757.f64[1];
  v733.f64[0] = v706 * v758.f64[0] + v706 * v758.f64[0];
  v734.f64[0] = v700 * v695 + v700 * v695;
  v734.f64[1] = v700 * v758.f64[0] + v700 * v758.f64[0];
  v94.f64[0] = *(float64_t *)&v755[8];
  v94.f64[1] = v757.f64[1];
  v103 = vmulq_n_f64(v94, v751.f64[1]);
  v104 = vaddq_f64(vaddq_f64(v103, v103), v734);
  *(double *)&v735[8] = v695 * v695;
  *(double *)&v735[16] = v695 * v758.f64[0] + v695 * v758.f64[0];
  *(double *)&v735[24] = v758.f64[0] * v758.f64[0];
  *(_QWORD *)v735 = 0;
  v105 = vaddq_f64(v100, *(float64x2_t *)&v735[16]);
  v106 = *(double *)&v749[32];
  v96.f64[0] = 0.0;
  v96.f64[1] = v106 * v106;
  *(_QWORD *)&v730[16] = 0;
  v107 = vaddq_f64(v96, *(float64x2_t *)&v730[16]);
  v97.f64[0] = 0.0;
  v97.f64[1] = v751.f64[1] * v751.f64[1];
  v108 = vaddq_f64(v97, *(float64x2_t *)&v730[32]);
  v109 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v106 * v757.f64[1] + v106 * v757.f64[1]), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v98.f64[0] = 0.0;
  v98.f64[1] = v82.f64[0] * v82.f64[0];
  v110 = vaddq_f64(v98, *(float64x2_t *)v735);
  *(double *)&v730[24] = v568 * v568;
  *(double *)&v730[40] = v595 * v595;
  v731.f64[1] = v568 * v595 + v568 * v595;
  v732.f64[1] = v568 * v647 + v568 * v647;
  v733.f64[0] = v568 * v651 + v568 * v651;
  v734.f64[0] = v595 * v647 + v595 * v647;
  v734.f64[1] = v595 * v651 + v595 * v651;
  *(double *)&v735[8] = v647 * v647;
  *(double *)&v735[16] = v647 * v651 + v647 * v651;
  *(double *)&v735[24] = v651 * v651;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  *(_QWORD *)v735 = 0;
  v527 = vaddq_f64(v105, *(float64x2_t *)&v735[16]);
  v530 = vaddq_f64(v104, v734);
  v540 = vaddq_f64(v102, v732);
  v504 = vaddq_f64(v101, v731);
  v508 = vaddq_f64(v110, *(float64x2_t *)v735);
  v517 = vaddq_f64(v109, (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v514 = vaddq_f64(v108, *(float64x2_t *)&v730[32]);
  v505 = vaddq_f64(v107, *(float64x2_t *)&v730[16]);
  v111 = v759.f64[0];
  v107.f64[0] = *(double *)&v755[8] * v753.f64[0] + v751.f64[1] * *(double *)&v755[32];
  v110.f64[0] = v757.f64[1] * *(double *)&v755[32] + *(double *)&v755[8] * v759.f64[0];
  v107.f64[1] = v757.f64[1] * v753.f64[0] + v751.f64[1] * v759.f64[0];
  *(double *)&v730[24] = *(double *)&v749[40] * *(double *)&v749[64];
  *(double *)&v730[40] = v752.f64[0] * v753.f64[1];
  v731.f64[1] = v752.f64[0] * *(double *)&v749[64] + *(double *)&v749[40] * v753.f64[1];
  v732.f64[1] = *(double *)&v755[16] * *(double *)&v749[64] + *(double *)&v749[40] * *(double *)&v755[40];
  v733.f64[0] = v758.f64[0] * *(double *)&v749[64] + *(double *)&v749[40] * v759.f64[1];
  v734.f64[0] = *(double *)&v755[16] * v753.f64[1] + v752.f64[0] * *(double *)&v755[40];
  v734.f64[1] = v758.f64[0] * v753.f64[1] + v752.f64[0] * v759.f64[1];
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v112 = vaddq_f64(v107, v734);
  v113 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v751.f64[1] * *(double *)&v749[56] + *(double *)&v749[32] * v753.f64[0]), 0), v731);
  v109.f64[0] = 0.0;
  v109.f64[1] = *(double *)&v755[8] * *(double *)&v749[56] + *(double *)&v749[32] * *(double *)&v755[32];
  v114 = vaddq_f64(v109, v732);
  v115 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v757.f64[1] * *(double *)&v749[56] + *(double *)&v749[32] * v759.f64[0]), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v110.f64[1] = v757.f64[1] * v759.f64[0];
  *(double *)&v735[8] = *(double *)&v755[16] * *(double *)&v755[40];
  *(double *)&v735[16] = v758.f64[0] * *(double *)&v755[40] + *(double *)&v755[16] * v759.f64[1];
  *(double *)&v735[24] = v758.f64[0] * v759.f64[1];
  *(_QWORD *)v735 = 0;
  v116 = vaddq_f64(v110, *(float64x2_t *)&v735[16]);
  v102.f64[0] = *(float64_t *)&v749[56];
  *(_QWORD *)&v730[16] = 0;
  v117 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v749[32] * *(double *)&v749[56]), 0), *(float64x2_t *)&v730[16]);
  v52.f64[0] = 0.0;
  v52.f64[1] = v751.f64[1] * v753.f64[0];
  v118 = vaddq_f64(v52, *(float64x2_t *)&v730[32]);
  v51.f64[0] = *(float64_t *)&v755[32];
  v119 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v755[8] * *(double *)&v755[32]), 0), *(float64x2_t *)v735);
  *(double *)&v730[24] = *(double *)&v749[48] * *(double *)&v749[72];
  *(double *)&v730[40] = v752.f64[1] * *(double *)v754;
  v731.f64[1] = v752.f64[1] * *(double *)&v749[72] + *(double *)&v749[48] * *(double *)v754;
  v732.f64[1] = *(double *)&v755[24] * *(double *)&v749[72] + *(double *)&v749[48] * *(double *)&v755[48];
  v733.f64[0] = v758.f64[1] * *(double *)&v749[72] + *(double *)&v749[48] * v760;
  v734.f64[0] = *(double *)&v755[24] * *(double *)v754 + v752.f64[1] * *(double *)&v755[48];
  v734.f64[1] = v758.f64[1] * *(double *)v754 + v752.f64[1] * v760;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  v512 = vaddq_f64(v112, v734);
  *(double *)&v735[8] = *(double *)&v755[24] * *(double *)&v755[48];
  *(double *)&v735[16] = v758.f64[1] * *(double *)&v755[48] + *(double *)&v755[24] * v760;
  *(double *)&v735[24] = v758.f64[1] * v760;
  *(_QWORD *)v735 = 0;
  v513 = vaddq_f64(v116, *(float64x2_t *)&v735[16]);
  v511 = vaddq_f64(v115, (float64x2_t)*(unint64_t *)&v733.f64[0]).f64[0];
  v529 = vaddq_f64(v114, v732);
  v614 = vaddq_f64(v113, v731);
  v578 = vaddq_f64(v119, *(float64x2_t *)v735);
  v573 = vaddq_f64(v118, *(float64x2_t *)&v730[32]);
  v610 = vaddq_f64(v117, *(float64x2_t *)&v730[16]);
  v114.f64[0] = v51.f64[0] * v111 + v51.f64[0] * v111;
  v114.f64[1] = v111 * v111;
  *(double *)&v730[24] = v633 * v633;
  *(double *)&v730[40] = v566 * v566;
  v731.f64[1] = v633 * v566 + v633 * v566;
  v732.f64[1] = v633 * v584 + v633 * v584;
  v733.f64[0] = v633 * v585 + v633 * v585;
  v734.f64[0] = v566 * v584 + v566 * v584;
  v734.f64[1] = v566 * v585 + v566 * v585;
  *(double *)&v735[8] = v584 * v584;
  *(double *)&v735[16] = v584 * v585 + v584 * v585;
  *(double *)&v735[24] = v585 * v585;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v732.f64[0] = 0.0;
  *(_QWORD *)v735 = 0;
  v120 = vaddq_f64(v114, *(float64x2_t *)&v735[16]);
  v112.f64[0] = *(float64_t *)&v755[32];
  v112.f64[1] = v759.f64[0];
  v121 = vmulq_n_f64(v112, v753.f64[0]);
  v122 = vaddq_f64(vaddq_f64(v121, v121), v734);
  v113.f64[0] = v753.f64[0];
  v113.f64[1] = *(float64_t *)&v755[32];
  v123 = vmulq_n_f64(v113, *(double *)&v749[56]);
  v124 = (int64x2_t)vaddq_f64(v123, v123);
  v115.f64[0] = 0.0;
  *(_QWORD *)&v115.f64[1] = v124.i64[1];
  v125 = vaddq_f64(v115, v732);
  v126 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)0, v124), v731);
  v117.f64[0] = 0.0;
  v117.f64[1] = v51.f64[0] * v51.f64[0];
  v127 = vaddq_f64(v117, *(float64x2_t *)v735);
  v118.f64[0] = 0.0;
  v118.f64[1] = v102.f64[0] * v102.f64[0];
  v128 = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v102.f64[0] * v111 + v102.f64[0] * v111), (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v58.f64[0] = 0.0;
  v58.f64[1] = v753.f64[0] * v753.f64[0];
  v129 = vaddq_f64(v58, *(float64x2_t *)&v730[32]);
  *(_QWORD *)&v730[16] = 0;
  v130 = vaddq_f64(v118, *(float64x2_t *)&v730[16]);
  *(double *)&v730[24] = v643 * v643;
  *(double *)&v730[40] = v590 * v590;
  v731.f64[1] = v643 * v590 + v643 * v590;
  *(_QWORD *)&v730[32] = 0;
  v731.f64[0] = 0.0;
  v503 = vaddq_f64(v126, v731);
  v732.f64[1] = v643 * v567 + v643 * v567;
  v732.f64[0] = 0.0;
  v131 = vaddq_f64(v125, v732);
  v733.f64[0] = v643 * v592 + v643 * v592;
  v734.f64[0] = v590 * v567 + v590 * v567;
  v734.f64[1] = v590 * v592 + v590 * v592;
  v132 = vaddq_f64(v122, v734);
  *(double *)&v735[8] = v567 * v567;
  *(double *)&v735[16] = v567 * v592 + v567 * v592;
  *(double *)&v735[24] = v592 * v592;
  *(_QWORD *)v735 = 0;
  v133 = vaddq_f64(v120, *(float64x2_t *)&v735[16]);
  v134 = vaddq_f64(v130, *(float64x2_t *)&v730[16]);
  v135 = vaddq_f64(v129, *(float64x2_t *)&v730[32]);
  v136 = vaddq_f64(v128, (float64x2_t)*(unint64_t *)&v733.f64[0]);
  v137 = vaddq_f64(v127, *(float64x2_t *)v735);
  __asm { FMOV            V14.2D, #0.5 }
  v139 = vmulq_f64(vaddq_f64(vaddq_f64(v550, v504), v503), _Q14);
  v140 = vmulq_f64(vaddq_f64(vaddq_f64(v554, v540), v131), _Q14);
  v141 = vmulq_f64(vaddq_f64(vaddq_f64(v547, v530), v132), _Q14);
  v142 = vmulq_f64(vaddq_f64(vaddq_f64(v542, v527), v133), _Q14);
  v143 = vmulq_f64(vaddq_f64(vaddq_f64(v506, v505), v134), _Q14);
  v144 = vmulq_f64(vaddq_f64(vaddq_f64(v536, v514), v135), _Q14);
  v145 = vmulq_f64(vaddq_f64(vaddq_f64(v538, v517), v136), _Q14);
  v146 = vmulq_f64(vaddq_f64(vaddq_f64(v544, v508), v137), _Q14);
  v147 = vsubq_f64(v542, v142);
  v510 = vsubq_f64(v527, v142);
  v148 = vsubq_f64(v547, v141);
  v509 = vsubq_f64(v530, v141);
  v518 = vsubq_f64(v132, v141);
  v519 = vsubq_f64(v133, v142);
  v149 = vsubq_f64(v554, v140);
  v528 = vsubq_f64(v540, v140);
  v541 = vsubq_f64(v504, v139);
  v548 = vsubq_f64(v503, v139);
  v150 = vsubq_f64(v544, v146);
  v543 = vsubq_f64(v508, v146);
  v531 = vsubq_f64(v137, v146);
  v82.f64[0] = vsubq_f64(v538, v145).f64[0];
  v508.f64[0] = vsubq_f64(v517, v145).f64[0];
  v516 = vsubq_f64(v131, v140);
  v517.f64[0] = vsubq_f64(v136, v145).f64[0];
  v151 = vsubq_f64(v536, v144);
  v152 = vsubq_f64(v514, v144);
  v515 = vsubq_f64(v135, v144);
  v153 = vsubq_f64(v506, v143);
  v537 = vsubq_f64(v505, v143);
  v539 = v152;
  v545 = vsubq_f64(v134, v143);
  v154 = vsubq_f64(v550, v139);
  v551 = (float64x2_t)vzip2q_s64((int64x2_t)v153, (int64x2_t)v154);
  v555 = (float64x2_t)vzip2q_s64((int64x2_t)v154, (int64x2_t)v151);
  v768 = v532;
  *(float64x2_t *)v769 = v520;
  v766 = v561;
  v767 = v558;
  v765 = v564;
  v155 = v148;
  v770.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v153, 1);
  v770.f64[1] = vmuld_lane_f64(v750.f64[0], v151, 1);
  v771 = vaddq_f64(vmulq_n_f64(v551, v750.f64[0]), vmulq_n_f64(v555, *(double *)&v749[8]));
  v772.f64[0] = vmuld_lane_f64(*(double *)&v754[8], v153, 1) + vmuld_lane_f64(*(double *)&v749[8], v149, 1);
  v772.f64[1] = vmuld_lane_f64(v756.f64[0], v153, 1) + *(double *)&v749[8] * v82.f64[0];
  v773.f64[0] = vmuld_lane_f64(*(double *)&v754[8], v151, 1) + v750.f64[0] * v148.f64[0];
  v773.f64[1] = vmuld_lane_f64(v756.f64[0], v151, 1) + vmuld_lane_f64(v750.f64[0], v148, 1);
  v774.f64[0] = vmuld_lane_f64(v750.f64[0], v149, 1)
              + vmuld_lane_f64(*(double *)&v754[8], v154, 1)
              + *(double *)&v749[8] * v148.f64[0];
  v774.f64[1] = v750.f64[0] * v82.f64[0]
              + vmuld_lane_f64(v756.f64[0], v154, 1)
              + vmuld_lane_f64(*(double *)&v749[8], v148, 1);
  v533 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v147, 8uLL);
  v775.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v150, 1) + vmuld_lane_f64(*(double *)&v754[8], v149, 1);
  v775.f64[1] = vmuld_lane_f64(v756.f64[0], v149, 1)
              + *(double *)&v749[8] * v147.f64[0]
              + *(double *)&v754[8] * v82.f64[0];
  v776.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v147, 1) + v756.f64[0] * v82.f64[0];
  v776.f64[1] = vmuld_lane_f64(v750.f64[0], v150, 1) + *(double *)&v754[8] * v148.f64[0];
  v562 = (float64x2_t)vzip2q_s64((int64x2_t)v626, (int64x2_t)v580);
  v565 = (float64x2_t)vzip2q_s64((int64x2_t)v621, (int64x2_t)v626);
  v777.f64[0] = v756.f64[0] * v155.f64[0] + v750.f64[0] * v147.f64[0] + vmuld_lane_f64(*(double *)&v754[8], v155, 1);
  v777.f64[1] = vmuld_lane_f64(v750.f64[0], v147, 1) + vmuld_lane_f64(v756.f64[0], v148, 1);
  *(float64x2_t *)&v778[8] = vaddq_f64(vmulq_n_f64(v147, *(double *)&v754[8]), vmulq_n_f64(v533, v756.f64[0]));
  *(_QWORD *)v778 = vmuld_lane_f64(*(double *)&v754[8], v150, 1);
  *(_QWORD *)&v778[24] = vmuld_lane_f64(v756.f64[0], v147, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v621, 1);
  v729.f64[1] = vmuld_lane_f64(v751.f64[1], v580, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v565, v751.f64[1]), vmulq_n_f64(v562, *(double *)&v749[32]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[8], v621, 1) + vmuld_lane_f64(*(double *)&v749[32], v582, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v757.f64[1], v621, 1) + *(double *)&v749[32] * v583.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[8], v580, 1) + v751.f64[1] * v507.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v757.f64[1], v580, 1) + vmuld_lane_f64(v751.f64[1], v507, 1);
  v731.f64[0] = vmuld_lane_f64(v751.f64[1], v582, 1)
              + vmuld_lane_f64(*(double *)&v755[8], v626, 1)
              + *(double *)&v749[32] * v507.f64[0];
  v731.f64[1] = v751.f64[1] * v583.f64[0]
              + vmuld_lane_f64(v757.f64[1], v626, 1)
              + vmuld_lane_f64(*(double *)&v749[32], v507, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v630, 1) + vmuld_lane_f64(*(double *)&v755[8], v582, 1);
  v732.f64[1] = vmuld_lane_f64(v757.f64[1], v582, 1)
              + *(double *)&v749[32] * v535.f64[0]
              + *(double *)&v755[8] * v583.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v535, 1) + v757.f64[1] * v583.f64[0];
  v733.f64[1] = vmuld_lane_f64(v751.f64[1], v630, 1) + *(double *)&v755[8] * v507.f64[0];
  v734.f64[0] = v757.f64[1] * v507.f64[0] + v751.f64[1] * v535.f64[0] + vmuld_lane_f64(*(double *)&v755[8], v507, 1);
  v734.f64[1] = vmuld_lane_f64(v751.f64[1], v535, 1) + vmuld_lane_f64(v757.f64[1], v507, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[8], v630, 1);
  v559 = (float64x2_t)vextq_s8((int8x16_t)v630, (int8x16_t)v535, 8uLL);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v535, *(double *)&v755[8]), vmulq_n_f64(v559, v757.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v757.f64[1], v535, 1);
  v156 = vaddq_f64(*(float64x2_t *)&v778[16], *(float64x2_t *)&v735[16]);
  v157 = vaddq_f64(*(float64x2_t *)v778, *(float64x2_t *)v735);
  v158 = vaddq_f64(v777, v734);
  v159 = vaddq_f64(v776, v733);
  v160 = vaddq_f64(v775, v732);
  v161 = vaddq_f64(v774, v731);
  v162 = vaddq_f64(v773, *(float64x2_t *)&v730[32]);
  v163 = vaddq_f64(v772, *(float64x2_t *)&v730[16]);
  v164 = vaddq_f64(v771, *(float64x2_t *)v730);
  v165 = vaddq_f64(v770, v729);
  v763 = v606;
  v764 = v522;
  v761 = v524;
  v762 = v617;
  v607 = (float64x2_t)vzip2q_s64((int64x2_t)v670, (int64x2_t)v677);
  v618 = (float64x2_t)vzip2q_s64((int64x2_t)v677, (int64x2_t)v601);
  *(float64x2_t *)&v769[16] = v575;
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v670, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[0], v601, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v607, v753.f64[0]), vmulq_n_f64(v618, *(double *)&v749[56]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[32], v670, 1) + vmuld_lane_f64(*(double *)&v749[56], v598, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[0], v670, 1) + *(double *)&v749[56] * v657.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[32], v601, 1) + v753.f64[0] * v526.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[0], v601, 1) + vmuld_lane_f64(v753.f64[0], v526, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[0], v598, 1)
              + vmuld_lane_f64(*(double *)&v755[32], v677, 1)
              + *(double *)&v749[56] * v526.f64[0];
  v731.f64[1] = v753.f64[0] * v657.f64[0]
              + vmuld_lane_f64(v759.f64[0], v677, 1)
              + vmuld_lane_f64(*(double *)&v749[56], v526, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v663, 1) + vmuld_lane_f64(*(double *)&v755[32], v598, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[0], v598, 1)
              + *(double *)&v749[56] * v570.f64[0]
              + *(double *)&v755[32] * v657.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v570, 1) + v759.f64[0] * v657.f64[0];
  v733.f64[1] = vmuld_lane_f64(v753.f64[0], v663, 1) + *(double *)&v755[32] * v526.f64[0];
  v734.f64[0] = v759.f64[0] * v526.f64[0] + v753.f64[0] * v570.f64[0] + vmuld_lane_f64(*(double *)&v755[32], v526, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[0], v570, 1) + vmuld_lane_f64(v759.f64[0], v526, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[32], v663, 1);
  v576 = (float64x2_t)vextq_s8((int8x16_t)v663, (int8x16_t)v570, 8uLL);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v570, *(double *)&v755[32]), vmulq_n_f64(v576, v759.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[0], v570, 1);
  *(float64x2_t *)v778 = vaddq_f64(v157, *(float64x2_t *)v735);
  *(float64x2_t *)&v778[16] = vaddq_f64(v156, *(float64x2_t *)&v735[16]);
  v776 = vaddq_f64(v159, v733);
  v777 = vaddq_f64(v158, v734);
  v774 = vaddq_f64(v161, v731);
  v775 = vaddq_f64(v160, v732);
  v772 = vaddq_f64(v163, *(float64x2_t *)&v730[16]);
  v773 = vaddq_f64(v162, *(float64x2_t *)&v730[32]);
  v770 = vaddq_f64(v165, v729);
  v771 = vaddq_f64(v164, *(float64x2_t *)v730);
  v779.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v153, 1);
  v780 = vaddq_f64(vmulq_n_f64(v551, v750.f64[1]), vmulq_n_f64(v555, *(double *)&v749[16]));
  v779.f64[1] = vmuld_lane_f64(v750.f64[1], v151, 1);
  v781.f64[0] = vmuld_lane_f64(*(double *)&v754[16], v153, 1) + vmuld_lane_f64(*(double *)&v749[16], v149, 1);
  v781.f64[1] = vmuld_lane_f64(v756.f64[1], v153, 1) + *(double *)&v749[16] * v82.f64[0];
  v782.f64[0] = vmuld_lane_f64(*(double *)&v754[16], v151, 1) + v750.f64[1] * v148.f64[0];
  v782.f64[1] = vmuld_lane_f64(v756.f64[1], v151, 1) + vmuld_lane_f64(v750.f64[1], v148, 1);
  v783.f64[0] = vmuld_lane_f64(v750.f64[1], v149, 1)
              + vmuld_lane_f64(*(double *)&v754[16], v154, 1)
              + *(double *)&v749[16] * v148.f64[0];
  v783.f64[1] = v750.f64[1] * v82.f64[0]
              + vmuld_lane_f64(v756.f64[1], v154, 1)
              + vmuld_lane_f64(*(double *)&v749[16], v148, 1);
  v784.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v150, 1) + vmuld_lane_f64(*(double *)&v754[16], v149, 1);
  v784.f64[1] = vmuld_lane_f64(v756.f64[1], v149, 1)
              + *(double *)&v749[16] * v147.f64[0]
              + *(double *)&v754[16] * v82.f64[0];
  v785.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v147, 1) + v756.f64[1] * v82.f64[0];
  v785.f64[1] = vmuld_lane_f64(v750.f64[1], v150, 1) + *(double *)&v754[16] * v148.f64[0];
  v786.f64[0] = v756.f64[1] * v155.f64[0] + v750.f64[1] * v147.f64[0] + vmuld_lane_f64(*(double *)&v754[16], v155, 1);
  v786.f64[1] = vmuld_lane_f64(v750.f64[1], v147, 1) + vmuld_lane_f64(v756.f64[1], v148, 1);
  *(_QWORD *)v787 = vmuld_lane_f64(*(double *)&v754[16], v150, 1);
  *(float64x2_t *)&v787[8] = vaddq_f64(vmulq_n_f64(v147, *(double *)&v754[16]), vmulq_n_f64(v533, v756.f64[1]));
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v621, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[0], v580, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v565, v752.f64[0]), vmulq_n_f64(v562, *(double *)&v749[40]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[16], v621, 1) + vmuld_lane_f64(*(double *)&v749[40], v582, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[0], v621, 1) + *(double *)&v749[40] * v583.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[16], v580, 1) + v752.f64[0] * v507.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[0], v580, 1) + vmuld_lane_f64(v752.f64[0], v507, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[0], v582, 1)
              + vmuld_lane_f64(*(double *)&v755[16], v626, 1)
              + *(double *)&v749[40] * v507.f64[0];
  v731.f64[1] = v752.f64[0] * v583.f64[0]
              + vmuld_lane_f64(v758.f64[0], v626, 1)
              + vmuld_lane_f64(*(double *)&v749[40], v507, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v630, 1) + vmuld_lane_f64(*(double *)&v755[16], v582, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[0], v582, 1)
              + *(double *)&v749[40] * v535.f64[0]
              + *(double *)&v755[16] * v583.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v535, 1) + v758.f64[0] * v583.f64[0];
  v733.f64[1] = vmuld_lane_f64(v752.f64[0], v630, 1) + *(double *)&v755[16] * v507.f64[0];
  v734.f64[0] = v758.f64[0] * v507.f64[0] + v752.f64[0] * v535.f64[0] + vmuld_lane_f64(*(double *)&v755[16], v507, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[0], v535, 1) + vmuld_lane_f64(v758.f64[0], v507, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[16], v630, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v535, *(double *)&v755[16]), vmulq_n_f64(v559, v758.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[0], v535, 1);
  *(_QWORD *)&v787[24] = vmuld_lane_f64(v756.f64[1], v147, 1);
  v166 = vaddq_f64(*(float64x2_t *)&v787[16], *(float64x2_t *)&v735[16]);
  v167 = vaddq_f64(*(float64x2_t *)v787, *(float64x2_t *)v735);
  v168 = vaddq_f64(v786, v734);
  v169 = vaddq_f64(v785, v733);
  v170 = vaddq_f64(v784, v732);
  v171 = vaddq_f64(v783, v731);
  v172 = vaddq_f64(v782, *(float64x2_t *)&v730[32]);
  v173 = vaddq_f64(v781, *(float64x2_t *)&v730[16]);
  v174 = vaddq_f64(v780, *(float64x2_t *)v730);
  v175 = vaddq_f64(v779, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v670, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[1], v601, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v607, v753.f64[1]), vmulq_n_f64(v618, *(double *)&v749[64]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[40], v670, 1) + vmuld_lane_f64(*(double *)&v749[64], v598, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[1], v670, 1) + *(double *)&v749[64] * v657.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[40], v601, 1) + v753.f64[1] * v526.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[1], v601, 1) + vmuld_lane_f64(v753.f64[1], v526, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[1], v598, 1)
              + vmuld_lane_f64(*(double *)&v755[40], v677, 1)
              + *(double *)&v749[64] * v526.f64[0];
  v731.f64[1] = v753.f64[1] * v657.f64[0]
              + vmuld_lane_f64(v759.f64[1], v677, 1)
              + vmuld_lane_f64(*(double *)&v749[64], v526, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v663, 1) + vmuld_lane_f64(*(double *)&v755[40], v598, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[1], v598, 1)
              + *(double *)&v749[64] * v570.f64[0]
              + *(double *)&v755[40] * v657.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v570, 1) + v759.f64[1] * v657.f64[0];
  v733.f64[1] = vmuld_lane_f64(v753.f64[1], v663, 1) + *(double *)&v755[40] * v526.f64[0];
  v734.f64[0] = v759.f64[1] * v526.f64[0] + v753.f64[1] * v570.f64[0] + vmuld_lane_f64(*(double *)&v755[40], v526, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[1], v570, 1) + vmuld_lane_f64(v759.f64[1], v526, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[40], v663, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v570, *(double *)&v755[40]), vmulq_n_f64(v576, v759.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[1], v570, 1);
  *(float64x2_t *)&v787[16] = vaddq_f64(v166, *(float64x2_t *)&v735[16]);
  *(float64x2_t *)v787 = vaddq_f64(v167, *(float64x2_t *)v735);
  v786 = vaddq_f64(v168, v734);
  v785 = vaddq_f64(v169, v733);
  v784 = vaddq_f64(v170, v732);
  v783 = vaddq_f64(v171, v731);
  v782 = vaddq_f64(v172, *(float64x2_t *)&v730[32]);
  v781 = vaddq_f64(v173, *(float64x2_t *)&v730[16]);
  v780 = vaddq_f64(v174, *(float64x2_t *)v730);
  v779 = vaddq_f64(v175, v729);
  v788.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v153, 1);
  v788.f64[1] = vmuld_lane_f64(v751.f64[0], v151, 1);
  v789 = vaddq_f64(vmulq_n_f64(v551, v751.f64[0]), vmulq_n_f64(v555, *(double *)&v749[24]));
  v790.f64[0] = vmuld_lane_f64(*(double *)v755, v153, 1) + vmuld_lane_f64(*(double *)&v749[24], v149, 1);
  v790.f64[1] = vmuld_lane_f64(v757.f64[0], v153, 1) + *(double *)&v749[24] * v82.f64[0];
  v791.f64[0] = vmuld_lane_f64(*(double *)v755, v151, 1) + v751.f64[0] * v148.f64[0];
  v791.f64[1] = vmuld_lane_f64(v757.f64[0], v151, 1) + vmuld_lane_f64(v751.f64[0], v148, 1);
  v792.f64[0] = vmuld_lane_f64(v751.f64[0], v149, 1)
              + vmuld_lane_f64(*(double *)v755, v154, 1)
              + *(double *)&v749[24] * v148.f64[0];
  v792.f64[1] = v751.f64[0] * v82.f64[0]
              + vmuld_lane_f64(v757.f64[0], v154, 1)
              + vmuld_lane_f64(*(double *)&v749[24], v148, 1);
  v793.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v150, 1) + vmuld_lane_f64(*(double *)v755, v149, 1);
  v793.f64[1] = vmuld_lane_f64(v757.f64[0], v149, 1) + *(double *)&v749[24] * v147.f64[0] + *(double *)v755 * v82.f64[0];
  v794.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v147, 1) + v757.f64[0] * v82.f64[0];
  v794.f64[1] = vmuld_lane_f64(v751.f64[0], v150, 1) + *(double *)v755 * v148.f64[0];
  v795.f64[0] = v757.f64[0] * v155.f64[0] + v751.f64[0] * v147.f64[0] + vmuld_lane_f64(*(double *)v755, v155, 1);
  v795.f64[1] = vmuld_lane_f64(v751.f64[0], v147, 1) + vmuld_lane_f64(v757.f64[0], v148, 1);
  *(_QWORD *)v796 = vmuld_lane_f64(*(double *)v755, v150, 1);
  *(float64x2_t *)&v796[8] = vaddq_f64(vmulq_n_f64(v147, *(double *)v755), vmulq_n_f64(v533, v757.f64[0]));
  *(_QWORD *)&v796[24] = vmuld_lane_f64(v757.f64[0], v147, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v621, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[1], v580, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v565, v752.f64[1]), vmulq_n_f64(v562, *(double *)&v749[48]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[24], v621, 1) + vmuld_lane_f64(*(double *)&v749[48], v582, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[1], v621, 1) + *(double *)&v749[48] * v583.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[24], v580, 1) + v752.f64[1] * v507.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[1], v580, 1) + vmuld_lane_f64(v752.f64[1], v507, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[1], v582, 1)
              + vmuld_lane_f64(*(double *)&v755[24], v626, 1)
              + *(double *)&v749[48] * v507.f64[0];
  v731.f64[1] = v752.f64[1] * v583.f64[0]
              + vmuld_lane_f64(v758.f64[1], v626, 1)
              + vmuld_lane_f64(*(double *)&v749[48], v507, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v630, 1) + vmuld_lane_f64(*(double *)&v755[24], v582, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[1], v582, 1)
              + *(double *)&v749[48] * v535.f64[0]
              + *(double *)&v755[24] * v583.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v535, 1) + v758.f64[1] * v583.f64[0];
  v733.f64[1] = vmuld_lane_f64(v752.f64[1], v630, 1) + *(double *)&v755[24] * v507.f64[0];
  v734.f64[0] = v758.f64[1] * v507.f64[0] + v752.f64[1] * v535.f64[0] + vmuld_lane_f64(*(double *)&v755[24], v507, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[1], v535, 1) + vmuld_lane_f64(v758.f64[1], v507, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[24], v630, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v535, *(double *)&v755[24]), vmulq_n_f64(v559, v758.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[1], v535, 1);
  v176 = vaddq_f64(*(float64x2_t *)&v796[16], *(float64x2_t *)&v735[16]);
  v177 = vaddq_f64(*(float64x2_t *)v796, *(float64x2_t *)v735);
  v178 = vaddq_f64(v795, v734);
  v179 = vaddq_f64(v794, v733);
  v180 = vaddq_f64(v793, v732);
  v181 = vaddq_f64(v792, v731);
  v182 = vaddq_f64(v791, *(float64x2_t *)&v730[32]);
  v183 = vaddq_f64(v790, *(float64x2_t *)&v730[16]);
  v184 = vaddq_f64(v789, *(float64x2_t *)v730);
  v185 = vaddq_f64(v788, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v670, 1);
  v729.f64[1] = vmuld_lane_f64(*(double *)v754, v601, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v607, *(double *)v754), vmulq_n_f64(v618, *(double *)&v749[72]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[48], v670, 1) + vmuld_lane_f64(*(double *)&v749[72], v598, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v760, v670, 1) + *(double *)&v749[72] * v657.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[48], v601, 1) + *(double *)v754 * v526.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v760, v601, 1) + vmuld_lane_f64(*(double *)v754, v526, 1);
  v731.f64[0] = vmuld_lane_f64(*(double *)v754, v598, 1)
              + vmuld_lane_f64(*(double *)&v755[48], v677, 1)
              + *(double *)&v749[72] * v526.f64[0];
  v731.f64[1] = *(double *)v754 * v657.f64[0]
              + vmuld_lane_f64(v760, v677, 1)
              + vmuld_lane_f64(*(double *)&v749[72], v526, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v663, 1) + vmuld_lane_f64(*(double *)&v755[48], v598, 1);
  v732.f64[1] = vmuld_lane_f64(v760, v598, 1) + *(double *)&v749[72] * v570.f64[0] + *(double *)&v755[48] * v657.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v570, 1) + v760 * v657.f64[0];
  v733.f64[1] = vmuld_lane_f64(*(double *)v754, v663, 1) + *(double *)&v755[48] * v526.f64[0];
  v734.f64[0] = v760 * v526.f64[0] + *(double *)v754 * v570.f64[0] + vmuld_lane_f64(*(double *)&v755[48], v526, 1);
  v734.f64[1] = vmuld_lane_f64(*(double *)v754, v570, 1) + vmuld_lane_f64(v760, v526, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[48], v663, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v570, *(double *)&v755[48]), vmulq_n_f64(v576, v760));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v760, v570, 1);
  *(float64x2_t *)v796 = vaddq_f64(v177, *(float64x2_t *)v735);
  *(float64x2_t *)&v796[16] = vaddq_f64(v176, *(float64x2_t *)&v735[16]);
  v794 = vaddq_f64(v179, v733);
  v795 = vaddq_f64(v178, v734);
  v792 = vaddq_f64(v181, v731);
  v793 = vaddq_f64(v180, v732);
  v790 = vaddq_f64(v183, *(float64x2_t *)&v730[16]);
  v791 = vaddq_f64(v182, *(float64x2_t *)&v730[32]);
  v788 = vaddq_f64(v185, v729);
  v789 = vaddq_f64(v184, *(float64x2_t *)v730);
  v797.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v621, 1);
  v797.f64[1] = vmuld_lane_f64(v750.f64[0], v580, 1);
  v798 = vaddq_f64(vmulq_n_f64(v565, v750.f64[0]), vmulq_n_f64(v562, *(double *)&v749[8]));
  v799.f64[0] = vmuld_lane_f64(*(double *)&v754[8], v621, 1) + vmuld_lane_f64(*(double *)&v749[8], v582, 1);
  v799.f64[1] = vmuld_lane_f64(v756.f64[0], v621, 1) + *(double *)&v749[8] * v583.f64[0];
  v800.f64[0] = vmuld_lane_f64(*(double *)&v754[8], v580, 1) + v750.f64[0] * v507.f64[0];
  v800.f64[1] = vmuld_lane_f64(v756.f64[0], v580, 1) + vmuld_lane_f64(v750.f64[0], v507, 1);
  v801.f64[0] = vmuld_lane_f64(v750.f64[0], v582, 1)
              + vmuld_lane_f64(*(double *)&v754[8], v626, 1)
              + *(double *)&v749[8] * v507.f64[0];
  v801.f64[1] = v750.f64[0] * v583.f64[0]
              + vmuld_lane_f64(v756.f64[0], v626, 1)
              + vmuld_lane_f64(*(double *)&v749[8], v507, 1);
  v802.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v630, 1) + vmuld_lane_f64(*(double *)&v754[8], v582, 1);
  v802.f64[1] = vmuld_lane_f64(v756.f64[0], v582, 1)
              + *(double *)&v749[8] * v535.f64[0]
              + *(double *)&v754[8] * v583.f64[0];
  v803.f64[0] = vmuld_lane_f64(*(double *)&v749[8], v535, 1) + v756.f64[0] * v583.f64[0];
  v803.f64[1] = vmuld_lane_f64(v750.f64[0], v630, 1) + *(double *)&v754[8] * v507.f64[0];
  v804.f64[0] = v756.f64[0] * v507.f64[0] + v750.f64[0] * v535.f64[0] + vmuld_lane_f64(*(double *)&v754[8], v507, 1);
  v804.f64[1] = vmuld_lane_f64(v750.f64[0], v535, 1) + vmuld_lane_f64(v756.f64[0], v507, 1);
  *(_QWORD *)v805 = vmuld_lane_f64(*(double *)&v754[8], v630, 1);
  *(float64x2_t *)&v805[8] = vaddq_f64(vmulq_n_f64(v535, *(double *)&v754[8]), vmulq_n_f64(v559, v756.f64[0]));
  *(_QWORD *)&v805[24] = vmuld_lane_f64(v756.f64[0], v535, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v537, 1);
  v729.f64[1] = vmuld_lane_f64(v751.f64[1], v539, 1);
  v525 = (float64x2_t)vzip2q_s64((int64x2_t)v537, (int64x2_t)v541);
  v523 = (float64x2_t)vzip2q_s64((int64x2_t)v541, (int64x2_t)v539);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v525, v751.f64[1]), vmulq_n_f64(v523, *(double *)&v749[32]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[8], v537, 1) + vmuld_lane_f64(*(double *)&v749[32], v528, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v757.f64[1], v537, 1) + *(double *)&v749[32] * v508.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[8], v539, 1) + v751.f64[1] * v509.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v757.f64[1], v539, 1) + vmuld_lane_f64(v751.f64[1], v509, 1);
  v731.f64[0] = vmuld_lane_f64(v751.f64[1], v528, 1)
              + vmuld_lane_f64(*(double *)&v755[8], v541, 1)
              + *(double *)&v749[32] * v509.f64[0];
  v731.f64[1] = v751.f64[1] * v508.f64[0]
              + vmuld_lane_f64(v757.f64[1], v541, 1)
              + vmuld_lane_f64(*(double *)&v749[32], v509, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v543, 1) + vmuld_lane_f64(*(double *)&v755[8], v528, 1);
  v732.f64[1] = vmuld_lane_f64(v757.f64[1], v528, 1)
              + *(double *)&v749[32] * v510.f64[0]
              + *(double *)&v755[8] * v508.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v510, 1) + v757.f64[1] * v508.f64[0];
  v733.f64[1] = vmuld_lane_f64(v751.f64[1], v543, 1) + *(double *)&v755[8] * v509.f64[0];
  v734.f64[0] = v757.f64[1] * v509.f64[0] + v751.f64[1] * v510.f64[0] + vmuld_lane_f64(*(double *)&v755[8], v509, 1);
  v734.f64[1] = vmuld_lane_f64(v751.f64[1], v510, 1) + vmuld_lane_f64(v757.f64[1], v509, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[8], v543, 1);
  v521 = (float64x2_t)vextq_s8((int8x16_t)v543, (int8x16_t)v510, 8uLL);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v510, *(double *)&v755[8]), vmulq_n_f64(v521, v757.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v757.f64[1], v510, 1);
  v186 = vaddq_f64(v799, *(float64x2_t *)&v730[16]);
  v187 = vaddq_f64(v798, *(float64x2_t *)v730);
  v188 = vaddq_f64(*(float64x2_t *)&v805[16], *(float64x2_t *)&v735[16]);
  v189 = vaddq_f64(*(float64x2_t *)v805, *(float64x2_t *)v735);
  v190 = vaddq_f64(v804, v734);
  v191 = vaddq_f64(v803, v733);
  v192 = vaddq_f64(v802, v732);
  v193 = vaddq_f64(v801, v731);
  v194 = vaddq_f64(v800, *(float64x2_t *)&v730[32]);
  v195 = vaddq_f64(v797, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v610, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[0], v573, 1);
  v552 = (float64x2_t)vzip2q_s64((int64x2_t)v614, (int64x2_t)v573);
  v556 = (float64x2_t)vzip2q_s64((int64x2_t)v610, (int64x2_t)v614);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, v753.f64[0]), vmulq_n_f64(v552, *(double *)&v749[56]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[32], v610, 1) + vmuld_lane_f64(*(double *)&v749[56], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[0], v610, 1) + *(double *)&v749[56] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[32], v573, 1) + v753.f64[0] * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[0], v573, 1) + vmuld_lane_f64(v753.f64[0], v512, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[0], v529, 1)
              + vmuld_lane_f64(*(double *)&v755[32], v614, 1)
              + *(double *)&v749[56] * v512.f64[0];
  v731.f64[1] = v753.f64[0] * v511
              + vmuld_lane_f64(v759.f64[0], v614, 1)
              + vmuld_lane_f64(*(double *)&v749[56], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v578, 1) + vmuld_lane_f64(*(double *)&v755[32], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[0], v529, 1) + *(double *)&v749[56] * v513.f64[0] + *(double *)&v755[32] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v513, 1) + v759.f64[0] * v511;
  v733.f64[1] = vmuld_lane_f64(v753.f64[0], v578, 1) + *(double *)&v755[32] * v512.f64[0];
  v734.f64[0] = v759.f64[0] * v512.f64[0] + v753.f64[0] * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[32], v512, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[0], v513, 1) + vmuld_lane_f64(v759.f64[0], v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[32], v578, 1);
  v534 = (float64x2_t)vextq_s8((int8x16_t)v578, (int8x16_t)v513, 8uLL);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[32]), vmulq_n_f64(v534, v759.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[0], v513, 1);
  *(float64x2_t *)v805 = vaddq_f64(v189, *(float64x2_t *)v735);
  *(float64x2_t *)&v805[16] = vaddq_f64(v188, *(float64x2_t *)&v735[16]);
  v803 = vaddq_f64(v191, v733);
  v804 = vaddq_f64(v190, v734);
  v801 = vaddq_f64(v193, v731);
  v802 = vaddq_f64(v192, v732);
  v800 = vaddq_f64(v194, *(float64x2_t *)&v730[32]);
  v799 = vaddq_f64(v186, *(float64x2_t *)&v730[16]);
  v798 = vaddq_f64(v187, *(float64x2_t *)v730);
  v797 = vaddq_f64(v195, v729);
  v806.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v621, 1);
  v806.f64[1] = vmuld_lane_f64(v750.f64[1], v580, 1);
  *(float64x2_t *)v807 = vaddq_f64(vmulq_n_f64(v565, v750.f64[1]), vmulq_n_f64(v562, *(double *)&v749[16]));
  *(double *)&v807[16] = vmuld_lane_f64(*(double *)&v754[16], v621, 1) + vmuld_lane_f64(*(double *)&v749[16], v582, 1);
  *(double *)&v807[24] = vmuld_lane_f64(v756.f64[1], v621, 1) + *(double *)&v749[16] * v583.f64[0];
  *(double *)&v807[32] = vmuld_lane_f64(*(double *)&v754[16], v580, 1) + v750.f64[1] * v507.f64[0];
  *(double *)&v807[40] = vmuld_lane_f64(v756.f64[1], v580, 1) + vmuld_lane_f64(v750.f64[1], v507, 1);
  *(double *)&v807[48] = vmuld_lane_f64(v750.f64[1], v582, 1)
                       + vmuld_lane_f64(*(double *)&v754[16], v626, 1)
                       + *(double *)&v749[16] * v507.f64[0];
  *(double *)&v807[56] = v750.f64[1] * v583.f64[0]
                       + vmuld_lane_f64(v756.f64[1], v626, 1)
                       + vmuld_lane_f64(*(double *)&v749[16], v507, 1);
  *(double *)&v807[64] = vmuld_lane_f64(*(double *)&v749[16], v630, 1) + vmuld_lane_f64(*(double *)&v754[16], v582, 1);
  *(double *)&v807[72] = vmuld_lane_f64(v756.f64[1], v582, 1)
                       + *(double *)&v749[16] * v535.f64[0]
                       + *(double *)&v754[16] * v583.f64[0];
  *(double *)&v807[80] = vmuld_lane_f64(*(double *)&v749[16], v535, 1) + v756.f64[1] * v583.f64[0];
  *(double *)&v807[88] = vmuld_lane_f64(v750.f64[1], v630, 1) + *(double *)&v754[16] * v507.f64[0];
  *(double *)&v807[96] = v756.f64[1] * v507.f64[0]
                       + v750.f64[1] * v535.f64[0]
                       + vmuld_lane_f64(*(double *)&v754[16], v507, 1);
  *(double *)&v807[104] = vmuld_lane_f64(v750.f64[1], v535, 1) + vmuld_lane_f64(v756.f64[1], v507, 1);
  *(_QWORD *)&v807[112] = vmuld_lane_f64(*(double *)&v754[16], v630, 1);
  *(float64x2_t *)&v807[120] = vaddq_f64(vmulq_n_f64(v535, *(double *)&v754[16]), vmulq_n_f64(v559, v756.f64[1]));
  *(_QWORD *)&v807[136] = vmuld_lane_f64(v756.f64[1], v535, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v537, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[0], v539, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v525, v752.f64[0]), vmulq_n_f64(v523, *(double *)&v749[40]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[16], v537, 1) + vmuld_lane_f64(*(double *)&v749[40], v528, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[0], v537, 1) + *(double *)&v749[40] * v508.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[16], v539, 1) + v752.f64[0] * v509.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[0], v539, 1) + vmuld_lane_f64(v752.f64[0], v509, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[0], v528, 1)
              + vmuld_lane_f64(*(double *)&v755[16], v541, 1)
              + *(double *)&v749[40] * v509.f64[0];
  v731.f64[1] = v752.f64[0] * v508.f64[0]
              + vmuld_lane_f64(v758.f64[0], v541, 1)
              + vmuld_lane_f64(*(double *)&v749[40], v509, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v543, 1) + vmuld_lane_f64(*(double *)&v755[16], v528, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[0], v528, 1)
              + *(double *)&v749[40] * v510.f64[0]
              + *(double *)&v755[16] * v508.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v510, 1) + v758.f64[0] * v508.f64[0];
  v733.f64[1] = vmuld_lane_f64(v752.f64[0], v543, 1) + *(double *)&v755[16] * v509.f64[0];
  v734.f64[0] = v758.f64[0] * v509.f64[0] + v752.f64[0] * v510.f64[0] + vmuld_lane_f64(*(double *)&v755[16], v509, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[0], v510, 1) + vmuld_lane_f64(v758.f64[0], v509, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[16], v543, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v510, *(double *)&v755[16]), vmulq_n_f64(v521, v758.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[0], v510, 1);
  v196 = vaddq_f64(*(float64x2_t *)&v807[128], *(float64x2_t *)&v735[16]);
  v197 = vaddq_f64(*(float64x2_t *)&v807[112], *(float64x2_t *)v735);
  v198 = vaddq_f64(*(float64x2_t *)&v807[96], v734);
  v199 = vaddq_f64(*(float64x2_t *)&v807[80], v733);
  v200 = vaddq_f64(*(float64x2_t *)&v807[64], v732);
  v201 = vaddq_f64(*(float64x2_t *)&v807[48], v731);
  v202 = vaddq_f64(*(float64x2_t *)&v807[32], *(float64x2_t *)&v730[32]);
  v203 = vaddq_f64(*(float64x2_t *)&v807[16], *(float64x2_t *)&v730[16]);
  v204 = vaddq_f64(*(float64x2_t *)v807, *(float64x2_t *)v730);
  v205 = vaddq_f64(v806, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v610, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[1], v573, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, v753.f64[1]), vmulq_n_f64(v552, *(double *)&v749[64]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[40], v610, 1) + vmuld_lane_f64(*(double *)&v749[64], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[1], v610, 1) + *(double *)&v749[64] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[40], v573, 1) + v753.f64[1] * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[1], v573, 1) + vmuld_lane_f64(v753.f64[1], v512, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[1], v529, 1)
              + vmuld_lane_f64(*(double *)&v755[40], v614, 1)
              + *(double *)&v749[64] * v512.f64[0];
  v731.f64[1] = v753.f64[1] * v511
              + vmuld_lane_f64(v759.f64[1], v614, 1)
              + vmuld_lane_f64(*(double *)&v749[64], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v578, 1) + vmuld_lane_f64(*(double *)&v755[40], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[1], v529, 1) + *(double *)&v749[64] * v513.f64[0] + *(double *)&v755[40] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v513, 1) + v759.f64[1] * v511;
  v733.f64[1] = vmuld_lane_f64(v753.f64[1], v578, 1) + *(double *)&v755[40] * v512.f64[0];
  v734.f64[0] = v759.f64[1] * v512.f64[0] + v753.f64[1] * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[40], v512, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[1], v513, 1) + vmuld_lane_f64(v759.f64[1], v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[40], v578, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[40]), vmulq_n_f64(v534, v759.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[1], v513, 1);
  *(float64x2_t *)&v807[112] = vaddq_f64(v197, *(float64x2_t *)v735);
  *(float64x2_t *)&v807[128] = vaddq_f64(v196, *(float64x2_t *)&v735[16]);
  *(float64x2_t *)&v807[80] = vaddq_f64(v199, v733);
  *(float64x2_t *)&v807[96] = vaddq_f64(v198, v734);
  *(float64x2_t *)&v807[48] = vaddq_f64(v201, v731);
  *(float64x2_t *)&v807[64] = vaddq_f64(v200, v732);
  *(float64x2_t *)&v807[16] = vaddq_f64(v203, *(float64x2_t *)&v730[16]);
  *(float64x2_t *)&v807[32] = vaddq_f64(v202, *(float64x2_t *)&v730[32]);
  v806 = vaddq_f64(v205, v729);
  *(float64x2_t *)v807 = vaddq_f64(v204, *(float64x2_t *)v730);
  v808.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v621, 1);
  v808.f64[1] = vmuld_lane_f64(v751.f64[0], v580, 1);
  v809 = vaddq_f64(vmulq_n_f64(v565, v751.f64[0]), vmulq_n_f64(v562, *(double *)&v749[24]));
  v810.f64[0] = vmuld_lane_f64(*(double *)v755, v621, 1) + vmuld_lane_f64(*(double *)&v749[24], v582, 1);
  v810.f64[1] = vmuld_lane_f64(v757.f64[0], v621, 1) + *(double *)&v749[24] * v583.f64[0];
  v811.f64[0] = vmuld_lane_f64(*(double *)v755, v580, 1) + v751.f64[0] * v507.f64[0];
  v811.f64[1] = vmuld_lane_f64(v757.f64[0], v580, 1) + vmuld_lane_f64(v751.f64[0], v507, 1);
  v812.f64[0] = vmuld_lane_f64(v751.f64[0], v582, 1)
              + vmuld_lane_f64(*(double *)v755, v626, 1)
              + *(double *)&v749[24] * v507.f64[0];
  v812.f64[1] = v751.f64[0] * v583.f64[0]
              + vmuld_lane_f64(v757.f64[0], v626, 1)
              + vmuld_lane_f64(*(double *)&v749[24], v507, 1);
  v813.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v630, 1) + vmuld_lane_f64(*(double *)v755, v582, 1);
  v813.f64[1] = vmuld_lane_f64(v757.f64[0], v582, 1)
              + *(double *)&v749[24] * v535.f64[0]
              + *(double *)v755 * v583.f64[0];
  *(double *)v814 = vmuld_lane_f64(*(double *)&v749[24], v535, 1) + v757.f64[0] * v583.f64[0];
  *(double *)&v814[8] = vmuld_lane_f64(v751.f64[0], v630, 1) + *(double *)v755 * v507.f64[0];
  *(double *)&v814[16] = v757.f64[0] * v507.f64[0]
                       + v751.f64[0] * v535.f64[0]
                       + vmuld_lane_f64(*(double *)v755, v507, 1);
  *(double *)&v814[24] = vmuld_lane_f64(v751.f64[0], v535, 1) + vmuld_lane_f64(v757.f64[0], v507, 1);
  *(_QWORD *)v815 = vmuld_lane_f64(*(double *)v755, v630, 1);
  *(float64x2_t *)&v815[8] = vaddq_f64(vmulq_n_f64(v535, *(double *)v755), vmulq_n_f64(v559, v757.f64[0]));
  *(_QWORD *)&v815[24] = vmuld_lane_f64(v757.f64[0], v535, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v537, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[1], v539, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v525, v752.f64[1]), vmulq_n_f64(v523, *(double *)&v749[48]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[24], v537, 1) + vmuld_lane_f64(*(double *)&v749[48], v528, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[1], v537, 1) + *(double *)&v749[48] * v508.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[24], v539, 1) + v752.f64[1] * v509.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[1], v539, 1) + vmuld_lane_f64(v752.f64[1], v509, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[1], v528, 1)
              + vmuld_lane_f64(*(double *)&v755[24], v541, 1)
              + *(double *)&v749[48] * v509.f64[0];
  v731.f64[1] = v752.f64[1] * v508.f64[0]
              + vmuld_lane_f64(v758.f64[1], v541, 1)
              + vmuld_lane_f64(*(double *)&v749[48], v509, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v543, 1) + vmuld_lane_f64(*(double *)&v755[24], v528, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[1], v528, 1)
              + *(double *)&v749[48] * v510.f64[0]
              + *(double *)&v755[24] * v508.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v510, 1) + v758.f64[1] * v508.f64[0];
  v733.f64[1] = vmuld_lane_f64(v752.f64[1], v543, 1) + *(double *)&v755[24] * v509.f64[0];
  v734.f64[0] = v758.f64[1] * v509.f64[0] + v752.f64[1] * v510.f64[0] + vmuld_lane_f64(*(double *)&v755[24], v509, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[1], v510, 1) + vmuld_lane_f64(v758.f64[1], v509, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[24], v543, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v510, *(double *)&v755[24]), vmulq_n_f64(v521, v758.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[1], v510, 1);
  v206 = vaddq_f64(*(float64x2_t *)&v815[16], *(float64x2_t *)&v735[16]);
  v207 = vaddq_f64(*(float64x2_t *)v815, *(float64x2_t *)v735);
  v208 = vaddq_f64(*(float64x2_t *)&v814[16], v734);
  v209 = vaddq_f64(*(float64x2_t *)v814, v733);
  v210 = vaddq_f64(v813, v732);
  v211 = vaddq_f64(v812, v731);
  v212 = vaddq_f64(v811, *(float64x2_t *)&v730[32]);
  v213 = vaddq_f64(v810, *(float64x2_t *)&v730[16]);
  v214 = vaddq_f64(v809, *(float64x2_t *)v730);
  v215 = vaddq_f64(v808, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v610, 1);
  v729.f64[1] = vmuld_lane_f64(*(double *)v754, v573, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, *(double *)v754), vmulq_n_f64(v552, *(double *)&v749[72]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[48], v610, 1) + vmuld_lane_f64(*(double *)&v749[72], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v760, v610, 1) + *(double *)&v749[72] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[48], v573, 1) + *(double *)v754 * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v760, v573, 1) + vmuld_lane_f64(*(double *)v754, v512, 1);
  v731.f64[0] = vmuld_lane_f64(*(double *)v754, v529, 1)
              + vmuld_lane_f64(*(double *)&v755[48], v614, 1)
              + *(double *)&v749[72] * v512.f64[0];
  v731.f64[1] = *(double *)v754 * v511 + vmuld_lane_f64(v760, v614, 1) + vmuld_lane_f64(*(double *)&v749[72], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v578, 1) + vmuld_lane_f64(*(double *)&v755[48], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v760, v529, 1) + *(double *)&v749[72] * v513.f64[0] + *(double *)&v755[48] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v513, 1) + v760 * v511;
  v733.f64[1] = vmuld_lane_f64(*(double *)v754, v578, 1) + *(double *)&v755[48] * v512.f64[0];
  v734.f64[0] = v760 * v512.f64[0] + *(double *)v754 * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[48], v512, 1);
  v734.f64[1] = vmuld_lane_f64(*(double *)v754, v513, 1) + vmuld_lane_f64(v760, v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[48], v578, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[48]), vmulq_n_f64(v534, v760));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v760, v513, 1);
  *(float64x2_t *)v815 = vaddq_f64(v207, *(float64x2_t *)v735);
  *(float64x2_t *)&v815[16] = vaddq_f64(v206, *(float64x2_t *)&v735[16]);
  *(float64x2_t *)v814 = vaddq_f64(v209, v733);
  *(float64x2_t *)&v814[16] = vaddq_f64(v208, v734);
  v812 = vaddq_f64(v211, v731);
  v813 = vaddq_f64(v210, v732);
  v810 = vaddq_f64(v213, *(float64x2_t *)&v730[16]);
  v811 = vaddq_f64(v212, *(float64x2_t *)&v730[32]);
  v808 = vaddq_f64(v215, v729);
  v809 = vaddq_f64(v214, *(float64x2_t *)v730);
  *(_QWORD *)v816 = vmuld_lane_f64(*(double *)&v749[8], v670, 1);
  *(_QWORD *)&v816[8] = vmuld_lane_f64(v750.f64[0], v601, 1);
  *(float64x2_t *)&v816[16] = vaddq_f64(vmulq_n_f64(v607, v750.f64[0]), vmulq_n_f64(v618, *(double *)&v749[8]));
  *(double *)&v816[32] = vmuld_lane_f64(*(double *)&v754[8], v670, 1) + vmuld_lane_f64(*(double *)&v749[8], v598, 1);
  *(double *)&v816[40] = vmuld_lane_f64(v756.f64[0], v670, 1) + *(double *)&v749[8] * v657.f64[0];
  *(double *)&v816[48] = vmuld_lane_f64(*(double *)&v754[8], v601, 1) + v750.f64[0] * v526.f64[0];
  *(double *)&v816[56] = vmuld_lane_f64(v756.f64[0], v601, 1) + vmuld_lane_f64(v750.f64[0], v526, 1);
  *(double *)&v816[64] = vmuld_lane_f64(v750.f64[0], v598, 1)
                       + vmuld_lane_f64(*(double *)&v754[8], v677, 1)
                       + *(double *)&v749[8] * v526.f64[0];
  *(double *)&v816[72] = v750.f64[0] * v657.f64[0]
                       + vmuld_lane_f64(v756.f64[0], v677, 1)
                       + vmuld_lane_f64(*(double *)&v749[8], v526, 1);
  *(double *)&v816[80] = vmuld_lane_f64(*(double *)&v749[8], v663, 1) + vmuld_lane_f64(*(double *)&v754[8], v598, 1);
  *(double *)&v816[88] = vmuld_lane_f64(v756.f64[0], v598, 1)
                       + *(double *)&v749[8] * v570.f64[0]
                       + *(double *)&v754[8] * v657.f64[0];
  *(double *)&v816[96] = vmuld_lane_f64(*(double *)&v749[8], v570, 1) + v756.f64[0] * v657.f64[0];
  *(double *)&v816[104] = vmuld_lane_f64(v750.f64[0], v663, 1) + *(double *)&v754[8] * v526.f64[0];
  *(double *)&v816[112] = v756.f64[0] * v526.f64[0]
                        + v750.f64[0] * v570.f64[0]
                        + vmuld_lane_f64(*(double *)&v754[8], v526, 1);
  *(double *)&v816[120] = vmuld_lane_f64(v750.f64[0], v570, 1) + vmuld_lane_f64(v756.f64[0], v526, 1);
  *(_QWORD *)&v816[128] = vmuld_lane_f64(*(double *)&v754[8], v663, 1);
  *(float64x2_t *)&v816[136] = vaddq_f64(vmulq_n_f64(v570, *(double *)&v754[8]), vmulq_n_f64(v576, v756.f64[0]));
  *(_QWORD *)&v816[152] = vmuld_lane_f64(v756.f64[0], v570, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v610, 1);
  v729.f64[1] = vmuld_lane_f64(v751.f64[1], v573, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, v751.f64[1]), vmulq_n_f64(v552, *(double *)&v749[32]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[8], v610, 1) + vmuld_lane_f64(*(double *)&v749[32], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v757.f64[1], v610, 1) + *(double *)&v749[32] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[8], v573, 1) + v751.f64[1] * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v757.f64[1], v573, 1) + vmuld_lane_f64(v751.f64[1], v512, 1);
  v731.f64[0] = vmuld_lane_f64(v751.f64[1], v529, 1)
              + vmuld_lane_f64(*(double *)&v755[8], v614, 1)
              + *(double *)&v749[32] * v512.f64[0];
  v731.f64[1] = v751.f64[1] * v511
              + vmuld_lane_f64(v757.f64[1], v614, 1)
              + vmuld_lane_f64(*(double *)&v749[32], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v578, 1) + vmuld_lane_f64(*(double *)&v755[8], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v757.f64[1], v529, 1) + *(double *)&v749[32] * v513.f64[0] + *(double *)&v755[8] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[32], v513, 1) + v757.f64[1] * v511;
  v733.f64[1] = vmuld_lane_f64(v751.f64[1], v578, 1) + *(double *)&v755[8] * v512.f64[0];
  v734.f64[0] = v757.f64[1] * v512.f64[0] + v751.f64[1] * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[8], v512, 1);
  v734.f64[1] = vmuld_lane_f64(v751.f64[1], v513, 1) + vmuld_lane_f64(v757.f64[1], v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[8], v578, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[8]), vmulq_n_f64(v534, v757.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v757.f64[1], v513, 1);
  v216 = vaddq_f64(*(float64x2_t *)&v816[144], *(float64x2_t *)&v735[16]);
  v217 = vaddq_f64(*(float64x2_t *)&v816[128], *(float64x2_t *)v735);
  v218 = vaddq_f64(*(float64x2_t *)&v816[112], v734);
  v219 = vaddq_f64(*(float64x2_t *)&v816[96], v733);
  v220 = vaddq_f64(*(float64x2_t *)&v816[80], v732);
  v221 = vaddq_f64(*(float64x2_t *)&v816[64], v731);
  v222 = vaddq_f64(*(float64x2_t *)&v816[48], *(float64x2_t *)&v730[32]);
  v223 = vaddq_f64(*(float64x2_t *)&v816[32], *(float64x2_t *)&v730[16]);
  v224 = vaddq_f64(*(float64x2_t *)&v816[16], *(float64x2_t *)v730);
  v225 = vaddq_f64(*(float64x2_t *)v816, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v545, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[0], v515, 1);
  v631 = (float64x2_t)vzip2q_s64((int64x2_t)v545, (int64x2_t)v548);
  v627 = (float64x2_t)vzip2q_s64((int64x2_t)v548, (int64x2_t)v515);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v631, v753.f64[0]), vmulq_n_f64(v627, *(double *)&v749[56]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[32], v545, 1) + vmuld_lane_f64(*(double *)&v749[56], v516, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[0], v545, 1) + *(double *)&v749[56] * v517.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[32], v515, 1) + v753.f64[0] * v518.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[0], v515, 1) + vmuld_lane_f64(v753.f64[0], v518, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[0], v516, 1)
              + vmuld_lane_f64(*(double *)&v755[32], v548, 1)
              + *(double *)&v749[56] * v518.f64[0];
  v731.f64[1] = v753.f64[0] * v517.f64[0]
              + vmuld_lane_f64(v759.f64[0], v548, 1)
              + vmuld_lane_f64(*(double *)&v749[56], v518, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v531, 1) + vmuld_lane_f64(*(double *)&v755[32], v516, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[0], v516, 1)
              + *(double *)&v749[56] * v519.f64[0]
              + *(double *)&v755[32] * v517.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[56], v519, 1) + v759.f64[0] * v517.f64[0];
  v733.f64[1] = vmuld_lane_f64(v753.f64[0], v531, 1) + *(double *)&v755[32] * v518.f64[0];
  v734.f64[0] = v759.f64[0] * v518.f64[0] + v753.f64[0] * v519.f64[0] + vmuld_lane_f64(*(double *)&v755[32], v518, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[0], v519, 1) + vmuld_lane_f64(v759.f64[0], v518, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[32], v531, 1);
  v639 = (float64x2_t)vextq_s8((int8x16_t)v531, (int8x16_t)v519, 8uLL);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v519, *(double *)&v755[32]), vmulq_n_f64(v639, v759.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[0], v519, 1);
  *(float64x2_t *)&v816[128] = vaddq_f64(v217, *(float64x2_t *)v735);
  *(float64x2_t *)&v816[144] = vaddq_f64(v216, *(float64x2_t *)&v735[16]);
  *(float64x2_t *)&v816[96] = vaddq_f64(v219, v733);
  *(float64x2_t *)&v816[112] = vaddq_f64(v218, v734);
  *(float64x2_t *)&v816[64] = vaddq_f64(v221, v731);
  *(float64x2_t *)&v816[80] = vaddq_f64(v220, v732);
  *(float64x2_t *)&v816[32] = vaddq_f64(v223, *(float64x2_t *)&v730[16]);
  *(float64x2_t *)&v816[48] = vaddq_f64(v222, *(float64x2_t *)&v730[32]);
  *(float64x2_t *)v816 = vaddq_f64(v225, v729);
  *(float64x2_t *)&v816[16] = vaddq_f64(v224, *(float64x2_t *)v730);
  v817.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v670, 1);
  v817.f64[1] = vmuld_lane_f64(v750.f64[1], v601, 1);
  v818 = vaddq_f64(vmulq_n_f64(v607, v750.f64[1]), vmulq_n_f64(v618, *(double *)&v749[16]));
  v819.f64[0] = vmuld_lane_f64(*(double *)&v754[16], v670, 1) + vmuld_lane_f64(*(double *)&v749[16], v598, 1);
  v819.f64[1] = vmuld_lane_f64(v756.f64[1], v670, 1) + *(double *)&v749[16] * v657.f64[0];
  v820.f64[0] = vmuld_lane_f64(*(double *)&v754[16], v601, 1) + v750.f64[1] * v526.f64[0];
  v820.f64[1] = vmuld_lane_f64(v756.f64[1], v601, 1) + vmuld_lane_f64(v750.f64[1], v526, 1);
  v821.f64[0] = vmuld_lane_f64(v750.f64[1], v598, 1)
              + vmuld_lane_f64(*(double *)&v754[16], v677, 1)
              + *(double *)&v749[16] * v526.f64[0];
  v821.f64[1] = v750.f64[1] * v657.f64[0]
              + vmuld_lane_f64(v756.f64[1], v677, 1)
              + vmuld_lane_f64(*(double *)&v749[16], v526, 1);
  v822.f64[0] = vmuld_lane_f64(*(double *)&v749[16], v663, 1) + vmuld_lane_f64(*(double *)&v754[16], v598, 1);
  v822.f64[1] = vmuld_lane_f64(v756.f64[1], v598, 1)
              + *(double *)&v749[16] * v570.f64[0]
              + *(double *)&v754[16] * v657.f64[0];
  *(double *)v823 = vmuld_lane_f64(*(double *)&v749[16], v570, 1) + v756.f64[1] * v657.f64[0];
  *(double *)&v823[8] = vmuld_lane_f64(v750.f64[1], v663, 1) + *(double *)&v754[16] * v526.f64[0];
  *(double *)&v823[16] = v756.f64[1] * v526.f64[0]
                       + v750.f64[1] * v570.f64[0]
                       + vmuld_lane_f64(*(double *)&v754[16], v526, 1);
  *(double *)&v823[24] = vmuld_lane_f64(v750.f64[1], v570, 1) + vmuld_lane_f64(v756.f64[1], v526, 1);
  *(_QWORD *)v824 = vmuld_lane_f64(*(double *)&v754[16], v663, 1);
  *(float64x2_t *)&v824[8] = vaddq_f64(vmulq_n_f64(v570, *(double *)&v754[16]), vmulq_n_f64(v576, v756.f64[1]));
  *(_QWORD *)&v824[24] = vmuld_lane_f64(v756.f64[1], v570, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v610, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[0], v573, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, v752.f64[0]), vmulq_n_f64(v552, *(double *)&v749[40]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[16], v610, 1) + vmuld_lane_f64(*(double *)&v749[40], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[0], v610, 1) + *(double *)&v749[40] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[16], v573, 1) + v752.f64[0] * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[0], v573, 1) + vmuld_lane_f64(v752.f64[0], v512, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[0], v529, 1)
              + vmuld_lane_f64(*(double *)&v755[16], v614, 1)
              + *(double *)&v749[40] * v512.f64[0];
  v731.f64[1] = v752.f64[0] * v511
              + vmuld_lane_f64(v758.f64[0], v614, 1)
              + vmuld_lane_f64(*(double *)&v749[40], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v578, 1) + vmuld_lane_f64(*(double *)&v755[16], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[0], v529, 1) + *(double *)&v749[40] * v513.f64[0] + *(double *)&v755[16] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[40], v513, 1) + v758.f64[0] * v511;
  v733.f64[1] = vmuld_lane_f64(v752.f64[0], v578, 1) + *(double *)&v755[16] * v512.f64[0];
  v734.f64[0] = v758.f64[0] * v512.f64[0] + v752.f64[0] * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[16], v512, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[0], v513, 1) + vmuld_lane_f64(v758.f64[0], v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[16], v578, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[16]), vmulq_n_f64(v534, v758.f64[0]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[0], v513, 1);
  v226 = vaddq_f64(*(float64x2_t *)&v824[16], *(float64x2_t *)&v735[16]);
  v227 = vaddq_f64(*(float64x2_t *)v824, *(float64x2_t *)v735);
  v228 = vaddq_f64(*(float64x2_t *)&v823[16], v734);
  v229 = vaddq_f64(*(float64x2_t *)v823, v733);
  v230 = vaddq_f64(v822, v732);
  v231 = vaddq_f64(v821, v731);
  v232 = vaddq_f64(v820, *(float64x2_t *)&v730[32]);
  v233 = vaddq_f64(v819, *(float64x2_t *)&v730[16]);
  v234 = vaddq_f64(v818, *(float64x2_t *)v730);
  v235 = vaddq_f64(v817, v729);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v545, 1);
  v729.f64[1] = vmuld_lane_f64(v753.f64[1], v515, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v631, v753.f64[1]), vmulq_n_f64(v627, *(double *)&v749[64]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[40], v545, 1) + vmuld_lane_f64(*(double *)&v749[64], v516, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v759.f64[1], v545, 1) + *(double *)&v749[64] * v517.f64[0];
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[40], v515, 1) + v753.f64[1] * v518.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v759.f64[1], v515, 1) + vmuld_lane_f64(v753.f64[1], v518, 1);
  v731.f64[0] = vmuld_lane_f64(v753.f64[1], v516, 1)
              + vmuld_lane_f64(*(double *)&v755[40], v548, 1)
              + *(double *)&v749[64] * v518.f64[0];
  v731.f64[1] = v753.f64[1] * v517.f64[0]
              + vmuld_lane_f64(v759.f64[1], v548, 1)
              + vmuld_lane_f64(*(double *)&v749[64], v518, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v531, 1) + vmuld_lane_f64(*(double *)&v755[40], v516, 1);
  v732.f64[1] = vmuld_lane_f64(v759.f64[1], v516, 1)
              + *(double *)&v749[64] * v519.f64[0]
              + *(double *)&v755[40] * v517.f64[0];
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[64], v519, 1) + v759.f64[1] * v517.f64[0];
  v733.f64[1] = vmuld_lane_f64(v753.f64[1], v531, 1) + *(double *)&v755[40] * v518.f64[0];
  v734.f64[0] = v759.f64[1] * v518.f64[0] + v753.f64[1] * v519.f64[0] + vmuld_lane_f64(*(double *)&v755[40], v518, 1);
  v734.f64[1] = vmuld_lane_f64(v753.f64[1], v519, 1) + vmuld_lane_f64(v759.f64[1], v518, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[40], v531, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v519, *(double *)&v755[40]), vmulq_n_f64(v639, v759.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v759.f64[1], v519, 1);
  v717 = vaddq_f64(v235, v729);
  v236 = vaddq_f64(v234, *(float64x2_t *)v730);
  v237 = vaddq_f64(v233, *(float64x2_t *)&v730[16]);
  v238 = vaddq_f64(v232, *(float64x2_t *)&v730[32]);
  v239 = vaddq_f64(v231, v731);
  v240 = vaddq_f64(v230, v732);
  v241 = vaddq_f64(v229, v733);
  *(float64x2_t *)v824 = vaddq_f64(v227, *(float64x2_t *)v735);
  *(float64x2_t *)&v824[16] = vaddq_f64(v226, *(float64x2_t *)&v735[16]);
  *(float64x2_t *)&v832[8] = vaddq_f64(vmulq_n_f64(v570, *(double *)v755), vmulq_n_f64(v576, v757.f64[0]));
  *(float64x2_t *)&v823[16] = vaddq_f64(v228, v734);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v610, 1);
  v729.f64[1] = vmuld_lane_f64(v752.f64[1], v573, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v556, v752.f64[1]), vmulq_n_f64(v552, *(double *)&v749[48]));
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[24], v610, 1) + vmuld_lane_f64(*(double *)&v749[48], v529, 1);
  *(double *)&v730[24] = vmuld_lane_f64(v758.f64[1], v610, 1) + *(double *)&v749[48] * v511;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[24], v573, 1) + v752.f64[1] * v512.f64[0];
  *(double *)&v730[40] = vmuld_lane_f64(v758.f64[1], v573, 1) + vmuld_lane_f64(v752.f64[1], v512, 1);
  v731.f64[0] = vmuld_lane_f64(v752.f64[1], v529, 1)
              + vmuld_lane_f64(*(double *)&v755[24], v614, 1)
              + *(double *)&v749[48] * v512.f64[0];
  v731.f64[1] = v752.f64[1] * v511
              + vmuld_lane_f64(v758.f64[1], v614, 1)
              + vmuld_lane_f64(*(double *)&v749[48], v512, 1);
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v578, 1) + vmuld_lane_f64(*(double *)&v755[24], v529, 1);
  v732.f64[1] = vmuld_lane_f64(v758.f64[1], v529, 1) + *(double *)&v749[48] * v513.f64[0] + *(double *)&v755[24] * v511;
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[48], v513, 1) + v758.f64[1] * v511;
  v733.f64[1] = vmuld_lane_f64(v752.f64[1], v578, 1) + *(double *)&v755[24] * v512.f64[0];
  v734.f64[0] = v758.f64[1] * v512.f64[0] + v752.f64[1] * v513.f64[0] + vmuld_lane_f64(*(double *)&v755[24], v512, 1);
  v734.f64[1] = vmuld_lane_f64(v752.f64[1], v513, 1) + vmuld_lane_f64(v758.f64[1], v512, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[24], v578, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v513, *(double *)&v755[24]), vmulq_n_f64(v534, v758.f64[1]));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v758.f64[1], v513, 1);
  v242 = v729;
  v243 = *(float64x2_t *)v730;
  v244 = *(float64x2_t *)&v730[16];
  v245 = *(float64x2_t *)&v730[32];
  v246 = v731;
  v247 = v732;
  v248 = v733;
  v249 = v734;
  v250 = *(float64x2_t *)v735;
  v251 = *(float64x2_t *)&v735[16];
  v729.f64[1] = vmuld_lane_f64(*(double *)v754, v515, 1);
  *(float64x2_t *)v730 = vaddq_f64(vmulq_n_f64(v631, *(double *)v754), vmulq_n_f64(v627, *(double *)&v749[72]));
  v822 = v240;
  *(float64x2_t *)v823 = v241;
  *(double *)&v730[16] = vmuld_lane_f64(*(double *)&v755[48], v545, 1) + vmuld_lane_f64(*(double *)&v749[72], v516, 1);
  v820 = v238;
  v821 = v239;
  *(double *)&v730[24] = vmuld_lane_f64(v760, v545, 1) + *(double *)&v749[72] * v517.f64[0];
  v818 = v236;
  v819 = v237;
  *(double *)&v730[32] = vmuld_lane_f64(*(double *)&v755[48], v515, 1) + *(double *)v754 * v518.f64[0];
  v817 = v717;
  v825.f64[0] = vmuld_lane_f64(*(double *)&v749[24], v670, 1);
  v825.f64[1] = vmuld_lane_f64(v751.f64[0], v601, 1);
  *(double *)&v730[40] = vmuld_lane_f64(v760, v515, 1) + vmuld_lane_f64(*(double *)v754, v518, 1);
  v826 = vaddq_f64(vmulq_n_f64(v607, v751.f64[0]), vmulq_n_f64(v618, *(double *)&v749[24]));
  v827.f64[0] = vmuld_lane_f64(*(double *)v755, v670, 1) + vmuld_lane_f64(*(double *)&v749[24], v598, 1);
  v827.f64[1] = vmuld_lane_f64(v757.f64[0], v670, 1) + *(double *)&v749[24] * v657.f64[0];
  v731.f64[0] = vmuld_lane_f64(*(double *)v754, v516, 1)
              + vmuld_lane_f64(*(double *)&v755[48], v548, 1)
              + *(double *)&v749[72] * v518.f64[0];
  v828.f64[0] = vmuld_lane_f64(*(double *)v755, v601, 1) + v751.f64[0] * v526.f64[0];
  v828.f64[1] = vmuld_lane_f64(v757.f64[0], v601, 1) + vmuld_lane_f64(v751.f64[0], v526, 1);
  v731.f64[1] = *(double *)v754 * v517.f64[0]
              + vmuld_lane_f64(v760, v548, 1)
              + vmuld_lane_f64(*(double *)&v749[72], v518, 1);
  v829.f64[0] = vmuld_lane_f64(v751.f64[0], v598, 1)
              + vmuld_lane_f64(*(double *)v755, v677, 1)
              + *(double *)&v749[24] * v526.f64[0];
  v829.f64[1] = v751.f64[0] * v657.f64[0]
              + vmuld_lane_f64(v757.f64[0], v677, 1)
              + vmuld_lane_f64(*(double *)&v749[24], v526, 1);
  *(double *)v830 = vmuld_lane_f64(*(double *)&v749[24], v663, 1) + vmuld_lane_f64(*(double *)v755, v598, 1);
  *(double *)&v830[8] = vmuld_lane_f64(v757.f64[0], v598, 1)
                      + *(double *)&v749[24] * v570.f64[0]
                      + *(double *)v755 * v657.f64[0];
  v732.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v531, 1) + vmuld_lane_f64(*(double *)&v755[48], v516, 1);
  *(double *)&v830[16] = vmuld_lane_f64(*(double *)&v749[24], v570, 1) + v757.f64[0] * v657.f64[0];
  *(double *)&v830[24] = vmuld_lane_f64(v751.f64[0], v663, 1) + *(double *)v755 * v526.f64[0];
  v831.f64[0] = v757.f64[0] * v526.f64[0] + v751.f64[0] * v570.f64[0] + vmuld_lane_f64(*(double *)v755, v526, 1);
  v732.f64[1] = vmuld_lane_f64(v760, v516, 1) + *(double *)&v749[72] * v519.f64[0] + *(double *)&v755[48] * v517.f64[0];
  v831.f64[1] = vmuld_lane_f64(v751.f64[0], v570, 1) + vmuld_lane_f64(v757.f64[0], v526, 1);
  v733.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v519, 1) + v760 * v517.f64[0];
  *(_QWORD *)v832 = vmuld_lane_f64(*(double *)v755, v663, 1);
  v733.f64[1] = vmuld_lane_f64(*(double *)v754, v531, 1) + *(double *)&v755[48] * v518.f64[0];
  *(_QWORD *)&v832[24] = vmuld_lane_f64(v757.f64[0], v570, 1);
  v734.f64[0] = v760 * v518.f64[0] + *(double *)v754 * v519.f64[0] + vmuld_lane_f64(*(double *)&v755[48], v518, 1);
  v734.f64[1] = vmuld_lane_f64(*(double *)v754, v519, 1) + vmuld_lane_f64(v760, v518, 1);
  *(_QWORD *)v735 = vmuld_lane_f64(*(double *)&v755[48], v531, 1);
  *(float64x2_t *)&v735[8] = vaddq_f64(vmulq_n_f64(v519, *(double *)&v755[48]), vmulq_n_f64(v639, v760));
  *(_QWORD *)&v735[24] = vmuld_lane_f64(v760, v519, 1);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v749[72], v545, 1);
  *(float64x2_t *)&v832[16] = vaddq_f64(vaddq_f64(*(float64x2_t *)&v832[16], v251), *(float64x2_t *)&v735[16]);
  *(float64x2_t *)v832 = vaddq_f64(vaddq_f64(*(float64x2_t *)v832, v250), *(float64x2_t *)v735);
  v831 = vaddq_f64(vaddq_f64(v831, v249), v734);
  *(float64x2_t *)&v830[16] = vaddq_f64(vaddq_f64(*(float64x2_t *)&v830[16], v248), v733);
  *(float64x2_t *)v830 = vaddq_f64(vaddq_f64(*(float64x2_t *)v830, v247), v732);
  v828 = vaddq_f64(vaddq_f64(v828, v245), *(float64x2_t *)&v730[32]);
  v829 = vaddq_f64(vaddq_f64(v829, v246), v731);
  v826 = vaddq_f64(vaddq_f64(v826, v243), *(float64x2_t *)v730);
  v827 = vaddq_f64(vaddq_f64(v827, v244), *(float64x2_t *)&v730[16]);
  v825 = vaddq_f64(vaddq_f64(v825, v242), v729);
  if (!sub_20EB514B0((uint64_t *)&v761))
    return 0;
  v589 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v824[16], vmulq_n_f64(*(float64x2_t *)&v832[16], -v821.f64[1]));
  v718 = (int8x16_t)vaddq_f64(*(float64x2_t *)v824, vmulq_n_f64(*(float64x2_t *)v832, -v821.f64[1]));
  v712 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v823[16], vmulq_n_f64(v831, -v821.f64[1]));
  v707 = (int8x16_t)vaddq_f64(*(float64x2_t *)v823, vmulq_n_f64(*(float64x2_t *)&v830[16], -v821.f64[1]));
  v701 = (int8x16_t)vaddq_f64(v822, vmulq_n_f64(*(float64x2_t *)v830, -v821.f64[1]));
  v696 = (int8x16_t)vaddq_f64(v821, vmulq_n_f64(v829, -v821.f64[1]));
  v690 = (int8x16_t)vaddq_f64(v820, vmulq_n_f64(v828, -v821.f64[1]));
  v684 = (int8x16_t)vaddq_f64(v819, vmulq_n_f64(v827, -v821.f64[1]));
  v622 = (int8x16_t)vaddq_f64(v817, vmulq_n_f64(v825, -v821.f64[1]));
  v678 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[144], vmulq_n_f64(*(float64x2_t *)&v832[16], -*(double *)&v816[72]));
  v671 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[128], vmulq_n_f64(*(float64x2_t *)v832, -*(double *)&v816[72]));
  v644 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[112], vmulq_n_f64(v831, -*(double *)&v816[72]));
  v252 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[96], vmulq_n_f64(*(float64x2_t *)&v830[16], -*(double *)&v816[72]));
  v253 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[80], vmulq_n_f64(*(float64x2_t *)v830, -*(double *)&v816[72]));
  v254 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[64], vmulq_n_f64(v829, -*(double *)&v816[72]));
  v255 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[48], vmulq_n_f64(v828, -*(double *)&v816[72]));
  v256 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[32], vmulq_n_f64(v827, -*(double *)&v816[72]));
  v257 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v816[16], vmulq_n_f64(v826, -*(double *)&v816[72]));
  v258 = (int8x16_t)vaddq_f64(*(float64x2_t *)v816, vmulq_n_f64(v825, -*(double *)&v816[72]));
  v664 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v815[16], vmulq_n_f64(*(float64x2_t *)&v832[16], -v812.f64[1]));
  v652 = (int8x16_t)vaddq_f64(*(float64x2_t *)v815, vmulq_n_f64(*(float64x2_t *)v832, -v812.f64[1]));
  v259 = (int8x16_t)vaddq_f64(*(float64x2_t *)v814, vmulq_n_f64(*(float64x2_t *)&v830[16], -v812.f64[1]));
  v260 = (int8x16_t)vaddq_f64(v813, vmulq_n_f64(*(float64x2_t *)v830, -v812.f64[1]));
  v261 = (int8x16_t)vaddq_f64(v812, vmulq_n_f64(v829, -v812.f64[1]));
  v262 = (int8x16_t)vaddq_f64(v811, vmulq_n_f64(v828, -v812.f64[1]));
  v263 = (int8x16_t)vaddq_f64(v810, vmulq_n_f64(v827, -v812.f64[1]));
  v264 = (int8x16_t)vaddq_f64(v809, vmulq_n_f64(v826, -v812.f64[1]));
  v593 = (int8x16_t)vaddq_f64(v808, vmulq_n_f64(v825, -v812.f64[1]));
  v658 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[128], vmulq_n_f64(*(float64x2_t *)&v832[16], -*(double *)&v807[56]));
  v640 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[112], vmulq_n_f64(*(float64x2_t *)v832, -*(double *)&v807[56]));
  v611 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[80], vmulq_n_f64(*(float64x2_t *)&v830[16], -*(double *)&v807[56]));
  v265 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[48], vmulq_n_f64(v829, -*(double *)&v807[56]));
  v266 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[32], vmulq_n_f64(v828, -*(double *)&v807[56]));
  v267 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[16], vmulq_n_f64(v827, -*(double *)&v807[56]));
  v268 = (int8x16_t)vaddq_f64(*(float64x2_t *)v807, vmulq_n_f64(v826, -*(double *)&v807[56]));
  v591 = (int8x16_t)vaddq_f64(v806, vmulq_n_f64(v825, -*(double *)&v807[56]));
  v269 = vmulq_n_f64(v829, -v801.f64[1]);
  v648 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v805[16], vmulq_n_f64(*(float64x2_t *)&v832[16], -v801.f64[1]));
  v637 = (int8x16_t)vaddq_f64(*(float64x2_t *)v805, vmulq_n_f64(*(float64x2_t *)v832, -v801.f64[1]));
  v632 = (int8x16_t)vaddq_f64(v804, vmulq_n_f64(v831, -v801.f64[1]));
  v615 = (int8x16_t)vaddq_f64(v803, vmulq_n_f64(*(float64x2_t *)&v830[16], -v801.f64[1]));
  v270 = (int8x16_t)vaddq_f64(v801, v269);
  v602 = (int8x16_t)vaddq_f64(v800, vmulq_n_f64(v828, -v801.f64[1]));
  v599 = (int8x16_t)vaddq_f64(v799, vmulq_n_f64(v827, -v801.f64[1]));
  v271 = (int8x16_t)vaddq_f64(v798, vmulq_n_f64(v826, -v801.f64[1]));
  v596 = (int8x16_t)vaddq_f64(v797, vmulq_n_f64(v825, -v801.f64[1]));
  *(_QWORD *)v816 = v258.i64[0];
  v269.f64[0] = -*(double *)v254.i64;
  v272 = (int8x16_t)vaddq_f64(v818, vmulq_n_f64(v826, -v821.f64[1]));
  v273 = (float64x2_t)vextq_s8(v622, v272, 8uLL);
  v588 = (int8x16_t)vaddq_f64(vmulq_n_f64(v273, -*(double *)v254.i64), (float64x2_t)vextq_s8(v258, v257, 8uLL));
  v817 = (float64x2_t)v622;
  v818 = (float64x2_t)v272;
  v274 = (float64x2_t)vextq_s8(v272, v684, 8uLL);
  v628 = (int8x16_t)vaddq_f64(vmulq_n_f64(v274, -*(double *)v254.i64), (float64x2_t)vextq_s8(v257, v256, 8uLL));
  v275 = (float64x2_t)vextq_s8(v684, v690, 8uLL);
  v623 = (int8x16_t)vaddq_f64(vmulq_n_f64(v275, -*(double *)v254.i64), (float64x2_t)vextq_s8(v256, v255, 8uLL));
  v819 = (float64x2_t)v684;
  v820 = (float64x2_t)v690;
  v276 = (float64x2_t)vextq_s8(v690, v696, 8uLL);
  v277 = (int8x16_t)vaddq_f64(vmulq_n_f64(v276, -*(double *)v254.i64), (float64x2_t)vextq_s8(v255, v254, 8uLL));
  v278 = (float64x2_t)vextq_s8(v696, v701, 8uLL);
  v691 = (int8x16_t)vaddq_f64(vmulq_n_f64(v278, -*(double *)v254.i64), (float64x2_t)vextq_s8(v254, v253, 8uLL));
  v821 = (float64x2_t)v696;
  v822 = (float64x2_t)v701;
  v279 = (float64x2_t)vextq_s8(v701, v707, 8uLL);
  v702 = (int8x16_t)vaddq_f64(vmulq_n_f64(v279, -*(double *)v254.i64), (float64x2_t)vextq_s8(v253, v252, 8uLL));
  v280 = (float64x2_t)vextq_s8(v707, v712, 8uLL);
  v697 = (int8x16_t)vaddq_f64(vmulq_n_f64(v280, -*(double *)v254.i64), (float64x2_t)vextq_s8(v252, v644, 8uLL));
  *(int8x16_t *)v823 = v707;
  *(int8x16_t *)&v823[16] = v712;
  v281 = (float64x2_t)vextq_s8(v712, v718, 8uLL);
  v713 = (int8x16_t)vaddq_f64(vmulq_n_f64(v281, -*(double *)v254.i64), (float64x2_t)vextq_s8(v644, v671, 8uLL));
  v282 = (float64x2_t)vextq_s8(v718, v589, 8uLL);
  v685 = (int8x16_t)vaddq_f64(vmulq_n_f64(v282, -*(double *)v254.i64), (float64x2_t)vextq_s8(v671, v678, 8uLL));
  *(int8x16_t *)v824 = v718;
  *(int8x16_t *)&v824[16] = v589;
  v283 = (float64x2_t)vzip2q_s64((int64x2_t)v589, (int64x2_t)0);
  v284 = vaddq_f64(vmulq_f64(v269, v283), (float64x2_t)vzip2q_s64((int64x2_t)v678, (int64x2_t)0));
  v679 = (int8x16_t)v284;
  v284.f64[0] = -*(double *)v261.i64;
  v719 = (int8x16_t)vaddq_f64(vmulq_n_f64(v273, -*(double *)v261.i64), (float64x2_t)vextq_s8(v593, v264, 8uLL));
  *(_QWORD *)&v808.f64[0] = v593.i64[0];
  v708 = (int8x16_t)vaddq_f64(vmulq_n_f64(v274, -*(double *)v261.i64), (float64x2_t)vextq_s8(v264, v263, 8uLL));
  v285 = (int8x16_t)vaddq_f64(vmulq_n_f64(v275, -*(double *)v261.i64), (float64x2_t)vextq_s8(v263, v262, 8uLL));
  v286 = (int8x16_t)vaddq_f64(vmulq_n_f64(v276, -*(double *)v261.i64), (float64x2_t)vextq_s8(v262, v261, 8uLL));
  v287 = (int8x16_t)vaddq_f64(vmulq_n_f64(v278, -*(double *)v261.i64), (float64x2_t)vextq_s8(v261, v260, 8uLL));
  v288 = (int8x16_t)vaddq_f64(vmulq_n_f64(v279, -*(double *)v261.i64), (float64x2_t)vextq_s8(v260, v259, 8uLL));
  v289 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v814[16], vmulq_n_f64(v831, -v812.f64[1]));
  v290 = (int8x16_t)vaddq_f64(vmulq_n_f64(v280, -*(double *)v261.i64), (float64x2_t)vextq_s8(v259, v289, 8uLL));
  v291 = (int8x16_t)vaddq_f64(vmulq_n_f64(v281, -*(double *)v261.i64), (float64x2_t)vextq_s8(v289, v652, 8uLL));
  v292 = (int8x16_t)vaddq_f64(vmulq_n_f64(v282, -*(double *)v261.i64), (float64x2_t)vextq_s8(v652, v664, 8uLL));
  v293 = vaddq_f64(vmulq_f64(v284, v283), (float64x2_t)vzip2q_s64((int64x2_t)v664, (int64x2_t)0));
  v645 = (int8x16_t)v293;
  v293.f64[0] = -*(double *)v265.i64;
  v672 = (int8x16_t)vaddq_f64(vmulq_n_f64(v273, -*(double *)v265.i64), (float64x2_t)vextq_s8(v591, v268, 8uLL));
  *(_QWORD *)&v806.f64[0] = v591.i64[0];
  v665 = (int8x16_t)vaddq_f64(vmulq_n_f64(v274, -*(double *)v265.i64), (float64x2_t)vextq_s8(v268, v267, 8uLL));
  v653 = (int8x16_t)vaddq_f64(vmulq_n_f64(v275, -*(double *)v265.i64), (float64x2_t)vextq_s8(v267, v266, 8uLL));
  v294 = (int8x16_t)vaddq_f64(vmulq_n_f64(v276, -*(double *)v265.i64), (float64x2_t)vextq_s8(v266, v265, 8uLL));
  v295 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[64], vmulq_n_f64(*(float64x2_t *)v830, -*(double *)&v807[56]));
  v634 = (int8x16_t)vaddq_f64(vmulq_n_f64(v278, -*(double *)v265.i64), (float64x2_t)vextq_s8(v265, v295, 8uLL));
  v296 = (int8x16_t)vaddq_f64(vmulq_n_f64(v279, -*(double *)v265.i64), (float64x2_t)vextq_s8(v295, v611, 8uLL));
  v297 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v807[96], vmulq_n_f64(v831, -*(double *)&v807[56]));
  v298 = (int8x16_t)vaddq_f64(vmulq_n_f64(v280, v293.f64[0]), (float64x2_t)vextq_s8(v611, v297, 8uLL));
  v299 = (int8x16_t)vaddq_f64(vmulq_n_f64(v281, v293.f64[0]), (float64x2_t)vextq_s8(v297, v640, 8uLL));
  v300 = (int8x16_t)vaddq_f64(vmulq_n_f64(v282, v293.f64[0]), (float64x2_t)vextq_s8(v640, v658, 8uLL));
  v301 = vaddq_f64(vmulq_f64(v293, v283), (float64x2_t)vzip2q_s64((int64x2_t)v658, (int64x2_t)0));
  v594 = (int8x16_t)v301;
  v301.f64[0] = -*(double *)v270.i64;
  v302 = vmulq_n_f64(v282, -*(double *)v270.i64);
  v659 = (int8x16_t)vaddq_f64(vmulq_n_f64(v273, -*(double *)v270.i64), (float64x2_t)vextq_s8(v596, v271, 8uLL));
  *(_QWORD *)&v797.f64[0] = v596.i64[0];
  v641 = (int8x16_t)vaddq_f64(vmulq_n_f64(v274, -*(double *)v270.i64), (float64x2_t)vextq_s8(v271, v599, 8uLL));
  v619 = (int8x16_t)vaddq_f64(vmulq_n_f64(v275, -*(double *)v270.i64), (float64x2_t)vextq_s8(v599, v602, 8uLL));
  v303 = (int8x16_t)vaddq_f64(vmulq_n_f64(v276, -*(double *)v270.i64), (float64x2_t)vextq_s8(v602, v270, 8uLL));
  v304 = (int8x16_t)vaddq_f64(v802, vmulq_n_f64(*(float64x2_t *)v830, -v801.f64[1]));
  v612 = (int8x16_t)vaddq_f64(vmulq_n_f64(v278, -*(double *)v270.i64), (float64x2_t)vextq_s8(v270, v304, 8uLL));
  v604 = (int8x16_t)vaddq_f64(vmulq_n_f64(v279, -*(double *)v270.i64), (float64x2_t)vextq_s8(v304, v615, 8uLL));
  v608 = (int8x16_t)vaddq_f64(vmulq_n_f64(v280, -*(double *)v270.i64), (float64x2_t)vextq_s8(v615, v632, 8uLL));
  v305 = (int8x16_t)vaddq_f64(vmulq_n_f64(v281, -*(double *)v270.i64), (float64x2_t)vextq_s8(v632, v637, 8uLL));
  v306 = (int8x16_t)vaddq_f64(v302, (float64x2_t)vextq_s8(v637, v648, 8uLL));
  v649 = (int8x16_t)vaddq_f64(vmulq_f64(v301, v283), (float64x2_t)vzip2q_s64((int64x2_t)v648, (int64x2_t)0));
  *(int8x16_t *)&v816[120] = v713;
  *(int8x16_t *)&v816[136] = v685;
  *(int8x16_t *)&v816[88] = v702;
  *(int8x16_t *)&v816[104] = v697;
  *(int8x16_t *)&v816[56] = v277;
  *(int8x16_t *)&v816[72] = v691;
  *(int8x16_t *)&v816[24] = v628;
  *(int8x16_t *)&v816[40] = v623;
  *(int8x16_t *)&v816[8] = v588;
  *(_QWORD *)&v816[152] = v679.i64[0];
  v307 = (float64x2_t)vextq_s8(v628, v623, 8uLL);
  v308 = (float64x2_t)vextq_s8(v623, v277, 8uLL);
  v309 = (float64x2_t)vextq_s8(v277, v691, 8uLL);
  v310 = (float64x2_t)vextq_s8(v691, v702, 8uLL);
  v311 = (float64x2_t)vextq_s8(v702, v697, 8uLL);
  v312 = (float64x2_t)vextq_s8(v697, v713, 8uLL);
  v313 = (float64x2_t)vextq_s8(v713, v685, 8uLL);
  v314 = (float64x2_t)vextq_s8(v685, v679, 8uLL);
  *(_QWORD *)&v808.f64[1] = v719.i64[0];
  v315 = (float64x2_t)vextq_s8(v588, v628, 8uLL);
  v714 = (int8x16_t)vaddq_f64(vmulq_n_f64(v315, -*(double *)v286.i64), (float64x2_t)vextq_s8(v719, v708, 8uLL));
  v709 = (int8x16_t)vaddq_f64(vmulq_n_f64(v307, -*(double *)v286.i64), (float64x2_t)vextq_s8(v708, v285, 8uLL));
  v316 = v308;
  v703 = (int8x16_t)vaddq_f64(vmulq_n_f64(v308, -*(double *)v286.i64), (float64x2_t)vextq_s8(v285, v286, 8uLL));
  v698 = (int8x16_t)vaddq_f64(vmulq_n_f64(v309, -*(double *)v286.i64), (float64x2_t)vextq_s8(v286, v287, 8uLL));
  v720 = (int8x16_t)vaddq_f64(vmulq_n_f64(v310, -*(double *)v286.i64), (float64x2_t)vextq_s8(v287, v288, 8uLL));
  v692 = (int8x16_t)vaddq_f64(vmulq_n_f64(v311, -*(double *)v286.i64), (float64x2_t)vextq_s8(v288, v290, 8uLL));
  v686 = (int8x16_t)vaddq_f64(vmulq_n_f64(v312, -*(double *)v286.i64), (float64x2_t)vextq_s8(v290, v291, 8uLL));
  v680 = (int8x16_t)vaddq_f64(vmulq_n_f64(v313, -*(double *)v286.i64), (float64x2_t)vextq_s8(v291, v292, 8uLL));
  v646 = (int8x16_t)vaddq_f64(vmulq_n_f64(v314, -*(double *)v286.i64), (float64x2_t)vextq_s8(v292, v645, 8uLL));
  *(_QWORD *)&v806.f64[1] = v672.i64[0];
  v317 = (float64x2_t)vextq_s8(v300, v594, 8uLL);
  v318 = (float64x2_t)vextq_s8(v299, v300, 8uLL);
  v319 = (float64x2_t)vextq_s8(v298, v299, 8uLL);
  v320 = (float64x2_t)vextq_s8(v296, v298, 8uLL);
  v321 = (float64x2_t)vextq_s8(v634, v296, 8uLL);
  v322 = (float64x2_t)vextq_s8(v294, v634, 8uLL);
  v323 = (float64x2_t)vextq_s8(v653, v294, 8uLL);
  *(double *)v294.i64 = -*(double *)v294.i64;
  v673 = (int8x16_t)vaddq_f64(vmulq_n_f64(v315, *(double *)v294.i64), (float64x2_t)vextq_s8(v672, v665, 8uLL));
  v324 = (int8x16_t)vaddq_f64(vmulq_n_f64(v307, *(double *)v294.i64), (float64x2_t)vextq_s8(v665, v653, 8uLL));
  v325 = v316;
  v326 = (int8x16_t)vaddq_f64(vmulq_n_f64(v316, *(double *)v294.i64), v323);
  v327 = v309;
  v328 = (int8x16_t)vaddq_f64(vmulq_n_f64(v309, *(double *)v294.i64), v322);
  v329 = v310;
  v330 = (int8x16_t)vaddq_f64(vmulq_n_f64(v310, *(double *)v294.i64), v321);
  v331 = (int8x16_t)vaddq_f64(vmulq_n_f64(v311, *(double *)v294.i64), v320);
  v332 = (int8x16_t)vaddq_f64(vmulq_n_f64(v312, *(double *)v294.i64), v319);
  v333 = (int8x16_t)vaddq_f64(vmulq_n_f64(v313, *(double *)v294.i64), v318);
  v334 = (int8x16_t)vaddq_f64(vmulq_n_f64(v314, *(double *)v294.i64), v317);
  *(_QWORD *)&v797.f64[1] = v659.i64[0];
  v654 = (float64x2_t)vextq_s8(v306, v649, 8uLL);
  v335 = (float64x2_t)vextq_s8(v303, v612, 8uLL);
  v336 = (float64x2_t)vextq_s8(v619, v303, 8uLL);
  *(double *)v303.i64 = -*(double *)v303.i64;
  v337 = vmulq_n_f64(v314, *(double *)v303.i64);
  v338 = vmulq_n_f64(v313, *(double *)v303.i64);
  v339 = vmulq_n_f64(v311, *(double *)v303.i64);
  v340 = vmulq_n_f64(v329, *(double *)v303.i64);
  v666 = (int8x16_t)vaddq_f64(vmulq_n_f64(v315, *(double *)v303.i64), (float64x2_t)vextq_s8(v659, v641, 8uLL));
  v341 = vaddq_f64(vmulq_n_f64(v307, *(double *)v303.i64), (float64x2_t)vextq_s8(v641, v619, 8uLL));
  v660 = (int8x16_t)v341;
  v342 = (int8x16_t)vaddq_f64(vmulq_n_f64(v325, *(double *)v303.i64), v336);
  v343 = (int8x16_t)vaddq_f64(vmulq_n_f64(v327, *(double *)v303.i64), v335);
  v344 = (int8x16_t)vaddq_f64(v340, (float64x2_t)vextq_s8(v612, v604, 8uLL));
  *(int8x16_t *)v815 = v680;
  *(int8x16_t *)&v815[16] = v646;
  *(int8x16_t *)v814 = v692;
  *(int8x16_t *)&v814[16] = v686;
  v812 = (float64x2_t)v698;
  v813 = (float64x2_t)v720;
  v810 = (float64x2_t)v709;
  v811 = (float64x2_t)v703;
  v809 = (float64x2_t)v714;
  *(_QWORD *)v807 = v673.i64[0];
  v345 = (int8x16_t)vaddq_f64(v339, (float64x2_t)vextq_s8(v604, v608, 8uLL));
  v346 = (int8x16_t)vaddq_f64(vmulq_n_f64(v312, *(double *)v303.i64), (float64x2_t)vextq_s8(v608, v305, 8uLL));
  v347 = (int8x16_t)vaddq_f64(v338, (float64x2_t)vextq_s8(v305, v306, 8uLL));
  v348 = (int8x16_t)vaddq_f64(v337, v654);
  *(_QWORD *)&v798.f64[0] = v666.i64[0];
  v341.f64[0] = -*(double *)v326.i64;
  v642 = (float64x2_t)vextq_s8(v332, v333, 8uLL);
  v638 = (float64x2_t)vextq_s8(v331, v332, 8uLL);
  v635 = (float64x2_t)vextq_s8(v330, v331, 8uLL);
  v349 = (float64x2_t)vextq_s8(v328, v330, 8uLL);
  v350 = (float64x2_t)vextq_s8(v326, v328, 8uLL);
  v351 = (float64x2_t)vextq_s8(v324, v326, 8uLL);
  v352 = (float64x2_t)vextq_s8(v673, v324, 8uLL);
  v353 = (float64x2_t)vextq_s8(v333, v334, 8uLL);
  v354 = (float64x2_t)vzip2q_s64((int64x2_t)v334, (int64x2_t)0);
  v650 = (float64x2_t)vextq_s8(v714, v709, 8uLL);
  v355 = (float64x2_t)vextq_s8(v709, v703, 8uLL);
  v356 = (float64x2_t)vextq_s8(v703, v698, 8uLL);
  v357 = (float64x2_t)vextq_s8(v698, v720, 8uLL);
  v358 = (float64x2_t)vextq_s8(v720, v692, 8uLL);
  v359 = (float64x2_t)vextq_s8(v692, v686, 8uLL);
  v360 = (float64x2_t)vextq_s8(v686, v680, 8uLL);
  v361 = (float64x2_t)vextq_s8(v680, v646, 8uLL);
  v362 = (float64x2_t)vzip2q_s64((int64x2_t)v646, (int64x2_t)0);
  v363 = vaddq_f64(vmulq_n_f64(v650, -*(double *)v326.i64), v352);
  v364 = (int8x16_t)vaddq_f64(vmulq_n_f64(v355, -*(double *)v326.i64), v351);
  v365 = (int8x16_t)vaddq_f64(vmulq_n_f64(v356, -*(double *)v326.i64), v350);
  v655 = vaddq_f64(vmulq_n_f64(v357, -*(double *)v326.i64), v349);
  v674 = vaddq_f64(vmulq_n_f64(v358, -*(double *)v326.i64), v635);
  v715 = (int8x16_t)vaddq_f64(vmulq_n_f64(v359, -*(double *)v326.i64), v638);
  v366 = vmulq_n_f64(v360, -*(double *)v326.i64);
  v367 = vmulq_f64(v341, v362);
  v368 = vaddq_f64(v366, v642);
  v369 = vaddq_f64(vmulq_n_f64(v361, -*(double *)v326.i64), v353);
  v370 = (int8x16_t)vaddq_f64(v367, v354);
  *(float64x2_t *)&v807[120] = v369;
  *(int8x16_t *)&v807[24] = v364;
  *(int8x16_t *)&v807[40] = v365;
  *(float64x2_t *)&v807[8] = v363;
  v371 = (int8x16_t)v363;
  *(_QWORD *)&v807[136] = v370.i64[0];
  v366.f64[0] = -*(double *)v342.i64;
  v372 = (float64x2_t)vextq_s8(v346, v347, 8uLL);
  v373 = (float64x2_t)vextq_s8(v345, v346, 8uLL);
  v374 = vmulq_f64(v366, v362);
  v375 = (int8x16_t)vaddq_f64(vmulq_n_f64(v650, -*(double *)v342.i64), (float64x2_t)vextq_s8(v666, v660, 8uLL));
  v376 = (int8x16_t)vaddq_f64(vmulq_n_f64(v355, -*(double *)v342.i64), (float64x2_t)vextq_s8(v660, v342, 8uLL));
  v377 = (int8x16_t)vaddq_f64(vmulq_n_f64(v356, -*(double *)v342.i64), (float64x2_t)vextq_s8(v342, v343, 8uLL));
  v378 = (int8x16_t)vaddq_f64(vmulq_n_f64(v357, -*(double *)v342.i64), (float64x2_t)vextq_s8(v343, v344, 8uLL));
  v379 = (int8x16_t)vaddq_f64(vmulq_n_f64(v358, -*(double *)v342.i64), (float64x2_t)vextq_s8(v344, v345, 8uLL));
  v380 = (int8x16_t)vaddq_f64(vmulq_n_f64(v359, -*(double *)v342.i64), v373);
  v381 = (int8x16_t)vaddq_f64(vmulq_n_f64(v360, -*(double *)v342.i64), v372);
  v382 = (int8x16_t)vaddq_f64(vmulq_n_f64(v361, -*(double *)v342.i64), (float64x2_t)vextq_s8(v347, v348, 8uLL));
  v383 = (int8x16_t)vaddq_f64(v374, (float64x2_t)vzip2q_s64((int64x2_t)v348, (int64x2_t)0));
  *(_QWORD *)&v798.f64[1] = v375.i64[0];
  v374.f64[0] = -*(double *)v376.i64;
  v384 = (float64x2_t)vextq_s8(v380, v381, 8uLL);
  v385 = (float64x2_t)vextq_s8(v379, v380, 8uLL);
  v386 = (float64x2_t)vextq_s8(v378, v379, 8uLL);
  v387 = (float64x2_t)vextq_s8(v377, v378, 8uLL);
  v388 = (float64x2_t)vextq_s8(v376, v377, 8uLL);
  v389 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8(v371, v364, 8uLL), -*(double *)v376.i64), (float64x2_t)vextq_s8(v375, v376, 8uLL));
  v390 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8(v364, v365, 8uLL), v374.f64[0]), v388);
  v391 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v655, (int8x16_t)v674, 8uLL), v374.f64[0]), v386);
  v392 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v674, v715, 8uLL), v374.f64[0]), v385);
  v393 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8(v715, (int8x16_t)v368, 8uLL), v374.f64[0]), v384);
  v394 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v368, (int8x16_t)v369, 8uLL), v374.f64[0]), (float64x2_t)vextq_s8(v381, v382, 8uLL));
  v395 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v369, v370, 8uLL), v374.f64[0]), (float64x2_t)vextq_s8(v382, v383, 8uLL));
  *(float64x2_t *)v805 = v394;
  v801 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8(v365, (int8x16_t)v655, 8uLL), v374.f64[0]), v387);
  v802 = v391;
  v799 = v389;
  v800 = v390;
  *(double *)v343.i64 = v394.f64[0] - v369.f64[0];
  v387.f64[0] = v395.f64[0] - *(double *)v370.i64;
  *(_QWORD *)&v394.f64[0] = v720.i64[1];
  v369.f64[0] = *(float64_t *)&v816[96];
  *(double *)v365.i64 = *(double *)v720.i64 - *(double *)&v816[88];
  v396 = vsubq_f64(v394, v369);
  v347.i64[0] = v692.i64[0];
  *(_QWORD *)&v390.f64[0] = v686.i64[1];
  v367.f64[0] = *(double *)v680.i64 - *(double *)&v816[136];
  v397 = vsubq_f64(*(float64x2_t *)&v815[8], *(float64x2_t *)&v816[144]);
  v372.f64[0] = v393.f64[0];
  v372.f64[1] = v392.f64[1];
  v357.f64[0] = vmuld_lane_f64(*(double *)v720.i64 - *(double *)&v816[88], v368, 1);
  v360.f64[0] = vmuld_lane_f64(*(double *)v692.i64, v368, 1);
  v385.f64[0] = v368.f64[0];
  *(_QWORD *)&v385.f64[1] = v715.i64[1];
  v398 = vsubq_f64(v372, v385);
  *(double *)v370.i64 = vmuld_lane_f64(*(double *)v680.i64 - *(double *)&v816[136], v398, 1)
                      - *(double *)&v816[128] * v398.f64[0]
                      - vmuld_n_f64(*(double *)v715.i64, v397.f64[0]);
  v399 = vmulq_f64(v398, v397);
  v399.f64[0] = vmuld_lane_f64(*(double *)v680.i64 - *(double *)&v816[136], v393, 1)
              + v399.f64[0]
              + v399.f64[1]
              - *(double *)&v646.i64[1] * *(double *)v715.i64;
  v384.f64[0] = *(double *)&v816[128] * *(double *)v715.i64;
  *(double *)&v370.i64[1] = (*(double *)v680.i64 - *(double *)&v816[136]) * v398.f64[0]
                          - vmuld_lane_f64(*(double *)&v816[128], v393, 1)
                          + vmuld_lane_f64(v397.f64[0], v398, 1)
                          - vmuld_lane_f64(*(double *)v715.i64, v397, 1);
  v721 = (float64x2_t)v370;
  v399.f64[1] = vmuld_lane_f64(*(double *)&v646.i64[1], v398, 1)
              + vmuld_lane_f64(v397.f64[0], v393, 1)
              + vmuld_lane_f64(v398.f64[0], v397, 1);
  v704 = v399;
  v369.f64[0] = vmuld_lane_f64(v393.f64[1], v397, 1) + *(double *)&v646.i64[1] * v398.f64[0];
  v384.f64[1] = -(*(double *)v715.i64 * (*(double *)v680.i64 - *(double *)&v816[136]))
              - vmuld_lane_f64(*(double *)&v816[128], v398, 1);
  v369.f64[1] = vmuld_lane_f64(*(double *)&v646.i64[1], v393, 1);
  v693 = v369;
  *(_QWORD *)&v730[40] = vmuld_lane_f64(*(double *)&v686.i64[1], v395, 1);
  v369.f64[0] = -(*(double *)&v816[80] * *(double *)v343.i64) - v357.f64[0];
  v358.f64[0] = *(double *)v365.i64 * *(double *)v343.i64
              - vmuld_lane_f64(v396.f64[0], v368, 1)
              - vmuld_lane_f64(*(double *)&v816[80], v396, 1);
  v389.f64[0] = vmuld_lane_f64(*(double *)v365.i64, v396, 1)
              + *(double *)v343.i64 * v396.f64[0]
              - v360.f64[0]
              - *(double *)&v816[80] * v387.f64[0];
  *(double *)v375.i64 = *(double *)v365.i64 * v387.f64[0]
                      + *(double *)v814 * *(double *)v343.i64
                      + vmuld_lane_f64(v396.f64[0], v396, 1)
                      - vmuld_lane_f64(*(double *)&v816[80], v395, 1);
  v372.f64[0] = vmuld_lane_f64(*(double *)v365.i64, v395, 1)
              + vmuld_lane_f64(*(double *)v814, v396, 1)
              + v387.f64[0] * v396.f64[0];
  v383.i64[0] = *(_QWORD *)&v387.f64[0];
  v387.f64[0] = vmuld_lane_f64(v396.f64[0], v395, 1) + *(double *)v814 * v387.f64[0];
  v357.f64[0] = vmuld_lane_f64(*(double *)&v816[80], v368, 1);
  *(float64x2_t *)&v807[72] = v674;
  v358.f64[1] = v389.f64[0];
  v375.i64[1] = *(_QWORD *)&v372.f64[0];
  v687 = (float64x2_t)v375;
  v357.f64[1] = v369.f64[0];
  v387.f64[1] = vmuld_lane_f64(*(double *)v347.i64, v395, 1);
  v681 = v387;
  v400 = vsubq_f64(v391, v674);
  *(double *)v370.i64 = -(v655.f64[1] * v367.f64[0]) - *(double *)&v816[128] * v400.f64[0];
  v372.f64[0] = v367.f64[0] * v400.f64[0]
              - vmuld_lane_f64(*(double *)&v816[128], v400, 1)
              - vmuld_lane_f64(v397.f64[0], v655, 1);
  v389.f64[0] = vmuld_lane_f64(v367.f64[0], v400, 1)
              - *(double *)&v816[128] * v392.f64[0]
              + vmulq_f64(v400, v397).f64[0]
              - vmuld_lane_f64(v655.f64[1], v397, 1);
  v387.f64[0] = v367.f64[0] * v392.f64[0] + vmuld_lane_f64(v397.f64[0], v400, 1) + vmuld_lane_f64(v400.f64[0], v397, 1);
  v401 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v392.f64[0], 0);
  v401.f64[0] = vmuld_n_f64(v392.f64[0], v397.f64[0]);
  v402 = vmulq_n_f64(v397, v392.f64[0]);
  v397.f64[0] = vmuld_lane_f64(v400.f64[1], v397, 1);
  v674.f64[0] = v387.f64[0] - vmuld_lane_f64(*(double *)&v646.i64[1], v655, 1);
  *(_QWORD *)&v387.f64[0] = *(_OWORD *)&vaddq_f64(v401, v397);
  v387.f64[1] = v402.f64[1];
  v667 = vaddq_f64(vmulq_n_f64(v400, *(double *)&v646.i64[1]), v387);
  v403 = vsubq_f64(*(float64x2_t *)&v814[8], *(float64x2_t *)&v816[112]);
  v729.f64[0] = vmuld_lane_f64(*(double *)&v816[104], v368, 1);
  v729.f64[1] = -(*(double *)&v816[104] * *(double *)v343.i64) - vmuld_lane_f64(v403.f64[0], v368, 1);
  *(float64x2_t *)&v807[104] = v368;
  *(double *)v730 = *(double *)v343.i64 * v403.f64[0]
                  - vmuld_lane_f64(v368.f64[1], v403, 1)
                  - vmuld_lane_f64(*(double *)&v816[104], v396, 1);
  *(double *)&v730[8] = vmuld_lane_f64(v403.f64[0], v396, 1)
                      + vmuld_lane_f64(*(double *)v343.i64, v403, 1)
                      - vmuld_lane_f64(v390.f64[0], v368, 1)
                      - *(double *)&v816[104] * *(double *)v383.i64;
  v375.i64[0] = v383.i64[0];
  *(double *)v343.i64 = *(double *)v383.i64 * v403.f64[0]
                      + v390.f64[0] * *(double *)v343.i64
                      + vmuld_lane_f64(v403.f64[1], v396, 1)
                      - vmuld_lane_f64(*(double *)&v816[104], v395, 1);
  v404 = v729;
  v405 = *(float64x2_t *)v730;
  v729.f64[0] = vmuld_lane_f64(*(double *)&v816[128], v655, 1);
  *(_QWORD *)&v729.f64[1] = v370.i64[0];
  *(float64_t *)v730 = v372.f64[0];
  *(float64_t *)&v730[8] = v389.f64[0];
  v406 = vsubq_f64(v358, *(float64x2_t *)v730);
  v389.f64[0] = vmulq_f64(v403, v400).f64[0]
              - vmuld_lane_f64(v655.f64[1], v403, 1)
              - vmuld_lane_f64(*(double *)&v816[104], v400, 1);
  *(float64x2_t *)&v807[56] = v655;
  v372.f64[0] = vmuld_lane_f64(*(double *)&v816[104], v655, 1);
  v389.f64[1] = vmuld_lane_f64(v403.f64[0], v400, 1)
              + vmuld_lane_f64(v400.f64[0], v403, 1)
              - vmuld_lane_f64(v390.f64[0], v655, 1)
              - *(double *)&v816[104] * v392.f64[0];
  v372.f64[1] = -*(double *)&v816[104] * v400.f64[0] - vmuld_lane_f64(v403.f64[0], v655, 1);
  v407 = vsubq_f64(v357, v729);
  v729.f64[0] = *(double *)&v816[80] * *(double *)v715.i64;
  v729.f64[1] = vmuld_lane_f64(-*(double *)&v816[80], v398, 1) - *(double *)v365.i64 * *(double *)v715.i64;
  *(int8x16_t *)&v807[88] = v715;
  *(double *)v730 = vmuld_lane_f64(*(double *)v365.i64, v398, 1)
                  - vmuld_n_f64(*(double *)v715.i64, v396.f64[0])
                  - *(double *)&v816[80] * v398.f64[0];
  *(double *)&v730[8] = *(double *)v365.i64 * v398.f64[0]
                      + vmuld_lane_f64(v396.f64[0], v398, 1)
                      - *(double *)v347.i64 * *(double *)v715.i64
                      - vmuld_lane_f64(*(double *)&v816[80], v393, 1);
  v408 = vsubq_f64(v389, *(float64x2_t *)v730);
  v409 = vsubq_f64(v372, v729);
  v410 = vsubq_f64(*(float64x2_t *)&v823[8], v831);
  v411 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v410.f64[0], 0);
  v411.f64[0] = *(double *)&v823[24] * v407.f64[0];
  v389.f64[1] = v407.f64[1];
  v389.f64[0] = vmuld_lane_f64(v410.f64[1], v407, 1);
  *(_QWORD *)&v402.f64[0] = *(_OWORD *)&vaddq_f64(v411, v389);
  v402.f64[1] = vmulq_n_f64(v407, *(double *)&v410).f64[1];
  v412 = vsubq_f64(vaddq_f64(vmulq_f64(v410, (float64x2_t)vzip1q_s64((int64x2_t)v406, (int64x2_t)v407)), v402), vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v406, (int8x16_t)v406, 8uLL), *(double *)&v830[24]));
  *(int8x16_t *)v730 = vextq_s8((int8x16_t)v412, (int8x16_t)v412, 8uLL);
  v413 = vsubq_f64(*(float64x2_t *)&v824[8], *(float64x2_t *)&v832[16]);
  v414 = *(float64x2_t *)v730;
  *(_QWORD *)&v730[16] = v343.i64[0];
  *(float64x2_t *)&v805[16] = v395;
  *(double *)&v730[24] = vmuld_lane_f64(v403.f64[0], v395, 1)
                       + vmuld_lane_f64(v390.f64[0], v396, 1)
                       + vmuld_lane_f64(*(double *)v375.i64, v403, 1);
  *(double *)&v730[32] = vmuld_lane_f64(v395.f64[1], v403, 1) + v390.f64[0] * *(double *)v375.i64;
  v415 = vsubq_f64(v704, *(float64x2_t *)&v730[16]);
  v416 = vsubq_f64(v721, v405);
  v417 = vsubq_f64(v693, *(float64x2_t *)&v730[32]);
  v418 = vsubq_f64(v384, v404);
  *(float64x2_t *)&v730[24] = v667;
  *(float64_t *)&v730[16] = v674.f64[0];
  *(double *)&v730[40] = *(double *)&v646.i64[1] * v392.f64[0];
  v419 = vsubq_f64(v687, *(float64x2_t *)&v730[16]);
  v372.f64[0] = vmuld_lane_f64(*(double *)v365.i64, v393, 1);
  v420 = vsubq_f64(v681, *(float64x2_t *)&v730[32]);
  v412.f64[0] = v390.f64[0] * v400.f64[0] + vmuld_lane_f64(v403.f64[1], v400, 1);
  *(double *)v365.i64 = vmuld_lane_f64(v396.f64[0], v393, 1);
  v803 = v392;
  v804 = v393;
  v412.f64[1] = vmuld_lane_f64(v390.f64[0], v400, 1);
  v421 = vaddq_f64(vmulq_n_f64(v403, v392.f64[0]), v412);
  v392.f64[0] = v390.f64[0] * v392.f64[0];
  v422 = vmulq_f64(v396, v398);
  *(double *)&v730[16] = v372.f64[0] + vmuld_lane_f64(*(double *)v347.i64, v398, 1) + v422.f64[0];
  *(double *)&v730[24] = *(double *)v365.i64 + *(double *)v347.i64 * v398.f64[0];
  v422.f64[0] = vmuld_lane_f64(*(double *)v347.i64, v393, 1);
  v423 = vsubq_f64(v421, *(float64x2_t *)&v730[16]);
  v424 = (int8x16_t)vsubq_f64(v392, v422);
  v425 = vsubq_f64(v822, *(float64x2_t *)&v830[8]);
  v426 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v425.f64[0], 0);
  v426.f64[0] = *(double *)v823 * v418.f64[0];
  v392.f64[1] = v418.f64[1];
  v392.f64[0] = vmuld_lane_f64(v425.f64[1], v418, 1);
  v726[0].f64[0] = -*(double *)v830 * v418.f64[0];
  v726[0].f64[1] = vmuld_n_f64(v425.f64[0], v418.f64[0]) - vmuld_lane_f64(*(double *)v830, v418, 1);
  *(_QWORD *)&v392.f64[0] = *(_OWORD *)&vaddq_f64(v426, v392);
  v392.f64[1] = vmulq_n_f64(v418, *(double *)&v425).f64[1];
  v427 = vaddq_f64(vmulq_f64(v425, (float64x2_t)vzip1q_s64((int64x2_t)v416, (int64x2_t)v418)), v392);
  v727.f64[0] = vmuld_lane_f64(v425.f64[0], v417, 1)
              + vmuld_lane_f64(*(double *)v823, v415, 1)
              + vmuld_lane_f64(v417.f64[0], v425, 1);
  v727.f64[1] = *(double *)v823 * v417.f64[0] + vmuld_lane_f64(v425.f64[1], v417, 1);
  v729.f64[0] = -*(double *)&v830[24] * v407.f64[0];
  v729.f64[1] = vmuld_n_f64(v410.f64[0], v407.f64[0]) - vmuld_lane_f64(*(double *)&v830[24], v407, 1);
  v716 = v407;
  v722 = v406;
  v428 = (float64x2_t)vextq_s8((int8x16_t)v406, (int8x16_t)v419, 8uLL);
  v429 = v729;
  *(float64x2_t *)&v730[16] = vsubq_f64(vaddq_f64(vmulq_n_f64(v428, v410.f64[0]), vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v407, (int8x16_t)v406, 8uLL), *(double *)&v823[24]), vmulq_laneq_f64(v406, v410, 1))), vmulq_n_f64(v419, *(double *)&v830[24]));
  v675 = v419;
  *(float64x2_t *)&v730[32] = vsubq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v419, (int8x16_t)v420, 8uLL), v410.f64[0]), vaddq_f64(vmulq_n_f64(v428, *(double *)&v823[24]), vmulq_laneq_f64(v419, v410, 1))), vmulq_n_f64(v420, *(double *)&v830[24]));
  v731.f64[0] = vmuld_lane_f64(v410.f64[0], v420, 1)
              + vmuld_lane_f64(*(double *)&v823[24], v419, 1)
              + vmuld_lane_f64(v420.f64[0], v410, 1);
  v668 = v420;
  v731.f64[1] = *(double *)&v823[24] * v420.f64[0] + vmuld_lane_f64(v410.f64[1], v420, 1);
  v420.f64[0] = vmuld_lane_f64(*(double *)&v823[24], v420, 1);
  v729.f64[0] = -*(double *)v832 * v409.f64[0];
  v729.f64[1] = (*(double *)v824 - *(double *)&v832[8]) * v409.f64[0] - vmuld_lane_f64(*(double *)v832, v409, 1);
  v430 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v413.f64[0], 0);
  v430.f64[0] = *(double *)&v589.i64[1] * v409.f64[0];
  v392.f64[1] = v409.f64[1];
  v392.f64[0] = vmuld_lane_f64(v413.f64[1], v409, 1);
  v431 = v731;
  v432 = *(float64x2_t *)&v730[32];
  *(_QWORD *)&v392.f64[0] = *(_OWORD *)&vaddq_f64(v430, v392);
  v392.f64[1] = vmulq_n_f64(v409, *(double *)&v413).f64[1];
  v433 = *(float64x2_t *)&v730[16];
  *(double *)v730 = vmuld_n_f64(v413.f64[0], v409.f64[0])
                  + vmuld_lane_f64(*(double *)v824 - *(double *)&v832[8], v409, 1)
                  - *(double *)v832 * v408.f64[0];
  v434 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL), *(double *)v824 - *(double *)&v832[8]), vaddq_f64(vmulq_f64(v413, (float64x2_t)vzip1q_s64((int64x2_t)v408, (int64x2_t)v409)), v392));
  v392.f64[0] = v423.f64[0];
  v392.f64[1] = v408.f64[1];
  v435 = (int8x16_t)vsubq_f64(v434, vmulq_n_f64(v392, *(double *)v832));
  *(int8x16_t *)&v730[8] = vextq_s8(v435, v435, 8uLL);
  v705 = v409;
  *(float64x2_t *)&v730[24] = vsubq_f64(vaddq_f64(vmulq_n_f64(v423, *(double *)v824 - *(double *)&v832[8]), vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v423, 8uLL), v413.f64[0]), vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v409, (int8x16_t)v408, 8uLL), *(double *)&v589.i64[1]), vmulq_laneq_f64(v408, v413, 1)))), vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v423, v424, 8uLL), *(double *)v832));
  v710 = v408;
  *(double *)&v730[40] = (*(double *)v824 - *(double *)&v832[8]) * *(double *)v424.i64
                       + vmuld_lane_f64(v413.f64[0], v423, 1)
                       + vmuld_lane_f64(*(double *)&v589.i64[1], v408, 1)
                       + vmuld_lane_f64(v423.f64[0], v413, 1);
  v731.f64[0] = vmuld_n_f64(v413.f64[0], *(double *)v424.i64)
              + *(double *)&v589.i64[1] * v423.f64[0]
              + vmuld_lane_f64(v413.f64[1], v423, 1);
  v624 = v423;
  v661 = *(double *)v424.i64;
  v731.f64[1] = vmuld_lane_f64(*(double *)&v589.i64[1], v423, 1) + vmuld_lane_f64(*(double *)v424.i64, v413, 1);
  v732.f64[0] = *(double *)&v589.i64[1] * *(double *)v424.i64;
  v436 = (int8x16_t)vsubq_f64(v427, vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v416, (int8x16_t)v416, 8uLL), *(double *)v830));
  v682 = v418;
  v694 = v416;
  v437 = (float64x2_t)vextq_s8((int8x16_t)v416, (int8x16_t)v415, 8uLL);
  v438 = vsubq_f64(vaddq_f64(vmulq_n_f64(v437, v425.f64[0]), vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v418, (int8x16_t)v416, 8uLL), *(double *)v823), vmulq_laneq_f64(v416, v425, 1))), vmulq_n_f64(v415, *(double *)v830));
  v699 = v415;
  v439 = vaddq_f64(vaddq_f64(vsubq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v415, (int8x16_t)v417, 8uLL), v425.f64[0]), vaddq_f64(vmulq_n_f64(v437, *(double *)v823), vmulq_laneq_f64(v415, v425, 1))), vmulq_n_f64(v417, *(double *)v830)), v432), *(float64x2_t *)&v730[32]);
  v727 = vaddq_f64(vaddq_f64(v727, v431), v731);
  v726[3] = v439;
  v726[2] = vaddq_f64(vaddq_f64(v438, v433), *(float64x2_t *)&v730[16]);
  v726[1] = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8(v436, v436, 8uLL), v414), *(float64x2_t *)v730);
  v726[0] = vaddq_f64(vaddq_f64(v726[0], v429), v729);
  v688 = v417;
  v439.f64[0] = vmuld_lane_f64(*(double *)v823, v417, 1);
  v440 = vaddq_f64(v439, v420);
  v420.f64[0] = *(double *)&v589.i64[1] * *(double *)v424.i64;
  v728 = *(_OWORD *)&vaddq_f64(v440, v420);
  __p = operator new(0x50uLL);
  v724 = __p;
  v725 = (char *)__p + 80;
  v441 = sub_20EB50F78((uint64_t)&__p, v726);
  v445 = __p;
  if (v441)
  {
    v446 = v724 - (_BYTE *)__p;
    v447 = a1;
    v448 = v722.f64[0];
    v449 = v710.f64[0];
    v450 = v705.f64[0];
    v451 = v415.f64[0];
    v452 = v694.f64[0];
    v453 = v688.f64[0];
    if (v724 != __p)
    {
      v442.f64[0] = *(float64_t *)&v749[72];
      v656 = v442;
      v456 = *(float64x2_t *)&v749[40];
      v455 = *(float64x2_t *)&v749[56];
      v458 = *(float64x2_t *)&v749[8];
      v457 = *(float64x2_t *)&v749[24];
      v443.f64[0] = *(float64_t *)v754;
      v462 = v753;
      v454 = v446 >> 3;
      v461 = v752;
      v460 = v751;
      v459 = v750;
      v444.f64[0] = *(float64_t *)&v755[48];
      *(_QWORD *)&v455.f64[1] = vextq_s8((int8x16_t)v455, (int8x16_t)v455, 8uLL).u64[0];
      *(_QWORD *)&v456.f64[1] = vextq_s8((int8x16_t)v456, (int8x16_t)v456, 8uLL).u64[0];
      v466 = *(float64x2_t *)&v755[16];
      v469 = *(float64x2_t *)&v755[32];
      v463 = *(float64x2_t *)&v754[8];
      v464 = *(float64x2_t *)v755;
      *(_QWORD *)&v457.f64[1] = vextq_s8((int8x16_t)v457, (int8x16_t)v457, 8uLL).u64[0];
      *(_QWORD *)&v458.f64[1] = vextq_s8((int8x16_t)v458, (int8x16_t)v458, 8uLL).u64[0];
      *(_QWORD *)&v459.f64[1] = vextq_s8((int8x16_t)v459, (int8x16_t)v459, 8uLL).u64[0];
      *(_QWORD *)&v460.f64[1] = vextq_s8((int8x16_t)v460, (int8x16_t)v460, 8uLL).u64[0];
      *(_QWORD *)&v461.f64[1] = vextq_s8((int8x16_t)v461, (int8x16_t)v461, 8uLL).u64[0];
      *(_QWORD *)&v462.f64[1] = vextq_s8((int8x16_t)v462, (int8x16_t)v462, 8uLL).u64[0];
      *(_QWORD *)&v463.f64[1] = vextq_s8((int8x16_t)v463, (int8x16_t)v463, 8uLL).u64[0];
      *(_QWORD *)&v464.f64[1] = vextq_s8((int8x16_t)v464, (int8x16_t)v464, 8uLL).u64[0];
      v472 = v758;
      v465 = v759;
      v470 = v756;
      v471 = v757;
      *(_QWORD *)&v466.f64[1] = vextq_s8((int8x16_t)v466, (int8x16_t)v466, 8uLL).u64[0];
      v467 = (float64x2_t)vextq_s8((int8x16_t)v465, (int8x16_t)v465, 8uLL);
      v468 = (float64x2_t)vextq_s8((int8x16_t)v469, (int8x16_t)v469, 8uLL);
      v469.f64[1] = v468.f64[0];
      *(_QWORD *)&v470.f64[1] = vextq_s8((int8x16_t)v470, (int8x16_t)v470, 8uLL).u64[0];
      *(_QWORD *)&v471.f64[1] = vextq_s8((int8x16_t)v471, (int8x16_t)v471, 8uLL).u64[0];
      *(_QWORD *)&v472.f64[1] = vextq_s8((int8x16_t)v472, (int8x16_t)v472, 8uLL).u64[0];
      if ((unint64_t)(v446 >> 3) <= 1)
        v454 = 1;
      v465.f64[1] = v467.f64[0];
      v473 = (double *)__p;
      v467.f64[0] = v760;
      do
      {
        v468.f64[0] = v661
                    + *v473
                    * (v624.f64[1]
                     + *v473
                     * (v624.f64[0] + *v473 * (v710.f64[1] + *v473 * (v449 + *v473 * (v705.f64[1] + v450 * *v473)))));
        v475.f64[1] = v682.f64[1];
        if (v468.f64[0] == 0.0)
          v468.f64[0] = 1.0;
        v475.f64[0] = (v688.f64[1]
                     + *v473
                     * (v453
                      + *v473
                      * (v699.f64[1]
                       + *v473
                       * (v451 + *v473 * (v694.f64[1] + *v473 * (v452 + *v473 * (v682.f64[1] + v682.f64[0] * *v473)))))))
                    / v468.f64[0];
        v474 = *v473;
        v468.f64[0] = (v668.f64[1]
                     + v474
                     * (v668.f64[0]
                      + v474
                      * (v675.f64[1]
                       + v474
                       * (v675.f64[0] + v474 * (v722.f64[1] + v474 * (v448 + v474 * (v716.f64[1] + v716.f64[0] * v474)))))))
                    / v468.f64[0];
        v476 = vmulq_n_f64(v455, v475.f64[0]);
        v477 = vmulq_n_f64(v456, v475.f64[0]);
        v478 = vmulq_n_f64(v457, v475.f64[0]);
        v479 = vmulq_n_f64(v458, v475.f64[0]);
        v480 = vmulq_f64(v656, v475);
        *(float64x2_t *)v730 = vmulq_n_f64(v460, v468.f64[0]);
        v729 = vmulq_n_f64(v459, v468.f64[0]);
        v481 = vaddq_f64(v479, v729);
        v482 = vmulq_n_f64(v461, v468.f64[0]);
        v483 = vaddq_f64(v478, *(float64x2_t *)v730);
        v484 = vmulq_n_f64(v462, v468.f64[0]);
        v485 = vmulq_f64(v443, v468);
        *(float64x2_t *)&v730[32] = v484;
        *(float64x2_t *)&v730[16] = v482;
        v731.f64[0] = v485.f64[0];
        v486 = vaddq_f64(v477, v482);
        v487 = vaddq_f64(v476, v484);
        v488 = vaddq_f64(v480, v485);
        v447[2] = v486;
        v447[3] = v487;
        *v447 = v481;
        v447[1] = v483;
        v447[4].f64[0] = v488.f64[0];
        v489 = *v473++;
        v480.f64[0] = v489;
        v490 = vmulq_n_f64(v469, v489);
        v491 = vaddq_f64(v490, v487);
        *(float64x2_t *)&v730[32] = v490;
        v492 = vmulq_n_f64(v463, v489);
        *(float64x2_t *)&v730[16] = vmulq_n_f64(v466, v489);
        v493 = vmulq_n_f64(v464, v489);
        v494 = vaddq_f64(v493, v483);
        *(float64x2_t *)v730 = v493;
        v453 = v688.f64[0];
        v729 = v492;
        v495 = vmulq_f64(v444, v480);
        v731.f64[0] = v495.f64[0];
        v496 = vaddq_f64(v495, v488);
        v497 = vaddq_f64(v472, vaddq_f64(*(float64x2_t *)&v730[16], v486));
        v452 = v694.f64[0];
        v447[2] = v497;
        v447[3] = vaddq_f64(v465, v491);
        v498 = vaddq_f64(v470, vaddq_f64(v492, v481));
        v451 = v699.f64[0];
        v499 = vaddq_f64(v471, v494);
        v448 = v722.f64[0];
        *v447 = v498;
        v447[1] = v499;
        v450 = v705.f64[0];
        v449 = v710.f64[0];
        v468 = vaddq_f64(v467, v496);
        v447[4].f64[0] = v468.f64[0];
        v447 = (float64x2_t *)((char *)v447 + 72);
        --v454;
      }
      while (v454);
    }
    *a2 = (unint64_t)v446 >> 3;
  }
  if (v445)
  {
    v724 = v445;
    operator delete(v445);
  }
  return v441;
}

void sub_20EB509C0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x640];
  if (STACK[0x640])
  {
    STACK[0x648] = (unint64_t)v2;
    operator delete(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EB509E8(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  uint64_t v40;
  float64x2_t *v41;
  float64x2_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  double *v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  double *v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double *v85;
  double v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  uint64_t v90;
  double v91;
  float64x2_t *v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  uint64_t v96;
  double *v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  float64x2_t *v102;
  uint64_t v103;
  float64x2_t v104;
  uint64_t v105;
  double *v106;

  if (!a2)
  {
    v60 = result + 8 * -a3;
    v5 = a3;
    v59 = -1;
    if (!a3)
      goto LABEL_82;
    goto LABEL_51;
  }
  v3 = 0;
  v4 = 0;
  v5 = a3;
  v6 = result + 8 * a3;
  v7 = a3 & 0xFFFFFFFC;
  v8 = result + 16;
  do
  {
    v9 = 8 * v3;
    v10 = (float64x2_t *)(v8 + v9);
    v11 = 8 * v4 * a3;
    v12 = result + v11;
    if (v4)
    {
      if (a3)
      {
        v13 = 0;
        v14 = 0;
        v15 = v6 + v11;
        v16 = result + v9;
        while (1)
        {
          v17 = 8 * v13;
          v18 = (float64x2_t *)(v8 + v17);
          if (a3 < 4)
            break;
          v20 = 0.0;
          v21 = a3 & 0xFFFFFFFC;
          v22 = (float64x2_t *)(v8 + v9);
          v23 = (float64x2_t *)(v8 + v17);
          do
          {
            v24 = vmulq_f64(v23[-1], v22[-1]);
            v25 = vmulq_f64(*v23, *v22);
            v20 = v20 + v24.f64[0] + v24.f64[1] + v25.f64[0] + v25.f64[1];
            v23 += 2;
            v22 += 2;
            v21 -= 4;
          }
          while (v21);
          v19 = a3 & 0xFFFFFFFC;
          if (v7 != a3)
            goto LABEL_14;
LABEL_16:
          if (a3 >= 4 && ((v33 = 8 * v14 * a3, v12 >= v6 + v33) || result + v33 >= v15))
          {
            v40 = a3 & 0xFFFFFFFC;
            v41 = (float64x2_t *)(v8 + v9);
            do
            {
              v42 = vsubq_f64(*v41, vmulq_n_f64(*v18, v20));
              v41[-1] = vsubq_f64(v41[-1], vmulq_n_f64(v18[-1], v20));
              *v41 = v42;
              v18 += 2;
              v41 += 2;
              v40 -= 4;
            }
            while (v40);
            v34 = a3 & 0xFFFFFFFC;
            if (v7 == a3)
              goto LABEL_8;
          }
          else
          {
            v34 = 0;
          }
          v35 = a3 - v34;
          v36 = 8 * v34;
          v37 = (double *)(v16 + 8 * v34);
          v38 = (double *)(result + v36 + v17);
          do
          {
            v39 = *v38++;
            *v37 = *v37 - v20 * v39;
            ++v37;
            --v35;
          }
          while (v35);
LABEL_8:
          ++v14;
          v13 += a3;
          if (v14 == v4)
            goto LABEL_27;
        }
        v19 = 0;
        v20 = 0.0;
LABEL_14:
        v26 = a3 - v19;
        v27 = 8 * v19;
        v28 = (double *)(v16 + 8 * v19);
        v29 = (double *)(result + v27 + v17);
        do
        {
          v30 = *v29++;
          v31 = v30;
          v32 = *v28++;
          v20 = v20 + v31 * v32;
          --v26;
        }
        while (v26);
        goto LABEL_16;
      }
LABEL_30:
      v45 = sqrt(0.0);
      if (v45 == 0.0)
        goto LABEL_3;
      goto LABEL_38;
    }
LABEL_27:
    if (!a3)
      goto LABEL_30;
    if (a3 < 4)
    {
      v43 = 0;
      v44 = 0.0;
LABEL_35:
      v50 = a3 - v43;
      v51 = (double *)(result + v9 + 8 * v43);
      do
      {
        v52 = *v51++;
        v44 = v44 + v52 * v52;
        --v50;
      }
      while (v50);
      goto LABEL_37;
    }
    v44 = 0.0;
    v46 = a3 & 0xFFFFFFFC;
    v47 = (float64x2_t *)(v8 + v9);
    do
    {
      v48 = vmulq_f64(v47[-1], v47[-1]);
      v49 = vmulq_f64(*v47, *v47);
      v44 = v44 + v48.f64[0] + v48.f64[1] + v49.f64[0] + v49.f64[1];
      v47 += 2;
      v46 -= 4;
    }
    while (v46);
    v43 = a3 & 0xFFFFFFFC;
    if (v7 != a3)
      goto LABEL_35;
LABEL_37:
    v45 = sqrt(v44);
    if (v45 == 0.0)
    {
LABEL_3:
      *(_QWORD *)(v12 + 8 * v4) = 0x3FF0000000000000;
      goto LABEL_4;
    }
LABEL_38:
    if (!a3)
      goto LABEL_4;
    v53 = 1.0 / v45;
    if (a3 < 4)
    {
      v54 = 0;
LABEL_44:
      v57 = a3 - v54;
      v58 = (double *)(result + v9 + 8 * v54);
      do
      {
        *v58 = v53 * *v58;
        ++v58;
        --v57;
      }
      while (v57);
      goto LABEL_4;
    }
    v55 = a3 & 0xFFFFFFFC;
    do
    {
      v56 = vmulq_n_f64(*v10, v53);
      v10[-1] = vmulq_n_f64(v10[-1], v53);
      *v10 = v56;
      v10 += 2;
      v55 -= 4;
    }
    while (v55);
    v54 = a3 & 0xFFFFFFFC;
    if (v7 != a3)
      goto LABEL_44;
LABEL_4:
    ++v4;
    v3 += a3;
  }
  while (v4 != a2);
  v59 = a2 - 1;
  v60 = result + 8 * (a2 - 1) * a3;
  if (a2 != 1)
  {
    if (!a3)
    {
LABEL_82:
      *(_QWORD *)(v60 + 8 * (a3 - 1)) = 0x3FF0000000000000;
      return result;
    }
LABEL_51:
    v61 = 0;
    v62 = 0;
    v63 = v5 & 0xFFFFFFFC;
    while (2)
    {
      v64 = 8 * v61;
      v65 = (float64x2_t *)(result + 16 + v64);
      if (v5 < 4)
      {
        v66 = 0;
        v67 = 0.0;
        goto LABEL_58;
      }
      v67 = 0.0;
      v68 = v5 & 0xFFFFFFFC;
      v69 = (float64x2_t *)(v60 + 16);
      v70 = (float64x2_t *)(result + 16 + v64);
      do
      {
        v71 = vmulq_f64(v70[-1], v69[-1]);
        v72 = vmulq_f64(*v70, *v69);
        v67 = v67 + v71.f64[0] + v71.f64[1] + v72.f64[0] + v72.f64[1];
        v70 += 2;
        v69 += 2;
        v68 -= 4;
      }
      while (v68);
      v66 = v5 & 0xFFFFFFFC;
      if (v5 != v63)
      {
LABEL_58:
        v73 = v5 - v66;
        v74 = 8 * v66;
        v75 = (double *)(v60 + 8 * v66);
        v76 = (double *)(result + v74 + v64);
        do
        {
          v77 = *v76++;
          v78 = v77;
          v79 = *v75++;
          v67 = v67 + v78 * v79;
          --v73;
        }
        while (v73);
      }
      if (v5 < 4 || (v80 = 8 * v62 * a3, v60 < result + 8 * v5 + v80) && result + v80 < v60 + 8 * v5)
      {
        v81 = 0;
        goto LABEL_64;
      }
      v87 = v5 & 0xFFFFFFFC;
      v88 = (float64x2_t *)(v60 + 16);
      do
      {
        v89 = vsubq_f64(*v88, vmulq_n_f64(*v65, v67));
        v88[-1] = vsubq_f64(v88[-1], vmulq_n_f64(v65[-1], v67));
        *v88 = v89;
        v65 += 2;
        v88 += 2;
        v87 -= 4;
      }
      while (v87);
      v81 = v5 & 0xFFFFFFFC;
      if (v5 != v63)
      {
LABEL_64:
        v82 = v5 - v81;
        v83 = 8 * v81;
        v84 = (double *)(v60 + 8 * v81);
        v85 = (double *)(result + v83 + v64);
        do
        {
          v86 = *v85++;
          *v84 = *v84 - v67 * v86;
          ++v84;
          --v82;
        }
        while (v82);
      }
      ++v62;
      v61 += a3;
      if (v62 == v59)
        break;
      continue;
    }
  }
  if (!a3)
    goto LABEL_82;
  if (v5 < 4)
  {
    v90 = 0;
    v91 = 0.0;
    goto LABEL_77;
  }
  v90 = v5 & 0xFFFFFFFC;
  v92 = (float64x2_t *)(v60 + 16);
  v91 = 0.0;
  v93 = v90;
  do
  {
    v94 = vmulq_f64(v92[-1], v92[-1]);
    v95 = vmulq_f64(*v92, *v92);
    v91 = v91 + v94.f64[0] + v94.f64[1] + v95.f64[0] + v95.f64[1];
    v92 += 2;
    v93 -= 4;
  }
  while (v93);
  if (v5 != v90)
  {
LABEL_77:
    v96 = v5 - v90;
    v97 = (double *)(v60 + 8 * v90);
    do
    {
      v98 = *v97++;
      v91 = v91 + v98 * v98;
      --v96;
    }
    while (v96);
  }
  v99 = sqrt(v91);
  if (v99 == 0.0)
    goto LABEL_82;
  v100 = 1.0 / v99;
  if (v5 < 4)
  {
    v101 = 0;
    goto LABEL_86;
  }
  v101 = v5 & 0xFFFFFFFC;
  v102 = (float64x2_t *)(v60 + 16);
  v103 = v101;
  do
  {
    v104 = vmulq_n_f64(*v102, v100);
    v102[-1] = vmulq_n_f64(v102[-1], v100);
    *v102 = v104;
    v102 += 2;
    v103 -= 4;
  }
  while (v103);
  if (v5 != v101)
  {
LABEL_86:
    v105 = v5 - v101;
    v106 = (double *)(v60 + 8 * v101);
    do
    {
      *v106 = v100 * *v106;
      ++v106;
      --v105;
    }
    while (v105);
  }
  return result;
}

BOOL sub_20EB50F78(uint64_t a1, float64x2_t *a2)
{
  _BOOL8 result;
  uint64_t v5;
  double v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int16x8_t v29;
  signed int v30;
  uint64_t v31;
  double v32;
  signed int v33;
  signed int v34;
  double v35;
  int v36;
  int v37;
  _BOOL4 v38;
  int v39;
  float64x2_t v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  int8x8_t v46;
  int8x8_t v47;
  float64x2_t v48;
  int8x16_t v49;
  uint16x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint16x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x8_t v58;
  int v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;

  result = sub_20EB517AC((uint64_t)&v63, a2);
  if (result)
  {
    v5 = sub_20EB51CE4(&v63, 0.0);
    v6 = v64 * v65;
    v7 = (v64 > 0.0) - (v64 < 0.0);
    v8 = (v6 > 0.0) - (v6 < 0.0);
    *(double *)v9.i64 = v67;
    v10 = (v66 * v6 > 0.0) - (v66 * v6 < 0.0);
    v11 = v7 == v8;
    v12 = v7 != v8;
    if (v11)
      v13 = 1;
    else
      v13 = 2;
    v14 = v68;
    v15 = v69;
    v16 = v70;
    v17 = v71;
    v18 = v72;
    v19 = v73;
    v20 = v74;
    v21.f64[0] = v67 * (v66 * (v64 * v65));
    v22.f64[0] = v69 * (v68 * v21.f64[0]);
    v23.f64[0] = v71 * (v70 * v22.f64[0]);
    v24.f64[0] = v73 * (v72 * v23.f64[0]);
    if (v10 != v8)
      v12 = v13;
    v23.f64[1] = v72 * v23.f64[0];
    v21.f64[1] = v68 * v21.f64[0];
    v22.f64[1] = v70 * v22.f64[0];
    v25 = vsubq_s32(vuzp1q_s32((int32x4_t)vcltzq_f64(v21), (int32x4_t)vcltzq_f64(v22)), vuzp1q_s32((int32x4_t)vcgtzq_f64(v21), (int32x4_t)vcgtzq_f64(v22)));
    v24.f64[1] = v74 * v24.f64[0];
    v26 = vsubq_s32(vuzp1q_s32((int32x4_t)vcltzq_f64(v23), (int32x4_t)vcltzq_f64(v24)), vuzp1q_s32((int32x4_t)vcgtzq_f64(v23), (int32x4_t)vcgtzq_f64(v24)));
    v27 = (int32x4_t)vextq_s8(v9, (int8x16_t)v25, 0xCuLL);
    v27.i32[0] = v10;
    v28 = (int8x16_t)xmmword_210315570;
    v29 = (int16x8_t)vbicq_s8((int8x16_t)xmmword_210315570, (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v25, v27), (int16x8_t)vceqq_s32(v26, (int32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v26, 0xCuLL))));
    v29.i32[0] = vaddvq_s16(v29);
    *(int8x8_t *)v29.i8 = vcnt_s8(*(int8x8_t *)v29.i8);
    v29.i16[0] = vaddlv_u8(*(uint8x8_t *)v29.i8);
    v30 = v12 + v29.i32[0];
    if ((int)v5 < v12 + v29.i32[0])
      return 0;
    v31 = v5;
    if ((_DWORD)v5 != v30)
    {
      v32 = 2.0;
      v33 = sub_20EB51CE4(&v63, 2.0);
      if (v30 < v33)
      {
        v32 = 4.0;
        v33 = sub_20EB51CE4(&v63, 4.0);
        if (v30 < v33)
        {
          v32 = 8.0;
          v33 = sub_20EB51CE4(&v63, 8.0);
          if (v30 < v33)
          {
            v32 = 16.0;
            v33 = sub_20EB51CE4(&v63, 16.0);
            if (v30 < v33)
            {
              v32 = 32.0;
              v34 = sub_20EB51CE4(&v63, 32.0);
              if (v30 < v34)
              {
                v32 = 64.0;
                v34 = sub_20EB51CE4(&v63, 64.0);
                if (v30 < v34)
                {
                  v32 = 128.0;
                  v34 = sub_20EB51CE4(&v63, 128.0);
                }
              }
              v33 = v34;
            }
          }
        }
      }
      sub_20EB51E8C(a1, a2->f64, &v63, v31, v33, 0.0, v32);
      *(double *)v9.i64 = v67;
      v14 = v68;
      v15 = v69;
      v16 = v70;
      v17 = v71;
      v18 = v72;
      v19 = v73;
      v20 = v74;
      v28 = (int8x16_t)xmmword_210315570;
    }
    v35 = v64 * v65;
    v36 = (v64 < 0.0) - (v64 > 0.0);
    v37 = (v35 > 0.0) - (v35 < 0.0);
    v11 = v36 == v37;
    v38 = v36 != v37;
    if (v11)
      v39 = 1;
    else
      v39 = 2;
    v40.f64[0] = *(double *)v9.i64 * (v66 * v35);
    v41 = v14 * v40.f64[0];
    v48.f64[0] = v15 * v41;
    v42 = v16 * v48.f64[0];
    v43.f64[0] = v17 * v42;
    v44 = v18 * v43.f64[0];
    v45.f64[0] = v19 * v44;
    v45.f64[1] = -(v20 * v45.f64[0]);
    v43.f64[1] = v44;
    v48.f64[1] = v42;
    v40.f64[1] = v41;
    v46 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v40), (int32x4_t)vcgtzq_f64(v48)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v43), (int32x4_t)vcgtzq_f64(v45))));
    v47 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcltzq_f64(v40), (int32x4_t)vcltzq_f64(v48)), (int16x8_t)vuzp1q_s32((int32x4_t)vcltzq_f64(v43), (int32x4_t)vcltzq_f64(v45))));
    LOWORD(v48.f64[0]) = v46.u8[0];
    WORD1(v48.f64[0]) = v47.u8[1];
    WORD2(v48.f64[0]) = v46.u8[2];
    if ((v66 * v35 < 0.0) - (v66 * v35 > 0.0) != v37)
      v38 = v39;
    HIWORD(v48.f64[0]) = v47.u8[3];
    v49.i64[0] = 0x100000001;
    v49.i64[1] = 0x100000001;
    v50.i16[0] = v46.u8[4];
    v50.i16[1] = v47.u8[5];
    v50.i16[2] = v46.u8[6];
    v51 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)&v48.f64[0]), v49);
    v50.i16[3] = v46.u8[7];
    v52 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v50), v49);
    v50.i16[0] = v47.u8[0];
    v50.i16[1] = v46.u8[1];
    v50.i16[2] = v47.u8[2];
    v50.i16[3] = v46.u8[3];
    v53.i16[0] = v47.u8[4];
    v53.i16[1] = v46.u8[5];
    v53.i16[2] = v47.u8[6];
    v53.i16[3] = v47.u8[7];
    v54 = vsraq_n_s32(v52, vshlq_n_s32((int32x4_t)vmovl_u16(v53), 0x1FuLL), 0x1FuLL);
    v55 = vsraq_n_s32(v51, vshlq_n_s32((int32x4_t)vmovl_u16(v50), 0x1FuLL), 0x1FuLL);
    v56 = (int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v54, 0xCuLL);
    v57 = (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v55, 0xCuLL);
    v57.i32[0] = (v66 * v35 < 0.0) - (v66 * v35 > 0.0);
    v58 = (int16x8_t)vbicq_s8(v28, (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v55, v57), (int16x8_t)vceqq_s32(v54, v56)));
    v58.i32[0] = vaddvq_s16(v58);
    *(int8x8_t *)v58.i8 = vcnt_s8(*(int8x8_t *)v58.i8);
    v58.i16[0] = vaddlv_u8(*(uint8x8_t *)v58.i8);
    v59 = v38 + v58.i32[0];
    if (v38 + v58.i32[0] >= (int)v31)
    {
      if (v59 != (_DWORD)v31)
      {
        v60 = -2.0;
        v61 = sub_20EB51CE4(&v63, -2.0);
        if ((int)v61 < v59)
        {
          v60 = -4.0;
          v61 = sub_20EB51CE4(&v63, -4.0);
          if ((int)v61 < v59)
          {
            v60 = -8.0;
            v61 = sub_20EB51CE4(&v63, -8.0);
            if ((int)v61 < v59)
            {
              v60 = -16.0;
              v61 = sub_20EB51CE4(&v63, -16.0);
              if ((int)v61 < v59)
              {
                v60 = -32.0;
                v62 = sub_20EB51CE4(&v63, -32.0);
                if ((int)v62 < v59)
                {
                  v60 = -64.0;
                  v62 = sub_20EB51CE4(&v63, -64.0);
                  if ((int)v62 < v59)
                  {
                    v60 = -128.0;
                    v62 = sub_20EB51CE4(&v63, -128.0);
                  }
                }
                v61 = v62;
              }
            }
          }
        }
        sub_20EB51E8C(a1, a2->f64, &v63, v61, v31, v60, 0.0);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_20EB514B0(uint64_t *a1)
{
  unsigned int v1;
  unint64_t v2;
  BOOL v3;
  int v4;
  int v5;
  uint64_t *v6;
  float64x2_t *v7;
  int v8;
  double v9;
  unsigned int v10;
  int v11;
  double v12;
  unsigned int v14;
  double v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  int v48;
  float64x2_t *v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 9;
  v5 = 1;
  v6 = a1;
  v7 = (float64x2_t *)a1;
  do
  {
    v8 = 0;
    v9 = 0.0;
    v10 = v1;
    v11 = v5;
    do
    {
      v12 = fabs(*(double *)&a1[v10]);
      if (v12 > v9)
      {
        v8 = v11 - 1;
        v9 = v12;
      }
      v10 += 20;
    }
    while (v11++ != 10);
    v14 = 20 * v8;
    v15 = *(double *)&a1[v14 + v2];
    if (v15 == 0.0)
      break;
    v16 = &a1[v14];
    v17 = *(_QWORD *)&v7->f64[0];
    *(_QWORD *)&v7->f64[0] = *v16;
    *v16 = v17;
    v18 = *(_QWORD *)&v7->f64[1];
    *(_QWORD *)&v7->f64[1] = v16[1];
    v16[1] = v18;
    v19 = *(_QWORD *)&v7[1].f64[0];
    *(_QWORD *)&v7[1].f64[0] = v16[2];
    v16[2] = v19;
    v20 = *(_QWORD *)&v7[1].f64[1];
    *(_QWORD *)&v7[1].f64[1] = v16[3];
    v16[3] = v20;
    v21 = *(_QWORD *)&v7[2].f64[0];
    *(_QWORD *)&v7[2].f64[0] = v16[4];
    v16[4] = v21;
    v22 = *(_QWORD *)&v7[2].f64[1];
    *(_QWORD *)&v7[2].f64[1] = v16[5];
    v16[5] = v22;
    v23 = *(_QWORD *)&v7[3].f64[0];
    *(_QWORD *)&v7[3].f64[0] = v16[6];
    v16[6] = v23;
    v24 = *(_QWORD *)&v7[3].f64[1];
    *(_QWORD *)&v7[3].f64[1] = v16[7];
    v16[7] = v24;
    v25 = *(_QWORD *)&v7[4].f64[0];
    *(_QWORD *)&v7[4].f64[0] = v16[8];
    v16[8] = v25;
    v26 = *(_QWORD *)&v7[4].f64[1];
    *(_QWORD *)&v7[4].f64[1] = v16[9];
    v16[9] = v26;
    v27 = *(_QWORD *)&v7[5].f64[0];
    *(_QWORD *)&v7[5].f64[0] = v16[10];
    v16[10] = v27;
    v28 = *(_QWORD *)&v7[5].f64[1];
    *(_QWORD *)&v7[5].f64[1] = v16[11];
    v16[11] = v28;
    v29 = *(_QWORD *)&v7[6].f64[0];
    *(_QWORD *)&v7[6].f64[0] = v16[12];
    v16[12] = v29;
    v30 = *(_QWORD *)&v7[6].f64[1];
    *(_QWORD *)&v7[6].f64[1] = v16[13];
    v16[13] = v30;
    v31 = *(_QWORD *)&v7[7].f64[0];
    *(_QWORD *)&v7[7].f64[0] = v16[14];
    v16[14] = v31;
    v32 = *(_QWORD *)&v7[7].f64[1];
    *(_QWORD *)&v7[7].f64[1] = v16[15];
    v16[15] = v32;
    v33 = *(_QWORD *)&v7[8].f64[0];
    *(_QWORD *)&v7[8].f64[0] = v16[16];
    v16[16] = v33;
    v34 = *(_QWORD *)&v7[8].f64[1];
    *(_QWORD *)&v7[8].f64[1] = v16[17];
    v16[17] = v34;
    v35 = *(_QWORD *)&v7[9].f64[0];
    *(_QWORD *)&v7[9].f64[0] = v16[18];
    v16[18] = v35;
    v36 = *(_QWORD *)&v7[9].f64[1];
    *(_QWORD *)&v7[9].f64[1] = v16[19];
    v16[19] = v36;
    v37 = 1.0 / v15;
    v38 = vmulq_n_f64(v7[9], v37);
    v39 = vmulq_n_f64(v7[8], v37);
    v40 = vmulq_n_f64(v7[7], v37);
    v41 = vmulq_n_f64(v7[6], v37);
    v42 = vmulq_n_f64(v7[5], v37);
    v43 = vmulq_n_f64(v7[4], v37);
    v44 = vmulq_n_f64(v7[3], v37);
    v45 = vmulq_n_f64(v7[2], v37);
    v46 = vmulq_n_f64(v7[1], v37);
    *v7 = vmulq_n_f64(*v7, v37);
    v7[1] = v46;
    v7[2] = v45;
    v7[3] = v44;
    v7[4] = v43;
    v7[5] = v42;
    v7[6] = v41;
    v7[7] = v40;
    v7[8] = v39;
    v7[9] = v38;
    if (v2 <= 8)
    {
      v47 = 160;
      v48 = v4;
      do
      {
        v49 = &v7[(unint64_t)v47 / 0x10];
        v50 = -*(double *)&v6[(unint64_t)v47 / 8];
        v51 = vmulq_n_f64(*v7, v50);
        v52 = vmulq_n_f64(v7[1], v50);
        v53 = vmulq_n_f64(v7[2], v50);
        v54 = vmulq_n_f64(v7[3], v50);
        v55 = vmulq_n_f64(v7[4], v50);
        v56 = vmulq_n_f64(v7[5], v50);
        v57 = vmulq_n_f64(v7[6], v50);
        v58 = vmulq_n_f64(v7[7], v50);
        v59 = vmulq_n_f64(v7[8], v50);
        v60 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 9], vmulq_n_f64(v7[9], v50));
        v61 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 8], v59);
        v62 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 7], v58);
        v63 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 6], v57);
        v64 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 5], v56);
        v65 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 4], v55);
        v66 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 3], v54);
        v67 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 2], v53);
        v68 = vaddq_f64(v7[(unint64_t)v47 / 0x10 + 1], v52);
        *v49 = vaddq_f64(v7[(unint64_t)v47 / 0x10], v51);
        v49[1] = v68;
        v49[2] = v67;
        v49[3] = v66;
        v49[4] = v65;
        v49[5] = v64;
        v49[6] = v63;
        v49[7] = v62;
        v49[8] = v61;
        v49[9] = v60;
        v47 += 160;
        --v48;
      }
      while (v48);
    }
    v7 += 10;
    v3 = v2 > 8;
    ++v5;
    v1 += 21;
    --v4;
    v6 += 21;
    ++v2;
  }
  while (v2 != 10);
  return v3;
}

BOOL sub_20EB517AC(uint64_t a1, float64x2_t *a2)
{
  double v2;
  double v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  _BOOL8 result;
  float64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  double v92;
  double v93;
  float64x2_t v94;
  double v95;
  double v96;
  double v97;
  double v98;

  v2 = a2->f64[0];
  v3 = a2->f64[1];
  v4 = a2->f64[0] * 10.0;
  v5 = a2[1];
  v6 = vmulq_f64(a2[2], (float64x2_t)xmmword_2103156F0);
  v94 = v6;
  v8 = a2[3].f64[0];
  v7 = a2[3].f64[1];
  v9 = a2[4].f64[1];
  v10 = a2[4].f64[0] + a2[4].f64[0];
  v97 = v10;
  v98 = v9;
  if (v4 == 0.0)
    return 0;
  v12 = v3 * 9.0;
  v13 = vmulq_f64(v5, (float64x2_t)xmmword_2103156E0);
  v14 = v2 * (1.0 / v4);
  *(double *)(a1 + 160) = v14;
  v15 = 1.0 / v4 * (a2->f64[1] - v14 * (v3 * 9.0));
  *(double *)(a1 + 168) = v15;
  v16 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  v17 = (float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)v6);
  v16.f64[0] = v12;
  v18 = vsubq_f64(vsubq_f64(a2[1], vmulq_n_f64(v13, v14)), vmulq_n_f64(v16, v15));
  v19 = vnegq_f64(v18);
  v20 = vsubq_f64(vsubq_f64(a2[2], vmulq_n_f64(v6, v14)), vmulq_n_f64(v17, v15));
  v84 = v19;
  v85 = vnegq_f64(v20);
  v22 = a2[3].f64[0];
  v21 = a2[3].f64[1];
  v23 = a2[4].f64[0];
  v24 = a2[4].f64[1] - v14 * v9 - v10 * v15;
  v25 = a2[5].f64[0] - v9 * v15;
  v89 = -v24;
  v90 = -v25;
  if (v18.f64[0] == 0.0)
    return 0;
  v26 = v4 * (-1.0 / v18.f64[0]);
  *(double *)(a1 + 144) = v26;
  v27 = -1.0 / v18.f64[0] * (v12 + vmuld_lane_f64(v26, v18, 1));
  *(double *)(a1 + 152) = v27;
  v28 = v13.f64[0] + v26 * v20.f64[0] + vmuld_lane_f64(v27, v18, 1);
  v29 = -v28;
  v30 = v27 * v20.f64[0] + v13.f64[1] + vmuld_lane_f64(v26, v20, 1);
  v91.f64[0] = -v28;
  v91.f64[1] = -v30;
  v31 = v27 * v24 + v10 + v26 * v25;
  v32 = v9 + v27 * v25;
  v95 = -v31;
  v96 = -v32;
  if (v28 == 0.0)
    return 0;
  v33 = v8 * 4.0;
  v34 = v22 - v14 * (v8 * 4.0) - vmuld_lane_f64(v15, v6, 1);
  v35 = vmuld_lane_f64(v27, v20, 1) + v6.f64[0] + v26 * v34;
  v36 = -1.0 / v28 * v19.f64[0];
  v37 = -1.0 / v28 * (v30 * v36 - v18.f64[1]);
  *(double *)(a1 + 128) = v36;
  *(double *)(a1 + 136) = v37;
  v38 = v36 * v35 - v20.f64[0] + v30 * v37;
  v39 = v36 * v32 - v24 + v37 * v31;
  v40 = v37 * v32 - v25;
  v87 = -v39;
  v88 = -v40;
  if (v38 == 0.0)
    return 0;
  v41 = v7 * 3.0;
  v42 = v21 - v14 * (v7 * 3.0) - v33 * v15;
  v43 = v23 - v14 * v10 - v7 * 3.0 * v15;
  v44 = v27 * v34 + v6.f64[1] + v26 * v42;
  v45 = v27 * v42 + v33 + v26 * v43;
  v46 = v35 * v37 + v36 * v44 - v20.f64[1];
  v47 = v37 * v44 + v36 * v45 - v34;
  v48 = -1.0 / v38 * v29;
  v49 = -1.0 / v38 * (v46 * v48 - v30);
  *(double *)(a1 + 112) = v48;
  *(double *)(a1 + 120) = v49;
  v50 = v48 * v47 - v35 + v46 * v49;
  v51 = v48 * v40 - v31 + v39 * v49;
  v52 = v40 * v49 - v32;
  v94.f64[0] = -v51;
  v94.f64[1] = -v52;
  if (v50 == 0.0)
    return 0;
  v53 = v27 * v43 + v41 + v26 * v24;
  v54 = v37 * v45 + v36 * v53 - v42;
  v55 = v37 * v53 + v36 * v31 - v43;
  v56 = v48 * v54 - v44 + v47 * v49;
  v57 = v54 * v49 + v48 * v55 - v45;
  v58 = -1.0 / v50 * -v38;
  *(double *)(a1 + 96) = v58;
  v59 = -1.0 / v50 * (v56 * v58 - v46);
  *(double *)(a1 + 104) = v59;
  v60 = v57 * v58 - v47 + v56 * v59;
  v61 = v52 * v58 - v39 + v51 * v59;
  v62 = v52 * v59 - v40;
  v85.f64[1] = -v61;
  v86 = -v62;
  if (v60 == 0.0)
    return 0;
  v63 = -v50;
  v64 = v48 * v39 - v53 + v55 * v49;
  v65 = v64 * v58 - v54 + v57 * v59;
  v66 = v51 * v58 - v55 + v64 * v59;
  v67 = -1.0 / v60 * v63;
  v68 = -1.0 / v60 * (v65 * v67 - v56);
  *(double *)(a1 + 80) = v67;
  *(double *)(a1 + 88) = v68;
  v69 = v66 * v67 - v57 + v65 * v68;
  v70 = v62 * v67 - v51 + v61 * v68;
  v71 = v62 * v68 - v52;
  v92 = -v70;
  v93 = -v71;
  if (v69 == 0.0)
    return 0;
  v72 = -v60;
  v73 = v61 * v67 - v64 + v66 * v68;
  v74 = -1.0 / v69 * v72;
  v75 = -1.0 / v69 * (v73 * v74 - v65);
  *(double *)(a1 + 64) = v74;
  *(double *)(a1 + 72) = v75;
  v76 = v70 * v74 - v66 + v73 * v75;
  v77 = v71 * v74 - v61 + v70 * v75;
  v84.f64[0] = -v76;
  v84.f64[1] = -v77;
  v78 = v71 * v75 - v62;
  v85.f64[0] = -v78;
  if (v76 == 0.0)
    return 0;
  v79 = -1.0 / v76;
  v80 = v79 * -v69;
  v81 = v79 * (v77 * v80 - v73);
  *(double *)(a1 + 48) = v80;
  *(double *)(a1 + 56) = v81;
  v91.f64[0] = -(v78 * v80 - v70 + v77 * v81);
  v91.f64[1] = -(v78 * v81 - v71);
  result = sub_20EB521C0((double *)(a1 + 32), (unint64_t)&v84, v91.f64, v84.f64, 2u);
  if (!result)
    return result;
  v83 = v84.f64[0];
  if (v84.f64[0] == 0.0)
    return 0;
  *(float64x2_t *)(a1 + 16) = vmulq_n_f64(v91, 1.0 / v84.f64[0]);
  *(_QWORD *)a1 = 0;
  *(float64_t *)(a1 + 8) = v83;
  return 1;
}

uint64_t sub_20EB51CE4(double *a1, double a2)
{
  double v2;
  double v3;
  BOOL v4;
  BOOL v5;
  double v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;

  v2 = a1[1];
  v3 = v2 * (a1[2] * a2 + a1[3]);
  v4 = v2 < 0.0;
  v5 = v2 <= 0.0;
  v6 = v3 * (a1[4] * a2 + a1[5]) - v2;
  v7 = a1[16] * a2 + a1[17];
  v8 = !v5;
  v9 = v4;
  v10 = v8 - v9;
  v11 = (v3 > 0.0) - (v3 < 0.0);
  v12 = (v6 > 0.0) - (v6 < 0.0);
  v13 = v10 == v11;
  v14 = v10 != v11;
  if (v13)
    v15 = 1;
  else
    v15 = 2;
  v16.f64[0] = (a1[6] * a2 + a1[7]) * v6 - v3;
  v17 = (a1[8] * a2 + a1[9]) * v16.f64[0] - v6;
  v22.f64[0] = (a1[10] * a2 + a1[11]) * v17 - v16.f64[0];
  v18 = (a1[12] * a2 + a1[13]) * v22.f64[0] - v17;
  v19.f64[0] = (a1[14] * a2 + a1[15]) * v18 - v22.f64[0];
  v20 = v7 * v19.f64[0] - v18;
  v21.f64[0] = (a1[18] * a2 + a1[19]) * v20 - v19.f64[0];
  v22.f64[1] = v18;
  if (v12 != v11)
    v14 = v15;
  v16.f64[1] = v17;
  v19.f64[1] = v7 * v19.f64[0] - v18;
  v21.f64[1] = (a1[20] * a2 + a1[21]) * v21.f64[0] - v20;
  v23 = vsubq_s32(vuzp1q_s32((int32x4_t)vcltzq_f64(v19), (int32x4_t)vcltzq_f64(v21)), vuzp1q_s32((int32x4_t)vcgtzq_f64(v19), (int32x4_t)vcgtzq_f64(v21)));
  v24 = vsubq_s32(vuzp1q_s32((int32x4_t)vcltzq_f64(v16), (int32x4_t)vcltzq_f64(v22)), vuzp1q_s32((int32x4_t)vcgtzq_f64(v16), (int32x4_t)vcgtzq_f64(v22)));
  v25 = (int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v24, 0xCuLL);
  v25.i32[0] = v12;
  v26 = (int16x8_t)vbicq_s8((int8x16_t)xmmword_210315570, (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v24, v25), (int16x8_t)vceqq_s32(v23, (int32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL))));
  v26.i32[0] = vaddvq_s16(v26);
  *(int8x8_t *)v26.i8 = vcnt_s8(*(int8x8_t *)v26.i8);
  v26.i16[0] = vaddlv_u8(*(uint8x8_t *)v26.i8);
  return (v14 + v26.i32[0]);
}

void sub_20EB51E8C(uint64_t a1, const double *a2, double *a3, uint64_t a4, unsigned int a5, double a6, double a7)
{
  __n128 v7;
  uint64_t v10;
  double v13;
  double v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const double *v19;
  const double *v20;
  const double *v21;
  const double *v22;
  const double *v23;
  const double *v24;
  const double *v25;
  const double *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  const double *v35;
  float64x2_t v36;
  const double *v37;
  float64x2_t v38;
  float64x2_t v39;
  int v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  int32x2_t v44;
  unint64_t v45;
  double *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  double *v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  _OWORD *v62;
  double *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __n128 v67;
  double v68;

  v7.n128_f64[0] = a6;
  if (a7 - a6 < 0.001 || a4 <= a5)
    return;
  v10 = a4;
  v13 = a7;
  while ((_DWORD)v10 - 1 != a5)
  {
    v15 = (v7.n128_f64[0] + v13) * 0.5;
    v67 = v7;
    v16 = sub_20EB51CE4(a3, v15);
    sub_20EB51E8C(a1, a2, a3, v10, v16, v67, v15);
    v17 = sub_20EB51CE4(a3, v15);
    v10 = v17;
    v18 = v13 - v15 >= 0.001 && v17 > a5;
    v7.n128_f64[0] = v15;
    if (!v18)
      return;
  }
  v19 = a2 + 10;
  v20 = a2 + 9;
  v21 = a2 + 8;
  v22 = a2 + 7;
  v23 = a2 + 6;
  v24 = a2 + 5;
  v25 = a2 + 4;
  v26 = a2 + 3;
  v27 = vld1q_dup_f64(v19);
  v28 = vld1q_dup_f64(v20);
  v29 = vld1q_dup_f64(v21);
  v30 = vld1q_dup_f64(v22);
  v31 = vld1q_dup_f64(v23);
  v32 = vld1q_dup_f64(v24);
  v33 = vld1q_dup_f64(v25);
  v34 = vld1q_dup_f64(v26);
  v35 = a2 + 2;
  v36 = vld1q_dup_f64(v35);
  v38 = vld1q_dup_f64(a2);
  v37 = a2 + 1;
  v39 = vld1q_dup_f64(v37);
  v40 = 25;
  do
  {
    v41 = (v7.n128_f64[0] + v13) * 0.5;
    v42.f64[0] = v41;
    *(_QWORD *)&v42.f64[1] = v7.n128_u64[0];
    v43 = vaddq_f64(v27, vmulq_f64(v42, vaddq_f64(v28, vmulq_f64(v42, vaddq_f64(v29, vmulq_f64(v42, vaddq_f64(v30, vmulq_f64(v42, vaddq_f64(v31, vmulq_f64(v42,
                              vaddq_f64(v32, vmulq_f64(v42, vaddq_f64(v33, vmulq_f64(v42, vaddq_f64(v34, vmulq_f64(v42, vaddq_f64(v36, vmulq_f64(v42, vaddq_f64(v39, vmulq_f64(v38, v42))))))))))))))))))));
    if (v43.f64[0] == 0.0 || (v13 - v7.n128_f64[0]) * 0.5 < 0.0000001)
      break;
    v44 = vsub_s32(vmovn_s64(vcltzq_f64(v43)), vmovn_s64(vcgtzq_f64(v43)));
    if ((vceq_s32(v44, vdup_lane_s32(v44, 1)).u8[0] & 1) != 0)
      v7.n128_f64[0] = (v7.n128_f64[0] + v13) * 0.5;
    else
      v13 = (v7.n128_f64[0] + v13) * 0.5;
    --v40;
  }
  while (v40);
  v46 = *(double **)(a1 + 8);
  v45 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v46 < v45)
  {
    *v46 = v41;
    *(_QWORD *)(a1 + 8) = v46 + 1;
    return;
  }
  v47 = *(double **)a1;
  v48 = (uint64_t)v46 - *(_QWORD *)a1;
  v49 = v48 >> 3;
  v50 = (v48 >> 3) + 1;
  if (v50 >> 61)
    sub_20E867F44();
  v51 = v45 - (_QWORD)v47;
  if (v51 >> 2 > v50)
    v50 = v51 >> 2;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
    v52 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    v68 = v41;
    if (v52 >> 61)
      sub_20E877A38();
    v53 = operator new(8 * v52);
    v54 = (double *)&v53[8 * v49];
    v55 = &v53[8 * v52];
    *v54 = v68;
    v56 = (uint64_t)(v54 + 1);
    v57 = (char *)v46 - (char *)v47;
    if (v46 == v47)
      goto LABEL_39;
    goto LABEL_33;
  }
  v53 = 0;
  v54 = (double *)(8 * v49);
  v55 = 0;
  *(double *)(8 * v49) = v41;
  v56 = 8 * v49 + 8;
  v57 = (char *)v46 - (char *)v47;
  if (v46 != v47)
  {
LABEL_33:
    v58 = v57 - 8;
    if (v58 < 0x58)
      goto LABEL_46;
    if ((unint64_t)((char *)v46 - v53 - v48) < 0x20)
      goto LABEL_46;
    v59 = (v58 >> 3) + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v61 = &v46[v60 / 0xFFFFFFFFFFFFFFF8];
    v54 = (double *)((char *)v54 - v60);
    v62 = &v53[8 * v49 - 16];
    v63 = v46 - 2;
    v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v65 = *(_OWORD *)v63;
      *(v62 - 1) = *((_OWORD *)v63 - 1);
      *v62 = v65;
      v62 -= 2;
      v63 -= 4;
      v64 -= 4;
    }
    while (v64);
    v46 = v61;
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
      {
        v66 = *((_QWORD *)v46-- - 1);
        *((_QWORD *)v54-- - 1) = v66;
      }
      while (v46 != v47);
    }
  }
LABEL_39:
  *(_QWORD *)a1 = v54;
  *(_QWORD *)(a1 + 8) = v56;
  *(_QWORD *)(a1 + 16) = v55;
  if (v47)
    operator delete(v47);
  *(_QWORD *)(a1 + 8) = v56;
}

BOOL sub_20EB521C0(double *a1, unint64_t a2, double *a3, double *a4, unsigned int a5)
{
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v13;
  BOOL v15;
  BOOL v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  float64x2_t *v21;
  unint64_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double v31;

  v5 = *a3;
  if (*a3 != 0.0)
  {
    v6 = 1.0 / v5 * *a4;
    *a1 = v6;
    v7 = 1.0 / v5 * (a4[1] - v6 * a3[1]);
    a1[1] = v7;
    if (a5 < 4)
    {
      a5 = 3;
LABEL_30:
      *(double *)(a2 + 8 * (a5 - 3)) = -(a4[a5 - 1] - v7 * a3[a5 - 2]);
      return v5 != 0.0;
    }
    v8 = a5 - 3;
    if (v8 >= 6)
    {
      v10 = 8 * a5 + a2 - 24;
      v11 = 8 * a5 - 8;
      v13 = (unint64_t)a3 + v11 > a2 && (unint64_t)(a3 + 1) < v10;
      v15 = (unint64_t)(a1 + 2) > a2 && v10 > (unint64_t)a1;
      v16 = (unint64_t)(a4 + 2) < v10 && (unint64_t)a4 + v11 > a2;
      v9 = 3;
      if (!v16 && !v13 && !v15)
      {
        v9 = (v8 & 0xFFFFFFFFFFFFFFFELL) + 3;
        v17 = a1;
        v18 = vld1q_dup_f64(v17++);
        v19 = vld1q_dup_f64(v17);
        v20 = (float64x2_t *)(a3 + 2);
        v21 = (float64x2_t *)(a4 + 2);
        v22 = v8 & 0xFFFFFFFFFFFFFFFELL;
        v23 = (float64x2_t *)a2;
        do
        {
          v24 = *v21++;
          *v23++ = vnegq_f64(vsubq_f64(vsubq_f64(v24, vmulq_f64(*v20, v18)), vmulq_f64(*(float64x2_t *)((char *)v20 - 8), v19)));
          ++v20;
          v22 -= 2;
        }
        while (v22);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_29;
      }
    }
    else
    {
      v9 = 3;
    }
    v25 = a5 - v9;
    v26 = 8 * v9;
    v27 = (double *)(v26 + a2 - 24);
    v28 = v26 - 8;
    v29 = &a4[(unint64_t)v26 / 8 - 1];
    v30 = (double *)((char *)a3 + v28);
    do
    {
      v31 = *v29++;
      *v27++ = -(v31 - *v30 * *a1 - *(v30 - 1) * a1[1]);
      ++v30;
      --v25;
    }
    while (v25);
LABEL_29:
    v7 = a1[1];
    goto LABEL_30;
  }
  return v5 != 0.0;
}

uint64_t sub_20EB52354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 80);
    v8 = (__int128 *)(a1 + 96);
    v9 = (__int128 *)(a1 + 112);
    v10 = (__int128 *)(a1 + 128);
    v11 = (__int128 *)(a1 + 144);
    v12 = (__int128 *)(a1 + 160);
    if (v5 < v3)
    {
      v70 = *(_OWORD *)(a1 + 40);
      v75 = *(_OWORD *)(a1 + 56);
      v80 = *(_QWORD *)(a1 + 72);
      v60 = *v6;
      v65 = *(_OWORD *)(a1 + 24);
      v50 = *v8;
      v55 = *v7;
      v40 = *v10;
      v45 = *v9;
      v30 = *v12;
      v35 = *v11;
      *(double *)a1 = v5;
      *v6 = *(_OWORD *)(a3 + 8);
      v13 = *(_OWORD *)(a3 + 24);
      v14 = *(_OWORD *)(a3 + 40);
      v15 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 40) = v14;
      *(_OWORD *)(a1 + 56) = v15;
      *(_OWORD *)(a1 + 24) = v13;
      *v7 = *(_OWORD *)(a3 + 80);
      *v8 = *(_OWORD *)(a3 + 96);
      *v9 = *(_OWORD *)(a3 + 112);
      *v10 = *(_OWORD *)(a3 + 128);
      *v11 = *(_OWORD *)(a3 + 144);
      *v12 = *(_OWORD *)(a3 + 160);
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 8) = v60;
      *(_OWORD *)(a3 + 56) = v75;
      *(_OWORD *)(a3 + 40) = v70;
      *(_OWORD *)(a3 + 24) = v65;
      *(_QWORD *)(a3 + 72) = v80;
      *(_OWORD *)(a3 + 80) = v55;
      *(_OWORD *)(a3 + 96) = v50;
      *(_OWORD *)(a3 + 112) = v45;
      *(_OWORD *)(a3 + 128) = v40;
      *(_OWORD *)(a3 + 144) = v35;
      *(_OWORD *)(a3 + 160) = v30;
      return 1;
    }
    v73 = *(_OWORD *)(a1 + 40);
    v78 = *(_OWORD *)(a1 + 56);
    v83 = *(_QWORD *)(a1 + 72);
    v63 = *v6;
    v68 = *(_OWORD *)(a1 + 24);
    v53 = *v8;
    v58 = *v7;
    v43 = *v10;
    v48 = *v9;
    v33 = *v12;
    v38 = *v11;
    *(double *)a1 = v3;
    *v6 = *(_OWORD *)(a2 + 8);
    v23 = *(_OWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 40);
    v25 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v24;
    *(_OWORD *)(a1 + 56) = v25;
    *(_OWORD *)(a1 + 24) = v23;
    *v7 = *(_OWORD *)(a2 + 80);
    *v8 = *(_OWORD *)(a2 + 96);
    *v9 = *(_OWORD *)(a2 + 112);
    *v10 = *(_OWORD *)(a2 + 128);
    *v11 = *(_OWORD *)(a2 + 144);
    *v12 = *(_OWORD *)(a2 + 160);
    *(double *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v63;
    *(_OWORD *)(a2 + 56) = v78;
    *(_OWORD *)(a2 + 40) = v73;
    *(_OWORD *)(a2 + 24) = v68;
    *(_QWORD *)(a2 + 72) = v83;
    *(_OWORD *)(a2 + 80) = v58;
    *(_OWORD *)(a2 + 96) = v53;
    *(_OWORD *)(a2 + 112) = v48;
    *(_OWORD *)(a2 + 128) = v43;
    *(_OWORD *)(a2 + 144) = v38;
    *(_OWORD *)(a2 + 160) = v33;
    if (*(double *)a3 >= v4)
      return 1;
    v74 = *(_OWORD *)(a2 + 40);
    v79 = *(_OWORD *)(a2 + 56);
    v84 = *(_QWORD *)(a2 + 72);
    v64 = *(_OWORD *)(a2 + 8);
    v69 = *(_OWORD *)(a2 + 24);
    v54 = *(_OWORD *)(a2 + 96);
    v59 = *(_OWORD *)(a2 + 80);
    v44 = *(_OWORD *)(a2 + 128);
    v49 = *(_OWORD *)(a2 + 112);
    v34 = *(_OWORD *)(a2 + 160);
    v39 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    v26 = *(_OWORD *)(a3 + 24);
    v27 = *(_OWORD *)(a3 + 40);
    v28 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
    *(_OWORD *)(a2 + 40) = v27;
    *(_OWORD *)(a2 + 56) = v28;
    *(_OWORD *)(a2 + 24) = v26;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    *(double *)a3 = v4;
    *(_OWORD *)(a3 + 8) = v64;
    *(_OWORD *)(a3 + 56) = v79;
    *(_OWORD *)(a3 + 40) = v74;
    *(_OWORD *)(a3 + 24) = v69;
    *(_QWORD *)(a3 + 72) = v84;
    *(_OWORD *)(a3 + 80) = v59;
    *(_OWORD *)(a3 + 96) = v54;
    *(_OWORD *)(a3 + 112) = v49;
    *(_OWORD *)(a3 + 128) = v44;
    *(_OWORD *)(a3 + 144) = v39;
    *(_OWORD *)(a3 + 160) = v34;
    return 2;
  }
  if (v5 >= v3)
    return 0;
  v71 = *(_OWORD *)(a2 + 40);
  v76 = *(_OWORD *)(a2 + 56);
  v81 = *(_QWORD *)(a2 + 72);
  v61 = *(_OWORD *)(a2 + 8);
  v66 = *(_OWORD *)(a2 + 24);
  v51 = *(_OWORD *)(a2 + 96);
  v56 = *(_OWORD *)(a2 + 80);
  v41 = *(_OWORD *)(a2 + 128);
  v46 = *(_OWORD *)(a2 + 112);
  v31 = *(_OWORD *)(a2 + 160);
  v36 = *(_OWORD *)(a2 + 144);
  *(double *)a2 = v5;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  v16 = *(_OWORD *)(a3 + 24);
  v17 = *(_OWORD *)(a3 + 40);
  v18 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v18;
  *(_OWORD *)(a2 + 40) = v17;
  *(_OWORD *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(double *)a3 = v3;
  *(_OWORD *)(a3 + 8) = v61;
  *(_OWORD *)(a3 + 56) = v76;
  *(_OWORD *)(a3 + 40) = v71;
  *(_OWORD *)(a3 + 24) = v66;
  *(_QWORD *)(a3 + 72) = v81;
  *(_OWORD *)(a3 + 80) = v56;
  *(_OWORD *)(a3 + 96) = v51;
  *(_OWORD *)(a3 + 112) = v46;
  *(_OWORD *)(a3 + 128) = v41;
  *(_OWORD *)(a3 + 144) = v36;
  *(_OWORD *)(a3 + 160) = v31;
  v19 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v72 = *(_OWORD *)(a1 + 40);
    v77 = *(_OWORD *)(a1 + 56);
    v82 = *(_QWORD *)(a1 + 72);
    v62 = *(_OWORD *)(a1 + 8);
    v67 = *(_OWORD *)(a1 + 24);
    v52 = *(_OWORD *)(a1 + 96);
    v57 = *(_OWORD *)(a1 + 80);
    v42 = *(_OWORD *)(a1 + 128);
    v47 = *(_OWORD *)(a1 + 112);
    v32 = *(_OWORD *)(a1 + 160);
    v37 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v20 = *(_OWORD *)(a2 + 24);
    v21 = *(_OWORD *)(a2 + 40);
    v22 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v22;
    *(_OWORD *)(a1 + 40) = v21;
    *(_OWORD *)(a1 + 24) = v20;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(double *)a2 = v19;
    *(_OWORD *)(a2 + 40) = v72;
    *(_OWORD *)(a2 + 56) = v77;
    *(_QWORD *)(a2 + 72) = v82;
    *(_OWORD *)(a2 + 8) = v62;
    *(_OWORD *)(a2 + 24) = v67;
    *(_OWORD *)(a2 + 80) = v57;
    *(_OWORD *)(a2 + 96) = v52;
    *(_OWORD *)(a2 + 112) = v47;
    *(_OWORD *)(a2 + 128) = v42;
    *(_OWORD *)(a2 + 144) = v37;
    *(_OWORD *)(a2 + 160) = v32;
    return 2;
  }
  return 1;
}

void sub_20EB52890(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  BOOL v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  double *v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  double v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v87;
  double v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  __int128 *v96;
  __int128 *v97;
  __int128 *v98;
  __int128 *v99;
  __int128 *v100;
  __int128 *v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  double v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  double v117;
  unint64_t v118;
  double v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v53 = *(double *)v8;
        if (*(double *)(a2 - 176) < *(double *)v8)
        {
          v239 = *(_QWORD *)(v8 + 72);
          v223 = *(_OWORD *)(v8 + 40);
          v231 = *(_OWORD *)(v8 + 56);
          v207 = *(_OWORD *)(v8 + 8);
          v215 = *(_OWORD *)(v8 + 24);
          v144 = *(_OWORD *)(v8 + 80);
          v191 = *(_OWORD *)(v8 + 112);
          v199 = *(_OWORD *)(v8 + 96);
          v183 = *(_OWORD *)(v8 + 128);
          v167 = *(_OWORD *)(v8 + 160);
          v175 = *(_OWORD *)(v8 + 144);
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 176);
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 - 168);
          v54 = *(_OWORD *)(a2 - 152);
          v55 = *(_OWORD *)(a2 - 136);
          v56 = *(_OWORD *)(a2 - 120);
          *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 - 104);
          *(_OWORD *)(v8 + 56) = v56;
          *(_OWORD *)(v8 + 40) = v55;
          *(_OWORD *)(v8 + 24) = v54;
          *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v8 + 128) = *(_OWORD *)(a2 - 48);
          *(_OWORD *)(v8 + 144) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v8 + 160) = *(_OWORD *)(a2 - 16);
          *(double *)(a2 - 176) = v53;
          *(_OWORD *)(a2 - 168) = v207;
          *(_QWORD *)(a2 - 104) = v239;
          *(_OWORD *)(a2 - 120) = v231;
          *(_OWORD *)(a2 - 136) = v223;
          *(_OWORD *)(a2 - 152) = v215;
          *(_OWORD *)(a2 - 96) = v144;
          *(_OWORD *)(a2 - 80) = v199;
          *(_OWORD *)(a2 - 64) = v191;
          *(_OWORD *)(a2 - 48) = v183;
          *(_OWORD *)(a2 - 32) = v175;
          *(_OWORD *)(a2 - 16) = v167;
        }
        return;
      case 3:
        sub_20EB53AA8(v8, v8 + 176, a2 - 176);
        return;
      case 4:
        sub_20EB542B4(v8, v8 + 176, v8 + 352, a2 - 176);
        return;
      case 5:
        sub_20EB5460C(v8, v8 + 176, v8 + 352, v8 + 528, a2 - 176);
        return;
      default:
        if (v9 <= 4223)
        {
          v57 = v8 + 176;
          v59 = v8 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = v8;
              do
              {
                v63 = v57;
                v64 = *(double *)(v61 + 176);
                if (v64 < *(double *)v61)
                {
                  v224 = *(_OWORD *)(v61 + 216);
                  v232 = *(_OWORD *)(v61 + 232);
                  v208 = *(_OWORD *)(v61 + 184);
                  v216 = *(_OWORD *)(v61 + 200);
                  v145 = *(_OWORD *)(v61 + 256);
                  v192 = *(_OWORD *)(v61 + 288);
                  v200 = *(_OWORD *)(v61 + 272);
                  v184 = *(_OWORD *)(v61 + 304);
                  v168 = *(_OWORD *)(v61 + 336);
                  v176 = *(_OWORD *)(v61 + 320);
                  v240 = *(_QWORD *)(v61 + 248);
                  v65 = v60;
                  v66 = *(double *)v61;
                  do
                  {
                    v67 = v8 + v65;
                    *(double *)(v67 + 176) = v66;
                    *(_OWORD *)(v67 + 200) = *(_OWORD *)(v8 + v65 + 24);
                    *(_OWORD *)(v67 + 216) = *(_OWORD *)(v8 + v65 + 40);
                    *(_OWORD *)(v67 + 232) = *(_OWORD *)(v8 + v65 + 56);
                    *(_QWORD *)(v67 + 248) = *(_QWORD *)(v8 + v65 + 72);
                    *(_OWORD *)(v67 + 184) = *(_OWORD *)(v8 + v65 + 8);
                    v68 = *(_OWORD *)(v8 + v65 + 96);
                    *(_OWORD *)(v67 + 256) = *(_OWORD *)(v8 + v65 + 80);
                    *(_OWORD *)(v67 + 272) = v68;
                    v69 = *(_OWORD *)(v8 + v65 + 128);
                    *(_OWORD *)(v67 + 288) = *(_OWORD *)(v8 + v65 + 112);
                    *(_OWORD *)(v67 + 304) = v69;
                    v70 = *(_OWORD *)(v8 + v65 + 160);
                    *(_OWORD *)(v67 + 320) = *(_OWORD *)(v8 + v65 + 144);
                    *(_OWORD *)(v67 + 336) = v70;
                    if (!v65)
                    {
                      v62 = (double *)v8;
                      goto LABEL_67;
                    }
                    v66 = *(double *)(v67 - 176);
                    v65 -= 176;
                  }
                  while (v64 < v66);
                  v62 = (double *)(v8 + v65 + 176);
LABEL_67:
                  *v62 = v64;
                  *(_OWORD *)(v67 + 8) = v208;
                  *(_QWORD *)(v67 + 72) = v240;
                  *(_OWORD *)(v67 + 56) = v232;
                  *(_OWORD *)(v67 + 40) = v224;
                  *(_OWORD *)(v67 + 24) = v216;
                  *(_OWORD *)(v67 + 80) = v145;
                  *(_OWORD *)(v67 + 96) = v200;
                  *(_OWORD *)(v67 + 112) = v192;
                  *(_OWORD *)(v67 + 128) = v184;
                  *(_OWORD *)(v67 + 144) = v176;
                  *(_OWORD *)(v67 + 160) = v168;
                }
                v57 = v63 + 176;
                v60 += 176;
                v61 = v63;
              }
              while (v63 + 176 != a2);
            }
          }
          else if (!v59)
          {
            v115 = v8 + 80;
            do
            {
              v116 = v57;
              v117 = *(double *)(a1 + 176);
              if (v117 < *(double *)a1)
              {
                v227 = *(_OWORD *)(a1 + 216);
                v235 = *(_OWORD *)(a1 + 232);
                v211 = *(_OWORD *)(a1 + 184);
                v219 = *(_OWORD *)(a1 + 200);
                v148 = *(_OWORD *)(a1 + 256);
                v195 = *(_OWORD *)(a1 + 288);
                v203 = *(_OWORD *)(a1 + 272);
                v187 = *(_OWORD *)(a1 + 304);
                v171 = *(_OWORD *)(a1 + 336);
                v179 = *(_OWORD *)(a1 + 320);
                v243 = *(_QWORD *)(a1 + 248);
                v118 = v115;
                v119 = *(double *)a1;
                do
                {
                  *(double *)(v118 + 96) = v119;
                  *(_OWORD *)(v118 + 120) = *(_OWORD *)(v118 - 56);
                  *(_OWORD *)(v118 + 136) = *(_OWORD *)(v118 - 40);
                  *(_OWORD *)(v118 + 152) = *(_OWORD *)(v118 - 24);
                  *(_QWORD *)(v118 + 168) = *(_QWORD *)(v118 - 8);
                  *(_OWORD *)(v118 + 104) = *(_OWORD *)(v118 - 72);
                  v120 = *(_OWORD *)(v118 + 16);
                  *(_OWORD *)(v118 + 176) = *(_OWORD *)v118;
                  *(_OWORD *)(v118 + 192) = v120;
                  v121 = *(_OWORD *)(v118 + 48);
                  *(_OWORD *)(v118 + 208) = *(_OWORD *)(v118 + 32);
                  *(_OWORD *)(v118 + 224) = v121;
                  v122 = *(_OWORD *)(v118 + 80);
                  *(_OWORD *)(v118 + 240) = *(_OWORD *)(v118 + 64);
                  *(_OWORD *)(v118 + 256) = v122;
                  v119 = *(double *)(v118 - 256);
                  v118 -= 176;
                }
                while (v117 < v119);
                *(double *)(v118 + 96) = v117;
                *(_OWORD *)(v118 + 104) = v211;
                *(_QWORD *)(v118 + 168) = v243;
                *(_OWORD *)(v118 + 152) = v235;
                *(_OWORD *)(v118 + 136) = v227;
                *(_OWORD *)(v118 + 120) = v219;
                *(_OWORD *)(v118 + 176) = v148;
                *(_OWORD *)(v118 + 192) = v203;
                *(_OWORD *)(v118 + 208) = v195;
                *(_OWORD *)(v118 + 224) = v187;
                *(_OWORD *)(v118 + 240) = v179;
                *(_OWORD *)(v118 + 256) = v171;
              }
              v57 = v116 + 176;
              v115 += 176;
              a1 = v116;
            }
            while (v116 + 176 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v71 = (unint64_t)(v10 - 2) >> 1;
            v72 = v71;
            do
            {
              v73 = v72;
              if (v71 >= v72)
              {
                v74 = (2 * v72) | 1;
                v75 = v8 + 176 * v74;
                if (2 * v73 + 2 < v10 && *(double *)v75 < *(double *)(v75 + 176))
                {
                  v75 += 176;
                  v74 = 2 * v73 + 2;
                }
                v76 = v8 + 176 * v73;
                v77 = *(double *)v75;
                v78 = *(double *)v76;
                if (*(double *)v75 >= *(double *)v76)
                {
                  v209 = *(_OWORD *)(v76 + 8);
                  v241 = *(_QWORD *)(v76 + 72);
                  v225 = *(_OWORD *)(v76 + 40);
                  v233 = *(_OWORD *)(v76 + 56);
                  v217 = *(_OWORD *)(v76 + 24);
                  v146 = *(_OWORD *)(v76 + 80);
                  v201 = *(_OWORD *)(v76 + 96);
                  v193 = *(_OWORD *)(v76 + 112);
                  v185 = *(_OWORD *)(v76 + 128);
                  v177 = *(_OWORD *)(v76 + 144);
                  v169 = *(_OWORD *)(v76 + 160);
                  do
                  {
                    v79 = v76;
                    v76 = v75;
                    *(double *)v79 = v77;
                    *(_OWORD *)(v79 + 8) = *(_OWORD *)(v75 + 8);
                    v80 = *(_OWORD *)(v75 + 24);
                    v81 = *(_OWORD *)(v75 + 40);
                    v82 = *(_OWORD *)(v75 + 56);
                    *(_QWORD *)(v79 + 72) = *(_QWORD *)(v75 + 72);
                    *(_OWORD *)(v79 + 56) = v82;
                    *(_OWORD *)(v79 + 40) = v81;
                    *(_OWORD *)(v79 + 24) = v80;
                    *(_OWORD *)(v79 + 80) = *(_OWORD *)(v75 + 80);
                    *(_OWORD *)(v79 + 96) = *(_OWORD *)(v75 + 96);
                    *(_OWORD *)(v79 + 112) = *(_OWORD *)(v75 + 112);
                    *(_OWORD *)(v79 + 128) = *(_OWORD *)(v75 + 128);
                    *(_OWORD *)(v79 + 144) = *(_OWORD *)(v75 + 144);
                    *(_OWORD *)(v79 + 160) = *(_OWORD *)(v75 + 160);
                    if (v71 < v74)
                      break;
                    v83 = 2 * v74;
                    v74 = (2 * v74) | 1;
                    v75 = v8 + 176 * v74;
                    v84 = v83 + 2;
                    if (v84 < v10 && *(double *)v75 < *(double *)(v75 + 176))
                    {
                      v75 += 176;
                      v74 = v84;
                    }
                    v77 = *(double *)v75;
                  }
                  while (*(double *)v75 >= v78);
                  *(double *)v76 = v78;
                  *(_OWORD *)(v76 + 8) = v209;
                  *(_QWORD *)(v76 + 72) = v241;
                  *(_OWORD *)(v76 + 40) = v225;
                  *(_OWORD *)(v76 + 56) = v233;
                  *(_OWORD *)(v76 + 24) = v217;
                  *(_OWORD *)(v76 + 80) = v146;
                  *(_OWORD *)(v76 + 96) = v201;
                  *(_OWORD *)(v76 + 112) = v193;
                  *(_OWORD *)(v76 + 128) = v185;
                  *(_OWORD *)(v76 + 144) = v177;
                  *(_OWORD *)(v76 + 160) = v169;
                }
              }
              v72 = v73 - 1;
            }
            while (v73);
            v85 = v9 / 0xB0uLL;
            do
            {
              if (v85 >= 2)
              {
                v87 = 0;
                v88 = *(double *)v8;
                v160 = *(_QWORD *)(v8 + 72);
                v154 = *(_OWORD *)(v8 + 40);
                v157 = *(_OWORD *)(v8 + 56);
                v151 = *(_OWORD *)(v8 + 24);
                v140 = *(_OWORD *)(v8 + 80);
                v147 = *(_OWORD *)(v8 + 8);
                v134 = *(_OWORD *)(v8 + 112);
                v137 = *(_OWORD *)(v8 + 96);
                v128 = *(_OWORD *)(v8 + 144);
                v131 = *(_OWORD *)(v8 + 128);
                v89 = v8;
                v125 = *(_OWORD *)(v8 + 160);
                do
                {
                  v93 = v89;
                  v89 += 176 * v87 + 176;
                  v94 = 2 * v87;
                  v87 = (2 * v87) | 1;
                  v95 = v94 + 2;
                  if (v95 < v85 && *(double *)v89 < *(double *)(v89 + 176))
                  {
                    v89 += 176;
                    v87 = v95;
                  }
                  *(_QWORD *)v93 = *(_QWORD *)v89;
                  *(_OWORD *)(v93 + 8) = *(_OWORD *)(v89 + 8);
                  v90 = *(_OWORD *)(v89 + 24);
                  v91 = *(_OWORD *)(v89 + 40);
                  v92 = *(_OWORD *)(v89 + 56);
                  *(_QWORD *)(v93 + 72) = *(_QWORD *)(v89 + 72);
                  *(_OWORD *)(v93 + 56) = v92;
                  *(_OWORD *)(v93 + 40) = v91;
                  *(_OWORD *)(v93 + 24) = v90;
                  *(_OWORD *)(v93 + 80) = *(_OWORD *)(v89 + 80);
                  *(_OWORD *)(v93 + 96) = *(_OWORD *)(v89 + 96);
                  *(_OWORD *)(v93 + 112) = *(_OWORD *)(v89 + 112);
                  *(_OWORD *)(v93 + 128) = *(_OWORD *)(v89 + 128);
                  *(_OWORD *)(v93 + 144) = *(_OWORD *)(v89 + 144);
                  *(_OWORD *)(v93 + 160) = *(_OWORD *)(v89 + 160);
                }
                while (v87 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                v96 = (__int128 *)(v89 + 8);
                v97 = (__int128 *)(v89 + 80);
                v98 = (__int128 *)(v89 + 96);
                v99 = (__int128 *)(v89 + 112);
                v100 = (__int128 *)(v89 + 128);
                v101 = (__int128 *)(v89 + 144);
                v102 = (__int128 *)(v89 + 160);
                if (v89 == a2 - 176)
                {
                  *(double *)v89 = v88;
                  *v96 = v147;
                  *(_QWORD *)(v89 + 72) = v160;
                  *(_OWORD *)(v89 + 40) = v154;
                  *(_OWORD *)(v89 + 56) = v157;
                  *(_OWORD *)(v89 + 24) = v151;
                  *v97 = v140;
                  *v98 = v137;
                  *v99 = v134;
                  *v100 = v131;
                  *v101 = v128;
                  *v102 = v125;
                }
                else
                {
                  *(_QWORD *)v89 = *(_QWORD *)(a2 - 176);
                  *v96 = *(_OWORD *)(a2 - 168);
                  v103 = *(_OWORD *)(a2 - 152);
                  v104 = *(_OWORD *)(a2 - 136);
                  v105 = *(_OWORD *)(a2 - 120);
                  *(_QWORD *)(v89 + 72) = *(_QWORD *)(a2 - 104);
                  *(_OWORD *)(v89 + 40) = v104;
                  *(_OWORD *)(v89 + 56) = v105;
                  *(_OWORD *)(v89 + 24) = v103;
                  *v97 = *(_OWORD *)(a2 - 96);
                  *v98 = *(_OWORD *)(a2 - 80);
                  *v99 = *(_OWORD *)(a2 - 64);
                  *v100 = *(_OWORD *)(a2 - 48);
                  *v101 = *(_OWORD *)(a2 - 32);
                  *v102 = *(_OWORD *)(a2 - 16);
                  *(double *)(a2 - 176) = v88;
                  *(_OWORD *)(a2 - 168) = v147;
                  *(_QWORD *)(a2 - 104) = v160;
                  *(_OWORD *)(a2 - 120) = v157;
                  *(_OWORD *)(a2 - 136) = v154;
                  *(_OWORD *)(a2 - 152) = v151;
                  *(_OWORD *)(a2 - 96) = v140;
                  *(_OWORD *)(a2 - 80) = v137;
                  *(_OWORD *)(a2 - 64) = v134;
                  *(_OWORD *)(a2 - 48) = v131;
                  *(_OWORD *)(a2 - 32) = v128;
                  *(_OWORD *)(a2 - 16) = v125;
                  v106 = v89 - v8 + 176;
                  if (v106 >= 177)
                  {
                    v107 = (v106 / 0xB0uLL - 2) >> 1;
                    v108 = v8 + 176 * v107;
                    v109 = *(double *)v108;
                    v110 = *(double *)v89;
                    if (*(double *)v108 < *(double *)v89)
                    {
                      v210 = *v96;
                      v242 = *(_QWORD *)(v89 + 72);
                      v226 = *(_OWORD *)(v89 + 40);
                      v234 = *(_OWORD *)(v89 + 56);
                      v218 = *(_OWORD *)(v89 + 24);
                      v202 = *v97;
                      v194 = *v98;
                      v186 = *v99;
                      v178 = *v100;
                      v170 = *v101;
                      v163 = *v102;
                      do
                      {
                        v111 = v89;
                        v89 = v108;
                        *(double *)v111 = v109;
                        *(_OWORD *)(v111 + 8) = *(_OWORD *)(v108 + 8);
                        v112 = *(_OWORD *)(v108 + 24);
                        v113 = *(_OWORD *)(v108 + 40);
                        v114 = *(_OWORD *)(v108 + 56);
                        *(_QWORD *)(v111 + 72) = *(_QWORD *)(v108 + 72);
                        *(_OWORD *)(v111 + 56) = v114;
                        *(_OWORD *)(v111 + 40) = v113;
                        *(_OWORD *)(v111 + 24) = v112;
                        *(_OWORD *)(v111 + 80) = *(_OWORD *)(v108 + 80);
                        *(_OWORD *)(v111 + 96) = *(_OWORD *)(v108 + 96);
                        *(_OWORD *)(v111 + 112) = *(_OWORD *)(v108 + 112);
                        *(_OWORD *)(v111 + 128) = *(_OWORD *)(v108 + 128);
                        *(_OWORD *)(v111 + 144) = *(_OWORD *)(v108 + 144);
                        *(_OWORD *)(v111 + 160) = *(_OWORD *)(v108 + 160);
                        if (!v107)
                          break;
                        v107 = (v107 - 1) >> 1;
                        v108 = v8 + 176 * v107;
                        v109 = *(double *)v108;
                      }
                      while (*(double *)v108 < v110);
                      *(double *)v89 = v110;
                      *(_OWORD *)(v89 + 8) = v210;
                      *(_QWORD *)(v89 + 72) = v242;
                      *(_OWORD *)(v89 + 40) = v226;
                      *(_OWORD *)(v89 + 56) = v234;
                      *(_OWORD *)(v89 + 24) = v218;
                      *(_OWORD *)(v89 + 80) = v202;
                      *(_OWORD *)(v89 + 96) = v194;
                      *(_OWORD *)(v89 + 112) = v186;
                      *(_OWORD *)(v89 + 128) = v178;
                      *(_OWORD *)(v89 + 144) = v170;
                      *(_OWORD *)(v89 + 160) = v163;
                    }
                  }
                }
              }
              a2 -= 176;
            }
            while ((unint64_t)v85-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_QWORD *)(v8 + 176 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x5801)
        {
          sub_20EB53AA8((uint64_t)v12, a1, a2 - 176);
          --a3;
          v23 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_20EB53AA8(a1, (uint64_t)v12, a2 - 176);
          v13 = 176 * v11;
          v14 = a1 + 176 * v11;
          sub_20EB53AA8(a1 + 176, v14 - 176, a2 - 352);
          v15 = a1 + 176 + v13;
          sub_20EB53AA8(a1 + 352, v15, a2 - 528);
          sub_20EB53AA8(v14 - 176, (uint64_t)v12, v15);
          v16 = *(double *)a1;
          v236 = *(_QWORD *)(a1 + 72);
          v220 = *(_OWORD *)(a1 + 40);
          v228 = *(_OWORD *)(a1 + 56);
          v212 = *(_OWORD *)(a1 + 24);
          v141 = *(_OWORD *)(a1 + 80);
          v196 = *(_OWORD *)(a1 + 96);
          v204 = *(_OWORD *)(a1 + 8);
          v180 = *(_OWORD *)(a1 + 128);
          v188 = *(_OWORD *)(a1 + 112);
          v164 = *(_OWORD *)(a1 + 160);
          v172 = *(_OWORD *)(a1 + 144);
          *(_QWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v14 + 8);
          v17 = *(_OWORD *)(v14 + 24);
          v18 = *(_OWORD *)(v14 + 40);
          v19 = *(_OWORD *)(v14 + 56);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(v14 + 72);
          *(_OWORD *)(a1 + 56) = v19;
          *(_OWORD *)(a1 + 40) = v18;
          *(_OWORD *)(a1 + 24) = v17;
          v20 = *(_OWORD *)(v14 + 96);
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(v14 + 80);
          *(_OWORD *)(a1 + 96) = v20;
          v21 = *(_OWORD *)(v14 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v14 + 112);
          *(_OWORD *)(a1 + 128) = v21;
          v22 = *(_OWORD *)(v14 + 160);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v14 + 144);
          *(_OWORD *)(a1 + 160) = v22;
          *(double *)v12 = v16;
          *(_OWORD *)(v14 + 8) = v204;
          *(_QWORD *)(v14 + 72) = v236;
          *(_OWORD *)(v14 + 56) = v228;
          *(_OWORD *)(v14 + 40) = v220;
          *(_OWORD *)(v14 + 24) = v212;
          *(_OWORD *)(v14 + 80) = v141;
          *(_OWORD *)(v14 + 96) = v196;
          *(_OWORD *)(v14 + 112) = v188;
          *(_OWORD *)(v14 + 128) = v180;
          *(_OWORD *)(v14 + 144) = v172;
          *(_OWORD *)(v14 + 160) = v164;
          --a3;
          v23 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(double *)(a1 - 176) >= v23)
        {
          v159 = *(_QWORD *)(a1 + 72);
          v153 = *(_OWORD *)(a1 + 40);
          v156 = *(_OWORD *)(a1 + 56);
          v143 = *(_OWORD *)(a1 + 8);
          v150 = *(_OWORD *)(a1 + 24);
          v136 = *(_OWORD *)(a1 + 96);
          v139 = *(_OWORD *)(a1 + 80);
          v130 = *(_OWORD *)(a1 + 128);
          v133 = *(_OWORD *)(a1 + 112);
          v124 = *(_OWORD *)(a1 + 160);
          v127 = *(_OWORD *)(a1 + 144);
          if (v23 >= *(double *)(a2 - 176))
          {
            v41 = a1 + 176;
            do
            {
              v8 = v41;
              if (v41 >= a2)
                break;
              v41 += 176;
            }
            while (v23 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v40 = *(double *)(v8 + 176);
              v8 += 176;
            }
            while (v23 >= v40);
          }
          v42 = a2;
          if (v8 < a2)
          {
            v42 = a2;
            do
            {
              v43 = *(double *)(v42 - 176);
              v42 -= 176;
            }
            while (v23 < v43);
          }
          if (v8 < v42)
          {
            v44 = *(double *)v8;
            do
            {
              v238 = *(_QWORD *)(v8 + 72);
              v222 = *(_OWORD *)(v8 + 40);
              v230 = *(_OWORD *)(v8 + 56);
              v206 = *(_OWORD *)(v8 + 8);
              v214 = *(_OWORD *)(v8 + 24);
              v190 = *(_OWORD *)(v8 + 96);
              v198 = *(_OWORD *)(v8 + 80);
              v182 = *(_OWORD *)(v8 + 112);
              v166 = *(_OWORD *)(v8 + 144);
              v174 = *(_OWORD *)(v8 + 128);
              v162 = *(_OWORD *)(v8 + 160);
              *(_QWORD *)v8 = *(_QWORD *)v42;
              *(_OWORD *)(v8 + 8) = *(_OWORD *)(v42 + 8);
              v45 = *(_OWORD *)(v42 + 24);
              v46 = *(_OWORD *)(v42 + 40);
              v47 = *(_OWORD *)(v42 + 56);
              *(_QWORD *)(v8 + 72) = *(_QWORD *)(v42 + 72);
              *(_OWORD *)(v8 + 56) = v47;
              *(_OWORD *)(v8 + 40) = v46;
              *(_OWORD *)(v8 + 24) = v45;
              *(_OWORD *)(v8 + 80) = *(_OWORD *)(v42 + 80);
              *(_OWORD *)(v8 + 96) = *(_OWORD *)(v42 + 96);
              *(_OWORD *)(v8 + 112) = *(_OWORD *)(v42 + 112);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v42 + 128);
              *(_OWORD *)(v8 + 144) = *(_OWORD *)(v42 + 144);
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v42 + 160);
              *(double *)v42 = v44;
              *(_OWORD *)(v42 + 8) = v206;
              *(_QWORD *)(v42 + 72) = v238;
              *(_OWORD *)(v42 + 56) = v230;
              *(_OWORD *)(v42 + 40) = v222;
              *(_OWORD *)(v42 + 24) = v214;
              *(_OWORD *)(v42 + 80) = v198;
              *(_OWORD *)(v42 + 96) = v190;
              *(_OWORD *)(v42 + 112) = v182;
              *(_OWORD *)(v42 + 128) = v174;
              *(_OWORD *)(v42 + 144) = v166;
              *(_OWORD *)(v42 + 160) = v162;
              do
              {
                v48 = *(double *)(v8 + 176);
                v8 += 176;
                v44 = v48;
              }
              while (v23 >= v48);
              do
              {
                v49 = *(double *)(v42 - 176);
                v42 -= 176;
              }
              while (v23 < v49);
            }
            while (v8 < v42);
          }
          if (v8 - 176 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 176);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 168);
            v50 = *(_OWORD *)(v8 - 152);
            v51 = *(_OWORD *)(v8 - 136);
            v52 = *(_OWORD *)(v8 - 120);
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 - 104);
            *(_OWORD *)(a1 + 40) = v51;
            *(_OWORD *)(a1 + 56) = v52;
            *(_OWORD *)(a1 + 24) = v50;
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 64);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 48);
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(v8 - 16);
          }
          a4 = 0;
          *(double *)(v8 - 176) = v23;
          *(_OWORD *)(v8 - 168) = v143;
          *(_QWORD *)(v8 - 104) = v159;
          *(_OWORD *)(v8 - 120) = v156;
          *(_OWORD *)(v8 - 136) = v153;
          *(_OWORD *)(v8 - 152) = v150;
          *(_OWORD *)(v8 - 96) = v139;
          *(_OWORD *)(v8 - 80) = v136;
          *(_OWORD *)(v8 - 64) = v133;
          *(_OWORD *)(v8 - 48) = v130;
          *(_OWORD *)(v8 - 32) = v127;
          *(_OWORD *)(v8 - 16) = v124;
          continue;
        }
LABEL_10:
        v24 = 0;
        v158 = *(_QWORD *)(a1 + 72);
        v152 = *(_OWORD *)(a1 + 40);
        v155 = *(_OWORD *)(a1 + 56);
        v142 = *(_OWORD *)(a1 + 8);
        v149 = *(_OWORD *)(a1 + 24);
        v135 = *(_OWORD *)(a1 + 96);
        v138 = *(_OWORD *)(a1 + 80);
        v129 = *(_OWORD *)(a1 + 128);
        v132 = *(_OWORD *)(a1 + 112);
        v123 = *(_OWORD *)(a1 + 160);
        v126 = *(_OWORD *)(a1 + 144);
        do
        {
          v25 = *(double *)(a1 + v24 + 176);
          v24 += 176;
        }
        while (v25 < v23);
        v26 = a1 + v24;
        v27 = a2;
        if (v24 == 176)
        {
          v27 = a2;
          do
          {
            if (v26 >= v27)
              break;
            v29 = *(double *)(v27 - 176);
            v27 -= 176;
          }
          while (v29 >= v23);
        }
        else
        {
          do
          {
            v28 = *(double *)(v27 - 176);
            v27 -= 176;
          }
          while (v28 >= v23);
        }
        v8 = a1 + v24;
        if (v26 < v27)
        {
          v30 = v27;
          do
          {
            v237 = *(_QWORD *)(v8 + 72);
            v221 = *(_OWORD *)(v8 + 40);
            v229 = *(_OWORD *)(v8 + 56);
            v205 = *(_OWORD *)(v8 + 8);
            v213 = *(_OWORD *)(v8 + 24);
            v189 = *(_OWORD *)(v8 + 96);
            v197 = *(_OWORD *)(v8 + 80);
            v181 = *(_OWORD *)(v8 + 112);
            v165 = *(_OWORD *)(v8 + 144);
            v173 = *(_OWORD *)(v8 + 128);
            v161 = *(_OWORD *)(v8 + 160);
            *(_QWORD *)v8 = *(_QWORD *)v30;
            *(_OWORD *)(v8 + 8) = *(_OWORD *)(v30 + 8);
            v31 = *(_OWORD *)(v30 + 24);
            v32 = *(_OWORD *)(v30 + 40);
            v33 = *(_OWORD *)(v30 + 56);
            *(_QWORD *)(v8 + 72) = *(_QWORD *)(v30 + 72);
            *(_OWORD *)(v8 + 56) = v33;
            *(_OWORD *)(v8 + 40) = v32;
            *(_OWORD *)(v8 + 24) = v31;
            *(_OWORD *)(v8 + 80) = *(_OWORD *)(v30 + 80);
            *(_OWORD *)(v8 + 96) = *(_OWORD *)(v30 + 96);
            *(_OWORD *)(v8 + 112) = *(_OWORD *)(v30 + 112);
            *(_OWORD *)(v8 + 128) = *(_OWORD *)(v30 + 128);
            *(_OWORD *)(v8 + 144) = *(_OWORD *)(v30 + 144);
            *(_OWORD *)(v8 + 160) = *(_OWORD *)(v30 + 160);
            *(double *)v30 = v25;
            *(_OWORD *)(v30 + 8) = v205;
            *(_QWORD *)(v30 + 72) = v237;
            *(_OWORD *)(v30 + 56) = v229;
            *(_OWORD *)(v30 + 40) = v221;
            *(_OWORD *)(v30 + 24) = v213;
            *(_OWORD *)(v30 + 80) = v197;
            *(_OWORD *)(v30 + 96) = v189;
            *(_OWORD *)(v30 + 112) = v181;
            *(_OWORD *)(v30 + 128) = v173;
            *(_OWORD *)(v30 + 144) = v165;
            *(_OWORD *)(v30 + 160) = v161;
            do
            {
              v34 = *(double *)(v8 + 176);
              v8 += 176;
              v25 = v34;
            }
            while (v34 < v23);
            do
            {
              v35 = *(double *)(v30 - 176);
              v30 -= 176;
            }
            while (v35 >= v23);
          }
          while (v8 < v30);
        }
        if (v8 - 176 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 176);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 168);
          v36 = *(_OWORD *)(v8 - 152);
          v37 = *(_OWORD *)(v8 - 136);
          v38 = *(_OWORD *)(v8 - 120);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 - 104);
          *(_OWORD *)(a1 + 40) = v37;
          *(_OWORD *)(a1 + 56) = v38;
          *(_OWORD *)(a1 + 24) = v36;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 64);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 48);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(v8 - 16);
        }
        *(double *)(v8 - 176) = v23;
        *(_OWORD *)(v8 - 168) = v142;
        *(_QWORD *)(v8 - 104) = v158;
        *(_OWORD *)(v8 - 120) = v155;
        *(_OWORD *)(v8 - 136) = v152;
        *(_OWORD *)(v8 - 152) = v149;
        *(_OWORD *)(v8 - 96) = v138;
        *(_OWORD *)(v8 - 80) = v135;
        *(_OWORD *)(v8 - 64) = v132;
        *(_OWORD *)(v8 - 48) = v129;
        *(_OWORD *)(v8 - 32) = v126;
        *(_OWORD *)(v8 - 16) = v123;
        if (v26 < v27)
        {
LABEL_29:
          sub_20EB52890(a1, v8 - 176, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = sub_20EB53F68(a1, v8 - 176);
        if (!sub_20EB53F68(v8, a2))
        {
          if (v39)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 176;
        if (!v39)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x34F72C234F72C235 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v77 = *(double *)v8;
        if (*(double *)(a2 - 232) < *(double *)v8)
        {
          v244 = *(_QWORD *)(v8 + 104);
          v196 = *(_OWORD *)(v8 + 8);
          v204 = *(_OWORD *)(v8 + 24);
          v228 = *(_OWORD *)(v8 + 72);
          v236 = *(_OWORD *)(v8 + 88);
          v212 = *(_OWORD *)(v8 + 40);
          v220 = *(_OWORD *)(v8 + 56);
          v320 = *(_OWORD *)(v8 + 112);
          v297 = *(_QWORD *)(v8 + 144);
          v289 = *(_OWORD *)(v8 + 128);
          v275 = *(_OWORD *)(v8 + 152);
          v361 = *(_QWORD *)(v8 + 184);
          v353 = *(_OWORD *)(v8 + 168);
          v261 = *(_OWORD *)(v8 + 192);
          v342 = *(_QWORD *)(v8 + 224);
          v334 = *(_OWORD *)(v8 + 208);
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 232);
          v78 = *(_OWORD *)(a2 - 224);
          v79 = *(_OWORD *)(a2 - 208);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 - 192);
          *(_OWORD *)(v8 + 24) = v79;
          *(_OWORD *)(v8 + 8) = v78;
          v80 = *(_OWORD *)(a2 - 176);
          v81 = *(_OWORD *)(a2 - 160);
          v82 = *(_OWORD *)(a2 - 144);
          *(_QWORD *)(v8 + 104) = *(_QWORD *)(a2 - 128);
          *(_OWORD *)(v8 + 88) = v82;
          *(_OWORD *)(v8 + 72) = v81;
          *(_OWORD *)(v8 + 56) = v80;
          *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 - 120);
          v83 = *(_OWORD *)(a2 - 104);
          *(_QWORD *)(v8 + 144) = *(_QWORD *)(a2 - 88);
          *(_OWORD *)(v8 + 128) = v83;
          *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 - 80);
          v84 = *(_OWORD *)(a2 - 64);
          *(_QWORD *)(v8 + 184) = *(_QWORD *)(a2 - 48);
          *(_OWORD *)(v8 + 168) = v84;
          *(_OWORD *)(v8 + 192) = *(_OWORD *)(a2 - 40);
          v85 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 224) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 208) = v85;
          *(double *)(a2 - 232) = v77;
          *(_OWORD *)(a2 - 224) = v196;
          *(_OWORD *)(a2 - 208) = v204;
          *(_OWORD *)(a2 - 192) = v212;
          *(_QWORD *)(a2 - 128) = v244;
          *(_OWORD *)(a2 - 160) = v228;
          *(_OWORD *)(a2 - 144) = v236;
          *(_OWORD *)(a2 - 176) = v220;
          *(_OWORD *)(a2 - 120) = v320;
          *(_OWORD *)(a2 - 104) = v289;
          *(_QWORD *)(a2 - 88) = v297;
          *(_OWORD *)(a2 - 80) = v275;
          *(_QWORD *)(a2 - 48) = v361;
          *(_OWORD *)(a2 - 64) = v353;
          *(_OWORD *)(a2 - 40) = v261;
          *(_QWORD *)(a2 - 8) = v342;
          *(_OWORD *)(a2 - 24) = v334;
        }
        return;
      case 3:
        sub_20EB61898(v8, v8 + 232, a2 - 232);
        return;
      case 4:
        sub_20EB62410(v8, v8 + 232, v8 + 464, a2 - 232);
        return;
      case 5:
        sub_20EB628D8(v8, v8 + 232, v8 + 464, v8 + 696, a2 - 232);
        return;
      default:
        if (v9 <= 5567)
        {
          v86 = v8 + 232;
          v88 = v8 == a2 || v86 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v88)
            {
              v89 = 0;
              v90 = v8;
              do
              {
                v92 = v86;
                v93 = *(double *)(v90 + 232);
                if (v93 < *(double *)v90)
                {
                  v229 = *(_OWORD *)(v90 + 304);
                  v237 = *(_OWORD *)(v90 + 320);
                  v197 = *(_OWORD *)(v90 + 240);
                  v205 = *(_OWORD *)(v90 + 256);
                  v213 = *(_OWORD *)(v90 + 272);
                  v221 = *(_OWORD *)(v90 + 288);
                  v321 = *(_OWORD *)(v90 + 344);
                  v290 = *(_OWORD *)(v90 + 360);
                  v276 = *(_OWORD *)(v90 + 384);
                  v354 = *(_OWORD *)(v90 + 400);
                  v262 = *(_OWORD *)(v90 + 424);
                  v245 = *(_QWORD *)(v90 + 336);
                  v298 = *(_QWORD *)(v90 + 376);
                  v362 = *(_QWORD *)(v90 + 416);
                  v343 = *(_QWORD *)(v90 + 456);
                  v335 = *(_OWORD *)(v90 + 440);
                  v94 = v89;
                  v95 = *(double *)v90;
                  do
                  {
                    v96 = v8 + v94;
                    *(double *)(v96 + 232) = v95;
                    v97 = *(_OWORD *)(v8 + v94 + 56);
                    v98 = *(_OWORD *)(v8 + v94 + 88);
                    *(_OWORD *)(v96 + 304) = *(_OWORD *)(v8 + v94 + 72);
                    *(_OWORD *)(v96 + 320) = v98;
                    v99 = *(_OWORD *)(v8 + v94 + 24);
                    *(_OWORD *)(v96 + 240) = *(_OWORD *)(v8 + v94 + 8);
                    *(_OWORD *)(v96 + 256) = v99;
                    *(_OWORD *)(v96 + 272) = *(_OWORD *)(v8 + v94 + 40);
                    *(_OWORD *)(v96 + 288) = v97;
                    v100 = *(_OWORD *)(v8 + v94 + 128);
                    *(_OWORD *)(v8 + v94 + 344) = *(_OWORD *)(v8 + v94 + 112);
                    *(_OWORD *)(v8 + v94 + 360) = v100;
                    v101 = *(_OWORD *)(v8 + v94 + 168);
                    *(_OWORD *)(v96 + 384) = *(_OWORD *)(v8 + v94 + 152);
                    *(_OWORD *)(v96 + 400) = v101;
                    v102 = *(_OWORD *)(v8 + v94 + 208);
                    *(_OWORD *)(v8 + v94 + 424) = *(_OWORD *)(v8 + v94 + 192);
                    *(_QWORD *)(v96 + 336) = *(_QWORD *)(v8 + v94 + 104);
                    *(_QWORD *)(v96 + 376) = *(_QWORD *)(v8 + v94 + 144);
                    *(_QWORD *)(v96 + 416) = *(_QWORD *)(v8 + v94 + 184);
                    *(_QWORD *)(v96 + 456) = *(_QWORD *)(v8 + v94 + 224);
                    *(_OWORD *)(v8 + v94 + 440) = v102;
                    if (!v94)
                    {
                      v91 = (double *)v8;
                      goto LABEL_67;
                    }
                    v95 = *(double *)(v96 - 232);
                    v94 -= 232;
                  }
                  while (v93 < v95);
                  v91 = (double *)(v8 + v94 + 232);
LABEL_67:
                  *v91 = v93;
                  *(_OWORD *)(v96 + 8) = v197;
                  *(_OWORD *)(v96 + 24) = v205;
                  *(_OWORD *)(v96 + 40) = v213;
                  *(_QWORD *)(v96 + 104) = v245;
                  *(_OWORD *)(v96 + 88) = v237;
                  *(_OWORD *)(v96 + 72) = v229;
                  *(_OWORD *)(v96 + 56) = v221;
                  *(_OWORD *)(v96 + 112) = v321;
                  *(_OWORD *)(v96 + 128) = v290;
                  *(_QWORD *)(v96 + 144) = v298;
                  *(_OWORD *)(v96 + 152) = v276;
                  *(_QWORD *)(v96 + 184) = v362;
                  *(_OWORD *)(v96 + 168) = v354;
                  *(_OWORD *)(v96 + 192) = v262;
                  *(_QWORD *)(v96 + 224) = v343;
                  *(_OWORD *)(v96 + 208) = v335;
                }
                v86 = v92 + 232;
                v89 += 232;
                v90 = v92;
              }
              while (v92 + 232 != a2);
            }
          }
          else if (!v88)
          {
            do
            {
              v181 = v86;
              v182 = *(double *)(a1 + 232);
              if (v182 < *(double *)a1)
              {
                v232 = *(_OWORD *)(a1 + 304);
                v240 = *(_OWORD *)(a1 + 320);
                v200 = *(_OWORD *)(a1 + 240);
                v208 = *(_OWORD *)(a1 + 256);
                v216 = *(_OWORD *)(a1 + 272);
                v224 = *(_OWORD *)(a1 + 288);
                v324 = *(_OWORD *)(a1 + 344);
                v293 = *(_OWORD *)(a1 + 360);
                v279 = *(_OWORD *)(a1 + 384);
                v357 = *(_OWORD *)(a1 + 400);
                v265 = *(_OWORD *)(a1 + 424);
                v248 = *(_QWORD *)(a1 + 336);
                v301 = *(_QWORD *)(a1 + 376);
                v365 = *(_QWORD *)(a1 + 416);
                v346 = *(_QWORD *)(a1 + 456);
                v338 = *(_OWORD *)(a1 + 440);
                v183 = *(double *)a1;
                do
                {
                  *(double *)(a1 + 232) = v183;
                  v184 = *(_OWORD *)(a1 + 56);
                  v185 = *(_OWORD *)(a1 + 88);
                  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 72);
                  *(_OWORD *)(a1 + 320) = v185;
                  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 104);
                  v186 = *(_OWORD *)(a1 + 24);
                  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 8);
                  *(_OWORD *)(a1 + 256) = v186;
                  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 40);
                  *(_OWORD *)(a1 + 288) = v184;
                  v187 = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a1 + 112);
                  v188 = *(_QWORD *)(a1 + 144);
                  v189 = *(double *)(a1 - 232);
                  a1 -= 232;
                  v183 = v189;
                  *(_QWORD *)(a1 + 608) = v188;
                  *(_OWORD *)(a1 + 592) = v187;
                  v190 = *(_OWORD *)(a1 + 400);
                  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a1 + 384);
                  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a1 + 416);
                  *(_OWORD *)(a1 + 632) = v190;
                  v191 = *(_OWORD *)(a1 + 424);
                  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 456);
                  v192 = *(_OWORD *)(a1 + 440);
                  *(_OWORD *)(a1 + 656) = v191;
                  *(_OWORD *)(a1 + 672) = v192;
                }
                while (v182 < v189);
                *(double *)(a1 + 232) = v182;
                *(_OWORD *)(a1 + 240) = v200;
                *(_OWORD *)(a1 + 256) = v208;
                *(_OWORD *)(a1 + 272) = v216;
                *(_QWORD *)(a1 + 336) = v248;
                *(_OWORD *)(a1 + 304) = v232;
                *(_OWORD *)(a1 + 320) = v240;
                *(_OWORD *)(a1 + 288) = v224;
                *(_OWORD *)(a1 + 344) = v324;
                *(_OWORD *)(a1 + 360) = v293;
                *(_QWORD *)(a1 + 376) = v301;
                *(_OWORD *)(a1 + 384) = v279;
                *(_QWORD *)(a1 + 416) = v365;
                *(_OWORD *)(a1 + 400) = v357;
                *(_OWORD *)(a1 + 424) = v265;
                *(_QWORD *)(a1 + 456) = v346;
                *(_OWORD *)(a1 + 440) = v338;
              }
              v86 += 232;
              a1 = v181;
            }
            while (v181 + 232 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v103 = (unint64_t)(v10 - 2) >> 1;
            v104 = v103;
            do
            {
              v112 = v104;
              if (v103 >= v104)
              {
                v113 = (2 * v104) | 1;
                v114 = v8 + 232 * v113;
                if (2 * v112 + 2 < v10 && *(double *)v114 < *(double *)(v114 + 232))
                {
                  v114 += 232;
                  v113 = 2 * v112 + 2;
                }
                v115 = v8 + 232 * v112;
                v116 = *(double *)v114;
                v117 = *(double *)v115;
                if (*(double *)v114 >= *(double *)v115)
                {
                  v206 = *(_OWORD *)(v115 + 24);
                  v214 = *(_OWORD *)(v115 + 40);
                  v198 = *(_OWORD *)(v115 + 8);
                  v246 = *(_QWORD *)(v115 + 104);
                  v230 = *(_OWORD *)(v115 + 72);
                  v238 = *(_OWORD *)(v115 + 88);
                  v222 = *(_OWORD *)(v115 + 56);
                  v322 = *(_OWORD *)(v115 + 112);
                  v299 = *(_QWORD *)(v115 + 144);
                  v291 = *(_OWORD *)(v115 + 128);
                  v277 = *(_OWORD *)(v115 + 152);
                  v363 = *(_QWORD *)(v115 + 184);
                  v355 = *(_OWORD *)(v115 + 168);
                  v263 = *(_OWORD *)(v115 + 192);
                  v344 = *(_QWORD *)(v115 + 224);
                  v336 = *(_OWORD *)(v115 + 208);
                  do
                  {
                    v118 = v115;
                    v115 = v114;
                    *(double *)v118 = v116;
                    v119 = *(_OWORD *)(v114 + 8);
                    v120 = *(_OWORD *)(v114 + 24);
                    *(_OWORD *)(v118 + 40) = *(_OWORD *)(v114 + 40);
                    *(_OWORD *)(v118 + 24) = v120;
                    *(_OWORD *)(v118 + 8) = v119;
                    v121 = *(_OWORD *)(v114 + 56);
                    v122 = *(_OWORD *)(v114 + 72);
                    v123 = *(_OWORD *)(v114 + 88);
                    *(_QWORD *)(v118 + 104) = *(_QWORD *)(v114 + 104);
                    *(_OWORD *)(v118 + 88) = v123;
                    *(_OWORD *)(v118 + 72) = v122;
                    *(_OWORD *)(v118 + 56) = v121;
                    *(_OWORD *)(v118 + 112) = *(_OWORD *)(v114 + 112);
                    v124 = *(_OWORD *)(v114 + 128);
                    *(_QWORD *)(v118 + 144) = *(_QWORD *)(v114 + 144);
                    *(_OWORD *)(v118 + 128) = v124;
                    *(_OWORD *)(v118 + 152) = *(_OWORD *)(v114 + 152);
                    v125 = *(_OWORD *)(v114 + 168);
                    *(_QWORD *)(v118 + 184) = *(_QWORD *)(v114 + 184);
                    *(_OWORD *)(v118 + 168) = v125;
                    *(_OWORD *)(v118 + 192) = *(_OWORD *)(v114 + 192);
                    v126 = *(_OWORD *)(v114 + 208);
                    *(_QWORD *)(v118 + 224) = *(_QWORD *)(v114 + 224);
                    *(_OWORD *)(v118 + 208) = v126;
                    if (v103 < v113)
                      break;
                    v127 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v114 = v8 + 232 * v113;
                    v128 = v127 + 2;
                    if (v128 < v10 && *(double *)v114 < *(double *)(v114 + 232))
                    {
                      v114 += 232;
                      v113 = v128;
                    }
                    v116 = *(double *)v114;
                  }
                  while (*(double *)v114 >= v117);
                  v105 = v115 + 8;
                  *(double *)v115 = v117;
                  v106 = (_OWORD *)(v115 + 112);
                  v107 = v115 + 128;
                  v108 = (_OWORD *)(v115 + 152);
                  v109 = v115 + 168;
                  v110 = (_OWORD *)(v115 + 192);
                  v111 = v115 + 208;
                  *(_OWORD *)v105 = v198;
                  *(_QWORD *)(v105 + 96) = v246;
                  *(_OWORD *)(v105 + 16) = v206;
                  *(_OWORD *)(v105 + 32) = v214;
                  *(_OWORD *)(v105 + 64) = v230;
                  *(_OWORD *)(v105 + 80) = v238;
                  *(_OWORD *)(v105 + 48) = v222;
                  *v106 = v322;
                  *(_QWORD *)(v107 + 16) = v299;
                  *(_OWORD *)v107 = v291;
                  *v108 = v277;
                  *(_QWORD *)(v109 + 16) = v363;
                  *(_OWORD *)v109 = v355;
                  *v110 = v263;
                  *(_QWORD *)(v111 + 16) = v344;
                  *(_OWORD *)v111 = v336;
                }
              }
              v104 = v112 - 1;
            }
            while (v112);
            v129 = (a2 - v8) / 0xE8;
            do
            {
              if (v129 >= 2)
              {
                v131 = 0;
                v132 = *(double *)v8;
                v300 = *(_OWORD *)(v8 + 24);
                v304 = *(_OWORD *)(v8 + 40);
                v292 = *(_OWORD *)(v8 + 8);
                v316 = *(_QWORD *)(v8 + 104);
                v310 = *(_OWORD *)(v8 + 72);
                v313 = *(_OWORD *)(v8 + 88);
                v307 = *(_OWORD *)(v8 + 56);
                v285 = *(_OWORD *)(v8 + 112);
                v282 = *(_QWORD *)(v8 + 144);
                v271 = *(_OWORD *)(v8 + 152);
                v278 = *(_OWORD *)(v8 + 128);
                v268 = *(_QWORD *)(v8 + 184);
                v257 = *(_OWORD *)(v8 + 192);
                v264 = *(_OWORD *)(v8 + 168);
                v254 = *(_QWORD *)(v8 + 224);
                v133 = v8;
                v251 = *(_OWORD *)(v8 + 208);
                do
                {
                  v142 = v133;
                  v133 += 232 * v131 + 232;
                  v143 = 2 * v131;
                  v131 = (2 * v131) | 1;
                  v144 = v143 + 2;
                  if (v144 < v129 && *(double *)v133 < *(double *)(v133 + 232))
                  {
                    v133 += 232;
                    v131 = v144;
                  }
                  *(_QWORD *)v142 = *(_QWORD *)v133;
                  v134 = *(_OWORD *)(v133 + 8);
                  v135 = *(_OWORD *)(v133 + 24);
                  *(_OWORD *)(v142 + 40) = *(_OWORD *)(v133 + 40);
                  *(_OWORD *)(v142 + 24) = v135;
                  *(_OWORD *)(v142 + 8) = v134;
                  v136 = *(_OWORD *)(v133 + 56);
                  v137 = *(_OWORD *)(v133 + 72);
                  v138 = *(_OWORD *)(v133 + 88);
                  *(_QWORD *)(v142 + 104) = *(_QWORD *)(v133 + 104);
                  *(_OWORD *)(v142 + 88) = v138;
                  *(_OWORD *)(v142 + 72) = v137;
                  *(_OWORD *)(v142 + 56) = v136;
                  *(_OWORD *)(v142 + 112) = *(_OWORD *)(v133 + 112);
                  v139 = *(_OWORD *)(v133 + 128);
                  *(_QWORD *)(v142 + 144) = *(_QWORD *)(v133 + 144);
                  *(_OWORD *)(v142 + 128) = v139;
                  *(_OWORD *)(v142 + 152) = *(_OWORD *)(v133 + 152);
                  v140 = *(_OWORD *)(v133 + 168);
                  *(_QWORD *)(v142 + 184) = *(_QWORD *)(v133 + 184);
                  *(_OWORD *)(v142 + 168) = v140;
                  *(_OWORD *)(v142 + 192) = *(_OWORD *)(v133 + 192);
                  v141 = *(_OWORD *)(v133 + 208);
                  *(_QWORD *)(v142 + 224) = *(_QWORD *)(v133 + 224);
                  *(_OWORD *)(v142 + 208) = v141;
                }
                while (v131 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                v145 = (__int128 *)(v133 + 8);
                v146 = (__int128 *)(v133 + 112);
                v147 = (__int128 *)(v133 + 128);
                v148 = (__int128 *)(v133 + 152);
                v149 = (__int128 *)(v133 + 168);
                v150 = (__int128 *)(v133 + 192);
                v151 = (__int128 *)(v133 + 208);
                if (v133 == a2 - 232)
                {
                  *(double *)v133 = v132;
                  *v145 = v292;
                  *(_OWORD *)(v133 + 24) = v300;
                  *(_OWORD *)(v133 + 40) = v304;
                  *(_QWORD *)(v133 + 104) = v316;
                  *(_OWORD *)(v133 + 72) = v310;
                  *(_OWORD *)(v133 + 88) = v313;
                  *(_OWORD *)(v133 + 56) = v307;
                  *v146 = v285;
                  *v147 = v278;
                  *(_QWORD *)(v133 + 144) = v282;
                  *v148 = v271;
                  *(_QWORD *)(v133 + 184) = v268;
                  *v149 = v264;
                  *v150 = v257;
                  *(_QWORD *)(v133 + 224) = v254;
                  *v151 = v251;
                }
                else
                {
                  *(_QWORD *)v133 = *(_QWORD *)(a2 - 232);
                  v152 = *(_OWORD *)(a2 - 224);
                  v153 = *(_OWORD *)(a2 - 192);
                  *(_OWORD *)(v133 + 24) = *(_OWORD *)(a2 - 208);
                  *(_OWORD *)(v133 + 40) = v153;
                  *v145 = v152;
                  v154 = *(_OWORD *)(a2 - 176);
                  v155 = *(_OWORD *)(a2 - 160);
                  v156 = *(_OWORD *)(a2 - 144);
                  *(_QWORD *)(v133 + 104) = *(_QWORD *)(a2 - 128);
                  *(_OWORD *)(v133 + 72) = v155;
                  *(_OWORD *)(v133 + 88) = v156;
                  *(_OWORD *)(v133 + 56) = v154;
                  *v146 = *(_OWORD *)(a2 - 120);
                  v157 = *(_OWORD *)(a2 - 104);
                  *(_QWORD *)(v133 + 144) = *(_QWORD *)(a2 - 88);
                  *v147 = v157;
                  *v148 = *(_OWORD *)(a2 - 80);
                  v158 = *(_OWORD *)(a2 - 64);
                  *(_QWORD *)(v133 + 184) = *(_QWORD *)(a2 - 48);
                  *v149 = v158;
                  *v150 = *(_OWORD *)(a2 - 40);
                  v159 = *(_OWORD *)(a2 - 24);
                  *(_QWORD *)(v133 + 224) = *(_QWORD *)(a2 - 8);
                  *v151 = v159;
                  *(double *)(a2 - 232) = v132;
                  *(_OWORD *)(a2 - 224) = v292;
                  *(_OWORD *)(a2 - 208) = v300;
                  *(_OWORD *)(a2 - 192) = v304;
                  *(_QWORD *)(a2 - 128) = v316;
                  *(_OWORD *)(a2 - 160) = v310;
                  *(_OWORD *)(a2 - 144) = v313;
                  *(_OWORD *)(a2 - 176) = v307;
                  *(_OWORD *)(a2 - 120) = v285;
                  *(_OWORD *)(a2 - 104) = v278;
                  *(_QWORD *)(a2 - 88) = v282;
                  *(_OWORD *)(a2 - 80) = v271;
                  *(_QWORD *)(a2 - 48) = v268;
                  *(_OWORD *)(a2 - 64) = v264;
                  *(_OWORD *)(a2 - 40) = v257;
                  *(_QWORD *)(a2 - 8) = v254;
                  *(_OWORD *)(a2 - 24) = v251;
                  v160 = v133 - v8 + 232;
                  if (v160 >= 233)
                  {
                    v161 = (v160 / 0xE8uLL - 2) >> 1;
                    v162 = v8 + 232 * v161;
                    v163 = *(double *)v162;
                    v164 = *(double *)v133;
                    if (*(double *)v162 < *(double *)v133)
                    {
                      v207 = *(_OWORD *)(v133 + 24);
                      v215 = *(_OWORD *)(v133 + 40);
                      v199 = *v145;
                      v247 = *(_QWORD *)(v133 + 104);
                      v231 = *(_OWORD *)(v133 + 72);
                      v239 = *(_OWORD *)(v133 + 88);
                      v223 = *(_OWORD *)(v133 + 56);
                      v368 = *v146;
                      v364 = *(_QWORD *)(v133 + 144);
                      v356 = *v147;
                      v349 = *v148;
                      v345 = *(_QWORD *)(v133 + 184);
                      v337 = *v149;
                      v330 = *v150;
                      v327 = *(_QWORD *)(v133 + 224);
                      v323 = *v151;
                      do
                      {
                        v165 = v133;
                        v133 = v162;
                        *(double *)v165 = v163;
                        v166 = *(_OWORD *)(v162 + 8);
                        v167 = *(_OWORD *)(v162 + 24);
                        *(_OWORD *)(v165 + 40) = *(_OWORD *)(v162 + 40);
                        *(_OWORD *)(v165 + 24) = v167;
                        *(_OWORD *)(v165 + 8) = v166;
                        v168 = *(_OWORD *)(v162 + 56);
                        v169 = *(_OWORD *)(v162 + 72);
                        v170 = *(_OWORD *)(v162 + 88);
                        *(_QWORD *)(v165 + 104) = *(_QWORD *)(v162 + 104);
                        *(_OWORD *)(v165 + 88) = v170;
                        *(_OWORD *)(v165 + 72) = v169;
                        *(_OWORD *)(v165 + 56) = v168;
                        *(_OWORD *)(v165 + 112) = *(_OWORD *)(v162 + 112);
                        v171 = *(_OWORD *)(v162 + 128);
                        *(_QWORD *)(v165 + 144) = *(_QWORD *)(v162 + 144);
                        *(_OWORD *)(v165 + 128) = v171;
                        *(_OWORD *)(v165 + 152) = *(_OWORD *)(v162 + 152);
                        v172 = *(_OWORD *)(v162 + 168);
                        *(_QWORD *)(v165 + 184) = *(_QWORD *)(v162 + 184);
                        *(_OWORD *)(v165 + 168) = v172;
                        *(_OWORD *)(v165 + 192) = *(_OWORD *)(v162 + 192);
                        v173 = *(_OWORD *)(v162 + 208);
                        *(_QWORD *)(v165 + 224) = *(_QWORD *)(v162 + 224);
                        *(_OWORD *)(v165 + 208) = v173;
                        if (!v161)
                          break;
                        v161 = (v161 - 1) >> 1;
                        v162 = v8 + 232 * v161;
                        v163 = *(double *)v162;
                      }
                      while (*(double *)v162 < v164);
                      v174 = v133 + 8;
                      *(double *)v133 = v164;
                      v175 = (_OWORD *)(v133 + 112);
                      v176 = v133 + 128;
                      v177 = (_OWORD *)(v133 + 152);
                      v178 = v133 + 168;
                      v179 = (_OWORD *)(v133 + 192);
                      v180 = v133 + 208;
                      *(_OWORD *)v174 = v199;
                      *(_QWORD *)(v174 + 96) = v247;
                      *(_OWORD *)(v174 + 16) = v207;
                      *(_OWORD *)(v174 + 32) = v215;
                      *(_OWORD *)(v174 + 64) = v231;
                      *(_OWORD *)(v174 + 80) = v239;
                      *(_OWORD *)(v174 + 48) = v223;
                      *v175 = v368;
                      *(_QWORD *)(v176 + 16) = v364;
                      *(_OWORD *)v176 = v356;
                      *v177 = v349;
                      *(_QWORD *)(v178 + 16) = v345;
                      *(_OWORD *)v178 = v337;
                      *v179 = v330;
                      *(_QWORD *)(v180 + 16) = v327;
                      *(_OWORD *)v180 = v323;
                    }
                  }
                }
              }
              a2 -= 232;
            }
            while ((unint64_t)v129-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_QWORD *)(v8 + 232 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x7401)
        {
          sub_20EB61898((uint64_t)v12, a1, a2 - 232);
          --a3;
          v27 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_20EB61898(a1, (uint64_t)v12, a2 - 232);
          v13 = 232 * v11;
          v14 = a1 + 232 * v11;
          sub_20EB61898(a1 + 232, v14 - 232, a2 - 464);
          v15 = a1 + 232 + v13;
          sub_20EB61898(a1 + 464, v15, a2 - 696);
          sub_20EB61898(v14 - 232, (uint64_t)v12, v15);
          v16 = *(double *)a1;
          v201 = *(_OWORD *)(a1 + 24);
          v209 = *(_OWORD *)(a1 + 40);
          v193 = *(_OWORD *)(a1 + 8);
          v241 = *(_QWORD *)(a1 + 104);
          v225 = *(_OWORD *)(a1 + 72);
          v233 = *(_OWORD *)(a1 + 88);
          v217 = *(_OWORD *)(a1 + 56);
          v317 = *(_OWORD *)(a1 + 112);
          v294 = *(_QWORD *)(a1 + 144);
          v286 = *(_OWORD *)(a1 + 128);
          v272 = *(_OWORD *)(a1 + 152);
          v358 = *(_QWORD *)(a1 + 184);
          v350 = *(_OWORD *)(a1 + 168);
          v258 = *(_OWORD *)(a1 + 192);
          v339 = *(_QWORD *)(a1 + 224);
          v331 = *(_OWORD *)(a1 + 208);
          *(_QWORD *)a1 = *v12;
          v17 = *(_OWORD *)(v14 + 8);
          v18 = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(v14 + 40);
          *(_OWORD *)(a1 + 24) = v18;
          *(_OWORD *)(a1 + 8) = v17;
          v19 = *(_OWORD *)(v14 + 56);
          v20 = *(_OWORD *)(v14 + 72);
          v21 = *(_OWORD *)(v14 + 88);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(v14 + 104);
          *(_OWORD *)(a1 + 88) = v21;
          *(_OWORD *)(a1 + 72) = v20;
          *(_OWORD *)(a1 + 56) = v19;
          v22 = *(_OWORD *)(v14 + 112);
          v23 = *(_OWORD *)(v14 + 128);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(v14 + 144);
          *(_OWORD *)(a1 + 112) = v22;
          *(_OWORD *)(a1 + 128) = v23;
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(v14 + 152);
          v24 = *(_OWORD *)(v14 + 168);
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(v14 + 184);
          *(_OWORD *)(a1 + 168) = v24;
          v25 = *(_OWORD *)(v14 + 192);
          v26 = *(_OWORD *)(v14 + 208);
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(v14 + 224);
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 208) = v26;
          *(double *)v12 = v16;
          *(_OWORD *)(v14 + 8) = v193;
          *(_OWORD *)(v14 + 24) = v201;
          *(_OWORD *)(v14 + 40) = v209;
          *(_QWORD *)(v14 + 104) = v241;
          *(_OWORD *)(v14 + 88) = v233;
          *(_OWORD *)(v14 + 72) = v225;
          *(_OWORD *)(v14 + 56) = v217;
          *(_OWORD *)(v14 + 112) = v317;
          *(_OWORD *)(v14 + 128) = v286;
          *(_QWORD *)(v14 + 144) = v294;
          *(_OWORD *)(v14 + 152) = v272;
          *(_QWORD *)(v14 + 184) = v358;
          *(_OWORD *)(v14 + 168) = v350;
          *(_OWORD *)(v14 + 192) = v258;
          *(_QWORD *)(v14 + 224) = v339;
          *(_OWORD *)(v14 + 208) = v331;
          --a3;
          v27 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(double *)(a1 - 232) >= v27)
        {
          v315 = *(_QWORD *)(a1 + 104);
          v288 = *(_OWORD *)(a1 + 8);
          v296 = *(_OWORD *)(a1 + 24);
          v309 = *(_OWORD *)(a1 + 72);
          v312 = *(_OWORD *)(a1 + 88);
          v303 = *(_OWORD *)(a1 + 40);
          v306 = *(_OWORD *)(a1 + 56);
          v284 = *(_OWORD *)(a1 + 112);
          v281 = *(_QWORD *)(a1 + 144);
          v270 = *(_OWORD *)(a1 + 152);
          v274 = *(_OWORD *)(a1 + 128);
          v267 = *(_QWORD *)(a1 + 184);
          v256 = *(_OWORD *)(a1 + 192);
          v260 = *(_OWORD *)(a1 + 168);
          v253 = *(_QWORD *)(a1 + 224);
          v250 = *(_OWORD *)(a1 + 208);
          if (v27 >= *(double *)(a2 - 232))
          {
            v55 = a1 + 232;
            do
            {
              v8 = v55;
              if (v55 >= a2)
                break;
              v55 += 232;
            }
            while (v27 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v54 = *(double *)(v8 + 232);
              v8 += 232;
            }
            while (v27 >= v54);
          }
          v56 = a2;
          if (v8 < a2)
          {
            v56 = a2;
            do
            {
              v57 = *(double *)(v56 - 232);
              v56 -= 232;
            }
            while (v27 < v57);
          }
          if (v8 < v56)
          {
            v58 = *(double *)v8;
            do
            {
              v243 = *(_QWORD *)(v8 + 104);
              v195 = *(_OWORD *)(v8 + 8);
              v203 = *(_OWORD *)(v8 + 24);
              v227 = *(_OWORD *)(v8 + 72);
              v235 = *(_OWORD *)(v8 + 88);
              v211 = *(_OWORD *)(v8 + 40);
              v219 = *(_OWORD *)(v8 + 56);
              v367 = *(_OWORD *)(v8 + 112);
              v360 = *(_QWORD *)(v8 + 144);
              v348 = *(_OWORD *)(v8 + 152);
              v352 = *(_OWORD *)(v8 + 128);
              v341 = *(_QWORD *)(v8 + 184);
              v333 = *(_OWORD *)(v8 + 168);
              v329 = *(_OWORD *)(v8 + 192);
              v326 = *(_QWORD *)(v8 + 224);
              v319 = *(_OWORD *)(v8 + 208);
              *(_QWORD *)v8 = *(_QWORD *)v56;
              v59 = *(_OWORD *)(v56 + 8);
              v60 = *(_OWORD *)(v56 + 24);
              *(_OWORD *)(v8 + 40) = *(_OWORD *)(v56 + 40);
              *(_OWORD *)(v8 + 24) = v60;
              *(_OWORD *)(v8 + 8) = v59;
              v61 = *(_OWORD *)(v56 + 56);
              v62 = *(_OWORD *)(v56 + 72);
              v63 = *(_OWORD *)(v56 + 88);
              *(_QWORD *)(v8 + 104) = *(_QWORD *)(v56 + 104);
              *(_OWORD *)(v8 + 88) = v63;
              *(_OWORD *)(v8 + 72) = v62;
              *(_OWORD *)(v8 + 56) = v61;
              *(_OWORD *)(v8 + 112) = *(_OWORD *)(v56 + 112);
              v64 = *(_OWORD *)(v56 + 128);
              *(_QWORD *)(v8 + 144) = *(_QWORD *)(v56 + 144);
              *(_OWORD *)(v8 + 128) = v64;
              *(_OWORD *)(v8 + 152) = *(_OWORD *)(v56 + 152);
              v65 = *(_OWORD *)(v56 + 168);
              *(_QWORD *)(v8 + 184) = *(_QWORD *)(v56 + 184);
              *(_OWORD *)(v8 + 168) = v65;
              *(_OWORD *)(v8 + 192) = *(_OWORD *)(v56 + 192);
              v66 = *(_OWORD *)(v56 + 208);
              *(_QWORD *)(v8 + 224) = *(_QWORD *)(v56 + 224);
              *(_OWORD *)(v8 + 208) = v66;
              *(double *)v56 = v58;
              *(_OWORD *)(v56 + 8) = v195;
              *(_QWORD *)(v56 + 104) = v243;
              *(_OWORD *)(v56 + 40) = v211;
              *(_OWORD *)(v56 + 24) = v203;
              *(_OWORD *)(v56 + 88) = v235;
              *(_OWORD *)(v56 + 72) = v227;
              *(_OWORD *)(v56 + 56) = v219;
              *(_QWORD *)(v56 + 144) = v360;
              *(_OWORD *)(v56 + 112) = v367;
              *(_OWORD *)(v56 + 128) = v352;
              *(_OWORD *)(v56 + 152) = v348;
              *(_QWORD *)(v56 + 184) = v341;
              *(_OWORD *)(v56 + 168) = v333;
              *(_QWORD *)(v56 + 224) = v326;
              *(_OWORD *)(v56 + 192) = v329;
              *(_OWORD *)(v56 + 208) = v319;
              do
              {
                v67 = *(double *)(v8 + 232);
                v8 += 232;
                v58 = v67;
              }
              while (v27 >= v67);
              do
              {
                v68 = *(double *)(v56 - 232);
                v56 -= 232;
              }
              while (v27 < v68);
            }
            while (v8 < v56);
          }
          if (v8 - 232 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 232);
            v69 = *(_OWORD *)(v8 - 224);
            v70 = *(_OWORD *)(v8 - 192);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v8 - 208);
            *(_OWORD *)(a1 + 40) = v70;
            *(_OWORD *)(a1 + 8) = v69;
            v71 = *(_OWORD *)(v8 - 176);
            v72 = *(_OWORD *)(v8 - 160);
            v73 = *(_OWORD *)(v8 - 144);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 - 128);
            *(_OWORD *)(a1 + 72) = v72;
            *(_OWORD *)(a1 + 88) = v73;
            *(_OWORD *)(a1 + 56) = v71;
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 120);
            v74 = *(_OWORD *)(v8 - 104);
            *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 - 88);
            *(_OWORD *)(a1 + 128) = v74;
            *(_OWORD *)(a1 + 152) = *(_OWORD *)(v8 - 80);
            v75 = *(_OWORD *)(v8 - 64);
            *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 - 48);
            *(_OWORD *)(a1 + 168) = v75;
            *(_OWORD *)(a1 + 192) = *(_OWORD *)(v8 - 40);
            v76 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 224) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 208) = v76;
          }
          a4 = 0;
          *(double *)(v8 - 232) = v27;
          *(_OWORD *)(v8 - 224) = v288;
          *(_OWORD *)(v8 - 208) = v296;
          *(_OWORD *)(v8 - 192) = v303;
          *(_QWORD *)(v8 - 128) = v315;
          *(_OWORD *)(v8 - 160) = v309;
          *(_OWORD *)(v8 - 144) = v312;
          *(_OWORD *)(v8 - 120) = v284;
          *(_OWORD *)(v8 - 104) = v274;
          *(_QWORD *)(v8 - 88) = v281;
          *(_OWORD *)(v8 - 80) = v270;
          *(_QWORD *)(v8 - 48) = v267;
          *(_OWORD *)(v8 - 64) = v260;
          *(_OWORD *)(v8 - 40) = v256;
          *(_QWORD *)(v8 - 8) = v253;
          *(_OWORD *)(v8 - 176) = v306;
          *(_OWORD *)(v8 - 24) = v250;
          continue;
        }
LABEL_10:
        v28 = 0;
        v314 = *(_QWORD *)(a1 + 104);
        v287 = *(_OWORD *)(a1 + 8);
        v295 = *(_OWORD *)(a1 + 24);
        v308 = *(_OWORD *)(a1 + 72);
        v311 = *(_OWORD *)(a1 + 88);
        v302 = *(_OWORD *)(a1 + 40);
        v305 = *(_OWORD *)(a1 + 56);
        v283 = *(_OWORD *)(a1 + 112);
        v280 = *(_QWORD *)(a1 + 144);
        v269 = *(_OWORD *)(a1 + 152);
        v273 = *(_OWORD *)(a1 + 128);
        v266 = *(_QWORD *)(a1 + 184);
        v255 = *(_OWORD *)(a1 + 192);
        v259 = *(_OWORD *)(a1 + 168);
        v252 = *(_QWORD *)(a1 + 224);
        v249 = *(_OWORD *)(a1 + 208);
        do
        {
          v29 = *(double *)(a1 + v28 + 232);
          v28 += 232;
        }
        while (v29 < v27);
        v30 = a1 + v28;
        v31 = a2;
        if (v28 == 232)
        {
          v31 = a2;
          do
          {
            if (v30 >= v31)
              break;
            v33 = *(double *)(v31 - 232);
            v31 -= 232;
          }
          while (v33 >= v27);
        }
        else
        {
          do
          {
            v32 = *(double *)(v31 - 232);
            v31 -= 232;
          }
          while (v32 >= v27);
        }
        v8 = a1 + v28;
        if (v30 < v31)
        {
          v34 = v31;
          do
          {
            v242 = *(_QWORD *)(v8 + 104);
            v194 = *(_OWORD *)(v8 + 8);
            v202 = *(_OWORD *)(v8 + 24);
            v226 = *(_OWORD *)(v8 + 72);
            v234 = *(_OWORD *)(v8 + 88);
            v210 = *(_OWORD *)(v8 + 40);
            v218 = *(_OWORD *)(v8 + 56);
            v366 = *(_OWORD *)(v8 + 112);
            v359 = *(_QWORD *)(v8 + 144);
            v347 = *(_OWORD *)(v8 + 152);
            v351 = *(_OWORD *)(v8 + 128);
            v340 = *(_QWORD *)(v8 + 184);
            v332 = *(_OWORD *)(v8 + 168);
            v328 = *(_OWORD *)(v8 + 192);
            v325 = *(_QWORD *)(v8 + 224);
            v318 = *(_OWORD *)(v8 + 208);
            *(_QWORD *)v8 = *(_QWORD *)v34;
            v35 = *(_OWORD *)(v34 + 8);
            v36 = *(_OWORD *)(v34 + 24);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(v34 + 40);
            *(_OWORD *)(v8 + 24) = v36;
            *(_OWORD *)(v8 + 8) = v35;
            v37 = *(_OWORD *)(v34 + 56);
            v38 = *(_OWORD *)(v34 + 72);
            v39 = *(_OWORD *)(v34 + 88);
            *(_QWORD *)(v8 + 104) = *(_QWORD *)(v34 + 104);
            *(_OWORD *)(v8 + 88) = v39;
            *(_OWORD *)(v8 + 72) = v38;
            *(_OWORD *)(v8 + 56) = v37;
            *(_OWORD *)(v8 + 112) = *(_OWORD *)(v34 + 112);
            v40 = *(_OWORD *)(v34 + 128);
            *(_QWORD *)(v8 + 144) = *(_QWORD *)(v34 + 144);
            *(_OWORD *)(v8 + 128) = v40;
            *(_OWORD *)(v8 + 152) = *(_OWORD *)(v34 + 152);
            v41 = *(_OWORD *)(v34 + 168);
            *(_QWORD *)(v8 + 184) = *(_QWORD *)(v34 + 184);
            *(_OWORD *)(v8 + 168) = v41;
            *(_OWORD *)(v8 + 192) = *(_OWORD *)(v34 + 192);
            v42 = *(_OWORD *)(v34 + 208);
            *(_QWORD *)(v8 + 224) = *(_QWORD *)(v34 + 224);
            *(_OWORD *)(v8 + 208) = v42;
            *(double *)v34 = v29;
            *(_OWORD *)(v34 + 8) = v194;
            *(_QWORD *)(v34 + 104) = v242;
            *(_OWORD *)(v34 + 40) = v210;
            *(_OWORD *)(v34 + 24) = v202;
            *(_OWORD *)(v34 + 88) = v234;
            *(_OWORD *)(v34 + 72) = v226;
            *(_OWORD *)(v34 + 56) = v218;
            *(_QWORD *)(v34 + 144) = v359;
            *(_OWORD *)(v34 + 112) = v366;
            *(_OWORD *)(v34 + 128) = v351;
            *(_OWORD *)(v34 + 152) = v347;
            *(_QWORD *)(v34 + 184) = v340;
            *(_OWORD *)(v34 + 168) = v332;
            *(_QWORD *)(v34 + 224) = v325;
            *(_OWORD *)(v34 + 192) = v328;
            *(_OWORD *)(v34 + 208) = v318;
            do
            {
              v43 = *(double *)(v8 + 232);
              v8 += 232;
              v29 = v43;
            }
            while (v43 < v27);
            do
            {
              v44 = *(double *)(v34 - 232);
              v34 -= 232;
            }
            while (v44 >= v27);
          }
          while (v8 < v34);
        }
        if (v8 - 232 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 232);
          v45 = *(_OWORD *)(v8 - 224);
          v46 = *(_OWORD *)(v8 - 192);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v8 - 208);
          *(_OWORD *)(a1 + 40) = v46;
          *(_OWORD *)(a1 + 8) = v45;
          v47 = *(_OWORD *)(v8 - 176);
          v48 = *(_OWORD *)(v8 - 160);
          v49 = *(_OWORD *)(v8 - 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 - 128);
          *(_OWORD *)(a1 + 72) = v48;
          *(_OWORD *)(a1 + 88) = v49;
          *(_OWORD *)(a1 + 56) = v47;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 120);
          v50 = *(_OWORD *)(v8 - 104);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 - 88);
          *(_OWORD *)(a1 + 128) = v50;
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(v8 - 80);
          v51 = *(_OWORD *)(v8 - 64);
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 - 48);
          *(_OWORD *)(a1 + 168) = v51;
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(v8 - 40);
          v52 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 208) = v52;
        }
        *(double *)(v8 - 232) = v27;
        *(_OWORD *)(v8 - 224) = v287;
        *(_OWORD *)(v8 - 208) = v295;
        *(_OWORD *)(v8 - 192) = v302;
        *(_QWORD *)(v8 - 128) = v314;
        *(_OWORD *)(v8 - 160) = v308;
        *(_OWORD *)(v8 - 144) = v311;
        *(_OWORD *)(v8 - 176) = v305;
        *(_OWORD *)(v8 - 120) = v283;
        *(_OWORD *)(v8 - 104) = v273;
        *(_QWORD *)(v8 - 88) = v280;
        *(_OWORD *)(v8 - 80) = v269;
        *(_QWORD *)(v8 - 48) = v266;
        *(_OWORD *)(v8 - 64) = v259;
        *(_OWORD *)(v8 - 40) = v255;
        *(_QWORD *)(v8 - 8) = v252;
        *(_OWORD *)(v8 - 24) = v249;
        if (v30 < v31)
        {
LABEL_29:
          sub_20EB6014C(a1, v8 - 232, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = sub_20EB61FAC(a1, v8 - 232);
        if (!sub_20EB61FAC(v8, a2))
        {
          if (v53)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 232;
        if (!v53)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (_QWORD *)(a2 - 264);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xF83E0F83E0F83E1 * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v74 = *(double *)v9;
        if (*(double *)v8 < *(double *)v9)
        {
          v354 = *(_OWORD *)(v9 + 8);
          v362 = *(_OWORD *)(v9 + 24);
          v386 = *(_OWORD *)(v9 + 72);
          v394 = *(_OWORD *)(v9 + 88);
          v370 = *(_OWORD *)(v9 + 40);
          v378 = *(_OWORD *)(v9 + 56);
          v283 = *(_OWORD *)(v9 + 104);
          v263 = *(_QWORD *)(v9 + 136);
          v255 = *(_OWORD *)(v9 + 120);
          v241 = *(_OWORD *)(v9 + 144);
          v343 = *(_QWORD *)(v9 + 176);
          v335 = *(_OWORD *)(v9 + 160);
          v227 = *(_OWORD *)(v9 + 184);
          v324 = *(_QWORD *)(v9 + 216);
          v316 = *(_OWORD *)(v9 + 200);
          v213 = *(_OWORD *)(v9 + 224);
          v305 = *(_QWORD *)(v9 + 256);
          v297 = *(_OWORD *)(v9 + 240);
          *(_QWORD *)v9 = *v8;
          v75 = *(_OWORD *)(a2 - 256);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 - 240);
          *(_OWORD *)(v9 + 8) = v75;
          v76 = *(_OWORD *)(a2 - 224);
          v77 = *(_OWORD *)(a2 - 208);
          v78 = *(_OWORD *)(a2 - 192);
          *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 - 176);
          *(_OWORD *)(v9 + 72) = v78;
          *(_OWORD *)(v9 + 56) = v77;
          *(_OWORD *)(v9 + 40) = v76;
          *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 - 160);
          v79 = *(_OWORD *)(a2 - 144);
          *(_QWORD *)(v9 + 136) = *(_QWORD *)(a2 - 128);
          *(_OWORD *)(v9 + 120) = v79;
          *(_OWORD *)(v9 + 144) = *(_OWORD *)(a2 - 120);
          v80 = *(_OWORD *)(a2 - 104);
          *(_QWORD *)(v9 + 176) = *(_QWORD *)(a2 - 88);
          *(_OWORD *)(v9 + 160) = v80;
          *(_OWORD *)(v9 + 184) = *(_OWORD *)(a2 - 80);
          v81 = *(_OWORD *)(a2 - 64);
          *(_QWORD *)(v9 + 216) = *(_QWORD *)(a2 - 48);
          *(_OWORD *)(v9 + 200) = v81;
          *(_OWORD *)(v9 + 224) = *(_OWORD *)(a2 - 40);
          v82 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v9 + 256) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v9 + 240) = v82;
          *(double *)v8 = v74;
          *(_OWORD *)(a2 - 256) = v354;
          *(_OWORD *)(a2 - 240) = v362;
          *(_OWORD *)(a2 - 192) = v386;
          *(_OWORD *)(a2 - 176) = v394;
          *(_OWORD *)(a2 - 224) = v370;
          *(_OWORD *)(a2 - 208) = v378;
          *(_OWORD *)(a2 - 160) = v283;
          *(_OWORD *)(a2 - 144) = v255;
          *(_QWORD *)(a2 - 128) = v263;
          *(_OWORD *)(a2 - 120) = v241;
          *(_QWORD *)(a2 - 88) = v343;
          *(_OWORD *)(a2 - 104) = v335;
          *(_OWORD *)(a2 - 80) = v227;
          *(_OWORD *)(a2 - 64) = v316;
          *(_QWORD *)(a2 - 48) = v324;
          *(_OWORD *)(a2 - 40) = v213;
          *(_QWORD *)(a2 - 8) = v305;
          *(_OWORD *)(a2 - 24) = v297;
        }
        return;
      case 3:
        sub_20EB6C50C(v9, v9 + 264, a2 - 264);
        return;
      case 4:
        sub_20EB6D164(v9, v9 + 264, v9 + 528, a2 - 264);
        return;
      case 5:
        sub_20EB6D6B8(v9, v9 + 264, v9 + 528, v9 + 792, a2 - 264);
        return;
      default:
        if (v10 <= 6335)
        {
          v83 = v9 + 264;
          v85 = v9 == a2 || v83 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v85)
            {
              v86 = 0;
              v87 = v9;
              do
              {
                v89 = v83;
                v90 = *(double *)(v87 + 264);
                if (v90 < *(double *)v87)
                {
                  v371 = *(_OWORD *)(v87 + 304);
                  v379 = *(_OWORD *)(v87 + 320);
                  v387 = *(_OWORD *)(v87 + 336);
                  v395 = *(_OWORD *)(v87 + 352);
                  v355 = *(_OWORD *)(v87 + 272);
                  v363 = *(_OWORD *)(v87 + 288);
                  v284 = *(_OWORD *)(v87 + 368);
                  v256 = *(_OWORD *)(v87 + 384);
                  v242 = *(_OWORD *)(v87 + 408);
                  v336 = *(_OWORD *)(v87 + 424);
                  v228 = *(_OWORD *)(v87 + 448);
                  v317 = *(_OWORD *)(v87 + 464);
                  v214 = *(_OWORD *)(v87 + 488);
                  v264 = *(_QWORD *)(v87 + 400);
                  v344 = *(_QWORD *)(v87 + 440);
                  v325 = *(_QWORD *)(v87 + 480);
                  v306 = *(_QWORD *)(v87 + 520);
                  v298 = *(_OWORD *)(v87 + 504);
                  v91 = v86;
                  v92 = *(double *)v87;
                  do
                  {
                    v93 = v9 + v91;
                    *(double *)(v93 + 264) = v92;
                    v94 = *(_OWORD *)(v9 + v91 + 56);
                    *(_OWORD *)(v93 + 304) = *(_OWORD *)(v9 + v91 + 40);
                    *(_OWORD *)(v93 + 320) = v94;
                    v95 = *(_OWORD *)(v9 + v91 + 88);
                    *(_OWORD *)(v93 + 336) = *(_OWORD *)(v9 + v91 + 72);
                    *(_OWORD *)(v93 + 352) = v95;
                    v96 = *(_OWORD *)(v9 + v91 + 24);
                    *(_OWORD *)(v93 + 272) = *(_OWORD *)(v9 + v91 + 8);
                    *(_OWORD *)(v93 + 288) = v96;
                    v97 = *(_OWORD *)(v9 + v91 + 120);
                    *(_OWORD *)(v93 + 368) = *(_OWORD *)(v9 + v91 + 104);
                    *(_OWORD *)(v93 + 384) = v97;
                    v98 = *(_OWORD *)(v9 + v91 + 160);
                    *(_OWORD *)(v9 + v91 + 408) = *(_OWORD *)(v9 + v91 + 144);
                    *(_OWORD *)(v9 + v91 + 424) = v98;
                    v99 = *(_OWORD *)(v9 + v91 + 200);
                    *(_OWORD *)(v93 + 448) = *(_OWORD *)(v9 + v91 + 184);
                    *(_OWORD *)(v93 + 464) = v99;
                    v100 = *(_OWORD *)(v9 + v91 + 240);
                    *(_OWORD *)(v9 + v91 + 488) = *(_OWORD *)(v9 + v91 + 224);
                    *(_QWORD *)(v93 + 400) = *(_QWORD *)(v9 + v91 + 136);
                    *(_QWORD *)(v93 + 440) = *(_QWORD *)(v9 + v91 + 176);
                    *(_QWORD *)(v93 + 480) = *(_QWORD *)(v9 + v91 + 216);
                    *(_QWORD *)(v93 + 520) = *(_QWORD *)(v9 + v91 + 256);
                    *(_OWORD *)(v9 + v91 + 504) = v100;
                    if (!v91)
                    {
                      v88 = (double *)v9;
                      goto LABEL_67;
                    }
                    v91 -= 264;
                    v92 = *(double *)(v91 + v9);
                  }
                  while (v90 < v92);
                  v88 = (double *)(v9 + v91 + 264);
LABEL_67:
                  *v88 = v90;
                  *(_OWORD *)(v93 + 8) = v355;
                  *(_OWORD *)(v93 + 24) = v363;
                  *(_OWORD *)(v93 + 88) = v395;
                  *(_OWORD *)(v93 + 72) = v387;
                  *(_OWORD *)(v93 + 56) = v379;
                  *(_OWORD *)(v93 + 40) = v371;
                  *(_OWORD *)(v93 + 104) = v284;
                  *(_OWORD *)(v93 + 120) = v256;
                  *(_QWORD *)(v93 + 136) = v264;
                  *(_OWORD *)(v93 + 144) = v242;
                  *(_QWORD *)(v93 + 176) = v344;
                  *(_OWORD *)(v93 + 160) = v336;
                  *(_OWORD *)(v93 + 184) = v228;
                  *(_OWORD *)(v93 + 200) = v317;
                  *(_QWORD *)(v93 + 216) = v325;
                  *(_OWORD *)(v93 + 224) = v214;
                  *(_QWORD *)(v93 + 256) = v306;
                  *(_OWORD *)(v93 + 240) = v298;
                }
                v83 = v89 + 264;
                v86 += 264;
                v87 = v89;
              }
              while (v89 + 264 != a2);
            }
          }
          else if (!v85)
          {
            v187 = v9 - 264;
            do
            {
              v188 = v83;
              v189 = *(double *)(a1 + 264);
              if (v189 < *(double *)a1)
              {
                v374 = *(_OWORD *)(a1 + 304);
                v382 = *(_OWORD *)(a1 + 320);
                v390 = *(_OWORD *)(a1 + 336);
                v398 = *(_OWORD *)(a1 + 352);
                v358 = *(_OWORD *)(a1 + 272);
                v366 = *(_OWORD *)(a1 + 288);
                v287 = *(_OWORD *)(a1 + 368);
                v259 = *(_OWORD *)(a1 + 384);
                v245 = *(_OWORD *)(a1 + 408);
                v339 = *(_OWORD *)(a1 + 424);
                v231 = *(_OWORD *)(a1 + 448);
                v320 = *(_OWORD *)(a1 + 464);
                v217 = *(_OWORD *)(a1 + 488);
                v267 = *(_QWORD *)(a1 + 400);
                v347 = *(_QWORD *)(a1 + 440);
                v328 = *(_QWORD *)(a1 + 480);
                v309 = *(_QWORD *)(a1 + 520);
                v301 = *(_OWORD *)(a1 + 504);
                v190 = v187;
                v191 = *(double *)a1;
                do
                {
                  *(double *)(v190 + 528) = v191;
                  v192 = *(_OWORD *)(v190 + 320);
                  *(_OWORD *)(v190 + 568) = *(_OWORD *)(v190 + 304);
                  *(_OWORD *)(v190 + 584) = v192;
                  v193 = *(_OWORD *)(v190 + 352);
                  *(_OWORD *)(v190 + 600) = *(_OWORD *)(v190 + 336);
                  *(_OWORD *)(v190 + 616) = v193;
                  v194 = *(_OWORD *)(v190 + 288);
                  *(_OWORD *)(v190 + 536) = *(_OWORD *)(v190 + 272);
                  *(_OWORD *)(v190 + 552) = v194;
                  v195 = *(_OWORD *)(v190 + 384);
                  *(_OWORD *)(v190 + 632) = *(_OWORD *)(v190 + 368);
                  *(_QWORD *)(v190 + 664) = *(_QWORD *)(v190 + 400);
                  *(_OWORD *)(v190 + 648) = v195;
                  v196 = *(_OWORD *)(v190 + 408);
                  *(_QWORD *)(v190 + 704) = *(_QWORD *)(v190 + 440);
                  v197 = *(_OWORD *)(v190 + 424);
                  *(_OWORD *)(v190 + 672) = v196;
                  *(_OWORD *)(v190 + 688) = v197;
                  v198 = *(_OWORD *)(v190 + 464);
                  *(_OWORD *)(v190 + 712) = *(_OWORD *)(v190 + 448);
                  *(_QWORD *)(v190 + 744) = *(_QWORD *)(v190 + 480);
                  *(_OWORD *)(v190 + 728) = v198;
                  v199 = *(_OWORD *)(v190 + 488);
                  *(_QWORD *)(v190 + 784) = *(_QWORD *)(v190 + 520);
                  v200 = *(_OWORD *)(v190 + 504);
                  *(_OWORD *)(v190 + 752) = v199;
                  *(_OWORD *)(v190 + 768) = v200;
                  v191 = *(double *)v190;
                  v190 -= 264;
                }
                while (v189 < v191);
                *(double *)(v190 + 528) = v189;
                *(_OWORD *)(v190 + 536) = v358;
                *(_OWORD *)(v190 + 552) = v366;
                *(_OWORD *)(v190 + 600) = v390;
                *(_OWORD *)(v190 + 616) = v398;
                *(_OWORD *)(v190 + 568) = v374;
                *(_OWORD *)(v190 + 584) = v382;
                *(_OWORD *)(v190 + 632) = v287;
                *(_OWORD *)(v190 + 648) = v259;
                *(_QWORD *)(v190 + 664) = v267;
                *(_OWORD *)(v190 + 672) = v245;
                *(_QWORD *)(v190 + 704) = v347;
                *(_OWORD *)(v190 + 688) = v339;
                *(_OWORD *)(v190 + 712) = v231;
                *(_OWORD *)(v190 + 728) = v320;
                *(_QWORD *)(v190 + 744) = v328;
                *(_OWORD *)(v190 + 752) = v217;
                *(_QWORD *)(v190 + 784) = v309;
                *(_OWORD *)(v190 + 768) = v301;
              }
              v83 += 264;
              v187 += 264;
              a1 = v188;
            }
            while (v188 + 264 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v101 = (unint64_t)(v11 - 2) >> 1;
            v102 = v101;
            do
            {
              v112 = v102;
              if (v101 >= v102)
              {
                v113 = (2 * v102) | 1;
                v114 = v9 + 264 * v113;
                if (2 * v112 + 2 < v11 && *(double *)v114 < *(double *)(v114 + 264))
                {
                  v114 += 264;
                  v113 = 2 * v112 + 2;
                }
                v115 = v9 + 264 * v112;
                v116 = *(double *)v114;
                v117 = *(double *)v115;
                if (*(double *)v114 >= *(double *)v115)
                {
                  v356 = *(_OWORD *)(v115 + 8);
                  v364 = *(_OWORD *)(v115 + 24);
                  v388 = *(_OWORD *)(v115 + 72);
                  v396 = *(_OWORD *)(v115 + 88);
                  v372 = *(_OWORD *)(v115 + 40);
                  v380 = *(_OWORD *)(v115 + 56);
                  v285 = *(_OWORD *)(v115 + 104);
                  v265 = *(_QWORD *)(v115 + 136);
                  v257 = *(_OWORD *)(v115 + 120);
                  v243 = *(_OWORD *)(v115 + 144);
                  v345 = *(_QWORD *)(v115 + 176);
                  v337 = *(_OWORD *)(v115 + 160);
                  v229 = *(_OWORD *)(v115 + 184);
                  v326 = *(_QWORD *)(v115 + 216);
                  v318 = *(_OWORD *)(v115 + 200);
                  v215 = *(_OWORD *)(v115 + 224);
                  v307 = *(_QWORD *)(v115 + 256);
                  v299 = *(_OWORD *)(v115 + 240);
                  do
                  {
                    v118 = v115;
                    v115 = v114;
                    *(double *)v118 = v116;
                    v119 = *(_OWORD *)(v114 + 8);
                    *(_OWORD *)(v118 + 24) = *(_OWORD *)(v114 + 24);
                    *(_OWORD *)(v118 + 8) = v119;
                    v120 = *(_OWORD *)(v114 + 40);
                    v121 = *(_OWORD *)(v114 + 56);
                    v122 = *(_OWORD *)(v114 + 72);
                    *(_OWORD *)(v118 + 88) = *(_OWORD *)(v114 + 88);
                    *(_OWORD *)(v118 + 72) = v122;
                    *(_OWORD *)(v118 + 56) = v121;
                    *(_OWORD *)(v118 + 40) = v120;
                    *(_OWORD *)(v118 + 104) = *(_OWORD *)(v114 + 104);
                    v123 = *(_OWORD *)(v114 + 120);
                    *(_QWORD *)(v118 + 136) = *(_QWORD *)(v114 + 136);
                    *(_OWORD *)(v118 + 120) = v123;
                    *(_OWORD *)(v118 + 144) = *(_OWORD *)(v114 + 144);
                    v124 = *(_OWORD *)(v114 + 160);
                    *(_QWORD *)(v118 + 176) = *(_QWORD *)(v114 + 176);
                    *(_OWORD *)(v118 + 160) = v124;
                    *(_OWORD *)(v118 + 184) = *(_OWORD *)(v114 + 184);
                    v125 = *(_OWORD *)(v114 + 200);
                    *(_QWORD *)(v118 + 216) = *(_QWORD *)(v114 + 216);
                    *(_OWORD *)(v118 + 200) = v125;
                    *(_OWORD *)(v118 + 224) = *(_OWORD *)(v114 + 224);
                    v126 = *(_OWORD *)(v114 + 240);
                    *(_QWORD *)(v118 + 256) = *(_QWORD *)(v114 + 256);
                    *(_OWORD *)(v118 + 240) = v126;
                    if (v101 < v113)
                      break;
                    v127 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v114 = v9 + 264 * v113;
                    v128 = v127 + 2;
                    if (v128 < v11 && *(double *)v114 < *(double *)(v114 + 264))
                    {
                      v114 += 264;
                      v113 = v128;
                    }
                    v116 = *(double *)v114;
                  }
                  while (*(double *)v114 >= v117);
                  v103 = (_OWORD *)(v115 + 8);
                  *(double *)v115 = v117;
                  v104 = (_OWORD *)(v115 + 104);
                  v105 = v115 + 120;
                  v106 = (_OWORD *)(v115 + 144);
                  v107 = v115 + 160;
                  v108 = (_OWORD *)(v115 + 184);
                  v109 = v115 + 200;
                  v110 = (_OWORD *)(v115 + 224);
                  v111 = v115 + 240;
                  *v103 = v356;
                  v103[1] = v364;
                  v103[4] = v388;
                  v103[5] = v396;
                  v103[2] = v372;
                  v103[3] = v380;
                  *v104 = v285;
                  *(_QWORD *)(v105 + 16) = v265;
                  *(_OWORD *)v105 = v257;
                  *v106 = v243;
                  *(_QWORD *)(v107 + 16) = v345;
                  *(_OWORD *)v107 = v337;
                  *v108 = v229;
                  *(_QWORD *)(v109 + 16) = v326;
                  *(_OWORD *)v109 = v318;
                  *v110 = v215;
                  *(_QWORD *)(v111 + 16) = v307;
                  *(_OWORD *)v111 = v299;
                }
              }
              v102 = v112 - 1;
            }
            while (v112);
            v129 = v10 / 0x108uLL;
            v130 = (__int128 *)(v9 + 240);
            do
            {
              if (v129 >= 2)
              {
                v132 = 0;
                v133 = *(double *)a1;
                v258 = *(_OWORD *)(a1 + 8);
                v266 = *(_OWORD *)(a1 + 24);
                v276 = *(_OWORD *)(a1 + 72);
                v279 = *(_OWORD *)(a1 + 88);
                v270 = *(_OWORD *)(a1 + 40);
                v273 = *(_OWORD *)(a1 + 56);
                v251 = *(_OWORD *)(a1 + 104);
                v248 = *(_QWORD *)(a1 + 136);
                v237 = *(_OWORD *)(a1 + 144);
                v244 = *(_OWORD *)(a1 + 120);
                v234 = *(_QWORD *)(a1 + 176);
                v223 = *(_OWORD *)(a1 + 184);
                v230 = *(_OWORD *)(a1 + 160);
                v220 = *(_QWORD *)(a1 + 216);
                v209 = *(_OWORD *)(a1 + 224);
                v216 = *(_OWORD *)(a1 + 200);
                v206 = *(_QWORD *)(a1 + 256);
                v134 = a1;
                v203 = *v130;
                do
                {
                  v143 = v134;
                  v134 += 264 * v132 + 264;
                  v144 = 2 * v132;
                  v132 = (2 * v132) | 1;
                  v145 = v144 + 2;
                  if (v145 < v129 && *(double *)v134 < *(double *)(v134 + 264))
                  {
                    v134 += 264;
                    v132 = v145;
                  }
                  *(_QWORD *)v143 = *(_QWORD *)v134;
                  v135 = *(_OWORD *)(v134 + 8);
                  *(_OWORD *)(v143 + 24) = *(_OWORD *)(v134 + 24);
                  *(_OWORD *)(v143 + 8) = v135;
                  v136 = *(_OWORD *)(v134 + 40);
                  v137 = *(_OWORD *)(v134 + 56);
                  v138 = *(_OWORD *)(v134 + 72);
                  *(_OWORD *)(v143 + 88) = *(_OWORD *)(v134 + 88);
                  *(_OWORD *)(v143 + 72) = v138;
                  *(_OWORD *)(v143 + 56) = v137;
                  *(_OWORD *)(v143 + 40) = v136;
                  *(_OWORD *)(v143 + 104) = *(_OWORD *)(v134 + 104);
                  v139 = *(_OWORD *)(v134 + 120);
                  *(_QWORD *)(v143 + 136) = *(_QWORD *)(v134 + 136);
                  *(_OWORD *)(v143 + 120) = v139;
                  *(_OWORD *)(v143 + 144) = *(_OWORD *)(v134 + 144);
                  v140 = *(_OWORD *)(v134 + 160);
                  *(_QWORD *)(v143 + 176) = *(_QWORD *)(v134 + 176);
                  *(_OWORD *)(v143 + 160) = v140;
                  *(_OWORD *)(v143 + 184) = *(_OWORD *)(v134 + 184);
                  v141 = *(_OWORD *)(v134 + 200);
                  *(_QWORD *)(v143 + 216) = *(_QWORD *)(v134 + 216);
                  *(_OWORD *)(v143 + 200) = v141;
                  *(_OWORD *)(v143 + 224) = *(_OWORD *)(v134 + 224);
                  v142 = *(_OWORD *)(v134 + 240);
                  *(_QWORD *)(v143 + 256) = *(_QWORD *)(v134 + 256);
                  *(_OWORD *)(v143 + 240) = v142;
                }
                while (v132 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                v146 = (__int128 *)(v134 + 8);
                v147 = (__int128 *)(v134 + 104);
                v148 = (__int128 *)(v134 + 120);
                v149 = (__int128 *)(v134 + 144);
                v150 = (__int128 *)(v134 + 160);
                v151 = (__int128 *)(v134 + 184);
                v152 = (__int128 *)(v134 + 200);
                v153 = (__int128 *)(v134 + 224);
                v154 = (__int128 *)(v134 + 240);
                v155 = (_QWORD *)(a2 - 264);
                if (v134 == a2 - 264)
                {
                  *(double *)v134 = v133;
                  *v146 = v258;
                  *(_OWORD *)(v134 + 24) = v266;
                  *(_OWORD *)(v134 + 72) = v276;
                  *(_OWORD *)(v134 + 88) = v279;
                  *(_OWORD *)(v134 + 40) = v270;
                  *(_OWORD *)(v134 + 56) = v273;
                  *v147 = v251;
                  *v148 = v244;
                  *(_QWORD *)(v134 + 136) = v248;
                  *v149 = v237;
                  *(_QWORD *)(v134 + 176) = v234;
                  *v150 = v230;
                  *v151 = v223;
                  *v152 = v216;
                  *(_QWORD *)(v134 + 216) = v220;
                  *v153 = v209;
                  *(_QWORD *)(v134 + 256) = v206;
                  *v154 = v203;
                }
                else
                {
                  *(_QWORD *)v134 = *v155;
                  v156 = *(_OWORD *)(a2 - 240);
                  *v146 = *(_OWORD *)(a2 - 256);
                  *(_OWORD *)(v134 + 24) = v156;
                  v157 = *(_OWORD *)(a2 - 224);
                  v158 = *(_OWORD *)(a2 - 208);
                  v159 = *(_OWORD *)(a2 - 176);
                  *(_OWORD *)(v134 + 72) = *(_OWORD *)(a2 - 192);
                  *(_OWORD *)(v134 + 88) = v159;
                  *(_OWORD *)(v134 + 40) = v157;
                  *(_OWORD *)(v134 + 56) = v158;
                  *v147 = *(_OWORD *)(a2 - 160);
                  v160 = *(_OWORD *)(a2 - 144);
                  *(_QWORD *)(v134 + 136) = *(_QWORD *)(a2 - 128);
                  *v148 = v160;
                  *v149 = *(_OWORD *)(a2 - 120);
                  v161 = *(_OWORD *)(a2 - 104);
                  *(_QWORD *)(v134 + 176) = *(_QWORD *)(a2 - 88);
                  *v150 = v161;
                  *v151 = *(_OWORD *)(a2 - 80);
                  v162 = *(_OWORD *)(a2 - 64);
                  *(_QWORD *)(v134 + 216) = *(_QWORD *)(a2 - 48);
                  *v152 = v162;
                  *v153 = *(_OWORD *)(a2 - 40);
                  v163 = *(_OWORD *)(a2 - 24);
                  *(_QWORD *)(v134 + 256) = *(_QWORD *)(a2 - 8);
                  *v154 = v163;
                  *(double *)v155 = v133;
                  *(_OWORD *)(a2 - 256) = v258;
                  *(_OWORD *)(a2 - 240) = v266;
                  *(_OWORD *)(a2 - 192) = v276;
                  *(_OWORD *)(a2 - 176) = v279;
                  *(_OWORD *)(a2 - 224) = v270;
                  *(_OWORD *)(a2 - 208) = v273;
                  *(_OWORD *)(a2 - 160) = v251;
                  *(_OWORD *)(a2 - 144) = v244;
                  *(_QWORD *)(a2 - 128) = v248;
                  *(_OWORD *)(a2 - 120) = v237;
                  *(_QWORD *)(a2 - 88) = v234;
                  *(_OWORD *)(a2 - 104) = v230;
                  *(_OWORD *)(a2 - 80) = v223;
                  *(_OWORD *)(a2 - 64) = v216;
                  *(_QWORD *)(a2 - 48) = v220;
                  *(_OWORD *)(a2 - 40) = v209;
                  *(_QWORD *)(a2 - 8) = v206;
                  *(_OWORD *)(a2 - 24) = v203;
                  v164 = v134 - a1 + 264;
                  if (v164 >= 265)
                  {
                    v165 = (v164 / 0x108uLL - 2) >> 1;
                    v166 = a1 + 264 * v165;
                    v167 = *(double *)v166;
                    v168 = *(double *)v134;
                    if (*(double *)v166 < *(double *)v134)
                    {
                      v357 = *v146;
                      v365 = *(_OWORD *)(v134 + 24);
                      v389 = *(_OWORD *)(v134 + 72);
                      v397 = *(_OWORD *)(v134 + 88);
                      v373 = *(_OWORD *)(v134 + 40);
                      v381 = *(_OWORD *)(v134 + 56);
                      v350 = *v147;
                      v346 = *(_QWORD *)(v134 + 136);
                      v338 = *v148;
                      v331 = *v149;
                      v327 = *(_QWORD *)(v134 + 176);
                      v319 = *v150;
                      v312 = *v151;
                      v308 = *(_QWORD *)(v134 + 216);
                      v300 = *v152;
                      v293 = *v153;
                      v290 = *(_QWORD *)(v134 + 256);
                      v286 = *v154;
                      do
                      {
                        v169 = v134;
                        v134 = v166;
                        *(double *)v169 = v167;
                        v170 = *(_OWORD *)(v166 + 8);
                        *(_OWORD *)(v169 + 24) = *(_OWORD *)(v166 + 24);
                        *(_OWORD *)(v169 + 8) = v170;
                        v171 = *(_OWORD *)(v166 + 40);
                        v172 = *(_OWORD *)(v166 + 56);
                        v173 = *(_OWORD *)(v166 + 72);
                        *(_OWORD *)(v169 + 88) = *(_OWORD *)(v166 + 88);
                        *(_OWORD *)(v169 + 72) = v173;
                        *(_OWORD *)(v169 + 56) = v172;
                        *(_OWORD *)(v169 + 40) = v171;
                        *(_OWORD *)(v169 + 104) = *(_OWORD *)(v166 + 104);
                        v174 = *(_OWORD *)(v166 + 120);
                        *(_QWORD *)(v169 + 136) = *(_QWORD *)(v166 + 136);
                        *(_OWORD *)(v169 + 120) = v174;
                        *(_OWORD *)(v169 + 144) = *(_OWORD *)(v166 + 144);
                        v175 = *(_OWORD *)(v166 + 160);
                        *(_QWORD *)(v169 + 176) = *(_QWORD *)(v166 + 176);
                        *(_OWORD *)(v169 + 160) = v175;
                        *(_OWORD *)(v169 + 184) = *(_OWORD *)(v166 + 184);
                        v176 = *(_OWORD *)(v166 + 200);
                        *(_QWORD *)(v169 + 216) = *(_QWORD *)(v166 + 216);
                        *(_OWORD *)(v169 + 200) = v176;
                        *(_OWORD *)(v169 + 224) = *(_OWORD *)(v166 + 224);
                        v177 = *(_OWORD *)(v166 + 240);
                        *(_QWORD *)(v169 + 256) = *(_QWORD *)(v166 + 256);
                        *(_OWORD *)(v169 + 240) = v177;
                        if (!v165)
                          break;
                        v165 = (v165 - 1) >> 1;
                        v166 = a1 + 264 * v165;
                        v167 = *(double *)v166;
                      }
                      while (*(double *)v166 < v168);
                      v178 = (_OWORD *)(v134 + 8);
                      *(double *)v134 = v168;
                      v179 = (_OWORD *)(v134 + 104);
                      v180 = v134 + 120;
                      v181 = (_OWORD *)(v134 + 144);
                      v182 = v134 + 160;
                      v183 = (_OWORD *)(v134 + 184);
                      v184 = v134 + 200;
                      v185 = (_OWORD *)(v134 + 224);
                      v186 = v134 + 240;
                      *v178 = v357;
                      v178[1] = v365;
                      v178[4] = v389;
                      v178[5] = v397;
                      v178[2] = v373;
                      v178[3] = v381;
                      *v179 = v350;
                      *(_QWORD *)(v180 + 16) = v346;
                      *(_OWORD *)v180 = v338;
                      *v181 = v331;
                      *(_QWORD *)(v182 + 16) = v327;
                      *(_OWORD *)v182 = v319;
                      *v183 = v312;
                      *(_QWORD *)(v184 + 16) = v308;
                      *(_OWORD *)v184 = v300;
                      *v185 = v293;
                      *(_QWORD *)(v186 + 16) = v290;
                      *(_OWORD *)v186 = v286;
                    }
                  }
                }
              }
              a2 -= 264;
            }
            while ((unint64_t)v129-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_QWORD *)(v9 + 264 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x8401)
        {
          sub_20EB6C50C((uint64_t)v13, a1, a2 - 264);
          --a3;
          v28 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_20EB6C50C(a1, (uint64_t)v13, a2 - 264);
          v14 = 264 * v12;
          v15 = a1 + 264 * v12;
          sub_20EB6C50C(a1 + 264, v15 - 264, a2 - 528);
          v16 = a1 + 264 + v14;
          sub_20EB6C50C(a1 + 528, v16, a2 - 792);
          sub_20EB6C50C(v15 - 264, (uint64_t)v13, v16);
          v17 = *(double *)a1;
          v351 = *(_OWORD *)(a1 + 8);
          v359 = *(_OWORD *)(a1 + 24);
          v383 = *(_OWORD *)(a1 + 72);
          v391 = *(_OWORD *)(a1 + 88);
          v367 = *(_OWORD *)(a1 + 40);
          v375 = *(_OWORD *)(a1 + 56);
          v280 = *(_OWORD *)(a1 + 104);
          v260 = *(_QWORD *)(a1 + 136);
          v252 = *(_OWORD *)(a1 + 120);
          v238 = *(_OWORD *)(a1 + 144);
          v340 = *(_QWORD *)(a1 + 176);
          v332 = *(_OWORD *)(a1 + 160);
          v224 = *(_OWORD *)(a1 + 184);
          v321 = *(_QWORD *)(a1 + 216);
          v313 = *(_OWORD *)(a1 + 200);
          v210 = *(_OWORD *)(a1 + 224);
          v302 = *(_QWORD *)(a1 + 256);
          v294 = *(_OWORD *)(a1 + 240);
          *(_QWORD *)a1 = *v13;
          v18 = *(_OWORD *)(v15 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v15 + 24);
          *(_OWORD *)(a1 + 8) = v18;
          v19 = *(_OWORD *)(v15 + 40);
          v20 = *(_OWORD *)(v15 + 56);
          v21 = *(_OWORD *)(v15 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(v15 + 88);
          *(_OWORD *)(a1 + 72) = v21;
          *(_OWORD *)(a1 + 56) = v20;
          *(_OWORD *)(a1 + 40) = v19;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(v15 + 104);
          v22 = *(_OWORD *)(v15 + 120);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(v15 + 136);
          *(_OWORD *)(a1 + 120) = v22;
          v23 = *(_OWORD *)(v15 + 144);
          v24 = *(_OWORD *)(v15 + 160);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(v15 + 176);
          *(_OWORD *)(a1 + 144) = v23;
          *(_OWORD *)(a1 + 160) = v24;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(v15 + 184);
          v25 = *(_OWORD *)(v15 + 200);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(v15 + 216);
          *(_OWORD *)(a1 + 200) = v25;
          v26 = *(_OWORD *)(v15 + 224);
          v27 = *(_OWORD *)(v15 + 240);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(v15 + 256);
          *(_OWORD *)(a1 + 224) = v26;
          *(_OWORD *)(a1 + 240) = v27;
          *(double *)v13 = v17;
          *(_OWORD *)(v15 + 8) = v351;
          *(_OWORD *)(v15 + 24) = v359;
          *(_OWORD *)(v15 + 88) = v391;
          *(_OWORD *)(v15 + 72) = v383;
          *(_OWORD *)(v15 + 56) = v375;
          *(_OWORD *)(v15 + 40) = v367;
          *(_OWORD *)(v15 + 104) = v280;
          *(_OWORD *)(v15 + 120) = v252;
          *(_QWORD *)(v15 + 136) = v260;
          *(_OWORD *)(v15 + 144) = v238;
          *(_QWORD *)(v15 + 176) = v340;
          *(_OWORD *)(v15 + 160) = v332;
          *(_OWORD *)(v15 + 184) = v224;
          *(_OWORD *)(v15 + 200) = v313;
          *(_QWORD *)(v15 + 216) = v321;
          *(_OWORD *)(v15 + 224) = v210;
          *(_QWORD *)(v15 + 256) = v302;
          *(_OWORD *)(v15 + 240) = v294;
          --a3;
          v28 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(double *)(a1 - 264) >= v28)
        {
          v254 = *(_OWORD *)(a1 + 8);
          v262 = *(_OWORD *)(a1 + 24);
          v275 = *(_OWORD *)(a1 + 72);
          v278 = *(_OWORD *)(a1 + 88);
          v269 = *(_OWORD *)(a1 + 40);
          v272 = *(_OWORD *)(a1 + 56);
          v250 = *(_OWORD *)(a1 + 104);
          v247 = *(_QWORD *)(a1 + 136);
          v236 = *(_OWORD *)(a1 + 144);
          v240 = *(_OWORD *)(a1 + 120);
          v233 = *(_QWORD *)(a1 + 176);
          v222 = *(_OWORD *)(a1 + 184);
          v226 = *(_OWORD *)(a1 + 160);
          v219 = *(_QWORD *)(a1 + 216);
          v208 = *(_OWORD *)(a1 + 224);
          v212 = *(_OWORD *)(a1 + 200);
          v205 = *(_QWORD *)(a1 + 256);
          v202 = *(_OWORD *)(a1 + 240);
          if (v28 >= *(double *)v8)
          {
            v54 = a1 + 264;
            do
            {
              v9 = v54;
              if (v54 >= a2)
                break;
              v54 += 264;
            }
            while (v28 >= *(double *)v9);
          }
          else
          {
            v52 = a1;
            do
            {
              v9 = v52 + 264;
              v53 = *(double *)(v52 + 264);
              v52 += 264;
            }
            while (v28 >= v53);
          }
          v55 = a2;
          if (v9 < a2)
          {
            v55 = a2;
            do
              v55 -= 264;
            while (v28 < *(double *)v55);
          }
          if (v9 < v55)
          {
            v56 = *(double *)v9;
            do
            {
              v353 = *(_OWORD *)(v9 + 8);
              v361 = *(_OWORD *)(v9 + 24);
              v385 = *(_OWORD *)(v9 + 72);
              v393 = *(_OWORD *)(v9 + 88);
              v369 = *(_OWORD *)(v9 + 40);
              v377 = *(_OWORD *)(v9 + 56);
              v349 = *(_OWORD *)(v9 + 104);
              v342 = *(_QWORD *)(v9 + 136);
              v330 = *(_OWORD *)(v9 + 144);
              v334 = *(_OWORD *)(v9 + 120);
              v323 = *(_QWORD *)(v9 + 176);
              v311 = *(_OWORD *)(v9 + 184);
              v315 = *(_OWORD *)(v9 + 160);
              v304 = *(_QWORD *)(v9 + 216);
              v292 = *(_OWORD *)(v9 + 224);
              v296 = *(_OWORD *)(v9 + 200);
              v289 = *(_QWORD *)(v9 + 256);
              v282 = *(_OWORD *)(v9 + 240);
              *(_QWORD *)v9 = *(_QWORD *)v55;
              v57 = *(_OWORD *)(v55 + 8);
              *(_OWORD *)(v9 + 24) = *(_OWORD *)(v55 + 24);
              *(_OWORD *)(v9 + 8) = v57;
              v58 = *(_OWORD *)(v55 + 40);
              v59 = *(_OWORD *)(v55 + 56);
              v60 = *(_OWORD *)(v55 + 72);
              *(_OWORD *)(v9 + 88) = *(_OWORD *)(v55 + 88);
              *(_OWORD *)(v9 + 72) = v60;
              *(_OWORD *)(v9 + 56) = v59;
              *(_OWORD *)(v9 + 40) = v58;
              *(_OWORD *)(v9 + 104) = *(_OWORD *)(v55 + 104);
              v61 = *(_OWORD *)(v55 + 120);
              *(_QWORD *)(v9 + 136) = *(_QWORD *)(v55 + 136);
              *(_OWORD *)(v9 + 120) = v61;
              *(_OWORD *)(v9 + 144) = *(_OWORD *)(v55 + 144);
              v62 = *(_OWORD *)(v55 + 160);
              *(_QWORD *)(v9 + 176) = *(_QWORD *)(v55 + 176);
              *(_OWORD *)(v9 + 160) = v62;
              *(_OWORD *)(v9 + 184) = *(_OWORD *)(v55 + 184);
              v63 = *(_OWORD *)(v55 + 200);
              *(_QWORD *)(v9 + 216) = *(_QWORD *)(v55 + 216);
              *(_OWORD *)(v9 + 200) = v63;
              *(_OWORD *)(v9 + 224) = *(_OWORD *)(v55 + 224);
              v64 = *(_OWORD *)(v55 + 240);
              *(_QWORD *)(v9 + 256) = *(_QWORD *)(v55 + 256);
              *(_OWORD *)(v9 + 240) = v64;
              *(double *)v55 = v56;
              *(_OWORD *)(v55 + 8) = v353;
              *(_OWORD *)(v55 + 24) = v361;
              *(_OWORD *)(v55 + 88) = v393;
              *(_OWORD *)(v55 + 72) = v385;
              *(_OWORD *)(v55 + 56) = v377;
              *(_OWORD *)(v55 + 40) = v369;
              *(_OWORD *)(v55 + 104) = v349;
              *(_QWORD *)(v55 + 136) = v342;
              *(_OWORD *)(v55 + 120) = v334;
              *(_QWORD *)(v55 + 176) = v323;
              *(_OWORD *)(v55 + 144) = v330;
              *(_OWORD *)(v55 + 160) = v315;
              *(_OWORD *)(v55 + 184) = v311;
              *(_QWORD *)(v55 + 216) = v304;
              *(_OWORD *)(v55 + 200) = v296;
              *(_QWORD *)(v55 + 256) = v289;
              *(_OWORD *)(v55 + 224) = v292;
              *(_OWORD *)(v55 + 240) = v282;
              do
              {
                v56 = *(double *)(v9 + 264);
                v9 += 264;
              }
              while (v28 >= v56);
              do
                v55 -= 264;
              while (v28 < *(double *)v55);
            }
            while (v9 < v55);
          }
          v65 = (_QWORD *)(v9 - 264);
          if (v9 - 264 != a1)
          {
            *(_QWORD *)a1 = *v65;
            v66 = *(_OWORD *)(v9 - 240);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 256);
            *(_OWORD *)(a1 + 24) = v66;
            v67 = *(_OWORD *)(v9 - 224);
            v68 = *(_OWORD *)(v9 - 208);
            v69 = *(_OWORD *)(v9 - 176);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v9 - 192);
            *(_OWORD *)(a1 + 88) = v69;
            *(_OWORD *)(a1 + 40) = v67;
            *(_OWORD *)(a1 + 56) = v68;
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v9 - 160);
            v70 = *(_OWORD *)(v9 - 144);
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 128);
            *(_OWORD *)(a1 + 120) = v70;
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 - 120);
            v71 = *(_OWORD *)(v9 - 104);
            *(_QWORD *)(a1 + 176) = *(_QWORD *)(v9 - 88);
            *(_OWORD *)(a1 + 160) = v71;
            *(_OWORD *)(a1 + 184) = *(_OWORD *)(v9 - 80);
            v72 = *(_OWORD *)(v9 - 64);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v9 - 48);
            *(_OWORD *)(a1 + 200) = v72;
            *(_OWORD *)(a1 + 224) = *(_OWORD *)(v9 - 40);
            v73 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 256) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)(a1 + 240) = v73;
          }
          a4 = 0;
          *(double *)v65 = v28;
          *(_OWORD *)(v9 - 256) = v254;
          *(_OWORD *)(v9 - 240) = v262;
          *(_OWORD *)(v9 - 160) = v250;
          *(_OWORD *)(v9 - 144) = v240;
          *(_QWORD *)(v9 - 128) = v247;
          *(_OWORD *)(v9 - 120) = v236;
          *(_QWORD *)(v9 - 88) = v233;
          *(_OWORD *)(v9 - 104) = v226;
          *(_OWORD *)(v9 - 80) = v222;
          *(_OWORD *)(v9 - 64) = v212;
          *(_QWORD *)(v9 - 48) = v219;
          *(_OWORD *)(v9 - 40) = v208;
          *(_QWORD *)(v9 - 8) = v205;
          *(_OWORD *)(v9 - 192) = v275;
          *(_OWORD *)(v9 - 176) = v278;
          *(_OWORD *)(v9 - 224) = v269;
          *(_OWORD *)(v9 - 208) = v272;
          *(_OWORD *)(v9 - 24) = v202;
          continue;
        }
LABEL_10:
        v29 = 0;
        v253 = *(_OWORD *)(a1 + 8);
        v261 = *(_OWORD *)(a1 + 24);
        v274 = *(_OWORD *)(a1 + 72);
        v277 = *(_OWORD *)(a1 + 88);
        v268 = *(_OWORD *)(a1 + 40);
        v271 = *(_OWORD *)(a1 + 56);
        v249 = *(_OWORD *)(a1 + 104);
        v246 = *(_QWORD *)(a1 + 136);
        v235 = *(_OWORD *)(a1 + 144);
        v239 = *(_OWORD *)(a1 + 120);
        v232 = *(_QWORD *)(a1 + 176);
        v221 = *(_OWORD *)(a1 + 184);
        v225 = *(_OWORD *)(a1 + 160);
        v218 = *(_QWORD *)(a1 + 216);
        v207 = *(_OWORD *)(a1 + 224);
        v211 = *(_OWORD *)(a1 + 200);
        v204 = *(_QWORD *)(a1 + 256);
        v201 = *(_OWORD *)(a1 + 240);
        do
        {
          v30 = *(double *)(a1 + v29 + 264);
          v29 += 264;
        }
        while (v30 < v28);
        v31 = a1 + v29;
        v32 = (double *)a2;
        if (v29 == 264)
        {
          v32 = (double *)a2;
          do
          {
            if (v31 >= (unint64_t)v32)
              break;
            v32 -= 33;
          }
          while (*v32 >= v28);
        }
        else
        {
          do
            v32 -= 33;
          while (*v32 >= v28);
        }
        v9 = a1 + v29;
        if (v31 < (unint64_t)v32)
        {
          v33 = v32;
          do
          {
            v352 = *(_OWORD *)(v9 + 8);
            v360 = *(_OWORD *)(v9 + 24);
            v384 = *(_OWORD *)(v9 + 72);
            v392 = *(_OWORD *)(v9 + 88);
            v368 = *(_OWORD *)(v9 + 40);
            v376 = *(_OWORD *)(v9 + 56);
            v348 = *(_OWORD *)(v9 + 104);
            v341 = *(_QWORD *)(v9 + 136);
            v329 = *(_OWORD *)(v9 + 144);
            v333 = *(_OWORD *)(v9 + 120);
            v322 = *(_QWORD *)(v9 + 176);
            v310 = *(_OWORD *)(v9 + 184);
            v314 = *(_OWORD *)(v9 + 160);
            v303 = *(_QWORD *)(v9 + 216);
            v291 = *(_OWORD *)(v9 + 224);
            v295 = *(_OWORD *)(v9 + 200);
            v288 = *(_QWORD *)(v9 + 256);
            v281 = *(_OWORD *)(v9 + 240);
            *(double *)v9 = *v33;
            v34 = *(_OWORD *)(v33 + 1);
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v33 + 3);
            *(_OWORD *)(v9 + 8) = v34;
            v35 = *(_OWORD *)(v33 + 5);
            v36 = *(_OWORD *)(v33 + 7);
            v37 = *(_OWORD *)(v33 + 9);
            *(_OWORD *)(v9 + 88) = *(_OWORD *)(v33 + 11);
            *(_OWORD *)(v9 + 72) = v37;
            *(_OWORD *)(v9 + 56) = v36;
            *(_OWORD *)(v9 + 40) = v35;
            *(_OWORD *)(v9 + 104) = *(_OWORD *)(v33 + 13);
            v38 = *(_OWORD *)(v33 + 15);
            *(double *)(v9 + 136) = v33[17];
            *(_OWORD *)(v9 + 120) = v38;
            *(_OWORD *)(v9 + 144) = *((_OWORD *)v33 + 9);
            v39 = *((_OWORD *)v33 + 10);
            *(double *)(v9 + 176) = v33[22];
            *(_OWORD *)(v9 + 160) = v39;
            *(_OWORD *)(v9 + 184) = *(_OWORD *)(v33 + 23);
            v40 = *(_OWORD *)(v33 + 25);
            *(double *)(v9 + 216) = v33[27];
            *(_OWORD *)(v9 + 200) = v40;
            *(_OWORD *)(v9 + 224) = *((_OWORD *)v33 + 14);
            v41 = *((_OWORD *)v33 + 15);
            *(double *)(v9 + 256) = v33[32];
            *(_OWORD *)(v9 + 240) = v41;
            *v33 = v30;
            *(_OWORD *)(v33 + 1) = v352;
            *(_OWORD *)(v33 + 3) = v360;
            *(_OWORD *)(v33 + 11) = v392;
            *(_OWORD *)(v33 + 9) = v384;
            *(_OWORD *)(v33 + 7) = v376;
            *(_OWORD *)(v33 + 5) = v368;
            *(_OWORD *)(v33 + 13) = v348;
            *((_QWORD *)v33 + 17) = v341;
            *(_OWORD *)(v33 + 15) = v333;
            *((_QWORD *)v33 + 22) = v322;
            *((_OWORD *)v33 + 9) = v329;
            *((_OWORD *)v33 + 10) = v314;
            *(_OWORD *)(v33 + 23) = v310;
            *((_QWORD *)v33 + 27) = v303;
            *(_OWORD *)(v33 + 25) = v295;
            *((_QWORD *)v33 + 32) = v288;
            *((_OWORD *)v33 + 14) = v291;
            *((_OWORD *)v33 + 15) = v281;
            do
            {
              v30 = *(double *)(v9 + 264);
              v9 += 264;
            }
            while (v30 < v28);
            do
              v33 -= 33;
            while (*v33 >= v28);
          }
          while (v9 < (unint64_t)v33);
        }
        v42 = (_QWORD *)(v9 - 264);
        if (v9 - 264 != a1)
        {
          *(_QWORD *)a1 = *v42;
          v43 = *(_OWORD *)(v9 - 240);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 256);
          *(_OWORD *)(a1 + 24) = v43;
          v44 = *(_OWORD *)(v9 - 224);
          v45 = *(_OWORD *)(v9 - 208);
          v46 = *(_OWORD *)(v9 - 176);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(v9 - 192);
          *(_OWORD *)(a1 + 88) = v46;
          *(_OWORD *)(a1 + 40) = v44;
          *(_OWORD *)(a1 + 56) = v45;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(v9 - 160);
          v47 = *(_OWORD *)(v9 - 144);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 128);
          *(_OWORD *)(a1 + 120) = v47;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 - 120);
          v48 = *(_OWORD *)(v9 - 104);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(v9 - 88);
          *(_OWORD *)(a1 + 160) = v48;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(v9 - 80);
          v49 = *(_OWORD *)(v9 - 64);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(v9 - 48);
          *(_OWORD *)(a1 + 200) = v49;
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(v9 - 40);
          v50 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)(a1 + 240) = v50;
        }
        *(double *)v42 = v28;
        *(_OWORD *)(v9 - 256) = v253;
        *(_OWORD *)(v9 - 240) = v261;
        *(_OWORD *)(v9 - 192) = v274;
        *(_OWORD *)(v9 - 176) = v277;
        *(_OWORD *)(v9 - 224) = v268;
        *(_OWORD *)(v9 - 208) = v271;
        *(_OWORD *)(v9 - 160) = v249;
        *(_OWORD *)(v9 - 144) = v239;
        *(_QWORD *)(v9 - 128) = v246;
        *(_OWORD *)(v9 - 120) = v235;
        *(_QWORD *)(v9 - 88) = v232;
        *(_OWORD *)(v9 - 104) = v225;
        *(_OWORD *)(v9 - 80) = v221;
        *(_OWORD *)(v9 - 64) = v211;
        *(_QWORD *)(v9 - 48) = v218;
        *(_OWORD *)(v9 - 40) = v207;
        *(_QWORD *)(v9 - 8) = v204;
        *(_OWORD *)(v9 - 24) = v201;
        if (v31 < (unint64_t)v32)
        {
LABEL_29:
          sub_20EB6ABCC(a1, v9 - 264, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v51 = sub_20EB6CCB8(a1, v9 - 264);
        if (!sub_20EB6CCB8(v9, a2))
        {
          if (v51)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 264;
        if (!v51)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (__int128 *)(a2 - 128);
  v9 = (__int128 *)(a2 - 264);
  v361 = (double *)(a2 - 408);
  v362 = (double *)(a2 - 272);
  v10 = (__int128 *)(a2 - 400);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result.n128_u64[0] = *(_QWORD *)v11;
        if (*(double *)(a2 - 136) < *(double *)v11)
        {
          v482 = *(_OWORD *)(v11 + 40);
          v517 = *(_OWORD *)(v11 + 56);
          v412 = *(_OWORD *)(v11 + 8);
          v447 = *(_OWORD *)(v11 + 24);
          v622 = *(_OWORD *)(v11 + 104);
          v657 = *(_OWORD *)(v11 + 120);
          v552 = *(__n128 *)(v11 + 72);
          v587 = *(_OWORD *)(v11 + 88);
          *(_QWORD *)v11 = *(_QWORD *)(a2 - 136);
          v234 = *(_OWORD *)(a2 - 128);
          v235 = *(_OWORD *)(a2 - 112);
          v236 = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v11 + 40) = v236;
          *(_OWORD *)(v11 + 24) = v235;
          *(_OWORD *)(v11 + 8) = v234;
          v237 = *(_OWORD *)(a2 - 64);
          v238 = *(_OWORD *)(a2 - 48);
          v239 = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v11 + 120) = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(v11 + 104) = v239;
          *(_OWORD *)(v11 + 88) = v238;
          *(_OWORD *)(v11 + 72) = v237;
          goto LABEL_171;
        }
        return result;
      case 3:
        v240 = *(double *)(v11 + 136);
        result.n128_u64[0] = *(_QWORD *)v11;
        v241 = *(double *)(a2 - 136);
        if (v240 >= *(double *)v11)
        {
          if (v241 < v240)
          {
            v420 = *(_OWORD *)(v11 + 144);
            v455 = *(_OWORD *)(v11 + 160);
            v490 = *(_OWORD *)(v11 + 176);
            v525 = *(_OWORD *)(v11 + 192);
            v630 = *(_OWORD *)(v11 + 240);
            v665 = *(_OWORD *)(v11 + 256);
            v560 = *(_OWORD *)(v11 + 208);
            v595 = *(_OWORD *)(v11 + 224);
            *(double *)(v11 + 136) = v241;
            v332 = *(_OWORD *)(a2 - 128);
            v333 = *(_OWORD *)(a2 - 112);
            v334 = *(_OWORD *)(a2 - 80);
            *(_OWORD *)(v11 + 176) = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(v11 + 192) = v334;
            *(_OWORD *)(v11 + 144) = v332;
            *(_OWORD *)(v11 + 160) = v333;
            result = *(__n128 *)(a2 - 64);
            v335 = *(_OWORD *)(a2 - 48);
            v336 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)(v11 + 240) = *(_OWORD *)(a2 - 32);
            *(_OWORD *)(v11 + 256) = v336;
            *(__n128 *)(v11 + 208) = result;
            *(_OWORD *)(v11 + 224) = v335;
            *(double *)(a2 - 136) = v240;
            *(_OWORD *)(a2 - 96) = v490;
            *(_OWORD *)(a2 - 80) = v525;
            *(_OWORD *)(a2 - 128) = v420;
            *(_OWORD *)(a2 - 112) = v455;
            *(_OWORD *)(a2 - 32) = v630;
            *(_OWORD *)(a2 - 16) = v665;
            *(_OWORD *)(a2 - 64) = v560;
            *(_OWORD *)(a2 - 48) = v595;
            v337 = *(double *)(v11 + 136);
            result.n128_u64[0] = *(_QWORD *)v11;
            if (v337 < *(double *)v11)
            {
              v261 = (_OWORD *)(v11 + 144);
              v486 = *(_OWORD *)(v11 + 40);
              v521 = *(_OWORD *)(v11 + 56);
              v416 = *(_OWORD *)(v11 + 8);
              v451 = *(_OWORD *)(v11 + 24);
              v626 = *(_OWORD *)(v11 + 104);
              v661 = *(_OWORD *)(v11 + 120);
              v556 = *(__n128 *)(v11 + 72);
              v591 = *(_OWORD *)(v11 + 88);
              *(double *)v11 = v337;
              v338 = *(_OWORD *)(v11 + 240);
              *(_OWORD *)(v11 + 120) = *(_OWORD *)(v11 + 256);
              *(_OWORD *)(v11 + 104) = v338;
              v339 = *(_OWORD *)(v11 + 208);
              *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 + 224);
              *(_OWORD *)(v11 + 72) = v339;
              v340 = *(_OWORD *)(v11 + 160);
              *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 + 144);
              *(_OWORD *)(v11 + 24) = v340;
              v341 = *(_OWORD *)(v11 + 192);
              *(_OWORD *)(v11 + 40) = *(_OWORD *)(v11 + 176);
              *(_OWORD *)(v11 + 56) = v341;
              *(_QWORD *)(v11 + 136) = result.n128_u64[0];
              goto LABEL_160;
            }
          }
        }
        else
        {
          v242 = (__int128 *)(v11 + 8);
          if (v241 >= v240)
          {
            v492 = *(_OWORD *)(v11 + 40);
            v527 = *(_OWORD *)(v11 + 56);
            v422 = *v242;
            v457 = *(_OWORD *)(v11 + 24);
            v632 = *(_OWORD *)(v11 + 104);
            v667 = *(_OWORD *)(v11 + 120);
            v562 = *(_OWORD *)(v11 + 72);
            v597 = *(_OWORD *)(v11 + 88);
            *(double *)v11 = v240;
            v350 = *(_OWORD *)(v11 + 256);
            *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 + 240);
            *(_OWORD *)(v11 + 120) = v350;
            v351 = *(_OWORD *)(v11 + 224);
            *(_OWORD *)(v11 + 72) = *(_OWORD *)(v11 + 208);
            *(_OWORD *)(v11 + 88) = v351;
            v352 = *(_OWORD *)(v11 + 160);
            *v242 = *(_OWORD *)(v11 + 144);
            *(_OWORD *)(v11 + 24) = v352;
            v353 = *(_OWORD *)(v11 + 192);
            *(_OWORD *)(v11 + 40) = *(_OWORD *)(v11 + 176);
            *(_OWORD *)(v11 + 56) = v353;
            *(_QWORD *)(v11 + 136) = result.n128_u64[0];
            *(_OWORD *)(v11 + 176) = v492;
            *(_OWORD *)(v11 + 192) = v527;
            *(_OWORD *)(v11 + 144) = v422;
            *(_OWORD *)(v11 + 160) = v457;
            *(_OWORD *)(v11 + 240) = v632;
            *(_OWORD *)(v11 + 256) = v667;
            *(_OWORD *)(v11 + 208) = v562;
            *(_OWORD *)(v11 + 224) = v597;
            v354 = *(double *)(a2 - 136);
            if (v354 >= result.n128_f64[0])
              return result;
            v242 = (__int128 *)(v11 + 144);
            v412 = *(_OWORD *)(v11 + 144);
            v447 = *(_OWORD *)(v11 + 160);
            v482 = *(_OWORD *)(v11 + 176);
            v517 = *(_OWORD *)(v11 + 192);
            v622 = *(_OWORD *)(v11 + 240);
            v657 = *(_OWORD *)(v11 + 256);
            v552 = *(__n128 *)(v11 + 208);
            v587 = *(_OWORD *)(v11 + 224);
            *(double *)(v11 + 136) = v354;
          }
          else
          {
            v482 = *(_OWORD *)(v11 + 40);
            v517 = *(_OWORD *)(v11 + 56);
            v412 = *v242;
            v447 = *(_OWORD *)(v11 + 24);
            v622 = *(_OWORD *)(v11 + 104);
            v657 = *(_OWORD *)(v11 + 120);
            v552 = *(__n128 *)(v11 + 72);
            v587 = *(_OWORD *)(v11 + 88);
            *(double *)v11 = v241;
          }
          v355 = *(_OWORD *)(a2 - 128);
          v356 = *(_OWORD *)(a2 - 112);
          v357 = *(_OWORD *)(a2 - 80);
          v242[2] = *(_OWORD *)(a2 - 96);
          v242[3] = v357;
          *v242 = v355;
          v242[1] = v356;
          v358 = *(_OWORD *)(a2 - 64);
          v359 = *(_OWORD *)(a2 - 48);
          v360 = *(_OWORD *)(a2 - 16);
          v242[6] = *(_OWORD *)(a2 - 32);
          v242[7] = v360;
          v242[4] = v358;
          v242[5] = v359;
LABEL_171:
          *(_QWORD *)(a2 - 136) = result.n128_u64[0];
          *(_OWORD *)(a2 - 96) = v482;
          *(_OWORD *)(a2 - 80) = v517;
          *(_OWORD *)(a2 - 128) = v412;
          *(_OWORD *)(a2 - 112) = v447;
          result = v552;
          *(_OWORD *)(a2 - 32) = v622;
          *(_OWORD *)(a2 - 16) = v657;
          *(__n128 *)(a2 - 64) = v552;
          *(_OWORD *)(a2 - 48) = v587;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_20EB73A6C(v11, v11 + 136, v11 + 272, a2 - 136).n128_u64[0];
        return result;
      case 5:
        sub_20EB73A6C(v11, v11 + 136, v11 + 272, v11 + 408);
        v243 = *(double *)(a2 - 136);
        result.n128_u64[0] = *(_QWORD *)(v11 + 408);
        if (v243 < result.n128_f64[0])
        {
          v413 = *(_OWORD *)(v11 + 416);
          v448 = *(_OWORD *)(v11 + 432);
          v483 = *(_OWORD *)(v11 + 448);
          v518 = *(_OWORD *)(v11 + 464);
          v623 = *(_OWORD *)(v11 + 512);
          v658 = *(_OWORD *)(v11 + 528);
          v553 = *(_OWORD *)(v11 + 480);
          v588 = *(_OWORD *)(v11 + 496);
          *(double *)(v11 + 408) = v243;
          v244 = *(_OWORD *)(a2 - 128);
          v245 = *(_OWORD *)(a2 - 112);
          v246 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v11 + 448) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v11 + 464) = v246;
          *(_OWORD *)(v11 + 416) = v244;
          *(_OWORD *)(v11 + 432) = v245;
          v247 = *(_OWORD *)(a2 - 64);
          v248 = *(_OWORD *)(a2 - 48);
          v249 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(v11 + 512) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v11 + 528) = v249;
          *(_OWORD *)(v11 + 480) = v247;
          *(_OWORD *)(v11 + 496) = v248;
          *(_QWORD *)(a2 - 136) = result.n128_u64[0];
          *(_OWORD *)(a2 - 96) = v483;
          *(_OWORD *)(a2 - 80) = v518;
          *(_OWORD *)(a2 - 128) = v413;
          *(_OWORD *)(a2 - 112) = v448;
          *(_OWORD *)(a2 - 32) = v623;
          *(_OWORD *)(a2 - 16) = v658;
          *(_OWORD *)(a2 - 64) = v553;
          *(_OWORD *)(a2 - 48) = v588;
          result.n128_u64[0] = *(_QWORD *)(v11 + 408);
          v250 = *(double *)(v11 + 272);
          if (result.n128_f64[0] < v250)
          {
            v554 = *(_OWORD *)(v11 + 344);
            v589 = *(_OWORD *)(v11 + 360);
            v624 = *(_OWORD *)(v11 + 376);
            v659 = *(_OWORD *)(v11 + 392);
            v414 = *(_OWORD *)(v11 + 280);
            v449 = *(_OWORD *)(v11 + 296);
            v484 = *(_OWORD *)(v11 + 312);
            v519 = *(_OWORD *)(v11 + 328);
            v251 = *(_OWORD *)(v11 + 448);
            *(_OWORD *)(v11 + 328) = *(_OWORD *)(v11 + 464);
            *(_OWORD *)(v11 + 312) = v251;
            v252 = *(_OWORD *)(v11 + 416);
            *(_OWORD *)(v11 + 296) = *(_OWORD *)(v11 + 432);
            *(_OWORD *)(v11 + 280) = v252;
            v253 = *(_OWORD *)(v11 + 528);
            *(_OWORD *)(v11 + 376) = *(_OWORD *)(v11 + 512);
            v254 = *(_OWORD *)(v11 + 480);
            *(_OWORD *)(v11 + 360) = *(_OWORD *)(v11 + 496);
            *(_QWORD *)(v11 + 272) = result.n128_u64[0];
            *(_OWORD *)(v11 + 344) = v254;
            *(_OWORD *)(v11 + 392) = v253;
            *(double *)(v11 + 408) = v250;
            *(_OWORD *)(v11 + 512) = v624;
            *(_OWORD *)(v11 + 528) = v659;
            *(_OWORD *)(v11 + 480) = v554;
            *(_OWORD *)(v11 + 496) = v589;
            *(_OWORD *)(v11 + 448) = v484;
            *(_OWORD *)(v11 + 464) = v519;
            v255 = *(double *)(v11 + 136);
            *(_OWORD *)(v11 + 416) = v414;
            *(_OWORD *)(v11 + 432) = v449;
            if (result.n128_f64[0] < v255)
            {
              v555 = *(_OWORD *)(v11 + 208);
              v590 = *(_OWORD *)(v11 + 224);
              v625 = *(_OWORD *)(v11 + 240);
              v660 = *(_OWORD *)(v11 + 256);
              v415 = *(_OWORD *)(v11 + 144);
              v450 = *(_OWORD *)(v11 + 160);
              v485 = *(_OWORD *)(v11 + 176);
              v520 = *(_OWORD *)(v11 + 192);
              *(_QWORD *)(v11 + 136) = result.n128_u64[0];
              v256 = *(_OWORD *)(v11 + 328);
              *(_OWORD *)(v11 + 176) = *(_OWORD *)(v11 + 312);
              *(_OWORD *)(v11 + 192) = v256;
              v257 = *(_OWORD *)(v11 + 296);
              *(_OWORD *)(v11 + 144) = *(_OWORD *)(v11 + 280);
              *(_OWORD *)(v11 + 160) = v257;
              v258 = *(_OWORD *)(v11 + 360);
              *(_OWORD *)(v11 + 208) = *(_OWORD *)(v11 + 344);
              *(_OWORD *)(v11 + 224) = v258;
              v259 = *(_OWORD *)(v11 + 392);
              *(_OWORD *)(v11 + 240) = *(_OWORD *)(v11 + 376);
              *(_OWORD *)(v11 + 256) = v259;
              *(double *)(v11 + 272) = v255;
              *(_OWORD *)(v11 + 376) = v625;
              *(_OWORD *)(v11 + 392) = v660;
              *(_OWORD *)(v11 + 344) = v555;
              *(_OWORD *)(v11 + 360) = v590;
              *(_OWORD *)(v11 + 312) = v485;
              *(_OWORD *)(v11 + 328) = v520;
              v260 = *(_QWORD *)v11;
              v177 = result.n128_f64[0] < *(double *)v11;
              *(_OWORD *)(v11 + 280) = v415;
              *(_OWORD *)(v11 + 296) = v450;
              if (v177)
              {
                v261 = (_OWORD *)(v11 + 144);
                v486 = *(_OWORD *)(v11 + 40);
                v521 = *(_OWORD *)(v11 + 56);
                v416 = *(_OWORD *)(v11 + 8);
                v451 = *(_OWORD *)(v11 + 24);
                v626 = *(_OWORD *)(v11 + 104);
                v661 = *(_OWORD *)(v11 + 120);
                v556 = *(__n128 *)(v11 + 72);
                v591 = *(_OWORD *)(v11 + 88);
                *(_QWORD *)v11 = result.n128_u64[0];
                v262 = *(_OWORD *)(v11 + 240);
                *(_OWORD *)(v11 + 120) = *(_OWORD *)(v11 + 256);
                *(_OWORD *)(v11 + 104) = v262;
                v263 = *(_OWORD *)(v11 + 208);
                *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 + 224);
                *(_OWORD *)(v11 + 72) = v263;
                v264 = *(_OWORD *)(v11 + 160);
                *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 + 144);
                *(_OWORD *)(v11 + 24) = v264;
                v265 = *(_OWORD *)(v11 + 192);
                *(_OWORD *)(v11 + 40) = *(_OWORD *)(v11 + 176);
                *(_OWORD *)(v11 + 56) = v265;
                *(_QWORD *)(v11 + 136) = v260;
LABEL_160:
                v261[2] = v486;
                v261[3] = v521;
                *v261 = v416;
                v261[1] = v451;
                result = v556;
                v261[6] = v626;
                v261[7] = v661;
                v261[4] = v556;
                v261[5] = v591;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 3263)
        {
          v266 = v11 + 136;
          v268 = v11 == a2 || v266 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v268)
            {
              v269 = 0;
              v270 = v11;
              do
              {
                v272 = v266;
                result.n128_u64[0] = *(_QWORD *)(v270 + 136);
                if (result.n128_f64[0] < *(double *)v270)
                {
                  v417 = *(_OWORD *)(v270 + 144);
                  v452 = *(_OWORD *)(v270 + 160);
                  v487 = *(_OWORD *)(v270 + 176);
                  v522 = *(_OWORD *)(v270 + 192);
                  v627 = *(_OWORD *)(v270 + 240);
                  v662 = *(_OWORD *)(v270 + 256);
                  v557 = *(__n128 *)(v270 + 208);
                  v592 = *(_OWORD *)(v270 + 224);
                  v273 = *(double *)v270;
                  v274 = v269;
                  do
                  {
                    v275 = v11 + v274;
                    *(double *)(v275 + 136) = v273;
                    v276 = *(_OWORD *)(v11 + v274 + 88);
                    *(_OWORD *)(v275 + 208) = *(_OWORD *)(v11 + v274 + 72);
                    *(_OWORD *)(v275 + 224) = v276;
                    v277 = *(_OWORD *)(v11 + v274 + 120);
                    *(_OWORD *)(v275 + 240) = *(_OWORD *)(v11 + v274 + 104);
                    *(_OWORD *)(v275 + 256) = v277;
                    v278 = *(_OWORD *)(v11 + v274 + 24);
                    *(_OWORD *)(v275 + 144) = *(_OWORD *)(v11 + v274 + 8);
                    *(_OWORD *)(v275 + 160) = v278;
                    v279 = *(_OWORD *)(v11 + v274 + 56);
                    *(_OWORD *)(v275 + 176) = *(_OWORD *)(v11 + v274 + 40);
                    *(_OWORD *)(v275 + 192) = v279;
                    if (!v274)
                    {
                      v271 = (_QWORD *)v11;
                      goto LABEL_119;
                    }
                    v273 = *(double *)(v275 - 136);
                    v274 -= 136;
                  }
                  while (result.n128_f64[0] < v273);
                  v271 = (_QWORD *)(v11 + v274 + 136);
LABEL_119:
                  *v271 = result.n128_u64[0];
                  *(_OWORD *)(v275 + 56) = v522;
                  *(_OWORD *)(v275 + 40) = v487;
                  *(_OWORD *)(v275 + 24) = v452;
                  *(_OWORD *)(v275 + 8) = v417;
                  result = v557;
                  *(_OWORD *)(v275 + 120) = v662;
                  *(_OWORD *)(v275 + 104) = v627;
                  *(_OWORD *)(v275 + 88) = v592;
                  *(__n128 *)(v275 + 72) = v557;
                }
                v266 = v272 + 136;
                v269 += 136;
                v270 = v272;
              }
              while (v272 + 136 != a2);
            }
          }
          else if (!v268)
          {
            v342 = v11 + 8;
            do
            {
              v343 = v266;
              result.n128_u64[0] = *(_QWORD *)(a1 + 136);
              if (result.n128_f64[0] < *(double *)a1)
              {
                v421 = *(_OWORD *)(a1 + 144);
                v456 = *(_OWORD *)(a1 + 160);
                v491 = *(_OWORD *)(a1 + 176);
                v526 = *(_OWORD *)(a1 + 192);
                v631 = *(_OWORD *)(a1 + 240);
                v666 = *(_OWORD *)(a1 + 256);
                v561 = *(__n128 *)(a1 + 208);
                v596 = *(_OWORD *)(a1 + 224);
                v344 = *(double *)a1;
                v345 = v342;
                do
                {
                  *(double *)(v345 + 128) = v344;
                  v346 = *(_OWORD *)(v345 + 80);
                  *(_OWORD *)(v345 + 200) = *(_OWORD *)(v345 + 64);
                  *(_OWORD *)(v345 + 216) = v346;
                  v347 = *(_OWORD *)(v345 + 112);
                  *(_OWORD *)(v345 + 232) = *(_OWORD *)(v345 + 96);
                  *(_OWORD *)(v345 + 248) = v347;
                  v348 = *(_OWORD *)(v345 + 16);
                  *(_OWORD *)(v345 + 136) = *(_OWORD *)v345;
                  *(_OWORD *)(v345 + 152) = v348;
                  v349 = *(_OWORD *)(v345 + 48);
                  *(_OWORD *)(v345 + 168) = *(_OWORD *)(v345 + 32);
                  *(_OWORD *)(v345 + 184) = v349;
                  v344 = *(double *)(v345 - 144);
                  v345 -= 136;
                }
                while (result.n128_f64[0] < v344);
                *(_QWORD *)(v345 + 128) = result.n128_u64[0];
                *(_OWORD *)(v345 + 184) = v526;
                *(_OWORD *)(v345 + 168) = v491;
                *(_OWORD *)(v345 + 152) = v456;
                *(_OWORD *)(v345 + 136) = v421;
                result = v561;
                *(_OWORD *)(v345 + 248) = v666;
                *(_OWORD *)(v345 + 232) = v631;
                *(_OWORD *)(v345 + 216) = v596;
                *(__n128 *)(v345 + 200) = v561;
              }
              v266 = v343 + 136;
              v342 += 136;
              a1 = v343;
            }
            while (v343 + 136 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v11 == a2)
            return result;
          v280 = (unint64_t)(v13 - 2) >> 1;
          v281 = v280;
          do
          {
            if (v280 >= v281)
            {
              v283 = (2 * v281) | 1;
              v284 = v11 + 136 * v283;
              if (2 * v281 + 2 < v13 && *(double *)v284 < *(double *)(v284 + 136))
              {
                v284 += 136;
                v283 = 2 * v281 + 2;
              }
              v285 = v11 + 136 * v281;
              v286 = *(double *)v284;
              v287 = *(double *)v285;
              if (*(double *)v284 >= *(double *)v285)
              {
                v288 = v11 + 136 * v281;
                v488 = *(_OWORD *)(v288 + 40);
                v523 = *(_OWORD *)(v288 + 56);
                v418 = *(_OWORD *)(v288 + 8);
                v453 = *(_OWORD *)(v288 + 24);
                v628 = *(_OWORD *)(v288 + 104);
                v663 = *(_OWORD *)(v288 + 120);
                v558 = *(_OWORD *)(v288 + 72);
                v593 = *(_OWORD *)(v288 + 88);
                do
                {
                  v289 = v285;
                  v285 = v284;
                  *(double *)v289 = v286;
                  v290 = *(_OWORD *)(v284 + 8);
                  v291 = *(_OWORD *)(v284 + 24);
                  v292 = *(_OWORD *)(v284 + 40);
                  *(_OWORD *)(v289 + 56) = *(_OWORD *)(v284 + 56);
                  *(_OWORD *)(v289 + 40) = v292;
                  *(_OWORD *)(v289 + 24) = v291;
                  *(_OWORD *)(v289 + 8) = v290;
                  v293 = *(_OWORD *)(v284 + 72);
                  v294 = *(_OWORD *)(v284 + 88);
                  v295 = *(_OWORD *)(v284 + 104);
                  *(_OWORD *)(v289 + 120) = *(_OWORD *)(v284 + 120);
                  *(_OWORD *)(v289 + 104) = v295;
                  *(_OWORD *)(v289 + 88) = v294;
                  *(_OWORD *)(v289 + 72) = v293;
                  if (v280 < v283)
                    break;
                  v296 = 2 * v283;
                  v283 = (2 * v283) | 1;
                  v284 = v11 + 136 * v283;
                  v297 = v296 + 2;
                  if (v297 < v13 && *(double *)v284 < *(double *)(v284 + 136))
                  {
                    v284 += 136;
                    v283 = v297;
                  }
                  v286 = *(double *)v284;
                }
                while (*(double *)v284 >= v287);
                *(double *)v285 = v287;
                *(_OWORD *)(v285 + 40) = v488;
                *(_OWORD *)(v285 + 56) = v523;
                *(_OWORD *)(v285 + 8) = v418;
                *(_OWORD *)(v285 + 24) = v453;
                *(_OWORD *)(v285 + 104) = v628;
                *(_OWORD *)(v285 + 120) = v663;
                *(_OWORD *)(v285 + 72) = v558;
                *(_OWORD *)(v285 + 88) = v593;
              }
            }
            v282 = v281-- <= 0;
          }
          while (!v282);
          v298 = v12 / 0x88uLL;
          while (2)
          {
            v302 = 0;
            v303 = *(_QWORD *)v11;
            v372 = *(_OWORD *)(v11 + 40);
            v375 = *(_OWORD *)(v11 + 56);
            v366 = *(_OWORD *)(v11 + 8);
            v369 = *(_OWORD *)(v11 + 24);
            v384 = *(_OWORD *)(v11 + 104);
            v387 = *(_OWORD *)(v11 + 120);
            v378 = *(__n128 *)(v11 + 72);
            v381 = *(_OWORD *)(v11 + 88);
            v304 = v11;
            do
            {
              v311 = v304;
              v304 += 136 * v302 + 136;
              v312 = 2 * v302;
              v302 = (2 * v302) | 1;
              v313 = v312 + 2;
              if (v313 < v298 && *(double *)v304 < *(double *)(v304 + 136))
              {
                v304 += 136;
                v302 = v313;
              }
              *(_QWORD *)v311 = *(_QWORD *)v304;
              v305 = *(_OWORD *)(v304 + 8);
              v306 = *(_OWORD *)(v304 + 24);
              v307 = *(_OWORD *)(v304 + 40);
              *(_OWORD *)(v311 + 56) = *(_OWORD *)(v304 + 56);
              *(_OWORD *)(v311 + 40) = v307;
              *(_OWORD *)(v311 + 24) = v306;
              *(_OWORD *)(v311 + 8) = v305;
              v308 = *(_OWORD *)(v304 + 72);
              v309 = *(_OWORD *)(v304 + 88);
              v310 = *(_OWORD *)(v304 + 104);
              *(_OWORD *)(v311 + 120) = *(_OWORD *)(v304 + 120);
              *(_OWORD *)(v311 + 104) = v310;
              *(_OWORD *)(v311 + 88) = v309;
              *(_OWORD *)(v311 + 72) = v308;
            }
            while (v302 <= (uint64_t)((unint64_t)(v298 - 2) >> 1));
            v314 = v304 + 8;
            if (v304 != a2 - 136)
            {
              *(_QWORD *)v304 = *(_QWORD *)(a2 - 136);
              v315 = *(_OWORD *)(a2 - 128);
              v316 = *(_OWORD *)(a2 - 112);
              v317 = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v304 + 40) = *(_OWORD *)(a2 - 96);
              *(_OWORD *)(v304 + 56) = v317;
              *(_OWORD *)v314 = v315;
              *(_OWORD *)(v304 + 24) = v316;
              v318 = *(_OWORD *)(a2 - 64);
              v319 = *(_OWORD *)(a2 - 48);
              v320 = *(_OWORD *)(a2 - 16);
              *(_OWORD *)(v304 + 104) = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v304 + 120) = v320;
              *(_OWORD *)(v304 + 72) = v318;
              *(_OWORD *)(v304 + 88) = v319;
              *(_QWORD *)(a2 - 136) = v303;
              *(_OWORD *)(a2 - 96) = v372;
              *(_OWORD *)(a2 - 80) = v375;
              *(_OWORD *)(a2 - 128) = v366;
              *(_OWORD *)(a2 - 112) = v369;
              result = v378;
              *(_OWORD *)(a2 - 32) = v384;
              *(_OWORD *)(a2 - 16) = v387;
              *(__n128 *)(a2 - 64) = v378;
              *(_OWORD *)(a2 - 48) = v381;
              v321 = v304 - v11 + 136;
              if (v321 >= 137)
              {
                v322 = (v321 / 0x88uLL - 2) >> 1;
                v323 = v11 + 136 * v322;
                v324 = *(double *)v323;
                result.n128_u64[0] = *(_QWORD *)v304;
                if (*(double *)v323 < *(double *)v304)
                {
                  v489 = *(_OWORD *)(v304 + 40);
                  v524 = *(_OWORD *)(v304 + 56);
                  v419 = *(_OWORD *)v314;
                  v454 = *(_OWORD *)(v304 + 24);
                  v629 = *(_OWORD *)(v304 + 104);
                  v664 = *(_OWORD *)(v304 + 120);
                  v559 = *(__n128 *)(v304 + 72);
                  v594 = *(_OWORD *)(v304 + 88);
                  do
                  {
                    v325 = v304;
                    v304 = v323;
                    *(double *)v325 = v324;
                    v326 = *(_OWORD *)(v323 + 8);
                    v327 = *(_OWORD *)(v323 + 24);
                    v328 = *(_OWORD *)(v323 + 40);
                    *(_OWORD *)(v325 + 56) = *(_OWORD *)(v323 + 56);
                    *(_OWORD *)(v325 + 40) = v328;
                    *(_OWORD *)(v325 + 24) = v327;
                    *(_OWORD *)(v325 + 8) = v326;
                    v329 = *(_OWORD *)(v323 + 72);
                    v330 = *(_OWORD *)(v323 + 88);
                    v331 = *(_OWORD *)(v323 + 104);
                    *(_OWORD *)(v325 + 120) = *(_OWORD *)(v323 + 120);
                    *(_OWORD *)(v325 + 104) = v331;
                    *(_OWORD *)(v325 + 88) = v330;
                    *(_OWORD *)(v325 + 72) = v329;
                    if (!v322)
                      break;
                    v322 = (v322 - 1) >> 1;
                    v323 = v11 + 136 * v322;
                    v324 = *(double *)v323;
                  }
                  while (*(double *)v323 < result.n128_f64[0]);
                  v314 = v304 + 8;
                  *(_QWORD *)v304 = result.n128_u64[0];
                  *(_OWORD *)(v304 + 40) = v489;
                  *(_OWORD *)(v304 + 56) = v524;
                  *(_OWORD *)(v304 + 8) = v419;
                  *(_OWORD *)(v304 + 24) = v454;
                  result = v559;
                  v299 = v594;
                  v300 = v629;
                  v301 = v664;
LABEL_143:
                  *(_OWORD *)(v314 + 96) = v300;
                  *(_OWORD *)(v314 + 112) = v301;
                  *(__n128 *)(v314 + 64) = result;
                  *(_OWORD *)(v314 + 80) = v299;
                }
              }
              a2 -= 136;
              v282 = v298-- <= 2;
              if (v282)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v304 = v303;
          *(_OWORD *)(v304 + 40) = v372;
          *(_OWORD *)(v304 + 56) = v375;
          *(_OWORD *)v314 = v366;
          *(_OWORD *)(v304 + 24) = v369;
          result = v378;
          v299 = v381;
          v300 = v384;
          v301 = v387;
          goto LABEL_143;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = (double *)(v11 + 136 * ((unint64_t)v13 >> 1));
        v16 = *(double *)(a2 - 136);
        if ((unint64_t)v12 < 0x4401)
        {
          v20 = *(double *)v11;
          v21 = *v15;
          if (*(double *)v11 >= *v15)
          {
            if (v16 < v20)
            {
              v462 = *(_OWORD *)(v11 + 40);
              v497 = *(_OWORD *)(v11 + 56);
              v392 = *(_OWORD *)(v11 + 8);
              v427 = *(_OWORD *)(v11 + 24);
              v602 = *(_OWORD *)(v11 + 104);
              v637 = *(_OWORD *)(v11 + 120);
              v532 = *(_OWORD *)(v11 + 72);
              v567 = *(_OWORD *)(v11 + 88);
              *(double *)v11 = v16;
              v44 = *v8;
              v45 = *(_OWORD *)(a2 - 112);
              v46 = *(_OWORD *)(a2 - 96);
              *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v11 + 40) = v46;
              *(_OWORD *)(v11 + 24) = v45;
              *(_OWORD *)(v11 + 8) = v44;
              v47 = *(_OWORD *)(a2 - 64);
              v48 = *(_OWORD *)(a2 - 48);
              v49 = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v11 + 120) = *(_OWORD *)(a2 - 16);
              *(_OWORD *)(v11 + 104) = v49;
              *(_OWORD *)(v11 + 88) = v48;
              *(_OWORD *)(v11 + 72) = v47;
              *(double *)(a2 - 136) = v20;
              *(_OWORD *)(a2 - 96) = v462;
              *(_OWORD *)(a2 - 80) = v497;
              *v8 = v392;
              *(_OWORD *)(a2 - 112) = v427;
              *(_OWORD *)(a2 - 32) = v602;
              *(_OWORD *)(a2 - 16) = v637;
              *(_OWORD *)(a2 - 64) = v532;
              *(_OWORD *)(a2 - 48) = v567;
              v50 = *v15;
              if (*(double *)v11 < *v15)
              {
                v51 = v11 + 136 * v14;
                v463 = *(_OWORD *)(v51 + 40);
                v498 = *(_OWORD *)(v51 + 56);
                v393 = *(_OWORD *)(v51 + 8);
                v428 = *(_OWORD *)(v51 + 24);
                v603 = *(_OWORD *)(v51 + 104);
                v638 = *(_OWORD *)(v51 + 120);
                v533 = *(_OWORD *)(v51 + 72);
                v568 = *(_OWORD *)(v51 + 88);
                *v15 = *(double *)v11;
                v52 = *(_OWORD *)(v11 + 40);
                v53 = *(_OWORD *)(v11 + 56);
                v54 = *(_OWORD *)(v11 + 24);
                *(_OWORD *)(v51 + 8) = *(_OWORD *)(v11 + 8);
                *(_OWORD *)(v51 + 56) = v53;
                *(_OWORD *)(v51 + 40) = v52;
                *(_OWORD *)(v51 + 24) = v54;
                v55 = *(_OWORD *)(v11 + 104);
                v56 = *(_OWORD *)(v11 + 120);
                v57 = *(_OWORD *)(v11 + 88);
                *(_OWORD *)(v51 + 72) = *(_OWORD *)(v11 + 72);
                *(_OWORD *)(v51 + 120) = v56;
                *(_OWORD *)(v51 + 104) = v55;
                *(_OWORD *)(v51 + 88) = v57;
                *(double *)v11 = v50;
                *(_OWORD *)(v11 + 40) = v463;
                *(_OWORD *)(v11 + 56) = v498;
                *(_OWORD *)(v11 + 8) = v393;
                *(_OWORD *)(v11 + 24) = v428;
                *(_OWORD *)(v11 + 104) = v603;
                *(_OWORD *)(v11 + 120) = v638;
                *(_OWORD *)(v11 + 72) = v533;
                *(_OWORD *)(v11 + 88) = v568;
                --a3;
                v58 = *(double *)v11;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
          }
          else
          {
            v22 = (__int128 *)(v11 + 136 * v14 + 8);
            if (v16 >= v20)
            {
              v468 = v22[2];
              v503 = v22[3];
              v398 = *v22;
              v433 = v22[1];
              v608 = v22[6];
              v643 = v22[7];
              v538 = v22[4];
              v573 = v22[5];
              *v15 = v20;
              v94 = *(_OWORD *)(v11 + 24);
              v95 = *(_OWORD *)(v11 + 56);
              v96 = *(_OWORD *)(v11 + 8);
              v22[2] = *(_OWORD *)(v11 + 40);
              v22[3] = v95;
              *v22 = v96;
              v22[1] = v94;
              v97 = *(_OWORD *)(v11 + 88);
              v98 = *(_OWORD *)(v11 + 120);
              v99 = *(_OWORD *)(v11 + 72);
              v22[6] = *(_OWORD *)(v11 + 104);
              v22[7] = v98;
              v22[4] = v99;
              v22[5] = v97;
              *(double *)v11 = v21;
              *(_OWORD *)(v11 + 56) = v503;
              *(_OWORD *)(v11 + 40) = v468;
              *(_OWORD *)(v11 + 24) = v433;
              *(_OWORD *)(v11 + 8) = v398;
              *(_OWORD *)(v11 + 120) = v643;
              *(_OWORD *)(v11 + 104) = v608;
              *(_OWORD *)(v11 + 88) = v573;
              *(_OWORD *)(v11 + 72) = v538;
              v100 = *(double *)(a2 - 136);
              if (v100 >= v21)
                goto LABEL_31;
              v459 = *(_OWORD *)(v11 + 40);
              v494 = *(_OWORD *)(v11 + 56);
              v389 = *(_OWORD *)(v11 + 8);
              v424 = *(_OWORD *)(v11 + 24);
              v599 = *(_OWORD *)(v11 + 104);
              v634 = *(_OWORD *)(v11 + 120);
              v529 = *(_OWORD *)(v11 + 72);
              v564 = *(_OWORD *)(v11 + 88);
              *(double *)v11 = v100;
              v101 = *v8;
              v102 = *(_OWORD *)(a2 - 112);
              v103 = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 - 96);
              *(_OWORD *)(v11 + 56) = v103;
              *(_OWORD *)(v11 + 8) = v101;
              *(_OWORD *)(v11 + 24) = v102;
              v104 = *(_OWORD *)(a2 - 64);
              v105 = *(_OWORD *)(a2 - 48);
              v106 = *(_OWORD *)(a2 - 16);
              *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v11 + 120) = v106;
              *(_OWORD *)(v11 + 72) = v104;
              *(_OWORD *)(v11 + 88) = v105;
            }
            else
            {
              v459 = v22[2];
              v494 = v22[3];
              v389 = *v22;
              v424 = v22[1];
              v599 = v22[6];
              v634 = v22[7];
              v529 = v22[4];
              v564 = v22[5];
              *v15 = v16;
              v23 = *v8;
              v24 = *(_OWORD *)(a2 - 112);
              v25 = *(_OWORD *)(a2 - 80);
              v22[2] = *(_OWORD *)(a2 - 96);
              v22[3] = v25;
              *v22 = v23;
              v22[1] = v24;
              v26 = *(_OWORD *)(a2 - 64);
              v27 = *(_OWORD *)(a2 - 48);
              v28 = *(_OWORD *)(a2 - 16);
              v22[6] = *(_OWORD *)(a2 - 32);
              v22[7] = v28;
              v22[4] = v26;
              v22[5] = v27;
            }
            *(double *)(a2 - 136) = v21;
            *(_OWORD *)(a2 - 96) = v459;
            *(_OWORD *)(a2 - 80) = v494;
            *v8 = v389;
            *(_OWORD *)(a2 - 112) = v424;
            *(_OWORD *)(a2 - 32) = v599;
            *(_OWORD *)(a2 - 16) = v634;
            *(_OWORD *)(a2 - 64) = v529;
            *(_OWORD *)(a2 - 48) = v564;
          }
LABEL_31:
          --a3;
          v58 = *(double *)v11;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(double *)(v11 - 136) < v58)
            goto LABEL_56;
          v371 = *(_OWORD *)(v11 + 40);
          v374 = *(_OWORD *)(v11 + 56);
          v365 = *(_OWORD *)(v11 + 8);
          v368 = *(_OWORD *)(v11 + 24);
          v383 = *(_OWORD *)(v11 + 104);
          v386 = *(_OWORD *)(v11 + 120);
          v377 = *(__n128 *)(v11 + 72);
          v380 = *(_OWORD *)(v11 + 88);
          if (v58 >= *(double *)(a2 - 136))
          {
            v216 = v11 + 136;
            do
            {
              v11 = v216;
              if (v216 >= a2)
                break;
              v216 += 136;
            }
            while (v58 >= *(double *)v11);
          }
          else
          {
            do
            {
              v215 = *(double *)(v11 + 136);
              v11 += 136;
            }
            while (v58 >= v215);
          }
          v217 = a2;
          if (v11 < a2)
          {
            v217 = a2;
            do
            {
              v218 = *(double *)(v217 - 136);
              v217 -= 136;
            }
            while (v58 < v218);
          }
          if (v11 < v217)
          {
            v219 = *(_QWORD *)v11;
            do
            {
              v481 = *(_OWORD *)(v11 + 40);
              v516 = *(_OWORD *)(v11 + 56);
              v411 = *(_OWORD *)(v11 + 8);
              v446 = *(_OWORD *)(v11 + 24);
              v621 = *(_OWORD *)(v11 + 104);
              v656 = *(_OWORD *)(v11 + 120);
              v551 = *(_OWORD *)(v11 + 72);
              v586 = *(_OWORD *)(v11 + 88);
              *(_QWORD *)v11 = *(_QWORD *)v217;
              v220 = *(_OWORD *)(v217 + 8);
              v221 = *(_OWORD *)(v217 + 24);
              v222 = *(_OWORD *)(v217 + 40);
              *(_OWORD *)(v11 + 56) = *(_OWORD *)(v217 + 56);
              *(_OWORD *)(v11 + 40) = v222;
              *(_OWORD *)(v11 + 24) = v221;
              *(_OWORD *)(v11 + 8) = v220;
              v223 = *(_OWORD *)(v217 + 72);
              v224 = *(_OWORD *)(v217 + 88);
              v225 = *(_OWORD *)(v217 + 104);
              *(_OWORD *)(v11 + 120) = *(_OWORD *)(v217 + 120);
              *(_OWORD *)(v11 + 104) = v225;
              *(_OWORD *)(v11 + 88) = v224;
              *(_OWORD *)(v11 + 72) = v223;
              *(_QWORD *)v217 = v219;
              *(_OWORD *)(v217 + 56) = v516;
              *(_OWORD *)(v217 + 40) = v481;
              *(_OWORD *)(v217 + 24) = v446;
              *(_OWORD *)(v217 + 8) = v411;
              *(_OWORD *)(v217 + 120) = v656;
              *(_OWORD *)(v217 + 104) = v621;
              *(_OWORD *)(v217 + 88) = v586;
              *(_OWORD *)(v217 + 72) = v551;
              do
              {
                v226 = *(double *)(v11 + 136);
                v11 += 136;
                v219 = *(_QWORD *)&v226;
              }
              while (v58 >= v226);
              do
              {
                v227 = *(double *)(v217 - 136);
                v217 -= 136;
              }
              while (v58 < v227);
            }
            while (v11 < v217);
          }
          if (v11 - 136 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v11 - 136);
            v228 = *(_OWORD *)(v11 - 128);
            v229 = *(_OWORD *)(v11 - 112);
            v230 = *(_OWORD *)(v11 - 80);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(v11 - 96);
            *(_OWORD *)(a1 + 56) = v230;
            *(_OWORD *)(a1 + 8) = v228;
            *(_OWORD *)(a1 + 24) = v229;
            v231 = *(_OWORD *)(v11 - 64);
            v232 = *(_OWORD *)(v11 - 48);
            v233 = *(_OWORD *)(v11 - 16);
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v11 - 32);
            *(_OWORD *)(a1 + 120) = v233;
            *(_OWORD *)(a1 + 72) = v231;
            *(_OWORD *)(a1 + 88) = v232;
          }
          a4 = 0;
          *(double *)(v11 - 136) = v58;
          *(_OWORD *)(v11 - 96) = v371;
          *(_OWORD *)(v11 - 80) = v374;
          *(_OWORD *)(v11 - 128) = v365;
          *(_OWORD *)(v11 - 112) = v368;
          result = v377;
          *(_OWORD *)(v11 - 32) = v383;
          *(_OWORD *)(v11 - 16) = v386;
          *(__n128 *)(v11 - 64) = v377;
          *(_OWORD *)(v11 - 48) = v380;
          continue;
        }
        v17 = *v15;
        v18 = *(double *)v11;
        if (*v15 >= *(double *)v11)
        {
          if (v16 < v17)
          {
            v29 = v11 + 136 * v14;
            v460 = *(_OWORD *)(v29 + 40);
            v495 = *(_OWORD *)(v29 + 56);
            v390 = *(_OWORD *)(v29 + 8);
            v425 = *(_OWORD *)(v29 + 24);
            v600 = *(_OWORD *)(v29 + 104);
            v635 = *(_OWORD *)(v29 + 120);
            v530 = *(_OWORD *)(v29 + 72);
            v565 = *(_OWORD *)(v29 + 88);
            *v15 = v16;
            v30 = *v8;
            v31 = *(_OWORD *)(a2 - 112);
            v32 = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(v29 + 56) = *(_OWORD *)(a2 - 80);
            *(_OWORD *)(v29 + 40) = v32;
            *(_OWORD *)(v29 + 24) = v31;
            *(_OWORD *)(v29 + 8) = v30;
            v33 = *(_OWORD *)(a2 - 64);
            v34 = *(_OWORD *)(a2 - 48);
            v35 = *(_OWORD *)(a2 - 32);
            *(_OWORD *)(v29 + 120) = *(_OWORD *)(a2 - 16);
            *(_OWORD *)(v29 + 104) = v35;
            *(_OWORD *)(v29 + 88) = v34;
            *(_OWORD *)(v29 + 72) = v33;
            *(double *)(a2 - 136) = v17;
            *(_OWORD *)(a2 - 96) = v460;
            *(_OWORD *)(a2 - 80) = v495;
            *v8 = v390;
            *(_OWORD *)(a2 - 112) = v425;
            *(_OWORD *)(a2 - 32) = v600;
            *(_OWORD *)(a2 - 16) = v635;
            *(_OWORD *)(a2 - 64) = v530;
            *(_OWORD *)(a2 - 48) = v565;
            v36 = *(_QWORD *)v11;
            if (*v15 < *(double *)v11)
            {
              v37 = (_OWORD *)(v29 + 8);
              v461 = *(_OWORD *)(v11 + 40);
              v496 = *(_OWORD *)(v11 + 56);
              v391 = *(_OWORD *)(v11 + 8);
              v426 = *(_OWORD *)(v11 + 24);
              v601 = *(_OWORD *)(v11 + 104);
              v636 = *(_OWORD *)(v11 + 120);
              v531 = *(_OWORD *)(v11 + 72);
              v566 = *(_OWORD *)(v11 + 88);
              *(double *)v11 = *v15;
              v38 = v37[2];
              v39 = v37[3];
              v40 = v37[1];
              *(_OWORD *)(v11 + 8) = *v37;
              *(_OWORD *)(v11 + 56) = v39;
              *(_OWORD *)(v11 + 40) = v38;
              *(_OWORD *)(v11 + 24) = v40;
              v41 = v37[6];
              v42 = v37[7];
              v43 = v37[5];
              *(_OWORD *)(v11 + 72) = v37[4];
              *(_OWORD *)(v11 + 120) = v42;
              *(_OWORD *)(v11 + 104) = v41;
              *(_OWORD *)(v11 + 88) = v43;
              *(_QWORD *)v15 = v36;
              v37[2] = v461;
              v37[3] = v496;
              *v37 = v391;
              v37[1] = v426;
              v37[6] = v601;
              v37[7] = v636;
              v37[4] = v531;
              v37[5] = v566;
            }
          }
        }
        else
        {
          v19 = (__int128 *)(v11 + 8);
          if (v16 < v17)
          {
            v458 = *(_OWORD *)(v11 + 40);
            v493 = *(_OWORD *)(v11 + 56);
            v388 = *v19;
            v423 = *(_OWORD *)(v11 + 24);
            v598 = *(_OWORD *)(v11 + 104);
            v633 = *(_OWORD *)(v11 + 120);
            v528 = *(_OWORD *)(v11 + 72);
            v563 = *(_OWORD *)(v11 + 88);
            *(double *)v11 = v16;
            goto LABEL_21;
          }
          v464 = *(_OWORD *)(v11 + 40);
          v499 = *(_OWORD *)(v11 + 56);
          v394 = *v19;
          v429 = *(_OWORD *)(v11 + 24);
          v604 = *(_OWORD *)(v11 + 104);
          v639 = *(_OWORD *)(v11 + 120);
          v534 = *(_OWORD *)(v11 + 72);
          v569 = *(_OWORD *)(v11 + 88);
          *(double *)v11 = v17;
          v59 = v11 + 136 * v14;
          v60 = *(_OWORD *)(v59 + 24);
          v61 = *(_OWORD *)(v59 + 56);
          v62 = *(_OWORD *)(v59 + 8);
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(v59 + 40);
          *(_OWORD *)(v11 + 56) = v61;
          *v19 = v62;
          *(_OWORD *)(v11 + 24) = v60;
          v63 = *(_OWORD *)(v59 + 88);
          v64 = *(_OWORD *)(v59 + 120);
          v65 = *(_OWORD *)(v59 + 72);
          *(_OWORD *)(v11 + 104) = *(_OWORD *)(v59 + 104);
          *(_OWORD *)(v11 + 120) = v64;
          *(_OWORD *)(v11 + 72) = v65;
          *(_OWORD *)(v11 + 88) = v63;
          *v15 = v18;
          *(_OWORD *)(v59 + 56) = v499;
          *(_OWORD *)(v59 + 40) = v464;
          *(_OWORD *)(v59 + 24) = v429;
          *(_OWORD *)(v59 + 8) = v394;
          *(_OWORD *)(v59 + 120) = v639;
          *(_OWORD *)(v59 + 104) = v604;
          *(_OWORD *)(v59 + 88) = v569;
          *(_OWORD *)(v59 + 72) = v534;
          v66 = *(double *)(a2 - 136);
          if (v66 < v18)
          {
            v19 = (__int128 *)(v59 + 8);
            v458 = *(_OWORD *)(v59 + 40);
            v493 = *(_OWORD *)(v59 + 56);
            v388 = *(_OWORD *)(v59 + 8);
            v423 = *(_OWORD *)(v59 + 24);
            v598 = *(_OWORD *)(v59 + 104);
            v633 = *(_OWORD *)(v59 + 120);
            v528 = *(_OWORD *)(v59 + 72);
            v563 = *(_OWORD *)(v59 + 88);
            *v15 = v66;
LABEL_21:
            v67 = *v8;
            v68 = *(_OWORD *)(a2 - 112);
            v69 = *(_OWORD *)(a2 - 80);
            v19[2] = *(_OWORD *)(a2 - 96);
            v19[3] = v69;
            *v19 = v67;
            v19[1] = v68;
            v70 = *(_OWORD *)(a2 - 64);
            v71 = *(_OWORD *)(a2 - 48);
            v72 = *(_OWORD *)(a2 - 16);
            v19[6] = *(_OWORD *)(a2 - 32);
            v19[7] = v72;
            v19[4] = v70;
            v19[5] = v71;
            *(double *)(a2 - 136) = v18;
            *(_OWORD *)(a2 - 96) = v458;
            *(_OWORD *)(a2 - 80) = v493;
            *v8 = v388;
            *(_OWORD *)(a2 - 112) = v423;
            *(_OWORD *)(a2 - 32) = v598;
            *(_OWORD *)(a2 - 16) = v633;
            *(_OWORD *)(a2 - 64) = v528;
            *(_OWORD *)(a2 - 48) = v563;
          }
        }
        v73 = v14 - 1;
        v74 = (double *)(v11 + 136 * (v14 - 1));
        v75 = *v74;
        v76 = *(double *)(v11 + 136);
        v77 = *v362;
        if (*v74 >= v76)
        {
          if (v77 < v75)
          {
            v79 = v11 + 136 * v73;
            v466 = *(_OWORD *)(v79 + 40);
            v501 = *(_OWORD *)(v79 + 56);
            v396 = *(_OWORD *)(v79 + 8);
            v431 = *(_OWORD *)(v79 + 24);
            v606 = *(_OWORD *)(v79 + 104);
            v641 = *(_OWORD *)(v79 + 120);
            v536 = *(_OWORD *)(v79 + 72);
            v571 = *(_OWORD *)(v79 + 88);
            *v74 = v77;
            v80 = *v9;
            v81 = *(_OWORD *)(a2 - 248);
            v82 = *(_OWORD *)(a2 - 232);
            *(_OWORD *)(v79 + 56) = *(_OWORD *)(a2 - 216);
            *(_OWORD *)(v79 + 40) = v82;
            *(_OWORD *)(v79 + 24) = v81;
            *(_OWORD *)(v79 + 8) = v80;
            v83 = *(_OWORD *)(a2 - 200);
            v84 = *(_OWORD *)(a2 - 184);
            v85 = *(_OWORD *)(a2 - 168);
            *(_OWORD *)(v79 + 120) = *(_OWORD *)(a2 - 152);
            *(_OWORD *)(v79 + 104) = v85;
            *(_OWORD *)(v79 + 88) = v84;
            *(_OWORD *)(v79 + 72) = v83;
            *v362 = v75;
            *(_OWORD *)(a2 - 232) = v466;
            *(_OWORD *)(a2 - 216) = v501;
            *v9 = v396;
            *(_OWORD *)(a2 - 248) = v431;
            *(_OWORD *)(a2 - 168) = v606;
            *(_OWORD *)(a2 - 152) = v641;
            *(_OWORD *)(a2 - 200) = v536;
            *(_OWORD *)(a2 - 184) = v571;
            v86 = *(double *)(v11 + 136);
            if (*v74 < v86)
            {
              v87 = (__int128 *)(v79 + 8);
              v397 = *(_OWORD *)(v11 + 144);
              v432 = *(_OWORD *)(v11 + 160);
              v467 = *(_OWORD *)(v11 + 176);
              v502 = *(_OWORD *)(v11 + 192);
              v607 = *(_OWORD *)(v11 + 240);
              v642 = *(_OWORD *)(v11 + 256);
              v537 = *(_OWORD *)(v11 + 208);
              v572 = *(_OWORD *)(v11 + 224);
              *(double *)(v11 + 136) = *v74;
              v88 = *v87;
              v89 = v87[1];
              v90 = v87[3];
              *(_OWORD *)(v11 + 176) = v87[2];
              *(_OWORD *)(v11 + 192) = v90;
              *(_OWORD *)(v11 + 144) = v88;
              *(_OWORD *)(v11 + 160) = v89;
              v91 = v87[4];
              v92 = v87[5];
              v93 = v87[7];
              *(_OWORD *)(v11 + 240) = v87[6];
              *(_OWORD *)(v11 + 256) = v93;
              *(_OWORD *)(v11 + 208) = v91;
              *(_OWORD *)(v11 + 224) = v92;
              *v74 = v86;
              v87[2] = v467;
              v87[3] = v502;
              *v87 = v397;
              v87[1] = v432;
              v87[6] = v607;
              v87[7] = v642;
              v87[4] = v537;
              v87[5] = v572;
            }
          }
        }
        else
        {
          v78 = (__int128 *)(v11 + 144);
          if (v77 < v75)
          {
            v395 = *v78;
            v430 = *(_OWORD *)(v11 + 160);
            v465 = *(_OWORD *)(v11 + 176);
            v500 = *(_OWORD *)(v11 + 192);
            v605 = *(_OWORD *)(v11 + 240);
            v640 = *(_OWORD *)(v11 + 256);
            v535 = *(_OWORD *)(v11 + 208);
            v570 = *(_OWORD *)(v11 + 224);
            *(double *)(v11 + 136) = v77;
            goto LABEL_35;
          }
          v399 = *v78;
          v434 = *(_OWORD *)(v11 + 160);
          v469 = *(_OWORD *)(v11 + 176);
          v504 = *(_OWORD *)(v11 + 192);
          v609 = *(_OWORD *)(v11 + 240);
          v644 = *(_OWORD *)(v11 + 256);
          v539 = *(_OWORD *)(v11 + 208);
          v574 = *(_OWORD *)(v11 + 224);
          *(double *)(v11 + 136) = v75;
          v107 = v11 + 136 * v73;
          v108 = *(_OWORD *)(v107 + 8);
          v109 = *(_OWORD *)(v107 + 24);
          v110 = *(_OWORD *)(v107 + 56);
          *(_OWORD *)(v11 + 176) = *(_OWORD *)(v107 + 40);
          *(_OWORD *)(v11 + 192) = v110;
          *v78 = v108;
          *(_OWORD *)(v11 + 160) = v109;
          v111 = *(_OWORD *)(v107 + 72);
          v112 = *(_OWORD *)(v107 + 88);
          v113 = *(_OWORD *)(v107 + 120);
          *(_OWORD *)(v11 + 240) = *(_OWORD *)(v107 + 104);
          *(_OWORD *)(v11 + 256) = v113;
          *(_OWORD *)(v11 + 208) = v111;
          *(_OWORD *)(v11 + 224) = v112;
          *v74 = v76;
          *(_OWORD *)(v107 + 56) = v504;
          *(_OWORD *)(v107 + 40) = v469;
          *(_OWORD *)(v107 + 24) = v434;
          *(_OWORD *)(v107 + 8) = v399;
          *(_OWORD *)(v107 + 120) = v644;
          *(_OWORD *)(v107 + 104) = v609;
          *(_OWORD *)(v107 + 88) = v574;
          *(_OWORD *)(v107 + 72) = v539;
          if (*v362 < v76)
          {
            v78 = (__int128 *)(v107 + 8);
            v465 = *(_OWORD *)(v107 + 40);
            v500 = *(_OWORD *)(v107 + 56);
            v395 = *(_OWORD *)(v107 + 8);
            v430 = *(_OWORD *)(v107 + 24);
            v605 = *(_OWORD *)(v107 + 104);
            v640 = *(_OWORD *)(v107 + 120);
            v535 = *(_OWORD *)(v107 + 72);
            v570 = *(_OWORD *)(v107 + 88);
            *v74 = *v362;
LABEL_35:
            v114 = *v9;
            v115 = *(_OWORD *)(a2 - 248);
            v116 = *(_OWORD *)(a2 - 216);
            v78[2] = *(_OWORD *)(a2 - 232);
            v78[3] = v116;
            *v78 = v114;
            v78[1] = v115;
            v117 = *(_OWORD *)(a2 - 200);
            v118 = *(_OWORD *)(a2 - 184);
            v119 = *(_OWORD *)(a2 - 152);
            v78[6] = *(_OWORD *)(a2 - 168);
            v78[7] = v119;
            v78[4] = v117;
            v78[5] = v118;
            *v362 = v76;
            *(_OWORD *)(a2 - 232) = v465;
            *(_OWORD *)(a2 - 216) = v500;
            *v9 = v395;
            *(_OWORD *)(a2 - 248) = v430;
            *(_OWORD *)(a2 - 168) = v605;
            *(_OWORD *)(a2 - 152) = v640;
            *(_OWORD *)(a2 - 200) = v535;
            *(_OWORD *)(a2 - 184) = v570;
          }
        }
        v120 = v14 + 1;
        v121 = (double *)(v11 + 136 * (v14 + 1));
        v122 = *v121;
        v123 = *(double *)(v11 + 272);
        v124 = *v361;
        if (*v121 >= v123)
        {
          if (v124 < v122)
          {
            v126 = v11 + 136 * v120;
            v471 = *(_OWORD *)(v126 + 40);
            v506 = *(_OWORD *)(v126 + 56);
            v401 = *(_OWORD *)(v126 + 8);
            v436 = *(_OWORD *)(v126 + 24);
            v611 = *(_OWORD *)(v126 + 104);
            v646 = *(_OWORD *)(v126 + 120);
            v541 = *(_OWORD *)(v126 + 72);
            v576 = *(_OWORD *)(v126 + 88);
            *v121 = v124;
            v127 = *v10;
            v128 = *(_OWORD *)(a2 - 384);
            v129 = *(_OWORD *)(a2 - 368);
            *(_OWORD *)(v126 + 56) = *(_OWORD *)(a2 - 352);
            *(_OWORD *)(v126 + 40) = v129;
            *(_OWORD *)(v126 + 24) = v128;
            *(_OWORD *)(v126 + 8) = v127;
            v130 = *(_OWORD *)(a2 - 336);
            v131 = *(_OWORD *)(a2 - 320);
            v132 = *(_OWORD *)(a2 - 304);
            *(_OWORD *)(v126 + 120) = *(_OWORD *)(a2 - 288);
            *(_OWORD *)(v126 + 104) = v132;
            *(_OWORD *)(v126 + 88) = v131;
            *(_OWORD *)(v126 + 72) = v130;
            *v361 = v122;
            *(_OWORD *)(a2 - 368) = v471;
            *(_OWORD *)(a2 - 352) = v506;
            *v10 = v401;
            *(_OWORD *)(a2 - 384) = v436;
            *(_OWORD *)(a2 - 304) = v611;
            *(_OWORD *)(a2 - 288) = v646;
            *(_OWORD *)(a2 - 336) = v541;
            *(_OWORD *)(a2 - 320) = v576;
            v133 = *(double *)(v11 + 272);
            if (*v121 < v133)
            {
              v134 = (__int128 *)(v126 + 8);
              v402 = *(_OWORD *)(v11 + 280);
              v437 = *(_OWORD *)(v11 + 296);
              v472 = *(_OWORD *)(v11 + 312);
              v507 = *(_OWORD *)(v11 + 328);
              v612 = *(_OWORD *)(v11 + 376);
              v647 = *(_OWORD *)(v11 + 392);
              v542 = *(_OWORD *)(v11 + 344);
              v577 = *(_OWORD *)(v11 + 360);
              *(double *)(v11 + 272) = *v121;
              v135 = *v134;
              v136 = v134[1];
              v137 = v134[2];
              *(_OWORD *)(v11 + 328) = v134[3];
              *(_OWORD *)(v11 + 312) = v137;
              *(_OWORD *)(v11 + 296) = v136;
              *(_OWORD *)(v11 + 280) = v135;
              v138 = v134[4];
              v139 = v134[5];
              v140 = v134[6];
              *(_OWORD *)(v11 + 392) = v134[7];
              *(_OWORD *)(v11 + 376) = v140;
              *(_OWORD *)(v11 + 360) = v139;
              *(_OWORD *)(v11 + 344) = v138;
              *v121 = v133;
              v134[2] = v472;
              v134[3] = v507;
              *v134 = v402;
              v134[1] = v437;
              v134[6] = v612;
              v134[7] = v647;
              v134[4] = v542;
              v134[5] = v577;
            }
          }
        }
        else
        {
          v125 = (__int128 *)(v11 + 280);
          if (v124 < v122)
          {
            v400 = *v125;
            v435 = *(_OWORD *)(v11 + 296);
            v470 = *(_OWORD *)(v11 + 312);
            v505 = *(_OWORD *)(v11 + 328);
            v610 = *(_OWORD *)(v11 + 376);
            v645 = *(_OWORD *)(v11 + 392);
            v540 = *(_OWORD *)(v11 + 344);
            v575 = *(_OWORD *)(v11 + 360);
            *(double *)(v11 + 272) = v124;
            goto LABEL_44;
          }
          v403 = *v125;
          v438 = *(_OWORD *)(v11 + 296);
          v473 = *(_OWORD *)(v11 + 312);
          v508 = *(_OWORD *)(v11 + 328);
          v613 = *(_OWORD *)(v11 + 376);
          v648 = *(_OWORD *)(v11 + 392);
          v543 = *(_OWORD *)(v11 + 344);
          v578 = *(_OWORD *)(v11 + 360);
          *(double *)(v11 + 272) = v122;
          v141 = v11 + 136 * v120;
          v142 = *(_OWORD *)(v141 + 8);
          v143 = *(_OWORD *)(v141 + 24);
          v144 = *(_OWORD *)(v141 + 56);
          *(_OWORD *)(v11 + 312) = *(_OWORD *)(v141 + 40);
          *(_OWORD *)(v11 + 328) = v144;
          *v125 = v142;
          *(_OWORD *)(v11 + 296) = v143;
          v145 = *(_OWORD *)(v141 + 72);
          v146 = *(_OWORD *)(v141 + 88);
          v147 = *(_OWORD *)(v141 + 120);
          *(_OWORD *)(v11 + 376) = *(_OWORD *)(v141 + 104);
          *(_OWORD *)(v11 + 392) = v147;
          *(_OWORD *)(v11 + 344) = v145;
          *(_OWORD *)(v11 + 360) = v146;
          *v121 = v123;
          *(_OWORD *)(v141 + 56) = v508;
          *(_OWORD *)(v141 + 40) = v473;
          *(_OWORD *)(v141 + 24) = v438;
          *(_OWORD *)(v141 + 8) = v403;
          *(_OWORD *)(v141 + 120) = v648;
          *(_OWORD *)(v141 + 104) = v613;
          *(_OWORD *)(v141 + 88) = v578;
          *(_OWORD *)(v141 + 72) = v543;
          if (*v361 < v123)
          {
            v125 = (__int128 *)(v141 + 8);
            v470 = *(_OWORD *)(v141 + 40);
            v505 = *(_OWORD *)(v141 + 56);
            v400 = *(_OWORD *)(v141 + 8);
            v435 = *(_OWORD *)(v141 + 24);
            v610 = *(_OWORD *)(v141 + 104);
            v645 = *(_OWORD *)(v141 + 120);
            v540 = *(_OWORD *)(v141 + 72);
            v575 = *(_OWORD *)(v141 + 88);
            *v121 = *v361;
LABEL_44:
            v148 = *v10;
            v149 = *(_OWORD *)(a2 - 384);
            v150 = *(_OWORD *)(a2 - 352);
            v125[2] = *(_OWORD *)(a2 - 368);
            v125[3] = v150;
            *v125 = v148;
            v125[1] = v149;
            v151 = *(_OWORD *)(a2 - 336);
            v152 = *(_OWORD *)(a2 - 320);
            v153 = *(_OWORD *)(a2 - 288);
            v125[6] = *(_OWORD *)(a2 - 304);
            v125[7] = v153;
            v125[4] = v151;
            v125[5] = v152;
            *v361 = v123;
            *(_OWORD *)(a2 - 368) = v470;
            *(_OWORD *)(a2 - 352) = v505;
            *v10 = v400;
            *(_OWORD *)(a2 - 384) = v435;
            *(_OWORD *)(a2 - 304) = v610;
            *(_OWORD *)(a2 - 288) = v645;
            *(_OWORD *)(a2 - 336) = v540;
            *(_OWORD *)(a2 - 320) = v575;
          }
        }
        v154 = *v15;
        v155 = *v74;
        v156 = *v121;
        if (*v15 >= *v74)
        {
          if (v156 < v154)
          {
            v163 = v11 + 136 * v14;
            v475 = *(_OWORD *)(v163 + 40);
            v510 = *(_OWORD *)(v163 + 56);
            v405 = *(_OWORD *)(v163 + 8);
            v440 = *(_OWORD *)(v163 + 24);
            v615 = *(_OWORD *)(v163 + 104);
            v650 = *(_OWORD *)(v163 + 120);
            v545 = *(_OWORD *)(v163 + 72);
            v580 = *(_OWORD *)(v163 + 88);
            *v15 = v156;
            v164 = v11 + 136 * v120;
            *(_OWORD *)(v163 + 72) = *(_OWORD *)(v164 + 72);
            *(_OWORD *)(v163 + 88) = *(_OWORD *)(v164 + 88);
            *(_OWORD *)(v163 + 104) = *(_OWORD *)(v164 + 104);
            *(_OWORD *)(v163 + 120) = *(_OWORD *)(v164 + 120);
            *(_OWORD *)(v163 + 8) = *(_OWORD *)(v164 + 8);
            *(_OWORD *)(v163 + 24) = *(_OWORD *)(v164 + 24);
            *(_OWORD *)(v163 + 40) = *(_OWORD *)(v164 + 40);
            *(_OWORD *)(v163 + 56) = *(_OWORD *)(v164 + 56);
            *v121 = v154;
            *(_OWORD *)(v164 + 56) = v510;
            *(_OWORD *)(v164 + 40) = v475;
            *(_OWORD *)(v164 + 24) = v440;
            *(_OWORD *)(v164 + 8) = v405;
            *(_OWORD *)(v164 + 120) = v650;
            *(_OWORD *)(v164 + 104) = v615;
            *(_OWORD *)(v164 + 88) = v580;
            *(_OWORD *)(v164 + 72) = v545;
            v165 = *v74;
            if (*v15 < *v74)
            {
              v166 = v11 + 136 * v73;
              v476 = *(_OWORD *)(v166 + 40);
              v511 = *(_OWORD *)(v166 + 56);
              v406 = *(_OWORD *)(v166 + 8);
              v441 = *(_OWORD *)(v166 + 24);
              v616 = *(_OWORD *)(v166 + 104);
              v651 = *(_OWORD *)(v166 + 120);
              v546 = *(_OWORD *)(v166 + 72);
              v581 = *(_OWORD *)(v166 + 88);
              *v74 = *v15;
              v167 = *(_OWORD *)(v163 + 88);
              *(_OWORD *)(v166 + 72) = *(_OWORD *)(v163 + 72);
              *(_OWORD *)(v166 + 88) = v167;
              v168 = *(_OWORD *)(v163 + 120);
              *(_OWORD *)(v166 + 104) = *(_OWORD *)(v163 + 104);
              *(_OWORD *)(v166 + 120) = v168;
              v169 = *(_OWORD *)(v163 + 24);
              *(_OWORD *)(v166 + 8) = *(_OWORD *)(v163 + 8);
              *(_OWORD *)(v166 + 24) = v169;
              v170 = *(_OWORD *)(v163 + 56);
              *(_OWORD *)(v166 + 40) = *(_OWORD *)(v163 + 40);
              *(_OWORD *)(v166 + 56) = v170;
              *v15 = v165;
              *(_OWORD *)(v163 + 40) = v476;
              *(_OWORD *)(v163 + 56) = v511;
              *(_OWORD *)(v163 + 8) = v406;
              *(_OWORD *)(v163 + 24) = v441;
              *(_OWORD *)(v163 + 104) = v616;
              *(_OWORD *)(v163 + 120) = v651;
              *(_OWORD *)(v163 + 72) = v546;
              *(_OWORD *)(v163 + 88) = v581;
            }
          }
        }
        else
        {
          v157 = (__int128 *)(v11 + 136 * v73 + 8);
          if (v156 >= v154)
          {
            v477 = v157[2];
            v512 = v157[3];
            v407 = *v157;
            v442 = v157[1];
            v617 = v157[6];
            v652 = v157[7];
            v547 = v157[4];
            v582 = v157[5];
            *v74 = v154;
            v171 = v11 + 136 * v14;
            v172 = *(_OWORD *)(v171 + 88);
            v157[4] = *(_OWORD *)(v171 + 72);
            v157[5] = v172;
            v173 = *(_OWORD *)(v171 + 120);
            v157[6] = *(_OWORD *)(v171 + 104);
            v157[7] = v173;
            v174 = *(_OWORD *)(v171 + 24);
            *v157 = *(_OWORD *)(v171 + 8);
            v157[1] = v174;
            v175 = *(_OWORD *)(v171 + 56);
            v157[2] = *(_OWORD *)(v171 + 40);
            v157[3] = v175;
            *v15 = v155;
            *(_OWORD *)(v171 + 56) = v512;
            *(_OWORD *)(v171 + 40) = v477;
            *(_OWORD *)(v171 + 24) = v442;
            *(_OWORD *)(v171 + 8) = v407;
            *(_OWORD *)(v171 + 120) = v652;
            *(_OWORD *)(v171 + 104) = v617;
            *(_OWORD *)(v171 + 88) = v582;
            v176 = *v121;
            v177 = *v121 < v155;
            *(_OWORD *)(v171 + 72) = v547;
            if (v177)
            {
              v178 = (__int128 *)(v171 + 8);
              v478 = v178[2];
              v513 = v178[3];
              v408 = *v178;
              v443 = v178[1];
              v618 = v178[6];
              v653 = v178[7];
              v548 = v178[4];
              v583 = v178[5];
              *v15 = v176;
              v179 = v11 + 136 * v120;
              v180 = *(_OWORD *)(v179 + 88);
              v178[4] = *(_OWORD *)(v179 + 72);
              v178[5] = v180;
              v181 = *(_OWORD *)(v179 + 120);
              v178[6] = *(_OWORD *)(v179 + 104);
              v178[7] = v181;
              v182 = *(_OWORD *)(v179 + 24);
              *v178 = *(_OWORD *)(v179 + 8);
              v178[1] = v182;
              v183 = *(_OWORD *)(v179 + 56);
              v178[2] = *(_OWORD *)(v179 + 40);
              v178[3] = v183;
              *v121 = v155;
              *(_OWORD *)(v179 + 56) = v513;
              *(_OWORD *)(v179 + 40) = v478;
              *(_OWORD *)(v179 + 24) = v443;
              *(_OWORD *)(v179 + 8) = v408;
              *(_OWORD *)(v179 + 120) = v653;
              *(_OWORD *)(v179 + 104) = v618;
              *(_OWORD *)(v179 + 88) = v583;
              *(_OWORD *)(v179 + 72) = v548;
            }
          }
          else
          {
            v474 = v157[2];
            v509 = v157[3];
            v404 = *v157;
            v439 = v157[1];
            v614 = v157[6];
            v649 = v157[7];
            v544 = v157[4];
            v579 = v157[5];
            *v74 = v156;
            v158 = v11 + 136 * v120;
            v159 = *(_OWORD *)(v158 + 88);
            v157[4] = *(_OWORD *)(v158 + 72);
            v157[5] = v159;
            v160 = *(_OWORD *)(v158 + 120);
            v157[6] = *(_OWORD *)(v158 + 104);
            v157[7] = v160;
            v161 = *(_OWORD *)(v158 + 24);
            *v157 = *(_OWORD *)(v158 + 8);
            v157[1] = v161;
            v162 = *(_OWORD *)(v158 + 56);
            v157[2] = *(_OWORD *)(v158 + 40);
            v157[3] = v162;
            *v121 = v155;
            *(_OWORD *)(v158 + 56) = v509;
            *(_OWORD *)(v158 + 40) = v474;
            *(_OWORD *)(v158 + 24) = v439;
            *(_OWORD *)(v158 + 8) = v404;
            *(_OWORD *)(v158 + 120) = v649;
            *(_OWORD *)(v158 + 104) = v614;
            *(_OWORD *)(v158 + 88) = v579;
            *(_OWORD *)(v158 + 72) = v544;
          }
        }
        v184 = *(_QWORD *)v11;
        v479 = *(_OWORD *)(v11 + 40);
        v514 = *(_OWORD *)(v11 + 56);
        v409 = *(_OWORD *)(v11 + 8);
        v444 = *(_OWORD *)(v11 + 24);
        v619 = *(_OWORD *)(v11 + 104);
        v654 = *(_OWORD *)(v11 + 120);
        v549 = *(_OWORD *)(v11 + 72);
        v584 = *(_OWORD *)(v11 + 88);
        *(double *)v11 = *v15;
        v185 = v11 + 136 * v14;
        v186 = *(_OWORD *)(v185 + 24);
        v187 = *(_OWORD *)(v185 + 40);
        v188 = *(_OWORD *)(v185 + 56);
        *(_OWORD *)(v11 + 8) = *(_OWORD *)(v185 + 8);
        *(_OWORD *)(v11 + 56) = v188;
        *(_OWORD *)(v11 + 40) = v187;
        *(_OWORD *)(v11 + 24) = v186;
        v189 = *(_OWORD *)(v185 + 88);
        v190 = *(_OWORD *)(v185 + 104);
        v191 = *(_OWORD *)(v185 + 120);
        *(_OWORD *)(v11 + 72) = *(_OWORD *)(v185 + 72);
        *(_OWORD *)(v11 + 120) = v191;
        *(_OWORD *)(v11 + 104) = v190;
        *(_OWORD *)(v11 + 88) = v189;
        *(_QWORD *)v15 = v184;
        *(_OWORD *)(v185 + 56) = v514;
        *(_OWORD *)(v185 + 40) = v479;
        *(_OWORD *)(v185 + 24) = v444;
        *(_OWORD *)(v185 + 8) = v409;
        *(_OWORD *)(v185 + 120) = v654;
        *(_OWORD *)(v185 + 104) = v619;
        *(_OWORD *)(v185 + 88) = v584;
        *(_OWORD *)(v185 + 72) = v549;
        --a3;
        v58 = *(double *)v11;
        if ((a4 & 1) == 0)
          goto LABEL_55;
LABEL_56:
        v192 = 0;
        v193 = (_OWORD *)(v11 + 8);
        v370 = *(_OWORD *)(v11 + 40);
        v373 = *(_OWORD *)(v11 + 56);
        v364 = *(_OWORD *)(v11 + 8);
        v367 = *(_OWORD *)(v11 + 24);
        v382 = *(_OWORD *)(v11 + 104);
        v385 = *(_OWORD *)(v11 + 120);
        v376 = *(_OWORD *)(v11 + 72);
        v379 = *(_OWORD *)(v11 + 88);
        do
        {
          v194 = *(double *)(v11 + v192 + 136);
          v192 += 136;
        }
        while (v194 < v58);
        v195 = v11 + v192;
        v196 = a2;
        if (v192 == 136)
        {
          v196 = a2;
          do
          {
            if (v195 >= v196)
              break;
            v198 = *(double *)(v196 - 136);
            v196 -= 136;
          }
          while (v198 >= v58);
        }
        else
        {
          do
          {
            v197 = *(double *)(v196 - 136);
            v196 -= 136;
          }
          while (v197 >= v58);
        }
        v11 += v192;
        if (v195 < v196)
        {
          v199 = v196;
          do
          {
            v480 = *(_OWORD *)(v11 + 40);
            v515 = *(_OWORD *)(v11 + 56);
            v410 = *(_OWORD *)(v11 + 8);
            v445 = *(_OWORD *)(v11 + 24);
            v620 = *(_OWORD *)(v11 + 104);
            v655 = *(_OWORD *)(v11 + 120);
            v550 = *(_OWORD *)(v11 + 72);
            v585 = *(_OWORD *)(v11 + 88);
            *(_QWORD *)v11 = *(_QWORD *)v199;
            v200 = *(_OWORD *)(v199 + 8);
            v201 = *(_OWORD *)(v199 + 24);
            v202 = *(_OWORD *)(v199 + 40);
            *(_OWORD *)(v11 + 56) = *(_OWORD *)(v199 + 56);
            *(_OWORD *)(v11 + 40) = v202;
            *(_OWORD *)(v11 + 24) = v201;
            *(_OWORD *)(v11 + 8) = v200;
            v203 = *(_OWORD *)(v199 + 72);
            v204 = *(_OWORD *)(v199 + 88);
            v205 = *(_OWORD *)(v199 + 104);
            *(_OWORD *)(v11 + 120) = *(_OWORD *)(v199 + 120);
            *(_OWORD *)(v11 + 104) = v205;
            *(_OWORD *)(v11 + 88) = v204;
            *(_OWORD *)(v11 + 72) = v203;
            *(double *)v199 = v194;
            *(_OWORD *)(v199 + 56) = v515;
            *(_OWORD *)(v199 + 40) = v480;
            *(_OWORD *)(v199 + 24) = v445;
            *(_OWORD *)(v199 + 8) = v410;
            *(_OWORD *)(v199 + 120) = v655;
            *(_OWORD *)(v199 + 104) = v620;
            *(_OWORD *)(v199 + 88) = v585;
            *(_OWORD *)(v199 + 72) = v550;
            do
            {
              v206 = *(double *)(v11 + 136);
              v11 += 136;
              v194 = v206;
            }
            while (v206 < v58);
            do
            {
              v207 = *(double *)(v199 - 136);
              v199 -= 136;
            }
            while (v207 >= v58);
          }
          while (v11 < v199);
        }
        if (v11 - 136 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v11 - 136);
          v208 = *(_OWORD *)(v11 - 128);
          v209 = *(_OWORD *)(v11 - 112);
          v210 = *(_OWORD *)(v11 - 80);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(v11 - 96);
          *(_OWORD *)(a1 + 56) = v210;
          *v193 = v208;
          *(_OWORD *)(a1 + 24) = v209;
          v211 = *(_OWORD *)(v11 - 64);
          v212 = *(_OWORD *)(v11 - 48);
          v213 = *(_OWORD *)(v11 - 16);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(v11 - 32);
          *(_OWORD *)(a1 + 120) = v213;
          *(_OWORD *)(a1 + 72) = v211;
          *(_OWORD *)(a1 + 88) = v212;
        }
        *(double *)(v11 - 136) = v58;
        *(_OWORD *)(v11 - 96) = v370;
        *(_OWORD *)(v11 - 80) = v373;
        *(_OWORD *)(v11 - 128) = v364;
        *(_OWORD *)(v11 - 112) = v367;
        *(_OWORD *)(v11 - 32) = v382;
        *(_OWORD *)(v11 - 16) = v385;
        *(_OWORD *)(v11 - 64) = v376;
        *(_OWORD *)(v11 - 48) = v379;
        if (v195 < v196)
        {
LABEL_75:
          sub_20EB712EC(a1, v11 - 136, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v214 = sub_20EB730F0(a1, v11 - 136);
        if (!sub_20EB730F0(v11, a2))
        {
          if (v214)
            continue;
          goto LABEL_75;
        }
        a2 = v11 - 136;
        if (!v214)
          goto LABEL_1;
        return result;
    }
  }
}

  n128_f64 = a2[-11].n128_f64;
  v10 = a2[-22].n128_f64;
  v11 = a2[-33].n128_f64;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)a2 - v12) >> 4);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v282 = a2[-11].n128_f64[0];
        v281 = a2 - 11;
        result = v282;
        if (v282 < *(double *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v283 = (__n128 *)(v12 + 176);
        result = *(double *)(v12 + 176);
        v284 = a2[-11].n128_f64[0];
        v281 = a2 - 11;
        v285 = v284;
        if (result >= *(double *)v12)
        {
          if (v285 < result)
          {
            v546 = *(__n128 *)(v12 + 240);
            v577 = *(__n128 *)(v12 + 256);
            v701 = *(__n128 *)(v12 + 320);
            v732 = *(__n128 *)(v12 + 336);
            v608 = *(__n128 *)(v12 + 272);
            v639 = *(__n128 *)(v12 + 288);
            v670 = *(__n128 *)(v12 + 304);
            v422 = *v283;
            v453 = *(__n128 *)(v12 + 192);
            v484 = *(__n128 *)(v12 + 208);
            v515 = *(__n128 *)(v12 + 224);
            v360 = *v281;
            v361 = v281[2];
            *(__n128 *)(v12 + 192) = v281[1];
            *(__n128 *)(v12 + 208) = v361;
            *v283 = v360;
            v362 = v281[3];
            v363 = v281[4];
            v364 = v281[6];
            *(__n128 *)(v12 + 256) = v281[5];
            *(__n128 *)(v12 + 272) = v364;
            *(__n128 *)(v12 + 224) = v362;
            *(__n128 *)(v12 + 240) = v363;
            v365 = v281[7];
            v366 = v281[8];
            v367 = v281[10];
            *(__n128 *)(v12 + 320) = v281[9];
            *(__n128 *)(v12 + 336) = v367;
            *(__n128 *)(v12 + 288) = v365;
            *(__n128 *)(v12 + 304) = v366;
            v281[1] = v453;
            v281[2] = v484;
            *v281 = v422;
            v281[5] = v577;
            v281[6] = v608;
            v281[3] = v515;
            v281[4] = v546;
            v281[9] = v701;
            v281[10] = v732;
            v281[7] = v639;
            v281[8] = v670;
            result = *(double *)(v12 + 176);
            if (result < *(double *)v12)
            {
              v454 = *(_OWORD *)(v12 + 16);
              v485 = *(_OWORD *)(v12 + 32);
              v423 = *(__n128 *)v12;
              v578 = *(_OWORD *)(v12 + 80);
              v609 = *(_OWORD *)(v12 + 96);
              v516 = *(_OWORD *)(v12 + 48);
              v547 = *(_OWORD *)(v12 + 64);
              v702 = *(_OWORD *)(v12 + 144);
              v733 = *(_OWORD *)(v12 + 160);
              v640 = *(_OWORD *)(v12 + 112);
              v671 = *(_OWORD *)(v12 + 128);
              v368 = *(_OWORD *)(v12 + 256);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(v12 + 240);
              *(_OWORD *)(v12 + 80) = v368;
              v369 = *(_OWORD *)(v12 + 336);
              v370 = *(_OWORD *)(v12 + 304);
              *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 320);
              *(_OWORD *)(v12 + 160) = v369;
              v371 = *(_OWORD *)(v12 + 288);
              *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 272);
              *(_OWORD *)(v12 + 112) = v371;
              *(_OWORD *)(v12 + 128) = v370;
              v372 = *(_OWORD *)(v12 + 192);
              *(__n128 *)v12 = *v283;
              *(_OWORD *)(v12 + 16) = v372;
              v373 = *(_OWORD *)(v12 + 224);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 208);
              *(_OWORD *)(v12 + 48) = v373;
              *(_OWORD *)(v12 + 304) = v671;
              *(_OWORD *)(v12 + 320) = v702;
              *(_OWORD *)(v12 + 336) = v733;
              *(_OWORD *)(v12 + 240) = v547;
              *(_OWORD *)(v12 + 256) = v578;
              *(_OWORD *)(v12 + 272) = v609;
              *(_OWORD *)(v12 + 288) = v640;
              *v283 = v423;
              *(_OWORD *)(v12 + 192) = v454;
              result = *(double *)&v516;
              *(_OWORD *)(v12 + 208) = v485;
              *(_OWORD *)(v12 + 224) = v516;
            }
          }
        }
        else
        {
          if (v285 < result)
          {
LABEL_100:
            v449 = *(__n128 *)(v12 + 16);
            v480 = *(__n128 *)(v12 + 32);
            v418 = *(__n128 *)v12;
            v573 = *(__n128 *)(v12 + 80);
            v604 = *(__n128 *)(v12 + 96);
            v511 = *(__n128 *)(v12 + 48);
            v542 = *(__n128 *)(v12 + 64);
            v697 = *(__n128 *)(v12 + 144);
            v728 = *(__n128 *)(v12 + 160);
            v635 = *(__n128 *)(v12 + 112);
            v666 = *(__n128 *)(v12 + 128);
            v286 = *v281;
            v287 = v281[2];
            *(__n128 *)(v12 + 16) = v281[1];
            *(__n128 *)(v12 + 32) = v287;
            *(__n128 *)v12 = v286;
            v288 = v281[3];
            v289 = v281[4];
            v290 = v281[6];
            *(__n128 *)(v12 + 80) = v281[5];
            *(__n128 *)(v12 + 96) = v290;
            *(__n128 *)(v12 + 48) = v288;
            *(__n128 *)(v12 + 64) = v289;
            v291 = v281[7];
            v292 = v281[8];
            v293 = v281[10];
            *(__n128 *)(v12 + 144) = v281[9];
            *(__n128 *)(v12 + 160) = v293;
            *(__n128 *)(v12 + 112) = v291;
            *(__n128 *)(v12 + 128) = v292;
LABEL_101:
            v281[1] = v449;
            v281[2] = v480;
            *v281 = v418;
            v281[5] = v573;
            v281[6] = v604;
            v281[3] = v511;
            v281[4] = v542;
            result = v635.n128_f64[0];
            v281[9] = v697;
            v281[10] = v728;
            v281[7] = v635;
            v281[8] = v666;
            return result;
          }
          v456 = *(_OWORD *)(v12 + 16);
          v487 = *(_OWORD *)(v12 + 32);
          v425 = *(__n128 *)v12;
          v580 = *(_OWORD *)(v12 + 80);
          v611 = *(_OWORD *)(v12 + 96);
          v518 = *(_OWORD *)(v12 + 48);
          v549 = *(_OWORD *)(v12 + 64);
          v704 = *(_OWORD *)(v12 + 144);
          v735 = *(_OWORD *)(v12 + 160);
          v642 = *(_OWORD *)(v12 + 112);
          v673 = *(_OWORD *)(v12 + 128);
          v381 = *(_OWORD *)(v12 + 256);
          *(_OWORD *)(v12 + 64) = *(_OWORD *)(v12 + 240);
          *(_OWORD *)(v12 + 80) = v381;
          v382 = *(_OWORD *)(v12 + 336);
          v383 = *(_OWORD *)(v12 + 304);
          *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 320);
          *(_OWORD *)(v12 + 160) = v382;
          v384 = *(_OWORD *)(v12 + 288);
          *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 272);
          *(_OWORD *)(v12 + 112) = v384;
          *(_OWORD *)(v12 + 128) = v383;
          v385 = *(_OWORD *)(v12 + 192);
          *(__n128 *)v12 = *v283;
          *(_OWORD *)(v12 + 16) = v385;
          v386 = *(_OWORD *)(v12 + 224);
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 208);
          *(_OWORD *)(v12 + 48) = v386;
          *(_OWORD *)(v12 + 304) = v673;
          *(_OWORD *)(v12 + 320) = v704;
          *(_OWORD *)(v12 + 336) = v735;
          *(_OWORD *)(v12 + 240) = v549;
          *(_OWORD *)(v12 + 256) = v580;
          *(_OWORD *)(v12 + 272) = v611;
          *(_OWORD *)(v12 + 288) = v642;
          *v283 = v425;
          *(_OWORD *)(v12 + 192) = v456;
          *(_OWORD *)(v12 + 208) = v487;
          *(_OWORD *)(v12 + 224) = v518;
          result = v281->n128_f64[0];
          if (v281->n128_f64[0] < *(double *)(v12 + 176))
          {
            v542 = *(__n128 *)(v12 + 240);
            v573 = *(__n128 *)(v12 + 256);
            v697 = *(__n128 *)(v12 + 320);
            v728 = *(__n128 *)(v12 + 336);
            v604 = *(__n128 *)(v12 + 272);
            v635 = *(__n128 *)(v12 + 288);
            v666 = *(__n128 *)(v12 + 304);
            v418 = *v283;
            v449 = *(__n128 *)(v12 + 192);
            v480 = *(__n128 *)(v12 + 208);
            v511 = *(__n128 *)(v12 + 224);
            v387 = *v281;
            v388 = v281[2];
            *(__n128 *)(v12 + 192) = v281[1];
            *(__n128 *)(v12 + 208) = v388;
            *v283 = v387;
            v389 = v281[3];
            v390 = v281[4];
            v391 = v281[6];
            *(__n128 *)(v12 + 256) = v281[5];
            *(__n128 *)(v12 + 272) = v391;
            *(__n128 *)(v12 + 224) = v389;
            *(__n128 *)(v12 + 240) = v390;
            v392 = v281[7];
            v393 = v281[8];
            v394 = v281[10];
            *(__n128 *)(v12 + 320) = v281[9];
            *(__n128 *)(v12 + 336) = v394;
            *(__n128 *)(v12 + 288) = v392;
            *(__n128 *)(v12 + 304) = v393;
            goto LABEL_101;
          }
        }
        return result;
      case 4:
        *(_QWORD *)&result = sub_20EB78F14((__n128 *)v12, (__n128 *)(v12 + 176), (__n128 *)(v12 + 352), a2 - 11).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = sub_20EB7A0BC((__n128 *)v12, (__n128 *)(v12 + 176), (__n128 *)(v12 + 352), (__int128 *)(v12 + 528), (__int128 *)&a2[-11]).n128_u64[0];
        return result;
      default:
        if (v13 > 4223)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v308 = (unint64_t)(v14 - 2) >> 1;
              v309 = v308;
              do
              {
                if (v308 >= v309)
                {
                  v311 = (2 * v309) | 1;
                  v312 = v12 + 176 * v311;
                  if (2 * v309 + 2 < v14 && *(double *)v312 < *(double *)(v312 + 176))
                  {
                    v312 += 176;
                    v311 = 2 * v309 + 2;
                  }
                  v313 = v12 + 176 * v309;
                  v314 = *(double *)v313;
                  if (*(double *)v312 >= *(double *)v313)
                  {
                    v451 = *(_OWORD *)(v313 + 24);
                    v482 = *(_OWORD *)(v313 + 40);
                    v420 = *(_OWORD *)(v313 + 8);
                    v575 = *(_OWORD *)(v313 + 88);
                    v606 = *(_OWORD *)(v313 + 104);
                    v513 = *(_OWORD *)(v313 + 56);
                    v544 = *(_OWORD *)(v313 + 72);
                    v730 = *(_QWORD *)(v313 + 168);
                    v668 = *(_OWORD *)(v313 + 136);
                    v699 = *(_OWORD *)(v313 + 152);
                    v637 = *(_OWORD *)(v313 + 120);
                    do
                    {
                      v315 = (_OWORD *)v313;
                      v313 = v312;
                      v316 = *(_OWORD *)v312;
                      v317 = *(_OWORD *)(v312 + 32);
                      v315[1] = *(_OWORD *)(v312 + 16);
                      v315[2] = v317;
                      *v315 = v316;
                      v318 = *(_OWORD *)(v312 + 48);
                      v319 = *(_OWORD *)(v312 + 64);
                      v320 = *(_OWORD *)(v312 + 96);
                      v315[5] = *(_OWORD *)(v312 + 80);
                      v315[6] = v320;
                      v315[3] = v318;
                      v315[4] = v319;
                      v321 = *(_OWORD *)(v312 + 112);
                      v322 = *(_OWORD *)(v312 + 128);
                      v323 = *(_OWORD *)(v312 + 160);
                      v315[9] = *(_OWORD *)(v312 + 144);
                      v315[10] = v323;
                      v315[7] = v321;
                      v315[8] = v322;
                      if (v308 < v311)
                        break;
                      v324 = 2 * v311;
                      v311 = (2 * v311) | 1;
                      v312 = v12 + 176 * v311;
                      v325 = v324 + 2;
                      if (v325 < v14 && *(double *)v312 < *(double *)(v312 + 176))
                      {
                        v312 += 176;
                        v311 = v325;
                      }
                    }
                    while (*(double *)v312 >= v314);
                    *(double *)v313 = v314;
                    *(_QWORD *)(v313 + 168) = v730;
                    *(_OWORD *)(v313 + 40) = v482;
                    *(_OWORD *)(v313 + 24) = v451;
                    *(_OWORD *)(v313 + 8) = v420;
                    *(_OWORD *)(v313 + 104) = v606;
                    *(_OWORD *)(v313 + 88) = v575;
                    *(_OWORD *)(v313 + 72) = v544;
                    *(_OWORD *)(v313 + 56) = v513;
                    *(_OWORD *)(v313 + 152) = v699;
                    *(_OWORD *)(v313 + 136) = v668;
                    *(_OWORD *)(v313 + 120) = v637;
                  }
                }
                v310 = v309-- <= 0;
              }
              while (!v310);
              v326 = v13 / 0xB0uLL;
              do
              {
                v327 = 0;
                v452 = *(__n128 *)(v12 + 16);
                v483 = *(__n128 *)(v12 + 32);
                v421 = *(__n128 *)v12;
                v576 = *(__n128 *)(v12 + 80);
                v607 = *(__n128 *)(v12 + 96);
                v514 = *(__n128 *)(v12 + 48);
                v545 = *(__n128 *)(v12 + 64);
                v700 = *(__n128 *)(v12 + 144);
                v731 = *(__n128 *)(v12 + 160);
                v638 = *(__n128 *)(v12 + 112);
                v669 = *(__n128 *)(v12 + 128);
                v328 = (__n128 *)v12;
                do
                {
                  v337 = v328;
                  v328 += 11 * v327 + 11;
                  v338 = 2 * v327;
                  v327 = (2 * v327) | 1;
                  v339 = v338 + 2;
                  if (v339 < v326 && v328->n128_f64[0] < v328[11].n128_f64[0])
                  {
                    v328 += 11;
                    v327 = v339;
                  }
                  v329 = *v328;
                  v330 = v328[2];
                  v337[1] = v328[1];
                  v337[2] = v330;
                  *v337 = v329;
                  v331 = v328[3];
                  v332 = v328[4];
                  v333 = v328[6];
                  v337[5] = v328[5];
                  v337[6] = v333;
                  v337[3] = v331;
                  v337[4] = v332;
                  v334 = v328[7];
                  v335 = v328[8];
                  v336 = v328[10];
                  v337[9] = v328[9];
                  v337[10] = v336;
                  v337[7] = v334;
                  v337[8] = v335;
                }
                while (v327 <= (uint64_t)((unint64_t)(v326 - 2) >> 1));
                a2 -= 11;
                if (v328 == a2)
                {
                  v328[1] = v452;
                  v328[2] = v483;
                  *v328 = v421;
                  v328[5] = v576;
                  v328[6] = v607;
                  v328[3] = v514;
                  v328[4] = v545;
                  result = v638.n128_f64[0];
                  v328[9] = v700;
                  v328[10] = v731;
                  v328[7] = v638;
                  v328[8] = v669;
                }
                else
                {
                  v340 = *a2;
                  v341 = a2[2];
                  v328[1] = a2[1];
                  v328[2] = v341;
                  *v328 = v340;
                  v342 = a2[3];
                  v343 = a2[4];
                  v344 = a2[6];
                  v328[5] = a2[5];
                  v328[6] = v344;
                  v328[3] = v342;
                  v328[4] = v343;
                  v345 = a2[7];
                  v346 = a2[8];
                  v347 = a2[10];
                  v328[9] = a2[9];
                  v328[10] = v347;
                  v328[7] = v345;
                  v328[8] = v346;
                  a2[1] = v452;
                  a2[2] = v483;
                  *a2 = v421;
                  a2[5] = v576;
                  a2[6] = v607;
                  a2[3] = v514;
                  a2[4] = v545;
                  result = v638.n128_f64[0];
                  a2[9] = v700;
                  a2[10] = v731;
                  a2[7] = v638;
                  a2[8] = v669;
                  v348 = (uint64_t)&v328[11] - v12;
                  if (v348 >= 177)
                  {
                    v349 = (v348 / 0xB0uLL - 2) >> 1;
                    v350 = (__n128 *)(v12 + 176 * v349);
                    result = v328->n128_f64[0];
                    if (v350->n128_f64[0] < v328->n128_f64[0])
                    {
                      v741 = *(__n128 *)((char *)v328 + 24);
                      v744 = *(__n128 *)((char *)v328 + 40);
                      v738 = *(__n128 *)((char *)v328 + 8);
                      v753 = *(__n128 *)((char *)v328 + 88);
                      v756 = *(__n128 *)((char *)v328 + 104);
                      v747 = *(__n128 *)((char *)v328 + 56);
                      v750 = *(__n128 *)((char *)v328 + 72);
                      v768 = v328[10].n128_i64[1];
                      v762 = *(__n128 *)((char *)v328 + 136);
                      v765 = *(__n128 *)((char *)v328 + 152);
                      v759 = *(__n128 *)((char *)v328 + 120);
                      do
                      {
                        v351 = v328;
                        v328 = v350;
                        v352 = *v350;
                        v353 = v350[2];
                        v351[1] = v350[1];
                        v351[2] = v353;
                        *v351 = v352;
                        v354 = v350[3];
                        v355 = v350[4];
                        v356 = v350[6];
                        v351[5] = v350[5];
                        v351[6] = v356;
                        v351[3] = v354;
                        v351[4] = v355;
                        v357 = v350[7];
                        v358 = v350[8];
                        v359 = v350[10];
                        v351[9] = v350[9];
                        v351[10] = v359;
                        v351[7] = v357;
                        v351[8] = v358;
                        if (!v349)
                          break;
                        v349 = (v349 - 1) >> 1;
                        v350 = (__n128 *)(v12 + 176 * v349);
                      }
                      while (v350->n128_f64[0] < result);
                      v328->n128_f64[0] = result;
                      result = v759.n128_f64[0];
                      v328[10].n128_u64[1] = v768;
                      *(__n128 *)((char *)v328 + 40) = v744;
                      *(__n128 *)((char *)v328 + 24) = v741;
                      *(__n128 *)((char *)v328 + 8) = v738;
                      *(__n128 *)((char *)v328 + 104) = v756;
                      *(__n128 *)((char *)v328 + 88) = v753;
                      *(__n128 *)((char *)v328 + 72) = v750;
                      *(__n128 *)((char *)v328 + 56) = v747;
                      *(__n128 *)((char *)v328 + 152) = v765;
                      *(__n128 *)((char *)v328 + 136) = v762;
                      *(__n128 *)((char *)v328 + 120) = v759;
                    }
                  }
                }
                v310 = v326-- <= 2;
              }
              while (!v310);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 176 * ((unint64_t)v14 >> 1));
          v17 = *n128_f64;
          if ((unint64_t)v13 < 0x5801)
          {
            v27 = *(double *)v12;
            if (*(double *)v12 >= v16->n128_f64[0])
            {
              if (v17 < v27)
              {
                v430 = *(__n128 *)(v12 + 16);
                v461 = *(__n128 *)(v12 + 32);
                v399 = *(__n128 *)v12;
                v554 = *(__n128 *)(v12 + 80);
                v585 = *(__n128 *)(v12 + 96);
                v492 = *(__n128 *)(v12 + 48);
                v523 = *(__n128 *)(v12 + 64);
                v678 = *(__n128 *)(v12 + 144);
                v709 = *(__n128 *)(v12 + 160);
                v616 = *(__n128 *)(v12 + 112);
                v647 = *(__n128 *)(v12 + 128);
                v52 = *(__n128 *)n128_f64;
                v53 = a2[-9];
                *(__n128 *)(v12 + 16) = a2[-10];
                *(__n128 *)(v12 + 32) = v53;
                *(__n128 *)v12 = v52;
                v54 = a2[-8];
                v55 = a2[-7];
                v56 = a2[-5];
                *(__n128 *)(v12 + 80) = a2[-6];
                *(__n128 *)(v12 + 96) = v56;
                *(__n128 *)(v12 + 48) = v54;
                *(__n128 *)(v12 + 64) = v55;
                v57 = a2[-4];
                v58 = a2[-3];
                v59 = a2[-1];
                *(__n128 *)(v12 + 144) = a2[-2];
                *(__n128 *)(v12 + 160) = v59;
                *(__n128 *)(v12 + 112) = v57;
                *(__n128 *)(v12 + 128) = v58;
                a2[-10] = v430;
                a2[-9] = v461;
                *(__n128 *)n128_f64 = v399;
                a2[-6] = v554;
                a2[-5] = v585;
                a2[-8] = v492;
                a2[-7] = v523;
                a2[-2] = v678;
                a2[-1] = v709;
                a2[-4] = v616;
                a2[-3] = v647;
                if (*(double *)v12 < v16->n128_f64[0])
                {
                  v431 = v16[1];
                  v462 = v16[2];
                  v400 = *v16;
                  v555 = v16[5];
                  v586 = v16[6];
                  v493 = v16[3];
                  v524 = v16[4];
                  v679 = v16[9];
                  v710 = v16[10];
                  v617 = v16[7];
                  v648 = v16[8];
                  v60 = *(__n128 *)v12;
                  v61 = *(__n128 *)(v12 + 32);
                  v16[1] = *(__n128 *)(v12 + 16);
                  v16[2] = v61;
                  *v16 = v60;
                  v62 = *(__n128 *)(v12 + 48);
                  v63 = *(__n128 *)(v12 + 64);
                  v64 = *(__n128 *)(v12 + 96);
                  v16[5] = *(__n128 *)(v12 + 80);
                  v16[6] = v64;
                  v16[3] = v62;
                  v16[4] = v63;
                  v65 = *(__n128 *)(v12 + 112);
                  v66 = *(__n128 *)(v12 + 128);
                  v67 = *(__n128 *)(v12 + 160);
                  v16[9] = *(__n128 *)(v12 + 144);
                  v16[10] = v67;
                  v16[7] = v65;
                  v16[8] = v66;
                  *(__n128 *)(v12 + 16) = v431;
                  *(__n128 *)(v12 + 32) = v462;
                  *(__n128 *)v12 = v400;
                  *(__n128 *)(v12 + 80) = v555;
                  *(__n128 *)(v12 + 96) = v586;
                  *(__n128 *)(v12 + 48) = v493;
                  *(__n128 *)(v12 + 64) = v524;
                  *(__n128 *)(v12 + 144) = v679;
                  *(__n128 *)(v12 + 160) = v710;
                  *(__n128 *)(v12 + 112) = v617;
                  *(__n128 *)(v12 + 128) = v648;
                  --a3;
                  v68 = *(double *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v27)
            {
              v436 = v16[1];
              v467 = v16[2];
              v405 = *v16;
              v560 = v16[5];
              v591 = v16[6];
              v498 = v16[3];
              v529 = v16[4];
              v684 = v16[9];
              v715 = v16[10];
              v622 = v16[7];
              v653 = v16[8];
              v115 = *(__n128 *)v12;
              v116 = *(__n128 *)(v12 + 32);
              v16[1] = *(__n128 *)(v12 + 16);
              v16[2] = v116;
              *v16 = v115;
              v117 = *(__n128 *)(v12 + 48);
              v118 = *(__n128 *)(v12 + 64);
              v119 = *(__n128 *)(v12 + 96);
              v16[5] = *(__n128 *)(v12 + 80);
              v16[6] = v119;
              v16[3] = v117;
              v16[4] = v118;
              v120 = *(__n128 *)(v12 + 112);
              v121 = *(__n128 *)(v12 + 128);
              v122 = *(__n128 *)(v12 + 160);
              v16[9] = *(__n128 *)(v12 + 144);
              v16[10] = v122;
              v16[7] = v120;
              v16[8] = v121;
              *(__n128 *)(v12 + 16) = v436;
              *(__n128 *)(v12 + 32) = v467;
              *(__n128 *)v12 = v405;
              *(__n128 *)(v12 + 80) = v560;
              *(__n128 *)(v12 + 96) = v591;
              *(__n128 *)(v12 + 48) = v498;
              *(__n128 *)(v12 + 64) = v529;
              *(__n128 *)(v12 + 144) = v684;
              *(__n128 *)(v12 + 160) = v715;
              *(__n128 *)(v12 + 112) = v622;
              *(__n128 *)(v12 + 128) = v653;
              if (*n128_f64 >= *(double *)v12)
                goto LABEL_31;
              v427 = *(__n128 *)(v12 + 16);
              v458 = *(__n128 *)(v12 + 32);
              v396 = *(__n128 *)v12;
              v551 = *(__n128 *)(v12 + 80);
              v582 = *(__n128 *)(v12 + 96);
              v489 = *(__n128 *)(v12 + 48);
              v520 = *(__n128 *)(v12 + 64);
              v675 = *(__n128 *)(v12 + 144);
              v706 = *(__n128 *)(v12 + 160);
              v613 = *(__n128 *)(v12 + 112);
              v644 = *(__n128 *)(v12 + 128);
              v123 = *(__n128 *)n128_f64;
              v124 = a2[-9];
              *(__n128 *)(v12 + 16) = a2[-10];
              *(__n128 *)(v12 + 32) = v124;
              *(__n128 *)v12 = v123;
              v125 = a2[-8];
              v126 = a2[-7];
              v127 = a2[-5];
              *(__n128 *)(v12 + 80) = a2[-6];
              *(__n128 *)(v12 + 96) = v127;
              *(__n128 *)(v12 + 48) = v125;
              *(__n128 *)(v12 + 64) = v126;
              v128 = a2[-4];
              v129 = a2[-3];
              v130 = a2[-1];
              *(__n128 *)(v12 + 144) = a2[-2];
              *(__n128 *)(v12 + 160) = v130;
              *(__n128 *)(v12 + 112) = v128;
              *(__n128 *)(v12 + 128) = v129;
            }
            else
            {
              v427 = v16[1];
              v458 = v16[2];
              v396 = *v16;
              v551 = v16[5];
              v582 = v16[6];
              v489 = v16[3];
              v520 = v16[4];
              v675 = v16[9];
              v706 = v16[10];
              v613 = v16[7];
              v644 = v16[8];
              v28 = *(__n128 *)n128_f64;
              v29 = a2[-9];
              v16[1] = a2[-10];
              v16[2] = v29;
              *v16 = v28;
              v30 = a2[-8];
              v31 = a2[-7];
              v32 = a2[-5];
              v16[5] = a2[-6];
              v16[6] = v32;
              v16[3] = v30;
              v16[4] = v31;
              v33 = a2[-4];
              v34 = a2[-3];
              v35 = a2[-1];
              v16[9] = a2[-2];
              v16[10] = v35;
              v16[7] = v33;
              v16[8] = v34;
            }
            a2[-10] = v427;
            a2[-9] = v458;
            *(__n128 *)n128_f64 = v396;
            a2[-6] = v551;
            a2[-5] = v582;
            a2[-8] = v489;
            a2[-7] = v520;
            a2[-2] = v675;
            a2[-1] = v706;
            a2[-4] = v613;
            a2[-3] = v644;
LABEL_31:
            --a3;
            v68 = *(double *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_f64[0];
          if (v16->n128_f64[0] >= *(double *)v12)
          {
            if (v17 < v18)
            {
              v428 = v16[1];
              v459 = v16[2];
              v397 = *v16;
              v552 = v16[5];
              v583 = v16[6];
              v490 = v16[3];
              v521 = v16[4];
              v676 = v16[9];
              v707 = v16[10];
              v614 = v16[7];
              v645 = v16[8];
              v36 = *(__n128 *)n128_f64;
              v37 = a2[-9];
              v16[1] = a2[-10];
              v16[2] = v37;
              *v16 = v36;
              v38 = a2[-8];
              v39 = a2[-7];
              v40 = a2[-5];
              v16[5] = a2[-6];
              v16[6] = v40;
              v16[3] = v38;
              v16[4] = v39;
              v41 = a2[-4];
              v42 = a2[-3];
              v43 = a2[-1];
              v16[9] = a2[-2];
              v16[10] = v43;
              v16[7] = v41;
              v16[8] = v42;
              a2[-10] = v428;
              a2[-9] = v459;
              *(__n128 *)n128_f64 = v397;
              a2[-6] = v552;
              a2[-5] = v583;
              a2[-8] = v490;
              a2[-7] = v521;
              a2[-2] = v676;
              a2[-1] = v707;
              a2[-4] = v614;
              a2[-3] = v645;
              if (v16->n128_f64[0] < *(double *)v12)
              {
                v429 = *(__n128 *)(v12 + 16);
                v460 = *(__n128 *)(v12 + 32);
                v398 = *(__n128 *)v12;
                v553 = *(__n128 *)(v12 + 80);
                v584 = *(__n128 *)(v12 + 96);
                v491 = *(__n128 *)(v12 + 48);
                v522 = *(__n128 *)(v12 + 64);
                v677 = *(__n128 *)(v12 + 144);
                v708 = *(__n128 *)(v12 + 160);
                v615 = *(__n128 *)(v12 + 112);
                v646 = *(__n128 *)(v12 + 128);
                v44 = *v16;
                v45 = v16[2];
                *(__n128 *)(v12 + 16) = v16[1];
                *(__n128 *)(v12 + 32) = v45;
                *(__n128 *)v12 = v44;
                v46 = v16[3];
                v47 = v16[4];
                v48 = v16[6];
                *(__n128 *)(v12 + 80) = v16[5];
                *(__n128 *)(v12 + 96) = v48;
                *(__n128 *)(v12 + 48) = v46;
                *(__n128 *)(v12 + 64) = v47;
                v49 = v16[7];
                v50 = v16[8];
                v51 = v16[10];
                *(__n128 *)(v12 + 144) = v16[9];
                *(__n128 *)(v12 + 160) = v51;
                *(__n128 *)(v12 + 112) = v49;
                *(__n128 *)(v12 + 128) = v50;
                v16[1] = v429;
                v16[2] = v460;
                *v16 = v398;
                v16[5] = v553;
                v16[6] = v584;
                v16[3] = v491;
                v16[4] = v522;
                v16[9] = v677;
                v16[10] = v708;
                v16[7] = v615;
                v16[8] = v646;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v432 = *(__n128 *)(v12 + 16);
              v463 = *(__n128 *)(v12 + 32);
              v401 = *(__n128 *)v12;
              v556 = *(__n128 *)(v12 + 80);
              v587 = *(__n128 *)(v12 + 96);
              v494 = *(__n128 *)(v12 + 48);
              v525 = *(__n128 *)(v12 + 64);
              v680 = *(__n128 *)(v12 + 144);
              v711 = *(__n128 *)(v12 + 160);
              v618 = *(__n128 *)(v12 + 112);
              v649 = *(__n128 *)(v12 + 128);
              v69 = *v16;
              v70 = v16[2];
              *(__n128 *)(v12 + 16) = v16[1];
              *(__n128 *)(v12 + 32) = v70;
              *(__n128 *)v12 = v69;
              v71 = v16[3];
              v72 = v16[4];
              v73 = v16[6];
              *(__n128 *)(v12 + 80) = v16[5];
              *(__n128 *)(v12 + 96) = v73;
              *(__n128 *)(v12 + 48) = v71;
              *(__n128 *)(v12 + 64) = v72;
              v74 = v16[7];
              v75 = v16[8];
              v76 = v16[10];
              *(__n128 *)(v12 + 144) = v16[9];
              *(__n128 *)(v12 + 160) = v76;
              *(__n128 *)(v12 + 112) = v74;
              *(__n128 *)(v12 + 128) = v75;
              v16[1] = v432;
              v16[2] = v463;
              *v16 = v401;
              v16[5] = v556;
              v16[6] = v587;
              v16[3] = v494;
              v16[4] = v525;
              v16[9] = v680;
              v16[10] = v711;
              v16[7] = v618;
              v16[8] = v649;
              if (*n128_f64 >= v16->n128_f64[0])
                goto LABEL_22;
              v426 = v16[1];
              v457 = v16[2];
              v395 = *v16;
              v550 = v16[5];
              v581 = v16[6];
              v488 = v16[3];
              v519 = v16[4];
              v674 = v16[9];
              v705 = v16[10];
              v612 = v16[7];
              v643 = v16[8];
              v77 = *(__n128 *)n128_f64;
              v78 = a2[-9];
              v16[1] = a2[-10];
              v16[2] = v78;
              *v16 = v77;
              v79 = a2[-8];
              v80 = a2[-7];
              v81 = a2[-5];
              v16[5] = a2[-6];
              v16[6] = v81;
              v16[3] = v79;
              v16[4] = v80;
              v82 = a2[-4];
              v83 = a2[-3];
              v84 = a2[-1];
              v16[9] = a2[-2];
              v16[10] = v84;
              v16[7] = v82;
              v16[8] = v83;
            }
            else
            {
              v426 = *(__n128 *)(v12 + 16);
              v457 = *(__n128 *)(v12 + 32);
              v395 = *(__n128 *)v12;
              v550 = *(__n128 *)(v12 + 80);
              v581 = *(__n128 *)(v12 + 96);
              v488 = *(__n128 *)(v12 + 48);
              v519 = *(__n128 *)(v12 + 64);
              v674 = *(__n128 *)(v12 + 144);
              v705 = *(__n128 *)(v12 + 160);
              v612 = *(__n128 *)(v12 + 112);
              v643 = *(__n128 *)(v12 + 128);
              v19 = *(__n128 *)n128_f64;
              v20 = a2[-9];
              *(__n128 *)(v12 + 16) = a2[-10];
              *(__n128 *)(v12 + 32) = v20;
              *(__n128 *)v12 = v19;
              v21 = a2[-8];
              v22 = a2[-7];
              v23 = a2[-5];
              *(__n128 *)(v12 + 80) = a2[-6];
              *(__n128 *)(v12 + 96) = v23;
              *(__n128 *)(v12 + 48) = v21;
              *(__n128 *)(v12 + 64) = v22;
              v24 = a2[-4];
              v25 = a2[-3];
              v26 = a2[-1];
              *(__n128 *)(v12 + 144) = a2[-2];
              *(__n128 *)(v12 + 160) = v26;
              *(__n128 *)(v12 + 112) = v24;
              *(__n128 *)(v12 + 128) = v25;
            }
            a2[-10] = v426;
            a2[-9] = v457;
            *(__n128 *)n128_f64 = v395;
            a2[-6] = v550;
            a2[-5] = v581;
            a2[-8] = v488;
            a2[-7] = v519;
            a2[-2] = v674;
            a2[-1] = v705;
            a2[-4] = v612;
            a2[-3] = v643;
          }
LABEL_22:
          v85 = (double *)(v12 + 176);
          v86 = v12 + 176 * v15;
          v88 = *(double *)(v86 - 176);
          v87 = (__n128 *)(v86 - 176);
          v89 = v88;
          v90 = *v10;
          if (v88 >= *(double *)(v12 + 176))
          {
            if (v90 < v89)
            {
              v434 = v87[1];
              v465 = v87[2];
              v403 = *v87;
              v558 = v87[5];
              v589 = v87[6];
              v496 = v87[3];
              v527 = v87[4];
              v682 = v87[9];
              v713 = v87[10];
              v620 = v87[7];
              v651 = v87[8];
              v99 = *(__n128 *)v10;
              v100 = a2[-20];
              v87[1] = a2[-21];
              v87[2] = v100;
              *v87 = v99;
              v101 = a2[-19];
              v102 = a2[-18];
              v103 = a2[-16];
              v87[5] = a2[-17];
              v87[6] = v103;
              v87[3] = v101;
              v87[4] = v102;
              v104 = a2[-15];
              v105 = a2[-14];
              v106 = a2[-12];
              v87[9] = a2[-13];
              v87[10] = v106;
              v87[7] = v104;
              v87[8] = v105;
              a2[-21] = v434;
              a2[-20] = v465;
              *(__n128 *)v10 = v403;
              a2[-17] = v558;
              a2[-16] = v589;
              a2[-19] = v496;
              a2[-18] = v527;
              a2[-13] = v682;
              a2[-12] = v713;
              a2[-15] = v620;
              a2[-14] = v651;
              if (v87->n128_f64[0] < *v85)
              {
                v528 = *(__n128 *)(v12 + 240);
                v559 = *(__n128 *)(v12 + 256);
                v683 = *(__n128 *)(v12 + 320);
                v714 = *(__n128 *)(v12 + 336);
                v590 = *(__n128 *)(v12 + 272);
                v621 = *(__n128 *)(v12 + 288);
                v652 = *(__n128 *)(v12 + 304);
                v404 = *(__n128 *)v85;
                v435 = *(__n128 *)(v12 + 192);
                v466 = *(__n128 *)(v12 + 208);
                v497 = *(__n128 *)(v12 + 224);
                v107 = *v87;
                v108 = v87[2];
                *(__n128 *)(v12 + 192) = v87[1];
                *(__n128 *)(v12 + 208) = v108;
                *(__n128 *)v85 = v107;
                v109 = v87[3];
                v110 = v87[4];
                v111 = v87[6];
                *(__n128 *)(v12 + 256) = v87[5];
                *(__n128 *)(v12 + 272) = v111;
                *(__n128 *)(v12 + 224) = v109;
                *(__n128 *)(v12 + 240) = v110;
                v112 = v87[7];
                v113 = v87[8];
                v114 = v87[10];
                *(__n128 *)(v12 + 320) = v87[9];
                *(__n128 *)(v12 + 336) = v114;
                *(__n128 *)(v12 + 288) = v112;
                *(__n128 *)(v12 + 304) = v113;
                v87[1] = v435;
                v87[2] = v466;
                *v87 = v404;
                v87[5] = v559;
                v87[6] = v590;
                v87[3] = v497;
                v87[4] = v528;
                v87[9] = v683;
                v87[10] = v714;
                v87[7] = v621;
                v87[8] = v652;
              }
            }
          }
          else
          {
            if (v90 >= v89)
            {
              v530 = *(__n128 *)(v12 + 240);
              v561 = *(__n128 *)(v12 + 256);
              v685 = *(__n128 *)(v12 + 320);
              v716 = *(__n128 *)(v12 + 336);
              v592 = *(__n128 *)(v12 + 272);
              v623 = *(__n128 *)(v12 + 288);
              v654 = *(__n128 *)(v12 + 304);
              v406 = *(__n128 *)v85;
              v437 = *(__n128 *)(v12 + 192);
              v468 = *(__n128 *)(v12 + 208);
              v499 = *(__n128 *)(v12 + 224);
              v131 = *v87;
              v132 = v87[2];
              *(__n128 *)(v12 + 192) = v87[1];
              *(__n128 *)(v12 + 208) = v132;
              *(__n128 *)v85 = v131;
              v133 = v87[3];
              v134 = v87[4];
              v135 = v87[6];
              *(__n128 *)(v12 + 256) = v87[5];
              *(__n128 *)(v12 + 272) = v135;
              *(__n128 *)(v12 + 224) = v133;
              *(__n128 *)(v12 + 240) = v134;
              v136 = v87[7];
              v137 = v87[8];
              v138 = v87[10];
              *(__n128 *)(v12 + 320) = v87[9];
              *(__n128 *)(v12 + 336) = v138;
              *(__n128 *)(v12 + 288) = v136;
              *(__n128 *)(v12 + 304) = v137;
              v87[1] = v437;
              v87[2] = v468;
              *v87 = v406;
              v87[5] = v561;
              v87[6] = v592;
              v87[3] = v499;
              v87[4] = v530;
              v87[9] = v685;
              v87[10] = v716;
              v87[7] = v623;
              v87[8] = v654;
              if (*v10 >= v87->n128_f64[0])
                goto LABEL_36;
              v433 = v87[1];
              v464 = v87[2];
              v402 = *v87;
              v557 = v87[5];
              v588 = v87[6];
              v495 = v87[3];
              v526 = v87[4];
              v681 = v87[9];
              v712 = v87[10];
              v619 = v87[7];
              v650 = v87[8];
              v139 = *(__n128 *)v10;
              v140 = a2[-20];
              v87[1] = a2[-21];
              v87[2] = v140;
              *v87 = v139;
              v141 = a2[-19];
              v142 = a2[-18];
              v143 = a2[-16];
              v87[5] = a2[-17];
              v87[6] = v143;
              v87[3] = v141;
              v87[4] = v142;
              v144 = a2[-15];
              v145 = a2[-14];
              v146 = a2[-12];
              v87[9] = a2[-13];
              v87[10] = v146;
              v87[7] = v144;
              v87[8] = v145;
            }
            else
            {
              v526 = *(__n128 *)(v12 + 240);
              v557 = *(__n128 *)(v12 + 256);
              v681 = *(__n128 *)(v12 + 320);
              v712 = *(__n128 *)(v12 + 336);
              v588 = *(__n128 *)(v12 + 272);
              v619 = *(__n128 *)(v12 + 288);
              v650 = *(__n128 *)(v12 + 304);
              v402 = *(__n128 *)v85;
              v433 = *(__n128 *)(v12 + 192);
              v464 = *(__n128 *)(v12 + 208);
              v495 = *(__n128 *)(v12 + 224);
              v91 = *(__n128 *)v10;
              v92 = a2[-20];
              *(__n128 *)(v12 + 192) = a2[-21];
              *(__n128 *)(v12 + 208) = v92;
              *(__n128 *)v85 = v91;
              v93 = a2[-19];
              v94 = a2[-18];
              v95 = a2[-16];
              *(__n128 *)(v12 + 256) = a2[-17];
              *(__n128 *)(v12 + 272) = v95;
              *(__n128 *)(v12 + 224) = v93;
              *(__n128 *)(v12 + 240) = v94;
              v96 = a2[-15];
              v97 = a2[-14];
              v98 = a2[-12];
              *(__n128 *)(v12 + 320) = a2[-13];
              *(__n128 *)(v12 + 336) = v98;
              *(__n128 *)(v12 + 288) = v96;
              *(__n128 *)(v12 + 304) = v97;
            }
            a2[-21] = v433;
            a2[-20] = v464;
            *(__n128 *)v10 = v402;
            a2[-17] = v557;
            a2[-16] = v588;
            a2[-19] = v495;
            a2[-18] = v526;
            a2[-13] = v681;
            a2[-12] = v712;
            a2[-15] = v619;
            a2[-14] = v650;
          }
LABEL_36:
          v147 = (double *)(v12 + 352);
          v148 = v12 + 176 * v15;
          v150 = *(double *)(v148 + 176);
          v149 = (__n128 *)(v148 + 176);
          v151 = v150;
          v152 = *v11;
          if (v150 >= *(double *)(v12 + 352))
          {
            if (v152 < v151)
            {
              v439 = v149[1];
              v470 = v149[2];
              v408 = *v149;
              v563 = v149[5];
              v594 = v149[6];
              v501 = v149[3];
              v532 = v149[4];
              v687 = v149[9];
              v718 = v149[10];
              v625 = v149[7];
              v656 = v149[8];
              v161 = *(__n128 *)v11;
              v162 = a2[-31];
              v149[1] = a2[-32];
              v149[2] = v162;
              *v149 = v161;
              v163 = a2[-30];
              v164 = a2[-29];
              v165 = a2[-27];
              v149[5] = a2[-28];
              v149[6] = v165;
              v149[3] = v163;
              v149[4] = v164;
              v166 = a2[-26];
              v167 = a2[-25];
              v168 = a2[-23];
              v149[9] = a2[-24];
              v149[10] = v168;
              v149[7] = v166;
              v149[8] = v167;
              a2[-32] = v439;
              a2[-31] = v470;
              *(__n128 *)v11 = v408;
              a2[-28] = v563;
              a2[-27] = v594;
              a2[-30] = v501;
              a2[-29] = v532;
              a2[-24] = v687;
              a2[-23] = v718;
              a2[-26] = v625;
              a2[-25] = v656;
              if (v149->n128_f64[0] < *v147)
              {
                v533 = *(__n128 *)(v12 + 416);
                v564 = *(__n128 *)(v12 + 432);
                v688 = *(__n128 *)(v12 + 496);
                v719 = *(__n128 *)(v12 + 512);
                v595 = *(__n128 *)(v12 + 448);
                v626 = *(__n128 *)(v12 + 464);
                v657 = *(__n128 *)(v12 + 480);
                v409 = *(__n128 *)v147;
                v440 = *(__n128 *)(v12 + 368);
                v471 = *(__n128 *)(v12 + 384);
                v502 = *(__n128 *)(v12 + 400);
                v169 = *v149;
                v170 = v149[2];
                *(__n128 *)(v12 + 368) = v149[1];
                *(__n128 *)(v12 + 384) = v170;
                *(__n128 *)v147 = v169;
                v171 = v149[3];
                v172 = v149[4];
                v173 = v149[6];
                *(__n128 *)(v12 + 432) = v149[5];
                *(__n128 *)(v12 + 448) = v173;
                *(__n128 *)(v12 + 400) = v171;
                *(__n128 *)(v12 + 416) = v172;
                v174 = v149[7];
                v175 = v149[8];
                v176 = v149[10];
                *(__n128 *)(v12 + 496) = v149[9];
                *(__n128 *)(v12 + 512) = v176;
                *(__n128 *)(v12 + 464) = v174;
                *(__n128 *)(v12 + 480) = v175;
                v149[1] = v440;
                v149[2] = v471;
                *v149 = v409;
                v149[5] = v564;
                v149[6] = v595;
                v149[3] = v502;
                v149[4] = v533;
                v149[9] = v688;
                v149[10] = v719;
                v149[7] = v626;
                v149[8] = v657;
              }
            }
          }
          else
          {
            if (v152 >= v151)
            {
              v534 = *(__n128 *)(v12 + 416);
              v565 = *(__n128 *)(v12 + 432);
              v689 = *(__n128 *)(v12 + 496);
              v720 = *(__n128 *)(v12 + 512);
              v596 = *(__n128 *)(v12 + 448);
              v627 = *(__n128 *)(v12 + 464);
              v658 = *(__n128 *)(v12 + 480);
              v410 = *(__n128 *)v147;
              v441 = *(__n128 *)(v12 + 368);
              v472 = *(__n128 *)(v12 + 384);
              v503 = *(__n128 *)(v12 + 400);
              v177 = *v149;
              v178 = v149[2];
              *(__n128 *)(v12 + 368) = v149[1];
              *(__n128 *)(v12 + 384) = v178;
              *(__n128 *)v147 = v177;
              v179 = v149[3];
              v180 = v149[4];
              v181 = v149[6];
              *(__n128 *)(v12 + 432) = v149[5];
              *(__n128 *)(v12 + 448) = v181;
              *(__n128 *)(v12 + 400) = v179;
              *(__n128 *)(v12 + 416) = v180;
              v182 = v149[7];
              v183 = v149[8];
              v184 = v149[10];
              *(__n128 *)(v12 + 496) = v149[9];
              *(__n128 *)(v12 + 512) = v184;
              *(__n128 *)(v12 + 464) = v182;
              *(__n128 *)(v12 + 480) = v183;
              v149[1] = v441;
              v149[2] = v472;
              *v149 = v410;
              v149[5] = v565;
              v149[6] = v596;
              v149[3] = v503;
              v149[4] = v534;
              v149[9] = v689;
              v149[10] = v720;
              v149[7] = v627;
              v149[8] = v658;
              if (*v11 >= v149->n128_f64[0])
                goto LABEL_45;
              v438 = v149[1];
              v469 = v149[2];
              v407 = *v149;
              v562 = v149[5];
              v593 = v149[6];
              v500 = v149[3];
              v531 = v149[4];
              v686 = v149[9];
              v717 = v149[10];
              v624 = v149[7];
              v655 = v149[8];
              v185 = *(__n128 *)v11;
              v186 = a2[-31];
              v149[1] = a2[-32];
              v149[2] = v186;
              *v149 = v185;
              v187 = a2[-30];
              v188 = a2[-29];
              v189 = a2[-27];
              v149[5] = a2[-28];
              v149[6] = v189;
              v149[3] = v187;
              v149[4] = v188;
              v190 = a2[-26];
              v191 = a2[-25];
              v192 = a2[-23];
              v149[9] = a2[-24];
              v149[10] = v192;
              v149[7] = v190;
              v149[8] = v191;
            }
            else
            {
              v531 = *(__n128 *)(v12 + 416);
              v562 = *(__n128 *)(v12 + 432);
              v686 = *(__n128 *)(v12 + 496);
              v717 = *(__n128 *)(v12 + 512);
              v593 = *(__n128 *)(v12 + 448);
              v624 = *(__n128 *)(v12 + 464);
              v655 = *(__n128 *)(v12 + 480);
              v407 = *(__n128 *)v147;
              v438 = *(__n128 *)(v12 + 368);
              v469 = *(__n128 *)(v12 + 384);
              v500 = *(__n128 *)(v12 + 400);
              v153 = *(__n128 *)v11;
              v154 = a2[-31];
              *(__n128 *)(v12 + 368) = a2[-32];
              *(__n128 *)(v12 + 384) = v154;
              *(__n128 *)v147 = v153;
              v155 = a2[-30];
              v156 = a2[-29];
              v157 = a2[-27];
              *(__n128 *)(v12 + 432) = a2[-28];
              *(__n128 *)(v12 + 448) = v157;
              *(__n128 *)(v12 + 400) = v155;
              *(__n128 *)(v12 + 416) = v156;
              v158 = a2[-26];
              v159 = a2[-25];
              v160 = a2[-23];
              *(__n128 *)(v12 + 496) = a2[-24];
              *(__n128 *)(v12 + 512) = v160;
              *(__n128 *)(v12 + 464) = v158;
              *(__n128 *)(v12 + 480) = v159;
            }
            a2[-32] = v438;
            a2[-31] = v469;
            *(__n128 *)v11 = v407;
            a2[-28] = v562;
            a2[-27] = v593;
            a2[-30] = v500;
            a2[-29] = v531;
            a2[-24] = v686;
            a2[-23] = v717;
            a2[-26] = v624;
            a2[-25] = v655;
          }
LABEL_45:
          v193 = v16->n128_f64[0];
          v194 = v149->n128_f64[0];
          if (v16->n128_f64[0] >= v87->n128_f64[0])
          {
            if (v194 < v193)
            {
              v443 = v16[1];
              v474 = v16[2];
              v412 = *v16;
              v567 = v16[5];
              v598 = v16[6];
              v505 = v16[3];
              v536 = v16[4];
              v691 = v16[9];
              v722 = v16[10];
              v629 = v16[7];
              v660 = v16[8];
              v201 = v149[5];
              v16[4] = v149[4];
              v16[5] = v201;
              v202 = v149[10];
              v203 = v149[8];
              v16[9] = v149[9];
              v16[10] = v202;
              v204 = v149[7];
              v16[6] = v149[6];
              v16[7] = v204;
              v16[8] = v203;
              v205 = v149[1];
              *v16 = *v149;
              v16[1] = v205;
              v206 = v149[3];
              v16[2] = v149[2];
              v16[3] = v206;
              v149[1] = v443;
              v149[2] = v474;
              *v149 = v412;
              v149[5] = v567;
              v149[6] = v598;
              v149[3] = v505;
              v149[4] = v536;
              v149[9] = v691;
              v149[10] = v722;
              v149[7] = v629;
              v149[8] = v660;
              if (v16->n128_f64[0] < v87->n128_f64[0])
              {
                v444 = v87[1];
                v475 = v87[2];
                v413 = *v87;
                v568 = v87[5];
                v599 = v87[6];
                v506 = v87[3];
                v537 = v87[4];
                v692 = v87[9];
                v723 = v87[10];
                v630 = v87[7];
                v661 = v87[8];
                v207 = v16[5];
                v87[4] = v16[4];
                v87[5] = v207;
                v208 = v16[10];
                v209 = v16[8];
                v87[9] = v16[9];
                v87[10] = v208;
                v210 = v16[7];
                v87[6] = v16[6];
                v87[7] = v210;
                v87[8] = v209;
                v211 = v16[1];
                *v87 = *v16;
                v87[1] = v211;
                v212 = v16[3];
                v87[2] = v16[2];
                v87[3] = v212;
                v16[1] = v444;
                v16[2] = v475;
                *v16 = v413;
                v16[5] = v568;
                v16[6] = v599;
                v16[3] = v506;
                v16[4] = v537;
                v16[9] = v692;
                v16[10] = v723;
                v16[7] = v630;
                v16[8] = v661;
              }
            }
          }
          else
          {
            if (v194 >= v193)
            {
              v445 = v87[1];
              v476 = v87[2];
              v414 = *v87;
              v569 = v87[5];
              v600 = v87[6];
              v507 = v87[3];
              v538 = v87[4];
              v693 = v87[9];
              v724 = v87[10];
              v631 = v87[7];
              v662 = v87[8];
              v213 = v16[5];
              v87[4] = v16[4];
              v87[5] = v213;
              v214 = v16[10];
              v215 = v16[8];
              v87[9] = v16[9];
              v87[10] = v214;
              v216 = v16[7];
              v87[6] = v16[6];
              v87[7] = v216;
              v87[8] = v215;
              v217 = v16[1];
              *v87 = *v16;
              v87[1] = v217;
              v218 = v16[3];
              v87[2] = v16[2];
              v87[3] = v218;
              v16[1] = v445;
              v16[2] = v476;
              *v16 = v414;
              v16[5] = v569;
              v16[6] = v600;
              v16[3] = v507;
              v16[4] = v538;
              v16[9] = v693;
              v16[10] = v724;
              v16[7] = v631;
              v16[8] = v662;
              if (v149->n128_f64[0] >= v16->n128_f64[0])
                goto LABEL_54;
              v442 = v16[1];
              v473 = v16[2];
              v411 = *v16;
              v566 = v16[5];
              v597 = v16[6];
              v504 = v16[3];
              v535 = v16[4];
              v690 = v16[9];
              v721 = v16[10];
              v628 = v16[7];
              v659 = v16[8];
              v219 = v149[5];
              v16[4] = v149[4];
              v16[5] = v219;
              v220 = v149[10];
              v221 = v149[8];
              v16[9] = v149[9];
              v16[10] = v220;
              v222 = v149[7];
              v16[6] = v149[6];
              v16[7] = v222;
              v16[8] = v221;
              v223 = v149[1];
              *v16 = *v149;
              v16[1] = v223;
              v224 = v149[3];
              v16[2] = v149[2];
              v16[3] = v224;
            }
            else
            {
              v442 = v87[1];
              v473 = v87[2];
              v411 = *v87;
              v566 = v87[5];
              v597 = v87[6];
              v504 = v87[3];
              v535 = v87[4];
              v690 = v87[9];
              v721 = v87[10];
              v628 = v87[7];
              v659 = v87[8];
              v195 = v149[5];
              v87[4] = v149[4];
              v87[5] = v195;
              v196 = v149[10];
              v197 = v149[8];
              v87[9] = v149[9];
              v87[10] = v196;
              v198 = v149[7];
              v87[6] = v149[6];
              v87[7] = v198;
              v87[8] = v197;
              v199 = v149[1];
              *v87 = *v149;
              v87[1] = v199;
              v200 = v149[3];
              v87[2] = v149[2];
              v87[3] = v200;
            }
            v149[1] = v442;
            v149[2] = v473;
            *v149 = v411;
            v149[5] = v566;
            v149[6] = v597;
            v149[3] = v504;
            v149[4] = v535;
            v149[9] = v690;
            v149[10] = v721;
            v149[7] = v628;
            v149[8] = v659;
          }
LABEL_54:
          v446 = *(__n128 *)(v12 + 16);
          v477 = *(__n128 *)(v12 + 32);
          v415 = *(__n128 *)v12;
          v570 = *(__n128 *)(v12 + 80);
          v601 = *(__n128 *)(v12 + 96);
          v508 = *(__n128 *)(v12 + 48);
          v539 = *(__n128 *)(v12 + 64);
          v694 = *(__n128 *)(v12 + 144);
          v725 = *(__n128 *)(v12 + 160);
          v632 = *(__n128 *)(v12 + 112);
          v663 = *(__n128 *)(v12 + 128);
          v225 = *v16;
          v226 = v16[2];
          *(__n128 *)(v12 + 16) = v16[1];
          *(__n128 *)(v12 + 32) = v226;
          *(__n128 *)v12 = v225;
          v227 = v16[3];
          v228 = v16[4];
          v229 = v16[6];
          *(__n128 *)(v12 + 80) = v16[5];
          *(__n128 *)(v12 + 96) = v229;
          *(__n128 *)(v12 + 48) = v227;
          *(__n128 *)(v12 + 64) = v228;
          v230 = v16[7];
          v231 = v16[8];
          v232 = v16[10];
          *(__n128 *)(v12 + 144) = v16[9];
          *(__n128 *)(v12 + 160) = v232;
          *(__n128 *)(v12 + 112) = v230;
          *(__n128 *)(v12 + 128) = v231;
          v16[1] = v446;
          v16[2] = v477;
          *v16 = v415;
          v16[5] = v570;
          v16[6] = v601;
          v16[3] = v508;
          v16[4] = v539;
          v16[9] = v694;
          v16[10] = v725;
          v16[7] = v632;
          v16[8] = v663;
          --a3;
          v68 = *(double *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(double *)(v12 - 176) >= v68)
          {
            v767 = *(_QWORD *)(v12 + 168);
            v740 = *(_OWORD *)(v12 + 24);
            v743 = *(_OWORD *)(v12 + 40);
            v737 = *(_OWORD *)(v12 + 8);
            v752 = *(_OWORD *)(v12 + 88);
            v755 = *(_OWORD *)(v12 + 104);
            v746 = *(_OWORD *)(v12 + 56);
            v749 = *(_OWORD *)(v12 + 72);
            v761 = *(_OWORD *)(v12 + 136);
            v764 = *(_OWORD *)(v12 + 152);
            v758 = *(_OWORD *)(v12 + 120);
            if (v68 >= *n128_f64)
            {
              v260 = v12 + 176;
              do
              {
                v12 = v260;
                if (v260 >= (unint64_t)a2)
                  break;
                v260 += 176;
              }
              while (v68 >= *(double *)v12);
            }
            else
            {
              do
              {
                v259 = *(double *)(v12 + 176);
                v12 += 176;
              }
              while (v68 >= v259);
            }
            v261 = a2;
            if (v12 < (unint64_t)a2)
            {
              v261 = a2;
              do
              {
                v262 = v261[-11].n128_f64[0];
                v261 -= 11;
              }
              while (v68 < v262);
            }
            while (v12 < (unint64_t)v261)
            {
              v448 = *(__n128 *)(v12 + 16);
              v479 = *(__n128 *)(v12 + 32);
              v417 = *(__n128 *)v12;
              v572 = *(__n128 *)(v12 + 80);
              v603 = *(__n128 *)(v12 + 96);
              v510 = *(__n128 *)(v12 + 48);
              v541 = *(__n128 *)(v12 + 64);
              v696 = *(__n128 *)(v12 + 144);
              v727 = *(__n128 *)(v12 + 160);
              v634 = *(__n128 *)(v12 + 112);
              v665 = *(__n128 *)(v12 + 128);
              v263 = *v261;
              v264 = v261[2];
              *(__n128 *)(v12 + 16) = v261[1];
              *(__n128 *)(v12 + 32) = v264;
              *(__n128 *)v12 = v263;
              v265 = v261[3];
              v266 = v261[4];
              v267 = v261[6];
              *(__n128 *)(v12 + 80) = v261[5];
              *(__n128 *)(v12 + 96) = v267;
              *(__n128 *)(v12 + 48) = v265;
              *(__n128 *)(v12 + 64) = v266;
              v268 = v261[7];
              v269 = v261[8];
              v270 = v261[10];
              *(__n128 *)(v12 + 144) = v261[9];
              *(__n128 *)(v12 + 160) = v270;
              *(__n128 *)(v12 + 112) = v268;
              *(__n128 *)(v12 + 128) = v269;
              v261[1] = v448;
              v261[2] = v479;
              *v261 = v417;
              v261[5] = v572;
              v261[6] = v603;
              v261[3] = v510;
              v261[4] = v541;
              v261[9] = v696;
              v261[10] = v727;
              v261[7] = v634;
              v261[8] = v665;
              do
              {
                v271 = *(double *)(v12 + 176);
                v12 += 176;
              }
              while (v68 >= v271);
              do
              {
                v272 = v261[-11].n128_f64[0];
                v261 -= 11;
              }
              while (v68 < v272);
            }
            if (v12 - 176 != a1)
            {
              v273 = *(_OWORD *)(v12 - 176);
              v274 = *(_OWORD *)(v12 - 144);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 - 160);
              *(_OWORD *)(a1 + 32) = v274;
              *(_OWORD *)a1 = v273;
              v275 = *(_OWORD *)(v12 - 128);
              v276 = *(_OWORD *)(v12 - 112);
              v277 = *(_OWORD *)(v12 - 80);
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(v12 - 96);
              *(_OWORD *)(a1 + 96) = v277;
              *(_OWORD *)(a1 + 48) = v275;
              *(_OWORD *)(a1 + 64) = v276;
              v278 = *(_OWORD *)(v12 - 64);
              v279 = *(_OWORD *)(v12 - 48);
              v280 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)(a1 + 144) = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 160) = v280;
              *(_OWORD *)(a1 + 112) = v278;
              *(_OWORD *)(a1 + 128) = v279;
            }
            a4 = 0;
            *(double *)(v12 - 176) = v68;
            *(_OWORD *)(v12 - 136) = v743;
            *(_OWORD *)(v12 - 152) = v740;
            *(_OWORD *)(v12 - 168) = v737;
            *(_OWORD *)(v12 - 72) = v755;
            *(_OWORD *)(v12 - 88) = v752;
            *(_OWORD *)(v12 - 104) = v749;
            *(_OWORD *)(v12 - 120) = v746;
            result = *(double *)&v758;
            *(_QWORD *)(v12 - 8) = v767;
            *(_OWORD *)(v12 - 24) = v764;
            *(_OWORD *)(v12 - 40) = v761;
            *(_OWORD *)(v12 - 56) = v758;
            continue;
          }
LABEL_56:
          v233 = 0;
          v766 = *(_QWORD *)(v12 + 168);
          v739 = *(_OWORD *)(v12 + 24);
          v742 = *(_OWORD *)(v12 + 40);
          v736 = *(_OWORD *)(v12 + 8);
          v751 = *(_OWORD *)(v12 + 88);
          v754 = *(_OWORD *)(v12 + 104);
          v745 = *(_OWORD *)(v12 + 56);
          v748 = *(_OWORD *)(v12 + 72);
          v760 = *(_OWORD *)(v12 + 136);
          v763 = *(_OWORD *)(v12 + 152);
          v757 = *(_OWORD *)(v12 + 120);
          do
          {
            v234 = *(double *)(v12 + v233 + 176);
            v233 += 176;
          }
          while (v234 < v68);
          v235 = v12 + v233;
          v236 = a2;
          if (v233 == 176)
          {
            v236 = a2;
            do
            {
              if (v235 >= (unint64_t)v236)
                break;
              v238 = v236[-11].n128_f64[0];
              v236 -= 11;
            }
            while (v238 >= v68);
          }
          else
          {
            do
            {
              v237 = v236[-11].n128_f64[0];
              v236 -= 11;
            }
            while (v237 >= v68);
          }
          v12 += v233;
          if (v235 < (unint64_t)v236)
          {
            v239 = v236;
            do
            {
              v447 = *(__n128 *)(v12 + 16);
              v478 = *(__n128 *)(v12 + 32);
              v416 = *(__n128 *)v12;
              v571 = *(__n128 *)(v12 + 80);
              v602 = *(__n128 *)(v12 + 96);
              v509 = *(__n128 *)(v12 + 48);
              v540 = *(__n128 *)(v12 + 64);
              v695 = *(__n128 *)(v12 + 144);
              v726 = *(__n128 *)(v12 + 160);
              v633 = *(__n128 *)(v12 + 112);
              v664 = *(__n128 *)(v12 + 128);
              v240 = *v239;
              v241 = v239[2];
              *(__n128 *)(v12 + 16) = v239[1];
              *(__n128 *)(v12 + 32) = v241;
              *(__n128 *)v12 = v240;
              v242 = v239[3];
              v243 = v239[4];
              v244 = v239[6];
              *(__n128 *)(v12 + 80) = v239[5];
              *(__n128 *)(v12 + 96) = v244;
              *(__n128 *)(v12 + 48) = v242;
              *(__n128 *)(v12 + 64) = v243;
              v245 = v239[7];
              v246 = v239[8];
              v247 = v239[10];
              *(__n128 *)(v12 + 144) = v239[9];
              *(__n128 *)(v12 + 160) = v247;
              *(__n128 *)(v12 + 112) = v245;
              *(__n128 *)(v12 + 128) = v246;
              v239[1] = v447;
              v239[2] = v478;
              *v239 = v416;
              v239[5] = v571;
              v239[6] = v602;
              v239[3] = v509;
              v239[4] = v540;
              v239[9] = v695;
              v239[10] = v726;
              v239[7] = v633;
              v239[8] = v664;
              do
              {
                v248 = *(double *)(v12 + 176);
                v12 += 176;
              }
              while (v248 < v68);
              do
              {
                v249 = v239[-11].n128_f64[0];
                v239 -= 11;
              }
              while (v249 >= v68);
            }
            while (v12 < (unint64_t)v239);
          }
          if (v12 - 176 != a1)
          {
            v250 = *(_OWORD *)(v12 - 176);
            v251 = *(_OWORD *)(v12 - 144);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 - 160);
            *(_OWORD *)(a1 + 32) = v251;
            *(_OWORD *)a1 = v250;
            v252 = *(_OWORD *)(v12 - 128);
            v253 = *(_OWORD *)(v12 - 112);
            v254 = *(_OWORD *)(v12 - 80);
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(v12 - 96);
            *(_OWORD *)(a1 + 96) = v254;
            *(_OWORD *)(a1 + 48) = v252;
            *(_OWORD *)(a1 + 64) = v253;
            v255 = *(_OWORD *)(v12 - 64);
            v256 = *(_OWORD *)(v12 - 48);
            v257 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 160) = v257;
            *(_OWORD *)(a1 + 112) = v255;
            *(_OWORD *)(a1 + 128) = v256;
          }
          *(double *)(v12 - 176) = v68;
          *(_OWORD *)(v12 - 136) = v742;
          *(_OWORD *)(v12 - 152) = v739;
          *(_OWORD *)(v12 - 168) = v736;
          *(_OWORD *)(v12 - 72) = v754;
          *(_OWORD *)(v12 - 88) = v751;
          *(_OWORD *)(v12 - 104) = v748;
          *(_OWORD *)(v12 - 120) = v745;
          *(_QWORD *)(v12 - 8) = v766;
          *(_OWORD *)(v12 - 24) = v763;
          *(_OWORD *)(v12 - 40) = v760;
          *(_OWORD *)(v12 - 56) = v757;
          if (v235 < (unint64_t)v236)
            goto LABEL_75;
          v258 = sub_20EB793EC(a1, v12 - 176);
          if (!sub_20EB793EC(v12, (uint64_t)a2))
          {
            if (v258)
              continue;
LABEL_75:
            sub_20EB770CC(a1, v12 - 176, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 176);
          if (v258)
            return result;
          goto LABEL_1;
        }
        v294 = (__n128 *)(v12 + 176);
        v296 = (__n128 *)v12 == a2 || v294 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v296)
          {
            v297 = 0;
            v298 = v12;
            do
            {
              v300 = v294;
              result = *(double *)(v298 + 176);
              if (result < *(double *)v298)
              {
                v729 = *(_QWORD *)(v298 + 344);
                v419 = *(_OWORD *)(v298 + 184);
                v450 = *(_OWORD *)(v298 + 200);
                v481 = *(_OWORD *)(v298 + 216);
                v512 = *(_OWORD *)(v298 + 232);
                v667 = *(_OWORD *)(v298 + 312);
                v698 = *(_OWORD *)(v298 + 328);
                v543 = *(_OWORD *)(v298 + 248);
                v574 = *(_OWORD *)(v298 + 264);
                v301 = v297;
                v605 = *(_OWORD *)(v298 + 280);
                v636 = *(_OWORD *)(v298 + 296);
                do
                {
                  v302 = (double *)(v12 + v301);
                  v303 = *(_OWORD *)(v12 + v301 + 144);
                  *((_OWORD *)v302 + 19) = *(_OWORD *)(v12 + v301 + 128);
                  *((_OWORD *)v302 + 20) = v303;
                  *((_OWORD *)v302 + 21) = *(_OWORD *)(v12 + v301 + 160);
                  v304 = *(_OWORD *)(v12 + v301 + 80);
                  *((_OWORD *)v302 + 15) = *(_OWORD *)(v12 + v301 + 64);
                  *((_OWORD *)v302 + 16) = v304;
                  v305 = *(_OWORD *)(v12 + v301 + 112);
                  *((_OWORD *)v302 + 17) = *(_OWORD *)(v12 + v301 + 96);
                  *((_OWORD *)v302 + 18) = v305;
                  v306 = *(_OWORD *)(v12 + v301 + 16);
                  *((_OWORD *)v302 + 11) = *(_OWORD *)(v12 + v301);
                  *((_OWORD *)v302 + 12) = v306;
                  v307 = *(_OWORD *)(v12 + v301 + 48);
                  *((_OWORD *)v302 + 13) = *(_OWORD *)(v12 + v301 + 32);
                  *((_OWORD *)v302 + 14) = v307;
                  if (!v301)
                  {
                    v299 = v12;
                    goto LABEL_114;
                  }
                  v301 -= 176;
                }
                while (result < *(v302 - 22));
                v299 = v12 + v301 + 176;
LABEL_114:
                *(double *)v299 = result;
                result = *(double *)&v636;
                *(_QWORD *)(v299 + 168) = v729;
                *(_OWORD *)(v299 + 40) = v481;
                *(_OWORD *)(v299 + 24) = v450;
                *(_OWORD *)(v299 + 8) = v419;
                *(_OWORD *)(v299 + 104) = v605;
                *(_OWORD *)(v299 + 88) = v574;
                *(_OWORD *)(v299 + 72) = v543;
                *(_OWORD *)(v299 + 56) = v512;
                *(_OWORD *)(v299 + 152) = v698;
                *(_OWORD *)(v299 + 136) = v667;
                *(_OWORD *)(v299 + 120) = v636;
              }
              v294 = v300 + 11;
              v297 += 176;
              v298 = (unint64_t)v300;
            }
            while (&v300[11] != a2);
          }
        }
        else if (!v296)
        {
          do
          {
            v374 = (uint64_t)v294;
            result = *(double *)(a1 + 176);
            if (result < *(double *)a1)
            {
              v734 = *(_QWORD *)(a1 + 344);
              v424 = *(_OWORD *)(a1 + 184);
              v455 = *(_OWORD *)(a1 + 200);
              v486 = *(_OWORD *)(a1 + 216);
              v517 = *(_OWORD *)(a1 + 232);
              v672 = *(_OWORD *)(a1 + 312);
              v703 = *(_OWORD *)(a1 + 328);
              v548 = *(_OWORD *)(a1 + 248);
              v579 = *(_OWORD *)(a1 + 264);
              v610 = *(_OWORD *)(a1 + 280);
              v641 = *(_OWORD *)(a1 + 296);
              do
              {
                v375 = *(_OWORD *)(a1 + 144);
                *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 128);
                *(_OWORD *)(a1 + 320) = v375;
                *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 160);
                v376 = *(_OWORD *)(a1 + 80);
                *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 64);
                *(_OWORD *)(a1 + 256) = v376;
                v377 = *(_OWORD *)(a1 + 112);
                *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 96);
                *(_OWORD *)(a1 + 288) = v377;
                v378 = *(_OWORD *)(a1 + 16);
                *(_OWORD *)(a1 + 176) = *(_OWORD *)a1;
                *(_OWORD *)(a1 + 192) = v378;
                v379 = *(_OWORD *)(a1 + 48);
                *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 32);
                *(_OWORD *)(a1 + 224) = v379;
                v380 = *(double *)(a1 - 176);
                a1 -= 176;
              }
              while (result < v380);
              *(double *)(a1 + 176) = result;
              *(_OWORD *)(a1 + 216) = v486;
              *(_OWORD *)(a1 + 200) = v455;
              *(_OWORD *)(a1 + 184) = v424;
              *(_OWORD *)(a1 + 264) = v579;
              *(_OWORD *)(a1 + 280) = v610;
              *(_OWORD *)(a1 + 248) = v548;
              *(_OWORD *)(a1 + 232) = v517;
              result = *(double *)&v641;
              *(_QWORD *)(a1 + 344) = v734;
              *(_OWORD *)(a1 + 312) = v672;
              *(_OWORD *)(a1 + 328) = v703;
              *(_OWORD *)(a1 + 296) = v641;
            }
            v294 += 11;
            a1 = v374;
          }
          while ((__n128 *)(v374 + 176) != a2);
        }
        return result;
    }
  }
}

  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(double *)v9;
        if (*(double *)(a2 - 72) < *(double *)v9)
        {
          v138 = *(_OWORD *)(v9 + 8);
          v146 = *(_OWORD *)(v9 + 24);
          v116 = *(_OWORD *)(v9 + 40);
          v124 = *(_QWORD *)(v9 + 56);
          v49 = *(_QWORD *)(v9 + 64);
          *(_QWORD *)v9 = *(_QWORD *)(a2 - 72);
          v50 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 - 48);
          *(_OWORD *)(v9 + 8) = v50;
          v51 = *(_OWORD *)(a2 - 32);
          *(_QWORD *)(v9 + 56) = *(_QWORD *)(a2 - 16);
          *(_OWORD *)(v9 + 40) = v51;
          *(_QWORD *)(v9 + 64) = *(_QWORD *)(a2 - 8);
          *(double *)(a2 - 72) = result;
          *(_OWORD *)(a2 - 64) = v138;
          *(_OWORD *)(a2 - 48) = v146;
          result = *(double *)&v116;
          *(_QWORD *)(a2 - 16) = v124;
          *(_OWORD *)(a2 - 32) = v116;
          *(_QWORD *)(a2 - 8) = v49;
        }
        return result;
      case 3:
        *(_QWORD *)&result = sub_20EB7FEEC(v9, v9 + 72, a2 - 72).n128_u64[0];
        return result;
      case 4:
        *(_QWORD *)&result = sub_20EB80408(v9, v9 + 72, v9 + 144, a2 - 72).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = sub_20EB805C4(v9, v9 + 72, v9 + 144, v9 + 216, a2 - 72).n128_u64[0];
        return result;
      default:
        if (v10 <= 1727)
        {
          v52 = v9 + 72;
          v54 = v9 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v9;
              do
              {
                v58 = v52;
                result = *(double *)(v56 + 72);
                if (result < *(double *)v56)
                {
                  v139 = *(_OWORD *)(v56 + 80);
                  v147 = *(_OWORD *)(v56 + 96);
                  v117 = *(_OWORD *)(v56 + 112);
                  v125 = *(_QWORD *)(v56 + 128);
                  v59 = *(_QWORD *)(v56 + 136);
                  v60 = *(double *)v56;
                  v61 = v55;
                  do
                  {
                    v62 = v9 + v61;
                    *(double *)(v62 + 72) = v60;
                    v63 = *(_OWORD *)(v9 + v61 + 24);
                    *(_OWORD *)(v62 + 80) = *(_OWORD *)(v9 + v61 + 8);
                    *(_OWORD *)(v62 + 96) = v63;
                    *(_OWORD *)(v62 + 112) = *(_OWORD *)(v9 + v61 + 40);
                    *(_QWORD *)(v62 + 128) = *(_QWORD *)(v9 + v61 + 56);
                    *(_QWORD *)(v62 + 136) = *(_QWORD *)(v9 + v61 + 64);
                    if (!v61)
                    {
                      v57 = v9;
                      goto LABEL_68;
                    }
                    v60 = *(double *)(v62 - 72);
                    v61 -= 72;
                  }
                  while (result < v60);
                  v57 = v9 + v61 + 72;
LABEL_68:
                  *(double *)v57 = result;
                  *(_OWORD *)(v62 + 8) = v139;
                  *(_OWORD *)(v62 + 24) = v147;
                  result = *(double *)&v117;
                  *(_QWORD *)(v62 + 56) = v125;
                  *(_OWORD *)(v62 + 40) = v117;
                  *(_QWORD *)(v57 + 64) = v59;
                }
                v52 = v58 + 72;
                v55 += 72;
                v56 = v58;
              }
              while (v58 + 72 != a2);
            }
          }
          else if (!v54)
          {
            v99 = (double *)(v9 + 136);
            do
            {
              v100 = v52;
              result = *(double *)(a1 + 72);
              if (result < *(double *)a1)
              {
                v142 = *(_OWORD *)(a1 + 80);
                v150 = *(_OWORD *)(a1 + 96);
                v120 = *(_OWORD *)(a1 + 112);
                v128 = *(_QWORD *)(a1 + 128);
                v101 = *(_QWORD *)(a1 + 136);
                v102 = *(double *)a1;
                v103 = v99;
                do
                {
                  v104 = v103;
                  *(v103 - 8) = v102;
                  v105 = *((_OWORD *)v103 - 7);
                  *(_OWORD *)(v103 - 7) = *((_OWORD *)v103 - 8);
                  *(_OWORD *)(v103 - 5) = v105;
                  *(_OWORD *)(v103 - 3) = *((_OWORD *)v103 - 6);
                  *(v103 - 1) = *(v103 - 10);
                  v106 = *((_QWORD *)v103 - 9);
                  v103 -= 9;
                  *(_QWORD *)v104 = v106;
                  v102 = *(v104 - 26);
                }
                while (result < v102);
                *(v103 - 8) = result;
                *(_OWORD *)(v103 - 7) = v142;
                *(_OWORD *)(v103 - 5) = v150;
                result = *(double *)&v120;
                *((_QWORD *)v103 - 1) = v128;
                *(_OWORD *)(v103 - 3) = v120;
                *(_QWORD *)v103 = v101;
              }
              v52 = v100 + 72;
              v99 += 9;
              a1 = v100;
            }
            while (v100 + 72 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v64 = (unint64_t)(v11 - 2) >> 1;
            v65 = v64;
            do
            {
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = v9 + 72 * v67;
                if (2 * v65 + 2 < v11 && *(double *)v68 < *(double *)(v68 + 72))
                {
                  v68 += 72;
                  v67 = 2 * v65 + 2;
                }
                v69 = v9 + 72 * v65;
                v70 = *(double *)v68;
                result = *(double *)v69;
                if (*(double *)v68 >= *(double *)v69)
                {
                  v71 = v9 + 72 * v65;
                  v140 = *(_OWORD *)(v71 + 8);
                  v148 = *(_OWORD *)(v71 + 24);
                  v126 = *(_QWORD *)(v71 + 56);
                  v118 = *(_OWORD *)(v71 + 40);
                  v72 = *(_QWORD *)(v71 + 64);
                  do
                  {
                    v73 = v69;
                    v69 = v68;
                    *(double *)v73 = v70;
                    v74 = *(_OWORD *)(v68 + 8);
                    *(_OWORD *)(v73 + 24) = *(_OWORD *)(v68 + 24);
                    *(_OWORD *)(v73 + 8) = v74;
                    v75 = *(_OWORD *)(v68 + 40);
                    *(_QWORD *)(v73 + 56) = *(_QWORD *)(v68 + 56);
                    *(_OWORD *)(v73 + 40) = v75;
                    *(_QWORD *)(v73 + 64) = *(_QWORD *)(v68 + 64);
                    if (v64 < v67)
                      break;
                    v76 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = v9 + 72 * v67;
                    v77 = v76 + 2;
                    if (v77 < v11 && *(double *)v68 < *(double *)(v68 + 72))
                    {
                      v68 += 72;
                      v67 = v77;
                    }
                    v70 = *(double *)v68;
                  }
                  while (*(double *)v68 >= result);
                  *(double *)v69 = result;
                  *(_OWORD *)(v69 + 8) = v140;
                  *(_OWORD *)(v69 + 24) = v148;
                  result = *(double *)&v118;
                  *(_OWORD *)(v69 + 40) = v118;
                  *(_QWORD *)(v69 + 56) = v126;
                  *(_QWORD *)(v69 + 64) = v72;
                }
              }
              v66 = v65-- <= 0;
            }
            while (!v66);
            v78 = v10 / 0x48uLL;
            do
            {
              if (v78 >= 2)
              {
                v79 = 0;
                v80 = *(double *)v9;
                v119 = *(_OWORD *)(v9 + 8);
                v127 = *(_OWORD *)(v9 + 24);
                v109 = *(_OWORD *)(v9 + 40);
                v112 = *(_QWORD *)(v9 + 56);
                result = *(double *)(v9 + 64);
                v81 = v9;
                do
                {
                  v84 = v81;
                  v81 += 72 * v79 + 72;
                  v85 = 2 * v79;
                  v79 = (2 * v79) | 1;
                  v86 = v85 + 2;
                  if (v86 < v78 && *(double *)v81 < *(double *)(v81 + 72))
                  {
                    v81 += 72;
                    v79 = v86;
                  }
                  *(_QWORD *)v84 = *(_QWORD *)v81;
                  v82 = *(_OWORD *)(v81 + 8);
                  *(_OWORD *)(v84 + 24) = *(_OWORD *)(v81 + 24);
                  *(_OWORD *)(v84 + 8) = v82;
                  v83 = *(_OWORD *)(v81 + 40);
                  *(_QWORD *)(v84 + 56) = *(_QWORD *)(v81 + 56);
                  *(_OWORD *)(v84 + 40) = v83;
                  *(_QWORD *)(v84 + 64) = *(_QWORD *)(v81 + 64);
                }
                while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                v87 = (__int128 *)(v81 + 8);
                v88 = (__int128 *)(v81 + 40);
                if (v81 == a2 - 72)
                {
                  *(double *)v81 = v80;
                  *v87 = v119;
                  *(_OWORD *)(v81 + 24) = v127;
                  *(_QWORD *)(v81 + 56) = v112;
                  *v88 = v109;
                  *(double *)(v81 + 64) = result;
                }
                else
                {
                  *(_QWORD *)v81 = *(_QWORD *)(a2 - 72);
                  v89 = *(_OWORD *)(a2 - 48);
                  *v87 = *(_OWORD *)(a2 - 64);
                  *(_OWORD *)(v81 + 24) = v89;
                  v90 = *(_OWORD *)(a2 - 32);
                  *(_QWORD *)(v81 + 56) = *(_QWORD *)(a2 - 16);
                  *v88 = v90;
                  *(_QWORD *)(v81 + 64) = *(_QWORD *)(a2 - 8);
                  *(double *)(a2 - 72) = v80;
                  *(_OWORD *)(a2 - 64) = v119;
                  *(_OWORD *)(a2 - 48) = v127;
                  *(_QWORD *)(a2 - 16) = v112;
                  *(_OWORD *)(a2 - 32) = v109;
                  *(double *)(a2 - 8) = result;
                  v91 = v81 - v9 + 72;
                  if (v91 >= 73)
                  {
                    v92 = (v91 / 0x48uLL - 2) >> 1;
                    v93 = v9 + 72 * v92;
                    v94 = *(double *)v93;
                    result = *(double *)v81;
                    if (*(double *)v93 < *(double *)v81)
                    {
                      v141 = *v87;
                      v149 = *(_OWORD *)(v81 + 24);
                      v134 = *(_QWORD *)(v81 + 56);
                      v131 = *v88;
                      v95 = *(_QWORD *)(v81 + 64);
                      do
                      {
                        v96 = v81;
                        v81 = v93;
                        *(double *)v96 = v94;
                        v97 = *(_OWORD *)(v93 + 8);
                        *(_OWORD *)(v96 + 24) = *(_OWORD *)(v93 + 24);
                        *(_OWORD *)(v96 + 8) = v97;
                        v98 = *(_OWORD *)(v93 + 40);
                        *(_QWORD *)(v96 + 56) = *(_QWORD *)(v93 + 56);
                        *(_OWORD *)(v96 + 40) = v98;
                        *(_QWORD *)(v96 + 64) = *(_QWORD *)(v93 + 64);
                        if (!v92)
                          break;
                        v92 = (v92 - 1) >> 1;
                        v93 = v9 + 72 * v92;
                        v94 = *(double *)v93;
                      }
                      while (*(double *)v93 < result);
                      *(double *)v81 = result;
                      *(_OWORD *)(v81 + 8) = v141;
                      *(_OWORD *)(v81 + 24) = v149;
                      result = *(double *)&v131;
                      *(_OWORD *)(v81 + 40) = v131;
                      *(_QWORD *)(v81 + 56) = v134;
                      *(_QWORD *)(v81 + 64) = v95;
                    }
                  }
                }
              }
              a2 -= 72;
              v66 = (unint64_t)v78-- > 2;
            }
            while (v66);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_QWORD *)(v9 + 72 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x2401)
        {
          sub_20EB7FEEC((uint64_t)v13, a1, a2 - 72);
          --a3;
          v19 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_20EB7FEEC(a1, (uint64_t)v13, a2 - 72);
          v14 = a1 + 72 * v12;
          sub_20EB7FEEC(a1 + 72, v14 - 72, a2 - 144);
          sub_20EB7FEEC(a1 + 144, a1 + 72 + 72 * v12, a2 - 216);
          sub_20EB7FEEC(v14 - 72, (uint64_t)v13, a1 + 72 + 72 * v12);
          v15 = *(double *)a1;
          v135 = *(_OWORD *)(a1 + 8);
          v143 = *(_OWORD *)(a1 + 24);
          v121 = *(_QWORD *)(a1 + 56);
          v113 = *(_OWORD *)(a1 + 40);
          v16 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)a1 = *v13;
          v17 = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v14 + 8);
          *(_OWORD *)(a1 + 24) = v17;
          v18 = *(_OWORD *)(v14 + 40);
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v14 + 56);
          *(_OWORD *)(a1 + 40) = v18;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(v14 + 64);
          *(double *)v13 = v15;
          *(_OWORD *)(v14 + 8) = v135;
          *(_OWORD *)(v14 + 24) = v143;
          *(_QWORD *)(v14 + 56) = v121;
          *(_OWORD *)(v14 + 40) = v113;
          *(_QWORD *)(v14 + 64) = v16;
          --a3;
          v19 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(double *)(a1 - 72) >= v19)
        {
          v115 = *(_OWORD *)(a1 + 8);
          v123 = *(_OWORD *)(a1 + 24);
          v108 = *(_OWORD *)(a1 + 40);
          v111 = *(_QWORD *)(a1 + 56);
          if (v19 >= *(double *)(a2 - 72))
          {
            v37 = a1 + 72;
            do
            {
              v9 = v37;
              if (v37 >= a2)
                break;
              v37 += 72;
            }
            while (v19 >= *(double *)v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v36 = *(double *)(v9 + 72);
              v9 += 72;
            }
            while (v19 >= v36);
          }
          v38 = a2;
          if (v9 < a2)
          {
            v38 = a2;
            do
            {
              v39 = *(double *)(v38 - 72);
              v38 -= 72;
            }
            while (v19 < v39);
          }
          v40 = *(_QWORD *)(a1 + 64);
          if (v9 < v38)
          {
            v41 = *(double *)v9;
            do
            {
              v137 = *(_OWORD *)(v9 + 8);
              v145 = *(_OWORD *)(v9 + 24);
              v130 = *(_OWORD *)(v9 + 40);
              v133 = *(_QWORD *)(v9 + 56);
              v42 = *(_QWORD *)(v9 + 64);
              *(_QWORD *)v9 = *(_QWORD *)v38;
              v43 = *(_OWORD *)(v38 + 8);
              *(_OWORD *)(v9 + 24) = *(_OWORD *)(v38 + 24);
              *(_OWORD *)(v9 + 8) = v43;
              v44 = *(_OWORD *)(v38 + 40);
              *(_QWORD *)(v9 + 56) = *(_QWORD *)(v38 + 56);
              *(_OWORD *)(v9 + 40) = v44;
              *(_QWORD *)(v9 + 64) = *(_QWORD *)(v38 + 64);
              *(double *)v38 = v41;
              *(_OWORD *)(v38 + 8) = v137;
              *(_OWORD *)(v38 + 24) = v145;
              *(_OWORD *)(v38 + 40) = v130;
              *(_QWORD *)(v38 + 56) = v133;
              *(_QWORD *)(v38 + 64) = v42;
              do
              {
                v45 = *(double *)(v9 + 72);
                v9 += 72;
                v41 = v45;
              }
              while (v19 >= v45);
              do
              {
                v46 = *(double *)(v38 - 72);
                v38 -= 72;
              }
              while (v19 < v46);
            }
            while (v9 < v38);
          }
          if (v9 - 72 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 72);
            v47 = *(_OWORD *)(v9 - 48);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 64);
            *(_OWORD *)(a1 + 24) = v47;
            v48 = *(_OWORD *)(v9 - 32);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 - 16);
            *(_OWORD *)(a1 + 40) = v48;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 - 8);
          }
          a4 = 0;
          *(double *)(v9 - 72) = v19;
          *(_OWORD *)(v9 - 64) = v115;
          *(_OWORD *)(v9 - 48) = v123;
          result = *(double *)&v108;
          *(_QWORD *)(v9 - 16) = v111;
          *(_OWORD *)(v9 - 32) = v108;
          *(_QWORD *)(v9 - 8) = v40;
          continue;
        }
LABEL_10:
        v20 = 0;
        v114 = *(_OWORD *)(a1 + 8);
        v122 = *(_OWORD *)(a1 + 24);
        v107 = *(_OWORD *)(a1 + 40);
        v110 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(a1 + 64);
        do
        {
          v22 = *(double *)(a1 + v20 + 72);
          v20 += 72;
        }
        while (v22 < v19);
        v23 = a1 + v20;
        v24 = a2;
        if (v20 == 72)
        {
          v24 = a2;
          do
          {
            if (v23 >= v24)
              break;
            v26 = *(double *)(v24 - 72);
            v24 -= 72;
          }
          while (v26 >= v19);
        }
        else
        {
          do
          {
            v25 = *(double *)(v24 - 72);
            v24 -= 72;
          }
          while (v25 >= v19);
        }
        v9 = a1 + v20;
        if (v23 < v24)
        {
          v27 = v24;
          do
          {
            v136 = *(_OWORD *)(v9 + 8);
            v144 = *(_OWORD *)(v9 + 24);
            v129 = *(_OWORD *)(v9 + 40);
            v132 = *(_QWORD *)(v9 + 56);
            v28 = *(_QWORD *)(v9 + 64);
            *(_QWORD *)v9 = *(_QWORD *)v27;
            v29 = *(_OWORD *)(v27 + 8);
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v27 + 24);
            *(_OWORD *)(v9 + 8) = v29;
            v30 = *(_OWORD *)(v27 + 40);
            *(_QWORD *)(v9 + 56) = *(_QWORD *)(v27 + 56);
            *(_OWORD *)(v9 + 40) = v30;
            *(_QWORD *)(v9 + 64) = *(_QWORD *)(v27 + 64);
            *(double *)v27 = v22;
            *(_OWORD *)(v27 + 8) = v136;
            *(_OWORD *)(v27 + 24) = v144;
            *(_OWORD *)(v27 + 40) = v129;
            *(_QWORD *)(v27 + 56) = v132;
            *(_QWORD *)(v27 + 64) = v28;
            do
            {
              v31 = *(double *)(v9 + 72);
              v9 += 72;
              v22 = v31;
            }
            while (v31 < v19);
            do
            {
              v32 = *(double *)(v27 - 72);
              v27 -= 72;
            }
            while (v32 >= v19);
          }
          while (v9 < v27);
        }
        if (v9 - 72 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v9 - 72);
          v33 = *(_OWORD *)(v9 - 48);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 64);
          *(_OWORD *)(a1 + 24) = v33;
          v34 = *(_OWORD *)(v9 - 32);
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 - 16);
          *(_OWORD *)(a1 + 40) = v34;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 - 8);
        }
        *(double *)(v9 - 72) = v19;
        *(_OWORD *)(v9 - 64) = v114;
        *(_OWORD *)(v9 - 48) = v122;
        *(_QWORD *)(v9 - 16) = v110;
        *(_OWORD *)(v9 - 32) = v107;
        *(_QWORD *)(v9 - 8) = v21;
        if (v23 < v24)
        {
LABEL_29:
          sub_20EB7F384(a1, v9 - 72, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_20EB80168(a1, v9 - 72);
        if (!sub_20EB80168(v9, a2))
        {
          if (v35)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 72;
        if (!v35)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
        {
          v145 = *v12;
          *v12 = a2[-1];
          a2[-1] = v145;
        }
        return;
      case 3:
        v67 = v12 + 1;
        v68 = v12[1].n128_i32[2];
        v69 = a2[-1].n128_i32[2];
        if (v68 <= (signed __int32)v12->n128_u32[2])
        {
          if (v69 > v68)
          {
            v119 = *v67;
            *v67 = *v9;
            *v9 = v119;
            if ((signed __int32)v12[1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
            {
              v149 = *v12;
              *v12 = *v67;
              *v67 = v149;
            }
          }
        }
        else
        {
          if (v69 > v68)
            goto LABEL_110;
          v146 = *v12;
          *v12 = *v67;
          *v67 = v146;
          if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
          {
            v70 = *v67;
            *v67 = *v9;
            *v9 = v70;
          }
        }
        return;
      case 4:
        sub_20EDA6B74(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v9 = v12 + 1;
        v71 = v12 + 2;
        v72 = v12 + 3;
        sub_20EDA6B74(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12[3].n128_u32[2])
        {
          v73 = *v72;
          *v72 = a2[-1];
          a2[-1] = v73;
          if ((signed __int32)v12[3].n128_u32[2] > (signed __int32)v12[2].n128_u32[2])
          {
            v74 = *v71;
            *v71 = *v72;
            *v72 = v74;
            if ((signed __int32)v12[2].n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
            {
              v75 = *v9;
              *v9 = *v71;
              *v71 = v75;
              if ((signed __int32)v12[1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
              {
LABEL_110:
                v147 = *v12;
                *v12 = *v9;
                *v9 = v147;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v88 = (unint64_t)(v14 - 2) >> 1;
              v89 = v88;
              do
              {
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v12[v91];
                  if (2 * v89 + 2 < v14)
                  {
                    v93 = v92->n128_i32[2];
                    v94 = v92[1].n128_i32[2];
                    v92 += v93 > v94;
                    if (v93 > v94)
                      v91 = 2 * v89 + 2;
                  }
                  v95 = &v12[v89];
                  v96 = v95->n128_i32[2];
                  if ((signed __int32)v92->n128_u32[2] <= v96)
                  {
                    v97 = v95->n128_u64[0];
                    v98 = v95->n128_u32[3];
                    do
                    {
                      v99 = v95;
                      v95 = v92;
                      *v99 = *v92;
                      if (v88 < v91)
                        break;
                      v100 = (2 * v91) | 1;
                      v92 = &v12[v100];
                      v101 = 2 * v91 + 2;
                      if (v101 < v14)
                      {
                        v102 = v92->n128_i32[2];
                        v103 = v92[1].n128_i32[2];
                        v92 += v102 > v103;
                        if (v102 > v103)
                          v100 = v101;
                      }
                      v91 = v100;
                    }
                    while ((signed __int32)v92->n128_u32[2] <= v96);
                    v95->n128_u64[0] = v97;
                    v95->n128_u32[2] = v96;
                    v95->n128_u32[3] = v98;
                  }
                }
                v90 = v89-- <= 0;
              }
              while (!v90);
              v104 = (unint64_t)v13 >> 4;
              do
              {
                v105 = 0;
                v148 = *v12;
                v106 = v12;
                do
                {
                  v107 = (uint64_t)&v106[v105 + 1];
                  v108 = (2 * v105) | 1;
                  v109 = 2 * v105 + 2;
                  if (v109 < v104)
                  {
                    v110 = *(_DWORD *)(v107 + 8);
                    v111 = *(_DWORD *)(v107 + 24);
                    v107 += 16 * (v110 > v111);
                    if (v110 > v111)
                      v108 = v109;
                  }
                  *v106 = *(_OWORD *)v107;
                  v106 = (_OWORD *)v107;
                  v105 = v108;
                }
                while (v108 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                if ((__n128 *)v107 == --a2)
                {
                  *(__n128 *)v107 = v148;
                }
                else
                {
                  *(__n128 *)v107 = *a2;
                  *a2 = v148;
                  v112 = v107 - (_QWORD)v12 + 16;
                  if (v112 >= 17)
                  {
                    v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
                    v114 = &v12[v113];
                    v115 = *(_DWORD *)(v107 + 8);
                    if ((signed __int32)v114->n128_u32[2] > v115)
                    {
                      v116 = *(_QWORD *)v107;
                      v117 = *(_DWORD *)(v107 + 12);
                      do
                      {
                        v118 = (_OWORD *)v107;
                        v107 = (uint64_t)v114;
                        *v118 = *v114;
                        if (!v113)
                          break;
                        v113 = (v113 - 1) >> 1;
                        v114 = &v12[v113];
                      }
                      while ((signed __int32)v114->n128_u32[2] > v115);
                      *(_QWORD *)v107 = v116;
                      *(_DWORD *)(v107 + 8) = v115;
                      *(_DWORD *)(v107 + 12) = v117;
                    }
                  }
                }
                v90 = v104-- <= 2;
              }
              while (!v90);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_i32[2];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_i32[2];
            if (v19 <= (signed __int32)v16->n128_u32[2])
            {
              if (v17 > v19)
              {
                v130 = *v12;
                *v12 = *v9;
                a5 = v130;
                *v9 = v130;
                if ((signed __int32)v12->n128_u32[2] > (signed __int32)v16->n128_u32[2])
                {
                  v131 = *v16;
                  *v16 = *v12;
                  a5 = v131;
                  *v12 = v131;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v19)
              {
                v134 = *v16;
                *v16 = *v12;
                a5 = v134;
                *v12 = v134;
                if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)v12->n128_u32[2])
                  goto LABEL_31;
                v127 = *v12;
                *v12 = *v9;
              }
              else
              {
                v127 = *v16;
                *v16 = *v9;
              }
              a5 = v127;
              *v9 = v127;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v27 = v12->n128_i32[2];
            if ((signed __int32)v12[-1].n128_u32[2] > v27)
              goto LABEL_56;
            if (v27 <= (signed __int32)a2[-1].n128_u32[2])
            {
              v57 = v12 + 1;
              do
              {
                v12 = v57;
                if (v57 >= a2)
                  break;
                v58 = v57->n128_i32[2];
                ++v57;
              }
              while (v27 <= v58);
            }
            else
            {
              v55 = v12;
              do
              {
                v12 = v55 + 1;
                v56 = v55[1].n128_i32[2];
                ++v55;
              }
              while (v27 <= v56);
            }
            v59 = a2;
            if (v12 < a2)
            {
              v60 = a2;
              do
              {
                v59 = v60 - 1;
                v61 = v60[-1].n128_i32[2];
                --v60;
              }
              while (v27 > v61);
            }
            v62 = a1->n128_u64[0];
            v63 = a1->n128_u32[3];
            while (v12 < v59)
            {
              v144 = *v12;
              *v12 = *v59;
              a5 = v144;
              *v59 = v144;
              do
              {
                v64 = v12[1].n128_i32[2];
                ++v12;
              }
              while (v27 <= v64);
              do
              {
                v65 = v59[-1].n128_i32[2];
                --v59;
              }
              while (v27 > v65);
            }
            v66 = v12 - 1;
            if (&v12[-1] != a1)
            {
              a5 = *v66;
              *a1 = *v66;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u32[2] = v27;
            v12[-1].n128_u32[3] = v63;
            continue;
          }
          v18 = v16->n128_i32[2];
          if (v18 <= (signed __int32)v12->n128_u32[2])
          {
            if (v17 > v18)
            {
              v128 = *v16;
              *v16 = *v9;
              *v9 = v128;
              if ((signed __int32)v16->n128_u32[2] > (signed __int32)v12->n128_u32[2])
              {
                v129 = *v12;
                *v12 = *v16;
                *v16 = v129;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v132 = *v12;
              *v12 = *v16;
              *v16 = v132;
              if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)v16->n128_u32[2])
                goto LABEL_22;
              v126 = *v16;
              *v16 = *v9;
            }
            else
            {
              v126 = *v12;
              *v12 = *v9;
            }
            *v9 = v126;
          }
LABEL_22:
          v20 = v12 + 1;
          v21 = &v12[v15];
          v22 = v21 - 1;
          v23 = v21[-1].n128_i32[2];
          v24 = a2[-2].n128_i32[2];
          if (v23 <= (signed __int32)v12[1].n128_u32[2])
          {
            if (v24 > v23)
            {
              v133 = *v22;
              *v22 = *v10;
              *v10 = v133;
              if ((signed __int32)v22->n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
              {
                v26 = *v20;
                *v20 = *v22;
                *v22 = v26;
              }
            }
          }
          else
          {
            if (v24 <= v23)
            {
              v28 = *v20;
              *v20 = *v22;
              *v22 = v28;
              if ((signed __int32)a2[-2].n128_u32[2] <= (signed __int32)v22->n128_u32[2])
                goto LABEL_36;
              v135 = *v22;
              *v22 = *v10;
              v25 = v135;
            }
            else
            {
              v25 = *v20;
              *v20 = *v10;
            }
            *v10 = v25;
          }
LABEL_36:
          v29 = v12 + 2;
          v30 = &v12[v15];
          v31 = v30 + 1;
          v32 = v30[1].n128_i32[2];
          v33 = a2[-3].n128_i32[2];
          if (v32 <= (signed __int32)v12[2].n128_u32[2])
          {
            if (v33 > v32)
            {
              v136 = *v31;
              *v31 = *v11;
              *v11 = v136;
              if ((signed __int32)v31->n128_u32[2] > (signed __int32)v12[2].n128_u32[2])
              {
                v35 = *v29;
                *v29 = *v31;
                *v31 = v35;
              }
            }
          }
          else
          {
            if (v33 <= v32)
            {
              v36 = *v29;
              *v29 = *v31;
              *v31 = v36;
              if ((signed __int32)a2[-3].n128_u32[2] <= (signed __int32)v31->n128_u32[2])
                goto LABEL_45;
              v137 = *v31;
              *v31 = *v11;
              v34 = v137;
            }
            else
            {
              v34 = *v29;
              *v29 = *v11;
            }
            *v11 = v34;
          }
LABEL_45:
          v37 = v16->n128_i32[2];
          v38 = v31->n128_i32[2];
          if (v37 <= (signed __int32)v22->n128_u32[2])
          {
            if (v38 > v37)
            {
              v139 = *v16;
              *v16 = *v31;
              *v31 = v139;
              if ((signed __int32)v16->n128_u32[2] > (signed __int32)v22->n128_u32[2])
              {
                v140 = *v22;
                *v22 = *v16;
                *v16 = v140;
              }
            }
          }
          else
          {
            if (v38 <= v37)
            {
              v141 = *v22;
              *v22 = *v16;
              *v16 = v141;
              if ((signed __int32)v31->n128_u32[2] <= (signed __int32)v16->n128_u32[2])
                goto LABEL_54;
              v138 = *v16;
              *v16 = *v31;
            }
            else
            {
              v138 = *v22;
              *v22 = *v31;
            }
            *v31 = v138;
          }
LABEL_54:
          v142 = *v12;
          *v12 = *v16;
          a5 = v142;
          *v16 = v142;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v27 = v12->n128_i32[2];
LABEL_56:
          v39 = 0;
          v40 = v12->n128_u64[0];
          v41 = v12->n128_u32[3];
          do
            v42 = v12[++v39].n128_i32[2];
          while (v42 > v27);
          v43 = &v12[v39];
          v44 = a2;
          if (v39 == 1)
          {
            v47 = a2;
            while (v43 < v47)
            {
              v45 = v47 - 1;
              v48 = v47[-1].n128_i32[2];
              --v47;
              if (v48 > v27)
                goto LABEL_64;
            }
            v45 = v47;
            v12 = v43;
          }
          else
          {
            do
            {
              v45 = v44 - 1;
              v46 = v44[-1].n128_i32[2];
              --v44;
            }
            while (v46 <= v27);
LABEL_64:
            v12 = v43;
            if (v43 < v45)
            {
              v49 = v45;
              do
              {
                v143 = *v12;
                *v12 = *v49;
                a5 = v143;
                *v49 = v143;
                do
                {
                  v50 = v12[1].n128_i32[2];
                  ++v12;
                }
                while (v50 > v27);
                do
                {
                  v51 = v49[-1].n128_i32[2];
                  --v49;
                }
                while (v51 <= v27);
              }
              while (v12 < v49);
            }
          }
          v52 = v12 - 1;
          if (&v12[-1] != a1)
          {
            a5 = *v52;
            *a1 = *v52;
          }
          v12[-1].n128_u64[0] = v40;
          v12[-1].n128_u32[2] = v27;
          v12[-1].n128_u32[3] = v41;
          if (v43 < v45)
            goto LABEL_75;
          v53 = sub_20EDA67D8(a1, v12 - 1, a5);
          if (!sub_20EDA67D8(v12, a2, v54))
          {
            if (v53)
              continue;
LABEL_75:
            sub_20EDA5C7C(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v53)
            return;
          goto LABEL_1;
        }
        v76 = v12 + 1;
        v78 = v12 == a2 || v76 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v78)
          {
            v79 = 0;
            v80 = v12;
            do
            {
              v82 = v76;
              v83 = v80[1].n128_i32[2];
              if (v83 > (signed __int32)v80->n128_u32[2])
              {
                v84 = v82->n128_u64[0];
                v85 = v80[1].n128_u32[3];
                v86 = v79;
                do
                {
                  *(__n128 *)((char *)v12 + v86 + 16) = *(__n128 *)((char *)v12 + v86);
                  if (!v86)
                  {
                    v81 = (uint64_t)v12;
                    goto LABEL_121;
                  }
                  v87 = *(__int32 *)((char *)&v12->n128_i32[-2] + v86);
                  v86 -= 16;
                }
                while (v83 > v87);
                v81 = (uint64_t)&v12[1] + v86;
LABEL_121:
                *(_QWORD *)v81 = v84;
                *(_DWORD *)(v81 + 8) = v83;
                *(_DWORD *)(v81 + 12) = v85;
              }
              v76 = v82 + 1;
              v79 += 16;
              v80 = v82;
            }
            while (&v82[1] != a2);
          }
        }
        else if (!v78)
        {
          do
          {
            v120 = v76;
            v121 = a1[1].n128_i32[2];
            if (v121 > (signed __int32)a1->n128_u32[2])
            {
              v122 = v76->n128_u64[0];
              v123 = a1[1].n128_u32[3];
              v124 = v120;
              do
              {
                *v124 = v124[-1];
                v125 = v124[-2].n128_i32[2];
                --v124;
              }
              while (v121 > v125);
              v124->n128_u64[0] = v122;
              v124->n128_u32[2] = v121;
              v124->n128_u32[3] = v123;
            }
            v76 = v120 + 1;
            a1 = v120;
          }
          while (&v120[1] != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
        {
          v145 = *v12;
          *v12 = a2[-1];
          a2[-1] = v145;
        }
        return;
      case 3:
        v67 = v12 + 1;
        v68 = v12[1].n128_i32[2];
        v69 = a2[-1].n128_i32[2];
        if (v68 <= (signed __int32)v12->n128_u32[2])
        {
          if (v69 > v68)
          {
            v119 = *v67;
            *v67 = *v9;
            *v9 = v119;
            if ((signed __int32)v12[1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
            {
              v149 = *v12;
              *v12 = *v67;
              *v67 = v149;
            }
          }
        }
        else
        {
          if (v69 > v68)
            goto LABEL_110;
          v146 = *v12;
          *v12 = *v67;
          *v67 = v146;
          if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
          {
            v70 = *v67;
            *v67 = *v9;
            *v9 = v70;
          }
        }
        return;
      case 4:
        sub_20EDA6B74(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v9 = v12 + 1;
        v71 = v12 + 2;
        v72 = v12 + 3;
        sub_20EDA6B74(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)v12[3].n128_u32[2])
        {
          v73 = *v72;
          *v72 = a2[-1];
          a2[-1] = v73;
          if ((signed __int32)v12[3].n128_u32[2] > (signed __int32)v12[2].n128_u32[2])
          {
            v74 = *v71;
            *v71 = *v72;
            *v72 = v74;
            if ((signed __int32)v12[2].n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
            {
              v75 = *v9;
              *v9 = *v71;
              *v71 = v75;
              if ((signed __int32)v12[1].n128_u32[2] > (signed __int32)v12->n128_u32[2])
              {
LABEL_110:
                v147 = *v12;
                *v12 = *v9;
                *v9 = v147;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v88 = (unint64_t)(v14 - 2) >> 1;
              v89 = v88;
              do
              {
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v12[v91];
                  if (2 * v89 + 2 < v14)
                  {
                    v93 = v92->n128_i32[2];
                    v94 = v92[1].n128_i32[2];
                    v92 += v93 > v94;
                    if (v93 > v94)
                      v91 = 2 * v89 + 2;
                  }
                  v95 = &v12[v89];
                  v96 = v95->n128_i32[2];
                  if ((signed __int32)v92->n128_u32[2] <= v96)
                  {
                    v97 = v95->n128_u64[0];
                    v98 = v95->n128_u32[3];
                    do
                    {
                      v99 = v95;
                      v95 = v92;
                      *v99 = *v92;
                      if (v88 < v91)
                        break;
                      v100 = (2 * v91) | 1;
                      v92 = &v12[v100];
                      v101 = 2 * v91 + 2;
                      if (v101 < v14)
                      {
                        v102 = v92->n128_i32[2];
                        v103 = v92[1].n128_i32[2];
                        v92 += v102 > v103;
                        if (v102 > v103)
                          v100 = v101;
                      }
                      v91 = v100;
                    }
                    while ((signed __int32)v92->n128_u32[2] <= v96);
                    v95->n128_u64[0] = v97;
                    v95->n128_u32[2] = v96;
                    v95->n128_u32[3] = v98;
                  }
                }
                v90 = v89-- <= 0;
              }
              while (!v90);
              v104 = (unint64_t)v13 >> 4;
              do
              {
                v105 = 0;
                v148 = *v12;
                v106 = v12;
                do
                {
                  v107 = (uint64_t)&v106[v105 + 1];
                  v108 = (2 * v105) | 1;
                  v109 = 2 * v105 + 2;
                  if (v109 < v104)
                  {
                    v110 = *(_DWORD *)(v107 + 8);
                    v111 = *(_DWORD *)(v107 + 24);
                    v107 += 16 * (v110 > v111);
                    if (v110 > v111)
                      v108 = v109;
                  }
                  *v106 = *(_OWORD *)v107;
                  v106 = (_OWORD *)v107;
                  v105 = v108;
                }
                while (v108 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                if ((__n128 *)v107 == --a2)
                {
                  *(__n128 *)v107 = v148;
                }
                else
                {
                  *(__n128 *)v107 = *a2;
                  *a2 = v148;
                  v112 = v107 - (_QWORD)v12 + 16;
                  if (v112 >= 17)
                  {
                    v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
                    v114 = &v12[v113];
                    v115 = *(_DWORD *)(v107 + 8);
                    if ((signed __int32)v114->n128_u32[2] > v115)
                    {
                      v116 = *(_QWORD *)v107;
                      v117 = *(_DWORD *)(v107 + 12);
                      do
                      {
                        v118 = (_OWORD *)v107;
                        v107 = (uint64_t)v114;
                        *v118 = *v114;
                        if (!v113)
                          break;
                        v113 = (v113 - 1) >> 1;
                        v114 = &v12[v113];
                      }
                      while ((signed __int32)v114->n128_u32[2] > v115);
                      *(_QWORD *)v107 = v116;
                      *(_DWORD *)(v107 + 8) = v115;
                      *(_DWORD *)(v107 + 12) = v117;
                    }
                  }
                }
                v90 = v104-- <= 2;
              }
              while (!v90);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_i32[2];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_i32[2];
            if (v19 <= (signed __int32)v16->n128_u32[2])
            {
              if (v17 > v19)
              {
                v130 = *v12;
                *v12 = *v9;
                a5 = v130;
                *v9 = v130;
                if ((signed __int32)v12->n128_u32[2] > (signed __int32)v16->n128_u32[2])
                {
                  v131 = *v16;
                  *v16 = *v12;
                  a5 = v131;
                  *v12 = v131;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v19)
              {
                v134 = *v16;
                *v16 = *v12;
                a5 = v134;
                *v12 = v134;
                if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)v12->n128_u32[2])
                  goto LABEL_31;
                v127 = *v12;
                *v12 = *v9;
              }
              else
              {
                v127 = *v16;
                *v16 = *v9;
              }
              a5 = v127;
              *v9 = v127;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v27 = v12->n128_i32[2];
            if ((signed __int32)v12[-1].n128_u32[2] > v27)
              goto LABEL_56;
            if (v27 <= (signed __int32)a2[-1].n128_u32[2])
            {
              v57 = v12 + 1;
              do
              {
                v12 = v57;
                if (v57 >= a2)
                  break;
                v58 = v57->n128_i32[2];
                ++v57;
              }
              while (v27 <= v58);
            }
            else
            {
              v55 = v12;
              do
              {
                v12 = v55 + 1;
                v56 = v55[1].n128_i32[2];
                ++v55;
              }
              while (v27 <= v56);
            }
            v59 = a2;
            if (v12 < a2)
            {
              v60 = a2;
              do
              {
                v59 = v60 - 1;
                v61 = v60[-1].n128_i32[2];
                --v60;
              }
              while (v27 > v61);
            }
            v62 = a1->n128_u64[0];
            v63 = a1->n128_u32[3];
            while (v12 < v59)
            {
              v144 = *v12;
              *v12 = *v59;
              a5 = v144;
              *v59 = v144;
              do
              {
                v64 = v12[1].n128_i32[2];
                ++v12;
              }
              while (v27 <= v64);
              do
              {
                v65 = v59[-1].n128_i32[2];
                --v59;
              }
              while (v27 > v65);
            }
            v66 = v12 - 1;
            if (&v12[-1] != a1)
            {
              a5 = *v66;
              *a1 = *v66;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u32[2] = v27;
            v12[-1].n128_u32[3] = v63;
            continue;
          }
          v18 = v16->n128_i32[2];
          if (v18 <= (signed __int32)v12->n128_u32[2])
          {
            if (v17 > v18)
            {
              v128 = *v16;
              *v16 = *v9;
              *v9 = v128;
              if ((signed __int32)v16->n128_u32[2] > (signed __int32)v12->n128_u32[2])
              {
                v129 = *v12;
                *v12 = *v16;
                *v16 = v129;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v132 = *v12;
              *v12 = *v16;
              *v16 = v132;
              if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)v16->n128_u32[2])
                goto LABEL_22;
              v126 = *v16;
              *v16 = *v9;
            }
            else
            {
              v126 = *v12;
              *v12 = *v9;
            }
            *v9 = v126;
          }
LABEL_22:
          v20 = v12 + 1;
          v21 = &v12[v15];
          v22 = v21 - 1;
          v23 = v21[-1].n128_i32[2];
          v24 = a2[-2].n128_i32[2];
          if (v23 <= (signed __int32)v12[1].n128_u32[2])
          {
            if (v24 > v23)
            {
              v133 = *v22;
              *v22 = *v10;
              *v10 = v133;
              if ((signed __int32)v22->n128_u32[2] > (signed __int32)v12[1].n128_u32[2])
              {
                v26 = *v20;
                *v20 = *v22;
                *v22 = v26;
              }
            }
          }
          else
          {
            if (v24 <= v23)
            {
              v28 = *v20;
              *v20 = *v22;
              *v22 = v28;
              if ((signed __int32)a2[-2].n128_u32[2] <= (signed __int32)v22->n128_u32[2])
                goto LABEL_36;
              v135 = *v22;
              *v22 = *v10;
              v25 = v135;
            }
            else
            {
              v25 = *v20;
              *v20 = *v10;
            }
            *v10 = v25;
          }
LABEL_36:
          v29 = v12 + 2;
          v30 = &v12[v15];
          v31 = v30 + 1;
          v32 = v30[1].n128_i32[2];
          v33 = a2[-3].n128_i32[2];
          if (v32 <= (signed __int32)v12[2].n128_u32[2])
          {
            if (v33 > v32)
            {
              v136 = *v31;
              *v31 = *v11;
              *v11 = v136;
              if ((signed __int32)v31->n128_u32[2] > (signed __int32)v12[2].n128_u32[2])
              {
                v35 = *v29;
                *v29 = *v31;
                *v31 = v35;
              }
            }
          }
          else
          {
            if (v33 <= v32)
            {
              v36 = *v29;
              *v29 = *v31;
              *v31 = v36;
              if ((signed __int32)a2[-3].n128_u32[2] <= (signed __int32)v31->n128_u32[2])
                goto LABEL_45;
              v137 = *v31;
              *v31 = *v11;
              v34 = v137;
            }
            else
            {
              v34 = *v29;
              *v29 = *v11;
            }
            *v11 = v34;
          }
LABEL_45:
          v37 = v16->n128_i32[2];
          v38 = v31->n128_i32[2];
          if (v37 <= (signed __int32)v22->n128_u32[2])
          {
            if (v38 > v37)
            {
              v139 = *v16;
              *v16 = *v31;
              *v31 = v139;
              if ((signed __int32)v16->n128_u32[2] > (signed __int32)v22->n128_u32[2])
              {
                v140 = *v22;
                *v22 = *v16;
                *v16 = v140;
              }
            }
          }
          else
          {
            if (v38 <= v37)
            {
              v141 = *v22;
              *v22 = *v16;
              *v16 = v141;
              if ((signed __int32)v31->n128_u32[2] <= (signed __int32)v16->n128_u32[2])
                goto LABEL_54;
              v138 = *v16;
              *v16 = *v31;
            }
            else
            {
              v138 = *v22;
              *v22 = *v31;
            }
            *v31 = v138;
          }
LABEL_54:
          v142 = *v12;
          *v12 = *v16;
          a5 = v142;
          *v16 = v142;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v27 = v12->n128_i32[2];
LABEL_56:
          v39 = 0;
          v40 = v12->n128_u64[0];
          v41 = v12->n128_u32[3];
          do
            v42 = v12[++v39].n128_i32[2];
          while (v42 > v27);
          v43 = &v12[v39];
          v44 = a2;
          if (v39 == 1)
          {
            v47 = a2;
            while (v43 < v47)
            {
              v45 = v47 - 1;
              v48 = v47[-1].n128_i32[2];
              --v47;
              if (v48 > v27)
                goto LABEL_64;
            }
            v45 = v47;
            v12 = v43;
          }
          else
          {
            do
            {
              v45 = v44 - 1;
              v46 = v44[-1].n128_i32[2];
              --v44;
            }
            while (v46 <= v27);
LABEL_64:
            v12 = v43;
            if (v43 < v45)
            {
              v49 = v45;
              do
              {
                v143 = *v12;
                *v12 = *v49;
                a5 = v143;
                *v49 = v143;
                do
                {
                  v50 = v12[1].n128_i32[2];
                  ++v12;
                }
                while (v50 > v27);
                do
                {
                  v51 = v49[-1].n128_i32[2];
                  --v49;
                }
                while (v51 <= v27);
              }
              while (v12 < v49);
            }
          }
          v52 = v12 - 1;
          if (&v12[-1] != a1)
          {
            a5 = *v52;
            *a1 = *v52;
          }
          v12[-1].n128_u64[0] = v40;
          v12[-1].n128_u32[2] = v27;
          v12[-1].n128_u32[3] = v41;
          if (v43 < v45)
            goto LABEL_75;
          v53 = sub_20EDA7944(a1, v12 - 1, a5);
          if (!sub_20EDA7944(v12, a2, v54))
          {
            if (v53)
              continue;
LABEL_75:
            sub_20EDA6DE8(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v53)
            return;
          goto LABEL_1;
        }
        v76 = v12 + 1;
        v78 = v12 == a2 || v76 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v78)
          {
            v79 = 0;
            v80 = v12;
            do
            {
              v82 = v76;
              v83 = v80[1].n128_i32[2];
              if (v83 > (signed __int32)v80->n128_u32[2])
              {
                v84 = v82->n128_u64[0];
                v85 = v80[1].n128_u32[3];
                v86 = v79;
                do
                {
                  *(__n128 *)((char *)v12 + v86 + 16) = *(__n128 *)((char *)v12 + v86);
                  if (!v86)
                  {
                    v81 = (uint64_t)v12;
                    goto LABEL_121;
                  }
                  v87 = *(__int32 *)((char *)&v12->n128_i32[-2] + v86);
                  v86 -= 16;
                }
                while (v83 > v87);
                v81 = (uint64_t)&v12[1] + v86;
LABEL_121:
                *(_QWORD *)v81 = v84;
                *(_DWORD *)(v81 + 8) = v83;
                *(_DWORD *)(v81 + 12) = v85;
              }
              v76 = v82 + 1;
              v79 += 16;
              v80 = v82;
            }
            while (&v82[1] != a2);
          }
        }
        else if (!v78)
        {
          do
          {
            v120 = v76;
            v121 = a1[1].n128_i32[2];
            if (v121 > (signed __int32)a1->n128_u32[2])
            {
              v122 = v76->n128_u64[0];
              v123 = a1[1].n128_u32[3];
              v124 = v120;
              do
              {
                *v124 = v124[-1];
                v125 = v124[-2].n128_i32[2];
                --v124;
              }
              while (v121 > v125);
              v124->n128_u64[0] = v122;
              v124->n128_u32[2] = v121;
              v124->n128_u32[3] = v123;
            }
            v76 = v120 + 1;
            a1 = v120;
          }
          while (&v120[1] != a2);
        }
        return;
    }
  }
}

  v11 = a2 - 4;
  v136 = a2 - 8;
  v12 = a2 - 12;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (uint64_t)a2 - v13;
    v15 = (uint64_t)((uint64_t)a2 - v13) >> 5;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result.n128_f64[0] = *(a2 - 1);
        if (result.n128_f64[0] < *(double *)(v13 + 24))
        {
          v160 = *(__n128 *)v13;
          v193 = *(_OWORD *)(v13 + 16);
          v100 = *((_OWORD *)a2 - 1);
          *(_OWORD *)v13 = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v13 + 16) = v100;
          result = v160;
          *((__n128 *)a2 - 2) = v160;
          *((_OWORD *)a2 - 1) = v193;
        }
        return result;
      case 3uLL:
        v101 = v13 + 32;
        result.n128_u64[0] = *(_QWORD *)(v13 + 56);
        v102 = *(a2 - 1);
        if (result.n128_f64[0] >= *(double *)(v13 + 24))
        {
          if (v102 < result.n128_f64[0])
          {
            result = *(__n128 *)v101;
            v197 = *(_OWORD *)(v13 + 48);
            v119 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v101 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 48) = v119;
            *(__n128 *)v11 = result;
            *((_OWORD *)a2 - 1) = v197;
            goto LABEL_145;
          }
        }
        else
        {
          if (v102 >= result.n128_f64[0])
          {
            v166 = *(__n128 *)v13;
            v200 = *(_OWORD *)(v13 + 16);
            v127 = *(_OWORD *)(v13 + 48);
            *(_OWORD *)v13 = *(_OWORD *)v101;
            *(_OWORD *)(v13 + 16) = v127;
            *(__n128 *)v101 = v166;
            *(_OWORD *)(v13 + 48) = v200;
            result.n128_f64[0] = *(a2 - 1);
            if (result.n128_f64[0] >= *(double *)(v13 + 56))
              return result;
            result = *(__n128 *)v101;
            v104 = *(_OWORD *)(v13 + 48);
            v128 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v101 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 48) = v128;
          }
          else
          {
            v161 = *(__n128 *)v13;
            v194 = *(_OWORD *)(v13 + 16);
            v103 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v13 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 16) = v103;
            result = v161;
            v104 = v194;
          }
          *(__n128 *)v11 = result;
          *((_OWORD *)a2 - 1) = v104;
        }
        return result;
      case 4uLL:
        v101 = v13 + 32;
        v105 = (__n128 *)(v13 + 64);
        v106 = *(double *)(v13 + 56);
        v107 = *(double *)(v13 + 88);
        if (v106 >= *(double *)(v13 + 24))
        {
          if (v107 < v106)
          {
            v120 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v121 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v121;
            *v105 = v120;
            *(__n128 *)(v13 + 80) = result;
            if (*(double *)(v13 + 56) < *(double *)(v13 + 24))
            {
              v164 = *(__n128 *)v13;
              v198 = *(_OWORD *)(v13 + 16);
              v122 = *(_OWORD *)(v13 + 48);
              *(_OWORD *)v13 = *(_OWORD *)v101;
              *(_OWORD *)(v13 + 16) = v122;
              *(__n128 *)v101 = v164;
              *(_OWORD *)(v13 + 48) = v198;
            }
          }
        }
        else if (v107 >= v106)
        {
          v167 = *(__n128 *)v13;
          v201 = *(_OWORD *)(v13 + 16);
          v129 = *(_OWORD *)(v13 + 48);
          *(_OWORD *)v13 = *(_OWORD *)v101;
          *(_OWORD *)(v13 + 16) = v129;
          *(__n128 *)v101 = v167;
          *(_OWORD *)(v13 + 48) = v201;
          if (v107 < *(double *)(v13 + 56))
          {
            v130 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v131 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v131;
            *v105 = v130;
            *(__n128 *)(v13 + 80) = result;
          }
        }
        else
        {
          v162 = *(__n128 *)v13;
          v195 = *(_OWORD *)(v13 + 16);
          v108 = *(_OWORD *)(v13 + 80);
          *(__n128 *)v13 = *v105;
          *(_OWORD *)(v13 + 16) = v108;
          *v105 = v162;
          *(_OWORD *)(v13 + 80) = v195;
        }
        result.n128_f64[0] = *(a2 - 1);
        if (result.n128_f64[0] < *(double *)(v13 + 88))
        {
          result = *v105;
          v202 = *(_OWORD *)(v13 + 80);
          v132 = *((_OWORD *)a2 - 1);
          *v105 = *(__n128 *)v11;
          *(_OWORD *)(v13 + 80) = v132;
          *(__n128 *)v11 = result;
          *((_OWORD *)a2 - 1) = v202;
          result.n128_u64[0] = *(_QWORD *)(v13 + 88);
          if (result.n128_f64[0] < *(double *)(v13 + 56))
          {
            v133 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v134 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v134;
            *v105 = v133;
            *(__n128 *)(v13 + 80) = result;
LABEL_145:
            result.n128_u64[0] = *(_QWORD *)(v13 + 56);
            if (result.n128_f64[0] < *(double *)(v13 + 24))
            {
              v168 = *(__n128 *)v13;
              v203 = *(_OWORD *)(v13 + 16);
              v135 = *(_OWORD *)(v101 + 16);
              *(_OWORD *)v13 = *(_OWORD *)v101;
              *(_OWORD *)(v13 + 16) = v135;
              result = v168;
              *(__n128 *)v101 = v168;
              *(_OWORD *)(v101 + 16) = v203;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = sub_20EDB10FC((double *)v13, (double *)(v13 + 32), (double *)(v13 + 64), (double *)(v13 + 96), (__int128 *)a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v14 > 767)
        {
          if (!a4)
          {
            if ((double *)v13 != a2)
              sub_20EDB1288((double *)v13, a2, a2);
            return result;
          }
          v16 = v15 >> 1;
          v17 = (__n128 *)(v13 + 32 * (v15 >> 1));
          v18 = *(a2 - 1);
          if ((unint64_t)v14 <= 0x1000)
          {
            v22 = *(double *)(v13 + 24);
            v23 = (double *)(v13 + 24 + 32 * v16);
            if (v22 >= *v23)
            {
              if (v18 < v22)
              {
                v145 = *(__n128 *)v13;
                v173 = *(_OWORD *)(v13 + 16);
                v27 = *((_OWORD *)a2 - 1);
                *(_OWORD *)v13 = *(_OWORD *)v11;
                *(_OWORD *)(v13 + 16) = v27;
                result.n128_u64[1] = v145.n128_u64[1];
                *(__n128 *)v11 = v145;
                *((_OWORD *)a2 - 1) = v173;
                if (*(double *)(v13 + 24) < *v23)
                {
                  v146 = *v17;
                  v174 = v17[1];
                  v28 = *(__n128 *)(v13 + 16);
                  *v17 = *(__n128 *)v13;
                  v17[1] = v28;
                  result.n128_u64[1] = v146.n128_u64[1];
                  *(__n128 *)v13 = v146;
                  *(__n128 *)(v13 + 16) = v174;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v18 >= v22)
              {
                v149 = *v17;
                v179 = v17[1];
                v43 = *(__n128 *)(v13 + 16);
                *v17 = *(__n128 *)v13;
                v17[1] = v43;
                result.n128_u64[1] = v149.n128_u64[1];
                *(__n128 *)v13 = v149;
                *(__n128 *)(v13 + 16) = v179;
                if (*(a2 - 1) >= *(double *)(v13 + 24))
                  goto LABEL_31;
                v142 = *(__n128 *)v13;
                v170 = *(__n128 *)(v13 + 16);
                v44 = *((_OWORD *)a2 - 1);
                *(_OWORD *)v13 = *(_OWORD *)v11;
                *(_OWORD *)(v13 + 16) = v44;
              }
              else
              {
                v142 = *v17;
                v170 = v17[1];
                v24 = *(__n128 *)(a2 - 2);
                *v17 = *(__n128 *)v11;
                v17[1] = v24;
              }
              result.n128_u64[1] = v142.n128_u64[1];
              *(__n128 *)v11 = v142;
              *((__n128 *)a2 - 1) = v170;
            }
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_54:
            result.n128_u64[0] = *(_QWORD *)(v13 + 24);
            if (*(double *)(v13 - 8) < result.n128_f64[0])
              goto LABEL_55;
            v140 = *(_QWORD *)(v13 + 16);
            v138 = *(__n128 *)v13;
            if (result.n128_f64[0] >= *(a2 - 1))
            {
              v90 = v13 + 32;
              do
              {
                v13 = v90;
                if (v90 >= (unint64_t)a2)
                  break;
                v91 = *(double *)(v90 + 24);
                v90 += 32;
              }
              while (result.n128_f64[0] >= v91);
            }
            else
            {
              v88 = v13;
              do
              {
                v13 = v88 + 32;
                v89 = *(double *)(v88 + 56);
                v88 += 32;
              }
              while (result.n128_f64[0] >= v89);
            }
            v92 = a2;
            if (v13 < (unint64_t)a2)
            {
              v93 = a2;
              do
              {
                v92 = v93 - 4;
                v94 = *(v93 - 1);
                v93 -= 4;
              }
              while (result.n128_f64[0] < v94);
            }
            while (v13 < (unint64_t)v92)
            {
              v159 = *(__n128 *)v13;
              v192 = *(_OWORD *)(v13 + 16);
              v95 = *((_OWORD *)v92 + 1);
              *(_OWORD *)v13 = *(_OWORD *)v92;
              *(_OWORD *)(v13 + 16) = v95;
              *(__n128 *)v92 = v159;
              *((_OWORD *)v92 + 1) = v192;
              do
              {
                v96 = *(double *)(v13 + 56);
                v13 += 32;
              }
              while (result.n128_f64[0] >= v96);
              do
              {
                v97 = *(v92 - 1);
                v92 -= 4;
              }
              while (result.n128_f64[0] < v97);
            }
            v98 = (__n128 *)(v13 - 32);
            if (v13 - 32 != a1)
            {
              v99 = *(_OWORD *)(v13 - 16);
              *(__n128 *)a1 = *v98;
              *(_OWORD *)(a1 + 16) = v99;
            }
            a5 = 0;
            *(_QWORD *)(v13 - 16) = v140;
            *v98 = v138;
            *(_QWORD *)(v13 - 8) = result.n128_u64[0];
            continue;
          }
          v19 = (double *)(v13 + 24 + 32 * v16);
          v20 = *v19;
          if (*v19 >= *(double *)(v13 + 24))
          {
            if (v18 < v20)
            {
              v143 = *v17;
              v171 = v17[1];
              v25 = *(__n128 *)(a2 - 2);
              *v17 = *(__n128 *)v11;
              v17[1] = v25;
              *(__n128 *)v11 = v143;
              *((__n128 *)a2 - 1) = v171;
              if (*v19 < *(double *)(v13 + 24))
              {
                v144 = *(__n128 *)v13;
                v172 = *(__n128 *)(v13 + 16);
                v26 = v17[1];
                *(__n128 *)v13 = *v17;
                *(__n128 *)(v13 + 16) = v26;
                *v17 = v144;
                v17[1] = v172;
              }
            }
          }
          else
          {
            if (v18 >= v20)
            {
              v147 = *(__n128 *)v13;
              v175 = *(__n128 *)(v13 + 16);
              v29 = v17[1];
              *(__n128 *)v13 = *v17;
              *(__n128 *)(v13 + 16) = v29;
              *v17 = v147;
              v17[1] = v175;
              if (*(a2 - 1) >= *v19)
                goto LABEL_22;
              v141 = *v17;
              v169 = v17[1];
              v30 = *(__n128 *)(a2 - 2);
              *v17 = *(__n128 *)v11;
              v17[1] = v30;
            }
            else
            {
              v141 = *(__n128 *)v13;
              v169 = *(__n128 *)(v13 + 16);
              v21 = *((_OWORD *)a2 - 1);
              *(_OWORD *)v13 = *(_OWORD *)v11;
              *(_OWORD *)(v13 + 16) = v21;
            }
            *(__n128 *)v11 = v141;
            *((__n128 *)a2 - 1) = v169;
          }
LABEL_22:
          v31 = (__int128 *)(v13 + 32);
          v32 = v13 + 32 * v16;
          v34 = *(double *)(v32 - 8);
          v33 = (double *)(v32 - 8);
          v35 = v34;
          v36 = v33 - 3;
          v37 = *(a2 - 5);
          if (v34 >= *(double *)(v13 + 56))
          {
            if (v37 < v35)
            {
              v148 = *(__n128 *)v36;
              v177 = *(_OWORD *)(v33 - 1);
              v40 = *((_OWORD *)a2 - 3);
              *(_OWORD *)v36 = *(_OWORD *)v136;
              *(_OWORD *)(v33 - 1) = v40;
              *(__n128 *)v136 = v148;
              *((_OWORD *)a2 - 3) = v177;
              if (*v33 < *(double *)(v13 + 56))
              {
                v41 = *v31;
                v178 = *(_OWORD *)(v13 + 48);
                v42 = *(_OWORD *)(v33 - 1);
                *v31 = *(_OWORD *)v36;
                *(_OWORD *)(v13 + 48) = v42;
                *(_OWORD *)v36 = v41;
                *(_OWORD *)(v33 - 1) = v178;
              }
            }
          }
          else if (v37 >= v35)
          {
            v45 = *v31;
            v180 = *(_OWORD *)(v13 + 48);
            v46 = *(_OWORD *)(v33 - 1);
            *v31 = *(_OWORD *)v36;
            *(_OWORD *)(v13 + 48) = v46;
            *(_OWORD *)v36 = v45;
            *(_OWORD *)(v33 - 1) = v180;
            if (*(a2 - 5) < *v33)
            {
              v150 = *(__n128 *)v36;
              v181 = *(_OWORD *)(v33 - 1);
              v47 = *((_OWORD *)a2 - 3);
              *(_OWORD *)v36 = *(_OWORD *)v136;
              *(_OWORD *)(v33 - 1) = v47;
              *(__n128 *)v136 = v150;
              *((_OWORD *)a2 - 3) = v181;
            }
          }
          else
          {
            v38 = *v31;
            v176 = *(_OWORD *)(v13 + 48);
            v39 = *((_OWORD *)a2 - 3);
            *v31 = *(_OWORD *)v136;
            *(_OWORD *)(v13 + 48) = v39;
            *(_OWORD *)v136 = v38;
            *((_OWORD *)a2 - 3) = v176;
          }
          v48 = (__int128 *)(v13 + 64);
          v49 = v13 + 32 * v16;
          v51 = *(double *)(v49 + 56);
          v50 = (double *)(v49 + 56);
          v52 = v51;
          v53 = v50 - 3;
          v54 = *(a2 - 9);
          if (v51 >= *(double *)(v13 + 88))
          {
            if (v54 < v52)
            {
              v151 = *(__n128 *)v53;
              v182 = *(_OWORD *)(v50 - 1);
              v58 = *((_OWORD *)a2 - 5);
              *(_OWORD *)v53 = *(_OWORD *)v12;
              *(_OWORD *)(v50 - 1) = v58;
              *(__n128 *)v12 = v151;
              *((_OWORD *)a2 - 5) = v182;
              if (*v50 < *(double *)(v13 + 88))
              {
                v59 = *v48;
                v183 = *(_OWORD *)(v13 + 80);
                v60 = *(_OWORD *)(v50 - 1);
                *v48 = *(_OWORD *)v53;
                *(_OWORD *)(v13 + 80) = v60;
                *(_OWORD *)v53 = v59;
                *(_OWORD *)(v50 - 1) = v183;
              }
            }
          }
          else
          {
            if (v54 >= v52)
            {
              v61 = *v48;
              v184 = *(_OWORD *)(v13 + 80);
              v62 = *(_OWORD *)(v50 - 1);
              *v48 = *(_OWORD *)v53;
              *(_OWORD *)(v13 + 80) = v62;
              *(_OWORD *)v53 = v61;
              *(_OWORD *)(v50 - 1) = v184;
              if (*(a2 - 9) >= *v50)
                goto LABEL_44;
              v152 = *(_OWORD *)v53;
              v185 = *(_OWORD *)(v50 - 1);
              v63 = *((_OWORD *)a2 - 5);
              *(_OWORD *)v53 = *(_OWORD *)v12;
              *(_OWORD *)(v50 - 1) = v63;
              v55 = v152;
              v56 = v185;
            }
            else
            {
              v55 = *v48;
              v56 = *(_OWORD *)(v13 + 80);
              v57 = *((_OWORD *)a2 - 5);
              *v48 = *(_OWORD *)v12;
              *(_OWORD *)(v13 + 80) = v57;
            }
            *(_OWORD *)v12 = v55;
            *((_OWORD *)a2 - 5) = v56;
          }
LABEL_44:
          v64 = *v19;
          v65 = *v50;
          if (*v19 >= *v33)
          {
            if (v65 < v64)
            {
              v154 = *v17;
              v187 = v17[1];
              v67 = *(__n128 *)(v50 - 1);
              *v17 = *(__n128 *)v53;
              v17[1] = v67;
              *(__n128 *)v53 = v154;
              *(__n128 *)(v50 - 1) = v187;
              if (*v19 < *v33)
              {
                v155 = *(__n128 *)v36;
                v188 = *(__n128 *)(v33 - 1);
                v68 = v17[1];
                *(__n128 *)v36 = *v17;
                *(__n128 *)(v33 - 1) = v68;
                *v17 = v155;
                v17[1] = v188;
              }
            }
          }
          else
          {
            if (v65 >= v64)
            {
              v156 = *(__n128 *)v36;
              v189 = *(__n128 *)(v33 - 1);
              v69 = v17[1];
              *(__n128 *)v36 = *v17;
              *(__n128 *)(v33 - 1) = v69;
              *v17 = v156;
              v17[1] = v189;
              if (*v50 >= *v19)
                goto LABEL_53;
              v153 = *v17;
              v186 = v17[1];
              v70 = *(__n128 *)(v50 - 1);
              *v17 = *(__n128 *)v53;
              v17[1] = v70;
            }
            else
            {
              v153 = *(__n128 *)v36;
              v186 = *(__n128 *)(v33 - 1);
              v66 = *(_OWORD *)(v50 - 1);
              *(_OWORD *)v36 = *(_OWORD *)v53;
              *(_OWORD *)(v33 - 1) = v66;
            }
            *(__n128 *)v53 = v153;
            *(__n128 *)(v50 - 1) = v186;
          }
LABEL_53:
          v157 = *(__n128 *)v13;
          v190 = *(__n128 *)(v13 + 16);
          v71 = v17[1];
          *(__n128 *)v13 = *v17;
          *(__n128 *)(v13 + 16) = v71;
          result.n128_u64[1] = v157.n128_u64[1];
          *v17 = v157;
          v17[1] = v190;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_32:
          result.n128_u64[0] = *(_QWORD *)(v13 + 24);
LABEL_55:
          v72 = 0;
          v139 = *(_QWORD *)(v13 + 16);
          v137 = *(__n128 *)v13;
          do
          {
            v73 = *(double *)(v13 + v72 + 56);
            v72 += 32;
          }
          while (v73 < result.n128_f64[0]);
          v74 = v13 + v72;
          v75 = a2;
          if (v72 == 32)
          {
            v78 = a2;
            while (v74 < (unint64_t)v78)
            {
              v76 = v78 - 4;
              v79 = *(v78 - 1);
              v78 -= 4;
              if (v79 < result.n128_f64[0])
                goto LABEL_63;
            }
            v76 = v78;
            v13 = v74;
          }
          else
          {
            do
            {
              v76 = v75 - 4;
              v77 = *(v75 - 1);
              v75 -= 4;
            }
            while (v77 >= result.n128_f64[0]);
LABEL_63:
            v13 = v74;
            if (v74 < (unint64_t)v76)
            {
              v80 = v76;
              do
              {
                v158 = *(__n128 *)v13;
                v191 = *(_OWORD *)(v13 + 16);
                v81 = *((_OWORD *)v80 + 1);
                *(_OWORD *)v13 = *(_OWORD *)v80;
                *(_OWORD *)(v13 + 16) = v81;
                *(__n128 *)v80 = v158;
                *((_OWORD *)v80 + 1) = v191;
                do
                {
                  v82 = *(double *)(v13 + 56);
                  v13 += 32;
                }
                while (v82 < result.n128_f64[0]);
                do
                {
                  v83 = *(v80 - 1);
                  v80 -= 4;
                }
                while (v83 >= result.n128_f64[0]);
              }
              while (v13 < (unint64_t)v80);
            }
          }
          v84 = (__n128 *)(v13 - 32);
          if (v13 - 32 != a1)
          {
            v85 = *(_OWORD *)(v13 - 16);
            *(__n128 *)a1 = *v84;
            *(_OWORD *)(a1 + 16) = v85;
          }
          *(_QWORD *)(v13 - 16) = v139;
          *v84 = v137;
          *(_QWORD *)(v13 - 8) = result.n128_u64[0];
          if (v74 < (unint64_t)v76)
            goto LABEL_74;
          v86 = sub_20EDB0D28(a1, v13 - 32, result);
          if (!sub_20EDB0D28(v13, (uint64_t)a2, v87))
          {
            if (v86)
              continue;
LABEL_74:
            sub_20EDB02B0(a1, v13 - 32, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (double *)(v13 - 32);
          if (v86)
            return result;
          goto LABEL_1;
        }
        v109 = (double *)(v13 + 32);
        v111 = (double *)v13 == a2 || v109 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v111)
          {
            v112 = 0;
            v113 = v13;
            do
            {
              result.n128_u64[0] = *(_QWORD *)(v113 + 56);
              v115 = *(double *)(v113 + 24);
              v113 = (unint64_t)v109;
              if (result.n128_f64[0] < v115)
              {
                v196 = *((_QWORD *)v109 + 2);
                v163 = *(_OWORD *)v109;
                v116 = v112;
                do
                {
                  v117 = v13 + v116;
                  v118 = *(_OWORD *)(v13 + v116 + 16);
                  *(_OWORD *)(v117 + 32) = *(_OWORD *)(v13 + v116);
                  *(_OWORD *)(v117 + 48) = v118;
                  if (!v116)
                  {
                    v114 = v13;
                    goto LABEL_116;
                  }
                  v116 -= 32;
                }
                while (result.n128_f64[0] < *(double *)(v117 - 8));
                v114 = v13 + v116 + 32;
LABEL_116:
                *(_QWORD *)(v114 + 16) = v196;
                *(_OWORD *)v114 = v163;
                *(_QWORD *)(v114 + 24) = result.n128_u64[0];
              }
              v109 = (double *)(v113 + 32);
              v112 += 32;
            }
            while ((double *)(v113 + 32) != a2);
          }
        }
        else if (!v111)
        {
          do
          {
            result.n128_u64[0] = *(_QWORD *)(a1 + 56);
            v123 = *(double *)(a1 + 24);
            a1 = (uint64_t)v109;
            if (result.n128_f64[0] < v123)
            {
              v199 = *((_QWORD *)v109 + 2);
              v165 = *(_OWORD *)v109;
              v124 = v109;
              do
              {
                v125 = *((_OWORD *)v124 - 1);
                *(_OWORD *)v124 = *((_OWORD *)v124 - 2);
                *((_OWORD *)v124 + 1) = v125;
                v126 = *(v124 - 5);
                v124 -= 4;
              }
              while (result.n128_f64[0] < v126);
              *((_QWORD *)v124 + 2) = v199;
              *(_OWORD *)v124 = v165;
              v124[3] = result.n128_f64[0];
            }
            v109 += 4;
          }
          while ((double *)(a1 + 32) != a2);
        }
        return result;
    }
  }
}

  v207 = (__int128 *)(a2 - 312);
  v208 = (__int128 *)(a2 - 208);
  v209 = (unint64_t *)(a2 - 288);
  v210 = (__int128 *)(a2 - 104);
  v8 = a1;
  v247 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_QWORD *)(a2 - 80) > *(_QWORD *)(a1 + 24))
          goto LABEL_127;
        return result;
      case 3:
        v88 = (__int128 *)(a1 + 104);
        v89 = *(_QWORD *)(a1 + 128);
        v90 = *(_QWORD *)(a2 - 80);
        if (v89 > *(_QWORD *)(a1 + 24))
        {
          if (v90 <= v89)
          {
            *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a1, (__int128 *)(a1 + 104)).n128_u64[0];
            if (*(_QWORD *)(a2 - 80) <= *(_QWORD *)(a1 + 128))
              return result;
            v91 = (__int128 *)(a1 + 104);
          }
          else
          {
LABEL_127:
            v91 = (__int128 *)a1;
          }
          v92 = v210;
          goto LABEL_129;
        }
        if (v90 > v89)
        {
          v93 = (__int128 *)(a1 + 104);
          v94 = v210;
LABEL_247:
          *(_QWORD *)&result = sub_20EDC6E40(v93, v94).n128_u64[0];
          if (*(_QWORD *)(a1 + 128) > *(_QWORD *)(a1 + 24))
          {
            v91 = (__int128 *)a1;
            v92 = v88;
LABEL_129:
            *(_QWORD *)&result = sub_20EDC6E40(v91, v92).n128_u64[0];
          }
        }
        return result;
      case 4:
        return sub_20EDC6FA8(a1, a1 + 104, a1 + 208, (uint64_t)v210);
      case 5:
        v88 = (__int128 *)(a1 + 104);
        result = sub_20EDC6FA8(a1, a1 + 104, a1 + 208, a1 + 312);
        if (*(_QWORD *)(a2 - 80) <= *(_QWORD *)(a1 + 336))
          return result;
        *(_QWORD *)&result = sub_20EDC6E40((__int128 *)(a1 + 312), v210).n128_u64[0];
        if (*(_QWORD *)(a1 + 336) <= *(_QWORD *)(a1 + 232))
          return result;
        *(_QWORD *)&result = sub_20EDC6E40((__int128 *)(a1 + 208), (__int128 *)(a1 + 312)).n128_u64[0];
        if (*(_QWORD *)(a1 + 232) <= *(_QWORD *)(a1 + 128))
          return result;
        v93 = (__int128 *)(a1 + 104);
        v94 = (__int128 *)(a1 + 208);
        goto LABEL_247;
      default:
        if (v9 <= 2495)
        {
          v95 = a1 + 104;
          v97 = a1 == a2 || v95 == a2;
          if ((a4 & 1) == 0)
          {
            if (!v97)
            {
              v191 = a1 - 80;
              do
              {
                v192 = v95;
                if (*(_QWORD *)(a1 + 128) > *(_QWORD *)(a1 + 24))
                {
                  v193 = *(_QWORD *)(v95 + 24);
                  v260 = *(_QWORD *)(v95 + 16);
                  v254 = *(_OWORD *)v95;
                  v194 = *(_OWORD *)(a1 + 136);
                  v195 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  v233 = v194;
                  v240 = *(_OWORD *)(a1 + 160);
                  *(_QWORD *)(a1 + 152) = 0;
                  *(_QWORD *)(a1 + 160) = 0;
                  v197 = *(_QWORD *)(a1 + 176);
                  v196 = *(_QWORD *)(a1 + 184);
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  v246 = *(_OWORD *)(a1 + 192);
                  *(_QWORD *)(a1 + 184) = 0;
                  *(_QWORD *)(a1 + 192) = 0;
                  *(_QWORD *)(a1 + 200) = 0;
                  v198 = v191;
                  do
                  {
                    v200 = *(_OWORD *)(v198 + 96);
                    *(_OWORD *)(v198 + 184) = *(_OWORD *)(v198 + 80);
                    *(_OWORD *)(v198 + 200) = v200;
                    v201 = *(void **)(v198 + 216);
                    if (v201)
                    {
                      *(_QWORD *)(v198 + 224) = v201;
                      operator delete(v201);
                      *(_QWORD *)(v198 + 224) = 0;
                      *(_QWORD *)(v198 + 232) = 0;
                    }
                    *(_OWORD *)(v198 + 216) = *(_OWORD *)(v198 + 112);
                    *(_QWORD *)(v198 + 232) = *(_QWORD *)(v198 + 128);
                    *(_QWORD *)(v198 + 120) = 0;
                    *(_QWORD *)(v198 + 128) = 0;
                    *(_QWORD *)(v198 + 112) = 0;
                    v202 = *(void **)(v198 + 240);
                    if (v202)
                    {
                      *(_QWORD *)(v198 + 248) = v202;
                      operator delete(v202);
                      *(_QWORD *)(v198 + 248) = 0;
                      *(_QWORD *)(v198 + 256) = 0;
                    }
                    *(_OWORD *)(v198 + 240) = *(_OWORD *)(v198 + 136);
                    *(_QWORD *)(v198 + 256) = *(_QWORD *)(v198 + 152);
                    *(_QWORD *)(v198 + 144) = 0;
                    *(_QWORD *)(v198 + 152) = 0;
                    *(_QWORD *)(v198 + 136) = 0;
                    v203 = *(void **)(v198 + 264);
                    if (v203)
                    {
                      operator delete(v203);
                      *(_QWORD *)(v198 + 272) = 0;
                      *(_QWORD *)(v198 + 280) = 0;
                    }
                    *(_OWORD *)(v198 + 264) = *(_OWORD *)(v198 + 160);
                    *(_QWORD *)(v198 + 280) = *(_QWORD *)(v198 + 176);
                    *(_QWORD *)(v198 + 160) = 0;
                    *(_QWORD *)(v198 + 168) = 0;
                    *(_QWORD *)(v198 + 176) = 0;
                    v199 = *(_QWORD *)v198;
                    v198 -= 104;
                  }
                  while (v193 > v199);
                  *(_OWORD *)(v198 + 184) = v254;
                  *(_QWORD *)(v198 + 200) = v260;
                  *(_QWORD *)(v198 + 208) = v193;
                  v204 = *(void **)(v198 + 216);
                  if (v204)
                  {
                    *(_QWORD *)(v198 + 224) = v204;
                    operator delete(v204);
                  }
                  *(_OWORD *)(v198 + 216) = v233;
                  *(_QWORD *)(v198 + 232) = v195;
                  v205 = *(void **)(v198 + 240);
                  if (v205)
                  {
                    *(_QWORD *)(v198 + 248) = v205;
                    operator delete(v205);
                  }
                  *(_OWORD *)(v198 + 240) = v240;
                  *(_QWORD *)(v198 + 256) = v197;
                  v206 = *(void **)(v198 + 264);
                  a2 = v247;
                  if (v206)
                    operator delete(v206);
                  *(_QWORD *)(v198 + 264) = v196;
                  result = *(double *)&v246;
                  *(_OWORD *)(v198 + 272) = v246;
                }
                v95 = v192 + 104;
                v191 += 104;
                a1 = v192;
              }
              while (v192 + 104 != a2);
            }
            return result;
          }
          if (v97)
            return result;
          v98 = 0;
          v99 = a1;
          while (1)
          {
            v100 = v95;
            if (*(_QWORD *)(v99 + 128) > *(_QWORD *)(v99 + 24))
            {
              v101 = *(_QWORD *)(v95 + 24);
              v257 = *(_QWORD *)(v95 + 16);
              v251 = *(_OWORD *)v95;
              v102 = *(_QWORD *)(v99 + 136);
              v103 = *(_OWORD *)(v99 + 144);
              *(_QWORD *)(v99 + 136) = 0;
              *(_QWORD *)(v99 + 144) = 0;
              v104 = *(_QWORD *)(v99 + 160);
              v229 = v103;
              v236 = *(_OWORD *)(v99 + 168);
              *(_QWORD *)(v99 + 152) = 0;
              *(_QWORD *)(v99 + 160) = 0;
              *(_QWORD *)(v99 + 168) = 0;
              *(_QWORD *)(v99 + 176) = 0;
              v105 = *(_QWORD *)(v99 + 184);
              v242 = *(_OWORD *)(v99 + 192);
              *(_QWORD *)(v99 + 184) = 0;
              *(_QWORD *)(v99 + 192) = 0;
              *(_QWORD *)(v99 + 200) = 0;
              v106 = v98;
              while (1)
              {
                v107 = v106;
                v108 = a1 + v106;
                v109 = *(_OWORD *)(a1 + v106 + 16);
                *(_OWORD *)(v108 + 104) = *(_OWORD *)(a1 + v106);
                *(_OWORD *)(v108 + 120) = v109;
                v110 = *(void **)(a1 + v106 + 136);
                if (v110)
                {
                  *(_QWORD *)(v108 + 144) = v110;
                  operator delete(v110);
                  *(_QWORD *)(v108 + 144) = 0;
                  *(_QWORD *)(v108 + 152) = 0;
                }
                *(_OWORD *)(v108 + 136) = *(_OWORD *)(v108 + 32);
                *(_QWORD *)(v108 + 152) = *(_QWORD *)(v108 + 48);
                *(_QWORD *)(v108 + 32) = 0;
                *(_QWORD *)(v108 + 40) = 0;
                *(_QWORD *)(v108 + 48) = 0;
                v111 = *(void **)(v108 + 160);
                if (v111)
                {
                  v112 = a1 + v107;
                  *(_QWORD *)(a1 + v107 + 168) = v111;
                  operator delete(v111);
                  *(_QWORD *)(v112 + 168) = 0;
                  *(_QWORD *)(v112 + 176) = 0;
                }
                v113 = (_QWORD *)(v108 + 56);
                *(_OWORD *)(v108 + 160) = *(_OWORD *)(v108 + 56);
                v114 = (_QWORD *)(a1 + v107);
                *(_QWORD *)(a1 + v107 + 176) = *(_QWORD *)(a1 + v107 + 72);
                *v113 = 0;
                v113[1] = 0;
                v113[2] = 0;
                v115 = *(void **)(a1 + v107 + 184);
                if (v115)
                {
                  operator delete(v115);
                  v114[24] = 0;
                  v114[25] = 0;
                }
                v116 = v114[11];
                v114[23] = v114[10];
                v114[24] = v116;
                v114[25] = v114[12];
                v114[10] = 0;
                v114[11] = 0;
                v114[12] = 0;
                if (!v107)
                  break;
                v106 = v107 - 104;
                if (v101 <= *(_QWORD *)(a1 + v107 - 80))
                {
                  v117 = a1 + v107;
                  goto LABEL_158;
                }
              }
              v117 = a1;
LABEL_158:
              *(_OWORD *)v117 = v251;
              *(_QWORD *)(v117 + 16) = v257;
              *(_QWORD *)(v117 + 24) = v101;
              v118 = (_QWORD *)(a1 + v107);
              v119 = *(void **)(a1 + v107 + 32);
              if (v119)
              {
                *(_QWORD *)(v117 + 40) = v119;
                operator delete(v119);
              }
              v118[4] = v102;
              *(_OWORD *)(v117 + 40) = v229;
              v120 = (void *)v118[7];
              if (v120)
              {
                *(_QWORD *)(v117 + 64) = v120;
                operator delete(v120);
              }
              v118[7] = v104;
              *(_OWORD *)(v117 + 64) = v236;
              v121 = (void *)v118[10];
              a2 = v247;
              if (v121)
                operator delete(v121);
              v118[10] = v105;
              result = *(double *)&v242;
              *(_OWORD *)(v117 + 88) = v242;
            }
            v95 = v100 + 104;
            v98 += 104;
            v99 = v100;
            if (v100 + 104 == a2)
              return result;
          }
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = a1 + 104 * ((unint64_t)v10 >> 1);
          v13 = *(_QWORD *)(a2 - 80);
          if ((unint64_t)v9 >= 0x3401)
          {
            v14 = *(_QWORD *)(v12 + 24);
            if (v14 <= *(_QWORD *)(a1 + 24))
            {
              if (v13 <= v14 || (sub_20EDC6E40((__int128 *)v12, v210), *(_QWORD *)(v12 + 24) <= *(_QWORD *)(a1 + 24)))
              {
LABEL_20:
                v20 = a1 + 104 * v11;
                v21 = v20 - 104;
                v22 = *(_QWORD *)(v20 - 80);
                v23 = *(_QWORD *)(a2 - 184);
                if (v22 <= *(_QWORD *)(a1 + 128))
                {
                  if (v23 <= v22
                    || (sub_20EDC6E40((__int128 *)v21, v208), *(_QWORD *)(v21 + 24) <= *(_QWORD *)(a1 + 128)))
                  {
LABEL_32:
                    v26 = a1 + 104 * v11;
                    v27 = v26 + 104;
                    v28 = *(_QWORD *)(v26 + 128);
                    v29 = *v209;
                    if (v28 <= *(_QWORD *)(a1 + 232))
                    {
                      if (v29 <= v28
                        || (sub_20EDC6E40((__int128 *)v27, v207), *(_QWORD *)(v27 + 24) <= *(_QWORD *)(a1 + 232)))
                      {
LABEL_41:
                        v32 = *(_QWORD *)(v12 + 24);
                        v33 = *(_QWORD *)(v27 + 24);
                        if (v32 <= *(_QWORD *)(v21 + 24))
                        {
                          if (v33 <= v32)
                            goto LABEL_50;
                          sub_20EDC6E40((__int128 *)v12, (__int128 *)v27);
                          if (*(_QWORD *)(v12 + 24) <= *(_QWORD *)(v21 + 24))
                            goto LABEL_50;
                          v34 = (__int128 *)v21;
                          v35 = (__int128 *)v12;
                        }
                        else
                        {
                          v34 = (__int128 *)v21;
                          if (v33 <= v32)
                          {
                            sub_20EDC6E40((__int128 *)v21, (__int128 *)v12);
                            if (*(_QWORD *)(v27 + 24) <= *(_QWORD *)(v12 + 24))
                            {
LABEL_50:
                              v18 = (__int128 *)a1;
                              v19 = (__int128 *)v12;
                              goto LABEL_51;
                            }
                            v34 = (__int128 *)v12;
                          }
                          v35 = (__int128 *)v27;
                        }
                        sub_20EDC6E40(v34, v35);
                        goto LABEL_50;
                      }
                      v30 = (__int128 *)(a1 + 208);
                      v31 = (__int128 *)v27;
                    }
                    else
                    {
                      v30 = (__int128 *)(a1 + 208);
                      if (v29 <= v28)
                      {
                        sub_20EDC6E40(v30, (__int128 *)v27);
                        if (*v209 <= *(_QWORD *)(v27 + 24))
                          goto LABEL_41;
                        v30 = (__int128 *)v27;
                      }
                      v31 = v207;
                    }
                    sub_20EDC6E40(v30, v31);
                    goto LABEL_41;
                  }
                  v24 = (__int128 *)(a1 + 104);
                  v25 = (__int128 *)v21;
                }
                else
                {
                  v24 = (__int128 *)(a1 + 104);
                  if (v23 <= v22)
                  {
                    sub_20EDC6E40(v24, (__int128 *)v21);
                    if (*(_QWORD *)(a2 - 184) <= *(_QWORD *)(v21 + 24))
                      goto LABEL_32;
                    v24 = (__int128 *)v21;
                  }
                  v25 = v208;
                }
                sub_20EDC6E40(v24, v25);
                goto LABEL_32;
              }
              v15 = (__int128 *)a1;
              v16 = (__int128 *)v12;
            }
            else
            {
              v15 = (__int128 *)a1;
              if (v13 <= v14)
              {
                sub_20EDC6E40((__int128 *)a1, (__int128 *)v12);
                if (*(_QWORD *)(a2 - 80) <= *(_QWORD *)(v12 + 24))
                  goto LABEL_20;
                v15 = (__int128 *)v12;
              }
              v16 = v210;
            }
            sub_20EDC6E40(v15, v16);
            goto LABEL_20;
          }
          v17 = *(_QWORD *)(a1 + 24);
          if (v17 > *(_QWORD *)(v12 + 24))
          {
            v18 = (__int128 *)v12;
            if (v13 <= v17)
            {
              sub_20EDC6E40((__int128 *)v12, (__int128 *)a1);
              if (*(_QWORD *)(a2 - 80) <= *(_QWORD *)(a1 + 24))
                goto LABEL_52;
              v18 = (__int128 *)a1;
            }
            v19 = v210;
            goto LABEL_51;
          }
          if (v13 > v17)
          {
            sub_20EDC6E40((__int128 *)a1, v210);
            if (*(_QWORD *)(a1 + 24) > *(_QWORD *)(v12 + 24))
            {
              v18 = (__int128 *)v12;
              v19 = (__int128 *)a1;
LABEL_51:
              sub_20EDC6E40(v18, v19);
            }
          }
LABEL_52:
          v241 = a3 - 1;
          if ((a4 & 1) == 0)
          {
            v36 = *(_QWORD *)(a1 + 24);
            if (*(_QWORD *)(a1 - 80) > v36)
              goto LABEL_55;
            v256 = *(_QWORD *)(a1 + 16);
            v250 = *(_OWORD *)a1;
            v65 = *(_QWORD *)(a1 + 24);
            v66 = *(_OWORD *)(a1 + 32);
            v67 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v223 = v66;
            v228 = *(_OWORD *)(a1 + 56);
            v68 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            v69 = *(_QWORD *)(a1 + 80);
            v235 = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            *(_QWORD *)(a1 + 80) = 0;
            if (v65 <= *(_QWORD *)(a2 - 80))
            {
              v72 = a1 + 104;
              do
              {
                v8 = v72;
                if (v72 >= v247)
                  break;
                v72 += 104;
              }
              while (v65 <= *(_QWORD *)(v8 + 24));
            }
            else
            {
              v70 = a1;
              do
              {
                v8 = v70 + 104;
                v71 = *(_QWORD *)(v70 + 128);
                v70 += 104;
              }
              while (v65 <= v71);
            }
            v73 = (__int128 *)v247;
            if (v8 < v247)
            {
              v74 = v247;
              do
              {
                v73 = (__int128 *)(v74 - 104);
                v75 = *(_QWORD *)(v74 - 80);
                v74 -= 104;
              }
              while (v65 > v75);
            }
            while (v8 < (unint64_t)v73)
            {
              sub_20EDC6E40((__int128 *)v8, v73);
              do
              {
                v76 = *(_QWORD *)(v8 + 128);
                v8 += 104;
              }
              while (v65 <= v76);
              do
              {
                v77 = *((_QWORD *)v73 - 10);
                v73 = (__int128 *)((char *)v73 - 104);
              }
              while (v65 > v77);
            }
            v78 = (__int128 *)(v8 - 104);
            if (v8 - 104 != a1)
            {
              v79 = *(_OWORD *)(v8 - 88);
              *(_OWORD *)a1 = *v78;
              *(_OWORD *)(a1 + 16) = v79;
              v80 = *(void **)(a1 + 32);
              if (v80)
              {
                *(_QWORD *)(a1 + 40) = v80;
                operator delete(v80);
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)(a1 + 40) = 0;
                *(_QWORD *)(a1 + 48) = 0;
              }
              v81 = (_QWORD *)(v8 - 72);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 72);
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 - 56);
              *v81 = 0;
              v81[1] = 0;
              v81[2] = 0;
              v82 = *(void **)(a1 + 56);
              if (v82)
              {
                *(_QWORD *)(a1 + 64) = v82;
                operator delete(v82);
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)(a1 + 72) = 0;
              }
              v83 = (_QWORD *)(v8 - 48);
              *(_OWORD *)(a1 + 56) = *(_OWORD *)(v8 - 48);
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 - 32);
              *v83 = 0;
              v83[1] = 0;
              v83[2] = 0;
              v84 = *(void **)(a1 + 80);
              if (v84)
              {
                operator delete(v84);
                *(_QWORD *)(a1 + 80) = 0;
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
              }
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 - 24);
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 - 16);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 - 8);
              *(_QWORD *)(v8 - 24) = 0;
              *(_QWORD *)(v8 - 16) = 0;
              *(_QWORD *)(v8 - 8) = 0;
            }
            *(_QWORD *)(v8 - 88) = v256;
            *v78 = v250;
            *(_QWORD *)(v8 - 80) = v65;
            v85 = *(void **)(v8 - 72);
            if (v85)
            {
              *(_QWORD *)(v8 - 64) = v85;
              operator delete(v85);
            }
            *(_OWORD *)(v8 - 72) = v223;
            *(_QWORD *)(v8 - 56) = v67;
            v86 = *(void **)(v8 - 48);
            a2 = v247;
            a3 = v241;
            if (v86)
            {
              *(_QWORD *)(v8 - 40) = v86;
              operator delete(v86);
            }
            *(_OWORD *)(v8 - 48) = v228;
            *(_QWORD *)(v8 - 32) = v68;
            v87 = *(void **)(v8 - 24);
            if (v87)
              operator delete(v87);
            a4 = 0;
            *(_QWORD *)(v8 - 24) = v69;
            result = *(double *)&v235;
            *(_OWORD *)(v8 - 16) = v235;
            continue;
          }
          v36 = *(_QWORD *)(a1 + 24);
LABEL_55:
          v37 = 0;
          v255 = *(_QWORD *)(a1 + 16);
          v249 = *(_OWORD *)a1;
          v216 = *(_OWORD *)(a1 + 32);
          v38 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = 0;
          v39 = *(_OWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v40 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          v41 = *(_QWORD *)(a1 + 80);
          v42 = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          do
          {
            v43 = *(_QWORD *)(a1 + v37 + 128);
            v37 += 104;
          }
          while (v43 > v36);
          v44 = a1 + v37;
          v45 = a2;
          if (v37 == 104)
          {
            v48 = v247;
            while (v44 < v48)
            {
              v46 = (__int128 *)(v48 - 104);
              v49 = *(_QWORD *)(v48 - 80);
              v48 -= 104;
              if (v49 > v36)
                goto LABEL_65;
            }
            v46 = (__int128 *)v48;
          }
          else
          {
            do
            {
              v46 = (__int128 *)(v45 - 104);
              v47 = *(_QWORD *)(v45 - 80);
              v45 -= 104;
            }
            while (v47 <= v36);
          }
LABEL_65:
          v234 = v41;
          v222 = v39;
          v227 = v42;
          v219 = v40;
          v214 = v38;
          v8 = v44;
          if (v44 < (unint64_t)v46)
          {
            v50 = v46;
            do
            {
              sub_20EDC6E40((__int128 *)v8, v50);
              do
              {
                v51 = *(_QWORD *)(v8 + 128);
                v8 += 104;
              }
              while (v51 > v36);
              do
              {
                v52 = *((_QWORD *)v50 - 10);
                v50 = (__int128 *)((char *)v50 - 104);
              }
              while (v52 <= v36);
            }
            while (v8 < (unint64_t)v50);
          }
          v53 = (__int128 *)(v8 - 104);
          if (v8 - 104 != a1)
          {
            v54 = *(_OWORD *)(v8 - 88);
            *(_OWORD *)a1 = *v53;
            *(_OWORD *)(a1 + 16) = v54;
            v55 = *(void **)(a1 + 32);
            if (v55)
            {
              *(_QWORD *)(a1 + 40) = v55;
              operator delete(v55);
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = 0;
            }
            v56 = (_QWORD *)(v8 - 72);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 72);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 - 56);
            *v56 = 0;
            v56[1] = 0;
            v56[2] = 0;
            v57 = *(void **)(a1 + 56);
            if (v57)
            {
              *(_QWORD *)(a1 + 64) = v57;
              operator delete(v57);
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
            }
            v58 = (_QWORD *)(v8 - 48);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v8 - 48);
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(v8 - 32);
            *v58 = 0;
            v58[1] = 0;
            v58[2] = 0;
            v59 = *(void **)(a1 + 80);
            if (v59)
            {
              operator delete(v59);
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 96) = 0;
            }
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 - 8);
            *(_QWORD *)(v8 - 24) = 0;
            *(_QWORD *)(v8 - 16) = 0;
            *(_QWORD *)(v8 - 8) = 0;
          }
          *(_QWORD *)(v8 - 88) = v255;
          *v53 = v249;
          *(_QWORD *)(v8 - 80) = v36;
          v60 = *(void **)(v8 - 72);
          if (v60)
          {
            *(_QWORD *)(v8 - 64) = v60;
            operator delete(v60);
          }
          *(_OWORD *)(v8 - 72) = v216;
          *(_QWORD *)(v8 - 56) = v214;
          v61 = *(void **)(v8 - 48);
          a3 = v241;
          if (v61)
          {
            *(_QWORD *)(v8 - 40) = v61;
            operator delete(v61);
          }
          *(_OWORD *)(v8 - 48) = v222;
          *(_QWORD *)(v8 - 32) = v219;
          v62 = *(void **)(v8 - 24);
          if (v62)
            operator delete(v62);
          *(_QWORD *)(v8 - 24) = v234;
          *(_OWORD *)(v8 - 16) = v227;
          v63 = v44 >= (unint64_t)v46;
          a2 = v247;
          if (!v63)
          {
LABEL_89:
            sub_20EDC55B0(a1, v8 - 104, v241, a4 & 1);
            a4 = 0;
            continue;
          }
          v64 = sub_20EDC6A24(a1, v8 - 104);
          if (!sub_20EDC6A24(v8, v247))
          {
            if (!v64)
              goto LABEL_89;
            continue;
          }
          a2 = v8 - 104;
          if (v64)
            return result;
          goto LABEL_1;
        }
        if (a1 == a2)
          return result;
        v122 = (unint64_t)(v10 - 2) >> 1;
        v123 = v122;
        do
        {
          v124 = v123;
          if (v122 >= v123)
          {
            v125 = (2 * v123) | 1;
            v126 = a1 + 104 * v125;
            if (2 * v124 + 2 < v10)
            {
              v127 = *(_QWORD *)(v126 + 24);
              v128 = *(_QWORD *)(v126 + 128);
              v126 += 104 * (v127 > v128);
              if (v127 > v128)
                v125 = 2 * v124 + 2;
            }
            v129 = a1 + 104 * v124;
            v130 = *(_QWORD *)(v129 + 24);
            if (*(_QWORD *)(v126 + 24) <= v130)
            {
              v258 = *(_QWORD *)(v129 + 16);
              v252 = *(_OWORD *)v129;
              v131 = a1 + 104 * v124;
              v220 = *(_OWORD *)(v131 + 32);
              v217 = *(_QWORD *)(v131 + 48);
              *(_QWORD *)(v131 + 32) = 0;
              *(_QWORD *)(v131 + 40) = 0;
              v132 = *(_OWORD *)(v131 + 56);
              *(_QWORD *)(v131 + 48) = 0;
              *(_QWORD *)(v131 + 56) = 0;
              v224 = *(_QWORD *)(v131 + 72);
              v243 = *(_QWORD *)(v131 + 80);
              *(_QWORD *)(v131 + 64) = 0;
              *(_QWORD *)(v131 + 72) = 0;
              v230 = v132;
              v237 = *(_OWORD *)(v131 + 88);
              *(_QWORD *)(v131 + 88) = 0;
              *(_QWORD *)(v131 + 96) = 0;
              *(_QWORD *)(v131 + 80) = 0;
              do
              {
                v133 = v126;
                v134 = *(_OWORD *)(v126 + 16);
                *(_OWORD *)v129 = *(_OWORD *)v126;
                *(_OWORD *)(v129 + 16) = v134;
                v135 = *(void **)(v129 + 32);
                if (v135)
                {
                  *(_QWORD *)(v129 + 40) = v135;
                  operator delete(v135);
                  *(_QWORD *)(v129 + 32) = 0;
                  *(_QWORD *)(v129 + 40) = 0;
                  *(_QWORD *)(v129 + 48) = 0;
                }
                *(_OWORD *)(v129 + 32) = *(_OWORD *)(v133 + 32);
                *(_QWORD *)(v129 + 48) = *(_QWORD *)(v133 + 48);
                *(_QWORD *)(v133 + 32) = 0;
                *(_QWORD *)(v133 + 40) = 0;
                *(_QWORD *)(v133 + 48) = 0;
                v136 = *(void **)(v129 + 56);
                if (v136)
                {
                  *(_QWORD *)(v129 + 64) = v136;
                  operator delete(v136);
                  *(_QWORD *)(v129 + 56) = 0;
                  *(_QWORD *)(v129 + 64) = 0;
                  *(_QWORD *)(v129 + 72) = 0;
                }
                *(_OWORD *)(v129 + 56) = *(_OWORD *)(v133 + 56);
                *(_QWORD *)(v129 + 72) = *(_QWORD *)(v133 + 72);
                *(_QWORD *)(v133 + 56) = 0;
                *(_QWORD *)(v133 + 64) = 0;
                *(_QWORD *)(v133 + 72) = 0;
                v137 = *(void **)(v129 + 80);
                if (v137)
                {
                  operator delete(v137);
                  *(_QWORD *)(v129 + 80) = 0;
                  *(_QWORD *)(v129 + 88) = 0;
                  *(_QWORD *)(v129 + 96) = 0;
                }
                *(_QWORD *)(v129 + 80) = *(_QWORD *)(v133 + 80);
                *(_QWORD *)(v129 + 88) = *(_QWORD *)(v133 + 88);
                *(_QWORD *)(v129 + 96) = *(_QWORD *)(v133 + 96);
                *(_QWORD *)(v133 + 80) = 0;
                *(_QWORD *)(v133 + 88) = 0;
                *(_QWORD *)(v133 + 96) = 0;
                if (v122 < v125)
                  break;
                v138 = (2 * v125) | 1;
                v126 = a1 + 104 * v138;
                if (2 * v125 + 2 < v10)
                {
                  v139 = *(_QWORD *)(v126 + 24);
                  v140 = *(_QWORD *)(v126 + 128);
                  v126 += 104 * (v139 > v140);
                  if (v139 > v140)
                    v138 = 2 * v125 + 2;
                }
                v129 = v133;
                v125 = v138;
              }
              while (*(_QWORD *)(v126 + 24) <= v130);
              *(_OWORD *)v133 = v252;
              *(_QWORD *)(v133 + 16) = v258;
              *(_QWORD *)(v133 + 24) = v130;
              v141 = *(void **)(v133 + 32);
              if (v141)
              {
                *(_QWORD *)(v133 + 40) = v141;
                operator delete(v141);
              }
              *(_OWORD *)(v133 + 32) = v220;
              *(_QWORD *)(v133 + 48) = v217;
              v142 = *(void **)(v133 + 56);
              if (v142)
              {
                *(_QWORD *)(v133 + 64) = v142;
                operator delete(v142);
              }
              *(_OWORD *)(v133 + 56) = v230;
              *(_QWORD *)(v133 + 72) = v224;
              v143 = *(void **)(v133 + 80);
              if (v143)
                operator delete(v143);
              *(_QWORD *)(v133 + 80) = v243;
              *(_OWORD *)(v133 + 88) = v237;
            }
          }
          v123 = v124 - 1;
        }
        while (v124);
        v144 = v9 / 0x68uLL;
        v145 = (__int128 *)v247;
        while (2)
        {
          v146 = 0;
          v253 = *(_OWORD *)a1;
          v259 = *(_OWORD *)(a1 + 16);
          v213 = *(_QWORD *)(a1 + 40);
          v215 = *(_QWORD *)(a1 + 32);
          v211 = *(_QWORD *)(a1 + 48);
          v225 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v218 = *(_QWORD *)(a1 + 64);
          v221 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          v244 = *(_QWORD *)(a1 + 80);
          v238 = *(_QWORD *)(a1 + 88);
          v231 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          v147 = (unint64_t)(v144 - 2) >> 1;
          v148 = a1;
          *(_QWORD *)(a1 + 96) = 0;
          v248 = v144;
          while (2)
          {
            v150 = v148 + 104 * v146 + 104;
            v151 = 2 * v146;
            v146 = (2 * v146) | 1;
            v152 = v151 + 2;
            if (v151 + 2 >= v144)
            {
              v158 = *(_OWORD *)(v150 + 16);
              *(_OWORD *)v148 = *(_OWORD *)v150;
              *(_OWORD *)(v148 + 16) = v158;
              v157 = (_QWORD *)(v148 + 32);
              v156 = *(void **)(v148 + 32);
              if (!v156)
                goto LABEL_204;
              goto LABEL_203;
            }
            v153 = *(_QWORD *)(v150 + 24);
            v154 = *(_QWORD *)(v150 + 128);
            v150 += 104 * (v153 > v154);
            if (v153 > v154)
              v146 = v152;
            v155 = *(_OWORD *)(v150 + 16);
            *(_OWORD *)v148 = *(_OWORD *)v150;
            *(_OWORD *)(v148 + 16) = v155;
            v157 = (_QWORD *)(v148 + 32);
            v156 = *(void **)(v148 + 32);
            if (v156)
            {
LABEL_203:
              *(_QWORD *)(v148 + 40) = v156;
              operator delete(v156);
              *v157 = 0;
              v157[1] = 0;
              v157[2] = 0;
            }
LABEL_204:
            v159 = (_QWORD *)(v150 + 32);
            *(_OWORD *)(v148 + 32) = *(_OWORD *)(v150 + 32);
            *(_QWORD *)(v148 + 48) = *(_QWORD *)(v150 + 48);
            *(_QWORD *)(v150 + 32) = 0;
            *(_QWORD *)(v150 + 40) = 0;
            *(_QWORD *)(v150 + 48) = 0;
            v160 = *(void **)(v148 + 56);
            if (v160)
            {
              *(_QWORD *)(v148 + 64) = v160;
              operator delete(v160);
              *(_QWORD *)(v148 + 56) = 0;
              *(_QWORD *)(v148 + 64) = 0;
              *(_QWORD *)(v148 + 72) = 0;
            }
            v161 = (_QWORD *)(v150 + 56);
            *(_OWORD *)(v148 + 56) = *(_OWORD *)(v150 + 56);
            *(_QWORD *)(v148 + 72) = *(_QWORD *)(v150 + 72);
            *(_QWORD *)(v150 + 56) = 0;
            *(_QWORD *)(v150 + 64) = 0;
            *(_QWORD *)(v150 + 72) = 0;
            v162 = *(void **)(v148 + 80);
            if (v162)
            {
              operator delete(v162);
              *(_QWORD *)(v148 + 80) = 0;
              *(_QWORD *)(v148 + 88) = 0;
              *(_QWORD *)(v148 + 96) = 0;
            }
            v149 = (_QWORD *)(v150 + 80);
            *(_QWORD *)(v148 + 80) = *(_QWORD *)(v150 + 80);
            *(_QWORD *)(v148 + 88) = *(_QWORD *)(v150 + 88);
            *(_QWORD *)(v148 + 96) = *(_QWORD *)(v150 + 96);
            *(_QWORD *)(v150 + 80) = 0;
            *(_QWORD *)(v150 + 88) = 0;
            *(_QWORD *)(v150 + 96) = 0;
            v148 = v150;
            v144 = v248;
            if (v146 <= v147)
              continue;
            break;
          }
          if ((__int128 *)v150 == (__int128 *)((char *)v145 - 104))
          {
            v164 = (__int128 *)((char *)v145 - 104);
            result = *(double *)&v253;
            *(_OWORD *)v150 = v253;
            *(_OWORD *)(v150 + 16) = v259;
            v188 = *(void **)(v150 + 32);
            if (v188)
            {
              *(_QWORD *)(v150 + 40) = v188;
              operator delete(v188);
            }
            *(_QWORD *)(v150 + 32) = v215;
            *(_QWORD *)(v150 + 40) = v213;
            *(_QWORD *)(v150 + 48) = v211;
            v189 = *(void **)(v150 + 56);
            if (v189)
            {
              *(_QWORD *)(v150 + 64) = v189;
              operator delete(v189);
            }
            *(_QWORD *)(v150 + 56) = v225;
            *(_QWORD *)(v150 + 64) = v218;
            *(_QWORD *)(v150 + 72) = v221;
            v190 = *(void **)(v150 + 80);
            if (v190)
              operator delete(v190);
            *(_QWORD *)(v150 + 80) = v244;
            *(_QWORD *)(v150 + 88) = v238;
            *(_QWORD *)(v150 + 96) = v231;
          }
          else
          {
            v163 = *(__int128 *)((char *)v145 - 88);
            v164 = (__int128 *)((char *)v145 - 104);
            *(_OWORD *)v150 = *(__int128 *)((char *)v145 - 104);
            *(_OWORD *)(v150 + 16) = v163;
            v165 = *(void **)(v150 + 32);
            if (v165)
            {
              *(_QWORD *)(v150 + 40) = v165;
              operator delete(v165);
              *v159 = 0;
              *(_QWORD *)(v150 + 40) = 0;
              *(_QWORD *)(v150 + 48) = 0;
            }
            v166 = (_QWORD *)v145 - 9;
            *(_OWORD *)(v150 + 32) = *(__int128 *)((char *)v145 - 72);
            *(_QWORD *)(v150 + 48) = *((_QWORD *)v145 - 7);
            *v166 = 0;
            v166[1] = 0;
            v166[2] = 0;
            v167 = *(void **)(v150 + 56);
            if (v167)
            {
              *(_QWORD *)(v150 + 64) = v167;
              operator delete(v167);
              *v161 = 0;
              *(_QWORD *)(v150 + 64) = 0;
              *(_QWORD *)(v150 + 72) = 0;
            }
            v168 = v145 - 3;
            *(_OWORD *)(v150 + 56) = *(v145 - 3);
            *(_QWORD *)(v150 + 72) = *((_QWORD *)v145 - 4);
            *(_QWORD *)v168 = 0;
            *((_QWORD *)v168 + 1) = 0;
            *((_QWORD *)v168 + 2) = 0;
            v169 = *(void **)(v150 + 80);
            if (v169)
            {
              operator delete(v169);
              *v149 = 0;
              *(_QWORD *)(v150 + 88) = 0;
              *(_QWORD *)(v150 + 96) = 0;
            }
            *(_QWORD *)(v150 + 80) = *((_QWORD *)v145 - 3);
            *(_QWORD *)(v150 + 88) = *((_QWORD *)v145 - 2);
            *(_QWORD *)(v150 + 96) = *((_QWORD *)v145 - 1);
            *((_QWORD *)v145 - 3) = 0;
            *((_QWORD *)v145 - 2) = 0;
            *((_QWORD *)v145 - 1) = 0;
            result = *(double *)&v253;
            *v164 = v253;
            *(__int128 *)((char *)v145 - 88) = v259;
            v170 = (void *)*((_QWORD *)v145 - 9);
            if (v170)
            {
              *((_QWORD *)v145 - 8) = v170;
              operator delete(v170);
            }
            *((_QWORD *)v145 - 9) = v215;
            *((_QWORD *)v145 - 8) = v213;
            *((_QWORD *)v145 - 7) = v211;
            v171 = (void *)*((_QWORD *)v145 - 6);
            if (v171)
            {
              *((_QWORD *)v145 - 5) = v171;
              operator delete(v171);
            }
            *((_QWORD *)v145 - 6) = v225;
            *((_QWORD *)v145 - 5) = v218;
            *((_QWORD *)v145 - 4) = v221;
            v172 = (void *)*((_QWORD *)v145 - 3);
            if (v172)
              operator delete(v172);
            *((_QWORD *)v145 - 3) = v244;
            *((_QWORD *)v145 - 2) = v238;
            *((_QWORD *)v145 - 1) = v231;
            v173 = v150 + 104 - a1;
            if (v173 >= 105)
            {
              v174 = (v173 / 0x68uLL - 2) >> 1;
              v175 = a1 + 104 * v174;
              v176 = *(_QWORD *)(v150 + 24);
              if (*(_QWORD *)(v175 + 24) > v176)
              {
                v262 = *(_QWORD *)(v150 + 16);
                v261 = *(_OWORD *)v150;
                v177 = *(_OWORD *)(v150 + 32);
                v178 = *(_QWORD *)(v150 + 48);
                *(_QWORD *)(v150 + 40) = 0;
                *(_QWORD *)(v150 + 48) = 0;
                *v159 = 0;
                v226 = v177;
                v232 = *(_OWORD *)(v150 + 56);
                v179 = *(_QWORD *)(v150 + 72);
                v245 = *(_QWORD *)(v150 + 80);
                *(_QWORD *)(v150 + 64) = 0;
                *(_QWORD *)(v150 + 72) = 0;
                *v161 = 0;
                v239 = *(_OWORD *)(v150 + 88);
                *(_QWORD *)(v150 + 88) = 0;
                *(_QWORD *)(v150 + 96) = 0;
                *v149 = 0;
                do
                {
                  v180 = v175;
                  v181 = *(_OWORD *)(v175 + 16);
                  *(_OWORD *)v150 = *(_OWORD *)v175;
                  *(_OWORD *)(v150 + 16) = v181;
                  v182 = *(void **)(v150 + 32);
                  if (v182)
                  {
                    *(_QWORD *)(v150 + 40) = v182;
                    operator delete(v182);
                    *(_QWORD *)(v150 + 32) = 0;
                    *(_QWORD *)(v150 + 40) = 0;
                    *(_QWORD *)(v150 + 48) = 0;
                  }
                  *(_OWORD *)(v150 + 32) = *(_OWORD *)(v180 + 32);
                  *(_QWORD *)(v150 + 48) = *(_QWORD *)(v180 + 48);
                  *(_QWORD *)(v180 + 32) = 0;
                  *(_QWORD *)(v180 + 40) = 0;
                  *(_QWORD *)(v180 + 48) = 0;
                  v183 = *(void **)(v150 + 56);
                  if (v183)
                  {
                    *(_QWORD *)(v150 + 64) = v183;
                    operator delete(v183);
                    *(_QWORD *)(v150 + 56) = 0;
                    *(_QWORD *)(v150 + 64) = 0;
                    *(_QWORD *)(v150 + 72) = 0;
                  }
                  *(_OWORD *)(v150 + 56) = *(_OWORD *)(v180 + 56);
                  *(_QWORD *)(v150 + 72) = *(_QWORD *)(v180 + 72);
                  *(_QWORD *)(v180 + 56) = 0;
                  *(_QWORD *)(v180 + 64) = 0;
                  *(_QWORD *)(v180 + 72) = 0;
                  v184 = *(void **)(v150 + 80);
                  if (v184)
                  {
                    operator delete(v184);
                    *(_QWORD *)(v150 + 80) = 0;
                    *(_QWORD *)(v150 + 88) = 0;
                    *(_QWORD *)(v150 + 96) = 0;
                  }
                  *(_QWORD *)(v150 + 80) = *(_QWORD *)(v180 + 80);
                  *(_QWORD *)(v150 + 88) = *(_QWORD *)(v180 + 88);
                  *(_QWORD *)(v150 + 96) = *(_QWORD *)(v180 + 96);
                  *(_QWORD *)(v180 + 80) = 0;
                  *(_QWORD *)(v180 + 88) = 0;
                  *(_QWORD *)(v180 + 96) = 0;
                  if (!v174)
                    break;
                  v174 = (v174 - 1) >> 1;
                  v175 = a1 + 104 * v174;
                  v150 = v180;
                }
                while (*(_QWORD *)(v175 + 24) > v176);
                *(_OWORD *)v180 = v261;
                *(_QWORD *)(v180 + 16) = v262;
                *(_QWORD *)(v180 + 24) = v176;
                v185 = *(void **)(v180 + 32);
                if (v185)
                {
                  *(_QWORD *)(v180 + 40) = v185;
                  operator delete(v185);
                }
                *(_OWORD *)(v180 + 32) = v226;
                *(_QWORD *)(v180 + 48) = v178;
                v186 = *(void **)(v180 + 56);
                if (v186)
                {
                  *(_QWORD *)(v180 + 64) = v186;
                  operator delete(v186);
                }
                *(_OWORD *)(v180 + 56) = v232;
                *(_QWORD *)(v180 + 72) = v179;
                v187 = *(void **)(v180 + 80);
                if (v187)
                  operator delete(v187);
                *(_QWORD *)(v180 + 80) = v245;
                result = *(double *)&v239;
                *(_OWORD *)(v180 + 88) = v239;
              }
            }
          }
          v144 = v248 - 1;
          v145 = v164;
          if (v248 > 2)
            continue;
          return result;
        }
    }
  }
}

  v120 = a2 - 3;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = *(a2 - 3);
        v53 = *v7;
        if (*(a2 - 2) - v52 > (unint64_t)(v7[1] - *v7))
        {
          *v7 = v52;
          *(a2 - 3) = v53;
          v54 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v54;
          v55 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v55;
        }
        return;
      case 3:
        sub_20EDC9348(v7, v7 + 3, v120);
        return;
      case 4:
        sub_20EDC9694(v7, v7 + 3, v7 + 6, v120);
        return;
      case 5:
        sub_20EDC9208(v7, v7 + 3, v7 + 6, v7 + 9, v120);
        return;
      default:
        if (v8 > 575)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v70 = (unint64_t)(v9 - 2) >> 1;
              v71 = v70;
              do
              {
                v72 = v71;
                if (v70 >= v71)
                {
                  v73 = (2 * v71) | 1;
                  v74 = &v7[3 * v73];
                  if (2 * v72 + 2 >= v9)
                  {
                    v78 = *v74;
                  }
                  else
                  {
                    v75 = v74[1] - *v74;
                    v76 = v74[4] - v74[3];
                    v77 = v75 > v76;
                    if (v75 <= v76)
                      v78 = *v74;
                    else
                      v78 = v74[3];
                    if (v77)
                    {
                      v74 += 3;
                      v73 = 2 * v72 + 2;
                    }
                  }
                  v79 = &v7[3 * v72];
                  v80 = *v79;
                  v81 = v79[1];
                  v82 = v74[1] - v78;
                  v83 = v81 - *v79;
                  if (v82 <= v83)
                  {
                    v84 = v7[3 * v72 + 2];
                    *v79 = 0;
                    v79[1] = 0;
                    v79[2] = 0;
                    v85 = *v74;
                    while (1)
                    {
                      v86 = v74;
                      v87 = v74[1];
                      *v79 = v85;
                      v79[1] = v87;
                      v79[2] = v86[2];
                      *v86 = 0;
                      v86[1] = 0;
                      v86[2] = 0;
                      if (v70 < v73)
                        break;
                      v88 = (2 * v73) | 1;
                      v74 = &v7[3 * v88];
                      v73 = 2 * v73 + 2;
                      if (v73 < v9)
                      {
                        v85 = *v74;
                        if (v74[1] - *v74 <= (unint64_t)(v74[4] - v74[3]))
                        {
                          v73 = v88;
                        }
                        else
                        {
                          v85 = v74[3];
                          v74 += 3;
                        }
                        v79 = v86;
                        if (v74[1] - v85 > v83)
                          break;
                      }
                      else
                      {
                        v73 = v88;
                        v85 = *v74;
                        v79 = v86;
                        if (v74[1] - *v74 > v83)
                          break;
                      }
                    }
                    *v86 = v80;
                    v86[1] = v81;
                    v86[2] = v84;
                  }
                }
                v71 = v72 - 1;
              }
              while (v72);
              v89 = v8 / 0x18uLL;
              do
              {
                v90 = 0;
                v91 = *v7;
                v92 = v7[1];
                v93 = v7[2];
                v7[1] = 0;
                v7[2] = 0;
                v94 = v7;
                *v7 = 0;
                do
                {
                  v96 = &v94[3 * v90 + 3];
                  v98 = (2 * v90) | 1;
                  v90 = 2 * v90 + 2;
                  if (v90 < v89)
                  {
                    v95 = *v96;
                    if (v96[1] - *v96 <= (unint64_t)(v96[4] - v96[3]))
                    {
                      v90 = v98;
                    }
                    else
                    {
                      v95 = v96[3];
                      v96 += 3;
                    }
                  }
                  else
                  {
                    v95 = *v96;
                    v90 = v98;
                  }
                  v97 = v96[1];
                  *v94 = v95;
                  v94[1] = v97;
                  v94[2] = v96[2];
                  *v96 = 0;
                  v96[1] = 0;
                  v96[2] = 0;
                  v94 = v96;
                }
                while (v90 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                if (v96 == a2 - 3)
                {
                  *v96 = v91;
                  v96[1] = v92;
                  v96[2] = v93;
                }
                else
                {
                  *(_OWORD *)v96 = *(_OWORD *)(a2 - 3);
                  v96[2] = *(a2 - 1);
                  *(a2 - 3) = v91;
                  *(a2 - 2) = v92;
                  *(a2 - 1) = v93;
                  v99 = (char *)v96 - (char *)v7 + 24;
                  if (v99 >= 25)
                  {
                    v100 = (v99 / 0x18uLL - 2) >> 1;
                    v101 = &v7[3 * v100];
                    v102 = *v96;
                    v103 = v96[1];
                    v104 = v103 - *v96;
                    if (v101[1] - *v101 > v104)
                    {
                      v105 = v96[2];
                      *v96 = 0;
                      v96[1] = 0;
                      v96[2] = 0;
                      v106 = *v101;
                      do
                      {
                        v107 = v101;
                        v108 = v101[1];
                        *v96 = v106;
                        v96[1] = v108;
                        v96[2] = v107[2];
                        *v107 = 0;
                        v107[1] = 0;
                        v107[2] = 0;
                        if (!v100)
                          break;
                        v100 = (v100 - 1) >> 1;
                        v101 = &v7[3 * v100];
                        v106 = *v101;
                        v96 = v107;
                      }
                      while (v101[1] - *v101 > v104);
                      *v107 = v102;
                      v107[1] = v103;
                      v107[2] = v105;
                    }
                  }
                }
                a2 -= 3;
                v77 = v89-- <= 2;
              }
              while (!v77);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = &v7[3 * ((unint64_t)v9 >> 1)];
          if ((unint64_t)v8 >= 0xC01)
          {
            sub_20EDC9348(a1, &a1[3 * v10], v120);
            v12 = 3 * v10;
            sub_20EDC9348(a1 + 3, &a1[v12 - 3], a2 - 6);
            sub_20EDC9348(a1 + 6, &a1[v12 + 3], a2 - 9);
            sub_20EDC9348(&a1[v12 - 3], v11, &a1[v12 + 3]);
            v13 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *(_OWORD *)v11 = v13;
            v14 = a1[2];
            a1[2] = a1[v12 + 2];
            a1[v12 + 2] = v14;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v16 = a1[1];
            v17 = v16 - v15;
            if (*(a1 - 2) - *(a1 - 3) > (unint64_t)(v16 - v15))
              goto LABEL_14;
            v18 = a1[2];
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
            if (v17 <= *(a2 - 2) - *(a2 - 3))
            {
              v40 = a1 + 3;
              do
              {
                v7 = v40;
                if (v40 >= a2)
                  break;
                v41 = v40[1] - *v40;
                v40 += 3;
              }
              while (v17 <= v41);
            }
            else
            {
              v7 = a1;
              do
              {
                v19 = v7[3];
                v20 = v7[4];
                v7 += 3;
              }
              while (v17 <= v20 - v19);
            }
            v42 = a2;
            if (v7 < a2)
            {
              v42 = a2;
              do
              {
                v43 = *(v42 - 3);
                v44 = *(v42 - 2);
                v42 -= 3;
              }
              while (v17 > v44 - v43);
            }
            if (v7 >= v42)
            {
              v51 = 0;
              if (v7 - 3 != a1)
                goto LABEL_52;
            }
            else
            {
              v45 = *v7;
              v46 = *v42;
              do
              {
                *v7 = v46;
                *v42 = v45;
                v47 = v7[1];
                v7[1] = v42[1];
                v42[1] = v47;
                v48 = v7[2];
                v7[2] = v42[2];
                v42[2] = v48;
                do
                {
                  v45 = v7[3];
                  v49 = v7[4];
                  v7 += 3;
                }
                while (v17 <= v49 - v45);
                do
                {
                  v46 = *(v42 - 3);
                  v50 = *(v42 - 2);
                  v42 -= 3;
                }
                while (v17 > v50 - v46);
              }
              while (v7 < v42);
              v51 = (void *)*a1;
              if (v7 - 3 != a1)
              {
LABEL_52:
                if (v51)
                {
                  a1[1] = (uint64_t)v51;
                  operator delete(v51);
                  *a1 = 0;
                  a1[1] = 0;
                  a1[2] = 0;
                }
                *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
                a1[2] = *(v7 - 1);
                goto LABEL_58;
              }
            }
            if (v51)
            {
              *(v7 - 2) = (uint64_t)v51;
              operator delete(v51);
            }
LABEL_58:
            a4 = 0;
            *(v7 - 3) = v15;
            *(v7 - 2) = v16;
            *(v7 - 1) = v18;
            continue;
          }
          sub_20EDC9348(&a1[3 * v10], a1, v120);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v16 = a1[1];
          v17 = v16 - v15;
LABEL_14:
          v21 = 0;
          v22 = a1[2];
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          do
          {
            v23 = a1[v21 + 3];
            v24 = a1[v21 + 4] - v23;
            v21 += 3;
          }
          while (v24 > v17);
          v25 = &a1[v21];
          v26 = a2;
          if (v21 == 3)
          {
            v26 = a2;
            do
            {
              if (v25 >= v26)
                break;
              v29 = *(v26 - 3);
              v30 = *(v26 - 2);
              v26 -= 3;
            }
            while (v30 - v29 <= v17);
          }
          else
          {
            do
            {
              v27 = *(v26 - 3);
              v28 = *(v26 - 2);
              v26 -= 3;
            }
            while (v28 - v27 <= v17);
          }
          if (v25 >= v26)
          {
            v37 = 0;
            v7 = v25;
            v38 = v25 - 3;
            if (v25 - 3 == a1)
              goto LABEL_33;
          }
          else
          {
            v31 = *v26;
            v7 = v25;
            v32 = v26;
            do
            {
              *v7 = v31;
              *v32 = v23;
              v33 = v7[1];
              v7[1] = v32[1];
              v32[1] = v33;
              v34 = v7[2];
              v7[2] = v32[2];
              v32[2] = v34;
              do
              {
                v23 = v7[3];
                v35 = v7[4];
                v7 += 3;
              }
              while (v35 - v23 > v17);
              do
              {
                v31 = *(v32 - 3);
                v36 = *(v32 - 2);
                v32 -= 3;
              }
              while (v36 - v31 <= v17);
            }
            while (v7 < v32);
            v37 = (void *)*a1;
            v38 = v7 - 3;
            if (v7 - 3 == a1)
            {
LABEL_33:
              if (v37)
              {
                *(v7 - 2) = (uint64_t)v37;
                operator delete(v37);
              }
              goto LABEL_35;
            }
          }
          if (v37)
          {
            a1[1] = (uint64_t)v37;
            operator delete(v37);
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
          a1[2] = *(v7 - 1);
LABEL_35:
          *(v7 - 3) = v15;
          *(v7 - 2) = v16;
          *(v7 - 1) = v22;
          if (v25 < v26)
            goto LABEL_38;
          v39 = sub_20EDC946C(a1, v38);
          if (!sub_20EDC946C(v7, a2))
          {
            if (v39)
              continue;
LABEL_38:
            sub_20EDC88DC(a1, v38, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v38;
          if (v39)
            return;
          goto LABEL_1;
        }
        v56 = v7 + 3;
        v58 = v7 == a2 || v56 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v58)
          {
            v59 = 0;
            v60 = v7;
            do
            {
              v62 = v56;
              v63 = v60[3];
              v64 = v60[4];
              v65 = *v60;
              if (v64 - v63 > (unint64_t)(v60[1] - *v60))
              {
                v66 = v60[5];
                *v62 = 0;
                v62[1] = 0;
                v67 = v59;
                v62[2] = 0;
                do
                {
                  v68 = (uint64_t *)((char *)v7 + v67);
                  v69 = *(uint64_t *)((char *)v7 + v67 + 16);
                  v68[4] = *(uint64_t *)((char *)v7 + v67 + 8);
                  v68[5] = v69;
                  v68[2] = 0;
                  v68[3] = v65;
                  *v68 = 0;
                  v68[1] = 0;
                  if (!v67)
                  {
                    v61 = v7;
                    goto LABEL_78;
                  }
                  v65 = *(v68 - 3);
                  v67 -= 24;
                }
                while (v64 - v63 > (unint64_t)(*(v68 - 2) - v65));
                v61 = (uint64_t *)((char *)v7 + v67 + 24);
LABEL_78:
                *v61 = v63;
                v61[1] = v64;
                v61[2] = v66;
              }
              v56 = v62 + 3;
              v59 += 24;
              v60 = v62;
            }
            while (v62 + 3 != a2);
          }
        }
        else if (!v58)
        {
          v109 = v7 + 5;
          do
          {
            v110 = v56;
            v111 = a1[3];
            v112 = a1[4];
            v113 = *a1;
            if (v112 - v111 > (unint64_t)(a1[1] - *a1))
            {
              v114 = a1[5];
              *v110 = 0;
              v110[1] = 0;
              v110[2] = 0;
              v115 = v109;
              v116 = v109;
              do
              {
                v117 = *(v115 - 4);
                *(v115 - 2) = v113;
                *(v115 - 1) = v117;
                v118 = *(v116 - 3);
                v116 -= 3;
                *v115 = v118;
                *v116 = 0;
                *(v115 - 5) = 0;
                *(v115 - 4) = 0;
                v113 = *(v115 - 8);
                v119 = *(v115 - 7) - v113;
                v115 = v116;
              }
              while (v112 - v111 > v119);
              *(v116 - 2) = v111;
              *(v116 - 1) = v112;
              *v116 = v114;
            }
            v56 = v110 + 3;
            v109 += 3;
            a1 = v110;
          }
          while (v110 + 3 != a2);
        }
        return;
    }
  }
}

  v233 = (unint64_t *)(a2 - 496);
  v234 = (unint64_t *)(a2 - 248);
  v241 = a2;
  v232 = (unint64_t *)(a2 - 744);
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v241;
    v8 = v241 - v6;
    v9 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v241 - v6) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v98 = *(_QWORD *)v6;
        if (*(_QWORD *)(v241 - 248) < *(_QWORD *)v6)
        {
          v99 = *(_OWORD *)(v6 + 8);
          v100 = *(_QWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v312 = *(_OWORD *)(v6 + 64);
          v320 = *(_OWORD *)(v6 + 80);
          v328 = *(_OWORD *)(v6 + 96);
          v336 = *(_OWORD *)(v6 + 112);
          v296 = *(_OWORD *)(v6 + 32);
          v304 = *(_OWORD *)(v6 + 48);
          v360 = *(_OWORD *)(v6 + 160);
          v368 = *(_OWORD *)(v6 + 176);
          v344 = *(_OWORD *)(v6 + 128);
          v352 = *(_OWORD *)(v6 + 144);
          v400 = *(_QWORD *)(v6 + 240);
          v384 = *(_OWORD *)(v6 + 208);
          v392 = *(_OWORD *)(v6 + 224);
          v376 = *(_OWORD *)(v6 + 192);
          *(_QWORD *)v6 = *(_QWORD *)(v241 - 248);
          *(_OWORD *)(v6 + 8) = *(_OWORD *)(v241 - 240);
          *(_QWORD *)(v6 + 24) = *(_QWORD *)(v241 - 224);
          *(_QWORD *)(v241 - 240) = 0;
          *(_QWORD *)(v241 - 232) = 0;
          *(_QWORD *)(v241 - 224) = 0;
          v101 = *(_OWORD *)(v241 - 200);
          *(_OWORD *)(v6 + 32) = *(_OWORD *)(v241 - 216);
          *(_OWORD *)(v6 + 48) = v101;
          v102 = *(_OWORD *)(v241 - 168);
          v103 = *(_OWORD *)(v241 - 136);
          v104 = *(_OWORD *)(v241 - 184);
          *(_OWORD *)(v6 + 96) = *(_OWORD *)(v241 - 152);
          *(_OWORD *)(v6 + 112) = v103;
          *(_OWORD *)(v6 + 64) = v104;
          *(_OWORD *)(v6 + 80) = v102;
          v105 = *(_OWORD *)(v241 - 104);
          v106 = *(_OWORD *)(v241 - 72);
          v107 = *(_OWORD *)(v241 - 120);
          *(_OWORD *)(v6 + 160) = *(_OWORD *)(v241 - 88);
          *(_OWORD *)(v6 + 176) = v106;
          *(_OWORD *)(v6 + 128) = v107;
          *(_OWORD *)(v6 + 144) = v105;
          v108 = *(_OWORD *)(v241 - 40);
          v109 = *(_OWORD *)(v241 - 24);
          v110 = *(_OWORD *)(v241 - 56);
          *(_QWORD *)(v6 + 240) = *(_QWORD *)(v241 - 8);
          *(_OWORD *)(v6 + 208) = v108;
          *(_OWORD *)(v6 + 224) = v109;
          *(_OWORD *)(v6 + 192) = v110;
          *(_QWORD *)(v241 - 248) = v98;
          v111 = *(void **)(v241 - 240);
          if (v111)
          {
            *(_QWORD *)(v241 - 232) = v111;
            v245 = v99;
            operator delete(v111);
            v99 = v245;
          }
          *(_OWORD *)(v241 - 240) = v99;
          *(_QWORD *)(v241 - 224) = v100;
          *(_OWORD *)(v241 - 216) = v296;
          *(_OWORD *)(v241 - 200) = v304;
          *(_OWORD *)(v241 - 152) = v328;
          *(_OWORD *)(v241 - 136) = v336;
          *(_OWORD *)(v241 - 184) = v312;
          *(_OWORD *)(v241 - 168) = v320;
          *(_OWORD *)(v241 - 88) = v360;
          *(_OWORD *)(v241 - 72) = v368;
          *(_OWORD *)(v241 - 120) = v344;
          *(_OWORD *)(v241 - 104) = v352;
          result = *(double *)&v376;
          *(_QWORD *)(v241 - 8) = v400;
          *(_OWORD *)(v241 - 40) = v384;
          *(_OWORD *)(v241 - 24) = v392;
          *(_OWORD *)(v241 - 56) = v376;
        }
        return result;
      case 3uLL:
        *(_QWORD *)&result = sub_20EDF8244((__n128 *)v6, (__n128 *)(v6 + 248), v234).n128_u64[0];
        return result;
      case 4uLL:
        *(_QWORD *)&result = sub_20EDF8C44((unint64_t *)v6, (unint64_t *)(v6 + 248), (unint64_t *)(v6 + 496), v234).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = sub_20EDF7D40(v6, v6 + 248, v6 + 496, v6 + 744, (uint64_t)v234).n128_u64[0];
        return result;
      default:
        if (v8 <= 5951)
        {
          v112 = v6 + 248;
          v114 = v6 == v241 || v112 == v241;
          if ((a4 & 1) != 0)
          {
            if (!v114)
            {
              v115 = 0;
              v116 = v6;
              do
              {
                v117 = v112;
                v118 = *(_QWORD *)(v116 + 248);
                if (v118 < *(_QWORD *)v116)
                {
                  v329 = *(_OWORD *)(v116 + 344);
                  v337 = *(_OWORD *)(v116 + 360);
                  v119 = *(_OWORD *)(v116 + 296);
                  v313 = *(_OWORD *)(v116 + 312);
                  v321 = *(_OWORD *)(v116 + 328);
                  v120 = *(_OWORD *)(v116 + 440);
                  v361 = *(_OWORD *)(v116 + 408);
                  v369 = *(_OWORD *)(v116 + 424);
                  v345 = *(_OWORD *)(v116 + 376);
                  v353 = *(_OWORD *)(v116 + 392);
                  v385 = *(_OWORD *)(v116 + 456);
                  v393 = *(_OWORD *)(v116 + 472);
                  v121 = *(_QWORD *)(v116 + 256);
                  *(_QWORD *)(v116 + 256) = 0;
                  v377 = v120;
                  v246 = *(_OWORD *)(v116 + 264);
                  v122 = *(_OWORD *)(v116 + 280);
                  *(_QWORD *)(v116 + 272) = 0;
                  *(_QWORD *)(v116 + 264) = 0;
                  v401 = *(_QWORD *)(v116 + 488);
                  v297 = v122;
                  v305 = v119;
                  v123 = v115;
                  v124 = *(_QWORD *)v116;
                  while (1)
                  {
                    v125 = v123;
                    v126 = v6 + v123;
                    *(_QWORD *)(v6 + v123 + 248) = v124;
                    v127 = *(void **)(v6 + v123 + 256);
                    if (v127)
                    {
                      *(_QWORD *)(v126 + 264) = v127;
                      operator delete(v127);
                      *(_QWORD *)(v126 + 264) = 0;
                      *(_QWORD *)(v126 + 272) = 0;
                    }
                    *(_OWORD *)(v126 + 256) = *(_OWORD *)(v126 + 8);
                    *(_QWORD *)(v126 + 272) = *(_QWORD *)(v126 + 24);
                    *(_QWORD *)(v126 + 16) = 0;
                    *(_QWORD *)(v126 + 24) = 0;
                    *(_QWORD *)(v126 + 8) = 0;
                    v128 = *(_OWORD *)(v126 + 208);
                    *(_OWORD *)(v126 + 440) = *(_OWORD *)(v126 + 192);
                    *(_OWORD *)(v126 + 456) = v128;
                    *(_OWORD *)(v126 + 472) = *(_OWORD *)(v126 + 224);
                    *(_QWORD *)(v126 + 488) = *(_QWORD *)(v126 + 240);
                    v129 = *(_OWORD *)(v126 + 144);
                    *(_OWORD *)(v126 + 376) = *(_OWORD *)(v126 + 128);
                    *(_OWORD *)(v126 + 392) = v129;
                    v130 = *(_OWORD *)(v126 + 176);
                    *(_OWORD *)(v126 + 408) = *(_OWORD *)(v126 + 160);
                    *(_OWORD *)(v126 + 424) = v130;
                    v131 = *(_OWORD *)(v126 + 80);
                    *(_OWORD *)(v126 + 312) = *(_OWORD *)(v126 + 64);
                    *(_OWORD *)(v126 + 328) = v131;
                    v132 = *(_OWORD *)(v126 + 112);
                    *(_OWORD *)(v126 + 344) = *(_OWORD *)(v126 + 96);
                    *(_OWORD *)(v126 + 360) = v132;
                    v133 = *(_OWORD *)(v126 + 48);
                    *(_OWORD *)(v126 + 280) = *(_OWORD *)(v126 + 32);
                    *(_OWORD *)(v126 + 296) = v133;
                    if (!v125)
                      break;
                    v124 = *(_QWORD *)(v6 + v125 - 248);
                    v123 = v125 - 248;
                    if (v118 >= v124)
                    {
                      v134 = v6 + v125;
                      *(_QWORD *)(v6 + v125) = v118;
                      v135 = v6 + v125;
                      v136 = *(void **)(v6 + v125 + 8);
                      if (!v136)
                        goto LABEL_82;
                      goto LABEL_93;
                    }
                  }
                  v134 = v6;
                  *(_QWORD *)v6 = v118;
                  v135 = v6;
                  v136 = *(void **)(v6 + 8);
                  if (!v136)
                    goto LABEL_82;
LABEL_93:
                  *(_QWORD *)(v134 + 16) = v136;
                  operator delete(v136);
LABEL_82:
                  *(_QWORD *)(v135 + 8) = v121;
                  *(_OWORD *)(v134 + 16) = v246;
                  *(_OWORD *)(v135 + 32) = v297;
                  *(_OWORD *)(v135 + 48) = v305;
                  *(_OWORD *)(v135 + 96) = v329;
                  *(_OWORD *)(v135 + 112) = v337;
                  *(_OWORD *)(v135 + 64) = v313;
                  *(_OWORD *)(v135 + 80) = v321;
                  *(_OWORD *)(v135 + 160) = v361;
                  *(_OWORD *)(v135 + 176) = v369;
                  *(_OWORD *)(v135 + 128) = v345;
                  *(_OWORD *)(v135 + 144) = v353;
                  result = *(double *)&v377;
                  *(_QWORD *)(v135 + 240) = v401;
                  *(_OWORD *)(v135 + 208) = v385;
                  *(_OWORD *)(v135 + 224) = v393;
                  *(_OWORD *)(v135 + 192) = v377;
                }
                v112 = v117 + 248;
                v115 += 248;
                v116 = v117;
              }
              while (v117 + 248 != v241);
            }
          }
          else if (!v114)
          {
            do
            {
              v219 = v112;
              v220 = *(_QWORD *)(a1 + 248);
              if (v220 < *(_QWORD *)a1)
              {
                v250 = *(_OWORD *)(a1 + 256);
                v221 = *(_QWORD *)(a1 + 272);
                *(_QWORD *)(a1 + 264) = 0;
                *(_QWORD *)(a1 + 272) = 0;
                *(_QWORD *)(a1 + 256) = 0;
                v404 = *(_QWORD *)(a1 + 488);
                v332 = *(_OWORD *)(a1 + 344);
                v340 = *(_OWORD *)(a1 + 360);
                v316 = *(_OWORD *)(a1 + 312);
                v324 = *(_OWORD *)(a1 + 328);
                v364 = *(_OWORD *)(a1 + 408);
                v372 = *(_OWORD *)(a1 + 424);
                v348 = *(_OWORD *)(a1 + 376);
                v356 = *(_OWORD *)(a1 + 392);
                v388 = *(_OWORD *)(a1 + 456);
                v396 = *(_OWORD *)(a1 + 472);
                v380 = *(_OWORD *)(a1 + 440);
                v300 = *(_OWORD *)(a1 + 280);
                v308 = *(_OWORD *)(a1 + 296);
                v222 = *(_QWORD *)a1;
                do
                {
                  *(_QWORD *)(a1 + 248) = v222;
                  v230 = *(void **)(a1 + 256);
                  if (v230)
                  {
                    *(_QWORD *)(a1 + 264) = v230;
                    operator delete(v230);
                    *(_QWORD *)(a1 + 264) = 0;
                    *(_QWORD *)(a1 + 272) = 0;
                  }
                  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 24);
                  *(_QWORD *)(a1 + 16) = 0;
                  *(_QWORD *)(a1 + 24) = 0;
                  *(_QWORD *)(a1 + 8) = 0;
                  v223 = *(_OWORD *)(a1 + 208);
                  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a1 + 192);
                  *(_OWORD *)(a1 + 456) = v223;
                  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a1 + 224);
                  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 240);
                  v224 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 392) = v224;
                  v225 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 424) = v225;
                  v226 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 328) = v226;
                  v227 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 360) = v227;
                  v228 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 296) = v228;
                  v229 = *(_QWORD *)(a1 - 248);
                  a1 -= 248;
                  v222 = v229;
                }
                while (v220 < v229);
                *(_QWORD *)(a1 + 248) = v220;
                v231 = *(void **)(a1 + 256);
                if (v231)
                {
                  *(_QWORD *)(a1 + 264) = v231;
                  operator delete(v231);
                }
                *(_OWORD *)(a1 + 256) = v250;
                *(_QWORD *)(a1 + 272) = v221;
                *(_OWORD *)(a1 + 280) = v300;
                *(_OWORD *)(a1 + 296) = v308;
                *(_OWORD *)(a1 + 344) = v332;
                *(_OWORD *)(a1 + 360) = v340;
                *(_OWORD *)(a1 + 312) = v316;
                *(_OWORD *)(a1 + 328) = v324;
                *(_OWORD *)(a1 + 408) = v364;
                *(_OWORD *)(a1 + 424) = v372;
                *(_OWORD *)(a1 + 376) = v348;
                *(_OWORD *)(a1 + 392) = v356;
                result = *(double *)&v380;
                *(_QWORD *)(a1 + 488) = v404;
                *(_OWORD *)(a1 + 456) = v388;
                *(_OWORD *)(a1 + 472) = v396;
                *(_OWORD *)(a1 + 440) = v380;
              }
              v112 = v219 + 248;
              a1 = v219;
            }
            while (v219 + 248 != v241);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == v241)
            return result;
          v137 = (v9 - 2) >> 1;
          v138 = v137;
          while (2)
          {
            v139 = v138;
            if (v137 >= v138)
            {
              v140 = (2 * v138) | 1;
              v141 = (unint64_t *)(a1 + 248 * v140);
              if (2 * v139 + 2 >= (uint64_t)v9)
              {
                v144 = a1 + 248 * v139;
                v145 = *(_QWORD *)v144;
                if (*v141 >= *(_QWORD *)v144)
                {
LABEL_107:
                  v146 = a1 + 248 * v139;
                  v247 = *(_OWORD *)(v146 + 8);
                  v239 = *(_QWORD *)(v146 + 24);
                  *(_QWORD *)(v146 + 16) = 0;
                  *(_QWORD *)(v146 + 24) = 0;
                  *(_QWORD *)(v146 + 8) = 0;
                  v402 = *(_QWORD *)(v146 + 240);
                  v386 = *(_OWORD *)(v146 + 208);
                  v394 = *(_OWORD *)(v146 + 224);
                  v330 = *(_OWORD *)(v146 + 96);
                  v338 = *(_OWORD *)(v146 + 112);
                  v314 = *(_OWORD *)(v146 + 64);
                  v322 = *(_OWORD *)(v146 + 80);
                  v362 = *(_OWORD *)(v146 + 160);
                  v370 = *(_OWORD *)(v146 + 176);
                  v346 = *(_OWORD *)(v146 + 128);
                  v354 = *(_OWORD *)(v146 + 144);
                  v298 = *(_OWORD *)(v146 + 32);
                  v306 = *(_OWORD *)(v146 + 48);
                  v378 = *(_OWORD *)(v146 + 192);
                  v147 = *v141;
                  while (1)
                  {
                    v149 = v141;
                    *(_QWORD *)v144 = v147;
                    v150 = *(void **)(v144 + 8);
                    if (v150)
                    {
                      *(_QWORD *)(v144 + 16) = v150;
                      operator delete(v150);
                      *(_QWORD *)(v144 + 8) = 0;
                      *(_QWORD *)(v144 + 16) = 0;
                      *(_QWORD *)(v144 + 24) = 0;
                    }
                    *(_OWORD *)(v144 + 8) = *(_OWORD *)(v149 + 1);
                    *(_QWORD *)(v144 + 24) = v149[3];
                    v149[2] = 0;
                    v149[3] = 0;
                    v149[1] = 0;
                    v151 = *((_OWORD *)v149 + 7);
                    v153 = *((_OWORD *)v149 + 4);
                    v152 = *((_OWORD *)v149 + 5);
                    *(_OWORD *)(v144 + 96) = *((_OWORD *)v149 + 6);
                    *(_OWORD *)(v144 + 112) = v151;
                    *(_OWORD *)(v144 + 64) = v153;
                    *(_OWORD *)(v144 + 80) = v152;
                    v154 = *((_OWORD *)v149 + 11);
                    v156 = *((_OWORD *)v149 + 8);
                    v155 = *((_OWORD *)v149 + 9);
                    *(_OWORD *)(v144 + 160) = *((_OWORD *)v149 + 10);
                    *(_OWORD *)(v144 + 176) = v154;
                    *(_OWORD *)(v144 + 128) = v156;
                    *(_OWORD *)(v144 + 144) = v155;
                    v158 = *((_OWORD *)v149 + 13);
                    v157 = *((_OWORD *)v149 + 14);
                    v159 = *((_OWORD *)v149 + 12);
                    *(_QWORD *)(v144 + 240) = v149[30];
                    *(_OWORD *)(v144 + 208) = v158;
                    *(_OWORD *)(v144 + 224) = v157;
                    *(_OWORD *)(v144 + 192) = v159;
                    v160 = *((_OWORD *)v149 + 3);
                    *(_OWORD *)(v144 + 32) = *((_OWORD *)v149 + 2);
                    *(_OWORD *)(v144 + 48) = v160;
                    if (v137 < v140)
                      break;
                    v141 = (unint64_t *)(a1 + 248 * ((2 * v140) | 1));
                    if (2 * v140 + 2 < (uint64_t)v9)
                    {
                      v147 = *v141;
                      v148 = v141[31];
                      if (*v141 <= v148)
                        v147 = v141[31];
                      if (*v141 >= v148)
                      {
                        v140 = (2 * v140) | 1;
                      }
                      else
                      {
                        v141 += 31;
                        v140 = 2 * v140 + 2;
                      }
                      v144 = (uint64_t)v149;
                      if (v147 < v145)
                        break;
                    }
                    else
                    {
                      v147 = *v141;
                      v140 = (2 * v140) | 1;
                      v144 = (uint64_t)v149;
                      if (*v141 < v145)
                        break;
                    }
                  }
                  *v149 = v145;
                  v161 = (void *)v149[1];
                  if (v161)
                  {
                    v149[2] = (unint64_t)v161;
                    operator delete(v161);
                  }
                  *(_OWORD *)(v149 + 1) = v247;
                  v149[3] = v239;
                  *((_OWORD *)v149 + 12) = v378;
                  *((_OWORD *)v149 + 13) = v386;
                  *((_OWORD *)v149 + 14) = v394;
                  v149[30] = v402;
                  *((_OWORD *)v149 + 8) = v346;
                  *((_OWORD *)v149 + 9) = v354;
                  *((_OWORD *)v149 + 10) = v362;
                  *((_OWORD *)v149 + 11) = v370;
                  *((_OWORD *)v149 + 4) = v314;
                  *((_OWORD *)v149 + 5) = v322;
                  *((_OWORD *)v149 + 6) = v330;
                  *((_OWORD *)v149 + 7) = v338;
                  *((_OWORD *)v149 + 2) = v298;
                  *((_OWORD *)v149 + 3) = v306;
                }
              }
              else
              {
                v142 = *v141;
                v143 = v141[31];
                if (*v141 <= v143)
                  v142 = v141[31];
                if (*v141 < v143)
                {
                  v141 += 31;
                  v140 = 2 * v139 + 2;
                }
                v144 = a1 + 248 * v139;
                v145 = *(_QWORD *)v144;
                if (v142 >= *(_QWORD *)v144)
                  goto LABEL_107;
              }
            }
            v138 = v139 - 1;
            if (v139)
              continue;
            break;
          }
          v162 = v8 / 0xF8uLL;
          v163 = (_QWORD *)v241;
          while (2)
          {
            v165 = 0;
            v166 = v163;
            v167 = *(_QWORD *)a1;
            v242 = *(_QWORD *)(a1 + 16);
            v248 = *(_QWORD *)(a1 + 8);
            v240 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 8) = 0;
            v286 = *(_OWORD *)(a1 + 208);
            v271 = *(_OWORD *)(a1 + 128);
            v274 = *(_OWORD *)(a1 + 144);
            v259 = *(_OWORD *)(a1 + 64);
            v262 = *(_OWORD *)(a1 + 80);
            v253 = *(_OWORD *)(a1 + 32);
            v256 = *(_OWORD *)(a1 + 48);
            v289 = *(_OWORD *)(a1 + 224);
            v292 = *(_QWORD *)(a1 + 240);
            v277 = *(_OWORD *)(a1 + 160);
            v280 = *(_OWORD *)(a1 + 176);
            v265 = *(_OWORD *)(a1 + 96);
            v268 = *(_OWORD *)(a1 + 112);
            v283 = *(_OWORD *)(a1 + 192);
            v168 = a1;
LABEL_126:
            v180 = v168 + 248 * v165 + 248;
            if (2 * v165 + 2 >= v162)
            {
              v165 = (2 * v165) | 1;
              *(_QWORD *)v168 = *(_QWORD *)v180;
              v184 = (_QWORD *)(v168 + 8);
              v183 = *(void **)(v168 + 8);
              if (!v183)
                goto LABEL_125;
            }
            else
            {
              v181 = *(_QWORD *)v180;
              v182 = *(_QWORD *)(v168 + 248 * v165 + 496);
              if (*(_QWORD *)v180 <= v182)
                v181 = *(_QWORD *)(v168 + 248 * v165 + 496);
              if (*(_QWORD *)v180 >= v182)
              {
                v165 = (2 * v165) | 1;
              }
              else
              {
                v180 = v168 + 248 * v165 + 496;
                v165 = 2 * v165 + 2;
              }
              *(_QWORD *)v168 = v181;
              v184 = (_QWORD *)(v168 + 8);
              v183 = *(void **)(v168 + 8);
              if (!v183)
              {
LABEL_125:
                v169 = (_QWORD *)(v180 + 8);
                *(_OWORD *)(v168 + 8) = *(_OWORD *)(v180 + 8);
                *(_QWORD *)(v168 + 24) = *(_QWORD *)(v180 + 24);
                *(_QWORD *)(v180 + 16) = 0;
                *(_QWORD *)(v180 + 24) = 0;
                *(_QWORD *)(v180 + 8) = 0;
                v170 = *(_OWORD *)(v180 + 80);
                v171 = *(_OWORD *)(v180 + 112);
                v172 = *(_OWORD *)(v180 + 64);
                *(_OWORD *)(v168 + 96) = *(_OWORD *)(v180 + 96);
                *(_OWORD *)(v168 + 112) = v171;
                *(_OWORD *)(v168 + 64) = v172;
                *(_OWORD *)(v168 + 80) = v170;
                v173 = *(_OWORD *)(v180 + 144);
                v174 = *(_OWORD *)(v180 + 176);
                v175 = *(_OWORD *)(v180 + 128);
                *(_OWORD *)(v168 + 160) = *(_OWORD *)(v180 + 160);
                *(_OWORD *)(v168 + 176) = v174;
                *(_OWORD *)(v168 + 128) = v175;
                *(_OWORD *)(v168 + 144) = v173;
                v176 = *(_OWORD *)(v180 + 208);
                v177 = *(_OWORD *)(v180 + 224);
                v178 = *(_OWORD *)(v180 + 192);
                *(_QWORD *)(v168 + 240) = *(_QWORD *)(v180 + 240);
                *(_OWORD *)(v168 + 208) = v176;
                *(_OWORD *)(v168 + 224) = v177;
                *(_OWORD *)(v168 + 192) = v178;
                v179 = *(_OWORD *)(v180 + 48);
                *(_OWORD *)(v168 + 32) = *(_OWORD *)(v180 + 32);
                *(_OWORD *)(v168 + 48) = v179;
                v168 = v180;
                if (v165 > (uint64_t)((unint64_t)(v162 - 2) >> 1))
                {
                  v185 = (__int128 *)(v180 + 32);
                  v163 = v166 - 31;
                  if ((_QWORD *)v180 == v166 - 31)
                  {
                    *(_QWORD *)v180 = v167;
                    v218 = *(void **)(v180 + 8);
                    if (v218)
                    {
                      *(_QWORD *)(v180 + 16) = v218;
                      operator delete(v218);
                    }
                    *(_QWORD *)(v180 + 8) = v248;
                    *(_QWORD *)(v180 + 16) = v242;
                    *(_QWORD *)(v180 + 24) = v240;
                    *v185 = v253;
                    *(_OWORD *)(v180 + 48) = v256;
                    *(_OWORD *)(v180 + 96) = v265;
                    *(_OWORD *)(v180 + 112) = v268;
                    *(_OWORD *)(v180 + 64) = v259;
                    *(_OWORD *)(v180 + 80) = v262;
                    *(_OWORD *)(v180 + 160) = v277;
                    *(_OWORD *)(v180 + 176) = v280;
                    *(_OWORD *)(v180 + 128) = v271;
                    *(_OWORD *)(v180 + 144) = v274;
                    result = *(double *)&v283;
                    *(_QWORD *)(v180 + 240) = v292;
                    *(_OWORD *)(v180 + 208) = v286;
                    *(_OWORD *)(v180 + 224) = v289;
                    *(_OWORD *)(v180 + 192) = v283;
                  }
                  else
                  {
                    *(_QWORD *)v180 = *v163;
                    v186 = *(void **)(v180 + 8);
                    if (v186)
                    {
                      *(_QWORD *)(v180 + 16) = v186;
                      operator delete(v186);
                      *v169 = 0;
                      *(_QWORD *)(v180 + 16) = 0;
                      *(_QWORD *)(v180 + 24) = 0;
                    }
                    *(_OWORD *)(v180 + 8) = *((_OWORD *)v166 - 15);
                    *(_QWORD *)(v180 + 24) = *(v166 - 28);
                    *(v166 - 29) = 0;
                    *(v166 - 28) = 0;
                    *(v166 - 30) = 0;
                    v187 = *(_OWORD *)(v166 - 21);
                    v188 = *(_OWORD *)(v166 - 17);
                    v189 = *(_OWORD *)(v166 - 23);
                    *(_OWORD *)(v180 + 96) = *(_OWORD *)(v166 - 19);
                    *(_OWORD *)(v180 + 112) = v188;
                    *(_OWORD *)(v180 + 64) = v189;
                    *(_OWORD *)(v180 + 80) = v187;
                    v190 = *(_OWORD *)(v166 - 13);
                    v191 = *(_OWORD *)(v166 - 9);
                    v192 = *(_OWORD *)(v166 - 15);
                    *(_OWORD *)(v180 + 160) = *(_OWORD *)(v166 - 11);
                    *(_OWORD *)(v180 + 176) = v191;
                    *(_OWORD *)(v180 + 128) = v192;
                    *(_OWORD *)(v180 + 144) = v190;
                    v193 = *(_OWORD *)(v166 - 5);
                    v194 = *(_OWORD *)(v166 - 3);
                    v195 = *(_OWORD *)(v166 - 7);
                    *(_QWORD *)(v180 + 240) = *(v166 - 1);
                    *(_OWORD *)(v180 + 208) = v193;
                    *(_OWORD *)(v180 + 224) = v194;
                    *(_OWORD *)(v180 + 192) = v195;
                    v196 = *(_OWORD *)(v166 - 25);
                    *v185 = *(_OWORD *)(v166 - 27);
                    *(_OWORD *)(v180 + 48) = v196;
                    *(v166 - 31) = v167;
                    v197 = (void *)*(v166 - 30);
                    if (v197)
                    {
                      *(v166 - 29) = v197;
                      operator delete(v197);
                    }
                    v198 = v166 - 27;
                    *(v166 - 30) = v248;
                    *(v166 - 29) = v242;
                    *(v166 - 28) = v240;
                    *(_OWORD *)v198 = v253;
                    *((_OWORD *)v198 + 1) = v256;
                    *((_OWORD *)v198 + 4) = v265;
                    *((_OWORD *)v198 + 5) = v268;
                    *((_OWORD *)v198 + 2) = v259;
                    *((_OWORD *)v198 + 3) = v262;
                    *((_OWORD *)v198 + 8) = v277;
                    *((_OWORD *)v198 + 9) = v280;
                    *((_OWORD *)v198 + 6) = v271;
                    *((_OWORD *)v198 + 7) = v274;
                    result = *(double *)&v283;
                    v198[26] = v292;
                    *((_OWORD *)v198 + 11) = v286;
                    *((_OWORD *)v198 + 12) = v289;
                    *((_OWORD *)v198 + 10) = v283;
                    v199 = v180 + 248 - a1;
                    if (v199 >= 249)
                    {
                      v200 = (v199 / 0xF8uLL - 2) >> 1;
                      v201 = (unint64_t *)(a1 + 248 * v200);
                      v202 = *(_QWORD *)v180;
                      if (*v201 < *(_QWORD *)v180)
                      {
                        v249 = *(_OWORD *)(v180 + 8);
                        v203 = *(_QWORD *)(v180 + 24);
                        *(_QWORD *)(v180 + 16) = 0;
                        *(_QWORD *)(v180 + 24) = 0;
                        *v169 = 0;
                        v331 = *(_OWORD *)(v180 + 96);
                        v339 = *(_OWORD *)(v180 + 112);
                        v315 = *(_OWORD *)(v180 + 64);
                        v323 = *(_OWORD *)(v180 + 80);
                        v363 = *(_OWORD *)(v180 + 160);
                        v371 = *(_OWORD *)(v180 + 176);
                        v347 = *(_OWORD *)(v180 + 128);
                        v355 = *(_OWORD *)(v180 + 144);
                        v403 = *(_QWORD *)(v180 + 240);
                        v387 = *(_OWORD *)(v180 + 208);
                        v395 = *(_OWORD *)(v180 + 224);
                        v379 = *(_OWORD *)(v180 + 192);
                        v299 = *v185;
                        v307 = *(_OWORD *)(v180 + 48);
                        v204 = *v201;
                        do
                        {
                          v205 = v201;
                          *(_QWORD *)v180 = v204;
                          v206 = *(void **)(v180 + 8);
                          if (v206)
                          {
                            *(_QWORD *)(v180 + 16) = v206;
                            operator delete(v206);
                            *(_QWORD *)(v180 + 8) = 0;
                            *(_QWORD *)(v180 + 16) = 0;
                            *(_QWORD *)(v180 + 24) = 0;
                          }
                          *(_OWORD *)(v180 + 8) = *(_OWORD *)(v205 + 1);
                          *(_QWORD *)(v180 + 24) = v205[3];
                          v205[2] = 0;
                          v205[3] = 0;
                          v205[1] = 0;
                          v207 = *((_OWORD *)v205 + 7);
                          v209 = *((_OWORD *)v205 + 4);
                          v208 = *((_OWORD *)v205 + 5);
                          *(_OWORD *)(v180 + 96) = *((_OWORD *)v205 + 6);
                          *(_OWORD *)(v180 + 112) = v207;
                          *(_OWORD *)(v180 + 64) = v209;
                          *(_OWORD *)(v180 + 80) = v208;
                          v210 = *((_OWORD *)v205 + 11);
                          v212 = *((_OWORD *)v205 + 8);
                          v211 = *((_OWORD *)v205 + 9);
                          *(_OWORD *)(v180 + 160) = *((_OWORD *)v205 + 10);
                          *(_OWORD *)(v180 + 176) = v210;
                          *(_OWORD *)(v180 + 128) = v212;
                          *(_OWORD *)(v180 + 144) = v211;
                          v214 = *((_OWORD *)v205 + 13);
                          v213 = *((_OWORD *)v205 + 14);
                          v215 = *((_OWORD *)v205 + 12);
                          *(_QWORD *)(v180 + 240) = v205[30];
                          *(_OWORD *)(v180 + 208) = v214;
                          *(_OWORD *)(v180 + 224) = v213;
                          *(_OWORD *)(v180 + 192) = v215;
                          v216 = *((_OWORD *)v205 + 3);
                          *(_OWORD *)(v180 + 32) = *((_OWORD *)v205 + 2);
                          *(_OWORD *)(v180 + 48) = v216;
                          if (!v200)
                            break;
                          v200 = (v200 - 1) >> 1;
                          v201 = (unint64_t *)(a1 + 248 * v200);
                          v204 = *v201;
                          v180 = (uint64_t)v205;
                        }
                        while (*v201 < v202);
                        *v205 = v202;
                        v217 = (void *)v205[1];
                        if (v217)
                        {
                          v205[2] = (unint64_t)v217;
                          operator delete(v217);
                        }
                        *(_OWORD *)(v205 + 1) = v249;
                        v205[3] = v203;
                        *((_OWORD *)v205 + 12) = v379;
                        *((_OWORD *)v205 + 13) = v387;
                        *((_OWORD *)v205 + 14) = v395;
                        v205[30] = v403;
                        *((_OWORD *)v205 + 8) = v347;
                        *((_OWORD *)v205 + 9) = v355;
                        *((_OWORD *)v205 + 10) = v363;
                        *((_OWORD *)v205 + 11) = v371;
                        *((_OWORD *)v205 + 4) = v315;
                        *((_OWORD *)v205 + 5) = v323;
                        *((_OWORD *)v205 + 6) = v331;
                        *((_OWORD *)v205 + 7) = v339;
                        result = *(double *)&v299;
                        *((_OWORD *)v205 + 2) = v299;
                        *((_OWORD *)v205 + 3) = v307;
                      }
                    }
                  }
                  if (v162-- <= 2)
                    return result;
                  continue;
                }
                goto LABEL_126;
              }
            }
            break;
          }
          *(_QWORD *)(v168 + 16) = v183;
          operator delete(v183);
          *v184 = 0;
          v184[1] = 0;
          v184[2] = 0;
          goto LABEL_125;
        }
        v10 = (unint64_t *)(v6 + 248 * (v9 >> 1));
        if ((unint64_t)v8 < 0x7C01)
        {
          sub_20EDF8244((__n128 *)(a1 + 248 * (v9 >> 1)), (__n128 *)a1, v234);
          --a3;
          v26 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_20EDF8244((__n128 *)a1, (__n128 *)(a1 + 248 * (v9 >> 1)), v234);
          v11 = 248 * (v9 >> 1);
          v12 = a1 + v11;
          sub_20EDF8244((__n128 *)(a1 + 248), (__n128 *)(a1 + v11 - 248), v233);
          sub_20EDF8244((__n128 *)(a1 + 496), (__n128 *)(a1 + 248 + v11), v232);
          v7 = v241;
          sub_20EDF8244((__n128 *)(a1 + v11 - 248), (__n128 *)(a1 + v11), (unint64_t *)(a1 + 248 + v11));
          v13 = *(_QWORD *)a1;
          v14 = *(_QWORD *)(a1 + 24);
          v15 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v293 = *(_OWORD *)(a1 + 32);
          v301 = *(_OWORD *)(a1 + 48);
          v325 = *(_OWORD *)(a1 + 96);
          v333 = *(_OWORD *)(a1 + 112);
          v309 = *(_OWORD *)(a1 + 64);
          v317 = *(_OWORD *)(a1 + 80);
          v357 = *(_OWORD *)(a1 + 160);
          v365 = *(_OWORD *)(a1 + 176);
          v341 = *(_OWORD *)(a1 + 128);
          v349 = *(_OWORD *)(a1 + 144);
          v397 = *(_QWORD *)(a1 + 240);
          v381 = *(_OWORD *)(a1 + 208);
          v389 = *(_OWORD *)(a1 + 224);
          v373 = *(_OWORD *)(a1 + 192);
          *(_QWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + v11 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + v11 + 24);
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 24) = 0;
          v16 = *(_OWORD *)(a1 + v11 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + v11 + 32);
          *(_OWORD *)(a1 + 48) = v16;
          v17 = *(_OWORD *)(a1 + v11 + 112);
          v19 = *(_OWORD *)(a1 + v11 + 64);
          v18 = *(_OWORD *)(a1 + v11 + 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + v11 + 96);
          *(_OWORD *)(a1 + 112) = v17;
          *(_OWORD *)(a1 + 64) = v19;
          *(_OWORD *)(a1 + 80) = v18;
          v20 = *(_OWORD *)(a1 + v11 + 176);
          v22 = *(_OWORD *)(a1 + v11 + 128);
          v21 = *(_OWORD *)(a1 + v11 + 144);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + v11 + 160);
          *(_OWORD *)(a1 + 176) = v20;
          *(_OWORD *)(a1 + 128) = v22;
          *(_OWORD *)(a1 + 144) = v21;
          v24 = *(_OWORD *)(a1 + v11 + 208);
          v23 = *(_OWORD *)(a1 + v11 + 224);
          v25 = *(_OWORD *)(a1 + v11 + 192);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + v11 + 240);
          *(_OWORD *)(a1 + 208) = v24;
          *(_OWORD *)(a1 + 224) = v23;
          *(_OWORD *)(a1 + 192) = v25;
          *v10 = v13;
          *(_OWORD *)(v12 + 8) = v15;
          *(_QWORD *)(v12 + 24) = v14;
          *(_OWORD *)(v12 + 32) = v293;
          *(_OWORD *)(v12 + 48) = v301;
          *(_OWORD *)(v12 + 96) = v325;
          *(_OWORD *)(v12 + 112) = v333;
          *(_OWORD *)(v12 + 64) = v309;
          *(_OWORD *)(v12 + 80) = v317;
          *(_OWORD *)(v12 + 160) = v357;
          *(_OWORD *)(v12 + 176) = v365;
          *(_OWORD *)(v12 + 128) = v341;
          *(_OWORD *)(v12 + 144) = v349;
          *(_QWORD *)(v12 + 240) = v397;
          *(_OWORD *)(v12 + 208) = v381;
          *(_OWORD *)(v12 + 224) = v389;
          *(_OWORD *)(v12 + 192) = v373;
          --a3;
          v26 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(_QWORD *)(a1 - 248) >= v26)
        {
          v238 = *(_OWORD *)(a1 + 8);
          v65 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v252 = *(_OWORD *)(a1 + 32);
          v255 = *(_OWORD *)(a1 + 48);
          v264 = *(_OWORD *)(a1 + 96);
          v267 = *(_OWORD *)(a1 + 112);
          v258 = *(_OWORD *)(a1 + 64);
          v261 = *(_OWORD *)(a1 + 80);
          v276 = *(_OWORD *)(a1 + 160);
          v279 = *(_OWORD *)(a1 + 176);
          v270 = *(_OWORD *)(a1 + 128);
          v273 = *(_OWORD *)(a1 + 144);
          v291 = *(_QWORD *)(a1 + 240);
          v285 = *(_OWORD *)(a1 + 208);
          v288 = *(_OWORD *)(a1 + 224);
          v282 = *(_OWORD *)(a1 + 192);
          if (v26 >= *v234)
          {
            v67 = a1 + 248;
            do
            {
              v6 = v67;
              if (v67 >= v241)
                break;
              v67 += 248;
            }
            while (v26 >= *(_QWORD *)v6);
          }
          else
          {
            v6 = a1;
            do
            {
              v66 = *(_QWORD *)(v6 + 248);
              v6 += 248;
            }
            while (v26 >= v66);
          }
          v68 = v241;
          if (v6 < v241)
          {
            v68 = v241;
            do
            {
              v69 = *(_QWORD *)(v68 - 248);
              v68 -= 248;
            }
            while (v26 < v69);
          }
          if (v6 < v68)
          {
            v70 = *(_QWORD *)v6;
            do
            {
              v71 = *(_OWORD *)(v6 + 8);
              v72 = *(_QWORD *)(v6 + 24);
              *(_QWORD *)(v6 + 16) = 0;
              *(_QWORD *)(v6 + 24) = 0;
              *(_QWORD *)(v6 + 8) = 0;
              v311 = *(_OWORD *)(v6 + 64);
              v319 = *(_OWORD *)(v6 + 80);
              v327 = *(_OWORD *)(v6 + 96);
              v335 = *(_OWORD *)(v6 + 112);
              v295 = *(_OWORD *)(v6 + 32);
              v303 = *(_OWORD *)(v6 + 48);
              v359 = *(_OWORD *)(v6 + 160);
              v367 = *(_OWORD *)(v6 + 176);
              v343 = *(_OWORD *)(v6 + 128);
              v351 = *(_OWORD *)(v6 + 144);
              v399 = *(_QWORD *)(v6 + 240);
              v383 = *(_OWORD *)(v6 + 208);
              v391 = *(_OWORD *)(v6 + 224);
              v375 = *(_OWORD *)(v6 + 192);
              *(_QWORD *)v6 = *(_QWORD *)v68;
              *(_OWORD *)(v6 + 8) = *(_OWORD *)(v68 + 8);
              *(_QWORD *)(v6 + 24) = *(_QWORD *)(v68 + 24);
              *(_QWORD *)(v68 + 8) = 0;
              *(_QWORD *)(v68 + 16) = 0;
              *(_QWORD *)(v68 + 24) = 0;
              v73 = *(_OWORD *)(v68 + 48);
              *(_OWORD *)(v6 + 32) = *(_OWORD *)(v68 + 32);
              *(_OWORD *)(v6 + 48) = v73;
              v74 = *(_OWORD *)(v68 + 112);
              v76 = *(_OWORD *)(v68 + 64);
              v75 = *(_OWORD *)(v68 + 80);
              *(_OWORD *)(v6 + 96) = *(_OWORD *)(v68 + 96);
              *(_OWORD *)(v6 + 112) = v74;
              *(_OWORD *)(v6 + 64) = v76;
              *(_OWORD *)(v6 + 80) = v75;
              v77 = *(_OWORD *)(v68 + 176);
              v79 = *(_OWORD *)(v68 + 128);
              v78 = *(_OWORD *)(v68 + 144);
              *(_OWORD *)(v6 + 160) = *(_OWORD *)(v68 + 160);
              *(_OWORD *)(v6 + 176) = v77;
              *(_OWORD *)(v6 + 128) = v79;
              *(_OWORD *)(v6 + 144) = v78;
              v81 = *(_OWORD *)(v68 + 208);
              v80 = *(_OWORD *)(v68 + 224);
              v82 = *(_OWORD *)(v68 + 192);
              *(_QWORD *)(v6 + 240) = *(_QWORD *)(v68 + 240);
              *(_OWORD *)(v6 + 208) = v81;
              *(_OWORD *)(v6 + 224) = v80;
              *(_OWORD *)(v6 + 192) = v82;
              *(_QWORD *)v68 = v70;
              v83 = *(void **)(v68 + 8);
              if (v83)
              {
                *(_QWORD *)(v68 + 16) = v83;
                v244 = v71;
                operator delete(v83);
                v71 = v244;
              }
              *(_OWORD *)(v68 + 8) = v71;
              *(_QWORD *)(v68 + 24) = v72;
              *(_OWORD *)(v68 + 192) = v375;
              *(_OWORD *)(v68 + 208) = v383;
              *(_OWORD *)(v68 + 224) = v391;
              *(_QWORD *)(v68 + 240) = v399;
              *(_OWORD *)(v68 + 128) = v343;
              *(_OWORD *)(v68 + 144) = v351;
              *(_OWORD *)(v68 + 160) = v359;
              *(_OWORD *)(v68 + 176) = v367;
              *(_OWORD *)(v68 + 64) = v311;
              *(_OWORD *)(v68 + 80) = v319;
              *(_OWORD *)(v68 + 96) = v327;
              *(_OWORD *)(v68 + 112) = v335;
              *(_OWORD *)(v68 + 32) = v295;
              *(_OWORD *)(v68 + 48) = v303;
              do
              {
                v84 = *(_QWORD *)(v6 + 248);
                v6 += 248;
                v70 = v84;
              }
              while (v26 >= v84);
              do
              {
                v85 = *(_QWORD *)(v68 - 248);
                v68 -= 248;
              }
              while (v26 < v85);
            }
            while (v6 < v68);
          }
          if (v6 - 248 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v6 - 248);
            v86 = *(void **)(a1 + 8);
            if (v86)
            {
              *(_QWORD *)(a1 + 16) = v86;
              operator delete(v86);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
            }
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 - 240);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 224);
            *(_QWORD *)(v6 - 232) = 0;
            *(_QWORD *)(v6 - 224) = 0;
            *(_QWORD *)(v6 - 240) = 0;
            v87 = *(_OWORD *)(v6 - 168);
            v88 = *(_OWORD *)(v6 - 136);
            v89 = *(_OWORD *)(v6 - 184);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v6 - 152);
            *(_OWORD *)(a1 + 112) = v88;
            *(_OWORD *)(a1 + 64) = v89;
            *(_OWORD *)(a1 + 80) = v87;
            v90 = *(_OWORD *)(v6 - 104);
            v91 = *(_OWORD *)(v6 - 72);
            v92 = *(_OWORD *)(v6 - 120);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(v6 - 88);
            *(_OWORD *)(a1 + 176) = v91;
            *(_OWORD *)(a1 + 128) = v92;
            *(_OWORD *)(a1 + 144) = v90;
            v93 = *(_OWORD *)(v6 - 40);
            v94 = *(_OWORD *)(v6 - 24);
            v95 = *(_OWORD *)(v6 - 56);
            *(_QWORD *)(a1 + 240) = *(_QWORD *)(v6 - 8);
            *(_OWORD *)(a1 + 208) = v93;
            *(_OWORD *)(a1 + 224) = v94;
            *(_OWORD *)(a1 + 192) = v95;
            v96 = *(_OWORD *)(v6 - 200);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 - 216);
            *(_OWORD *)(a1 + 48) = v96;
          }
          *(_QWORD *)(v6 - 248) = v26;
          v97 = *(void **)(v6 - 240);
          if (v97)
          {
            *(_QWORD *)(v6 - 232) = v97;
            operator delete(v97);
          }
          a4 = 0;
          *(_OWORD *)(v6 - 240) = v238;
          *(_QWORD *)(v6 - 224) = v65;
          *(_OWORD *)(v6 - 200) = v255;
          *(_OWORD *)(v6 - 216) = v252;
          *(_OWORD *)(v6 - 136) = v267;
          *(_OWORD *)(v6 - 152) = v264;
          *(_OWORD *)(v6 - 168) = v261;
          *(_OWORD *)(v6 - 184) = v258;
          *(_OWORD *)(v6 - 72) = v279;
          *(_OWORD *)(v6 - 88) = v276;
          *(_OWORD *)(v6 - 104) = v273;
          *(_OWORD *)(v6 - 120) = v270;
          result = *(double *)&v282;
          *(_QWORD *)(v6 - 8) = v291;
          *(_OWORD *)(v6 - 24) = v288;
          *(_OWORD *)(v6 - 40) = v285;
          *(_OWORD *)(v6 - 56) = v282;
          continue;
        }
LABEL_10:
        v237 = a3;
        v27 = 0;
        v236 = *(_OWORD *)(a1 + 8);
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v284 = *(_OWORD *)(a1 + 208);
        v269 = *(_OWORD *)(a1 + 128);
        v272 = *(_OWORD *)(a1 + 144);
        v257 = *(_OWORD *)(a1 + 64);
        v260 = *(_OWORD *)(a1 + 80);
        v251 = *(_OWORD *)(a1 + 32);
        v254 = *(_OWORD *)(a1 + 48);
        v263 = *(_OWORD *)(a1 + 96);
        v266 = *(_OWORD *)(a1 + 112);
        v290 = *(_QWORD *)(a1 + 240);
        v275 = *(_OWORD *)(a1 + 160);
        v278 = *(_OWORD *)(a1 + 176);
        v287 = *(_OWORD *)(a1 + 224);
        v281 = *(_OWORD *)(a1 + 192);
        do
        {
          v29 = *(_QWORD *)(a1 + v27 + 248);
          v27 += 248;
        }
        while (v29 < v26);
        v30 = a1 + v27;
        v31 = v7;
        if (v27 == 248)
        {
          v31 = v7;
          do
          {
            if (v30 >= v31)
              break;
            v33 = *(_QWORD *)(v31 - 248);
            v31 -= 248;
          }
          while (v33 >= v26);
        }
        else
        {
          do
          {
            v32 = *(_QWORD *)(v31 - 248);
            v31 -= 248;
          }
          while (v32 >= v26);
        }
        v6 = a1 + v27;
        if (v30 < v31)
        {
          v34 = v31;
          do
          {
            v35 = *(_OWORD *)(v6 + 8);
            v36 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v310 = *(_OWORD *)(v6 + 64);
            v318 = *(_OWORD *)(v6 + 80);
            v326 = *(_OWORD *)(v6 + 96);
            v334 = *(_OWORD *)(v6 + 112);
            v294 = *(_OWORD *)(v6 + 32);
            v302 = *(_OWORD *)(v6 + 48);
            v358 = *(_OWORD *)(v6 + 160);
            v366 = *(_OWORD *)(v6 + 176);
            v342 = *(_OWORD *)(v6 + 128);
            v350 = *(_OWORD *)(v6 + 144);
            v398 = *(_QWORD *)(v6 + 240);
            v382 = *(_OWORD *)(v6 + 208);
            v390 = *(_OWORD *)(v6 + 224);
            v374 = *(_OWORD *)(v6 + 192);
            *(_QWORD *)v6 = *(_QWORD *)v34;
            *(_OWORD *)(v6 + 8) = *(_OWORD *)(v34 + 8);
            *(_QWORD *)(v6 + 24) = *(_QWORD *)(v34 + 24);
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 16) = 0;
            *(_QWORD *)(v34 + 24) = 0;
            v37 = *(_OWORD *)(v34 + 48);
            *(_OWORD *)(v6 + 32) = *(_OWORD *)(v34 + 32);
            *(_OWORD *)(v6 + 48) = v37;
            v38 = *(_OWORD *)(v34 + 112);
            v40 = *(_OWORD *)(v34 + 64);
            v39 = *(_OWORD *)(v34 + 80);
            *(_OWORD *)(v6 + 96) = *(_OWORD *)(v34 + 96);
            *(_OWORD *)(v6 + 112) = v38;
            *(_OWORD *)(v6 + 64) = v40;
            *(_OWORD *)(v6 + 80) = v39;
            v41 = *(_OWORD *)(v34 + 176);
            v43 = *(_OWORD *)(v34 + 128);
            v42 = *(_OWORD *)(v34 + 144);
            *(_OWORD *)(v6 + 160) = *(_OWORD *)(v34 + 160);
            *(_OWORD *)(v6 + 176) = v41;
            *(_OWORD *)(v6 + 128) = v43;
            *(_OWORD *)(v6 + 144) = v42;
            v45 = *(_OWORD *)(v34 + 208);
            v44 = *(_OWORD *)(v34 + 224);
            v46 = *(_OWORD *)(v34 + 192);
            *(_QWORD *)(v6 + 240) = *(_QWORD *)(v34 + 240);
            *(_OWORD *)(v6 + 208) = v45;
            *(_OWORD *)(v6 + 224) = v44;
            *(_OWORD *)(v6 + 192) = v46;
            *(_QWORD *)v34 = v29;
            v47 = *(void **)(v34 + 8);
            if (v47)
            {
              *(_QWORD *)(v34 + 16) = v47;
              v243 = v35;
              operator delete(v47);
              v35 = v243;
            }
            *(_OWORD *)(v34 + 8) = v35;
            *(_QWORD *)(v34 + 24) = v36;
            *(_OWORD *)(v34 + 192) = v374;
            *(_OWORD *)(v34 + 208) = v382;
            *(_OWORD *)(v34 + 224) = v390;
            *(_QWORD *)(v34 + 240) = v398;
            *(_OWORD *)(v34 + 128) = v342;
            *(_OWORD *)(v34 + 144) = v350;
            *(_OWORD *)(v34 + 160) = v358;
            *(_OWORD *)(v34 + 176) = v366;
            *(_OWORD *)(v34 + 64) = v310;
            *(_OWORD *)(v34 + 80) = v318;
            *(_OWORD *)(v34 + 96) = v326;
            *(_OWORD *)(v34 + 112) = v334;
            *(_OWORD *)(v34 + 32) = v294;
            *(_OWORD *)(v34 + 48) = v302;
            do
            {
              v48 = *(_QWORD *)(v6 + 248);
              v6 += 248;
              v29 = v48;
            }
            while (v48 < v26);
            do
            {
              v49 = *(_QWORD *)(v34 - 248);
              v34 -= 248;
            }
            while (v49 >= v26);
          }
          while (v6 < v34);
        }
        if (v6 - 248 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v6 - 248);
          v50 = *(void **)(a1 + 8);
          if (v50)
          {
            *(_QWORD *)(a1 + 16) = v50;
            operator delete(v50);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = 0;
          }
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 - 240);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 224);
          *(_QWORD *)(v6 - 232) = 0;
          *(_QWORD *)(v6 - 224) = 0;
          *(_QWORD *)(v6 - 240) = 0;
          v51 = *(_OWORD *)(v6 - 168);
          v52 = *(_OWORD *)(v6 - 136);
          v53 = *(_OWORD *)(v6 - 184);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(v6 - 152);
          *(_OWORD *)(a1 + 112) = v52;
          *(_OWORD *)(a1 + 64) = v53;
          *(_OWORD *)(a1 + 80) = v51;
          v54 = *(_OWORD *)(v6 - 104);
          v55 = *(_OWORD *)(v6 - 72);
          v56 = *(_OWORD *)(v6 - 120);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(v6 - 88);
          *(_OWORD *)(a1 + 176) = v55;
          *(_OWORD *)(a1 + 128) = v56;
          *(_OWORD *)(a1 + 144) = v54;
          v57 = *(_OWORD *)(v6 - 40);
          v58 = *(_OWORD *)(v6 - 24);
          v59 = *(_OWORD *)(v6 - 56);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v6 - 8);
          *(_OWORD *)(a1 + 208) = v57;
          *(_OWORD *)(a1 + 224) = v58;
          *(_OWORD *)(a1 + 192) = v59;
          v60 = *(_OWORD *)(v6 - 200);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 - 216);
          *(_OWORD *)(a1 + 48) = v60;
        }
        *(_QWORD *)(v6 - 248) = v26;
        v61 = *(void **)(v6 - 240);
        if (v61)
        {
          *(_QWORD *)(v6 - 232) = v61;
          operator delete(v61);
        }
        *(_OWORD *)(v6 - 240) = v236;
        *(_QWORD *)(v6 - 224) = v28;
        *(_OWORD *)(v6 - 200) = v254;
        *(_OWORD *)(v6 - 216) = v251;
        *(_OWORD *)(v6 - 136) = v266;
        *(_OWORD *)(v6 - 152) = v263;
        *(_OWORD *)(v6 - 168) = v260;
        *(_OWORD *)(v6 - 184) = v257;
        *(_OWORD *)(v6 - 72) = v278;
        *(_OWORD *)(v6 - 88) = v275;
        *(_OWORD *)(v6 - 104) = v272;
        *(_OWORD *)(v6 - 120) = v269;
        *(_QWORD *)(v6 - 8) = v290;
        *(_OWORD *)(v6 - 24) = v287;
        *(_OWORD *)(v6 - 40) = v284;
        *(_OWORD *)(v6 - 56) = v281;
        v62 = v30 >= v31;
        a3 = v237;
        if (!v62)
        {
LABEL_36:
          sub_20EDF67D8(a1, v6 - 248, v237, a4 & 1);
          a4 = 0;
          continue;
        }
        v63 = sub_20EDF8844(a1, v6 - 248);
        if (!sub_20EDF8844(v6, v241))
        {
          if (v63)
            continue;
          goto LABEL_36;
        }
        a2 = v6 - 248;
        if (!v63)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 8) < *(double *)(v8 + 96))
        {
          v61 = *(_QWORD *)v8;
          v172 = *(_OWORD *)(v8 + 8);
          v205 = *(_OWORD *)(v8 + 56);
          v216 = *(_OWORD *)(v8 + 72);
          v183 = *(_OWORD *)(v8 + 24);
          v194 = *(_OWORD *)(v8 + 40);
          v152 = *(_OWORD *)(v8 + 88);
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 104);
          v62 = *(_OWORD *)(a2 - 80);
          v63 = *(_OWORD *)(a2 - 64);
          v64 = *(_OWORD *)(a2 - 48);
          *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v8 + 56) = v64;
          *(_OWORD *)(v8 + 40) = v63;
          *(_OWORD *)(v8 + 24) = v62;
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 104) = v61;
          *(_OWORD *)(a2 - 96) = v172;
          *(_OWORD *)(a2 - 48) = v205;
          *(_OWORD *)(a2 - 32) = v216;
          *(_OWORD *)(a2 - 80) = v183;
          *(_OWORD *)(a2 - 64) = v194;
          *(_OWORD *)(a2 - 16) = v152;
        }
        return;
      case 3:
        sub_20EE00508((uint64_t *)v8, (uint64_t *)(v8 + 104), (uint64_t *)(a2 - 104));
        return;
      case 4:
        sub_20EE00508((uint64_t *)v8, (uint64_t *)(v8 + 104), (uint64_t *)(v8 + 208));
        if (*(double *)(a2 - 8) < *(double *)(v8 + 304))
        {
          v65 = *(_QWORD *)(v8 + 208);
          v195 = *(_OWORD *)(v8 + 248);
          v206 = *(_OWORD *)(v8 + 264);
          v217 = *(_OWORD *)(v8 + 280);
          v173 = *(_OWORD *)(v8 + 216);
          v184 = *(_OWORD *)(v8 + 232);
          v153 = *(_OWORD *)(v8 + 296);
          *(_QWORD *)(v8 + 208) = *(_QWORD *)(a2 - 104);
          v66 = *(_OWORD *)(a2 - 80);
          v67 = *(_OWORD *)(a2 - 64);
          v68 = *(_OWORD *)(a2 - 48);
          *(_OWORD *)(v8 + 280) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v8 + 264) = v68;
          *(_OWORD *)(v8 + 248) = v67;
          *(_OWORD *)(v8 + 232) = v66;
          *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v8 + 296) = *(_OWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 104) = v65;
          *(_OWORD *)(a2 - 96) = v173;
          *(_OWORD *)(a2 - 48) = v206;
          *(_OWORD *)(a2 - 32) = v217;
          *(_OWORD *)(a2 - 80) = v184;
          *(_OWORD *)(a2 - 64) = v195;
          *(_OWORD *)(a2 - 16) = v153;
          if (*(double *)(v8 + 304) < *(double *)(v8 + 200))
          {
            v69 = *(_QWORD *)(v8 + 104);
            v196 = *(_OWORD *)(v8 + 144);
            v207 = *(_OWORD *)(v8 + 160);
            v218 = *(_OWORD *)(v8 + 176);
            v174 = *(_OWORD *)(v8 + 112);
            v185 = *(_OWORD *)(v8 + 128);
            v154 = *(_OWORD *)(v8 + 192);
            v70 = *(_QWORD *)(v8 + 208);
            *(_QWORD *)(v8 + 104) = v70;
            v71 = *(_OWORD *)(v8 + 216);
            v72 = *(_OWORD *)(v8 + 232);
            v73 = *(_OWORD *)(v8 + 264);
            v74 = *(_OWORD *)(v8 + 280);
            *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 248);
            *(_OWORD *)(v8 + 160) = v73;
            *(_OWORD *)(v8 + 112) = v71;
            *(_OWORD *)(v8 + 128) = v72;
            v75 = *(_OWORD *)(v8 + 296);
            *(_OWORD *)(v8 + 176) = v74;
            *(_OWORD *)(v8 + 192) = v75;
            *(_QWORD *)(v8 + 208) = v69;
            *(_OWORD *)(v8 + 264) = v207;
            *(_OWORD *)(v8 + 280) = v218;
            *(_OWORD *)(v8 + 232) = v185;
            *(_OWORD *)(v8 + 248) = v196;
            *(_OWORD *)(v8 + 216) = v174;
            *(_QWORD *)&v72 = *(_QWORD *)(v8 + 200);
            v76 = *(double *)(v8 + 96);
            *(_OWORD *)(v8 + 296) = v154;
            if (*(double *)&v72 < v76)
            {
              v77 = *(_QWORD *)v8;
              v175 = *(_OWORD *)(v8 + 8);
              v208 = *(_OWORD *)(v8 + 56);
              v219 = *(_OWORD *)(v8 + 72);
              v186 = *(_OWORD *)(v8 + 24);
              v197 = *(_OWORD *)(v8 + 40);
              v155 = *(_OWORD *)(v8 + 88);
              *(_QWORD *)v8 = v70;
              v78 = *(_OWORD *)(v8 + 128);
              *(_OWORD *)(v8 + 8) = *(_OWORD *)(v8 + 112);
              *(_OWORD *)(v8 + 72) = *(_OWORD *)(v8 + 176);
              v79 = *(_OWORD *)(v8 + 144);
              *(_OWORD *)(v8 + 56) = *(_OWORD *)(v8 + 160);
              *(_OWORD *)(v8 + 40) = v79;
              *(_OWORD *)(v8 + 24) = v78;
              *(_OWORD *)(v8 + 88) = *(_OWORD *)(v8 + 192);
              *(_QWORD *)(v8 + 104) = v77;
              *(_OWORD *)(v8 + 160) = v208;
              *(_OWORD *)(v8 + 176) = v219;
              *(_OWORD *)(v8 + 128) = v186;
              *(_OWORD *)(v8 + 144) = v197;
              *(_OWORD *)(v8 + 112) = v175;
              *(_OWORD *)(v8 + 192) = v155;
            }
          }
        }
        return;
      case 5:
        sub_20EE0005C(v8, v8 + 104, v8 + 208, (uint64_t *)(v8 + 312), (uint64_t *)(a2 - 104));
        return;
      default:
        if (v9 > 2495)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v96 = (unint64_t)(v10 - 2) >> 1;
              v97 = v96;
              do
              {
                if (v96 >= v97)
                {
                  v99 = (2 * v97) | 1;
                  v100 = v8 + 104 * v99;
                  if (2 * v97 + 2 < v10 && *(double *)(v100 + 96) < *(double *)(v100 + 200))
                  {
                    v100 += 104;
                    v99 = 2 * v97 + 2;
                  }
                  v101 = v8 + 104 * v97;
                  v102 = *(double *)(v101 + 96);
                  if (*(double *)(v100 + 96) >= v102)
                  {
                    v103 = *(_QWORD *)v101;
                    v177 = *(_OWORD *)(v101 + 8);
                    v210 = *(_OWORD *)(v101 + 56);
                    v221 = *(_OWORD *)(v101 + 72);
                    v188 = *(_OWORD *)(v101 + 24);
                    v199 = *(_OWORD *)(v101 + 40);
                    v104 = *(_QWORD *)(v8 + 104 * v97 + 88);
                    do
                    {
                      v105 = v101;
                      v101 = v100;
                      *(_QWORD *)v105 = *(_QWORD *)v100;
                      *(_OWORD *)(v105 + 8) = *(_OWORD *)(v100 + 8);
                      v106 = *(_OWORD *)(v100 + 24);
                      v107 = *(_OWORD *)(v100 + 40);
                      v108 = *(_OWORD *)(v100 + 56);
                      *(_OWORD *)(v105 + 72) = *(_OWORD *)(v100 + 72);
                      *(_OWORD *)(v105 + 56) = v108;
                      *(_OWORD *)(v105 + 40) = v107;
                      *(_OWORD *)(v105 + 24) = v106;
                      *(_OWORD *)(v105 + 88) = *(_OWORD *)(v100 + 88);
                      if (v96 < v99)
                        break;
                      v109 = 2 * v99;
                      v99 = (2 * v99) | 1;
                      v100 = v8 + 104 * v99;
                      v110 = v109 + 2;
                      if (v110 < v10 && *(double *)(v100 + 96) < *(double *)(v100 + 200))
                      {
                        v100 += 104;
                        v99 = v110;
                      }
                    }
                    while (*(double *)(v100 + 96) >= v102);
                    *(_QWORD *)v101 = v103;
                    *(_OWORD *)(v101 + 8) = v177;
                    *(_OWORD *)(v101 + 56) = v210;
                    *(_OWORD *)(v101 + 72) = v221;
                    *(_OWORD *)(v101 + 24) = v188;
                    *(_OWORD *)(v101 + 40) = v199;
                    *(_QWORD *)(v101 + 88) = v104;
                    *(double *)(v101 + 96) = v102;
                  }
                }
                v98 = v97-- <= 0;
              }
              while (!v98);
              v111 = v9 / 0x68uLL;
              do
              {
                v112 = 0;
                v113 = *(_QWORD *)v8;
                v156 = *(_OWORD *)(v8 + 8);
                v165 = *(_OWORD *)(v8 + 56);
                v168 = *(_OWORD *)(v8 + 72);
                v159 = *(_OWORD *)(v8 + 24);
                v162 = *(_OWORD *)(v8 + 40);
                v148 = *(_OWORD *)(v8 + 88);
                v114 = v8;
                do
                {
                  v118 = v114;
                  v114 += 104 * v112 + 104;
                  v119 = 2 * v112;
                  v112 = (2 * v112) | 1;
                  v120 = v119 + 2;
                  if (v120 < v111 && *(double *)(v114 + 96) < *(double *)(v114 + 200))
                  {
                    v114 += 104;
                    v112 = v120;
                  }
                  *(_QWORD *)v118 = *(_QWORD *)v114;
                  *(_OWORD *)(v118 + 8) = *(_OWORD *)(v114 + 8);
                  v115 = *(_OWORD *)(v114 + 24);
                  v116 = *(_OWORD *)(v114 + 40);
                  v117 = *(_OWORD *)(v114 + 56);
                  *(_OWORD *)(v118 + 72) = *(_OWORD *)(v114 + 72);
                  *(_OWORD *)(v118 + 56) = v117;
                  *(_OWORD *)(v118 + 40) = v116;
                  *(_OWORD *)(v118 + 24) = v115;
                  *(_OWORD *)(v118 + 88) = *(_OWORD *)(v114 + 88);
                }
                while (v112 <= (uint64_t)((unint64_t)(v111 - 2) >> 1));
                v121 = (__int128 *)(v114 + 8);
                v122 = (_OWORD *)(v114 + 88);
                if (v114 == a2 - 104)
                {
                  *(_QWORD *)v114 = v113;
                  *v121 = v156;
                  *(_OWORD *)(v114 + 56) = v165;
                  *(_OWORD *)(v114 + 72) = v168;
                  *(_OWORD *)(v114 + 24) = v159;
                  *(_OWORD *)(v114 + 40) = v162;
                  *v122 = v148;
                }
                else
                {
                  *(_QWORD *)v114 = *(_QWORD *)(a2 - 104);
                  *v121 = *(_OWORD *)(a2 - 96);
                  v123 = *(_OWORD *)(a2 - 80);
                  v124 = *(_OWORD *)(a2 - 64);
                  v125 = *(_OWORD *)(a2 - 32);
                  *(_OWORD *)(v114 + 56) = *(_OWORD *)(a2 - 48);
                  *(_OWORD *)(v114 + 72) = v125;
                  *(_OWORD *)(v114 + 24) = v123;
                  *(_OWORD *)(v114 + 40) = v124;
                  *v122 = *(_OWORD *)(a2 - 16);
                  *(_QWORD *)(a2 - 104) = v113;
                  *(_OWORD *)(a2 - 96) = v156;
                  *(_OWORD *)(a2 - 48) = v165;
                  *(_OWORD *)(a2 - 32) = v168;
                  *(_OWORD *)(a2 - 80) = v159;
                  *(_OWORD *)(a2 - 64) = v162;
                  *(_OWORD *)(a2 - 16) = v148;
                  v126 = v114 - v8 + 104;
                  if (v126 >= 105)
                  {
                    v127 = (v126 / 0x68uLL - 2) >> 1;
                    v128 = v8 + 104 * v127;
                    v129 = *(double *)(v114 + 96);
                    if (*(double *)(v128 + 96) < v129)
                    {
                      v130 = *(_QWORD *)v114;
                      v178 = *v121;
                      v211 = *(_OWORD *)(v114 + 56);
                      v222 = *(_OWORD *)(v114 + 72);
                      v189 = *(_OWORD *)(v114 + 24);
                      v200 = *(_OWORD *)(v114 + 40);
                      v131 = *(_QWORD *)(v114 + 88);
                      do
                      {
                        v132 = v114;
                        v114 = v128;
                        *(_QWORD *)v132 = *(_QWORD *)v128;
                        *(_OWORD *)(v132 + 8) = *(_OWORD *)(v128 + 8);
                        v133 = *(_OWORD *)(v128 + 24);
                        v134 = *(_OWORD *)(v128 + 40);
                        v135 = *(_OWORD *)(v128 + 56);
                        *(_OWORD *)(v132 + 72) = *(_OWORD *)(v128 + 72);
                        *(_OWORD *)(v132 + 56) = v135;
                        *(_OWORD *)(v132 + 40) = v134;
                        *(_OWORD *)(v132 + 24) = v133;
                        *(_OWORD *)(v132 + 88) = *(_OWORD *)(v128 + 88);
                        if (!v127)
                          break;
                        v127 = (v127 - 1) >> 1;
                        v128 = v8 + 104 * v127;
                      }
                      while (*(double *)(v128 + 96) < v129);
                      *(_QWORD *)v114 = v130;
                      *(_OWORD *)(v114 + 8) = v178;
                      *(_OWORD *)(v114 + 56) = v211;
                      *(_OWORD *)(v114 + 72) = v222;
                      *(_OWORD *)(v114 + 24) = v189;
                      *(_OWORD *)(v114 + 40) = v200;
                      *(_QWORD *)(v114 + 88) = v131;
                      *(double *)(v114 + 96) = v129;
                    }
                  }
                }
                a2 -= 104;
                v98 = v111-- <= 2;
              }
              while (!v98);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 104 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 >= 0x3401)
          {
            sub_20EE00508((uint64_t *)a1, (uint64_t *)v12, (uint64_t *)(a2 - 104));
            v13 = 104 * v11;
            v14 = a1 + 104 * v11;
            sub_20EE00508((uint64_t *)(a1 + 104), (uint64_t *)(v14 - 104), (uint64_t *)(a2 - 208));
            v15 = (uint64_t *)(a1 + 104 + v13);
            sub_20EE00508((uint64_t *)(a1 + 208), v15, (uint64_t *)(a2 - 312));
            sub_20EE00508((uint64_t *)(v14 - 104), (uint64_t *)v12, v15);
            v16 = *(_QWORD *)a1;
            v169 = *(_OWORD *)(a1 + 8);
            v202 = *(_OWORD *)(a1 + 56);
            v213 = *(_OWORD *)(a1 + 72);
            v180 = *(_OWORD *)(a1 + 24);
            v191 = *(_OWORD *)(a1 + 40);
            v149 = *(_OWORD *)(a1 + 88);
            *(_QWORD *)a1 = *(_QWORD *)v12;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v12 + 8);
            v17 = *(_OWORD *)(v12 + 24);
            v18 = *(_OWORD *)(v12 + 40);
            v19 = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v12 + 72);
            *(_OWORD *)(a1 + 56) = v19;
            *(_OWORD *)(a1 + 40) = v18;
            *(_OWORD *)(a1 + 24) = v17;
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(v14 + 88);
            *(_QWORD *)v12 = v16;
            *(_OWORD *)(v12 + 8) = v169;
            *(_OWORD *)(v12 + 24) = v180;
            *(_OWORD *)(v12 + 40) = v191;
            *(_OWORD *)(v12 + 56) = v202;
            *(_OWORD *)(v12 + 72) = v213;
            *(_OWORD *)(v14 + 88) = v149;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v20 = *(double *)(a1 + 96);
            if (*(double *)(a1 - 8) < v20)
              goto LABEL_14;
            v21 = *(_QWORD *)a1;
            v150 = *(_OWORD *)(a1 + 8);
            v163 = *(_OWORD *)(a1 + 56);
            v166 = *(_OWORD *)(a1 + 72);
            v157 = *(_OWORD *)(a1 + 24);
            v160 = *(_OWORD *)(a1 + 40);
            v22 = *(double *)(a1 + 96);
            if (v22 >= *(double *)(a2 - 8))
            {
              v46 = a1 + 104;
              do
              {
                v8 = v46;
                if (v46 >= a2)
                  break;
                v47 = *(double *)(v46 + 96);
                v46 += 104;
              }
              while (v22 >= v47);
            }
            else
            {
              v23 = a1;
              do
              {
                v8 = v23 + 104;
                v24 = *(double *)(v23 + 200);
                v23 += 104;
              }
              while (v22 >= v24);
            }
            v48 = a2;
            if (v8 < a2)
            {
              v49 = a2;
              do
              {
                v48 = v49 - 104;
                v50 = *(double *)(v49 - 8);
                v49 -= 104;
              }
              while (v22 < v50);
            }
            v51 = *(_QWORD *)(a1 + 88);
            while (v8 < v48)
            {
              v52 = *(_QWORD *)v8;
              v171 = *(_OWORD *)(v8 + 8);
              v204 = *(_OWORD *)(v8 + 56);
              v215 = *(_OWORD *)(v8 + 72);
              v182 = *(_OWORD *)(v8 + 24);
              v193 = *(_OWORD *)(v8 + 40);
              v147 = *(_OWORD *)(v8 + 88);
              *(_QWORD *)v8 = *(_QWORD *)v48;
              v53 = *(_OWORD *)(v48 + 24);
              v54 = *(_OWORD *)(v48 + 40);
              v55 = *(_OWORD *)(v48 + 56);
              *(_OWORD *)(v8 + 72) = *(_OWORD *)(v48 + 72);
              *(_OWORD *)(v8 + 56) = v55;
              *(_OWORD *)(v8 + 40) = v54;
              *(_OWORD *)(v8 + 24) = v53;
              *(_OWORD *)(v8 + 8) = *(_OWORD *)(v48 + 8);
              *(_OWORD *)(v8 + 88) = *(_OWORD *)(v48 + 88);
              *(_QWORD *)v48 = v52;
              *(_OWORD *)(v48 + 8) = v171;
              *(_OWORD *)(v48 + 72) = v215;
              *(_OWORD *)(v48 + 56) = v204;
              *(_OWORD *)(v48 + 40) = v193;
              *(_OWORD *)(v48 + 24) = v182;
              *(_OWORD *)(v48 + 88) = v147;
              do
              {
                v56 = *(double *)(v8 + 200);
                v8 += 104;
              }
              while (v22 >= v56);
              do
              {
                v57 = *(double *)(v48 - 8);
                v48 -= 104;
              }
              while (v22 < v57);
            }
            if (v8 - 104 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v8 - 104);
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 96);
              v58 = *(_OWORD *)(v8 - 80);
              v59 = *(_OWORD *)(v8 - 64);
              v60 = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(a1 + 56) = *(_OWORD *)(v8 - 48);
              *(_OWORD *)(a1 + 72) = v60;
              *(_OWORD *)(a1 + 24) = v58;
              *(_OWORD *)(a1 + 40) = v59;
              *(_OWORD *)(a1 + 88) = *(_OWORD *)(v8 - 16);
            }
            a4 = 0;
            *(_QWORD *)(v8 - 104) = v21;
            *(_OWORD *)(v8 - 96) = v150;
            *(_OWORD *)(v8 - 48) = v163;
            *(_OWORD *)(v8 - 32) = v166;
            *(_OWORD *)(v8 - 80) = v157;
            *(_OWORD *)(v8 - 64) = v160;
            *(_QWORD *)(v8 - 16) = v51;
            *(double *)(v8 - 8) = v22;
            continue;
          }
          sub_20EE00508((uint64_t *)v12, (uint64_t *)a1, (uint64_t *)(a2 - 104));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v20 = *(double *)(a1 + 96);
LABEL_14:
          v25 = 0;
          v26 = *(_QWORD *)a1;
          v151 = *(_OWORD *)(a1 + 8);
          v164 = *(_OWORD *)(a1 + 56);
          v167 = *(_OWORD *)(a1 + 72);
          v158 = *(_OWORD *)(a1 + 24);
          v161 = *(_OWORD *)(a1 + 40);
          v27 = *(_QWORD *)(a1 + 88);
          do
          {
            v28 = *(double *)(a1 + v25 + 200);
            v25 += 104;
          }
          while (v28 < v20);
          v29 = a1 + v25;
          v30 = a2;
          if (v25 == 104)
          {
            v33 = a2;
            while (v29 < v33)
            {
              v31 = v33 - 104;
              v34 = *(double *)(v33 - 8);
              v33 -= 104;
              if (v34 < v20)
                goto LABEL_22;
            }
            v31 = v33;
            v8 = v29;
          }
          else
          {
            do
            {
              v31 = v30 - 104;
              v32 = *(double *)(v30 - 8);
              v30 -= 104;
            }
            while (v32 >= v20);
LABEL_22:
            v8 = v29;
            if (v29 < v31)
            {
              v35 = v31;
              do
              {
                v36 = *(_QWORD *)v8;
                v170 = *(_OWORD *)(v8 + 8);
                v203 = *(_OWORD *)(v8 + 56);
                v214 = *(_OWORD *)(v8 + 72);
                v181 = *(_OWORD *)(v8 + 24);
                v192 = *(_OWORD *)(v8 + 40);
                v146 = *(_OWORD *)(v8 + 88);
                *(_QWORD *)v8 = *(_QWORD *)v35;
                v37 = *(_OWORD *)(v35 + 24);
                v38 = *(_OWORD *)(v35 + 40);
                v39 = *(_OWORD *)(v35 + 56);
                *(_OWORD *)(v8 + 72) = *(_OWORD *)(v35 + 72);
                *(_OWORD *)(v8 + 56) = v39;
                *(_OWORD *)(v8 + 40) = v38;
                *(_OWORD *)(v8 + 24) = v37;
                *(_OWORD *)(v8 + 8) = *(_OWORD *)(v35 + 8);
                *(_OWORD *)(v8 + 88) = *(_OWORD *)(v35 + 88);
                *(_QWORD *)v35 = v36;
                *(_OWORD *)(v35 + 8) = v170;
                *(_OWORD *)(v35 + 72) = v214;
                *(_OWORD *)(v35 + 56) = v203;
                *(_OWORD *)(v35 + 40) = v192;
                *(_OWORD *)(v35 + 24) = v181;
                *(_OWORD *)(v35 + 88) = v146;
                do
                {
                  v40 = *(double *)(v8 + 200);
                  v8 += 104;
                }
                while (v40 < v20);
                do
                {
                  v41 = *(double *)(v35 - 8);
                  v35 -= 104;
                }
                while (v41 >= v20);
              }
              while (v8 < v35);
            }
          }
          if (v8 - 104 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 104);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 96);
            v42 = *(_OWORD *)(v8 - 80);
            v43 = *(_OWORD *)(v8 - 64);
            v44 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v8 - 48);
            *(_OWORD *)(a1 + 72) = v44;
            *(_OWORD *)(a1 + 24) = v42;
            *(_OWORD *)(a1 + 40) = v43;
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(v8 - 16);
          }
          *(_QWORD *)(v8 - 104) = v26;
          *(_OWORD *)(v8 - 96) = v151;
          *(_OWORD *)(v8 - 48) = v164;
          *(_OWORD *)(v8 - 32) = v167;
          *(_OWORD *)(v8 - 80) = v158;
          *(_OWORD *)(v8 - 64) = v161;
          *(_QWORD *)(v8 - 16) = v27;
          *(double *)(v8 - 8) = v20;
          if (v29 < v31)
            goto LABEL_33;
          v45 = sub_20EE00810(a1, v8 - 104);
          if (!sub_20EE00810(v8, a2))
          {
            if (v45)
              continue;
LABEL_33:
            sub_20EDFF214(a1, v8 - 104, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 104;
          if (v45)
            return;
          goto LABEL_1;
        }
        v80 = (_QWORD *)(v8 + 104);
        v82 = v8 == a2 || v80 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v82)
          {
            v83 = 0;
            v84 = v8;
            do
            {
              v86 = v80;
              if (*(double *)(v84 + 200) < *(double *)(v84 + 96))
              {
                v87 = *v80;
                v209 = *(_OWORD *)(v84 + 160);
                v220 = *(_OWORD *)(v84 + 176);
                v176 = *(_OWORD *)(v84 + 112);
                v187 = *(_OWORD *)(v84 + 128);
                v198 = *(_OWORD *)(v84 + 144);
                v88 = *(_QWORD *)(v84 + 192);
                v89 = v83;
                v90 = *(double *)(v84 + 200);
                do
                {
                  v91 = v8 + v89;
                  *(_QWORD *)(v91 + 104) = *(_QWORD *)(v8 + v89);
                  v92 = *(_OWORD *)(v8 + v89 + 24);
                  v93 = *(_OWORD *)(v8 + v89 + 56);
                  *(_OWORD *)(v91 + 144) = *(_OWORD *)(v8 + v89 + 40);
                  *(_OWORD *)(v91 + 160) = v93;
                  v94 = *(_OWORD *)(v8 + v89 + 72);
                  *(_OWORD *)(v91 + 112) = *(_OWORD *)(v8 + v89 + 8);
                  *(_OWORD *)(v91 + 128) = v92;
                  v95 = *(_OWORD *)(v8 + v89 + 88);
                  *(_OWORD *)(v91 + 176) = v94;
                  *(_OWORD *)(v91 + 192) = v95;
                  if (!v89)
                  {
                    v85 = v8;
                    goto LABEL_71;
                  }
                  v89 -= 104;
                }
                while (v90 < *(double *)(v91 - 8));
                v85 = v8 + v89 + 104;
LABEL_71:
                *(_QWORD *)v85 = v87;
                *(_OWORD *)(v91 + 8) = v176;
                *(_OWORD *)(v91 + 72) = v220;
                *(_OWORD *)(v91 + 56) = v209;
                *(_OWORD *)(v91 + 40) = v198;
                *(_OWORD *)(v91 + 24) = v187;
                *(_QWORD *)(v91 + 88) = v88;
                *(double *)(v85 + 96) = v90;
              }
              v80 = v86 + 13;
              v83 += 104;
              v84 = (unint64_t)v86;
            }
            while (v86 + 13 != (_QWORD *)a2);
          }
        }
        else if (!v82)
        {
          v136 = (double *)(v8 + 200);
          do
          {
            v137 = v80;
            if (*(double *)(a1 + 200) < *(double *)(a1 + 96))
            {
              v138 = *v80;
              v212 = *(_OWORD *)(a1 + 160);
              v223 = *(_OWORD *)(a1 + 176);
              v179 = *(_OWORD *)(a1 + 112);
              v190 = *(_OWORD *)(a1 + 128);
              v201 = *(_OWORD *)(a1 + 144);
              v139 = *(_QWORD *)(a1 + 192);
              v140 = v136;
              v141 = *(double *)(a1 + 200);
              do
              {
                v142 = *((_OWORD *)v140 - 12);
                *(_OWORD *)(v140 - 9) = *((_OWORD *)v140 - 11);
                v143 = *((_OWORD *)v140 - 9);
                *(_OWORD *)(v140 - 7) = *((_OWORD *)v140 - 10);
                *(_OWORD *)(v140 - 5) = v143;
                v144 = *((_OWORD *)v140 - 7);
                *(_OWORD *)(v140 - 3) = *((_OWORD *)v140 - 8);
                *(_OWORD *)(v140 - 11) = v142;
                *(v140 - 12) = *(v140 - 25);
                *(_OWORD *)(v140 - 1) = v144;
                v145 = *(v140 - 26);
                v140 -= 13;
              }
              while (v141 < v145);
              *((_QWORD *)v140 - 12) = v138;
              *(_OWORD *)(v140 - 11) = v179;
              *(_OWORD *)(v140 - 3) = v223;
              *(_OWORD *)(v140 - 5) = v212;
              *(_OWORD *)(v140 - 7) = v201;
              *(_OWORD *)(v140 - 9) = v190;
              *((_QWORD *)v140 - 1) = v139;
              *v140 = v141;
            }
            v80 = v137 + 13;
            v136 += 13;
            a1 = (uint64_t)v137;
          }
          while (v137 + 13 != (_QWORD *)a2);
        }
        return;
    }
  }
}

  v9 = a2 - 10;
  v10 = (int *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_20EECAF64(a3, a2 - 10, v10))
        {
          v50 = *((_QWORD *)v10 + 4);
          v44 = *(_OWORD *)v10;
          v47 = *((_OWORD *)v10 + 1);
          v26 = *(_OWORD *)v9;
          v27 = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v26;
          *((_OWORD *)v10 + 1) = v27;
          *(_OWORD *)v9 = v44;
          *(_OWORD *)(a2 - 6) = v47;
          *((_QWORD *)a2 - 1) = v50;
        }
        return;
      case 3uLL:
        sub_20EECB5D0((__int128 *)v10, v10 + 10, a2 - 10, a3);
        return;
      case 4uLL:
        v28 = (__int128 *)(v10 + 10);
        v29 = (__int128 *)(v10 + 20);
        sub_20EECB5D0((__int128 *)v10, v10 + 10, v10 + 20, a3);
        if (sub_20EECAF64(a3, v9, v10 + 20))
        {
          v30 = *v29;
          v31 = *((_OWORD *)v10 + 6);
          v32 = *((_QWORD *)v10 + 14);
          v33 = *((_QWORD *)v9 + 4);
          v34 = *((_OWORD *)v9 + 1);
          *v29 = *(_OWORD *)v9;
          *((_OWORD *)v10 + 6) = v34;
          *((_QWORD *)v10 + 14) = v33;
          *((_QWORD *)v9 + 4) = v32;
          *(_OWORD *)v9 = v30;
          *((_OWORD *)v9 + 1) = v31;
          if (sub_20EECAF64(a3, v10 + 20, v10 + 10))
          {
            v35 = *((_QWORD *)v10 + 9);
            v37 = *v28;
            v36 = *(_OWORD *)(v10 + 14);
            v38 = *((_OWORD *)v10 + 6);
            *v28 = *v29;
            *(_OWORD *)(v10 + 14) = v38;
            *((_QWORD *)v10 + 9) = *((_QWORD *)v10 + 14);
            *v29 = v37;
            *((_OWORD *)v10 + 6) = v36;
            *((_QWORD *)v10 + 14) = v35;
            if (sub_20EECAF64(a3, v10 + 10, v10))
            {
              v51 = *((_QWORD *)v10 + 4);
              v45 = *(_OWORD *)v10;
              v48 = *((_OWORD *)v10 + 1);
              v39 = *(_OWORD *)(v10 + 14);
              *(_OWORD *)v10 = *v28;
              *((_OWORD *)v10 + 1) = v39;
              *((_QWORD *)v10 + 4) = *((_QWORD *)v10 + 9);
              *v28 = v45;
              *(_OWORD *)(v10 + 14) = v48;
              *((_QWORD *)v10 + 9) = v51;
            }
          }
        }
        return;
      case 5uLL:
        sub_20EECC164((uint64_t)v10, (__int128 *)(v10 + 10), v10 + 20, (__int128 *)(v10 + 30), (__int128 *)(a2 - 10), a3);
        return;
      default:
        if (v13 <= 959)
        {
          if ((a5 & 1) != 0)
            sub_20EECB0B8((uint64_t)v10, a2, a3);
          else
            sub_20EECB388((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)&v10[10 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1401)
          {
            sub_20EECB5D0(v16, v10, a2 - 10, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_20EECB5D0((__int128 *)v10, (int *)v16, a2 - 10, a3);
            v17 = 10 * v15;
            v18 = &v10[10 * v15 - 10];
            sub_20EECB5D0((__int128 *)(v10 + 10), v18, a2 - 20, a3);
            v19 = (__int128 *)(v10 + 20);
            v20 = &v10[v17 + 10];
            sub_20EECB5D0(v19, v20, a2 - 30, a3);
            sub_20EECB5D0((__int128 *)v18, (int *)v16, v20, a3);
            v49 = *(_QWORD *)(a1 + 32);
            v43 = *(_OWORD *)a1;
            v46 = *(_OWORD *)(a1 + 16);
            v21 = *v16;
            v22 = v16[1];
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            *((_QWORD *)v16 + 4) = v49;
            *v16 = v43;
            v16[1] = v46;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_20EECAF64(a3, (int *)(a1 - 40), (_DWORD *)a1) & 1) == 0)
          {
            v10 = sub_20EECB744((__int128 *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = sub_20EECBB14((__int128 *)a1, a2, a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = sub_20EECBEC4(a1, v23, a3);
          v10 = (int *)(v23 + 40);
          if (!sub_20EECBEC4(v23 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_14:
            sub_20EECAAF0(a1, v23, a3, -v12, a5 & 1);
            v10 = (int *)(v23 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (int *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
        {
          v40 = (v14 - 2) >> 1;
          v41 = v40 + 1;
          v42 = (__n128 *)&v10[10 * v40];
          do
          {
            sub_20EECC328((uint64_t)v10, a3, v14, v42);
            v42 = (__n128 *)((char *)v42 - 40);
            --v41;
          }
          while (v41);
          sub_20EECC494((unint64_t)v10, (__int128 *)a2, a3);
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(a2 - 2);
        v98 = *(float *)v10;
        if (result <= *(float *)v10)
        {
          *(float *)v10 = result;
          *(a2 - 2) = v98;
          result = *(float *)(v10 + 4);
          *(float *)(v10 + 4) = *(a2 - 1);
          *(a2 - 1) = result;
        }
        return result;
      case 3:
        v99 = *(float *)(v10 + 8);
        result = *(float *)v10;
        v100 = *(a2 - 2);
        if (v99 <= *(float *)v10)
        {
          if (v100 <= v99)
          {
            v103 = (float *)(v10 + 4);
            *(float *)v10 = v100;
          }
          else
          {
            v103 = (float *)(v10 + 12);
            v145 = *(_DWORD *)(v10 + 12);
            v146 = *(_DWORD *)(v10 + 4);
            *(float *)v10 = v99;
            *(_DWORD *)(v10 + 4) = v145;
            *(float *)(v10 + 8) = result;
            *(_DWORD *)(v10 + 12) = v146;
            v147 = *(a2 - 2);
            if (v147 > result)
              return result;
            *(float *)(v10 + 8) = v147;
          }
          *(a2 - 2) = result;
          goto LABEL_177;
        }
        if (v100 <= v99)
        {
          *(float *)(v10 + 8) = v100;
          *(a2 - 2) = v99;
          v9 = (float *)(v10 + 12);
          v101 = *(_DWORD *)(v10 + 12);
          *(float *)(v10 + 12) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v101;
          result = *(float *)(v10 + 8);
          v102 = *(float *)v10;
          if (result <= *(float *)v10)
          {
            *(float *)v10 = result;
            *(float *)(v10 + 8) = v102;
            v103 = (float *)(v10 + 4);
LABEL_177:
            result = *v103;
            *v103 = *v9;
            *v9 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_20EEFE38C((_DWORD *)v10, v10 + 8, v10 + 16, (uint64_t)(a2 - 2));
      case 5:
        sub_20EEFE38C((_DWORD *)v10, v10 + 8, v10 + 16, v10 + 24);
        result = *(a2 - 2);
        v104 = *(float *)(v10 + 24);
        if (result <= v104)
        {
          *(float *)(v10 + 24) = result;
          *(a2 - 2) = v104;
          v105 = *(_DWORD *)(v10 + 28);
          *(float *)(v10 + 28) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v105;
          result = *(float *)(v10 + 24);
          v106 = *(float *)(v10 + 16);
          if (result <= v106)
          {
            v107 = *(_DWORD *)(v10 + 20);
            v108 = *(_DWORD *)(v10 + 28);
            *(float *)(v10 + 16) = result;
            *(_DWORD *)(v10 + 20) = v108;
            *(float *)(v10 + 24) = v106;
            *(_DWORD *)(v10 + 28) = v107;
            v109 = *(float *)(v10 + 8);
            if (result <= v109)
            {
              v110 = *(_DWORD *)(v10 + 12);
              *(float *)(v10 + 8) = result;
              *(_DWORD *)(v10 + 12) = v108;
              *(float *)(v10 + 16) = v109;
              *(_DWORD *)(v10 + 20) = v110;
              v111 = *(float *)v10;
              if (result <= *(float *)v10)
              {
                v112 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = result;
                *(_DWORD *)(v10 + 4) = v108;
                *(float *)(v10 + 8) = v111;
                *(_DWORD *)(v10 + 12) = v112;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              v123 = (unint64_t)(v12 - 2) >> 1;
              v124 = v123;
              do
              {
                if (v123 >= v124)
                {
                  v126 = (2 * v124) | 1;
                  v127 = (float *)(v10 + 8 * v126);
                  if (2 * v124 + 2 < v12 && *v127 <= v127[2])
                  {
                    v127 += 2;
                    v126 = 2 * v124 + 2;
                  }
                  v128 = (float *)(v10 + 8 * v124);
                  result = *v128;
                  if (*v127 > *v128)
                  {
                    v129 = *((_DWORD *)v128 + 1);
                    do
                    {
                      v130 = v128;
                      v128 = v127;
                      *(_QWORD *)v130 = *(_QWORD *)v127;
                      if (v123 < v126)
                        break;
                      v131 = 2 * v126;
                      v126 = (2 * v126) | 1;
                      v127 = (float *)(v10 + 8 * v126);
                      v132 = v131 + 2;
                      if (v132 < v12 && *v127 <= v127[2])
                      {
                        v127 += 2;
                        v126 = v132;
                      }
                    }
                    while (*v127 > result);
                    *v128 = result;
                    *((_DWORD *)v128 + 1) = v129;
                  }
                }
                v125 = v124-- <= 0;
              }
              while (!v125);
              v133 = (unint64_t)v11 >> 3;
              do
              {
                v134 = 0;
                v135 = *(_QWORD *)v10;
                v136 = (float *)v10;
                do
                {
                  v137 = v136;
                  v136 += 2 * v134 + 2;
                  v138 = 2 * v134;
                  v134 = (2 * v134) | 1;
                  v139 = v138 + 2;
                  if (v139 < v133)
                  {
                    result = v136[2];
                    if (*v136 <= result)
                    {
                      v136 += 2;
                      v134 = v139;
                    }
                  }
                  *(_QWORD *)v137 = *(_QWORD *)v136;
                }
                while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 2;
                if (v136 == a2)
                {
                  *(_QWORD *)v136 = v135;
                }
                else
                {
                  *(_QWORD *)v136 = *(_QWORD *)a2;
                  *(_QWORD *)a2 = v135;
                  v140 = (uint64_t)v136 - v10 + 8;
                  if (v140 >= 9)
                  {
                    v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
                    v142 = (float *)(v10 + 8 * v141);
                    result = *v136;
                    if (*v142 <= *v136)
                    {
                      v143 = *((_DWORD *)v136 + 1);
                      do
                      {
                        v144 = v136;
                        v136 = v142;
                        *(_QWORD *)v144 = *(_QWORD *)v142;
                        if (!v141)
                          break;
                        v141 = (v141 - 1) >> 1;
                        v142 = (float *)(v10 + 8 * v141);
                      }
                      while (*v142 <= result);
                      *v136 = result;
                      *((_DWORD *)v136 + 1) = v143;
                    }
                  }
                }
                v125 = v133-- <= 2;
              }
              while (!v125);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = v10 + 8 * ((unint64_t)v12 >> 1);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 >= 0x401)
          {
            v16 = *(float *)v14;
            v17 = *(float *)v10;
            if (*(float *)v14 <= *(float *)v10)
            {
              if (v15 <= v16)
              {
                v21 = (int *)(v10 + 4);
                *(float *)v10 = v15;
              }
              else
              {
                v21 = (int *)(v14 + 4);
                v28 = *(_DWORD *)(v14 + 4);
                v29 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = v16;
                *(_DWORD *)(v10 + 4) = v28;
                *(float *)v14 = v17;
                *(_DWORD *)(v14 + 4) = v29;
                v30 = *(a2 - 2);
                if (v30 > v17)
                  goto LABEL_23;
                *(float *)v14 = v30;
              }
              *(a2 - 2) = v17;
              v18 = a2 - 1;
            }
            else
            {
              if (v15 > v16
                || (*(float *)v14 = v15,
                    *(a2 - 2) = v16,
                    v18 = (float *)(v14 + 4),
                    v19 = *(_DWORD *)(v14 + 4),
                    *(float *)(v14 + 4) = *(a2 - 1),
                    *((_DWORD *)a2 - 1) = v19,
                    v20 = *(float *)v10,
                    *(float *)v14 > *(float *)v10))
              {
LABEL_23:
                v35 = v10 + 8 * v13;
                v37 = *(float *)(v35 - 8);
                v36 = v35 - 8;
                v38 = v37;
                v39 = *(float *)(v10 + 8);
                v40 = *(a2 - 4);
                if (v37 <= v39)
                {
                  if (v40 <= v38)
                  {
                    v44 = (int *)(v10 + 12);
                    *(float *)(v10 + 8) = v40;
                  }
                  else
                  {
                    v44 = (int *)(v36 + 4);
                    v45 = *(_DWORD *)(v36 + 4);
                    v46 = *(_DWORD *)(v10 + 12);
                    *(float *)(v10 + 8) = v38;
                    *(_DWORD *)(v10 + 12) = v45;
                    *(float *)v36 = v39;
                    *(_DWORD *)(v36 + 4) = v46;
                    v47 = *(a2 - 4);
                    if (v47 > v39)
                      goto LABEL_35;
                    *(float *)v36 = v47;
                  }
                  *(a2 - 4) = v39;
                  v41 = a2 - 3;
                }
                else
                {
                  if (v40 > v38
                    || (*(float *)v36 = v40,
                        *(a2 - 4) = v38,
                        v41 = (float *)(v36 + 4),
                        v42 = *(_DWORD *)(v36 + 4),
                        *(float *)(v36 + 4) = *(a2 - 3),
                        *((_DWORD *)a2 - 3) = v42,
                        v43 = *(float *)(v10 + 8),
                        *(float *)v36 > v43))
                  {
LABEL_35:
                    v49 = v10 + 8 * v13;
                    v51 = *(float *)(v49 + 8);
                    v50 = v49 + 8;
                    v52 = v51;
                    v53 = *(float *)(v10 + 16);
                    v54 = *(a2 - 6);
                    if (v51 <= v53)
                    {
                      if (v54 <= v52)
                      {
                        v55 = (int *)(v10 + 20);
                        *(float *)(v10 + 16) = v54;
                      }
                      else
                      {
                        v55 = (int *)(v50 + 4);
                        v56 = *(_DWORD *)(v50 + 4);
                        v57 = *(_DWORD *)(v10 + 20);
                        *(float *)(v10 + 16) = v52;
                        *(_DWORD *)(v10 + 20) = v56;
                        *(float *)v50 = v53;
                        *(_DWORD *)(v50 + 4) = v57;
                        v58 = *(a2 - 6);
                        if (v58 > v53)
                          goto LABEL_46;
                        *(float *)v50 = v58;
                      }
                      *(a2 - 6) = v53;
                      v59 = a2 - 5;
                    }
                    else
                    {
                      if (v54 > v52)
                      {
                        v53 = v52;
                        goto LABEL_46;
                      }
                      *(float *)v50 = v54;
                      *(a2 - 6) = v52;
                      v59 = (float *)(v50 + 4);
                      v60 = *(_DWORD *)(v50 + 4);
                      *(float *)(v50 + 4) = *(a2 - 5);
                      *((_DWORD *)a2 - 5) = v60;
                      v53 = *(float *)v50;
                      v61 = *(float *)(v10 + 16);
                      if (*(float *)v50 > v61)
                      {
LABEL_46:
                        v63 = *(float *)v14;
                        v64 = *(float *)v36;
                        if (*(float *)v14 <= *(float *)v36)
                        {
                          if (v53 <= v63)
                          {
                            *(float *)v36 = v53;
                            v68 = (int *)(v36 + 4);
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                          }
                          else
                          {
                            v65 = *(_DWORD *)(v14 + 4);
                            *(float *)v14 = v64;
                            v66 = *(_DWORD *)(v36 + 4);
                            *(float *)v36 = v63;
                            *(_DWORD *)(v36 + 4) = v65;
                            *(_DWORD *)(v14 + 4) = v66;
                            if (v53 > v64)
                              goto LABEL_58;
                            *(float *)v14 = v53;
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                            v68 = (int *)(v14 + 4);
                          }
                          v69 = v67;
                        }
                        else
                        {
                          if (v53 > v63)
                          {
                            v64 = *(float *)v14;
LABEL_58:
                            v72 = *(float *)v10;
                            *(float *)v10 = v64;
                            v26 = (int *)(v10 + 4);
                            *(float *)v14 = v72;
                            v27 = (float *)(v14 + 4);
                            goto LABEL_59;
                          }
                          v69 = (int *)(v14 + 4);
                          v70 = *(_DWORD *)(v14 + 4);
                          *(float *)v14 = v53;
                          *(_DWORD *)(v14 + 4) = *(_DWORD *)(v50 + 4);
                          *(float *)v50 = v63;
                          *(_DWORD *)(v50 + 4) = v70;
                          if (v53 > v64)
                          {
                            v64 = v53;
                            goto LABEL_58;
                          }
                          *(float *)v36 = v53;
                          v68 = (int *)(v36 + 4);
                          *(float *)v14 = v64;
                        }
                        v71 = *v68;
                        *v68 = *v69;
                        *v69 = v71;
                        v64 = *(float *)v14;
                        goto LABEL_58;
                      }
                      *(float *)(v10 + 16) = v53;
                      *(float *)v50 = v61;
                      v55 = (int *)(v10 + 20);
                    }
                    v62 = *v55;
                    *v55 = *(_DWORD *)v59;
                    *(_DWORD *)v59 = v62;
                    v53 = *(float *)v50;
                    goto LABEL_46;
                  }
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)v36;
                  *(float *)v36 = v43;
                  v44 = (int *)(v10 + 12);
                }
                v48 = *v44;
                *v44 = *(_DWORD *)v41;
                *(_DWORD *)v41 = v48;
                goto LABEL_35;
              }
              *(_DWORD *)v10 = *(_DWORD *)v14;
              v21 = (int *)(v10 + 4);
              *(float *)v14 = v20;
            }
            v34 = *v21;
            *v21 = *(_DWORD *)v18;
            *(_DWORD *)v18 = v34;
            goto LABEL_23;
          }
          v22 = *(float *)v10;
          v23 = *(float *)v14;
          if (*(float *)v10 <= *(float *)v14)
          {
            if (v15 <= v22)
            {
              v26 = (int *)(v14 + 4);
              *(float *)v14 = v15;
            }
            else
            {
              v26 = (int *)(v10 + 4);
              v31 = *(_DWORD *)(v10 + 4);
              v32 = *(_DWORD *)(v14 + 4);
              *(float *)v14 = v22;
              *(_DWORD *)(v14 + 4) = v31;
              *(float *)v10 = v23;
              *(_DWORD *)(v10 + 4) = v32;
              v33 = *(a2 - 2);
              if (v33 > v23)
                goto LABEL_60;
              *(float *)v10 = v33;
            }
            *(a2 - 2) = v23;
            v27 = a2 - 1;
            goto LABEL_59;
          }
          if (v15 <= v22)
          {
            *(float *)v10 = v15;
            *(a2 - 2) = v22;
            v24 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = *(a2 - 1);
            *((_DWORD *)a2 - 1) = v24;
            v25 = *(float *)v14;
            if (*(float *)v10 <= *(float *)v14)
            {
              *(_DWORD *)v14 = *(_DWORD *)v10;
              *(float *)v10 = v25;
              v26 = (int *)(v14 + 4);
              v27 = (float *)(v10 + 4);
LABEL_59:
              v73 = *v26;
              *v26 = *(_DWORD *)v27;
              *(_DWORD *)v27 = v73;
            }
          }
LABEL_60:
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(float *)v10;
            if (*(float *)(v10 - 8) <= *(float *)v10)
              goto LABEL_63;
            if (*(a2 - 2) >= result)
            {
              do
              {
                v89 = *(float *)(v10 + 8);
                v10 += 8;
              }
              while (v89 < result);
            }
            else
            {
              v88 = v10 + 8;
              do
              {
                v10 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v88 += 8;
              }
              while (*(float *)v10 < result);
            }
            v90 = a2;
            if (v10 < (unint64_t)a2)
            {
              v90 = a2;
              do
              {
                v91 = *(v90 - 2);
                v90 -= 2;
              }
              while (v91 >= result);
            }
            v92 = *(_DWORD *)(a1 + 4);
            if (v10 < (unint64_t)v90)
            {
              v93 = *(float *)v10;
              v94 = *v90;
              do
              {
                *(float *)v10 = v94;
                *v90 = v93;
                v95 = *(_DWORD *)(v10 + 4);
                *(float *)(v10 + 4) = v90[1];
                *((_DWORD *)v90 + 1) = v95;
                do
                {
                  v96 = *(float *)(v10 + 8);
                  v10 += 8;
                  v93 = v96;
                }
                while (v96 < result);
                do
                {
                  v97 = *(v90 - 2);
                  v90 -= 2;
                  v94 = v97;
                }
                while (v97 >= result);
              }
              while (v10 < (unint64_t)v90);
            }
            if (v10 - 8 != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v10 - 8);
            a4 = 0;
            *(float *)(v10 - 8) = result;
            *(_DWORD *)(v10 - 4) = v92;
            continue;
          }
          result = *(float *)v10;
LABEL_63:
          v74 = 0;
          v75 = *(_DWORD *)(v10 + 4);
          do
          {
            v76 = *(float *)(v10 + v74 + 8);
            v74 += 8;
          }
          while (v76 <= result);
          v77 = v10 + v74;
          v78 = a2;
          if (v74 == 8)
          {
            v78 = a2;
            do
            {
              if (v77 >= (unint64_t)v78)
                break;
              v80 = *(v78 - 2);
              v78 -= 2;
            }
            while (v80 > result);
          }
          else
          {
            do
            {
              v79 = *(v78 - 2);
              v78 -= 2;
            }
            while (v79 > result);
          }
          if (v77 >= (unint64_t)v78)
          {
            v10 += v74;
            v86 = (float *)(v77 - 8);
            if (v77 - 8 == a1)
              goto LABEL_79;
          }
          else
          {
            v81 = *v78;
            v10 += v74;
            v82 = v78;
            do
            {
              *(float *)v10 = v81;
              *v82 = v76;
              v83 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v82[1];
              *((_DWORD *)v82 + 1) = v83;
              do
              {
                v84 = *(float *)(v10 + 8);
                v10 += 8;
                v76 = v84;
              }
              while (v84 <= result);
              do
              {
                v85 = *(v82 - 2);
                v82 -= 2;
                v81 = v85;
              }
              while (v85 > result);
            }
            while (v10 < (unint64_t)v82);
            v86 = (float *)(v10 - 8);
            if (v10 - 8 == a1)
              goto LABEL_79;
          }
          *(_QWORD *)a1 = *(_QWORD *)v86;
LABEL_79:
          *(float *)(v10 - 8) = result;
          *(_DWORD *)(v10 - 4) = v75;
          if (v77 < (unint64_t)v78)
            goto LABEL_82;
          v87 = sub_20EEFE03C(a1, (uint64_t)v86);
          if (!sub_20EEFE03C(v10, (uint64_t)a2))
          {
            if (v87)
              continue;
LABEL_82:
            sub_20EEFD594(a1, v86, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v86;
          if (v87)
            return result;
          goto LABEL_1;
        }
        v113 = (float *)(v10 + 8);
        v115 = (float *)v10 == a2 || v113 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v115)
          {
            v116 = 0;
            v117 = v10;
            do
            {
              v119 = v113;
              result = *(float *)(v117 + 8);
              if (result <= *(float *)v117)
              {
                v120 = *(_DWORD *)(v117 + 12);
                v121 = v116;
                do
                {
                  *(_QWORD *)(v10 + v121 + 8) = *(_QWORD *)(v10 + v121);
                  if (!v121)
                  {
                    v118 = v10;
                    goto LABEL_128;
                  }
                  v122 = *(float *)(v10 + v121 - 8);
                  v121 -= 8;
                }
                while (v122 >= result);
                v118 = v10 + v121 + 8;
LABEL_128:
                *(float *)v118 = result;
                *(_DWORD *)(v118 + 4) = v120;
              }
              v113 = v119 + 2;
              v116 += 8;
              v117 = (unint64_t)v119;
            }
            while (v119 + 2 != a2);
          }
        }
        else if (!v115)
        {
          do
          {
            v148 = (uint64_t)v113;
            result = *(float *)(a1 + 8);
            if (result <= *(float *)a1)
            {
              v149 = *(_DWORD *)(a1 + 12);
              do
              {
                v150 = v113;
                v151 = *((_QWORD *)v113 - 1);
                v113 -= 2;
                *(_QWORD *)v150 = v151;
              }
              while (*(v150 - 4) >= result);
              *v113 = result;
              *((_DWORD *)v113 + 1) = v149;
            }
            v113 = (float *)(v148 + 8);
            a1 = v148;
          }
          while ((float *)(v148 + 8) != a2);
        }
        return result;
    }
  }
}

  v499 = (__int128 *)(a2 - 288);
  v500 = (__int128 *)(a2 - 144);
  v498 = (__int128 *)(a2 - 432);
  v502 = a2 - 48;
  v14 = (unint64_t)a1;
  v514 = a2;
  while (2)
  {
    v15 = (_OWORD *)v14;
    v16 = a2 - v14;
    v17 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v14) >> 4);
    switch(v17)
    {
      case 0uLL:
      case 1uLL:
        return a6.n128_f64[0];
      case 2uLL:
        v222 = (__int128 *)(a2 - 80);
        v221 = *(_DWORD *)(a2 - 80);
        v224 = (__int128 *)(v14 + 64);
        v223 = *(_DWORD *)(v14 + 64);
        if (v221 == v223)
        {
          v225 = **(_QWORD **)(a3 + 8);
          a6.n128_u64[0] = *(_QWORD *)v225;
          a6.n128_u32[2] = *(_DWORD *)(v225 + 8);
          a7.i64[0] = *(_QWORD *)(a2 - 96);
          a7.i32[2] = *(_DWORD *)(a2 - 88);
          v226 = (int8x16_t)vsubq_f32((float32x4_t)a6, a7);
          v227 = (float32x2_t)vextq_s8(v226, v226, 8uLL).u64[0];
          v228 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v226.i8, 1), *(float32x2_t *)v226.i8, 1);
          v226.i64[0] = *(_QWORD *)(v14 + 48);
          v226.i32[2] = *(_DWORD *)(v14 + 56);
          a6 = (__n128)vsubq_f32((float32x4_t)a6, (float32x4_t)v226);
          v229 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
          if (vmla_f32(v228, v227, v227).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v229, v229).f32[0])return a6.n128_f64[0];
          goto LABEL_792;
        }
        if (v221 == 4)
        {
          if (v223 != 4)
          {
LABEL_792:
            v491 = (__int128 *)(a2 - 144);
            v601 = *(_OWORD *)(v14 + 16);
            v609 = *(_OWORD *)(v14 + 32);
            v593 = *(_OWORD *)v14;
            v614 = *(_OWORD *)(v14 + 48);
            v619 = *v224;
            *(_OWORD *)&v634[9] = *(_OWORD *)(v14 + 121);
            v629 = *(_OWORD *)(v14 + 96);
            *(_OWORD *)v634 = *(_OWORD *)(v14 + 112);
            v624 = *(_OWORD *)(v14 + 80);
            v492 = *(_OWORD *)(a2 - 144);
            v493 = *(_OWORD *)(a2 - 128);
            v494 = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 - 112);
            *(_OWORD *)(v14 + 48) = v494;
            *(_OWORD *)v14 = v492;
            *(_OWORD *)(v14 + 16) = v493;
            v495 = *(_OWORD *)(a2 - 48);
            a6 = *(__n128 *)(a2 - 32);
            v496 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(v14 + 121) = *(_OWORD *)(a2 - 23);
            *(_OWORD *)(v14 + 96) = v495;
            *(__n128 *)(v14 + 112) = a6;
            *(_OWORD *)(v14 + 80) = v496;
            *v224 = *v222;
            v491[2] = v609;
            v491[3] = v614;
            *v491 = v593;
            v491[1] = v601;
            *v222 = v619;
            a6.n128_u64[0] = v624;
            *(_OWORD *)(a2 - 23) = *(_OWORD *)&v634[9];
            *(_OWORD *)(a2 - 48) = v629;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v634;
            *(_OWORD *)(a2 - 64) = v624;
            return a6.n128_f64[0];
          }
        }
        else if (v223 == 4)
        {
          return a6.n128_f64[0];
        }
        if (!(*(unsigned __int8 *)(a2 - 32) | *(unsigned __int8 *)(v14 + 112)))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_793;
          }
          v221 = *(_DWORD *)v222;
        }
        v490 = *(_QWORD *)(a3 + 32);
        if (v221 == 1)
        {
          if (!*(_BYTE *)(v14 + 112))
            goto LABEL_792;
          if (!*(_BYTE *)(v14 + 108) || (a6.n128_u32[0] = *(_DWORD *)(v14 + 104), a6.n128_f32[0] <= 0.6))
          {
            if (!*(_BYTE *)(v14 + 100))
              goto LABEL_792;
            a6.n128_u32[0] = *(_DWORD *)(v14 + 96);
            if (a6.n128_f32[0] <= *(float *)(*(_QWORD *)v490 + 8))
              goto LABEL_792;
          }
        }
        else if (*(_BYTE *)(a2 - 32))
        {
          if (*(_BYTE *)(a2 - 36))
          {
            a6.n128_u32[0] = *(_DWORD *)(a2 - 40);
            if (a6.n128_f32[0] > 0.6)
              goto LABEL_792;
          }
          if (*(_BYTE *)(a2 - 44))
          {
            a6.n128_u32[0] = *(_DWORD *)(a2 - 48);
            if (a6.n128_f32[0] > *(float *)(*(_QWORD *)v490 + 8))
              goto LABEL_792;
          }
        }
        return a6.n128_f64[0];
      case 3uLL:
        a6.n128_u64[0] = sub_20EF02FF4((__int128 *)v14, (__int128 *)(v14 + 144), v500, a3, (float32x4_t)a6, a7).u64[0];
        return a6.n128_f64[0];
      case 4uLL:
        a6.n128_u64[0] = sub_20EF04314(v14, v14 + 144, v14 + 288, v500, a3, (float32x4_t)a6, a7).u64[0];
        return a6.n128_f64[0];
      case 5uLL:
        a6.n128_u64[0] = sub_20EF02798(v14, v14 + 144, v14 + 288, v14 + 432, v500, a3, (float32x4_t)a6, a7).u64[0];
        return a6.n128_f64[0];
      default:
        v528 = (_OWORD *)v14;
        if (v16 <= 3455)
        {
          v230 = (_OWORD *)(v14 + 144);
          v232 = v14 == a2 || v230 == (_OWORD *)a2;
          if ((a5 & 1) != 0)
          {
            if (v232)
              return a6.n128_f64[0];
            v233 = 0;
LABEL_425:
            v234 = v15;
            v15 = v230;
            v236 = v234 + 4;
            v235 = *((_DWORD *)v234 + 16);
            v237 = *((_DWORD *)v234 + 52);
            if (v237 == v235)
            {
              v238 = a3;
              v239 = **(_QWORD **)(a3 + 8);
              a6.n128_u64[0] = *(_QWORD *)v239;
              a6.n128_u32[2] = *(_DWORD *)(v239 + 8);
              a7.i64[0] = *((_QWORD *)v234 + 24);
              a7.i32[2] = *((_DWORD *)v234 + 50);
              a7 = vsubq_f32((float32x4_t)a6, a7);
              v240 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              v241 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
              a7.i64[0] = *((_QWORD *)v234 + 6);
              a7.i32[2] = *((_DWORD *)v234 + 14);
              a6 = (__n128)vsubq_f32((float32x4_t)a6, a7);
              v242 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
              if (vmla_f32(v241, v240, v240).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v242, v242).f32[0])goto LABEL_424;
              goto LABEL_447;
            }
            v238 = a3;
            if (v237 == 4)
            {
              if (v235 != 4)
              {
                v237 = 4;
LABEL_447:
                v597 = v15[1];
                v605 = v15[2];
                v589 = *v15;
                a11.i64[0] = *((_QWORD *)v234 + 24);
                a11.i32[2] = *((_DWORD *)v234 + 50);
                v244 = *((_DWORD *)v234 + 51);
                *(_OWORD *)v555 = *(_OWORD *)((char *)v234 + 212);
                *(_OWORD *)&v555[12] = v234[14];
                v245 = *((float *)v234 + 60);
                v246 = *((unsigned __int8 *)v234 + 244);
                v568 = *((_BYTE *)v234 + 247);
                v564 = *(_WORD *)((char *)v234 + 245);
                v247 = *((float *)v234 + 62);
                v248 = *((unsigned __int8 *)v234 + 252);
                v549 = *((_BYTE *)v234 + 255);
                v543 = *(_WORD *)((char *)v234 + 253);
                v249 = *((unsigned __int8 *)v234 + 256);
                v579 = *(_QWORD *)((char *)v234 + 273);
                v573 = *(__n128 *)((char *)v234 + 257);
                v250 = v234[1];
                *v15 = *v234;
                v15[1] = v250;
                v251 = v234[3];
                v15[2] = v234[2];
                v15[3] = v251;
                v252 = v234[7];
                v15[6] = v234[6];
                v15[7] = v252;
                *(_OWORD *)((char *)v15 + 121) = *(_OWORD *)((char *)v234 + 121);
                v253 = *((float32x4_t *)v234 + 5);
                v15[4] = *v236;
                v15[5] = v253;
                v254 = v528;
                if (v234 == v528)
                {
                  v234 = v528;
                  goto LABEL_423;
                }
                v511 = v15;
                v516 = v248;
                v256 = v247 > 0.6 && v248 != 0;
                v521 = v233;
                v532 = a11;
                v526 = v249;
                while (1)
                {
                  v267 = (_OWORD *)((char *)v254 + v233);
                  v269 = (uint64_t)v254 + v233 - 80;
                  v268 = *(_DWORD *)v269;
                  if (v237 == *(_DWORD *)v269)
                  {
                    v257 = **(_QWORD **)(v238 + 8);
                    v253.i64[0] = *(_QWORD *)v257;
                    v253.i32[2] = *(_DWORD *)(v257 + 8);
                    v258 = (int8x16_t)vsubq_f32(v253, a11);
                    v259 = (float32x2_t)vextq_s8(v258, v258, 8uLL).u64[0];
                    v260 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v258.i8, *(float32x2_t *)v258.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v258.i8, 1), *(float32x2_t *)v258.i8, 1);
                    v258.i64[0] = *((_QWORD *)v267 - 12);
                    v258.i32[2] = *((_DWORD *)v267 - 22);
                    v261 = (int8x16_t)vsubq_f32(v253, (float32x4_t)v258);
                    v262 = (float32x2_t)vextq_s8(v261, v261, 8uLL).u64[0];
                    if (vmla_f32(v260, v259, v259).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v261.i8, 1), *(float32x2_t *)v261.i8, 1), v262, v262).f32[0])goto LABEL_481;
                  }
                  else
                  {
                    if (v237 != 4)
                    {
                      if (v268 == 4)
                        goto LABEL_481;
                      v271 = *((unsigned __int8 *)v528 + v233 - 32);
                      if (!(v249 | v271))
                      {
                        v272 = v246;
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_793;
                        }
                        a11 = v532;
                        if (v237 != 1)
                        {
                          v234 = (_OWORD *)((char *)v528 + v233);
                          v236 = (_OWORD *)((char *)v528 + v233 + 64);
                          LOBYTE(v246) = v272;
                          v233 = v521;
                          LOBYTE(v248) = v516;
                          LOBYTE(v249) = v526;
                          goto LABEL_482;
                        }
                        v270 = *(_QWORD *)(v238 + 32);
                        v271 = *((unsigned __int8 *)v528 + v233 - 32);
                        v246 = v272;
                        v249 = v526;
LABEL_474:
                        if (v271)
                        {
                          v273 = (float *)((char *)v528 + v233);
                          if (*((_BYTE *)v528 + v233 - 36))
                          {
                            if (*(v273 - 10) > 0.6)
                              goto LABEL_481;
                          }
                          if (*((_BYTE *)v273 - 44)
                            && *(float *)((char *)v528 + v233 - 48) > *(float *)(*(_QWORD *)v270 + 8))
                          {
                            goto LABEL_481;
                          }
                        }
                        goto LABEL_456;
                      }
                      v270 = *(_QWORD *)(v238 + 32);
                      if (v237 == 1)
                        goto LABEL_474;
                      goto LABEL_466;
                    }
                    if (v268 == 4)
                    {
                      if (!v249 && !*((_BYTE *)v528 + v233 - 32))
                      {
                        v274 = v237;
                        v275 = v249;
                        v276 = v246;
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_793;
                        }
                        v234 = (_OWORD *)((char *)v528 + v233);
                        v236 = (_OWORD *)((char *)v528 + v233 + 64);
                        a11 = v532;
                        LOBYTE(v246) = v276;
                        v233 = v521;
                        LOBYTE(v248) = v516;
                        LOBYTE(v249) = v275;
                        v15 = v511;
                        v237 = v274;
LABEL_423:
                        a7.i32[3] = HIDWORD(v597);
                        v234[1] = v597;
                        v234[2] = v605;
                        *v234 = v589;
                        *((_DWORD *)v234 + 14) = a11.i32[2];
                        *((_QWORD *)v234 + 6) = a11.i64[0];
                        *((_DWORD *)v234 + 15) = v244;
                        *(_DWORD *)v236 = v237;
                        *(_OWORD *)((char *)v234 + 68) = *(_OWORD *)v555;
                        v234[5] = *(_OWORD *)&v555[12];
                        *((float *)v234 + 24) = v245;
                        *((_BYTE *)v234 + 100) = v246;
                        *(_WORD *)((char *)v234 + 101) = v564;
                        *((_BYTE *)v234 + 103) = v568;
                        *((float *)v234 + 26) = v247;
                        *((_BYTE *)v234 + 108) = v248;
                        *(_WORD *)((char *)v234 + 109) = v543;
                        *((_BYTE *)v234 + 111) = v549;
                        *((_BYTE *)v234 + 112) = v249;
                        a6 = v573;
                        *(_QWORD *)((char *)v234 + 129) = v579;
                        *(__n128 *)((char *)v234 + 113) = v573;
LABEL_424:
                        v230 = v15 + 9;
                        v233 += 144;
                        if (v15 + 9 == (_OWORD *)v514)
                          return a6.n128_f64[0];
                        goto LABEL_425;
                      }
                      v270 = *(_QWORD *)(v238 + 32);
LABEL_466:
                      if (!v249 || !v256 && (!(_DWORD)v246 || v245 <= *(float *)(*(_QWORD *)v270 + 8)))
                        goto LABEL_481;
                    }
                  }
LABEL_456:
                  v236 = v234 - 5;
                  v234 -= 9;
                  v263 = *(v267 - 8);
                  *v267 = *(v267 - 9);
                  v267[1] = v263;
                  v264 = *(v267 - 6);
                  v267[2] = *(v267 - 7);
                  v267[3] = v264;
                  v254 = v528;
                  v265 = (_OWORD *)((char *)v528 + v233);
                  v266 = *(_OWORD *)(v269 + 48);
                  v265[6] = *(_OWORD *)(v269 + 32);
                  v265[7] = v266;
                  *(_OWORD *)((char *)v265 + 121) = *(_OWORD *)(v269 + 57);
                  v253 = *(float32x4_t *)(v269 + 16);
                  v265[4] = *(_OWORD *)v269;
                  v265[5] = v253;
                  v233 -= 144;
                  if (!v233)
                  {
                    v236 = v528 + 4;
                    v234 = v528;
LABEL_481:
                    v233 = v521;
                    LOBYTE(v248) = v516;
LABEL_482:
                    v15 = v511;
                    goto LABEL_423;
                  }
                }
              }
            }
            else if (v235 == 4)
            {
              goto LABEL_424;
            }
            if (!(*((unsigned __int8 *)v234 + 256) | *((unsigned __int8 *)v234 + 112)))
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_793;
              }
              v237 = *((_DWORD *)v234 + 52);
            }
            v243 = *(_QWORD *)(a3 + 32);
            if (v237 == 1)
            {
              if (*((_BYTE *)v234 + 112))
              {
                if (*((_BYTE *)v234 + 108))
                {
                  a6.n128_u32[0] = *((_DWORD *)v234 + 26);
                  if (a6.n128_f32[0] > 0.6)
                    goto LABEL_424;
                }
                if (*((_BYTE *)v234 + 100))
                {
                  a6.n128_u32[0] = *((_DWORD *)v234 + 24);
                  if (a6.n128_f32[0] > *(float *)(*(_QWORD *)v243 + 8))
                    goto LABEL_424;
                }
              }
              v237 = 1;
            }
            else
            {
              if (!*((_BYTE *)v234 + 256))
                goto LABEL_424;
              if (!*((_BYTE *)v234 + 252) || (a6.n128_u32[0] = *((_DWORD *)v234 + 62), a6.n128_f32[0] <= 0.6))
              {
                if (!*((_BYTE *)v234 + 244))
                  goto LABEL_424;
                a6.n128_u32[0] = *((_DWORD *)v234 + 60);
                if (a6.n128_f32[0] <= *(float *)(*(_QWORD *)v243 + 8))
                  goto LABEL_424;
              }
            }
            goto LABEL_447;
          }
          if (v232)
            return a6.n128_f64[0];
          v455 = (_OWORD *)(v14 + 208);
          while (2)
          {
            v457 = v15;
            v15 = v230;
            v458 = *((_DWORD *)v457 + 52);
            v459 = *((_DWORD *)v457 + 16);
            if (v458 == v459)
            {
              v460 = **(_QWORD **)(a3 + 8);
              a6.n128_u64[0] = *(_QWORD *)v460;
              a6.n128_u32[2] = *(_DWORD *)(v460 + 8);
              a7.i64[0] = *((_QWORD *)v457 + 24);
              a7.i32[2] = *((_DWORD *)v457 + 50);
              a7 = vsubq_f32((float32x4_t)a6, a7);
              v461 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              v462 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
              a7.i64[0] = *((_QWORD *)v457 + 6);
              a7.i32[2] = *((_DWORD *)v457 + 14);
              a6 = (__n128)vsubq_f32((float32x4_t)a6, a7);
              v463 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
              if (vmla_f32(v462, v461, v461).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v463, v463).f32[0])goto LABEL_721;
              goto LABEL_744;
            }
            if (v458 == 4)
            {
              if (v459 != 4)
              {
                v458 = 4;
LABEL_744:
                v465 = v15;
                v600 = v15[1];
                v608 = v15[2];
                v592 = *v15;
                a11.i64[0] = *((_QWORD *)v457 + 24);
                a11.i32[2] = *((_DWORD *)v457 + 50);
                v466 = *((_DWORD *)v457 + 51);
                *(_OWORD *)v558 = *(_OWORD *)((char *)v457 + 212);
                *(_OWORD *)&v558[12] = v457[14];
                v467 = *((float *)v457 + 60);
                v468 = *((unsigned __int8 *)v457 + 244);
                v570 = *((_BYTE *)v457 + 247);
                v567 = *(_WORD *)((char *)v457 + 245);
                v469 = *((float *)v457 + 62);
                v470 = *((unsigned __int8 *)v457 + 252);
                v552 = *((_BYTE *)v457 + 255);
                v546 = *(_WORD *)((char *)v457 + 253);
                v471 = *((unsigned __int8 *)v457 + 256);
                v472 = *(__n128 *)((char *)v457 + 257);
                v582 = *(_QWORD *)((char *)v457 + 273);
                v474 = v469 > 0.6 && v470 != 0;
                v475 = v455;
                v576 = v472;
                v533 = a11;
                while (1)
                {
                  v482 = *(v475 - 12);
                  *(v475 - 4) = *(v475 - 13);
                  *(v475 - 3) = v482;
                  v483 = *(v475 - 10);
                  *(v475 - 2) = *(v475 - 11);
                  *(v475 - 1) = v483;
                  v484 = *(v475 - 6);
                  v475[2] = *(v475 - 7);
                  v475[3] = v484;
                  *(_OWORD *)((char *)v475 + 57) = *(_OWORD *)((char *)v475 - 87);
                  v485 = *((float32x4_t *)v475 - 8);
                  *v475 = *(v475 - 9);
                  v475[1] = v485;
                  v486 = *((_DWORD *)v475 - 72);
                  if (v458 == v486)
                  {
                    v476 = **(_QWORD **)(a3 + 8);
                    v485.i64[0] = *(_QWORD *)v476;
                    v485.i32[2] = *(_DWORD *)(v476 + 8);
                    v477 = (int8x16_t)vsubq_f32(v485, a11);
                    v478 = (float32x2_t)vextq_s8(v477, v477, 8uLL).u64[0];
                    v479 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v477.i8, *(float32x2_t *)v477.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v477.i8, 1), *(float32x2_t *)v477.i8, 1);
                    v477.i64[0] = *((_QWORD *)v475 - 38);
                    v477.i32[2] = *((_DWORD *)v475 - 74);
                    v480 = (int8x16_t)vsubq_f32(v485, (float32x4_t)v477);
                    v481 = (float32x2_t)vextq_s8(v480, v480, 8uLL).u64[0];
                    if (vmla_f32(v479, v478, v478).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v480.i8, *(float32x2_t *)v480.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v480.i8, 1), *(float32x2_t *)v480.i8, 1), v481, v481).f32[0])goto LABEL_720;
                    goto LABEL_752;
                  }
                  if (v458 == 4)
                    break;
                  if (v486 == 4)
                    goto LABEL_720;
                  v488 = *((unsigned __int8 *)v475 - 240);
                  if (v471 | v488)
                  {
                    v487 = *(_QWORD *)(a3 + 32);
                    if (v458 != 1)
                      goto LABEL_762;
                  }
                  else
                  {
                    v489 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    a11 = v533;
                    if (v489)
                      goto LABEL_793;
                    if (v458 != 1)
                      goto LABEL_720;
                    v487 = *(_QWORD *)(a3 + 32);
                    v488 = *((unsigned __int8 *)v475 - 240);
                  }
                  if (v488
                    && (*((_BYTE *)v475 - 244) && *((float *)v475 - 62) > 0.6
                     || *((_BYTE *)v475 - 252) && *((float *)v475 - 64) > *(float *)(*(_QWORD *)v487 + 8)))
                  {
                    goto LABEL_720;
                  }
LABEL_752:
                  v475 -= 9;
                }
                if (v486 != 4)
                  goto LABEL_752;
                if (!v471 && !*((_BYTE *)v475 - 240))
                {
                  v456 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  a11 = v533;
                  if (v456)
                    goto LABEL_793;
LABEL_720:
                  *(v475 - 13) = v592;
                  *(v475 - 12) = v600;
                  *(v475 - 11) = v608;
                  *((_DWORD *)v475 - 38) = a11.i32[2];
                  *((_QWORD *)v475 - 20) = a11.i64[0];
                  *((_DWORD *)v475 - 37) = v466;
                  *((_DWORD *)v475 - 36) = v458;
                  a7.i32[3] = *(_DWORD *)&v558[12];
                  *(_OWORD *)((char *)v475 - 140) = *(_OWORD *)v558;
                  *(v475 - 8) = *(_OWORD *)&v558[12];
                  *((float *)v475 - 28) = v467;
                  *((_BYTE *)v475 - 108) = v468;
                  *(_WORD *)((char *)v475 - 107) = v567;
                  *((_BYTE *)v475 - 105) = v570;
                  *((float *)v475 - 26) = v469;
                  *((_BYTE *)v475 - 100) = v470;
                  *((_BYTE *)v475 - 97) = v552;
                  *(_WORD *)((char *)v475 - 99) = v546;
                  *((_BYTE *)v475 - 96) = v471;
                  a6 = v576;
                  *(_QWORD *)((char *)v475 - 79) = v582;
                  *(__n128 *)((char *)v475 - 95) = v576;
                  v15 = v465;
                  a2 = v514;
LABEL_721:
                  v230 = v15 + 9;
                  v455 += 9;
                  if (v15 + 9 == (_OWORD *)a2)
                    return a6.n128_f64[0];
                  continue;
                }
                v487 = *(_QWORD *)(a3 + 32);
LABEL_762:
                if (!v471 || !v474 && (!v468 || v467 <= *(float *)(*(_QWORD *)v487 + 8)))
                  goto LABEL_720;
                goto LABEL_752;
              }
            }
            else if (v459 == 4)
            {
              goto LABEL_721;
            }
            break;
          }
          if (!(*((unsigned __int8 *)v457 + 256) | *((unsigned __int8 *)v457 + 112)))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_793;
            }
            v458 = *((_DWORD *)v457 + 52);
          }
          v464 = *(_QWORD *)(a3 + 32);
          if (v458 == 1)
          {
            if (*((_BYTE *)v457 + 112))
            {
              if (*((_BYTE *)v457 + 108))
              {
                a6.n128_u32[0] = *((_DWORD *)v457 + 26);
                if (a6.n128_f32[0] > 0.6)
                  goto LABEL_721;
              }
              if (*((_BYTE *)v457 + 100))
              {
                a6.n128_u32[0] = *((_DWORD *)v457 + 24);
                if (a6.n128_f32[0] > *(float *)(*(_QWORD *)v464 + 8))
                  goto LABEL_721;
              }
            }
            v458 = 1;
          }
          else
          {
            if (!*((_BYTE *)v457 + 256))
              goto LABEL_721;
            if (!*((_BYTE *)v457 + 252) || (a6.n128_u32[0] = *((_DWORD *)v457 + 62), a6.n128_f32[0] <= 0.6))
            {
              if (!*((_BYTE *)v457 + 244))
                goto LABEL_721;
              a6.n128_u32[0] = *((_DWORD *)v457 + 60);
              if (a6.n128_f32[0] <= *(float *)(*(_QWORD *)v464 + 8))
                goto LABEL_721;
            }
          }
          goto LABEL_744;
        }
        if (a4)
        {
          v18 = (__int128 *)(v14 + 144 * (v17 >> 1));
          if ((unint64_t)v16 < 0x4801)
          {
            v27 = a3;
            v35 = sub_20EF02FF4((__int128 *)(v14 + 144 * (v17 >> 1)), (__int128 *)v14, v500, a3, (float32x4_t)a6, a7);
            v510 = a4 - 1;
            if ((a5 & 1) != 0)
              goto LABEL_31;
          }
          else
          {
            v19 = sub_20EF02FF4((__int128 *)v14, (__int128 *)(v14 + 144 * (v17 >> 1)), v500, a3, (float32x4_t)a6, a7);
            v20 = 144 * (v17 >> 1);
            v21 = a4;
            v22 = (_OWORD *)(v14 + v20);
            v23 = (__int128 *)(v14 + v20 - 144);
            v25 = sub_20EF02FF4((__int128 *)(v14 + 144), v23, v499, a3, v19, v24);
            v26 = (__int128 *)(v14 + 144 + v20);
            v27 = a3;
            v29 = sub_20EF02FF4((__int128 *)(v14 + 288), v26, v498, a3, v25, v28);
            sub_20EF02FF4(v23, v18, v26, a3, v29, v30);
            v602 = *(_OWORD *)(v14 + 32);
            v610 = *(_OWORD *)(v14 + 48);
            v594 = *(_OWORD *)(v14 + 16);
            v586 = *(_OWORD *)v14;
            v615 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v630[9] = *(_OWORD *)(v14 + 121);
            v625 = *(_OWORD *)(v14 + 96);
            *(_OWORD *)v630 = *(_OWORD *)(v14 + 112);
            v620 = *(_OWORD *)(v14 + 80);
            v31 = *v18;
            v32 = v18[1];
            v33 = v18[3];
            *(_OWORD *)(v14 + 32) = v18[2];
            *(_OWORD *)(v14 + 48) = v33;
            *(_OWORD *)v14 = v31;
            *(_OWORD *)(v14 + 16) = v32;
            *(_OWORD *)(v14 + 64) = v22[4];
            v35 = *((float32x4_t *)v22 + 5);
            v36 = *((float32x4_t *)v22 + 6);
            v34 = v22[7];
            *(_OWORD *)(v14 + 121) = *(_OWORD *)((char *)v22 + 121);
            *(float32x4_t *)(v14 + 96) = v36;
            *(_OWORD *)(v14 + 112) = v34;
            *(float32x4_t *)(v14 + 80) = v35;
            v18[2] = v602;
            v18[3] = v610;
            *v18 = v586;
            v18[1] = v594;
            v22[4] = v615;
            v35.i32[3] = HIDWORD(v620);
            v36.i32[3] = HIDWORD(v625);
            *(_OWORD *)((char *)v22 + 121) = *(_OWORD *)&v630[9];
            v22[6] = v625;
            v22[7] = *(_OWORD *)v630;
            v22[5] = v620;
            v37 = v21;
            a2 = v514;
            v510 = v37 - 1;
            if ((a5 & 1) != 0)
              goto LABEL_31;
          }
          v38 = *(_DWORD *)(v14 - 80);
          v39 = *(_DWORD *)(v14 + 64);
          if (v38 != v39)
          {
            if (v38 == 4)
            {
              if (v39 != 4)
                goto LABEL_31;
            }
            else if (v39 == 4)
            {
              goto LABEL_205;
            }
            if (!(*(unsigned __int8 *)(v14 - 32) | *(unsigned __int8 *)(v14 + 112)))
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_793;
              }
              v38 = *(_DWORD *)(v14 - 80);
            }
            v46 = *(_QWORD *)(v27 + 32);
            if (v38 == 1)
            {
              if (!*(_BYTE *)(v14 + 112)
                || (!*(_BYTE *)(v14 + 108) || *(float *)(v14 + 104) <= 0.6)
                && (!*(_BYTE *)(v14 + 100) || *(float *)(v14 + 96) <= *(float *)(*(_QWORD *)v46 + 8)))
              {
                goto LABEL_31;
              }
            }
            else if (*(_BYTE *)(v14 - 32)
                   && (*(_BYTE *)(v14 - 36) && *(float *)(v14 - 40) > 0.6
                    || *(_BYTE *)(v14 - 44) && *(float *)(v14 - 48) > *(float *)(*(_QWORD *)v46 + 8)))
            {
              goto LABEL_31;
            }
LABEL_205:
            v134 = *(_DWORD *)(v14 + 64);
            v578 = *(_OWORD *)(v14 + 16);
            v584 = *(_OWORD *)(v14 + 32);
            v572 = *(_OWORD *)v14;
            a11.i64[0] = *(_QWORD *)(v14 + 48);
            a11.i32[2] = *(_DWORD *)(v14 + 56);
            v135 = *(_DWORD *)(v14 + 60);
            *(_OWORD *)v563 = *(_OWORD *)(v14 + 68);
            *(_OWORD *)&v563[12] = *(_OWORD *)(v14 + 80);
            v136 = *(float *)(v14 + 96);
            v525 = *(unsigned __int8 *)(v14 + 100);
            v548 = *(_BYTE *)(v14 + 103);
            v542 = *(_WORD *)(v14 + 101);
            v137 = *(float *)(v14 + 104);
            v520 = *(unsigned __int8 *)(v14 + 108);
            v539 = *(_BYTE *)(v14 + 111);
            v536 = *(_WORD *)(v14 + 109);
            v138 = *(unsigned __int8 *)(v14 + 112);
            v139 = *(int8x16_t *)(v14 + 113);
            v560 = *(_QWORD *)(v14 + 129);
            v554 = (__n128)v139;
            v140 = *(_DWORD *)(a2 - 80);
            v531 = a11;
            v507 = (_OWORD *)(v14 + 64);
            if (v134 == v140)
            {
              v141 = **(_QWORD **)(v27 + 8);
              v139.i64[0] = *(_QWORD *)v141;
              v139.i32[2] = *(_DWORD *)(v141 + 8);
              v142 = (int8x16_t)vsubq_f32((float32x4_t)v139, a11);
              v143 = (float32x2_t)vextq_s8(v142, v142, 8uLL).u64[0];
              v144 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)v142.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.i8, 1), *(float32x2_t *)v142.i8, 1);
              v142.i64[0] = *(_QWORD *)(a2 - 96);
              v142.i32[2] = *(_DWORD *)(a2 - 88);
              v139 = (int8x16_t)vsubq_f32((float32x4_t)v139, (float32x4_t)v142);
              v145 = (float32x2_t)vextq_s8(v139, v139, 8uLL).u64[0];
              if (vmla_f32(v144, v143, v143).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1), *(float32x2_t *)v139.i8, 1), v145, v145).f32[0])goto LABEL_233;
            }
            else if (v134 == 4)
            {
              if (v140 != 4)
                goto LABEL_233;
              if (*(_BYTE *)(v14 + 112) || *(_BYTE *)(a2 - 32))
              {
                v148 = *(_QWORD *)(v27 + 32);
LABEL_219:
                if (*(_BYTE *)(v14 + 112)
                  && (*(_BYTE *)(v14 + 108) && v137 > 0.6
                   || *(_BYTE *)(v14 + 100) && v136 > *(float *)(*(_QWORD *)v148 + 8)))
                {
                  goto LABEL_233;
                }
                goto LABEL_268;
              }
              v146 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              a11 = v531;
              if (v146)
                goto LABEL_793;
            }
            else if (v140 != 4)
            {
              v147 = *(unsigned __int8 *)(a2 - 32);
              if (v138 | v147)
              {
                v148 = *(_QWORD *)(v27 + 32);
                if (v134 == 1)
                  goto LABEL_228;
                goto LABEL_219;
              }
              v149 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              a11 = v531;
              if (v149)
                goto LABEL_793;
              if (v134 == 1)
              {
                v148 = *(_QWORD *)(v27 + 32);
                v147 = *(unsigned __int8 *)(a2 - 32);
LABEL_228:
                if (!v147
                  || (!*(_BYTE *)(a2 - 36) || *(float *)(a2 - 40) <= 0.6)
                  && (!*(_BYTE *)(a2 - 44) || *(float *)(a2 - 48) <= *(float *)(*(_QWORD *)v148 + 8)))
                {
LABEL_233:
                  v151 = v137 > 0.6 && v520 != 0;
                  v14 += 144;
                  while (2)
                  {
                    v157 = *(_DWORD *)(v14 + 64);
                    if (v134 == v157)
                    {
                      v152 = **(_QWORD **)(v27 + 8);
                      v139.i64[0] = *(_QWORD *)v152;
                      v139.i32[2] = *(_DWORD *)(v152 + 8);
                      v153 = (int8x16_t)vsubq_f32((float32x4_t)v139, a11);
                      v154 = (float32x2_t)vextq_s8(v153, v153, 8uLL).u64[0];
                      v155 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v153.i8, *(float32x2_t *)v153.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v153.i8, 1), *(float32x2_t *)v153.i8, 1);
                      v153.i64[0] = *(_QWORD *)(v14 + 48);
                      v153.i32[2] = *(_DWORD *)(v14 + 56);
                      v139 = (int8x16_t)vsubq_f32((float32x4_t)v139, (float32x4_t)v153);
                      v156 = (float32x2_t)vextq_s8(v139, v139, 8uLL).u64[0];
                      if (vmla_f32(v155, v154, v154).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1), *(float32x2_t *)v139.i8, 1), v156, v156).f32[0])goto LABEL_302;
                    }
                    else
                    {
                      if (v134 == 4)
                      {
                        if (v157 != 4)
                          goto LABEL_302;
                        if (!v138 && !*(_BYTE *)(v14 + 112))
                        {
                          v158 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                          a11 = v531;
                          if (v158)
                            goto LABEL_793;
                          goto LABEL_241;
                        }
                        v160 = *(_QWORD *)(v27 + 32);
LABEL_254:
                        if (v138 && (v151 || v525 && v136 > *(float *)(*(_QWORD *)v160 + 8)))
                          goto LABEL_302;
                        goto LABEL_241;
                      }
                      if (v157 != 4)
                      {
                        v159 = *(unsigned __int8 *)(v14 + 112);
                        if (v138 | v159)
                        {
                          v160 = *(_QWORD *)(v27 + 32);
                          if (v134 != 1)
                            goto LABEL_254;
                        }
                        else
                        {
                          v161 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                          a11 = v531;
                          if (v161)
                            goto LABEL_793;
                          if (v134 != 1)
                            goto LABEL_241;
                          v160 = *(_QWORD *)(v27 + 32);
                          v159 = *(unsigned __int8 *)(v14 + 112);
                        }
                        if (!v159
                          || (!*(_BYTE *)(v14 + 108) || *(float *)(v14 + 104) <= 0.6)
                          && (!*(_BYTE *)(v14 + 100) || *(float *)(v14 + 96) <= *(float *)(*(_QWORD *)v160 + 8)))
                        {
                          goto LABEL_302;
                        }
                      }
                    }
LABEL_241:
                    v14 += 144;
                    continue;
                  }
                }
              }
            }
LABEL_268:
            v14 += 144;
            if ((unint64_t)(v15 + 9) < a2)
            {
              v163 = v137 > 0.6 && v520 != 0;
              while (1)
              {
                v169 = *(_DWORD *)(v14 + 64);
                if (v134 == v169)
                {
                  v164 = **(_QWORD **)(v27 + 8);
                  v139.i64[0] = *(_QWORD *)v164;
                  v139.i32[2] = *(_DWORD *)(v164 + 8);
                  v165 = (int8x16_t)vsubq_f32((float32x4_t)v139, a11);
                  v166 = (float32x2_t)vextq_s8(v165, v165, 8uLL).u64[0];
                  v167 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v165.i8, *(float32x2_t *)v165.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v165.i8, 1), *(float32x2_t *)v165.i8, 1);
                  v165.i64[0] = *(_QWORD *)(v14 + 48);
                  v165.i32[2] = *(_DWORD *)(v14 + 56);
                  v139 = (int8x16_t)vsubq_f32((float32x4_t)v139, (float32x4_t)v165);
                  v168 = (float32x2_t)vextq_s8(v139, v139, 8uLL).u64[0];
                  if (vmla_f32(v167, v166, v166).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1), *(float32x2_t *)v139.i8, 1), v168, v168).f32[0])goto LABEL_302;
                  goto LABEL_276;
                }
                if (v134 == 4)
                  break;
                if (v169 == 4)
                  goto LABEL_276;
                v171 = *(unsigned __int8 *)(v14 + 112);
                if (v138 | v171)
                {
                  v172 = *(_QWORD *)(v27 + 32);
                  if (v134 != 1)
                    goto LABEL_289;
                }
                else
                {
                  v173 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  a11 = v531;
                  if (v173)
                    goto LABEL_793;
                  if (v134 != 1)
                    goto LABEL_276;
                  v172 = *(_QWORD *)(v27 + 32);
                  v171 = *(unsigned __int8 *)(v14 + 112);
                }
                if (!v171
                  || (!*(_BYTE *)(v14 + 108) || *(float *)(v14 + 104) <= 0.6)
                  && (!*(_BYTE *)(v14 + 100) || *(float *)(v14 + 96) <= *(float *)(*(_QWORD *)v172 + 8)))
                {
                  goto LABEL_302;
                }
LABEL_276:
                v14 += 144;
                if (v14 >= a2)
                  goto LABEL_302;
              }
              if (v169 != 4)
                goto LABEL_302;
              if (!v138 && !*(_BYTE *)(v14 + 112))
              {
                v170 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                a11 = v531;
                if (v170)
                  goto LABEL_793;
                goto LABEL_276;
              }
              v172 = *(_QWORD *)(v27 + 32);
LABEL_289:
              if (v138 && (v163 || v525 && v136 > *(float *)(*(_QWORD *)v172 + 8)))
                goto LABEL_302;
              goto LABEL_276;
            }
LABEL_302:
            v174 = (_OWORD *)a2;
            if (v14 >= a2)
            {
LABEL_335:
              if (v14 >= (unint64_t)v174)
                goto LABEL_400;
              goto LABEL_336;
            }
            v176 = v137 > 0.6 && v520 != 0;
            for (i = v502; ; i -= 144)
            {
              v183 = *(_DWORD *)(i - 32);
              if (v134 == v183)
              {
                v178 = **(_QWORD **)(v27 + 8);
                v139.i64[0] = *(_QWORD *)v178;
                v139.i32[2] = *(_DWORD *)(v178 + 8);
                v179 = (int8x16_t)vsubq_f32((float32x4_t)v139, a11);
                v180 = (float32x2_t)vextq_s8(v179, v179, 8uLL).u64[0];
                v181 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v179.i8, *(float32x2_t *)v179.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v179.i8, 1), *(float32x2_t *)v179.i8, 1);
                v179.i64[0] = *(_QWORD *)(i - 48);
                v179.i32[2] = *(_DWORD *)(i - 40);
                v139 = (int8x16_t)vsubq_f32((float32x4_t)v139, (float32x4_t)v179);
                v182 = (float32x2_t)vextq_s8(v139, v139, 8uLL).u64[0];
                if (vmla_f32(v181, v180, v180).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1), *(float32x2_t *)v139.i8, 1), v182, v182).f32[0])goto LABEL_334;
                continue;
              }
              if (v134 == 4)
                break;
              if (v183 == 4)
                goto LABEL_334;
              v185 = *(unsigned __int8 *)(i + 16);
              if (v138 | v185)
              {
                v184 = *(_QWORD *)(v27 + 32);
                if (v134 != 1)
                  goto LABEL_321;
              }
              else
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_793;
                }
                a11 = v531;
                if (v134 != 1)
                {
LABEL_334:
                  v174 = (_OWORD *)(i - 96);
                  goto LABEL_335;
                }
                v184 = *(_QWORD *)(v27 + 32);
                v185 = *(unsigned __int8 *)(i + 16);
              }
              if (v185
                && (*(_BYTE *)(i + 12) && *(float *)(i + 8) > 0.6
                 || *(_BYTE *)(i + 4) && *(float *)i > *(float *)(*(_QWORD *)v184 + 8)))
              {
                goto LABEL_334;
              }
LABEL_311:
              ;
            }
            if (v183 != 4)
              goto LABEL_311;
            if (v138 || *(_BYTE *)(i + 16))
            {
              v184 = *(_QWORD *)(v27 + 32);
LABEL_321:
              if (!v138 || !v176 && (!v525 || v136 <= *(float *)(*(_QWORD *)v184 + 8)))
                goto LABEL_334;
              goto LABEL_311;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_793;
            }
            v174 = (_OWORD *)(i - 96);
            a11 = v531;
            if (v14 >= i - 96)
              goto LABEL_400;
LABEL_336:
            v187 = v137 > 0.6 && v520 != 0;
            v529 = v187;
            while (2)
            {
              v604 = *(_OWORD *)(v14 + 32);
              v612 = *(_OWORD *)(v14 + 48);
              v596 = *(_OWORD *)(v14 + 16);
              v588 = *(_OWORD *)v14;
              v617 = *(_OWORD *)(v14 + 64);
              *(_OWORD *)&v632[9] = *(_OWORD *)(v14 + 121);
              v627 = *(_OWORD *)(v14 + 96);
              *(_OWORD *)v632 = *(_OWORD *)(v14 + 112);
              v622 = *(_OWORD *)(v14 + 80);
              v189 = *(int8x16_t *)v174;
              v190 = v174[1];
              v191 = v174[3];
              *(_OWORD *)(v14 + 32) = v174[2];
              *(_OWORD *)(v14 + 48) = v191;
              *(int8x16_t *)v14 = v189;
              *(_OWORD *)(v14 + 16) = v190;
              *(_OWORD *)(v14 + 64) = v174[4];
              v194 = *((int8x16_t *)v174 + 5);
              v192 = v174[6];
              v193 = v174[7];
              *(_OWORD *)(v14 + 121) = *(_OWORD *)((char *)v174 + 121);
              *(_OWORD *)(v14 + 96) = v192;
              *(_OWORD *)(v14 + 112) = v193;
              *(int8x16_t *)(v14 + 80) = v194;
              v174[2] = v604;
              v174[3] = v612;
              *v174 = v588;
              v174[1] = v596;
              v174[4] = v617;
              v194.i32[3] = HIDWORD(v622);
              *(_OWORD *)((char *)v174 + 121) = *(_OWORD *)&v632[9];
              v174[6] = v627;
              v174[7] = *(_OWORD *)v632;
              v174[5] = v622;
              while (2)
              {
                while (2)
                {
                  while (2)
                  {
                    while (2)
                    {
                      while (2)
                      {
                        while (1)
                        {
                          v14 += 144;
                          v200 = *(_DWORD *)(v14 + 64);
                          if (v134 != v200)
                            break;
                          v195 = **(_QWORD **)(v27 + 8);
                          v194.i64[0] = *(_QWORD *)v195;
                          v194.i32[2] = *(_DWORD *)(v195 + 8);
                          v196 = (int8x16_t)vsubq_f32((float32x4_t)v194, a11);
                          v197 = (float32x2_t)vextq_s8(v196, v196, 8uLL).u64[0];
                          v198 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v196.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v196.i8, 1), *(float32x2_t *)v196.i8, 1);
                          v196.i64[0] = *(_QWORD *)(v14 + 48);
                          v196.i32[2] = *(_DWORD *)(v14 + 56);
                          v194 = (int8x16_t)vsubq_f32((float32x4_t)v194, (float32x4_t)v196);
                          v199 = (float32x2_t)vextq_s8(v194, v194, 8uLL).u64[0];
                          if (vmla_f32(v198, v197, v197).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v194.i8, *(float32x2_t *)v194.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v194.i8, 1), *(float32x2_t *)v194.i8, 1), v199, v199).f32[0])goto LABEL_372;
                        }
                        if (v134 == 4)
                        {
                          if (v200 != 4)
                            goto LABEL_372;
                          if (!v138 && !*(_BYTE *)(v14 + 112))
                          {
                            v201 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                            a11 = v531;
                            if (v201)
                              goto LABEL_793;
                            continue;
                          }
                          v202 = *(_QWORD *)(v27 + 32);
                          goto LABEL_360;
                        }
                        break;
                      }
                      if (v200 == 4)
                        continue;
                      break;
                    }
                    if (v138 | *(unsigned __int8 *)(v14 + 112))
                    {
                      v202 = *(_QWORD *)(v27 + 32);
                      if (v134 == 1)
                      {
                        if (!*(_BYTE *)(v14 + 112))
                          goto LABEL_372;
                        goto LABEL_368;
                      }
LABEL_360:
                      if (v138 && (v529 || v525 && v136 > *(float *)(*(_QWORD *)v202 + 8)))
                        goto LABEL_372;
                      continue;
                    }
                    break;
                  }
                  v203 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  a11 = v531;
                  if (v203)
                    goto LABEL_793;
                  if (v134 != 1)
                    continue;
                  break;
                }
                v202 = *(_QWORD *)(v27 + 32);
                if (!*(_BYTE *)(v14 + 112))
                  break;
LABEL_368:
                if (*(_BYTE *)(v14 + 108) && *(float *)(v14 + 104) > 0.6
                  || *(_BYTE *)(v14 + 100) && *(float *)(v14 + 96) > *(float *)(*(_QWORD *)v202 + 8))
                {
                  continue;
                }
                break;
              }
LABEL_372:
              v204 = v174 - 3;
              while (2)
              {
                v210 = *((_DWORD *)v204 - 8);
                if (v134 == v210)
                {
                  v205 = **(_QWORD **)(v27 + 8);
                  v194.i64[0] = *(_QWORD *)v205;
                  v194.i32[2] = *(_DWORD *)(v205 + 8);
                  v206 = (int8x16_t)vsubq_f32((float32x4_t)v194, a11);
                  v207 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
                  v208 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1);
                  v206.i64[0] = *((_QWORD *)v204 - 6);
                  v206.i32[2] = *((_DWORD *)v204 - 10);
                  v194 = (int8x16_t)vsubq_f32((float32x4_t)v194, (float32x4_t)v206);
                  v209 = (float32x2_t)vextq_s8(v194, v194, 8uLL).u64[0];
                  if (vmla_f32(v208, v207, v207).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v194.i8, *(float32x2_t *)v194.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v194.i8, 1), *(float32x2_t *)v194.i8, 1), v209, v209).f32[0])goto LABEL_344;
LABEL_374:
                  v204 -= 9;
                  continue;
                }
                break;
              }
              if (v134 != 4)
              {
                if (v210 == 4)
                  goto LABEL_344;
                v212 = *((unsigned __int8 *)v204 + 16);
                if (v138 | v212)
                {
                  v211 = *(_QWORD *)(v27 + 32);
                  if (v134 != 1)
                  {
LABEL_384:
                    if (!v138 || !v529 && (!v525 || v136 <= *(float *)(*(_QWORD *)v211 + 8)))
                      goto LABEL_344;
                    goto LABEL_374;
                  }
                }
                else
                {
                  v213 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  a11 = v531;
                  if (v213)
                    goto LABEL_793;
                  if (v134 != 1)
                    goto LABEL_344;
                  v211 = *(_QWORD *)(v27 + 32);
                  v212 = *((unsigned __int8 *)v204 + 16);
                }
                if (v212
                  && (*((_BYTE *)v204 + 12) && *((float *)v204 + 2) > 0.6
                   || *((_BYTE *)v204 + 4) && *(float *)v204 > *(float *)(*(_QWORD *)v211 + 8)))
                {
                  goto LABEL_344;
                }
                goto LABEL_374;
              }
              if (v210 != 4)
                goto LABEL_374;
              if (v138 || *((_BYTE *)v204 + 16))
              {
                v211 = *(_QWORD *)(v27 + 32);
                goto LABEL_384;
              }
              v188 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              a11 = v531;
              if (v188)
                goto LABEL_793;
LABEL_344:
              v174 = v204 - 6;
              if (v14 < (unint64_t)(v204 - 6))
                continue;
              break;
            }
LABEL_400:
            v214 = (__int128 *)(v14 - 144);
            if ((_OWORD *)(v14 - 144) != v15)
            {
              v215 = *v214;
              v216 = *(_OWORD *)(v14 - 128);
              v217 = *(_OWORD *)(v14 - 96);
              v15[2] = *(_OWORD *)(v14 - 112);
              v15[3] = v217;
              *v15 = v215;
              v15[1] = v216;
              v219 = *(_OWORD *)(v14 - 48);
              v218 = *(_OWORD *)(v14 - 32);
              v220 = *(_OWORD *)(v14 - 64);
              *(_OWORD *)((char *)v507 + 57) = *(_OWORD *)(v14 - 23);
              v507[2] = v219;
              v507[3] = v218;
              v507[1] = v220;
              *v507 = *(_OWORD *)(v14 - 80);
            }
            a5 = 0;
            *v214 = v572;
            *(_OWORD *)(v14 - 128) = v578;
            *(_OWORD *)(v14 - 112) = v584;
            *(_DWORD *)(v14 - 88) = a11.i32[2];
            *(_QWORD *)(v14 - 96) = a11.i64[0];
            *(_DWORD *)(v14 - 84) = v135;
            *(_DWORD *)(v14 - 80) = v134;
            a7 = *(float32x4_t *)v563;
            *(_OWORD *)(v14 - 76) = *(_OWORD *)v563;
            *(_OWORD *)(v14 - 64) = *(_OWORD *)&v563[12];
            *(float *)(v14 - 48) = v136;
            *(_BYTE *)(v14 - 44) = v525;
            *(_WORD *)(v14 - 43) = v542;
            *(_BYTE *)(v14 - 41) = v548;
            *(float *)(v14 - 40) = v137;
            *(_BYTE *)(v14 - 36) = v520;
            *(_BYTE *)(v14 - 33) = v539;
            *(_WORD *)(v14 - 35) = v536;
            *(_BYTE *)(v14 - 32) = v138;
            a6 = v554;
            *(_QWORD *)(v14 - 15) = v560;
            *(__n128 *)(v14 - 31) = v554;
            a4 = v510;
            continue;
          }
          v40 = **(_QWORD **)(v27 + 8);
          v35.i64[0] = *(_QWORD *)v40;
          v35.i32[2] = *(_DWORD *)(v40 + 8);
          v36.i64[0] = *(_QWORD *)(v14 - 96);
          v36.i32[2] = *(_DWORD *)(v14 - 88);
          v41 = (int8x16_t)vsubq_f32(v35, v36);
          v42 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
          v43 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), *(float32x2_t *)v41.i8, 1);
          v41.i64[0] = *(_QWORD *)(v14 + 48);
          v41.i32[2] = *(_DWORD *)(v14 + 56);
          v44 = (int8x16_t)vsubq_f32(v35, (float32x4_t)v41);
          v45 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
          if (vmla_f32(v43, v42, v42).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1), *(float32x2_t *)v44.i8, 1), v45, v45).f32[0])goto LABEL_205;
LABEL_31:
          v47 = 0;
          v48 = *(int8x16_t *)(v14 + 16);
          v577 = v48;
          v583 = *(_OWORD *)(v14 + 32);
          v571 = *(_OWORD *)v14;
          a11.i64[0] = *(_QWORD *)(v14 + 48);
          a11.i32[2] = *(_DWORD *)(v14 + 56);
          v49 = *(_DWORD *)(v14 + 60);
          v50 = *(_DWORD *)(v14 + 64);
          v503 = (_OWORD *)(v14 + 64);
          *(_OWORD *)v562 = *(_OWORD *)(v14 + 68);
          *(_OWORD *)&v562[12] = *(_OWORD *)(v14 + 80);
          v51 = *(float *)(v14 + 96);
          v519 = *(unsigned __int8 *)(v14 + 100);
          v547 = *(_BYTE *)(v14 + 103);
          v541 = *(_WORD *)(v14 + 101);
          v52 = *(float *)(v14 + 104);
          v538 = *(_BYTE *)(v14 + 111);
          v535 = *(_WORD *)(v14 + 109);
          v53 = *(unsigned __int8 *)(v14 + 112);
          v54 = *(int8x16_t *)(v14 + 113);
          v559 = *(_QWORD *)(v14 + 129);
          v506 = *(_BYTE *)(v14 + 108);
          v56 = v52 > 0.6 && *(_BYTE *)(v14 + 108) != 0;
          v524 = v56;
          v57 = v14;
          v553 = *(float32x4_t *)(v14 + 113);
          v530 = a11;
          while (1)
          {
            v61 = &v15[v47];
            v62 = v15[v47 + 13];
            if (v62 == v50)
            {
              v58 = **(_QWORD **)(v27 + 8);
              v54.i64[0] = *(_QWORD *)v58;
              v54.i32[2] = *(_DWORD *)(v58 + 8);
              v48.i64[0] = *((_QWORD *)v61 + 24);
              v48.i32[2] = *((_DWORD *)v61 + 50);
              v48 = (int8x16_t)vsubq_f32((float32x4_t)v54, (float32x4_t)v48);
              v59 = (float32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
              v54 = (int8x16_t)vsubq_f32((float32x4_t)v54, a11);
              v60 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
              if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), *(float32x2_t *)v48.i8, 1), v59, v59).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v54.i8, 1), v60, v60).f32[0])goto LABEL_63;
              goto LABEL_39;
            }
            if (v62 == 4)
              break;
            if (v50 == 4)
              goto LABEL_63;
            v63 = LOBYTE(v528[v47 + 16]);
            if (!(v63 | v53))
            {
              v65 = (unsigned __int8 *)(v57 + 256);
              goto LABEL_55;
            }
            v64 = *(_QWORD *)(v27 + 32);
            if (v62 != 1)
              goto LABEL_58;
            if (v53 && (v524 || v519 && v51 > *(float *)(*(_QWORD *)v64 + 8)))
              goto LABEL_63;
LABEL_39:
            v57 += 144;
            v47 += 9;
            v15 = v528;
          }
          if (v50 != 4)
            goto LABEL_39;
          v63 = LOBYTE(v528[v47 + 16]);
          if (v63 | v53)
          {
            v64 = *(_QWORD *)(v27 + 32);
            goto LABEL_58;
          }
          v65 = (unsigned __int8 *)&v528[v47 + 16];
LABEL_55:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_793;
          }
          a11 = v530;
          if (*((_DWORD *)v61 + 52) == 1)
            goto LABEL_39;
          v64 = *(_QWORD *)(v27 + 32);
          v63 = *v65;
LABEL_58:
          if (v63)
          {
            v66 = (float *)&v528[v47];
            if (BYTE12(v528[v47 + 15]))
            {
              if (v66[62] > 0.6)
                goto LABEL_39;
            }
            if (*((_BYTE *)v66 + 244) && *(float *)&v528[v47 + 15] > *(float *)(*(_QWORD *)v64 + 8))
              goto LABEL_39;
          }
LABEL_63:
          v67 = (unint64_t)&v528[v47 + 9];
          v68 = v502;
          v69 = v514;
          if (!(v47 * 16))
          {
            v70 = (__int128 *)v514;
            if (v67 >= v514)
              goto LABEL_91;
            v71 = v502;
            v72 = v514;
            while (2)
            {
              v70 = (__int128 *)(v71 - 96);
              v118 = *(_DWORD *)(v71 - 32);
              if (v118 == v50)
              {
                v114 = **(_QWORD **)(v27 + 8);
                v54.i64[0] = *(_QWORD *)v114;
                v54.i32[2] = *(_DWORD *)(v114 + 8);
                v48.i64[0] = *(_QWORD *)(v71 - 48);
                v48.i32[2] = *(_DWORD *)(v71 - 40);
                v48 = (int8x16_t)vsubq_f32((float32x4_t)v54, (float32x4_t)v48);
                v115 = (float32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
                v54 = (int8x16_t)vsubq_f32((float32x4_t)v54, a11);
                v116 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
                if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), *(float32x2_t *)v48.i8, 1), v115, v115).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v54.i8, 1), v116, v116).f32[0]|| v67 >= (unint64_t)v70)
                {
                  goto LABEL_91;
                }
                goto LABEL_165;
              }
              if (v118 == 4)
              {
                if (v50 != 4)
                  goto LABEL_91;
                v120 = (unsigned __int8 *)(v71 + 16);
                v119 = *(unsigned __int8 *)(v71 + 16);
                if (v119 | v53)
                {
                  v121 = *(_QWORD *)(v27 + 32);
                  goto LABEL_187;
                }
LABEL_184:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_793;
                }
                a11 = v530;
                if (*(_DWORD *)(v71 - 32) == 1)
                  goto LABEL_91;
                v121 = *(_QWORD *)(v27 + 32);
                v119 = *v120;
LABEL_187:
                if (v119)
                {
                  if (*(_BYTE *)(v71 + 12) && *(float *)(v71 + 8) > 0.6)
                    goto LABEL_91;
                  if (*(_BYTE *)(v71 + 4))
                  {
                    if (*(float *)v71 > *(float *)(*(_QWORD *)v121 + 8) || v67 >= (unint64_t)v70)
                      goto LABEL_91;
                    goto LABEL_165;
                  }
                }
              }
              else if (v50 != 4)
              {
                v119 = *(unsigned __int8 *)(v71 + 16);
                if (!(v119 | v53))
                {
                  v120 = (unsigned __int8 *)(v72 - 32);
                  goto LABEL_184;
                }
                v121 = *(_QWORD *)(v27 + 32);
                if (v118 != 1)
                  goto LABEL_187;
                if (!v53)
                  goto LABEL_91;
                if (!v524)
                {
                  if (!v519)
                    goto LABEL_91;
                  if (v51 <= *(float *)(*(_QWORD *)v121 + 8) || v67 >= (unint64_t)v70)
                    goto LABEL_91;
                  goto LABEL_165;
                }
              }
              if (v67 >= (unint64_t)v70)
                goto LABEL_91;
LABEL_165:
              v72 -= 144;
              v71 -= 144;
              continue;
            }
          }
          while (2)
          {
            v76 = *(_DWORD *)(v68 - 32);
            if (v76 == v50)
            {
              v73 = **(_QWORD **)(v27 + 8);
              v54.i64[0] = *(_QWORD *)v73;
              v54.i32[2] = *(_DWORD *)(v73 + 8);
              v48.i64[0] = *(_QWORD *)(v68 - 48);
              v48.i32[2] = *(_DWORD *)(v68 - 40);
              v48 = (int8x16_t)vsubq_f32((float32x4_t)v54, (float32x4_t)v48);
              v74 = (float32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
              v54 = (int8x16_t)vsubq_f32((float32x4_t)v54, a11);
              v75 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
              if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), *(float32x2_t *)v48.i8, 1), v74, v74).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v54.i8, 1), v75, v75).f32[0])goto LABEL_90;
              goto LABEL_67;
            }
            if (v76 != 4)
            {
              if (v50 != 4)
              {
                v77 = *(unsigned __int8 *)(v68 + 16);
                if (!(v77 | v53))
                {
                  v78 = (unsigned __int8 *)(v69 - 32);
                  goto LABEL_82;
                }
                v79 = *(_QWORD *)(v27 + 32);
                if (v76 == 1)
                {
                  if (!v53 || !v524 && (!v519 || v51 <= *(float *)(*(_QWORD *)v79 + 8)))
                    goto LABEL_90;
                }
                else
                {
LABEL_85:
                  if (v77
                    && (*(_BYTE *)(v68 + 12) && *(float *)(v68 + 8) > 0.6
                     || *(_BYTE *)(v68 + 4) && *(float *)v68 > *(float *)(*(_QWORD *)v79 + 8)))
                  {
                    goto LABEL_90;
                  }
                }
              }
LABEL_67:
              v69 -= 144;
              v68 -= 144;
              continue;
            }
            break;
          }
          if (v50 != 4)
            goto LABEL_90;
          v78 = (unsigned __int8 *)(v68 + 16);
          v77 = *(unsigned __int8 *)(v68 + 16);
          if (v77 | v53)
          {
            v79 = *(_QWORD *)(v27 + 32);
            goto LABEL_85;
          }
LABEL_82:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_793;
          }
          a11 = v530;
          if (*(_DWORD *)(v68 - 32) != 1)
          {
            v79 = *(_QWORD *)(v27 + 32);
            v77 = *v78;
            goto LABEL_85;
          }
LABEL_90:
          v70 = (__int128 *)(v68 - 96);
LABEL_91:
          v504 = v70;
          v505 = v67;
          v14 = v67;
          if (v67 < (unint64_t)v70)
          {
            v80 = v70;
            do
            {
              v603 = *(_OWORD *)(v14 + 32);
              v611 = *(_OWORD *)(v14 + 48);
              v595 = *(_OWORD *)(v14 + 16);
              v587 = *(_OWORD *)v14;
              v616 = *(_OWORD *)(v14 + 64);
              *(_OWORD *)&v631[9] = *(_OWORD *)(v14 + 121);
              v626 = *(_OWORD *)(v14 + 96);
              *(_OWORD *)v631 = *(_OWORD *)(v14 + 112);
              v621 = *(_OWORD *)(v14 + 80);
              v81 = (int8x16_t)*v80;
              v82 = v80[1];
              v83 = v80[3];
              *(_OWORD *)(v14 + 32) = v80[2];
              *(_OWORD *)(v14 + 48) = v83;
              *(int8x16_t *)v14 = v81;
              *(_OWORD *)(v14 + 16) = v82;
              *(_OWORD *)(v14 + 64) = v80[4];
              v85 = (int8x16_t)v80[5];
              v86 = (int8x16_t)v80[6];
              v84 = v80[7];
              *(_OWORD *)(v14 + 121) = *(__int128 *)((char *)v80 + 121);
              *(int8x16_t *)(v14 + 96) = v86;
              *(_OWORD *)(v14 + 112) = v84;
              *(int8x16_t *)(v14 + 80) = v85;
              v80[2] = v603;
              v80[3] = v611;
              *v80 = v587;
              v80[1] = v595;
              v80[4] = v616;
              v85.i32[3] = HIDWORD(v621);
              v86.i32[3] = HIDWORD(v626);
              *(__int128 *)((char *)v80 + 121) = *(_OWORD *)&v631[9];
              v80[6] = v626;
              v80[7] = *(_OWORD *)v631;
              v80[5] = v621;
              do
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v90 = v14;
                        v14 += 144;
                        v91 = *(_DWORD *)(v90 + 208);
                        if (v91 != v50)
                          break;
                        v87 = **(_QWORD **)(v27 + 8);
                        v85.i64[0] = *(_QWORD *)v87;
                        v85.i32[2] = *(_DWORD *)(v87 + 8);
                        v86.i64[0] = *(_QWORD *)(v90 + 192);
                        v86.i32[2] = *(_DWORD *)(v90 + 200);
                        v86 = (int8x16_t)vsubq_f32((float32x4_t)v85, (float32x4_t)v86);
                        v88 = (float32x2_t)vextq_s8(v86, v86, 8uLL).u64[0];
                        v85 = (int8x16_t)vsubq_f32((float32x4_t)v85, a11);
                        v89 = (float32x2_t)vextq_s8(v85, v85, 8uLL).u64[0];
                        if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), *(float32x2_t *)v86.i8, 1), v88, v88).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1), *(float32x2_t *)v85.i8, 1), v89, v89).f32[0])goto LABEL_129;
                      }
                      if (v91 == 4)
                        break;
                      if (v50 == 4)
                        goto LABEL_129;
                      v92 = *(unsigned __int8 *)(v90 + 256);
                      if (!(v92 | v53))
                        goto LABEL_109;
                      v93 = *(_QWORD *)(v27 + 32);
                      if (v91 != 1)
                        goto LABEL_118;
                      if (v53 && (v524 || v519 && v51 > *(float *)(*(_QWORD *)v93 + 8)))
                        goto LABEL_129;
                    }
                  }
                  while (v50 != 4);
                  v92 = *(unsigned __int8 *)(v90 + 256);
                  if (v92 | v53)
                    break;
LABEL_109:
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v94 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v96 = qword_254A6DE40;
                    v95 = qword_254A6DE48;
                    while (v96 != v95)
                    {
                      v98 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v96;
                      v97 = *(_QWORD *)(v96 + 8);
                      v96 += 16;
                      v98(v97, "h1.maybeQuality || h2.maybeQuality", 34, "", 0);
                    }
                  }
                  v99 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v27 = a3;
                  if (!byte_254A6DE68)
                    goto LABEL_793;
                  qword_254A6DE58(unk_254A6DE60, "h1.maybeQuality || h2.maybeQuality", 34, "", 0);
                  a11 = v530;
                  if (*(_DWORD *)(v90 + 208) != 1)
                  {
                    v93 = *(_QWORD *)(a3 + 32);
                    v92 = *(unsigned __int8 *)(v90 + 256);
                    goto LABEL_118;
                  }
                }
                v93 = *(_QWORD *)(v27 + 32);
LABEL_118:
                ;
              }
              while (v92
                   && (*(_BYTE *)(v90 + 252) && *(float *)(v90 + 248) > 0.6
                    || *(_BYTE *)(v90 + 244) && *(float *)(v90 + 240) > *(float *)(*(_QWORD *)v93 + 8)));
              do
              {
                while (1)
                {
LABEL_129:
                  while (1)
                  {
                    v103 = v80;
                    v80 -= 9;
                    v104 = *((_DWORD *)v103 - 20);
                    if (v104 != v50)
                      break;
                    v100 = **(_QWORD **)(v27 + 8);
                    v85.i64[0] = *(_QWORD *)v100;
                    v85.i32[2] = *(_DWORD *)(v100 + 8);
                    v86.i64[0] = *((_QWORD *)v103 - 12);
                    v86.i32[2] = *((_DWORD *)v103 - 22);
                    v86 = (int8x16_t)vsubq_f32((float32x4_t)v85, (float32x4_t)v86);
                    v101 = (float32x2_t)vextq_s8(v86, v86, 8uLL).u64[0];
                    v85 = (int8x16_t)vsubq_f32((float32x4_t)v85, a11);
                    v102 = (float32x2_t)vextq_s8(v85, v85, 8uLL).u64[0];
                    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), *(float32x2_t *)v86.i8, 1), v101, v101).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1), *(float32x2_t *)v85.i8, 1), v102, v102).f32[0])goto LABEL_93;
                  }
                  if (v104 == 4)
                    break;
                  if (v50 != 4)
                  {
                    v106 = v103 - 2;
                    v105 = *((unsigned __int8 *)v103 - 32);
                    if (!(v105 | v53))
                      goto LABEL_142;
                    v107 = *(_QWORD *)(v27 + 32);
                    if (v104 != 1)
                      goto LABEL_151;
                    if (!v53 || !v524 && (!v519 || v51 <= *(float *)(*(_QWORD *)v107 + 8)))
                      goto LABEL_93;
                  }
                }
                if (v50 != 4)
                  break;
                v106 = v103 - 2;
                v105 = *((unsigned __int8 *)v103 - 32);
                if (v105 | v53)
                {
                  v107 = *(_QWORD *)(v27 + 32);
                  continue;
                }
LABEL_142:
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v108 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v110 = qword_254A6DE40;
                  v109 = qword_254A6DE48;
                  while (v110 != v109)
                  {
                    v112 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v110;
                    v111 = *(_QWORD *)(v110 + 8);
                    v110 += 16;
                    v112(v111, "h1.maybeQuality || h2.maybeQuality", 34, "", 0);
                  }
                }
                v113 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v27 = a3;
                if (!byte_254A6DE68)
                  goto LABEL_793;
                qword_254A6DE58(unk_254A6DE60, "h1.maybeQuality || h2.maybeQuality", 34, "", 0);
                a11 = v530;
                if (*((_DWORD *)v103 - 20) == 1)
                  break;
                v107 = *(_QWORD *)(a3 + 32);
                v105 = *(unsigned __int8 *)v106;
LABEL_151:
                ;
              }
              while (!v105
                   || (!*((_BYTE *)v103 - 36) || *((float *)v103 - 10) <= 0.6)
                   && (!*((_BYTE *)v103 - 44) || *((float *)v103 - 12) <= *(float *)(*(_QWORD *)v107 + 8)));
LABEL_93:
              ;
            }
            while (v14 < (unint64_t)v80);
          }
          v124 = (__int128 *)(v14 - 144);
          a1 = v528;
          if ((_OWORD *)(v14 - 144) != v528)
          {
            v125 = *v124;
            v126 = *(_OWORD *)(v14 - 128);
            v127 = *(_OWORD *)(v14 - 96);
            v528[2] = *(_OWORD *)(v14 - 112);
            v528[3] = v127;
            *v528 = v125;
            v528[1] = v126;
            v129 = *(_OWORD *)(v14 - 48);
            v128 = *(_OWORD *)(v14 - 32);
            v130 = *(_OWORD *)(v14 - 64);
            *(_OWORD *)((char *)v503 + 57) = *(_OWORD *)(v14 - 23);
            v503[2] = v129;
            v503[3] = v128;
            v503[1] = v130;
            *v503 = *(_OWORD *)(v14 - 80);
          }
          *v124 = v571;
          *(int8x16_t *)(v14 - 128) = v577;
          *(_OWORD *)(v14 - 112) = v583;
          *(_DWORD *)(v14 - 88) = a11.i32[2];
          *(_QWORD *)(v14 - 96) = a11.i64[0];
          *(_DWORD *)(v14 - 84) = v49;
          *(_DWORD *)(v14 - 80) = v50;
          *(_OWORD *)(v14 - 76) = *(_OWORD *)v562;
          *(_OWORD *)(v14 - 64) = *(_OWORD *)&v562[12];
          *(float *)(v14 - 48) = v51;
          *(_BYTE *)(v14 - 44) = v519;
          *(_WORD *)(v14 - 43) = v541;
          *(_BYTE *)(v14 - 41) = v547;
          *(float *)(v14 - 40) = v52;
          *(_BYTE *)(v14 - 36) = v506;
          *(_BYTE *)(v14 - 33) = v538;
          *(_WORD *)(v14 - 35) = v535;
          *(_BYTE *)(v14 - 32) = v53;
          *(_QWORD *)(v14 - 15) = v559;
          *(float32x4_t *)(v14 - 31) = v553;
          a4 = v510;
          a2 = v514;
          if (v505 < (unint64_t)v504)
          {
LABEL_204:
            sub_20EEFECD4(v528, v14 - 144, v27, v510, a5 & 1);
            a5 = 0;
            continue;
          }
          v131 = sub_20EF03A18((uint64_t)v528, v14 - 144, v27, v553, *(float32x4_t *)v562);
          if (!sub_20EF03A18(v14, v514, v27, v132, v133))
          {
            if (!v131)
              goto LABEL_204;
            continue;
          }
          a2 = v14 - 144;
          if (v131)
            return a6.n128_f64[0];
          goto LABEL_1;
        }
        if (v14 != a2)
        {
          v277 = (v17 - 2) >> 1;
          v278 = v277;
          while (1)
          {
            v280 = v278;
            if (v277 < v278)
              goto LABEL_490;
            v281 = (2 * v278) | 1;
            v279 = (int8x16_t *)&v528[9 * v281];
            if (2 * v278 + 2 < (uint64_t)v17)
            {
              v282 = v279[4].i32[0];
              v283 = v279[13].i32[0];
              if (v282 == v283)
              {
                v284 = **(_QWORD **)(a3 + 8);
                a6.n128_u64[0] = *(_QWORD *)v284;
                a6.n128_u32[2] = *(_DWORD *)(v284 + 8);
                a7.i64[0] = v279[3].i64[0];
                a7.i32[2] = v279[3].i32[2];
                a7 = vsubq_f32((float32x4_t)a6, a7);
                v285 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                v286 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
                a7.i64[0] = v279[12].i64[0];
                a7.i32[2] = v279[12].i32[2];
                a6 = (__n128)vsubq_f32((float32x4_t)a6, a7);
                v287 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                if (vmla_f32(v286, v285, v285).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v287, v287).f32[0])goto LABEL_521;
              }
              else
              {
                if (v282 == 4)
                {
                  if (v283 != 4)
                    goto LABEL_521;
                }
                else if (v283 == 4)
                {
                  goto LABEL_522;
                }
                v288 = &v528[9 * v281];
                v290 = *((unsigned __int8 *)v288 + 112);
                v289 = v288 + 7;
                if (!(v290 | v279[16].u8[0]))
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_793;
                  }
                  v282 = v279[4].i32[0];
                  v277 = (v17 - 2) >> 1;
                }
                v291 = *(_QWORD *)(a3 + 32);
                if (v282 == 1)
                {
                  if (!v279[16].i8[0])
                    goto LABEL_521;
                  v292 = !v279[15].i8[12] || *(float *)&v279[15].i32[2] <= 0.6;
                  if (v292 && (!v279[15].i8[4] || *(float *)v279[15].i32 <= *(float *)(*(_QWORD *)v291 + 8)))
                    goto LABEL_521;
                }
                else if (*v289)
                {
                  v293 = &v528[9 * v281];
                  v294 = !*((_BYTE *)v293 + 108) || *((float *)v293 + 26) <= 0.6;
                  if (!v294
                    || BYTE4(v528[9 * v281 + 6]) && *(float *)&v528[9 * v281 + 6] > *(float *)(*(_QWORD *)v291 + 8))
                  {
LABEL_521:
                    v279 += 9;
                    v281 = 2 * v280 + 2;
                  }
                }
              }
            }
LABEL_522:
            v295 = (int8x16_t *)&v528[9 * v280];
            i32 = v279[4].i32;
            v296 = v279[4].i32[0];
            v298 = v295[4].i32[0];
            if (v296 == v298)
            {
              v299 = a3;
              v300 = **(_QWORD **)(a3 + 8);
              a6.n128_u64[0] = *(_QWORD *)v300;
              a6.n128_u32[2] = *(_DWORD *)(v300 + 8);
              a7.i64[0] = v279[3].i64[0];
              a7.i32[2] = v279[3].i32[2];
              a7 = vsubq_f32((float32x4_t)a6, a7);
              v301 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              v302 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
              a7.i64[0] = v295[3].i64[0];
              a7.i32[2] = v295[3].i32[2];
              a6 = (__n128)vsubq_f32((float32x4_t)a6, a7);
              v303 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
              if (vmla_f32(v302, v301, v301).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v303, v303).f32[0])goto LABEL_490;
            }
            else
            {
              v299 = a3;
              if (v296 == 4)
              {
                if (v298 != 4)
                  goto LABEL_490;
LABEL_529:
                v304 = &v528[9 * v280];
                v306 = *((unsigned __int8 *)v304 + 112);
                v305 = v304 + 7;
                if (!(v279[7].u8[0] | v306))
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_793;
                  }
                  v296 = *i32;
                  v277 = (v17 - 2) >> 1;
                }
                v307 = *(_QWORD *)(a3 + 32);
                if (v296 == 1)
                {
                  if (!*v305)
                    goto LABEL_490;
                  v308 = &v528[9 * v280];
                  if ((!*((_BYTE *)v308 + 108) || *((float *)v308 + 26) <= 0.6)
                    && (!BYTE4(v528[9 * v280 + 6]) || *(float *)&v528[9 * v280 + 6] <= *(float *)(*(_QWORD *)v307 + 8)))
                  {
                    goto LABEL_490;
                  }
                }
                else if (v279[7].i8[0])
                {
                  v309 = !v279[6].i8[12] || *(float *)&v279[6].i32[2] <= 0.6;
                  if (!v309 || v279[6].i8[4] && *(float *)v279[6].i32 > *(float *)(*(_QWORD *)v307 + 8))
                    goto LABEL_490;
                }
                goto LABEL_547;
              }
              if (v298 != 4)
                goto LABEL_529;
            }
LABEL_547:
            v598 = v295[1];
            v606 = v295[2];
            v590 = *v295;
            a11.i64[0] = v295[3].i64[0];
            a11.i32[2] = v295[3].i32[2];
            v310 = v295[3].i32[3];
            v311 = v295[4].i32[0];
            v312 = &v528[9 * v280];
            *(_OWORD *)&v556[12] = v312[5];
            *(_OWORD *)v556 = *(_OWORD *)((char *)v312 + 68);
            v313 = *((float *)v312 + 24);
            v517 = *((unsigned __int8 *)v312 + 100);
            v569 = *((_BYTE *)v312 + 103);
            v565 = *(_WORD *)((char *)v312 + 101);
            v314 = *((float *)v312 + 26);
            v315 = *((unsigned __int8 *)v312 + 108);
            v550 = *((_BYTE *)v312 + 111);
            v544 = *(_WORD *)((char *)v312 + 109);
            v316 = *((unsigned __int8 *)v312 + 112);
            v580 = *(_QWORD *)((char *)v312 + 129);
            v574 = *(int8x16_t *)((char *)v312 + 113);
            v317 = *v279;
            v318 = v279[1];
            v319 = v279[3];
            v295[2] = v279[2];
            v295[3] = v319;
            *v295 = v317;
            v295[1] = v318;
            v295[4] = *(int8x16_t *)i32;
            v320 = v279[5];
            v321 = v279[6];
            v322 = v279[7];
            *(int8x16_t *)((char *)v295 + 121) = *(int8x16_t *)((char *)v279 + 121);
            v295[6] = v321;
            v295[7] = v322;
            v295[5] = v320;
            v512 = v315;
            if (v277 < v281)
              goto LABEL_489;
            v324 = v314 > 0.6 && v315 != 0;
            v508 = v324;
            v325 = v528;
            v527 = a11;
            v522 = v316;
            while (1)
            {
              v337 = v279;
              v338 = 2 * v281;
              v281 = (2 * v281) | 1;
              v279 = (int8x16_t *)&v325[9 * v281];
              v339 = v338 + 2;
              if (v338 + 2 >= (uint64_t)v17)
                goto LABEL_587;
              v340 = v279[4].i32[0];
              v341 = v279[13].i32[0];
              if (v340 == v341)
              {
                v342 = **(_QWORD **)(v299 + 8);
                v320.i64[0] = *(_QWORD *)v342;
                v320.i32[2] = *(_DWORD *)(v342 + 8);
                v321.i64[0] = v279[3].i64[0];
                v321.i32[2] = v279[3].i32[2];
                v321 = (int8x16_t)vsubq_f32((float32x4_t)v320, (float32x4_t)v321);
                v343 = (float32x2_t)vextq_s8(v321, v321, 8uLL).u64[0];
                v344 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v321.i8, *(float32x2_t *)v321.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v321.i8, 1), *(float32x2_t *)v321.i8, 1);
                v321.i64[0] = v279[12].i64[0];
                v321.i32[2] = v279[12].i32[2];
                v320 = (int8x16_t)vsubq_f32((float32x4_t)v320, (float32x4_t)v321);
                v345 = (float32x2_t)vextq_s8(v320, v320, 8uLL).u64[0];
                if (vmla_f32(v344, v343, v343).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v320.i8, *(float32x2_t *)v320.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v320.i8, 1), *(float32x2_t *)v320.i8, 1), v345, v345).f32[0])goto LABEL_587;
                goto LABEL_586;
              }
              if (v340 == 4)
              {
                if (v341 != 4)
                  goto LABEL_586;
              }
              else if (v341 == 4)
              {
                goto LABEL_587;
              }
              v346 = &v325[9 * v281];
              v348 = *((unsigned __int8 *)v346 + 112);
              v347 = v346 + 7;
              if (!(v348 | v279[16].u8[0]))
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_793;
                }
                v340 = v279[4].i32[0];
                v277 = (v17 - 2) >> 1;
                a11 = v527;
                v316 = v522;
              }
              v349 = *(_QWORD *)(v299 + 32);
              if (v340 == 1)
              {
                v325 = v528;
                if (v279[16].i8[0])
                {
                  v350 = !v279[15].i8[12] || *(float *)&v279[15].i32[2] <= 0.6;
                  if (!v350 || v279[15].i8[4] && *(float *)v279[15].i32 > *(float *)(*(_QWORD *)v349 + 8))
                    goto LABEL_587;
                }
                goto LABEL_586;
              }
              if (*v347)
              {
                v325 = v528;
                v351 = (float *)&v528[9 * v281];
                if (*((_BYTE *)v351 + 108))
                  v352 = v351[26] <= 0.6;
                else
                  v352 = 1;
                if (v352
                  && (!BYTE4(v528[9 * v281 + 6]) || *(float *)&v528[9 * v281 + 6] <= *(float *)(*(_QWORD *)v349 + 8)))
                {
LABEL_587:
                  v354 = v279 + 4;
                  v353 = v279[4].i32[0];
                  if (v353 == v311)
                    goto LABEL_555;
                  goto LABEL_588;
                }
LABEL_586:
                v279 += 9;
                v281 = v339;
                goto LABEL_587;
              }
              v325 = v528;
              v354 = v279 + 4;
              v353 = v279[4].i32[0];
              if (v353 == v311)
              {
LABEL_555:
                v326 = **(_QWORD **)(v299 + 8);
                v320.i64[0] = *(_QWORD *)v326;
                v320.i32[2] = *(_DWORD *)(v326 + 8);
                v321.i64[0] = v279[3].i64[0];
                v321.i32[2] = v279[3].i32[2];
                v327 = (int8x16_t)vsubq_f32((float32x4_t)v320, (float32x4_t)v321);
                v328 = (float32x2_t)vextq_s8(v327, v327, 8uLL).u64[0];
                v329 = (int8x16_t)vsubq_f32((float32x4_t)v320, a11);
                v330 = (float32x2_t)vextq_s8(v329, v329, 8uLL).u64[0];
                if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v327.i8, *(float32x2_t *)v327.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v327.i8, 1), *(float32x2_t *)v327.i8, 1), v328, v328).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v329.i8, *(float32x2_t *)v329.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v329.i8, 1), *(float32x2_t *)v329.i8, 1), v330, v330).f32[0])goto LABEL_488;
                goto LABEL_556;
              }
LABEL_588:
              if (v353 != 4)
                break;
              if (v311 != 4)
                goto LABEL_488;
              v355 = v279 + 7;
              if (!(v279[7].u8[0] | v316))
                goto LABEL_601;
              v356 = *(_QWORD *)(v299 + 32);
              v325 = v528;
              if (!v279[7].i8[0])
                goto LABEL_556;
LABEL_604:
              if (v279[6].i8[12])
                v357 = *(float *)&v279[6].i32[2] <= 0.6;
              else
                v357 = 1;
              if (!v357 || v279[6].i8[4] && *(float *)v279[6].i32 > *(float *)(*(_QWORD *)v356 + 8))
              {
LABEL_488:
                v279 = v337;
                goto LABEL_489;
              }
LABEL_556:
              v331 = *v279;
              v332 = v279[1];
              v333 = v279[3];
              v337[2] = v279[2];
              v337[3] = v333;
              *v337 = v331;
              v337[1] = v332;
              v335 = v354[2];
              v334 = v354[3];
              v321 = *(int8x16_t *)((char *)v354 + 57);
              v336 = v354[1];
              *(int8x16_t *)((char *)v337 + 121) = v321;
              v337[6] = v335;
              v337[7] = v334;
              v337[5] = v336;
              v320 = *v354;
              v337[4] = *v354;
              if (v277 < v281)
                goto LABEL_489;
            }
            if (v311 == 4)
              goto LABEL_556;
            v355 = v279 + 7;
            if (v279[7].u8[0] | v316)
            {
              v356 = *(_QWORD *)(v299 + 32);
              if (v353 == 1)
              {
                v325 = v528;
                if (!v316 || !v508 && (!v517 || v313 <= *(float *)(*(_QWORD *)v356 + 8)))
                  goto LABEL_488;
                goto LABEL_556;
              }
              v325 = v528;
              if (!v279[7].i8[0])
                goto LABEL_556;
              goto LABEL_604;
            }
LABEL_601:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_793;
            }
            a11 = v527;
            v316 = v522;
            if (v354->i32[0] != 1)
            {
              v356 = *(_QWORD *)(v299 + 32);
              v325 = v528;
              v277 = (v17 - 2) >> 1;
              if (!v355->i8[0])
                goto LABEL_556;
              goto LABEL_604;
            }
            v279 = v337;
            v277 = (v17 - 2) >> 1;
LABEL_489:
            a7.i32[3] = v598.i32[3];
            *v279 = v590;
            v279[1] = v598;
            v279[2] = v606;
            v279[3].i32[2] = a11.i32[2];
            v279[3].i64[0] = a11.i64[0];
            v279[3].i32[3] = v310;
            v279[4].i32[0] = v311;
            *(int8x16_t *)((char *)v279 + 68) = *(int8x16_t *)v556;
            v279[5] = *(int8x16_t *)&v556[12];
            *(float *)v279[6].i32 = v313;
            v279[6].i8[4] = v517;
            v279[6].i8[7] = v569;
            *(__int16 *)((char *)&v279[6].i16[2] + 1) = v565;
            *(float *)&v279[6].i32[2] = v314;
            v279[6].i8[12] = v512;
            v279[6].i8[15] = v550;
            *(__int16 *)((char *)&v279[6].i16[6] + 1) = v544;
            v279[7].i8[0] = v316;
            a6.n128_u32[3] = v574.u32[3];
            *(uint64_t *)((char *)v279[8].i64 + 1) = v580;
            *(int8x16_t *)((char *)v279 + 113) = v574;
LABEL_490:
            v278 = v280 - 1;
            if (!v280)
            {
              v358 = v16 / 0x90uLL;
              v359 = (float32x4_t *)v528;
              v360 = (float32x4_t *)v514;
              while (1)
              {
                v361 = 0;
                v362 = v360;
                v607 = v359[2];
                v613 = v359[3];
                v599 = v359[1];
                v591 = *v359;
                v618 = *((__n128 *)v528 + 4);
                v363 = *((float32x4_t *)v528 + 7);
                v364 = *(float32x4_t *)((char *)v528 + 121);
                *(float32x4_t *)&v633[9] = v364;
                v628 = *((float32x4_t *)v528 + 6);
                *(float32x4_t *)v633 = v363;
                v623 = *((float32x4_t *)v528 + 5);
                v365 = v359;
                do
                {
                  v372 = v365;
                  v373 = v361 + 1;
                  v365 += 9 * v361 + 9;
                  v374 = 2 * v361;
                  v361 = (2 * v361) | 1;
                  v375 = v374 + 2;
                  if (v374 + 2 >= v358)
                    goto LABEL_622;
                  v376 = v365[4].i32[0];
                  v377 = v365[13].i32[0];
                  if (v376 == v377)
                  {
                    v378 = **(_QWORD **)(a3 + 8);
                    v363.i64[0] = *(_QWORD *)v378;
                    v363.i32[2] = *(_DWORD *)(v378 + 8);
                    v364.i64[0] = v365[3].i64[0];
                    v364.i32[2] = v365[3].i32[2];
                    v379 = (int8x16_t)vsubq_f32(v363, v364);
                    v380 = (float32x2_t)vextq_s8(v379, v379, 8uLL).u64[0];
                    v381 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v379.i8, *(float32x2_t *)v379.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v379.i8, 1), *(float32x2_t *)v379.i8, 1);
                    v379.i64[0] = v365[12].i64[0];
                    v379.i32[2] = v365[12].i32[2];
                    v382 = (int8x16_t)vsubq_f32(v363, (float32x4_t)v379);
                    v383 = (float32x2_t)vextq_s8(v382, v382, 8uLL).u64[0];
                    if (vmla_f32(v381, v380, v380).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v382.i8, *(float32x2_t *)v382.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v382.i8, 1), *(float32x2_t *)v382.i8, 1), v383, v383).f32[0])goto LABEL_621;
                  }
                  else
                  {
                    if (v376 == 4)
                    {
                      if (v377 != 4)
                        goto LABEL_621;
                    }
                    else if (v377 == 4)
                    {
                      goto LABEL_622;
                    }
                    f32 = (_OWORD *)v372[9 * v373].f32;
                    v386 = *((unsigned __int8 *)f32 + 112);
                    v385 = f32 + 7;
                    if (!(v386 | v365[16].u8[0]))
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_793;
                      }
                      v376 = v365[4].i32[0];
                    }
                    v387 = *(_QWORD *)(a3 + 32);
                    if (v376 == 1)
                    {
                      v359 = (float32x4_t *)v528;
                      if (!v365[16].i8[0])
                        goto LABEL_621;
                      v388 = !v365[15].i8[12] || v365[15].f32[2] <= 0.6;
                      if (v388 && (!v365[15].i8[4] || v365[15].f32[0] <= *(float *)(*(_QWORD *)v387 + 8)))
                        goto LABEL_621;
                    }
                    else if (*v385)
                    {
                      v389 = v372[9 * v373].f32;
                      if (*((_BYTE *)v389 + 108))
                        v390 = v389[26] <= 0.6;
                      else
                        v390 = 1;
                      v359 = (float32x4_t *)v528;
                      if (!v390
                        || v372[9 * v373 + 6].i8[4] && v372[9 * v373 + 6].f32[0] > *(float *)(*(_QWORD *)v387 + 8))
                      {
LABEL_621:
                        v365 += 9;
                        v361 = v375;
                      }
                    }
                    else
                    {
                      v359 = (float32x4_t *)v528;
                    }
                  }
LABEL_622:
                  v366 = *v365;
                  v367 = v365[1];
                  v368 = v365[3];
                  v372[2] = v365[2];
                  v372[3] = v368;
                  *v372 = v366;
                  v372[1] = v367;
                  v370 = v365[6];
                  v369 = v365[7];
                  v364 = *(float32x4_t *)((char *)v365 + 121);
                  v371 = v365[5];
                  *(float32x4_t *)((char *)v372 + 121) = v364;
                  v372[6] = v370;
                  v372[7] = v369;
                  v372[5] = v371;
                  v363 = v365[4];
                  v372[4] = v363;
                }
                while (v361 <= (uint64_t)((unint64_t)(v358 - 2) >> 1));
                v391 = (__n128 *)&v365[4];
                v360 = v362 - 9;
                if (v365 == &v362[-9])
                {
                  v365[2] = v607;
                  v365[3] = v613;
                  *v365 = v591;
                  v365[1] = v599;
                  *(float32x4_t *)((char *)v365 + 121) = *(float32x4_t *)&v633[9];
                  v365[6] = v628;
                  v365[7] = *(float32x4_t *)v633;
                  v365[5] = v623;
                  a6.n128_u64[0] = v618.n128_u64[0];
                  *v391 = v618;
                  goto LABEL_619;
                }
                v392 = *v360;
                v397 = v362[-8];
                v393 = v362[-6];
                v365[2] = v362[-7];
                v365[3] = v393;
                *v365 = v392;
                v365[1] = v397;
                v395 = v362[-3];
                v394 = v362[-2];
                v396 = v362[-4];
                *(float32x4_t *)((char *)v365 + 121) = *(float32x4_t *)((char *)v362 - 23);
                v365[6] = v395;
                v365[7] = v394;
                v365[5] = v396;
                *v391 = (__n128)v362[-5];
                v362[-7] = v607;
                v362[-6] = v613;
                *v360 = v591;
                v362[-8] = v599;
                v397.i32[3] = *(_DWORD *)&v633[21];
                *(float32x4_t *)((char *)v362 - 23) = *(float32x4_t *)&v633[9];
                v362[-3] = v628;
                v362[-2] = *(float32x4_t *)v633;
                v362[-4] = v623;
                a6 = v618;
                v362[-5] = (float32x4_t)v618;
                v398 = (char *)v365 - (char *)v359 + 144;
                if (v398 >= 145)
                {
                  v399 = v398 / 0x90uLL - 2;
                  v400 = v399 >> 1;
                  v401 = &v359[9 * (v399 >> 1)];
                  v402 = v401[4].i32[0];
                  v403 = v391->n128_u32[0];
                  if (v402 == v391->n128_u32[0])
                  {
                    v404 = **(_QWORD **)(a3 + 8);
                    a6.n128_u64[0] = *(_QWORD *)v404;
                    a6.n128_u32[2] = *(_DWORD *)(v404 + 8);
                    v397.i64[0] = v401[3].i64[0];
                    v397.i32[2] = v401[3].i32[2];
                    v405 = (int8x16_t)vsubq_f32((float32x4_t)a6, v397);
                    v406 = (float32x2_t)vextq_s8(v405, v405, 8uLL).u64[0];
                    v407 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v405.i8, *(float32x2_t *)v405.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v405.i8, 1), *(float32x2_t *)v405.i8, 1);
                    v405.i64[0] = v365[3].i64[0];
                    v405.i32[2] = v365[3].i32[2];
                    a6 = (__n128)vsubq_f32((float32x4_t)a6, (float32x4_t)v405);
                    v408 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                    if (vmla_f32(v407, v406, v406).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a6.n128_u64[0], 1), (float32x2_t)a6.n128_u64[0], 1), v408, v408).f32[0])goto LABEL_619;
                    goto LABEL_678;
                  }
                  if (v402 == 4)
                  {
                    if (v403 != 4)
                      goto LABEL_678;
                  }
                  else if (v403 == 4)
                  {
                    goto LABEL_619;
                  }
                  v409 = (_OWORD *)v359[9 * v400].f32;
                  v411 = *((unsigned __int8 *)v409 + 112);
                  v410 = v409 + 7;
                  if (!(v411 | v365[7].u8[0]))
                  {
                    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      v402 = v401[4].i32[0];
                      goto LABEL_666;
                    }
LABEL_793:
                    abort();
                  }
LABEL_666:
                  v412 = *(_QWORD *)(a3 + 32);
                  if (v402 == 1)
                  {
                    if (v365[7].i8[0])
                    {
                      if (v365[6].i8[12])
                      {
                        a6.n128_u32[0] = v365[6].u32[2];
                        if (a6.n128_f32[0] > 0.6)
                          goto LABEL_619;
                      }
                      if (v365[6].i8[4])
                      {
                        a6.n128_u32[0] = v365[6].u32[0];
                        if (a6.n128_f32[0] > *(float *)(*(_QWORD *)v412 + 8))
                          goto LABEL_619;
                      }
                    }
                  }
                  else
                  {
                    if (!*v410)
                      goto LABEL_619;
                    v413 = (_OWORD *)v359[9 * v400].f32;
                    if (!*((_BYTE *)v413 + 108) || (a6.n128_u32[0] = *((_DWORD *)v413 + 26), a6.n128_f32[0] <= 0.6))
                    {
                      if (!v359[9 * v400 + 6].i8[4])
                        goto LABEL_619;
                      a6.n128_u32[0] = v359[9 * v400 + 6].u32[0];
                      if (a6.n128_f32[0] <= *(float *)(*(_QWORD *)v412 + 8))
                        goto LABEL_619;
                    }
                  }
LABEL_678:
                  v581 = v365[1];
                  v585 = v365[2];
                  v575 = *v365;
                  a11.i64[0] = v365[3].i64[0];
                  a11.i32[2] = v365[3].i32[2];
                  v414 = v365[3].i32[3];
                  v415 = v365[4].i32[0];
                  *(float32x4_t *)&v566[12] = v365[5];
                  *(float32x4_t *)v566 = *(float32x4_t *)((char *)v365 + 68);
                  v416 = v365[6].f32[0];
                  v523 = v365[6].u8[4];
                  v551 = v365[6].i8[7];
                  v545 = *(__int16 *)((char *)&v365[6].i16[2] + 1);
                  v417 = v365[6].f32[2];
                  v418 = v365[6].u8[12];
                  v540 = v365[6].i8[15];
                  v537 = *(__int16 *)((char *)&v365[6].i16[6] + 1);
                  v419 = v365[7].u8[0];
                  v561 = *(uint64_t *)((char *)v365[8].i64 + 1);
                  v557 = *(float32x4_t *)((char *)v365 + 113);
                  v420 = *v401;
                  v421 = v401[1];
                  v422 = v401[3];
                  v365[2] = v401[2];
                  v365[3] = v422;
                  *v365 = v420;
                  v365[1] = v421;
                  v423 = (_OWORD *)v359[9 * v400].f32;
                  v424 = v423 + 4;
                  *v391 = *((__n128 *)v423 + 4);
                  v425 = *((float32x4_t *)v423 + 5);
                  v426 = *((float32x4_t *)v423 + 6);
                  v427 = *((__n128 *)v423 + 7);
                  *(__n128 *)((char *)v391 + 57) = *(__n128 *)((char *)v423 + 121);
                  v391[2] = (__n128)v426;
                  v391[3] = v427;
                  v391[1] = (__n128)v425;
                  v518 = v418;
                  if (v399 < 2)
                    goto LABEL_713;
                  v429 = v417 > 0.6 && v418 != 0;
                  v509 = v429;
                  v515 = a11;
                  v513 = v415;
                  while (2)
                  {
                    v442 = v401;
                    v443 = v400 - 1;
                    v400 = (v400 - 1) >> 1;
                    v401 = &v359[9 * v400];
                    v444 = v401[4].i32[0];
                    if (v444 == v415)
                    {
                      v430 = **(_QWORD **)(a3 + 8);
                      v425.i64[0] = *(_QWORD *)v430;
                      v425.i32[2] = *(_DWORD *)(v430 + 8);
                      v426.i64[0] = v401[3].i64[0];
                      v426.i32[2] = v401[3].i32[2];
                      v431 = (int8x16_t)vsubq_f32(v425, v426);
                      v432 = (float32x2_t)vextq_s8(v431, v431, 8uLL).u64[0];
                      v433 = (int8x16_t)vsubq_f32(v425, a11);
                      v434 = (float32x2_t)vextq_s8(v433, v433, 8uLL).u64[0];
                      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v431.i8, *(float32x2_t *)v431.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v431.i8, 1), *(float32x2_t *)v431.i8, 1), v432, v432).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v433.i8, *(float32x2_t *)v433.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v433.i8, 1), *(float32x2_t *)v433.i8, 1), v434, v434).f32[0])goto LABEL_712;
                    }
                    else if (v444 == 4)
                    {
                      if (v415 == 4)
                      {
                        v445 = (_OWORD *)v359[9 * v400].f32;
                        v448 = *((unsigned __int8 *)v445 + 112);
                        v447 = (unsigned __int8 *)(v445 + 7);
                        v446 = v448;
                        if (v448 | v419)
                        {
                          v449 = *(_QWORD *)(a3 + 32);
                          goto LABEL_704;
                        }
LABEL_701:
                        v452 = v419;
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_793;
                        }
                        a11 = v515;
                        v419 = v452;
                        v415 = v513;
                        if (v401[4].i32[0] != 1)
                        {
                          v449 = *(_QWORD *)(a3 + 32);
                          v446 = *v447;
                          goto LABEL_704;
                        }
                      }
                    }
                    else
                    {
                      if (v415 == 4)
                        goto LABEL_712;
                      v450 = (_OWORD *)v359[9 * v400].f32;
                      v451 = *((unsigned __int8 *)v450 + 112);
                      v447 = (unsigned __int8 *)(v450 + 7);
                      v446 = v451;
                      if (!(v451 | v419))
                        goto LABEL_701;
                      v449 = *(_QWORD *)(a3 + 32);
                      if (v444 == 1)
                      {
                        if ((_DWORD)v419 && (v509 || v523 && v416 > *(float *)(*(_QWORD *)v449 + 8)))
                          goto LABEL_712;
                      }
                      else
                      {
LABEL_704:
                        if (!v446
                          || ((v453 = (_OWORD *)v359[9 * v400].f32, *((_BYTE *)v453 + 108))
                            ? (v454 = *((float *)v453 + 26) <= 0.6)
                            : (v454 = 1),
                              v454
                           && (!v359[9 * v400 + 6].i8[4]
                            || v359[9 * v400 + 6].f32[0] <= *(float *)(*(_QWORD *)v449 + 8))))
                        {
LABEL_712:
                          v401 = v442;
LABEL_713:
                          *v401 = v575;
                          v401[1] = v581;
                          v401[2] = v585;
                          v401[3].i32[2] = a11.i32[2];
                          v401[3].i64[0] = a11.i64[0];
                          v401[3].i32[3] = v414;
                          *v424 = v415;
                          *(float32x4_t *)((char *)v401 + 68) = *(float32x4_t *)v566;
                          v401[5] = *(float32x4_t *)&v566[12];
                          v401[6].f32[0] = v416;
                          v401[6].i8[4] = v523;
                          *(__int16 *)((char *)&v401[6].i16[2] + 1) = v545;
                          v401[6].i8[7] = v551;
                          v401[6].f32[2] = v417;
                          v401[6].i8[12] = v518;
                          *(__int16 *)((char *)&v401[6].i16[6] + 1) = v537;
                          v401[6].i8[15] = v540;
                          v401[7].i8[0] = v419;
                          a6.n128_u64[0] = v557.i64[0];
                          *(uint64_t *)((char *)v401[8].i64 + 1) = v561;
                          *(float32x4_t *)((char *)v401 + 113) = v557;
                          break;
                        }
                      }
                    }
                    v435 = *v401;
                    v436 = v401[1];
                    v437 = v401[3];
                    v442[2] = v401[2];
                    v442[3] = v437;
                    *v442 = v435;
                    v442[1] = v436;
                    v438 = (_OWORD *)v359[9 * v400].f32;
                    v424 = v438 + 4;
                    v440 = *((float32x4_t *)v438 + 6);
                    v439 = *((float32x4_t *)v438 + 7);
                    v426 = *(float32x4_t *)((char *)v438 + 121);
                    v441 = *((float32x4_t *)v438 + 5);
                    *(float32x4_t *)((char *)v442 + 121) = v426;
                    v442[6] = v440;
                    v442[7] = v439;
                    v442[5] = v441;
                    v425 = *((float32x4_t *)v438 + 4);
                    v442[4] = v425;
                    if (v443 < 2)
                      goto LABEL_713;
                    continue;
                  }
                }
LABEL_619:
                v292 = v358-- <= 2;
                if (v292)
                  return a6.n128_f64[0];
              }
            }
          }
        }
        return a6.n128_f64[0];
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_20EF09180(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_20EF09180(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_20EF08FD4((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_20EF09180(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_20EF09180(a1 + 4, v14, a2 - 8);
            sub_20EF09180(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_20EF09180(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_20EF09180(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_20EF0927C(a1, v8 - 4);
          if (!sub_20EF0927C(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_20EF08678(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_20EF09180(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_20EF09180(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_20EF08FD4((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_20EF09180(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_20EF09180(a1 + 4, v14, a2 - 8);
            sub_20EF09180(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_20EF09180(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_20EF09180(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_20EF1275C(a1, v8 - 4);
          if (!sub_20EF1275C(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_20EF11E00(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(a2 - 2);
        v98 = *(float *)v10;
        if (result <= *(float *)v10)
        {
          *(float *)v10 = result;
          *(a2 - 2) = v98;
          result = *(float *)(v10 + 4);
          *(float *)(v10 + 4) = *(a2 - 1);
          *(a2 - 1) = result;
        }
        return result;
      case 3:
        v99 = *(float *)(v10 + 8);
        result = *(float *)v10;
        v100 = *(a2 - 2);
        if (v99 <= *(float *)v10)
        {
          if (v100 <= v99)
          {
            v103 = (float *)(v10 + 4);
            *(float *)v10 = v100;
          }
          else
          {
            v103 = (float *)(v10 + 12);
            v145 = *(_DWORD *)(v10 + 12);
            v146 = *(_DWORD *)(v10 + 4);
            *(float *)v10 = v99;
            *(_DWORD *)(v10 + 4) = v145;
            *(float *)(v10 + 8) = result;
            *(_DWORD *)(v10 + 12) = v146;
            v147 = *(a2 - 2);
            if (v147 > result)
              return result;
            *(float *)(v10 + 8) = v147;
          }
          *(a2 - 2) = result;
          goto LABEL_177;
        }
        if (v100 <= v99)
        {
          *(float *)(v10 + 8) = v100;
          *(a2 - 2) = v99;
          v9 = (float *)(v10 + 12);
          v101 = *(_DWORD *)(v10 + 12);
          *(float *)(v10 + 12) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v101;
          result = *(float *)(v10 + 8);
          v102 = *(float *)v10;
          if (result <= *(float *)v10)
          {
            *(float *)v10 = result;
            *(float *)(v10 + 8) = v102;
            v103 = (float *)(v10 + 4);
LABEL_177:
            result = *v103;
            *v103 = *v9;
            *v9 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_20EEFE38C((_DWORD *)v10, v10 + 8, v10 + 16, (uint64_t)(a2 - 2));
      case 5:
        sub_20EEFE38C((_DWORD *)v10, v10 + 8, v10 + 16, v10 + 24);
        result = *(a2 - 2);
        v104 = *(float *)(v10 + 24);
        if (result <= v104)
        {
          *(float *)(v10 + 24) = result;
          *(a2 - 2) = v104;
          v105 = *(_DWORD *)(v10 + 28);
          *(float *)(v10 + 28) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v105;
          result = *(float *)(v10 + 24);
          v106 = *(float *)(v10 + 16);
          if (result <= v106)
          {
            v107 = *(_DWORD *)(v10 + 20);
            v108 = *(_DWORD *)(v10 + 28);
            *(float *)(v10 + 16) = result;
            *(_DWORD *)(v10 + 20) = v108;
            *(float *)(v10 + 24) = v106;
            *(_DWORD *)(v10 + 28) = v107;
            v109 = *(float *)(v10 + 8);
            if (result <= v109)
            {
              v110 = *(_DWORD *)(v10 + 12);
              *(float *)(v10 + 8) = result;
              *(_DWORD *)(v10 + 12) = v108;
              *(float *)(v10 + 16) = v109;
              *(_DWORD *)(v10 + 20) = v110;
              v111 = *(float *)v10;
              if (result <= *(float *)v10)
              {
                v112 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = result;
                *(_DWORD *)(v10 + 4) = v108;
                *(float *)(v10 + 8) = v111;
                *(_DWORD *)(v10 + 12) = v112;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              v123 = (unint64_t)(v12 - 2) >> 1;
              v124 = v123;
              do
              {
                if (v123 >= v124)
                {
                  v126 = (2 * v124) | 1;
                  v127 = (float *)(v10 + 8 * v126);
                  if (2 * v124 + 2 < v12 && *v127 <= v127[2])
                  {
                    v127 += 2;
                    v126 = 2 * v124 + 2;
                  }
                  v128 = (float *)(v10 + 8 * v124);
                  result = *v128;
                  if (*v127 > *v128)
                  {
                    v129 = *((_DWORD *)v128 + 1);
                    do
                    {
                      v130 = v128;
                      v128 = v127;
                      *(_QWORD *)v130 = *(_QWORD *)v127;
                      if (v123 < v126)
                        break;
                      v131 = 2 * v126;
                      v126 = (2 * v126) | 1;
                      v127 = (float *)(v10 + 8 * v126);
                      v132 = v131 + 2;
                      if (v132 < v12 && *v127 <= v127[2])
                      {
                        v127 += 2;
                        v126 = v132;
                      }
                    }
                    while (*v127 > result);
                    *v128 = result;
                    *((_DWORD *)v128 + 1) = v129;
                  }
                }
                v125 = v124-- <= 0;
              }
              while (!v125);
              v133 = (unint64_t)v11 >> 3;
              do
              {
                v134 = 0;
                v135 = *(_QWORD *)v10;
                v136 = (float *)v10;
                do
                {
                  v137 = v136;
                  v136 += 2 * v134 + 2;
                  v138 = 2 * v134;
                  v134 = (2 * v134) | 1;
                  v139 = v138 + 2;
                  if (v139 < v133)
                  {
                    result = v136[2];
                    if (*v136 <= result)
                    {
                      v136 += 2;
                      v134 = v139;
                    }
                  }
                  *(_QWORD *)v137 = *(_QWORD *)v136;
                }
                while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 2;
                if (v136 == a2)
                {
                  *(_QWORD *)v136 = v135;
                }
                else
                {
                  *(_QWORD *)v136 = *(_QWORD *)a2;
                  *(_QWORD *)a2 = v135;
                  v140 = (uint64_t)v136 - v10 + 8;
                  if (v140 >= 9)
                  {
                    v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
                    v142 = (float *)(v10 + 8 * v141);
                    result = *v136;
                    if (*v142 <= *v136)
                    {
                      v143 = *((_DWORD *)v136 + 1);
                      do
                      {
                        v144 = v136;
                        v136 = v142;
                        *(_QWORD *)v144 = *(_QWORD *)v142;
                        if (!v141)
                          break;
                        v141 = (v141 - 1) >> 1;
                        v142 = (float *)(v10 + 8 * v141);
                      }
                      while (*v142 <= result);
                      *v136 = result;
                      *((_DWORD *)v136 + 1) = v143;
                    }
                  }
                }
                v125 = v133-- <= 2;
              }
              while (!v125);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = v10 + 8 * ((unint64_t)v12 >> 1);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 >= 0x401)
          {
            v16 = *(float *)v14;
            v17 = *(float *)v10;
            if (*(float *)v14 <= *(float *)v10)
            {
              if (v15 <= v16)
              {
                v21 = (int *)(v10 + 4);
                *(float *)v10 = v15;
              }
              else
              {
                v21 = (int *)(v14 + 4);
                v28 = *(_DWORD *)(v14 + 4);
                v29 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = v16;
                *(_DWORD *)(v10 + 4) = v28;
                *(float *)v14 = v17;
                *(_DWORD *)(v14 + 4) = v29;
                v30 = *(a2 - 2);
                if (v30 > v17)
                  goto LABEL_23;
                *(float *)v14 = v30;
              }
              *(a2 - 2) = v17;
              v18 = a2 - 1;
            }
            else
            {
              if (v15 > v16
                || (*(float *)v14 = v15,
                    *(a2 - 2) = v16,
                    v18 = (float *)(v14 + 4),
                    v19 = *(_DWORD *)(v14 + 4),
                    *(float *)(v14 + 4) = *(a2 - 1),
                    *((_DWORD *)a2 - 1) = v19,
                    v20 = *(float *)v10,
                    *(float *)v14 > *(float *)v10))
              {
LABEL_23:
                v35 = v10 + 8 * v13;
                v37 = *(float *)(v35 - 8);
                v36 = v35 - 8;
                v38 = v37;
                v39 = *(float *)(v10 + 8);
                v40 = *(a2 - 4);
                if (v37 <= v39)
                {
                  if (v40 <= v38)
                  {
                    v44 = (int *)(v10 + 12);
                    *(float *)(v10 + 8) = v40;
                  }
                  else
                  {
                    v44 = (int *)(v36 + 4);
                    v45 = *(_DWORD *)(v36 + 4);
                    v46 = *(_DWORD *)(v10 + 12);
                    *(float *)(v10 + 8) = v38;
                    *(_DWORD *)(v10 + 12) = v45;
                    *(float *)v36 = v39;
                    *(_DWORD *)(v36 + 4) = v46;
                    v47 = *(a2 - 4);
                    if (v47 > v39)
                      goto LABEL_35;
                    *(float *)v36 = v47;
                  }
                  *(a2 - 4) = v39;
                  v41 = a2 - 3;
                }
                else
                {
                  if (v40 > v38
                    || (*(float *)v36 = v40,
                        *(a2 - 4) = v38,
                        v41 = (float *)(v36 + 4),
                        v42 = *(_DWORD *)(v36 + 4),
                        *(float *)(v36 + 4) = *(a2 - 3),
                        *((_DWORD *)a2 - 3) = v42,
                        v43 = *(float *)(v10 + 8),
                        *(float *)v36 > v43))
                  {
LABEL_35:
                    v49 = v10 + 8 * v13;
                    v51 = *(float *)(v49 + 8);
                    v50 = v49 + 8;
                    v52 = v51;
                    v53 = *(float *)(v10 + 16);
                    v54 = *(a2 - 6);
                    if (v51 <= v53)
                    {
                      if (v54 <= v52)
                      {
                        v55 = (int *)(v10 + 20);
                        *(float *)(v10 + 16) = v54;
                      }
                      else
                      {
                        v55 = (int *)(v50 + 4);
                        v56 = *(_DWORD *)(v50 + 4);
                        v57 = *(_DWORD *)(v10 + 20);
                        *(float *)(v10 + 16) = v52;
                        *(_DWORD *)(v10 + 20) = v56;
                        *(float *)v50 = v53;
                        *(_DWORD *)(v50 + 4) = v57;
                        v58 = *(a2 - 6);
                        if (v58 > v53)
                          goto LABEL_46;
                        *(float *)v50 = v58;
                      }
                      *(a2 - 6) = v53;
                      v59 = a2 - 5;
                    }
                    else
                    {
                      if (v54 > v52)
                      {
                        v53 = v52;
                        goto LABEL_46;
                      }
                      *(float *)v50 = v54;
                      *(a2 - 6) = v52;
                      v59 = (float *)(v50 + 4);
                      v60 = *(_DWORD *)(v50 + 4);
                      *(float *)(v50 + 4) = *(a2 - 5);
                      *((_DWORD *)a2 - 5) = v60;
                      v53 = *(float *)v50;
                      v61 = *(float *)(v10 + 16);
                      if (*(float *)v50 > v61)
                      {
LABEL_46:
                        v63 = *(float *)v14;
                        v64 = *(float *)v36;
                        if (*(float *)v14 <= *(float *)v36)
                        {
                          if (v53 <= v63)
                          {
                            *(float *)v36 = v53;
                            v68 = (int *)(v36 + 4);
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                          }
                          else
                          {
                            v65 = *(_DWORD *)(v14 + 4);
                            *(float *)v14 = v64;
                            v66 = *(_DWORD *)(v36 + 4);
                            *(float *)v36 = v63;
                            *(_DWORD *)(v36 + 4) = v65;
                            *(_DWORD *)(v14 + 4) = v66;
                            if (v53 > v64)
                              goto LABEL_58;
                            *(float *)v14 = v53;
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                            v68 = (int *)(v14 + 4);
                          }
                          v69 = v67;
                        }
                        else
                        {
                          if (v53 > v63)
                          {
                            v64 = *(float *)v14;
LABEL_58:
                            v72 = *(float *)v10;
                            *(float *)v10 = v64;
                            v26 = (int *)(v10 + 4);
                            *(float *)v14 = v72;
                            v27 = (float *)(v14 + 4);
                            goto LABEL_59;
                          }
                          v69 = (int *)(v14 + 4);
                          v70 = *(_DWORD *)(v14 + 4);
                          *(float *)v14 = v53;
                          *(_DWORD *)(v14 + 4) = *(_DWORD *)(v50 + 4);
                          *(float *)v50 = v63;
                          *(_DWORD *)(v50 + 4) = v70;
                          if (v53 > v64)
                          {
                            v64 = v53;
                            goto LABEL_58;
                          }
                          *(float *)v36 = v53;
                          v68 = (int *)(v36 + 4);
                          *(float *)v14 = v64;
                        }
                        v71 = *v68;
                        *v68 = *v69;
                        *v69 = v71;
                        v64 = *(float *)v14;
                        goto LABEL_58;
                      }
                      *(float *)(v10 + 16) = v53;
                      *(float *)v50 = v61;
                      v55 = (int *)(v10 + 20);
                    }
                    v62 = *v55;
                    *v55 = *(_DWORD *)v59;
                    *(_DWORD *)v59 = v62;
                    v53 = *(float *)v50;
                    goto LABEL_46;
                  }
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)v36;
                  *(float *)v36 = v43;
                  v44 = (int *)(v10 + 12);
                }
                v48 = *v44;
                *v44 = *(_DWORD *)v41;
                *(_DWORD *)v41 = v48;
                goto LABEL_35;
              }
              *(_DWORD *)v10 = *(_DWORD *)v14;
              v21 = (int *)(v10 + 4);
              *(float *)v14 = v20;
            }
            v34 = *v21;
            *v21 = *(_DWORD *)v18;
            *(_DWORD *)v18 = v34;
            goto LABEL_23;
          }
          v22 = *(float *)v10;
          v23 = *(float *)v14;
          if (*(float *)v10 <= *(float *)v14)
          {
            if (v15 <= v22)
            {
              v26 = (int *)(v14 + 4);
              *(float *)v14 = v15;
            }
            else
            {
              v26 = (int *)(v10 + 4);
              v31 = *(_DWORD *)(v10 + 4);
              v32 = *(_DWORD *)(v14 + 4);
              *(float *)v14 = v22;
              *(_DWORD *)(v14 + 4) = v31;
              *(float *)v10 = v23;
              *(_DWORD *)(v10 + 4) = v32;
              v33 = *(a2 - 2);
              if (v33 > v23)
                goto LABEL_60;
              *(float *)v10 = v33;
            }
            *(a2 - 2) = v23;
            v27 = a2 - 1;
            goto LABEL_59;
          }
          if (v15 <= v22)
          {
            *(float *)v10 = v15;
            *(a2 - 2) = v22;
            v24 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = *(a2 - 1);
            *((_DWORD *)a2 - 1) = v24;
            v25 = *(float *)v14;
            if (*(float *)v10 <= *(float *)v14)
            {
              *(_DWORD *)v14 = *(_DWORD *)v10;
              *(float *)v10 = v25;
              v26 = (int *)(v14 + 4);
              v27 = (float *)(v10 + 4);
LABEL_59:
              v73 = *v26;
              *v26 = *(_DWORD *)v27;
              *(_DWORD *)v27 = v73;
            }
          }
LABEL_60:
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(float *)v10;
            if (*(float *)(v10 - 8) <= *(float *)v10)
              goto LABEL_63;
            if (*(a2 - 2) >= result)
            {
              do
              {
                v89 = *(float *)(v10 + 8);
                v10 += 8;
              }
              while (v89 < result);
            }
            else
            {
              v88 = v10 + 8;
              do
              {
                v10 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v88 += 8;
              }
              while (*(float *)v10 < result);
            }
            v90 = a2;
            if (v10 < (unint64_t)a2)
            {
              v90 = a2;
              do
              {
                v91 = *(v90 - 2);
                v90 -= 2;
              }
              while (v91 >= result);
            }
            v92 = *(_DWORD *)(a1 + 4);
            if (v10 < (unint64_t)v90)
            {
              v93 = *(float *)v10;
              v94 = *v90;
              do
              {
                *(float *)v10 = v94;
                *v90 = v93;
                v95 = *(_DWORD *)(v10 + 4);
                *(float *)(v10 + 4) = v90[1];
                *((_DWORD *)v90 + 1) = v95;
                do
                {
                  v96 = *(float *)(v10 + 8);
                  v10 += 8;
                  v93 = v96;
                }
                while (v96 < result);
                do
                {
                  v97 = *(v90 - 2);
                  v90 -= 2;
                  v94 = v97;
                }
                while (v97 >= result);
              }
              while (v10 < (unint64_t)v90);
            }
            if (v10 - 8 != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v10 - 8);
            a4 = 0;
            *(float *)(v10 - 8) = result;
            *(_DWORD *)(v10 - 4) = v92;
            continue;
          }
          result = *(float *)v10;
LABEL_63:
          v74 = 0;
          v75 = *(_DWORD *)(v10 + 4);
          do
          {
            v76 = *(float *)(v10 + v74 + 8);
            v74 += 8;
          }
          while (v76 <= result);
          v77 = v10 + v74;
          v78 = a2;
          if (v74 == 8)
          {
            v78 = a2;
            do
            {
              if (v77 >= (unint64_t)v78)
                break;
              v80 = *(v78 - 2);
              v78 -= 2;
            }
            while (v80 > result);
          }
          else
          {
            do
            {
              v79 = *(v78 - 2);
              v78 -= 2;
            }
            while (v79 > result);
          }
          if (v77 >= (unint64_t)v78)
          {
            v10 += v74;
            v86 = (float *)(v77 - 8);
            if (v77 - 8 == a1)
              goto LABEL_79;
          }
          else
          {
            v81 = *v78;
            v10 += v74;
            v82 = v78;
            do
            {
              *(float *)v10 = v81;
              *v82 = v76;
              v83 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v82[1];
              *((_DWORD *)v82 + 1) = v83;
              do
              {
                v84 = *(float *)(v10 + 8);
                v10 += 8;
                v76 = v84;
              }
              while (v84 <= result);
              do
              {
                v85 = *(v82 - 2);
                v82 -= 2;
                v81 = v85;
              }
              while (v85 > result);
            }
            while (v10 < (unint64_t)v82);
            v86 = (float *)(v10 - 8);
            if (v10 - 8 == a1)
              goto LABEL_79;
          }
          *(_QWORD *)a1 = *(_QWORD *)v86;
LABEL_79:
          *(float *)(v10 - 8) = result;
          *(_DWORD *)(v10 - 4) = v75;
          if (v77 < (unint64_t)v78)
            goto LABEL_82;
          v87 = sub_20EF18570(a1, (uint64_t)v86);
          if (!sub_20EF18570(v10, (uint64_t)a2))
          {
            if (v87)
              continue;
LABEL_82:
            sub_20EF17AC8(a1, v86, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v86;
          if (v87)
            return result;
          goto LABEL_1;
        }
        v113 = (float *)(v10 + 8);
        v115 = (float *)v10 == a2 || v113 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v115)
          {
            v116 = 0;
            v117 = v10;
            do
            {
              v119 = v113;
              result = *(float *)(v117 + 8);
              if (result <= *(float *)v117)
              {
                v120 = *(_DWORD *)(v117 + 12);
                v121 = v116;
                do
                {
                  *(_QWORD *)(v10 + v121 + 8) = *(_QWORD *)(v10 + v121);
                  if (!v121)
                  {
                    v118 = v10;
                    goto LABEL_128;
                  }
                  v122 = *(float *)(v10 + v121 - 8);
                  v121 -= 8;
                }
                while (v122 >= result);
                v118 = v10 + v121 + 8;
LABEL_128:
                *(float *)v118 = result;
                *(_DWORD *)(v118 + 4) = v120;
              }
              v113 = v119 + 2;
              v116 += 8;
              v117 = (unint64_t)v119;
            }
            while (v119 + 2 != a2);
          }
        }
        else if (!v115)
        {
          do
          {
            v148 = (uint64_t)v113;
            result = *(float *)(a1 + 8);
            if (result <= *(float *)a1)
            {
              v149 = *(_DWORD *)(a1 + 12);
              do
              {
                v150 = v113;
                v151 = *((_QWORD *)v113 - 1);
                v113 -= 2;
                *(_QWORD *)v150 = v151;
              }
              while (*(v150 - 4) >= result);
              *v113 = result;
              *((_DWORD *)v113 + 1) = v149;
            }
            v113 = (float *)(v148 + 8);
            a1 = v148;
          }
          while ((float *)(v148 + 8) != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(v12 + 16))
        {
          v211 = *(_QWORD *)(v12 + 16);
          v183 = *(__n128 *)v12;
          v95 = *(__int128 *)((char *)&a2[-2] + 8);
          *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
          *(_OWORD *)v12 = v95;
          a2[-1].n128_u64[1] = v211;
          *(__n128 *)((char *)a2 - 24) = v183;
        }
        return;
      case 3:
        v96 = (__n128 *)(v12 + 24);
        v97 = *(_QWORD *)(v12 + 40);
        v98 = a2[-1].n128_i64[1];
        if (v97 <= *(_QWORD *)(v12 + 16))
        {
          if (v98 > v97)
          {
            v152 = *v96;
            v153 = *(_QWORD *)(v12 + 40);
            v154 = a2[-1].n128_u64[1];
            *v96 = *v9;
            *(_QWORD *)(v12 + 40) = v154;
            a2[-1].n128_u64[1] = v153;
            *v9 = v152;
            if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
            {
              v215 = *(_QWORD *)(v12 + 16);
              v189 = *(__n128 *)v12;
              *(__n128 *)v12 = *v96;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              *v96 = v189;
              *(_QWORD *)(v12 + 40) = v215;
            }
          }
        }
        else
        {
          if (v98 <= v97)
          {
            v216 = *(_QWORD *)(v12 + 16);
            v191 = *(__n128 *)v12;
            *(__n128 *)v12 = *v96;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            *v96 = v191;
            *(_QWORD *)(v12 + 40) = v216;
            if ((int64_t)a2[-1].n128_u64[1] <= *(_QWORD *)(v12 + 40))
              return;
            v100 = *v96;
            v159 = *(_QWORD *)(v12 + 40);
            v160 = a2[-1].n128_u64[1];
            *v96 = *v9;
            *(_QWORD *)(v12 + 40) = v160;
            a2[-1].n128_u64[1] = v159;
          }
          else
          {
            v212 = *(_QWORD *)(v12 + 16);
            v184 = *(__n128 *)v12;
            v99 = *v9;
            *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
            *(__n128 *)v12 = v99;
            v100 = v184;
            a2[-1].n128_u64[1] = v212;
          }
          *v9 = v100;
        }
        return;
      case 4:
        sub_20EF86110((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5);
        return;
      case 5:
        v101 = (__n128 *)(v12 + 24);
        v102 = (__n128 *)(v12 + 48);
        v103 = (__n128 *)(v12 + 72);
        sub_20EF86110((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), a5);
        if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(v12 + 88))
        {
          v104 = *v103;
          v105 = *(_QWORD *)(v12 + 88);
          v106 = a2[-1].n128_u64[1];
          *v103 = *(__n128 *)((char *)a2 - 24);
          *(_QWORD *)(v12 + 88) = v106;
          a2[-1].n128_u64[1] = v105;
          *(__n128 *)((char *)a2 - 24) = v104;
          if (*(_QWORD *)(v12 + 88) > *(_QWORD *)(v12 + 64))
          {
            v107 = *(_QWORD *)(v12 + 64);
            v108 = *v102;
            *v102 = *v103;
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 88);
            *v103 = v108;
            *(_QWORD *)(v12 + 88) = v107;
            if (*(_QWORD *)(v12 + 64) > *(_QWORD *)(v12 + 40))
            {
              v109 = *(_QWORD *)(v12 + 40);
              v110 = *v101;
              *v101 = *v102;
              *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
              *v102 = v110;
              *(_QWORD *)(v12 + 64) = v109;
              if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
              {
                v213 = *(_QWORD *)(v12 + 16);
                v185 = *(__n128 *)v12;
                *(__n128 *)v12 = *v101;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
                *v101 = v185;
                *(_QWORD *)(v12 + 40) = v213;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v121 = (unint64_t)(v14 - 2) >> 1;
              v122 = v121;
              do
              {
                if (v121 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = v12 + 24 * v124;
                  if (2 * v122 + 2 < v14)
                  {
                    v126 = *(_QWORD *)(v125 + 16);
                    v127 = *(_QWORD *)(v125 + 40);
                    v125 += 24 * (v126 > v127);
                    if (v126 > v127)
                      v124 = 2 * v122 + 2;
                  }
                  v128 = v12 + 24 * v122;
                  v129 = *(_QWORD *)(v128 + 16);
                  if (*(_QWORD *)(v125 + 16) <= v129)
                  {
                    v187 = *(_OWORD *)v128;
                    do
                    {
                      v130 = v128;
                      v128 = v125;
                      v131 = *(_OWORD *)v125;
                      *(_QWORD *)(v130 + 16) = *(_QWORD *)(v125 + 16);
                      *(_OWORD *)v130 = v131;
                      if (v121 < v124)
                        break;
                      v132 = (2 * v124) | 1;
                      v125 = v12 + 24 * v132;
                      v133 = 2 * v124 + 2;
                      if (v133 < v14)
                      {
                        v134 = *(_QWORD *)(v125 + 16);
                        v135 = *(_QWORD *)(v125 + 40);
                        v125 += 24 * (v134 > v135);
                        if (v134 > v135)
                          v132 = v133;
                      }
                      v124 = v132;
                    }
                    while (*(_QWORD *)(v125 + 16) <= v129);
                    *(_OWORD *)v128 = v187;
                    *(_QWORD *)(v128 + 16) = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v136 = v13 / 0x18uLL;
              do
              {
                v137 = 0;
                v214 = *(_QWORD *)(v12 + 16);
                v188 = *(__n128 *)v12;
                v138 = v12;
                do
                {
                  v140 = v138 + 24 * v137 + 24;
                  v141 = (2 * v137) | 1;
                  v142 = 2 * v137 + 2;
                  if (v142 < v136)
                  {
                    v143 = *(_QWORD *)(v140 + 16);
                    v144 = *(_QWORD *)(v140 + 40);
                    v140 += 24 * (v143 > v144);
                    if (v143 > v144)
                      v141 = v142;
                  }
                  v139 = *(_OWORD *)v140;
                  *(_QWORD *)(v138 + 16) = *(_QWORD *)(v140 + 16);
                  *(_OWORD *)v138 = v139;
                  v138 = v140;
                  v137 = v141;
                }
                while (v141 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if ((__n128 *)v140 == a2)
                {
                  *(_QWORD *)(v140 + 16) = v214;
                  *(__n128 *)v140 = v188;
                }
                else
                {
                  v145 = *a2;
                  *(_QWORD *)(v140 + 16) = a2[1].n128_u64[0];
                  *(__n128 *)v140 = v145;
                  a2[1].n128_u64[0] = v214;
                  *a2 = v188;
                  v146 = v140 - v12 + 24;
                  if (v146 >= 25)
                  {
                    v147 = (v146 / 0x18uLL - 2) >> 1;
                    v148 = v12 + 24 * v147;
                    v149 = *(_QWORD *)(v140 + 16);
                    if (*(_QWORD *)(v148 + 16) > v149)
                    {
                      v163 = *(_OWORD *)v140;
                      do
                      {
                        v150 = v140;
                        v140 = v148;
                        v151 = *(_OWORD *)v148;
                        *(_QWORD *)(v150 + 16) = *(_QWORD *)(v148 + 16);
                        *(_OWORD *)v150 = v151;
                        if (!v147)
                          break;
                        v147 = (v147 - 1) >> 1;
                        v148 = v12 + 24 * v147;
                      }
                      while (*(_QWORD *)(v148 + 16) > v149);
                      *(_OWORD *)v140 = v163;
                      *(_QWORD *)(v140 + 16) = v149;
                    }
                  }
                }
                v123 = v136-- <= 2;
              }
              while (!v123);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_i64[1];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(_QWORD *)(v12 + 16);
            if (v20 <= (int64_t)v16[1].n128_u64[0])
            {
              if (v17 > v20)
              {
                v196 = *(_QWORD *)(v12 + 16);
                v168 = *(__n128 *)v12;
                v24 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = v24;
                a2[-1].n128_u64[1] = v196;
                *v9 = v168;
                if (*(_QWORD *)(v12 + 16) > (int64_t)v16[1].n128_u64[0])
                {
                  v197 = v16[1].n128_u64[0];
                  v169 = *v16;
                  v25 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = v25;
                  *(_QWORD *)(v12 + 16) = v197;
                  *(__n128 *)v12 = v169;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v20)
              {
                v200 = v16[1].n128_u64[0];
                v172 = *v16;
                v40 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = v40;
                *(_QWORD *)(v12 + 16) = v200;
                *(__n128 *)v12 = v172;
                if ((int64_t)a2[-1].n128_u64[1] <= *(_QWORD *)(v12 + 16))
                  goto LABEL_31;
                v193 = *(_QWORD *)(v12 + 16);
                v165 = *(__n128 *)v12;
                v41 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = v41;
              }
              else
              {
                v193 = v16[1].n128_u64[0];
                v165 = *v16;
                v21 = *v9;
                v16[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v16 = v21;
              }
              a2[-1].n128_u64[1] = v193;
              *v9 = v165;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v42 = *(_QWORD *)(v12 + 16);
            if (*(_QWORD *)(v12 - 8) > v42)
              goto LABEL_56;
            v162 = *(__n128 *)v12;
            v82 = *(_QWORD *)(v12 + 16);
            if (v82 <= (int64_t)a2[-1].n128_u64[1])
            {
              v85 = v12 + 24;
              do
              {
                v12 = v85;
                if (v85 >= (unint64_t)a2)
                  break;
                v86 = *(_QWORD *)(v85 + 16);
                v85 += 24;
              }
              while (v82 <= v86);
            }
            else
            {
              v83 = v12;
              do
              {
                v12 = v83 + 24;
                v84 = *(_QWORD *)(v83 + 40);
                v83 += 24;
              }
              while (v82 <= v84);
            }
            v87 = a2;
            if (v12 < (unint64_t)a2)
            {
              v88 = a2;
              do
              {
                v87 = (__n128 *)((char *)v88 - 24);
                v89 = v88[-1].n128_i64[1];
                v88 = (__n128 *)((char *)v88 - 24);
              }
              while (v82 > v89);
            }
            while (v12 < (unint64_t)v87)
            {
              v210 = *(_QWORD *)(v12 + 16);
              v182 = *(__n128 *)v12;
              v90 = *v87;
              *(_QWORD *)(v12 + 16) = v87[1].n128_u64[0];
              *(__n128 *)v12 = v90;
              v87[1].n128_u64[0] = v210;
              *v87 = v182;
              do
              {
                v91 = *(_QWORD *)(v12 + 40);
                v12 += 24;
              }
              while (v82 <= v91);
              do
              {
                v92 = v87[-1].n128_i64[1];
                v87 = (__n128 *)((char *)v87 - 24);
              }
              while (v82 > v92);
            }
            v93 = (__n128 *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v94 = *v93;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(__n128 *)a1 = v94;
            }
            a4 = 0;
            a5 = v162;
            *v93 = v162;
            *(_QWORD *)(v12 - 8) = v82;
            continue;
          }
          v18 = v16[1].n128_i64[0];
          if (v18 <= *(_QWORD *)(v12 + 16))
          {
            if (v17 > v18)
            {
              v194 = v16[1].n128_u64[0];
              v166 = *v16;
              v22 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v22;
              a2[-1].n128_u64[1] = v194;
              *v9 = v166;
              if ((int64_t)v16[1].n128_u64[0] > *(_QWORD *)(v12 + 16))
              {
                v195 = *(_QWORD *)(v12 + 16);
                v167 = *(__n128 *)v12;
                v23 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u64[0] = v195;
                *v16 = v167;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v198 = *(_QWORD *)(v12 + 16);
              v170 = *(__n128 *)v12;
              v26 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v26;
              v16[1].n128_u64[0] = v198;
              *v16 = v170;
              if ((int64_t)a2[-1].n128_u64[1] <= (int64_t)v16[1].n128_u64[0])
                goto LABEL_22;
              v192 = v16[1].n128_u64[0];
              v164 = *v16;
              v27 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v27;
            }
            else
            {
              v192 = *(_QWORD *)(v12 + 16);
              v164 = *(__n128 *)v12;
              v19 = *v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u64[1] = v192;
            *v9 = v164;
          }
LABEL_22:
          v28 = (__n128 *)(v12 + 24);
          v29 = v12 + 24 * v15;
          v30 = (__n128 *)(v29 - 24);
          v31 = *(_QWORD *)(v29 - 8);
          v32 = a2[-2].n128_i64[0];
          if (v31 <= *(_QWORD *)(v12 + 40))
          {
            if (v32 > v31)
            {
              v199 = v30[1].n128_u64[0];
              v171 = *v30;
              v36 = *v10;
              v30[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v30 = v36;
              a2[-2].n128_u64[0] = v199;
              *v10 = v171;
              if ((int64_t)v30[1].n128_u64[0] > *(_QWORD *)(v12 + 40))
              {
                v37 = *v28;
                v38 = *(_QWORD *)(v12 + 40);
                v39 = v30[1].n128_i64[0];
                *v28 = *v30;
                *(_QWORD *)(v12 + 40) = v39;
                v30[1].n128_u64[0] = v38;
                *v30 = v37;
              }
            }
          }
          else
          {
            if (v32 <= v31)
            {
              v43 = *v28;
              v44 = *(_QWORD *)(v12 + 40);
              v45 = v30[1].n128_i64[0];
              *v28 = *v30;
              *(_QWORD *)(v12 + 40) = v45;
              v30[1].n128_u64[0] = v44;
              *v30 = v43;
              if ((int64_t)a2[-2].n128_u64[0] <= v44)
                goto LABEL_36;
              v201 = v30[1].n128_u64[0];
              v173 = *v30;
              v46 = *v10;
              v30[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v30 = v46;
              v33 = v173;
              a2[-2].n128_u64[0] = v201;
            }
            else
            {
              v33 = *v28;
              v34 = *(_QWORD *)(v12 + 40);
              v35 = a2[-2].n128_u64[0];
              *v28 = *v10;
              *(_QWORD *)(v12 + 40) = v35;
              a2[-2].n128_u64[0] = v34;
            }
            *v10 = v33;
          }
LABEL_36:
          v47 = (__n128 *)(v12 + 48);
          v48 = v12 + 24 * v15;
          v49 = (__n128 *)(v48 + 24);
          v50 = *(_QWORD *)(v48 + 40);
          v51 = a2[-4].n128_i64[1];
          if (v50 <= *(_QWORD *)(v12 + 64))
          {
            if (v51 > v50)
            {
              v202 = v49[1].n128_u64[0];
              v174 = *v49;
              v55 = *(__n128 *)v11;
              v49[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v49 = v55;
              a2[-4].n128_u64[1] = v202;
              *(__n128 *)v11 = v174;
              if ((int64_t)v49[1].n128_u64[0] > *(_QWORD *)(v12 + 64))
              {
                v56 = *v47;
                v57 = *(_QWORD *)(v12 + 64);
                v58 = v49[1].n128_i64[0];
                *v47 = *v49;
                *(_QWORD *)(v12 + 64) = v58;
                v49[1].n128_u64[0] = v57;
                *v49 = v56;
              }
            }
          }
          else
          {
            if (v51 <= v50)
            {
              v59 = *v47;
              v60 = *(_QWORD *)(v12 + 64);
              v61 = v49[1].n128_i64[0];
              *v47 = *v49;
              *(_QWORD *)(v12 + 64) = v61;
              v49[1].n128_u64[0] = v60;
              *v49 = v59;
              if ((int64_t)a2[-4].n128_u64[1] <= v60)
                goto LABEL_45;
              v203 = v49[1].n128_u64[0];
              v175 = *v49;
              v62 = *(__n128 *)v11;
              v49[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v49 = v62;
              v52 = v175;
              a2[-4].n128_u64[1] = v203;
            }
            else
            {
              v52 = *v47;
              v53 = *(_QWORD *)(v12 + 64);
              v54 = a2[-4].n128_u64[1];
              *v47 = *(__n128 *)v11;
              *(_QWORD *)(v12 + 64) = v54;
              a2[-4].n128_u64[1] = v53;
            }
            *(__n128 *)v11 = v52;
          }
LABEL_45:
          v63 = v16[1].n128_i64[0];
          v64 = v49[1].n128_i64[0];
          if (v63 <= (int64_t)v30[1].n128_u64[0])
          {
            if (v64 > v63)
            {
              v205 = v16[1].n128_u64[0];
              v177 = *v16;
              *v16 = *v49;
              v16[1].n128_u64[0] = v49[1].n128_u64[0];
              v49[1].n128_u64[0] = v205;
              *v49 = v177;
              if ((int64_t)v16[1].n128_u64[0] > (int64_t)v30[1].n128_u64[0])
              {
                v206 = v30[1].n128_u64[0];
                v178 = *v30;
                *v30 = *v16;
                v30[1].n128_u64[0] = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v206;
                *v16 = v178;
              }
            }
          }
          else
          {
            if (v64 <= v63)
            {
              v207 = v30[1].n128_u64[0];
              v179 = *v30;
              *v30 = *v16;
              v30[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v207;
              *v16 = v179;
              if ((int64_t)v49[1].n128_u64[0] <= (int64_t)v16[1].n128_u64[0])
                goto LABEL_54;
              v204 = v16[1].n128_u64[0];
              v176 = *v16;
              *v16 = *v49;
              v16[1].n128_u64[0] = v49[1].n128_u64[0];
            }
            else
            {
              v204 = v30[1].n128_u64[0];
              v176 = *v30;
              *v30 = *v49;
              v30[1].n128_u64[0] = v49[1].n128_u64[0];
            }
            v49[1].n128_u64[0] = v204;
            *v49 = v176;
          }
LABEL_54:
          v208 = *(_QWORD *)(v12 + 16);
          v180 = *(__n128 *)v12;
          v65 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = v65;
          v16[1].n128_u64[0] = v208;
          *v16 = v180;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v42 = *(_QWORD *)(v12 + 16);
LABEL_56:
          v66 = 0;
          v161 = *(__n128 *)v12;
          do
          {
            v67 = *(_QWORD *)(v12 + v66 + 40);
            v66 += 24;
          }
          while (v67 > v42);
          v68 = v12 + v66;
          v69 = a2;
          if (v66 == 24)
          {
            v72 = a2;
            while (v68 < (unint64_t)v72)
            {
              v70 = (__n128 *)((char *)v72 - 24);
              v73 = v72[-1].n128_i64[1];
              v72 = (__n128 *)((char *)v72 - 24);
              if (v73 > v42)
                goto LABEL_64;
            }
            v70 = v72;
            v12 = v68;
          }
          else
          {
            do
            {
              v70 = (__n128 *)((char *)v69 - 24);
              v71 = v69[-1].n128_i64[1];
              v69 = (__n128 *)((char *)v69 - 24);
            }
            while (v71 <= v42);
LABEL_64:
            v12 = v68;
            if (v68 < (unint64_t)v70)
            {
              v74 = (unint64_t)v70;
              do
              {
                v209 = *(_QWORD *)(v12 + 16);
                v181 = *(__n128 *)v12;
                v75 = *(__n128 *)v74;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v74 + 16);
                *(__n128 *)v12 = v75;
                *(_QWORD *)(v74 + 16) = v209;
                *(__n128 *)v74 = v181;
                do
                {
                  v76 = *(_QWORD *)(v12 + 40);
                  v12 += 24;
                }
                while (v76 > v42);
                do
                {
                  v77 = *(_QWORD *)(v74 - 8);
                  v74 -= 24;
                }
                while (v77 <= v42);
              }
              while (v12 < v74);
            }
          }
          v78 = (__n128 *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v79 = *v78;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(__n128 *)a1 = v79;
          }
          *v78 = v161;
          *(_QWORD *)(v12 - 8) = v42;
          if (v68 < (unint64_t)v70)
            goto LABEL_75;
          v80 = sub_20EF85C48(a1, (__n128 *)(v12 - 24), v161);
          if (!sub_20EF85C48(v12, a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_20EF84CFC(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v80)
            return;
          goto LABEL_1;
        }
        v111 = (__n128 *)(v12 + 24);
        v113 = (__n128 *)v12 == a2 || v111 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v113)
          {
            v114 = 0;
            v115 = (__n128 *)v12;
            do
            {
              v117 = v115[2].n128_i64[1];
              v118 = v115[1].n128_i64[0];
              v115 = v111;
              if (v117 > v118)
              {
                v186 = *v111;
                v119 = v114;
                do
                {
                  v120 = v12 + v119;
                  *(_OWORD *)(v120 + 24) = *(_OWORD *)(v12 + v119);
                  *(_QWORD *)(v120 + 40) = *(_QWORD *)(v12 + v119 + 16);
                  if (!v119)
                  {
                    v116 = v12;
                    goto LABEL_119;
                  }
                  v119 -= 24;
                }
                while (v117 > *(_QWORD *)(v120 - 8));
                v116 = v12 + v119 + 24;
LABEL_119:
                *(__n128 *)v116 = v186;
                *(_QWORD *)(v116 + 16) = v117;
              }
              v111 = (__n128 *)((char *)v115 + 24);
              v114 += 24;
            }
            while (&v115[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v113)
        {
          do
          {
            v155 = *(_QWORD *)(a1 + 40);
            v156 = *(_QWORD *)(a1 + 16);
            a1 = (uint64_t)v111;
            if (v155 > v156)
            {
              v190 = *v111;
              v157 = v111;
              do
              {
                *v157 = *(__n128 *)((char *)v157 - 24);
                v157[1].n128_u64[0] = v157[-1].n128_u64[1];
                v158 = v157[-2].n128_i64[0];
                v157 = (__n128 *)((char *)v157 - 24);
              }
              while (v155 > v158);
              *v157 = v190;
              v157[1].n128_u64[0] = v155;
            }
            v111 = (__n128 *)(a1 + 24);
          }
          while ((__n128 *)(a1 + 24) != a2);
        }
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 16);
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v48 = (uint64_t *)(a2 - 16);
        v49 = *(_QWORD *)(a2 - 16);
        if (v49 < *(_QWORD *)i || v49 == *(_QWORD *)i && *(_DWORD *)(a2 - 8) < *(_DWORD *)(i + 8))
        {
          v116 = *(_OWORD *)i;
          v50 = *v48;
          *(_DWORD *)(i + 8) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)i = v50;
          *(_DWORD *)(a2 - 8) = DWORD2(v116);
          *v48 = v116;
        }
        return;
      case 3uLL:
        sub_20F04E914((__int128 *)i, (unint64_t *)(i + 16), (unint64_t *)(a2 - 16));
        return;
      case 4uLL:
        v51 = (__int128 *)(i + 16);
        v52 = (__int128 *)(i + 32);
        sub_20F04E914((__int128 *)i, (unint64_t *)(i + 16), (unint64_t *)(i + 32));
        v53 = (uint64_t *)(a2 - 16);
        v54 = *(_QWORD *)(a2 - 16);
        v55 = *(_QWORD *)(i + 32);
        if (v54 < v55 || v54 == v55 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(i + 40))
        {
          v117 = *v52;
          v56 = *v53;
          *(_DWORD *)(i + 40) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v52 = v56;
          *(_DWORD *)(a2 - 8) = DWORD2(v117);
          *v53 = v117;
          if (*(_QWORD *)v52 < *(_QWORD *)v51
            || *(_QWORD *)v52 == *(_QWORD *)v51 && *(_DWORD *)(i + 40) < *(_DWORD *)(i + 24))
          {
            v118 = *v51;
            *(_QWORD *)v51 = *(_QWORD *)v52;
            *(_DWORD *)(i + 24) = *(_DWORD *)(i + 40);
            *(_QWORD *)v52 = v118;
            *(_DWORD *)(i + 40) = DWORD2(v118);
            v57 = *(_QWORD *)(i + 16);
            if (v57 < *(_QWORD *)i || v57 == *(_QWORD *)i && *(_DWORD *)(i + 24) < *(_DWORD *)(i + 8))
            {
              v119 = *(_OWORD *)i;
              *(_QWORD *)i = *(_QWORD *)v51;
              *(_DWORD *)(i + 8) = *(_DWORD *)(i + 24);
              *(_QWORD *)v51 = v119;
              *(_DWORD *)(i + 24) = DWORD2(v119);
            }
          }
        }
        return;
      case 5uLL:
        sub_20F04EDF8(i, (unint64_t *)(i + 16), (unint64_t *)(i + 32), (__int128 *)(i + 48), a2 - 16);
        return;
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return;
            v70 = (v11 - 2) >> 1;
            v71 = v70;
            while (1)
            {
              v73 = v71;
              if (v70 >= v71)
              {
                v74 = (2 * v71) | 1;
                v75 = i + 16 * v74;
                if (2 * v73 + 2 < (uint64_t)v11)
                {
                  v76 = *(_QWORD *)(v75 + 16);
                  if (*(_QWORD *)v75 < v76
                    || *(_QWORD *)v75 == v76 && *(_DWORD *)(i + 16 * v74 + 8) < *(_DWORD *)(v75 + 24))
                  {
                    v75 += 16;
                    v74 = 2 * v73 + 2;
                  }
                }
                v77 = i + 16 * v73;
                v78 = *(_QWORD *)v77;
                if (*(_QWORD *)v75 >= *(_QWORD *)v77)
                {
                  if (*(_QWORD *)v75 != *(_QWORD *)v77)
                  {
                    v79 = *(_DWORD *)(v77 + 8);
                    v81 = *(_QWORD *)v75;
                    *(_DWORD *)(v77 + 8) = *(_DWORD *)(v75 + 8);
                    *(_QWORD *)v77 = v81;
                    if (v70 >= v74)
                      goto LABEL_141;
LABEL_124:
                    v72 = v75;
LABEL_125:
                    *(_QWORD *)v72 = v78;
                    *(_DWORD *)(v72 + 8) = v79;
                    goto LABEL_126;
                  }
                  v79 = *(_DWORD *)(i + 16 * v73 + 8);
                  if (*(_DWORD *)(v75 + 8) >= v79)
                  {
                    v80 = *(_QWORD *)v75;
                    *(_DWORD *)(v77 + 8) = *(_DWORD *)(v75 + 8);
                    *(_QWORD *)v77 = v80;
                    if (v70 >= v74)
                    {
                      while (1)
                      {
LABEL_141:
                        v83 = 2 * v74;
                        v74 = (2 * v74) | 1;
                        v72 = i + 16 * v74;
                        v84 = v83 + 2;
                        if (v84 < (uint64_t)v11)
                        {
                          v85 = *(_QWORD *)(v72 + 16);
                          if (*(_QWORD *)v72 < v85
                            || *(_QWORD *)v72 == v85 && *(_DWORD *)(i + 16 * v74 + 8) < *(_DWORD *)(v72 + 24))
                          {
                            v72 += 16;
                            v74 = v84;
                          }
                        }
                        if (*(_QWORD *)v72 < v78 || *(_QWORD *)v72 == v78 && *(_DWORD *)(v72 + 8) < v79)
                          break;
                        v82 = *(_QWORD *)v72;
                        *(_DWORD *)(v75 + 8) = *(_DWORD *)(v72 + 8);
                        *(_QWORD *)v75 = v82;
                        v75 = v72;
                        if (v70 < v74)
                          goto LABEL_125;
                      }
                    }
                    goto LABEL_124;
                  }
                }
              }
LABEL_126:
              v71 = v73 - 1;
              if (!v73)
              {
                v86 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v88 = 0;
                  v120 = *(_OWORD *)i;
                  v89 = i;
                  do
                  {
                    v91 = v89;
                    v92 = v88 + 1;
                    v89 += 16 * (v88 + 1);
                    v93 = 2 * v88;
                    v88 = (2 * v88) | 1;
                    v94 = v93 + 2;
                    if (v94 < v86)
                    {
                      v95 = *(_QWORD *)(v89 + 16);
                      if (*(_QWORD *)v89 < v95
                        || *(_QWORD *)v89 == v95 && *(_DWORD *)(v91 + 16 * v92 + 8) < *(_DWORD *)(v89 + 24))
                      {
                        v89 += 16;
                        v88 = v94;
                      }
                    }
                    v90 = *(_QWORD *)v89;
                    *(_DWORD *)(v91 + 8) = *(_DWORD *)(v89 + 8);
                    *(_QWORD *)v91 = v90;
                  }
                  while (v88 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                  a2 -= 16;
                  if (v89 == a2)
                  {
                    *(_DWORD *)(v89 + 8) = DWORD2(v120);
                    *(_QWORD *)v89 = v120;
                  }
                  else
                  {
                    v96 = *(_QWORD *)a2;
                    *(_DWORD *)(v89 + 8) = *(_DWORD *)(a2 + 8);
                    *(_QWORD *)v89 = v96;
                    *(_DWORD *)(a2 + 8) = DWORD2(v120);
                    *(_QWORD *)a2 = v120;
                    v97 = v89 - i + 16;
                    if (v97 >= 17)
                    {
                      v98 = ((unint64_t)v97 >> 4) - 2;
                      v99 = v98 >> 1;
                      v100 = i + 16 * (v98 >> 1);
                      v101 = *(_QWORD *)v89;
                      if (*(_QWORD *)v100 < *(_QWORD *)v89)
                      {
                        v102 = *(_DWORD *)(v89 + 8);
LABEL_165:
                        v103 = *(_QWORD *)v100;
                        *(_DWORD *)(v89 + 8) = *(_DWORD *)(v100 + 8);
                        *(_QWORD *)v89 = v103;
                        if (v98 >= 2)
                        {
                          while (1)
                          {
                            v106 = v99 - 1;
                            v99 = (v99 - 1) >> 1;
                            v104 = i + 16 * v99;
                            if (*(_QWORD *)v104 >= v101
                              && (*(_QWORD *)v104 != v101 || *(_DWORD *)(i + 16 * v99 + 8) >= v102))
                            {
                              break;
                            }
                            v105 = *(_QWORD *)v104;
                            *(_DWORD *)(v100 + 8) = *(_DWORD *)(v104 + 8);
                            *(_QWORD *)v100 = v105;
                            v100 = i + 16 * v99;
                            if (v106 <= 1)
                              goto LABEL_167;
                          }
                        }
                        v104 = v100;
LABEL_167:
                        *(_QWORD *)v104 = v101;
                        *(_DWORD *)(v104 + 8) = v102;
                        goto LABEL_152;
                      }
                      if (*(_QWORD *)v100 == *(_QWORD *)v89)
                      {
                        v102 = *(_DWORD *)(v89 + 8);
                        if (*(_DWORD *)(i + 16 * v99 + 8) < v102)
                          goto LABEL_165;
                      }
                    }
                  }
LABEL_152:
                  if (v86-- <= 2)
                    return;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = i + 16 * (v11 >> 1);
          if ((unint64_t)v10 < 0x801)
          {
            sub_20F04E914((__int128 *)(a1 + 16 * (v11 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 16));
            --a3;
            v17 = *(_QWORD *)a1;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_20F04E914((__int128 *)a1, (unint64_t *)(a1 + 16 * (v11 >> 1)), (unint64_t *)(a2 - 16));
            v14 = 16 * v12;
            v15 = (unint64_t *)(16 * v12 + a1 - 16);
            sub_20F04E914((__int128 *)(a1 + 16), v15, (unint64_t *)(a2 - 32));
            sub_20F04E914((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + v14), (unint64_t *)(a2 - 48));
            sub_20F04E914((__int128 *)v15, (unint64_t *)v13, (unint64_t *)(a1 + 16 + v14));
            v113 = *(_OWORD *)a1;
            v16 = *(_QWORD *)v13;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 + 8);
            *(_QWORD *)a1 = v16;
            *(_DWORD *)(v13 + 8) = DWORD2(v113);
            *(_QWORD *)v13 = v113;
            --a3;
            v17 = *(_QWORD *)a1;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(_QWORD *)(a1 - 16);
          if (v18 >= v17)
          {
            if (v18 == v17)
            {
              v36 = *(_DWORD *)(a1 + 8);
              if (*(_DWORD *)(a1 - 8) < v36)
                goto LABEL_13;
            }
            else
            {
              v36 = *(_DWORD *)(a1 + 8);
            }
            v37 = *v8;
            if (v17 < *v8 || v17 == *v8 && v36 < *(_DWORD *)(a2 - 8))
            {
              i = a1;
              do
              {
                v39 = *(_QWORD *)(i + 16);
                i += 16;
                v38 = v39;
              }
              while (v17 >= v39 && (v17 != v38 || v36 >= *(_DWORD *)(i + 8)));
            }
            else
            {
              for (i = a1 + 16;
                    i < a2 && v17 >= *(_QWORD *)i && (v17 != *(_QWORD *)i || v36 >= *(_DWORD *)(i + 8));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 16; v17 < v37 || v17 == v37 && v36 < *(_DWORD *)(j + 8); j -= 16)
              {
                v41 = *(_QWORD *)(j - 16);
                v37 = v41;
              }
            }
            while (i < j)
            {
              v115 = *(_OWORD *)i;
              v42 = *(_QWORD *)j;
              *(_DWORD *)(i + 8) = *(_DWORD *)(j + 8);
              *(_QWORD *)i = v42;
              *(_DWORD *)(j + 8) = DWORD2(v115);
              *(_QWORD *)j = v115;
              do
              {
                v44 = *(_QWORD *)(i + 16);
                i += 16;
                v43 = v44;
              }
              while (v17 >= v44 && (v17 != v43 || v36 >= *(_DWORD *)(i + 8)));
              do
              {
                do
                {
                  v45 = *(_QWORD *)(j - 16);
                  j -= 16;
                  v46 = v17 == v45;
                }
                while (v17 < v45);
              }
              while (v46 && v36 < *(_DWORD *)(j + 8));
            }
            if (i - 16 != a1)
            {
              v47 = *(_QWORD *)(i - 16);
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
              *(_QWORD *)a1 = v47;
            }
            a4 = 0;
            *(_QWORD *)(i - 16) = v17;
            *(_DWORD *)(i - 8) = v36;
            continue;
          }
LABEL_13:
          v19 = 0;
          v20 = *(_DWORD *)(a1 + 8);
          while (1)
          {
            v21 = *(_QWORD *)(a1 + v19 + 16);
            if (v21 >= v17 && (v21 != v17 || *(_DWORD *)(a1 + v19 + 24) >= v20))
              break;
            v19 += 16;
          }
          v22 = a1 + v19 + 16;
          if (v19)
          {
            v23 = *v8;
            for (k = a2 - 16; v23 >= v17 && (v23 != v17 || *(_DWORD *)(k + 8) >= v20); k -= 16)
            {
              v25 = *(_QWORD *)(k - 16);
              v23 = v25;
            }
          }
          else
          {
            k = a2;
            if (v22 < a2)
            {
              v26 = *v8;
              k = a2 - 16;
              if (*v8 >= v17)
              {
                k = a2 - 16;
                do
                {
                  if (v26 == v17)
                  {
                    if (v22 >= k || *(_DWORD *)(k + 8) < v20)
                      break;
                  }
                  else if (v22 >= k)
                  {
                    break;
                  }
                  v35 = *(_QWORD *)(k - 16);
                  k -= 16;
                  v26 = v35;
                }
                while (v35 >= v17);
              }
            }
          }
          i = v22;
          if (v22 < k)
          {
            v27 = k;
            do
            {
              v114 = *(_OWORD *)i;
              v28 = *(_QWORD *)v27;
              *(_DWORD *)(i + 8) = *(_DWORD *)(v27 + 8);
              *(_QWORD *)i = v28;
              *(_DWORD *)(v27 + 8) = DWORD2(v114);
              *(_QWORD *)v27 = v114;
              do
              {
                do
                {
                  v29 = *(_QWORD *)(i + 16);
                  i += 16;
                  v30 = v29 == v17;
                }
                while (v29 < v17);
              }
              while (v30 && *(_DWORD *)(i + 8) < v20);
              do
              {
                v32 = *(_QWORD *)(v27 - 16);
                v27 -= 16;
                v31 = v32;
              }
              while (v32 >= v17 && (v31 != v17 || *(_DWORD *)(v27 + 8) >= v20));
            }
            while (i < v27);
          }
          if (i - 16 != a1)
          {
            v33 = *(_QWORD *)(i - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
            *(_QWORD *)a1 = v33;
          }
          *(_QWORD *)(i - 16) = v17;
          *(_DWORD *)(i - 8) = v20;
          if (v22 < k)
          {
LABEL_44:
            sub_20F04DE40(a1, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v34 = sub_20F04EA94(a1, i - 16);
          if (!sub_20F04EA94(i, a2))
          {
            if (v34)
              continue;
            goto LABEL_44;
          }
          a2 = i - 16;
          if (v34)
            return;
          goto LABEL_1;
        }
        v58 = i + 16;
        v60 = i == a2 || v58 == a2;
        if ((a4 & 1) != 0)
        {
          if (v60)
            return;
          v61 = 0;
          v62 = i;
LABEL_110:
          v64 = v62;
          v62 = v58;
          v65 = *(_QWORD *)(v64 + 16);
          if (v65 >= *(_QWORD *)v64)
          {
            if (v65 != *(_QWORD *)v64)
              goto LABEL_109;
            v66 = *(_DWORD *)(v64 + 24);
            if (v66 >= *(_DWORD *)(v64 + 8))
              goto LABEL_109;
          }
          else
          {
            v66 = *(_DWORD *)(v64 + 24);
          }
          *(_QWORD *)v62 = *(_QWORD *)v64;
          *(_DWORD *)(v62 + 8) = *(_DWORD *)(v64 + 8);
          v63 = i;
          if (v64 == i)
            goto LABEL_108;
          v67 = v61;
          while (1)
          {
            v68 = i + v67;
            v69 = *(_QWORD *)(i + v67 - 16);
            if (v65 >= v69)
            {
              if (v65 != v69)
              {
                v63 = v64;
LABEL_108:
                *(_QWORD *)v63 = v65;
                *(_DWORD *)(v63 + 8) = v66;
LABEL_109:
                v58 = v62 + 16;
                v61 += 16;
                if (v62 + 16 == a2)
                  return;
                goto LABEL_110;
              }
              v63 = i + v67;
              if (v66 >= *(_DWORD *)(i + v67 - 8))
                goto LABEL_108;
            }
            v64 -= 16;
            *(_QWORD *)v68 = *(_QWORD *)(i + v67 - 16);
            *(_DWORD *)(v68 + 8) = *(_DWORD *)(i + v67 - 8);
            v67 -= 16;
            if (!v67)
            {
              v63 = i;
              goto LABEL_108;
            }
          }
        }
        if (!v60)
        {
          while (1)
          {
            v107 = a1;
            a1 = v58;
            v108 = *(_QWORD *)(v107 + 16);
            if (v108 < *(_QWORD *)v107)
              break;
            if (v108 == *(_QWORD *)v107)
            {
              v109 = *(_DWORD *)(v107 + 24);
              if (v109 < *(_DWORD *)(v107 + 8))
                goto LABEL_190;
            }
LABEL_185:
            v58 = a1 + 16;
            if (a1 + 16 == a2)
              return;
          }
          v109 = *(_DWORD *)(v107 + 24);
          do
          {
            do
            {
LABEL_190:
              v110 = v107;
              *(_QWORD *)(v107 + 16) = *(_QWORD *)v107;
              *(_DWORD *)(v107 + 24) = *(_DWORD *)(v107 + 8);
              v111 = *(_QWORD *)(v107 - 16);
              v107 -= 16;
              v112 = v108 == v111;
            }
            while (v108 < v111);
          }
          while (v112 && v109 < *(_DWORD *)(v110 - 8));
          *(_QWORD *)v110 = v108;
          *(_DWORD *)(v110 + 8) = v109;
          goto LABEL_185;
        }
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v65 = (__int128 *)(a2 - 24);
        v66 = *(_QWORD *)(a2 - 24);
        if (v66 < *(_QWORD *)v9
          || (v66 == *(_QWORD *)v9 ? (v67 = *(_DWORD *)(a2 - 16) >= *(_DWORD *)(v9 + 8)) : (v67 = 1), !v67))
        {
          v160 = *(_QWORD *)(v9 + 16);
          v151 = *(_OWORD *)v9;
          v68 = *v65;
          *(_WORD *)(v9 + 16) = *(_WORD *)(a2 - 8);
          *(_OWORD *)v9 = v68;
          *(_WORD *)(a2 - 8) = v160;
          *v65 = v151;
        }
        return;
      case 3:
        sub_20F23BD6C((__int128 *)v9, (uint64_t *)(v9 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        v69 = (__int128 *)(v9 + 24);
        v70 = (__int128 *)(v9 + 48);
        sub_20F23BD6C((__int128 *)v9, (uint64_t *)(v9 + 24), (__int128 *)(v9 + 48));
        v71 = (__int128 *)(a2 - 24);
        v72 = *(_QWORD *)(a2 - 24);
        v73 = *(_QWORD *)(v9 + 48);
        if (v72 < v73 || v72 == v73 && *(_DWORD *)(a2 - 16) < *(_DWORD *)(v9 + 56))
        {
          v74 = *v70;
          v75 = *(_QWORD *)(v9 + 64);
          v76 = *(_WORD *)(a2 - 8);
          *v70 = *v71;
          *(_WORD *)(v9 + 64) = v76;
          *(_WORD *)(a2 - 8) = v75;
          *v71 = v74;
          v77 = *(_QWORD *)(v9 + 48);
          v78 = *(_QWORD *)(v9 + 24);
          if (v77 < v78 || v77 == v78 && *(_DWORD *)(v9 + 56) < *(_DWORD *)(v9 + 32))
          {
            v79 = *(_QWORD *)(v9 + 40);
            v80 = *v69;
            *v69 = *v70;
            *(_WORD *)(v9 + 40) = *(_WORD *)(v9 + 64);
            *v70 = v80;
            *(_WORD *)(v9 + 64) = v79;
            v81 = *(_QWORD *)(v9 + 24);
            if (v81 < *(_QWORD *)v9 || v81 == *(_QWORD *)v9 && *(_DWORD *)(v9 + 32) < *(_DWORD *)(v9 + 8))
            {
              v161 = *(_QWORD *)(v9 + 16);
              v152 = *(_OWORD *)v9;
              *(_OWORD *)v9 = *v69;
              *(_WORD *)(v9 + 16) = *(_WORD *)(v9 + 40);
              *v69 = v152;
              *(_WORD *)(v9 + 40) = v161;
            }
          }
        }
        return;
      case 5:
        sub_20F23BB30(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24);
        return;
      default:
        if (v10 <= 575)
        {
          v82 = v9 + 24;
          v84 = v9 == a2 || v82 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v84)
            {
              v85 = 0;
              v86 = v9;
              do
              {
                v88 = v82;
                v89 = *(_QWORD *)(v86 + 24);
                v90 = *(_DWORD *)(v86 + 32);
                if (v89 < *(_QWORD *)v86
                  || (v89 == *(_QWORD *)v86 ? (v91 = v90 >= *(_DWORD *)(v86 + 8)) : (v91 = 1), !v91))
                {
                  v153 = *(_QWORD *)(v86 + 36);
                  *(_OWORD *)v88 = *(_OWORD *)v86;
                  *(_WORD *)(v88 + 16) = *(_WORD *)(v86 + 16);
                  v87 = v9;
                  if (v86 != v9)
                  {
                    v92 = v85;
                    while (1)
                    {
                      v93 = v9 + v92;
                      v94 = *(_QWORD *)(v9 + v92 - 24);
                      if (v89 >= v94 && (v89 != v94 || v90 >= *(_DWORD *)(v93 - 16)))
                        break;
                      *(_OWORD *)v93 = *(_OWORD *)(v9 + v92 - 24);
                      *(_WORD *)(v93 + 16) = *(_WORD *)(v9 + v92 - 8);
                      v92 -= 24;
                      if (!v92)
                      {
                        v87 = v9;
                        goto LABEL_129;
                      }
                    }
                    v87 = v9 + v92;
                  }
LABEL_129:
                  *(_QWORD *)v87 = v89;
                  *(_DWORD *)(v87 + 8) = v90;
                  *(_DWORD *)(v87 + 12) = v153;
                  *(_WORD *)(v87 + 16) = WORD2(v153);
                }
                v82 = v88 + 24;
                v85 += 24;
                v86 = v88;
              }
              while (v88 + 24 != a2);
            }
          }
          else if (!v84)
          {
            do
            {
              v137 = v82;
              v138 = *(_QWORD *)(a1 + 24);
              v139 = *(_DWORD *)(a1 + 32);
              if (v138 < *(_QWORD *)a1
                || (v138 == *(_QWORD *)a1 ? (v140 = v139 >= *(_DWORD *)(a1 + 8)) : (v140 = 1), !v140))
              {
                v156 = *(_QWORD *)(a1 + 36);
                do
                {
                  do
                  {
                    v141 = a1;
                    *(_OWORD *)(a1 + 24) = *(_OWORD *)a1;
                    *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 16);
                    v142 = *(_QWORD *)(a1 - 24);
                    a1 -= 24;
                    v143 = v138 == v142;
                  }
                  while (v138 < v142);
                }
                while (v143 && v139 < *(_DWORD *)(v141 - 16));
                *(_QWORD *)v141 = v138;
                *(_DWORD *)(v141 + 8) = v139;
                *(_DWORD *)(v141 + 12) = v156;
                *(_WORD *)(v141 + 16) = WORD2(v156);
              }
              v82 = v137 + 24;
              a1 = v137;
            }
            while (v137 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v96 = (unint64_t)(v11 - 2) >> 1;
            v97 = v96;
            do
            {
              v98 = v97;
              if (v96 >= v97)
              {
                v99 = (2 * v97) | 1;
                v100 = v9 + 24 * v99;
                if (2 * v98 + 2 < v11)
                {
                  v101 = *(_QWORD *)(v100 + 24);
                  if (*(_QWORD *)v100 < v101
                    || (*(_QWORD *)v100 == v101 ? (v102 = *(_DWORD *)(v100 + 8) >= *(_DWORD *)(v100 + 32)) : (v102 = 1),
                        !v102))
                  {
                    v100 += 24;
                    v99 = 2 * v98 + 2;
                  }
                }
                v103 = v9 + 24 * v98;
                v104 = *(_QWORD *)v103;
                if (*(_QWORD *)v100 >= *(_QWORD *)v103)
                {
                  v105 = *(_DWORD *)(v103 + 8);
                  if (*(_QWORD *)v100 != *(_QWORD *)v103 || *(_DWORD *)(v100 + 8) >= v105)
                  {
                    v154 = *(_QWORD *)(v103 + 12);
                    do
                    {
                      v107 = v103;
                      v103 = v100;
                      v108 = *(_OWORD *)v100;
                      *(_WORD *)(v107 + 16) = *(_WORD *)(v100 + 16);
                      *(_OWORD *)v107 = v108;
                      if (v96 < v99)
                        break;
                      v109 = 2 * v99;
                      v99 = (2 * v99) | 1;
                      v100 = v9 + 24 * v99;
                      v110 = v109 + 2;
                      if (v110 < v11)
                      {
                        v111 = *(_QWORD *)(v100 + 24);
                        if (*(_QWORD *)v100 < v111
                          || (*(_QWORD *)v100 == v111
                            ? (v112 = *(_DWORD *)(v100 + 8) >= *(_DWORD *)(v100 + 32))
                            : (v112 = 1),
                              !v112))
                        {
                          v100 += 24;
                          v99 = v110;
                        }
                      }
                      if (*(_QWORD *)v100 < v104)
                        break;
                    }
                    while (*(_QWORD *)v100 != v104 || *(_DWORD *)(v100 + 8) >= v105);
                    *(_QWORD *)v103 = v104;
                    *(_DWORD *)(v103 + 8) = v105;
                    *(_DWORD *)(v103 + 12) = v154;
                    *(_WORD *)(v103 + 16) = WORD2(v154);
                  }
                }
              }
              v97 = v98 - 1;
            }
            while (v98);
            v114 = v10 / 0x18uLL;
            do
            {
              v116 = 0;
              v162 = *(_QWORD *)(v9 + 16);
              v155 = *(_OWORD *)v9;
              v117 = v9;
              do
              {
                v119 = v117;
                v117 += 24 * v116 + 24;
                v120 = 2 * v116;
                v116 = (2 * v116) | 1;
                v121 = v120 + 2;
                if (v121 < v114)
                {
                  v122 = *(_QWORD *)(v117 + 24);
                  if (*(_QWORD *)v117 < v122
                    || (*(_QWORD *)v117 == v122 ? (v123 = *(_DWORD *)(v117 + 8) >= *(_DWORD *)(v117 + 32)) : (v123 = 1),
                        !v123))
                  {
                    v117 += 24;
                    v116 = v121;
                  }
                }
                v118 = *(_OWORD *)v117;
                *(_WORD *)(v119 + 16) = *(_WORD *)(v117 + 16);
                *(_OWORD *)v119 = v118;
              }
              while (v116 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
              a2 -= 24;
              if (v117 == a2)
              {
                *(_WORD *)(v117 + 16) = v162;
                *(_OWORD *)v117 = v155;
              }
              else
              {
                v124 = *(_OWORD *)a2;
                *(_WORD *)(v117 + 16) = *(_WORD *)(a2 + 16);
                *(_OWORD *)v117 = v124;
                *(_WORD *)(a2 + 16) = v162;
                *(_OWORD *)a2 = v155;
                v125 = v117 - v9 + 24;
                if (v125 >= 25)
                {
                  v126 = v125 / 0x18uLL - 2;
                  v127 = v126 >> 1;
                  v128 = v9 + 24 * (v126 >> 1);
                  v129 = *(_QWORD *)v117;
                  v130 = *(_DWORD *)(v117 + 8);
                  if (*(_QWORD *)v128 < *(_QWORD *)v117
                    || (*(_QWORD *)v128 == *(_QWORD *)v117 ? (v131 = *(_DWORD *)(v128 + 8) >= v130) : (v131 = 1), !v131))
                  {
                    v147 = *(_QWORD *)(v117 + 12);
                    v132 = *(_WORD *)(v128 + 16);
                    *(_OWORD *)v117 = *(_OWORD *)v128;
                    *(_WORD *)(v117 + 16) = v132;
                    if (v126 >= 2)
                    {
                      while (1)
                      {
                        v134 = v127 - 1;
                        v127 = (v127 - 1) >> 1;
                        v135 = v9 + 24 * v127;
                        if (*(_QWORD *)v135 >= v129 && (*(_QWORD *)v135 != v129 || *(_DWORD *)(v135 + 8) >= v130))
                          break;
                        v133 = *(_OWORD *)v135;
                        *(_WORD *)(v128 + 16) = *(_WORD *)(v135 + 16);
                        *(_OWORD *)v128 = v133;
                        v128 = v9 + 24 * v127;
                        if (v134 <= 1)
                          goto LABEL_210;
                      }
                    }
                    v135 = v128;
LABEL_210:
                    *(_QWORD *)v135 = v129;
                    *(_DWORD *)(v135 + 8) = v130;
                    *(_DWORD *)(v135 + 12) = v147;
                    *(_WORD *)(v135 + 16) = WORD2(v147);
                  }
                }
              }
            }
            while (v114-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_20F23BD6C((__int128 *)(a1 + 24 * v12), (uint64_t *)a1, (__int128 *)(a2 - 24));
          --a3;
          v18 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          sub_20F23BD6C((__int128 *)a1, (uint64_t *)(a1 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 24 * v12;
          v15 = (uint64_t *)(24 * v12 + a1 - 24);
          sub_20F23BD6C((__int128 *)(a1 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (uint64_t *)(a1 + 24 + v14);
          sub_20F23BD6C((__int128 *)(a1 + 48), v16, (__int128 *)(a2 - 72));
          sub_20F23BD6C((__int128 *)v15, (uint64_t *)v13, (__int128 *)v16);
          v157 = *(_QWORD *)(a1 + 16);
          v148 = *(_OWORD *)a1;
          v17 = *(_WORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_WORD *)(a1 + 16) = v17;
          *(_WORD *)(v13 + 16) = v157;
          *(_OWORD *)v13 = v148;
          --a3;
          v18 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_12;
        }
        v19 = *(_QWORD *)(a1 - 24);
        if (v19 >= v18)
        {
          v20 = *(_DWORD *)(a1 + 8);
          if (v19 != v18 || *(_DWORD *)(a1 - 16) >= v20)
          {
            v146 = *(_QWORD *)(a1 + 12);
            v45 = *v8;
            if (v18 < *v8 || v18 == *v8 && v20 < *(_DWORD *)(a2 - 16))
            {
              v46 = a1 + 24;
              do
              {
                v9 = v46;
                v47 = *(_QWORD *)v46;
                if (v18 < *(_QWORD *)v46)
                  break;
                v48 = *(_DWORD *)(v46 + 8);
                v46 += 24;
              }
              while (v18 != v47 || v20 >= v48);
            }
            else
            {
              v61 = a1 + 24;
              do
              {
                v9 = v61;
                if (v61 >= a2)
                  break;
                v62 = *(_QWORD *)v61;
                if (v18 < *(_QWORD *)v61)
                  break;
                v63 = *(_DWORD *)(v61 + 8);
                v61 += 24;
              }
              while (v18 != v62 || v20 >= v63);
            }
            i = a2;
            if (v9 < a2)
            {
              for (i = a2 - 24; v18 < v45 || v18 == v45 && v20 < *(_DWORD *)(i + 8); i -= 24)
              {
                v51 = *(_QWORD *)(i - 24);
                v45 = v51;
              }
            }
            while (v9 < i)
            {
              v159 = *(_QWORD *)(v9 + 16);
              v150 = *(_OWORD *)v9;
              v52 = *(_OWORD *)i;
              *(_WORD *)(v9 + 16) = *(_WORD *)(i + 16);
              *(_OWORD *)v9 = v52;
              *(_WORD *)(i + 16) = v159;
              *(_OWORD *)i = v150;
              v53 = v9 + 24;
              do
              {
                v9 = v53;
                v54 = *(_QWORD *)v53;
                if (v18 < *(_QWORD *)v53)
                  break;
                v55 = *(_DWORD *)(v53 + 8);
                v53 += 24;
              }
              while (v18 != v54 || v20 >= v55);
              do
              {
                do
                {
                  v57 = *(_QWORD *)(i - 24);
                  i -= 24;
                  v58 = v18 == v57;
                }
                while (v18 < v57);
              }
              while (v58 && v20 < *(_DWORD *)(i + 8));
            }
            if (v9 - 24 != a1)
            {
              v60 = *(_OWORD *)(v9 - 24);
              *(_WORD *)(a1 + 16) = *(_WORD *)(v9 - 8);
              *(_OWORD *)a1 = v60;
            }
            a4 = 0;
            *(_QWORD *)(v9 - 24) = v18;
            *(_DWORD *)(v9 - 16) = v20;
            *(_WORD *)(v9 - 8) = WORD2(v146);
            *(_DWORD *)(v9 - 12) = v146;
            continue;
          }
        }
LABEL_12:
        v21 = 0;
        v22 = *(_DWORD *)(a1 + 8);
        v145 = *(_QWORD *)(a1 + 12);
        while (1)
        {
          v23 = *(_QWORD *)(a1 + v21 + 24);
          if (v23 >= v18 && (v23 != v18 || *(_DWORD *)(a1 + v21 + 32) >= v22))
            break;
          v21 += 24;
        }
        v25 = a1 + v21 + 24;
        v26 = a2 - 24;
        if (v21)
        {
          do
          {
            v27 = v26;
            v28 = *(_QWORD *)v26;
            if (*(_QWORD *)v26 < v18)
              break;
            v29 = *(_DWORD *)(v26 + 8);
            v26 -= 24;
          }
          while (v28 != v18 || v29 >= v22);
LABEL_34:
          v9 = v25;
          if (v25 < v27)
          {
            v34 = v27;
            do
            {
              v158 = *(_QWORD *)(v9 + 16);
              v149 = *(_OWORD *)v9;
              v35 = *(_OWORD *)v34;
              *(_WORD *)(v9 + 16) = *(_WORD *)(v34 + 16);
              *(_OWORD *)v9 = v35;
              *(_WORD *)(v34 + 16) = v158;
              *(_OWORD *)v34 = v149;
              do
              {
                do
                {
                  v36 = *(_QWORD *)(v9 + 24);
                  v9 += 24;
                  v37 = v36 == v18;
                }
                while (v36 < v18);
              }
              while (v37 && *(_DWORD *)(v9 + 8) < v22);
              v39 = v34 - 24;
              do
              {
                v34 = v39;
                v40 = *(_QWORD *)v39;
                if (*(_QWORD *)v39 < v18)
                  break;
                v41 = *(_DWORD *)(v39 + 8);
                v39 -= 24;
              }
              while (v40 != v18 || v41 >= v22);
            }
            while (v9 < v34);
          }
        }
        else
        {
          v31 = a2 - 24;
          while (1)
          {
            v27 = v31;
            v32 = v31 + 24;
            if (v25 >= v32)
              break;
            if (*(_QWORD *)v27 >= v18)
            {
              v31 = v27 - 24;
              if (*(_QWORD *)v27 != v18 || *(_DWORD *)(v27 + 8) >= v22)
                continue;
            }
            goto LABEL_34;
          }
          v27 = v32;
          v9 = v25;
        }
        if (v9 - 24 != a1)
        {
          v43 = *(_OWORD *)(v9 - 24);
          *(_WORD *)(a1 + 16) = *(_WORD *)(v9 - 8);
          *(_OWORD *)a1 = v43;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_DWORD *)(v9 - 16) = v22;
        *(_WORD *)(v9 - 8) = WORD2(v145);
        *(_DWORD *)(v9 - 12) = v145;
        if (v25 < v27)
        {
LABEL_57:
          sub_20F23AFA0(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = sub_20F23BEBC(a1, v9 - 24);
        if (!sub_20F23BEBC(v9, a2))
        {
          if (v44)
            continue;
          goto LABEL_57;
        }
        a2 = v9 - 24;
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v65 = (__int128 *)(a2 - 24);
        v66 = *(_QWORD *)(a2 - 24);
        if (v66 < *(_QWORD *)v9
          || (v66 == *(_QWORD *)v9 ? (v67 = *(_DWORD *)(a2 - 16) >= *(_DWORD *)(v9 + 8)) : (v67 = 1), !v67))
        {
          v160 = *(_QWORD *)(v9 + 16);
          v151 = *(_OWORD *)v9;
          v68 = *v65;
          *(_BYTE *)(v9 + 16) = *(_BYTE *)(a2 - 8);
          *(_OWORD *)v9 = v68;
          *(_BYTE *)(a2 - 8) = v160;
          *v65 = v151;
        }
        return;
      case 3:
        sub_20F23CFE4((__int128 *)v9, (uint64_t *)(v9 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        v69 = (__int128 *)(v9 + 24);
        v70 = (__int128 *)(v9 + 48);
        sub_20F23CFE4((__int128 *)v9, (uint64_t *)(v9 + 24), (__int128 *)(v9 + 48));
        v71 = (__int128 *)(a2 - 24);
        v72 = *(_QWORD *)(a2 - 24);
        v73 = *(_QWORD *)(v9 + 48);
        if (v72 < v73 || v72 == v73 && *(_DWORD *)(a2 - 16) < *(_DWORD *)(v9 + 56))
        {
          v74 = *v70;
          v75 = *(_QWORD *)(v9 + 64);
          v76 = *(_BYTE *)(a2 - 8);
          *v70 = *v71;
          *(_BYTE *)(v9 + 64) = v76;
          *(_BYTE *)(a2 - 8) = v75;
          *v71 = v74;
          v77 = *(_QWORD *)(v9 + 48);
          v78 = *(_QWORD *)(v9 + 24);
          if (v77 < v78 || v77 == v78 && *(_DWORD *)(v9 + 56) < *(_DWORD *)(v9 + 32))
          {
            v79 = *(_QWORD *)(v9 + 40);
            v80 = *v69;
            *v69 = *v70;
            *(_BYTE *)(v9 + 40) = *(_BYTE *)(v9 + 64);
            *v70 = v80;
            *(_BYTE *)(v9 + 64) = v79;
            v81 = *(_QWORD *)(v9 + 24);
            if (v81 < *(_QWORD *)v9 || v81 == *(_QWORD *)v9 && *(_DWORD *)(v9 + 32) < *(_DWORD *)(v9 + 8))
            {
              v161 = *(_QWORD *)(v9 + 16);
              v152 = *(_OWORD *)v9;
              *(_OWORD *)v9 = *v69;
              *(_BYTE *)(v9 + 16) = *(_BYTE *)(v9 + 40);
              *v69 = v152;
              *(_BYTE *)(v9 + 40) = v161;
            }
          }
        }
        return;
      case 5:
        sub_20F23CDA8(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24);
        return;
      default:
        if (v10 <= 575)
        {
          v82 = v9 + 24;
          v84 = v9 == a2 || v82 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v84)
            {
              v85 = 0;
              v86 = v9;
              do
              {
                v88 = v82;
                v89 = *(_QWORD *)(v86 + 24);
                v90 = *(_DWORD *)(v86 + 32);
                if (v89 < *(_QWORD *)v86
                  || (v89 == *(_QWORD *)v86 ? (v91 = v90 >= *(_DWORD *)(v86 + 8)) : (v91 = 1), !v91))
                {
                  v153 = *(_QWORD *)(v86 + 36);
                  *(_OWORD *)v88 = *(_OWORD *)v86;
                  *(_BYTE *)(v88 + 16) = *(_BYTE *)(v86 + 16);
                  v87 = v9;
                  if (v86 != v9)
                  {
                    v92 = v85;
                    while (1)
                    {
                      v93 = v9 + v92;
                      v94 = *(_QWORD *)(v9 + v92 - 24);
                      if (v89 >= v94 && (v89 != v94 || v90 >= *(_DWORD *)(v93 - 16)))
                        break;
                      *(_OWORD *)v93 = *(_OWORD *)(v9 + v92 - 24);
                      *(_BYTE *)(v93 + 16) = *(_BYTE *)(v9 + v92 - 8);
                      v92 -= 24;
                      if (!v92)
                      {
                        v87 = v9;
                        goto LABEL_129;
                      }
                    }
                    v87 = v9 + v92;
                  }
LABEL_129:
                  *(_QWORD *)v87 = v89;
                  *(_DWORD *)(v87 + 8) = v90;
                  *(_DWORD *)(v87 + 12) = v153;
                  *(_BYTE *)(v87 + 16) = BYTE4(v153);
                }
                v82 = v88 + 24;
                v85 += 24;
                v86 = v88;
              }
              while (v88 + 24 != a2);
            }
          }
          else if (!v84)
          {
            do
            {
              v137 = v82;
              v138 = *(_QWORD *)(a1 + 24);
              v139 = *(_DWORD *)(a1 + 32);
              if (v138 < *(_QWORD *)a1
                || (v138 == *(_QWORD *)a1 ? (v140 = v139 >= *(_DWORD *)(a1 + 8)) : (v140 = 1), !v140))
              {
                v156 = *(_QWORD *)(a1 + 36);
                do
                {
                  do
                  {
                    v141 = a1;
                    *(_OWORD *)(a1 + 24) = *(_OWORD *)a1;
                    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 16);
                    v142 = *(_QWORD *)(a1 - 24);
                    a1 -= 24;
                    v143 = v138 == v142;
                  }
                  while (v138 < v142);
                }
                while (v143 && v139 < *(_DWORD *)(v141 - 16));
                *(_QWORD *)v141 = v138;
                *(_DWORD *)(v141 + 8) = v139;
                *(_DWORD *)(v141 + 12) = v156;
                *(_BYTE *)(v141 + 16) = BYTE4(v156);
              }
              v82 = v137 + 24;
              a1 = v137;
            }
            while (v137 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v96 = (unint64_t)(v11 - 2) >> 1;
            v97 = v96;
            do
            {
              v98 = v97;
              if (v96 >= v97)
              {
                v99 = (2 * v97) | 1;
                v100 = v9 + 24 * v99;
                if (2 * v98 + 2 < v11)
                {
                  v101 = *(_QWORD *)(v100 + 24);
                  if (*(_QWORD *)v100 < v101
                    || (*(_QWORD *)v100 == v101 ? (v102 = *(_DWORD *)(v100 + 8) >= *(_DWORD *)(v100 + 32)) : (v102 = 1),
                        !v102))
                  {
                    v100 += 24;
                    v99 = 2 * v98 + 2;
                  }
                }
                v103 = v9 + 24 * v98;
                v104 = *(_QWORD *)v103;
                if (*(_QWORD *)v100 >= *(_QWORD *)v103)
                {
                  v105 = *(_DWORD *)(v103 + 8);
                  if (*(_QWORD *)v100 != *(_QWORD *)v103 || *(_DWORD *)(v100 + 8) >= v105)
                  {
                    v154 = *(_QWORD *)(v103 + 12);
                    do
                    {
                      v107 = v103;
                      v103 = v100;
                      v108 = *(_OWORD *)v100;
                      *(_BYTE *)(v107 + 16) = *(_BYTE *)(v100 + 16);
                      *(_OWORD *)v107 = v108;
                      if (v96 < v99)
                        break;
                      v109 = 2 * v99;
                      v99 = (2 * v99) | 1;
                      v100 = v9 + 24 * v99;
                      v110 = v109 + 2;
                      if (v110 < v11)
                      {
                        v111 = *(_QWORD *)(v100 + 24);
                        if (*(_QWORD *)v100 < v111
                          || (*(_QWORD *)v100 == v111
                            ? (v112 = *(_DWORD *)(v100 + 8) >= *(_DWORD *)(v100 + 32))
                            : (v112 = 1),
                              !v112))
                        {
                          v100 += 24;
                          v99 = v110;
                        }
                      }
                      if (*(_QWORD *)v100 < v104)
                        break;
                    }
                    while (*(_QWORD *)v100 != v104 || *(_DWORD *)(v100 + 8) >= v105);
                    *(_QWORD *)v103 = v104;
                    *(_DWORD *)(v103 + 8) = v105;
                    *(_DWORD *)(v103 + 12) = v154;
                    *(_BYTE *)(v103 + 16) = BYTE4(v154);
                  }
                }
              }
              v97 = v98 - 1;
            }
            while (v98);
            v114 = v10 / 0x18uLL;
            do
            {
              v116 = 0;
              v162 = *(_QWORD *)(v9 + 16);
              v155 = *(_OWORD *)v9;
              v117 = v9;
              do
              {
                v119 = v117;
                v117 += 24 * v116 + 24;
                v120 = 2 * v116;
                v116 = (2 * v116) | 1;
                v121 = v120 + 2;
                if (v121 < v114)
                {
                  v122 = *(_QWORD *)(v117 + 24);
                  if (*(_QWORD *)v117 < v122
                    || (*(_QWORD *)v117 == v122 ? (v123 = *(_DWORD *)(v117 + 8) >= *(_DWORD *)(v117 + 32)) : (v123 = 1),
                        !v123))
                  {
                    v117 += 24;
                    v116 = v121;
                  }
                }
                v118 = *(_OWORD *)v117;
                *(_BYTE *)(v119 + 16) = *(_BYTE *)(v117 + 16);
                *(_OWORD *)v119 = v118;
              }
              while (v116 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
              a2 -= 24;
              if (v117 == a2)
              {
                *(_BYTE *)(v117 + 16) = v162;
                *(_OWORD *)v117 = v155;
              }
              else
              {
                v124 = *(_OWORD *)a2;
                *(_BYTE *)(v117 + 16) = *(_BYTE *)(a2 + 16);
                *(_OWORD *)v117 = v124;
                *(_BYTE *)(a2 + 16) = v162;
                *(_OWORD *)a2 = v155;
                v125 = v117 - v9 + 24;
                if (v125 >= 25)
                {
                  v126 = v125 / 0x18uLL - 2;
                  v127 = v126 >> 1;
                  v128 = v9 + 24 * (v126 >> 1);
                  v129 = *(_QWORD *)v117;
                  v130 = *(_DWORD *)(v117 + 8);
                  if (*(_QWORD *)v128 < *(_QWORD *)v117
                    || (*(_QWORD *)v128 == *(_QWORD *)v117 ? (v131 = *(_DWORD *)(v128 + 8) >= v130) : (v131 = 1), !v131))
                  {
                    v147 = *(_QWORD *)(v117 + 12);
                    v132 = *(_BYTE *)(v128 + 16);
                    *(_OWORD *)v117 = *(_OWORD *)v128;
                    *(_BYTE *)(v117 + 16) = v132;
                    if (v126 >= 2)
                    {
                      while (1)
                      {
                        v134 = v127 - 1;
                        v127 = (v127 - 1) >> 1;
                        v135 = v9 + 24 * v127;
                        if (*(_QWORD *)v135 >= v129 && (*(_QWORD *)v135 != v129 || *(_DWORD *)(v135 + 8) >= v130))
                          break;
                        v133 = *(_OWORD *)v135;
                        *(_BYTE *)(v128 + 16) = *(_BYTE *)(v135 + 16);
                        *(_OWORD *)v128 = v133;
                        v128 = v9 + 24 * v127;
                        if (v134 <= 1)
                          goto LABEL_210;
                      }
                    }
                    v135 = v128;
LABEL_210:
                    *(_QWORD *)v135 = v129;
                    *(_DWORD *)(v135 + 8) = v130;
                    *(_DWORD *)(v135 + 12) = v147;
                    *(_BYTE *)(v135 + 16) = BYTE4(v147);
                  }
                }
              }
            }
            while (v114-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_20F23CFE4((__int128 *)(a1 + 24 * v12), (uint64_t *)a1, (__int128 *)(a2 - 24));
          --a3;
          v18 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          sub_20F23CFE4((__int128 *)a1, (uint64_t *)(a1 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 24 * v12;
          v15 = (uint64_t *)(24 * v12 + a1 - 24);
          sub_20F23CFE4((__int128 *)(a1 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (uint64_t *)(a1 + 24 + v14);
          sub_20F23CFE4((__int128 *)(a1 + 48), v16, (__int128 *)(a2 - 72));
          sub_20F23CFE4((__int128 *)v15, (uint64_t *)v13, (__int128 *)v16);
          v157 = *(_QWORD *)(a1 + 16);
          v148 = *(_OWORD *)a1;
          v17 = *(_BYTE *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_BYTE *)(a1 + 16) = v17;
          *(_BYTE *)(v13 + 16) = v157;
          *(_OWORD *)v13 = v148;
          --a3;
          v18 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_12;
        }
        v19 = *(_QWORD *)(a1 - 24);
        if (v19 >= v18)
        {
          v20 = *(_DWORD *)(a1 + 8);
          if (v19 != v18 || *(_DWORD *)(a1 - 16) >= v20)
          {
            v146 = *(_QWORD *)(a1 + 12);
            v45 = *v8;
            if (v18 < *v8 || v18 == *v8 && v20 < *(_DWORD *)(a2 - 16))
            {
              v46 = a1 + 24;
              do
              {
                v9 = v46;
                v47 = *(_QWORD *)v46;
                if (v18 < *(_QWORD *)v46)
                  break;
                v48 = *(_DWORD *)(v46 + 8);
                v46 += 24;
              }
              while (v18 != v47 || v20 >= v48);
            }
            else
            {
              v61 = a1 + 24;
              do
              {
                v9 = v61;
                if (v61 >= a2)
                  break;
                v62 = *(_QWORD *)v61;
                if (v18 < *(_QWORD *)v61)
                  break;
                v63 = *(_DWORD *)(v61 + 8);
                v61 += 24;
              }
              while (v18 != v62 || v20 >= v63);
            }
            i = a2;
            if (v9 < a2)
            {
              for (i = a2 - 24; v18 < v45 || v18 == v45 && v20 < *(_DWORD *)(i + 8); i -= 24)
              {
                v51 = *(_QWORD *)(i - 24);
                v45 = v51;
              }
            }
            while (v9 < i)
            {
              v159 = *(_QWORD *)(v9 + 16);
              v150 = *(_OWORD *)v9;
              v52 = *(_OWORD *)i;
              *(_BYTE *)(v9 + 16) = *(_BYTE *)(i + 16);
              *(_OWORD *)v9 = v52;
              *(_BYTE *)(i + 16) = v159;
              *(_OWORD *)i = v150;
              v53 = v9 + 24;
              do
              {
                v9 = v53;
                v54 = *(_QWORD *)v53;
                if (v18 < *(_QWORD *)v53)
                  break;
                v55 = *(_DWORD *)(v53 + 8);
                v53 += 24;
              }
              while (v18 != v54 || v20 >= v55);
              do
              {
                do
                {
                  v57 = *(_QWORD *)(i - 24);
                  i -= 24;
                  v58 = v18 == v57;
                }
                while (v18 < v57);
              }
              while (v58 && v20 < *(_DWORD *)(i + 8));
            }
            if (v9 - 24 != a1)
            {
              v60 = *(_OWORD *)(v9 - 24);
              *(_BYTE *)(a1 + 16) = *(_BYTE *)(v9 - 8);
              *(_OWORD *)a1 = v60;
            }
            a4 = 0;
            *(_QWORD *)(v9 - 24) = v18;
            *(_DWORD *)(v9 - 16) = v20;
            *(_BYTE *)(v9 - 8) = BYTE4(v146);
            *(_DWORD *)(v9 - 12) = v146;
            continue;
          }
        }
LABEL_12:
        v21 = 0;
        v22 = *(_DWORD *)(a1 + 8);
        v145 = *(_QWORD *)(a1 + 12);
        while (1)
        {
          v23 = *(_QWORD *)(a1 + v21 + 24);
          if (v23 >= v18 && (v23 != v18 || *(_DWORD *)(a1 + v21 + 32) >= v22))
            break;
          v21 += 24;
        }
        v25 = a1 + v21 + 24;
        v26 = a2 - 24;
        if (v21)
        {
          do
          {
            v27 = v26;
            v28 = *(_QWORD *)v26;
            if (*(_QWORD *)v26 < v18)
              break;
            v29 = *(_DWORD *)(v26 + 8);
            v26 -= 24;
          }
          while (v28 != v18 || v29 >= v22);
LABEL_34:
          v9 = v25;
          if (v25 < v27)
          {
            v34 = v27;
            do
            {
              v158 = *(_QWORD *)(v9 + 16);
              v149 = *(_OWORD *)v9;
              v35 = *(_OWORD *)v34;
              *(_BYTE *)(v9 + 16) = *(_BYTE *)(v34 + 16);
              *(_OWORD *)v9 = v35;
              *(_BYTE *)(v34 + 16) = v158;
              *(_OWORD *)v34 = v149;
              do
              {
                do
                {
                  v36 = *(_QWORD *)(v9 + 24);
                  v9 += 24;
                  v37 = v36 == v18;
                }
                while (v36 < v18);
              }
              while (v37 && *(_DWORD *)(v9 + 8) < v22);
              v39 = v34 - 24;
              do
              {
                v34 = v39;
                v40 = *(_QWORD *)v39;
                if (*(_QWORD *)v39 < v18)
                  break;
                v41 = *(_DWORD *)(v39 + 8);
                v39 -= 24;
              }
              while (v40 != v18 || v41 >= v22);
            }
            while (v9 < v34);
          }
        }
        else
        {
          v31 = a2 - 24;
          while (1)
          {
            v27 = v31;
            v32 = v31 + 24;
            if (v25 >= v32)
              break;
            if (*(_QWORD *)v27 >= v18)
            {
              v31 = v27 - 24;
              if (*(_QWORD *)v27 != v18 || *(_DWORD *)(v27 + 8) >= v22)
                continue;
            }
            goto LABEL_34;
          }
          v27 = v32;
          v9 = v25;
        }
        if (v9 - 24 != a1)
        {
          v43 = *(_OWORD *)(v9 - 24);
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(v9 - 8);
          *(_OWORD *)a1 = v43;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_DWORD *)(v9 - 16) = v22;
        *(_BYTE *)(v9 - 8) = BYTE4(v145);
        *(_DWORD *)(v9 - 12) = v145;
        if (v25 < v27)
        {
LABEL_57:
          sub_20F23C218(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = sub_20F23D134(a1, v9 - 24);
        if (!sub_20F23D134(v9, a2))
        {
          if (v44)
            continue;
          goto LABEL_57;
        }
        a2 = v9 - 24;
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  v11 = a2 - 4;
  v136 = a2 - 8;
  v12 = a2 - 12;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (uint64_t)a2 - v13;
    v15 = (uint64_t)((uint64_t)a2 - v13) >> 5;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result.n128_f64[0] = *(a2 - 1);
        if (result.n128_f64[0] < *(double *)(v13 + 24))
        {
          v160 = *(__n128 *)v13;
          v193 = *(_OWORD *)(v13 + 16);
          v100 = *((_OWORD *)a2 - 1);
          *(_OWORD *)v13 = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v13 + 16) = v100;
          result = v160;
          *((__n128 *)a2 - 2) = v160;
          *((_OWORD *)a2 - 1) = v193;
        }
        return result;
      case 3uLL:
        v101 = v13 + 32;
        result.n128_u64[0] = *(_QWORD *)(v13 + 56);
        v102 = *(a2 - 1);
        if (result.n128_f64[0] >= *(double *)(v13 + 24))
        {
          if (v102 < result.n128_f64[0])
          {
            result = *(__n128 *)v101;
            v197 = *(_OWORD *)(v13 + 48);
            v119 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v101 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 48) = v119;
            *(__n128 *)v11 = result;
            *((_OWORD *)a2 - 1) = v197;
            goto LABEL_145;
          }
        }
        else
        {
          if (v102 >= result.n128_f64[0])
          {
            v166 = *(__n128 *)v13;
            v200 = *(_OWORD *)(v13 + 16);
            v127 = *(_OWORD *)(v13 + 48);
            *(_OWORD *)v13 = *(_OWORD *)v101;
            *(_OWORD *)(v13 + 16) = v127;
            *(__n128 *)v101 = v166;
            *(_OWORD *)(v13 + 48) = v200;
            result.n128_f64[0] = *(a2 - 1);
            if (result.n128_f64[0] >= *(double *)(v13 + 56))
              return result;
            result = *(__n128 *)v101;
            v104 = *(_OWORD *)(v13 + 48);
            v128 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v101 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 48) = v128;
          }
          else
          {
            v161 = *(__n128 *)v13;
            v194 = *(_OWORD *)(v13 + 16);
            v103 = *((_OWORD *)a2 - 1);
            *(_OWORD *)v13 = *(_OWORD *)v11;
            *(_OWORD *)(v13 + 16) = v103;
            result = v161;
            v104 = v194;
          }
          *(__n128 *)v11 = result;
          *((_OWORD *)a2 - 1) = v104;
        }
        return result;
      case 4uLL:
        v101 = v13 + 32;
        v105 = (__n128 *)(v13 + 64);
        v106 = *(double *)(v13 + 56);
        v107 = *(double *)(v13 + 88);
        if (v106 >= *(double *)(v13 + 24))
        {
          if (v107 < v106)
          {
            v120 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v121 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v121;
            *v105 = v120;
            *(__n128 *)(v13 + 80) = result;
            if (*(double *)(v13 + 56) < *(double *)(v13 + 24))
            {
              v164 = *(__n128 *)v13;
              v198 = *(_OWORD *)(v13 + 16);
              v122 = *(_OWORD *)(v13 + 48);
              *(_OWORD *)v13 = *(_OWORD *)v101;
              *(_OWORD *)(v13 + 16) = v122;
              *(__n128 *)v101 = v164;
              *(_OWORD *)(v13 + 48) = v198;
            }
          }
        }
        else if (v107 >= v106)
        {
          v167 = *(__n128 *)v13;
          v201 = *(_OWORD *)(v13 + 16);
          v129 = *(_OWORD *)(v13 + 48);
          *(_OWORD *)v13 = *(_OWORD *)v101;
          *(_OWORD *)(v13 + 16) = v129;
          *(__n128 *)v101 = v167;
          *(_OWORD *)(v13 + 48) = v201;
          if (v107 < *(double *)(v13 + 56))
          {
            v130 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v131 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v131;
            *v105 = v130;
            *(__n128 *)(v13 + 80) = result;
          }
        }
        else
        {
          v162 = *(__n128 *)v13;
          v195 = *(_OWORD *)(v13 + 16);
          v108 = *(_OWORD *)(v13 + 80);
          *(__n128 *)v13 = *v105;
          *(_OWORD *)(v13 + 16) = v108;
          *v105 = v162;
          *(_OWORD *)(v13 + 80) = v195;
        }
        result.n128_f64[0] = *(a2 - 1);
        if (result.n128_f64[0] < *(double *)(v13 + 88))
        {
          result = *v105;
          v202 = *(_OWORD *)(v13 + 80);
          v132 = *((_OWORD *)a2 - 1);
          *v105 = *(__n128 *)v11;
          *(_OWORD *)(v13 + 80) = v132;
          *(__n128 *)v11 = result;
          *((_OWORD *)a2 - 1) = v202;
          result.n128_u64[0] = *(_QWORD *)(v13 + 88);
          if (result.n128_f64[0] < *(double *)(v13 + 56))
          {
            v133 = *(__n128 *)v101;
            result = *(__n128 *)(v13 + 48);
            v134 = *(_OWORD *)(v13 + 80);
            *(__n128 *)v101 = *v105;
            *(_OWORD *)(v13 + 48) = v134;
            *v105 = v133;
            *(__n128 *)(v13 + 80) = result;
LABEL_145:
            result.n128_u64[0] = *(_QWORD *)(v13 + 56);
            if (result.n128_f64[0] < *(double *)(v13 + 24))
            {
              v168 = *(__n128 *)v13;
              v203 = *(_OWORD *)(v13 + 16);
              v135 = *(_OWORD *)(v101 + 16);
              *(_OWORD *)v13 = *(_OWORD *)v101;
              *(_OWORD *)(v13 + 16) = v135;
              result = v168;
              *(__n128 *)v101 = v168;
              *(_OWORD *)(v101 + 16) = v203;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = sub_20EDB10FC((double *)v13, (double *)(v13 + 32), (double *)(v13 + 64), (double *)(v13 + 96), (__int128 *)a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v14 > 767)
        {
          if (!a4)
          {
            if ((double *)v13 != a2)
              sub_20EDB1288((double *)v13, a2, a2);
            return result;
          }
          v16 = v15 >> 1;
          v17 = (__n128 *)(v13 + 32 * (v15 >> 1));
          v18 = *(a2 - 1);
          if ((unint64_t)v14 <= 0x1000)
          {
            v22 = *(double *)(v13 + 24);
            v23 = (double *)(v13 + 24 + 32 * v16);
            if (v22 >= *v23)
            {
              if (v18 < v22)
              {
                v145 = *(__n128 *)v13;
                v173 = *(_OWORD *)(v13 + 16);
                v27 = *((_OWORD *)a2 - 1);
                *(_OWORD *)v13 = *(_OWORD *)v11;
                *(_OWORD *)(v13 + 16) = v27;
                result.n128_u64[1] = v145.n128_u64[1];
                *(__n128 *)v11 = v145;
                *((_OWORD *)a2 - 1) = v173;
                if (*(double *)(v13 + 24) < *v23)
                {
                  v146 = *v17;
                  v174 = v17[1];
                  v28 = *(__n128 *)(v13 + 16);
                  *v17 = *(__n128 *)v13;
                  v17[1] = v28;
                  result.n128_u64[1] = v146.n128_u64[1];
                  *(__n128 *)v13 = v146;
                  *(__n128 *)(v13 + 16) = v174;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v18 >= v22)
              {
                v149 = *v17;
                v179 = v17[1];
                v43 = *(__n128 *)(v13 + 16);
                *v17 = *(__n128 *)v13;
                v17[1] = v43;
                result.n128_u64[1] = v149.n128_u64[1];
                *(__n128 *)v13 = v149;
                *(__n128 *)(v13 + 16) = v179;
                if (*(a2 - 1) >= *(double *)(v13 + 24))
                  goto LABEL_31;
                v142 = *(__n128 *)v13;
                v170 = *(__n128 *)(v13 + 16);
                v44 = *((_OWORD *)a2 - 1);
                *(_OWORD *)v13 = *(_OWORD *)v11;
                *(_OWORD *)(v13 + 16) = v44;
              }
              else
              {
                v142 = *v17;
                v170 = v17[1];
                v24 = *(__n128 *)(a2 - 2);
                *v17 = *(__n128 *)v11;
                v17[1] = v24;
              }
              result.n128_u64[1] = v142.n128_u64[1];
              *(__n128 *)v11 = v142;
              *((__n128 *)a2 - 1) = v170;
            }
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_54:
            result.n128_u64[0] = *(_QWORD *)(v13 + 24);
            if (*(double *)(v13 - 8) < result.n128_f64[0])
              goto LABEL_55;
            v140 = *(_QWORD *)(v13 + 16);
            v138 = *(__n128 *)v13;
            if (result.n128_f64[0] >= *(a2 - 1))
            {
              v90 = v13 + 32;
              do
              {
                v13 = v90;
                if (v90 >= (unint64_t)a2)
                  break;
                v91 = *(double *)(v90 + 24);
                v90 += 32;
              }
              while (result.n128_f64[0] >= v91);
            }
            else
            {
              v88 = v13;
              do
              {
                v13 = v88 + 32;
                v89 = *(double *)(v88 + 56);
                v88 += 32;
              }
              while (result.n128_f64[0] >= v89);
            }
            v92 = a2;
            if (v13 < (unint64_t)a2)
            {
              v93 = a2;
              do
              {
                v92 = v93 - 4;
                v94 = *(v93 - 1);
                v93 -= 4;
              }
              while (result.n128_f64[0] < v94);
            }
            while (v13 < (unint64_t)v92)
            {
              v159 = *(__n128 *)v13;
              v192 = *(_OWORD *)(v13 + 16);
              v95 = *((_OWORD *)v92 + 1);
              *(_OWORD *)v13 = *(_OWORD *)v92;
              *(_OWORD *)(v13 + 16) = v95;
              *(__n128 *)v92 = v159;
              *((_OWORD *)v92 + 1) = v192;
              do
              {
                v96 = *(double *)(v13 + 56);
                v13 += 32;
              }
              while (result.n128_f64[0] >= v96);
              do
              {
                v97 = *(v92 - 1);
                v92 -= 4;
              }
              while (result.n128_f64[0] < v97);
            }
            v98 = (__n128 *)(v13 - 32);
            if (v13 - 32 != a1)
            {
              v99 = *(_OWORD *)(v13 - 16);
              *(__n128 *)a1 = *v98;
              *(_OWORD *)(a1 + 16) = v99;
            }
            a5 = 0;
            *(_QWORD *)(v13 - 16) = v140;
            *v98 = v138;
            *(_QWORD *)(v13 - 8) = result.n128_u64[0];
            continue;
          }
          v19 = (double *)(v13 + 24 + 32 * v16);
          v20 = *v19;
          if (*v19 >= *(double *)(v13 + 24))
          {
            if (v18 < v20)
            {
              v143 = *v17;
              v171 = v17[1];
              v25 = *(__n128 *)(a2 - 2);
              *v17 = *(__n128 *)v11;
              v17[1] = v25;
              *(__n128 *)v11 = v143;
              *((__n128 *)a2 - 1) = v171;
              if (*v19 < *(double *)(v13 + 24))
              {
                v144 = *(__n128 *)v13;
                v172 = *(__n128 *)(v13 + 16);
                v26 = v17[1];
                *(__n128 *)v13 = *v17;
                *(__n128 *)(v13 + 16) = v26;
                *v17 = v144;
                v17[1] = v172;
              }
            }
          }
          else
          {
            if (v18 >= v20)
            {
              v147 = *(__n128 *)v13;
              v175 = *(__n128 *)(v13 + 16);
              v29 = v17[1];
              *(__n128 *)v13 = *v17;
              *(__n128 *)(v13 + 16) = v29;
              *v17 = v147;
              v17[1] = v175;
              if (*(a2 - 1) >= *v19)
                goto LABEL_22;
              v141 = *v17;
              v169 = v17[1];
              v30 = *(__n128 *)(a2 - 2);
              *v17 = *(__n128 *)v11;
              v17[1] = v30;
            }
            else
            {
              v141 = *(__n128 *)v13;
              v169 = *(__n128 *)(v13 + 16);
              v21 = *((_OWORD *)a2 - 1);
              *(_OWORD *)v13 = *(_OWORD *)v11;
              *(_OWORD *)(v13 + 16) = v21;
            }
            *(__n128 *)v11 = v141;
            *((__n128 *)a2 - 1) = v169;
          }
LABEL_22:
          v31 = (__int128 *)(v13 + 32);
          v32 = v13 + 32 * v16;
          v34 = *(double *)(v32 - 8);
          v33 = (double *)(v32 - 8);
          v35 = v34;
          v36 = v33 - 3;
          v37 = *(a2 - 5);
          if (v34 >= *(double *)(v13 + 56))
          {
            if (v37 < v35)
            {
              v148 = *(__n128 *)v36;
              v177 = *(_OWORD *)(v33 - 1);
              v40 = *((_OWORD *)a2 - 3);
              *(_OWORD *)v36 = *(_OWORD *)v136;
              *(_OWORD *)(v33 - 1) = v40;
              *(__n128 *)v136 = v148;
              *((_OWORD *)a2 - 3) = v177;
              if (*v33 < *(double *)(v13 + 56))
              {
                v41 = *v31;
                v178 = *(_OWORD *)(v13 + 48);
                v42 = *(_OWORD *)(v33 - 1);
                *v31 = *(_OWORD *)v36;
                *(_OWORD *)(v13 + 48) = v42;
                *(_OWORD *)v36 = v41;
                *(_OWORD *)(v33 - 1) = v178;
              }
            }
          }
          else if (v37 >= v35)
          {
            v45 = *v31;
            v180 = *(_OWORD *)(v13 + 48);
            v46 = *(_OWORD *)(v33 - 1);
            *v31 = *(_OWORD *)v36;
            *(_OWORD *)(v13 + 48) = v46;
            *(_OWORD *)v36 = v45;
            *(_OWORD *)(v33 - 1) = v180;
            if (*(a2 - 5) < *v33)
            {
              v150 = *(__n128 *)v36;
              v181 = *(_OWORD *)(v33 - 1);
              v47 = *((_OWORD *)a2 - 3);
              *(_OWORD *)v36 = *(_OWORD *)v136;
              *(_OWORD *)(v33 - 1) = v47;
              *(__n128 *)v136 = v150;
              *((_OWORD *)a2 - 3) = v181;
            }
          }
          else
          {
            v38 = *v31;
            v176 = *(_OWORD *)(v13 + 48);
            v39 = *((_OWORD *)a2 - 3);
            *v31 = *(_OWORD *)v136;
            *(_OWORD *)(v13 + 48) = v39;
            *(_OWORD *)v136 = v38;
            *((_OWORD *)a2 - 3) = v176;
          }
          v48 = (__int128 *)(v13 + 64);
          v49 = v13 + 32 * v16;
          v51 = *(double *)(v49 + 56);
          v50 = (double *)(v49 + 56);
          v52 = v51;
          v53 = v50 - 3;
          v54 = *(a2 - 9);
          if (v51 >= *(double *)(v13 + 88))
          {
            if (v54 < v52)
            {
              v151 = *(__n128 *)v53;
              v182 = *(_OWORD *)(v50 - 1);
              v58 = *((_OWORD *)a2 - 5);
              *(_OWORD *)v53 = *(_OWORD *)v12;
              *(_OWORD *)(v50 - 1) = v58;
              *(__n128 *)v12 = v151;
              *((_OWORD *)a2 - 5) = v182;
              if (*v50 < *(double *)(v13 + 88))
              {
                v59 = *v48;
                v183 = *(_OWORD *)(v13 + 80);
                v60 = *(_OWORD *)(v50 - 1);
                *v48 = *(_OWORD *)v53;
                *(_OWORD *)(v13 + 80) = v60;
                *(_OWORD *)v53 = v59;
                *(_OWORD *)(v50 - 1) = v183;
              }
            }
          }
          else
          {
            if (v54 >= v52)
            {
              v61 = *v48;
              v184 = *(_OWORD *)(v13 + 80);
              v62 = *(_OWORD *)(v50 - 1);
              *v48 = *(_OWORD *)v53;
              *(_OWORD *)(v13 + 80) = v62;
              *(_OWORD *)v53 = v61;
              *(_OWORD *)(v50 - 1) = v184;
              if (*(a2 - 9) >= *v50)
                goto LABEL_44;
              v152 = *(_OWORD *)v53;
              v185 = *(_OWORD *)(v50 - 1);
              v63 = *((_OWORD *)a2 - 5);
              *(_OWORD *)v53 = *(_OWORD *)v12;
              *(_OWORD *)(v50 - 1) = v63;
              v55 = v152;
              v56 = v185;
            }
            else
            {
              v55 = *v48;
              v56 = *(_OWORD *)(v13 + 80);
              v57 = *((_OWORD *)a2 - 5);
              *v48 = *(_OWORD *)v12;
              *(_OWORD *)(v13 + 80) = v57;
            }
            *(_OWORD *)v12 = v55;
            *((_OWORD *)a2 - 5) = v56;
          }
LABEL_44:
          v64 = *v19;
          v65 = *v50;
          if (*v19 >= *v33)
          {
            if (v65 < v64)
            {
              v154 = *v17;
              v187 = v17[1];
              v67 = *(__n128 *)(v50 - 1);
              *v17 = *(__n128 *)v53;
              v17[1] = v67;
              *(__n128 *)v53 = v154;
              *(__n128 *)(v50 - 1) = v187;
              if (*v19 < *v33)
              {
                v155 = *(__n128 *)v36;
                v188 = *(__n128 *)(v33 - 1);
                v68 = v17[1];
                *(__n128 *)v36 = *v17;
                *(__n128 *)(v33 - 1) = v68;
                *v17 = v155;
                v17[1] = v188;
              }
            }
          }
          else
          {
            if (v65 >= v64)
            {
              v156 = *(__n128 *)v36;
              v189 = *(__n128 *)(v33 - 1);
              v69 = v17[1];
              *(__n128 *)v36 = *v17;
              *(__n128 *)(v33 - 1) = v69;
              *v17 = v156;
              v17[1] = v189;
              if (*v50 >= *v19)
                goto LABEL_53;
              v153 = *v17;
              v186 = v17[1];
              v70 = *(__n128 *)(v50 - 1);
              *v17 = *(__n128 *)v53;
              v17[1] = v70;
            }
            else
            {
              v153 = *(__n128 *)v36;
              v186 = *(__n128 *)(v33 - 1);
              v66 = *(_OWORD *)(v50 - 1);
              *(_OWORD *)v36 = *(_OWORD *)v53;
              *(_OWORD *)(v33 - 1) = v66;
            }
            *(__n128 *)v53 = v153;
            *(__n128 *)(v50 - 1) = v186;
          }
LABEL_53:
          v157 = *(__n128 *)v13;
          v190 = *(__n128 *)(v13 + 16);
          v71 = v17[1];
          *(__n128 *)v13 = *v17;
          *(__n128 *)(v13 + 16) = v71;
          result.n128_u64[1] = v157.n128_u64[1];
          *v17 = v157;
          v17[1] = v190;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_32:
          result.n128_u64[0] = *(_QWORD *)(v13 + 24);
LABEL_55:
          v72 = 0;
          v139 = *(_QWORD *)(v13 + 16);
          v137 = *(__n128 *)v13;
          do
          {
            v73 = *(double *)(v13 + v72 + 56);
            v72 += 32;
          }
          while (v73 < result.n128_f64[0]);
          v74 = v13 + v72;
          v75 = a2;
          if (v72 == 32)
          {
            v78 = a2;
            while (v74 < (unint64_t)v78)
            {
              v76 = v78 - 4;
              v79 = *(v78 - 1);
              v78 -= 4;
              if (v79 < result.n128_f64[0])
                goto LABEL_63;
            }
            v76 = v78;
            v13 = v74;
          }
          else
          {
            do
            {
              v76 = v75 - 4;
              v77 = *(v75 - 1);
              v75 -= 4;
            }
            while (v77 >= result.n128_f64[0]);
LABEL_63:
            v13 = v74;
            if (v74 < (unint64_t)v76)
            {
              v80 = v76;
              do
              {
                v158 = *(__n128 *)v13;
                v191 = *(_OWORD *)(v13 + 16);
                v81 = *((_OWORD *)v80 + 1);
                *(_OWORD *)v13 = *(_OWORD *)v80;
                *(_OWORD *)(v13 + 16) = v81;
                *(__n128 *)v80 = v158;
                *((_OWORD *)v80 + 1) = v191;
                do
                {
                  v82 = *(double *)(v13 + 56);
                  v13 += 32;
                }
                while (v82 < result.n128_f64[0]);
                do
                {
                  v83 = *(v80 - 1);
                  v80 -= 4;
                }
                while (v83 >= result.n128_f64[0]);
              }
              while (v13 < (unint64_t)v80);
            }
          }
          v84 = (__n128 *)(v13 - 32);
          if (v13 - 32 != a1)
          {
            v85 = *(_OWORD *)(v13 - 16);
            *(__n128 *)a1 = *v84;
            *(_OWORD *)(a1 + 16) = v85;
          }
          *(_QWORD *)(v13 - 16) = v139;
          *v84 = v137;
          *(_QWORD *)(v13 - 8) = result.n128_u64[0];
          if (v74 < (unint64_t)v76)
            goto LABEL_74;
          v86 = sub_20F279864(a1, v13 - 32, result);
          if (!sub_20F279864(v13, (uint64_t)a2, v87))
          {
            if (v86)
              continue;
LABEL_74:
            sub_20F278DEC(a1, v13 - 32, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (double *)(v13 - 32);
          if (v86)
            return result;
          goto LABEL_1;
        }
        v109 = (double *)(v13 + 32);
        v111 = (double *)v13 == a2 || v109 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v111)
          {
            v112 = 0;
            v113 = v13;
            do
            {
              result.n128_u64[0] = *(_QWORD *)(v113 + 56);
              v115 = *(double *)(v113 + 24);
              v113 = (unint64_t)v109;
              if (result.n128_f64[0] < v115)
              {
                v196 = *((_QWORD *)v109 + 2);
                v163 = *(_OWORD *)v109;
                v116 = v112;
                do
                {
                  v117 = v13 + v116;
                  v118 = *(_OWORD *)(v13 + v116 + 16);
                  *(_OWORD *)(v117 + 32) = *(_OWORD *)(v13 + v116);
                  *(_OWORD *)(v117 + 48) = v118;
                  if (!v116)
                  {
                    v114 = v13;
                    goto LABEL_116;
                  }
                  v116 -= 32;
                }
                while (result.n128_f64[0] < *(double *)(v117 - 8));
                v114 = v13 + v116 + 32;
LABEL_116:
                *(_QWORD *)(v114 + 16) = v196;
                *(_OWORD *)v114 = v163;
                *(_QWORD *)(v114 + 24) = result.n128_u64[0];
              }
              v109 = (double *)(v113 + 32);
              v112 += 32;
            }
            while ((double *)(v113 + 32) != a2);
          }
        }
        else if (!v111)
        {
          do
          {
            result.n128_u64[0] = *(_QWORD *)(a1 + 56);
            v123 = *(double *)(a1 + 24);
            a1 = (uint64_t)v109;
            if (result.n128_f64[0] < v123)
            {
              v199 = *((_QWORD *)v109 + 2);
              v165 = *(_OWORD *)v109;
              v124 = v109;
              do
              {
                v125 = *((_OWORD *)v124 - 1);
                *(_OWORD *)v124 = *((_OWORD *)v124 - 2);
                *((_OWORD *)v124 + 1) = v125;
                v126 = *(v124 - 5);
                v124 -= 4;
              }
              while (result.n128_f64[0] < v126);
              *((_QWORD *)v124 + 2) = v199;
              *(_OWORD *)v124 = v165;
              v124[3] = result.n128_f64[0];
            }
            v109 += 4;
          }
          while ((double *)(a1 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)(a2 - 40);
  v10 = (__int128 *)(a2 - 80);
  v11 = (__int128 *)(a2 - 120);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(v12 + 32))
        {
          v299 = *(_QWORD *)(v12 + 32);
          v237 = *(__n128 *)v12;
          v269 = *(_OWORD *)(v12 + 16);
          v127 = *(_OWORD *)(a2 - 40);
          v128 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 - 8);
          *(_OWORD *)v12 = v127;
          *(_OWORD *)(v12 + 16) = v128;
          *(_DWORD *)(a2 - 8) = v299;
          *(_OWORD *)(a2 - 24) = v269;
          *(__n128 *)(a2 - 40) = v237;
        }
        return;
      case 3:
        v129 = (__n128 *)(v12 + 40);
        v130 = *(_DWORD *)(v12 + 72);
        v131 = *(_DWORD *)(a2 - 8);
        if (v130 <= *(_DWORD *)(v12 + 32))
        {
          if (v131 > v130)
          {
            v198 = *v129;
            v276 = *(_OWORD *)(v12 + 56);
            v199 = *(_QWORD *)(v12 + 72);
            v201 = *v9;
            v200 = *(_OWORD *)(a2 - 24);
            *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 - 8);
            *v129 = v201;
            *(_OWORD *)(v12 + 56) = v200;
            *(_DWORD *)(a2 - 8) = v199;
            *v9 = v198;
            *(_OWORD *)(a2 - 24) = v276;
            if (*(_DWORD *)(v12 + 72) > *(_DWORD *)(v12 + 32))
            {
              v303 = *(_QWORD *)(v12 + 32);
              v243 = *(__n128 *)v12;
              v277 = *(_OWORD *)(v12 + 16);
              v202 = *(_OWORD *)(v12 + 56);
              *(__n128 *)v12 = *v129;
              *(_OWORD *)(v12 + 16) = v202;
              *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 72);
              *v129 = v243;
              *(_OWORD *)(v12 + 56) = v277;
              *(_DWORD *)(v12 + 72) = v303;
            }
          }
        }
        else
        {
          if (v131 <= v130)
          {
            v304 = *(_QWORD *)(v12 + 32);
            v245 = *(__n128 *)v12;
            v279 = *(_OWORD *)(v12 + 16);
            v208 = *(_OWORD *)(v12 + 56);
            *(__n128 *)v12 = *v129;
            *(_OWORD *)(v12 + 16) = v208;
            *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 72);
            *v129 = v245;
            *(_OWORD *)(v12 + 56) = v279;
            *(_DWORD *)(v12 + 72) = v304;
            if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(v12 + 72))
              return;
            v134 = *v129;
            v135 = *(_OWORD *)(v12 + 56);
            v209 = *(_QWORD *)(v12 + 72);
            v211 = *v9;
            v210 = *(_OWORD *)(a2 - 24);
            *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 - 8);
            *v129 = v211;
            *(_OWORD *)(v12 + 56) = v210;
            *(_DWORD *)(a2 - 8) = v209;
          }
          else
          {
            v300 = *(_QWORD *)(v12 + 32);
            v238 = *(__n128 *)v12;
            v270 = *(_OWORD *)(v12 + 16);
            v132 = *v9;
            v133 = *(_OWORD *)(a2 - 24);
            *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 - 8);
            *(__n128 *)v12 = v132;
            *(_OWORD *)(v12 + 16) = v133;
            v134 = v238;
            v135 = v270;
            *(_DWORD *)(a2 - 8) = v300;
          }
          *v9 = v134;
          *(_OWORD *)(a2 - 24) = v135;
        }
        return;
      case 4:
        sub_20F28024C(v12, v12 + 40, v12 + 80, a2 - 40, a5);
        return;
      case 5:
        v136 = (__n128 *)(v12 + 40);
        v137 = (__n128 *)(v12 + 80);
        v138 = (__int128 *)(v12 + 120);
        sub_20F28024C(v12, v12 + 40, v12 + 80, v12 + 120, a5);
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(v12 + 152))
        {
          v139 = *v138;
          v271 = *(_OWORD *)(v12 + 136);
          v140 = *(_QWORD *)(v12 + 152);
          v141 = *(_OWORD *)(a2 - 24);
          v142 = *(_OWORD *)(a2 - 40);
          *(_DWORD *)(v12 + 152) = *(_DWORD *)(a2 - 8);
          *v138 = v142;
          *(_OWORD *)(v12 + 136) = v141;
          *(_OWORD *)(a2 - 24) = v271;
          *(_DWORD *)(a2 - 8) = v140;
          *(_OWORD *)(a2 - 40) = v139;
          if (*(_DWORD *)(v12 + 152) > *(_DWORD *)(v12 + 112))
          {
            v143 = *(_QWORD *)(v12 + 112);
            v145 = *v137;
            v144 = *(_OWORD *)(v12 + 96);
            v146 = *(_OWORD *)(v12 + 136);
            *v137 = (__n128)*v138;
            *(_OWORD *)(v12 + 96) = v146;
            *(_DWORD *)(v12 + 112) = *(_DWORD *)(v12 + 152);
            *v138 = (__int128)v145;
            *(_OWORD *)(v12 + 136) = v144;
            *(_DWORD *)(v12 + 152) = v143;
            if (*(_DWORD *)(v12 + 112) > *(_DWORD *)(v12 + 72))
            {
              v147 = *(_QWORD *)(v12 + 72);
              v149 = *v136;
              v148 = *(_OWORD *)(v12 + 56);
              v150 = *(_OWORD *)(v12 + 96);
              *v136 = *v137;
              *(_OWORD *)(v12 + 56) = v150;
              *(_DWORD *)(v12 + 72) = *(_DWORD *)(v12 + 112);
              *v137 = v149;
              *(_OWORD *)(v12 + 96) = v148;
              *(_DWORD *)(v12 + 112) = v147;
              if (*(_DWORD *)(v12 + 72) > *(_DWORD *)(v12 + 32))
              {
                v301 = *(_QWORD *)(v12 + 32);
                v239 = *(__n128 *)v12;
                v272 = *(_OWORD *)(v12 + 16);
                v151 = *(_OWORD *)(v12 + 56);
                *(__n128 *)v12 = *v136;
                *(_OWORD *)(v12 + 16) = v151;
                *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 72);
                *v136 = v239;
                *(_OWORD *)(v12 + 56) = v272;
                *(_DWORD *)(v12 + 72) = v301;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 959)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v163 = (unint64_t)(v14 - 2) >> 1;
              v164 = v163;
              do
              {
                if (v163 >= v164)
                {
                  v166 = (2 * v164) | 1;
                  v167 = v12 + 40 * v166;
                  if (2 * v164 + 2 < v14)
                  {
                    v168 = *(_DWORD *)(v167 + 32);
                    v169 = *(_DWORD *)(v167 + 72);
                    v167 += 40 * (v168 > v169);
                    if (v168 > v169)
                      v166 = 2 * v164 + 2;
                  }
                  v170 = v12 + 40 * v164;
                  v171 = *(_DWORD *)(v170 + 32);
                  if (*(_DWORD *)(v167 + 32) <= v171)
                  {
                    v241 = *(_OWORD *)v170;
                    v274 = *(_OWORD *)(v170 + 16);
                    do
                    {
                      v172 = v170;
                      v170 = v167;
                      v173 = *(_OWORD *)v167;
                      v174 = *(_OWORD *)(v167 + 16);
                      *(_DWORD *)(v172 + 32) = *(_DWORD *)(v167 + 32);
                      *(_OWORD *)v172 = v173;
                      *(_OWORD *)(v172 + 16) = v174;
                      if (v163 < v166)
                        break;
                      v175 = (2 * v166) | 1;
                      v167 = v12 + 40 * v175;
                      v176 = 2 * v166 + 2;
                      if (v176 < v14)
                      {
                        v177 = *(_DWORD *)(v167 + 32);
                        v178 = *(_DWORD *)(v167 + 72);
                        v167 += 40 * (v177 > v178);
                        if (v177 > v178)
                          v175 = v176;
                      }
                      v166 = v175;
                    }
                    while (*(_DWORD *)(v167 + 32) <= v171);
                    *(_OWORD *)v170 = v241;
                    *(_OWORD *)(v170 + 16) = v274;
                    *(_DWORD *)(v170 + 32) = v171;
                  }
                }
                v165 = v164-- <= 0;
              }
              while (!v165);
              v179 = v13 / 0x28uLL;
              do
              {
                v180 = 0;
                v302 = *(_QWORD *)(v12 + 32);
                v242 = *(__n128 *)v12;
                v275 = *(_OWORD *)(v12 + 16);
                v181 = v12;
                do
                {
                  v184 = v181 + 40 * v180 + 40;
                  v185 = (2 * v180) | 1;
                  v186 = 2 * v180 + 2;
                  if (v186 < v179)
                  {
                    v187 = *(_DWORD *)(v184 + 32);
                    v188 = *(_DWORD *)(v184 + 72);
                    v184 += 40 * (v187 > v188);
                    if (v187 > v188)
                      v185 = v186;
                  }
                  v182 = *(_OWORD *)v184;
                  v183 = *(_OWORD *)(v184 + 16);
                  *(_DWORD *)(v181 + 32) = *(_DWORD *)(v184 + 32);
                  *(_OWORD *)v181 = v182;
                  *(_OWORD *)(v181 + 16) = v183;
                  v181 = v184;
                  v180 = v185;
                }
                while (v185 <= (uint64_t)((unint64_t)(v179 - 2) >> 1));
                a2 -= 40;
                if (v184 == a2)
                {
                  *(_DWORD *)(v184 + 32) = v302;
                  *(__n128 *)v184 = v242;
                  *(_OWORD *)(v184 + 16) = v275;
                }
                else
                {
                  v189 = *(_OWORD *)a2;
                  v190 = *(_OWORD *)(a2 + 16);
                  *(_DWORD *)(v184 + 32) = *(_DWORD *)(a2 + 32);
                  *(_OWORD *)v184 = v189;
                  *(_OWORD *)(v184 + 16) = v190;
                  *(_DWORD *)(a2 + 32) = v302;
                  *(__n128 *)a2 = v242;
                  *(_OWORD *)(a2 + 16) = v275;
                  v191 = v184 - v12 + 40;
                  if (v191 >= 41)
                  {
                    v192 = (v191 / 0x28uLL - 2) >> 1;
                    v193 = v12 + 40 * v192;
                    v194 = *(_DWORD *)(v184 + 32);
                    if (*(_DWORD *)(v193 + 32) > v194)
                    {
                      v214 = *(_OWORD *)v184;
                      v217 = *(_OWORD *)(v184 + 16);
                      do
                      {
                        v195 = v184;
                        v184 = v193;
                        v196 = *(_OWORD *)v193;
                        v197 = *(_OWORD *)(v193 + 16);
                        *(_DWORD *)(v195 + 32) = *(_DWORD *)(v193 + 32);
                        *(_OWORD *)v195 = v196;
                        *(_OWORD *)(v195 + 16) = v197;
                        if (!v192)
                          break;
                        v192 = (v192 - 1) >> 1;
                        v193 = v12 + 40 * v192;
                      }
                      while (*(_DWORD *)(v193 + 32) > v194);
                      *(_OWORD *)v184 = v214;
                      *(_OWORD *)(v184 + 16) = v217;
                      *(_DWORD *)(v184 + 32) = v194;
                    }
                  }
                }
                v165 = v179-- <= 2;
              }
              while (!v165);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 40 * ((unint64_t)v14 >> 1);
          v17 = *(_DWORD *)(a2 - 8);
          if ((unint64_t)v13 < 0x1401)
          {
            v21 = *(_DWORD *)(v12 + 32);
            if (v21 <= *(_DWORD *)(v16 + 32))
            {
              if (v17 > v21)
              {
                v284 = *(_QWORD *)(v12 + 32);
                v222 = *(__n128 *)v12;
                v250 = *(_OWORD *)(v12 + 16);
                v28 = *v9;
                v29 = *(_OWORD *)(a2 - 24);
                *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 - 8);
                *(__n128 *)v12 = v28;
                *(_OWORD *)(v12 + 16) = v29;
                *(_DWORD *)(a2 - 8) = v284;
                *v9 = v222;
                *(_OWORD *)(a2 - 24) = v250;
                if (*(_DWORD *)(v12 + 32) > *(_DWORD *)(v16 + 32))
                {
                  v285 = *(_QWORD *)(v16 + 32);
                  v223 = *(__n128 *)v16;
                  v251 = *(_OWORD *)(v16 + 16);
                  v30 = *(__n128 *)v12;
                  v31 = *(_OWORD *)(v12 + 16);
                  *(_DWORD *)(v16 + 32) = *(_DWORD *)(v12 + 32);
                  *(__n128 *)v16 = v30;
                  *(_OWORD *)(v16 + 16) = v31;
                  *(_DWORD *)(v12 + 32) = v285;
                  *(__n128 *)v12 = v223;
                  *(_OWORD *)(v12 + 16) = v251;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v21)
              {
                v288 = *(_QWORD *)(v16 + 32);
                v226 = *(__n128 *)v16;
                v255 = *(_OWORD *)(v16 + 16);
                v52 = *(__n128 *)v12;
                v53 = *(_OWORD *)(v12 + 16);
                *(_DWORD *)(v16 + 32) = *(_DWORD *)(v12 + 32);
                *(__n128 *)v16 = v52;
                *(_OWORD *)(v16 + 16) = v53;
                *(_DWORD *)(v12 + 32) = v288;
                *(__n128 *)v12 = v226;
                *(_OWORD *)(v12 + 16) = v255;
                if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(v12 + 32))
                  goto LABEL_31;
                v281 = *(_QWORD *)(v12 + 32);
                v219 = *(__n128 *)v12;
                v247 = *(_OWORD *)(v12 + 16);
                v54 = *v9;
                v55 = *(_OWORD *)(a2 - 24);
                *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 - 8);
                *(__n128 *)v12 = v54;
                *(_OWORD *)(v12 + 16) = v55;
              }
              else
              {
                v281 = *(_QWORD *)(v16 + 32);
                v219 = *(__n128 *)v16;
                v247 = *(_OWORD *)(v16 + 16);
                v22 = *v9;
                v23 = *(_OWORD *)(a2 - 24);
                *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 - 8);
                *(__n128 *)v16 = v22;
                *(_OWORD *)(v16 + 16) = v23;
              }
              *(_DWORD *)(a2 - 8) = v281;
              *v9 = v219;
              *(_OWORD *)(a2 - 24) = v247;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v56 = *(_DWORD *)(v12 + 32);
            if (*(_DWORD *)(v12 - 8) > v56)
              goto LABEL_56;
            v213 = *(__n128 *)v12;
            v216 = *(_OWORD *)(v12 + 16);
            v112 = *(_DWORD *)(v12 + 32);
            if (v112 <= *(_DWORD *)(a2 - 8))
            {
              v115 = v12 + 40;
              do
              {
                v12 = v115;
                if (v115 >= a2)
                  break;
                v116 = *(_DWORD *)(v115 + 32);
                v115 += 40;
              }
              while (v112 <= v116);
            }
            else
            {
              v113 = v12;
              do
              {
                v12 = v113 + 40;
                v114 = *(_DWORD *)(v113 + 72);
                v113 += 40;
              }
              while (v112 <= v114);
            }
            v117 = a2;
            if (v12 < a2)
            {
              v118 = a2;
              do
              {
                v117 = v118 - 40;
                v119 = *(_DWORD *)(v118 - 8);
                v118 -= 40;
              }
              while (v112 > v119);
            }
            while (v12 < v117)
            {
              v298 = *(_QWORD *)(v12 + 32);
              v236 = *(__n128 *)v12;
              v268 = *(_OWORD *)(v12 + 16);
              v120 = *(_OWORD *)v117;
              v121 = *(_OWORD *)(v117 + 16);
              *(_DWORD *)(v12 + 32) = *(_DWORD *)(v117 + 32);
              *(_OWORD *)v12 = v120;
              *(_OWORD *)(v12 + 16) = v121;
              *(_DWORD *)(v117 + 32) = v298;
              *(__n128 *)v117 = v236;
              *(_OWORD *)(v117 + 16) = v268;
              do
              {
                v122 = *(_DWORD *)(v12 + 72);
                v12 += 40;
              }
              while (v112 <= v122);
              do
              {
                v123 = *(_DWORD *)(v117 - 8);
                v117 -= 40;
              }
              while (v112 > v123);
            }
            v124 = (__n128 *)(v12 - 40);
            if (v12 - 40 != a1)
            {
              v125 = *v124;
              v126 = *(_OWORD *)(v12 - 24);
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(v12 - 8);
              *(__n128 *)a1 = v125;
              *(_OWORD *)(a1 + 16) = v126;
            }
            a4 = 0;
            a5 = v213;
            *v124 = v213;
            *(_OWORD *)(v12 - 24) = v216;
            *(_DWORD *)(v12 - 8) = v112;
            continue;
          }
          v18 = *(_DWORD *)(v16 + 32);
          if (v18 <= *(_DWORD *)(v12 + 32))
          {
            if (v17 > v18)
            {
              v282 = *(_QWORD *)(v16 + 32);
              v220 = *(__n128 *)v16;
              v248 = *(_OWORD *)(v16 + 16);
              v24 = *v9;
              v25 = *(_OWORD *)(a2 - 24);
              *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 - 8);
              *(__n128 *)v16 = v24;
              *(_OWORD *)(v16 + 16) = v25;
              *(_DWORD *)(a2 - 8) = v282;
              *v9 = v220;
              *(_OWORD *)(a2 - 24) = v248;
              if (*(_DWORD *)(v16 + 32) > *(_DWORD *)(v12 + 32))
              {
                v283 = *(_QWORD *)(v12 + 32);
                v221 = *(__n128 *)v12;
                v249 = *(_OWORD *)(v12 + 16);
                v26 = *(__n128 *)v16;
                v27 = *(_OWORD *)(v16 + 16);
                *(_DWORD *)(v12 + 32) = *(_DWORD *)(v16 + 32);
                *(__n128 *)v12 = v26;
                *(_OWORD *)(v12 + 16) = v27;
                *(_DWORD *)(v16 + 32) = v283;
                *(__n128 *)v16 = v221;
                *(_OWORD *)(v16 + 16) = v249;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v286 = *(_QWORD *)(v12 + 32);
              v224 = *(__n128 *)v12;
              v252 = *(_OWORD *)(v12 + 16);
              v32 = *(__n128 *)v16;
              v33 = *(_OWORD *)(v16 + 16);
              *(_DWORD *)(v12 + 32) = *(_DWORD *)(v16 + 32);
              *(__n128 *)v12 = v32;
              *(_OWORD *)(v12 + 16) = v33;
              *(_DWORD *)(v16 + 32) = v286;
              *(__n128 *)v16 = v224;
              *(_OWORD *)(v16 + 16) = v252;
              if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(v16 + 32))
                goto LABEL_22;
              v280 = *(_QWORD *)(v16 + 32);
              v218 = *(__n128 *)v16;
              v246 = *(_OWORD *)(v16 + 16);
              v34 = *v9;
              v35 = *(_OWORD *)(a2 - 24);
              *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 - 8);
              *(__n128 *)v16 = v34;
              *(_OWORD *)(v16 + 16) = v35;
            }
            else
            {
              v280 = *(_QWORD *)(v12 + 32);
              v218 = *(__n128 *)v12;
              v246 = *(_OWORD *)(v12 + 16);
              v19 = *v9;
              v20 = *(_OWORD *)(a2 - 24);
              *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 - 8);
              *(__n128 *)v12 = v19;
              *(_OWORD *)(v12 + 16) = v20;
            }
            *(_DWORD *)(a2 - 8) = v280;
            *v9 = v218;
            *(_OWORD *)(a2 - 24) = v246;
          }
LABEL_22:
          v36 = (__int128 *)(v12 + 40);
          v37 = v12 + 40 * v15;
          v38 = v37 - 40;
          v39 = *(_DWORD *)(v37 - 8);
          v40 = *(_DWORD *)(a2 - 48);
          if (v39 <= *(_DWORD *)(v12 + 72))
          {
            if (v40 > v39)
            {
              v287 = *(_QWORD *)(v38 + 32);
              v225 = *(_OWORD *)v38;
              v253 = *(_OWORD *)(v38 + 16);
              v46 = *v10;
              v47 = *(_OWORD *)(a2 - 64);
              *(_DWORD *)(v38 + 32) = *(_DWORD *)(a2 - 48);
              *(_OWORD *)v38 = v46;
              *(_OWORD *)(v38 + 16) = v47;
              *(_DWORD *)(a2 - 48) = v287;
              *v10 = v225;
              *(_OWORD *)(a2 - 64) = v253;
              if (*(_DWORD *)(v38 + 32) > *(_DWORD *)(v12 + 72))
              {
                v48 = *v36;
                v254 = *(_OWORD *)(v12 + 56);
                v49 = *(_QWORD *)(v12 + 72);
                v51 = *(_OWORD *)v38;
                v50 = *(_OWORD *)(v38 + 16);
                *(_DWORD *)(v12 + 72) = *(_DWORD *)(v38 + 32);
                *v36 = v51;
                *(_OWORD *)(v12 + 56) = v50;
                *(_DWORD *)(v38 + 32) = v49;
                *(_OWORD *)v38 = v48;
                *(_OWORD *)(v38 + 16) = v254;
              }
            }
          }
          else
          {
            if (v40 <= v39)
            {
              v57 = *v36;
              v256 = *(_OWORD *)(v12 + 56);
              v58 = *(_QWORD *)(v12 + 72);
              v60 = *(_OWORD *)v38;
              v59 = *(_OWORD *)(v38 + 16);
              *(_DWORD *)(v12 + 72) = *(_DWORD *)(v38 + 32);
              *v36 = v60;
              *(_OWORD *)(v12 + 56) = v59;
              *(_DWORD *)(v38 + 32) = v58;
              *(_OWORD *)v38 = v57;
              *(_OWORD *)(v38 + 16) = v256;
              if (*(_DWORD *)(a2 - 48) <= v58)
                goto LABEL_36;
              v289 = *(_QWORD *)(v38 + 32);
              v227 = *(_OWORD *)v38;
              v257 = *(_OWORD *)(v38 + 16);
              v61 = *v10;
              v62 = *(_OWORD *)(a2 - 64);
              *(_DWORD *)(v38 + 32) = *(_DWORD *)(a2 - 48);
              *(_OWORD *)v38 = v61;
              *(_OWORD *)(v38 + 16) = v62;
              v41 = v227;
              v42 = v257;
              *(_DWORD *)(a2 - 48) = v289;
            }
            else
            {
              v41 = *v36;
              v42 = *(_OWORD *)(v12 + 56);
              v43 = *(_QWORD *)(v12 + 72);
              v45 = *v10;
              v44 = *(_OWORD *)(a2 - 64);
              *(_DWORD *)(v12 + 72) = *(_DWORD *)(a2 - 48);
              *v36 = v45;
              *(_OWORD *)(v12 + 56) = v44;
              *(_DWORD *)(a2 - 48) = v43;
            }
            *v10 = v41;
            *(_OWORD *)(a2 - 64) = v42;
          }
LABEL_36:
          v63 = (__int128 *)(v12 + 80);
          v64 = v12 + 40 * v15;
          v65 = v64 + 40;
          v66 = *(_DWORD *)(v64 + 72);
          v67 = *(_DWORD *)(a2 - 88);
          if (v66 <= *(_DWORD *)(v12 + 112))
          {
            if (v67 > v66)
            {
              v290 = *(_QWORD *)(v65 + 32);
              v228 = *(_OWORD *)v65;
              v258 = *(_OWORD *)(v65 + 16);
              v73 = *v11;
              v74 = *(_OWORD *)(a2 - 104);
              *(_DWORD *)(v65 + 32) = *(_DWORD *)(a2 - 88);
              *(_OWORD *)v65 = v73;
              *(_OWORD *)(v65 + 16) = v74;
              *(_DWORD *)(a2 - 88) = v290;
              *v11 = v228;
              *(_OWORD *)(a2 - 104) = v258;
              if (*(_DWORD *)(v65 + 32) > *(_DWORD *)(v12 + 112))
              {
                v75 = *v63;
                v259 = *(_OWORD *)(v12 + 96);
                v76 = *(_QWORD *)(v12 + 112);
                v78 = *(_OWORD *)v65;
                v77 = *(_OWORD *)(v65 + 16);
                *(_DWORD *)(v12 + 112) = *(_DWORD *)(v65 + 32);
                *v63 = v78;
                *(_OWORD *)(v12 + 96) = v77;
                *(_DWORD *)(v65 + 32) = v76;
                *(_OWORD *)v65 = v75;
                *(_OWORD *)(v65 + 16) = v259;
              }
            }
          }
          else
          {
            if (v67 <= v66)
            {
              v79 = *v63;
              v260 = *(_OWORD *)(v12 + 96);
              v80 = *(_QWORD *)(v12 + 112);
              v82 = *(_OWORD *)v65;
              v81 = *(_OWORD *)(v65 + 16);
              *(_DWORD *)(v12 + 112) = *(_DWORD *)(v65 + 32);
              *v63 = v82;
              *(_OWORD *)(v12 + 96) = v81;
              *(_DWORD *)(v65 + 32) = v80;
              *(_OWORD *)v65 = v79;
              *(_OWORD *)(v65 + 16) = v260;
              if (*(_DWORD *)(a2 - 88) <= v80)
                goto LABEL_45;
              v291 = *(_QWORD *)(v65 + 32);
              v229 = *(_OWORD *)v65;
              v261 = *(_OWORD *)(v65 + 16);
              v83 = *v11;
              v84 = *(_OWORD *)(a2 - 104);
              *(_DWORD *)(v65 + 32) = *(_DWORD *)(a2 - 88);
              *(_OWORD *)v65 = v83;
              *(_OWORD *)(v65 + 16) = v84;
              v68 = v229;
              v69 = v261;
              *(_DWORD *)(a2 - 88) = v291;
            }
            else
            {
              v68 = *v63;
              v69 = *(_OWORD *)(v12 + 96);
              v70 = *(_QWORD *)(v12 + 112);
              v72 = *v11;
              v71 = *(_OWORD *)(a2 - 104);
              *(_DWORD *)(v12 + 112) = *(_DWORD *)(a2 - 88);
              *v63 = v72;
              *(_OWORD *)(v12 + 96) = v71;
              *(_DWORD *)(a2 - 88) = v70;
            }
            *v11 = v68;
            *(_OWORD *)(a2 - 104) = v69;
          }
LABEL_45:
          v85 = *(_DWORD *)(v16 + 32);
          v86 = *(_DWORD *)(v65 + 32);
          if (v85 <= *(_DWORD *)(v38 + 32))
          {
            if (v86 > v85)
            {
              v293 = *(_QWORD *)(v16 + 32);
              v231 = *(__n128 *)v16;
              v263 = *(_OWORD *)(v16 + 16);
              v88 = *(_OWORD *)(v65 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v65;
              *(_OWORD *)(v16 + 16) = v88;
              *(_DWORD *)(v16 + 32) = *(_DWORD *)(v65 + 32);
              *(_DWORD *)(v65 + 32) = v293;
              *(__n128 *)v65 = v231;
              *(_OWORD *)(v65 + 16) = v263;
              if (*(_DWORD *)(v16 + 32) > *(_DWORD *)(v38 + 32))
              {
                v294 = *(_QWORD *)(v38 + 32);
                v232 = *(_OWORD *)v38;
                v264 = *(_OWORD *)(v38 + 16);
                v89 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v38 = *(_OWORD *)v16;
                *(_OWORD *)(v38 + 16) = v89;
                *(_DWORD *)(v38 + 32) = *(_DWORD *)(v16 + 32);
                *(_DWORD *)(v16 + 32) = v294;
                *(_OWORD *)v16 = v232;
                *(_OWORD *)(v16 + 16) = v264;
              }
            }
          }
          else
          {
            if (v86 <= v85)
            {
              v295 = *(_QWORD *)(v38 + 32);
              v233 = *(_OWORD *)v38;
              v265 = *(_OWORD *)(v38 + 16);
              v90 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v38 = *(_OWORD *)v16;
              *(_OWORD *)(v38 + 16) = v90;
              *(_DWORD *)(v38 + 32) = *(_DWORD *)(v16 + 32);
              *(_DWORD *)(v16 + 32) = v295;
              *(_OWORD *)v16 = v233;
              *(_OWORD *)(v16 + 16) = v265;
              if (*(_DWORD *)(v65 + 32) <= *(_DWORD *)(v16 + 32))
                goto LABEL_54;
              v292 = *(_QWORD *)(v16 + 32);
              v230 = *(__n128 *)v16;
              v262 = *(_OWORD *)(v16 + 16);
              v91 = *(_OWORD *)(v65 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v65;
              *(_OWORD *)(v16 + 16) = v91;
              *(_DWORD *)(v16 + 32) = *(_DWORD *)(v65 + 32);
            }
            else
            {
              v292 = *(_QWORD *)(v38 + 32);
              v230 = *(__n128 *)v38;
              v262 = *(_OWORD *)(v38 + 16);
              v87 = *(_OWORD *)(v65 + 16);
              *(_OWORD *)v38 = *(_OWORD *)v65;
              *(_OWORD *)(v38 + 16) = v87;
              *(_DWORD *)(v38 + 32) = *(_DWORD *)(v65 + 32);
            }
            *(_DWORD *)(v65 + 32) = v292;
            *(__n128 *)v65 = v230;
            *(_OWORD *)(v65 + 16) = v262;
          }
LABEL_54:
          v296 = *(_QWORD *)(v12 + 32);
          v234 = *(__n128 *)v12;
          v266 = *(_OWORD *)(v12 + 16);
          v92 = *(__n128 *)v16;
          v93 = *(_OWORD *)(v16 + 16);
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v16 + 32);
          *(__n128 *)v12 = v92;
          *(_OWORD *)(v12 + 16) = v93;
          *(_DWORD *)(v16 + 32) = v296;
          *(__n128 *)v16 = v234;
          *(_OWORD *)(v16 + 16) = v266;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v56 = *(_DWORD *)(v12 + 32);
LABEL_56:
          v94 = 0;
          v212 = *(__n128 *)v12;
          v215 = *(_OWORD *)(v12 + 16);
          do
          {
            v95 = *(_DWORD *)(v12 + v94 + 72);
            v94 += 40;
          }
          while (v95 > v56);
          v96 = v12 + v94;
          v97 = a2;
          if (v94 == 40)
          {
            v100 = a2;
            while (v96 < v100)
            {
              v98 = v100 - 40;
              v101 = *(_DWORD *)(v100 - 8);
              v100 -= 40;
              if (v101 > v56)
                goto LABEL_64;
            }
            v98 = v100;
            v12 = v96;
          }
          else
          {
            do
            {
              v98 = v97 - 40;
              v99 = *(_DWORD *)(v97 - 8);
              v97 -= 40;
            }
            while (v99 <= v56);
LABEL_64:
            v12 = v96;
            if (v96 < v98)
            {
              v102 = v98;
              do
              {
                v297 = *(_QWORD *)(v12 + 32);
                v235 = *(__n128 *)v12;
                v267 = *(_OWORD *)(v12 + 16);
                v103 = *(_OWORD *)v102;
                v104 = *(_OWORD *)(v102 + 16);
                *(_DWORD *)(v12 + 32) = *(_DWORD *)(v102 + 32);
                *(_OWORD *)v12 = v103;
                *(_OWORD *)(v12 + 16) = v104;
                *(_DWORD *)(v102 + 32) = v297;
                *(__n128 *)v102 = v235;
                *(_OWORD *)(v102 + 16) = v267;
                do
                {
                  v105 = *(_DWORD *)(v12 + 72);
                  v12 += 40;
                }
                while (v105 > v56);
                do
                {
                  v106 = *(_DWORD *)(v102 - 8);
                  v102 -= 40;
                }
                while (v106 <= v56);
              }
              while (v12 < v102);
            }
          }
          v107 = (__n128 *)(v12 - 40);
          if (v12 - 40 != a1)
          {
            v108 = *v107;
            v109 = *(_OWORD *)(v12 - 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v12 - 8);
            *(__n128 *)a1 = v108;
            *(_OWORD *)(a1 + 16) = v109;
          }
          *v107 = v212;
          *(_OWORD *)(v12 - 24) = v215;
          *(_DWORD *)(v12 - 8) = v56;
          if (v96 < v98)
            goto LABEL_75;
          v110 = sub_20F27FD54(a1, v12 - 40, v212);
          if (!sub_20F27FD54(v12, a2, v111))
          {
            if (v110)
              continue;
LABEL_75:
            sub_20F27EDE4(a1, v12 - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 40;
          if (v110)
            return;
          goto LABEL_1;
        }
        v152 = (_OWORD *)(v12 + 40);
        v154 = v12 == a2 || v152 == (_OWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v154)
          {
            v155 = 0;
            v156 = (_OWORD *)v12;
            do
            {
              v158 = *((_DWORD *)v156 + 18);
              v159 = *((_DWORD *)v156 + 8);
              v156 = v152;
              if (v158 > v159)
              {
                v240 = *v152;
                v273 = v152[1];
                v160 = v155;
                do
                {
                  v161 = v12 + v160;
                  v162 = *(_OWORD *)(v12 + v160 + 16);
                  *(_OWORD *)(v161 + 40) = *(_OWORD *)(v12 + v160);
                  *(_OWORD *)(v161 + 56) = v162;
                  *(_DWORD *)(v161 + 72) = *(_DWORD *)(v12 + v160 + 32);
                  if (!v160)
                  {
                    v157 = v12;
                    goto LABEL_119;
                  }
                  v160 -= 40;
                }
                while (v158 > *(_DWORD *)(v161 - 8));
                v157 = v12 + v160 + 40;
LABEL_119:
                *(_OWORD *)v157 = v240;
                *(_OWORD *)(v157 + 16) = v273;
                *(_DWORD *)(v157 + 32) = v158;
              }
              v152 = (_OWORD *)((char *)v156 + 40);
              v155 += 40;
            }
            while ((_OWORD *)((char *)v156 + 40) != (_OWORD *)a2);
          }
        }
        else if (!v154)
        {
          do
          {
            v203 = *(_DWORD *)(a1 + 72);
            v204 = *(_DWORD *)(a1 + 32);
            a1 = (uint64_t)v152;
            if (v203 > v204)
            {
              v244 = *v152;
              v278 = v152[1];
              v205 = v152;
              do
              {
                v206 = *(_OWORD *)((char *)v205 - 24);
                *v205 = *(_OWORD *)((char *)v205 - 40);
                v205[1] = v206;
                *((_DWORD *)v205 + 8) = *((_DWORD *)v205 - 2);
                v207 = *((_DWORD *)v205 - 12);
                v205 = (_OWORD *)((char *)v205 - 40);
              }
              while (v203 > v207);
              *v205 = v244;
              v205[1] = v278;
              *((_DWORD *)v205 + 8) = v203;
            }
            v152 = (_OWORD *)(a1 + 40);
          }
          while (a1 + 40 != a2);
        }
        return;
    }
  }
}

  v9 = (_QWORD *)a2 - 3;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v28 = *((_DWORD *)a2 - 2);
        v29 = *(_DWORD *)(a1 + 16);
        if (v28 == v29)
        {
          if (*v9 >= *(_QWORD *)a1 && (*v9 != *(_QWORD *)a1 || *((_DWORD *)a2 - 4) >= *(_DWORD *)(a1 + 8)))
            return;
        }
        else if (v28 >= v29)
        {
          return;
        }
        v62 = *(_QWORD *)(a1 + 16);
        v60 = *(_OWORD *)a1;
        v50 = *(_OWORD *)v9;
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 - 2);
        *(_OWORD *)a1 = v50;
        *(_OWORD *)v9 = v60;
        *((_DWORD *)a2 - 2) = v62;
        return;
      case 3uLL:
        sub_20F280984((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)((char *)a2 - 24));
        return;
      case 4uLL:
        sub_20F2811EC(a1, a1 + 24, a1 + 48, (uint64_t)a2 - 24);
        return;
      case 5uLL:
        sub_20F281344((__n128 *)a1, a1 + 24, a1 + 48, (__n128 *)(a1 + 72), (__n128 *)((char *)a2 - 24));
        return;
      default:
        if (v13 > 575)
        {
          if (v11 == 1)
          {
            if ((__int128 *)a1 != a2)
            {
              v45 = (v14 - 2) >> 1;
              v46 = v45 + 1;
              v47 = (unint64_t *)(a1 + 24 * v45);
              do
              {
                sub_20F281500(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v13 >> 3), v47);
                v47 -= 3;
                --v46;
              }
              while (v46);
              v48 = v13 / 0x18uLL;
              do
              {
                sub_20F2816B4((__int128 *)a1, (uint64_t)a2, a3, v48);
                a2 = (__int128 *)((char *)a2 - 24);
              }
              while (v48-- > 2);
            }
            return;
          }
          v15 = v14 >> 1;
          v16 = a1 + 24 * (v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            sub_20F280984((__int128 *)v16, (__int128 *)a1, (__int128 *)((char *)a2 - 24));
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            sub_20F280984((__int128 *)a1, (__int128 *)v16, (__int128 *)((char *)a2 - 24));
            v17 = 24 * v15;
            v18 = (__int128 *)(24 * v15 + a1 - 24);
            sub_20F280984((__int128 *)(a1 + 24), v18, a2 - 3);
            v19 = (__int128 *)(a1 + 24 + v17);
            sub_20F280984((__int128 *)(a1 + 48), v19, (__int128 *)((char *)a2 - 72));
            sub_20F280984(v18, (__int128 *)v16, v19);
            v61 = *(_QWORD *)(a1 + 16);
            v59 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v16;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v16 + 16);
            *(_OWORD *)a1 = v20;
            *(_DWORD *)(v16 + 16) = v61;
            *(_OWORD *)v16 = v59;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v21 = *(_DWORD *)(a1 - 8);
          v22 = *(_DWORD *)(a1 + 16);
          v23 = v21 >= v22;
          if (v21 == v22)
          {
            v24 = *(_QWORD *)(a1 - 24);
            if (v24 < *(_QWORD *)a1)
              goto LABEL_15;
            if (v24 != *(_QWORD *)a1)
              goto LABEL_19;
            v23 = *(_DWORD *)(a1 - 16) >= *(_DWORD *)(a1 + 8);
          }
          if (v23)
          {
LABEL_19:
            v10 = sub_20F280B84((uint64_t *)a1, a2);
            goto LABEL_20;
          }
LABEL_15:
          v25 = sub_20F280D70((uint64_t *)a1, (unint64_t)a2);
          if ((v26 & 1) == 0)
            goto LABEL_18;
          v27 = sub_20F280F2C(a1, v25);
          v10 = v25 + 24;
          if (!sub_20F280F2C(v25 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v27)
              continue;
LABEL_18:
            sub_20F2803D4(a1, v25, a3, -v12, a5 & 1);
            v10 = v25 + 24;
LABEL_20:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v25;
          if (v27)
            return;
          goto LABEL_1;
        }
        v30 = (__int128 *)(a1 + 24);
        v32 = (__int128 *)a1 == a2 || v30 == a2;
        if ((a5 & 1) != 0)
        {
          if (v32)
            return;
          v33 = 0;
          v34 = a1;
LABEL_44:
          v36 = v34;
          v34 = (uint64_t)v30;
          v37 = *(_DWORD *)(v36 + 40);
          v38 = *(_DWORD *)(v36 + 16);
          if (v37 == v38)
          {
            v39 = *(_QWORD *)v34;
            if (*(_QWORD *)v34 >= *(_QWORD *)v36
              && (*(_QWORD *)v34 != *(_QWORD *)v36 || *(_DWORD *)(v36 + 32) >= *(_DWORD *)(v36 + 8)))
            {
              goto LABEL_43;
            }
          }
          else
          {
            if (v37 >= v38)
              goto LABEL_43;
            v39 = *(_QWORD *)v34;
          }
          v40 = *(_QWORD *)(v36 + 32);
          *(_OWORD *)v34 = *(_OWORD *)v36;
          *(_DWORD *)(v34 + 16) = *(_DWORD *)(v36 + 16);
          v35 = a1;
          if (v36 == a1)
            goto LABEL_42;
          v41 = v33;
          while (1)
          {
            v42 = a1 + v41;
            v43 = (unint64_t *)(a1 + v41 - 24);
            v44 = *(_DWORD *)(a1 + v41 - 8);
            if (v37 == v44)
            {
              if (v39 >= *v43 && (v39 != *v43 || v40 >= *(_DWORD *)(a1 + v41 - 16)))
              {
                v35 = v36;
                goto LABEL_42;
              }
            }
            else if (v37 >= v44)
            {
              v35 = a1 + v41;
LABEL_42:
              *(_QWORD *)v35 = v39;
              *(_QWORD *)(v35 + 8) = v40;
              *(_DWORD *)(v35 + 16) = v37;
LABEL_43:
              v30 = (__int128 *)(v34 + 24);
              v33 += 24;
              if ((__int128 *)(v34 + 24) == a2)
                return;
              goto LABEL_44;
            }
            v36 -= 24;
            *(_OWORD *)v42 = *(_OWORD *)v43;
            *(_DWORD *)(v42 + 16) = *(_DWORD *)(a1 + v41 - 8);
            v41 -= 24;
            if (!v41)
            {
              v35 = a1;
              goto LABEL_42;
            }
          }
        }
        if (!v32)
        {
          do
          {
            v51 = a1;
            a1 = (uint64_t)v30;
            v52 = *(_DWORD *)(v51 + 40);
            v53 = *(_DWORD *)(v51 + 16);
            if (v52 == v53)
            {
              v54 = *(_QWORD *)v30;
              if (*(_QWORD *)v30 < *(_QWORD *)v51
                || *(_QWORD *)v30 == *(_QWORD *)v51 && *(_DWORD *)(v51 + 32) < *(_DWORD *)(v51 + 8))
              {
                goto LABEL_80;
              }
            }
            else if (v52 < v53)
            {
              v54 = *(_QWORD *)v30;
LABEL_80:
              v55 = *(_QWORD *)(v51 + 32);
              while (2)
              {
                *v30 = *(__int128 *)((char *)v30 - 24);
                *((_DWORD *)v30 + 4) = *((_DWORD *)v30 - 2);
                v57 = *((_DWORD *)v30 - 8);
                v56 = v52 >= v57;
                if (v52 == v57)
                {
                  v58 = *((_QWORD *)v30 - 6);
                  if (v54 >= v58)
                  {
                    if (v54 != v58)
                    {
LABEL_71:
                      *((_QWORD *)v30 - 3) = v54;
                      *((_QWORD *)v30 - 2) = v55;
                      *((_DWORD *)v30 - 2) = v52;
                      break;
                    }
                    v56 = v55 >= *((_DWORD *)v30 - 10);
                    goto LABEL_82;
                  }
                }
                else
                {
LABEL_82:
                  if (v56)
                    goto LABEL_71;
                }
                v30 = (__int128 *)((char *)v30 - 24);
                continue;
              }
            }
            v30 = (__int128 *)(a1 + 24);
          }
          while ((__int128 *)(a1 + 24) != a2);
        }
        return;
    }
  }
}

  v11 = (__int128 *)(a2 - 32);
  v12 = (double *)(a2 - 8);
  v149 = a2 - 96;
  v150 = a2 - 64;
  v151 = (double *)(a2 - 72);
  v152 = (double *)(a2 - 40);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (uint64_t)&a2[-v13];
    v15 = (uint64_t)&a2[-v13] >> 5;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = *((double *)a2 - 1);
        if (result < *(double *)(v13 + 24))
        {
          v214 = *(_QWORD *)(v13 + 16);
          v179 = *(_OWORD *)v13;
          v109 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(v13 + 16) = *((_DWORD *)a2 - 4);
          *(_OWORD *)v13 = v109;
          *((_DWORD *)a2 - 4) = v214;
          *((_OWORD *)a2 - 2) = v179;
          result = *(double *)(v13 + 24);
          *(_QWORD *)(v13 + 24) = *((_QWORD *)a2 - 1);
          *((double *)a2 - 1) = result;
        }
        return result;
      case 3uLL:
        v110 = (double *)(v13 + 24);
        result = *(double *)(v13 + 24);
        v112 = *((double *)a2 - 1);
        v111 = (double *)(a2 - 8);
        v113 = v112;
        v114 = (__int128 *)(v13 + 32);
        v115 = v111 - 3;
        v116 = (double *)(v13 + 56);
        v117 = *(double *)(v13 + 56);
        if (v117 < result)
        {
          if (v113 >= v117)
          {
            v222 = *(_QWORD *)(v13 + 16);
            v185 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v114;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v13 + 48);
            *v114 = v185;
            *(_DWORD *)(v13 + 48) = v222;
            *(double *)(v13 + 24) = v117;
            *(double *)(v13 + 56) = result;
            if (*v111 >= result)
              return result;
            v147 = *v114;
            v223 = *(_QWORD *)(v13 + 48);
            v148 = *((_DWORD *)v111 - 2);
            *v114 = *(_OWORD *)v115;
            *(_DWORD *)(v13 + 48) = v148;
            *((_DWORD *)v111 - 2) = v223;
            *(_OWORD *)v115 = v147;
            v110 = (double *)(v13 + 56);
          }
          else
          {
            v215 = *(_QWORD *)(v13 + 16);
            v180 = *(_OWORD *)v13;
            v118 = *(_OWORD *)v115;
            *(_DWORD *)(v13 + 16) = *((_DWORD *)v111 - 2);
            *(_OWORD *)v13 = v118;
            *((_DWORD *)v111 - 2) = v215;
            *(_OWORD *)v115 = v180;
          }
          v116 = v111;
          goto LABEL_144;
        }
        if (v113 < v117)
        {
          v140 = *v114;
          v219 = *(_QWORD *)(v13 + 48);
          v141 = *((_DWORD *)v111 - 2);
          *v114 = *(_OWORD *)v115;
          *(_DWORD *)(v13 + 48) = v141;
          *((_DWORD *)v111 - 2) = v219;
          *(_OWORD *)v115 = v140;
          *(double *)&v140 = *v116;
          *v116 = *v111;
          *(_QWORD *)v111 = v140;
          result = *v116;
          if (*v116 < *v110)
          {
            v220 = *(_QWORD *)(v13 + 16);
            v183 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v114;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v13 + 48);
            *v114 = v183;
            *(_DWORD *)(v13 + 48) = v220;
LABEL_144:
            result = *v110;
            *v110 = *v116;
            *v116 = result;
            return result;
          }
        }
        return result;
      case 4uLL:
        return sub_20F28F788((__int128 *)v13, (double *)(v13 + 32), (double *)(v13 + 64), (__int128 *)a2 - 2);
      case 5uLL:
        v119 = (__int128 *)(v13 + 32);
        v120 = (__int128 *)(v13 + 64);
        v121 = (__int128 *)(v13 + 96);
        sub_20F28F788((__int128 *)v13, (double *)(v13 + 32), (double *)(v13 + 64), (__int128 *)(v13 + 96));
        result = *((double *)a2 - 1);
        if (result < *(double *)(v13 + 120))
        {
          v122 = *v121;
          v216 = *(_QWORD *)(v13 + 112);
          v123 = *((_DWORD *)a2 - 4);
          *v121 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(v13 + 112) = v123;
          *((_DWORD *)a2 - 4) = v216;
          *((_OWORD *)a2 - 2) = v122;
          *(_QWORD *)&v122 = *(_QWORD *)(v13 + 120);
          *(_QWORD *)(v13 + 120) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v122;
          result = *(double *)(v13 + 120);
          v124 = *(double *)(v13 + 88);
          if (result < v124)
          {
            v125 = *(_QWORD *)(v13 + 80);
            v126 = *v120;
            *v120 = *v121;
            *(_DWORD *)(v13 + 80) = *(_DWORD *)(v13 + 112);
            *v121 = v126;
            *(_DWORD *)(v13 + 112) = v125;
            *(double *)(v13 + 88) = result;
            v127 = *(double *)(v13 + 56);
            *(double *)(v13 + 120) = v124;
            if (result < v127)
            {
              v128 = *(_QWORD *)(v13 + 48);
              v129 = *v119;
              *v119 = *v120;
              *(_DWORD *)(v13 + 48) = *(_DWORD *)(v13 + 80);
              *v120 = v129;
              *(_DWORD *)(v13 + 80) = v128;
              *(double *)(v13 + 56) = result;
              v130 = *(double *)(v13 + 24);
              *(double *)(v13 + 88) = v127;
              if (result < v130)
              {
                v217 = *(_QWORD *)(v13 + 16);
                v181 = *(_OWORD *)v13;
                *(_OWORD *)v13 = *v119;
                *(_DWORD *)(v13 + 16) = *(_DWORD *)(v13 + 48);
                *v119 = v181;
                *(_DWORD *)(v13 + 48) = v217;
                *(double *)(v13 + 24) = result;
                *(double *)(v13 + 56) = v130;
              }
            }
          }
        }
        return result;
      default:
        if (v14 > 767)
        {
          if (!a4)
          {
            if ((char *)v13 != a2)
              sub_20F28F994((char *)v13, a2, a2);
            return result;
          }
          v16 = v15 >> 1;
          v17 = v13 + 32 * (v15 >> 1);
          v18 = *v12;
          if ((unint64_t)v14 > 0x1000)
          {
            v19 = (double *)(v13 + 24);
            v20 = *(double *)(v13 + 24);
            v21 = (double *)(v13 + 24 + 32 * v16);
            v22 = *v21;
            if (*v21 >= v20)
            {
              if (v18 >= v22)
                goto LABEL_22;
              v188 = *(_QWORD *)(v17 + 16);
              v159 = *(_OWORD *)v17;
              v27 = *v11;
              *(_DWORD *)(v17 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v17 = v27;
              *((_DWORD *)a2 - 4) = v188;
              *v11 = v159;
              *(double *)&v27 = *v21;
              *v21 = *v12;
              *(_QWORD *)v12 = v27;
              if (*v21 >= *v19)
              {
LABEL_22:
                v35 = (__int128 *)(v13 + 32);
                v36 = v13 + 32 * v16;
                v38 = *(double *)(v36 - 8);
                v37 = (double *)(v36 - 8);
                v39 = v38;
                v40 = v37 - 3;
                v41 = (double *)(v13 + 56);
                v42 = *(double *)(v13 + 56);
                v43 = *v152;
                if (v38 >= v42)
                {
                  if (v43 >= v39)
                    goto LABEL_35;
                  v195 = *((_QWORD *)v37 - 1);
                  v165 = *(_OWORD *)v40;
                  v46 = *(_OWORD *)v150;
                  *((_DWORD *)v37 - 2) = *((_DWORD *)a2 - 12);
                  *(_OWORD *)v40 = v46;
                  *((_DWORD *)a2 - 12) = v195;
                  *(_OWORD *)v150 = v165;
                  *(double *)&v46 = *v37;
                  *v37 = *v152;
                  *(_QWORD *)v152 = v46;
                  if (*v37 >= *v41)
                  {
LABEL_35:
                    v56 = (__int128 *)(v13 + 64);
                    v57 = v13 + 32 * v16;
                    v59 = *(double *)(v57 + 56);
                    v58 = (double *)(v57 + 56);
                    v60 = v59;
                    v61 = v58 - 3;
                    v62 = (double *)(v13 + 88);
                    v63 = *(double *)(v13 + 88);
                    v64 = *v151;
                    if (v59 >= v63)
                    {
                      if (v64 >= v60)
                        goto LABEL_45;
                      v202 = *((_QWORD *)v58 - 1);
                      v169 = *(_OWORD *)v61;
                      v67 = *(_OWORD *)v149;
                      *((_DWORD *)v58 - 2) = *((_DWORD *)a2 - 20);
                      *(_OWORD *)v61 = v67;
                      *((_DWORD *)a2 - 20) = v202;
                      *(_OWORD *)v149 = v169;
                      *(double *)&v67 = *v58;
                      *v58 = *v151;
                      *(_QWORD *)v151 = v67;
                      v60 = *v58;
                      if (*v58 >= *v62)
                      {
LABEL_45:
                        v75 = *v21;
                        if (*v21 >= *v37)
                        {
                          if (v60 >= v75)
                            goto LABEL_54;
                          v207 = *(_QWORD *)(v17 + 16);
                          v172 = *(_OWORD *)v17;
                          *(_OWORD *)v17 = *(_OWORD *)v61;
                          *(_DWORD *)(v17 + 16) = *((_DWORD *)v58 - 2);
                          *((_DWORD *)v58 - 2) = v207;
                          *(_OWORD *)v61 = v172;
                          v76 = *v21;
                          v77 = *v58;
                          *v21 = *v58;
                          *v58 = v76;
                          if (v77 >= *v37)
                            goto LABEL_54;
                          v208 = *((_QWORD *)v37 - 1);
                          v173 = *(_OWORD *)v40;
                          *(_OWORD *)v40 = *(_OWORD *)v17;
                          *((_DWORD *)v37 - 2) = *(_DWORD *)(v17 + 16);
                          *(_DWORD *)(v17 + 16) = v208;
                          *(_OWORD *)v17 = v173;
                          v58 = v21;
                        }
                        else if (v60 >= v75)
                        {
                          v209 = *((_QWORD *)v37 - 1);
                          v174 = *(_OWORD *)v40;
                          *(_OWORD *)v40 = *(_OWORD *)v17;
                          *((_DWORD *)v37 - 2) = *(_DWORD *)(v17 + 16);
                          *(_DWORD *)(v17 + 16) = v209;
                          *(_OWORD *)v17 = v174;
                          v78 = *v37;
                          *v37 = *v21;
                          *v21 = v78;
                          if (*v58 >= v78)
                          {
LABEL_54:
                            v211 = *(_QWORD *)(v13 + 16);
                            v176 = *(_OWORD *)v13;
                            v80 = *(_OWORD *)v17;
                            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v17 + 16);
                            *(_OWORD *)v13 = v80;
                            *(_DWORD *)(v17 + 16) = v211;
                            *(_OWORD *)v17 = v176;
                            goto LABEL_55;
                          }
                          v210 = *(_QWORD *)(v17 + 16);
                          v175 = *(_OWORD *)v17;
                          *(_OWORD *)v17 = *(_OWORD *)v61;
                          *(_DWORD *)(v17 + 16) = *((_DWORD *)v58 - 2);
                          *((_DWORD *)v58 - 2) = v210;
                          *(_OWORD *)v61 = v175;
                          v37 = v21;
                        }
                        else
                        {
                          v206 = *((_QWORD *)v37 - 1);
                          v171 = *(_OWORD *)v40;
                          *(_OWORD *)v40 = *(_OWORD *)v61;
                          *((_DWORD *)v37 - 2) = *((_DWORD *)v58 - 2);
                          *((_DWORD *)v58 - 2) = v206;
                          *(_OWORD *)v61 = v171;
                        }
                        v79 = *(_QWORD *)v37;
                        *v37 = *v58;
                        *(_QWORD *)v58 = v79;
                        goto LABEL_54;
                      }
                      v68 = *v56;
                      v203 = *(_QWORD *)(v13 + 80);
                      v69 = *((_DWORD *)v58 - 2);
                      *v56 = *(_OWORD *)v61;
                      *(_DWORD *)(v13 + 80) = v69;
                      *((_DWORD *)v58 - 2) = v203;
                      *(_OWORD *)v61 = v68;
                      v70 = v58;
                    }
                    else
                    {
                      if (v64 >= v60)
                      {
                        v71 = *v56;
                        v204 = *(_QWORD *)(v13 + 80);
                        v72 = *((_DWORD *)v58 - 2);
                        *v56 = *(_OWORD *)v61;
                        *(_DWORD *)(v13 + 80) = v72;
                        *((_DWORD *)v58 - 2) = v204;
                        *(_OWORD *)v61 = v71;
                        *v62 = *v58;
                        *v58 = v63;
                        v60 = v63;
                        if (*v151 >= v63)
                          goto LABEL_45;
                        v205 = *((_QWORD *)v58 - 1);
                        v170 = *(_OWORD *)v61;
                        v73 = *(_OWORD *)v149;
                        *((_DWORD *)v58 - 2) = *((_DWORD *)a2 - 20);
                        *(_OWORD *)v61 = v73;
                        *((_DWORD *)a2 - 20) = v205;
                        *(_OWORD *)v149 = v170;
                        v62 = v58;
                      }
                      else
                      {
                        v65 = *v56;
                        v201 = *(_QWORD *)(v13 + 80);
                        v66 = *((_DWORD *)a2 - 20);
                        *v56 = *(_OWORD *)v149;
                        *(_DWORD *)(v13 + 80) = v66;
                        *((_DWORD *)a2 - 20) = v201;
                        *(_OWORD *)v149 = v65;
                      }
                      v70 = (double *)(a2 - 72);
                    }
                    v74 = *v62;
                    *v62 = *v70;
                    *v70 = v74;
                    v60 = *v58;
                    goto LABEL_45;
                  }
                  v47 = *v35;
                  v196 = *(_QWORD *)(v13 + 48);
                  v48 = *((_DWORD *)v37 - 2);
                  *v35 = *(_OWORD *)v40;
                  *(_DWORD *)(v13 + 48) = v48;
                  *((_DWORD *)v37 - 2) = v196;
                  *(_OWORD *)v40 = v47;
                  v49 = v37;
                }
                else
                {
                  if (v43 >= v39)
                  {
                    v52 = *v35;
                    v199 = *(_QWORD *)(v13 + 48);
                    v53 = *((_DWORD *)v37 - 2);
                    *v35 = *(_OWORD *)v40;
                    *(_DWORD *)(v13 + 48) = v53;
                    *((_DWORD *)v37 - 2) = v199;
                    *(_OWORD *)v40 = v52;
                    *v41 = *v37;
                    *v37 = v42;
                    if (*v152 >= v42)
                      goto LABEL_35;
                    v200 = *((_QWORD *)v37 - 1);
                    v168 = *(_OWORD *)v40;
                    v54 = *(_OWORD *)v150;
                    *((_DWORD *)v37 - 2) = *((_DWORD *)a2 - 12);
                    *(_OWORD *)v40 = v54;
                    *((_DWORD *)a2 - 12) = v200;
                    *(_OWORD *)v150 = v168;
                    v41 = v37;
                  }
                  else
                  {
                    v44 = *v35;
                    v194 = *(_QWORD *)(v13 + 48);
                    v45 = *((_DWORD *)a2 - 12);
                    *v35 = *(_OWORD *)v150;
                    *(_DWORD *)(v13 + 48) = v45;
                    *((_DWORD *)a2 - 12) = v194;
                    *(_OWORD *)v150 = v44;
                  }
                  v49 = (double *)(a2 - 40);
                }
                v55 = *v41;
                *v41 = *v49;
                *v49 = v55;
                goto LABEL_35;
              }
              v189 = *(_QWORD *)(v13 + 16);
              v160 = *(_OWORD *)v13;
              v28 = *(_OWORD *)v17;
              *(_DWORD *)(v13 + 16) = *(_DWORD *)(v17 + 16);
              *(_OWORD *)v13 = v28;
              *(_DWORD *)(v17 + 16) = v189;
              *(_OWORD *)v17 = v160;
              v24 = (uint64_t *)(v13 + 24);
              v29 = (char *)(v13 + 24 + 32 * v16);
            }
            else
            {
              if (v18 >= v22)
              {
                v192 = *(_QWORD *)(v13 + 16);
                v163 = *(_OWORD *)v13;
                v32 = *(_OWORD *)v17;
                *(_DWORD *)(v13 + 16) = *(_DWORD *)(v17 + 16);
                *(_OWORD *)v13 = v32;
                *(_DWORD *)(v17 + 16) = v192;
                *(_OWORD *)v17 = v163;
                *(double *)(v13 + 24) = *v21;
                *v21 = v20;
                if (*v12 >= v20)
                  goto LABEL_22;
                v193 = *(_QWORD *)(v17 + 16);
                v164 = *(_OWORD *)v17;
                v33 = *v11;
                *(_DWORD *)(v17 + 16) = *((_DWORD *)a2 - 4);
                *(_OWORD *)v17 = v33;
                *((_DWORD *)a2 - 4) = v193;
                *v11 = v164;
                v24 = (uint64_t *)(v13 + 24 + 32 * v16);
              }
              else
              {
                v186 = *(_QWORD *)(v13 + 16);
                v157 = *(_OWORD *)v13;
                v23 = *v11;
                *(_DWORD *)(v13 + 16) = *((_DWORD *)a2 - 4);
                *(_OWORD *)v13 = v23;
                *((_DWORD *)a2 - 4) = v186;
                *v11 = v157;
                v24 = (uint64_t *)(v13 + 24);
              }
              v29 = a2 - 8;
            }
            v34 = *v24;
            *v24 = *(_QWORD *)v29;
            *(_QWORD *)v29 = v34;
            goto LABEL_22;
          }
          v21 = (double *)(v13 + 24);
          v25 = *(double *)(v13 + 24);
          v19 = (double *)(v13 + 24 + 32 * v16);
          if (v25 < *v19)
          {
            if (v18 >= v25)
            {
              v197 = *(_QWORD *)(v17 + 16);
              v166 = *(_OWORD *)v17;
              v50 = *(_OWORD *)v13;
              *(_DWORD *)(v17 + 16) = *(_DWORD *)(v13 + 16);
              *(_OWORD *)v17 = v50;
              *(_DWORD *)(v13 + 16) = v197;
              *(_OWORD *)v13 = v166;
              *(double *)&v50 = *v19;
              *v19 = v25;
              *(_QWORD *)(v13 + 24) = v50;
              if (*v12 >= *(double *)&v50)
                goto LABEL_56;
              v198 = *(_QWORD *)(v13 + 16);
              v167 = *(_OWORD *)v13;
              v51 = *v11;
              *(_DWORD *)(v13 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v13 = v51;
              *((_DWORD *)a2 - 4) = v198;
              *v11 = v167;
              v19 = (double *)(v13 + 24);
            }
            else
            {
              v187 = *(_QWORD *)(v17 + 16);
              v158 = *(_OWORD *)v17;
              v26 = *v11;
              *(_DWORD *)(v17 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v17 = v26;
              *((_DWORD *)a2 - 4) = v187;
              *v11 = v158;
            }
            v21 = (double *)(a2 - 8);
            goto LABEL_55;
          }
          if (v18 < v25)
          {
            v190 = *(_QWORD *)(v13 + 16);
            v161 = *(_OWORD *)v13;
            v30 = *v11;
            *(_DWORD *)(v13 + 16) = *((_DWORD *)a2 - 4);
            *(_OWORD *)v13 = v30;
            *((_DWORD *)a2 - 4) = v190;
            *v11 = v161;
            *(_QWORD *)&v30 = *(_QWORD *)(v13 + 24);
            *(double *)(v13 + 24) = *v12;
            *(_QWORD *)v12 = v30;
            if (*(double *)(v13 + 24) < *v19)
            {
              v191 = *(_QWORD *)(v17 + 16);
              v162 = *(_OWORD *)v17;
              v31 = *(_OWORD *)v13;
              *(_DWORD *)(v17 + 16) = *(_DWORD *)(v13 + 16);
              *(_OWORD *)v17 = v31;
              *(_DWORD *)(v13 + 16) = v191;
              *(_OWORD *)v13 = v162;
LABEL_55:
              v81 = *v19;
              *v19 = *v21;
              *v21 = v81;
            }
          }
LABEL_56:
          --a4;
          if ((a5 & 1) == 0)
          {
            result = *(double *)(v13 + 24);
            if (*(double *)(v13 - 8) < result)
              goto LABEL_59;
            v156 = *(_QWORD *)(v13 + 16);
            v154 = *(_OWORD *)v13;
            if (result >= *v12)
            {
              v99 = v13 + 32;
              do
              {
                v13 = v99;
                if (v99 >= (unint64_t)a2)
                  break;
                v100 = *(double *)(v99 + 24);
                v99 += 32;
              }
              while (result >= v100);
            }
            else
            {
              v97 = v13;
              do
              {
                v13 = v97 + 32;
                v98 = *(double *)(v97 + 56);
                v97 += 32;
              }
              while (result >= v98);
            }
            v101 = a2;
            if (v13 < (unint64_t)a2)
            {
              v102 = a2;
              do
              {
                v101 = v102 - 32;
                v103 = *((double *)v102 - 1);
                v102 -= 32;
              }
              while (result < v103);
            }
            while (v13 < (unint64_t)v101)
            {
              v213 = *(_QWORD *)(v13 + 16);
              v178 = *(_OWORD *)v13;
              v104 = *(_OWORD *)v101;
              *(_DWORD *)(v13 + 16) = *((_DWORD *)v101 + 4);
              *(_OWORD *)v13 = v104;
              *((_DWORD *)v101 + 4) = v213;
              *(_OWORD *)v101 = v178;
              *(_QWORD *)&v104 = *(_QWORD *)(v13 + 24);
              *(_QWORD *)(v13 + 24) = *((_QWORD *)v101 + 3);
              *((_QWORD *)v101 + 3) = v104;
              do
              {
                v105 = *(double *)(v13 + 56);
                v13 += 32;
              }
              while (result >= v105);
              do
              {
                v106 = *((double *)v101 - 1);
                v101 -= 32;
              }
              while (result < v106);
            }
            v107 = (__int128 *)(v13 - 32);
            if (v13 - 32 != a1)
            {
              v108 = *v107;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 - 16);
              *(_OWORD *)a1 = v108;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(v13 - 8);
            }
            a5 = 0;
            *(_DWORD *)(v13 - 16) = v156;
            *v107 = v154;
            *(double *)(v13 - 8) = result;
            continue;
          }
          result = *(double *)(v13 + 24);
LABEL_59:
          v82 = 0;
          v155 = *(_QWORD *)(v13 + 16);
          v153 = *(_OWORD *)v13;
          do
          {
            v83 = *(double *)(v13 + v82 + 56);
            v82 += 32;
          }
          while (v83 < result);
          v84 = v13 + v82;
          v85 = a2;
          if (v82 == 32)
          {
            v88 = a2;
            while (v84 < (unint64_t)v88)
            {
              v86 = v88 - 32;
              v89 = *((double *)v88 - 1);
              v88 -= 32;
              if (v89 < result)
                goto LABEL_67;
            }
            v86 = v88;
            v13 = v84;
          }
          else
          {
            do
            {
              v86 = v85 - 32;
              v87 = *((double *)v85 - 1);
              v85 -= 32;
            }
            while (v87 >= result);
LABEL_67:
            v13 = v84;
            if (v84 < (unint64_t)v86)
            {
              v90 = (unint64_t)v86;
              do
              {
                v212 = *(_QWORD *)(v13 + 16);
                v177 = *(_OWORD *)v13;
                v91 = *(_OWORD *)v90;
                *(_DWORD *)(v13 + 16) = *(_DWORD *)(v90 + 16);
                *(_OWORD *)v13 = v91;
                *(_DWORD *)(v90 + 16) = v212;
                *(_OWORD *)v90 = v177;
                *(_QWORD *)&v91 = *(_QWORD *)(v13 + 24);
                *(_QWORD *)(v13 + 24) = *(_QWORD *)(v90 + 24);
                *(_QWORD *)(v90 + 24) = v91;
                do
                {
                  v92 = *(double *)(v13 + 56);
                  v13 += 32;
                }
                while (v92 < result);
                do
                {
                  v93 = *(double *)(v90 - 8);
                  v90 -= 32;
                }
                while (v93 >= result);
              }
              while (v13 < v90);
            }
          }
          v94 = (__int128 *)(v13 - 32);
          if (v13 - 32 != a1)
          {
            v95 = *v94;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 - 16);
            *(_OWORD *)a1 = v95;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v13 - 8);
          }
          *(_DWORD *)(v13 - 16) = v155;
          *v94 = v153;
          *(double *)(v13 - 8) = result;
          if (v84 < (unint64_t)v86)
            goto LABEL_78;
          v96 = sub_20F28F264(a1, v13 - 32);
          if (!sub_20F28F264(v13, (uint64_t)a2))
          {
            if (v96)
              continue;
LABEL_78:
            sub_20F28E2B8(a1, v13 - 32, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (char *)(v13 - 32);
          if (v96)
            return result;
          goto LABEL_1;
        }
        v131 = (char *)(v13 + 32);
        v133 = (char *)v13 == a2 || v131 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v133)
          {
            v134 = 0;
            v135 = v13;
            do
            {
              result = *(double *)(v135 + 56);
              v137 = *(double *)(v135 + 24);
              v135 = (unint64_t)v131;
              if (result < v137)
              {
                v218 = *((_QWORD *)v131 + 2);
                v182 = *(_OWORD *)v131;
                v138 = v134;
                do
                {
                  v139 = v13 + v138;
                  *(_OWORD *)(v139 + 32) = *(_OWORD *)(v13 + v138);
                  *(_DWORD *)(v139 + 48) = *(_DWORD *)(v13 + v138 + 16);
                  *(_QWORD *)(v139 + 56) = *(_QWORD *)(v13 + v138 + 24);
                  if (!v138)
                  {
                    v136 = v13;
                    goto LABEL_122;
                  }
                  v138 -= 32;
                }
                while (result < *(double *)(v139 - 8));
                v136 = v13 + v138 + 32;
LABEL_122:
                *(_DWORD *)(v136 + 16) = v218;
                *(_OWORD *)v136 = v182;
                *(double *)(v136 + 24) = result;
              }
              v131 = (char *)(v135 + 32);
              v134 += 32;
            }
            while ((char *)(v135 + 32) != a2);
          }
        }
        else if (!v133)
        {
          v142 = (double *)(v13 + 56);
          do
          {
            result = *(double *)(a1 + 56);
            v143 = *(double *)(a1 + 24);
            a1 = (uint64_t)v131;
            if (result < v143)
            {
              v221 = *((_QWORD *)v131 + 2);
              v184 = *(_OWORD *)v131;
              v144 = v142;
              do
              {
                v145 = v144;
                *(_OWORD *)(v144 - 3) = *(_OWORD *)(v144 - 7);
                *((_DWORD *)v144 - 2) = *((_DWORD *)v144 - 10);
                v146 = *((_QWORD *)v144 - 4);
                v144 -= 4;
                *(_QWORD *)v145 = v146;
              }
              while (result < *(v145 - 8));
              *((_DWORD *)v144 - 2) = v221;
              *(_OWORD *)(v144 - 3) = v184;
              *v144 = result;
            }
            v131 = (char *)(a1 + 32);
            v142 += 4;
          }
          while ((char *)(a1 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = (__int128 *)(a2 - 4);
  v10 = a2 - 1;
  v174 = a2 - 5;
  v11 = a2 - 12;
  v172 = a2 - 8;
  v173 = a2 - 9;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(a2 - 1);
        if (result < *(double *)(v12 + 24))
        {
          v240 = *(_QWORD *)(v12 + 16);
          v203 = *(_OWORD *)v12;
          v108 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 4);
          *(_OWORD *)v12 = v108;
          *((_DWORD *)a2 - 4) = v240;
          *((_OWORD *)a2 - 2) = v203;
          result = *(double *)(v12 + 24);
          *(double *)(v12 + 24) = *(a2 - 1);
          *(a2 - 1) = result;
        }
        return result;
      case 3:
        v109 = (double *)(v12 + 24);
        result = *(double *)(v12 + 24);
        v111 = *(a2 - 1);
        v110 = a2 - 1;
        v112 = v111;
        v113 = (__int128 *)(v12 + 32);
        v114 = v110 - 3;
        v115 = (double *)(v12 + 56);
        v116 = *(double *)(v12 + 56);
        if (v116 < result)
        {
          if (v112 >= v116)
          {
            v250 = *(_QWORD *)(v12 + 16);
            v211 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v113;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 48);
            *v113 = v211;
            *(_DWORD *)(v12 + 48) = v250;
            *(double *)(v12 + 24) = v116;
            *(double *)(v12 + 56) = result;
            if (*v110 >= result)
              return result;
            v170 = *v113;
            v251 = *(_QWORD *)(v12 + 48);
            v171 = *((_DWORD *)v110 - 2);
            *v113 = *(_OWORD *)v114;
            *(_DWORD *)(v12 + 48) = v171;
            *((_DWORD *)v110 - 2) = v251;
            *(_OWORD *)v114 = v170;
            v109 = (double *)(v12 + 56);
          }
          else
          {
            v241 = *(_QWORD *)(v12 + 16);
            v204 = *(_OWORD *)v12;
            v117 = *(_OWORD *)v114;
            *(_DWORD *)(v12 + 16) = *((_DWORD *)v110 - 2);
            *(_OWORD *)v12 = v117;
            *((_DWORD *)v110 - 2) = v241;
            *(_OWORD *)v114 = v204;
          }
          v115 = v110;
          goto LABEL_172;
        }
        if (v112 < v116)
        {
          v163 = *v113;
          v247 = *(_QWORD *)(v12 + 48);
          v164 = *((_DWORD *)v110 - 2);
          *v113 = *(_OWORD *)v114;
          *(_DWORD *)(v12 + 48) = v164;
          *((_DWORD *)v110 - 2) = v247;
          *(_OWORD *)v114 = v163;
          *(double *)&v163 = *v115;
          *v115 = *v110;
          *(_QWORD *)v110 = v163;
          result = *v115;
          if (*v115 < *v109)
          {
            v248 = *(_QWORD *)(v12 + 16);
            v209 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v113;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 48);
            *v113 = v209;
            *(_DWORD *)(v12 + 48) = v248;
LABEL_172:
            result = *v109;
            *v109 = *v115;
            *v115 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_20F28F788((__int128 *)v12, (double *)(v12 + 32), (double *)(v12 + 64), (__int128 *)a2 - 2);
      case 5:
        v118 = (__int128 *)(v12 + 32);
        v119 = (__int128 *)(v12 + 64);
        v120 = (__int128 *)(v12 + 96);
        sub_20F28F788((__int128 *)v12, (double *)(v12 + 32), (double *)(v12 + 64), (__int128 *)(v12 + 96));
        result = *(a2 - 1);
        if (result < *(double *)(v12 + 120))
        {
          v121 = *v120;
          v242 = *(_QWORD *)(v12 + 112);
          v122 = *((_DWORD *)a2 - 4);
          *v120 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(v12 + 112) = v122;
          *((_DWORD *)a2 - 4) = v242;
          *((_OWORD *)a2 - 2) = v121;
          *(_QWORD *)&v121 = *(_QWORD *)(v12 + 120);
          *(double *)(v12 + 120) = *(a2 - 1);
          *((_QWORD *)a2 - 1) = v121;
          result = *(double *)(v12 + 120);
          v123 = *(double *)(v12 + 88);
          if (result < v123)
          {
            v124 = *(_QWORD *)(v12 + 80);
            v125 = *v119;
            *v119 = *v120;
            *(_DWORD *)(v12 + 80) = *(_DWORD *)(v12 + 112);
            *v120 = v125;
            *(_DWORD *)(v12 + 112) = v124;
            *(double *)(v12 + 88) = result;
            v126 = *(double *)(v12 + 56);
            *(double *)(v12 + 120) = v123;
            if (result < v126)
            {
              v127 = *(_QWORD *)(v12 + 48);
              v128 = *v118;
              *v118 = *v119;
              *(_DWORD *)(v12 + 48) = *(_DWORD *)(v12 + 80);
              *v119 = v128;
              *(_DWORD *)(v12 + 80) = v127;
              *(double *)(v12 + 56) = result;
              v129 = *(double *)(v12 + 24);
              *(double *)(v12 + 88) = v126;
              if (result < v129)
              {
                v243 = *(_QWORD *)(v12 + 16);
                v205 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v118;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 48);
                *v118 = v205;
                *(_DWORD *)(v12 + 48) = v243;
                *(double *)(v12 + 24) = result;
                *(double *)(v12 + 56) = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((double *)v12 != a2)
            {
              v139 = (unint64_t)(v14 - 2) >> 1;
              v140 = v139;
              do
              {
                if (v139 >= v140)
                {
                  v142 = (2 * v140) | 1;
                  v143 = v12 + 32 * v142;
                  if (2 * v140 + 2 < v14 && *(double *)(v143 + 24) < *(double *)(v143 + 56))
                  {
                    v143 += 32;
                    v142 = 2 * v140 + 2;
                  }
                  v144 = *(double *)(v12 + 32 * v140 + 24);
                  if (*(double *)(v143 + 24) >= v144)
                  {
                    v145 = v12 + 32 * v140;
                    v245 = *(_QWORD *)(v145 + 16);
                    v207 = *(_OWORD *)v145;
                    do
                    {
                      v146 = v145;
                      v145 = v143;
                      v147 = *(_OWORD *)v143;
                      *(_DWORD *)(v146 + 16) = *(_DWORD *)(v143 + 16);
                      *(_OWORD *)v146 = v147;
                      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v143 + 24);
                      if (v139 < v142)
                        break;
                      v148 = 2 * v142;
                      v142 = (2 * v142) | 1;
                      v143 = v12 + 32 * v142;
                      v149 = v148 + 2;
                      if (v149 < v14 && *(double *)(v143 + 24) < *(double *)(v143 + 56))
                      {
                        v143 += 32;
                        v142 = v149;
                      }
                    }
                    while (*(double *)(v143 + 24) >= v144);
                    *(_DWORD *)(v145 + 16) = v245;
                    *(_OWORD *)v145 = v207;
                    *(double *)(v145 + 24) = v144;
                  }
                }
                v141 = v140-- <= 0;
              }
              while (!v141);
              v150 = (unint64_t)v13 >> 5;
              do
              {
                v151 = 0;
                v152 = a2;
                v180 = *(_QWORD *)(v12 + 16);
                v177 = *(_OWORD *)v12;
                result = *(double *)(v12 + 24);
                v153 = v12;
                do
                {
                  v155 = v153;
                  v153 += 32 * (v151 + 1);
                  v156 = 2 * v151;
                  v151 = (2 * v151) | 1;
                  v157 = v156 + 2;
                  if (v157 < v150 && *(double *)(v153 + 24) < *(double *)(v153 + 56))
                  {
                    v153 += 32;
                    v151 = v157;
                  }
                  v154 = *(_OWORD *)v153;
                  *(_DWORD *)(v155 + 16) = *(_DWORD *)(v153 + 16);
                  *(_OWORD *)v155 = v154;
                  *(_QWORD *)(v155 + 24) = *(_QWORD *)(v153 + 24);
                }
                while (v151 <= (uint64_t)((unint64_t)(v150 - 2) >> 1));
                a2 -= 4;
                if ((double *)v153 == v152 - 4)
                {
                  *(_DWORD *)(v153 + 16) = v180;
                  *(_OWORD *)v153 = v177;
                  *(double *)(v153 + 24) = result;
                }
                else
                {
                  v158 = *(_OWORD *)a2;
                  *(_DWORD *)(v153 + 16) = *((_DWORD *)v152 - 4);
                  *(_OWORD *)v153 = v158;
                  *(double *)(v153 + 24) = *(v152 - 1);
                  *((_DWORD *)v152 - 4) = v180;
                  *(_OWORD *)a2 = v177;
                  *(v152 - 1) = result;
                  v159 = v153 - v12 + 32;
                  if (v159 >= 33)
                  {
                    v160 = (((unint64_t)v159 >> 5) - 2) >> 1;
                    result = *(double *)(v153 + 24);
                    if (*(double *)(v12 + 32 * v160 + 24) < result)
                    {
                      v246 = *(_QWORD *)(v153 + 16);
                      v208 = *(_OWORD *)v153;
                      do
                      {
                        v161 = v153;
                        v153 = v12 + 32 * v160;
                        v162 = *(_OWORD *)v153;
                        *(_DWORD *)(v161 + 16) = *(_DWORD *)(v153 + 16);
                        *(_OWORD *)v161 = v162;
                        *(_QWORD *)(v161 + 24) = *(_QWORD *)(v153 + 24);
                        if (!v160)
                          break;
                        v160 = (v160 - 1) >> 1;
                      }
                      while (*(double *)(v12 + 32 * v160 + 24) < result);
                      *(_DWORD *)(v153 + 16) = v246;
                      *(_OWORD *)v153 = v208;
                      *(double *)(v153 + 24) = result;
                    }
                  }
                }
                v141 = v150-- <= 2;
              }
              while (!v141);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 32 * ((unint64_t)v14 >> 1);
          v17 = *v10;
          if ((unint64_t)v13 > 0x1000)
          {
            v18 = (double *)(v12 + 24);
            v19 = *(double *)(v12 + 24);
            v20 = (double *)(v12 + 24 + 32 * v15);
            v21 = *v20;
            if (*v20 >= v19)
            {
              if (v17 >= v21)
                goto LABEL_22;
              v214 = *(_QWORD *)(v16 + 16);
              v183 = *(_OWORD *)v16;
              v26 = *v9;
              *(_DWORD *)(v16 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v16 = v26;
              *((_DWORD *)a2 - 4) = v214;
              *v9 = v183;
              *(double *)&v26 = *v20;
              *v20 = *v10;
              *(_QWORD *)v10 = v26;
              if (*v20 >= *v18)
              {
LABEL_22:
                v34 = (__int128 *)(v12 + 32);
                v35 = v12 + 32 * v15;
                v37 = *(double *)(v35 - 8);
                v36 = (double *)(v35 - 8);
                v38 = v37;
                v39 = v36 - 3;
                v40 = (double *)(v12 + 56);
                v41 = *(double *)(v12 + 56);
                v42 = *v174;
                if (v37 >= v41)
                {
                  if (v42 >= v38)
                    goto LABEL_35;
                  v221 = *((_QWORD *)v36 - 1);
                  v189 = *(_OWORD *)v39;
                  v45 = *(_OWORD *)v172;
                  *((_DWORD *)v36 - 2) = *((_DWORD *)a2 - 12);
                  *(_OWORD *)v39 = v45;
                  *((_DWORD *)a2 - 12) = v221;
                  *(_OWORD *)v172 = v189;
                  *(double *)&v45 = *v36;
                  *v36 = *v174;
                  *(_QWORD *)v174 = v45;
                  if (*v36 >= *v40)
                  {
LABEL_35:
                    v55 = (__int128 *)(v12 + 64);
                    v56 = v12 + 32 * v15;
                    v58 = *(double *)(v56 + 56);
                    v57 = (double *)(v56 + 56);
                    v59 = v58;
                    v60 = v57 - 3;
                    v61 = (double *)(v12 + 88);
                    v62 = *(double *)(v12 + 88);
                    v63 = *v173;
                    if (v58 >= v62)
                    {
                      if (v63 >= v59)
                        goto LABEL_45;
                      v228 = *((_QWORD *)v57 - 1);
                      v193 = *(_OWORD *)v60;
                      v66 = *(_OWORD *)v11;
                      *((_DWORD *)v57 - 2) = *((_DWORD *)a2 - 20);
                      *(_OWORD *)v60 = v66;
                      *((_DWORD *)a2 - 20) = v228;
                      *(_OWORD *)v11 = v193;
                      *(double *)&v66 = *v57;
                      *v57 = *v173;
                      *(_QWORD *)v173 = v66;
                      v59 = *v57;
                      if (*v57 >= *v61)
                      {
LABEL_45:
                        v74 = *v20;
                        if (*v20 >= *v36)
                        {
                          if (v59 >= v74)
                            goto LABEL_54;
                          v233 = *(_QWORD *)(v16 + 16);
                          v196 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = *(_OWORD *)v60;
                          *(_DWORD *)(v16 + 16) = *((_DWORD *)v57 - 2);
                          *((_DWORD *)v57 - 2) = v233;
                          *(_OWORD *)v60 = v196;
                          v75 = *v20;
                          v76 = *v57;
                          *v20 = *v57;
                          *v57 = v75;
                          if (v76 >= *v36)
                            goto LABEL_54;
                          v234 = *((_QWORD *)v36 - 1);
                          v197 = *(_OWORD *)v39;
                          *(_OWORD *)v39 = *(_OWORD *)v16;
                          *((_DWORD *)v36 - 2) = *(_DWORD *)(v16 + 16);
                          *(_DWORD *)(v16 + 16) = v234;
                          *(_OWORD *)v16 = v197;
                          v57 = v20;
                        }
                        else if (v59 >= v74)
                        {
                          v235 = *((_QWORD *)v36 - 1);
                          v198 = *(_OWORD *)v39;
                          *(_OWORD *)v39 = *(_OWORD *)v16;
                          *((_DWORD *)v36 - 2) = *(_DWORD *)(v16 + 16);
                          *(_DWORD *)(v16 + 16) = v235;
                          *(_OWORD *)v16 = v198;
                          v77 = *v36;
                          *v36 = *v20;
                          *v20 = v77;
                          if (*v57 >= v77)
                          {
LABEL_54:
                            v237 = *(_QWORD *)(v12 + 16);
                            v200 = *(_OWORD *)v12;
                            v79 = *(_OWORD *)v16;
                            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                            *(_OWORD *)v12 = v79;
                            *(_DWORD *)(v16 + 16) = v237;
                            *(_OWORD *)v16 = v200;
                            goto LABEL_55;
                          }
                          v236 = *(_QWORD *)(v16 + 16);
                          v199 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = *(_OWORD *)v60;
                          *(_DWORD *)(v16 + 16) = *((_DWORD *)v57 - 2);
                          *((_DWORD *)v57 - 2) = v236;
                          *(_OWORD *)v60 = v199;
                          v36 = v20;
                        }
                        else
                        {
                          v232 = *((_QWORD *)v36 - 1);
                          v195 = *(_OWORD *)v39;
                          *(_OWORD *)v39 = *(_OWORD *)v60;
                          *((_DWORD *)v36 - 2) = *((_DWORD *)v57 - 2);
                          *((_DWORD *)v57 - 2) = v232;
                          *(_OWORD *)v60 = v195;
                        }
                        v78 = *(_QWORD *)v36;
                        *v36 = *v57;
                        *(_QWORD *)v57 = v78;
                        goto LABEL_54;
                      }
                      v67 = *v55;
                      v229 = *(_QWORD *)(v12 + 80);
                      v68 = *((_DWORD *)v57 - 2);
                      *v55 = *(_OWORD *)v60;
                      *(_DWORD *)(v12 + 80) = v68;
                      *((_DWORD *)v57 - 2) = v229;
                      *(_OWORD *)v60 = v67;
                      v69 = v57;
                    }
                    else
                    {
                      if (v63 >= v59)
                      {
                        v70 = *v55;
                        v230 = *(_QWORD *)(v12 + 80);
                        v71 = *((_DWORD *)v57 - 2);
                        *v55 = *(_OWORD *)v60;
                        *(_DWORD *)(v12 + 80) = v71;
                        *((_DWORD *)v57 - 2) = v230;
                        *(_OWORD *)v60 = v70;
                        *v61 = *v57;
                        *v57 = v62;
                        v59 = v62;
                        if (*v173 >= v62)
                          goto LABEL_45;
                        v231 = *((_QWORD *)v57 - 1);
                        v194 = *(_OWORD *)v60;
                        v72 = *(_OWORD *)v11;
                        *((_DWORD *)v57 - 2) = *((_DWORD *)a2 - 20);
                        *(_OWORD *)v60 = v72;
                        *((_DWORD *)a2 - 20) = v231;
                        *(_OWORD *)v11 = v194;
                        v61 = v57;
                      }
                      else
                      {
                        v64 = *v55;
                        v227 = *(_QWORD *)(v12 + 80);
                        v65 = *((_DWORD *)a2 - 20);
                        *v55 = *(_OWORD *)v11;
                        *(_DWORD *)(v12 + 80) = v65;
                        *((_DWORD *)a2 - 20) = v227;
                        *(_OWORD *)v11 = v64;
                      }
                      v69 = a2 - 9;
                    }
                    v73 = *v61;
                    *v61 = *v69;
                    *v69 = v73;
                    v59 = *v57;
                    goto LABEL_45;
                  }
                  v46 = *v34;
                  v222 = *(_QWORD *)(v12 + 48);
                  v47 = *((_DWORD *)v36 - 2);
                  *v34 = *(_OWORD *)v39;
                  *(_DWORD *)(v12 + 48) = v47;
                  *((_DWORD *)v36 - 2) = v222;
                  *(_OWORD *)v39 = v46;
                  v48 = v36;
                }
                else
                {
                  if (v42 >= v38)
                  {
                    v51 = *v34;
                    v225 = *(_QWORD *)(v12 + 48);
                    v52 = *((_DWORD *)v36 - 2);
                    *v34 = *(_OWORD *)v39;
                    *(_DWORD *)(v12 + 48) = v52;
                    *((_DWORD *)v36 - 2) = v225;
                    *(_OWORD *)v39 = v51;
                    *v40 = *v36;
                    *v36 = v41;
                    if (*v174 >= v41)
                      goto LABEL_35;
                    v226 = *((_QWORD *)v36 - 1);
                    v192 = *(_OWORD *)v39;
                    v53 = *(_OWORD *)v172;
                    *((_DWORD *)v36 - 2) = *((_DWORD *)a2 - 12);
                    *(_OWORD *)v39 = v53;
                    *((_DWORD *)a2 - 12) = v226;
                    *(_OWORD *)v172 = v192;
                    v40 = v36;
                  }
                  else
                  {
                    v43 = *v34;
                    v220 = *(_QWORD *)(v12 + 48);
                    v44 = *((_DWORD *)a2 - 12);
                    *v34 = *(_OWORD *)v172;
                    *(_DWORD *)(v12 + 48) = v44;
                    *((_DWORD *)a2 - 12) = v220;
                    *(_OWORD *)v172 = v43;
                  }
                  v48 = a2 - 5;
                }
                v54 = *v40;
                *v40 = *v48;
                *v48 = v54;
                goto LABEL_35;
              }
              v215 = *(_QWORD *)(v12 + 16);
              v184 = *(_OWORD *)v12;
              v27 = *(_OWORD *)v16;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
              *(_OWORD *)v12 = v27;
              *(_DWORD *)(v16 + 16) = v215;
              *(_OWORD *)v16 = v184;
              v23 = (uint64_t *)(v12 + 24);
              v28 = (double *)(v12 + 24 + 32 * v15);
            }
            else
            {
              if (v17 >= v21)
              {
                v218 = *(_QWORD *)(v12 + 16);
                v187 = *(_OWORD *)v12;
                v31 = *(_OWORD *)v16;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(_OWORD *)v12 = v31;
                *(_DWORD *)(v16 + 16) = v218;
                *(_OWORD *)v16 = v187;
                *(double *)(v12 + 24) = *v20;
                *v20 = v19;
                if (*v10 >= v19)
                  goto LABEL_22;
                v219 = *(_QWORD *)(v16 + 16);
                v188 = *(_OWORD *)v16;
                v32 = *v9;
                *(_DWORD *)(v16 + 16) = *((_DWORD *)a2 - 4);
                *(_OWORD *)v16 = v32;
                *((_DWORD *)a2 - 4) = v219;
                *v9 = v188;
                v23 = (uint64_t *)(v12 + 24 + 32 * v15);
              }
              else
              {
                v212 = *(_QWORD *)(v12 + 16);
                v181 = *(_OWORD *)v12;
                v22 = *v9;
                *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 4);
                *(_OWORD *)v12 = v22;
                *((_DWORD *)a2 - 4) = v212;
                *v9 = v181;
                v23 = (uint64_t *)(v12 + 24);
              }
              v28 = a2 - 1;
            }
            v33 = *v23;
            *v23 = *(_QWORD *)v28;
            *(_QWORD *)v28 = v33;
            goto LABEL_22;
          }
          v20 = (double *)(v12 + 24);
          v24 = *(double *)(v12 + 24);
          v18 = (double *)(v12 + 24 + 32 * v15);
          if (v24 < *v18)
          {
            if (v17 >= v24)
            {
              v223 = *(_QWORD *)(v16 + 16);
              v190 = *(_OWORD *)v16;
              v49 = *(_OWORD *)v12;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
              *(_OWORD *)v16 = v49;
              *(_DWORD *)(v12 + 16) = v223;
              *(_OWORD *)v12 = v190;
              *(double *)&v49 = *v18;
              *v18 = v24;
              *(_QWORD *)(v12 + 24) = v49;
              if (*v10 >= *(double *)&v49)
                goto LABEL_56;
              v224 = *(_QWORD *)(v12 + 16);
              v191 = *(_OWORD *)v12;
              v50 = *v9;
              *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v12 = v50;
              *((_DWORD *)a2 - 4) = v224;
              *v9 = v191;
              v18 = (double *)(v12 + 24);
            }
            else
            {
              v213 = *(_QWORD *)(v16 + 16);
              v182 = *(_OWORD *)v16;
              v25 = *v9;
              *(_DWORD *)(v16 + 16) = *((_DWORD *)a2 - 4);
              *(_OWORD *)v16 = v25;
              *((_DWORD *)a2 - 4) = v213;
              *v9 = v182;
            }
            v20 = a2 - 1;
            goto LABEL_55;
          }
          if (v17 < v24)
          {
            v216 = *(_QWORD *)(v12 + 16);
            v185 = *(_OWORD *)v12;
            v29 = *v9;
            *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 4);
            *(_OWORD *)v12 = v29;
            *((_DWORD *)a2 - 4) = v216;
            *v9 = v185;
            *(_QWORD *)&v29 = *(_QWORD *)(v12 + 24);
            *(double *)(v12 + 24) = *v10;
            *(_QWORD *)v10 = v29;
            if (*(double *)(v12 + 24) < *v18)
            {
              v217 = *(_QWORD *)(v16 + 16);
              v186 = *(_OWORD *)v16;
              v30 = *(_OWORD *)v12;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
              *(_OWORD *)v16 = v30;
              *(_DWORD *)(v12 + 16) = v217;
              *(_OWORD *)v12 = v186;
LABEL_55:
              v80 = *v18;
              *v18 = *v20;
              *v20 = v80;
            }
          }
LABEL_56:
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(double *)(v12 + 24);
            if (*(double *)(v12 - 8) < result)
              goto LABEL_59;
            v179 = *(_QWORD *)(v12 + 16);
            v176 = *(_OWORD *)v12;
            if (result >= *v10)
            {
              v98 = v12 + 32;
              do
              {
                v12 = v98;
                if (v98 >= (unint64_t)a2)
                  break;
                v99 = *(double *)(v98 + 24);
                v98 += 32;
              }
              while (result >= v99);
            }
            else
            {
              v96 = v12;
              do
              {
                v12 = v96 + 32;
                v97 = *(double *)(v96 + 56);
                v96 += 32;
              }
              while (result >= v97);
            }
            v100 = a2;
            if (v12 < (unint64_t)a2)
            {
              v101 = a2;
              do
              {
                v100 = v101 - 4;
                v102 = *(v101 - 1);
                v101 -= 4;
              }
              while (result < v102);
            }
            while (v12 < (unint64_t)v100)
            {
              v239 = *(_QWORD *)(v12 + 16);
              v202 = *(_OWORD *)v12;
              v103 = *(_OWORD *)v100;
              *(_DWORD *)(v12 + 16) = *((_DWORD *)v100 + 4);
              *(_OWORD *)v12 = v103;
              *((_DWORD *)v100 + 4) = v239;
              *(_OWORD *)v100 = v202;
              *(_QWORD *)&v103 = *(_QWORD *)(v12 + 24);
              *(double *)(v12 + 24) = v100[3];
              *((_QWORD *)v100 + 3) = v103;
              do
              {
                v104 = *(double *)(v12 + 56);
                v12 += 32;
              }
              while (result >= v104);
              do
              {
                v105 = *(v100 - 1);
                v100 -= 4;
              }
              while (result < v105);
            }
            v106 = (__int128 *)(v12 - 32);
            if (v12 - 32 != a1)
            {
              v107 = *v106;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 16);
              *(_OWORD *)a1 = v107;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 - 8);
            }
            a4 = 0;
            *(_DWORD *)(v12 - 16) = v179;
            *v106 = v176;
            *(double *)(v12 - 8) = result;
            continue;
          }
          result = *(double *)(v12 + 24);
LABEL_59:
          v81 = 0;
          v178 = *(_QWORD *)(v12 + 16);
          v175 = *(_OWORD *)v12;
          do
          {
            v82 = *(double *)(v12 + v81 + 56);
            v81 += 32;
          }
          while (v82 < result);
          v83 = v12 + v81;
          v84 = a2;
          if (v81 == 32)
          {
            v87 = a2;
            while (v83 < (unint64_t)v87)
            {
              v85 = v87 - 4;
              v88 = *(v87 - 1);
              v87 -= 4;
              if (v88 < result)
                goto LABEL_67;
            }
            v85 = v87;
            v12 = v83;
          }
          else
          {
            do
            {
              v85 = v84 - 4;
              v86 = *(v84 - 1);
              v84 -= 4;
            }
            while (v86 >= result);
LABEL_67:
            v12 = v83;
            if (v83 < (unint64_t)v85)
            {
              v89 = (unint64_t)v85;
              do
              {
                v238 = *(_QWORD *)(v12 + 16);
                v201 = *(_OWORD *)v12;
                v90 = *(_OWORD *)v89;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v89 + 16);
                *(_OWORD *)v12 = v90;
                *(_DWORD *)(v89 + 16) = v238;
                *(_OWORD *)v89 = v201;
                *(_QWORD *)&v90 = *(_QWORD *)(v12 + 24);
                *(_QWORD *)(v12 + 24) = *(_QWORD *)(v89 + 24);
                *(_QWORD *)(v89 + 24) = v90;
                do
                {
                  v91 = *(double *)(v12 + 56);
                  v12 += 32;
                }
                while (v91 < result);
                do
                {
                  v92 = *(double *)(v89 - 8);
                  v89 -= 32;
                }
                while (v92 >= result);
              }
              while (v12 < v89);
            }
          }
          v93 = (__int128 *)(v12 - 32);
          if (v12 - 32 != a1)
          {
            v94 = *v93;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 16);
            *(_OWORD *)a1 = v94;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 - 8);
          }
          *(_DWORD *)(v12 - 16) = v178;
          *v93 = v175;
          *(double *)(v12 - 8) = result;
          if (v83 < (unint64_t)v85)
            goto LABEL_78;
          v95 = sub_20F291B48(a1, v12 - 32);
          if (!sub_20F291B48(v12, (uint64_t)a2))
          {
            if (v95)
              continue;
LABEL_78:
            sub_20F290958(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (double *)(v12 - 32);
          if (v95)
            return result;
          goto LABEL_1;
        }
        v130 = (double *)(v12 + 32);
        v132 = (double *)v12 == a2 || v130 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v132)
          {
            v133 = 0;
            v134 = v12;
            do
            {
              result = *(double *)(v134 + 56);
              v136 = *(double *)(v134 + 24);
              v134 = (unint64_t)v130;
              if (result < v136)
              {
                v244 = *((_QWORD *)v130 + 2);
                v206 = *(_OWORD *)v130;
                v137 = v133;
                do
                {
                  v138 = v12 + v137;
                  *(_OWORD *)(v138 + 32) = *(_OWORD *)(v12 + v137);
                  *(_DWORD *)(v138 + 48) = *(_DWORD *)(v12 + v137 + 16);
                  *(_QWORD *)(v138 + 56) = *(_QWORD *)(v12 + v137 + 24);
                  if (!v137)
                  {
                    v135 = v12;
                    goto LABEL_122;
                  }
                  v137 -= 32;
                }
                while (result < *(double *)(v138 - 8));
                v135 = v12 + v137 + 32;
LABEL_122:
                *(_DWORD *)(v135 + 16) = v244;
                *(_OWORD *)v135 = v206;
                *(double *)(v135 + 24) = result;
              }
              v130 = (double *)(v134 + 32);
              v133 += 32;
            }
            while ((double *)(v134 + 32) != a2);
          }
        }
        else if (!v132)
        {
          v165 = (double *)(v12 + 56);
          do
          {
            result = *(double *)(a1 + 56);
            v166 = *(double *)(a1 + 24);
            a1 = (uint64_t)v130;
            if (result < v166)
            {
              v249 = *((_QWORD *)v130 + 2);
              v210 = *(_OWORD *)v130;
              v167 = v165;
              do
              {
                v168 = v167;
                *(_OWORD *)(v167 - 3) = *(_OWORD *)(v167 - 7);
                *((_DWORD *)v167 - 2) = *((_DWORD *)v167 - 10);
                v169 = *((_QWORD *)v167 - 4);
                v167 -= 4;
                *(_QWORD *)v168 = v169;
              }
              while (result < *(v168 - 8));
              *((_DWORD *)v167 - 2) = v249;
              *(_OWORD *)(v167 - 3) = v210;
              *v167 = result;
            }
            v130 = (double *)(a1 + 32);
            v165 += 4;
          }
          while ((double *)(a1 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = (unint64_t *)(a2 - 24);
  v10 = (unint64_t *)(a2 - 48);
  v11 = (unint64_t *)(a2 - 72);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *(_QWORD *)(a2 - 24);
        v88 = (__n128 *)(a2 - 24);
        if (v89 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v90 = (__n128 *)(v12 + 24);
        v91 = *(_QWORD *)(v12 + 24);
        v93 = *(_QWORD *)(a2 - 24);
        v88 = (__n128 *)(a2 - 24);
        v92 = v93;
        if (v91 < *(_QWORD *)v12)
        {
          if (v92 >= v91)
          {
            v201 = *(_QWORD *)(v12 + 16);
            v177 = *(__n128 *)v12;
            *(__n128 *)v12 = *v90;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
            result = v177;
            *v90 = v177;
            *(_DWORD *)(v12 + 40) = v201;
            if (v88->n128_u64[0] >= *(_QWORD *)(v12 + 24))
              return result;
            result = *v90;
            v146 = *(_QWORD *)(v12 + 40);
            v147 = v88[1].n128_i32[0];
            *v90 = *v88;
            *(_DWORD *)(v12 + 40) = v147;
            v88[1].n128_u32[0] = v146;
          }
          else
          {
LABEL_100:
            v197 = *(_QWORD *)(v12 + 16);
            v170 = *(__n128 *)v12;
            v94 = *v88;
            *(_DWORD *)(v12 + 16) = v88[1].n128_u32[0];
            *(__n128 *)v12 = v94;
            result = v170;
            v88[1].n128_u32[0] = v197;
          }
          *v88 = result;
          return result;
        }
        if (v92 < v91)
        {
          result = *v90;
          v141 = *(_QWORD *)(v12 + 40);
          v142 = v88[1].n128_i32[0];
          *v90 = *v88;
          *(_DWORD *)(v12 + 40) = v142;
          v88[1].n128_u32[0] = v141;
          *v88 = result;
          if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
          {
            v200 = *(_QWORD *)(v12 + 16);
            v175 = *(__n128 *)v12;
            *(__n128 *)v12 = *v90;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
            result = v175;
            *v90 = v175;
            *(_DWORD *)(v12 + 40) = v200;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_20F33F0B8((__n128 *)v12, (_QWORD *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(a2 - 24), result).n128_u64[0];
        return result;
      case 5:
        v95 = (__n128 *)(v12 + 24);
        v96 = (__n128 *)(v12 + 48);
        v97 = (__n128 *)(v12 + 72);
        result.n128_u64[0] = sub_20F33F0B8((__n128 *)v12, (_QWORD *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), result).n128_u64[0];
        v99 = *(_QWORD *)(a2 - 24);
        v98 = (__n128 *)(a2 - 24);
        if (v99 < *(_QWORD *)(v12 + 72))
        {
          result = *v97;
          v100 = *(_QWORD *)(v12 + 88);
          v101 = v98[1].n128_u32[0];
          *v97 = *v98;
          *(_DWORD *)(v12 + 88) = v101;
          v98[1].n128_u32[0] = v100;
          *v98 = result;
          if (v97->n128_u64[0] < v96->n128_u64[0])
          {
            v102 = *(_QWORD *)(v12 + 64);
            result = *v96;
            *v96 = *v97;
            *(_DWORD *)(v12 + 64) = *(_DWORD *)(v12 + 88);
            *v97 = result;
            *(_DWORD *)(v12 + 88) = v102;
            if (v96->n128_u64[0] < v95->n128_u64[0])
            {
              v103 = *(_QWORD *)(v12 + 40);
              result = *v95;
              *v95 = *v96;
              *(_DWORD *)(v12 + 40) = *(_DWORD *)(v12 + 64);
              *v96 = result;
              *(_DWORD *)(v12 + 64) = v103;
              if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
              {
                v198 = *(_QWORD *)(v12 + 16);
                v171 = *(__n128 *)v12;
                *(__n128 *)v12 = *v95;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
                result = v171;
                *v95 = v171;
                *(_DWORD *)(v12 + 40) = v198;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if (v12 == a2)
              return result;
            v114 = (unint64_t)(v14 - 2) >> 1;
            v115 = v114;
            while (1)
            {
              if (v114 >= v115)
              {
                v117 = (2 * v115) | 1;
                v118 = v12 + 24 * v117;
                if (2 * v115 + 2 >= v14)
                {
                  v121 = v12 + 24 * v115;
                  v122 = *(_QWORD *)v121;
                  if (*(_QWORD *)v118 >= *(_QWORD *)v121)
                    goto LABEL_138;
                }
                else
                {
                  v119 = *(_QWORD *)(v118 + 24);
                  v120 = *(_QWORD *)v118 >= v119;
                  if (*(_QWORD *)v118 > v119)
                    v119 = *(_QWORD *)v118;
                  if (!v120)
                  {
                    v118 += 24;
                    v117 = 2 * v115 + 2;
                  }
                  v121 = v12 + 24 * v115;
                  v122 = *(_QWORD *)v121;
                  if (v119 >= *(_QWORD *)v121)
                  {
LABEL_138:
                    v173 = *(_OWORD *)(v121 + 8);
                    while (1)
                    {
                      v125 = v121;
                      v121 = v118;
                      v126 = *(_OWORD *)v118;
                      *(_DWORD *)(v125 + 16) = *(_DWORD *)(v118 + 16);
                      *(_OWORD *)v125 = v126;
                      if (v114 < v117)
                        break;
                      v127 = (2 * v117) | 1;
                      v118 = v12 + 24 * v127;
                      v117 = 2 * v117 + 2;
                      if (v117 < v14)
                      {
                        v123 = *(_QWORD *)v118;
                        v124 = *(_QWORD *)(v118 + 24);
                        if (*(_QWORD *)v118 <= v124)
                          v123 = *(_QWORD *)(v118 + 24);
                        if (*(_QWORD *)v118 >= v124)
                          v117 = v127;
                        else
                          v118 += 24;
                        if (v123 < v122)
                          break;
                      }
                      else
                      {
                        v117 = v127;
                        if (*(_QWORD *)v118 < v122)
                          break;
                      }
                    }
                    *(_QWORD *)v121 = v122;
                    *(_QWORD *)(v121 + 8) = v173;
                    *(_DWORD *)(v121 + 16) = DWORD2(v173);
                  }
                }
              }
              v116 = v115-- <= 0;
              if (v116)
              {
                v128 = v13 / 0x18uLL;
                do
                {
                  v129 = 0;
                  v199 = *(_QWORD *)(v12 + 16);
                  v174 = *(__n128 *)v12;
                  v130 = v12;
                  do
                  {
                    v132 = v130 + 24 * v129 + 24;
                    v133 = (2 * v129) | 1;
                    v134 = 2 * v129 + 2;
                    if (v134 < v128 && *(_QWORD *)v132 < *(_QWORD *)(v132 + 24))
                    {
                      v132 += 24;
                      v133 = v134;
                    }
                    v131 = *(_OWORD *)v132;
                    *(_DWORD *)(v130 + 16) = *(_DWORD *)(v132 + 16);
                    *(_OWORD *)v130 = v131;
                    v130 = v132;
                    v129 = v133;
                  }
                  while (v133 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                  a2 -= 24;
                  if (v132 == a2)
                  {
                    result = v174;
                    *(_DWORD *)(v132 + 16) = v199;
                    *(__n128 *)v132 = v174;
                  }
                  else
                  {
                    v135 = *(__n128 *)a2;
                    *(_DWORD *)(v132 + 16) = *(_DWORD *)(a2 + 16);
                    *(__n128 *)v132 = v135;
                    result = v174;
                    *(_DWORD *)(a2 + 16) = v199;
                    *(__n128 *)a2 = v174;
                    v136 = v132 - v12 + 24;
                    if (v136 >= 25)
                    {
                      v137 = (v136 / 0x18uLL - 2) >> 1;
                      v138 = (__n128 *)(v12 + 24 * v137);
                      v139 = *(_QWORD *)v132;
                      if (v138->n128_u64[0] < *(_QWORD *)v132)
                      {
                        v150 = *(_OWORD *)(v132 + 8);
                        do
                        {
                          v140 = (__n128 *)v132;
                          v132 = (uint64_t)v138;
                          result = *v138;
                          v140[1].n128_u32[0] = v138[1].n128_u32[0];
                          *v140 = result;
                          if (!v137)
                            break;
                          v137 = (v137 - 1) >> 1;
                          v138 = (__n128 *)(v12 + 24 * v137);
                        }
                        while (v138->n128_u64[0] < v139);
                        *(_QWORD *)v132 = v139;
                        *(_QWORD *)(v132 + 8) = v150;
                        *(_DWORD *)(v132 + 16) = DWORD2(v150);
                      }
                    }
                  }
                  v116 = v128-- <= 2;
                }
                while (!v116);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = *v9;
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= v16->n128_u64[0])
            {
              if (v17 < v20)
              {
                v182 = *(_QWORD *)(v12 + 16);
                v155 = *(__n128 *)v12;
                v24 = *(__n128 *)v9;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 8);
                *(__n128 *)v12 = v24;
                *(_DWORD *)(a2 - 8) = v182;
                *(__n128 *)v9 = v155;
                if (*(_QWORD *)v12 < v16->n128_u64[0])
                {
                  v183 = v16[1].n128_u64[0];
                  v156 = *v16;
                  v25 = *(__n128 *)v12;
                  v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                  *v16 = v25;
                  *(_DWORD *)(v12 + 16) = v183;
                  *(__n128 *)v12 = v156;
                  --a3;
                  v26 = *(_QWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v186 = v16[1].n128_u64[0];
              v159 = *v16;
              v42 = *(__n128 *)v12;
              v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
              *v16 = v42;
              *(_DWORD *)(v12 + 16) = v186;
              *(__n128 *)v12 = v159;
              if (*v9 >= *(_QWORD *)v12)
                goto LABEL_31;
              v179 = *(_QWORD *)(v12 + 16);
              v152 = *(__n128 *)v12;
              v43 = *(__n128 *)v9;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 8);
              *(__n128 *)v12 = v43;
            }
            else
            {
              v179 = v16[1].n128_u64[0];
              v152 = *v16;
              v21 = *(__n128 *)v9;
              v16[1].n128_u32[0] = *(_DWORD *)(a2 - 8);
              *v16 = v21;
            }
            *(_DWORD *)(a2 - 8) = v179;
            *(__n128 *)v9 = v152;
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v180 = v16[1].n128_u64[0];
              v153 = *v16;
              v22 = *(__n128 *)v9;
              v16[1].n128_u32[0] = *(_DWORD *)(a2 - 8);
              *v16 = v22;
              *(_DWORD *)(a2 - 8) = v180;
              *(__n128 *)v9 = v153;
              if (v16->n128_u64[0] < *(_QWORD *)v12)
              {
                v181 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                v23 = *v16;
                *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u32[0] = v181;
                *v16 = v154;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v184 = *(_QWORD *)(v12 + 16);
              v157 = *(__n128 *)v12;
              v27 = *v16;
              *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
              *(__n128 *)v12 = v27;
              v16[1].n128_u32[0] = v184;
              *v16 = v157;
              if (*v9 >= v16->n128_u64[0])
                goto LABEL_22;
              v178 = v16[1].n128_u64[0];
              v151 = *v16;
              v28 = *(__n128 *)v9;
              v16[1].n128_u32[0] = *(_DWORD *)(a2 - 8);
              *v16 = v28;
            }
            else
            {
              v178 = *(_QWORD *)(v12 + 16);
              v151 = *(__n128 *)v12;
              v19 = *(__n128 *)v9;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 8);
              *(__n128 *)v12 = v19;
            }
            *(_DWORD *)(a2 - 8) = v178;
            *(__n128 *)v9 = v151;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 24);
          v30 = v12 + 24 * v15;
          v33 = *(_QWORD *)(v30 - 24);
          v31 = (__n128 *)(v30 - 24);
          v32 = v33;
          v34 = *v10;
          if (v33 >= *(_QWORD *)(v12 + 24))
          {
            if (v34 < v32)
            {
              v185 = v31[1].n128_i64[0];
              v158 = *v31;
              v38 = *(__n128 *)v10;
              v31[1].n128_u32[0] = *(_DWORD *)(a2 - 32);
              *v31 = v38;
              *(_DWORD *)(a2 - 32) = v185;
              *(__n128 *)v10 = v158;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v39 = *v29;
                v40 = *(_QWORD *)(v12 + 40);
                v41 = v31[1].n128_i32[0];
                *v29 = *v31;
                *(_DWORD *)(v12 + 40) = v41;
                v31[1].n128_u32[0] = v40;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v44 = *v29;
              v45 = *(_QWORD *)(v12 + 40);
              v46 = v31[1].n128_i32[0];
              *v29 = *v31;
              *(_DWORD *)(v12 + 40) = v46;
              v31[1].n128_u32[0] = v45;
              *v31 = v44;
              if (*v10 >= v31->n128_u64[0])
                goto LABEL_36;
              v187 = v31[1].n128_i64[0];
              v160 = *v31;
              v47 = *(__n128 *)v10;
              v31[1].n128_u32[0] = *(_DWORD *)(a2 - 32);
              *v31 = v47;
              v35 = v160;
              *(_DWORD *)(a2 - 32) = v187;
            }
            else
            {
              v35 = *v29;
              v36 = *(_QWORD *)(v12 + 40);
              v37 = *(_DWORD *)(a2 - 32);
              *v29 = *(__n128 *)v10;
              *(_DWORD *)(v12 + 40) = v37;
              *(_DWORD *)(a2 - 32) = v36;
            }
            *(__n128 *)v10 = v35;
          }
LABEL_36:
          v48 = (__n128 *)(v12 + 48);
          v49 = v12 + 24 * v15;
          v52 = *(_QWORD *)(v49 + 24);
          v50 = (__n128 *)(v49 + 24);
          v51 = v52;
          v53 = *v11;
          if (v52 >= *(_QWORD *)(v12 + 48))
          {
            if (v53 < v51)
            {
              v188 = v50[1].n128_i64[0];
              v161 = *v50;
              v57 = *(__n128 *)v11;
              v50[1].n128_u32[0] = *(_DWORD *)(a2 - 56);
              *v50 = v57;
              *(_DWORD *)(a2 - 56) = v188;
              *(__n128 *)v11 = v161;
              if (v50->n128_u64[0] < v48->n128_u64[0])
              {
                v58 = *v48;
                v59 = *(_QWORD *)(v12 + 64);
                v60 = v50[1].n128_i32[0];
                *v48 = *v50;
                *(_DWORD *)(v12 + 64) = v60;
                v50[1].n128_u32[0] = v59;
                *v50 = v58;
              }
            }
          }
          else
          {
            if (v53 >= v51)
            {
              v61 = *v48;
              v62 = *(_QWORD *)(v12 + 64);
              v63 = v50[1].n128_i32[0];
              *v48 = *v50;
              *(_DWORD *)(v12 + 64) = v63;
              v50[1].n128_u32[0] = v62;
              *v50 = v61;
              if (*v11 >= v50->n128_u64[0])
                goto LABEL_45;
              v189 = v50[1].n128_i64[0];
              v162 = *v50;
              v64 = *(__n128 *)v11;
              v50[1].n128_u32[0] = *(_DWORD *)(a2 - 56);
              *v50 = v64;
              v54 = v162;
              *(_DWORD *)(a2 - 56) = v189;
            }
            else
            {
              v54 = *v48;
              v55 = *(_QWORD *)(v12 + 64);
              v56 = *(_DWORD *)(a2 - 56);
              *v48 = *(__n128 *)v11;
              *(_DWORD *)(v12 + 64) = v56;
              *(_DWORD *)(a2 - 56) = v55;
            }
            *(__n128 *)v11 = v54;
          }
LABEL_45:
          v65 = v16->n128_u64[0];
          v66 = v50->n128_u64[0];
          if (v16->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v66 < v65)
            {
              v191 = v16[1].n128_u64[0];
              v164 = *v16;
              *v16 = *v50;
              v16[1].n128_u32[0] = v50[1].n128_u32[0];
              v50[1].n128_u32[0] = v191;
              *v50 = v164;
              if (v16->n128_u64[0] < v31->n128_u64[0])
              {
                v192 = v31[1].n128_i64[0];
                v165 = *v31;
                *v31 = *v16;
                v31[1].n128_u32[0] = v16[1].n128_u32[0];
                v16[1].n128_u32[0] = v192;
                *v16 = v165;
              }
            }
          }
          else
          {
            if (v66 >= v65)
            {
              v193 = v31[1].n128_i64[0];
              v166 = *v31;
              *v31 = *v16;
              v31[1].n128_u32[0] = v16[1].n128_u32[0];
              v16[1].n128_u32[0] = v193;
              *v16 = v166;
              if (v50->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v190 = v16[1].n128_u64[0];
              v163 = *v16;
              *v16 = *v50;
              v16[1].n128_u32[0] = v50[1].n128_u32[0];
            }
            else
            {
              v190 = v31[1].n128_u64[0];
              v163 = *v31;
              *v31 = *v50;
              v31[1].n128_u32[0] = v50[1].n128_u32[0];
            }
            v50[1].n128_u32[0] = v190;
            *v50 = v163;
          }
LABEL_54:
          v194 = *(_QWORD *)(v12 + 16);
          v167 = *(__n128 *)v12;
          v67 = *v16;
          *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
          *(__n128 *)v12 = v67;
          v16[1].n128_u32[0] = v194;
          *v16 = v167;
          --a3;
          v26 = *(_QWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v12 - 24) >= v26)
          {
            result = *(__n128 *)(v12 + 8);
            v149 = result;
            if (v26 >= *v9)
            {
              v82 = v12 + 24;
              do
              {
                v12 = v82;
                if (v82 >= a2)
                  break;
                v82 += 24;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v81 = *(_QWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v26 >= v81);
            }
            v83 = a2;
            if (v12 < a2)
            {
              v83 = a2;
              do
              {
                v84 = *(_QWORD *)(v83 - 24);
                v83 -= 24;
              }
              while (v26 < v84);
            }
            while (v12 < v83)
            {
              v196 = *(_QWORD *)(v12 + 16);
              v169 = *(__n128 *)v12;
              v85 = *(__n128 *)v83;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v83 + 16);
              *(__n128 *)v12 = v85;
              result = v169;
              *(_DWORD *)(v83 + 16) = v196;
              *(__n128 *)v83 = v169;
              do
              {
                v86 = *(_QWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v26 >= v86);
              do
              {
                v87 = *(_QWORD *)(v83 - 24);
                v83 -= 24;
              }
              while (v26 < v87);
            }
            if (v12 - 24 != a1)
            {
              result = *(__n128 *)(v12 - 24);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
              *(__n128 *)a1 = result;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v26;
            *(_DWORD *)(v12 - 8) = v149.n128_u32[2];
            *(_QWORD *)(v12 - 16) = v149.n128_u64[0];
            continue;
          }
LABEL_56:
          v68 = 0;
          v69 = *(__n128 *)(v12 + 8);
          v148 = v69;
          do
          {
            v70 = *(_QWORD *)(v12 + v68 + 24);
            v68 += 24;
          }
          while (v70 < v26);
          v71 = v12 + v68;
          v72 = a2;
          if (v68 == 24)
          {
            v72 = a2;
            do
            {
              if (v71 >= v72)
                break;
              v74 = *(_QWORD *)(v72 - 24);
              v72 -= 24;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = *(_QWORD *)(v72 - 24);
              v72 -= 24;
            }
            while (v73 >= v26);
          }
          v12 += v68;
          if (v71 < v72)
          {
            v75 = v72;
            do
            {
              v195 = *(_QWORD *)(v12 + 16);
              v168 = *(__n128 *)v12;
              v76 = *(__n128 *)v75;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v75 + 16);
              *(__n128 *)v12 = v76;
              v69 = v168;
              *(_DWORD *)(v75 + 16) = v195;
              *(__n128 *)v75 = v168;
              do
              {
                v77 = *(_QWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v77 < v26);
              do
              {
                v78 = *(_QWORD *)(v75 - 24);
                v75 -= 24;
              }
              while (v78 >= v26);
            }
            while (v12 < v75);
          }
          if (v12 - 24 != a1)
          {
            v69 = *(__n128 *)(v12 - 24);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
            *(__n128 *)a1 = v69;
          }
          *(_QWORD *)(v12 - 24) = v26;
          *(_DWORD *)(v12 - 8) = v148.n128_u32[2];
          *(_QWORD *)(v12 - 16) = v148.n128_u64[0];
          if (v71 < v72)
            goto LABEL_75;
          v79 = sub_20F33EC74(a1, (_OWORD *)(v12 - 24), v69);
          if (!sub_20F33EC74(v12, (_OWORD *)a2, v80))
          {
            if (v79)
              continue;
LABEL_75:
            sub_20F33DCF8(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 24;
          if (v79)
            return result;
          goto LABEL_1;
        }
        v104 = (__n128 *)(v12 + 24);
        v106 = v12 == a2 || v104 == (__n128 *)a2;
        if ((a4 & 1) != 0)
        {
          if (v106)
            return result;
          v107 = 0;
          v108 = v12;
          while (1)
          {
            v110 = v104;
            v111 = *(_QWORD *)(v108 + 24);
            if (v111 < *(_QWORD *)v108)
            {
              v172 = *(_OWORD *)(v108 + 32);
              v112 = v107;
              do
              {
                v113 = v12 + v112;
                result = *(__n128 *)(v12 + v112);
                *(__n128 *)(v113 + 24) = result;
                *(_DWORD *)(v113 + 40) = *(_DWORD *)(v12 + v112 + 16);
                if (!v112)
                {
                  v109 = v12;
                  goto LABEL_118;
                }
                v112 -= 24;
              }
              while (v111 < *(_QWORD *)(v113 - 24));
              v109 = v12 + v112 + 24;
LABEL_118:
              *(_QWORD *)v109 = v111;
              *(_QWORD *)(v109 + 8) = v172;
              *(_DWORD *)(v109 + 16) = DWORD2(v172);
            }
            v104 = (__n128 *)((char *)v110 + 24);
            v107 += 24;
            v108 = (unint64_t)v110;
            if (&v110[1].n128_i8[8] == (__int8 *)a2)
              return result;
          }
        }
        if (!v106)
        {
          do
          {
            v143 = v104;
            v144 = *(_QWORD *)(a1 + 24);
            if (v144 < *(_QWORD *)a1)
            {
              v176 = *(_OWORD *)(a1 + 32);
              do
              {
                result = *(__n128 *)((char *)v104 - 24);
                *v104 = result;
                v104[1].n128_u32[0] = v104[-1].n128_u32[2];
                v145 = v104[-3].n128_u64[0];
                v104 = (__n128 *)((char *)v104 - 24);
              }
              while (v144 < v145);
              v104->n128_u64[0] = v144;
              v104[1].n128_u32[0] = DWORD2(v176);
              v104->n128_u64[1] = v176;
            }
            v104 = (__n128 *)((char *)v143 + 24);
            a1 = (uint64_t)v143;
          }
          while (&v143[1].n128_i8[8] != (__int8 *)a2);
        }
        return result;
    }
  }
}

  v8 = (unint64_t *)(a2 - 2);
  v9 = (unint64_t *)(a2 - 4);
  v10 = (unint64_t *)(a2 - 6);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (uint64_t)a2 - v11;
    v13 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *(a2 - 2);
        v78 = a2 - 2;
        if (v79 < *(_QWORD *)v11)
          goto LABEL_101;
        return result;
      case 3:
        v80 = (unint64_t *)(v11 + 16);
        v81 = *(_QWORD *)(v11 + 16);
        v83 = *(a2 - 2);
        v78 = a2 - 2;
        v82 = v83;
        if (v81 < *(_QWORD *)v11)
        {
          if (v82 >= v81)
          {
            result = *(__n128 *)v11;
            v171 = *(__n128 *)v11;
            *(_QWORD *)v11 = *v80;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 24);
            *v80 = v171.n128_u64[0];
            *(_DWORD *)(v11 + 24) = v171.n128_u32[2];
            if ((unint64_t)*v78 >= *(_QWORD *)(v11 + 16))
              return result;
            result = *(__n128 *)v80;
            v163 = *(__n128 *)v80;
            v139 = *v78;
            *(_DWORD *)(v11 + 24) = *((_DWORD *)v78 + 2);
            *v80 = v139;
          }
          else
          {
LABEL_101:
            result = *(__n128 *)v11;
            v163 = *(__n128 *)v11;
            v84 = *v78;
            *(_DWORD *)(v11 + 8) = *((_DWORD *)v78 + 2);
            *(_QWORD *)v11 = v84;
          }
          *((_DWORD *)v78 + 2) = v163.n128_u32[2];
          *v78 = v163.n128_u64[0];
          return result;
        }
        if (v82 < v81)
        {
          result = *(__n128 *)v80;
          v169 = *(__n128 *)v80;
          v132 = *v78;
          *(_DWORD *)(v11 + 24) = *((_DWORD *)v78 + 2);
          *v80 = v132;
          *((_DWORD *)v78 + 2) = v169.n128_u32[2];
          *v78 = v169.n128_u64[0];
          if (*(_QWORD *)(v11 + 16) < *(_QWORD *)v11)
          {
            result = *(__n128 *)v11;
            v170 = *(__n128 *)v11;
            *(_QWORD *)v11 = *v80;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 24);
            *v80 = v170.n128_u64[0];
            *(_DWORD *)(v11 + 24) = v170.n128_u32[2];
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_20F3404A8((__n128 *)v11, (__n128 *)(v11 + 16), (__int128 *)(v11 + 32), (uint64_t)(a2 - 2)).n128_u64[0];
        return result;
      case 5:
        v85 = (__n128 *)(v11 + 16);
        v86 = (__n128 *)(v11 + 32);
        v87 = (__n128 *)(v11 + 48);
        result.n128_u64[0] = sub_20F3404A8((__n128 *)v11, (__n128 *)(v11 + 16), (__int128 *)(v11 + 32), v11 + 48).n128_u64[0];
        v89 = *(a2 - 2);
        v88 = a2 - 2;
        if (v89 < *(_QWORD *)(v11 + 48))
        {
          result = *v87;
          v164 = *v87;
          v90 = *v88;
          *(_DWORD *)(v11 + 56) = *((_DWORD *)v88 + 2);
          v87->n128_u64[0] = v90;
          *((_DWORD *)v88 + 2) = v164.n128_u32[2];
          *v88 = v164.n128_u64[0];
          if (v87->n128_u64[0] < v86->n128_u64[0])
          {
            result = *v86;
            v165 = *v86;
            v86->n128_u64[0] = v87->n128_u64[0];
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 56);
            v87->n128_u64[0] = v165.n128_u64[0];
            *(_DWORD *)(v11 + 56) = v165.n128_u32[2];
            if (v86->n128_u64[0] < v85->n128_u64[0])
            {
              result = *v85;
              v166 = *v85;
              v85->n128_u64[0] = v86->n128_u64[0];
              *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 40);
              v86->n128_u64[0] = v166.n128_u64[0];
              *(_DWORD *)(v11 + 40) = v166.n128_u32[2];
              if (*(_QWORD *)(v11 + 16) < *(_QWORD *)v11)
              {
                result = *(__n128 *)v11;
                v167 = *(__n128 *)v11;
                *(_QWORD *)v11 = v85->n128_u64[0];
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 24);
                v85->n128_u64[0] = v167.n128_u64[0];
                *(_DWORD *)(v11 + 24) = v167.n128_u32[2];
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 383)
        {
          if (!a3)
          {
            if ((uint64_t *)v11 == a2)
              return result;
            v102 = (unint64_t)(v13 - 2) >> 1;
            v103 = v102;
            while (1)
            {
              if (v102 >= v103)
              {
                v105 = (2 * v103) | 1;
                v106 = (unint64_t *)(v11 + 16 * v105);
                if (2 * v103 + 2 >= v13)
                {
                  v109 = (unint64_t *)(v11 + 16 * v103);
                  v110 = *v109;
                  if (*v106 >= *v109)
                    goto LABEL_139;
                }
                else
                {
                  v107 = v106[2];
                  v108 = *v106 >= v107;
                  if (*v106 > v107)
                    v107 = *v106;
                  if (!v108)
                  {
                    v106 += 2;
                    v105 = 2 * v103 + 2;
                  }
                  v109 = (unint64_t *)(v11 + 16 * v103);
                  v110 = *v109;
                  if (v107 >= *v109)
                  {
LABEL_139:
                    v111 = *((_DWORD *)v109 + 2);
                    while (1)
                    {
                      v114 = v109;
                      v109 = v106;
                      v115 = *v106;
                      *((_DWORD *)v114 + 2) = *((_DWORD *)v109 + 2);
                      *v114 = v115;
                      if (v102 < v105)
                        break;
                      v116 = (2 * v105) | 1;
                      v106 = (unint64_t *)(v11 + 16 * v116);
                      v105 = 2 * v105 + 2;
                      if (v105 < v13)
                      {
                        v112 = *v106;
                        v113 = v106[2];
                        if (*v106 <= v113)
                          v112 = v106[2];
                        if (*v106 >= v113)
                          v105 = v116;
                        else
                          v106 += 2;
                        if (v112 < v110)
                          break;
                      }
                      else
                      {
                        v105 = v116;
                        if (*v106 < v110)
                          break;
                      }
                    }
                    *v109 = v110;
                    *((_DWORD *)v109 + 2) = v111;
                  }
                }
              }
              v104 = v103-- <= 0;
              if (v104)
              {
                v117 = (unint64_t)v12 >> 4;
                do
                {
                  v118 = 0;
                  result = *(__n128 *)v11;
                  v168 = *(__n128 *)v11;
                  v119 = v11;
                  do
                  {
                    v121 = v119 + 16 * v118 + 16;
                    v122 = (2 * v118) | 1;
                    v123 = 2 * v118 + 2;
                    if (v123 < v117 && *(_QWORD *)v121 < *(_QWORD *)(v121 + 16))
                    {
                      v121 += 16;
                      v122 = v123;
                    }
                    v120 = *(_QWORD *)v121;
                    *(_DWORD *)(v119 + 8) = *(_DWORD *)(v121 + 8);
                    *(_QWORD *)v119 = v120;
                    v119 = v121;
                    v118 = v122;
                  }
                  while (v122 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
                  a2 -= 2;
                  if ((uint64_t *)v121 == a2)
                  {
                    *(_DWORD *)(v121 + 8) = v168.n128_u32[2];
                    *(_QWORD *)v121 = v168.n128_u64[0];
                  }
                  else
                  {
                    v124 = *a2;
                    *(_DWORD *)(v121 + 8) = *((_DWORD *)a2 + 2);
                    *(_QWORD *)v121 = v124;
                    *((_DWORD *)a2 + 2) = v168.n128_u32[2];
                    *a2 = v168.n128_u64[0];
                    v125 = v121 - v11 + 16;
                    if (v125 >= 17)
                    {
                      v126 = (((unint64_t)v125 >> 4) - 2) >> 1;
                      v127 = (unint64_t *)(v11 + 16 * v126);
                      v128 = *(_QWORD *)v121;
                      if (*v127 < *(_QWORD *)v121)
                      {
                        v129 = *(_DWORD *)(v121 + 8);
                        do
                        {
                          v130 = v121;
                          v121 = (uint64_t)v127;
                          v131 = *v127;
                          *(_DWORD *)(v130 + 8) = *(_DWORD *)(v121 + 8);
                          *(_QWORD *)v130 = v131;
                          if (!v126)
                            break;
                          v126 = (v126 - 1) >> 1;
                          v127 = (unint64_t *)(v11 + 16 * v126);
                        }
                        while (*v127 < v128);
                        *(_QWORD *)v121 = v128;
                        *(_DWORD *)(v121 + 8) = v129;
                      }
                    }
                  }
                  v104 = v117-- <= 2;
                }
                while (!v104);
                return result;
              }
            }
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = (__n128 *)(v11 + 16 * ((unint64_t)v13 >> 1));
          v16 = *v8;
          if ((unint64_t)v12 < 0x801)
          {
            v19 = *(_QWORD *)v11;
            if (*(_QWORD *)v11 >= v15->n128_u64[0])
            {
              if (v16 < v19)
              {
                result = *(__n128 *)v11;
                v144 = *(__n128 *)v11;
                v24 = *v8;
                *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
                *(_QWORD *)v11 = v24;
                *((_DWORD *)a2 - 2) = v144.n128_u32[2];
                *v8 = v144.n128_u64[0];
                if (*(_QWORD *)v11 < v15->n128_u64[0])
                {
                  result = *v15;
                  v145 = *v15;
                  v25 = *(_QWORD *)v11;
                  v15->n128_u32[2] = *(_DWORD *)(v11 + 8);
                  v15->n128_u64[0] = v25;
                  v26 = v145.n128_u64[0];
                  *(_DWORD *)(v11 + 8) = v145.n128_u32[2];
                  *(_QWORD *)v11 = v145.n128_u64[0];
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v16 >= v19)
            {
              result = *v15;
              v150 = *v15;
              v38 = *(_QWORD *)v11;
              v15->n128_u32[2] = *(_DWORD *)(v11 + 8);
              v15->n128_u64[0] = v38;
              *(_DWORD *)(v11 + 8) = v150.n128_u32[2];
              *(_QWORD *)v11 = v150.n128_u64[0];
              if (*v8 >= *(_QWORD *)v11)
                goto LABEL_31;
              result = *(__n128 *)v11;
              v141 = *(__n128 *)v11;
              v39 = *v8;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
              *(_QWORD *)v11 = v39;
            }
            else
            {
              result = *v15;
              v141 = *v15;
              v21 = *v8;
              v15->n128_u32[2] = *((_DWORD *)a2 - 2);
              v15->n128_u64[0] = v21;
            }
            *((_DWORD *)a2 - 2) = v141.n128_u32[2];
            *v8 = v141.n128_u64[0];
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v11;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v17 = v15->n128_u64[0];
          if (v15->n128_u64[0] >= *(_QWORD *)v11)
          {
            if (v16 < v17)
            {
              v142 = *v15;
              v22 = *v8;
              v15->n128_u32[2] = *((_DWORD *)a2 - 2);
              v15->n128_u64[0] = v22;
              *((_DWORD *)a2 - 2) = v142.n128_u32[2];
              *v8 = v142.n128_u64[0];
              if (v15->n128_u64[0] < *(_QWORD *)v11)
              {
                v143 = *(__n128 *)v11;
                v23 = v15->n128_u64[0];
                *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
                *(_QWORD *)v11 = v23;
                v15->n128_u32[2] = v143.n128_u32[2];
                v15->n128_u64[0] = v143.n128_u64[0];
              }
            }
          }
          else
          {
            if (v16 >= v17)
            {
              v146 = *(__n128 *)v11;
              v27 = v15->n128_u64[0];
              *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
              *(_QWORD *)v11 = v27;
              v15->n128_u32[2] = v146.n128_u32[2];
              v15->n128_u64[0] = v146.n128_u64[0];
              if (*v8 >= v15->n128_u64[0])
                goto LABEL_22;
              v140 = *v15;
              v28 = *v8;
              v15->n128_u32[2] = *((_DWORD *)a2 - 2);
              v15->n128_u64[0] = v28;
            }
            else
            {
              v140 = *(__n128 *)v11;
              v18 = *v8;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
              *(_QWORD *)v11 = v18;
            }
            *((_DWORD *)a2 - 2) = v140.n128_u32[2];
            *v8 = v140.n128_u64[0];
          }
LABEL_22:
          v29 = (__n128 *)(v11 + 16);
          v30 = v11 + 16 * v14;
          v33 = *(_QWORD *)(v30 - 16);
          v31 = (__n128 *)(v30 - 16);
          v32 = v33;
          v34 = *v9;
          if (v33 >= *(_QWORD *)(v11 + 16))
          {
            if (v34 < v32)
            {
              v148 = *v31;
              v36 = *v9;
              v31->n128_u32[2] = *((_DWORD *)a2 - 6);
              v31->n128_u64[0] = v36;
              *((_DWORD *)a2 - 6) = v148.n128_u32[2];
              *v9 = v148.n128_u64[0];
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v149 = *v29;
                v37 = v31->n128_u64[0];
                *(_DWORD *)(v11 + 24) = v31->n128_u32[2];
                v29->n128_u64[0] = v37;
                v31->n128_u32[2] = v149.n128_u32[2];
                v31->n128_u64[0] = v149.n128_u64[0];
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v151 = *v29;
              v40 = v31->n128_u64[0];
              *(_DWORD *)(v11 + 24) = v31->n128_u32[2];
              v29->n128_u64[0] = v40;
              v31->n128_u32[2] = v151.n128_u32[2];
              v31->n128_u64[0] = v151.n128_u64[0];
              if (*v9 >= v31->n128_u64[0])
                goto LABEL_36;
              v147 = *v31;
              v41 = *v9;
              v31->n128_u32[2] = *((_DWORD *)a2 - 6);
              v31->n128_u64[0] = v41;
            }
            else
            {
              v147 = *v29;
              v35 = *v9;
              *(_DWORD *)(v11 + 24) = *((_DWORD *)a2 - 6);
              v29->n128_u64[0] = v35;
            }
            *((_DWORD *)a2 - 6) = v147.n128_u32[2];
            *v9 = v147.n128_u64[0];
          }
LABEL_36:
          v42 = (__int128 *)(v11 + 32);
          v43 = v11 + 16 * v14;
          v46 = *(_QWORD *)(v43 + 16);
          v44 = (__int128 *)(v43 + 16);
          v45 = v46;
          v47 = *v10;
          if (v46 >= *(_QWORD *)(v11 + 32))
          {
            if (v47 < v45)
            {
              v153 = *v44;
              v49 = *v10;
              *((_DWORD *)v44 + 2) = *((_DWORD *)a2 - 10);
              *(_QWORD *)v44 = v49;
              *((_DWORD *)a2 - 10) = DWORD2(v153);
              *v10 = v153;
              if (*(_QWORD *)v44 < *(_QWORD *)v42)
              {
                v154 = *v42;
                v50 = *(_QWORD *)v44;
                *(_DWORD *)(v11 + 40) = *((_DWORD *)v44 + 2);
                *(_QWORD *)v42 = v50;
                *((_DWORD *)v44 + 2) = DWORD2(v154);
                *(_QWORD *)v44 = v154;
              }
            }
          }
          else
          {
            if (v47 >= v45)
            {
              v155 = *v42;
              v51 = *(_QWORD *)v44;
              *(_DWORD *)(v11 + 40) = *((_DWORD *)v44 + 2);
              *(_QWORD *)v42 = v51;
              *((_DWORD *)v44 + 2) = DWORD2(v155);
              *(_QWORD *)v44 = v155;
              if (*v10 >= *(_QWORD *)v44)
                goto LABEL_45;
              v152 = *v44;
              v52 = *v10;
              *((_DWORD *)v44 + 2) = *((_DWORD *)a2 - 10);
              *(_QWORD *)v44 = v52;
            }
            else
            {
              v152 = *v42;
              v48 = *v10;
              *(_DWORD *)(v11 + 40) = *((_DWORD *)a2 - 10);
              *(_QWORD *)v42 = v48;
            }
            *((_DWORD *)a2 - 10) = DWORD2(v152);
            *v10 = v152;
          }
LABEL_45:
          v53 = v15->n128_u64[0];
          v54 = *(_QWORD *)v44;
          if (v15->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v54 < v53)
            {
              v157 = *v15;
              v15->n128_u64[0] = *(_QWORD *)v44;
              v15->n128_u32[2] = *((_DWORD *)v44 + 2);
              *(_QWORD *)v44 = v157.n128_u64[0];
              *((_DWORD *)v44 + 2) = v157.n128_u32[2];
              if (v15->n128_u64[0] < v31->n128_u64[0])
              {
                v158 = *v31;
                v31->n128_u64[0] = v15->n128_u64[0];
                v31->n128_u32[2] = v15->n128_u32[2];
                v15->n128_u64[0] = v158.n128_u64[0];
                v15->n128_u32[2] = v158.n128_u32[2];
              }
            }
          }
          else
          {
            if (v54 >= v53)
            {
              v159 = *v31;
              v31->n128_u64[0] = v15->n128_u64[0];
              v31->n128_u32[2] = v15->n128_u32[2];
              v15->n128_u64[0] = v159.n128_u64[0];
              v15->n128_u32[2] = v159.n128_u32[2];
              if (*(_QWORD *)v44 >= v159.n128_u64[0])
                goto LABEL_54;
              v156 = *v15;
              v15->n128_u64[0] = *(_QWORD *)v44;
              v15->n128_u32[2] = *((_DWORD *)v44 + 2);
            }
            else
            {
              v156 = *v31;
              v31->n128_u64[0] = *(_QWORD *)v44;
              v31->n128_u32[2] = *((_DWORD *)v44 + 2);
            }
            *(_QWORD *)v44 = v156.n128_u64[0];
            *((_DWORD *)v44 + 2) = v156.n128_u32[2];
          }
LABEL_54:
          result = *(__n128 *)v11;
          v160 = *(__n128 *)v11;
          v55 = v15->n128_u64[0];
          *(_DWORD *)(v11 + 8) = v15->n128_u32[2];
          *(_QWORD *)v11 = v55;
          v15->n128_u32[2] = v160.n128_u32[2];
          v15->n128_u64[0] = v160.n128_u64[0];
          --a3;
          v26 = *(_QWORD *)v11;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v11 - 16) >= v26)
          {
            if (v26 >= *v8)
            {
              v70 = v11 + 16;
              do
              {
                v11 = v70;
                if (v70 >= (unint64_t)a2)
                  break;
                v70 += 16;
              }
              while (v26 >= *(_QWORD *)v11);
            }
            else
            {
              do
              {
                v69 = *(_QWORD *)(v11 + 16);
                v11 += 16;
              }
              while (v26 >= v69);
            }
            v71 = a2;
            if (v11 < (unint64_t)a2)
            {
              v71 = a2;
              do
              {
                v72 = *(v71 - 2);
                v71 -= 2;
              }
              while (v26 < v72);
            }
            v73 = *(_QWORD *)(a1 + 8);
            while (v11 < (unint64_t)v71)
            {
              result = *(__n128 *)v11;
              v162 = *(__n128 *)v11;
              v74 = *v71;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)v71 + 2);
              *(_QWORD *)v11 = v74;
              *((_DWORD *)v71 + 2) = v162.n128_u32[2];
              *v71 = v162.n128_u64[0];
              do
              {
                v75 = *(_QWORD *)(v11 + 16);
                v11 += 16;
              }
              while (v26 >= v75);
              do
              {
                v76 = *(v71 - 2);
                v71 -= 2;
              }
              while (v26 < v76);
            }
            if (v11 - 16 != a1)
            {
              v77 = *(_QWORD *)(v11 - 16);
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(v11 - 8);
              *(_QWORD *)a1 = v77;
            }
            a4 = 0;
            *(_QWORD *)(v11 - 16) = v26;
            *(_DWORD *)(v11 - 8) = v73;
            continue;
          }
LABEL_56:
          v56 = 0;
          v57 = *(_QWORD *)(v11 + 8);
          do
          {
            v58 = *(_QWORD *)(v11 + v56 + 16);
            v56 += 16;
          }
          while (v58 < v26);
          v59 = v11 + v56;
          v60 = a2;
          if (v56 == 16)
          {
            v60 = a2;
            do
            {
              if (v59 >= (unint64_t)v60)
                break;
              v62 = *(v60 - 2);
              v60 -= 2;
            }
            while (v62 >= v26);
          }
          else
          {
            do
            {
              v61 = *(v60 - 2);
              v60 -= 2;
            }
            while (v61 >= v26);
          }
          v11 += v56;
          if (v59 < (unint64_t)v60)
          {
            v63 = v60;
            do
            {
              v161 = *(__n128 *)v11;
              v64 = *v63;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)v63 + 2);
              *(_QWORD *)v11 = v64;
              *((_DWORD *)v63 + 2) = v161.n128_u32[2];
              *v63 = v161.n128_u64[0];
              do
              {
                v65 = *(_QWORD *)(v11 + 16);
                v11 += 16;
              }
              while (v65 < v26);
              do
              {
                v66 = *(v63 - 2);
                v63 -= 2;
              }
              while (v66 >= v26);
            }
            while (v11 < (unint64_t)v63);
          }
          if (v11 - 16 != a1)
          {
            v67 = *(_QWORD *)(v11 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v11 - 8);
            *(_QWORD *)a1 = v67;
          }
          *(_QWORD *)(v11 - 16) = v26;
          *(_DWORD *)(v11 - 8) = v57;
          if (v59 < (unint64_t)v60)
            goto LABEL_75;
          v68 = sub_20F33FFF4((__int128 *)a1, (__int128 *)(v11 - 16));
          if (!sub_20F33FFF4((__int128 *)v11, (__int128 *)a2))
          {
            if (v68)
              continue;
LABEL_75:
            sub_20F33F240(a1, v11 - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v11 - 16);
          if (v68)
            return result;
          goto LABEL_1;
        }
        v91 = v11 + 16;
        v93 = (uint64_t *)v11 == a2 || v91 == (_QWORD)a2;
        if ((a4 & 1) != 0)
        {
          if (v93)
            return result;
          v94 = 0;
          v95 = v11;
          while (1)
          {
            v97 = v91;
            v98 = *(_QWORD *)(v95 + 16);
            if (v98 < *(_QWORD *)v95)
            {
              v99 = *(_DWORD *)(v95 + 24);
              v100 = v94;
              do
              {
                v101 = v11 + v100;
                *(_QWORD *)(v101 + 16) = *(_QWORD *)(v11 + v100);
                *(_DWORD *)(v101 + 24) = *(_DWORD *)(v11 + v100 + 8);
                if (!v100)
                {
                  v96 = v11;
                  goto LABEL_119;
                }
                v100 -= 16;
              }
              while (v98 < *(_QWORD *)(v101 - 16));
              v96 = v11 + v100 + 16;
LABEL_119:
              *(_QWORD *)v96 = v98;
              *(_DWORD *)(v96 + 8) = v99;
            }
            v91 = v97 + 16;
            v94 += 16;
            v95 = v97;
            if ((uint64_t *)(v97 + 16) == a2)
              return result;
          }
        }
        if (!v93)
        {
          do
          {
            v133 = v91;
            v134 = *(_QWORD *)(a1 + 16);
            if (v134 < *(_QWORD *)a1)
            {
              v135 = *(_QWORD *)(a1 + 24);
              v136 = v133;
              do
              {
                v137 = v136;
                v138 = *(_QWORD *)(v136 - 16);
                v136 -= 16;
                *(_QWORD *)v137 = v138;
                *(_DWORD *)(v137 + 8) = *(_DWORD *)(v137 - 8);
              }
              while (v134 < *(_QWORD *)(v137 - 32));
              *(_QWORD *)v136 = v134;
              *(_DWORD *)(v136 + 8) = v135;
            }
            v91 = v133 + 16;
            a1 = v133;
          }
          while ((uint64_t *)(v133 + 16) != a2);
        }
        return result;
    }
  }
}

  v9 = a2 - 56;
  v10 = (__n128 *)(a2 - 112);
  v11 = (__n128 *)(a2 - 168);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 8) < *(double *)(v12 + 48))
        {
          v356 = *(_QWORD *)(v12 + 48);
          v285 = *(_OWORD *)(v12 + 16);
          v320 = *(_OWORD *)(v12 + 32);
          v254 = *(_OWORD *)v12;
          v140 = *(_OWORD *)(a2 - 56);
          v141 = *(_OWORD *)(a2 - 40);
          v142 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v12 + 16) = v141;
          *(_OWORD *)(v12 + 32) = v142;
          *(_OWORD *)v12 = v140;
          *(_QWORD *)(a2 - 8) = v356;
          *(_OWORD *)(a2 - 24) = v320;
          *(_OWORD *)(a2 - 40) = v285;
          *(_OWORD *)(a2 - 56) = v254;
        }
        return;
      case 3:
        v143 = (__int128 *)(v12 + 56);
        v144 = *(double *)(v12 + 104);
        v145 = *(double *)(a2 - 8);
        if (v144 >= *(double *)(v12 + 48))
        {
          if (v145 < v144)
          {
            v212 = *v143;
            v291 = *(_OWORD *)(v12 + 72);
            v326 = *(_OWORD *)(v12 + 88);
            v360 = *(_QWORD *)(v12 + 104);
            v213 = *(_QWORD *)(a2 - 8);
            v215 = *(_OWORD *)(a2 - 40);
            v214 = *(_OWORD *)(a2 - 24);
            *v143 = *(_OWORD *)v9;
            *(_OWORD *)(v12 + 72) = v215;
            *(_OWORD *)(v12 + 88) = v214;
            *(_QWORD *)(v12 + 104) = v213;
            *(_OWORD *)(a2 - 40) = v291;
            *(_OWORD *)(a2 - 24) = v326;
            *(_QWORD *)(a2 - 8) = v360;
            *(_OWORD *)v9 = v212;
            if (*(double *)(v12 + 104) < *(double *)(v12 + 48))
            {
              v361 = *(_QWORD *)(v12 + 48);
              v292 = *(_OWORD *)(v12 + 16);
              v327 = *(_OWORD *)(v12 + 32);
              v259 = *(_OWORD *)v12;
              v216 = *(_OWORD *)(v12 + 72);
              *(_OWORD *)v12 = *v143;
              *(_OWORD *)(v12 + 16) = v216;
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
              *(_QWORD *)(v12 + 104) = v361;
              *(_OWORD *)(v12 + 72) = v292;
              *(_OWORD *)(v12 + 88) = v327;
              *v143 = v259;
            }
          }
        }
        else
        {
          if (v145 < v144)
          {
            v357 = *(_QWORD *)(v12 + 48);
            v286 = *(_OWORD *)(v12 + 16);
            v321 = *(_OWORD *)(v12 + 32);
            v255 = *(_OWORD *)v12;
            v146 = *(_OWORD *)v9;
            v147 = *(_OWORD *)(a2 - 40);
            v148 = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
            *(_OWORD *)(v12 + 16) = v147;
            *(_OWORD *)(v12 + 32) = v148;
            *(_OWORD *)v12 = v146;
            goto LABEL_109;
          }
          v362 = *(_QWORD *)(v12 + 48);
          v294 = *(_OWORD *)(v12 + 16);
          v329 = *(_OWORD *)(v12 + 32);
          v261 = *(_OWORD *)v12;
          v222 = *(_OWORD *)(v12 + 72);
          *(_OWORD *)v12 = *v143;
          *(_OWORD *)(v12 + 16) = v222;
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
          *(_QWORD *)(v12 + 104) = v362;
          *(_OWORD *)(v12 + 72) = v294;
          *(_OWORD *)(v12 + 88) = v329;
          *v143 = v261;
          if (*(double *)(a2 - 8) < *(double *)(v12 + 104))
          {
            v166 = *v143;
            v167 = *(_OWORD *)(v12 + 72);
            v330 = *(_OWORD *)(v12 + 88);
            v363 = *(_QWORD *)(v12 + 104);
            v223 = *(_QWORD *)(a2 - 8);
            v225 = *(_OWORD *)(a2 - 40);
            v224 = *(_OWORD *)(a2 - 24);
            *v143 = *(_OWORD *)v9;
            *(_OWORD *)(v12 + 72) = v225;
            *(_OWORD *)(v12 + 88) = v224;
            *(_QWORD *)(v12 + 104) = v223;
            *(_OWORD *)(a2 - 24) = v330;
            *(_QWORD *)(a2 - 8) = v363;
            goto LABEL_169;
          }
        }
        return;
      case 4:
        sub_20F3450E8((__int128 *)v12, (double *)(v12 + 56), (double *)(v12 + 112), (__int128 *)(a2 - 56), a5);
        return;
      case 5:
        v9 = v12 + 56;
        v149 = (__int128 *)(v12 + 112);
        v150 = (__int128 *)(v12 + 168);
        sub_20F3450E8((__int128 *)v12, (double *)(v12 + 56), (double *)(v12 + 112), (__int128 *)(v12 + 168), a5);
        if (*(double *)(a2 - 8) < *(double *)(v12 + 216))
        {
          v151 = *v150;
          v287 = *(_OWORD *)(v12 + 184);
          v322 = *(_OWORD *)(v12 + 200);
          v358 = *(_QWORD *)(v12 + 216);
          v152 = *(_QWORD *)(a2 - 8);
          v153 = *(_OWORD *)(a2 - 24);
          v154 = *(_OWORD *)(a2 - 40);
          *v150 = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(v12 + 184) = v154;
          *(_OWORD *)(v12 + 200) = v153;
          *(_QWORD *)(v12 + 216) = v152;
          *(_OWORD *)(a2 - 40) = v287;
          *(_OWORD *)(a2 - 24) = v322;
          *(_QWORD *)(a2 - 8) = v358;
          *(_OWORD *)(a2 - 56) = v151;
          if (*(double *)(v12 + 216) < *(double *)(v12 + 160))
          {
            v155 = *(_QWORD *)(v12 + 160);
            v157 = *(_OWORD *)(v12 + 128);
            v156 = *(_OWORD *)(v12 + 144);
            v158 = *v149;
            v159 = *(_OWORD *)(v12 + 184);
            *v149 = *v150;
            *(_OWORD *)(v12 + 128) = v159;
            *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 200);
            *(_QWORD *)(v12 + 160) = *(_QWORD *)(v12 + 216);
            *v150 = v158;
            *(_OWORD *)(v12 + 184) = v157;
            *(_OWORD *)(v12 + 200) = v156;
            *(_QWORD *)(v12 + 216) = v155;
            if (*(double *)(v12 + 160) < *(double *)(v12 + 104))
            {
              v160 = *(_QWORD *)(v12 + 104);
              v162 = *(_OWORD *)(v12 + 72);
              v161 = *(_OWORD *)(v12 + 88);
              v163 = *(_OWORD *)v9;
              v164 = *(_OWORD *)(v12 + 128);
              *(_OWORD *)v9 = *v149;
              *(_OWORD *)(v12 + 72) = v164;
              *(_OWORD *)(v12 + 88) = *(_OWORD *)(v12 + 144);
              *(_QWORD *)(v12 + 104) = *(_QWORD *)(v12 + 160);
              *v149 = v163;
              *(_OWORD *)(v12 + 128) = v162;
              *(_OWORD *)(v12 + 144) = v161;
              *(_QWORD *)(v12 + 160) = v160;
              if (*(double *)(v12 + 104) < *(double *)(v12 + 48))
              {
                v357 = *(_QWORD *)(v12 + 48);
                v286 = *(_OWORD *)(v12 + 16);
                v321 = *(_OWORD *)(v12 + 32);
                v255 = *(_OWORD *)v12;
                v165 = *(_OWORD *)(v12 + 72);
                *(_OWORD *)v12 = *(_OWORD *)v9;
                *(_OWORD *)(v12 + 16) = v165;
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
LABEL_109:
                v166 = v255;
                v167 = v286;
                *(_QWORD *)(v9 + 48) = v357;
                *(_OWORD *)(v9 + 32) = v321;
LABEL_169:
                *(_OWORD *)v9 = v166;
                *(_OWORD *)(v9 + 16) = v167;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 1343)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v179 = (unint64_t)(v14 - 2) >> 1;
              v180 = v179;
              do
              {
                if (v179 >= v180)
                {
                  v182 = (2 * v180) | 1;
                  v183 = v12 + 56 * v182;
                  if (2 * v180 + 2 < v14 && *(double *)(v183 + 48) < *(double *)(v183 + 104))
                  {
                    v183 += 56;
                    v182 = 2 * v180 + 2;
                  }
                  v184 = v12 + 56 * v180;
                  v185 = *(double *)(v184 + 48);
                  if (*(double *)(v183 + 48) >= v185)
                  {
                    v289 = *(_OWORD *)(v184 + 16);
                    v324 = *(_OWORD *)(v184 + 32);
                    v257 = *(_OWORD *)v184;
                    do
                    {
                      v186 = v184;
                      v184 = v183;
                      v187 = *(_OWORD *)v183;
                      v188 = *(_OWORD *)(v183 + 16);
                      v189 = *(_OWORD *)(v183 + 32);
                      *(_QWORD *)(v186 + 48) = *(_QWORD *)(v183 + 48);
                      *(_OWORD *)(v186 + 16) = v188;
                      *(_OWORD *)(v186 + 32) = v189;
                      *(_OWORD *)v186 = v187;
                      if (v179 < v182)
                        break;
                      v190 = 2 * v182;
                      v182 = (2 * v182) | 1;
                      v183 = v12 + 56 * v182;
                      v191 = v190 + 2;
                      if (v191 < v14 && *(double *)(v183 + 48) < *(double *)(v183 + 104))
                      {
                        v183 += 56;
                        v182 = v191;
                      }
                    }
                    while (*(double *)(v183 + 48) >= v185);
                    *(_OWORD *)(v184 + 16) = v289;
                    *(_OWORD *)(v184 + 32) = v324;
                    *(_OWORD *)v184 = v257;
                    *(double *)(v184 + 48) = v185;
                  }
                }
                v181 = v180-- <= 0;
              }
              while (!v181);
              v192 = v13 / 0x38uLL;
              do
              {
                v193 = 0;
                v359 = *(_QWORD *)(v12 + 48);
                v290 = *(_OWORD *)(v12 + 16);
                v325 = *(_OWORD *)(v12 + 32);
                v258 = *(_OWORD *)v12;
                v194 = v12;
                do
                {
                  v198 = v194;
                  v194 += 56 * v193 + 56;
                  v199 = 2 * v193;
                  v193 = (2 * v193) | 1;
                  v200 = v199 + 2;
                  if (v200 < v192 && *(double *)(v194 + 48) < *(double *)(v194 + 104))
                  {
                    v194 += 56;
                    v193 = v200;
                  }
                  v195 = *(_OWORD *)v194;
                  v196 = *(_OWORD *)(v194 + 16);
                  v197 = *(_OWORD *)(v194 + 32);
                  *(_QWORD *)(v198 + 48) = *(_QWORD *)(v194 + 48);
                  *(_OWORD *)(v198 + 16) = v196;
                  *(_OWORD *)(v198 + 32) = v197;
                  *(_OWORD *)v198 = v195;
                }
                while (v193 <= (uint64_t)((unint64_t)(v192 - 2) >> 1));
                a2 -= 56;
                if (v194 == a2)
                {
                  *(_QWORD *)(v194 + 48) = v359;
                  *(_OWORD *)(v194 + 16) = v290;
                  *(_OWORD *)(v194 + 32) = v325;
                  *(_OWORD *)v194 = v258;
                }
                else
                {
                  v201 = *(_OWORD *)a2;
                  v202 = *(_OWORD *)(a2 + 16);
                  v203 = *(_OWORD *)(a2 + 32);
                  *(_QWORD *)(v194 + 48) = *(_QWORD *)(a2 + 48);
                  *(_OWORD *)(v194 + 16) = v202;
                  *(_OWORD *)(v194 + 32) = v203;
                  *(_OWORD *)v194 = v201;
                  *(_QWORD *)(a2 + 48) = v359;
                  *(_OWORD *)(a2 + 16) = v290;
                  *(_OWORD *)(a2 + 32) = v325;
                  *(_OWORD *)a2 = v258;
                  v204 = v194 - v12 + 56;
                  if (v204 >= 57)
                  {
                    v205 = (v204 / 0x38uLL - 2) >> 1;
                    v206 = v12 + 56 * v205;
                    v207 = *(double *)(v194 + 48);
                    if (*(double *)(v206 + 48) < v207)
                    {
                      v231 = *(_OWORD *)(v194 + 16);
                      v234 = *(_OWORD *)(v194 + 32);
                      v228 = *(_OWORD *)v194;
                      do
                      {
                        v208 = v194;
                        v194 = v206;
                        v209 = *(_OWORD *)v206;
                        v210 = *(_OWORD *)(v206 + 16);
                        v211 = *(_OWORD *)(v206 + 32);
                        *(_QWORD *)(v208 + 48) = *(_QWORD *)(v206 + 48);
                        *(_OWORD *)(v208 + 16) = v210;
                        *(_OWORD *)(v208 + 32) = v211;
                        *(_OWORD *)v208 = v209;
                        if (!v205)
                          break;
                        v205 = (v205 - 1) >> 1;
                        v206 = v12 + 56 * v205;
                      }
                      while (*(double *)(v206 + 48) < v207);
                      *(_OWORD *)(v194 + 16) = v231;
                      *(_OWORD *)(v194 + 32) = v234;
                      *(_OWORD *)v194 = v228;
                      *(double *)(v194 + 48) = v207;
                    }
                  }
                }
                v181 = v192-- <= 2;
              }
              while (!v181);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 56 * ((unint64_t)v14 >> 1);
          v17 = *(double *)(a2 - 8);
          if ((unint64_t)v13 < 0x1C01)
          {
            v22 = *(double *)(v12 + 48);
            if (v22 >= *(double *)(v16 + 48))
            {
              if (v17 < v22)
              {
                v335 = *(_QWORD *)(v12 + 48);
                v266 = *(_OWORD *)(v12 + 16);
                v299 = *(_OWORD *)(v12 + 32);
                v239 = *(_OWORD *)v12;
                a5 = *(__n128 *)v9;
                v32 = *(_OWORD *)(a2 - 40);
                v33 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v32;
                *(_OWORD *)(v12 + 32) = v33;
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = *((_QWORD *)&v239 + 1);
                *(_QWORD *)(a2 - 8) = v335;
                *(_OWORD *)(a2 - 40) = v266;
                *(_OWORD *)(a2 - 24) = v299;
                *(_OWORD *)v9 = v239;
                if (*(double *)(v12 + 48) < *(double *)(v16 + 48))
                {
                  v336 = *(_QWORD *)(v16 + 48);
                  v267 = *(_OWORD *)(v16 + 16);
                  v300 = *(_OWORD *)(v16 + 32);
                  v240 = *(__n128 *)v16;
                  a5 = *(__n128 *)v12;
                  v34 = *(_OWORD *)(v12 + 16);
                  v35 = *(_OWORD *)(v12 + 32);
                  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                  *(_OWORD *)(v16 + 16) = v34;
                  *(_OWORD *)(v16 + 32) = v35;
                  *(__n128 *)v16 = a5;
                  a5.n128_u64[1] = v240.n128_u64[1];
                  *(_QWORD *)(v12 + 48) = v336;
                  *(_OWORD *)(v12 + 16) = v267;
                  *(_OWORD *)(v12 + 32) = v300;
                  *(__n128 *)v12 = v240;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v22)
              {
                v341 = *(_QWORD *)(v16 + 48);
                v271 = *(_OWORD *)(v16 + 16);
                v305 = *(_OWORD *)(v16 + 32);
                v243 = *(__n128 *)v16;
                a5 = *(__n128 *)v12;
                v59 = *(_OWORD *)(v12 + 16);
                v60 = *(_OWORD *)(v12 + 32);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                *(_OWORD *)(v16 + 16) = v59;
                *(_OWORD *)(v16 + 32) = v60;
                *(__n128 *)v16 = a5;
                a5.n128_u64[1] = v243.n128_u64[1];
                *(_QWORD *)(v12 + 48) = v341;
                *(_OWORD *)(v12 + 16) = v271;
                *(_OWORD *)(v12 + 32) = v305;
                *(__n128 *)v12 = v243;
                if (*(double *)(a2 - 8) >= *(double *)(v12 + 48))
                  goto LABEL_31;
                v332 = *(_QWORD *)(v12 + 48);
                v263 = *(_OWORD *)(v12 + 16);
                v296 = *(_OWORD *)(v12 + 32);
                v236 = *(_OWORD *)v12;
                v61 = *(_OWORD *)v9;
                v62 = *(_OWORD *)(a2 - 40);
                v63 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v62;
                *(_OWORD *)(v12 + 32) = v63;
                *(_OWORD *)v12 = v61;
              }
              else
              {
                v332 = *(_QWORD *)(v16 + 48);
                v263 = *(_OWORD *)(v16 + 16);
                v296 = *(_OWORD *)(v16 + 32);
                v236 = *(_OWORD *)v16;
                v23 = *(_OWORD *)v9;
                v24 = *(_OWORD *)(a2 - 40);
                v25 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v16 + 16) = v24;
                *(_OWORD *)(v16 + 32) = v25;
                *(_OWORD *)v16 = v23;
              }
              a5.n128_u64[1] = *((_QWORD *)&v236 + 1);
              *(_QWORD *)(a2 - 8) = v332;
              *(_OWORD *)(a2 - 40) = v263;
              *(_OWORD *)(a2 - 24) = v296;
              *(_OWORD *)v9 = v236;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u64[0] = *(_QWORD *)(v12 + 48);
            if (*(double *)(v12 - 8) < a5.n128_f64[0])
              goto LABEL_56;
            a5 = *(__n128 *)v12;
            v230 = *(_OWORD *)(v12 + 16);
            v233 = *(_OWORD *)(v12 + 32);
            v227 = *(_OWORD *)v12;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 48);
            if (a5.n128_f64[0] >= *(double *)(a2 - 8))
            {
              v126 = v12 + 56;
              do
              {
                v12 = v126;
                if (v126 >= a2)
                  break;
                v127 = *(double *)(v126 + 48);
                v126 += 56;
              }
              while (a5.n128_f64[0] >= v127);
            }
            else
            {
              v124 = v12;
              do
              {
                v12 = v124 + 56;
                v125 = *(double *)(v124 + 104);
                v124 += 56;
              }
              while (a5.n128_f64[0] >= v125);
            }
            v128 = a2;
            if (v12 < a2)
            {
              v129 = a2;
              do
              {
                v128 = v129 - 56;
                v130 = *(double *)(v129 - 8);
                v129 -= 56;
              }
              while (a5.n128_f64[0] < v130);
            }
            while (v12 < v128)
            {
              v355 = *(_QWORD *)(v12 + 48);
              v284 = *(_OWORD *)(v12 + 16);
              v319 = *(_OWORD *)(v12 + 32);
              v253 = *(_OWORD *)v12;
              v131 = *(_OWORD *)v128;
              v132 = *(_OWORD *)(v128 + 16);
              v133 = *(_OWORD *)(v128 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v128 + 48);
              *(_OWORD *)(v12 + 16) = v132;
              *(_OWORD *)(v12 + 32) = v133;
              *(_OWORD *)v12 = v131;
              *(_QWORD *)(v128 + 48) = v355;
              *(_OWORD *)(v128 + 16) = v284;
              *(_OWORD *)(v128 + 32) = v319;
              *(_OWORD *)v128 = v253;
              do
              {
                v134 = *(double *)(v12 + 104);
                v12 += 56;
              }
              while (a5.n128_f64[0] >= v134);
              do
              {
                v135 = *(double *)(v128 - 8);
                v128 -= 56;
              }
              while (a5.n128_f64[0] < v135);
            }
            v136 = (__int128 *)(v12 - 56);
            if (v12 - 56 != a1)
            {
              v137 = *v136;
              v138 = *(_OWORD *)(v12 - 40);
              v139 = *(_OWORD *)(v12 - 24);
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
              *(_OWORD *)(a1 + 16) = v138;
              *(_OWORD *)(a1 + 32) = v139;
              *(_OWORD *)a1 = v137;
            }
            a4 = 0;
            *(_OWORD *)(v12 - 40) = v230;
            *(_OWORD *)(v12 - 24) = v233;
            *v136 = v227;
            *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
            continue;
          }
          v18 = *(double *)(v16 + 48);
          if (v18 >= *(double *)(v12 + 48))
          {
            if (v17 < v18)
            {
              v333 = *(_QWORD *)(v16 + 48);
              v264 = *(_OWORD *)(v16 + 16);
              v297 = *(_OWORD *)(v16 + 32);
              v237 = *(__n128 *)v16;
              v26 = *(_OWORD *)v9;
              v27 = *(_OWORD *)(a2 - 40);
              v28 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v27;
              *(_OWORD *)(v16 + 32) = v28;
              *(_OWORD *)v16 = v26;
              *(_QWORD *)(a2 - 8) = v333;
              *(_OWORD *)(a2 - 40) = v264;
              *(_OWORD *)(a2 - 24) = v297;
              *(__n128 *)v9 = v237;
              if (*(double *)(v16 + 48) < *(double *)(v12 + 48))
              {
                v334 = *(_QWORD *)(v12 + 48);
                v265 = *(_OWORD *)(v12 + 16);
                v298 = *(_OWORD *)(v12 + 32);
                v238 = *(_OWORD *)v12;
                v29 = *(__n128 *)v16;
                v30 = *(_OWORD *)(v16 + 16);
                v31 = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v12 + 16) = v30;
                *(_OWORD *)(v12 + 32) = v31;
                *(__n128 *)v12 = v29;
                *(_QWORD *)(v16 + 48) = v334;
                *(_OWORD *)(v16 + 16) = v265;
                *(_OWORD *)(v16 + 32) = v298;
                *(_OWORD *)v16 = v238;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v337 = *(_QWORD *)(v12 + 48);
              v268 = *(_OWORD *)(v12 + 16);
              v301 = *(_OWORD *)(v12 + 32);
              v241 = *(_OWORD *)v12;
              v36 = *(__n128 *)v16;
              v37 = *(_OWORD *)(v16 + 16);
              v38 = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v12 + 16) = v37;
              *(_OWORD *)(v12 + 32) = v38;
              *(__n128 *)v12 = v36;
              *(_QWORD *)(v16 + 48) = v337;
              *(_OWORD *)(v16 + 16) = v268;
              *(_OWORD *)(v16 + 32) = v301;
              *(_OWORD *)v16 = v241;
              if (*(double *)(a2 - 8) >= *(double *)(v16 + 48))
                goto LABEL_22;
              v331 = *(_QWORD *)(v16 + 48);
              v262 = *(_OWORD *)(v16 + 16);
              v295 = *(_OWORD *)(v16 + 32);
              v235 = *(_OWORD *)v16;
              v39 = *(_OWORD *)v9;
              v40 = *(_OWORD *)(a2 - 40);
              v41 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v40;
              *(_OWORD *)(v16 + 32) = v41;
              *(_OWORD *)v16 = v39;
            }
            else
            {
              v331 = *(_QWORD *)(v12 + 48);
              v262 = *(_OWORD *)(v12 + 16);
              v295 = *(_OWORD *)(v12 + 32);
              v235 = *(_OWORD *)v12;
              v19 = *(_OWORD *)v9;
              v20 = *(_OWORD *)(a2 - 40);
              v21 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v12 + 16) = v20;
              *(_OWORD *)(v12 + 32) = v21;
              *(_OWORD *)v12 = v19;
            }
            *(_QWORD *)(a2 - 8) = v331;
            *(_OWORD *)(a2 - 40) = v262;
            *(_OWORD *)(a2 - 24) = v295;
            *(_OWORD *)v9 = v235;
          }
LABEL_22:
          v42 = (__n128 *)(v12 + 56);
          v43 = v12 + 56 * v15;
          v44 = v43 - 56;
          v45 = *(double *)(v43 - 8);
          v46 = *(double *)(a2 - 64);
          if (v45 >= *(double *)(v12 + 104))
          {
            if (v46 < v45)
            {
              v339 = *(_QWORD *)(v43 - 8);
              v269 = *(_OWORD *)(v43 - 40);
              v303 = *(_OWORD *)(v43 - 24);
              v242 = *(__n128 *)v44;
              v52 = *v10;
              v53 = *(_OWORD *)(a2 - 96);
              v54 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v43 - 8) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v43 - 40) = v53;
              *(_OWORD *)(v43 - 24) = v54;
              *(__n128 *)v44 = v52;
              *(_QWORD *)(a2 - 64) = v339;
              *(_OWORD *)(a2 - 96) = v269;
              *(_OWORD *)(a2 - 80) = v303;
              *v10 = v242;
              if (*(double *)(v43 - 8) < *(double *)(v12 + 104))
              {
                v55 = *v42;
                v270 = *(_OWORD *)(v12 + 72);
                v304 = *(_OWORD *)(v12 + 88);
                v340 = *(_QWORD *)(v12 + 104);
                v56 = *(_QWORD *)(v43 - 8);
                v58 = *(_OWORD *)(v43 - 40);
                v57 = *(_OWORD *)(v43 - 24);
                *v42 = *(__n128 *)v44;
                *(_OWORD *)(v12 + 72) = v58;
                *(_OWORD *)(v12 + 88) = v57;
                *(_QWORD *)(v12 + 104) = v56;
                *(_OWORD *)(v43 - 40) = v270;
                *(_OWORD *)(v43 - 24) = v304;
                *(_QWORD *)(v43 - 8) = v340;
                *(__n128 *)v44 = v55;
              }
            }
          }
          else
          {
            if (v46 >= v45)
            {
              v64 = *v42;
              v272 = *(_OWORD *)(v12 + 72);
              v306 = *(_OWORD *)(v12 + 88);
              v342 = *(_QWORD *)(v12 + 104);
              v65 = *(_QWORD *)(v43 - 8);
              v67 = *(_OWORD *)(v43 - 40);
              v66 = *(_OWORD *)(v43 - 24);
              *v42 = *(__n128 *)v44;
              *(_OWORD *)(v12 + 72) = v67;
              *(_OWORD *)(v12 + 88) = v66;
              *(_QWORD *)(v12 + 104) = v65;
              *(_OWORD *)(v43 - 40) = v272;
              *(_OWORD *)(v43 - 24) = v306;
              *(_QWORD *)(v43 - 8) = v342;
              *(__n128 *)v44 = v64;
              if (*(double *)(a2 - 64) >= *(double *)(v43 - 8))
                goto LABEL_36;
              v343 = *(_QWORD *)(v43 - 8);
              v273 = *(_OWORD *)(v43 - 40);
              v307 = *(_OWORD *)(v43 - 24);
              v244 = *(__n128 *)v44;
              v68 = *v10;
              v69 = *(_OWORD *)(a2 - 96);
              v70 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v43 - 8) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v43 - 40) = v69;
              *(_OWORD *)(v43 - 24) = v70;
              *(__n128 *)v44 = v68;
              v47 = v244;
              v48 = v273;
              *(_QWORD *)(a2 - 64) = v343;
              *(_OWORD *)(a2 - 80) = v307;
            }
            else
            {
              v47 = *v42;
              v48 = *(_OWORD *)(v12 + 72);
              v302 = *(_OWORD *)(v12 + 88);
              v338 = *(_QWORD *)(v12 + 104);
              v49 = *(_QWORD *)(a2 - 64);
              v51 = *(_OWORD *)(a2 - 96);
              v50 = *(_OWORD *)(a2 - 80);
              *v42 = *v10;
              *(_OWORD *)(v12 + 72) = v51;
              *(_OWORD *)(v12 + 88) = v50;
              *(_QWORD *)(v12 + 104) = v49;
              *(_OWORD *)(a2 - 80) = v302;
              *(_QWORD *)(a2 - 64) = v338;
            }
            *v10 = v47;
            *(_OWORD *)(a2 - 96) = v48;
          }
LABEL_36:
          v71 = (__n128 *)(v12 + 112);
          v72 = v12 + 56 * v15;
          v73 = (__n128 *)(v72 + 56);
          v74 = *(double *)(v72 + 104);
          v75 = *(double *)(a2 - 120);
          if (v74 >= *(double *)(v12 + 160))
          {
            if (v75 < v74)
            {
              v345 = *(_QWORD *)(v72 + 104);
              v274 = *(_OWORD *)(v72 + 72);
              v309 = *(_OWORD *)(v72 + 88);
              v245 = *v73;
              v81 = *v11;
              v82 = *(_OWORD *)(a2 - 152);
              v83 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v72 + 104) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v72 + 72) = v82;
              *(_OWORD *)(v72 + 88) = v83;
              *v73 = v81;
              *(_QWORD *)(a2 - 120) = v345;
              *(_OWORD *)(a2 - 152) = v274;
              *(_OWORD *)(a2 - 136) = v309;
              *v11 = v245;
              if (*(double *)(v72 + 104) < *(double *)(v12 + 160))
              {
                v84 = *v71;
                v275 = *(_OWORD *)(v12 + 128);
                v310 = *(_OWORD *)(v12 + 144);
                v346 = *(_QWORD *)(v12 + 160);
                v85 = *(_QWORD *)(v72 + 104);
                v87 = *(_OWORD *)(v72 + 72);
                v86 = *(_OWORD *)(v72 + 88);
                *v71 = *v73;
                *(_OWORD *)(v12 + 128) = v87;
                *(_OWORD *)(v12 + 144) = v86;
                *(_QWORD *)(v12 + 160) = v85;
                *(_OWORD *)(v72 + 72) = v275;
                *(_OWORD *)(v72 + 88) = v310;
                *(_QWORD *)(v72 + 104) = v346;
                *v73 = v84;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              v88 = *v71;
              v276 = *(_OWORD *)(v12 + 128);
              v311 = *(_OWORD *)(v12 + 144);
              v347 = *(_QWORD *)(v12 + 160);
              v89 = *(_QWORD *)(v72 + 104);
              v91 = *(_OWORD *)(v72 + 72);
              v90 = *(_OWORD *)(v72 + 88);
              *v71 = *v73;
              *(_OWORD *)(v12 + 128) = v91;
              *(_OWORD *)(v12 + 144) = v90;
              *(_QWORD *)(v12 + 160) = v89;
              *(_OWORD *)(v72 + 72) = v276;
              *(_OWORD *)(v72 + 88) = v311;
              *(_QWORD *)(v72 + 104) = v347;
              *v73 = v88;
              if (*(double *)(a2 - 120) >= *(double *)(v72 + 104))
                goto LABEL_45;
              v348 = *(_QWORD *)(v72 + 104);
              v277 = *(_OWORD *)(v72 + 72);
              v312 = *(_OWORD *)(v72 + 88);
              v246 = *v73;
              v92 = *v11;
              v93 = *(_OWORD *)(a2 - 152);
              v94 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v72 + 104) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v72 + 72) = v93;
              *(_OWORD *)(v72 + 88) = v94;
              *v73 = v92;
              v76 = v246;
              v77 = v277;
              *(_QWORD *)(a2 - 120) = v348;
              *(_OWORD *)(a2 - 136) = v312;
            }
            else
            {
              v76 = *v71;
              v77 = *(_OWORD *)(v12 + 128);
              v308 = *(_OWORD *)(v12 + 144);
              v344 = *(_QWORD *)(v12 + 160);
              v78 = *(_QWORD *)(a2 - 120);
              v80 = *(_OWORD *)(a2 - 152);
              v79 = *(_OWORD *)(a2 - 136);
              *v71 = *v11;
              *(_OWORD *)(v12 + 128) = v80;
              *(_OWORD *)(v12 + 144) = v79;
              *(_QWORD *)(v12 + 160) = v78;
              *(_OWORD *)(a2 - 136) = v308;
              *(_QWORD *)(a2 - 120) = v344;
            }
            *v11 = v76;
            *(_OWORD *)(a2 - 152) = v77;
          }
LABEL_45:
          v95 = *(double *)(v16 + 48);
          v96 = *(double *)(v72 + 104);
          if (v95 >= *(double *)(v44 + 48))
          {
            if (v96 < v95)
            {
              v350 = *(_QWORD *)(v16 + 48);
              v279 = *(_OWORD *)(v16 + 16);
              v314 = *(_OWORD *)(v16 + 32);
              v248 = *(__n128 *)v16;
              v98 = *(_OWORD *)(v72 + 72);
              *(__n128 *)v16 = *v73;
              *(_OWORD *)(v16 + 16) = v98;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v72 + 88);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v72 + 104);
              *(_OWORD *)(v72 + 72) = v279;
              *(_OWORD *)(v72 + 88) = v314;
              *(_QWORD *)(v72 + 104) = v350;
              *v73 = v248;
              if (*(double *)(v16 + 48) < *(double *)(v44 + 48))
              {
                v351 = *(_QWORD *)(v44 + 48);
                v280 = *(_OWORD *)(v44 + 16);
                v315 = *(_OWORD *)(v44 + 32);
                v249 = *(__n128 *)v44;
                v99 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v44 = *(_OWORD *)v16;
                *(_OWORD *)(v44 + 16) = v99;
                *(_OWORD *)(v44 + 32) = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v44 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v16 + 16) = v280;
                *(_OWORD *)(v16 + 32) = v315;
                *(_QWORD *)(v16 + 48) = v351;
                *(__n128 *)v16 = v249;
              }
            }
          }
          else
          {
            if (v96 >= v95)
            {
              v352 = *(_QWORD *)(v44 + 48);
              v281 = *(_OWORD *)(v44 + 16);
              v316 = *(_OWORD *)(v44 + 32);
              v250 = *(__n128 *)v44;
              v100 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v44 = *(_OWORD *)v16;
              *(_OWORD *)(v44 + 16) = v100;
              *(_OWORD *)(v44 + 32) = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v44 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v16 + 16) = v281;
              *(_OWORD *)(v16 + 32) = v316;
              *(_QWORD *)(v16 + 48) = v352;
              *(__n128 *)v16 = v250;
              if (*(double *)(v72 + 104) >= *(double *)(v16 + 48))
                goto LABEL_54;
              v349 = *(_QWORD *)(v16 + 48);
              v278 = *(_OWORD *)(v16 + 16);
              v313 = *(_OWORD *)(v16 + 32);
              v247 = *(__n128 *)v16;
              v101 = *(_OWORD *)(v72 + 72);
              *(__n128 *)v16 = *v73;
              *(_OWORD *)(v16 + 16) = v101;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v72 + 88);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v72 + 104);
            }
            else
            {
              v349 = *(_QWORD *)(v44 + 48);
              v278 = *(_OWORD *)(v44 + 16);
              v313 = *(_OWORD *)(v44 + 32);
              v247 = *(__n128 *)v44;
              v97 = *(_OWORD *)(v72 + 72);
              *(__n128 *)v44 = *v73;
              *(_OWORD *)(v44 + 16) = v97;
              *(_OWORD *)(v44 + 32) = *(_OWORD *)(v72 + 88);
              *(_QWORD *)(v44 + 48) = *(_QWORD *)(v72 + 104);
            }
            *(_OWORD *)(v72 + 72) = v278;
            *(_OWORD *)(v72 + 88) = v313;
            *(_QWORD *)(v72 + 104) = v349;
            *v73 = v247;
          }
LABEL_54:
          v353 = *(_QWORD *)(v12 + 48);
          v282 = *(_OWORD *)(v12 + 16);
          v317 = *(_OWORD *)(v12 + 32);
          v251 = *(_OWORD *)v12;
          a5 = *(__n128 *)v16;
          v102 = *(_OWORD *)(v16 + 16);
          v103 = *(_OWORD *)(v16 + 32);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
          *(_OWORD *)(v12 + 16) = v102;
          *(_OWORD *)(v12 + 32) = v103;
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = *((_QWORD *)&v251 + 1);
          *(_QWORD *)(v16 + 48) = v353;
          *(_OWORD *)(v16 + 16) = v282;
          *(_OWORD *)(v16 + 32) = v317;
          *(_OWORD *)v16 = v251;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u64[0] = *(_QWORD *)(v12 + 48);
LABEL_56:
          v104 = 0;
          v229 = *(_OWORD *)(v12 + 16);
          v232 = *(_OWORD *)(v12 + 32);
          v226 = *(_OWORD *)v12;
          do
          {
            v105 = *(double *)(v12 + v104 + 104);
            v104 += 56;
          }
          while (v105 < a5.n128_f64[0]);
          v106 = v12 + v104;
          v107 = a2;
          if (v104 == 56)
          {
            v110 = a2;
            while (v106 < v110)
            {
              v108 = v110 - 56;
              v111 = *(double *)(v110 - 8);
              v110 -= 56;
              if (v111 < a5.n128_f64[0])
                goto LABEL_64;
            }
            v108 = v110;
            v12 = v106;
          }
          else
          {
            do
            {
              v108 = v107 - 56;
              v109 = *(double *)(v107 - 8);
              v107 -= 56;
            }
            while (v109 >= a5.n128_f64[0]);
LABEL_64:
            v12 = v106;
            if (v106 < v108)
            {
              v112 = v108;
              do
              {
                v354 = *(_QWORD *)(v12 + 48);
                v283 = *(_OWORD *)(v12 + 16);
                v318 = *(_OWORD *)(v12 + 32);
                v252 = *(_OWORD *)v12;
                v113 = *(_OWORD *)v112;
                v114 = *(_OWORD *)(v112 + 16);
                v115 = *(_OWORD *)(v112 + 32);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v112 + 48);
                *(_OWORD *)(v12 + 16) = v114;
                *(_OWORD *)(v12 + 32) = v115;
                *(_OWORD *)v12 = v113;
                *(_QWORD *)(v112 + 48) = v354;
                *(_OWORD *)(v112 + 16) = v283;
                *(_OWORD *)(v112 + 32) = v318;
                *(_OWORD *)v112 = v252;
                do
                {
                  v116 = *(double *)(v12 + 104);
                  v12 += 56;
                }
                while (v116 < a5.n128_f64[0]);
                do
                {
                  v117 = *(double *)(v112 - 8);
                  v112 -= 56;
                }
                while (v117 >= a5.n128_f64[0]);
              }
              while (v12 < v112);
            }
          }
          v118 = (__int128 *)(v12 - 56);
          if (v12 - 56 != a1)
          {
            v119 = *v118;
            v120 = *(_OWORD *)(v12 - 40);
            v121 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(a1 + 16) = v120;
            *(_OWORD *)(a1 + 32) = v121;
            *(_OWORD *)a1 = v119;
          }
          *(_OWORD *)(v12 - 40) = v229;
          *(_OWORD *)(v12 - 24) = v232;
          *v118 = v226;
          *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
          if (v106 < v108)
            goto LABEL_75;
          v122 = sub_20F344AF8(a1, v12 - 56, a5);
          if (!sub_20F344AF8(v12, a2, v123))
          {
            if (v122)
              continue;
LABEL_75:
            sub_20F343794(a1, v12 - 56, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 56;
          if (v122)
            return;
          goto LABEL_1;
        }
        v168 = (_OWORD *)(v12 + 56);
        v170 = v12 == a2 || v168 == (_OWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v170)
          {
            v171 = 0;
            v172 = (_OWORD *)v12;
            do
            {
              v174 = *((double *)v172 + 13);
              v175 = *((double *)v172 + 6);
              v172 = v168;
              if (v174 < v175)
              {
                v288 = v168[1];
                v323 = v168[2];
                v256 = *v168;
                v176 = v171;
                do
                {
                  v177 = v12 + v176;
                  v178 = *(_OWORD *)(v12 + v176 + 16);
                  *(_OWORD *)(v177 + 56) = *(_OWORD *)(v12 + v176);
                  *(_OWORD *)(v177 + 72) = v178;
                  *(_OWORD *)(v177 + 88) = *(_OWORD *)(v12 + v176 + 32);
                  *(_QWORD *)(v177 + 104) = *(_QWORD *)(v12 + v176 + 48);
                  if (!v176)
                  {
                    v173 = v12;
                    goto LABEL_120;
                  }
                  v176 -= 56;
                }
                while (v174 < *(double *)(v177 - 8));
                v173 = v12 + v176 + 56;
LABEL_120:
                *(_OWORD *)(v173 + 16) = v288;
                *(_OWORD *)(v173 + 32) = v323;
                *(_OWORD *)v173 = v256;
                *(double *)(v173 + 48) = v174;
              }
              v168 = (_OWORD *)((char *)v172 + 56);
              v171 += 56;
            }
            while ((_OWORD *)((char *)v172 + 56) != (_OWORD *)a2);
          }
        }
        else if (!v170)
        {
          do
          {
            v217 = *(double *)(a1 + 104);
            v218 = *(double *)(a1 + 48);
            a1 = (uint64_t)v168;
            if (v217 < v218)
            {
              v293 = v168[1];
              v328 = v168[2];
              v260 = *v168;
              v219 = v168;
              do
              {
                v220 = *(_OWORD *)((char *)v219 - 40);
                *v219 = *(_OWORD *)((char *)v219 - 56);
                v219[1] = v220;
                v219[2] = *(_OWORD *)((char *)v219 - 24);
                *((_QWORD *)v219 + 6) = *((_QWORD *)v219 - 1);
                v221 = *((double *)v219 - 8);
                v219 = (_OWORD *)((char *)v219 - 56);
              }
              while (v217 < v221);
              v219[1] = v293;
              v219[2] = v328;
              *v219 = v260;
              *((double *)v219 + 6) = v217;
            }
            v168 = (_OWORD *)((char *)v168 + 56);
          }
          while (a1 + 56 != a2);
        }
        return;
    }
  }
}

  v8 = (_QWORD *)(a2 - 16);
  v193 = (uint64_t *)(a2 - 40);
  v9 = (uint64_t *)(a2 - 64);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v124 = *(double *)(a2 - 24);
        v125 = *(double *)v10;
        if (v124 < *(double *)v10)
        {
          *(double *)v10 = v124;
          *(double *)(a2 - 24) = v125;
          v218 = *(_OWORD *)(v10 + 8);
          v126 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v10 + 16) = v126;
          goto LABEL_168;
        }
        return;
      case 3:
        v127 = *(double *)(v10 + 24);
        v128 = *(double *)v10;
        v129 = *(double *)(a2 - 24);
        if (v127 >= *(double *)v10)
        {
          if (v129 < v127)
          {
            *(double *)(v10 + 24) = v129;
            *(double *)(a2 - 24) = v127;
            v225 = *(_OWORD *)(v10 + 32);
            v180 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)(v10 + 32) = v180;
            *(_DWORD *)(a2 - 8) = DWORD2(v225);
            *(_QWORD *)(a2 - 16) = v225;
            v135 = *(double *)(v10 + 24);
            goto LABEL_157;
          }
        }
        else
        {
          v130 = (__int128 *)(v10 + 8);
          if (v129 >= v127)
          {
            *(double *)v10 = v127;
            v189 = (__int128 *)(v10 + 32);
            v190 = *(_QWORD *)(v10 + 32);
            *(double *)(v10 + 24) = v128;
            v228 = *v130;
            *(_QWORD *)v130 = v190;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 + 40);
            *(_QWORD *)(v10 + 32) = v228;
            *(_DWORD *)(v10 + 40) = DWORD2(v228);
            v191 = *(double *)(a2 - 24);
            if (v191 >= v128)
              return;
            *(double *)(v10 + 24) = v191;
            *(double *)(a2 - 24) = v128;
            v218 = *v189;
            v192 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v189 = v192;
          }
          else
          {
            *(double *)v10 = v129;
            *(double *)(a2 - 24) = v128;
            v218 = *v130;
            v131 = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v130 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 16) = v131;
          }
LABEL_168:
          *(_DWORD *)(a2 - 8) = DWORD2(v218);
          *(_QWORD *)(a2 - 16) = v218;
        }
        return;
      case 4:
        sub_20F3883A8(v10, v10 + 24, v10 + 48, a2 - 24);
        return;
      case 5:
        sub_20F3883A8(v10, v10 + 24, v10 + 48, v10 + 72);
        v132 = *(double *)(a2 - 24);
        v133 = *(double *)(v10 + 72);
        if (v132 < v133)
        {
          *(double *)(v10 + 72) = v132;
          *(double *)(a2 - 24) = v133;
          v219 = *(_OWORD *)(v10 + 80);
          v134 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v10 + 88) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(v10 + 80) = v134;
          *(_DWORD *)(a2 - 8) = DWORD2(v219);
          *(_QWORD *)(a2 - 16) = v219;
          v135 = *(double *)(v10 + 72);
          v136 = *(double *)(v10 + 48);
          if (v135 < v136)
          {
            *(double *)(v10 + 48) = v135;
            *(double *)(v10 + 72) = v136;
            v220 = *(_OWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = *(_QWORD *)(v10 + 80);
            *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 88);
            *(_QWORD *)(v10 + 80) = v220;
            *(_DWORD *)(v10 + 88) = DWORD2(v220);
            v137 = *(double *)(v10 + 24);
            if (v135 < v137)
            {
              *(double *)(v10 + 24) = v135;
              *(double *)(v10 + 48) = v137;
              v221 = *(_OWORD *)(v10 + 32);
              *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 + 56);
              *(_DWORD *)(v10 + 40) = *(_DWORD *)(v10 + 64);
              *(_QWORD *)(v10 + 56) = v221;
              *(_DWORD *)(v10 + 64) = DWORD2(v221);
LABEL_157:
              v181 = *(double *)v10;
              if (v135 < *(double *)v10)
              {
                *(double *)v10 = v135;
                *(double *)(v10 + 24) = v181;
                v226 = *(_OWORD *)(v10 + 8);
                *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 + 40);
                *(_QWORD *)(v10 + 32) = v226;
                *(_DWORD *)(v10 + 40) = DWORD2(v226);
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v138 = v10 + 24;
          v140 = v10 == a2 || v138 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v140)
            {
              v141 = 0;
              v142 = v10;
              do
              {
                v144 = v138;
                v145 = *(double *)(v142 + 24);
                if (v145 < *(double *)v142)
                {
                  v222 = *(_QWORD *)(v142 + 32);
                  v229 = *(_DWORD *)(v142 + 40);
                  v146 = *(double *)v142;
                  v147 = v141;
                  do
                  {
                    v148 = v10 + v147;
                    *(double *)(v148 + 24) = v146;
                    *(_QWORD *)(v148 + 32) = *(_QWORD *)(v10 + v147 + 8);
                    *(_DWORD *)(v148 + 40) = *(_DWORD *)(v10 + v147 + 16);
                    if (!v147)
                    {
                      v143 = (double *)v10;
                      goto LABEL_118;
                    }
                    v146 = *(double *)(v148 - 24);
                    v147 -= 24;
                  }
                  while (v145 < v146);
                  v143 = (double *)(v10 + v147 + 24);
LABEL_118:
                  *v143 = v145;
                  *(_DWORD *)(v148 + 16) = v229;
                  *(_QWORD *)(v148 + 8) = v222;
                }
                v138 = v144 + 24;
                v141 += 24;
                v142 = v144;
              }
              while (v144 + 24 != a2);
            }
          }
          else if (!v140)
          {
            v182 = v10 + 32;
            do
            {
              v183 = v138;
              v184 = *(double *)(a1 + 24);
              if (v184 < *(double *)a1)
              {
                v227 = *(_QWORD *)(a1 + 32);
                v232 = *(_DWORD *)(a1 + 40);
                v185 = *(double *)a1;
                v186 = v182;
                do
                {
                  v187 = v186;
                  v188 = *(_QWORD *)(v186 - 24);
                  v186 -= 24;
                  *(double *)(v187 - 8) = v185;
                  *(_QWORD *)v187 = v188;
                  *(_DWORD *)(v187 + 8) = *(_DWORD *)(v187 - 16);
                  v185 = *(double *)(v187 - 56);
                }
                while (v184 < v185);
                *(double *)(v186 - 8) = v184;
                *(_DWORD *)(v186 + 8) = v232;
                *(_QWORD *)v186 = v227;
              }
              v138 = v183 + 24;
              v182 += 24;
              a1 = v183;
            }
            while (v183 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v149 = (unint64_t)(v12 - 2) >> 1;
            v150 = v149;
            do
            {
              if (v149 >= v150)
              {
                v152 = (2 * v150) | 1;
                v153 = v10 + 24 * v152;
                if (2 * v150 + 2 < v12 && *(double *)v153 < *(double *)(v153 + 24))
                {
                  v153 += 24;
                  v152 = 2 * v150 + 2;
                }
                v154 = v10 + 24 * v150;
                v155 = *(double *)v153;
                v156 = *(double *)v154;
                if (*(double *)v153 >= *(double *)v154)
                {
                  v230 = *(_DWORD *)(v154 + 16);
                  v223 = *(_QWORD *)(v154 + 8);
                  do
                  {
                    v157 = v154;
                    v154 = v153;
                    *(double *)v157 = v155;
                    v159 = v153 + 8;
                    v158 = *(_QWORD *)(v153 + 8);
                    *(_DWORD *)(v157 + 16) = *(_DWORD *)(v159 + 8);
                    *(_QWORD *)(v157 + 8) = v158;
                    if (v149 < v152)
                      break;
                    v160 = 2 * v152;
                    v152 = (2 * v152) | 1;
                    v153 = v10 + 24 * v152;
                    v161 = v160 + 2;
                    if (v161 < v12 && *(double *)v153 < *(double *)(v153 + 24))
                    {
                      v153 += 24;
                      v152 = v161;
                    }
                    v155 = *(double *)v153;
                  }
                  while (*(double *)v153 >= v156);
                  *(double *)v154 = v156;
                  *(_QWORD *)v159 = v223;
                  *(_DWORD *)(v159 + 8) = v230;
                }
              }
              v151 = v150-- <= 0;
            }
            while (!v151);
            v162 = v11 / 0x18uLL;
            do
            {
              v163 = 0;
              v164 = *(double *)v10;
              v235 = *(_QWORD *)(v10 + 8);
              v238 = *(_DWORD *)(v10 + 16);
              v165 = (_QWORD *)v10;
              do
              {
                v168 = v165;
                v165 += 3 * v163 + 3;
                v169 = 2 * v163;
                v163 = (2 * v163) | 1;
                v170 = v169 + 2;
                if (v170 < v162 && *(double *)v165 < *((double *)v165 + 3))
                {
                  v165 += 3;
                  v163 = v170;
                }
                *v168 = *v165;
                v166 = v165 + 1;
                v167 = v165[1];
                *((_DWORD *)v168 + 4) = *((_DWORD *)v165 + 4);
                v168[1] = v167;
              }
              while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
              if (v165 == (_QWORD *)(a2 - 24))
              {
                *(double *)v165 = v164;
                *((_DWORD *)v165 + 4) = v238;
                *v166 = v235;
              }
              else
              {
                *v165 = *(_QWORD *)(a2 - 24);
                v171 = *(_QWORD *)(a2 - 16);
                *((_DWORD *)v165 + 4) = *(_DWORD *)(a2 - 8);
                *v166 = v171;
                *(double *)(a2 - 24) = v164;
                *(_DWORD *)(a2 - 8) = v238;
                *(_QWORD *)(a2 - 16) = v235;
                v172 = (uint64_t)v165 - v10 + 24;
                if (v172 >= 25)
                {
                  v173 = (v172 / 0x18uLL - 2) >> 1;
                  v174 = (double *)(v10 + 24 * v173);
                  v175 = *v174;
                  v176 = *(double *)v165;
                  if (*v174 < *(double *)v165)
                  {
                    v231 = *((_DWORD *)v165 + 4);
                    v224 = *v166;
                    do
                    {
                      v177 = v165;
                      v165 = v174;
                      *(double *)v177 = v175;
                      v178 = v174 + 1;
                      v179 = *((_QWORD *)v174 + 1);
                      *((_DWORD *)v177 + 4) = *((_DWORD *)v178 + 2);
                      v177[1] = v179;
                      if (!v173)
                        break;
                      v173 = (v173 - 1) >> 1;
                      v174 = (double *)(v10 + 24 * v173);
                      v175 = *v174;
                    }
                    while (*v174 < v176);
                    *(double *)v165 = v176;
                    *v178 = v224;
                    *((_DWORD *)v178 + 2) = v231;
                  }
                }
              }
              a2 -= 24;
              v151 = v162-- <= 2;
            }
            while (!v151);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (double *)(v10 + 24 * ((unint64_t)v12 >> 1));
        v15 = *(double *)(a2 - 24);
        if ((unint64_t)v11 < 0xC01)
        {
          v20 = *(double *)v10;
          v21 = *v14;
          if (*(double *)v10 >= *v14)
          {
            if (v15 < v20)
            {
              *(double *)v10 = v15;
              *(double *)(a2 - 24) = v20;
              v198 = *(_OWORD *)(v10 + 8);
              v29 = *(_DWORD *)(a2 - 8);
              *(_QWORD *)(v10 + 8) = *v8;
              *(_DWORD *)(v10 + 16) = v29;
              *(_DWORD *)(a2 - 8) = DWORD2(v198);
              *v8 = v198;
              v30 = *v14;
              if (*(double *)v10 < *v14)
              {
                *v14 = *(double *)v10;
                *(double *)v10 = v30;
                v31 = v10 + 24 * v13;
                v199 = *(_OWORD *)(v31 + 8);
                v32 = *(_QWORD *)(v10 + 8);
                *(_DWORD *)(v31 + 16) = *(_DWORD *)(v10 + 16);
                *(_QWORD *)(v31 + 8) = v32;
                *(_QWORD *)(v10 + 8) = v199;
                *(_DWORD *)(v10 + 16) = DWORD2(v199);
                --a3;
                v33 = *(double *)v10;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_54;
              }
            }
          }
          else
          {
            v22 = v10 + 24 * v13 + 8;
            if (v15 >= v20)
            {
              *v14 = v20;
              *(double *)v10 = v21;
              v204 = *(_OWORD *)v22;
              v54 = (__int128 *)(v10 + 8);
              v55 = *(_QWORD *)(v10 + 8);
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(v10 + 16);
              *(_QWORD *)v22 = v55;
              *(_QWORD *)(v10 + 8) = v204;
              *(_DWORD *)(v10 + 16) = DWORD2(v204);
              v56 = *(double *)(a2 - 24);
              v57 = *(double *)v10;
              if (v56 >= *(double *)v10)
                goto LABEL_31;
              *(double *)v10 = v56;
              *(double *)(a2 - 24) = v57;
              v195 = *v54;
              v58 = *(_DWORD *)(a2 - 8);
              *(_QWORD *)v54 = *v8;
              *(_DWORD *)(v10 + 16) = v58;
            }
            else
            {
              *v14 = v15;
              *(double *)(a2 - 24) = v21;
              v195 = *(_OWORD *)v22;
              v23 = *v8;
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(a2 - 8);
              *(_QWORD *)v22 = v23;
            }
            *(_DWORD *)(a2 - 8) = DWORD2(v195);
            *v8 = v195;
          }
LABEL_31:
          --a3;
          v33 = *(double *)v10;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(double *)(v10 - 24) < v33)
            goto LABEL_55;
          v234 = *(_QWORD *)(v10 + 8);
          v237 = *(_DWORD *)(v10 + 16);
          if (v33 >= *(double *)(a2 - 24))
          {
            v115 = v10 + 24;
            do
            {
              v10 = v115;
              if (v115 >= a2)
                break;
              v115 += 24;
            }
            while (v33 >= *(double *)v10);
          }
          else
          {
            do
            {
              v114 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v33 >= v114);
          }
          v116 = a2;
          if (v10 < a2)
          {
            v116 = a2;
            do
            {
              v117 = *(double *)(v116 - 24);
              v116 -= 24;
            }
            while (v33 < v117);
          }
          if (v10 < v116)
          {
            v118 = *(double *)v10;
            v119 = *(double *)v116;
            do
            {
              *(double *)v10 = v119;
              *(double *)v116 = v118;
              v217 = *(_OWORD *)(v10 + 8);
              v120 = *(_DWORD *)(v116 + 16);
              *(_QWORD *)(v10 + 8) = *(_QWORD *)(v116 + 8);
              *(_DWORD *)(v10 + 16) = v120;
              *(_QWORD *)(v116 + 8) = v217;
              *(_DWORD *)(v116 + 16) = DWORD2(v217);
              do
              {
                v121 = *(double *)(v10 + 24);
                v10 += 24;
                v118 = v121;
              }
              while (v33 >= v121);
              do
              {
                v122 = *(double *)(v116 - 24);
                v116 -= 24;
                v119 = v122;
              }
              while (v33 < v122);
            }
            while (v10 < v116);
          }
          if (v10 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v10 - 24);
            v123 = *(_QWORD *)(v10 - 16);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 8);
            *(_QWORD *)(a1 + 8) = v123;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v33;
          *(_DWORD *)(v10 - 8) = v237;
          *(_QWORD *)(v10 - 16) = v234;
          continue;
        }
        v16 = *v14;
        v17 = *(double *)v10;
        if (*v14 >= *(double *)v10)
        {
          if (v15 < v16)
          {
            *v14 = v15;
            *(double *)(a2 - 24) = v16;
            v24 = v10 + 24 * v13;
            v196 = *(_OWORD *)(v24 + 8);
            v25 = *v8;
            *(_DWORD *)(v24 + 16) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)(v24 + 8) = v25;
            *(_DWORD *)(a2 - 8) = DWORD2(v196);
            *v8 = v196;
            v26 = *(double *)v10;
            if (*v14 < *(double *)v10)
            {
              v27 = v24 + 8;
              *(double *)v10 = *v14;
              *v14 = v26;
              v197 = *(_OWORD *)(v10 + 8);
              v28 = *(_DWORD *)(v27 + 8);
              *(_QWORD *)(v10 + 8) = *(_QWORD *)v27;
              *(_DWORD *)(v10 + 16) = v28;
              *(_DWORD *)(v27 + 8) = DWORD2(v197);
              *(_QWORD *)v27 = v197;
            }
          }
        }
        else
        {
          v18 = (__int128 *)(v10 + 8);
          if (v15 < v16)
          {
            *(double *)v10 = v15;
            *(double *)(a2 - 24) = v17;
            v194 = *v18;
            v19 = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v18 = *v8;
            *(_DWORD *)(v10 + 16) = v19;
            goto LABEL_21;
          }
          *(double *)v10 = v16;
          *v14 = v17;
          v34 = v10 + 24 * v13;
          v200 = *v18;
          v36 = *(_QWORD *)(v34 + 8);
          v35 = v34 + 8;
          v37 = *(_DWORD *)(v35 + 8);
          *(_QWORD *)v18 = v36;
          *(_DWORD *)(v10 + 16) = v37;
          *(_DWORD *)(v35 + 8) = DWORD2(v200);
          *(_QWORD *)v35 = v200;
          v38 = *(double *)(a2 - 24);
          v39 = *v14;
          if (v38 < *v14)
          {
            *v14 = v38;
            *(double *)(a2 - 24) = v39;
            v194 = *(_OWORD *)v35;
            v40 = *v8;
            *(_DWORD *)(v35 + 8) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v35 = v40;
LABEL_21:
            *(_DWORD *)(a2 - 8) = DWORD2(v194);
            *v8 = v194;
          }
        }
        v41 = v13 - 1;
        v42 = (double *)(v10 + 24 * (v13 - 1));
        v43 = *v42;
        v44 = *(double *)(v10 + 24);
        v45 = *(double *)(a2 - 48);
        if (*v42 >= v44)
        {
          if (v45 < v43)
          {
            *v42 = v45;
            *(double *)(a2 - 48) = v43;
            v49 = v10 + 24 * v41;
            v202 = *(_OWORD *)(v49 + 8);
            v50 = *v193;
            *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)(v49 + 8) = v50;
            *(_DWORD *)(a2 - 32) = DWORD2(v202);
            *v193 = v202;
            v51 = *(double *)(v10 + 24);
            if (*v42 < v51)
            {
              *(double *)(v10 + 24) = *v42;
              *v42 = v51;
              v203 = *(_OWORD *)(v10 + 32);
              v53 = *(_QWORD *)(v49 + 8);
              v52 = v49 + 8;
              *(_DWORD *)(v10 + 40) = *(_DWORD *)(v52 + 8);
              *(_QWORD *)(v10 + 32) = v53;
              *(_DWORD *)(v52 + 8) = DWORD2(v203);
              *(_QWORD *)v52 = v203;
            }
          }
        }
        else
        {
          v46 = (__int128 *)(v10 + 32);
          if (v45 < v43)
          {
            *(double *)(v10 + 24) = v45;
            *(double *)(a2 - 48) = v44;
            v201 = *v46;
            v47 = a2 - 40;
            v48 = *v193;
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)v46 = v48;
            goto LABEL_35;
          }
          *(double *)(v10 + 24) = v43;
          *v42 = v44;
          v59 = v10 + 24 * v41;
          v205 = *v46;
          v61 = *(_QWORD *)(v59 + 8);
          v60 = v59 + 8;
          *(_DWORD *)(v10 + 40) = *(_DWORD *)(v60 + 8);
          *(_QWORD *)v46 = v61;
          *(_DWORD *)(v60 + 8) = DWORD2(v205);
          *(_QWORD *)v60 = v205;
          v62 = *(double *)(a2 - 48);
          v63 = *v42;
          if (v62 < *v42)
          {
            *v42 = v62;
            *(double *)(a2 - 48) = v63;
            v201 = *(_OWORD *)v60;
            v47 = a2 - 40;
            v64 = *v193;
            *(_DWORD *)(v60 + 8) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)v60 = v64;
LABEL_35:
            *(_DWORD *)(v47 + 8) = DWORD2(v201);
            *(_QWORD *)v47 = v201;
          }
        }
        v65 = v13 + 1;
        v66 = (double *)(v10 + 24 * (v13 + 1));
        v67 = *v66;
        v68 = *(double *)(v10 + 48);
        v69 = *(double *)(a2 - 72);
        if (*v66 >= v68)
        {
          if (v69 < v67)
          {
            *v66 = v69;
            *(double *)(a2 - 72) = v67;
            v72 = v10 + 24 * v65;
            v207 = *(_OWORD *)(v72 + 8);
            v73 = *v9;
            *(_DWORD *)(v72 + 16) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)(v72 + 8) = v73;
            *(_DWORD *)(a2 - 56) = DWORD2(v207);
            *v9 = v207;
            v74 = *(double *)(v10 + 48);
            if (*v66 < v74)
            {
              *(double *)(v10 + 48) = *v66;
              *v66 = v74;
              v208 = *(_OWORD *)(v10 + 56);
              v76 = *(_QWORD *)(v72 + 8);
              v75 = v72 + 8;
              *(_DWORD *)(v10 + 64) = *(_DWORD *)(v75 + 8);
              *(_QWORD *)(v10 + 56) = v76;
              *(_DWORD *)(v75 + 8) = DWORD2(v208);
              *(_QWORD *)v75 = v208;
            }
          }
        }
        else
        {
          v70 = (__int128 *)(v10 + 56);
          if (v69 < v67)
          {
            *(double *)(v10 + 48) = v69;
            *(double *)(a2 - 72) = v68;
            v206 = *v70;
            v71 = *v9;
            *(_DWORD *)(v10 + 64) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)v70 = v71;
            goto LABEL_44;
          }
          *(double *)(v10 + 48) = v67;
          *v66 = v68;
          v77 = v10 + 24 * v65;
          v209 = *v70;
          v79 = *(_QWORD *)(v77 + 8);
          v78 = v77 + 8;
          *(_DWORD *)(v10 + 64) = *(_DWORD *)(v78 + 8);
          *(_QWORD *)v70 = v79;
          *(_DWORD *)(v78 + 8) = DWORD2(v209);
          *(_QWORD *)v78 = v209;
          v80 = *(double *)(a2 - 72);
          v81 = *v66;
          if (v80 < *v66)
          {
            *v66 = v80;
            *(double *)(a2 - 72) = v81;
            v206 = *(_OWORD *)v78;
            v82 = *v9;
            *(_DWORD *)(v78 + 8) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)v78 = v82;
LABEL_44:
            *(_DWORD *)(a2 - 56) = DWORD2(v206);
            *v9 = v206;
          }
        }
        v83 = *v14;
        v84 = *v42;
        v85 = *v66;
        if (*v14 >= *v42)
        {
          if (v85 < v83)
          {
            *v14 = v85;
            *v66 = v83;
            v88 = v10 + 24 * v13;
            v89 = v10 + 24 * v65;
            v211 = *(_OWORD *)(v88 + 8);
            *(_QWORD *)(v88 + 8) = *(_QWORD *)(v89 + 8);
            *(_DWORD *)(v88 + 16) = *(_DWORD *)(v89 + 16);
            *(_QWORD *)(v89 + 8) = v211;
            *(_DWORD *)(v89 + 16) = DWORD2(v211);
            v90 = *v42;
            if (*v14 < *v42)
            {
              *v42 = *v14;
              *v14 = v90;
              v91 = v10 + 24 * v41;
              v212 = *(_OWORD *)(v91 + 8);
              *(_QWORD *)(v91 + 8) = *(_QWORD *)(v88 + 8);
              *(_DWORD *)(v91 + 16) = *(_DWORD *)(v88 + 16);
              *(_QWORD *)(v88 + 8) = v212;
              *(_DWORD *)(v88 + 16) = DWORD2(v212);
            }
          }
        }
        else
        {
          v86 = v10 + 24 * v41 + 8;
          if (v85 >= v83)
          {
            *v42 = v83;
            *v14 = v84;
            v92 = v10 + 24 * v13;
            v213 = *(_OWORD *)v86;
            v94 = *(_QWORD *)(v92 + 8);
            v93 = v92 + 8;
            *(_QWORD *)v86 = v94;
            *(_DWORD *)(v86 + 8) = *(_DWORD *)(v93 + 8);
            *(_QWORD *)v93 = v213;
            *(_DWORD *)(v93 + 8) = DWORD2(v213);
            v95 = *v14;
            if (*v66 < *v14)
            {
              *v14 = *v66;
              *v66 = v95;
              v96 = v10 + 24 * v65;
              v214 = *(_OWORD *)v93;
              *(_QWORD *)v93 = *(_QWORD *)(v96 + 8);
              *(_DWORD *)(v93 + 8) = *(_DWORD *)(v96 + 16);
              *(_QWORD *)(v96 + 8) = v214;
              *(_DWORD *)(v96 + 16) = DWORD2(v214);
            }
          }
          else
          {
            *v42 = v85;
            *v66 = v84;
            v87 = v10 + 24 * v65;
            v210 = *(_OWORD *)v86;
            *(_QWORD *)v86 = *(_QWORD *)(v87 + 8);
            *(_DWORD *)(v86 + 8) = *(_DWORD *)(v87 + 16);
            *(_QWORD *)(v87 + 8) = v210;
            *(_DWORD *)(v87 + 16) = DWORD2(v210);
          }
        }
        v97 = *(double *)v10;
        *(double *)v10 = *v14;
        *v14 = v97;
        v98 = v10 + 24 * v13;
        v215 = *(_OWORD *)(v10 + 8);
        v99 = *(_DWORD *)(v98 + 16);
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v98 + 8);
        *(_DWORD *)(v10 + 16) = v99;
        *(_DWORD *)(v98 + 16) = DWORD2(v215);
        *(_QWORD *)(v98 + 8) = v215;
        --a3;
        v33 = *(double *)v10;
        if ((a4 & 1) == 0)
          goto LABEL_54;
LABEL_55:
        v100 = 0;
        v233 = *(_QWORD *)(v10 + 8);
        v236 = *(_DWORD *)(v10 + 16);
        do
        {
          v101 = *(double *)(v10 + v100 + 24);
          v100 += 24;
        }
        while (v101 < v33);
        v102 = v10 + v100;
        v103 = (double *)a2;
        if (v100 == 24)
        {
          v103 = (double *)a2;
          do
          {
            if (v102 >= (unint64_t)v103)
              break;
            v105 = *(v103 - 3);
            v103 -= 3;
          }
          while (v105 >= v33);
        }
        else
        {
          do
          {
            v104 = *(v103 - 3);
            v103 -= 3;
          }
          while (v104 >= v33);
        }
        if (v102 >= (unint64_t)v103)
        {
          v10 += v100;
          v111 = v102 - 24;
          if (v102 - 24 != a1)
            goto LABEL_70;
        }
        else
        {
          v106 = *v103;
          v10 += v100;
          v107 = v103;
          do
          {
            *(double *)v10 = v106;
            *v107 = v101;
            v216 = *(_OWORD *)(v10 + 8);
            v108 = *((_DWORD *)v107 + 4);
            *(double *)(v10 + 8) = v107[1];
            *(_DWORD *)(v10 + 16) = v108;
            *((_QWORD *)v107 + 1) = v216;
            *((_DWORD *)v107 + 4) = DWORD2(v216);
            do
            {
              v109 = *(double *)(v10 + 24);
              v10 += 24;
              v101 = v109;
            }
            while (v109 < v33);
            do
            {
              v110 = *(v107 - 3);
              v107 -= 3;
              v106 = v110;
            }
            while (v110 >= v33);
          }
          while (v10 < (unint64_t)v107);
          v111 = v10 - 24;
          if (v10 - 24 != a1)
          {
LABEL_70:
            *(_QWORD *)a1 = *(_QWORD *)(v10 - 24);
            v112 = *(_QWORD *)(v10 - 16);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 8);
            *(_QWORD *)(a1 + 8) = v112;
          }
        }
        *(double *)(v10 - 24) = v33;
        *(_DWORD *)(v10 - 8) = v236;
        *(_QWORD *)(v10 - 16) = v233;
        if (v102 < (unint64_t)v103)
        {
LABEL_74:
          sub_20F386DF4(a1, v111, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v113 = sub_20F387E70(a1, v111);
        if (!sub_20F387E70(v10, a2))
        {
          if (v113)
            continue;
          goto LABEL_74;
        }
        a2 = v111;
        if (!v113)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (_QWORD *)(a2 - 16);
  v193 = (uint64_t *)(a2 - 40);
  v9 = (uint64_t *)(a2 - 64);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v124 = *(double *)(a2 - 24);
        v125 = *(double *)v10;
        if (v124 < *(double *)v10)
        {
          *(double *)v10 = v124;
          *(double *)(a2 - 24) = v125;
          v218 = *(_OWORD *)(v10 + 8);
          v126 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v10 + 16) = v126;
          goto LABEL_168;
        }
        return;
      case 3:
        v127 = *(double *)(v10 + 24);
        v128 = *(double *)v10;
        v129 = *(double *)(a2 - 24);
        if (v127 >= *(double *)v10)
        {
          if (v129 < v127)
          {
            *(double *)(v10 + 24) = v129;
            *(double *)(a2 - 24) = v127;
            v225 = *(_OWORD *)(v10 + 32);
            v180 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)(v10 + 32) = v180;
            *(_DWORD *)(a2 - 8) = DWORD2(v225);
            *(_QWORD *)(a2 - 16) = v225;
            v135 = *(double *)(v10 + 24);
            goto LABEL_157;
          }
        }
        else
        {
          v130 = (__int128 *)(v10 + 8);
          if (v129 >= v127)
          {
            *(double *)v10 = v127;
            v189 = (__int128 *)(v10 + 32);
            v190 = *(_QWORD *)(v10 + 32);
            *(double *)(v10 + 24) = v128;
            v228 = *v130;
            *(_QWORD *)v130 = v190;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 + 40);
            *(_QWORD *)(v10 + 32) = v228;
            *(_DWORD *)(v10 + 40) = DWORD2(v228);
            v191 = *(double *)(a2 - 24);
            if (v191 >= v128)
              return;
            *(double *)(v10 + 24) = v191;
            *(double *)(a2 - 24) = v128;
            v218 = *v189;
            v192 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v189 = v192;
          }
          else
          {
            *(double *)v10 = v129;
            *(double *)(a2 - 24) = v128;
            v218 = *v130;
            v131 = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v130 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(v10 + 16) = v131;
          }
LABEL_168:
          *(_DWORD *)(a2 - 8) = DWORD2(v218);
          *(_QWORD *)(a2 - 16) = v218;
        }
        return;
      case 4:
        sub_20F3883A8(v10, v10 + 24, v10 + 48, a2 - 24);
        return;
      case 5:
        sub_20F3883A8(v10, v10 + 24, v10 + 48, v10 + 72);
        v132 = *(double *)(a2 - 24);
        v133 = *(double *)(v10 + 72);
        if (v132 < v133)
        {
          *(double *)(v10 + 72) = v132;
          *(double *)(a2 - 24) = v133;
          v219 = *(_OWORD *)(v10 + 80);
          v134 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v10 + 88) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(v10 + 80) = v134;
          *(_DWORD *)(a2 - 8) = DWORD2(v219);
          *(_QWORD *)(a2 - 16) = v219;
          v135 = *(double *)(v10 + 72);
          v136 = *(double *)(v10 + 48);
          if (v135 < v136)
          {
            *(double *)(v10 + 48) = v135;
            *(double *)(v10 + 72) = v136;
            v220 = *(_OWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = *(_QWORD *)(v10 + 80);
            *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 88);
            *(_QWORD *)(v10 + 80) = v220;
            *(_DWORD *)(v10 + 88) = DWORD2(v220);
            v137 = *(double *)(v10 + 24);
            if (v135 < v137)
            {
              *(double *)(v10 + 24) = v135;
              *(double *)(v10 + 48) = v137;
              v221 = *(_OWORD *)(v10 + 32);
              *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 + 56);
              *(_DWORD *)(v10 + 40) = *(_DWORD *)(v10 + 64);
              *(_QWORD *)(v10 + 56) = v221;
              *(_DWORD *)(v10 + 64) = DWORD2(v221);
LABEL_157:
              v181 = *(double *)v10;
              if (v135 < *(double *)v10)
              {
                *(double *)v10 = v135;
                *(double *)(v10 + 24) = v181;
                v226 = *(_OWORD *)(v10 + 8);
                *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 + 40);
                *(_QWORD *)(v10 + 32) = v226;
                *(_DWORD *)(v10 + 40) = DWORD2(v226);
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v138 = v10 + 24;
          v140 = v10 == a2 || v138 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v140)
            {
              v141 = 0;
              v142 = v10;
              do
              {
                v144 = v138;
                v145 = *(double *)(v142 + 24);
                if (v145 < *(double *)v142)
                {
                  v222 = *(_QWORD *)(v142 + 32);
                  v229 = *(_DWORD *)(v142 + 40);
                  v146 = *(double *)v142;
                  v147 = v141;
                  do
                  {
                    v148 = v10 + v147;
                    *(double *)(v148 + 24) = v146;
                    *(_QWORD *)(v148 + 32) = *(_QWORD *)(v10 + v147 + 8);
                    *(_DWORD *)(v148 + 40) = *(_DWORD *)(v10 + v147 + 16);
                    if (!v147)
                    {
                      v143 = (double *)v10;
                      goto LABEL_118;
                    }
                    v146 = *(double *)(v148 - 24);
                    v147 -= 24;
                  }
                  while (v145 < v146);
                  v143 = (double *)(v10 + v147 + 24);
LABEL_118:
                  *v143 = v145;
                  *(_DWORD *)(v148 + 16) = v229;
                  *(_QWORD *)(v148 + 8) = v222;
                }
                v138 = v144 + 24;
                v141 += 24;
                v142 = v144;
              }
              while (v144 + 24 != a2);
            }
          }
          else if (!v140)
          {
            v182 = v10 + 32;
            do
            {
              v183 = v138;
              v184 = *(double *)(a1 + 24);
              if (v184 < *(double *)a1)
              {
                v227 = *(_QWORD *)(a1 + 32);
                v232 = *(_DWORD *)(a1 + 40);
                v185 = *(double *)a1;
                v186 = v182;
                do
                {
                  v187 = v186;
                  v188 = *(_QWORD *)(v186 - 24);
                  v186 -= 24;
                  *(double *)(v187 - 8) = v185;
                  *(_QWORD *)v187 = v188;
                  *(_DWORD *)(v187 + 8) = *(_DWORD *)(v187 - 16);
                  v185 = *(double *)(v187 - 56);
                }
                while (v184 < v185);
                *(double *)(v186 - 8) = v184;
                *(_DWORD *)(v186 + 8) = v232;
                *(_QWORD *)v186 = v227;
              }
              v138 = v183 + 24;
              v182 += 24;
              a1 = v183;
            }
            while (v183 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v149 = (unint64_t)(v12 - 2) >> 1;
            v150 = v149;
            do
            {
              if (v149 >= v150)
              {
                v152 = (2 * v150) | 1;
                v153 = v10 + 24 * v152;
                if (2 * v150 + 2 < v12 && *(double *)v153 < *(double *)(v153 + 24))
                {
                  v153 += 24;
                  v152 = 2 * v150 + 2;
                }
                v154 = v10 + 24 * v150;
                v155 = *(double *)v153;
                v156 = *(double *)v154;
                if (*(double *)v153 >= *(double *)v154)
                {
                  v230 = *(_DWORD *)(v154 + 16);
                  v223 = *(_QWORD *)(v154 + 8);
                  do
                  {
                    v157 = v154;
                    v154 = v153;
                    *(double *)v157 = v155;
                    v159 = v153 + 8;
                    v158 = *(_QWORD *)(v153 + 8);
                    *(_DWORD *)(v157 + 16) = *(_DWORD *)(v159 + 8);
                    *(_QWORD *)(v157 + 8) = v158;
                    if (v149 < v152)
                      break;
                    v160 = 2 * v152;
                    v152 = (2 * v152) | 1;
                    v153 = v10 + 24 * v152;
                    v161 = v160 + 2;
                    if (v161 < v12 && *(double *)v153 < *(double *)(v153 + 24))
                    {
                      v153 += 24;
                      v152 = v161;
                    }
                    v155 = *(double *)v153;
                  }
                  while (*(double *)v153 >= v156);
                  *(double *)v154 = v156;
                  *(_QWORD *)v159 = v223;
                  *(_DWORD *)(v159 + 8) = v230;
                }
              }
              v151 = v150-- <= 0;
            }
            while (!v151);
            v162 = v11 / 0x18uLL;
            do
            {
              v163 = 0;
              v164 = *(double *)v10;
              v235 = *(_QWORD *)(v10 + 8);
              v238 = *(_DWORD *)(v10 + 16);
              v165 = (_QWORD *)v10;
              do
              {
                v168 = v165;
                v165 += 3 * v163 + 3;
                v169 = 2 * v163;
                v163 = (2 * v163) | 1;
                v170 = v169 + 2;
                if (v170 < v162 && *(double *)v165 < *((double *)v165 + 3))
                {
                  v165 += 3;
                  v163 = v170;
                }
                *v168 = *v165;
                v166 = v165 + 1;
                v167 = v165[1];
                *((_DWORD *)v168 + 4) = *((_DWORD *)v165 + 4);
                v168[1] = v167;
              }
              while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
              if (v165 == (_QWORD *)(a2 - 24))
              {
                *(double *)v165 = v164;
                *((_DWORD *)v165 + 4) = v238;
                *v166 = v235;
              }
              else
              {
                *v165 = *(_QWORD *)(a2 - 24);
                v171 = *(_QWORD *)(a2 - 16);
                *((_DWORD *)v165 + 4) = *(_DWORD *)(a2 - 8);
                *v166 = v171;
                *(double *)(a2 - 24) = v164;
                *(_DWORD *)(a2 - 8) = v238;
                *(_QWORD *)(a2 - 16) = v235;
                v172 = (uint64_t)v165 - v10 + 24;
                if (v172 >= 25)
                {
                  v173 = (v172 / 0x18uLL - 2) >> 1;
                  v174 = (double *)(v10 + 24 * v173);
                  v175 = *v174;
                  v176 = *(double *)v165;
                  if (*v174 < *(double *)v165)
                  {
                    v231 = *((_DWORD *)v165 + 4);
                    v224 = *v166;
                    do
                    {
                      v177 = v165;
                      v165 = v174;
                      *(double *)v177 = v175;
                      v178 = v174 + 1;
                      v179 = *((_QWORD *)v174 + 1);
                      *((_DWORD *)v177 + 4) = *((_DWORD *)v178 + 2);
                      v177[1] = v179;
                      if (!v173)
                        break;
                      v173 = (v173 - 1) >> 1;
                      v174 = (double *)(v10 + 24 * v173);
                      v175 = *v174;
                    }
                    while (*v174 < v176);
                    *(double *)v165 = v176;
                    *v178 = v224;
                    *((_DWORD *)v178 + 2) = v231;
                  }
                }
              }
              a2 -= 24;
              v151 = v162-- <= 2;
            }
            while (!v151);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (double *)(v10 + 24 * ((unint64_t)v12 >> 1));
        v15 = *(double *)(a2 - 24);
        if ((unint64_t)v11 < 0xC01)
        {
          v20 = *(double *)v10;
          v21 = *v14;
          if (*(double *)v10 >= *v14)
          {
            if (v15 < v20)
            {
              *(double *)v10 = v15;
              *(double *)(a2 - 24) = v20;
              v198 = *(_OWORD *)(v10 + 8);
              v29 = *(_DWORD *)(a2 - 8);
              *(_QWORD *)(v10 + 8) = *v8;
              *(_DWORD *)(v10 + 16) = v29;
              *(_DWORD *)(a2 - 8) = DWORD2(v198);
              *v8 = v198;
              v30 = *v14;
              if (*(double *)v10 < *v14)
              {
                *v14 = *(double *)v10;
                *(double *)v10 = v30;
                v31 = v10 + 24 * v13;
                v199 = *(_OWORD *)(v31 + 8);
                v32 = *(_QWORD *)(v10 + 8);
                *(_DWORD *)(v31 + 16) = *(_DWORD *)(v10 + 16);
                *(_QWORD *)(v31 + 8) = v32;
                *(_QWORD *)(v10 + 8) = v199;
                *(_DWORD *)(v10 + 16) = DWORD2(v199);
                --a3;
                v33 = *(double *)v10;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_54;
              }
            }
          }
          else
          {
            v22 = v10 + 24 * v13 + 8;
            if (v15 >= v20)
            {
              *v14 = v20;
              *(double *)v10 = v21;
              v204 = *(_OWORD *)v22;
              v54 = (__int128 *)(v10 + 8);
              v55 = *(_QWORD *)(v10 + 8);
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(v10 + 16);
              *(_QWORD *)v22 = v55;
              *(_QWORD *)(v10 + 8) = v204;
              *(_DWORD *)(v10 + 16) = DWORD2(v204);
              v56 = *(double *)(a2 - 24);
              v57 = *(double *)v10;
              if (v56 >= *(double *)v10)
                goto LABEL_31;
              *(double *)v10 = v56;
              *(double *)(a2 - 24) = v57;
              v195 = *v54;
              v58 = *(_DWORD *)(a2 - 8);
              *(_QWORD *)v54 = *v8;
              *(_DWORD *)(v10 + 16) = v58;
            }
            else
            {
              *v14 = v15;
              *(double *)(a2 - 24) = v21;
              v195 = *(_OWORD *)v22;
              v23 = *v8;
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(a2 - 8);
              *(_QWORD *)v22 = v23;
            }
            *(_DWORD *)(a2 - 8) = DWORD2(v195);
            *v8 = v195;
          }
LABEL_31:
          --a3;
          v33 = *(double *)v10;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(double *)(v10 - 24) < v33)
            goto LABEL_55;
          v234 = *(_QWORD *)(v10 + 8);
          v237 = *(_DWORD *)(v10 + 16);
          if (v33 >= *(double *)(a2 - 24))
          {
            v115 = v10 + 24;
            do
            {
              v10 = v115;
              if (v115 >= a2)
                break;
              v115 += 24;
            }
            while (v33 >= *(double *)v10);
          }
          else
          {
            do
            {
              v114 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v33 >= v114);
          }
          v116 = a2;
          if (v10 < a2)
          {
            v116 = a2;
            do
            {
              v117 = *(double *)(v116 - 24);
              v116 -= 24;
            }
            while (v33 < v117);
          }
          if (v10 < v116)
          {
            v118 = *(double *)v10;
            v119 = *(double *)v116;
            do
            {
              *(double *)v10 = v119;
              *(double *)v116 = v118;
              v217 = *(_OWORD *)(v10 + 8);
              v120 = *(_DWORD *)(v116 + 16);
              *(_QWORD *)(v10 + 8) = *(_QWORD *)(v116 + 8);
              *(_DWORD *)(v10 + 16) = v120;
              *(_QWORD *)(v116 + 8) = v217;
              *(_DWORD *)(v116 + 16) = DWORD2(v217);
              do
              {
                v121 = *(double *)(v10 + 24);
                v10 += 24;
                v118 = v121;
              }
              while (v33 >= v121);
              do
              {
                v122 = *(double *)(v116 - 24);
                v116 -= 24;
                v119 = v122;
              }
              while (v33 < v122);
            }
            while (v10 < v116);
          }
          if (v10 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v10 - 24);
            v123 = *(_QWORD *)(v10 - 16);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 8);
            *(_QWORD *)(a1 + 8) = v123;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v33;
          *(_DWORD *)(v10 - 8) = v237;
          *(_QWORD *)(v10 - 16) = v234;
          continue;
        }
        v16 = *v14;
        v17 = *(double *)v10;
        if (*v14 >= *(double *)v10)
        {
          if (v15 < v16)
          {
            *v14 = v15;
            *(double *)(a2 - 24) = v16;
            v24 = v10 + 24 * v13;
            v196 = *(_OWORD *)(v24 + 8);
            v25 = *v8;
            *(_DWORD *)(v24 + 16) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)(v24 + 8) = v25;
            *(_DWORD *)(a2 - 8) = DWORD2(v196);
            *v8 = v196;
            v26 = *(double *)v10;
            if (*v14 < *(double *)v10)
            {
              v27 = v24 + 8;
              *(double *)v10 = *v14;
              *v14 = v26;
              v197 = *(_OWORD *)(v10 + 8);
              v28 = *(_DWORD *)(v27 + 8);
              *(_QWORD *)(v10 + 8) = *(_QWORD *)v27;
              *(_DWORD *)(v10 + 16) = v28;
              *(_DWORD *)(v27 + 8) = DWORD2(v197);
              *(_QWORD *)v27 = v197;
            }
          }
        }
        else
        {
          v18 = (__int128 *)(v10 + 8);
          if (v15 < v16)
          {
            *(double *)v10 = v15;
            *(double *)(a2 - 24) = v17;
            v194 = *v18;
            v19 = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v18 = *v8;
            *(_DWORD *)(v10 + 16) = v19;
            goto LABEL_21;
          }
          *(double *)v10 = v16;
          *v14 = v17;
          v34 = v10 + 24 * v13;
          v200 = *v18;
          v36 = *(_QWORD *)(v34 + 8);
          v35 = v34 + 8;
          v37 = *(_DWORD *)(v35 + 8);
          *(_QWORD *)v18 = v36;
          *(_DWORD *)(v10 + 16) = v37;
          *(_DWORD *)(v35 + 8) = DWORD2(v200);
          *(_QWORD *)v35 = v200;
          v38 = *(double *)(a2 - 24);
          v39 = *v14;
          if (v38 < *v14)
          {
            *v14 = v38;
            *(double *)(a2 - 24) = v39;
            v194 = *(_OWORD *)v35;
            v40 = *v8;
            *(_DWORD *)(v35 + 8) = *(_DWORD *)(a2 - 8);
            *(_QWORD *)v35 = v40;
LABEL_21:
            *(_DWORD *)(a2 - 8) = DWORD2(v194);
            *v8 = v194;
          }
        }
        v41 = v13 - 1;
        v42 = (double *)(v10 + 24 * (v13 - 1));
        v43 = *v42;
        v44 = *(double *)(v10 + 24);
        v45 = *(double *)(a2 - 48);
        if (*v42 >= v44)
        {
          if (v45 < v43)
          {
            *v42 = v45;
            *(double *)(a2 - 48) = v43;
            v49 = v10 + 24 * v41;
            v202 = *(_OWORD *)(v49 + 8);
            v50 = *v193;
            *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)(v49 + 8) = v50;
            *(_DWORD *)(a2 - 32) = DWORD2(v202);
            *v193 = v202;
            v51 = *(double *)(v10 + 24);
            if (*v42 < v51)
            {
              *(double *)(v10 + 24) = *v42;
              *v42 = v51;
              v203 = *(_OWORD *)(v10 + 32);
              v53 = *(_QWORD *)(v49 + 8);
              v52 = v49 + 8;
              *(_DWORD *)(v10 + 40) = *(_DWORD *)(v52 + 8);
              *(_QWORD *)(v10 + 32) = v53;
              *(_DWORD *)(v52 + 8) = DWORD2(v203);
              *(_QWORD *)v52 = v203;
            }
          }
        }
        else
        {
          v46 = (__int128 *)(v10 + 32);
          if (v45 < v43)
          {
            *(double *)(v10 + 24) = v45;
            *(double *)(a2 - 48) = v44;
            v201 = *v46;
            v47 = a2 - 40;
            v48 = *v193;
            *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)v46 = v48;
            goto LABEL_35;
          }
          *(double *)(v10 + 24) = v43;
          *v42 = v44;
          v59 = v10 + 24 * v41;
          v205 = *v46;
          v61 = *(_QWORD *)(v59 + 8);
          v60 = v59 + 8;
          *(_DWORD *)(v10 + 40) = *(_DWORD *)(v60 + 8);
          *(_QWORD *)v46 = v61;
          *(_DWORD *)(v60 + 8) = DWORD2(v205);
          *(_QWORD *)v60 = v205;
          v62 = *(double *)(a2 - 48);
          v63 = *v42;
          if (v62 < *v42)
          {
            *v42 = v62;
            *(double *)(a2 - 48) = v63;
            v201 = *(_OWORD *)v60;
            v47 = a2 - 40;
            v64 = *v193;
            *(_DWORD *)(v60 + 8) = *(_DWORD *)(a2 - 32);
            *(_QWORD *)v60 = v64;
LABEL_35:
            *(_DWORD *)(v47 + 8) = DWORD2(v201);
            *(_QWORD *)v47 = v201;
          }
        }
        v65 = v13 + 1;
        v66 = (double *)(v10 + 24 * (v13 + 1));
        v67 = *v66;
        v68 = *(double *)(v10 + 48);
        v69 = *(double *)(a2 - 72);
        if (*v66 >= v68)
        {
          if (v69 < v67)
          {
            *v66 = v69;
            *(double *)(a2 - 72) = v67;
            v72 = v10 + 24 * v65;
            v207 = *(_OWORD *)(v72 + 8);
            v73 = *v9;
            *(_DWORD *)(v72 + 16) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)(v72 + 8) = v73;
            *(_DWORD *)(a2 - 56) = DWORD2(v207);
            *v9 = v207;
            v74 = *(double *)(v10 + 48);
            if (*v66 < v74)
            {
              *(double *)(v10 + 48) = *v66;
              *v66 = v74;
              v208 = *(_OWORD *)(v10 + 56);
              v76 = *(_QWORD *)(v72 + 8);
              v75 = v72 + 8;
              *(_DWORD *)(v10 + 64) = *(_DWORD *)(v75 + 8);
              *(_QWORD *)(v10 + 56) = v76;
              *(_DWORD *)(v75 + 8) = DWORD2(v208);
              *(_QWORD *)v75 = v208;
            }
          }
        }
        else
        {
          v70 = (__int128 *)(v10 + 56);
          if (v69 < v67)
          {
            *(double *)(v10 + 48) = v69;
            *(double *)(a2 - 72) = v68;
            v206 = *v70;
            v71 = *v9;
            *(_DWORD *)(v10 + 64) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)v70 = v71;
            goto LABEL_44;
          }
          *(double *)(v10 + 48) = v67;
          *v66 = v68;
          v77 = v10 + 24 * v65;
          v209 = *v70;
          v79 = *(_QWORD *)(v77 + 8);
          v78 = v77 + 8;
          *(_DWORD *)(v10 + 64) = *(_DWORD *)(v78 + 8);
          *(_QWORD *)v70 = v79;
          *(_DWORD *)(v78 + 8) = DWORD2(v209);
          *(_QWORD *)v78 = v209;
          v80 = *(double *)(a2 - 72);
          v81 = *v66;
          if (v80 < *v66)
          {
            *v66 = v80;
            *(double *)(a2 - 72) = v81;
            v206 = *(_OWORD *)v78;
            v82 = *v9;
            *(_DWORD *)(v78 + 8) = *(_DWORD *)(a2 - 56);
            *(_QWORD *)v78 = v82;
LABEL_44:
            *(_DWORD *)(a2 - 56) = DWORD2(v206);
            *v9 = v206;
          }
        }
        v83 = *v14;
        v84 = *v42;
        v85 = *v66;
        if (*v14 >= *v42)
        {
          if (v85 < v83)
          {
            *v14 = v85;
            *v66 = v83;
            v88 = v10 + 24 * v13;
            v89 = v10 + 24 * v65;
            v211 = *(_OWORD *)(v88 + 8);
            *(_QWORD *)(v88 + 8) = *(_QWORD *)(v89 + 8);
            *(_DWORD *)(v88 + 16) = *(_DWORD *)(v89 + 16);
            *(_QWORD *)(v89 + 8) = v211;
            *(_DWORD *)(v89 + 16) = DWORD2(v211);
            v90 = *v42;
            if (*v14 < *v42)
            {
              *v42 = *v14;
              *v14 = v90;
              v91 = v10 + 24 * v41;
              v212 = *(_OWORD *)(v91 + 8);
              *(_QWORD *)(v91 + 8) = *(_QWORD *)(v88 + 8);
              *(_DWORD *)(v91 + 16) = *(_DWORD *)(v88 + 16);
              *(_QWORD *)(v88 + 8) = v212;
              *(_DWORD *)(v88 + 16) = DWORD2(v212);
            }
          }
        }
        else
        {
          v86 = v10 + 24 * v41 + 8;
          if (v85 >= v83)
          {
            *v42 = v83;
            *v14 = v84;
            v92 = v10 + 24 * v13;
            v213 = *(_OWORD *)v86;
            v94 = *(_QWORD *)(v92 + 8);
            v93 = v92 + 8;
            *(_QWORD *)v86 = v94;
            *(_DWORD *)(v86 + 8) = *(_DWORD *)(v93 + 8);
            *(_QWORD *)v93 = v213;
            *(_DWORD *)(v93 + 8) = DWORD2(v213);
            v95 = *v14;
            if (*v66 < *v14)
            {
              *v14 = *v66;
              *v66 = v95;
              v96 = v10 + 24 * v65;
              v214 = *(_OWORD *)v93;
              *(_QWORD *)v93 = *(_QWORD *)(v96 + 8);
              *(_DWORD *)(v93 + 8) = *(_DWORD *)(v96 + 16);
              *(_QWORD *)(v96 + 8) = v214;
              *(_DWORD *)(v96 + 16) = DWORD2(v214);
            }
          }
          else
          {
            *v42 = v85;
            *v66 = v84;
            v87 = v10 + 24 * v65;
            v210 = *(_OWORD *)v86;
            *(_QWORD *)v86 = *(_QWORD *)(v87 + 8);
            *(_DWORD *)(v86 + 8) = *(_DWORD *)(v87 + 16);
            *(_QWORD *)(v87 + 8) = v210;
            *(_DWORD *)(v87 + 16) = DWORD2(v210);
          }
        }
        v97 = *(double *)v10;
        *(double *)v10 = *v14;
        *v14 = v97;
        v98 = v10 + 24 * v13;
        v215 = *(_OWORD *)(v10 + 8);
        v99 = *(_DWORD *)(v98 + 16);
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v98 + 8);
        *(_DWORD *)(v10 + 16) = v99;
        *(_DWORD *)(v98 + 16) = DWORD2(v215);
        *(_QWORD *)(v98 + 8) = v215;
        --a3;
        v33 = *(double *)v10;
        if ((a4 & 1) == 0)
          goto LABEL_54;
LABEL_55:
        v100 = 0;
        v233 = *(_QWORD *)(v10 + 8);
        v236 = *(_DWORD *)(v10 + 16);
        do
        {
          v101 = *(double *)(v10 + v100 + 24);
          v100 += 24;
        }
        while (v101 < v33);
        v102 = v10 + v100;
        v103 = (double *)a2;
        if (v100 == 24)
        {
          v103 = (double *)a2;
          do
          {
            if (v102 >= (unint64_t)v103)
              break;
            v105 = *(v103 - 3);
            v103 -= 3;
          }
          while (v105 >= v33);
        }
        else
        {
          do
          {
            v104 = *(v103 - 3);
            v103 -= 3;
          }
          while (v104 >= v33);
        }
        if (v102 >= (unint64_t)v103)
        {
          v10 += v100;
          v111 = v102 - 24;
          if (v102 - 24 != a1)
            goto LABEL_70;
        }
        else
        {
          v106 = *v103;
          v10 += v100;
          v107 = v103;
          do
          {
            *(double *)v10 = v106;
            *v107 = v101;
            v216 = *(_OWORD *)(v10 + 8);
            v108 = *((_DWORD *)v107 + 4);
            *(double *)(v10 + 8) = v107[1];
            *(_DWORD *)(v10 + 16) = v108;
            *((_QWORD *)v107 + 1) = v216;
            *((_DWORD *)v107 + 4) = DWORD2(v216);
            do
            {
              v109 = *(double *)(v10 + 24);
              v10 += 24;
              v101 = v109;
            }
            while (v109 < v33);
            do
            {
              v110 = *(v107 - 3);
              v107 -= 3;
              v106 = v110;
            }
            while (v110 >= v33);
          }
          while (v10 < (unint64_t)v107);
          v111 = v10 - 24;
          if (v10 - 24 != a1)
          {
LABEL_70:
            *(_QWORD *)a1 = *(_QWORD *)(v10 - 24);
            v112 = *(_QWORD *)(v10 - 16);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 8);
            *(_QWORD *)(a1 + 8) = v112;
          }
        }
        *(double *)(v10 - 24) = v33;
        *(_DWORD *)(v10 - 8) = v236;
        *(_QWORD *)(v10 - 16) = v233;
        if (v102 < (unint64_t)v103)
        {
LABEL_74:
          sub_20F3885B4(a1, v111, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v113 = sub_20F389630(a1, v111);
        if (!sub_20F389630(v10, a2))
        {
          if (v113)
            continue;
          goto LABEL_74;
        }
        a2 = v111;
        if (!v113)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v91 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        if (v91 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v92 = (__n128 *)(v12 + 32);
        v93 = *(_QWORD *)(v12 + 32);
        v95 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        v94 = v95;
        if (v93 < *(_QWORD *)v12)
        {
          if (v94 >= v93)
          {
            v184 = *(__n128 *)v12;
            v218 = *(_OWORD *)(v12 + 16);
            v149 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v92;
            *(_OWORD *)(v12 + 16) = v149;
            result = v184;
            *v92 = v184;
            *(_OWORD *)(v12 + 48) = v218;
            if (v90->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v92;
            v97 = *(__n128 *)(v12 + 48);
            v150 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v150;
          }
          else
          {
LABEL_100:
            v177 = *(__n128 *)v12;
            v210 = *(__n128 *)(v12 + 16);
            v96 = v90[1];
            *(__n128 *)v12 = *v90;
            *(__n128 *)(v12 + 16) = v96;
            result = v177;
            v97 = v210;
          }
          *v90 = result;
          v90[1] = v97;
          return result;
        }
        if (v94 < v93)
        {
          result = *v92;
          v215 = *(__n128 *)(v12 + 48);
          v141 = v90[1];
          *v92 = *v90;
          *(__n128 *)(v12 + 48) = v141;
          *v90 = result;
          v90[1] = v215;
          goto LABEL_182;
        }
        return result;
      case 4:
        v92 = (__n128 *)(v12 + 32);
        v98 = *(_QWORD *)(v12 + 32);
        v99 = (__n128 *)(v12 + 64);
        v100 = *(_QWORD *)(v12 + 64);
        if (v98 >= *(_QWORD *)v12)
        {
          if (v100 < v98)
          {
            v142 = *v92;
            result = *(__n128 *)(v12 + 48);
            v143 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v143;
            *v99 = v142;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v182 = *(__n128 *)v12;
              v216 = *(_OWORD *)(v12 + 16);
              v144 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v92;
              *(_OWORD *)(v12 + 16) = v144;
              result = v182;
              *v92 = v182;
              *(_OWORD *)(v12 + 48) = v216;
            }
          }
        }
        else if (v100 >= v98)
        {
          v185 = *(__n128 *)v12;
          v219 = *(_OWORD *)(v12 + 16);
          v151 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v92;
          *(_OWORD *)(v12 + 16) = v151;
          result = v185;
          *v92 = v185;
          *(_OWORD *)(v12 + 48) = v219;
          if (v100 < *(_QWORD *)(v12 + 32))
          {
            v152 = *v92;
            result = *(__n128 *)(v12 + 48);
            v153 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v153;
            *v99 = v152;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v178 = *(__n128 *)v12;
          v211 = *(_OWORD *)(v12 + 16);
          v101 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v99;
          *(_OWORD *)(v12 + 16) = v101;
          result = v178;
          *v99 = v178;
          *(_OWORD *)(v12 + 80) = v211;
        }
        if (v9->n128_u64[0] < v99->n128_u64[0])
        {
          result = *v99;
          v220 = *(__n128 *)(v12 + 80);
          v154 = a2[-1];
          *v99 = *v9;
          *(__n128 *)(v12 + 80) = v154;
          *v9 = result;
          a2[-1] = v220;
          if (v99->n128_u64[0] < v92->n128_u64[0])
          {
            v155 = *v92;
            result = *(__n128 *)(v12 + 48);
            v156 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v156;
            *v99 = v155;
            *(__n128 *)(v12 + 80) = result;
LABEL_182:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v186 = *(__n128 *)v12;
              v221 = *(__n128 *)(v12 + 16);
              v157 = v92[1];
              *(__n128 *)v12 = *v92;
              *(__n128 *)(v12 + 16) = v157;
              result = v186;
              *v92 = v186;
              v92[1] = v221;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_20F3DD9E4((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 == a2)
              return result;
            v113 = (unint64_t)(v14 - 2) >> 1;
            v114 = v113;
            while (1)
            {
              if (v113 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = v12 + 32 * v116;
                if (2 * v114 + 2 >= v14)
                {
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (*(_QWORD *)v117 >= *(_QWORD *)v120)
                    goto LABEL_136;
                }
                else
                {
                  v118 = *(_QWORD *)(v117 + 32);
                  v119 = *(_QWORD *)v117 >= v118;
                  if (*(_QWORD *)v117 > v118)
                    v118 = *(_QWORD *)v117;
                  if (!v119)
                  {
                    v117 += 32;
                    v116 = 2 * v114 + 2;
                  }
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (v118 >= *(_QWORD *)v120)
                  {
LABEL_136:
                    v213 = *(_QWORD *)(v120 + 24);
                    v180 = *(_OWORD *)(v120 + 8);
                    while (1)
                    {
                      v124 = (_OWORD *)v120;
                      v120 = v117;
                      v125 = *(_OWORD *)(v117 + 16);
                      *v124 = *(_OWORD *)v117;
                      v124[1] = v125;
                      if (v113 < v116)
                        break;
                      v126 = (2 * v116) | 1;
                      v117 = v12 + 32 * v126;
                      v116 = 2 * v116 + 2;
                      if (v116 < v14)
                      {
                        v122 = *(_QWORD *)v117;
                        v123 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 <= v123)
                          v122 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 >= v123)
                          v116 = v126;
                        else
                          v117 += 32;
                        if (v122 < v121)
                          break;
                      }
                      else
                      {
                        v116 = v126;
                        if (*(_QWORD *)v117 < v121)
                          break;
                      }
                    }
                    *(_QWORD *)v120 = v121;
                    *(_QWORD *)(v120 + 24) = v213;
                    *(_OWORD *)(v120 + 8) = v180;
                  }
                }
              }
              v115 = v114-- <= 0;
              if (v115)
              {
                v127 = (unint64_t)v13 >> 5;
                do
                {
                  v128 = 0;
                  v181 = *(__n128 *)v12;
                  v214 = *(__n128 *)(v12 + 16);
                  v129 = (_OWORD *)v12;
                  do
                  {
                    v131 = (uint64_t)&v129[2 * v128 + 2];
                    v132 = (2 * v128) | 1;
                    v133 = 2 * v128 + 2;
                    if (v133 < v127 && *(_QWORD *)v131 < *(_QWORD *)(v131 + 32))
                    {
                      v131 += 32;
                      v132 = v133;
                    }
                    v130 = *(_OWORD *)(v131 + 16);
                    *v129 = *(_OWORD *)v131;
                    v129[1] = v130;
                    v129 = (_OWORD *)v131;
                    v128 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                  a2 -= 2;
                  if ((__n128 *)v131 == a2)
                  {
                    result = v181;
                    *(__n128 *)v131 = v181;
                    *(__n128 *)(v131 + 16) = v214;
                  }
                  else
                  {
                    v134 = a2[1];
                    *(__n128 *)v131 = *a2;
                    *(__n128 *)(v131 + 16) = v134;
                    result = v181;
                    *a2 = v181;
                    a2[1] = v214;
                    v135 = v131 - v12 + 32;
                    if (v135 >= 33)
                    {
                      v136 = (((unint64_t)v135 >> 5) - 2) >> 1;
                      v137 = (_OWORD *)(v12 + 32 * v136);
                      v138 = *(_QWORD *)v131;
                      if (*(_QWORD *)v137 < *(_QWORD *)v131)
                      {
                        v227 = *(_QWORD *)(v131 + 24);
                        v224 = *(__n128 *)(v131 + 8);
                        do
                        {
                          v139 = (_OWORD *)v131;
                          v131 = (uint64_t)v137;
                          v140 = v137[1];
                          *v139 = *v137;
                          v139[1] = v140;
                          if (!v136)
                            break;
                          v136 = (v136 - 1) >> 1;
                          v137 = (_OWORD *)(v12 + 32 * v136);
                        }
                        while (*(_QWORD *)v137 < v138);
                        *(_QWORD *)v131 = v138;
                        result = v224;
                        *(_QWORD *)(v131 + 24) = v227;
                        *(__n128 *)(v131 + 8) = v224;
                      }
                    }
                  }
                  v115 = v127-- <= 2;
                }
                while (!v115);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 32 * ((unint64_t)v14 >> 1));
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 <= 0x1000)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= v16->n128_u64[0])
            {
              if (v17 < v20)
              {
                v162 = *(__n128 *)v12;
                v191 = *(__n128 *)(v12 + 16);
                v24 = a2[-1];
                *(__n128 *)v12 = *v9;
                *(__n128 *)(v12 + 16) = v24;
                *v9 = v162;
                a2[-1] = v191;
                if (*(_QWORD *)v12 < v16->n128_u64[0])
                {
                  v163 = *v16;
                  v192 = v16[1];
                  v25 = *(__n128 *)(v12 + 16);
                  *v16 = *(__n128 *)v12;
                  v16[1] = v25;
                  *(__n128 *)v12 = v163;
                  *(__n128 *)(v12 + 16) = v192;
                  --a3;
                  v26 = *(_QWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v166 = *v16;
              v196 = v16[1];
              v41 = *(__n128 *)(v12 + 16);
              *v16 = *(__n128 *)v12;
              v16[1] = v41;
              *(__n128 *)v12 = v166;
              *(__n128 *)(v12 + 16) = v196;
              if (v9->n128_u64[0] >= *(_QWORD *)v12)
                goto LABEL_31;
              v159 = *(__n128 *)v12;
              v188 = *(__n128 *)(v12 + 16);
              v42 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v42;
            }
            else
            {
              v159 = *v16;
              v188 = v16[1];
              v21 = a2[-1];
              *v16 = *v9;
              v16[1] = v21;
            }
            *v9 = v159;
            a2[-1] = v188;
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v160 = *v16;
              v189 = v16[1];
              v22 = a2[-1];
              *v16 = *v9;
              v16[1] = v22;
              *v9 = v160;
              a2[-1] = v189;
              if (v16->n128_u64[0] < *(_QWORD *)v12)
              {
                v161 = *(__n128 *)v12;
                v190 = *(__n128 *)(v12 + 16);
                v23 = v16[1];
                *(__n128 *)v12 = *v16;
                *(__n128 *)(v12 + 16) = v23;
                *v16 = v161;
                v16[1] = v190;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v164 = *(__n128 *)v12;
              v193 = *(__n128 *)(v12 + 16);
              v27 = v16[1];
              *(__n128 *)v12 = *v16;
              *(__n128 *)(v12 + 16) = v27;
              *v16 = v164;
              v16[1] = v193;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v158 = *v16;
              v187 = v16[1];
              v28 = a2[-1];
              *v16 = *v9;
              v16[1] = v28;
            }
            else
            {
              v158 = *(__n128 *)v12;
              v187 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
            }
            *v9 = v158;
            a2[-1] = v187;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 32);
          v30 = v12 + 32 * v15;
          v33 = *(_QWORD *)(v30 - 32);
          v31 = (__n128 *)(v30 - 32);
          v32 = v33;
          v34 = v10->n128_u64[0];
          if (v33 >= *(_QWORD *)(v12 + 32))
          {
            if (v34 < v32)
            {
              v165 = *v31;
              v194 = v31[1];
              v38 = a2[-3];
              *v31 = *v10;
              v31[1] = v38;
              *v10 = v165;
              a2[-3] = v194;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v39 = *v29;
                v195 = *(__n128 *)(v12 + 48);
                v40 = v31[1];
                *v29 = *v31;
                *(__n128 *)(v12 + 48) = v40;
                *v31 = v39;
                v31[1] = v195;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v43 = *v29;
              v197 = *(__n128 *)(v12 + 48);
              v44 = v31[1];
              *v29 = *v31;
              *(__n128 *)(v12 + 48) = v44;
              *v31 = v43;
              v31[1] = v197;
              if (v10->n128_u64[0] >= v31->n128_u64[0])
                goto LABEL_36;
              v167 = *v31;
              v198 = v31[1];
              v45 = a2[-3];
              *v31 = *v10;
              v31[1] = v45;
              v35 = v167;
              v36 = v198;
            }
            else
            {
              v35 = *v29;
              v36 = *(__n128 *)(v12 + 48);
              v37 = a2[-3];
              *v29 = *v10;
              *(__n128 *)(v12 + 48) = v37;
            }
            *v10 = v35;
            a2[-3] = v36;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 64);
          v47 = v12 + 32 * v15;
          v50 = *(_QWORD *)(v47 + 32);
          v48 = (__n128 *)(v47 + 32);
          v49 = v50;
          v51 = v11->n128_u64[0];
          if (v50 >= *(_QWORD *)(v12 + 64))
          {
            if (v51 < v49)
            {
              v168 = *v48;
              v199 = v48[1];
              v55 = a2[-5];
              *v48 = *v11;
              v48[1] = v55;
              *v11 = v168;
              a2[-5] = v199;
              if (v48->n128_u64[0] < v46->n128_u64[0])
              {
                v56 = *v46;
                v200 = *(__n128 *)(v12 + 80);
                v57 = v48[1];
                *v46 = *v48;
                *(__n128 *)(v12 + 80) = v57;
                *v48 = v56;
                v48[1] = v200;
              }
            }
          }
          else
          {
            if (v51 >= v49)
            {
              v58 = *v46;
              v201 = *(__n128 *)(v12 + 80);
              v59 = v48[1];
              *v46 = *v48;
              *(__n128 *)(v12 + 80) = v59;
              *v48 = v58;
              v48[1] = v201;
              if (v11->n128_u64[0] >= v48->n128_u64[0])
                goto LABEL_45;
              v169 = *v48;
              v202 = v48[1];
              v60 = a2[-5];
              *v48 = *v11;
              v48[1] = v60;
              v52 = v169;
              v53 = v202;
            }
            else
            {
              v52 = *v46;
              v53 = *(__n128 *)(v12 + 80);
              v54 = a2[-5];
              *v46 = *v11;
              *(__n128 *)(v12 + 80) = v54;
            }
            *v11 = v52;
            a2[-5] = v53;
          }
LABEL_45:
          v61 = v16->n128_u64[0];
          v62 = v48->n128_u64[0];
          if (v16->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v62 < v61)
            {
              v171 = *v16;
              v204 = v16[1];
              v64 = v48[1];
              *v16 = *v48;
              v16[1] = v64;
              *v48 = v171;
              v48[1] = v204;
              if (v16->n128_u64[0] < v31->n128_u64[0])
              {
                v172 = *v31;
                v205 = v31[1];
                v65 = v16[1];
                *v31 = *v16;
                v31[1] = v65;
                *v16 = v172;
                v16[1] = v205;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v173 = *v31;
              v206 = v31[1];
              v66 = v16[1];
              *v31 = *v16;
              v31[1] = v66;
              *v16 = v173;
              v16[1] = v206;
              if (v48->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v170 = *v16;
              v203 = v16[1];
              v67 = v48[1];
              *v16 = *v48;
              v16[1] = v67;
            }
            else
            {
              v170 = *v31;
              v203 = v31[1];
              v63 = v48[1];
              *v31 = *v48;
              v31[1] = v63;
            }
            *v48 = v170;
            v48[1] = v203;
          }
LABEL_54:
          v174 = *(__n128 *)v12;
          v207 = *(__n128 *)(v12 + 16);
          v68 = v16[1];
          *(__n128 *)v12 = *v16;
          *(__n128 *)(v12 + 16) = v68;
          *v16 = v174;
          v16[1] = v207;
          --a3;
          v26 = *(_QWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v12 - 32) >= v26)
          {
            v226 = *(_QWORD *)(v12 + 24);
            v223 = *(__n128 *)(v12 + 8);
            if (v26 >= v9->n128_u64[0])
            {
              v83 = v12 + 32;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v83 += 32;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v82 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v82);
            }
            v84 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v85 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v85);
            }
            while (v12 < (unint64_t)v84)
            {
              v176 = *(__n128 *)v12;
              v209 = *(__n128 *)(v12 + 16);
              v86 = v84[1];
              *(__n128 *)v12 = *v84;
              *(__n128 *)(v12 + 16) = v86;
              *v84 = v176;
              v84[1] = v209;
              do
              {
                v87 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v87);
              do
              {
                v88 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v88);
            }
            if (v12 - 32 != a1)
            {
              v89 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v89;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 32) = v26;
            result = v223;
            *(_QWORD *)(v12 - 8) = v226;
            *(__n128 *)(v12 - 24) = v223;
            continue;
          }
LABEL_56:
          v69 = 0;
          v225 = *(_QWORD *)(v12 + 24);
          v222 = *(__n128 *)(v12 + 8);
          do
          {
            v70 = *(_QWORD *)(v12 + v69 + 32);
            v69 += 32;
          }
          while (v70 < v26);
          v71 = v12 + v69;
          v72 = a2;
          if (v69 == 32)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v73 >= v26);
          }
          v12 += v69;
          if (v71 < (unint64_t)v72)
          {
            v75 = v72;
            do
            {
              v175 = *(__n128 *)v12;
              v208 = *(__n128 *)(v12 + 16);
              v76 = v75[1];
              *(__n128 *)v12 = *v75;
              *(__n128 *)(v12 + 16) = v76;
              *v75 = v175;
              v75[1] = v208;
              do
              {
                v77 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v77 < v26);
              do
              {
                v78 = v75[-2].n128_u64[0];
                v75 -= 2;
              }
              while (v78 >= v26);
            }
            while (v12 < (unint64_t)v75);
          }
          if (v12 - 32 != a1)
          {
            v79 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v79;
          }
          *(_QWORD *)(v12 - 32) = v26;
          *(_QWORD *)(v12 - 8) = v225;
          *(__n128 *)(v12 - 24) = v222;
          if (v71 < (unint64_t)v72)
            goto LABEL_75;
          v80 = sub_20F3DD624(a1, v12 - 32, v222);
          if (!sub_20F3DD624(v12, (uint64_t)a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_20F3DCA20(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v80)
            return result;
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 32);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (v104)
            return result;
          v105 = 0;
          v106 = v12;
          while (1)
          {
            v108 = v102;
            v109 = *(_QWORD *)(v106 + 32);
            if (v109 < *(_QWORD *)v106)
            {
              v179 = *(__n128 *)(v106 + 40);
              v212 = *(_QWORD *)(v106 + 56);
              v110 = v105;
              do
              {
                v111 = v12 + v110;
                v112 = *(_OWORD *)(v12 + v110 + 16);
                *(_OWORD *)(v111 + 32) = *(_OWORD *)(v12 + v110);
                *(_OWORD *)(v111 + 48) = v112;
                if (!v110)
                {
                  v107 = v12;
                  goto LABEL_116;
                }
                v110 -= 32;
              }
              while (v109 < *(_QWORD *)(v111 - 32));
              v107 = v12 + v110 + 32;
LABEL_116:
              *(_QWORD *)v107 = v109;
              result = v179;
              *(_QWORD *)(v107 + 24) = v212;
              *(__n128 *)(v107 + 8) = v179;
            }
            v102 = v108 + 2;
            v105 += 32;
            v106 = (unint64_t)v108;
            if (&v108[2] == a2)
              return result;
          }
        }
        if (!v104)
        {
          do
          {
            v145 = (uint64_t)v102;
            v146 = *(_QWORD *)(a1 + 32);
            if (v146 < *(_QWORD *)a1)
            {
              v183 = *(__n128 *)(a1 + 40);
              v217 = *(_QWORD *)(a1 + 56);
              do
              {
                v147 = v102[-1];
                *v102 = v102[-2];
                v102[1] = v147;
                v148 = v102[-4].n128_u64[0];
                v102 -= 2;
              }
              while (v146 < v148);
              v102->n128_u64[0] = v146;
              result = v183;
              v102[1].n128_u64[1] = v217;
              *(__n128 *)((char *)v102 + 8) = v183;
            }
            v102 = (__n128 *)(v145 + 32);
            a1 = v145;
          }
          while ((__n128 *)(v145 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v91 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        if (v91 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v92 = (__n128 *)(v12 + 32);
        v93 = *(_QWORD *)(v12 + 32);
        v95 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        v94 = v95;
        if (v93 < *(_QWORD *)v12)
        {
          if (v94 >= v93)
          {
            v184 = *(__n128 *)v12;
            v218 = *(_OWORD *)(v12 + 16);
            v149 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v92;
            *(_OWORD *)(v12 + 16) = v149;
            result = v184;
            *v92 = v184;
            *(_OWORD *)(v12 + 48) = v218;
            if (v90->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v92;
            v97 = *(__n128 *)(v12 + 48);
            v150 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v150;
          }
          else
          {
LABEL_100:
            v177 = *(__n128 *)v12;
            v210 = *(__n128 *)(v12 + 16);
            v96 = v90[1];
            *(__n128 *)v12 = *v90;
            *(__n128 *)(v12 + 16) = v96;
            result = v177;
            v97 = v210;
          }
          *v90 = result;
          v90[1] = v97;
          return result;
        }
        if (v94 < v93)
        {
          result = *v92;
          v215 = *(__n128 *)(v12 + 48);
          v141 = v90[1];
          *v92 = *v90;
          *(__n128 *)(v12 + 48) = v141;
          *v90 = result;
          v90[1] = v215;
          goto LABEL_182;
        }
        return result;
      case 4:
        v92 = (__n128 *)(v12 + 32);
        v98 = *(_QWORD *)(v12 + 32);
        v99 = (__n128 *)(v12 + 64);
        v100 = *(_QWORD *)(v12 + 64);
        if (v98 >= *(_QWORD *)v12)
        {
          if (v100 < v98)
          {
            v142 = *v92;
            result = *(__n128 *)(v12 + 48);
            v143 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v143;
            *v99 = v142;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v182 = *(__n128 *)v12;
              v216 = *(_OWORD *)(v12 + 16);
              v144 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v92;
              *(_OWORD *)(v12 + 16) = v144;
              result = v182;
              *v92 = v182;
              *(_OWORD *)(v12 + 48) = v216;
            }
          }
        }
        else if (v100 >= v98)
        {
          v185 = *(__n128 *)v12;
          v219 = *(_OWORD *)(v12 + 16);
          v151 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v92;
          *(_OWORD *)(v12 + 16) = v151;
          result = v185;
          *v92 = v185;
          *(_OWORD *)(v12 + 48) = v219;
          if (v100 < *(_QWORD *)(v12 + 32))
          {
            v152 = *v92;
            result = *(__n128 *)(v12 + 48);
            v153 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v153;
            *v99 = v152;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v178 = *(__n128 *)v12;
          v211 = *(_OWORD *)(v12 + 16);
          v101 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v99;
          *(_OWORD *)(v12 + 16) = v101;
          result = v178;
          *v99 = v178;
          *(_OWORD *)(v12 + 80) = v211;
        }
        if (v9->n128_u64[0] < v99->n128_u64[0])
        {
          result = *v99;
          v220 = *(__n128 *)(v12 + 80);
          v154 = a2[-1];
          *v99 = *v9;
          *(__n128 *)(v12 + 80) = v154;
          *v9 = result;
          a2[-1] = v220;
          if (v99->n128_u64[0] < v92->n128_u64[0])
          {
            v155 = *v92;
            result = *(__n128 *)(v12 + 48);
            v156 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v156;
            *v99 = v155;
            *(__n128 *)(v12 + 80) = result;
LABEL_182:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v186 = *(__n128 *)v12;
              v221 = *(__n128 *)(v12 + 16);
              v157 = v92[1];
              *(__n128 *)v12 = *v92;
              *(__n128 *)(v12 + 16) = v157;
              result = v186;
              *v92 = v186;
              v92[1] = v221;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_20F3DD9E4((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 == a2)
              return result;
            v113 = (unint64_t)(v14 - 2) >> 1;
            v114 = v113;
            while (1)
            {
              if (v113 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = v12 + 32 * v116;
                if (2 * v114 + 2 >= v14)
                {
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (*(_QWORD *)v117 >= *(_QWORD *)v120)
                    goto LABEL_136;
                }
                else
                {
                  v118 = *(_QWORD *)(v117 + 32);
                  v119 = *(_QWORD *)v117 >= v118;
                  if (*(_QWORD *)v117 > v118)
                    v118 = *(_QWORD *)v117;
                  if (!v119)
                  {
                    v117 += 32;
                    v116 = 2 * v114 + 2;
                  }
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (v118 >= *(_QWORD *)v120)
                  {
LABEL_136:
                    v213 = *(_QWORD *)(v120 + 24);
                    v180 = *(_OWORD *)(v120 + 8);
                    while (1)
                    {
                      v124 = (_OWORD *)v120;
                      v120 = v117;
                      v125 = *(_OWORD *)(v117 + 16);
                      *v124 = *(_OWORD *)v117;
                      v124[1] = v125;
                      if (v113 < v116)
                        break;
                      v126 = (2 * v116) | 1;
                      v117 = v12 + 32 * v126;
                      v116 = 2 * v116 + 2;
                      if (v116 < v14)
                      {
                        v122 = *(_QWORD *)v117;
                        v123 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 <= v123)
                          v122 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 >= v123)
                          v116 = v126;
                        else
                          v117 += 32;
                        if (v122 < v121)
                          break;
                      }
                      else
                      {
                        v116 = v126;
                        if (*(_QWORD *)v117 < v121)
                          break;
                      }
                    }
                    *(_QWORD *)v120 = v121;
                    *(_QWORD *)(v120 + 24) = v213;
                    *(_OWORD *)(v120 + 8) = v180;
                  }
                }
              }
              v115 = v114-- <= 0;
              if (v115)
              {
                v127 = (unint64_t)v13 >> 5;
                do
                {
                  v128 = 0;
                  v181 = *(__n128 *)v12;
                  v214 = *(__n128 *)(v12 + 16);
                  v129 = (_OWORD *)v12;
                  do
                  {
                    v131 = (uint64_t)&v129[2 * v128 + 2];
                    v132 = (2 * v128) | 1;
                    v133 = 2 * v128 + 2;
                    if (v133 < v127 && *(_QWORD *)v131 < *(_QWORD *)(v131 + 32))
                    {
                      v131 += 32;
                      v132 = v133;
                    }
                    v130 = *(_OWORD *)(v131 + 16);
                    *v129 = *(_OWORD *)v131;
                    v129[1] = v130;
                    v129 = (_OWORD *)v131;
                    v128 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                  a2 -= 2;
                  if ((__n128 *)v131 == a2)
                  {
                    result = v181;
                    *(__n128 *)v131 = v181;
                    *(__n128 *)(v131 + 16) = v214;
                  }
                  else
                  {
                    v134 = a2[1];
                    *(__n128 *)v131 = *a2;
                    *(__n128 *)(v131 + 16) = v134;
                    result = v181;
                    *a2 = v181;
                    a2[1] = v214;
                    v135 = v131 - v12 + 32;
                    if (v135 >= 33)
                    {
                      v136 = (((unint64_t)v135 >> 5) - 2) >> 1;
                      v137 = (_OWORD *)(v12 + 32 * v136);
                      v138 = *(_QWORD *)v131;
                      if (*(_QWORD *)v137 < *(_QWORD *)v131)
                      {
                        v227 = *(_QWORD *)(v131 + 24);
                        v224 = *(__n128 *)(v131 + 8);
                        do
                        {
                          v139 = (_OWORD *)v131;
                          v131 = (uint64_t)v137;
                          v140 = v137[1];
                          *v139 = *v137;
                          v139[1] = v140;
                          if (!v136)
                            break;
                          v136 = (v136 - 1) >> 1;
                          v137 = (_OWORD *)(v12 + 32 * v136);
                        }
                        while (*(_QWORD *)v137 < v138);
                        *(_QWORD *)v131 = v138;
                        result = v224;
                        *(_QWORD *)(v131 + 24) = v227;
                        *(__n128 *)(v131 + 8) = v224;
                      }
                    }
                  }
                  v115 = v127-- <= 2;
                }
                while (!v115);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 32 * ((unint64_t)v14 >> 1));
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 <= 0x1000)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= v16->n128_u64[0])
            {
              if (v17 < v20)
              {
                v162 = *(__n128 *)v12;
                v191 = *(__n128 *)(v12 + 16);
                v24 = a2[-1];
                *(__n128 *)v12 = *v9;
                *(__n128 *)(v12 + 16) = v24;
                *v9 = v162;
                a2[-1] = v191;
                if (*(_QWORD *)v12 < v16->n128_u64[0])
                {
                  v163 = *v16;
                  v192 = v16[1];
                  v25 = *(__n128 *)(v12 + 16);
                  *v16 = *(__n128 *)v12;
                  v16[1] = v25;
                  *(__n128 *)v12 = v163;
                  *(__n128 *)(v12 + 16) = v192;
                  --a3;
                  v26 = *(_QWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v166 = *v16;
              v196 = v16[1];
              v41 = *(__n128 *)(v12 + 16);
              *v16 = *(__n128 *)v12;
              v16[1] = v41;
              *(__n128 *)v12 = v166;
              *(__n128 *)(v12 + 16) = v196;
              if (v9->n128_u64[0] >= *(_QWORD *)v12)
                goto LABEL_31;
              v159 = *(__n128 *)v12;
              v188 = *(__n128 *)(v12 + 16);
              v42 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v42;
            }
            else
            {
              v159 = *v16;
              v188 = v16[1];
              v21 = a2[-1];
              *v16 = *v9;
              v16[1] = v21;
            }
            *v9 = v159;
            a2[-1] = v188;
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v160 = *v16;
              v189 = v16[1];
              v22 = a2[-1];
              *v16 = *v9;
              v16[1] = v22;
              *v9 = v160;
              a2[-1] = v189;
              if (v16->n128_u64[0] < *(_QWORD *)v12)
              {
                v161 = *(__n128 *)v12;
                v190 = *(__n128 *)(v12 + 16);
                v23 = v16[1];
                *(__n128 *)v12 = *v16;
                *(__n128 *)(v12 + 16) = v23;
                *v16 = v161;
                v16[1] = v190;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v164 = *(__n128 *)v12;
              v193 = *(__n128 *)(v12 + 16);
              v27 = v16[1];
              *(__n128 *)v12 = *v16;
              *(__n128 *)(v12 + 16) = v27;
              *v16 = v164;
              v16[1] = v193;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v158 = *v16;
              v187 = v16[1];
              v28 = a2[-1];
              *v16 = *v9;
              v16[1] = v28;
            }
            else
            {
              v158 = *(__n128 *)v12;
              v187 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
            }
            *v9 = v158;
            a2[-1] = v187;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 32);
          v30 = v12 + 32 * v15;
          v33 = *(_QWORD *)(v30 - 32);
          v31 = (__n128 *)(v30 - 32);
          v32 = v33;
          v34 = v10->n128_u64[0];
          if (v33 >= *(_QWORD *)(v12 + 32))
          {
            if (v34 < v32)
            {
              v165 = *v31;
              v194 = v31[1];
              v38 = a2[-3];
              *v31 = *v10;
              v31[1] = v38;
              *v10 = v165;
              a2[-3] = v194;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v39 = *v29;
                v195 = *(__n128 *)(v12 + 48);
                v40 = v31[1];
                *v29 = *v31;
                *(__n128 *)(v12 + 48) = v40;
                *v31 = v39;
                v31[1] = v195;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v43 = *v29;
              v197 = *(__n128 *)(v12 + 48);
              v44 = v31[1];
              *v29 = *v31;
              *(__n128 *)(v12 + 48) = v44;
              *v31 = v43;
              v31[1] = v197;
              if (v10->n128_u64[0] >= v31->n128_u64[0])
                goto LABEL_36;
              v167 = *v31;
              v198 = v31[1];
              v45 = a2[-3];
              *v31 = *v10;
              v31[1] = v45;
              v35 = v167;
              v36 = v198;
            }
            else
            {
              v35 = *v29;
              v36 = *(__n128 *)(v12 + 48);
              v37 = a2[-3];
              *v29 = *v10;
              *(__n128 *)(v12 + 48) = v37;
            }
            *v10 = v35;
            a2[-3] = v36;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 64);
          v47 = v12 + 32 * v15;
          v50 = *(_QWORD *)(v47 + 32);
          v48 = (__n128 *)(v47 + 32);
          v49 = v50;
          v51 = v11->n128_u64[0];
          if (v50 >= *(_QWORD *)(v12 + 64))
          {
            if (v51 < v49)
            {
              v168 = *v48;
              v199 = v48[1];
              v55 = a2[-5];
              *v48 = *v11;
              v48[1] = v55;
              *v11 = v168;
              a2[-5] = v199;
              if (v48->n128_u64[0] < v46->n128_u64[0])
              {
                v56 = *v46;
                v200 = *(__n128 *)(v12 + 80);
                v57 = v48[1];
                *v46 = *v48;
                *(__n128 *)(v12 + 80) = v57;
                *v48 = v56;
                v48[1] = v200;
              }
            }
          }
          else
          {
            if (v51 >= v49)
            {
              v58 = *v46;
              v201 = *(__n128 *)(v12 + 80);
              v59 = v48[1];
              *v46 = *v48;
              *(__n128 *)(v12 + 80) = v59;
              *v48 = v58;
              v48[1] = v201;
              if (v11->n128_u64[0] >= v48->n128_u64[0])
                goto LABEL_45;
              v169 = *v48;
              v202 = v48[1];
              v60 = a2[-5];
              *v48 = *v11;
              v48[1] = v60;
              v52 = v169;
              v53 = v202;
            }
            else
            {
              v52 = *v46;
              v53 = *(__n128 *)(v12 + 80);
              v54 = a2[-5];
              *v46 = *v11;
              *(__n128 *)(v12 + 80) = v54;
            }
            *v11 = v52;
            a2[-5] = v53;
          }
LABEL_45:
          v61 = v16->n128_u64[0];
          v62 = v48->n128_u64[0];
          if (v16->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v62 < v61)
            {
              v171 = *v16;
              v204 = v16[1];
              v64 = v48[1];
              *v16 = *v48;
              v16[1] = v64;
              *v48 = v171;
              v48[1] = v204;
              if (v16->n128_u64[0] < v31->n128_u64[0])
              {
                v172 = *v31;
                v205 = v31[1];
                v65 = v16[1];
                *v31 = *v16;
                v31[1] = v65;
                *v16 = v172;
                v16[1] = v205;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v173 = *v31;
              v206 = v31[1];
              v66 = v16[1];
              *v31 = *v16;
              v31[1] = v66;
              *v16 = v173;
              v16[1] = v206;
              if (v48->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v170 = *v16;
              v203 = v16[1];
              v67 = v48[1];
              *v16 = *v48;
              v16[1] = v67;
            }
            else
            {
              v170 = *v31;
              v203 = v31[1];
              v63 = v48[1];
              *v31 = *v48;
              v31[1] = v63;
            }
            *v48 = v170;
            v48[1] = v203;
          }
LABEL_54:
          v174 = *(__n128 *)v12;
          v207 = *(__n128 *)(v12 + 16);
          v68 = v16[1];
          *(__n128 *)v12 = *v16;
          *(__n128 *)(v12 + 16) = v68;
          *v16 = v174;
          v16[1] = v207;
          --a3;
          v26 = *(_QWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v12 - 32) >= v26)
          {
            v226 = *(_QWORD *)(v12 + 24);
            v223 = *(__n128 *)(v12 + 8);
            if (v26 >= v9->n128_u64[0])
            {
              v83 = v12 + 32;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v83 += 32;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v82 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v82);
            }
            v84 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v85 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v85);
            }
            while (v12 < (unint64_t)v84)
            {
              v176 = *(__n128 *)v12;
              v209 = *(__n128 *)(v12 + 16);
              v86 = v84[1];
              *(__n128 *)v12 = *v84;
              *(__n128 *)(v12 + 16) = v86;
              *v84 = v176;
              v84[1] = v209;
              do
              {
                v87 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v87);
              do
              {
                v88 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v88);
            }
            if (v12 - 32 != a1)
            {
              v89 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v89;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 32) = v26;
            result = v223;
            *(_QWORD *)(v12 - 8) = v226;
            *(__n128 *)(v12 - 24) = v223;
            continue;
          }
LABEL_56:
          v69 = 0;
          v225 = *(_QWORD *)(v12 + 24);
          v222 = *(__n128 *)(v12 + 8);
          do
          {
            v70 = *(_QWORD *)(v12 + v69 + 32);
            v69 += 32;
          }
          while (v70 < v26);
          v71 = v12 + v69;
          v72 = a2;
          if (v69 == 32)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v73 >= v26);
          }
          v12 += v69;
          if (v71 < (unint64_t)v72)
          {
            v75 = v72;
            do
            {
              v175 = *(__n128 *)v12;
              v208 = *(__n128 *)(v12 + 16);
              v76 = v75[1];
              *(__n128 *)v12 = *v75;
              *(__n128 *)(v12 + 16) = v76;
              *v75 = v175;
              v75[1] = v208;
              do
              {
                v77 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v77 < v26);
              do
              {
                v78 = v75[-2].n128_u64[0];
                v75 -= 2;
              }
              while (v78 >= v26);
            }
            while (v12 < (unint64_t)v75);
          }
          if (v12 - 32 != a1)
          {
            v79 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v79;
          }
          *(_QWORD *)(v12 - 32) = v26;
          *(_QWORD *)(v12 - 8) = v225;
          *(__n128 *)(v12 - 24) = v222;
          if (v71 < (unint64_t)v72)
            goto LABEL_75;
          v80 = sub_20F3DE774(a1, v12 - 32, v222);
          if (!sub_20F3DE774(v12, (uint64_t)a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_20F3DDB70(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v80)
            return result;
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 32);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (v104)
            return result;
          v105 = 0;
          v106 = v12;
          while (1)
          {
            v108 = v102;
            v109 = *(_QWORD *)(v106 + 32);
            if (v109 < *(_QWORD *)v106)
            {
              v179 = *(__n128 *)(v106 + 40);
              v212 = *(_QWORD *)(v106 + 56);
              v110 = v105;
              do
              {
                v111 = v12 + v110;
                v112 = *(_OWORD *)(v12 + v110 + 16);
                *(_OWORD *)(v111 + 32) = *(_OWORD *)(v12 + v110);
                *(_OWORD *)(v111 + 48) = v112;
                if (!v110)
                {
                  v107 = v12;
                  goto LABEL_116;
                }
                v110 -= 32;
              }
              while (v109 < *(_QWORD *)(v111 - 32));
              v107 = v12 + v110 + 32;
LABEL_116:
              *(_QWORD *)v107 = v109;
              result = v179;
              *(_QWORD *)(v107 + 24) = v212;
              *(__n128 *)(v107 + 8) = v179;
            }
            v102 = v108 + 2;
            v105 += 32;
            v106 = (unint64_t)v108;
            if (&v108[2] == a2)
              return result;
          }
        }
        if (!v104)
        {
          do
          {
            v145 = (uint64_t)v102;
            v146 = *(_QWORD *)(a1 + 32);
            if (v146 < *(_QWORD *)a1)
            {
              v183 = *(__n128 *)(a1 + 40);
              v217 = *(_QWORD *)(a1 + 56);
              do
              {
                v147 = v102[-1];
                *v102 = v102[-2];
                v102[1] = v147;
                v148 = v102[-4].n128_u64[0];
                v102 -= 2;
              }
              while (v146 < v148);
              v102->n128_u64[0] = v146;
              result = v183;
              v102[1].n128_u64[1] = v217;
              *(__n128 *)((char *)v102 + 8) = v183;
            }
            v102 = (__n128 *)(v145 + 32);
            a1 = v145;
          }
          while ((__n128 *)(v145 + 32) != a2);
        }
        return result;
    }
  }
}

  v203 = a2 - 4;
  v204 = a2 - 2;
  v202 = a2 - 6;
  v8 = a1;
  v207 = a2;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v89 = *(a2 - 2);
        v90 = *a1;
        v91 = **a1;
        if (*v89 == v91)
          v92 = 0;
        else
          v92 = -127;
        if (*v89 > v91)
          v92 = 1;
        if (*v89 < v91)
          v92 = -1;
        if (v92 != -127 && (v92 & 0x80) != 0)
        {
          *a1 = v89;
          *(a2 - 2) = v90;
          v93 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v93;
        }
        return;
      case 3:
        sub_20F422834(a1, a1 + 2, v204);
        return;
      case 4:
        sub_20F422BC8(a1, a1 + 2, a1 + 4, (uint64_t)v204);
        return;
      case 5:
        sub_20F4226D4(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)v204);
        return;
      default:
        if (v9 <= 383)
        {
          v94 = a1 + 2;
          v96 = a1 == a2 || v94 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v96)
            {
              v97 = a1;
              do
              {
                v98 = v97;
                v97 = v94;
                v99 = (unint64_t *)v98[2];
                v100 = *v98;
                a5.n128_u64[0] = *v99;
                v101 = **v98;
                if (*(double *)v99 == v101)
                  v102 = 0;
                else
                  v102 = -127;
                if (*(double *)v99 > v101)
                  v102 = 1;
                if (*(double *)v99 < v101)
                  v102 = -1;
                if (v102 != -127 && (v102 & 0x80) != 0)
                {
                  v103 = (unint64_t *)v98[3];
                  v104 = (unint64_t **)v97;
                  *v97 = 0;
                  v97[1] = 0;
                  while (1)
                  {
                    v105 = (double **)v104;
                    v104 = (unint64_t **)v98;
                    v106 = v98[1];
                    *v104 = 0;
                    v104[1] = 0;
                    v107 = (std::__shared_weak_count *)v105[1];
                    *v105 = v100;
                    v105[1] = v106;
                    if (v107)
                    {
                      p_shared_owners = (unint64_t *)&v107->__shared_owners_;
                      do
                        v109 = __ldaxr(p_shared_owners);
                      while (__stlxr(v109 - 1, p_shared_owners));
                      if (!v109)
                      {
                        ((void (*)(std::__shared_weak_count *, __n128))v107->__on_zero_shared)(v107, a5);
                        std::__shared_weak_count::__release_weak(v107);
                      }
                    }
                    if (v104 == (unint64_t **)a1)
                      break;
                    v98 = (double **)(v104 - 2);
                    v100 = (double *)*(v104 - 2);
                    a5.n128_u64[0] = *v99;
                    if (*(double *)v99 == *v100)
                      v110 = 0;
                    else
                      v110 = -127;
                    if (*(double *)v99 > *v100)
                      v110 = 1;
                    if (*(double *)v99 < *v100)
                      v110 = -1;
                    if (v110 == -127 || (v110 & 0x80) == 0)
                      goto LABEL_230;
                  }
                  v104 = (unint64_t **)a1;
LABEL_230:
                  v111 = (std::__shared_weak_count *)v104[1];
                  *v104 = v99;
                  v104[1] = v103;
                  if (v111)
                  {
                    v112 = (unint64_t *)&v111->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v111->__on_zero_shared)(v111, a5);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                }
                v94 = v97 + 2;
              }
              while (v97 + 2 != a2);
            }
          }
          else if (!v96)
          {
            do
            {
              v186 = a1;
              a1 = v94;
              v187 = (unint64_t *)v186[2];
              v188 = *v186;
              a5.n128_u64[0] = *v187;
              v189 = **v186;
              if (*(double *)v187 == v189)
                v190 = 0;
              else
                v190 = -127;
              if (*(double *)v187 > v189)
                v190 = 1;
              if (*(double *)v187 < v189)
                v190 = -1;
              if (v190 != -127 && (v190 & 0x80) != 0)
              {
                v191 = (unint64_t *)v186[3];
                v192 = (unint64_t **)a1;
                *a1 = 0;
                a1[1] = 0;
                do
                {
                  v193 = (double **)v192;
                  v192 = (unint64_t **)v186;
                  v194 = v186[1];
                  *v192 = 0;
                  v192[1] = 0;
                  v195 = (std::__shared_weak_count *)v193[1];
                  *v193 = v188;
                  v193[1] = v194;
                  if (v195)
                  {
                    v196 = (unint64_t *)&v195->__shared_owners_;
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v195->__on_zero_shared)(v195, a5);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                  v186 = (double **)(v192 - 2);
                  v188 = (double *)*(v192 - 2);
                  a5.n128_u64[0] = *v187;
                  if (*(double *)v187 == *v188)
                    v198 = 0;
                  else
                    v198 = -127;
                  if (*(double *)v187 > *v188)
                    v198 = 1;
                  if (*(double *)v187 < *v188)
                    v198 = -1;
                }
                while (v198 != -127 && (v198 & 0x80) != 0);
                v199 = (std::__shared_weak_count *)v192[1];
                *v192 = v187;
                v192[1] = v191;
                if (v199)
                {
                  v200 = (unint64_t *)&v199->__shared_owners_;
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v199->__on_zero_shared)(v199, a5);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
              }
              v94 = a1 + 2;
            }
            while (a1 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v114 = (unint64_t)(v10 - 2) >> 1;
          v115 = v114;
          do
          {
            v116 = v115;
            if (v114 >= v115)
            {
              v117 = (2 * v115) | 1;
              v118 = &a1[2 * v117];
              if (2 * v116 + 2 >= v10)
              {
                v119 = **v118;
              }
              else
              {
                v119 = **v118;
                v120 = *v118[2];
                if (v119 == v120)
                  v121 = 0;
                else
                  v121 = -127;
                if (v119 > v120)
                  v121 = 1;
                if (v119 < v120)
                  v121 = -1;
                if (v121 != -127 && v121 < 0)
                {
                  v119 = *v118[2];
                  v118 += 2;
                  v117 = 2 * v116 + 2;
                }
              }
              v122 = &a1[2 * v116];
              v123 = *v122;
              v124 = **v122;
              if (v119 == v124)
                v125 = 0;
              else
                v125 = -127;
              if (v119 > v124)
                v125 = 1;
              if (v119 < v124)
                v125 = -1;
              if (v125 == -127 || (v125 & 0x80) == 0)
              {
                v206 = a1[2 * v116 + 1];
                *v122 = 0;
                v122[1] = 0;
                v126 = *v118;
                while (1)
                {
                  v127 = v118;
                  v128 = v118[1];
                  *v127 = 0;
                  v127[1] = 0;
                  v129 = (std::__shared_weak_count *)v122[1];
                  *v122 = v126;
                  v122[1] = v128;
                  if (v129)
                  {
                    v130 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v131 = __ldaxr(v130);
                    while (__stlxr(v131 - 1, v130));
                    if (!v131)
                    {
                      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                      std::__shared_weak_count::__release_weak(v129);
                    }
                  }
                  if (v114 < v117)
                    break;
                  v118 = &a1[2 * ((2 * v117) | 1)];
                  if (2 * v117 + 2 >= v10)
                  {
                    v126 = *v118;
                    v133 = **v118;
                    v117 = (2 * v117) | 1;
                  }
                  else
                  {
                    v126 = *v118;
                    v132 = v118[2];
                    v133 = **v118;
                    if (v133 == *v132)
                      v134 = 0;
                    else
                      v134 = -127;
                    if (v133 > *v132)
                      v134 = 1;
                    if (v133 < *v132)
                      v134 = -1;
                    if (v134 != -127 && v134 < 0)
                    {
                      v133 = *v132;
                      v126 = v118[2];
                      v118 += 2;
                      v117 = 2 * v117 + 2;
                    }
                    else
                    {
                      v117 = (2 * v117) | 1;
                    }
                  }
                  if (v133 == *v123)
                    v135 = 0;
                  else
                    v135 = -127;
                  if (v133 > *v123)
                    v135 = 1;
                  v136 = v133 < *v123 ? -1 : v135;
                  v122 = v127;
                  if (v136 != -127)
                  {
                    v122 = v127;
                    if ((v136 & 0x80) != 0)
                      break;
                  }
                }
                v137 = (std::__shared_weak_count *)v127[1];
                *v127 = v123;
                v127[1] = v206;
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
              }
            }
            v115 = v116 - 1;
          }
          while (v116);
          v140 = (unint64_t)v9 >> 4;
          v141 = v207;
          while (2)
          {
            v142 = 0;
            v143 = v141;
            v145 = *a1;
            v144 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v146 = a1;
LABEL_298:
            v147 = v146;
            v146 += 2 * v142 + 2;
            if (2 * v142 + 2 >= v140)
            {
              v142 = (2 * v142) | 1;
              v155 = *v146;
              v154 = v146[1];
              *v146 = 0;
              v146[1] = 0;
              v153 = (std::__shared_weak_count *)v147[1];
              *v147 = v155;
              v147[1] = v154;
              if (!v153)
                goto LABEL_297;
            }
            else
            {
              v148 = *v146;
              v149 = v146[2];
              v150 = **v146;
              if (v150 == *v149)
                v151 = 0;
              else
                v151 = -127;
              if (v150 > *v149)
                v151 = 1;
              if (v150 < *v149)
                v151 = -1;
              if (v151 != -127 && v151 < 0)
              {
                v148 = v146[2];
                v146 += 2;
                v142 = 2 * v142 + 2;
              }
              else
              {
                v142 = (2 * v142) | 1;
              }
              v152 = v146[1];
              *v146 = 0;
              v146[1] = 0;
              v153 = (std::__shared_weak_count *)v147[1];
              *v147 = v148;
              v147[1] = v152;
              if (!v153)
              {
LABEL_297:
                if (v142 > (uint64_t)((unint64_t)(v140 - 2) >> 1))
                {
                  if (v146 == v143 - 2)
                  {
                    v182 = (std::__shared_weak_count *)v146[1];
                    *v146 = v145;
                    v146[1] = v144;
                    v141 = v143 - 2;
                    if (!v182)
                      goto LABEL_295;
                    v185 = (unint64_t *)&v182->__shared_owners_;
                    do
                      v184 = __ldaxr(v185);
                    while (__stlxr(v184 - 1, v185));
                    goto LABEL_358;
                  }
                  v158 = *((_OWORD *)v143 - 1);
                  *(v143 - 2) = 0;
                  *(v143 - 1) = 0;
                  v159 = v143 - 2;
                  v160 = (std::__shared_weak_count *)v146[1];
                  *(_OWORD *)v146 = v158;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                      v163 = (std::__shared_weak_count *)*(v143 - 1);
                      *(v143 - 2) = v145;
                      *(v143 - 1) = v144;
                      v141 = v143 - 2;
                      if (v163)
                        goto LABEL_322;
                      goto LABEL_325;
                    }
                  }
                  v163 = (std::__shared_weak_count *)*(v143 - 1);
                  *(v143 - 2) = v145;
                  *(v143 - 1) = v144;
                  v141 = v143 - 2;
                  if (!v163)
                    goto LABEL_325;
LABEL_322:
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (v165)
                  {
LABEL_325:
                    v166 = (char *)(v146 + 2) - (char *)a1;
                    if (v166 >= 17)
                      goto LABEL_326;
                    goto LABEL_295;
                  }
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                  v166 = (char *)(v146 + 2) - (char *)a1;
                  if (v166 < 17)
                    goto LABEL_295;
LABEL_326:
                  v167 = (((unint64_t)v166 >> 4) - 2) >> 1;
                  v168 = &a1[2 * v167];
                  v169 = *v146;
                  v170 = **v168;
                  v171 = **v146;
                  if (v170 == v171)
                    v172 = 0;
                  else
                    v172 = -127;
                  if (v170 > v171)
                    v172 = 1;
                  if (v170 < v171)
                    v172 = -1;
                  if (v172 != -127 && (v172 & 0x80) != 0)
                  {
                    v173 = v146[1];
                    *v146 = 0;
                    v146[1] = 0;
                    v174 = *v168;
                    do
                    {
                      v175 = v168;
                      v176 = v168[1];
                      *v175 = 0;
                      v175[1] = 0;
                      v177 = (std::__shared_weak_count *)v146[1];
                      *v146 = v174;
                      v146[1] = v176;
                      if (v177)
                      {
                        v178 = (unint64_t *)&v177->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                        }
                      }
                      if (!v167)
                        break;
                      v167 = (v167 - 1) >> 1;
                      v168 = &a1[2 * v167];
                      v174 = *v168;
                      v180 = **v168;
                      if (v180 == *v169)
                        v181 = 0;
                      else
                        v181 = -127;
                      if (v180 > *v169)
                        v181 = 1;
                      if (v180 < *v169)
                        v181 = -1;
                      if (v181 == -127)
                        break;
                      v146 = v175;
                    }
                    while ((v181 & 0x80) != 0);
                    v182 = (std::__shared_weak_count *)v175[1];
                    *v175 = v169;
                    v175[1] = v173;
                    v141 = v159;
                    if (v182)
                    {
                      v183 = (unint64_t *)&v182->__shared_owners_;
                      do
                        v184 = __ldaxr(v183);
                      while (__stlxr(v184 - 1, v183));
LABEL_358:
                      if (!v184)
                      {
                        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                        std::__shared_weak_count::__release_weak(v182);
                      }
                    }
                  }
LABEL_295:
                  v17 = v140-- <= 2;
                  if (v17)
                    return;
                  continue;
                }
                goto LABEL_298;
              }
            }
            break;
          }
          v156 = (unint64_t *)&v153->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
          goto LABEL_297;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          sub_20F422834(v12, a1, v204);
          --a3;
          v14 = *a1;
          if ((a4 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          sub_20F422834(a1, v12, v204);
          v13 = 2 * v11;
          sub_20F422834(a1 + 2, &a1[v13 - 2], v203);
          sub_20F422834(a1 + 4, &a1[v13 + 2], v202);
          sub_20F422834(&a1[v13 - 2], v12, &a1[v13 + 2]);
          a5 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)&a1[v13];
          *(__n128 *)&a1[v13] = a5;
          --a3;
          v14 = *a1;
          if ((a4 & 1) != 0)
            goto LABEL_19;
        }
        v15 = *(a1 - 2);
        v16 = *v15 < *v14;
        v17 = *v15 <= *v14;
        if (*v15 == *v14)
          v18 = 0;
        else
          v18 = -127;
        if (!v17)
          v18 = 1;
        if (v16)
          v18 = -1;
        if (v18 == -127 || (v18 & 0x80) == 0)
        {
          v55 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          v56 = *v14;
          v57 = **v204;
          if (*v14 == v57)
            v58 = 0;
          else
            v58 = -127;
          if (*v14 > v57)
            v58 = 1;
          if (*v14 < v57)
            v58 = -1;
          if (v58 == -127 || (v58 & 0x80) == 0)
          {
            v63 = a1 + 2;
            do
            {
              v8 = v63;
              if (v63 >= a2)
                break;
              v63 += 2;
              v64 = **v8;
              if (v56 == v64)
                v65 = 0;
              else
                v65 = -127;
              if (v56 > v64)
                v65 = 1;
              if (v56 < v64)
                v65 = -1;
            }
            while (v65 == -127 || (v65 & 0x80) == 0);
          }
          else
          {
            v8 = a1;
            do
            {
              v59 = v8[2];
              v8 += 2;
              v60 = v56 < *v59;
              v61 = v56 <= *v59;
              if (v56 == *v59)
                v62 = 0;
              else
                v62 = -127;
              if (!v61)
                v62 = 1;
              if (v60)
                v62 = -1;
            }
            while (v62 == -127 || (v62 & 0x80) == 0);
          }
          v66 = a2;
          if (v8 < a2)
          {
            v66 = a2;
            do
            {
              v67 = *(v66 - 2);
              v66 -= 2;
              v68 = v56 < *v67;
              v69 = v56 <= *v67;
              if (v56 == *v67)
                v70 = 0;
              else
                v70 = -127;
              if (!v69)
                v70 = 1;
              if (v68)
                v70 = -1;
            }
            while (v70 != -127 && (v70 & 0x80) != 0);
          }
          if (v8 < v66)
          {
            v71 = *v8;
            v72 = *v66;
            do
            {
              *v8 = v72;
              *v66 = v71;
              v73 = v8[1];
              v8[1] = v66[1];
              v66[1] = v73;
              do
              {
                v74 = v8[2];
                v8 += 2;
                v71 = v74;
                v75 = v56 < *v74;
                v76 = v56 <= *v74;
                if (v56 == *v74)
                  v77 = 0;
                else
                  v77 = -127;
                if (!v76)
                  v77 = 1;
                if (v75)
                  v77 = -1;
              }
              while (v77 == -127 || (v77 & 0x80) == 0);
              do
              {
                v78 = *(v66 - 2);
                v66 -= 2;
                v72 = v78;
                v79 = v56 < *v78;
                v80 = v56 <= *v78;
                if (v56 == *v78)
                  v81 = 0;
                else
                  v81 = -127;
                if (!v80)
                  v81 = 1;
                if (v79)
                  v81 = -1;
              }
              while (v81 != -127 && (v81 & 0x80) != 0);
            }
            while (v8 < v66);
          }
          v82 = (__n128 *)(v8 - 2);
          if (v8 - 2 != a1)
          {
            a5 = *v82;
            v82->n128_u64[0] = 0;
            *(v8 - 1) = 0;
            v83 = (std::__shared_weak_count *)a1[1];
            *(__n128 *)a1 = a5;
            if (v83)
            {
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
          }
          a4 = 0;
          v86 = (std::__shared_weak_count *)*(v8 - 1);
          *(v8 - 2) = v14;
          *(v8 - 1) = v55;
          a2 = v207;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            a4 = 0;
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
              a4 = 0;
            }
          }
          continue;
        }
LABEL_19:
        v19 = 0;
        v20 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v21 = *v14;
        do
        {
          v22 = a1[v19 + 2];
          if (*v22 == v21)
            v23 = 0;
          else
            v23 = -127;
          if (*v22 > v21)
            v23 = 1;
          if (*v22 < v21)
            v23 = -1;
          v19 += 2;
        }
        while (v23 != -127 && (v23 & 0x80) != 0);
        v24 = &a1[v19];
        v25 = v207;
        if (v19 == 2)
        {
          v25 = v207;
          do
          {
            if (v24 >= v25)
              break;
            v30 = *(v25 - 2);
            v25 -= 2;
            v31 = *v30 < v21;
            v32 = *v30 <= v21;
            if (*v30 == v21)
              v33 = 0;
            else
              v33 = -127;
            if (!v32)
              v33 = 1;
            if (v31)
              v33 = -1;
          }
          while (v33 == -127 || (v33 & 0x80) == 0);
        }
        else
        {
          do
          {
            v26 = *(v25 - 2);
            v25 -= 2;
            v27 = *v26 < v21;
            v28 = *v26 <= v21;
            if (*v26 == v21)
              v29 = 0;
            else
              v29 = -127;
            if (!v28)
              v29 = 1;
            if (v27)
              v29 = -1;
          }
          while (v29 == -127 || (v29 & 0x80) == 0);
        }
        if (v24 >= v25)
        {
          v8 = v24;
          v45 = v24 - 2;
          if (v24 - 2 == a1)
            goto LABEL_84;
        }
        else
        {
          v34 = *v25;
          v8 = v24;
          v35 = v25;
          do
          {
            *v8 = v34;
            *v35 = v22;
            v36 = v8[1];
            v8[1] = v35[1];
            v35[1] = v36;
            do
            {
              v37 = v8[2];
              v8 += 2;
              v22 = v37;
              v38 = *v37 < v21;
              v39 = *v37 <= v21;
              if (*v37 == v21)
                v40 = 0;
              else
                v40 = -127;
              if (!v39)
                v40 = 1;
              if (v38)
                v40 = -1;
            }
            while (v40 != -127 && (v40 & 0x80) != 0);
            do
            {
              v41 = *(v35 - 2);
              v35 -= 2;
              v34 = v41;
              v42 = *v41 < v21;
              v43 = *v41 <= v21;
              if (*v41 == v21)
                v44 = 0;
              else
                v44 = -127;
              if (!v43)
                v44 = 1;
              if (v42)
                v44 = -1;
            }
            while (v44 == -127 || (v44 & 0x80) == 0);
          }
          while (v8 < v35);
          v45 = v8 - 2;
          if (v8 - 2 == a1)
          {
LABEL_84:
            v50 = (std::__shared_weak_count *)*(v8 - 1);
            *(v8 - 2) = v14;
            *(v8 - 1) = v20;
            if (v50)
              goto LABEL_85;
            goto LABEL_89;
          }
        }
        v46 = *(_OWORD *)v45;
        *v45 = 0;
        v45[1] = 0;
        v47 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v46;
        if (!v47)
          goto LABEL_84;
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (v49)
          goto LABEL_84;
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v50 = (std::__shared_weak_count *)*(v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v20;
        if (v50)
        {
LABEL_85:
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
LABEL_89:
        v53 = v24 >= v25;
        a2 = v207;
        if (!v53)
        {
LABEL_93:
          sub_20F4218FC(a1, v45, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v54 = sub_20F422964(a1, v45);
        if (!sub_20F422964(v8, v207))
        {
          if (v54)
            continue;
          goto LABEL_93;
        }
        a2 = v45;
        if (!v54)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v91 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        if (v91 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v92 = (__n128 *)(v12 + 32);
        v93 = *(_QWORD *)(v12 + 32);
        v95 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        v94 = v95;
        if (v93 < *(_QWORD *)v12)
        {
          if (v94 >= v93)
          {
            v184 = *(__n128 *)v12;
            v218 = *(_OWORD *)(v12 + 16);
            v149 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v92;
            *(_OWORD *)(v12 + 16) = v149;
            result = v184;
            *v92 = v184;
            *(_OWORD *)(v12 + 48) = v218;
            if (v90->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v92;
            v97 = *(__n128 *)(v12 + 48);
            v150 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v150;
          }
          else
          {
LABEL_100:
            v177 = *(__n128 *)v12;
            v210 = *(__n128 *)(v12 + 16);
            v96 = v90[1];
            *(__n128 *)v12 = *v90;
            *(__n128 *)(v12 + 16) = v96;
            result = v177;
            v97 = v210;
          }
          *v90 = result;
          v90[1] = v97;
          return result;
        }
        if (v94 < v93)
        {
          result = *v92;
          v215 = *(__n128 *)(v12 + 48);
          v141 = v90[1];
          *v92 = *v90;
          *(__n128 *)(v12 + 48) = v141;
          *v90 = result;
          v90[1] = v215;
          goto LABEL_182;
        }
        return result;
      case 4:
        v92 = (__n128 *)(v12 + 32);
        v98 = *(_QWORD *)(v12 + 32);
        v99 = (__n128 *)(v12 + 64);
        v100 = *(_QWORD *)(v12 + 64);
        if (v98 >= *(_QWORD *)v12)
        {
          if (v100 < v98)
          {
            v142 = *v92;
            result = *(__n128 *)(v12 + 48);
            v143 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v143;
            *v99 = v142;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v182 = *(__n128 *)v12;
              v216 = *(_OWORD *)(v12 + 16);
              v144 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v92;
              *(_OWORD *)(v12 + 16) = v144;
              result = v182;
              *v92 = v182;
              *(_OWORD *)(v12 + 48) = v216;
            }
          }
        }
        else if (v100 >= v98)
        {
          v185 = *(__n128 *)v12;
          v219 = *(_OWORD *)(v12 + 16);
          v151 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v92;
          *(_OWORD *)(v12 + 16) = v151;
          result = v185;
          *v92 = v185;
          *(_OWORD *)(v12 + 48) = v219;
          if (v100 < *(_QWORD *)(v12 + 32))
          {
            v152 = *v92;
            result = *(__n128 *)(v12 + 48);
            v153 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v153;
            *v99 = v152;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v178 = *(__n128 *)v12;
          v211 = *(_OWORD *)(v12 + 16);
          v101 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v99;
          *(_OWORD *)(v12 + 16) = v101;
          result = v178;
          *v99 = v178;
          *(_OWORD *)(v12 + 80) = v211;
        }
        if (v9->n128_u64[0] < v99->n128_u64[0])
        {
          result = *v99;
          v220 = *(__n128 *)(v12 + 80);
          v154 = a2[-1];
          *v99 = *v9;
          *(__n128 *)(v12 + 80) = v154;
          *v9 = result;
          a2[-1] = v220;
          if (v99->n128_u64[0] < v92->n128_u64[0])
          {
            v155 = *v92;
            result = *(__n128 *)(v12 + 48);
            v156 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v156;
            *v99 = v155;
            *(__n128 *)(v12 + 80) = result;
LABEL_182:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v186 = *(__n128 *)v12;
              v221 = *(__n128 *)(v12 + 16);
              v157 = v92[1];
              *(__n128 *)v12 = *v92;
              *(__n128 *)(v12 + 16) = v157;
              result = v186;
              *v92 = v186;
              v92[1] = v221;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_20F3DD9E4((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 == a2)
              return result;
            v113 = (unint64_t)(v14 - 2) >> 1;
            v114 = v113;
            while (1)
            {
              if (v113 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = v12 + 32 * v116;
                if (2 * v114 + 2 >= v14)
                {
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (*(_QWORD *)v117 >= *(_QWORD *)v120)
                    goto LABEL_136;
                }
                else
                {
                  v118 = *(_QWORD *)(v117 + 32);
                  v119 = *(_QWORD *)v117 >= v118;
                  if (*(_QWORD *)v117 > v118)
                    v118 = *(_QWORD *)v117;
                  if (!v119)
                  {
                    v117 += 32;
                    v116 = 2 * v114 + 2;
                  }
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (v118 >= *(_QWORD *)v120)
                  {
LABEL_136:
                    v213 = *(_QWORD *)(v120 + 24);
                    v180 = *(_OWORD *)(v120 + 8);
                    while (1)
                    {
                      v124 = (_OWORD *)v120;
                      v120 = v117;
                      v125 = *(_OWORD *)(v117 + 16);
                      *v124 = *(_OWORD *)v117;
                      v124[1] = v125;
                      if (v113 < v116)
                        break;
                      v126 = (2 * v116) | 1;
                      v117 = v12 + 32 * v126;
                      v116 = 2 * v116 + 2;
                      if (v116 < v14)
                      {
                        v122 = *(_QWORD *)v117;
                        v123 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 <= v123)
                          v122 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 >= v123)
                          v116 = v126;
                        else
                          v117 += 32;
                        if (v122 < v121)
                          break;
                      }
                      else
                      {
                        v116 = v126;
                        if (*(_QWORD *)v117 < v121)
                          break;
                      }
                    }
                    *(_QWORD *)v120 = v121;
                    *(_QWORD *)(v120 + 24) = v213;
                    *(_OWORD *)(v120 + 8) = v180;
                  }
                }
              }
              v115 = v114-- <= 0;
              if (v115)
              {
                v127 = (unint64_t)v13 >> 5;
                do
                {
                  v128 = 0;
                  v181 = *(__n128 *)v12;
                  v214 = *(__n128 *)(v12 + 16);
                  v129 = (_OWORD *)v12;
                  do
                  {
                    v131 = (uint64_t)&v129[2 * v128 + 2];
                    v132 = (2 * v128) | 1;
                    v133 = 2 * v128 + 2;
                    if (v133 < v127 && *(_QWORD *)v131 < *(_QWORD *)(v131 + 32))
                    {
                      v131 += 32;
                      v132 = v133;
                    }
                    v130 = *(_OWORD *)(v131 + 16);
                    *v129 = *(_OWORD *)v131;
                    v129[1] = v130;
                    v129 = (_OWORD *)v131;
                    v128 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                  a2 -= 2;
                  if ((__n128 *)v131 == a2)
                  {
                    result = v181;
                    *(__n128 *)v131 = v181;
                    *(__n128 *)(v131 + 16) = v214;
                  }
                  else
                  {
                    v134 = a2[1];
                    *(__n128 *)v131 = *a2;
                    *(__n128 *)(v131 + 16) = v134;
                    result = v181;
                    *a2 = v181;
                    a2[1] = v214;
                    v135 = v131 - v12 + 32;
                    if (v135 >= 33)
                    {
                      v136 = (((unint64_t)v135 >> 5) - 2) >> 1;
                      v137 = (_OWORD *)(v12 + 32 * v136);
                      v138 = *(_QWORD *)v131;
                      if (*(_QWORD *)v137 < *(_QWORD *)v131)
                      {
                        v227 = *(_QWORD *)(v131 + 24);
                        v224 = *(__n128 *)(v131 + 8);
                        do
                        {
                          v139 = (_OWORD *)v131;
                          v131 = (uint64_t)v137;
                          v140 = v137[1];
                          *v139 = *v137;
                          v139[1] = v140;
                          if (!v136)
                            break;
                          v136 = (v136 - 1) >> 1;
                          v137 = (_OWORD *)(v12 + 32 * v136);
                        }
                        while (*(_QWORD *)v137 < v138);
                        *(_QWORD *)v131 = v138;
                        result = v224;
                        *(_QWORD *)(v131 + 24) = v227;
                        *(__n128 *)(v131 + 8) = v224;
                      }
                    }
                  }
                  v115 = v127-- <= 2;
                }
                while (!v115);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 32 * ((unint64_t)v14 >> 1));
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 <= 0x1000)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= v16->n128_u64[0])
            {
              if (v17 < v20)
              {
                v162 = *(__n128 *)v12;
                v191 = *(__n128 *)(v12 + 16);
                v24 = a2[-1];
                *(__n128 *)v12 = *v9;
                *(__n128 *)(v12 + 16) = v24;
                *v9 = v162;
                a2[-1] = v191;
                if (*(_QWORD *)v12 < v16->n128_u64[0])
                {
                  v163 = *v16;
                  v192 = v16[1];
                  v25 = *(__n128 *)(v12 + 16);
                  *v16 = *(__n128 *)v12;
                  v16[1] = v25;
                  *(__n128 *)v12 = v163;
                  *(__n128 *)(v12 + 16) = v192;
                  --a3;
                  v26 = *(_QWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v166 = *v16;
              v196 = v16[1];
              v41 = *(__n128 *)(v12 + 16);
              *v16 = *(__n128 *)v12;
              v16[1] = v41;
              *(__n128 *)v12 = v166;
              *(__n128 *)(v12 + 16) = v196;
              if (v9->n128_u64[0] >= *(_QWORD *)v12)
                goto LABEL_31;
              v159 = *(__n128 *)v12;
              v188 = *(__n128 *)(v12 + 16);
              v42 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v42;
            }
            else
            {
              v159 = *v16;
              v188 = v16[1];
              v21 = a2[-1];
              *v16 = *v9;
              v16[1] = v21;
            }
            *v9 = v159;
            a2[-1] = v188;
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v160 = *v16;
              v189 = v16[1];
              v22 = a2[-1];
              *v16 = *v9;
              v16[1] = v22;
              *v9 = v160;
              a2[-1] = v189;
              if (v16->n128_u64[0] < *(_QWORD *)v12)
              {
                v161 = *(__n128 *)v12;
                v190 = *(__n128 *)(v12 + 16);
                v23 = v16[1];
                *(__n128 *)v12 = *v16;
                *(__n128 *)(v12 + 16) = v23;
                *v16 = v161;
                v16[1] = v190;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v164 = *(__n128 *)v12;
              v193 = *(__n128 *)(v12 + 16);
              v27 = v16[1];
              *(__n128 *)v12 = *v16;
              *(__n128 *)(v12 + 16) = v27;
              *v16 = v164;
              v16[1] = v193;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v158 = *v16;
              v187 = v16[1];
              v28 = a2[-1];
              *v16 = *v9;
              v16[1] = v28;
            }
            else
            {
              v158 = *(__n128 *)v12;
              v187 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
            }
            *v9 = v158;
            a2[-1] = v187;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 32);
          v30 = v12 + 32 * v15;
          v33 = *(_QWORD *)(v30 - 32);
          v31 = (__n128 *)(v30 - 32);
          v32 = v33;
          v34 = v10->n128_u64[0];
          if (v33 >= *(_QWORD *)(v12 + 32))
          {
            if (v34 < v32)
            {
              v165 = *v31;
              v194 = v31[1];
              v38 = a2[-3];
              *v31 = *v10;
              v31[1] = v38;
              *v10 = v165;
              a2[-3] = v194;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v39 = *v29;
                v195 = *(__n128 *)(v12 + 48);
                v40 = v31[1];
                *v29 = *v31;
                *(__n128 *)(v12 + 48) = v40;
                *v31 = v39;
                v31[1] = v195;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v43 = *v29;
              v197 = *(__n128 *)(v12 + 48);
              v44 = v31[1];
              *v29 = *v31;
              *(__n128 *)(v12 + 48) = v44;
              *v31 = v43;
              v31[1] = v197;
              if (v10->n128_u64[0] >= v31->n128_u64[0])
                goto LABEL_36;
              v167 = *v31;
              v198 = v31[1];
              v45 = a2[-3];
              *v31 = *v10;
              v31[1] = v45;
              v35 = v167;
              v36 = v198;
            }
            else
            {
              v35 = *v29;
              v36 = *(__n128 *)(v12 + 48);
              v37 = a2[-3];
              *v29 = *v10;
              *(__n128 *)(v12 + 48) = v37;
            }
            *v10 = v35;
            a2[-3] = v36;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 64);
          v47 = v12 + 32 * v15;
          v50 = *(_QWORD *)(v47 + 32);
          v48 = (__n128 *)(v47 + 32);
          v49 = v50;
          v51 = v11->n128_u64[0];
          if (v50 >= *(_QWORD *)(v12 + 64))
          {
            if (v51 < v49)
            {
              v168 = *v48;
              v199 = v48[1];
              v55 = a2[-5];
              *v48 = *v11;
              v48[1] = v55;
              *v11 = v168;
              a2[-5] = v199;
              if (v48->n128_u64[0] < v46->n128_u64[0])
              {
                v56 = *v46;
                v200 = *(__n128 *)(v12 + 80);
                v57 = v48[1];
                *v46 = *v48;
                *(__n128 *)(v12 + 80) = v57;
                *v48 = v56;
                v48[1] = v200;
              }
            }
          }
          else
          {
            if (v51 >= v49)
            {
              v58 = *v46;
              v201 = *(__n128 *)(v12 + 80);
              v59 = v48[1];
              *v46 = *v48;
              *(__n128 *)(v12 + 80) = v59;
              *v48 = v58;
              v48[1] = v201;
              if (v11->n128_u64[0] >= v48->n128_u64[0])
                goto LABEL_45;
              v169 = *v48;
              v202 = v48[1];
              v60 = a2[-5];
              *v48 = *v11;
              v48[1] = v60;
              v52 = v169;
              v53 = v202;
            }
            else
            {
              v52 = *v46;
              v53 = *(__n128 *)(v12 + 80);
              v54 = a2[-5];
              *v46 = *v11;
              *(__n128 *)(v12 + 80) = v54;
            }
            *v11 = v52;
            a2[-5] = v53;
          }
LABEL_45:
          v61 = v16->n128_u64[0];
          v62 = v48->n128_u64[0];
          if (v16->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v62 < v61)
            {
              v171 = *v16;
              v204 = v16[1];
              v64 = v48[1];
              *v16 = *v48;
              v16[1] = v64;
              *v48 = v171;
              v48[1] = v204;
              if (v16->n128_u64[0] < v31->n128_u64[0])
              {
                v172 = *v31;
                v205 = v31[1];
                v65 = v16[1];
                *v31 = *v16;
                v31[1] = v65;
                *v16 = v172;
                v16[1] = v205;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v173 = *v31;
              v206 = v31[1];
              v66 = v16[1];
              *v31 = *v16;
              v31[1] = v66;
              *v16 = v173;
              v16[1] = v206;
              if (v48->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v170 = *v16;
              v203 = v16[1];
              v67 = v48[1];
              *v16 = *v48;
              v16[1] = v67;
            }
            else
            {
              v170 = *v31;
              v203 = v31[1];
              v63 = v48[1];
              *v31 = *v48;
              v31[1] = v63;
            }
            *v48 = v170;
            v48[1] = v203;
          }
LABEL_54:
          v174 = *(__n128 *)v12;
          v207 = *(__n128 *)(v12 + 16);
          v68 = v16[1];
          *(__n128 *)v12 = *v16;
          *(__n128 *)(v12 + 16) = v68;
          *v16 = v174;
          v16[1] = v207;
          --a3;
          v26 = *(_QWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v12 - 32) >= v26)
          {
            v226 = *(_QWORD *)(v12 + 24);
            v223 = *(__n128 *)(v12 + 8);
            if (v26 >= v9->n128_u64[0])
            {
              v83 = v12 + 32;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v83 += 32;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v82 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v82);
            }
            v84 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v85 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v85);
            }
            while (v12 < (unint64_t)v84)
            {
              v176 = *(__n128 *)v12;
              v209 = *(__n128 *)(v12 + 16);
              v86 = v84[1];
              *(__n128 *)v12 = *v84;
              *(__n128 *)(v12 + 16) = v86;
              *v84 = v176;
              v84[1] = v209;
              do
              {
                v87 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v87);
              do
              {
                v88 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v88);
            }
            if (v12 - 32 != a1)
            {
              v89 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v89;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 32) = v26;
            result = v223;
            *(_QWORD *)(v12 - 8) = v226;
            *(__n128 *)(v12 - 24) = v223;
            continue;
          }
LABEL_56:
          v69 = 0;
          v225 = *(_QWORD *)(v12 + 24);
          v222 = *(__n128 *)(v12 + 8);
          do
          {
            v70 = *(_QWORD *)(v12 + v69 + 32);
            v69 += 32;
          }
          while (v70 < v26);
          v71 = v12 + v69;
          v72 = a2;
          if (v69 == 32)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v73 >= v26);
          }
          v12 += v69;
          if (v71 < (unint64_t)v72)
          {
            v75 = v72;
            do
            {
              v175 = *(__n128 *)v12;
              v208 = *(__n128 *)(v12 + 16);
              v76 = v75[1];
              *(__n128 *)v12 = *v75;
              *(__n128 *)(v12 + 16) = v76;
              *v75 = v175;
              v75[1] = v208;
              do
              {
                v77 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v77 < v26);
              do
              {
                v78 = v75[-2].n128_u64[0];
                v75 -= 2;
              }
              while (v78 >= v26);
            }
            while (v12 < (unint64_t)v75);
          }
          if (v12 - 32 != a1)
          {
            v79 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v79;
          }
          *(_QWORD *)(v12 - 32) = v26;
          *(_QWORD *)(v12 - 8) = v225;
          *(__n128 *)(v12 - 24) = v222;
          if (v71 < (unint64_t)v72)
            goto LABEL_75;
          v80 = sub_20F7F2214(a1, v12 - 32, v222);
          if (!sub_20F7F2214(v12, (uint64_t)a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_20F7F1610(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v80)
            return result;
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 32);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (v104)
            return result;
          v105 = 0;
          v106 = v12;
          while (1)
          {
            v108 = v102;
            v109 = *(_QWORD *)(v106 + 32);
            if (v109 < *(_QWORD *)v106)
            {
              v179 = *(__n128 *)(v106 + 40);
              v212 = *(_QWORD *)(v106 + 56);
              v110 = v105;
              do
              {
                v111 = v12 + v110;
                v112 = *(_OWORD *)(v12 + v110 + 16);
                *(_OWORD *)(v111 + 32) = *(_OWORD *)(v12 + v110);
                *(_OWORD *)(v111 + 48) = v112;
                if (!v110)
                {
                  v107 = v12;
                  goto LABEL_116;
                }
                v110 -= 32;
              }
              while (v109 < *(_QWORD *)(v111 - 32));
              v107 = v12 + v110 + 32;
LABEL_116:
              *(_QWORD *)v107 = v109;
              result = v179;
              *(_QWORD *)(v107 + 24) = v212;
              *(__n128 *)(v107 + 8) = v179;
            }
            v102 = v108 + 2;
            v105 += 32;
            v106 = (unint64_t)v108;
            if (&v108[2] == a2)
              return result;
          }
        }
        if (!v104)
        {
          do
          {
            v145 = (uint64_t)v102;
            v146 = *(_QWORD *)(a1 + 32);
            if (v146 < *(_QWORD *)a1)
            {
              v183 = *(__n128 *)(a1 + 40);
              v217 = *(_QWORD *)(a1 + 56);
              do
              {
                v147 = v102[-1];
                *v102 = v102[-2];
                v102[1] = v147;
                v148 = v102[-4].n128_u64[0];
                v102 -= 2;
              }
              while (v146 < v148);
              v102->n128_u64[0] = v146;
              result = v183;
              v102[1].n128_u64[1] = v217;
              *(__n128 *)((char *)v102 + 8) = v183;
            }
            v102 = (__n128 *)(v145 + 32);
            a1 = v145;
          }
          while ((__n128 *)(v145 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v91 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        if (v91 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v92 = (__n128 *)(v12 + 32);
        v93 = *(_QWORD *)(v12 + 32);
        v95 = a2[-2].n128_u64[0];
        v90 = a2 - 2;
        v94 = v95;
        if (v93 < *(_QWORD *)v12)
        {
          if (v94 >= v93)
          {
            v184 = *(__n128 *)v12;
            v218 = *(_OWORD *)(v12 + 16);
            v149 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v92;
            *(_OWORD *)(v12 + 16) = v149;
            result = v184;
            *v92 = v184;
            *(_OWORD *)(v12 + 48) = v218;
            if (v90->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v92;
            v97 = *(__n128 *)(v12 + 48);
            v150 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v150;
          }
          else
          {
LABEL_100:
            v177 = *(__n128 *)v12;
            v210 = *(__n128 *)(v12 + 16);
            v96 = v90[1];
            *(__n128 *)v12 = *v90;
            *(__n128 *)(v12 + 16) = v96;
            result = v177;
            v97 = v210;
          }
          *v90 = result;
          v90[1] = v97;
          return result;
        }
        if (v94 < v93)
        {
          result = *v92;
          v215 = *(__n128 *)(v12 + 48);
          v141 = v90[1];
          *v92 = *v90;
          *(__n128 *)(v12 + 48) = v141;
          *v90 = result;
          v90[1] = v215;
          goto LABEL_182;
        }
        return result;
      case 4:
        v92 = (__n128 *)(v12 + 32);
        v98 = *(_QWORD *)(v12 + 32);
        v99 = (__n128 *)(v12 + 64);
        v100 = *(_QWORD *)(v12 + 64);
        if (v98 >= *(_QWORD *)v12)
        {
          if (v100 < v98)
          {
            v142 = *v92;
            result = *(__n128 *)(v12 + 48);
            v143 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v143;
            *v99 = v142;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v182 = *(__n128 *)v12;
              v216 = *(_OWORD *)(v12 + 16);
              v144 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v92;
              *(_OWORD *)(v12 + 16) = v144;
              result = v182;
              *v92 = v182;
              *(_OWORD *)(v12 + 48) = v216;
            }
          }
        }
        else if (v100 >= v98)
        {
          v185 = *(__n128 *)v12;
          v219 = *(_OWORD *)(v12 + 16);
          v151 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v92;
          *(_OWORD *)(v12 + 16) = v151;
          result = v185;
          *v92 = v185;
          *(_OWORD *)(v12 + 48) = v219;
          if (v100 < *(_QWORD *)(v12 + 32))
          {
            v152 = *v92;
            result = *(__n128 *)(v12 + 48);
            v153 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v153;
            *v99 = v152;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v178 = *(__n128 *)v12;
          v211 = *(_OWORD *)(v12 + 16);
          v101 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v99;
          *(_OWORD *)(v12 + 16) = v101;
          result = v178;
          *v99 = v178;
          *(_OWORD *)(v12 + 80) = v211;
        }
        if (v9->n128_u64[0] < v99->n128_u64[0])
        {
          result = *v99;
          v220 = *(__n128 *)(v12 + 80);
          v154 = a2[-1];
          *v99 = *v9;
          *(__n128 *)(v12 + 80) = v154;
          *v9 = result;
          a2[-1] = v220;
          if (v99->n128_u64[0] < v92->n128_u64[0])
          {
            v155 = *v92;
            result = *(__n128 *)(v12 + 48);
            v156 = *(_OWORD *)(v12 + 80);
            *v92 = *v99;
            *(_OWORD *)(v12 + 48) = v156;
            *v99 = v155;
            *(__n128 *)(v12 + 80) = result;
LABEL_182:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v186 = *(__n128 *)v12;
              v221 = *(__n128 *)(v12 + 16);
              v157 = v92[1];
              *(__n128 *)v12 = *v92;
              *(__n128 *)(v12 + 16) = v157;
              result = v186;
              *v92 = v186;
              v92[1] = v221;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_20F3DD9E4((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 == a2)
              return result;
            v113 = (unint64_t)(v14 - 2) >> 1;
            v114 = v113;
            while (1)
            {
              if (v113 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = v12 + 32 * v116;
                if (2 * v114 + 2 >= v14)
                {
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (*(_QWORD *)v117 >= *(_QWORD *)v120)
                    goto LABEL_136;
                }
                else
                {
                  v118 = *(_QWORD *)(v117 + 32);
                  v119 = *(_QWORD *)v117 >= v118;
                  if (*(_QWORD *)v117 > v118)
                    v118 = *(_QWORD *)v117;
                  if (!v119)
                  {
                    v117 += 32;
                    v116 = 2 * v114 + 2;
                  }
                  v120 = v12 + 32 * v114;
                  v121 = *(_QWORD *)v120;
                  if (v118 >= *(_QWORD *)v120)
                  {
LABEL_136:
                    v213 = *(_QWORD *)(v120 + 24);
                    v180 = *(_OWORD *)(v120 + 8);
                    while (1)
                    {
                      v124 = (_OWORD *)v120;
                      v120 = v117;
                      v125 = *(_OWORD *)(v117 + 16);
                      *v124 = *(_OWORD *)v117;
                      v124[1] = v125;
                      if (v113 < v116)
                        break;
                      v126 = (2 * v116) | 1;
                      v117 = v12 + 32 * v126;
                      v116 = 2 * v116 + 2;
                      if (v116 < v14)
                      {
                        v122 = *(_QWORD *)v117;
                        v123 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 <= v123)
                          v122 = *(_QWORD *)(v117 + 32);
                        if (*(_QWORD *)v117 >= v123)
                          v116 = v126;
                        else
                          v117 += 32;
                        if (v122 < v121)
                          break;
                      }
                      else
                      {
                        v116 = v126;
                        if (*(_QWORD *)v117 < v121)
                          break;
                      }
                    }
                    *(_QWORD *)v120 = v121;
                    *(_QWORD *)(v120 + 24) = v213;
                    *(_OWORD *)(v120 + 8) = v180;
                  }
                }
              }
              v115 = v114-- <= 0;
              if (v115)
              {
                v127 = (unint64_t)v13 >> 5;
                do
                {
                  v128 = 0;
                  v181 = *(__n128 *)v12;
                  v214 = *(__n128 *)(v12 + 16);
                  v129 = (_OWORD *)v12;
                  do
                  {
                    v131 = (uint64_t)&v129[2 * v128 + 2];
                    v132 = (2 * v128) | 1;
                    v133 = 2 * v128 + 2;
                    if (v133 < v127 && *(_QWORD *)v131 < *(_QWORD *)(v131 + 32))
                    {
                      v131 += 32;
                      v132 = v133;
                    }
                    v130 = *(_OWORD *)(v131 + 16);
                    *v129 = *(_OWORD *)v131;
                    v129[1] = v130;
                    v129 = (_OWORD *)v131;
                    v128 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                  a2 -= 2;
                  if ((__n128 *)v131 == a2)
                  {
                    result = v181;
                    *(__n128 *)v131 = v181;
                    *(__n128 *)(v131 + 16) = v214;
                  }
                  else
                  {
                    v134 = a2[1];
                    *(__n128 *)v131 = *a2;
                    *(__n128 *)(v131 + 16) = v134;
                    result = v181;
                    *a2 = v181;
                    a2[1] = v214;
                    v135 = v131 - v12 + 32;
                    if (v135 >= 33)
                    {
                      v136 = (((unint64_t)v135 >> 5) - 2) >> 1;
                      v137 = (_OWORD *)(v12 + 32 * v136);
                      v138 = *(_QWORD *)v131;
                      if (*(_QWORD *)v137 < *(_QWORD *)v131)
                      {
                        v227 = *(_QWORD *)(v131 + 24);
                        v224 = *(__n128 *)(v131 + 8);
                        do
                        {
                          v139 = (_OWORD *)v131;
                          v131 = (uint64_t)v137;
                          v140 = v137[1];
                          *v139 = *v137;
                          v139[1] = v140;
                          if (!v136)
                            break;
                          v136 = (v136 - 1) >> 1;
                          v137 = (_OWORD *)(v12 + 32 * v136);
                        }
                        while (*(_QWORD *)v137 < v138);
                        *(_QWORD *)v131 = v138;
                        result = v224;
                        *(_QWORD *)(v131 + 24) = v227;
                        *(__n128 *)(v131 + 8) = v224;
                      }
                    }
                  }
                  v115 = v127-- <= 2;
                }
                while (!v115);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 32 * ((unint64_t)v14 >> 1));
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 <= 0x1000)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= v16->n128_u64[0])
            {
              if (v17 < v20)
              {
                v162 = *(__n128 *)v12;
                v191 = *(__n128 *)(v12 + 16);
                v24 = a2[-1];
                *(__n128 *)v12 = *v9;
                *(__n128 *)(v12 + 16) = v24;
                *v9 = v162;
                a2[-1] = v191;
                if (*(_QWORD *)v12 < v16->n128_u64[0])
                {
                  v163 = *v16;
                  v192 = v16[1];
                  v25 = *(__n128 *)(v12 + 16);
                  *v16 = *(__n128 *)v12;
                  v16[1] = v25;
                  *(__n128 *)v12 = v163;
                  *(__n128 *)(v12 + 16) = v192;
                  --a3;
                  v26 = *(_QWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v166 = *v16;
              v196 = v16[1];
              v41 = *(__n128 *)(v12 + 16);
              *v16 = *(__n128 *)v12;
              v16[1] = v41;
              *(__n128 *)v12 = v166;
              *(__n128 *)(v12 + 16) = v196;
              if (v9->n128_u64[0] >= *(_QWORD *)v12)
                goto LABEL_31;
              v159 = *(__n128 *)v12;
              v188 = *(__n128 *)(v12 + 16);
              v42 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v42;
            }
            else
            {
              v159 = *v16;
              v188 = v16[1];
              v21 = a2[-1];
              *v16 = *v9;
              v16[1] = v21;
            }
            *v9 = v159;
            a2[-1] = v188;
LABEL_31:
            --a3;
            v26 = *(_QWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v160 = *v16;
              v189 = v16[1];
              v22 = a2[-1];
              *v16 = *v9;
              v16[1] = v22;
              *v9 = v160;
              a2[-1] = v189;
              if (v16->n128_u64[0] < *(_QWORD *)v12)
              {
                v161 = *(__n128 *)v12;
                v190 = *(__n128 *)(v12 + 16);
                v23 = v16[1];
                *(__n128 *)v12 = *v16;
                *(__n128 *)(v12 + 16) = v23;
                *v16 = v161;
                v16[1] = v190;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v164 = *(__n128 *)v12;
              v193 = *(__n128 *)(v12 + 16);
              v27 = v16[1];
              *(__n128 *)v12 = *v16;
              *(__n128 *)(v12 + 16) = v27;
              *v16 = v164;
              v16[1] = v193;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v158 = *v16;
              v187 = v16[1];
              v28 = a2[-1];
              *v16 = *v9;
              v16[1] = v28;
            }
            else
            {
              v158 = *(__n128 *)v12;
              v187 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
            }
            *v9 = v158;
            a2[-1] = v187;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 32);
          v30 = v12 + 32 * v15;
          v33 = *(_QWORD *)(v30 - 32);
          v31 = (__n128 *)(v30 - 32);
          v32 = v33;
          v34 = v10->n128_u64[0];
          if (v33 >= *(_QWORD *)(v12 + 32))
          {
            if (v34 < v32)
            {
              v165 = *v31;
              v194 = v31[1];
              v38 = a2[-3];
              *v31 = *v10;
              v31[1] = v38;
              *v10 = v165;
              a2[-3] = v194;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v39 = *v29;
                v195 = *(__n128 *)(v12 + 48);
                v40 = v31[1];
                *v29 = *v31;
                *(__n128 *)(v12 + 48) = v40;
                *v31 = v39;
                v31[1] = v195;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v43 = *v29;
              v197 = *(__n128 *)(v12 + 48);
              v44 = v31[1];
              *v29 = *v31;
              *(__n128 *)(v12 + 48) = v44;
              *v31 = v43;
              v31[1] = v197;
              if (v10->n128_u64[0] >= v31->n128_u64[0])
                goto LABEL_36;
              v167 = *v31;
              v198 = v31[1];
              v45 = a2[-3];
              *v31 = *v10;
              v31[1] = v45;
              v35 = v167;
              v36 = v198;
            }
            else
            {
              v35 = *v29;
              v36 = *(__n128 *)(v12 + 48);
              v37 = a2[-3];
              *v29 = *v10;
              *(__n128 *)(v12 + 48) = v37;
            }
            *v10 = v35;
            a2[-3] = v36;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 64);
          v47 = v12 + 32 * v15;
          v50 = *(_QWORD *)(v47 + 32);
          v48 = (__n128 *)(v47 + 32);
          v49 = v50;
          v51 = v11->n128_u64[0];
          if (v50 >= *(_QWORD *)(v12 + 64))
          {
            if (v51 < v49)
            {
              v168 = *v48;
              v199 = v48[1];
              v55 = a2[-5];
              *v48 = *v11;
              v48[1] = v55;
              *v11 = v168;
              a2[-5] = v199;
              if (v48->n128_u64[0] < v46->n128_u64[0])
              {
                v56 = *v46;
                v200 = *(__n128 *)(v12 + 80);
                v57 = v48[1];
                *v46 = *v48;
                *(__n128 *)(v12 + 80) = v57;
                *v48 = v56;
                v48[1] = v200;
              }
            }
          }
          else
          {
            if (v51 >= v49)
            {
              v58 = *v46;
              v201 = *(__n128 *)(v12 + 80);
              v59 = v48[1];
              *v46 = *v48;
              *(__n128 *)(v12 + 80) = v59;
              *v48 = v58;
              v48[1] = v201;
              if (v11->n128_u64[0] >= v48->n128_u64[0])
                goto LABEL_45;
              v169 = *v48;
              v202 = v48[1];
              v60 = a2[-5];
              *v48 = *v11;
              v48[1] = v60;
              v52 = v169;
              v53 = v202;
            }
            else
            {
              v52 = *v46;
              v53 = *(__n128 *)(v12 + 80);
              v54 = a2[-5];
              *v46 = *v11;
              *(__n128 *)(v12 + 80) = v54;
            }
            *v11 = v52;
            a2[-5] = v53;
          }
LABEL_45:
          v61 = v16->n128_u64[0];
          v62 = v48->n128_u64[0];
          if (v16->n128_u64[0] >= v31->n128_u64[0])
          {
            if (v62 < v61)
            {
              v171 = *v16;
              v204 = v16[1];
              v64 = v48[1];
              *v16 = *v48;
              v16[1] = v64;
              *v48 = v171;
              v48[1] = v204;
              if (v16->n128_u64[0] < v31->n128_u64[0])
              {
                v172 = *v31;
                v205 = v31[1];
                v65 = v16[1];
                *v31 = *v16;
                v31[1] = v65;
                *v16 = v172;
                v16[1] = v205;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v173 = *v31;
              v206 = v31[1];
              v66 = v16[1];
              *v31 = *v16;
              v31[1] = v66;
              *v16 = v173;
              v16[1] = v206;
              if (v48->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v170 = *v16;
              v203 = v16[1];
              v67 = v48[1];
              *v16 = *v48;
              v16[1] = v67;
            }
            else
            {
              v170 = *v31;
              v203 = v31[1];
              v63 = v48[1];
              *v31 = *v48;
              v31[1] = v63;
            }
            *v48 = v170;
            v48[1] = v203;
          }
LABEL_54:
          v174 = *(__n128 *)v12;
          v207 = *(__n128 *)(v12 + 16);
          v68 = v16[1];
          *(__n128 *)v12 = *v16;
          *(__n128 *)(v12 + 16) = v68;
          *v16 = v174;
          v16[1] = v207;
          --a3;
          v26 = *(_QWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(v12 - 32) >= v26)
          {
            v226 = *(_QWORD *)(v12 + 24);
            v223 = *(__n128 *)(v12 + 8);
            if (v26 >= v9->n128_u64[0])
            {
              v83 = v12 + 32;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v83 += 32;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v82 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v82);
            }
            v84 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v85 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v85);
            }
            while (v12 < (unint64_t)v84)
            {
              v176 = *(__n128 *)v12;
              v209 = *(__n128 *)(v12 + 16);
              v86 = v84[1];
              *(__n128 *)v12 = *v84;
              *(__n128 *)(v12 + 16) = v86;
              *v84 = v176;
              v84[1] = v209;
              do
              {
                v87 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v87);
              do
              {
                v88 = v84[-2].n128_u64[0];
                v84 -= 2;
              }
              while (v26 < v88);
            }
            if (v12 - 32 != a1)
            {
              v89 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v89;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 32) = v26;
            result = v223;
            *(_QWORD *)(v12 - 8) = v226;
            *(__n128 *)(v12 - 24) = v223;
            continue;
          }
LABEL_56:
          v69 = 0;
          v225 = *(_QWORD *)(v12 + 24);
          v222 = *(__n128 *)(v12 + 8);
          do
          {
            v70 = *(_QWORD *)(v12 + v69 + 32);
            v69 += 32;
          }
          while (v70 < v26);
          v71 = v12 + v69;
          v72 = a2;
          if (v69 == 32)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = v72[-2].n128_u64[0];
              v72 -= 2;
            }
            while (v73 >= v26);
          }
          v12 += v69;
          if (v71 < (unint64_t)v72)
          {
            v75 = v72;
            do
            {
              v175 = *(__n128 *)v12;
              v208 = *(__n128 *)(v12 + 16);
              v76 = v75[1];
              *(__n128 *)v12 = *v75;
              *(__n128 *)(v12 + 16) = v76;
              *v75 = v175;
              v75[1] = v208;
              do
              {
                v77 = *(_QWORD *)(v12 + 32);
                v12 += 32;
              }
              while (v77 < v26);
              do
              {
                v78 = v75[-2].n128_u64[0];
                v75 -= 2;
              }
              while (v78 >= v26);
            }
            while (v12 < (unint64_t)v75);
          }
          if (v12 - 32 != a1)
          {
            v79 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v79;
          }
          *(_QWORD *)(v12 - 32) = v26;
          *(_QWORD *)(v12 - 8) = v225;
          *(__n128 *)(v12 - 24) = v222;
          if (v71 < (unint64_t)v72)
            goto LABEL_75;
          v80 = sub_20F7F31D8(a1, v12 - 32, v222);
          if (!sub_20F7F31D8(v12, (uint64_t)a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_20F7F25D4(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v80)
            return result;
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 32);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (v104)
            return result;
          v105 = 0;
          v106 = v12;
          while (1)
          {
            v108 = v102;
            v109 = *(_QWORD *)(v106 + 32);
            if (v109 < *(_QWORD *)v106)
            {
              v179 = *(__n128 *)(v106 + 40);
              v212 = *(_QWORD *)(v106 + 56);
              v110 = v105;
              do
              {
                v111 = v12 + v110;
                v112 = *(_OWORD *)(v12 + v110 + 16);
                *(_OWORD *)(v111 + 32) = *(_OWORD *)(v12 + v110);
                *(_OWORD *)(v111 + 48) = v112;
                if (!v110)
                {
                  v107 = v12;
                  goto LABEL_116;
                }
                v110 -= 32;
              }
              while (v109 < *(_QWORD *)(v111 - 32));
              v107 = v12 + v110 + 32;
LABEL_116:
              *(_QWORD *)v107 = v109;
              result = v179;
              *(_QWORD *)(v107 + 24) = v212;
              *(__n128 *)(v107 + 8) = v179;
            }
            v102 = v108 + 2;
            v105 += 32;
            v106 = (unint64_t)v108;
            if (&v108[2] == a2)
              return result;
          }
        }
        if (!v104)
        {
          do
          {
            v145 = (uint64_t)v102;
            v146 = *(_QWORD *)(a1 + 32);
            if (v146 < *(_QWORD *)a1)
            {
              v183 = *(__n128 *)(a1 + 40);
              v217 = *(_QWORD *)(a1 + 56);
              do
              {
                v147 = v102[-1];
                *v102 = v102[-2];
                v102[1] = v147;
                v148 = v102[-4].n128_u64[0];
                v102 -= 2;
              }
              while (v146 < v148);
              v102->n128_u64[0] = v146;
              result = v183;
              v102[1].n128_u64[1] = v217;
              *(__n128 *)((char *)v102 + 8) = v183;
            }
            v102 = (__n128 *)(v145 + 32);
            a1 = v145;
          }
          while ((__n128 *)(v145 + 32) != a2);
        }
        return result;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        v172 = a2[-2].n128_u32[0];
        v173 = a2[-2].n128_u32[1];
        v174 = a2 - 2;
        v175 = v173 < *(_DWORD *)(v12 + 4);
        v179 = v172 == *(_DWORD *)v12;
        v176 = v172 < *(_DWORD *)v12;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v279 = *(__n128 *)v12;
          v310 = *(__n128 *)(v12 + 16);
          v177 = v174[1];
          *(__n128 *)v12 = *v174;
          *(__n128 *)(v12 + 16) = v177;
          a5.n128_u64[0] = v279.n128_u64[0];
          *v174 = v279;
          v174[1] = v310;
        }
        return a5.n128_f64[0];
      case 3:
        v162 = (__n128 *)(v12 + 32);
        v163 = *(_DWORD *)(v12 + 32);
        v164 = *(_DWORD *)(v12 + 36);
        v165 = v163 < *(_DWORD *)v12;
        if (v163 == *(_DWORD *)v12)
          v165 = v164 < *(_DWORD *)(v12 + 4);
        v167 = a2[-2].n128_u32[0];
        v166 = a2 - 2;
        v168 = a2[-2].n128_u32[1] < v164;
        v179 = v167 == v163;
        v169 = v167 < v163;
        if (v179)
          v169 = v168;
        if (v165)
        {
          if (v169)
          {
            v278 = *(__n128 *)v12;
            v309 = *(__n128 *)(v12 + 16);
            v170 = a2[-1];
            *(__n128 *)v12 = *v166;
            *(__n128 *)(v12 + 16) = v170;
            a5 = v278;
            v171 = v309;
LABEL_264:
            *v166 = a5;
            a2[-1] = v171;
            return a5.n128_f64[0];
          }
          v285 = *(__n128 *)v12;
          v317 = *(_OWORD *)(v12 + 16);
          v247 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v162;
          *(_OWORD *)(v12 + 16) = v247;
          a5.n128_u64[0] = v285.n128_u64[0];
          *v162 = v285;
          *(_OWORD *)(v12 + 48) = v317;
          v248 = a2[-2].n128_u32[0];
          v249 = *(_DWORD *)(v12 + 32);
          v179 = v248 == v249;
          v250 = v248 < v249;
          if (v179)
            v250 = a2[-2].n128_u32[1] < *(_DWORD *)(v12 + 36);
          if (v250)
          {
            a5 = *v162;
            v171 = *(__n128 *)(v12 + 48);
            v251 = a2[-1];
            *v162 = *v166;
            *(__n128 *)(v12 + 48) = v251;
            goto LABEL_264;
          }
        }
        else if (v169)
        {
          a5 = *v162;
          v314 = *(__n128 *)(v12 + 48);
          v233 = a2[-1];
          *v162 = *v166;
          *(__n128 *)(v12 + 48) = v233;
          *v166 = a5;
          a2[-1] = v314;
          v234 = *(_DWORD *)(v12 + 32);
          v179 = v234 == *(_DWORD *)v12;
          v235 = v234 < *(_DWORD *)v12;
          if (v179)
            v235 = *(_DWORD *)(v12 + 36) < *(_DWORD *)(v12 + 4);
          if (v235)
          {
            v283 = *(__n128 *)v12;
            v315 = *(_OWORD *)(v12 + 16);
            v236 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v162;
            *(_OWORD *)(v12 + 16) = v236;
            a5.n128_u64[0] = v283.n128_u64[0];
            *v162 = v283;
            *(_OWORD *)(v12 + 48) = v315;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = sub_20F9BD9CC((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), a2 - 2, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        a5.n128_u64[0] = sub_20F9BDB58((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, a5).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v194 = (unint64_t)(v14 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = v12 + 32 * v197;
                  if (2 * v196 + 2 >= v14)
                  {
                    v199 = *(_DWORD *)v198;
                  }
                  else
                  {
                    v199 = *(_DWORD *)(v198 + 32);
                    v200 = *(_DWORD *)(v198 + 4) < *(_DWORD *)(v198 + 36);
                    if (*(_DWORD *)v198 != v199)
                      v200 = *(_DWORD *)v198 < v199;
                    if (v200)
                    {
                      v198 += 32;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *(_DWORD *)v198;
                    }
                  }
                  v201 = v12 + 32 * v196;
                  v202 = *(_DWORD *)v201;
                  v203 = *(_DWORD *)(v201 + 4);
                  v179 = v199 == *(_DWORD *)v201;
                  v204 = v199 < *(_DWORD *)v201;
                  if (v179)
                    v204 = *(_DWORD *)(v198 + 4) < v203;
                  if (!v204)
                  {
                    v312 = *(_QWORD *)(v201 + 24);
                    v281 = *(_OWORD *)(v201 + 8);
                    do
                    {
                      v210 = (_OWORD *)v201;
                      v201 = v198;
                      v211 = *(_OWORD *)(v198 + 16);
                      *v210 = *(_OWORD *)v198;
                      v210[1] = v211;
                      if (v194 < v197)
                        break;
                      v212 = (2 * v197) | 1;
                      v198 = v12 + 32 * v212;
                      v197 = 2 * v197 + 2;
                      if (v197 < v14)
                      {
                        v205 = *(_DWORD *)v198;
                        v206 = *(_DWORD *)(v198 + 32);
                        v207 = *(_DWORD *)(v198 + 4) < *(_DWORD *)(v198 + 36);
                        if (*(_DWORD *)v198 != v206)
                          v207 = *(_DWORD *)v198 < v206;
                        if (v207)
                        {
                          v205 = *(_DWORD *)(v198 + 32);
                          v198 += 32;
                        }
                        else
                        {
                          v197 = v212;
                        }
                      }
                      else
                      {
                        v205 = *(_DWORD *)v198;
                        v197 = v212;
                      }
                      v208 = *(_DWORD *)(v198 + 4) < v203;
                      v179 = v205 == v202;
                      v209 = v205 < v202;
                      if (!v179)
                        v208 = v209;
                    }
                    while (!v208);
                    *(_DWORD *)v201 = v202;
                    *(_DWORD *)(v201 + 4) = v203;
                    *(_QWORD *)(v201 + 24) = v312;
                    *(_OWORD *)(v201 + 8) = v281;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v213 = (unint64_t)v13 >> 5;
              do
              {
                v215 = 0;
                v282 = *(__n128 *)v12;
                v313 = *(__n128 *)(v12 + 16);
                v216 = (_OWORD *)v12;
                do
                {
                  v218 = (uint64_t)&v216[2 * v215 + 2];
                  v219 = (2 * v215) | 1;
                  v220 = 2 * v215 + 2;
                  if (v220 < v213)
                  {
                    v221 = *(_DWORD *)(v218 + 32);
                    v222 = *(_DWORD *)v218 < v221;
                    if (*(_DWORD *)v218 == v221)
                      v222 = *(_DWORD *)(v218 + 4) < *(_DWORD *)(v218 + 36);
                    if (v222)
                    {
                      v218 += 32;
                      v219 = v220;
                    }
                  }
                  v217 = *(_OWORD *)(v218 + 16);
                  *v216 = *(_OWORD *)v218;
                  v216[1] = v217;
                  v216 = (_OWORD *)v218;
                  v215 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v213 - 2) >> 1));
                a2 -= 2;
                if ((__n128 *)v218 == a2)
                {
                  a5.n128_u64[0] = v282.n128_u64[0];
                  *(__n128 *)v218 = v282;
                  *(__n128 *)(v218 + 16) = v313;
                }
                else
                {
                  v223 = a2[1];
                  *(__n128 *)v218 = *a2;
                  *(__n128 *)(v218 + 16) = v223;
                  a5.n128_u64[0] = v282.n128_u64[0];
                  *a2 = v282;
                  a2[1] = v313;
                  v224 = v218 - v12 + 32;
                  if (v224 >= 33)
                  {
                    v225 = (((unint64_t)v224 >> 5) - 2) >> 1;
                    v226 = v12 + 32 * v225;
                    v227 = *(_DWORD *)v218;
                    v228 = *(_DWORD *)(v218 + 4);
                    v229 = *(_DWORD *)v226 < *(_DWORD *)v218;
                    if (*(_DWORD *)v226 == *(_DWORD *)v218)
                      v229 = *(_DWORD *)(v226 + 4) < v228;
                    if (v229)
                    {
                      v258 = *(_QWORD *)(v218 + 24);
                      v255 = *(_OWORD *)(v218 + 8);
                      do
                      {
                        v230 = (_OWORD *)v218;
                        v218 = v226;
                        v231 = *(_OWORD *)(v226 + 16);
                        *v230 = *(_OWORD *)v226;
                        v230[1] = v231;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = v12 + 32 * v225;
                        v232 = *(_DWORD *)v226 < v227;
                        if (*(_DWORD *)v226 == v227)
                          v232 = *(_DWORD *)(v226 + 4) < v228;
                      }
                      while (v232);
                      *(_DWORD *)v218 = v227;
                      *(_DWORD *)(v218 + 4) = v228;
                      a5.n128_u64[0] = v255;
                      *(_QWORD *)(v218 + 24) = v258;
                      *(_OWORD *)(v218 + 8) = v255;
                    }
                  }
                }
              }
              while (v213-- > 2);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 32 * ((unint64_t)v14 >> 1);
          v17 = a2[-2].n128_u32[0];
          v18 = a2[-2].n128_u32[1];
          if ((unint64_t)v13 <= 0x1000)
          {
            v25 = *(_DWORD *)v12;
            v26 = *(_DWORD *)(v12 + 4);
            v27 = *(_DWORD *)v12 < *(_DWORD *)v16;
            if (*(_DWORD *)v12 == *(_DWORD *)v16)
              v27 = v26 < *(_DWORD *)(v16 + 4);
            v28 = v18 < v26;
            v179 = v17 == v25;
            v29 = v17 < v25;
            if (v179)
              v29 = v28;
            if (v27)
            {
              if (v29)
              {
                v260 = *(__n128 *)v16;
                v287 = *(__n128 *)(v16 + 16);
                v30 = a2[-1];
                *(__n128 *)v16 = *v9;
                *(__n128 *)(v16 + 16) = v30;
LABEL_52:
                *v9 = v260;
                a2[-1] = v287;
                goto LABEL_53;
              }
              v267 = *(__n128 *)v16;
              v295 = *(_OWORD *)(v16 + 16);
              v61 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v61;
              *(__n128 *)v12 = v267;
              *(_OWORD *)(v12 + 16) = v295;
              v62 = a2[-2].n128_u32[0];
              v179 = v62 == *(_DWORD *)v12;
              v63 = v62 < *(_DWORD *)v12;
              if (v179)
                v63 = a2[-2].n128_u32[1] < *(_DWORD *)(v12 + 4);
              if (v63)
              {
                v260 = *(__n128 *)v12;
                v287 = *(__n128 *)(v12 + 16);
                v64 = a2[-1];
                *(__n128 *)v12 = *v9;
                *(__n128 *)(v12 + 16) = v64;
                goto LABEL_52;
              }
            }
            else if (v29)
            {
              v263 = *(__n128 *)v12;
              v290 = *(__n128 *)(v12 + 16);
              v34 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v34;
              *v9 = v263;
              a2[-1] = v290;
              v35 = *(_DWORD *)v12 < *(_DWORD *)v16;
              if (*(_DWORD *)v12 == *(_DWORD *)v16)
                v35 = *(_DWORD *)(v12 + 4) < *(_DWORD *)(v16 + 4);
              if (v35)
              {
                v264 = *(__n128 *)v16;
                v291 = *(_OWORD *)(v16 + 16);
                v36 = *(_OWORD *)(v12 + 16);
                *(_OWORD *)v16 = *(_OWORD *)v12;
                *(_OWORD *)(v16 + 16) = v36;
                *(__n128 *)v12 = v264;
                *(_OWORD *)(v12 + 16) = v291;
                --a3;
                v37 = *(_DWORD *)v12;
                if ((a4 & 1) != 0)
                  goto LABEL_54;
                goto LABEL_95;
              }
            }
LABEL_53:
            --a3;
            v37 = *(_DWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_54;
LABEL_95:
            v108 = *(_DWORD *)(v12 - 32);
            v65 = *(_DWORD *)(v12 + 4);
            v179 = v108 == v37;
            v109 = v108 < v37;
            if (v179)
              v109 = *(_DWORD *)(v12 - 28) < v65;
            if (v109)
              goto LABEL_98;
            v257 = *(_QWORD *)(v12 + 24);
            v254 = *(__n128 *)(v12 + 8);
            v137 = a2[-2].n128_u32[0];
            v179 = v37 == v137;
            v138 = v37 < v137;
            if (v179)
              v138 = v65 < a2[-2].n128_u32[1];
            if (v138)
            {
              do
              {
                v139 = *(_DWORD *)(v12 + 32);
                v140 = *(_DWORD *)(v12 + 36);
                v12 += 32;
                v141 = v65 < v140;
                v179 = v37 == v139;
                v142 = v37 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = (__n128 *)(v12 + 32);
              do
              {
                v12 = (unint64_t)v143;
                if (v143 >= a2)
                  break;
                v144 = v143->n128_u32[0];
                v145 = v65 < *(_DWORD *)(v12 + 4);
                v179 = v37 == v144;
                v146 = v37 < v144;
                if (!v179)
                  v145 = v146;
                v143 = (__n128 *)(v12 + 32);
              }
              while (!v145);
            }
            v147 = a2;
            if (v12 < (unint64_t)a2)
            {
              v147 = a2;
              do
              {
                v148 = v147[-2].n128_u32[0];
                v149 = v147[-2].n128_u32[1];
                v147 -= 2;
                v150 = v65 < v149;
                v179 = v37 == v148;
                v151 = v37 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            while (v12 < (unint64_t)v147)
            {
              v277 = *(__n128 *)v12;
              v308 = *(__n128 *)(v12 + 16);
              v152 = v147[1];
              *(__n128 *)v12 = *v147;
              *(__n128 *)(v12 + 16) = v152;
              *v147 = v277;
              v147[1] = v308;
              do
              {
                v153 = *(_DWORD *)(v12 + 32);
                v154 = *(_DWORD *)(v12 + 36);
                v12 += 32;
                v155 = v65 < v154;
                v179 = v37 == v153;
                v156 = v37 < v153;
                if (v179)
                  v156 = v155;
              }
              while (!v156);
              do
              {
                v157 = v147[-2].n128_u32[0];
                v158 = v147[-2].n128_u32[1];
                v147 -= 2;
                v159 = v65 < v158;
                v179 = v37 == v157;
                v160 = v37 < v157;
                if (v179)
                  v160 = v159;
              }
              while (v160);
            }
            if (v12 - 32 != a1)
            {
              v161 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v161;
            }
            a4 = 0;
            *(_DWORD *)(v12 - 32) = v37;
            *(_DWORD *)(v12 - 28) = v65;
            a5 = v254;
            *(_QWORD *)(v12 - 8) = v257;
            *(__n128 *)(v12 - 24) = v254;
            continue;
          }
          v19 = *(_DWORD *)v16;
          v20 = *(_DWORD *)(v16 + 4);
          v21 = *(_DWORD *)v16 < *(_DWORD *)v12;
          if (*(_DWORD *)v16 == *(_DWORD *)v12)
            v21 = v20 < *(_DWORD *)(v12 + 4);
          v22 = v18 < v20;
          v179 = v17 == v19;
          v23 = v17 < v19;
          if (v179)
            v23 = v22;
          if (v21)
          {
            if (v23)
            {
              v259 = *(__n128 *)v12;
              v286 = *(__n128 *)(v12 + 16);
              v24 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v24;
LABEL_35:
              *v9 = v259;
              a2[-1] = v286;
              goto LABEL_36;
            }
            v265 = *(__n128 *)v12;
            v292 = *(_OWORD *)(v12 + 16);
            v38 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v38;
            *(__n128 *)v16 = v265;
            *(_OWORD *)(v16 + 16) = v292;
            v39 = a2[-2].n128_u32[0];
            v179 = v39 == *(_DWORD *)v16;
            v40 = v39 < *(_DWORD *)v16;
            if (v179)
              v40 = a2[-2].n128_u32[1] < *(_DWORD *)(v16 + 4);
            if (v40)
            {
              v259 = *(__n128 *)v16;
              v286 = *(__n128 *)(v16 + 16);
              v41 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v41;
              goto LABEL_35;
            }
          }
          else if (v23)
          {
            v261 = *(__n128 *)v16;
            v288 = *(__n128 *)(v16 + 16);
            v31 = a2[-1];
            *(__n128 *)v16 = *v9;
            *(__n128 *)(v16 + 16) = v31;
            *v9 = v261;
            a2[-1] = v288;
            v32 = *(_DWORD *)v16 < *(_DWORD *)v12;
            if (*(_DWORD *)v16 == *(_DWORD *)v12)
              v32 = *(_DWORD *)(v16 + 4) < *(_DWORD *)(v12 + 4);
            if (v32)
            {
              v262 = *(__n128 *)v12;
              v289 = *(_OWORD *)(v12 + 16);
              v33 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)(v12 + 16) = v33;
              *(__n128 *)v16 = v262;
              *(_OWORD *)(v16 + 16) = v289;
            }
          }
LABEL_36:
          v42 = (__n128 *)(v12 + 32);
          v43 = *(_DWORD *)(v12 + 32);
          v44 = v12 + 32 * v15;
          v46 = *(_DWORD *)(v44 - 32);
          v47 = *(_DWORD *)(v44 - 28);
          v45 = v44 - 32;
          v48 = v47 < *(_DWORD *)(v12 + 36);
          v179 = v46 == v43;
          v49 = v46 < v43;
          if (!v179)
            v48 = v49;
          v50 = a2[-4].n128_u32[0];
          v51 = a2[-4].n128_u32[1] < v47;
          v179 = v50 == v46;
          v52 = v50 < v46;
          if (v179)
            v52 = v51;
          if (v48)
          {
            if (v52)
            {
              v53 = *v42;
              v54 = *(__n128 *)(v12 + 48);
              v55 = a2[-3];
              *v42 = *v10;
              *(__n128 *)(v12 + 48) = v55;
LABEL_59:
              *v10 = v53;
              a2[-3] = v54;
              goto LABEL_60;
            }
            v66 = *v42;
            v296 = *(_OWORD *)(v12 + 48);
            v67 = *(_OWORD *)(v45 + 16);
            *v42 = *(__n128 *)v45;
            *(_OWORD *)(v12 + 48) = v67;
            *(__n128 *)v45 = v66;
            *(_OWORD *)(v45 + 16) = v296;
            v68 = a2[-4].n128_u32[0];
            v179 = v68 == *(_DWORD *)v45;
            v69 = v68 < *(_DWORD *)v45;
            if (v179)
              v69 = a2[-4].n128_u32[1] < *(_DWORD *)(v45 + 4);
            if (v69)
            {
              v268 = *(__n128 *)v45;
              v297 = *(__n128 *)(v45 + 16);
              v70 = a2[-3];
              *(__n128 *)v45 = *v10;
              *(__n128 *)(v45 + 16) = v70;
              v53 = v268;
              v54 = v297;
              goto LABEL_59;
            }
          }
          else if (v52)
          {
            v266 = *(__n128 *)v45;
            v293 = *(__n128 *)(v45 + 16);
            v56 = a2[-3];
            *(__n128 *)v45 = *v10;
            *(__n128 *)(v45 + 16) = v56;
            *v10 = v266;
            a2[-3] = v293;
            v57 = *(_DWORD *)(v12 + 32);
            v58 = *(_DWORD *)v45 < v57;
            if (*(_DWORD *)v45 == v57)
              v58 = *(_DWORD *)(v45 + 4) < *(_DWORD *)(v12 + 36);
            if (v58)
            {
              v59 = *v42;
              v294 = *(_OWORD *)(v12 + 48);
              v60 = *(_OWORD *)(v45 + 16);
              *v42 = *(__n128 *)v45;
              *(_OWORD *)(v12 + 48) = v60;
              *(__n128 *)v45 = v59;
              *(_OWORD *)(v45 + 16) = v294;
            }
          }
LABEL_60:
          v71 = (__n128 *)(v12 + 64);
          v72 = *(_DWORD *)(v12 + 64);
          v73 = v12 + 32 * v15;
          v75 = *(_DWORD *)(v73 + 32);
          v76 = *(_DWORD *)(v73 + 36);
          v74 = v73 + 32;
          v77 = v76 < *(_DWORD *)(v12 + 68);
          v179 = v75 == v72;
          v78 = v75 < v72;
          if (!v179)
            v77 = v78;
          v79 = a2[-6].n128_u32[0];
          v80 = a2[-6].n128_u32[1] < v76;
          v179 = v79 == v75;
          v81 = v79 < v75;
          if (v179)
            v81 = v80;
          if (v77)
          {
            if (v81)
            {
              v82 = *v71;
              v83 = *(__n128 *)(v12 + 80);
              v84 = a2[-5];
              *v71 = *v11;
              *(__n128 *)(v12 + 80) = v84;
LABEL_76:
              *v11 = v82;
              a2[-5] = v83;
              goto LABEL_77;
            }
            v90 = *v71;
            v300 = *(_OWORD *)(v12 + 80);
            v91 = *(_OWORD *)(v74 + 16);
            *v71 = *(__n128 *)v74;
            *(_OWORD *)(v12 + 80) = v91;
            *(__n128 *)v74 = v90;
            *(_OWORD *)(v74 + 16) = v300;
            v92 = a2[-6].n128_u32[0];
            v179 = v92 == *(_DWORD *)v74;
            v93 = v92 < *(_DWORD *)v74;
            if (v179)
              v93 = a2[-6].n128_u32[1] < *(_DWORD *)(v74 + 4);
            if (v93)
            {
              v270 = *(__n128 *)v74;
              v301 = *(__n128 *)(v74 + 16);
              v94 = a2[-5];
              *(__n128 *)v74 = *v11;
              *(__n128 *)(v74 + 16) = v94;
              v82 = v270;
              v83 = v301;
              goto LABEL_76;
            }
          }
          else if (v81)
          {
            v269 = *(__n128 *)v74;
            v298 = *(__n128 *)(v74 + 16);
            v85 = a2[-5];
            *(__n128 *)v74 = *v11;
            *(__n128 *)(v74 + 16) = v85;
            *v11 = v269;
            a2[-5] = v298;
            v86 = *(_DWORD *)(v12 + 64);
            v87 = *(_DWORD *)v74 < v86;
            if (*(_DWORD *)v74 == v86)
              v87 = *(_DWORD *)(v74 + 4) < *(_DWORD *)(v12 + 68);
            if (v87)
            {
              v88 = *v71;
              v299 = *(_OWORD *)(v12 + 80);
              v89 = *(_OWORD *)(v74 + 16);
              *v71 = *(__n128 *)v74;
              *(_OWORD *)(v12 + 80) = v89;
              *(__n128 *)v74 = v88;
              *(_OWORD *)(v74 + 16) = v299;
            }
          }
LABEL_77:
          v95 = *(_DWORD *)v16;
          v96 = *(_DWORD *)(v16 + 4);
          v97 = *(_DWORD *)v16 < *(_DWORD *)v45;
          if (*(_DWORD *)v16 == *(_DWORD *)v45)
            v97 = v96 < *(_DWORD *)(v45 + 4);
          v98 = *(_DWORD *)(v74 + 4) < v96;
          v179 = *(_DWORD *)v74 == v95;
          v99 = *(_DWORD *)v74 < v95;
          if (v179)
            v99 = v98;
          if (v97)
          {
            if (v99)
            {
              v271 = *(__n128 *)v45;
              v302 = *(_OWORD *)(v45 + 16);
              v100 = *(_OWORD *)(v74 + 16);
              *(_OWORD *)v45 = *(_OWORD *)v74;
              *(_OWORD *)(v45 + 16) = v100;
LABEL_93:
              *(__n128 *)v74 = v271;
              *(_OWORD *)(v74 + 16) = v302;
              goto LABEL_94;
            }
            v274 = *(__n128 *)v45;
            v305 = *(_OWORD *)(v45 + 16);
            v104 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v45 = *(_OWORD *)v16;
            *(_OWORD *)(v45 + 16) = v104;
            *(__n128 *)v16 = v274;
            *(_OWORD *)(v16 + 16) = v305;
            v105 = *(_DWORD *)v74 < *(_DWORD *)v16;
            if (*(_DWORD *)v74 == *(_DWORD *)v16)
              v105 = *(_DWORD *)(v74 + 4) < *(_DWORD *)(v16 + 4);
            if (v105)
            {
              v271 = *(__n128 *)v16;
              v302 = *(_OWORD *)(v16 + 16);
              v106 = *(_OWORD *)(v74 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v74;
              *(_OWORD *)(v16 + 16) = v106;
              goto LABEL_93;
            }
          }
          else if (v99)
          {
            v272 = *(__n128 *)v16;
            v303 = *(_OWORD *)(v16 + 16);
            v101 = *(_OWORD *)(v74 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v74;
            *(_OWORD *)(v16 + 16) = v101;
            *(__n128 *)v74 = v272;
            *(_OWORD *)(v74 + 16) = v303;
            v102 = *(_DWORD *)v16 < *(_DWORD *)v45;
            if (*(_DWORD *)v16 == *(_DWORD *)v45)
              v102 = *(_DWORD *)(v16 + 4) < *(_DWORD *)(v45 + 4);
            if (v102)
            {
              v273 = *(__n128 *)v45;
              v304 = *(_OWORD *)(v45 + 16);
              v103 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v45 = *(_OWORD *)v16;
              *(_OWORD *)(v45 + 16) = v103;
              *(__n128 *)v16 = v273;
              *(_OWORD *)(v16 + 16) = v304;
            }
          }
LABEL_94:
          v275 = *(__n128 *)v12;
          v306 = *(_OWORD *)(v12 + 16);
          v107 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v107;
          *(__n128 *)v16 = v275;
          *(_OWORD *)(v16 + 16) = v306;
          --a3;
          v37 = *(_DWORD *)v12;
          if ((a4 & 1) == 0)
            goto LABEL_95;
LABEL_54:
          v65 = *(_DWORD *)(v12 + 4);
LABEL_98:
          v110 = 0;
          v256 = *(_QWORD *)(v12 + 24);
          v253 = *(__n128 *)(v12 + 8);
          do
          {
            v111 = *(_DWORD *)(v12 + v110 + 32);
            v112 = *(_DWORD *)(v12 + v110 + 36) < v65;
            v179 = v111 == v37;
            v113 = v111 < v37;
            if (!v179)
              v112 = v113;
            v110 += 32;
          }
          while (v112);
          v114 = v12 + v110;
          v115 = a2;
          if (v110 == 32)
          {
            v115 = a2;
            do
            {
              if (v114 >= (unint64_t)v115)
                break;
              v120 = v115[-2].n128_u32[0];
              v121 = v115[-2].n128_u32[1];
              v115 -= 2;
              v122 = v121 < v65;
              v179 = v120 == v37;
              v123 = v120 < v37;
              if (v179)
                v123 = v122;
            }
            while (!v123);
          }
          else
          {
            do
            {
              v116 = v115[-2].n128_u32[0];
              v117 = v115[-2].n128_u32[1];
              v115 -= 2;
              v118 = v117 < v65;
              v179 = v116 == v37;
              v119 = v116 < v37;
              if (v179)
                v119 = v118;
            }
            while (!v119);
          }
          v12 = v114;
          if (v114 < (unint64_t)v115)
          {
            v124 = v115;
            do
            {
              v276 = *(__n128 *)v12;
              v307 = *(__n128 *)(v12 + 16);
              v125 = v124[1];
              *(__n128 *)v12 = *v124;
              *(__n128 *)(v12 + 16) = v125;
              *v124 = v276;
              v124[1] = v307;
              do
              {
                v126 = *(_DWORD *)(v12 + 32);
                v127 = *(_DWORD *)(v12 + 36);
                v12 += 32;
                v128 = v127 < v65;
                v179 = v126 == v37;
                v129 = v126 < v37;
                if (v179)
                  v129 = v128;
              }
              while (v129);
              do
              {
                v130 = v124[-2].n128_u32[0];
                v131 = v124[-2].n128_u32[1];
                v124 -= 2;
                v132 = v131 < v65;
                v179 = v130 == v37;
                v133 = v130 < v37;
                if (v179)
                  v133 = v132;
              }
              while (!v133);
            }
            while (v12 < (unint64_t)v124);
          }
          if (v12 - 32 != a1)
          {
            v134 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v134;
          }
          *(_DWORD *)(v12 - 32) = v37;
          *(_DWORD *)(v12 - 28) = v65;
          *(_QWORD *)(v12 - 8) = v256;
          *(__n128 *)(v12 - 24) = v253;
          if (v114 < (unint64_t)v115)
            goto LABEL_127;
          v135 = sub_20F9BD5F4(a1, v12 - 32, v253);
          if (!sub_20F9BD5F4(v12, (uint64_t)a2, v136))
          {
            if (v135)
              continue;
LABEL_127:
            sub_20F9BC74C(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v135)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v178 = (__n128 *)(v12 + 32);
        v179 = (__n128 *)v12 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v12;
            do
            {
              v184 = v178;
              v185 = *(_DWORD *)(v182 + 32);
              v186 = *(_DWORD *)(v182 + 36);
              v187 = v185 < *(_DWORD *)v182;
              if (v185 == *(_DWORD *)v182)
                v187 = v186 < *(_DWORD *)(v182 + 4);
              if (v187)
              {
                v280 = *(_OWORD *)(v182 + 40);
                v311 = *(_QWORD *)(v182 + 56);
                v188 = v181;
                do
                {
                  v189 = v12 + v188;
                  v190 = *(_OWORD *)(v12 + v188 + 16);
                  *(_OWORD *)(v189 + 32) = *(_OWORD *)(v12 + v188);
                  *(_OWORD *)(v189 + 48) = v190;
                  if (!v188)
                  {
                    v183 = v12;
                    goto LABEL_184;
                  }
                  v191 = *(_DWORD *)(v189 - 32);
                  v192 = v186 < *(_DWORD *)(v189 - 28);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v188 -= 32;
                }
                while (v192);
                v183 = v12 + v188 + 32;
LABEL_184:
                *(_DWORD *)v183 = v185;
                *(_DWORD *)(v183 + 4) = v186;
                a5.n128_u64[0] = v280;
                *(_QWORD *)(v183 + 24) = v311;
                *(_OWORD *)(v183 + 8) = v280;
              }
              v178 = v184 + 2;
              v181 += 32;
              v182 = (unint64_t)v184;
            }
            while (&v184[2] != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v237 = (uint64_t)v178;
            v238 = *(_DWORD *)(a1 + 32);
            v239 = *(_DWORD *)(a1 + 36);
            v240 = v238 < *(_DWORD *)a1;
            if (v238 == *(_DWORD *)a1)
              v240 = v239 < *(_DWORD *)(a1 + 4);
            if (v240)
            {
              v284 = *(_OWORD *)(a1 + 40);
              v316 = *(_QWORD *)(a1 + 56);
              v241 = v237;
              do
              {
                v242 = *(_OWORD *)(v241 - 16);
                *(_OWORD *)v241 = *(_OWORD *)(v241 - 32);
                *(_OWORD *)(v241 + 16) = v242;
                v243 = *(_DWORD *)(v241 - 64);
                v244 = *(_DWORD *)(v241 - 60);
                v241 -= 32;
                v245 = v239 < v244;
                v179 = v238 == v243;
                v246 = v238 < v243;
                if (v179)
                  v246 = v245;
              }
              while (v246);
              *(_DWORD *)v241 = v238;
              *(_DWORD *)(v241 + 4) = v239;
              a5.n128_u64[0] = v284;
              *(_QWORD *)(v241 + 24) = v316;
              *(_OWORD *)(v241 + 8) = v284;
            }
            v178 = (__n128 *)(v237 + 32);
            a1 = v237;
          }
          while ((__n128 *)(v237 + 32) != a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__n128 *)(a2 - 48);
  v10 = (__n128 *)(a2 - 96);
  v11 = (__n128 *)(a2 - 144);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 4);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u32[0] = *(_DWORD *)(a2 - 4);
        if (a5.n128_f32[0] > *(float *)(v12 + 44))
        {
          v258 = *(_OWORD *)(v12 + 16);
          v290 = *(_OWORD *)(v12 + 32);
          v224 = *(__n128 *)v12;
          a5 = *(__n128 *)(a2 - 48);
          v131 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v12 + 32) = v131;
          *(__n128 *)v12 = a5;
          a5.n128_u64[0] = v224.n128_u64[0];
          *(_OWORD *)(a2 - 32) = v258;
          *(_OWORD *)(a2 - 16) = v290;
          *(__n128 *)(a2 - 48) = v224;
        }
        return a5.n128_f64[0];
      case 3:
        v132 = v12 + 48;
        a5.n128_u32[0] = *(_DWORD *)(v12 + 92);
        v133 = *(float *)(a2 - 4);
        if (a5.n128_f32[0] <= *(float *)(v12 + 44))
        {
          if (v133 > a5.n128_f32[0])
          {
            a5 = *(__n128 *)v132;
            v264 = *(_OWORD *)(v12 + 64);
            v179 = *(_OWORD *)(v12 + 80);
            v180 = *v9;
            v181 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)(v12 + 64) = *(_OWORD *)(a2 - 32);
            *(_OWORD *)(v12 + 80) = v181;
            *(__n128 *)v132 = v180;
            *(_OWORD *)(a2 - 32) = v264;
            *(_OWORD *)(a2 - 16) = v179;
            *v9 = a5;
            goto LABEL_175;
          }
        }
        else
        {
          if (v133 <= a5.n128_f32[0])
          {
            v267 = *(_OWORD *)(v12 + 16);
            v295 = *(_OWORD *)(v12 + 32);
            v232 = *(__n128 *)v12;
            v190 = *(_OWORD *)(v12 + 64);
            *(_OWORD *)v12 = *(_OWORD *)v132;
            *(_OWORD *)(v12 + 16) = v190;
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 80);
            *(__n128 *)v132 = v232;
            *(_OWORD *)(v12 + 64) = v267;
            a5.n128_u32[1] = DWORD1(v295);
            *(_OWORD *)(v12 + 80) = v295;
            a5.n128_u32[0] = *(_DWORD *)(a2 - 4);
            if (a5.n128_f32[0] <= *(float *)(v12 + 92))
              return a5.n128_f64[0];
            a5 = *(__n128 *)v132;
            v136 = *(_OWORD *)(v12 + 64);
            v137 = *(_OWORD *)(v12 + 80);
            v191 = *v9;
            v192 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)(v12 + 64) = *(_OWORD *)(a2 - 32);
            *(_OWORD *)(v12 + 80) = v192;
            *(__n128 *)v132 = v191;
          }
          else
          {
            v259 = *(_OWORD *)(v12 + 16);
            v291 = *(_OWORD *)(v12 + 32);
            v225 = *(__n128 *)v12;
            v134 = *v9;
            v135 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 - 32);
            *(_OWORD *)(v12 + 32) = v135;
            *(__n128 *)v12 = v134;
            a5 = v225;
            v136 = v259;
            v137 = v291;
          }
          *(_OWORD *)(a2 - 32) = v136;
          *(_OWORD *)(a2 - 16) = v137;
          *v9 = a5;
        }
        return a5.n128_f64[0];
      case 4:
        v132 = v12 + 48;
        v138 = (__n128 *)(v12 + 96);
        v139 = *(float *)(v12 + 92);
        v140 = *(float *)(v12 + 140);
        if (v139 <= *(float *)(v12 + 44))
        {
          if (v140 > v139)
          {
            v182 = *(_OWORD *)(v12 + 64);
            a5 = *(__n128 *)(v12 + 80);
            v183 = *(__n128 *)v132;
            v184 = *(_OWORD *)(v12 + 112);
            *(__n128 *)v132 = *v138;
            *(_OWORD *)(v12 + 64) = v184;
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 128);
            *v138 = v183;
            *(_OWORD *)(v12 + 112) = v182;
            *(__n128 *)(v12 + 128) = a5;
            if (*(float *)(v12 + 92) > *(float *)(v12 + 44))
            {
              v265 = *(_OWORD *)(v12 + 16);
              v294 = *(_OWORD *)(v12 + 32);
              v230 = *(__n128 *)v12;
              v185 = *(_OWORD *)(v12 + 64);
              *(_OWORD *)v12 = *(_OWORD *)v132;
              *(_OWORD *)(v12 + 16) = v185;
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 80);
              *(__n128 *)v132 = v230;
              *(_OWORD *)(v12 + 64) = v265;
              a5.n128_u32[1] = DWORD1(v294);
              *(_OWORD *)(v12 + 80) = v294;
            }
          }
        }
        else
        {
          if (v140 <= v139)
          {
            v268 = *(_OWORD *)(v12 + 16);
            v296 = *(_OWORD *)(v12 + 32);
            v233 = *(__n128 *)v12;
            v193 = *(_OWORD *)(v12 + 64);
            *(_OWORD *)v12 = *(_OWORD *)v132;
            *(_OWORD *)(v12 + 16) = v193;
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 80);
            *(__n128 *)v132 = v233;
            *(_OWORD *)(v12 + 64) = v268;
            *(_OWORD *)(v12 + 80) = v296;
            if (v140 <= *(float *)(v12 + 92))
              goto LABEL_172;
            v194 = *(_OWORD *)(v12 + 64);
            a5 = *(__n128 *)(v12 + 80);
            v195 = *(__n128 *)v132;
            v196 = *(_OWORD *)(v12 + 112);
            *(__n128 *)v132 = *v138;
            *(_OWORD *)(v12 + 64) = v196;
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 128);
            *v138 = v195;
            *(_OWORD *)(v12 + 112) = v194;
          }
          else
          {
            v260 = *(_OWORD *)(v12 + 16);
            v292 = *(__n128 *)(v12 + 32);
            v226 = *(__n128 *)v12;
            v141 = *(_OWORD *)(v12 + 112);
            *(__n128 *)v12 = *v138;
            *(_OWORD *)(v12 + 16) = v141;
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 128);
            *v138 = v226;
            *(_OWORD *)(v12 + 112) = v260;
            a5 = v292;
          }
          *(__n128 *)(v12 + 128) = a5;
        }
LABEL_172:
        a5.n128_u32[0] = *(_DWORD *)(a2 - 4);
        if (a5.n128_f32[0] > *(float *)(v12 + 140))
        {
          a5 = *v138;
          v269 = *(_OWORD *)(v12 + 112);
          v197 = *(_OWORD *)(v12 + 128);
          v198 = *v9;
          v199 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(v12 + 112) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v12 + 128) = v199;
          *v138 = v198;
          *(_OWORD *)(a2 - 32) = v269;
          *(_OWORD *)(a2 - 16) = v197;
          *v9 = a5;
          a5.n128_u32[0] = *(_DWORD *)(v12 + 140);
          if (a5.n128_f32[0] > *(float *)(v12 + 92))
          {
            v200 = *(_OWORD *)(v12 + 64);
            a5 = *(__n128 *)(v12 + 80);
            v201 = *(__n128 *)v132;
            v202 = *(_OWORD *)(v12 + 112);
            *(__n128 *)v132 = *v138;
            *(_OWORD *)(v12 + 64) = v202;
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 128);
            *v138 = v201;
            *(_OWORD *)(v12 + 112) = v200;
            *(__n128 *)(v12 + 128) = a5;
LABEL_175:
            a5.n128_u32[0] = *(_DWORD *)(v12 + 92);
            if (a5.n128_f32[0] > *(float *)(v12 + 44))
            {
              v270 = *(_OWORD *)(v12 + 16);
              v297 = *(_OWORD *)(v12 + 32);
              v234 = *(__n128 *)v12;
              v203 = *(_OWORD *)(v132 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v132;
              *(_OWORD *)(v12 + 16) = v203;
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v132 + 32);
              *(__n128 *)v132 = v234;
              *(_OWORD *)(v132 + 16) = v270;
              a5.n128_u64[0] = v297;
              *(_OWORD *)(v132 + 32) = v297;
            }
          }
        }
        return a5.n128_f64[0];
      case 5:
        a5.n128_u64[0] = sub_20FD666F0(v12, v12 + 48, v12 + 96, v12 + 144, a2 - 48, a5).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v13 > 1151)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v152 = (unint64_t)(v14 - 2) >> 1;
              v153 = v152;
              do
              {
                if (v152 >= v153)
                {
                  v155 = (2 * v153) | 1;
                  v156 = v12 + 48 * v155;
                  if (2 * v153 + 2 < v14 && *(float *)(v12 + 48 * v155 + 44) > *(float *)(v156 + 92))
                  {
                    v156 += 48;
                    v155 = 2 * v153 + 2;
                  }
                  v157 = *(float *)(v12 + 48 * v153 + 44);
                  if (*(float *)(v156 + 44) <= v157)
                  {
                    v158 = v12 + 48 * v153;
                    *(_OWORD *)&v262[12] = *(_OWORD *)(v158 + 28);
                    v228 = *(_OWORD *)v158;
                    *(_OWORD *)v262 = *(_OWORD *)(v158 + 16);
                    do
                    {
                      v159 = (_OWORD *)v158;
                      v158 = v156;
                      v160 = *(_OWORD *)v156;
                      v161 = *(_OWORD *)(v156 + 32);
                      v159[1] = *(_OWORD *)(v156 + 16);
                      v159[2] = v161;
                      *v159 = v160;
                      if (v152 < v155)
                        break;
                      v162 = (2 * v155) | 1;
                      v156 = v12 + 48 * v162;
                      v163 = 2 * v155 + 2;
                      if (v163 < v14 && *(float *)(v12 + 48 * v162 + 44) > *(float *)(v156 + 92))
                      {
                        v156 += 48;
                        v162 = v163;
                      }
                      v155 = v162;
                    }
                    while (*(float *)(v156 + 44) <= v157);
                    *(_OWORD *)(v158 + 28) = *(_OWORD *)&v262[12];
                    *(_OWORD *)v158 = v228;
                    *(_OWORD *)(v158 + 16) = *(_OWORD *)v262;
                    *(float *)(v158 + 44) = v157;
                  }
                }
                v154 = v153-- <= 0;
              }
              while (!v154);
              v164 = v13 / 0x30uLL;
              do
              {
                v165 = 0;
                v263 = *(_OWORD *)(v12 + 16);
                v293 = *(_OWORD *)(v12 + 32);
                v229 = *(__n128 *)v12;
                v166 = v12;
                do
                {
                  v169 = (__n128 *)v166;
                  v170 = v165 + 1;
                  v166 += 48 * (v165 + 1);
                  v171 = 2 * v165;
                  v165 = (2 * v165) | 1;
                  v172 = v171 + 2;
                  if (v172 < v164 && v169[3 * v170 + 2].n128_f32[3] > *(float *)(v166 + 92))
                  {
                    v166 += 48;
                    v165 = v172;
                  }
                  v167 = *(__n128 *)v166;
                  v168 = *(__n128 *)(v166 + 32);
                  v169[1] = *(__n128 *)(v166 + 16);
                  v169[2] = v168;
                  *v169 = v167;
                }
                while (v165 <= (uint64_t)((unint64_t)(v164 - 2) >> 1));
                a2 -= 48;
                if (v166 == a2)
                {
                  a5.n128_u64[0] = v229.n128_u64[0];
                  *(_OWORD *)(v166 + 16) = v263;
                  *(_OWORD *)(v166 + 32) = v293;
                  *(__n128 *)v166 = v229;
                }
                else
                {
                  a5 = *(__n128 *)a2;
                  v173 = *(_OWORD *)(a2 + 32);
                  *(_OWORD *)(v166 + 16) = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)(v166 + 32) = v173;
                  *(__n128 *)v166 = a5;
                  a5.n128_u64[0] = v229.n128_u64[0];
                  *(_OWORD *)(a2 + 16) = v263;
                  *(_OWORD *)(a2 + 32) = v293;
                  *(__n128 *)a2 = v229;
                  v174 = v166 - v12 + 48;
                  if (v174 >= 49)
                  {
                    v175 = (v174 / 0x30uLL - 2) >> 1;
                    a5.n128_u32[0] = *(_DWORD *)(v166 + 44);
                    if (*(float *)(v12 + 48 * v175 + 44) > a5.n128_f32[0])
                    {
                      *(_OWORD *)&v303[12] = *(_OWORD *)(v166 + 28);
                      v300 = *(__n128 *)v166;
                      *(_OWORD *)v303 = *(_OWORD *)(v166 + 16);
                      do
                      {
                        v176 = (_OWORD *)v166;
                        v166 = v12 + 48 * v175;
                        v177 = *(__n128 *)v166;
                        v178 = *(_OWORD *)(v166 + 32);
                        v176[1] = *(_OWORD *)(v166 + 16);
                        v176[2] = v178;
                        *v176 = v177;
                        if (!v175)
                          break;
                        v175 = (v175 - 1) >> 1;
                      }
                      while (*(float *)(v12 + 48 * v175 + 44) > a5.n128_f32[0]);
                      *(_OWORD *)(v166 + 28) = *(_OWORD *)&v303[12];
                      *(__n128 *)v166 = v300;
                      *(_OWORD *)(v166 + 16) = *(_OWORD *)v303;
                      *(_DWORD *)(v166 + 44) = a5.n128_u32[0];
                    }
                  }
                }
                v154 = v164-- <= 2;
              }
              while (!v154);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 48 * ((unint64_t)v14 >> 1));
          v17 = *(float *)(a2 - 4);
          if ((unint64_t)v13 < 0x1801)
          {
            v22 = *(float *)(v12 + 44);
            v23 = (float *)(v12 + 44 + 48 * v15);
            if (v22 <= *v23)
            {
              if (v17 > v22)
              {
                v239 = *(_OWORD *)(v12 + 16);
                v275 = *(_OWORD *)(v12 + 32);
                v209 = *(__n128 *)v12;
                v30 = *v9;
                v31 = *(_OWORD *)(a2 - 16);
                *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 - 32);
                *(_OWORD *)(v12 + 32) = v31;
                *(__n128 *)v12 = v30;
                a5 = v209;
                *(_OWORD *)(a2 - 32) = v239;
                *(_OWORD *)(a2 - 16) = v275;
                *v9 = v209;
                if (*(float *)(v12 + 44) > *v23)
                {
                  v240 = v16[1];
                  v276 = v16[2];
                  v210 = *v16;
                  v32 = *(__n128 *)v12;
                  v33 = *(__n128 *)(v12 + 32);
                  v16[1] = *(__n128 *)(v12 + 16);
                  v16[2] = v33;
                  *v16 = v32;
                  a5 = v210;
                  *(__n128 *)(v12 + 16) = v240;
                  *(__n128 *)(v12 + 32) = v276;
                  *(__n128 *)v12 = v210;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v22)
              {
                v244 = v16[1];
                v279 = v16[2];
                v213 = *v16;
                v56 = *(__n128 *)v12;
                v57 = *(__n128 *)(v12 + 32);
                v16[1] = *(__n128 *)(v12 + 16);
                v16[2] = v57;
                *v16 = v56;
                a5 = v213;
                *(__n128 *)(v12 + 16) = v244;
                *(__n128 *)(v12 + 32) = v279;
                *(__n128 *)v12 = v213;
                if (*(float *)(a2 - 4) <= *(float *)(v12 + 44))
                  goto LABEL_31;
                v236 = *(__n128 *)(v12 + 16);
                v272 = *(__n128 *)(v12 + 32);
                v206 = *(__n128 *)v12;
                v58 = *v9;
                v59 = *(_OWORD *)(a2 - 16);
                *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 - 32);
                *(_OWORD *)(v12 + 32) = v59;
                *(__n128 *)v12 = v58;
              }
              else
              {
                v236 = v16[1];
                v272 = v16[2];
                v206 = *v16;
                v24 = *v9;
                v25 = *(__n128 *)(a2 - 16);
                v16[1] = *(__n128 *)(a2 - 32);
                v16[2] = v25;
                *v16 = v24;
              }
              a5 = v206;
              *(__n128 *)(a2 - 32) = v236;
              *(__n128 *)(a2 - 16) = v272;
              *v9 = v206;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u32[0] = *(_DWORD *)(v12 + 44);
            if (*(float *)(v12 - 4) > a5.n128_f32[0])
              goto LABEL_56;
            *(_OWORD *)&v302[12] = *(_OWORD *)(v12 + 28);
            v299 = *(__n128 *)v12;
            *(_OWORD *)v302 = *(_OWORD *)(v12 + 16);
            if (a5.n128_f32[0] <= *(float *)(a2 - 4))
            {
              v119 = v12 + 48;
              do
              {
                v12 = v119;
                if (v119 >= a2)
                  break;
                v120 = *(float *)(v119 + 44);
                v119 += 48;
              }
              while (a5.n128_f32[0] <= v120);
            }
            else
            {
              v117 = v12;
              do
              {
                v12 = v117 + 48;
                v118 = *(float *)(v117 + 92);
                v117 += 48;
              }
              while (a5.n128_f32[0] <= v118);
            }
            v121 = (float *)a2;
            if (v12 < a2)
            {
              v122 = a2;
              do
              {
                v121 = (float *)(v122 - 48);
                v123 = *(float *)(v122 - 4);
                v122 -= 48;
              }
              while (a5.n128_f32[0] > v123);
            }
            while (v12 < (unint64_t)v121)
            {
              v257 = *(_OWORD *)(v12 + 16);
              v289 = *(_OWORD *)(v12 + 32);
              v223 = *(__n128 *)v12;
              v124 = *(_OWORD *)v121;
              v125 = *((_OWORD *)v121 + 2);
              *(_OWORD *)(v12 + 16) = *((_OWORD *)v121 + 1);
              *(_OWORD *)(v12 + 32) = v125;
              *(_OWORD *)v12 = v124;
              *((_OWORD *)v121 + 1) = v257;
              *((_OWORD *)v121 + 2) = v289;
              *(__n128 *)v121 = v223;
              do
              {
                v126 = *(float *)(v12 + 92);
                v12 += 48;
              }
              while (a5.n128_f32[0] <= v126);
              do
              {
                v127 = *(v121 - 1);
                v121 -= 12;
              }
              while (a5.n128_f32[0] > v127);
            }
            v128 = (__n128 *)(v12 - 48);
            if (v12 - 48 != a1)
            {
              v129 = *v128;
              v130 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 32) = v130;
              *(__n128 *)a1 = v129;
            }
            a4 = 0;
            *(_OWORD *)(v12 - 20) = *(_OWORD *)&v302[12];
            *v128 = v299;
            *(_OWORD *)(v12 - 32) = *(_OWORD *)v302;
            *(_DWORD *)(v12 - 4) = a5.n128_u32[0];
            continue;
          }
          v18 = (float *)(v12 + 44 + 48 * v15);
          v19 = *v18;
          if (*v18 <= *(float *)(v12 + 44))
          {
            if (v17 > v19)
            {
              v237 = v16[1];
              v273 = v16[2];
              v207 = *v16;
              v26 = *v9;
              v27 = *(__n128 *)(a2 - 16);
              v16[1] = *(__n128 *)(a2 - 32);
              v16[2] = v27;
              *v16 = v26;
              *(__n128 *)(a2 - 32) = v237;
              *(__n128 *)(a2 - 16) = v273;
              *v9 = v207;
              if (*v18 > *(float *)(v12 + 44))
              {
                v238 = *(__n128 *)(v12 + 16);
                v274 = *(__n128 *)(v12 + 32);
                v208 = *(__n128 *)v12;
                v28 = *v16;
                v29 = v16[2];
                *(__n128 *)(v12 + 16) = v16[1];
                *(__n128 *)(v12 + 32) = v29;
                *(__n128 *)v12 = v28;
                v16[1] = v238;
                v16[2] = v274;
                *v16 = v208;
              }
            }
          }
          else
          {
            if (v17 <= v19)
            {
              v241 = *(__n128 *)(v12 + 16);
              v277 = *(__n128 *)(v12 + 32);
              v211 = *(__n128 *)v12;
              v34 = *v16;
              v35 = v16[2];
              *(__n128 *)(v12 + 16) = v16[1];
              *(__n128 *)(v12 + 32) = v35;
              *(__n128 *)v12 = v34;
              v16[1] = v241;
              v16[2] = v277;
              *v16 = v211;
              if (*(float *)(a2 - 4) <= *v18)
                goto LABEL_22;
              v235 = v16[1];
              v271 = v16[2];
              v205 = *v16;
              v36 = *v9;
              v37 = *(__n128 *)(a2 - 16);
              v16[1] = *(__n128 *)(a2 - 32);
              v16[2] = v37;
              *v16 = v36;
            }
            else
            {
              v235 = *(__n128 *)(v12 + 16);
              v271 = *(__n128 *)(v12 + 32);
              v205 = *(__n128 *)v12;
              v20 = *v9;
              v21 = *(_OWORD *)(a2 - 16);
              *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v12 + 32) = v21;
              *(__n128 *)v12 = v20;
            }
            *(__n128 *)(a2 - 32) = v235;
            *(__n128 *)(a2 - 16) = v271;
            *v9 = v205;
          }
LABEL_22:
          v38 = (__int128 *)(v12 + 48);
          v39 = v12 + 48 * v15;
          v41 = *(float *)(v39 - 4);
          v40 = (float *)(v39 - 4);
          v42 = v41;
          v43 = v40 - 11;
          v44 = *(float *)(a2 - 52);
          if (v41 <= *(float *)(v12 + 92))
          {
            if (v44 > v42)
            {
              v242 = *(_OWORD *)(v40 - 7);
              v278 = *(_OWORD *)(v40 - 3);
              v212 = *(__n128 *)v43;
              v50 = *v10;
              v51 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v40 - 7) = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v40 - 3) = v51;
              *(__n128 *)v43 = v50;
              *(_OWORD *)(a2 - 80) = v242;
              *(_OWORD *)(a2 - 64) = v278;
              *v10 = v212;
              if (*v40 > *(float *)(v12 + 92))
              {
                v52 = *v38;
                v243 = *(_OWORD *)(v12 + 64);
                v53 = *(_OWORD *)(v12 + 80);
                v54 = *(__n128 *)v43;
                v55 = *(_OWORD *)(v40 - 3);
                *(_OWORD *)(v12 + 64) = *(_OWORD *)(v40 - 7);
                *(_OWORD *)(v12 + 80) = v55;
                *v38 = (__int128)v54;
                *(_OWORD *)(v40 - 7) = v243;
                *(_OWORD *)(v40 - 3) = v53;
                *(_OWORD *)v43 = v52;
              }
            }
          }
          else
          {
            if (v44 <= v42)
            {
              v60 = *v38;
              v245 = *(_OWORD *)(v12 + 64);
              v61 = *(_OWORD *)(v12 + 80);
              v62 = *(__n128 *)v43;
              v63 = *(_OWORD *)(v40 - 3);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(v40 - 7);
              *(_OWORD *)(v12 + 80) = v63;
              *v38 = (__int128)v62;
              *(_OWORD *)(v40 - 7) = v245;
              *(_OWORD *)(v40 - 3) = v61;
              *(_OWORD *)v43 = v60;
              if (*(float *)(a2 - 52) <= *v40)
                goto LABEL_36;
              v246 = *(_OWORD *)(v40 - 7);
              v280 = *(_OWORD *)(v40 - 3);
              v214 = *(__n128 *)v43;
              v64 = *v10;
              v65 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v40 - 7) = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v40 - 3) = v65;
              *(__n128 *)v43 = v64;
              v45 = v214;
              v46 = v246;
              v47 = v280;
            }
            else
            {
              v45 = (__n128)*v38;
              v46 = *(_OWORD *)(v12 + 64);
              v47 = *(_OWORD *)(v12 + 80);
              v48 = *v10;
              v49 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(a2 - 80);
              *(_OWORD *)(v12 + 80) = v49;
              *v38 = (__int128)v48;
            }
            *(_OWORD *)(a2 - 80) = v46;
            *(_OWORD *)(a2 - 64) = v47;
            *v10 = v45;
          }
LABEL_36:
          v66 = (__int128 *)(v12 + 96);
          v67 = v12 + 48 * v15;
          v69 = *(float *)(v67 + 92);
          v68 = (float *)(v67 + 92);
          v70 = v69;
          v71 = v68 - 11;
          v72 = *(float *)(a2 - 100);
          if (v69 <= *(float *)(v12 + 140))
          {
            if (v72 > v70)
            {
              v247 = *(_OWORD *)(v68 - 7);
              v281 = *(_OWORD *)(v68 - 3);
              v215 = *(__n128 *)v71;
              v78 = *v11;
              v79 = *(_OWORD *)(a2 - 112);
              *(_OWORD *)(v68 - 7) = *(_OWORD *)(a2 - 128);
              *(_OWORD *)(v68 - 3) = v79;
              *(__n128 *)v71 = v78;
              *(_OWORD *)(a2 - 128) = v247;
              *(_OWORD *)(a2 - 112) = v281;
              *v11 = v215;
              if (*v68 > *(float *)(v12 + 140))
              {
                v80 = *v66;
                v248 = *(_OWORD *)(v12 + 112);
                v81 = *(_OWORD *)(v12 + 128);
                v82 = *(__n128 *)v71;
                v83 = *(_OWORD *)(v68 - 3);
                *(_OWORD *)(v12 + 112) = *(_OWORD *)(v68 - 7);
                *(_OWORD *)(v12 + 128) = v83;
                *v66 = (__int128)v82;
                *(_OWORD *)(v68 - 7) = v248;
                *(_OWORD *)(v68 - 3) = v81;
                *(_OWORD *)v71 = v80;
              }
            }
          }
          else
          {
            if (v72 <= v70)
            {
              v84 = *v66;
              v249 = *(_OWORD *)(v12 + 112);
              v85 = *(_OWORD *)(v12 + 128);
              v86 = *(__n128 *)v71;
              v87 = *(_OWORD *)(v68 - 3);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(v68 - 7);
              *(_OWORD *)(v12 + 128) = v87;
              *v66 = (__int128)v86;
              *(_OWORD *)(v68 - 7) = v249;
              *(_OWORD *)(v68 - 3) = v85;
              *(_OWORD *)v71 = v84;
              if (*(float *)(a2 - 100) <= *v68)
                goto LABEL_45;
              v250 = *(_OWORD *)(v68 - 7);
              v282 = *(_OWORD *)(v68 - 3);
              v216 = *(__n128 *)v71;
              v88 = *v11;
              v89 = *(_OWORD *)(a2 - 112);
              *(_OWORD *)(v68 - 7) = *(_OWORD *)(a2 - 128);
              *(_OWORD *)(v68 - 3) = v89;
              *(__n128 *)v71 = v88;
              v73 = v216;
              v74 = v250;
              v75 = v282;
            }
            else
            {
              v73 = (__n128)*v66;
              v74 = *(_OWORD *)(v12 + 112);
              v75 = *(_OWORD *)(v12 + 128);
              v76 = *v11;
              v77 = *(_OWORD *)(a2 - 112);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(a2 - 128);
              *(_OWORD *)(v12 + 128) = v77;
              *v66 = (__int128)v76;
            }
            *(_OWORD *)(a2 - 128) = v74;
            *(_OWORD *)(a2 - 112) = v75;
            *v11 = v73;
          }
LABEL_45:
          v90 = *v18;
          v91 = *v68;
          if (*v18 <= *v40)
          {
            if (v91 > v90)
            {
              v252 = v16[1];
              v284 = v16[2];
              v218 = *v16;
              v93 = *(__n128 *)(v68 - 7);
              *v16 = *(__n128 *)v71;
              v16[1] = v93;
              v16[2] = *(__n128 *)(v68 - 3);
              *(__n128 *)(v68 - 7) = v252;
              *(__n128 *)(v68 - 3) = v284;
              *(__n128 *)v71 = v218;
              if (*v18 > *v40)
              {
                v253 = *(__n128 *)(v40 - 7);
                v285 = *(__n128 *)(v40 - 3);
                v219 = *(__n128 *)v43;
                v94 = v16[1];
                *(__n128 *)v43 = *v16;
                *(__n128 *)(v40 - 7) = v94;
                *(__n128 *)(v40 - 3) = v16[2];
                v16[1] = v253;
                v16[2] = v285;
                *v16 = v219;
              }
            }
          }
          else
          {
            if (v91 <= v90)
            {
              v254 = *(__n128 *)(v40 - 7);
              v286 = *(__n128 *)(v40 - 3);
              v220 = *(__n128 *)v43;
              v95 = v16[1];
              *(__n128 *)v43 = *v16;
              *(__n128 *)(v40 - 7) = v95;
              *(__n128 *)(v40 - 3) = v16[2];
              v16[1] = v254;
              v16[2] = v286;
              *v16 = v220;
              if (*v68 <= *v18)
                goto LABEL_54;
              v251 = v16[1];
              v283 = v16[2];
              v217 = *v16;
              v96 = *(__n128 *)(v68 - 7);
              *v16 = *(__n128 *)v71;
              v16[1] = v96;
              v16[2] = *(__n128 *)(v68 - 3);
            }
            else
            {
              v251 = *(__n128 *)(v40 - 7);
              v283 = *(__n128 *)(v40 - 3);
              v217 = *(__n128 *)v43;
              v92 = *(_OWORD *)(v68 - 7);
              *(_OWORD *)v43 = *(_OWORD *)v71;
              *(_OWORD *)(v40 - 7) = v92;
              *(_OWORD *)(v40 - 3) = *(_OWORD *)(v68 - 3);
            }
            *(__n128 *)(v68 - 7) = v251;
            *(__n128 *)(v68 - 3) = v283;
            *(__n128 *)v71 = v217;
          }
LABEL_54:
          v255 = *(__n128 *)(v12 + 16);
          v287 = *(__n128 *)(v12 + 32);
          v221 = *(__n128 *)v12;
          v97 = *v16;
          v98 = v16[2];
          *(__n128 *)(v12 + 16) = v16[1];
          *(__n128 *)(v12 + 32) = v98;
          *(__n128 *)v12 = v97;
          a5 = v221;
          v16[1] = v255;
          v16[2] = v287;
          *v16 = v221;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u32[0] = *(_DWORD *)(v12 + 44);
LABEL_56:
          v99 = 0;
          *(_OWORD *)&v301[12] = *(_OWORD *)(v12 + 28);
          v298 = *(__n128 *)v12;
          *(_OWORD *)v301 = *(_OWORD *)(v12 + 16);
          do
          {
            v100 = *(float *)(v12 + v99 + 92);
            v99 += 48;
          }
          while (v100 > a5.n128_f32[0]);
          v101 = v12 + v99;
          v102 = a2;
          if (v99 == 48)
          {
            v105 = a2;
            while (v101 < v105)
            {
              v103 = (float *)(v105 - 48);
              v106 = *(float *)(v105 - 4);
              v105 -= 48;
              if (v106 > a5.n128_f32[0])
                goto LABEL_64;
            }
            v103 = (float *)v105;
            v12 = v101;
          }
          else
          {
            do
            {
              v103 = (float *)(v102 - 48);
              v104 = *(float *)(v102 - 4);
              v102 -= 48;
            }
            while (v104 <= a5.n128_f32[0]);
LABEL_64:
            v12 = v101;
            if (v101 < (unint64_t)v103)
            {
              v107 = v103;
              do
              {
                v256 = *(_OWORD *)(v12 + 16);
                v288 = *(_OWORD *)(v12 + 32);
                v222 = *(__n128 *)v12;
                v108 = *(_OWORD *)v107;
                v109 = *((_OWORD *)v107 + 2);
                *(_OWORD *)(v12 + 16) = *((_OWORD *)v107 + 1);
                *(_OWORD *)(v12 + 32) = v109;
                *(_OWORD *)v12 = v108;
                *((_OWORD *)v107 + 1) = v256;
                *((_OWORD *)v107 + 2) = v288;
                *(__n128 *)v107 = v222;
                do
                {
                  v110 = *(float *)(v12 + 92);
                  v12 += 48;
                }
                while (v110 > a5.n128_f32[0]);
                do
                {
                  v111 = *(v107 - 1);
                  v107 -= 12;
                }
                while (v111 <= a5.n128_f32[0]);
              }
              while (v12 < (unint64_t)v107);
            }
          }
          v112 = (__n128 *)(v12 - 48);
          if (v12 - 48 != a1)
          {
            v113 = *v112;
            v114 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 32) = v114;
            *(__n128 *)a1 = v113;
          }
          *(_OWORD *)(v12 - 20) = *(_OWORD *)&v301[12];
          *v112 = v298;
          *(_OWORD *)(v12 - 32) = *(_OWORD *)v301;
          *(_DWORD *)(v12 - 4) = a5.n128_u32[0];
          if (v101 < (unint64_t)v103)
            goto LABEL_75;
          v115 = sub_20FD661C8(a1, v12 - 48, a5);
          if (!sub_20FD661C8(v12, a2, v116))
          {
            if (v115)
              continue;
LABEL_75:
            sub_20FD65168(a1, v12 - 48, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 48;
          if (v115)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v142 = (_OWORD *)(v12 + 48);
        v144 = v12 == a2 || v142 == (_OWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v144)
          {
            v145 = 0;
            v146 = (_OWORD *)v12;
            do
            {
              a5.n128_u32[0] = *((_DWORD *)v146 + 23);
              v148 = *((float *)v146 + 11);
              v146 = v142;
              if (a5.n128_f32[0] > v148)
              {
                *(_OWORD *)&v261[12] = *(_OWORD *)((char *)v142 + 28);
                v227 = *v142;
                *(_OWORD *)v261 = v142[1];
                v149 = v145;
                do
                {
                  v150 = (float *)(v12 + v149);
                  v151 = *(_OWORD *)(v12 + v149 + 16);
                  *((_OWORD *)v150 + 3) = *(_OWORD *)(v12 + v149);
                  *((_OWORD *)v150 + 4) = v151;
                  *((_OWORD *)v150 + 5) = *(_OWORD *)(v12 + v149 + 32);
                  if (!v149)
                  {
                    v147 = v12;
                    goto LABEL_117;
                  }
                  v149 -= 48;
                }
                while (a5.n128_f32[0] > *(v150 - 1));
                v147 = v12 + v149 + 48;
LABEL_117:
                *(_OWORD *)(v147 + 28) = *(_OWORD *)&v261[12];
                *(_OWORD *)v147 = v227;
                *(_OWORD *)(v147 + 16) = *(_OWORD *)v261;
                *(_DWORD *)(v147 + 44) = a5.n128_u32[0];
              }
              v142 = v146 + 3;
              v145 += 48;
            }
            while (v146 + 3 != (_OWORD *)a2);
          }
        }
        else if (!v144)
        {
          do
          {
            a5.n128_u32[0] = *(_DWORD *)(a1 + 92);
            v186 = *(float *)(a1 + 44);
            a1 = (uint64_t)v142;
            if (a5.n128_f32[0] > v186)
            {
              *(_OWORD *)&v266[12] = *(_OWORD *)((char *)v142 + 28);
              v231 = *v142;
              *(_OWORD *)v266 = v142[1];
              v187 = v142;
              do
              {
                v188 = *(v187 - 2);
                *v187 = *(v187 - 3);
                v187[1] = v188;
                v187[2] = *(v187 - 1);
                v189 = *((float *)v187 - 13);
                v187 -= 3;
              }
              while (a5.n128_f32[0] > v189);
              *(_OWORD *)((char *)v187 + 28) = *(_OWORD *)&v266[12];
              *v187 = v231;
              v187[1] = *(_OWORD *)v266;
              *((_DWORD *)v187 + 11) = a5.n128_u32[0];
            }
            v142 += 3;
          }
          while (a1 + 48 != a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v8 = a2 - 12;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v65 = *(a2 - 11);
        v66 = *(float *)(v9 + 4);
        if (v65 < v66 || (v65 == v66 ? (v67 = *v8 < *(float *)v9) : (v67 = 0), v67))
        {
          v191 = *(_OWORD *)(v9 + 16);
          v201 = *(_OWORD *)(v9 + 32);
          v182 = *(_OWORD *)v9;
          v68 = *(_OWORD *)v8;
          v69 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v9 + 16) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v9 + 32) = v69;
          *(_OWORD *)v9 = v68;
          *((_OWORD *)a2 - 2) = v191;
          *((_OWORD *)a2 - 1) = v201;
          *(_OWORD *)v8 = v182;
        }
        return;
      case 3:
        sub_20FD70828((float *)v9, (float *)(v9 + 48), a2 - 12);
        return;
      case 4:
        v70 = (__int128 *)(v9 + 48);
        v71 = (__int128 *)(v9 + 96);
        sub_20FD70828((float *)v9, (float *)(v9 + 48), (float *)(v9 + 96));
        v72 = *(a2 - 11);
        v73 = *(float *)(v9 + 100);
        if (v72 < v73 || (v72 == v73 ? (v74 = *v8 < *(float *)v71) : (v74 = 0), v74))
        {
          v75 = *v71;
          v192 = *(_OWORD *)(v9 + 112);
          v76 = *(_OWORD *)(v9 + 128);
          v77 = *(_OWORD *)v8;
          v78 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v9 + 112) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v9 + 128) = v78;
          *v71 = v77;
          *((_OWORD *)a2 - 2) = v192;
          *((_OWORD *)a2 - 1) = v76;
          *(_OWORD *)v8 = v75;
          v79 = *(float *)(v9 + 100);
          v80 = *(float *)(v9 + 52);
          if (v79 < v80 || v79 == v80 && *(float *)v71 < *(float *)v70)
          {
            v82 = *(_OWORD *)(v9 + 64);
            v81 = *(_OWORD *)(v9 + 80);
            v83 = *v70;
            v84 = *(_OWORD *)(v9 + 112);
            *v70 = *v71;
            *(_OWORD *)(v9 + 64) = v84;
            *(_OWORD *)(v9 + 80) = *(_OWORD *)(v9 + 128);
            *v71 = v83;
            *(_OWORD *)(v9 + 112) = v82;
            *(_OWORD *)(v9 + 128) = v81;
            v85 = *(float *)(v9 + 52);
            v86 = *(float *)(v9 + 4);
            if (v85 < v86 || v85 == v86 && *(float *)(v9 + 48) < *(float *)v9)
            {
              v193 = *(_OWORD *)(v9 + 16);
              v202 = *(_OWORD *)(v9 + 32);
              v183 = *(_OWORD *)v9;
              v87 = *(_OWORD *)(v9 + 64);
              *(_OWORD *)v9 = *v70;
              *(_OWORD *)(v9 + 16) = v87;
              *(_OWORD *)(v9 + 32) = *(_OWORD *)(v9 + 80);
              *v70 = v183;
              *(_OWORD *)(v9 + 64) = v193;
              *(_OWORD *)(v9 + 80) = v202;
            }
          }
        }
        return;
      case 5:
        sub_20FD7060C(v9, v9 + 48, v9 + 96, v9 + 144, (uint64_t)(a2 - 12));
        return;
      default:
        if (v10 > 1151)
        {
          if (!a3)
          {
            if ((float *)v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                v109 = v108;
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = v9 + 48 * v110;
                  if (2 * v109 + 2 < v11)
                  {
                    v112 = *(float *)(v111 + 4);
                    v113 = *(float *)(v111 + 52);
                    if (v112 < v113
                      || (v112 == v113 ? (v114 = *(float *)v111 < *(float *)(v111 + 48)) : (v114 = 0), v114))
                    {
                      v111 += 48;
                      v110 = 2 * v109 + 2;
                    }
                  }
                  v115 = v9 + 48 * v109;
                  v116 = *(float *)(v111 + 4);
                  v117 = *(float *)(v115 + 4);
                  v118 = v116 == v117;
                  if (v116 >= v117)
                  {
                    v119 = *(float *)v115;
                    if (!v118 || *(float *)v111 >= v119)
                    {
                      v204 = *(_QWORD *)(v115 + 40);
                      v185 = *(_OWORD *)(v115 + 8);
                      v195 = *(_OWORD *)(v115 + 24);
                      do
                      {
                        v121 = (_OWORD *)v115;
                        v115 = v111;
                        v122 = *(_OWORD *)v111;
                        v123 = *(_OWORD *)(v111 + 32);
                        v121[1] = *(_OWORD *)(v111 + 16);
                        v121[2] = v123;
                        *v121 = v122;
                        if (v107 < v110)
                          break;
                        v124 = 2 * v110;
                        v110 = (2 * v110) | 1;
                        v111 = v9 + 48 * v110;
                        v125 = v124 + 2;
                        if (v125 < v11)
                        {
                          v126 = *(float *)(v111 + 4);
                          v127 = *(float *)(v111 + 52);
                          if (v126 < v127
                            || (v126 == v127 ? (v128 = *(float *)v111 < *(float *)(v111 + 48)) : (v128 = 0), v128))
                          {
                            v111 += 48;
                            v110 = v125;
                          }
                        }
                        v129 = *(float *)(v111 + 4);
                        if (v129 < v117)
                          break;
                      }
                      while (v129 != v117 || *(float *)v111 >= v119);
                      *(float *)v115 = v119;
                      *(float *)(v115 + 4) = v117;
                      *(_QWORD *)(v115 + 40) = v204;
                      *(_OWORD *)(v115 + 24) = v195;
                      *(_OWORD *)(v115 + 8) = v185;
                    }
                  }
                }
                v108 = v109 - 1;
              }
              while (v109);
              v131 = v10 / 0x30uLL;
              do
              {
                v133 = 0;
                v196 = *(_OWORD *)(v9 + 16);
                v205 = *(_OWORD *)(v9 + 32);
                v186 = *(_OWORD *)v9;
                v134 = v9;
                do
                {
                  v137 = (_OWORD *)v134;
                  v134 += 48 * v133 + 48;
                  v138 = 2 * v133;
                  v133 = (2 * v133) | 1;
                  v139 = v138 + 2;
                  if (v139 < v131)
                  {
                    v140 = *(float *)(v134 + 4);
                    v141 = *(float *)(v134 + 52);
                    if (v140 < v141
                      || (v140 == v141 ? (v142 = *(float *)v134 < *(float *)(v134 + 48)) : (v142 = 0), v142))
                    {
                      v134 += 48;
                      v133 = v139;
                    }
                  }
                  v135 = *(_OWORD *)v134;
                  v136 = *(_OWORD *)(v134 + 32);
                  v137[1] = *(_OWORD *)(v134 + 16);
                  v137[2] = v136;
                  *v137 = v135;
                }
                while (v133 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                a2 -= 12;
                if ((float *)v134 == a2)
                {
                  *(_OWORD *)(v134 + 16) = v196;
                  *(_OWORD *)(v134 + 32) = v205;
                  *(_OWORD *)v134 = v186;
                }
                else
                {
                  v143 = *(_OWORD *)a2;
                  v144 = *((_OWORD *)a2 + 2);
                  *(_OWORD *)(v134 + 16) = *((_OWORD *)a2 + 1);
                  *(_OWORD *)(v134 + 32) = v144;
                  *(_OWORD *)v134 = v143;
                  *((_OWORD *)a2 + 1) = v196;
                  *((_OWORD *)a2 + 2) = v205;
                  *(_OWORD *)a2 = v186;
                  v145 = v134 - v9 + 48;
                  if (v145 >= 49)
                  {
                    v146 = v145 / 0x30uLL - 2;
                    v147 = v146 >> 1;
                    v148 = v9 + 48 * (v146 >> 1);
                    v149 = *(float *)(v148 + 4);
                    v150 = *(float *)v134;
                    v151 = *(float *)(v134 + 4);
                    if (v149 < v151 || (v149 == v151 ? (v152 = *(float *)v148 < v150) : (v152 = 0), v152))
                    {
                      v178 = *(_QWORD *)(v134 + 40);
                      v172 = *(_OWORD *)(v134 + 8);
                      v175 = *(_OWORD *)(v134 + 24);
                      v153 = *(_OWORD *)v148;
                      v154 = *(_OWORD *)(v148 + 32);
                      *(_OWORD *)(v134 + 16) = *(_OWORD *)(v148 + 16);
                      *(_OWORD *)(v134 + 32) = v154;
                      *(_OWORD *)v134 = v153;
                      if (v146 >= 2)
                      {
                        while (1)
                        {
                          v157 = v147 - 1;
                          v147 = (v147 - 1) >> 1;
                          v158 = v9 + 48 * v147;
                          v159 = *(float *)(v158 + 4);
                          if (v159 >= v151 && (v159 != v151 || *(float *)v158 >= v150))
                            break;
                          v155 = *(_OWORD *)v158;
                          v156 = *(_OWORD *)(v158 + 32);
                          *(_OWORD *)(v148 + 16) = *(_OWORD *)(v158 + 16);
                          *(_OWORD *)(v148 + 32) = v156;
                          *(_OWORD *)v148 = v155;
                          v148 = v9 + 48 * v147;
                          if (v157 <= 1)
                            goto LABEL_220;
                        }
                      }
                      v158 = v148;
LABEL_220:
                      *(float *)v158 = v150;
                      *(float *)(v158 + 4) = v151;
                      *(_QWORD *)(v158 + 40) = v178;
                      *(_OWORD *)(v158 + 24) = v175;
                      *(_OWORD *)(v158 + 8) = v172;
                    }
                  }
                }
              }
              while (v131-- > 2);
            }
            return;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 48 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 >= 0x1801)
          {
            sub_20FD70828((float *)a1, (float *)v13, a2 - 12);
            v14 = 48 * v12;
            v15 = (float *)(48 * v12 + a1 - 48);
            sub_20FD70828((float *)(a1 + 48), v15, a2 - 24);
            v16 = (float *)(a1 + 48 + v14);
            sub_20FD70828((float *)(a1 + 96), v16, a2 - 36);
            sub_20FD70828(v15, (float *)v13, v16);
            v188 = *(_OWORD *)(a1 + 16);
            v198 = *(_OWORD *)(a1 + 32);
            v179 = *(_OWORD *)a1;
            v17 = *(_OWORD *)(v13 + 32);
            v18 = *(_OWORD *)v13;
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v13 + 16);
            *(_OWORD *)(a1 + 32) = v17;
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(v13 + 16) = v188;
            *(_OWORD *)(v13 + 32) = v198;
            *(_OWORD *)v13 = v179;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v19 = *(float *)(a1 - 44);
            v21 = *(float *)a1;
            v20 = *(float *)(a1 + 4);
            if (v19 < v20 || v19 == v20 && *(float *)(a1 - 48) < v21)
              goto LABEL_24;
            v176 = *(_QWORD *)(a1 + 40);
            v170 = *(_OWORD *)(a1 + 8);
            v173 = *(_OWORD *)(a1 + 24);
            v22 = *(a2 - 11);
            if (v20 < v22 || v20 == v22 && v21 < *v8)
            {
              v23 = a1 + 48;
              do
              {
                v9 = v23;
                v24 = *(float *)(v23 + 4);
                if (v20 < v24)
                  break;
                v23 += 48;
              }
              while (v20 != v24 || v21 >= *(float *)v9);
            }
            else
            {
              v62 = a1 + 48;
              do
              {
                v9 = v62;
                if (v62 >= (unint64_t)a2)
                  break;
                v63 = *(float *)(v62 + 4);
                if (v20 < v63)
                  break;
                v62 += 48;
              }
              while (v20 != v63 || v21 >= *(float *)v9);
            }
            v26 = a2;
            if (v9 < (unint64_t)a2)
            {
              for (i = a2 - 23; v20 < v22 || v20 == v22 && v21 < i[11]; i -= 12)
              {
                v48 = *i;
                v22 = v48;
              }
              v26 = i + 11;
            }
            while (v9 < (unint64_t)v26)
            {
              v190 = *(_OWORD *)(v9 + 16);
              v200 = *(_OWORD *)(v9 + 32);
              v181 = *(_OWORD *)v9;
              v53 = *(_OWORD *)v26;
              v54 = *((_OWORD *)v26 + 2);
              *(_OWORD *)(v9 + 16) = *((_OWORD *)v26 + 1);
              *(_OWORD *)(v9 + 32) = v54;
              *(_OWORD *)v9 = v53;
              *((_OWORD *)v26 + 1) = v190;
              *((_OWORD *)v26 + 2) = v200;
              *(_OWORD *)v26 = v181;
              v55 = v9 + 48;
              do
              {
                v9 = v55;
                v56 = *(float *)(v55 + 4);
                if (v20 < v56)
                  break;
                v55 += 48;
              }
              while (v20 != v56 || v21 >= *(float *)v9);
              do
              {
                do
                {
                  v26 -= 12;
                  v58 = v26[1];
                }
                while (v20 < v58);
              }
              while (v20 == v58 && v21 < *v26);
            }
            if (v9 - 48 != a1)
            {
              v60 = *(_OWORD *)(v9 - 48);
              v61 = *(_OWORD *)(v9 - 16);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 32);
              *(_OWORD *)(a1 + 32) = v61;
              *(_OWORD *)a1 = v60;
            }
            a4 = 0;
            *(float *)(v9 - 48) = v21;
            *(float *)(v9 - 44) = v20;
            *(_QWORD *)(v9 - 8) = v176;
            *(_OWORD *)(v9 - 24) = v173;
            *(_OWORD *)(v9 - 40) = v170;
            continue;
          }
          sub_20FD70828((float *)v13, (float *)a1, a2 - 12);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v21 = *(float *)a1;
          v20 = *(float *)(a1 + 4);
LABEL_24:
          v28 = 0;
          v177 = *(_QWORD *)(a1 + 40);
          v171 = *(_OWORD *)(a1 + 8);
          v174 = *(_OWORD *)(a1 + 24);
          while (1)
          {
            v29 = *(float *)(a1 + v28 + 52);
            if (v29 >= v20 && (v29 != v20 || *(float *)(a1 + v28 + 48) >= v21))
              break;
            v28 += 48;
          }
          v31 = a1 + v28 + 48;
          v32 = a2 - 12;
          if (v28)
          {
            do
            {
              v33 = v32;
              v34 = v32[1];
              if (v34 < v20)
                break;
              v32 -= 12;
            }
            while (v34 != v20 || *v33 >= v21);
LABEL_47:
            v9 = v31;
            if (v31 < (unint64_t)v33)
            {
              v40 = v33;
              do
              {
                v189 = *(_OWORD *)(v9 + 16);
                v199 = *(_OWORD *)(v9 + 32);
                v180 = *(_OWORD *)v9;
                v41 = *(_OWORD *)v40;
                v42 = *((_OWORD *)v40 + 2);
                *(_OWORD *)(v9 + 16) = *((_OWORD *)v40 + 1);
                *(_OWORD *)(v9 + 32) = v42;
                *(_OWORD *)v9 = v41;
                *((_OWORD *)v40 + 1) = v189;
                *((_OWORD *)v40 + 2) = v199;
                *(_OWORD *)v40 = v180;
                do
                {
                  do
                  {
                    v9 += 48;
                    v43 = *(float *)(v9 + 4);
                  }
                  while (v43 < v20);
                }
                while (v43 == v20 && *(float *)v9 < v21);
                v45 = v40 - 12;
                do
                {
                  v40 = v45;
                  v46 = v45[1];
                  if (v46 < v20)
                    break;
                  v45 -= 12;
                }
                while (v46 != v20 || *v40 >= v21);
              }
              while (v9 < (unint64_t)v40);
            }
          }
          else
          {
            v36 = a2 - 12;
            while (1)
            {
              v33 = v36;
              v37 = v36 + 12;
              if (v31 >= (unint64_t)v37)
                break;
              v38 = v33[1];
              if (v38 >= v20)
              {
                v36 = v33 - 12;
                if (v38 != v20 || *v33 >= v21)
                  continue;
              }
              goto LABEL_47;
            }
            v33 = v37;
            v9 = v31;
          }
          if (v9 - 48 != a1)
          {
            v50 = *(_OWORD *)(v9 - 48);
            v51 = *(_OWORD *)(v9 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 32);
            *(_OWORD *)(a1 + 32) = v51;
            *(_OWORD *)a1 = v50;
          }
          *(float *)(v9 - 48) = v21;
          *(float *)(v9 - 44) = v20;
          *(_QWORD *)(v9 - 8) = v177;
          *(_OWORD *)(v9 - 24) = v174;
          *(_OWORD *)(v9 - 40) = v171;
          if (v31 < (unint64_t)v33)
            goto LABEL_77;
          v52 = sub_20FD7096C(a1, v9 - 48);
          if (!sub_20FD7096C(v9, (uint64_t)a2))
          {
            if (v52)
              continue;
LABEL_77:
            sub_20FD6FB04(a1, v9 - 48, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (float *)(v9 - 48);
          if (v52)
            return;
          goto LABEL_1;
        }
        v88 = (float *)(v9 + 48);
        v90 = (float *)v9 == a2 || v88 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v90)
          {
            v91 = 0;
            v92 = v9;
            do
            {
              v94 = v88;
              v95 = *(float *)(v92 + 48);
              v96 = *(float *)(v92 + 52);
              v97 = *(float *)(v92 + 4);
              if (v96 < v97 || (v96 == v97 ? (v98 = v95 < *(float *)v92) : (v98 = 0), v98))
              {
                v203 = *(_QWORD *)(v92 + 88);
                v184 = *(_OWORD *)(v92 + 56);
                v194 = *(_OWORD *)(v92 + 72);
                v99 = *(_OWORD *)(v92 + 32);
                v100 = *(_OWORD *)v92;
                *((_OWORD *)v88 + 1) = *(_OWORD *)(v92 + 16);
                *((_OWORD *)v88 + 2) = v99;
                *(_OWORD *)v88 = v100;
                v93 = v9;
                if (v92 != v9)
                {
                  v101 = v91;
                  while (1)
                  {
                    v103 = (_OWORD *)(v9 + v101);
                    v104 = (float *)(v9 + v101 - 48);
                    v105 = *(float *)(v9 + v101 - 44);
                    if (v96 >= v105 && (v96 != v105 || v95 >= *v104))
                      break;
                    v102 = *(_OWORD *)(v9 + v101 - 32);
                    *v103 = *(_OWORD *)v104;
                    v103[1] = v102;
                    v103[2] = *(_OWORD *)(v9 + v101 - 16);
                    v101 -= 48;
                    if (!v101)
                    {
                      v93 = v9;
                      goto LABEL_138;
                    }
                  }
                  v93 = v9 + v101;
                }
LABEL_138:
                *(float *)v93 = v95;
                *(float *)(v93 + 4) = v96;
                *(_QWORD *)(v93 + 40) = v203;
                *(_OWORD *)(v93 + 24) = v194;
                *(_OWORD *)(v93 + 8) = v184;
              }
              v88 = v94 + 12;
              v91 += 48;
              v92 = (unint64_t)v94;
            }
            while (v94 + 12 != a2);
          }
        }
        else if (!v90)
        {
          do
          {
            v161 = v88;
            v162 = *(float *)(a1 + 48);
            v163 = *(float *)(a1 + 52);
            v164 = *(float *)(a1 + 4);
            if (v163 < v164 || (v163 == v164 ? (v165 = v162 < *(float *)a1) : (v165 = 0), v165))
            {
              v187 = *(_OWORD *)(a1 + 56);
              v197 = *(_OWORD *)(a1 + 72);
              v206 = *(_QWORD *)(a1 + 88);
              do
              {
                do
                {
                  v166 = a1;
                  v167 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 48) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 64) = v167;
                  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
                  a1 -= 48;
                  v168 = *(float *)(v166 - 44);
                }
                while (v163 < v168);
              }
              while (v163 == v168 && v162 < *(float *)(v166 - 48));
              *(float *)v166 = v162;
              *(float *)(v166 + 4) = v163;
              *(_QWORD *)(v166 + 40) = v206;
              *(_OWORD *)(v166 + 24) = v197;
              *(_OWORD *)(v166 + 8) = v187;
            }
            v88 += 12;
            a1 = (uint64_t)v161;
          }
          while (v161 + 12 != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 3;
  v307 = a2 - 9;
  v308 = a2 - 6;
  v10 = (__n128 *)a1;
  v309 = a2;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v9, (__n128 *)a1))
          goto LABEL_103;
        return;
      case 3uLL:
        v202 = (__n128 *)(a1 + 48);
        v203 = (*a3)((__n128 *)(a1 + 48), (__n128 *)a1);
        v204 = (*a3)(v9, (__n128 *)(a1 + 48));
        if ((v203 & 1) != 0)
        {
          if (v204)
          {
LABEL_103:
            v205 = *(__n128 *)a1;
            v206 = *(__n128 *)(a1 + 32);
            v317 = *(__n128 *)(a1 + 16);
            v318 = v206;
            v316 = v205;
            v207 = *v9;
            v208 = v9[2];
            *(__n128 *)(a1 + 16) = v9[1];
            *(__n128 *)(a1 + 32) = v208;
            *(__n128 *)a1 = v207;
            v209 = v316;
            v210 = v317;
            v211 = v318;
LABEL_104:
            v9[1] = v210;
            v9[2] = v211;
            *v9 = v209;
            return;
          }
          v301 = *(__n128 *)a1;
          v302 = *(__n128 *)(a1 + 32);
          v317 = *(__n128 *)(a1 + 16);
          v318 = v302;
          v316 = v301;
          v303 = *(_OWORD *)(a1 + 64);
          *(__n128 *)a1 = *v202;
          *(_OWORD *)(a1 + 16) = v303;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          v304 = v317;
          *v202 = v316;
          *(__n128 *)(a1 + 64) = v304;
          *(__n128 *)(a1 + 80) = v318;
          if ((*a3)(v9, (__n128 *)(a1 + 48)))
          {
            v209 = *v202;
            v210 = *(__n128 *)(a1 + 64);
            v316 = *v202;
            v317 = v210;
            v211 = *(__n128 *)(a1 + 80);
            v318 = v211;
            v305 = *v9;
            v306 = v9[2];
            *(__n128 *)(a1 + 64) = v9[1];
            *(__n128 *)(a1 + 80) = v306;
            *v202 = v305;
            goto LABEL_104;
          }
        }
        else if (v204)
        {
          v284 = *(__n128 *)(a1 + 64);
          v316 = *v202;
          v283 = v316;
          v317 = v284;
          v318 = *(__n128 *)(a1 + 80);
          v285 = v318;
          v286 = *v9;
          v287 = v9[2];
          *(__n128 *)(a1 + 64) = v9[1];
          *(__n128 *)(a1 + 80) = v287;
          *v202 = v286;
          v9[1] = v284;
          v9[2] = v285;
          *v9 = v283;
          goto LABEL_161;
        }
        return;
      case 4uLL:
        sub_20FD85B44((__n128 *)a1, (__n128 *)(a1 + 48), (__n128 *)(a1 + 96), v9, a3);
        return;
      case 5uLL:
        v202 = (__n128 *)(a1 + 48);
        v212 = (__n128 *)(a1 + 96);
        v213 = (__n128 *)(a1 + 144);
        v214 = sub_20FD85B44((__n128 *)a1, (__n128 *)(a1 + 48), (__n128 *)(a1 + 96), (__n128 *)(a1 + 144), a3);
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a3)(v9, a1 + 144, v214))
        {
          v216 = *(__n128 *)(a1 + 160);
          v316 = *v213;
          v215 = v316;
          v317 = v216;
          v318 = *(__n128 *)(a1 + 176);
          v217 = v318;
          v218 = *v9;
          v219 = v9[2];
          *(__n128 *)(a1 + 160) = v9[1];
          *(__n128 *)(a1 + 176) = v219;
          *v213 = v218;
          v9[1] = v216;
          v9[2] = v217;
          *v9 = v215;
          if ((*a3)((__n128 *)(a1 + 144), (__n128 *)(a1 + 96)))
          {
            v221 = *(_OWORD *)(a1 + 112);
            v220 = *(_OWORD *)(a1 + 128);
            v222 = *v212;
            v223 = *(_OWORD *)(a1 + 160);
            *v212 = *v213;
            *(_OWORD *)(a1 + 112) = v223;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
            *v213 = v222;
            *(_OWORD *)(a1 + 160) = v221;
            *(_OWORD *)(a1 + 176) = v220;
            if ((*a3)((__n128 *)(a1 + 96), (__n128 *)(a1 + 48)))
            {
              v225 = *(_OWORD *)(a1 + 64);
              v224 = *(_OWORD *)(a1 + 80);
              v226 = *v202;
              v227 = *(_OWORD *)(a1 + 112);
              *v202 = *v212;
              *(_OWORD *)(a1 + 64) = v227;
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
              *v212 = v226;
              *(_OWORD *)(a1 + 112) = v225;
              *(_OWORD *)(a1 + 128) = v224;
LABEL_161:
              if ((*a3)(v202, (__n128 *)a1))
              {
                v288 = *(__n128 *)a1;
                v289 = *(__n128 *)(a1 + 32);
                v317 = *(__n128 *)(a1 + 16);
                v318 = v289;
                v316 = v288;
                v290 = v202[1];
                *(__n128 *)a1 = *v202;
                *(__n128 *)(a1 + 16) = v290;
                *(__n128 *)(a1 + 32) = v202[2];
                v291 = v317;
                *v202 = v316;
                v202[1] = v291;
                v202[2] = v318;
              }
            }
          }
        }
        return;
      default:
        if (v11 > 1151)
        {
          if (!a4)
          {
            if ((__n128 *)a1 != a2)
            {
              v242 = (v12 - 2) >> 1;
              v312 = v242;
              do
              {
                if (v312 >= v242)
                {
                  v246 = (2 * v242) | 1;
                  v247 = (__n128 *)(a1 + 48 * v246);
                  if (2 * v242 + 2 < (uint64_t)v12 && (*a3)((__n128 *)(a1 + 48 * v246), v247 + 3))
                  {
                    v247 += 3;
                    v246 = 2 * v242 + 2;
                  }
                  v248 = (__n128 *)(a1 + 48 * v242);
                  if (((*a3)(v247, v248) & 1) == 0)
                  {
                    v249 = *v248;
                    v250 = v248[2];
                    v317 = v248[1];
                    v318 = v250;
                    v316 = v249;
                    do
                    {
                      v251 = v247;
                      v252 = *v247;
                      v253 = v247[2];
                      v248[1] = v247[1];
                      v248[2] = v253;
                      *v248 = v252;
                      if (v312 < v246)
                        break;
                      v254 = (2 * v246) | 1;
                      v247 = (__n128 *)(a1 + 48 * v254);
                      v255 = 2 * v246 + 2;
                      if (v255 < (uint64_t)v12 && (*a3)((__n128 *)(a1 + 48 * v254), v247 + 3))
                      {
                        v247 += 3;
                        v254 = v255;
                      }
                      v248 = v251;
                      v246 = v254;
                    }
                    while (!(*a3)(v247, &v316));
                    v243 = v316;
                    v244 = v318;
                    v251[1] = v317;
                    v251[2] = v244;
                    *v251 = v243;
                  }
                }
                v245 = v242-- <= 0;
              }
              while (!v245);
              v256 = v11 / 0x30uLL;
              v257 = v309;
              do
              {
                v310 = v257;
                v260 = 0;
                v261 = *(__n128 *)a1;
                v262 = *(__n128 *)(a1 + 32);
                v314 = *(__n128 *)(a1 + 16);
                v315 = v262;
                v313 = v261;
                v263 = (_OWORD *)a1;
                do
                {
                  v266 = (__n128 *)&v263[3 * v260 + 3];
                  v267 = (2 * v260) | 1;
                  v268 = 2 * v260 + 2;
                  if (v268 < v256 && (*a3)((__n128 *)&v263[3 * v260 + 3], (__n128 *)&v263[3 * v260 + 6]))
                  {
                    v266 += 3;
                    v267 = v268;
                  }
                  v264 = *v266;
                  v265 = v266[2];
                  v263[1] = v266[1];
                  v263[2] = v265;
                  *v263 = v264;
                  v263 = v266;
                  v260 = v267;
                }
                while (v267 <= (uint64_t)((unint64_t)(v256 - 2) >> 1));
                v257 = v310 - 3;
                if (v266 == &v310[-3])
                {
                  v258 = v313;
                  v259 = v315;
                  v266[1] = v314;
                  v266[2] = v259;
                  *v266 = v258;
                }
                else
                {
                  v269 = *v257;
                  v270 = v310[-1];
                  v266[1] = v310[-2];
                  v266[2] = v270;
                  *v266 = v269;
                  v271 = v313;
                  v272 = v315;
                  v310[-2] = v314;
                  v310[-1] = v272;
                  *v257 = v271;
                  v273 = (uint64_t)&v266[3] - a1;
                  if (v273 >= 49)
                  {
                    v274 = (v273 / 0x30uLL - 2) >> 1;
                    v275 = (__n128 *)(a1 + 48 * v274);
                    if ((*a3)(v275, v266))
                    {
                      v276 = *v266;
                      v277 = v266[2];
                      v317 = v266[1];
                      v318 = v277;
                      v316 = v276;
                      do
                      {
                        v278 = v275;
                        v279 = *v275;
                        v280 = v275[2];
                        v266[1] = v275[1];
                        v266[2] = v280;
                        *v266 = v279;
                        if (!v274)
                          break;
                        v274 = (v274 - 1) >> 1;
                        v275 = (__n128 *)(a1 + 48 * v274);
                        v266 = v278;
                      }
                      while (((*a3)(v275, &v316) & 1) != 0);
                      v281 = v316;
                      v282 = v318;
                      v278[1] = v317;
                      v278[2] = v282;
                      *v278 = v281;
                    }
                  }
                }
                v245 = v256-- <= 2;
              }
              while (!v245);
            }
            return;
          }
          v13 = v12 >> 1;
          v14 = (__n128 *)(a1 + 48 * (v12 >> 1));
          v15 = *a3;
          if ((unint64_t)v11 < 0x1801)
          {
            v22 = v15((__n128 *)a1, (__n128 *)(a1 + 48 * (v12 >> 1)));
            v23 = (*a3)(v9, (__n128 *)a1);
            if ((v22 & 1) == 0)
            {
              if (v23)
              {
                v40 = *(__n128 *)a1;
                v41 = *(__n128 *)(a1 + 32);
                v317 = *(__n128 *)(a1 + 16);
                v318 = v41;
                v316 = v40;
                v42 = *v9;
                v43 = v9[2];
                *(__n128 *)(a1 + 16) = v9[1];
                *(__n128 *)(a1 + 32) = v43;
                *(__n128 *)a1 = v42;
                v44 = v316;
                v45 = v318;
                v9[1] = v317;
                v9[2] = v45;
                *v9 = v44;
                if ((*a3)((__n128 *)a1, v14))
                {
                  v46 = *v14;
                  v47 = v14[2];
                  v317 = v14[1];
                  v318 = v47;
                  v316 = v46;
                  v48 = *(__n128 *)a1;
                  v49 = *(__n128 *)(a1 + 32);
                  v14[1] = *(__n128 *)(a1 + 16);
                  v14[2] = v49;
                  *v14 = v48;
                  v50 = v316;
                  v51 = v318;
                  *(__n128 *)(a1 + 16) = v317;
                  *(__n128 *)(a1 + 32) = v51;
                  *(__n128 *)a1 = v50;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v23)
            {
              v24 = *v14;
              v25 = v14[2];
              v317 = v14[1];
              v318 = v25;
              v316 = v24;
              v26 = *v9;
              v27 = v9[2];
              v14[1] = v9[1];
              v14[2] = v27;
              *v14 = v26;
            }
            else
            {
              v85 = *v14;
              v86 = v14[2];
              v317 = v14[1];
              v318 = v86;
              v316 = v85;
              v87 = *(__n128 *)a1;
              v88 = *(__n128 *)(a1 + 32);
              v14[1] = *(__n128 *)(a1 + 16);
              v14[2] = v88;
              *v14 = v87;
              v89 = v316;
              v90 = v318;
              *(__n128 *)(a1 + 16) = v317;
              *(__n128 *)(a1 + 32) = v90;
              *(__n128 *)a1 = v89;
              if (!(*a3)(v9, (__n128 *)a1))
                goto LABEL_31;
              v91 = *(__n128 *)a1;
              v92 = *(__n128 *)(a1 + 32);
              v317 = *(__n128 *)(a1 + 16);
              v318 = v92;
              v316 = v91;
              v93 = *v9;
              v94 = v9[2];
              *(__n128 *)(a1 + 16) = v9[1];
              *(__n128 *)(a1 + 32) = v94;
              *(__n128 *)a1 = v93;
            }
            v95 = v316;
            v96 = v318;
            v9[1] = v317;
            v9[2] = v96;
            *v9 = v95;
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = v15((__n128 *)(a1 + 48 * (v12 >> 1)), (__n128 *)a1);
          v17 = (*a3)(v9, v14);
          if ((v16 & 1) != 0)
          {
            if (v17)
            {
              v18 = *(__n128 *)a1;
              v19 = *(__n128 *)(a1 + 32);
              v317 = *(__n128 *)(a1 + 16);
              v318 = v19;
              v316 = v18;
              v20 = *v9;
              v21 = v9[2];
              *(__n128 *)(a1 + 16) = v9[1];
              *(__n128 *)(a1 + 32) = v21;
              *(__n128 *)a1 = v20;
            }
            else
            {
              v52 = *(__n128 *)a1;
              v53 = *(__n128 *)(a1 + 32);
              v317 = *(__n128 *)(a1 + 16);
              v318 = v53;
              v316 = v52;
              v54 = *v14;
              v55 = v14[2];
              *(__n128 *)(a1 + 16) = v14[1];
              *(__n128 *)(a1 + 32) = v55;
              *(__n128 *)a1 = v54;
              v56 = v316;
              v57 = v318;
              v14[1] = v317;
              v14[2] = v57;
              *v14 = v56;
              if (!(*a3)(v9, v14))
                goto LABEL_22;
              v58 = *v14;
              v59 = v14[2];
              v317 = v14[1];
              v318 = v59;
              v316 = v58;
              v60 = *v9;
              v61 = v9[2];
              v14[1] = v9[1];
              v14[2] = v61;
              *v14 = v60;
            }
            v62 = v316;
            v63 = v318;
            v9[1] = v317;
            v9[2] = v63;
            *v9 = v62;
          }
          else if (v17)
          {
            v28 = *v14;
            v29 = v14[2];
            v317 = v14[1];
            v318 = v29;
            v316 = v28;
            v30 = *v9;
            v31 = v9[2];
            v14[1] = v9[1];
            v14[2] = v31;
            *v14 = v30;
            v32 = v316;
            v33 = v318;
            v9[1] = v317;
            v9[2] = v33;
            *v9 = v32;
            if ((*a3)(v14, (__n128 *)a1))
            {
              v34 = *(__n128 *)a1;
              v35 = *(__n128 *)(a1 + 32);
              v317 = *(__n128 *)(a1 + 16);
              v318 = v35;
              v316 = v34;
              v36 = *v14;
              v37 = v14[2];
              *(__n128 *)(a1 + 16) = v14[1];
              *(__n128 *)(a1 + 32) = v37;
              *(__n128 *)a1 = v36;
              v38 = v316;
              v39 = v318;
              v14[1] = v317;
              v14[2] = v39;
              *v14 = v38;
            }
          }
LABEL_22:
          v64 = (__n128 *)(a1 + 48);
          v65 = (__n128 *)(a1 + 48 * v13 - 48);
          v66 = (*a3)(v65, (__n128 *)(a1 + 48));
          v67 = (*a3)(v308, v65);
          if ((v66 & 1) != 0)
          {
            if (v67)
            {
              v68 = *v64;
              v69 = *(__n128 *)(a1 + 64);
              v316 = *v64;
              v317 = v69;
              v70 = *(__n128 *)(a1 + 80);
              v318 = v70;
              v71 = v308;
              v72 = *v308;
              v73 = v308[2];
              *(__n128 *)(a1 + 64) = v308[1];
              *(__n128 *)(a1 + 80) = v73;
              *v64 = v72;
            }
            else
            {
              v98 = *(__n128 *)(a1 + 64);
              v316 = *v64;
              v97 = v316;
              v317 = v98;
              v318 = *(__n128 *)(a1 + 80);
              v99 = v318;
              v100 = *v65;
              v101 = *(_OWORD *)(a1 + 48 * v13 - 16);
              *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 48 * v13 - 32);
              *(_OWORD *)(a1 + 80) = v101;
              *v64 = v100;
              *(__n128 *)(a1 + 48 * v13 - 32) = v98;
              *(__n128 *)(a1 + 48 * v13 - 16) = v99;
              *v65 = v97;
              if (!(*a3)(v308, (__n128 *)(a1 + 48 * v13 - 48)))
                goto LABEL_36;
              v102 = *v65;
              v103 = *(__n128 *)(a1 + 48 * v13 - 16);
              v317 = *(__n128 *)(a1 + 48 * v13 - 32);
              v318 = v103;
              v316 = v102;
              v71 = v308;
              v104 = *v308;
              v105 = v308[2];
              *(__n128 *)(a1 + 48 * v13 - 32) = v308[1];
              *(__n128 *)(a1 + 48 * v13 - 16) = v105;
              *v65 = v104;
              v68 = v316;
              v69 = v317;
              v70 = v318;
            }
            v71[1] = v69;
            v71[2] = v70;
            *v71 = v68;
          }
          else if (v67)
          {
            v74 = *v65;
            v75 = *(__n128 *)(a1 + 48 * v13 - 16);
            v317 = *(__n128 *)(a1 + 48 * v13 - 32);
            v318 = v75;
            v316 = v74;
            v76 = *v308;
            v77 = v308[2];
            *(__n128 *)(a1 + 48 * v13 - 32) = v308[1];
            *(__n128 *)(a1 + 48 * v13 - 16) = v77;
            *v65 = v76;
            v78 = v316;
            v79 = v318;
            v308[1] = v317;
            v308[2] = v79;
            *v308 = v78;
            if ((*a3)((__n128 *)(a1 + 48 * v13 - 48), (__n128 *)(a1 + 48)))
            {
              v81 = *(__n128 *)(a1 + 64);
              v316 = *v64;
              v80 = v316;
              v317 = v81;
              v318 = *(__n128 *)(a1 + 80);
              v82 = v318;
              v83 = *v65;
              v84 = *(_OWORD *)(a1 + 48 * v13 - 16);
              *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 48 * v13 - 32);
              *(_OWORD *)(a1 + 80) = v84;
              *v64 = v83;
              *(__n128 *)(a1 + 48 * v13 - 32) = v81;
              *(__n128 *)(a1 + 48 * v13 - 16) = v82;
              *v65 = v80;
            }
          }
LABEL_36:
          v106 = (__n128 *)(a1 + 96);
          v107 = (__n128 *)(a1 + 48 * v13 + 48);
          v108 = (*a3)(v107, (__n128 *)(a1 + 96));
          v109 = (*a3)(v307, v107);
          if ((v108 & 1) != 0)
          {
            if (v109)
            {
              v110 = *v106;
              v111 = *(__n128 *)(a1 + 112);
              v316 = *v106;
              v317 = v111;
              v112 = *(__n128 *)(a1 + 128);
              v318 = v112;
              v113 = v307;
              v114 = *v307;
              v115 = v307[2];
              *(__n128 *)(a1 + 112) = v307[1];
              *(__n128 *)(a1 + 128) = v115;
              *v106 = v114;
            }
            else
            {
              v128 = *(__n128 *)(a1 + 112);
              v316 = *v106;
              v127 = v316;
              v317 = v128;
              v318 = *(__n128 *)(a1 + 128);
              v129 = v318;
              v130 = *v107;
              v131 = v107[2];
              *(__n128 *)(a1 + 112) = v107[1];
              *(__n128 *)(a1 + 128) = v131;
              *v106 = v130;
              v107[1] = v128;
              v107[2] = v129;
              *v107 = v127;
              if (!(*a3)(v307, v107))
                goto LABEL_45;
              v132 = *v107;
              v133 = v107[2];
              v317 = v107[1];
              v318 = v133;
              v316 = v132;
              v113 = v307;
              v134 = *v307;
              v135 = v307[2];
              v107[1] = v307[1];
              v107[2] = v135;
              *v107 = v134;
              v110 = v316;
              v111 = v317;
              v112 = v318;
            }
            v113[1] = v111;
            v113[2] = v112;
            *v113 = v110;
          }
          else if (v109)
          {
            v116 = *v107;
            v117 = v107[2];
            v317 = v107[1];
            v318 = v117;
            v316 = v116;
            v118 = *v307;
            v119 = v307[2];
            v107[1] = v307[1];
            v107[2] = v119;
            *v107 = v118;
            v120 = v316;
            v121 = v318;
            v307[1] = v317;
            v307[2] = v121;
            *v307 = v120;
            if ((*a3)(v107, (__n128 *)(a1 + 96)))
            {
              v123 = *(__n128 *)(a1 + 112);
              v316 = *v106;
              v122 = v316;
              v317 = v123;
              v318 = *(__n128 *)(a1 + 128);
              v124 = v318;
              v125 = *v107;
              v126 = v107[2];
              *(__n128 *)(a1 + 112) = v107[1];
              *(__n128 *)(a1 + 128) = v126;
              *v106 = v125;
              v107[1] = v123;
              v107[2] = v124;
              *v107 = v122;
            }
          }
LABEL_45:
          v136 = (*a3)(v14, v65);
          v137 = (*a3)(v107, v14);
          if ((v136 & 1) != 0)
          {
            if (v137)
            {
              v138 = *v65;
              v139 = v65[2];
              v317 = v65[1];
              v318 = v139;
              v316 = v138;
              v140 = v107[1];
              *v65 = *v107;
              v65[1] = v140;
              v65[2] = v107[2];
            }
            else
            {
              v151 = *v65;
              v152 = v65[2];
              v317 = v65[1];
              v318 = v152;
              v316 = v151;
              v153 = v14[1];
              *v65 = *v14;
              v65[1] = v153;
              v65[2] = v14[2];
              v154 = v318;
              v155 = v316;
              v14[1] = v317;
              v14[2] = v154;
              *v14 = v155;
              if (!(*a3)(v107, v14))
                goto LABEL_54;
              v156 = *v14;
              v157 = v14[2];
              v317 = v14[1];
              v318 = v157;
              v316 = v156;
              v158 = v107[1];
              *v14 = *v107;
              v14[1] = v158;
              v14[2] = v107[2];
            }
            v159 = v318;
            v160 = v316;
            v107[1] = v317;
            v107[2] = v159;
            *v107 = v160;
          }
          else if (v137)
          {
            v141 = *v14;
            v142 = v14[2];
            v317 = v14[1];
            v318 = v142;
            v316 = v141;
            v143 = v107[1];
            *v14 = *v107;
            v14[1] = v143;
            v14[2] = v107[2];
            v144 = v318;
            v145 = v316;
            v107[1] = v317;
            v107[2] = v144;
            *v107 = v145;
            if ((*a3)(v14, v65))
            {
              v146 = *v65;
              v147 = v65[2];
              v317 = v65[1];
              v318 = v147;
              v316 = v146;
              v148 = v14[1];
              *v65 = *v14;
              v65[1] = v148;
              v65[2] = v14[2];
              v149 = v318;
              v150 = v316;
              v14[1] = v317;
              v14[2] = v149;
              *v14 = v150;
            }
          }
LABEL_54:
          v161 = *(__n128 *)a1;
          v162 = *(__n128 *)(a1 + 32);
          v317 = *(__n128 *)(a1 + 16);
          v318 = v162;
          v316 = v161;
          v163 = *v14;
          v164 = v14[2];
          *(__n128 *)(a1 + 16) = v14[1];
          *(__n128 *)(a1 + 32) = v164;
          *(__n128 *)a1 = v163;
          v165 = v316;
          v166 = v318;
          v14[1] = v317;
          v14[2] = v166;
          *v14 = v165;
          a2 = v309;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (((*a3)((__n128 *)(a1 - 48), (__n128 *)a1) & 1) == 0)
          {
            v186 = *(__n128 *)a1;
            v187 = *(__n128 *)(a1 + 32);
            v314 = *(__n128 *)(a1 + 16);
            v315 = v187;
            v313 = v186;
            if (((*a3)(&v313, v9) & 1) != 0)
            {
              v10 = (__n128 *)a1;
              do
                v10 += 3;
              while (((*a3)(&v313, v10) & 1) == 0);
            }
            else
            {
              v188 = (__n128 *)(a1 + 48);
              do
              {
                v10 = v188;
                if (v188 >= a2)
                  break;
                v189 = (*a3)(&v313, v188);
                v188 = v10 + 3;
              }
              while (!v189);
            }
            v190 = a2;
            if (v10 < a2)
            {
              v190 = a2;
              do
                v190 -= 3;
              while (((*a3)(&v313, v190) & 1) != 0);
            }
            while (v10 < v190)
            {
              v191 = *v10;
              v192 = v10[2];
              v317 = v10[1];
              v318 = v192;
              v316 = v191;
              v193 = *v190;
              v194 = v190[2];
              v10[1] = v190[1];
              v10[2] = v194;
              *v10 = v193;
              v195 = v316;
              v196 = v318;
              v190[1] = v317;
              v190[2] = v196;
              *v190 = v195;
              do
                v10 += 3;
              while (!(*a3)(&v313, v10));
              do
                v190 -= 3;
              while (((*a3)(&v313, v190) & 1) != 0);
            }
            v197 = v10 - 3;
            if (&v10[-3] != (__n128 *)a1)
            {
              v198 = *v197;
              v199 = v10[-1];
              *(__n128 *)(a1 + 16) = v10[-2];
              *(__n128 *)(a1 + 32) = v199;
              *(__n128 *)a1 = v198;
            }
            a5 = 0;
            v200 = v313;
            v201 = v315;
            v10[-2] = v314;
            v10[-1] = v201;
            *v197 = v200;
            continue;
          }
LABEL_56:
          v167 = 0;
          v168 = *(__n128 *)a1;
          v169 = *(__n128 *)(a1 + 32);
          v314 = *(__n128 *)(a1 + 16);
          v315 = v169;
          v313 = v168;
          do
            v167 += 48;
          while (((*a3)((__n128 *)(v167 + a1), &v313) & 1) != 0);
          v170 = a1 + v167;
          v171 = a2;
          if (v167 == 48)
          {
            v171 = a2;
            do
            {
              if (v170 >= (unint64_t)v171)
                break;
              v171 -= 3;
            }
            while (((*a3)(v171, &v313) & 1) == 0);
          }
          else
          {
            do
              v171 -= 3;
            while (!(*a3)(v171, &v313));
          }
          if (v170 < (unint64_t)v171)
          {
            v172 = (__n128 *)(a1 + v167);
            v173 = v171;
            do
            {
              v174 = *v172;
              v175 = v172[2];
              v317 = v172[1];
              v318 = v175;
              v316 = v174;
              v176 = *v173;
              v177 = v173[2];
              v172[1] = v173[1];
              v172[2] = v177;
              *v172 = v176;
              v178 = v316;
              v179 = v318;
              v173[1] = v317;
              v173[2] = v179;
              *v173 = v178;
              do
                v172 += 3;
              while (((*a3)(v172, &v313) & 1) != 0);
              do
                v173 -= 3;
              while (!(*a3)(v173, &v313));
            }
            while (v172 < v173);
            v180 = v172 - 3;
            if (v180 == (__n128 *)a1)
              goto LABEL_74;
LABEL_73:
            v181 = *v180;
            v182 = v180[2];
            *(__n128 *)(a1 + 16) = v180[1];
            *(__n128 *)(a1 + 32) = v182;
            *(__n128 *)a1 = v181;
            goto LABEL_74;
          }
          v180 = (__n128 *)(v170 - 48);
          if (v170 - 48 != a1)
            goto LABEL_73;
LABEL_74:
          v183 = v313;
          v184 = v315;
          v180[1] = v314;
          v180[2] = v184;
          *v180 = v183;
          if (v170 < (unint64_t)v171)
            goto LABEL_77;
          v185 = sub_20FD856CC(a1, v180, a3);
          v10 = v180 + 3;
          if (!sub_20FD856CC((uint64_t)&v180[3], a2, a3))
          {
            if (v185)
              continue;
LABEL_77:
            sub_20FD84630(a1, v180, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v180 + 3;
            continue;
          }
          a2 = v180;
          if (v185)
            return;
          goto LABEL_1;
        }
        v228 = (__n128 *)(a1 + 48);
        v230 = (__n128 *)a1 == a2 || v228 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v230)
          {
            v231 = 0;
            v232 = (__n128 *)a1;
            do
            {
              v236 = v232;
              v232 = v228;
              if ((*a3)(v228, v236))
              {
                v237 = *v232;
                v238 = v232[2];
                v317 = v232[1];
                v318 = v238;
                v316 = v237;
                v239 = v231;
                do
                {
                  v240 = (_OWORD *)(a1 + v239);
                  v241 = *(_OWORD *)(a1 + v239 + 16);
                  v240[3] = *(_OWORD *)(a1 + v239);
                  v240[4] = v241;
                  v240[5] = *(_OWORD *)(a1 + v239 + 32);
                  if (!v239)
                  {
                    v233 = (_OWORD *)a1;
                    goto LABEL_120;
                  }
                  v239 -= 48;
                }
                while (((*a3)(&v316, (__n128 *)(v239 + a1)) & 1) != 0);
                v233 = (_OWORD *)(a1 + v239 + 48);
LABEL_120:
                v234 = v316;
                v235 = v318;
                v233[1] = v317;
                v233[2] = v235;
                *v233 = v234;
              }
              v228 = v232 + 3;
              v231 += 48;
            }
            while (&v232[3] != a2);
          }
        }
        else if (!v230)
        {
          v292 = (__n128 *)(a1 - 48);
          do
          {
            v293 = (__n128 *)a1;
            a1 = (uint64_t)v228;
            if ((*a3)(v228, v293))
            {
              v294 = *(__n128 *)a1;
              v295 = *(__n128 *)(a1 + 32);
              v317 = *(__n128 *)(a1 + 16);
              v318 = v295;
              v316 = v294;
              v296 = v292;
              do
              {
                v297 = v296[4];
                v296[6] = v296[3];
                v296[7] = v297;
                v296[8] = v296[5];
                v298 = (*a3)(&v316, v296);
                v296 -= 3;
              }
              while ((v298 & 1) != 0);
              v299 = v316;
              v300 = v318;
              v296[7] = v317;
              v296[8] = v300;
              v296[6] = v299;
            }
            v228 = (__n128 *)(a1 + 48);
            v292 += 3;
          }
          while ((__n128 *)(a1 + 48) != a2);
        }
        return;
    }
  }
}

  while (2)
  {
    v37 = a1;
    v38 = a4;
    v36 = *(_QWORD **)(a1 + 48);
    v5 = v36[6];
    v4 = v36[7];
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v7 = a2[12];
    v33 = v7;
    v34 = a3;
    if (v7 >= v6)
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v32 = v7;
    v8 = v7 - a3;
    v9 = v6 - a3;
    if (v6 < a3)
      v9 = 0;
    if ((uint64_t)v6 < v9)
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v10 = (unsigned __int8 *)(v5 + 24 * (v6 - v9));
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v10) >> 3);
    if (v11 >= v8)
      v11 = v8;
    v12 = &v10[24 * v11];
    v35 = a2;
    sub_20FF22440((uint64_t)v39, a2, a3, v8);
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v16 = v43;
    v17 = v44;
    v18 = v45;
    v19 = v46;
    v20 = v47;
LABEL_11:
    while (1)
    {
      if (v10 == v12)
      {
        v21 = v20 == v18 && v15 == v13;
        if (v21 || v14 == v19)
          break;
      }
      if ((char)v10[23] < 0)
      {
        v22 = *(unsigned __int8 **)v10;
        if (v16 != *((_QWORD *)v10 + 1))
          goto LABEL_28;
      }
      else
      {
        v22 = v10;
        if (v16 != v10[23])
          goto LABEL_28;
      }
      if (memcmp(v14, v22, v16))
      {
LABEL_28:
        a4 = v38;
        if (*(_QWORD *)v38 != v37)
          return 0;
        v25 = v36[9];
        if (v25)
        {
          *(_QWORD *)v38 = v25;
          a1 = v36[9];
          a3 = v34;
          a2 = v35;
          goto LABEL_1;
        }
        return 1;
      }
      v10 += 24;
      v15 = &v14[v16];
      v14 = v13;
      v16 = 0;
      if (v15 != v13)
      {
        v16 = 0;
        v23 = v15 + 1;
        v14 = v13;
        if (v15 + 1 != v13)
        {
          v16 = 0;
          do
          {
            if (v23[v16] == v17)
            {
              v14 = v15 + 1;
              goto LABEL_11;
            }
            ++v16;
          }
          while (v13 - v23 != v16);
          v14 = v15 + 1;
          v16 = v13 - v23;
        }
      }
    }
    if (v33 > v6)
    {
      *(_QWORD *)v38 = v37;
      v26 = *(_QWORD *)(v37 + 48);
      v27 = *(_QWORD **)(v26 + 80);
      v28 = (_QWORD *)(v26 + 88);
      if (v27 != (_QWORD *)(v26 + 88))
      {
        do
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 56) - *(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 48)) >> 3) <= v35[12]
            && (sub_20FF22178() & 1) != 0)
          {
            break;
          }
          v29 = (_QWORD *)v27[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v27[2];
              v21 = *v30 == (_QWORD)v27;
              v27 = v30;
            }
            while (!v21);
          }
          v27 = v30;
        }
        while (v30 != v28);
      }
      return 1;
    }
    if (v6 > v33)
    {
      v31 = v36[9];
      a4 = v38;
      if (v31)
      {
        *(_QWORD *)v38 = v31;
        a1 = v36[9];
        a2 = v35;
        a3 = v32;
        continue;
      }
      return 1;
    }
    break;
  }
  *(_QWORD *)v38 = v37;
  result = 1;
  *(_BYTE *)(v38 + 8) = 1;
  return result;
}

  v414 = a2 - 2;
  v422 = a2;
  v411 = a2 - 6;
  v412 = a2 - 4;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)v422 - (char *)v7;
    v9 = ((char *)v422 - (char *)v7) >> 4;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v197 = v422 - 2;
        if (sub_210209D54(**a3, (*a3)[1], *(v422 - 2), *(v422 - 1), *a1, a1[1]))
        {
          v430 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v197;
          *(_OWORD *)v197 = v430;
        }
        return;
      case 3uLL:
        sub_21020A124(v7, v7 + 2, v414, a3);
        return;
      case 4uLL:
        sub_21020A414(v7, v7 + 2, v7 + 4, v414, a3);
        return;
      case 5uLL:
        sub_21020A034(v7, v7 + 2, v7 + 4, v7 + 6, v414, a3);
        return;
      default:
        if (v8 <= 383)
        {
          if ((a5 & 1) != 0)
          {
            if (v7 != v422)
            {
              v198 = v7 + 2;
              if (v7 + 2 != v422)
              {
                v199 = 0;
                v200 = *a3;
                v201 = v7;
                v424 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
                v419 = (float64x2_t)vdupq_n_s64(0x3FE921FB54442D18uLL);
                do
                {
                  v203 = v201[2];
                  v204 = v201[3];
                  v205 = *v201;
                  v206 = v201[1];
                  v201 = v198;
                  if (sub_210209D54(*v200, v200[1], v203, v204, v205, v206))
                  {
                    v208 = v199;
                    do
                    {
                      *(_OWORD *)((char *)v7 + v208 + 16) = *(_OWORD *)((char *)v7 + v208);
                      if (!v208)
                      {
                        v202 = v7;
                        goto LABEL_302;
                      }
                      v232 = *(float64x2_t *)*a3;
                      v233 = (*a3)[1];
                      v234 = vabdd_f64(v203, v232.f64[0]);
                      v235 = vabdd_f64(v204, v233);
                      v236 = v234 / v235;
                      if (v234 >= v235)
                        v236 = v235 / v234;
                      if (v236 <= 0.414213562)
                      {
                        v238 = 1;
                        v239 = 2;
                        v237.f64[0] = v236;
                      }
                      else
                      {
                        v237.f64[0] = (v235 - v234) / (v234 + v235);
                        if (v234 >= v235)
                          v237.f64[0] = -v237.f64[0];
                        v238 = -1;
                        v239 = 1;
                      }
                      v240 = *(float64x2_t *)((char *)v7 + v208 - 16);
                      v241 = v204 - v233;
                      v207.f64[0] = v203 - v232.f64[0];
                      v242 = vsubq_f64(v240, v232);
                      v243 = vabdq_f64(v240, v232);
                      v244 = v243.f64[0] / v243.f64[1];
                      if (v243.f64[0] >= v243.f64[1])
                        v244 = v243.f64[1] / v243.f64[0];
                      if (v244 > 0.414213562)
                      {
                        v209 = (v243.f64[1] - v243.f64[0]) / (v243.f64[0] + v243.f64[1]);
                        if (v243.f64[0] >= v243.f64[1])
                          v209 = -v209;
                        v210 = -1;
                        v211 = 1;
                      }
                      else
                      {
                        v210 = 1;
                        v211 = 2;
                        v209 = v244;
                      }
                      v212 = v236 > 0.414213562;
                      v213 = v234 < v235;
                      v207 = (float64x2_t)vzip1q_s64((int64x2_t)v207, (int64x2_t)v242);
                      v242.f64[0] = v241;
                      v214 = (int8x16_t)vceqzq_f64(v242);
                      v215 = (int8x16_t)vceqzq_f64(v207);
                      v216 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v237.f64[0] * v237.f64[0]), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v237.f64[0] * v237.f64[0]), (float64x2_t)xmmword_210315370), v237.f64[0] * v237.f64[0] * (v237.f64[0] * v237.f64[0]))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v237.f64[0] * v237.f64[0]), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v237.f64[0] * v237.f64[0]), (float64x2_t)xmmword_210315380), v237.f64[0] * v237.f64[0] * (v237.f64[0] * v237.f64[0]))),
                                            v237.f64[0]
                                          * v237.f64[0]
                                          * (v237.f64[0]
                                           * v237.f64[0])
                                          * (v237.f64[0]
                                           * v237.f64[0]
                                           * (v237.f64[0]
                                            * v237.f64[0]))));
                      v217 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v209 * v209), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v209 * v209), (float64x2_t)xmmword_210315370), v209 * v209 * (v209 * v209))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v209 * v209), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v209 * v209), (float64x2_t)xmmword_210315380), v209 * v209 * (v209 * v209))),
                                            v209 * v209 * (v209 * v209) * (v209 * v209 * (v209 * v209))));
                      v237.f64[1] = v209;
                      v218 = vbslq_s8(vandq_s8((int8x16_t)vceqq_f64(vabsq_f64(v207), v424), (int8x16_t)vceqq_f64(vabsq_f64(v242), v424)), (int8x16_t)v419, (int8x16_t)vaddq_f64(v237, vmulq_f64(v237, vdivq_f64((float64x2_t)vzip1q_s64(v216, v217), (float64x2_t)vzip2q_s64(v216, v217)))));
                      v219 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v242));
                      v220 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v207));
                      *(int32x2_t *)&v207.f64[0] = vcltz_s32(vshl_n_s32((int32x2_t)__PAIR64__(v243.f64[0] < v243.f64[1], v213), 0x1FuLL));
                      v221 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v207.f64[0], (int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v210, v238)), (int8x8_t)__PAIR64__(v210, v238));
                      v222 = (int32x2_t)vbsl_s8(v220, (int8x8_t)vneg_s32(v221), (int8x8_t)v221);
                      v223 = vbsl_s8(v219, (int8x8_t)vneg_s32(v222), (int8x8_t)v222);
                      v224 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v207.f64[0], (int8x8_t)__PAIR64__(v211, v239), (int8x8_t)__PAIR64__(v244 > 0.414213562, v212));
                      v225 = (int32x2_t)vbsl_s8(v220, (int8x8_t)vsub_s32((int32x2_t)0x400000004, v224), (int8x8_t)v224);
                      v226 = vbsl_s8(v219, (int8x8_t)vneg_s32(v225), (int8x8_t)v225);
                      v227.i64[0] = v223.i32[0];
                      v227.i64[1] = v223.i32[1];
                      v228 = vmulq_f64((float64x2_t)vbicq_s8(v218, vandq_s8(v215, v214)), vcvtq_f64_s64(v227));
                      v227.i64[0] = v226.i32[0];
                      v227.i64[1] = v226.i32[1];
                      v229 = vcvtq_f64_s64(v227);
                      v230 = vaddq_f64(vmulq_f64(v229, (float64x2_t)vdupq_n_s64(0x3C81A62633145C07uLL)), vaddq_f64(vmulq_f64(v229, v419), v228));
                      v231 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(v230), (int8x16_t)vaddq_f64(v230, (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL)), (int8x16_t)v230);
                      v208 -= 16;
                    }
                    while ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v231, 1), v231)).u32[0] & 1) != 0);
                    v202 = (double *)((char *)v7 + v208 + 16);
LABEL_302:
                    *v202 = v203;
                    v202[1] = v204;
                    v200 = *a3;
                  }
                  v198 = v201 + 2;
                  v199 += 16;
                }
                while (v201 + 2 != v422);
              }
            }
          }
          else if (v7 != v422)
          {
            v367 = v7 + 2;
            if (v7 + 2 != v422)
            {
              v368 = *a3;
              v426 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
              v421 = (float64x2_t)vdupq_n_s64(0x3FE921FB54442D18uLL);
              do
              {
                v369 = a1[2];
                v370 = a1[3];
                v371 = *a1;
                v372 = a1[1];
                a1 = v367;
                if (sub_210209D54(*v368, v368[1], v369, v370, v371, v372))
                {
                  v374 = a1;
                  do
                  {
                    *(_OWORD *)v374 = *((_OWORD *)v374 - 1);
                    v398 = *(float64x2_t *)*a3;
                    v399 = (*a3)[1];
                    v400 = vabdd_f64(v369, v398.f64[0]);
                    v401 = vabdd_f64(v370, v399);
                    v402 = v400 / v401;
                    if (v400 >= v401)
                      v402 = v401 / v400;
                    if (v402 <= 0.414213562)
                    {
                      v404 = 1;
                      v405 = 2;
                      v403.f64[0] = v402;
                    }
                    else
                    {
                      v403.f64[0] = (v401 - v400) / (v400 + v401);
                      if (v400 >= v401)
                        v403.f64[0] = -v403.f64[0];
                      v404 = -1;
                      v405 = 1;
                    }
                    v406 = *(float64x2_t *)(v374 - 4);
                    v407 = v370 - v399;
                    v373.f64[0] = v369 - v398.f64[0];
                    v408 = vsubq_f64(v406, v398);
                    v409 = vabdq_f64(v406, v398);
                    v410 = v409.f64[0] / v409.f64[1];
                    if (v409.f64[0] >= v409.f64[1])
                      v410 = v409.f64[1] / v409.f64[0];
                    if (v410 > 0.414213562)
                    {
                      v375 = (v409.f64[1] - v409.f64[0]) / (v409.f64[0] + v409.f64[1]);
                      if (v409.f64[0] >= v409.f64[1])
                        v375 = -v375;
                      v376 = -1;
                      v377 = 1;
                    }
                    else
                    {
                      v376 = 1;
                      v377 = 2;
                      v375 = v410;
                    }
                    v378 = v402 > 0.414213562;
                    v379 = v400 < v401;
                    v373 = (float64x2_t)vzip1q_s64((int64x2_t)v373, (int64x2_t)v408);
                    v408.f64[0] = v407;
                    v380 = (int8x16_t)vceqzq_f64(v408);
                    v381 = (int8x16_t)vceqzq_f64(v373);
                    v382 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v403.f64[0] * v403.f64[0]), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v403.f64[0] * v403.f64[0]), (float64x2_t)xmmword_210315370), v403.f64[0] * v403.f64[0] * (v403.f64[0] * v403.f64[0]))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v403.f64[0] * v403.f64[0]), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v403.f64[0] * v403.f64[0]), (float64x2_t)xmmword_210315380), v403.f64[0] * v403.f64[0] * (v403.f64[0] * v403.f64[0]))),
                                          v403.f64[0]
                                        * v403.f64[0]
                                        * (v403.f64[0]
                                         * v403.f64[0])
                                        * (v403.f64[0]
                                         * v403.f64[0]
                                         * (v403.f64[0]
                                          * v403.f64[0]))));
                    v383 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v375 * v375), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v375 * v375), (float64x2_t)xmmword_210315370), v375 * v375 * (v375 * v375))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v375 * v375), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v375 * v375), (float64x2_t)xmmword_210315380), v375 * v375 * (v375 * v375))),
                                          v375 * v375 * (v375 * v375) * (v375 * v375 * (v375 * v375))));
                    v403.f64[1] = v375;
                    v384 = vbslq_s8(vandq_s8((int8x16_t)vceqq_f64(vabsq_f64(v373), v426), (int8x16_t)vceqq_f64(vabsq_f64(v408), v426)), (int8x16_t)v421, (int8x16_t)vaddq_f64(v403, vmulq_f64(v403, vdivq_f64((float64x2_t)vzip1q_s64(v382, v383), (float64x2_t)vzip2q_s64(v382, v383)))));
                    v385 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v408));
                    v386 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v373));
                    *(int32x2_t *)&v373.f64[0] = vcltz_s32(vshl_n_s32((int32x2_t)__PAIR64__(v409.f64[0] < v409.f64[1], v379), 0x1FuLL));
                    v387 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v373.f64[0], (int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v376, v404)), (int8x8_t)__PAIR64__(v376, v404));
                    v388 = (int32x2_t)vbsl_s8(v386, (int8x8_t)vneg_s32(v387), (int8x8_t)v387);
                    v389 = vbsl_s8(v385, (int8x8_t)vneg_s32(v388), (int8x8_t)v388);
                    v390 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v373.f64[0], (int8x8_t)__PAIR64__(v377, v405), (int8x8_t)__PAIR64__(v410 > 0.414213562, v378));
                    v391 = (int32x2_t)vbsl_s8(v386, (int8x8_t)vsub_s32((int32x2_t)0x400000004, v390), (int8x8_t)v390);
                    v392 = vbsl_s8(v385, (int8x8_t)vneg_s32(v391), (int8x8_t)v391);
                    v393.i64[0] = v389.i32[0];
                    v393.i64[1] = v389.i32[1];
                    v394 = vmulq_f64((float64x2_t)vbicq_s8(v384, vandq_s8(v381, v380)), vcvtq_f64_s64(v393));
                    v393.i64[0] = v392.i32[0];
                    v393.i64[1] = v392.i32[1];
                    v395 = vcvtq_f64_s64(v393);
                    v396 = vaddq_f64(vmulq_f64(v395, (float64x2_t)vdupq_n_s64(0x3C81A62633145C07uLL)), vaddq_f64(vmulq_f64(v395, v421), v394));
                    v397 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(v396), (int8x16_t)vaddq_f64(v396, (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL)), (int8x16_t)v396);
                    v374 -= 2;
                  }
                  while ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v397, 1), v397)).u32[0] & 1) != 0);
                  *v374 = v369;
                  v374[1] = v370;
                  v368 = *a3;
                }
                v367 = a1 + 2;
              }
              while (a1 + 2 != v422);
            }
          }
          return;
        }
        v11 = (float64x2_t)xmmword_210315330;
        v10 = (float64x2_t)xmmword_210315320;
        v13 = (float64x2_t)xmmword_2102DD520;
        v12 = (float64x2_t)xmmword_210315340;
        v15 = (float64x2_t)xmmword_210315360;
        v14 = (float64x2_t)xmmword_210315350;
        if (!a4)
        {
          if (v7 != v422)
          {
            v245 = (v9 - 2) >> 1;
            v246 = v245;
            do
            {
              v247 = v246;
              if (v245 >= v246)
              {
                v248 = (2 * v246) | 1;
                v249 = &a1[2 * v248];
                v250 = 2 * v246 + 2;
                v251 = *a3;
                if (v250 >= (uint64_t)v9)
                {
                  v257 = *v249;
                  v254 = *v251;
                  v255 = v251[1];
                }
                else
                {
                  v252 = *v249;
                  v253 = v249[2];
                  v254 = *v251;
                  v255 = v251[1];
                  v256 = sub_210209D54(*v251, v255, *v249, v249[1], v253, v249[3]);
                  if (v256)
                    v257 = v253;
                  else
                    v257 = v252;
                  if (v256)
                  {
                    v249 += 2;
                    v248 = 2 * v247 + 2;
                  }
                }
                v258 = &a1[2 * v247];
                v259 = *v258;
                v260 = v258[1];
                v261 = sub_210209D54(v254, v255, v257, v249[1], *v258, v260);
                v11 = (float64x2_t)xmmword_210315330;
                v10 = (float64x2_t)xmmword_210315320;
                v13 = (float64x2_t)xmmword_2102DD520;
                v12 = (float64x2_t)xmmword_210315340;
                v15 = (float64x2_t)xmmword_210315360;
                v14 = (float64x2_t)xmmword_210315350;
                if ((v261 & 1) == 0)
                {
                  do
                  {
                    v268 = v258;
                    v258 = v249;
                    *(_OWORD *)v268 = *(_OWORD *)v249;
                    if (v245 < v248)
                      break;
                    v269 = (2 * v248) | 1;
                    v249 = &a1[2 * v269];
                    v248 = 2 * v248 + 2;
                    v270 = *a3;
                    if (v248 < (uint64_t)v9)
                    {
                      v262 = *v249;
                      v263 = v249[2];
                      v264 = *v270;
                      v265 = v270[1];
                      v266 = sub_210209D54(*v270, v265, *v249, v249[1], v263, v249[3]);
                      v267 = v266 ? v263 : v262;
                      if (v266)
                        v249 += 2;
                      else
                        v248 = v269;
                    }
                    else
                    {
                      v267 = *v249;
                      v248 = v269;
                      v264 = *v270;
                      v265 = v270[1];
                    }
                  }
                  while (!sub_210209D54(v264, v265, v267, v249[1], v259, v260));
                  *v258 = v259;
                  v258[1] = v260;
                  v11 = (float64x2_t)xmmword_210315330;
                  v10 = (float64x2_t)xmmword_210315320;
                  v13 = (float64x2_t)xmmword_2102DD520;
                  v12 = (float64x2_t)xmmword_210315340;
                  v15 = (float64x2_t)xmmword_210315360;
                  v14 = (float64x2_t)xmmword_210315350;
                }
              }
              v246 = v247 - 1;
            }
            while (v247);
            v271 = (unint64_t)v8 >> 4;
            v272 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
            v273 = (float64x2_t)vdupq_n_s64(0x3FE921FB54442D18uLL);
            v274 = (float64x2_t)vdupq_n_s64(0x3C81A62633145C07uLL);
            v275 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
            v276 = v422;
            v415 = v273;
            v417 = v272;
            v425 = v274;
            v420 = v275;
            do
            {
              v278 = 0;
              v431 = *(_OWORD *)a1;
              v279 = a1;
              do
              {
                v305 = (uint64_t)&v279[v278 + 1];
                v306 = (2 * v278) | 1;
                v307 = 2 * v278 + 2;
                if (v307 < v271)
                {
                  v308 = *(float64x2_t *)*a3;
                  v309 = vabdq_f64(*(float64x2_t *)v305, v308);
                  v310 = v309.f64[0] / v309.f64[1];
                  if (v309.f64[0] >= v309.f64[1])
                    v310 = v309.f64[1] / v309.f64[0];
                  if (v310 <= 0.414213562)
                  {
                    v312 = 1;
                    v313 = 2;
                    v311.f64[0] = v310;
                  }
                  else
                  {
                    v311.f64[0] = (v309.f64[1] - v309.f64[0]) / (v309.f64[0] + v309.f64[1]);
                    if (v309.f64[0] >= v309.f64[1])
                      v311.f64[0] = -v311.f64[0];
                    v312 = -1;
                    v313 = 1;
                  }
                  v314 = *(float64x2_t *)(v305 + 16);
                  v315 = (int64x2_t)vsubq_f64(*(float64x2_t *)v305, v308);
                  v316 = (int64x2_t)vsubq_f64(v314, v308);
                  v317 = vabdq_f64(v314, v308);
                  v318 = v317.f64[0] / v317.f64[1];
                  if (v317.f64[0] >= v317.f64[1])
                    v318 = v317.f64[1] / v317.f64[0];
                  if (v318 > 0.414213562)
                  {
                    v280 = (v317.f64[1] - v317.f64[0]) / (v317.f64[0] + v317.f64[1]);
                    if (v317.f64[0] >= v317.f64[1])
                      v280 = -v280;
                    v281 = -1;
                    v282 = 1;
                  }
                  else
                  {
                    v281 = 1;
                    v282 = 2;
                    v280 = v318;
                  }
                  v283 = v318 > 0.414213562;
                  v284 = v317.f64[0] < v317.f64[1];
                  v285 = v310 > 0.414213562;
                  *(_QWORD *)&v286.f64[0] = vdupq_laneq_s64(v315, 1).u64[0];
                  *(_QWORD *)&v286.f64[1] = v316.i64[1];
                  v287 = (float64x2_t)vzip1q_s64(v315, v316);
                  v288 = (int8x16_t)vceqzq_f64(v286);
                  v289 = (int8x16_t)vceqzq_f64(v287);
                  v290 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v311.f64[0] * v311.f64[0]), v13), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v311.f64[0] * v311.f64[0]), (float64x2_t)xmmword_210315370), v311.f64[0] * v311.f64[0] * (v311.f64[0] * v311.f64[0]))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v11, v311.f64[0] * v311.f64[0]), v12), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v311.f64[0] * v311.f64[0]), (float64x2_t)xmmword_210315380), v311.f64[0] * v311.f64[0] * (v311.f64[0] * v311.f64[0]))), v311.f64[0]* v311.f64[0]* (v311.f64[0]* v311.f64[0])
                                      * (v311.f64[0]
                                       * v311.f64[0]
                                       * (v311.f64[0]
                                        * v311.f64[0]))));
                  v291 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v280 * v280), v13), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v280 * v280), (float64x2_t)xmmword_210315370), v280 * v280 * (v280 * v280))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v11, v280 * v280), v12), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v280 * v280), (float64x2_t)xmmword_210315380), v280 * v280 * (v280 * v280))), v280 * v280 * (v280 * v280) * (v280 * v280 * (v280 * v280))));
                  v311.f64[1] = v280;
                  v292 = vbslq_s8(vandq_s8((int8x16_t)vceqq_f64(vabsq_f64(v287), v272), (int8x16_t)vceqq_f64(vabsq_f64(v286), v272)), (int8x16_t)v273, (int8x16_t)vaddq_f64(v311, vmulq_f64(v311, vdivq_f64((float64x2_t)vzip1q_s64(v290, v291), (float64x2_t)vzip2q_s64(v290, v291)))));
                  v293 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v286));
                  *(int32x2_t *)&v286.f64[0] = vmovn_s64(vcltzq_s64((int64x2_t)v287));
                  *(int32x2_t *)&v287.f64[0] = vcltz_s32(vshl_n_s32((int32x2_t)__PAIR64__(v284, v309.f64[0] < v309.f64[1]), 0x1FuLL));
                  v294 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v287.f64[0], (int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v281, v312)), (int8x8_t)__PAIR64__(v281, v312));
                  v295 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v286.f64[0], (int8x8_t)vneg_s32(v294), (int8x8_t)v294);
                  v296 = vbsl_s8(v293, (int8x8_t)vneg_s32(v295), (int8x8_t)v295);
                  v297 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v287.f64[0], (int8x8_t)__PAIR64__(v282, v313), (int8x8_t)__PAIR64__(v283, v285));
                  v298 = (int32x2_t)vbsl_s8(*(int8x8_t *)&v286.f64[0], (int8x8_t)vsub_s32((int32x2_t)0x400000004, v297), (int8x8_t)v297);
                  v299 = vbsl_s8(v293, (int8x8_t)vneg_s32(v298), (int8x8_t)v298);
                  v300.i64[0] = v296.i32[0];
                  v300.i64[1] = v296.i32[1];
                  v301 = vmulq_f64((float64x2_t)vbicq_s8(v292, vandq_s8(v289, v288)), vcvtq_f64_s64(v300));
                  v300.i64[0] = v299.i32[0];
                  v300.i64[1] = v299.i32[1];
                  v302 = vcvtq_f64_s64(v300);
                  v303 = vaddq_f64(vmulq_f64(v302, v274), vaddq_f64(vmulq_f64(v302, v273), v301));
                  v304 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(v303), (int8x16_t)vaddq_f64(v303, v275), (int8x16_t)v303);
                  if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v304, 1), v304)).u8[0] & 1) != 0)
                  {
                    v305 += 16;
                    v306 = v307;
                  }
                }
                *v279 = *(_OWORD *)v305;
                v279 = (_OWORD *)v305;
                v278 = v306;
              }
              while (v306 <= (uint64_t)((unint64_t)(v271 - 2) >> 1));
              v276 -= 2;
              if ((double *)v305 == v276)
              {
                *(_OWORD *)v305 = v431;
              }
              else
              {
                *(_OWORD *)v305 = *(_OWORD *)v276;
                *(_OWORD *)v276 = v431;
                v319 = v305 - (_QWORD)a1 + 16;
                if (v319 >= 17)
                {
                  v320 = (((unint64_t)v319 >> 4) - 2) >> 1;
                  v321 = &a1[2 * v320];
                  v322 = *(double *)v305;
                  v323 = *(double *)(v305 + 8);
                  v324 = sub_210209D54(**a3, (*a3)[1], *v321, v321[1], *(double *)v305, v323);
                  v272 = v417;
                  v275 = v420;
                  v274 = v425;
                  v273 = v415;
                  v15 = (float64x2_t)xmmword_210315360;
                  v14 = (float64x2_t)xmmword_210315350;
                  v13 = (float64x2_t)xmmword_2102DD520;
                  v12 = (float64x2_t)xmmword_210315340;
                  v11 = (float64x2_t)xmmword_210315330;
                  v10 = (float64x2_t)xmmword_210315320;
                  if (v324)
                  {
                    do
                    {
                      v350 = (_OWORD *)v305;
                      v305 = (uint64_t)v321;
                      *v350 = *(_OWORD *)v321;
                      if (!v320)
                        break;
                      v320 = (v320 - 1) >> 1;
                      v321 = &a1[2 * v320];
                      v351 = v321[1];
                      v352 = **a3;
                      v353 = (*a3)[1];
                      v354 = vabdd_f64(*v321, v352);
                      v355 = vabdd_f64(v351, v353);
                      v356 = v354 / v355;
                      if (v354 >= v355)
                        v356 = v355 / v354;
                      if (v356 <= 0.414213562)
                      {
                        v358 = 1;
                        v359 = 2;
                        v357.f64[0] = v356;
                      }
                      else
                      {
                        v357.f64[0] = (v355 - v354) / (v354 + v355);
                        if (v354 >= v355)
                          v357.f64[0] = -v357.f64[0];
                        v358 = -1;
                        v359 = 1;
                      }
                      v360.f64[0] = v351 - v353;
                      v361.f64[0] = *v321 - v352;
                      v362 = v323 - v353;
                      v363 = v322 - v352;
                      v364 = vabdd_f64(v322, v352);
                      v365 = vabdd_f64(v323, v353);
                      v366 = v364 / v365;
                      if (v364 >= v365)
                        v366 = v365 / v364;
                      if (v366 > 0.414213562)
                      {
                        v325 = (v365 - v364) / (v364 + v365);
                        if (v364 >= v365)
                          v325 = -v325;
                        v326 = -1;
                        v327 = 1;
                      }
                      else
                      {
                        v326 = 1;
                        v327 = 2;
                        v325 = v366;
                      }
                      v328 = v364 < v365;
                      v329 = v356 > 0.414213562;
                      v330 = v354 < v355;
                      v360.f64[1] = v362;
                      v361.f64[1] = v363;
                      v331 = (int8x16_t)vceqzq_f64(v360);
                      v332 = (int8x16_t)vceqzq_f64(v361);
                      v333 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v357.f64[0] * v357.f64[0]), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v357.f64[0] * v357.f64[0]), (float64x2_t)xmmword_210315370), v357.f64[0] * v357.f64[0] * (v357.f64[0] * v357.f64[0]))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v357.f64[0] * v357.f64[0]), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v357.f64[0] * v357.f64[0]), (float64x2_t)xmmword_210315380), v357.f64[0] * v357.f64[0] * (v357.f64[0] * v357.f64[0]))),
                                            v357.f64[0]
                                          * v357.f64[0]
                                          * (v357.f64[0]
                                           * v357.f64[0])
                                          * (v357.f64[0]
                                           * v357.f64[0]
                                           * (v357.f64[0]
                                            * v357.f64[0]))));
                      v334 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v325 * v325), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v325 * v325), (float64x2_t)xmmword_210315370), v325 * v325 * (v325 * v325))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v325 * v325), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v325 * v325), (float64x2_t)xmmword_210315380), v325 * v325 * (v325 * v325))),
                                            v325 * v325 * (v325 * v325) * (v325 * v325 * (v325 * v325))));
                      v357.f64[1] = v325;
                      v335 = vbslq_s8(vandq_s8((int8x16_t)vceqq_f64(vabsq_f64(v361), v417), (int8x16_t)vceqq_f64(vabsq_f64(v360), v417)), (int8x16_t)v415, (int8x16_t)vaddq_f64(v357, vmulq_f64(v357, vdivq_f64((float64x2_t)vzip1q_s64(v333, v334), (float64x2_t)vzip2q_s64(v333, v334)))));
                      v336 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v360));
                      v337 = (int8x8_t)vmovn_s64(vcltzq_s64((int64x2_t)v361));
                      v338 = (int8x8_t)vcltz_s32(vshl_n_s32((int32x2_t)__PAIR64__(v328, v330), 0x1FuLL));
                      v339 = (int32x2_t)vbsl_s8(v338, (int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v326, v358)), (int8x8_t)__PAIR64__(v326, v358));
                      v340 = (int32x2_t)vbsl_s8(v337, (int8x8_t)vneg_s32(v339), (int8x8_t)v339);
                      v341 = vbsl_s8(v336, (int8x8_t)vneg_s32(v340), (int8x8_t)v340);
                      v342 = (int32x2_t)vbsl_s8(v338, (int8x8_t)__PAIR64__(v327, v359), (int8x8_t)__PAIR64__(v366 > 0.414213562, v329));
                      v343 = (int32x2_t)vbsl_s8(v337, (int8x8_t)vsub_s32((int32x2_t)0x400000004, v342), (int8x8_t)v342);
                      v344 = vbsl_s8(v336, (int8x8_t)vneg_s32(v343), (int8x8_t)v343);
                      v345.i64[0] = v341.i32[0];
                      v345.i64[1] = v341.i32[1];
                      v346 = vmulq_f64((float64x2_t)vbicq_s8(v335, vandq_s8(v332, v331)), vcvtq_f64_s64(v345));
                      v345.i64[0] = v344.i32[0];
                      v345.i64[1] = v344.i32[1];
                      v347 = vcvtq_f64_s64(v345);
                      v274 = v425;
                      v348 = vaddq_f64(vmulq_f64(v347, v425), vaddq_f64(vmulq_f64(v347, v415), v346));
                      v275 = v420;
                      v349 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(v348), (int8x16_t)vaddq_f64(v348, v420), (int8x16_t)v348);
                    }
                    while ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v349, 1), v349)).u32[0] & 1) != 0);
                    *(double *)v305 = v322;
                    *(double *)(v305 + 8) = v323;
                  }
                }
              }
            }
            while (v271-- > 2);
          }
          return;
        }
        v16 = v9 >> 1;
        v17 = &v7[2 * (v9 >> 1)];
        if ((unint64_t)v8 < 0x801)
        {
          sub_21020A124(&a1[2 * (v9 >> 1)], a1, v414, a3);
        }
        else
        {
          sub_21020A124(a1, &a1[2 * (v9 >> 1)], v414, a3);
          v18 = 2 * v16;
          v19 = &a1[2 * v16 - 2];
          sub_21020A124(a1 + 2, v19, v412, a3);
          sub_21020A124(a1 + 4, &a1[v18 + 2], v411, a3);
          sub_21020A124(v19, &a1[2 * (v9 >> 1)], &a1[v18 + 2], a3);
          v427 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v427;
        }
        --a4;
        v20 = *a1;
        v423 = *a1;
        if ((a5 & 1) != 0)
        {
          v21 = a1[1];
          v22 = **a3;
          v23 = (*a3)[1];
          v25 = (float64x2_t)xmmword_210315330;
          v24 = (float64x2_t)xmmword_210315320;
          v27 = (float64x2_t)xmmword_2102DD520;
          v26 = (float64x2_t)xmmword_210315340;
          v29 = (float64x2_t)xmmword_210315360;
          v28 = (float64x2_t)xmmword_210315350;
          v31 = (float64x2_t)xmmword_210315380;
          v30 = (float64x2_t)xmmword_210315370;
          goto LABEL_12;
        }
        v22 = **a3;
        v23 = (*a3)[1];
        v413 = a1[1];
        if ((sub_210209D54(v22, v23, *(a1 - 2), *(a1 - 1), v20, v413) & 1) == 0)
        {
          if ((sub_210209D54(v22, v23, v423, v413, *(v422 - 2), *(v422 - 1)) & 1) != 0)
          {
            v7 = a1;
            v132 = v413;
            do
            {
              v133 = v7[2];
              v134 = v7[3];
              v7 += 2;
            }
            while ((sub_210209D54(v22, v23, v423, v413, v133, v134) & 1) == 0);
          }
          else
          {
            v135 = a1 + 2;
            while (1)
            {
              v7 = v135;
              if (v135 >= v422)
                break;
              v132 = v413;
              v136 = sub_210209D54(v22, v23, v423, v413, *v135, v135[1]);
              v135 = v7 + 2;
              if (v136)
                goto LABEL_188;
            }
            v132 = v413;
          }
LABEL_188:
          v137 = v422;
          if (v7 < v422)
          {
            v137 = v422;
            do
            {
              v138 = *(v137 - 2);
              v139 = *(v137 - 1);
              v137 -= 2;
            }
            while ((sub_210209D54(v22, v23, v423, v132, v138, v139) & 1) != 0);
          }
          while (v7 < v137)
          {
            v429 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v137;
            *(_OWORD *)v137 = v429;
            v140 = **a3;
            v141 = (*a3)[1];
            v142 = vabdd_f64(v423, v140);
            v143 = vabdd_f64(v132, v141);
            v144 = v143 / v142;
            v145 = (v143 - v142) / (v142 + v143);
            if (v142 < v143)
              v144 = v142 / v143;
            else
              v145 = -v145;
            v146 = v144 > 0.414213562;
            if (v144 > 0.414213562)
              v147 = 1;
            else
              v147 = 2;
            if (v144 <= 0.414213562)
              v148 = 1;
            else
              v148 = -1;
            if (v144 > 0.414213562)
              v144 = v145;
            v149 = v132 - v141;
            if (v142 >= v143)
            {
              v150 = v148;
            }
            else
            {
              v146 = v147;
              v150 = -v148;
            }
            v42 = v143 == INFINITY;
            v151 = v423 - v140;
            v152 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v144 * v144), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v144 * v144), (float64x2_t)xmmword_210315370), v144 * v144 * (v144 * v144))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v144 * v144), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v144 * v144), (float64x2_t)xmmword_210315380), v144 * v144 * (v144 * v144))),
                       v144 * v144 * (v144 * v144) * (v144 * v144 * (v144 * v144))));
            v153 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v152, 1);
            v154 = v42 && v142 == INFINITY;
            v155 = v144 + v144 * vdivq_f64(v152, v153).f64[0];
            if (v154)
              v155 = 0.785398163;
            if (v149 == 0.0 && v151 == 0.0)
              v155 = 0.0;
            if (v151 < 0.0)
              v146 = 4 - v146;
            if (COERCE__INT64(v423 - v140) < 0)
              v150 = -v150;
            if (v149 < 0.0)
              v146 = -v146;
            v157 = (double)v146;
            v158 = (double)v146 * 3.061617e-17;
            if (COERCE__INT64(v132 - v141) >= 0)
              v159 = v150;
            else
              v159 = -v150;
            v160 = v158 + v157 * 0.785398163 + v155 * (double)v159;
            if (v160 <= 0.0)
              v160 = v160 + 6.28318531;
            do
            {
              v174 = v7[2];
              v175 = v7[3];
              v7 += 2;
              v176 = vabdd_f64(v174, v140);
              v177 = vabdd_f64(v175, v141);
              v178 = v176 / v177;
              if (v176 >= v177)
                v178 = v177 / v176;
              if (v178 > 0.414213562)
              {
                v161 = (v177 - v176) / (v176 + v177);
                if (v176 >= v177)
                  v161 = -v161;
                v162 = -1;
                v163 = 1;
              }
              else
              {
                v162 = 1;
                v163 = 2;
                v161 = v178;
              }
              v164 = v175 - v141;
              v165 = v174 - v140;
              v166 = v178 > 0.414213562;
              v167 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v161 * v161), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v161 * v161), (float64x2_t)xmmword_210315370), v161 * v161 * (v161 * v161))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v161 * v161), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v161 * v161), (float64x2_t)xmmword_210315380), v161 * v161 * (v161 * v161))),
                         v161 * v161 * (v161 * v161) * (v161 * v161 * (v161 * v161))));
              v168 = v161 + v161 * vdivq_f64(v167, (float64x2_t)vdupq_laneq_s64((int64x2_t)v167, 1)).f64[0];
              v169 = fabs(v165);
              if (fabs(v164) == INFINITY && v169 == INFINITY)
                v168 = 0.785398163;
              if (v176 >= v177)
                v163 = v166;
              else
                v162 = -v162;
              if (v165 < 0.0)
              {
                v162 = -v162;
                v163 = 4 - v163;
              }
              if (v164 < 0.0)
              {
                v162 = -v162;
                v163 = -v163;
              }
              if (v164 == 0.0 && v165 == 0.0)
                v172 = 0.0;
              else
                v172 = v168;
              v173 = (double)v163 * 3.061617e-17 + (double)v163 * 0.785398163 + v172 * (double)v162;
              if (v173 <= 0.0)
                v173 = v173 + 6.28318531;
            }
            while (v160 >= v173);
            do
            {
              v192 = *(v137 - 2);
              v193 = *(v137 - 1);
              v137 -= 2;
              v194 = vabdd_f64(v192, v140);
              v195 = vabdd_f64(v193, v141);
              v196 = v194 / v195;
              if (v194 >= v195)
                v196 = v195 / v194;
              if (v196 > 0.414213562)
              {
                v179 = (v195 - v194) / (v194 + v195);
                if (v194 >= v195)
                  v179 = -v179;
                v180 = -1;
                v181 = 1;
              }
              else
              {
                v180 = 1;
                v181 = 2;
                v179 = v196;
              }
              v182 = v193 - v141;
              v183 = v192 - v140;
              v184 = v196 > 0.414213562;
              v185 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v179 * v179), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v179 * v179), (float64x2_t)xmmword_210315370), v179 * v179 * (v179 * v179))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v179 * v179), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v179 * v179), (float64x2_t)xmmword_210315380), v179 * v179 * (v179 * v179))),
                         v179 * v179 * (v179 * v179) * (v179 * v179 * (v179 * v179))));
              v186 = v179 + v179 * vdivq_f64(v185, (float64x2_t)vdupq_laneq_s64((int64x2_t)v185, 1)).f64[0];
              v187 = fabs(v183);
              if (fabs(v182) == INFINITY && v187 == INFINITY)
                v186 = 0.785398163;
              if (v194 >= v195)
                v181 = v184;
              else
                v180 = -v180;
              if (v183 < 0.0)
              {
                v180 = -v180;
                v181 = 4 - v181;
              }
              if (v182 < 0.0)
              {
                v180 = -v180;
                v181 = -v181;
              }
              if (v182 == 0.0 && v183 == 0.0)
                v190 = 0.0;
              else
                v190 = v186;
              v191 = (double)v181 * 3.061617e-17 + (double)v181 * 0.785398163 + v190 * (double)v180;
              if (v191 <= 0.0)
                v191 = v191 + 6.28318531;
            }
            while (v160 < v191);
          }
          if (v7 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v7 - 1);
          a5 = 0;
          *(v7 - 2) = v423;
          *(v7 - 1) = v132;
          continue;
        }
        v25 = (float64x2_t)xmmword_210315330;
        v24 = (float64x2_t)xmmword_210315320;
        v27 = (float64x2_t)xmmword_2102DD520;
        v26 = (float64x2_t)xmmword_210315340;
        v29 = (float64x2_t)xmmword_210315360;
        v28 = (float64x2_t)xmmword_210315350;
        v31 = (float64x2_t)xmmword_210315380;
        v30 = (float64x2_t)xmmword_210315370;
        v20 = v423;
        v21 = v413;
LABEL_12:
        v32 = 0;
        v33 = vabdd_f64(v20, v22);
        v34 = vabdd_f64(v21, v23);
        v35 = v34 / v33;
        v36 = (v34 - v33) / (v33 + v34);
        if (v33 < v34)
          v35 = v33 / v34;
        else
          v36 = -v36;
        v37 = v35 > 0.414213562;
        if (v35 > 0.414213562)
          v38 = 1;
        else
          v38 = 2;
        if (v35 <= 0.414213562)
          v39 = 1;
        else
          v39 = -1;
        if (v35 > 0.414213562)
          v35 = v36;
        v40 = v21 - v23;
        v41 = v20 - v22;
        if (v33 < v34)
        {
          v39 = -v39;
          v37 = v38;
        }
        v42 = v34 == INFINITY && v33 == INFINITY;
        v43 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v24, v35 * v35), v27), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v29, v35 * v35), v30), v35 * v35 * (v35 * v35))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v25, v35 * v35), v26), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v28, v35 * v35), v31), v35 * v35 * (v35 * v35))), v35 * v35 * (v35 * v35) * (v35 * v35 * (v35 * v35))));
        v44 = v35 + v35 * vdivq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1)).f64[0];
        if (v42)
          v44 = 0.785398163;
        if (v41 < 0.0)
        {
          v39 = -v39;
          v37 = 4 - v37;
        }
        if (v40 >= 0.0)
          v45 = v39;
        else
          v45 = -v39;
        if (v40 < 0.0)
          v37 = -v37;
        if (v40 == 0.0 && v41 == 0.0)
          v44 = 0.0;
        v47 = (double)v37 * 3.061617e-17 + (double)v37 * 0.785398163 + v44 * (double)v45;
        if (v47 <= 0.0)
          v47 = v47 + 6.28318531;
        do
        {
          v61 = a1[v32 + 2];
          v62 = a1[v32 + 3];
          v63 = vabdd_f64(v61, v22);
          v64 = vabdd_f64(v62, v23);
          v65 = v63 / v64;
          if (v63 >= v64)
            v65 = v64 / v63;
          if (v65 > 0.414213562)
          {
            v48 = (v64 - v63) / (v63 + v64);
            if (v63 >= v64)
              v48 = -v48;
            v49 = -1;
            v50 = 1;
          }
          else
          {
            v49 = 1;
            v50 = 2;
            v48 = v65;
          }
          v51 = v62 - v23;
          v52 = v61 - v22;
          v53 = v63 < v64;
          if (v63 >= v64)
            v50 = v65 > 0.414213562;
          v54 = fabs(v52);
          v55 = fabs(v51);
          if (v53)
            v49 = -v49;
          v56 = v55 == INFINITY && v54 == INFINITY;
          v57 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v24, v48 * v48), v27), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v29, v48 * v48), v30), v48 * v48 * (v48 * v48))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v25, v48 * v48), v26), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v28, v48 * v48), v31), v48 * v48 * (v48 * v48))), v48 * v48 * (v48 * v48) * (v48 * v48 * (v48 * v48))));
          v58 = v48 + v48 * vdivq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v57, 1)).f64[0];
          if (v56)
            v58 = 0.785398163;
          if (v51 == 0.0 && v52 == 0.0)
            v58 = 0.0;
          if (v52 < 0.0)
          {
            v50 = 4 - v50;
            v49 = -v49;
          }
          if (v51 < 0.0)
          {
            v50 = -v50;
            v49 = -v49;
          }
          v60 = (double)v50 * 3.061617e-17 + (double)v50 * 0.785398163 + v58 * (double)v49;
          if (v60 <= 0.0)
            v60 = v60 + 6.28318531;
          v32 += 2;
        }
        while (v60 < v47);
        v66 = &a1[v32];
        v67 = v422;
        v68 = v21;
        if (v32 == 2)
        {
          v67 = v422;
          do
          {
            if (v66 >= v67)
              break;
            v72 = *(v67 - 2);
            v73 = *(v67 - 1);
            v67 -= 2;
            v74 = sub_210209D54(v22, v23, v72, v73, v20, v21);
            v21 = v68;
            v20 = v423;
          }
          while ((v74 & 1) == 0);
        }
        else
        {
          do
          {
            v69 = *(v67 - 2);
            v70 = *(v67 - 1);
            v67 -= 2;
            v71 = sub_210209D54(v22, v23, v69, v70, v20, v21);
            v21 = v68;
            v20 = v423;
          }
          while (!v71);
        }
        v7 = v66;
        if (v66 < v67)
        {
          v75 = v67;
          do
          {
            v428 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v75;
            *(_OWORD *)v75 = v428;
            v76 = **a3;
            v77 = (*a3)[1];
            v78 = vabdd_f64(v20, v76);
            v79 = vabdd_f64(v21, v77);
            v80 = v79 / v78;
            v81 = (v79 - v78) / (v78 + v79);
            if (v78 < v79)
              v80 = v78 / v79;
            else
              v81 = -v81;
            v82 = v80 > 0.414213562;
            if (v80 > 0.414213562)
              v83 = 1;
            else
              v83 = 2;
            if (v80 <= 0.414213562)
              v84 = 1;
            else
              v84 = -1;
            if (v80 > 0.414213562)
              v80 = v81;
            v85 = v21 - v77;
            v86 = v20 - v76;
            if (v78 < v79)
            {
              v84 = -v84;
              v82 = v83;
            }
            v87 = v79 == INFINITY && v78 == INFINITY;
            v88 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v80 * v80), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v80 * v80), (float64x2_t)xmmword_210315370), v80 * v80 * (v80 * v80))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v80 * v80), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v80 * v80), (float64x2_t)xmmword_210315380), v80 * v80 * (v80 * v80))), v80 * v80 * (v80 * v80) * (v80 * v80 * (v80 * v80))));
            v89 = v80 + v80 * vdivq_f64(v88, (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1)).f64[0];
            if (v87)
              v89 = 0.785398163;
            if (v86 < 0.0)
              v84 = -v84;
            if (COERCE__INT64(v20 - v76) < 0)
              v82 = 4 - v82;
            if (v85 >= 0.0)
              v90 = v84;
            else
              v90 = -v84;
            if (v85 < 0.0)
              v82 = -v82;
            if (v85 == 0.0 && v86 == 0.0)
              v89 = 0.0;
            v92 = (double)v82 * 3.061617e-17 + (double)v82 * 0.785398163 + v89 * (double)v90;
            if (v92 <= 0.0)
              v92 = v92 + 6.28318531;
            do
            {
              v107 = v7[2];
              v108 = v7[3];
              v7 += 2;
              v109 = vabdd_f64(v107, v76);
              v110 = vabdd_f64(v108, v77);
              v111 = v109 / v110;
              if (v109 >= v110)
                v111 = v110 / v109;
              if (v111 > 0.414213562)
              {
                v93 = (v110 - v109) / (v109 + v110);
                if (v109 >= v110)
                  v93 = -v93;
                v94 = -1;
                v95 = 1;
              }
              else
              {
                v94 = 1;
                v95 = 2;
                v93 = v111;
              }
              v96 = v108 - v77;
              v97 = v107 - v76;
              v98 = v109 < v110;
              if (v109 >= v110)
                v95 = v111 > 0.414213562;
              v99 = fabs(v96);
              if (v98)
                v94 = -v94;
              v42 = v99 == INFINITY;
              v100 = fabs(v97);
              v101 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v93 * v93), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v93 * v93), (float64x2_t)xmmword_210315370), v93 * v93 * (v93 * v93))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v93 * v93), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v93 * v93), (float64x2_t)xmmword_210315380), v93 * v93 * (v93 * v93))),
                         v93 * v93 * (v93 * v93) * (v93 * v93 * (v93 * v93))));
              v102 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v101, 1);
              v103 = v42 && v100 == INFINITY;
              v104 = v93 + v93 * vdivq_f64(v101, v102).f64[0];
              if (v103)
                v104 = 0.785398163;
              if (v96 == 0.0 && v97 == 0.0)
                v104 = 0.0;
              if (v97 < 0.0)
              {
                v95 = 4 - v95;
                v94 = -v94;
              }
              if (v96 < 0.0)
              {
                v95 = -v95;
                v94 = -v94;
              }
              v106 = (double)v95 * 3.061617e-17 + (double)v95 * 0.785398163 + v104 * (double)v94;
              if (v106 <= 0.0)
                v106 = v106 + 6.28318531;
            }
            while (v106 < v92);
            do
            {
              v126 = *(v75 - 2);
              v127 = *(v75 - 1);
              v75 -= 2;
              v128 = vabdd_f64(v126, v76);
              v129 = vabdd_f64(v127, v77);
              v130 = v128 / v129;
              if (v128 >= v129)
                v130 = v129 / v128;
              if (v130 > 0.414213562)
              {
                v112 = (v129 - v128) / (v128 + v129);
                if (v128 >= v129)
                  v112 = -v112;
                v113 = -1;
                v114 = 1;
              }
              else
              {
                v113 = 1;
                v114 = 2;
                v112 = v130;
              }
              v115 = v127 - v77;
              v116 = v126 - v76;
              v117 = v128 < v129;
              if (v128 >= v129)
                v114 = v130 > 0.414213562;
              v118 = fabs(v115);
              if (v117)
                v113 = -v113;
              v42 = v118 == INFINITY;
              v119 = fabs(v116);
              v120 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v112 * v112), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v112 * v112), (float64x2_t)xmmword_210315370), v112 * v112 * (v112 * v112))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v112 * v112), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v112 * v112), (float64x2_t)xmmword_210315380), v112 * v112 * (v112 * v112))),
                         v112 * v112 * (v112 * v112) * (v112 * v112 * (v112 * v112))));
              v121 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v120, 1);
              v122 = v42 && v119 == INFINITY;
              v123 = v112 + v112 * vdivq_f64(v120, v121).f64[0];
              if (v122)
                v123 = 0.785398163;
              if (v115 == 0.0 && v116 == 0.0)
                v123 = 0.0;
              if (v116 < 0.0)
              {
                v114 = 4 - v114;
                v113 = -v113;
              }
              if (v115 < 0.0)
              {
                v114 = -v114;
                v113 = -v113;
              }
              v125 = (double)v114 * 3.061617e-17 + (double)v114 * 0.785398163 + v123 * (double)v113;
              if (v125 <= 0.0)
                v125 = v125 + 6.28318531;
            }
            while (v125 >= v92);
          }
          while (v7 < v75);
        }
        if (v7 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v7 - 1);
        *(v7 - 2) = v20;
        *(v7 - 1) = v21;
        if (v66 < v67)
        {
LABEL_178:
          sub_210207FD8(a1, v7 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v131 = sub_21020A244(a1, v7 - 2, a3);
        if (!sub_21020A244(v7, v422, a3))
        {
          if (v131)
            continue;
          goto LABEL_178;
        }
        a2 = v7 - 2;
        if (!v131)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (const std::__fs::filesystem::path *)((char *)a2 - 32);
  p_size = (uint64_t *)a1;
LABEL_2:
  v11 = 1 - a4;
  v40 = a5;
  while (2)
  {
    a1 = (uint64_t)p_size;
    v12 = (char *)a2 - (char *)p_size;
    v13 = v12 >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v29 = *(char *)(a1 + 23);
        if (v29 >= 0)
          v30.__data_ = (const std::string_view::value_type *)a1;
        else
          v30.__data_ = *(const std::string_view::value_type **)a1;
        if (v29 >= 0)
          v30.__size_ = *(unsigned __int8 *)(a1 + 23);
        else
          v30.__size_ = *(_QWORD *)(a1 + 8);
        if (std::__fs::filesystem::path::__compare(v9, v30) < 0)
        {
          v31 = *(const std::string_view::value_type **)a1;
          *(_QWORD *)v42 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v42[7] = *(_QWORD *)(a1 + 15);
          v32 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v33 = *(_QWORD *)(a1 + 24);
          v34 = v9->__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)a1 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 16) = v34;
          a2[-1].__pn_.__r_.__value_.__s.__data_[15] = 0;
          a2[-2].__pn_.__r_.__value_.__s.__data_[16] = 0;
          *(_QWORD *)(a1 + 24) = *((_QWORD *)&a2[-1].__pn_.__r_.__value_.__l + 2);
          if (a2[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v9->__pn_.__r_.__value_.__l.__data_);
          a2[-2].__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v31;
          a2[-1].__pn_.__r_.__value_.__r.__words[0] = *(_QWORD *)v42;
          *(std::string::size_type *)((char *)a2[-1].__pn_.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v42[7];
          a2[-1].__pn_.__r_.__value_.__s.__data_[15] = v32;
          a2[-1].__pn_.__r_.__value_.__r.__words[2] = v33;
        }
        return;
      case 3uLL:
        sub_2102258F8((uint64_t *)a1, (std::__fs::filesystem::path *)(a1 + 32), (uint64_t)v9);
        return;
      case 4uLL:
        sub_210226534(a1, (uint64_t *)(a1 + 32), a1 + 64, (uint64_t)v9);
        return;
      case 5uLL:
        sub_210226798(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v9);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            sub_210225644(a1, a2);
          else
            sub_2102257AC(a1, a2);
          return;
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = a1 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_2102258F8((uint64_t *)v16, (std::__fs::filesystem::path *)a1, (uint64_t)v9);
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          else
          {
            sub_2102258F8((uint64_t *)a1, (std::__fs::filesystem::path *)v16, (uint64_t)v9);
            v17 = v9;
            v18 = a1 + 32 * v15;
            sub_2102258F8((uint64_t *)(a1 + 32), (std::__fs::filesystem::path *)(v18 - 32), (uint64_t)&a2[-3].__pn_.__r_.__value_.__l.__size_);
            sub_2102258F8((uint64_t *)(a1 + 64), (std::__fs::filesystem::path *)(a1 + 32 + 32 * v15), (uint64_t)&a2[-4]);
            sub_2102258F8((uint64_t *)(v18 - 32), (std::__fs::filesystem::path *)v16, a1 + 32 + 32 * v15);
            v19 = *(const std::string_view::value_type **)a1;
            *(_QWORD *)((char *)&v41 + 7) = *(_QWORD *)(a1 + 15);
            *(_QWORD *)&v41 = *(_QWORD *)(a1 + 8);
            v20 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            v21 = *(_QWORD *)(a1 + 24);
            v22 = *(_QWORD *)(v18 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = v22;
            v23 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v16 + 16);
            *(_OWORD *)a1 = v23;
            *(_BYTE *)(v16 + 23) = 0;
            *(_QWORD *)v16 = v19;
            *(_QWORD *)(v16 + 8) = v41;
            *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&v41 + 7);
            *(_BYTE *)(v16 + 23) = v20;
            *(_QWORD *)(v18 + 24) = v21;
            v9 = v17;
            a5 = v40;
            if ((v40 & 1) != 0)
              goto LABEL_17;
          }
          v24 = *(char *)(a1 + 23);
          if (v24 >= 0)
            v25.__data_ = (const std::string_view::value_type *)a1;
          else
            v25.__data_ = *(const std::string_view::value_type **)a1;
          if (v24 >= 0)
            v25.__size_ = *(unsigned __int8 *)(a1 + 23);
          else
            v25.__size_ = *(_QWORD *)(a1 + 8);
          if ((std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a1 - 32), v25) & 0x80000000) == 0)
          {
            p_size = sub_210225C70(a1, (unint64_t)a2);
            goto LABEL_22;
          }
LABEL_17:
          v26 = (const std::__fs::filesystem::path *)sub_210225F4C(a1, a2);
          if ((v27 & 1) == 0)
            goto LABEL_20;
          v28 = sub_210226220(a1, v26);
          p_size = (uint64_t *)&v26[1].__pn_.__r_.__value_.__l.__size_;
          if (!sub_210226220((uint64_t)&v26[1].__pn_.__r_.__value_.__l.__size_, a2))
          {
            v11 = v14 + 1;
            if (v28)
              continue;
LABEL_20:
            sub_210225134(a1, v26, a3, -v14, a5 & 1);
            p_size = (uint64_t *)&v26[1].__pn_.__r_.__value_.__l.__size_;
LABEL_22:
            a5 = 0;
            a4 = -v14;
            goto LABEL_2;
          }
          a4 = -v14;
          a2 = v26;
          if (v28)
            return;
          goto LABEL_1;
        }
        if ((const std::__fs::filesystem::path *)a1 != a2)
        {
          v35 = (v13 - 2) >> 1;
          v36 = v35 + 1;
          v37 = (__n128 *)(a1 + 32 * v35);
          do
          {
            sub_210226AAC(a1, a3, v12 >> 5, v37);
            v37 -= 2;
            --v36;
          }
          while (v36);
          v38 = (unint64_t)v12 >> 5;
          do
          {
            sub_210226C90(a1, (uint64_t)a2, a3, v38);
            a2 = (const std::__fs::filesystem::path *)((char *)a2 - 32);
          }
          while (v38-- > 2);
        }
        return;
    }
  }
}

