uint64_t sub_20F91EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = v6;
      v7 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a3 + 48) = v7;
      *(_BYTE *)(a3 + 88) = *(_BYTE *)(v5 + 88);
      v8 = *(_OWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v5 + 112);
      *(_OWORD *)(a3 + 96) = v8;
      *(_BYTE *)(a3 + 128) = *(_BYTE *)(v5 + 128);
      v9 = *(_OWORD *)(v5 + 136);
      *(_QWORD *)(a3 + 152) = *(_QWORD *)(v5 + 152);
      *(_OWORD *)(a3 + 136) = v9;
      v10 = *(_OWORD *)(v5 + 160);
      *(_QWORD *)(a3 + 176) = *(_QWORD *)(v5 + 176);
      *(_OWORD *)(a3 + 160) = v10;
      v11 = *(_OWORD *)(v5 + 184);
      v12 = *(_OWORD *)(v5 + 200);
      *(_DWORD *)(a3 + 216) = *(_DWORD *)(v5 + 216);
      *(_OWORD *)(a3 + 184) = v11;
      *(_OWORD *)(a3 + 200) = v12;
      *(_QWORD *)(a3 + 224) = *(_QWORD *)(v5 + 224);
      *(_QWORD *)(a3 + 232) = *(_QWORD *)(v5 + 232);
      *(_QWORD *)(a3 + 240) = *(_QWORD *)(v5 + 240);
      *(_QWORD *)(a3 + 248) = *(_QWORD *)(v5 + 248);
      *(_QWORD *)(a3 + 256) = *(_QWORD *)(v5 + 256);
      *(_QWORD *)(a3 + 264) = *(_QWORD *)(v5 + 264);
      v13 = *(_OWORD *)(v5 + 272);
      *(_QWORD *)(a3 + 288) = *(_QWORD *)(v5 + 288);
      *(_OWORD *)(a3 + 272) = v13;
      v14 = *(_OWORD *)(v5 + 296);
      *(_QWORD *)(a3 + 312) = *(_QWORD *)(v5 + 312);
      *(_OWORD *)(a3 + 296) = v14;
      v15 = *(_QWORD *)(v5 + 320);
      *(_BYTE *)(a3 + 328) = *(_BYTE *)(v5 + 328);
      *(_QWORD *)(a3 + 320) = v15;
      v16 = *(_OWORD *)(v5 + 336);
      *(_QWORD *)(v5 + 336) = 0;
      *(_QWORD *)(v5 + 344) = 0;
      v17 = *(std::__shared_weak_count **)(a3 + 344);
      *(_OWORD *)(a3 + 336) = v16;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *(_BYTE *)(a3 + 352) = *(_BYTE *)(v5 + 352);
      v5 += 360;
      a3 += 360;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20F91F01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = v6;
      v7 = *(_OWORD *)(v5 + 40);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_OWORD *)(a3 + 40) = v7;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(v5 + 104);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v5 + 112);
      *(_QWORD *)(a3 + 120) = *(_QWORD *)(v5 + 120);
      *(_QWORD *)(a3 + 128) = *(_QWORD *)(v5 + 128);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(v5 + 136);
      *(_QWORD *)(a3 + 144) = *(_QWORD *)(v5 + 144);
      *(_QWORD *)(a3 + 152) = *(_QWORD *)(v5 + 152);
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(v5 + 160);
      v8 = *(_QWORD *)(v5 + 168);
      *(_BYTE *)(a3 + 176) = *(_BYTE *)(v5 + 176);
      *(_QWORD *)(a3 + 168) = v8;
      v9 = *(_OWORD *)(v5 + 184);
      *(_QWORD *)(v5 + 184) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      v10 = *(std::__shared_weak_count **)(a3 + 192);
      *(_OWORD *)(a3 + 184) = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      *(_BYTE *)(a3 + 200) = *(_BYTE *)(v5 + 200);
      v5 += 208;
      a3 += 208;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20F91F160(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (-v12 == 1)
    {
LABEL_14:
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_6:
    v13 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v9 < v13)
    {
      *(_QWORD *)v9 = a2;
      v14 = (uint64_t)(v9 + 8);
LABEL_44:
      *(_QWORD *)(a1 + 56) = v14;
      return;
    }
    v18 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20E867F44();
    v19 = v13 - (_QWORD)v10;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_20E877A38();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v12];
      v23 = &v21[8 * v20];
      *v22 = a2;
      v14 = (uint64_t)(v22 + 1);
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
        goto LABEL_42;
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v12);
      v23 = 0;
      *(_QWORD *)(8 * v12) = a2;
      v14 = 8 * v12 + 8;
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
      {
LABEL_42:
        *(_QWORD *)(a1 + 48) = v22;
        *(_QWORD *)(a1 + 56) = v14;
        *(_QWORD *)(a1 + 64) = v23;
        if (v9)
          operator delete(v9);
        goto LABEL_44;
      }
    }
    v32 = (unint64_t)(v24 - 8);
    if (v32 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v9 - v21 - (_QWORD)v11) < 0x20)
      goto LABEL_52;
    v33 = (v32 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v9[-v34];
    v22 = (_QWORD *)((char *)v22 - v34);
    v36 = &v21[8 * v12 - 16];
    v37 = v9 - 16;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 4;
    }
    while (v38);
    v9 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v40 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v40;
      }
      while (v9 != v10);
    }
    v9 = *(char **)(a1 + 48);
    goto LABEL_42;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 232 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v17 = 8;
      do
      {
        v8 += v17;
        v17 *= 2;
        --v5;
      }
      while (v5);
    }
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (v8 + v6 - v12 == 1)
      goto LABEL_14;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v15 = 0;
    v16 = v4 - 1;
    if (v4 == 1)
      goto LABEL_29;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 48);
    v29 = *(char **)(a1 + 56);
    v30 = (unint64_t)&v29[-v28];
    if ((uint64_t)&v29[-v28] >> 3)
      return;
    goto LABEL_30;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v25 = v4 - 1;
  v15 = 0;
  v16 = v25 - 1;
  if (v25 != 1)
  {
LABEL_27:
    v26 = 8;
    do
    {
      v15 += v26;
      v26 *= 2;
      --v16;
    }
    while (v16);
  }
LABEL_29:
  v27 = v15 + v7;
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(char **)(a1 + 56);
  v30 = (unint64_t)&v29[-v28];
  if (v27 != (uint64_t)&v29[-v28] >> 3)
    return;
LABEL_30:
  v41 = a1;
  v47 = &v41;
  v46 = a1;
  if ((char *)v28 != v29 && v30 >= 0xF0)
  {
    sub_20F8B12C8(v28, v29, (uint64_t)v43, 126 - 2 * __clz(v27), 1);
    v31 = *(_QWORD *)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = v31;
    v43[0] = v31;
    v43[1] = v44;
    v43[2] = &v47;
    v42[0] = a1;
    v42[1] = (uint64_t)&v45;
    v42[2] = (uint64_t)&v44;
    sub_20F3C8FCC(&v46, (uint64_t)v43, v42);
    v28 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v28;
}

void sub_20F91F46C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (-v12 == 1)
    {
LABEL_14:
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_6:
    v13 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v9 < v13)
    {
      *(_QWORD *)v9 = a2;
      v14 = (uint64_t)(v9 + 8);
LABEL_44:
      *(_QWORD *)(a1 + 56) = v14;
      return;
    }
    v18 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20E867F44();
    v19 = v13 - (_QWORD)v10;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_20E877A38();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v12];
      v23 = &v21[8 * v20];
      *v22 = a2;
      v14 = (uint64_t)(v22 + 1);
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
        goto LABEL_42;
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v12);
      v23 = 0;
      *(_QWORD *)(8 * v12) = a2;
      v14 = 8 * v12 + 8;
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
      {
LABEL_42:
        *(_QWORD *)(a1 + 48) = v22;
        *(_QWORD *)(a1 + 56) = v14;
        *(_QWORD *)(a1 + 64) = v23;
        if (v9)
          operator delete(v9);
        goto LABEL_44;
      }
    }
    v32 = (unint64_t)(v24 - 8);
    if (v32 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v9 - v21 - (_QWORD)v11) < 0x20)
      goto LABEL_52;
    v33 = (v32 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v9[-v34];
    v22 = (_QWORD *)((char *)v22 - v34);
    v36 = &v21[8 * v12 - 16];
    v37 = v9 - 16;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 4;
    }
    while (v38);
    v9 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v40 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v40;
      }
      while (v9 != v10);
    }
    v9 = *(char **)(a1 + 48);
    goto LABEL_42;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 80 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v17 = 8;
      do
      {
        v8 += v17;
        v17 *= 2;
        --v5;
      }
      while (v5);
    }
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (v8 + v6 - v12 == 1)
      goto LABEL_14;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v15 = 0;
    v16 = v4 - 1;
    if (v4 == 1)
      goto LABEL_29;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 48);
    v29 = *(char **)(a1 + 56);
    v30 = (unint64_t)&v29[-v28];
    if ((uint64_t)&v29[-v28] >> 3)
      return;
    goto LABEL_30;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v25 = v4 - 1;
  v15 = 0;
  v16 = v25 - 1;
  if (v25 != 1)
  {
LABEL_27:
    v26 = 8;
    do
    {
      v15 += v26;
      v26 *= 2;
      --v16;
    }
    while (v16);
  }
LABEL_29:
  v27 = v15 + v7;
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(char **)(a1 + 56);
  v30 = (unint64_t)&v29[-v28];
  if (v27 != (uint64_t)&v29[-v28] >> 3)
    return;
LABEL_30:
  v41 = a1;
  v47 = &v41;
  v46 = a1;
  if ((char *)v28 != v29 && v30 >= 0xF0)
  {
    sub_20F8B0704(v28, v29, (uint64_t)v43, 126 - 2 * __clz(v27), 1);
    v31 = *(_QWORD *)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = v31;
    v43[0] = v31;
    v43[1] = v44;
    v43[2] = &v47;
    v42[0] = a1;
    v42[1] = (uint64_t)&v45;
    v42[2] = (uint64_t)&v44;
    sub_20F8B0594(&v46, (uint64_t)v43, v42);
    v28 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v28;
}

void sub_20F91F778(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (-v12 == 1)
    {
LABEL_14:
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_6:
    v13 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v9 < v13)
    {
      *(_QWORD *)v9 = a2;
      v14 = (uint64_t)(v9 + 8);
LABEL_44:
      *(_QWORD *)(a1 + 56) = v14;
      return;
    }
    v18 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20E867F44();
    v19 = v13 - (_QWORD)v10;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_20E877A38();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v12];
      v23 = &v21[8 * v20];
      *v22 = a2;
      v14 = (uint64_t)(v22 + 1);
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
        goto LABEL_42;
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v12);
      v23 = 0;
      *(_QWORD *)(8 * v12) = a2;
      v14 = 8 * v12 + 8;
      v24 = (char *)(v9 - v10);
      if (v9 == v10)
      {
LABEL_42:
        *(_QWORD *)(a1 + 48) = v22;
        *(_QWORD *)(a1 + 56) = v14;
        *(_QWORD *)(a1 + 64) = v23;
        if (v9)
          operator delete(v9);
        goto LABEL_44;
      }
    }
    v32 = (unint64_t)(v24 - 8);
    if (v32 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v9 - v21 - (_QWORD)v11) < 0x20)
      goto LABEL_52;
    v33 = (v32 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v9[-v34];
    v22 = (_QWORD *)((char *)v22 - v34);
    v36 = &v21[8 * v12 - 16];
    v37 = v9 - 16;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 4;
    }
    while (v38);
    v9 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v40 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v40;
      }
      while (v9 != v10);
    }
    v9 = *(char **)(a1 + 48);
    goto LABEL_42;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 88 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v17 = 8;
      do
      {
        v8 += v17;
        v17 *= 2;
        --v5;
      }
      while (v5);
    }
    v10 = *(char **)(a1 + 48);
    v9 = *(char **)(a1 + 56);
    v11 = (char *)(v9 - v10);
    v12 = (v9 - v10) >> 3;
    if (v8 + v6 - v12 == 1)
      goto LABEL_14;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v15 = 0;
    v16 = v4 - 1;
    if (v4 == 1)
      goto LABEL_29;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 48);
    v29 = *(char **)(a1 + 56);
    v30 = (unint64_t)&v29[-v28];
    if ((uint64_t)&v29[-v28] >> 3)
      return;
    goto LABEL_30;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v25 = v4 - 1;
  v15 = 0;
  v16 = v25 - 1;
  if (v25 != 1)
  {
LABEL_27:
    v26 = 8;
    do
    {
      v15 += v26;
      v26 *= 2;
      --v16;
    }
    while (v16);
  }
LABEL_29:
  v27 = v15 + v7;
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(char **)(a1 + 56);
  v30 = (unint64_t)&v29[-v28];
  if (v27 != (uint64_t)&v29[-v28] >> 3)
    return;
LABEL_30:
  v41 = a1;
  v47 = &v41;
  v46 = a1;
  if ((char *)v28 != v29 && v30 >= 0xF0)
  {
    sub_20F8AF9D0(v28, v29, (uint64_t)v43, 126 - 2 * __clz(v27), 1);
    v31 = *(_QWORD *)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = v31;
    v43[0] = v31;
    v43[1] = v44;
    v43[2] = &v47;
    v42[0] = a1;
    v42[1] = (uint64_t)&v45;
    v42[2] = (uint64_t)&v44;
    sub_20F8AF860(&v46, (uint64_t)v43, v42);
    v28 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v28;
}

void sub_20F91FA84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;

  v1 = a1[2];
  v2 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a1 + 1504) - *(_QWORD *)(*a1 + 1496)) >> 4);
  *(_DWORD *)a1[1] -= 991146299 * ((uint64_t)(*(_QWORD *)(*a1 + 1504) - *(_QWORD *)(*a1 + 1496)) >> 4);
  if (*(_BYTE *)a1[3])
  {
    if (*(_BYTE *)(v1 + 58055) && (_DWORD)v2 != 0)
    {
      v4 = __p;
      sub_20F9218B0((uint64_t)__p);
      v5 = v13;
      if ((v13 & 0x80u) != 0)
      {
        v5 = (uint64_t)__p[1];
        v4 = (void **)__p[0];
      }
      if (v5 >= 11)
      {
        v6 = (char *)v4 + v5;
        v7 = v4;
        do
        {
          v8 = (void **)memchr(v7, 99, v5 - 10);
          if (!v8)
            break;
          if (*v8 == (void *)0x69763A3A64337663 && *(void **)((char *)v8 + 3) == (void *)0x3A3A6F69763A3A64)
          {
            if (v8 != (void **)v6 && v8 == v4)
              sub_20E8D1238(__p, 0, 0xBuLL);
            break;
          }
          v7 = (void **)((char *)v8 + 1);
          v5 = v6 - (char *)v7;
        }
        while (v6 - (char *)v7 >= 11);
      }
      v10 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)__p, (uint64_t)__p);
      v11 = v10[8] + v2;
      ++v10[7];
      v10[8] = v11;
      if ((char)v13 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20F91FC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F91FC24(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  void **v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;

  v1 = a1[2];
  v2 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(*a1 + 1480) - *(_QWORD *)(*a1 + 1472)) >> 3);
  *(_DWORD *)a1[1] -= 373475417 * ((uint64_t)(*(_QWORD *)(*a1 + 1480) - *(_QWORD *)(*a1 + 1472)) >> 3);
  if (*(_BYTE *)a1[3])
  {
    if (*(_BYTE *)(v1 + 58055) && (_DWORD)v2 != 0)
    {
      v4 = __p;
      sub_20F921690((uint64_t)__p);
      v5 = v13;
      if ((v13 & 0x80u) != 0)
      {
        v5 = (uint64_t)__p[1];
        v4 = (void **)__p[0];
      }
      if (v5 >= 11)
      {
        v6 = (char *)v4 + v5;
        v7 = v4;
        do
        {
          v8 = (void **)memchr(v7, 99, v5 - 10);
          if (!v8)
            break;
          if (*v8 == (void *)0x69763A3A64337663 && *(void **)((char *)v8 + 3) == (void *)0x3A3A6F69763A3A64)
          {
            if (v8 != (void **)v6 && v8 == v4)
              sub_20E8D1238(__p, 0, 0xBuLL);
            break;
          }
          v7 = (void **)((char *)v8 + 1);
          v5 = v6 - (char *)v7;
        }
        while (v6 - (char *)v7 >= 11);
      }
      v10 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)__p, (uint64_t)__p);
      v11 = v10[8] + v2;
      ++v10[7];
      v10[8] = v11;
      if ((char)v13 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20F91FDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F91FDC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v29;
  uint64_t v30;
  std::string v31;

  v1 = a1[2];
  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*a1 + 1408) - *(_QWORD *)(*a1 + 1400)) >> 4);
  *(_DWORD *)a1[1] -= 1171354717 * ((uint64_t)(*(_QWORD *)(*a1 + 1408) - *(_QWORD *)(*a1 + 1400)) >> 4);
  if (!*(_BYTE *)a1[3])
    return;
  if (!*(_BYTE *)(v1 + 58055) || (_DWORD)v2 == 0)
    return;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_210312DD0;
  strcpy(v31.__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::ExternalLensCalibVariable<double>>]");
  sub_20E8D1238(&v31, 96, 1uLL);
  v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v8 = v31.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v31
       : (std::string *)v31.__r_.__value_.__r.__words[0];
    v10 = memchr(v9, 60, v8);
    if (v10)
    {
      v11 = v10 - (_BYTE *)v9;
      if (v10 - (_BYTE *)v9 != -1)
      {
        if (v5 < 0)
        {
          if (size >= v11)
          {
            v31.__r_.__value_.__l.__size_ = v10 - (_BYTE *)v9;
            goto LABEL_20;
          }
        }
        else if (v11 <= v4)
        {
          *((_BYTE *)&v31.__r_.__value_.__s + 23) = v11 & 0x7F;
          v6 = &v31;
LABEL_20:
          v6->__r_.__value_.__s.__data_[v11] = 0;
          std::string::append(&v31, "<...>", 5uLL);
          v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          goto LABEL_21;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_21:
  if ((v5 & 0x80u) == 0)
    v12 = v4;
  else
    v12 = size;
  v13 = &v31;
  if ((v5 & 0x80u) == 0)
    v14 = &v31;
  else
    v14 = v6;
  if (v12 >= 5)
  {
    v15 = (std::string *)((char *)v14 + v12);
    v16 = v12;
    v17 = v14;
    do
    {
      v18 = (std::string *)memchr(v17, 99, v16 - 4);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 979465827 && v18->__r_.__value_.__s.__data_[4] == 58)
      {
        if (v18 != v15 && v18 == v14)
        {
          v20 = 5;
          v13 = &v31;
LABEL_51:
          sub_20E8D1238(&v31, 0, v20);
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v16 = (char *)v15 - (char *)v17;
    }
    while ((char *)v15 - (char *)v17 >= 5);
    if (v12 >= 7)
    {
      v21 = v14;
      do
      {
        v22 = (std::string *)memchr(v21, 58, v12 - 6);
        if (!v22)
          break;
        if (LODWORD(v22->__r_.__value_.__l.__data_) == 1986214458
          && *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3) == 976904566)
        {
          if (v22 == v15)
            break;
          v13 = &v31;
          if (v22 == v14)
          {
            v20 = 7;
            goto LABEL_51;
          }
          goto LABEL_53;
        }
        v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v15 - (char *)v21;
      }
      while ((char *)v15 - (char *)v21 >= 7);
    }
    v13 = &v31;
  }
LABEL_53:
  if ((v5 & 0x80u) == 0)
    v24 = v5;
  else
    v24 = size;
  if ((v5 & 0x80u) != 0)
    v13 = v6;
  if (v24 >= 11)
  {
    v25 = (std::string *)((char *)v13 + v24);
    v26 = v13;
    do
    {
      v27 = (std::string *)memchr(v26, 99, v24 - 10);
      if (!v27)
        break;
      if (v27->__r_.__value_.__r.__words[0] == 0x69763A3A64337663
        && *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 3) == 0x3A3A6F69763A3A64)
      {
        if (v27 != v25 && v27 == v13)
          sub_20E8D1238(&v31, 0, 0xBuLL);
        break;
      }
      v26 = (std::string *)((char *)&v27->__r_.__value_.__l.__data_ + 1);
      v24 = (char *)v25 - (char *)v26;
    }
    while ((char *)v25 - (char *)v26 >= 11);
  }
  v29 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v31);
  v30 = v29[8] + v2;
  ++v29[7];
  v29[8] = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_20F920124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F92014C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v29;
  uint64_t v30;
  std::string v31;

  v1 = a1[2];
  v2 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a1 + 1384) - *(_QWORD *)(*a1 + 1376)) >> 4);
  *(_DWORD *)a1[1] -= 991146299 * ((uint64_t)(*(_QWORD *)(*a1 + 1384) - *(_QWORD *)(*a1 + 1376)) >> 4);
  if (!*(_BYTE *)a1[3])
    return;
  if (!*(_BYTE *)(v1 + 58055) || (_DWORD)v2 == 0)
    return;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_2102DCFA0;
  strcpy(v31.__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::RadialDistortionCalibVariable<double>>]");
  sub_20E8D1238(&v31, 100, 1uLL);
  v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v8 = v31.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v31
       : (std::string *)v31.__r_.__value_.__r.__words[0];
    v10 = memchr(v9, 60, v8);
    if (v10)
    {
      v11 = v10 - (_BYTE *)v9;
      if (v10 - (_BYTE *)v9 != -1)
      {
        if (v5 < 0)
        {
          if (size >= v11)
          {
            v31.__r_.__value_.__l.__size_ = v10 - (_BYTE *)v9;
            goto LABEL_20;
          }
        }
        else if (v11 <= v4)
        {
          *((_BYTE *)&v31.__r_.__value_.__s + 23) = v11 & 0x7F;
          v6 = &v31;
LABEL_20:
          v6->__r_.__value_.__s.__data_[v11] = 0;
          std::string::append(&v31, "<...>", 5uLL);
          v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          goto LABEL_21;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_21:
  if ((v5 & 0x80u) == 0)
    v12 = v4;
  else
    v12 = size;
  v13 = &v31;
  if ((v5 & 0x80u) == 0)
    v14 = &v31;
  else
    v14 = v6;
  if (v12 >= 5)
  {
    v15 = (std::string *)((char *)v14 + v12);
    v16 = v12;
    v17 = v14;
    do
    {
      v18 = (std::string *)memchr(v17, 99, v16 - 4);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 979465827 && v18->__r_.__value_.__s.__data_[4] == 58)
      {
        if (v18 != v15 && v18 == v14)
        {
          v20 = 5;
          v13 = &v31;
LABEL_51:
          sub_20E8D1238(&v31, 0, v20);
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v16 = (char *)v15 - (char *)v17;
    }
    while ((char *)v15 - (char *)v17 >= 5);
    if (v12 >= 7)
    {
      v21 = v14;
      do
      {
        v22 = (std::string *)memchr(v21, 58, v12 - 6);
        if (!v22)
          break;
        if (LODWORD(v22->__r_.__value_.__l.__data_) == 1986214458
          && *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3) == 976904566)
        {
          if (v22 == v15)
            break;
          v13 = &v31;
          if (v22 == v14)
          {
            v20 = 7;
            goto LABEL_51;
          }
          goto LABEL_53;
        }
        v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v15 - (char *)v21;
      }
      while ((char *)v15 - (char *)v21 >= 7);
    }
    v13 = &v31;
  }
LABEL_53:
  if ((v5 & 0x80u) == 0)
    v24 = v5;
  else
    v24 = size;
  if ((v5 & 0x80u) != 0)
    v13 = v6;
  if (v24 >= 11)
  {
    v25 = (std::string *)((char *)v13 + v24);
    v26 = v13;
    do
    {
      v27 = (std::string *)memchr(v26, 99, v24 - 10);
      if (!v27)
        break;
      if (v27->__r_.__value_.__r.__words[0] == 0x69763A3A64337663
        && *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 3) == 0x3A3A6F69763A3A64)
      {
        if (v27 != v25 && v27 == v13)
          sub_20E8D1238(&v31, 0, 0xBuLL);
        break;
      }
      v26 = (std::string *)((char *)&v27->__r_.__value_.__l.__data_ + 1);
      v24 = (char *)v25 - (char *)v26;
    }
    while ((char *)v25 - (char *)v26 >= 11);
  }
  v29 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v31);
  v30 = v29[8] + v2;
  ++v29[7];
  v29[8] = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_20F9204B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F9204D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;

  v1 = a1[2];
  v2 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(*a1 + 1312) - *(_QWORD *)(*a1 + 1304)) >> 3);
  *(_DWORD *)a1[1] -= 1527099483 * ((uint64_t)(*(_QWORD *)(*a1 + 1312) - *(_QWORD *)(*a1 + 1304)) >> 3);
  if (*(_BYTE *)a1[3])
  {
    if (*(_BYTE *)(v1 + 58055) && (_DWORD)v2 != 0)
    {
      v4 = __p;
      sub_20F921478((uint64_t)__p);
      v5 = v13;
      if ((v13 & 0x80u) != 0)
      {
        v5 = (uint64_t)__p[1];
        v4 = (void **)__p[0];
      }
      if (v5 >= 11)
      {
        v6 = (char *)v4 + v5;
        v7 = v4;
        do
        {
          v8 = (void **)memchr(v7, 99, v5 - 10);
          if (!v8)
            break;
          if (*v8 == (void *)0x69763A3A64337663 && *(void **)((char *)v8 + 3) == (void *)0x3A3A6F69763A3A64)
          {
            if (v8 != (void **)v6 && v8 == v4)
              sub_20E8D1238(__p, 0, 0xBuLL);
            break;
          }
          v7 = (void **)((char *)v8 + 1);
          v5 = v6 - (char *)v7;
        }
        while (v6 - (char *)v7 >= 11);
      }
      v10 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)__p, (uint64_t)__p);
      v11 = v10[8] + v2;
      ++v10[7];
      v10[8] = v11;
      if ((char)v13 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20F920658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F920678(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v29;
  uint64_t v30;
  std::string v31;

  v1 = a1[2];
  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a1 + 1168) - *(_QWORD *)(*a1 + 1160)) >> 5);
  *(_DWORD *)a1[1] -= 858993459 * ((uint64_t)(*(_QWORD *)(*a1 + 1168) - *(_QWORD *)(*a1 + 1160)) >> 5);
  if (!*(_BYTE *)a1[3])
    return;
  if (!*(_BYTE *)(v1 + 58055) || (_DWORD)v2 == 0)
    return;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
  *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_2103134C0;
  strcpy(v31.__r_.__value_.__l.__data_, "cv3d::vio::VIOSLAMLandmarkPriorFactor<double, cv3d::vio::VIOLandmarkVariable<double>>]");
  sub_20E8D1238(&v31, 85, 1uLL);
  v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v8 = v31.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v31
       : (std::string *)v31.__r_.__value_.__r.__words[0];
    v10 = memchr(v9, 60, v8);
    if (v10)
    {
      v11 = v10 - (_BYTE *)v9;
      if (v10 - (_BYTE *)v9 != -1)
      {
        if (v5 < 0)
        {
          if (size >= v11)
          {
            v31.__r_.__value_.__l.__size_ = v10 - (_BYTE *)v9;
            goto LABEL_20;
          }
        }
        else if (v11 <= v4)
        {
          *((_BYTE *)&v31.__r_.__value_.__s + 23) = v11 & 0x7F;
          v6 = &v31;
LABEL_20:
          v6->__r_.__value_.__s.__data_[v11] = 0;
          std::string::append(&v31, "<...>", 5uLL);
          v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          goto LABEL_21;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_21:
  if ((v5 & 0x80u) == 0)
    v12 = v4;
  else
    v12 = size;
  v13 = &v31;
  if ((v5 & 0x80u) == 0)
    v14 = &v31;
  else
    v14 = v6;
  if (v12 >= 5)
  {
    v15 = (std::string *)((char *)v14 + v12);
    v16 = v12;
    v17 = v14;
    do
    {
      v18 = (std::string *)memchr(v17, 99, v16 - 4);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 979465827 && v18->__r_.__value_.__s.__data_[4] == 58)
      {
        if (v18 != v15 && v18 == v14)
        {
          v20 = 5;
          v13 = &v31;
LABEL_51:
          sub_20E8D1238(&v31, 0, v20);
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v16 = (char *)v15 - (char *)v17;
    }
    while ((char *)v15 - (char *)v17 >= 5);
    if (v12 >= 7)
    {
      v21 = v14;
      do
      {
        v22 = (std::string *)memchr(v21, 58, v12 - 6);
        if (!v22)
          break;
        if (LODWORD(v22->__r_.__value_.__l.__data_) == 1986214458
          && *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3) == 976904566)
        {
          if (v22 == v15)
            break;
          v13 = &v31;
          if (v22 == v14)
          {
            v20 = 7;
            goto LABEL_51;
          }
          goto LABEL_53;
        }
        v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v15 - (char *)v21;
      }
      while ((char *)v15 - (char *)v21 >= 7);
    }
    v13 = &v31;
  }
LABEL_53:
  if ((v5 & 0x80u) == 0)
    v24 = v5;
  else
    v24 = size;
  if ((v5 & 0x80u) != 0)
    v13 = v6;
  if (v24 >= 11)
  {
    v25 = (std::string *)((char *)v13 + v24);
    v26 = v13;
    do
    {
      v27 = (std::string *)memchr(v26, 99, v24 - 10);
      if (!v27)
        break;
      if (v27->__r_.__value_.__r.__words[0] == 0x69763A3A64337663
        && *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 3) == 0x3A3A6F69763A3A64)
      {
        if (v27 != v25 && v27 == v13)
          sub_20E8D1238(&v31, 0, 0xBuLL);
        break;
      }
      v26 = (std::string *)((char *)&v27->__r_.__value_.__l.__data_ + 1);
      v24 = (char *)v25 - (char *)v26;
    }
    while ((char *)v25 - (char *)v26 >= 11);
  }
  v29 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v31);
  v30 = v29[8] + v2;
  ++v29[7];
  v29[8] = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_20F9209D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F9209FC(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v29;
  uint64_t v30;
  std::string v31;

  v1 = a1[2];
  v2 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(*a1 + 1144) - *(_QWORD *)(*a1 + 1136)) >> 3);
  *(_DWORD *)a1[1] -= 1963413621 * ((uint64_t)(*(_QWORD *)(*a1 + 1144) - *(_QWORD *)(*a1 + 1136)) >> 3);
  if (!*(_BYTE *)a1[3])
    return;
  if (!*(_BYTE *)(v1 + 58055) || (_DWORD)v2 == 0)
    return;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_2103B8450;
  strcpy(v31.__r_.__value_.__l.__data_, "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIODepthExtrinsicsVariable<double>>]");
  sub_20E8D1238(&v31, 95, 1uLL);
  v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v8 = v31.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v31
       : (std::string *)v31.__r_.__value_.__r.__words[0];
    v10 = memchr(v9, 60, v8);
    if (v10)
    {
      v11 = v10 - (_BYTE *)v9;
      if (v10 - (_BYTE *)v9 != -1)
      {
        if (v5 < 0)
        {
          if (size >= v11)
          {
            v31.__r_.__value_.__l.__size_ = v10 - (_BYTE *)v9;
            goto LABEL_20;
          }
        }
        else if (v11 <= v4)
        {
          *((_BYTE *)&v31.__r_.__value_.__s + 23) = v11 & 0x7F;
          v6 = &v31;
LABEL_20:
          v6->__r_.__value_.__s.__data_[v11] = 0;
          std::string::append(&v31, "<...>", 5uLL);
          v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          goto LABEL_21;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_21:
  if ((v5 & 0x80u) == 0)
    v12 = v4;
  else
    v12 = size;
  v13 = &v31;
  if ((v5 & 0x80u) == 0)
    v14 = &v31;
  else
    v14 = v6;
  if (v12 >= 5)
  {
    v15 = (std::string *)((char *)v14 + v12);
    v16 = v12;
    v17 = v14;
    do
    {
      v18 = (std::string *)memchr(v17, 99, v16 - 4);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 979465827 && v18->__r_.__value_.__s.__data_[4] == 58)
      {
        if (v18 != v15 && v18 == v14)
        {
          v20 = 5;
          v13 = &v31;
LABEL_51:
          sub_20E8D1238(&v31, 0, v20);
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v16 = (char *)v15 - (char *)v17;
    }
    while ((char *)v15 - (char *)v17 >= 5);
    if (v12 >= 7)
    {
      v21 = v14;
      do
      {
        v22 = (std::string *)memchr(v21, 58, v12 - 6);
        if (!v22)
          break;
        if (LODWORD(v22->__r_.__value_.__l.__data_) == 1986214458
          && *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3) == 976904566)
        {
          if (v22 == v15)
            break;
          v13 = &v31;
          if (v22 == v14)
          {
            v20 = 7;
            goto LABEL_51;
          }
          goto LABEL_53;
        }
        v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v15 - (char *)v21;
      }
      while ((char *)v15 - (char *)v21 >= 7);
    }
    v13 = &v31;
  }
LABEL_53:
  if ((v5 & 0x80u) == 0)
    v24 = v5;
  else
    v24 = size;
  if ((v5 & 0x80u) != 0)
    v13 = v6;
  if (v24 >= 11)
  {
    v25 = (std::string *)((char *)v13 + v24);
    v26 = v13;
    do
    {
      v27 = (std::string *)memchr(v26, 99, v24 - 10);
      if (!v27)
        break;
      if (v27->__r_.__value_.__r.__words[0] == 0x69763A3A64337663
        && *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 3) == 0x3A3A6F69763A3A64)
      {
        if (v27 != v25 && v27 == v13)
          sub_20E8D1238(&v31, 0, 0xBuLL);
        break;
      }
      v26 = (std::string *)((char *)&v27->__r_.__value_.__l.__data_ + 1);
      v24 = (char *)v25 - (char *)v26;
    }
    while ((char *)v25 - (char *)v26 >= 11);
  }
  v29 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v31);
  v30 = v29[8] + v2;
  ++v29[7];
  v29[8] = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_20F920D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F920D80(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v29;
  uint64_t v30;
  std::string v31;

  v1 = a1[2];
  v2 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(*a1 + 1096) - *(_QWORD *)(*a1 + 1088)) >> 3);
  *(_DWORD *)a1[1] -= 1963413621 * ((uint64_t)(*(_QWORD *)(*a1 + 1096) - *(_QWORD *)(*a1 + 1088)) >> 3);
  if (!*(_BYTE *)a1[3])
    return;
  if (!*(_BYTE *)(v1 + 58055) || (_DWORD)v2 == 0)
    return;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_2102DB450;
  strcpy(v31.__r_.__value_.__l.__data_, "cv3d::vio::VIOPosePriorFactor<double>]");
  sub_20E8D1238(&v31, 37, 1uLL);
  v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v8 = v31.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v31
       : (std::string *)v31.__r_.__value_.__r.__words[0];
    v10 = memchr(v9, 60, v8);
    if (v10)
    {
      v11 = v10 - (_BYTE *)v9;
      if (v10 - (_BYTE *)v9 != -1)
      {
        if (v5 < 0)
        {
          if (size >= v11)
          {
            v31.__r_.__value_.__l.__size_ = v10 - (_BYTE *)v9;
            goto LABEL_20;
          }
        }
        else if (v11 <= v4)
        {
          *((_BYTE *)&v31.__r_.__value_.__s + 23) = v11 & 0x7F;
          v6 = &v31;
LABEL_20:
          v6->__r_.__value_.__s.__data_[v11] = 0;
          std::string::append(&v31, "<...>", 5uLL);
          v4 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          goto LABEL_21;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_21:
  if ((v5 & 0x80u) == 0)
    v12 = v4;
  else
    v12 = size;
  v13 = &v31;
  if ((v5 & 0x80u) == 0)
    v14 = &v31;
  else
    v14 = v6;
  if (v12 >= 5)
  {
    v15 = (std::string *)((char *)v14 + v12);
    v16 = v12;
    v17 = v14;
    do
    {
      v18 = (std::string *)memchr(v17, 99, v16 - 4);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 979465827 && v18->__r_.__value_.__s.__data_[4] == 58)
      {
        if (v18 != v15 && v18 == v14)
        {
          v20 = 5;
          v13 = &v31;
LABEL_51:
          sub_20E8D1238(&v31, 0, v20);
          LOBYTE(v5) = *((_BYTE *)&v31.__r_.__value_.__s + 23);
          size = v31.__r_.__value_.__l.__size_;
          v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v16 = (char *)v15 - (char *)v17;
    }
    while ((char *)v15 - (char *)v17 >= 5);
    if (v12 >= 7)
    {
      v21 = v14;
      do
      {
        v22 = (std::string *)memchr(v21, 58, v12 - 6);
        if (!v22)
          break;
        if (LODWORD(v22->__r_.__value_.__l.__data_) == 1986214458
          && *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3) == 976904566)
        {
          if (v22 == v15)
            break;
          v13 = &v31;
          if (v22 == v14)
          {
            v20 = 7;
            goto LABEL_51;
          }
          goto LABEL_53;
        }
        v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v15 - (char *)v21;
      }
      while ((char *)v15 - (char *)v21 >= 7);
    }
    v13 = &v31;
  }
LABEL_53:
  if ((v5 & 0x80u) == 0)
    v24 = v5;
  else
    v24 = size;
  if ((v5 & 0x80u) != 0)
    v13 = v6;
  if (v24 >= 11)
  {
    v25 = (std::string *)((char *)v13 + v24);
    v26 = v13;
    do
    {
      v27 = (std::string *)memchr(v26, 99, v24 - 10);
      if (!v27)
        break;
      if (v27->__r_.__value_.__r.__words[0] == 0x69763A3A64337663
        && *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 3) == 0x3A3A6F69763A3A64)
      {
        if (v27 != v25 && v27 == v13)
          sub_20E8D1238(&v31, 0, 0xBuLL);
        break;
      }
      v26 = (std::string *)((char *)&v27->__r_.__value_.__l.__data_ + 1);
      v24 = (char *)v25 - (char *)v26;
    }
    while ((char *)v25 - (char *)v26 >= 11);
  }
  v29 = sub_20F9212E4((uint64_t **)(v1 + 58056), (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v31);
  v30 = v29[8] + v2;
  ++v29[7];
  v29[8] = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_20F9210D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20F9210FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 result;
  BOOL v25;

  v1 = a1[1];
  v2 = a1[2];
  if (v1 != v2)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v1 + 8) + 4) & 6) == 0)
    {
      v1 += 16;
      if (v1 == v2)
        goto LABEL_4;
    }
    return 1;
  }
LABEL_4:
  v3 = a1[13];
  v4 = a1[14];
  if (v3 != v4)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 4) & 6) == 0)
    {
      v3 += 16;
      if (v3 == v4)
        goto LABEL_7;
    }
    return 1;
  }
LABEL_7:
  v5 = a1[25];
  v6 = a1[26];
  if (v5 != v6)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v5 + 8) + 4) & 6) == 0)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_10;
    }
    return 1;
  }
LABEL_10:
  v7 = a1[37];
  v8 = a1[38];
  if (v7 != v8)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v7 + 8) + 4) & 6) == 0)
    {
      v7 += 16;
      if (v7 == v8)
        goto LABEL_13;
    }
    return 1;
  }
LABEL_13:
  v9 = a1[49];
  v10 = a1[50];
  if (v9 != v10)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 4) & 6) == 0)
    {
      v9 += 16;
      if (v9 == v10)
        goto LABEL_16;
    }
    return 1;
  }
LABEL_16:
  v11 = a1[61];
  v12 = a1[62];
  if (v11 != v12)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 4) & 6) == 0)
    {
      v11 += 16;
      if (v11 == v12)
        goto LABEL_19;
    }
    return 1;
  }
LABEL_19:
  v13 = a1[73];
  v14 = a1[74];
  if (v13 != v14)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 4) & 6) == 0)
    {
      v13 += 16;
      if (v13 == v14)
        goto LABEL_22;
    }
    return 1;
  }
LABEL_22:
  v15 = a1[85];
  v16 = a1[86];
  if (v15 != v16)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v15 + 8) + 4) & 6) == 0)
    {
      v15 += 16;
      if (v15 == v16)
        goto LABEL_25;
    }
    return 1;
  }
LABEL_25:
  v17 = a1[97];
  v18 = a1[98];
  if (v17 != v18)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 4) & 6) == 0)
    {
      v17 += 16;
      if (v17 == v18)
        goto LABEL_28;
    }
    return 1;
  }
LABEL_28:
  v19 = a1[109];
  v20 = a1[110];
  if (v19 != v20)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v19 + 8) + 4) & 6) == 0)
    {
      v19 += 16;
      if (v19 == v20)
        goto LABEL_31;
    }
    return 1;
  }
LABEL_31:
  v21 = a1[121];
  v22 = a1[122];
  if (v21 == v22)
    return 0;
  v23 = v21 + 16;
  do
  {
    result = (*(_BYTE *)(*(_QWORD *)(v23 - 8) + 4) & 6) != 0;
    v25 = (*(_BYTE *)(*(_QWORD *)(v23 - 8) + 4) & 6) != 0 || v23 == v22;
    v23 += 16;
  }
  while (!v25);
  return result;
}

uint64_t *sub_20F9212E4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x48uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x48uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_20E860C04(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_20E868578(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_20F921464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F921478(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DC8F0;
  strcpy(v2, "cv3d::vio::VIOPlaneFactor<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 33, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F921670(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F921690(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBC30;
  strcpy(v2, "cv3d::vio::VIOLandmarkCartesianSqrtCauchyFactor<double, true>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 61, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F921890(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F9218B0(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2103B8460;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular, Measurement::Line>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 92, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    if (result)
    {
      v10 = result - (_BYTE *)v9;
      if (result - (_BYTE *)v9 != -1)
      {
        if ((char)v4 < 0)
        {
          if (v6 >= v10)
          {
            *(_QWORD *)(a1 + 8) = v10;
            goto LABEL_15;
          }
        }
        else if (v10 <= v4)
        {
          *(_BYTE *)(a1 + 23) = v10 & 0x7F;
          v7 = (_QWORD *)a1;
LABEL_15:
          *((_BYTE *)v7 + v10) = 0;
          result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
          v4 = *(unsigned __int8 *)(a1 + 23);
          v7 = *(_QWORD **)a1;
          v6 = *(_QWORD *)(a1 + 8);
          v5 = *(_BYTE *)(a1 + 23);
          goto LABEL_16;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_16:
  if (v5 < 0)
  {
    v11 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v11 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v12 = &v11[v6];
    v13 = v6;
    result = v11;
    do
    {
      result = (char *)memchr(result, 99, v13 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v12 && result == v11)
        {
          v15 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
        }
        break;
      }
      ++result;
      v13 = v12 - result;
    }
    while (v12 - result >= 5);
    if (v6 >= 7)
    {
      result = v11;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v12 && result == v11)
          {
            v15 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
          }
          return result;
        }
        ++result;
        v6 = v12 - result;
      }
      while (v12 - result >= 7);
    }
  }
  return result;
}

void sub_20F921AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F921AD8(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a3 + 144) = 0;
  if (result != a2)
  {
    v3 = 0;
    do
    {
      if ((*(_BYTE *)(result[8] + 4) & 6) == 0
        && (*(_BYTE *)(result[9] + 4) & 6) == 0
        && (*(_BYTE *)(result[10] + 4) & 6) == 0
        && (*(_BYTE *)(result[11] + 4) & 6) == 0
        && (*(_BYTE *)(result[12] + 4) & 6) == 0
        && (*(_BYTE *)(result[13] + 4) & 6) == 0
        && (*(_BYTE *)(result[14] + 4) & 6) == 0
        && (*(_BYTE *)(result[15] + 4) & 6) == 0
        && (*(_BYTE *)(result[16] + 4) & 6) == 0
        && (*(_BYTE *)(result[17] + 4) & 6) == 0
        && (*(_BYTE *)(result[18] + 4) & 6) == 0)
      {
        *(_QWORD *)(a3 + 144) = ++v3;
      }
      result += 26;
    }
    while (result != a2);
  }
  return result;
}

void sub_20F921BB8(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v7 = a1[1];
  v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = *a1;
    v10 = (v7 - *a1) >> 7;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 57)
      sub_20E867F44();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 6 > v11)
      v11 = v12 >> 6;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFF80)
      v13 = 0x1FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 57)
        sub_20E877A38();
      v14 = (char *)operator new(v13 << 7);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[128 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 3) = -1;
    *((_OWORD *)v15 + 2) = 0u;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    v8 = v15 + 128;
    *((_QWORD *)v15 + 14) = 0;
    *((_QWORD *)v15 + 15) = a3;
    if (v7 != v9)
    {
      v16 = 0;
      do
      {
        v17 = &v15[v16];
        *((_QWORD *)v17 - 16) = *(_QWORD *)&v7[v16 - 128];
        *((_QWORD *)v17 - 15) = *(_QWORD *)&v7[v16 - 120];
        *((_QWORD *)v17 - 14) = *(_QWORD *)&v7[v16 - 112];
        v18 = *(_OWORD *)&v7[v16 - 104];
        v19 = *(_OWORD *)&v7[v16 - 88];
        *(_OWORD *)(v17 - 72) = *(_OWORD *)&v7[v16 - 72];
        *(_OWORD *)(v17 - 88) = v19;
        *(_OWORD *)(v17 - 104) = v18;
        v20 = *(_OWORD *)&v7[v16 - 56];
        v21 = *(_OWORD *)&v7[v16 - 40];
        v22 = *(_OWORD *)&v7[v16 - 24];
        *((_QWORD *)v17 - 1) = *(_QWORD *)&v7[v16 - 8];
        *(_OWORD *)(v17 - 24) = v22;
        *(_OWORD *)(v17 - 40) = v21;
        *(_OWORD *)(v17 - 56) = v20;
        v16 -= 128;
      }
      while (&v7[v16] != v9);
      v7 = *a1;
      v15 += v16;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[128 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 3) = -1;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    v8 = v7 + 128;
    *((_QWORD *)v7 + 14) = 0;
    *((_QWORD *)v7 + 15) = a3;
  }
  a1[1] = v8;
}

uint64_t sub_20F921D44(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45[11];
  _OWORD v46[3];

  if (*(_BYTE *)(a1 + 1592))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
  memset(v46, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v46, v45, 1))
    return v45[0];
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2392, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2392), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2392), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2392), v19);
    v17 += 160;
  }
  sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2392), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v25);
      sub_20F394A20(a1 + 2392, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2392), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2392), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2392), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2392), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2392), v40);
    v38 += 176;
  }
  sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
  sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
  sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
  v41 = (*(_QWORD *)(a1 + 2400) - *(_QWORD *)(a1 + 2392)) >> 2;
  if (LODWORD(v46[0]) > v41)
    LODWORD(v41) = v46[0];
  v42 = v45[0] >= v41;
  v43 = v45[0] - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20F8DB0F0((_QWORD *)a1);
  return v44;
}

void sub_20F9221EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922200(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922214(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922228(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F92223C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922250(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922264(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922278(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F92228C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9222A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9222B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9222C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9222DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F9222F0(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1592))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, &v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2392, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2392), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2392), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2392), v19);
    v17 += 160;
  }
  sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2392), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v25);
      sub_20F394A20(a1 + 2392, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2392), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2392), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2392), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2392), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2392), v40);
    v38 += 176;
  }
  sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
  sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
  sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
  v41 = (*(_QWORD *)(a1 + 2424) - *(_QWORD *)(a1 + 2416)) >> 2;
  if (DWORD1(v47[0]) > v41)
    LODWORD(v41) = DWORD1(v47[0]);
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20F8DB0F0((_QWORD *)a1);
  return v44;
}

void sub_20F922798(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9227AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9227C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9227D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9227E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F9227FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922810(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922824(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922838(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F92284C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922860(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922874(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922888(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F92289C(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD v45[4];
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1592))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2392, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2392), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2392), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2392), v19);
    v17 += 160;
  }
  sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2392), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v25);
      sub_20F394A20(a1 + 2392, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2392), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2392), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2392), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2392), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2392), v40);
    v38 += 176;
  }
  sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
  sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
  sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
  v41 = (*(_QWORD *)(a1 + 2496) - *(_QWORD *)(a1 + 2488)) >> 2;
  if (LODWORD(v47[1]) > v41)
    LODWORD(v41) = v47[1];
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20F8DB0F0((_QWORD *)a1);
  return v44;
}

void sub_20F922D44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922D58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922D6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922D80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922D94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922DA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922DBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922DD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922DE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922DF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922E0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922E20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F922E34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F922E48(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD *))(a2[162] + 16))(a2 + 162);
  (*(void (**)(_QWORD *))(a2[342] + 16))(a2 + 342);
  (*(void (**)(_QWORD *))(a2[522] + 16))(a2 + 522);
  (*(void (**)(_QWORD *))(a2[702] + 16))(a2 + 702);
  (*(void (**)(_QWORD *))(a2[882] + 16))(a2 + 882);
  (*(void (**)(_QWORD *))(a2[1062] + 16))(a2 + 1062);
  (*(void (**)(_QWORD *))(a2[1242] + 16))(a2 + 1242);
  (*(void (**)(_QWORD *))(a2[1422] + 16))(a2 + 1422);
  (*(void (**)(_QWORD *))(a2[1602] + 16))(a2 + 1602);
  (*(void (**)(_QWORD *))(a2[1782] + 16))(a2 + 1782);
  (*(void (**)(_QWORD *))(a2[144] + 16))(a2 + 144);
  (*(void (**)(_QWORD *))(a2[324] + 16))(a2 + 324);
  (*(void (**)(_QWORD *))(a2[504] + 16))(a2 + 504);
  (*(void (**)(_QWORD *))(a2[684] + 16))(a2 + 684);
  (*(void (**)(_QWORD *))(a2[864] + 16))(a2 + 864);
  (*(void (**)(_QWORD *))(a2[1044] + 16))(a2 + 1044);
  (*(void (**)(_QWORD *))(a2[1224] + 16))(a2 + 1224);
  (*(void (**)(_QWORD *))(a2[1404] + 16))(a2 + 1404);
  (*(void (**)(_QWORD *))(a2[1584] + 16))(a2 + 1584);
  (*(void (**)(_QWORD *))(a2[1764] + 16))(a2 + 1764);
  (*(void (**)(_QWORD *))(a2[126] + 16))(a2 + 126);
  (*(void (**)(_QWORD *))(a2[306] + 16))(a2 + 306);
  (*(void (**)(_QWORD *))(a2[486] + 16))(a2 + 486);
  (*(void (**)(_QWORD *))(a2[666] + 16))(a2 + 666);
  (*(void (**)(_QWORD *))(a2[846] + 16))(a2 + 846);
  (*(void (**)(_QWORD *))(a2[1026] + 16))(a2 + 1026);
  (*(void (**)(_QWORD *))(a2[1206] + 16))(a2 + 1206);
  (*(void (**)(_QWORD *))(a2[1386] + 16))(a2 + 1386);
  (*(void (**)(_QWORD *))(a2[1566] + 16))(a2 + 1566);
  (*(void (**)(_QWORD *))(a2[1746] + 16))(a2 + 1746);
  (*(void (**)(_QWORD *))(a2[108] + 16))(a2 + 108);
  (*(void (**)(_QWORD *))(a2[288] + 16))(a2 + 288);
  (*(void (**)(_QWORD *))(a2[468] + 16))(a2 + 468);
  (*(void (**)(_QWORD *))(a2[648] + 16))(a2 + 648);
  (*(void (**)(_QWORD *))(a2[828] + 16))(a2 + 828);
  (*(void (**)(_QWORD *))(a2[1008] + 16))(a2 + 1008);
  (*(void (**)(_QWORD *))(a2[1188] + 16))(a2 + 1188);
  (*(void (**)(_QWORD *))(a2[1368] + 16))(a2 + 1368);
  (*(void (**)(_QWORD *))(a2[1548] + 16))(a2 + 1548);
  (*(void (**)(_QWORD *))(a2[1728] + 16))(a2 + 1728);
  (*(void (**)(_QWORD *))(a2[90] + 16))(a2 + 90);
  (*(void (**)(_QWORD *))(a2[270] + 16))(a2 + 270);
  (*(void (**)(_QWORD *))(a2[450] + 16))(a2 + 450);
  (*(void (**)(_QWORD *))(a2[630] + 16))(a2 + 630);
  (*(void (**)(_QWORD *))(a2[810] + 16))(a2 + 810);
  (*(void (**)(_QWORD *))(a2[990] + 16))(a2 + 990);
  (*(void (**)(_QWORD *))(a2[1170] + 16))(a2 + 1170);
  (*(void (**)(_QWORD *))(a2[1350] + 16))(a2 + 1350);
  (*(void (**)(_QWORD *))(a2[1530] + 16))(a2 + 1530);
  (*(void (**)(_QWORD *))(a2[1710] + 16))(a2 + 1710);
  (*(void (**)(_QWORD *))(a2[72] + 16))(a2 + 72);
  (*(void (**)(_QWORD *))(a2[252] + 16))(a2 + 252);
  (*(void (**)(_QWORD *))(a2[432] + 16))(a2 + 432);
  (*(void (**)(_QWORD *))(a2[612] + 16))(a2 + 612);
  (*(void (**)(_QWORD *))(a2[792] + 16))(a2 + 792);
  (*(void (**)(_QWORD *))(a2[972] + 16))(a2 + 972);
  (*(void (**)(_QWORD *))(a2[1152] + 16))(a2 + 1152);
  (*(void (**)(_QWORD *))(a2[1332] + 16))(a2 + 1332);
  (*(void (**)(_QWORD *))(a2[1512] + 16))(a2 + 1512);
  (*(void (**)(_QWORD *))(a2[1692] + 16))(a2 + 1692);
  (*(void (**)(_QWORD *))(a2[54] + 16))(a2 + 54);
  (*(void (**)(_QWORD *))(a2[234] + 16))(a2 + 234);
  (*(void (**)(_QWORD *))(a2[414] + 16))(a2 + 414);
  (*(void (**)(_QWORD *))(a2[594] + 16))(a2 + 594);
  (*(void (**)(_QWORD *))(a2[774] + 16))(a2 + 774);
  (*(void (**)(_QWORD *))(a2[954] + 16))(a2 + 954);
  (*(void (**)(_QWORD *))(a2[1134] + 16))(a2 + 1134);
  (*(void (**)(_QWORD *))(a2[1314] + 16))(a2 + 1314);
  (*(void (**)(_QWORD *))(a2[1494] + 16))(a2 + 1494);
  (*(void (**)(_QWORD *))(a2[1674] + 16))(a2 + 1674);
  (*(void (**)(_QWORD *))(a2[36] + 16))(a2 + 36);
  (*(void (**)(_QWORD *))(a2[216] + 16))(a2 + 216);
  (*(void (**)(_QWORD *))(a2[396] + 16))(a2 + 396);
  (*(void (**)(_QWORD *))(a2[576] + 16))(a2 + 576);
  (*(void (**)(_QWORD *))(a2[756] + 16))(a2 + 756);
  (*(void (**)(_QWORD *))(a2[936] + 16))(a2 + 936);
  (*(void (**)(_QWORD *))(a2[1116] + 16))(a2 + 1116);
  (*(void (**)(_QWORD *))(a2[1296] + 16))(a2 + 1296);
  (*(void (**)(_QWORD *))(a2[1476] + 16))(a2 + 1476);
  (*(void (**)(_QWORD *))(a2[1656] + 16))(a2 + 1656);
  (*(void (**)(_QWORD *))(a2[18] + 16))(a2 + 18);
  (*(void (**)(_QWORD *))(a2[198] + 16))(a2 + 198);
  (*(void (**)(_QWORD *))(a2[378] + 16))(a2 + 378);
  (*(void (**)(_QWORD *))(a2[558] + 16))(a2 + 558);
  (*(void (**)(_QWORD *))(a2[738] + 16))(a2 + 738);
  (*(void (**)(_QWORD *))(a2[918] + 16))(a2 + 918);
  (*(void (**)(_QWORD *))(a2[1098] + 16))(a2 + 1098);
  (*(void (**)(_QWORD *))(a2[1278] + 16))(a2 + 1278);
  (*(void (**)(_QWORD *))(a2[1458] + 16))(a2 + 1458);
  (*(void (**)(_QWORD *))(a2[1638] + 16))(a2 + 1638);
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  (*(void (**)(_QWORD *))(a2[180] + 16))(a2 + 180);
  (*(void (**)(_QWORD *))(a2[360] + 16))(a2 + 360);
  (*(void (**)(_QWORD *))(a2[540] + 16))(a2 + 540);
  (*(void (**)(_QWORD *))(a2[720] + 16))(a2 + 720);
  (*(void (**)(_QWORD *))(a2[900] + 16))(a2 + 900);
  (*(void (**)(_QWORD *))(a2[1080] + 16))(a2 + 1080);
  (*(void (**)(_QWORD *))(a2[1260] + 16))(a2 + 1260);
  (*(void (**)(_QWORD *))(a2[1440] + 16))(a2 + 1440);
  return (*(uint64_t (**)(_QWORD *))(a2[1620] + 16))(a2 + 1620);
}

_QWORD *sub_20F9235BC(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a3 + 128) = 0;
  if (result != a2)
  {
    v3 = 0;
    do
    {
      if ((*(_BYTE *)(result[7] + 4) & 6) == 0
        && (*(_BYTE *)(result[8] + 4) & 6) == 0
        && (*(_BYTE *)(result[9] + 4) & 6) == 0
        && (*(_BYTE *)(result[10] + 4) & 6) == 0
        && (*(_BYTE *)(result[11] + 4) & 6) == 0
        && (*(_BYTE *)(result[12] + 4) & 6) == 0
        && (*(_BYTE *)(result[13] + 4) & 6) == 0
        && (*(_BYTE *)(result[14] + 4) & 6) == 0
        && (*(_BYTE *)(result[15] + 4) & 6) == 0
        && (*(_BYTE *)(result[16] + 4) & 6) == 0
        && (*(_BYTE *)(result[17] + 4) & 6) == 0)
      {
        *(_QWORD *)(a3 + 128) = ++v3;
      }
      result += 27;
    }
    while (result != a2);
  }
  return result;
}

_QWORD *sub_20F92369C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  int64x2_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int64x2_t v8;
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int64x2_t v17;
  int64x2_t *v18;
  unint64_t v19;
  unint64_t v20;
  int64x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int64x2_t v26;
  int64x2_t *v27;
  unint64_t v28;
  unint64_t v29;
  int64x2_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  int64x2_t v35;
  int64x2_t *v36;
  unint64_t v37;
  unint64_t v38;
  int64x2_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  int64x2_t v44;
  int64x2_t *v45;
  unint64_t v46;
  unint64_t v47;
  int64x2_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  int64x2_t v53;
  int64x2_t *v54;
  unint64_t v55;
  unint64_t v56;
  int64x2_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  int64x2_t v62;
  int64x2_t *v63;
  unint64_t v64;
  unint64_t v65;
  int64x2_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  int64x2_t v71;
  int64x2_t *v72;
  unint64_t v73;
  unint64_t v74;
  int64x2_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  int64x2_t v80;
  int64x2_t *v81;
  unint64_t v82;
  unint64_t v83;
  int64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  int64x2_t v89;
  int64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  int64x2_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  int64x2_t v98;
  int64x2_t *v99;
  unint64_t v100;
  unint64_t v101;
  int64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  int64x2_t v107;
  int64x2_t *v108;
  unint64_t v109;
  unint64_t v110;
  int64x2_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  int64x2_t v116;
  int64x2_t *v117;
  unint64_t v118;
  unint64_t v119;
  int64x2_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  int64x2_t v125;
  int64x2_t *v126;
  unint64_t v127;
  unint64_t v128;
  int64x2_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  int64x2_t v134;
  int64x2_t *v135;
  unint64_t v136;
  unint64_t v137;
  int64x2_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  int64x2_t v143;
  int64x2_t *v144;
  unint64_t v145;
  unint64_t v146;
  int64x2_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  int64x2_t v152;
  int64x2_t *v153;
  unint64_t v154;
  unint64_t v155;
  int64x2_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  int64x2_t v161;
  int64x2_t *v162;
  unint64_t v163;
  unint64_t v164;
  int64x2_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  int64x2_t v170;
  int64x2_t *v171;
  unint64_t v172;
  unint64_t v173;
  int64x2_t *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  int64x2_t v179;
  int64x2_t *v180;
  unint64_t v181;
  unint64_t v182;
  int64x2_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  int64x2_t v188;
  int64x2_t *v189;
  unint64_t v190;
  unint64_t v191;
  int64x2_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  int64x2_t v197;
  int64x2_t *v198;
  unint64_t v199;
  unint64_t v200;
  int64x2_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  int64x2_t v206;
  int64x2_t *v207;
  unint64_t v208;
  unint64_t v209;
  int64x2_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  int64x2_t v215;
  int64x2_t *v216;
  unint64_t v217;
  unint64_t v218;
  int64x2_t *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t *v223;
  int64x2_t v224;
  int64x2_t *v225;
  unint64_t v226;
  unint64_t v227;
  int64x2_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  int64x2_t v233;
  int64x2_t *v234;
  unint64_t v235;
  unint64_t v236;
  int64x2_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t *v241;
  int64x2_t v242;
  int64x2_t *v243;
  unint64_t v244;
  unint64_t v245;
  int64x2_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  int64x2_t v251;
  int64x2_t *v252;
  unint64_t v253;
  unint64_t v254;
  int64x2_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  int64x2_t v260;
  int64x2_t *v261;
  unint64_t v262;
  unint64_t v263;
  int64x2_t *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  int64x2_t v269;
  int64x2_t *v270;
  unint64_t v271;
  unint64_t v272;
  int64x2_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t *v277;
  int64x2_t v278;
  int64x2_t *v279;
  unint64_t v280;
  unint64_t v281;
  int64x2_t *v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t *v286;
  int64x2_t v287;
  int64x2_t *v288;
  unint64_t v289;
  unint64_t v290;
  int64x2_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t *v295;
  int64x2_t v296;
  int64x2_t *v297;
  unint64_t v298;
  unint64_t v299;
  int64x2_t *v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t *v304;
  int64x2_t v305;
  int64x2_t *v306;
  unint64_t v307;
  unint64_t v308;
  int64x2_t *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  int64x2_t v314;
  int64x2_t *v315;
  unint64_t v316;
  unint64_t v317;
  int64x2_t *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t *v322;
  int64x2_t v323;
  int64x2_t *v324;
  unint64_t v325;
  unint64_t v326;
  int64x2_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t *v331;
  int64x2_t v332;
  int64x2_t *v333;
  unint64_t v334;
  unint64_t v335;
  int64x2_t *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t *v340;
  int64x2_t v341;
  int64x2_t *v342;
  unint64_t v343;
  unint64_t v344;
  int64x2_t *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  int64x2_t v350;
  int64x2_t *v351;
  unint64_t v352;
  unint64_t v353;
  int64x2_t *v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t *v358;
  int64x2_t v359;
  int64x2_t *v360;
  unint64_t v361;
  unint64_t v362;
  int64x2_t *v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t *v367;
  int64x2_t v368;
  int64x2_t *v369;
  unint64_t v370;
  unint64_t v371;
  int64x2_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t *v376;
  int64x2_t v377;
  int64x2_t *v378;
  unint64_t v379;
  unint64_t v380;
  int64x2_t *v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t *v385;
  int64x2_t v386;
  int64x2_t *v387;
  unint64_t v388;
  unint64_t v389;
  int64x2_t *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t *v394;
  int64x2_t v395;
  int64x2_t *v396;
  unint64_t v397;
  unint64_t v398;
  int64x2_t *v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t *v403;
  int64x2_t v404;
  int64x2_t *v405;
  unint64_t v406;
  unint64_t v407;
  int64x2_t *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t *v412;
  int64x2_t v413;
  int64x2_t *v414;
  unint64_t v415;
  unint64_t v416;
  int64x2_t *v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t *v421;
  int64x2_t v422;
  int64x2_t *v423;
  unint64_t v424;
  unint64_t v425;
  int64x2_t *v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t *v430;
  int64x2_t v431;
  int64x2_t *v432;
  unint64_t v433;
  unint64_t v434;
  int64x2_t *v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t *v439;
  int64x2_t v440;
  int64x2_t *v441;
  unint64_t v442;
  unint64_t v443;
  int64x2_t *v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t *v448;
  int64x2_t v449;
  int64x2_t *v450;
  unint64_t v451;
  unint64_t v452;
  int64x2_t *v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  int64x2_t v458;
  int64x2_t *v459;
  unint64_t v460;
  unint64_t v461;
  int64x2_t *v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t *v466;
  int64x2_t v467;
  int64x2_t *v468;
  unint64_t v469;
  unint64_t v470;
  int64x2_t *v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t *v475;
  int64x2_t v476;
  int64x2_t *v477;
  unint64_t v478;
  unint64_t v479;
  int64x2_t *v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t *v484;
  int64x2_t v485;
  int64x2_t *v486;
  unint64_t v487;
  unint64_t v488;
  int64x2_t *v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t *v493;
  int64x2_t v494;
  int64x2_t *v495;
  unint64_t v496;
  unint64_t v497;
  int64x2_t *v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t *v502;
  int64x2_t v503;
  int64x2_t *v504;
  unint64_t v505;
  unint64_t v506;
  int64x2_t *v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t *v511;
  int64x2_t v512;
  int64x2_t *v513;
  unint64_t v514;
  unint64_t v515;
  int64x2_t *v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t *v520;
  int64x2_t v521;
  int64x2_t *v522;
  unint64_t v523;
  unint64_t v524;
  int64x2_t *v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t *v529;
  int64x2_t v530;
  int64x2_t *v531;
  unint64_t v532;
  unint64_t v533;
  int64x2_t *v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t *v538;
  int64x2_t v539;
  int64x2_t *v540;
  unint64_t v541;
  unint64_t v542;
  int64x2_t *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t *v547;
  int64x2_t v548;
  int64x2_t *v549;
  unint64_t v550;
  unint64_t v551;
  int64x2_t *v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t *v556;
  int64x2_t v557;
  int64x2_t *v558;
  unint64_t v559;
  unint64_t v560;
  int64x2_t *v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t *v565;
  int64x2_t v566;
  int64x2_t *v567;
  unint64_t v568;
  unint64_t v569;
  int64x2_t *v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t *v574;
  int64x2_t v575;
  int64x2_t *v576;
  unint64_t v577;
  unint64_t v578;
  int64x2_t *v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t *v583;
  int64x2_t v584;
  int64x2_t *v585;
  unint64_t v586;
  unint64_t v587;
  int64x2_t *v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  uint64_t *v592;
  int64x2_t v593;
  int64x2_t *v594;
  unint64_t v595;
  unint64_t v596;
  int64x2_t *v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t *v601;
  int64x2_t v602;
  int64x2_t *v603;
  unint64_t v604;
  unint64_t v605;
  int64x2_t *v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t *v610;
  int64x2_t v611;
  int64x2_t *v612;
  unint64_t v613;
  unint64_t v614;
  int64x2_t *v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t v618;
  uint64_t *v619;
  int64x2_t v620;
  int64x2_t *v621;
  unint64_t v622;
  unint64_t v623;
  int64x2_t *v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t *v628;
  int64x2_t v629;
  int64x2_t *v630;
  unint64_t v631;
  unint64_t v632;
  int64x2_t *v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  uint64_t *v637;
  int64x2_t v638;
  int64x2_t *v639;
  unint64_t v640;
  unint64_t v641;
  int64x2_t *v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t *v646;
  int64x2_t v647;
  int64x2_t *v648;
  unint64_t v649;
  unint64_t v650;
  int64x2_t *v651;
  unint64_t v652;
  unint64_t v653;
  unint64_t v654;
  uint64_t *v655;
  int64x2_t v656;
  int64x2_t *v657;
  unint64_t v658;
  unint64_t v659;
  int64x2_t *v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t *v664;
  int64x2_t v665;
  int64x2_t *v666;
  unint64_t v667;
  unint64_t v668;
  int64x2_t *v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  uint64_t *v673;
  int64x2_t v674;
  int64x2_t *v675;
  unint64_t v676;
  unint64_t v677;
  int64x2_t *v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  uint64_t *v682;
  int64x2_t v683;
  int64x2_t *v684;
  unint64_t v685;
  unint64_t v686;
  int64x2_t *v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  uint64_t *v691;
  int64x2_t v692;
  int64x2_t *v693;
  unint64_t v694;
  unint64_t v695;
  int64x2_t *v696;
  unint64_t v697;
  unint64_t v698;
  unint64_t v699;
  uint64_t *v700;
  int64x2_t v701;
  int64x2_t *v702;
  unint64_t v703;
  unint64_t v704;
  int64x2_t *v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t *v709;
  int64x2_t v710;
  int64x2_t *v711;
  unint64_t v712;
  unint64_t v713;
  int64x2_t *v714;
  unint64_t v715;
  unint64_t v716;
  unint64_t v717;
  uint64_t *v718;
  int64x2_t v719;
  int64x2_t *v720;
  unint64_t v721;
  unint64_t v722;
  int64x2_t *v723;
  unint64_t v724;
  unint64_t v725;
  unint64_t v726;
  uint64_t *v727;
  int64x2_t v728;
  int64x2_t *v729;
  unint64_t v730;
  unint64_t v731;
  int64x2_t *v732;
  unint64_t v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t *v736;
  int64x2_t v737;
  int64x2_t *v738;
  unint64_t v739;
  unint64_t v740;
  int64x2_t *v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t *v745;
  int64x2_t v746;
  int64x2_t *v747;
  unint64_t v748;
  unint64_t v749;
  int64x2_t *v750;
  unint64_t v751;
  unint64_t v752;
  unint64_t v753;
  uint64_t *v754;
  int64x2_t v755;
  int64x2_t *v756;
  unint64_t v757;
  unint64_t v758;
  int64x2_t *v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  uint64_t *v763;
  int64x2_t v764;
  int64x2_t *v765;
  unint64_t v766;
  unint64_t v767;
  int64x2_t *v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  uint64_t *v772;
  int64x2_t v773;
  int64x2_t *v774;
  unint64_t v775;
  unint64_t v776;
  int64x2_t *v777;
  unint64_t v778;
  unint64_t v779;
  unint64_t v780;
  uint64_t *v781;
  int64x2_t v782;
  int64x2_t *v783;
  unint64_t v784;
  unint64_t v785;
  int64x2_t *v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  uint64_t *v790;
  int64x2_t v791;
  int64x2_t *v792;
  unint64_t v793;
  unint64_t v794;
  int64x2_t *v795;
  unint64_t v796;
  unint64_t v797;
  unint64_t v798;
  uint64_t *v799;
  int64x2_t v800;
  int64x2_t *v801;
  unint64_t v802;
  unint64_t v803;
  int64x2_t *v804;
  unint64_t v805;
  unint64_t v806;
  unint64_t v807;
  uint64_t *v808;
  int64x2_t v809;
  int64x2_t *v810;
  unint64_t v811;
  unint64_t v812;
  int64x2_t *v813;
  unint64_t v814;
  unint64_t v815;
  unint64_t v816;
  uint64_t *v817;
  int64x2_t v818;
  int64x2_t *v819;
  unint64_t v820;
  unint64_t v821;
  int64x2_t *v822;
  unint64_t v823;
  unint64_t v824;
  unint64_t v825;
  uint64_t *v826;
  int64x2_t v827;
  int64x2_t *v828;
  unint64_t v829;
  unint64_t v830;
  int64x2_t *v831;
  unint64_t v832;
  unint64_t v833;
  unint64_t v834;
  uint64_t *v835;
  int64x2_t v836;
  int64x2_t *v837;
  unint64_t v838;
  unint64_t v839;
  int64x2_t *v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  uint64_t *v844;
  int64x2_t v845;
  int64x2_t *v846;
  unint64_t v847;
  unint64_t v848;
  int64x2_t *v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  uint64_t *v853;
  int64x2_t v854;
  int64x2_t *v855;
  unint64_t v856;
  unint64_t v857;
  int64x2_t *v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  uint64_t *v862;
  int64x2_t v863;
  int64x2_t *v864;
  unint64_t v865;
  unint64_t v866;
  int64x2_t *v867;
  unint64_t v868;
  unint64_t v869;
  unint64_t v870;
  uint64_t *v871;
  int64x2_t v872;
  int64x2_t *v873;
  unint64_t v874;
  unint64_t v875;
  int64x2_t *v876;
  unint64_t v877;
  unint64_t v878;
  unint64_t v879;
  uint64_t *v880;
  int64x2_t v881;
  int64x2_t *v882;
  unint64_t v883;
  unint64_t v884;
  int64x2_t *v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  uint64_t *v889;
  int64x2_t v890;
  int64x2_t *v891;
  unint64_t v892;
  unint64_t v893;
  int64x2_t *v894;
  unint64_t v895;
  unint64_t v896;
  unint64_t v897;
  uint64_t *v898;
  int64x2_t v899;
  int64x2_t *v900;
  unint64_t v901;
  unint64_t v902;

  v2 = *a2;
  v3 = (int64x2_t *)result[164];
  v4 = result[165] - (_QWORD)v3;
  if ((uint64_t)v4 >= 1)
  {
    v5 = v4 >> 3;
    v6 = (v4 >> 3) - (v4 > 7) + 1;
    if (v6 >= 4)
    {
      v5 -= v6 & 0xFFFFFFFFFFFFFFFCLL;
      v7 = &v3->i64[v6 & 0xFFFFFFFFFFFFFFFCLL];
      v8 = vdupq_lane_s64(v2, 0);
      v9 = v3 + 1;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v9[-1] = v8;
        *v9 = v8;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_9;
    }
    else
    {
      v7 = (uint64_t *)result[164];
    }
    v11 = v5 + 1;
    do
    {
      *v7++ = v2;
      --v11;
    }
    while (v11 > 1);
LABEL_9:
    v2 = *a2;
  }
  v12 = (int64x2_t *)result[344];
  v13 = result[345] - (_QWORD)v12;
  if ((uint64_t)v13 < 1)
    goto LABEL_19;
  v14 = v13 >> 3;
  v15 = (v13 >> 3) - (v13 > 7) + 1;
  if (v15 >= 4)
  {
    v14 -= v15 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = &v12->i64[v15 & 0xFFFFFFFFFFFFFFFCLL];
    v17 = vdupq_lane_s64(v2, 0);
    v18 = v12 + 1;
    v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_18;
  }
  else
  {
    v16 = (uint64_t *)result[344];
  }
  v20 = v14 + 1;
  do
  {
    *v16++ = v2;
    --v20;
  }
  while (v20 > 1);
LABEL_18:
  v2 = *a2;
LABEL_19:
  v21 = (int64x2_t *)result[524];
  v22 = result[525] - (_QWORD)v21;
  if ((uint64_t)v22 < 1)
    goto LABEL_28;
  v23 = v22 >> 3;
  v24 = (v22 >> 3) - (v22 > 7) + 1;
  if (v24 >= 4)
  {
    v23 -= v24 & 0xFFFFFFFFFFFFFFFCLL;
    v25 = &v21->i64[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v26 = vdupq_lane_s64(v2, 0);
    v27 = v21 + 1;
    v28 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_27;
  }
  else
  {
    v25 = (uint64_t *)result[524];
  }
  v29 = v23 + 1;
  do
  {
    *v25++ = v2;
    --v29;
  }
  while (v29 > 1);
LABEL_27:
  v2 = *a2;
LABEL_28:
  v30 = (int64x2_t *)result[704];
  v31 = result[705] - (_QWORD)v30;
  if ((uint64_t)v31 < 1)
    goto LABEL_37;
  v32 = v31 >> 3;
  v33 = (v31 >> 3) - (v31 > 7) + 1;
  if (v33 >= 4)
  {
    v32 -= v33 & 0xFFFFFFFFFFFFFFFCLL;
    v34 = &v30->i64[v33 & 0xFFFFFFFFFFFFFFFCLL];
    v35 = vdupq_lane_s64(v2, 0);
    v36 = v30 + 1;
    v37 = v33 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36[-1] = v35;
      *v36 = v35;
      v36 += 2;
      v37 -= 4;
    }
    while (v37);
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_36;
  }
  else
  {
    v34 = (uint64_t *)result[704];
  }
  v38 = v32 + 1;
  do
  {
    *v34++ = v2;
    --v38;
  }
  while (v38 > 1);
LABEL_36:
  v2 = *a2;
LABEL_37:
  v39 = (int64x2_t *)result[884];
  v40 = result[885] - (_QWORD)v39;
  if ((uint64_t)v40 < 1)
    goto LABEL_46;
  v41 = v40 >> 3;
  v42 = (v40 >> 3) - (v40 > 7) + 1;
  if (v42 >= 4)
  {
    v41 -= v42 & 0xFFFFFFFFFFFFFFFCLL;
    v43 = &v39->i64[v42 & 0xFFFFFFFFFFFFFFFCLL];
    v44 = vdupq_lane_s64(v2, 0);
    v45 = v39 + 1;
    v46 = v42 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v45[-1] = v44;
      *v45 = v44;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_45;
  }
  else
  {
    v43 = (uint64_t *)result[884];
  }
  v47 = v41 + 1;
  do
  {
    *v43++ = v2;
    --v47;
  }
  while (v47 > 1);
LABEL_45:
  v2 = *a2;
LABEL_46:
  v48 = (int64x2_t *)result[1064];
  v49 = result[1065] - (_QWORD)v48;
  if ((uint64_t)v49 < 1)
    goto LABEL_55;
  v50 = v49 >> 3;
  v51 = (v49 >> 3) - (v49 > 7) + 1;
  if (v51 >= 4)
  {
    v50 -= v51 & 0xFFFFFFFFFFFFFFFCLL;
    v52 = &v48->i64[v51 & 0xFFFFFFFFFFFFFFFCLL];
    v53 = vdupq_lane_s64(v2, 0);
    v54 = v48 + 1;
    v55 = v51 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v54[-1] = v53;
      *v54 = v53;
      v54 += 2;
      v55 -= 4;
    }
    while (v55);
    if (v51 == (v51 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_54;
  }
  else
  {
    v52 = (uint64_t *)result[1064];
  }
  v56 = v50 + 1;
  do
  {
    *v52++ = v2;
    --v56;
  }
  while (v56 > 1);
LABEL_54:
  v2 = *a2;
LABEL_55:
  v57 = (int64x2_t *)result[1244];
  v58 = result[1245] - (_QWORD)v57;
  if ((uint64_t)v58 < 1)
    goto LABEL_64;
  v59 = v58 >> 3;
  v60 = (v58 >> 3) - (v58 > 7) + 1;
  if (v60 >= 4)
  {
    v59 -= v60 & 0xFFFFFFFFFFFFFFFCLL;
    v61 = &v57->i64[v60 & 0xFFFFFFFFFFFFFFFCLL];
    v62 = vdupq_lane_s64(v2, 0);
    v63 = v57 + 1;
    v64 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v63[-1] = v62;
      *v63 = v62;
      v63 += 2;
      v64 -= 4;
    }
    while (v64);
    if (v60 == (v60 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_63;
  }
  else
  {
    v61 = (uint64_t *)result[1244];
  }
  v65 = v59 + 1;
  do
  {
    *v61++ = v2;
    --v65;
  }
  while (v65 > 1);
LABEL_63:
  v2 = *a2;
LABEL_64:
  v66 = (int64x2_t *)result[1424];
  v67 = result[1425] - (_QWORD)v66;
  if ((uint64_t)v67 < 1)
    goto LABEL_73;
  v68 = v67 >> 3;
  v69 = (v67 >> 3) - (v67 > 7) + 1;
  if (v69 >= 4)
  {
    v68 -= v69 & 0xFFFFFFFFFFFFFFFCLL;
    v70 = &v66->i64[v69 & 0xFFFFFFFFFFFFFFFCLL];
    v71 = vdupq_lane_s64(v2, 0);
    v72 = v66 + 1;
    v73 = v69 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v72[-1] = v71;
      *v72 = v71;
      v72 += 2;
      v73 -= 4;
    }
    while (v73);
    if (v69 == (v69 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_72;
  }
  else
  {
    v70 = (uint64_t *)result[1424];
  }
  v74 = v68 + 1;
  do
  {
    *v70++ = v2;
    --v74;
  }
  while (v74 > 1);
LABEL_72:
  v2 = *a2;
LABEL_73:
  v75 = (int64x2_t *)result[1604];
  v76 = result[1605] - (_QWORD)v75;
  if ((uint64_t)v76 < 1)
    goto LABEL_82;
  v77 = v76 >> 3;
  v78 = (v76 >> 3) - (v76 > 7) + 1;
  if (v78 >= 4)
  {
    v77 -= v78 & 0xFFFFFFFFFFFFFFFCLL;
    v79 = &v75->i64[v78 & 0xFFFFFFFFFFFFFFFCLL];
    v80 = vdupq_lane_s64(v2, 0);
    v81 = v75 + 1;
    v82 = v78 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v81[-1] = v80;
      *v81 = v80;
      v81 += 2;
      v82 -= 4;
    }
    while (v82);
    if (v78 == (v78 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_81;
  }
  else
  {
    v79 = (uint64_t *)result[1604];
  }
  v83 = v77 + 1;
  do
  {
    *v79++ = v2;
    --v83;
  }
  while (v83 > 1);
LABEL_81:
  v2 = *a2;
LABEL_82:
  v84 = (int64x2_t *)result[1784];
  v85 = result[1785] - (_QWORD)v84;
  if ((uint64_t)v85 < 1)
    goto LABEL_91;
  v86 = v85 >> 3;
  v87 = (v85 >> 3) - (v85 > 7) + 1;
  if (v87 >= 4)
  {
    v86 -= v87 & 0xFFFFFFFFFFFFFFFCLL;
    v88 = &v84->i64[v87 & 0xFFFFFFFFFFFFFFFCLL];
    v89 = vdupq_lane_s64(v2, 0);
    v90 = v84 + 1;
    v91 = v87 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v90[-1] = v89;
      *v90 = v89;
      v90 += 2;
      v91 -= 4;
    }
    while (v91);
    if (v87 == (v87 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_90;
  }
  else
  {
    v88 = (uint64_t *)result[1784];
  }
  v92 = v86 + 1;
  do
  {
    *v88++ = v2;
    --v92;
  }
  while (v92 > 1);
LABEL_90:
  v2 = *a2;
LABEL_91:
  v93 = (int64x2_t *)result[146];
  v94 = result[147] - (_QWORD)v93;
  if ((uint64_t)v94 < 1)
    goto LABEL_100;
  v95 = v94 >> 3;
  v96 = (v94 >> 3) - (v94 > 7) + 1;
  if (v96 >= 4)
  {
    v95 -= v96 & 0xFFFFFFFFFFFFFFFCLL;
    v97 = &v93->i64[v96 & 0xFFFFFFFFFFFFFFFCLL];
    v98 = vdupq_lane_s64(v2, 0);
    v99 = v93 + 1;
    v100 = v96 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v99[-1] = v98;
      *v99 = v98;
      v99 += 2;
      v100 -= 4;
    }
    while (v100);
    if (v96 == (v96 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_99;
  }
  else
  {
    v97 = (uint64_t *)result[146];
  }
  v101 = v95 + 1;
  do
  {
    *v97++ = v2;
    --v101;
  }
  while (v101 > 1);
LABEL_99:
  v2 = *a2;
LABEL_100:
  v102 = (int64x2_t *)result[326];
  v103 = result[327] - (_QWORD)v102;
  if ((uint64_t)v103 < 1)
    goto LABEL_109;
  v104 = v103 >> 3;
  v105 = (v103 >> 3) - (v103 > 7) + 1;
  if (v105 >= 4)
  {
    v104 -= v105 & 0xFFFFFFFFFFFFFFFCLL;
    v106 = &v102->i64[v105 & 0xFFFFFFFFFFFFFFFCLL];
    v107 = vdupq_lane_s64(v2, 0);
    v108 = v102 + 1;
    v109 = v105 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v108[-1] = v107;
      *v108 = v107;
      v108 += 2;
      v109 -= 4;
    }
    while (v109);
    if (v105 == (v105 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_108;
  }
  else
  {
    v106 = (uint64_t *)result[326];
  }
  v110 = v104 + 1;
  do
  {
    *v106++ = v2;
    --v110;
  }
  while (v110 > 1);
LABEL_108:
  v2 = *a2;
LABEL_109:
  v111 = (int64x2_t *)result[506];
  v112 = result[507] - (_QWORD)v111;
  if ((uint64_t)v112 < 1)
    goto LABEL_118;
  v113 = v112 >> 3;
  v114 = (v112 >> 3) - (v112 > 7) + 1;
  if (v114 >= 4)
  {
    v113 -= v114 & 0xFFFFFFFFFFFFFFFCLL;
    v115 = &v111->i64[v114 & 0xFFFFFFFFFFFFFFFCLL];
    v116 = vdupq_lane_s64(v2, 0);
    v117 = v111 + 1;
    v118 = v114 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v117[-1] = v116;
      *v117 = v116;
      v117 += 2;
      v118 -= 4;
    }
    while (v118);
    if (v114 == (v114 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_117;
  }
  else
  {
    v115 = (uint64_t *)result[506];
  }
  v119 = v113 + 1;
  do
  {
    *v115++ = v2;
    --v119;
  }
  while (v119 > 1);
LABEL_117:
  v2 = *a2;
LABEL_118:
  v120 = (int64x2_t *)result[686];
  v121 = result[687] - (_QWORD)v120;
  if ((uint64_t)v121 < 1)
    goto LABEL_127;
  v122 = v121 >> 3;
  v123 = (v121 >> 3) - (v121 > 7) + 1;
  if (v123 >= 4)
  {
    v122 -= v123 & 0xFFFFFFFFFFFFFFFCLL;
    v124 = &v120->i64[v123 & 0xFFFFFFFFFFFFFFFCLL];
    v125 = vdupq_lane_s64(v2, 0);
    v126 = v120 + 1;
    v127 = v123 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v126[-1] = v125;
      *v126 = v125;
      v126 += 2;
      v127 -= 4;
    }
    while (v127);
    if (v123 == (v123 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_126;
  }
  else
  {
    v124 = (uint64_t *)result[686];
  }
  v128 = v122 + 1;
  do
  {
    *v124++ = v2;
    --v128;
  }
  while (v128 > 1);
LABEL_126:
  v2 = *a2;
LABEL_127:
  v129 = (int64x2_t *)result[866];
  v130 = result[867] - (_QWORD)v129;
  if ((uint64_t)v130 < 1)
    goto LABEL_136;
  v131 = v130 >> 3;
  v132 = (v130 >> 3) - (v130 > 7) + 1;
  if (v132 >= 4)
  {
    v131 -= v132 & 0xFFFFFFFFFFFFFFFCLL;
    v133 = &v129->i64[v132 & 0xFFFFFFFFFFFFFFFCLL];
    v134 = vdupq_lane_s64(v2, 0);
    v135 = v129 + 1;
    v136 = v132 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v135[-1] = v134;
      *v135 = v134;
      v135 += 2;
      v136 -= 4;
    }
    while (v136);
    if (v132 == (v132 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_135;
  }
  else
  {
    v133 = (uint64_t *)result[866];
  }
  v137 = v131 + 1;
  do
  {
    *v133++ = v2;
    --v137;
  }
  while (v137 > 1);
LABEL_135:
  v2 = *a2;
LABEL_136:
  v138 = (int64x2_t *)result[1046];
  v139 = result[1047] - (_QWORD)v138;
  if ((uint64_t)v139 < 1)
    goto LABEL_145;
  v140 = v139 >> 3;
  v141 = (v139 >> 3) - (v139 > 7) + 1;
  if (v141 >= 4)
  {
    v140 -= v141 & 0xFFFFFFFFFFFFFFFCLL;
    v142 = &v138->i64[v141 & 0xFFFFFFFFFFFFFFFCLL];
    v143 = vdupq_lane_s64(v2, 0);
    v144 = v138 + 1;
    v145 = v141 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v144[-1] = v143;
      *v144 = v143;
      v144 += 2;
      v145 -= 4;
    }
    while (v145);
    if (v141 == (v141 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_144;
  }
  else
  {
    v142 = (uint64_t *)result[1046];
  }
  v146 = v140 + 1;
  do
  {
    *v142++ = v2;
    --v146;
  }
  while (v146 > 1);
LABEL_144:
  v2 = *a2;
LABEL_145:
  v147 = (int64x2_t *)result[1226];
  v148 = result[1227] - (_QWORD)v147;
  if ((uint64_t)v148 < 1)
    goto LABEL_154;
  v149 = v148 >> 3;
  v150 = (v148 >> 3) - (v148 > 7) + 1;
  if (v150 >= 4)
  {
    v149 -= v150 & 0xFFFFFFFFFFFFFFFCLL;
    v151 = &v147->i64[v150 & 0xFFFFFFFFFFFFFFFCLL];
    v152 = vdupq_lane_s64(v2, 0);
    v153 = v147 + 1;
    v154 = v150 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v153[-1] = v152;
      *v153 = v152;
      v153 += 2;
      v154 -= 4;
    }
    while (v154);
    if (v150 == (v150 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_153;
  }
  else
  {
    v151 = (uint64_t *)result[1226];
  }
  v155 = v149 + 1;
  do
  {
    *v151++ = v2;
    --v155;
  }
  while (v155 > 1);
LABEL_153:
  v2 = *a2;
LABEL_154:
  v156 = (int64x2_t *)result[1406];
  v157 = result[1407] - (_QWORD)v156;
  if ((uint64_t)v157 < 1)
    goto LABEL_163;
  v158 = v157 >> 3;
  v159 = (v157 >> 3) - (v157 > 7) + 1;
  if (v159 >= 4)
  {
    v158 -= v159 & 0xFFFFFFFFFFFFFFFCLL;
    v160 = &v156->i64[v159 & 0xFFFFFFFFFFFFFFFCLL];
    v161 = vdupq_lane_s64(v2, 0);
    v162 = v156 + 1;
    v163 = v159 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v162[-1] = v161;
      *v162 = v161;
      v162 += 2;
      v163 -= 4;
    }
    while (v163);
    if (v159 == (v159 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_162;
  }
  else
  {
    v160 = (uint64_t *)result[1406];
  }
  v164 = v158 + 1;
  do
  {
    *v160++ = v2;
    --v164;
  }
  while (v164 > 1);
LABEL_162:
  v2 = *a2;
LABEL_163:
  v165 = (int64x2_t *)result[1586];
  v166 = result[1587] - (_QWORD)v165;
  if ((uint64_t)v166 < 1)
    goto LABEL_172;
  v167 = v166 >> 3;
  v168 = (v166 >> 3) - (v166 > 7) + 1;
  if (v168 >= 4)
  {
    v167 -= v168 & 0xFFFFFFFFFFFFFFFCLL;
    v169 = &v165->i64[v168 & 0xFFFFFFFFFFFFFFFCLL];
    v170 = vdupq_lane_s64(v2, 0);
    v171 = v165 + 1;
    v172 = v168 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v171[-1] = v170;
      *v171 = v170;
      v171 += 2;
      v172 -= 4;
    }
    while (v172);
    if (v168 == (v168 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_171;
  }
  else
  {
    v169 = (uint64_t *)result[1586];
  }
  v173 = v167 + 1;
  do
  {
    *v169++ = v2;
    --v173;
  }
  while (v173 > 1);
LABEL_171:
  v2 = *a2;
LABEL_172:
  v174 = (int64x2_t *)result[1766];
  v175 = result[1767] - (_QWORD)v174;
  if ((uint64_t)v175 < 1)
    goto LABEL_181;
  v176 = v175 >> 3;
  v177 = (v175 >> 3) - (v175 > 7) + 1;
  if (v177 >= 4)
  {
    v176 -= v177 & 0xFFFFFFFFFFFFFFFCLL;
    v178 = &v174->i64[v177 & 0xFFFFFFFFFFFFFFFCLL];
    v179 = vdupq_lane_s64(v2, 0);
    v180 = v174 + 1;
    v181 = v177 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v180[-1] = v179;
      *v180 = v179;
      v180 += 2;
      v181 -= 4;
    }
    while (v181);
    if (v177 == (v177 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_180;
  }
  else
  {
    v178 = (uint64_t *)result[1766];
  }
  v182 = v176 + 1;
  do
  {
    *v178++ = v2;
    --v182;
  }
  while (v182 > 1);
LABEL_180:
  v2 = *a2;
LABEL_181:
  v183 = (int64x2_t *)result[128];
  v184 = result[129] - (_QWORD)v183;
  if ((uint64_t)v184 < 1)
    goto LABEL_190;
  v185 = v184 >> 3;
  v186 = (v184 >> 3) - (v184 > 7) + 1;
  if (v186 >= 4)
  {
    v185 -= v186 & 0xFFFFFFFFFFFFFFFCLL;
    v187 = &v183->i64[v186 & 0xFFFFFFFFFFFFFFFCLL];
    v188 = vdupq_lane_s64(v2, 0);
    v189 = v183 + 1;
    v190 = v186 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v189[-1] = v188;
      *v189 = v188;
      v189 += 2;
      v190 -= 4;
    }
    while (v190);
    if (v186 == (v186 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_189;
  }
  else
  {
    v187 = (uint64_t *)result[128];
  }
  v191 = v185 + 1;
  do
  {
    *v187++ = v2;
    --v191;
  }
  while (v191 > 1);
LABEL_189:
  v2 = *a2;
LABEL_190:
  v192 = (int64x2_t *)result[308];
  v193 = result[309] - (_QWORD)v192;
  if ((uint64_t)v193 < 1)
    goto LABEL_199;
  v194 = v193 >> 3;
  v195 = (v193 >> 3) - (v193 > 7) + 1;
  if (v195 >= 4)
  {
    v194 -= v195 & 0xFFFFFFFFFFFFFFFCLL;
    v196 = &v192->i64[v195 & 0xFFFFFFFFFFFFFFFCLL];
    v197 = vdupq_lane_s64(v2, 0);
    v198 = v192 + 1;
    v199 = v195 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v198[-1] = v197;
      *v198 = v197;
      v198 += 2;
      v199 -= 4;
    }
    while (v199);
    if (v195 == (v195 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_198;
  }
  else
  {
    v196 = (uint64_t *)result[308];
  }
  v200 = v194 + 1;
  do
  {
    *v196++ = v2;
    --v200;
  }
  while (v200 > 1);
LABEL_198:
  v2 = *a2;
LABEL_199:
  v201 = (int64x2_t *)result[488];
  v202 = result[489] - (_QWORD)v201;
  if ((uint64_t)v202 < 1)
    goto LABEL_208;
  v203 = v202 >> 3;
  v204 = (v202 >> 3) - (v202 > 7) + 1;
  if (v204 >= 4)
  {
    v203 -= v204 & 0xFFFFFFFFFFFFFFFCLL;
    v205 = &v201->i64[v204 & 0xFFFFFFFFFFFFFFFCLL];
    v206 = vdupq_lane_s64(v2, 0);
    v207 = v201 + 1;
    v208 = v204 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v207[-1] = v206;
      *v207 = v206;
      v207 += 2;
      v208 -= 4;
    }
    while (v208);
    if (v204 == (v204 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_207;
  }
  else
  {
    v205 = (uint64_t *)result[488];
  }
  v209 = v203 + 1;
  do
  {
    *v205++ = v2;
    --v209;
  }
  while (v209 > 1);
LABEL_207:
  v2 = *a2;
LABEL_208:
  v210 = (int64x2_t *)result[668];
  v211 = result[669] - (_QWORD)v210;
  if ((uint64_t)v211 < 1)
    goto LABEL_217;
  v212 = v211 >> 3;
  v213 = (v211 >> 3) - (v211 > 7) + 1;
  if (v213 >= 4)
  {
    v212 -= v213 & 0xFFFFFFFFFFFFFFFCLL;
    v214 = &v210->i64[v213 & 0xFFFFFFFFFFFFFFFCLL];
    v215 = vdupq_lane_s64(v2, 0);
    v216 = v210 + 1;
    v217 = v213 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v216[-1] = v215;
      *v216 = v215;
      v216 += 2;
      v217 -= 4;
    }
    while (v217);
    if (v213 == (v213 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_216;
  }
  else
  {
    v214 = (uint64_t *)result[668];
  }
  v218 = v212 + 1;
  do
  {
    *v214++ = v2;
    --v218;
  }
  while (v218 > 1);
LABEL_216:
  v2 = *a2;
LABEL_217:
  v219 = (int64x2_t *)result[848];
  v220 = result[849] - (_QWORD)v219;
  if ((uint64_t)v220 < 1)
    goto LABEL_226;
  v221 = v220 >> 3;
  v222 = (v220 >> 3) - (v220 > 7) + 1;
  if (v222 >= 4)
  {
    v221 -= v222 & 0xFFFFFFFFFFFFFFFCLL;
    v223 = &v219->i64[v222 & 0xFFFFFFFFFFFFFFFCLL];
    v224 = vdupq_lane_s64(v2, 0);
    v225 = v219 + 1;
    v226 = v222 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v225[-1] = v224;
      *v225 = v224;
      v225 += 2;
      v226 -= 4;
    }
    while (v226);
    if (v222 == (v222 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_225;
  }
  else
  {
    v223 = (uint64_t *)result[848];
  }
  v227 = v221 + 1;
  do
  {
    *v223++ = v2;
    --v227;
  }
  while (v227 > 1);
LABEL_225:
  v2 = *a2;
LABEL_226:
  v228 = (int64x2_t *)result[1028];
  v229 = result[1029] - (_QWORD)v228;
  if ((uint64_t)v229 < 1)
    goto LABEL_235;
  v230 = v229 >> 3;
  v231 = (v229 >> 3) - (v229 > 7) + 1;
  if (v231 >= 4)
  {
    v230 -= v231 & 0xFFFFFFFFFFFFFFFCLL;
    v232 = &v228->i64[v231 & 0xFFFFFFFFFFFFFFFCLL];
    v233 = vdupq_lane_s64(v2, 0);
    v234 = v228 + 1;
    v235 = v231 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v234[-1] = v233;
      *v234 = v233;
      v234 += 2;
      v235 -= 4;
    }
    while (v235);
    if (v231 == (v231 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_234;
  }
  else
  {
    v232 = (uint64_t *)result[1028];
  }
  v236 = v230 + 1;
  do
  {
    *v232++ = v2;
    --v236;
  }
  while (v236 > 1);
LABEL_234:
  v2 = *a2;
LABEL_235:
  v237 = (int64x2_t *)result[1208];
  v238 = result[1209] - (_QWORD)v237;
  if ((uint64_t)v238 < 1)
    goto LABEL_244;
  v239 = v238 >> 3;
  v240 = (v238 >> 3) - (v238 > 7) + 1;
  if (v240 >= 4)
  {
    v239 -= v240 & 0xFFFFFFFFFFFFFFFCLL;
    v241 = &v237->i64[v240 & 0xFFFFFFFFFFFFFFFCLL];
    v242 = vdupq_lane_s64(v2, 0);
    v243 = v237 + 1;
    v244 = v240 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v243[-1] = v242;
      *v243 = v242;
      v243 += 2;
      v244 -= 4;
    }
    while (v244);
    if (v240 == (v240 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_243;
  }
  else
  {
    v241 = (uint64_t *)result[1208];
  }
  v245 = v239 + 1;
  do
  {
    *v241++ = v2;
    --v245;
  }
  while (v245 > 1);
LABEL_243:
  v2 = *a2;
LABEL_244:
  v246 = (int64x2_t *)result[1388];
  v247 = result[1389] - (_QWORD)v246;
  if ((uint64_t)v247 < 1)
    goto LABEL_253;
  v248 = v247 >> 3;
  v249 = (v247 >> 3) - (v247 > 7) + 1;
  if (v249 >= 4)
  {
    v248 -= v249 & 0xFFFFFFFFFFFFFFFCLL;
    v250 = &v246->i64[v249 & 0xFFFFFFFFFFFFFFFCLL];
    v251 = vdupq_lane_s64(v2, 0);
    v252 = v246 + 1;
    v253 = v249 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v252[-1] = v251;
      *v252 = v251;
      v252 += 2;
      v253 -= 4;
    }
    while (v253);
    if (v249 == (v249 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_252;
  }
  else
  {
    v250 = (uint64_t *)result[1388];
  }
  v254 = v248 + 1;
  do
  {
    *v250++ = v2;
    --v254;
  }
  while (v254 > 1);
LABEL_252:
  v2 = *a2;
LABEL_253:
  v255 = (int64x2_t *)result[1568];
  v256 = result[1569] - (_QWORD)v255;
  if ((uint64_t)v256 < 1)
    goto LABEL_262;
  v257 = v256 >> 3;
  v258 = (v256 >> 3) - (v256 > 7) + 1;
  if (v258 >= 4)
  {
    v257 -= v258 & 0xFFFFFFFFFFFFFFFCLL;
    v259 = &v255->i64[v258 & 0xFFFFFFFFFFFFFFFCLL];
    v260 = vdupq_lane_s64(v2, 0);
    v261 = v255 + 1;
    v262 = v258 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v261[-1] = v260;
      *v261 = v260;
      v261 += 2;
      v262 -= 4;
    }
    while (v262);
    if (v258 == (v258 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_261;
  }
  else
  {
    v259 = (uint64_t *)result[1568];
  }
  v263 = v257 + 1;
  do
  {
    *v259++ = v2;
    --v263;
  }
  while (v263 > 1);
LABEL_261:
  v2 = *a2;
LABEL_262:
  v264 = (int64x2_t *)result[1748];
  v265 = result[1749] - (_QWORD)v264;
  if ((uint64_t)v265 < 1)
    goto LABEL_271;
  v266 = v265 >> 3;
  v267 = (v265 >> 3) - (v265 > 7) + 1;
  if (v267 >= 4)
  {
    v266 -= v267 & 0xFFFFFFFFFFFFFFFCLL;
    v268 = &v264->i64[v267 & 0xFFFFFFFFFFFFFFFCLL];
    v269 = vdupq_lane_s64(v2, 0);
    v270 = v264 + 1;
    v271 = v267 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v270[-1] = v269;
      *v270 = v269;
      v270 += 2;
      v271 -= 4;
    }
    while (v271);
    if (v267 == (v267 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_270;
  }
  else
  {
    v268 = (uint64_t *)result[1748];
  }
  v272 = v266 + 1;
  do
  {
    *v268++ = v2;
    --v272;
  }
  while (v272 > 1);
LABEL_270:
  v2 = *a2;
LABEL_271:
  v273 = (int64x2_t *)result[110];
  v274 = result[111] - (_QWORD)v273;
  if ((uint64_t)v274 < 1)
    goto LABEL_280;
  v275 = v274 >> 3;
  v276 = (v274 >> 3) - (v274 > 7) + 1;
  if (v276 >= 4)
  {
    v275 -= v276 & 0xFFFFFFFFFFFFFFFCLL;
    v277 = &v273->i64[v276 & 0xFFFFFFFFFFFFFFFCLL];
    v278 = vdupq_lane_s64(v2, 0);
    v279 = v273 + 1;
    v280 = v276 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v279[-1] = v278;
      *v279 = v278;
      v279 += 2;
      v280 -= 4;
    }
    while (v280);
    if (v276 == (v276 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_279;
  }
  else
  {
    v277 = (uint64_t *)result[110];
  }
  v281 = v275 + 1;
  do
  {
    *v277++ = v2;
    --v281;
  }
  while (v281 > 1);
LABEL_279:
  v2 = *a2;
LABEL_280:
  v282 = (int64x2_t *)result[290];
  v283 = result[291] - (_QWORD)v282;
  if ((uint64_t)v283 < 1)
    goto LABEL_289;
  v284 = v283 >> 3;
  v285 = (v283 >> 3) - (v283 > 7) + 1;
  if (v285 >= 4)
  {
    v284 -= v285 & 0xFFFFFFFFFFFFFFFCLL;
    v286 = &v282->i64[v285 & 0xFFFFFFFFFFFFFFFCLL];
    v287 = vdupq_lane_s64(v2, 0);
    v288 = v282 + 1;
    v289 = v285 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v288[-1] = v287;
      *v288 = v287;
      v288 += 2;
      v289 -= 4;
    }
    while (v289);
    if (v285 == (v285 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_288;
  }
  else
  {
    v286 = (uint64_t *)result[290];
  }
  v290 = v284 + 1;
  do
  {
    *v286++ = v2;
    --v290;
  }
  while (v290 > 1);
LABEL_288:
  v2 = *a2;
LABEL_289:
  v291 = (int64x2_t *)result[470];
  v292 = result[471] - (_QWORD)v291;
  if ((uint64_t)v292 < 1)
    goto LABEL_298;
  v293 = v292 >> 3;
  v294 = (v292 >> 3) - (v292 > 7) + 1;
  if (v294 >= 4)
  {
    v293 -= v294 & 0xFFFFFFFFFFFFFFFCLL;
    v295 = &v291->i64[v294 & 0xFFFFFFFFFFFFFFFCLL];
    v296 = vdupq_lane_s64(v2, 0);
    v297 = v291 + 1;
    v298 = v294 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v297[-1] = v296;
      *v297 = v296;
      v297 += 2;
      v298 -= 4;
    }
    while (v298);
    if (v294 == (v294 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_297;
  }
  else
  {
    v295 = (uint64_t *)result[470];
  }
  v299 = v293 + 1;
  do
  {
    *v295++ = v2;
    --v299;
  }
  while (v299 > 1);
LABEL_297:
  v2 = *a2;
LABEL_298:
  v300 = (int64x2_t *)result[650];
  v301 = result[651] - (_QWORD)v300;
  if ((uint64_t)v301 < 1)
    goto LABEL_307;
  v302 = v301 >> 3;
  v303 = (v301 >> 3) - (v301 > 7) + 1;
  if (v303 >= 4)
  {
    v302 -= v303 & 0xFFFFFFFFFFFFFFFCLL;
    v304 = &v300->i64[v303 & 0xFFFFFFFFFFFFFFFCLL];
    v305 = vdupq_lane_s64(v2, 0);
    v306 = v300 + 1;
    v307 = v303 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v306[-1] = v305;
      *v306 = v305;
      v306 += 2;
      v307 -= 4;
    }
    while (v307);
    if (v303 == (v303 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_306;
  }
  else
  {
    v304 = (uint64_t *)result[650];
  }
  v308 = v302 + 1;
  do
  {
    *v304++ = v2;
    --v308;
  }
  while (v308 > 1);
LABEL_306:
  v2 = *a2;
LABEL_307:
  v309 = (int64x2_t *)result[830];
  v310 = result[831] - (_QWORD)v309;
  if ((uint64_t)v310 < 1)
    goto LABEL_316;
  v311 = v310 >> 3;
  v312 = (v310 >> 3) - (v310 > 7) + 1;
  if (v312 >= 4)
  {
    v311 -= v312 & 0xFFFFFFFFFFFFFFFCLL;
    v313 = &v309->i64[v312 & 0xFFFFFFFFFFFFFFFCLL];
    v314 = vdupq_lane_s64(v2, 0);
    v315 = v309 + 1;
    v316 = v312 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v315[-1] = v314;
      *v315 = v314;
      v315 += 2;
      v316 -= 4;
    }
    while (v316);
    if (v312 == (v312 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_315;
  }
  else
  {
    v313 = (uint64_t *)result[830];
  }
  v317 = v311 + 1;
  do
  {
    *v313++ = v2;
    --v317;
  }
  while (v317 > 1);
LABEL_315:
  v2 = *a2;
LABEL_316:
  v318 = (int64x2_t *)result[1010];
  v319 = result[1011] - (_QWORD)v318;
  if ((uint64_t)v319 < 1)
    goto LABEL_325;
  v320 = v319 >> 3;
  v321 = (v319 >> 3) - (v319 > 7) + 1;
  if (v321 >= 4)
  {
    v320 -= v321 & 0xFFFFFFFFFFFFFFFCLL;
    v322 = &v318->i64[v321 & 0xFFFFFFFFFFFFFFFCLL];
    v323 = vdupq_lane_s64(v2, 0);
    v324 = v318 + 1;
    v325 = v321 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v324[-1] = v323;
      *v324 = v323;
      v324 += 2;
      v325 -= 4;
    }
    while (v325);
    if (v321 == (v321 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_324;
  }
  else
  {
    v322 = (uint64_t *)result[1010];
  }
  v326 = v320 + 1;
  do
  {
    *v322++ = v2;
    --v326;
  }
  while (v326 > 1);
LABEL_324:
  v2 = *a2;
LABEL_325:
  v327 = (int64x2_t *)result[1190];
  v328 = result[1191] - (_QWORD)v327;
  if ((uint64_t)v328 < 1)
    goto LABEL_334;
  v329 = v328 >> 3;
  v330 = (v328 >> 3) - (v328 > 7) + 1;
  if (v330 >= 4)
  {
    v329 -= v330 & 0xFFFFFFFFFFFFFFFCLL;
    v331 = &v327->i64[v330 & 0xFFFFFFFFFFFFFFFCLL];
    v332 = vdupq_lane_s64(v2, 0);
    v333 = v327 + 1;
    v334 = v330 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v333[-1] = v332;
      *v333 = v332;
      v333 += 2;
      v334 -= 4;
    }
    while (v334);
    if (v330 == (v330 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_333;
  }
  else
  {
    v331 = (uint64_t *)result[1190];
  }
  v335 = v329 + 1;
  do
  {
    *v331++ = v2;
    --v335;
  }
  while (v335 > 1);
LABEL_333:
  v2 = *a2;
LABEL_334:
  v336 = (int64x2_t *)result[1370];
  v337 = result[1371] - (_QWORD)v336;
  if ((uint64_t)v337 < 1)
    goto LABEL_343;
  v338 = v337 >> 3;
  v339 = (v337 >> 3) - (v337 > 7) + 1;
  if (v339 >= 4)
  {
    v338 -= v339 & 0xFFFFFFFFFFFFFFFCLL;
    v340 = &v336->i64[v339 & 0xFFFFFFFFFFFFFFFCLL];
    v341 = vdupq_lane_s64(v2, 0);
    v342 = v336 + 1;
    v343 = v339 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v342[-1] = v341;
      *v342 = v341;
      v342 += 2;
      v343 -= 4;
    }
    while (v343);
    if (v339 == (v339 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_342;
  }
  else
  {
    v340 = (uint64_t *)result[1370];
  }
  v344 = v338 + 1;
  do
  {
    *v340++ = v2;
    --v344;
  }
  while (v344 > 1);
LABEL_342:
  v2 = *a2;
LABEL_343:
  v345 = (int64x2_t *)result[1550];
  v346 = result[1551] - (_QWORD)v345;
  if ((uint64_t)v346 < 1)
    goto LABEL_352;
  v347 = v346 >> 3;
  v348 = (v346 >> 3) - (v346 > 7) + 1;
  if (v348 >= 4)
  {
    v347 -= v348 & 0xFFFFFFFFFFFFFFFCLL;
    v349 = &v345->i64[v348 & 0xFFFFFFFFFFFFFFFCLL];
    v350 = vdupq_lane_s64(v2, 0);
    v351 = v345 + 1;
    v352 = v348 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v351[-1] = v350;
      *v351 = v350;
      v351 += 2;
      v352 -= 4;
    }
    while (v352);
    if (v348 == (v348 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_351;
  }
  else
  {
    v349 = (uint64_t *)result[1550];
  }
  v353 = v347 + 1;
  do
  {
    *v349++ = v2;
    --v353;
  }
  while (v353 > 1);
LABEL_351:
  v2 = *a2;
LABEL_352:
  v354 = (int64x2_t *)result[1730];
  v355 = result[1731] - (_QWORD)v354;
  if ((uint64_t)v355 < 1)
    goto LABEL_361;
  v356 = v355 >> 3;
  v357 = (v355 >> 3) - (v355 > 7) + 1;
  if (v357 >= 4)
  {
    v356 -= v357 & 0xFFFFFFFFFFFFFFFCLL;
    v358 = &v354->i64[v357 & 0xFFFFFFFFFFFFFFFCLL];
    v359 = vdupq_lane_s64(v2, 0);
    v360 = v354 + 1;
    v361 = v357 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v360[-1] = v359;
      *v360 = v359;
      v360 += 2;
      v361 -= 4;
    }
    while (v361);
    if (v357 == (v357 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_360;
  }
  else
  {
    v358 = (uint64_t *)result[1730];
  }
  v362 = v356 + 1;
  do
  {
    *v358++ = v2;
    --v362;
  }
  while (v362 > 1);
LABEL_360:
  v2 = *a2;
LABEL_361:
  v363 = (int64x2_t *)result[92];
  v364 = result[93] - (_QWORD)v363;
  if ((uint64_t)v364 < 1)
    goto LABEL_370;
  v365 = v364 >> 3;
  v366 = (v364 >> 3) - (v364 > 7) + 1;
  if (v366 >= 4)
  {
    v365 -= v366 & 0xFFFFFFFFFFFFFFFCLL;
    v367 = &v363->i64[v366 & 0xFFFFFFFFFFFFFFFCLL];
    v368 = vdupq_lane_s64(v2, 0);
    v369 = v363 + 1;
    v370 = v366 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v369[-1] = v368;
      *v369 = v368;
      v369 += 2;
      v370 -= 4;
    }
    while (v370);
    if (v366 == (v366 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_369;
  }
  else
  {
    v367 = (uint64_t *)result[92];
  }
  v371 = v365 + 1;
  do
  {
    *v367++ = v2;
    --v371;
  }
  while (v371 > 1);
LABEL_369:
  v2 = *a2;
LABEL_370:
  v372 = (int64x2_t *)result[272];
  v373 = result[273] - (_QWORD)v372;
  if ((uint64_t)v373 < 1)
    goto LABEL_379;
  v374 = v373 >> 3;
  v375 = (v373 >> 3) - (v373 > 7) + 1;
  if (v375 >= 4)
  {
    v374 -= v375 & 0xFFFFFFFFFFFFFFFCLL;
    v376 = &v372->i64[v375 & 0xFFFFFFFFFFFFFFFCLL];
    v377 = vdupq_lane_s64(v2, 0);
    v378 = v372 + 1;
    v379 = v375 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v378[-1] = v377;
      *v378 = v377;
      v378 += 2;
      v379 -= 4;
    }
    while (v379);
    if (v375 == (v375 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_378;
  }
  else
  {
    v376 = (uint64_t *)result[272];
  }
  v380 = v374 + 1;
  do
  {
    *v376++ = v2;
    --v380;
  }
  while (v380 > 1);
LABEL_378:
  v2 = *a2;
LABEL_379:
  v381 = (int64x2_t *)result[452];
  v382 = result[453] - (_QWORD)v381;
  if ((uint64_t)v382 < 1)
    goto LABEL_388;
  v383 = v382 >> 3;
  v384 = (v382 >> 3) - (v382 > 7) + 1;
  if (v384 >= 4)
  {
    v383 -= v384 & 0xFFFFFFFFFFFFFFFCLL;
    v385 = &v381->i64[v384 & 0xFFFFFFFFFFFFFFFCLL];
    v386 = vdupq_lane_s64(v2, 0);
    v387 = v381 + 1;
    v388 = v384 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v387[-1] = v386;
      *v387 = v386;
      v387 += 2;
      v388 -= 4;
    }
    while (v388);
    if (v384 == (v384 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_387;
  }
  else
  {
    v385 = (uint64_t *)result[452];
  }
  v389 = v383 + 1;
  do
  {
    *v385++ = v2;
    --v389;
  }
  while (v389 > 1);
LABEL_387:
  v2 = *a2;
LABEL_388:
  v390 = (int64x2_t *)result[632];
  v391 = result[633] - (_QWORD)v390;
  if ((uint64_t)v391 < 1)
    goto LABEL_397;
  v392 = v391 >> 3;
  v393 = (v391 >> 3) - (v391 > 7) + 1;
  if (v393 >= 4)
  {
    v392 -= v393 & 0xFFFFFFFFFFFFFFFCLL;
    v394 = &v390->i64[v393 & 0xFFFFFFFFFFFFFFFCLL];
    v395 = vdupq_lane_s64(v2, 0);
    v396 = v390 + 1;
    v397 = v393 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v396[-1] = v395;
      *v396 = v395;
      v396 += 2;
      v397 -= 4;
    }
    while (v397);
    if (v393 == (v393 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_396;
  }
  else
  {
    v394 = (uint64_t *)result[632];
  }
  v398 = v392 + 1;
  do
  {
    *v394++ = v2;
    --v398;
  }
  while (v398 > 1);
LABEL_396:
  v2 = *a2;
LABEL_397:
  v399 = (int64x2_t *)result[812];
  v400 = result[813] - (_QWORD)v399;
  if ((uint64_t)v400 < 1)
    goto LABEL_406;
  v401 = v400 >> 3;
  v402 = (v400 >> 3) - (v400 > 7) + 1;
  if (v402 >= 4)
  {
    v401 -= v402 & 0xFFFFFFFFFFFFFFFCLL;
    v403 = &v399->i64[v402 & 0xFFFFFFFFFFFFFFFCLL];
    v404 = vdupq_lane_s64(v2, 0);
    v405 = v399 + 1;
    v406 = v402 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v405[-1] = v404;
      *v405 = v404;
      v405 += 2;
      v406 -= 4;
    }
    while (v406);
    if (v402 == (v402 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_405;
  }
  else
  {
    v403 = (uint64_t *)result[812];
  }
  v407 = v401 + 1;
  do
  {
    *v403++ = v2;
    --v407;
  }
  while (v407 > 1);
LABEL_405:
  v2 = *a2;
LABEL_406:
  v408 = (int64x2_t *)result[992];
  v409 = result[993] - (_QWORD)v408;
  if ((uint64_t)v409 < 1)
    goto LABEL_415;
  v410 = v409 >> 3;
  v411 = (v409 >> 3) - (v409 > 7) + 1;
  if (v411 >= 4)
  {
    v410 -= v411 & 0xFFFFFFFFFFFFFFFCLL;
    v412 = &v408->i64[v411 & 0xFFFFFFFFFFFFFFFCLL];
    v413 = vdupq_lane_s64(v2, 0);
    v414 = v408 + 1;
    v415 = v411 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v414[-1] = v413;
      *v414 = v413;
      v414 += 2;
      v415 -= 4;
    }
    while (v415);
    if (v411 == (v411 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_414;
  }
  else
  {
    v412 = (uint64_t *)result[992];
  }
  v416 = v410 + 1;
  do
  {
    *v412++ = v2;
    --v416;
  }
  while (v416 > 1);
LABEL_414:
  v2 = *a2;
LABEL_415:
  v417 = (int64x2_t *)result[1172];
  v418 = result[1173] - (_QWORD)v417;
  if ((uint64_t)v418 < 1)
    goto LABEL_424;
  v419 = v418 >> 3;
  v420 = (v418 >> 3) - (v418 > 7) + 1;
  if (v420 >= 4)
  {
    v419 -= v420 & 0xFFFFFFFFFFFFFFFCLL;
    v421 = &v417->i64[v420 & 0xFFFFFFFFFFFFFFFCLL];
    v422 = vdupq_lane_s64(v2, 0);
    v423 = v417 + 1;
    v424 = v420 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v423[-1] = v422;
      *v423 = v422;
      v423 += 2;
      v424 -= 4;
    }
    while (v424);
    if (v420 == (v420 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_423;
  }
  else
  {
    v421 = (uint64_t *)result[1172];
  }
  v425 = v419 + 1;
  do
  {
    *v421++ = v2;
    --v425;
  }
  while (v425 > 1);
LABEL_423:
  v2 = *a2;
LABEL_424:
  v426 = (int64x2_t *)result[1352];
  v427 = result[1353] - (_QWORD)v426;
  if ((uint64_t)v427 < 1)
    goto LABEL_433;
  v428 = v427 >> 3;
  v429 = (v427 >> 3) - (v427 > 7) + 1;
  if (v429 >= 4)
  {
    v428 -= v429 & 0xFFFFFFFFFFFFFFFCLL;
    v430 = &v426->i64[v429 & 0xFFFFFFFFFFFFFFFCLL];
    v431 = vdupq_lane_s64(v2, 0);
    v432 = v426 + 1;
    v433 = v429 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v432[-1] = v431;
      *v432 = v431;
      v432 += 2;
      v433 -= 4;
    }
    while (v433);
    if (v429 == (v429 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_432;
  }
  else
  {
    v430 = (uint64_t *)result[1352];
  }
  v434 = v428 + 1;
  do
  {
    *v430++ = v2;
    --v434;
  }
  while (v434 > 1);
LABEL_432:
  v2 = *a2;
LABEL_433:
  v435 = (int64x2_t *)result[1532];
  v436 = result[1533] - (_QWORD)v435;
  if ((uint64_t)v436 < 1)
    goto LABEL_442;
  v437 = v436 >> 3;
  v438 = (v436 >> 3) - (v436 > 7) + 1;
  if (v438 >= 4)
  {
    v437 -= v438 & 0xFFFFFFFFFFFFFFFCLL;
    v439 = &v435->i64[v438 & 0xFFFFFFFFFFFFFFFCLL];
    v440 = vdupq_lane_s64(v2, 0);
    v441 = v435 + 1;
    v442 = v438 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v441[-1] = v440;
      *v441 = v440;
      v441 += 2;
      v442 -= 4;
    }
    while (v442);
    if (v438 == (v438 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_441;
  }
  else
  {
    v439 = (uint64_t *)result[1532];
  }
  v443 = v437 + 1;
  do
  {
    *v439++ = v2;
    --v443;
  }
  while (v443 > 1);
LABEL_441:
  v2 = *a2;
LABEL_442:
  v444 = (int64x2_t *)result[1712];
  v445 = result[1713] - (_QWORD)v444;
  if ((uint64_t)v445 < 1)
    goto LABEL_451;
  v446 = v445 >> 3;
  v447 = (v445 >> 3) - (v445 > 7) + 1;
  if (v447 >= 4)
  {
    v446 -= v447 & 0xFFFFFFFFFFFFFFFCLL;
    v448 = &v444->i64[v447 & 0xFFFFFFFFFFFFFFFCLL];
    v449 = vdupq_lane_s64(v2, 0);
    v450 = v444 + 1;
    v451 = v447 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v450[-1] = v449;
      *v450 = v449;
      v450 += 2;
      v451 -= 4;
    }
    while (v451);
    if (v447 == (v447 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_450;
  }
  else
  {
    v448 = (uint64_t *)result[1712];
  }
  v452 = v446 + 1;
  do
  {
    *v448++ = v2;
    --v452;
  }
  while (v452 > 1);
LABEL_450:
  v2 = *a2;
LABEL_451:
  v453 = (int64x2_t *)result[74];
  v454 = result[75] - (_QWORD)v453;
  if ((uint64_t)v454 < 1)
    goto LABEL_460;
  v455 = v454 >> 3;
  v456 = (v454 >> 3) - (v454 > 7) + 1;
  if (v456 >= 4)
  {
    v455 -= v456 & 0xFFFFFFFFFFFFFFFCLL;
    v457 = &v453->i64[v456 & 0xFFFFFFFFFFFFFFFCLL];
    v458 = vdupq_lane_s64(v2, 0);
    v459 = v453 + 1;
    v460 = v456 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v459[-1] = v458;
      *v459 = v458;
      v459 += 2;
      v460 -= 4;
    }
    while (v460);
    if (v456 == (v456 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_459;
  }
  else
  {
    v457 = (uint64_t *)result[74];
  }
  v461 = v455 + 1;
  do
  {
    *v457++ = v2;
    --v461;
  }
  while (v461 > 1);
LABEL_459:
  v2 = *a2;
LABEL_460:
  v462 = (int64x2_t *)result[254];
  v463 = result[255] - (_QWORD)v462;
  if ((uint64_t)v463 < 1)
    goto LABEL_469;
  v464 = v463 >> 3;
  v465 = (v463 >> 3) - (v463 > 7) + 1;
  if (v465 >= 4)
  {
    v464 -= v465 & 0xFFFFFFFFFFFFFFFCLL;
    v466 = &v462->i64[v465 & 0xFFFFFFFFFFFFFFFCLL];
    v467 = vdupq_lane_s64(v2, 0);
    v468 = v462 + 1;
    v469 = v465 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v468[-1] = v467;
      *v468 = v467;
      v468 += 2;
      v469 -= 4;
    }
    while (v469);
    if (v465 == (v465 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_468;
  }
  else
  {
    v466 = (uint64_t *)result[254];
  }
  v470 = v464 + 1;
  do
  {
    *v466++ = v2;
    --v470;
  }
  while (v470 > 1);
LABEL_468:
  v2 = *a2;
LABEL_469:
  v471 = (int64x2_t *)result[434];
  v472 = result[435] - (_QWORD)v471;
  if ((uint64_t)v472 < 1)
    goto LABEL_478;
  v473 = v472 >> 3;
  v474 = (v472 >> 3) - (v472 > 7) + 1;
  if (v474 >= 4)
  {
    v473 -= v474 & 0xFFFFFFFFFFFFFFFCLL;
    v475 = &v471->i64[v474 & 0xFFFFFFFFFFFFFFFCLL];
    v476 = vdupq_lane_s64(v2, 0);
    v477 = v471 + 1;
    v478 = v474 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v477[-1] = v476;
      *v477 = v476;
      v477 += 2;
      v478 -= 4;
    }
    while (v478);
    if (v474 == (v474 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_477;
  }
  else
  {
    v475 = (uint64_t *)result[434];
  }
  v479 = v473 + 1;
  do
  {
    *v475++ = v2;
    --v479;
  }
  while (v479 > 1);
LABEL_477:
  v2 = *a2;
LABEL_478:
  v480 = (int64x2_t *)result[614];
  v481 = result[615] - (_QWORD)v480;
  if ((uint64_t)v481 < 1)
    goto LABEL_487;
  v482 = v481 >> 3;
  v483 = (v481 >> 3) - (v481 > 7) + 1;
  if (v483 >= 4)
  {
    v482 -= v483 & 0xFFFFFFFFFFFFFFFCLL;
    v484 = &v480->i64[v483 & 0xFFFFFFFFFFFFFFFCLL];
    v485 = vdupq_lane_s64(v2, 0);
    v486 = v480 + 1;
    v487 = v483 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v486[-1] = v485;
      *v486 = v485;
      v486 += 2;
      v487 -= 4;
    }
    while (v487);
    if (v483 == (v483 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_486;
  }
  else
  {
    v484 = (uint64_t *)result[614];
  }
  v488 = v482 + 1;
  do
  {
    *v484++ = v2;
    --v488;
  }
  while (v488 > 1);
LABEL_486:
  v2 = *a2;
LABEL_487:
  v489 = (int64x2_t *)result[794];
  v490 = result[795] - (_QWORD)v489;
  if ((uint64_t)v490 < 1)
    goto LABEL_496;
  v491 = v490 >> 3;
  v492 = (v490 >> 3) - (v490 > 7) + 1;
  if (v492 >= 4)
  {
    v491 -= v492 & 0xFFFFFFFFFFFFFFFCLL;
    v493 = &v489->i64[v492 & 0xFFFFFFFFFFFFFFFCLL];
    v494 = vdupq_lane_s64(v2, 0);
    v495 = v489 + 1;
    v496 = v492 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v495[-1] = v494;
      *v495 = v494;
      v495 += 2;
      v496 -= 4;
    }
    while (v496);
    if (v492 == (v492 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_495;
  }
  else
  {
    v493 = (uint64_t *)result[794];
  }
  v497 = v491 + 1;
  do
  {
    *v493++ = v2;
    --v497;
  }
  while (v497 > 1);
LABEL_495:
  v2 = *a2;
LABEL_496:
  v498 = (int64x2_t *)result[974];
  v499 = result[975] - (_QWORD)v498;
  if ((uint64_t)v499 < 1)
    goto LABEL_505;
  v500 = v499 >> 3;
  v501 = (v499 >> 3) - (v499 > 7) + 1;
  if (v501 >= 4)
  {
    v500 -= v501 & 0xFFFFFFFFFFFFFFFCLL;
    v502 = &v498->i64[v501 & 0xFFFFFFFFFFFFFFFCLL];
    v503 = vdupq_lane_s64(v2, 0);
    v504 = v498 + 1;
    v505 = v501 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v504[-1] = v503;
      *v504 = v503;
      v504 += 2;
      v505 -= 4;
    }
    while (v505);
    if (v501 == (v501 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_504;
  }
  else
  {
    v502 = (uint64_t *)result[974];
  }
  v506 = v500 + 1;
  do
  {
    *v502++ = v2;
    --v506;
  }
  while (v506 > 1);
LABEL_504:
  v2 = *a2;
LABEL_505:
  v507 = (int64x2_t *)result[1154];
  v508 = result[1155] - (_QWORD)v507;
  if ((uint64_t)v508 < 1)
    goto LABEL_514;
  v509 = v508 >> 3;
  v510 = (v508 >> 3) - (v508 > 7) + 1;
  if (v510 >= 4)
  {
    v509 -= v510 & 0xFFFFFFFFFFFFFFFCLL;
    v511 = &v507->i64[v510 & 0xFFFFFFFFFFFFFFFCLL];
    v512 = vdupq_lane_s64(v2, 0);
    v513 = v507 + 1;
    v514 = v510 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v513[-1] = v512;
      *v513 = v512;
      v513 += 2;
      v514 -= 4;
    }
    while (v514);
    if (v510 == (v510 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_513;
  }
  else
  {
    v511 = (uint64_t *)result[1154];
  }
  v515 = v509 + 1;
  do
  {
    *v511++ = v2;
    --v515;
  }
  while (v515 > 1);
LABEL_513:
  v2 = *a2;
LABEL_514:
  v516 = (int64x2_t *)result[1334];
  v517 = result[1335] - (_QWORD)v516;
  if ((uint64_t)v517 < 1)
    goto LABEL_523;
  v518 = v517 >> 3;
  v519 = (v517 >> 3) - (v517 > 7) + 1;
  if (v519 >= 4)
  {
    v518 -= v519 & 0xFFFFFFFFFFFFFFFCLL;
    v520 = &v516->i64[v519 & 0xFFFFFFFFFFFFFFFCLL];
    v521 = vdupq_lane_s64(v2, 0);
    v522 = v516 + 1;
    v523 = v519 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v522[-1] = v521;
      *v522 = v521;
      v522 += 2;
      v523 -= 4;
    }
    while (v523);
    if (v519 == (v519 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_522;
  }
  else
  {
    v520 = (uint64_t *)result[1334];
  }
  v524 = v518 + 1;
  do
  {
    *v520++ = v2;
    --v524;
  }
  while (v524 > 1);
LABEL_522:
  v2 = *a2;
LABEL_523:
  v525 = (int64x2_t *)result[1514];
  v526 = result[1515] - (_QWORD)v525;
  if ((uint64_t)v526 < 1)
    goto LABEL_532;
  v527 = v526 >> 3;
  v528 = (v526 >> 3) - (v526 > 7) + 1;
  if (v528 >= 4)
  {
    v527 -= v528 & 0xFFFFFFFFFFFFFFFCLL;
    v529 = &v525->i64[v528 & 0xFFFFFFFFFFFFFFFCLL];
    v530 = vdupq_lane_s64(v2, 0);
    v531 = v525 + 1;
    v532 = v528 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v531[-1] = v530;
      *v531 = v530;
      v531 += 2;
      v532 -= 4;
    }
    while (v532);
    if (v528 == (v528 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_531;
  }
  else
  {
    v529 = (uint64_t *)result[1514];
  }
  v533 = v527 + 1;
  do
  {
    *v529++ = v2;
    --v533;
  }
  while (v533 > 1);
LABEL_531:
  v2 = *a2;
LABEL_532:
  v534 = (int64x2_t *)result[1694];
  v535 = result[1695] - (_QWORD)v534;
  if ((uint64_t)v535 < 1)
    goto LABEL_541;
  v536 = v535 >> 3;
  v537 = (v535 >> 3) - (v535 > 7) + 1;
  if (v537 >= 4)
  {
    v536 -= v537 & 0xFFFFFFFFFFFFFFFCLL;
    v538 = &v534->i64[v537 & 0xFFFFFFFFFFFFFFFCLL];
    v539 = vdupq_lane_s64(v2, 0);
    v540 = v534 + 1;
    v541 = v537 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v540[-1] = v539;
      *v540 = v539;
      v540 += 2;
      v541 -= 4;
    }
    while (v541);
    if (v537 == (v537 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_540;
  }
  else
  {
    v538 = (uint64_t *)result[1694];
  }
  v542 = v536 + 1;
  do
  {
    *v538++ = v2;
    --v542;
  }
  while (v542 > 1);
LABEL_540:
  v2 = *a2;
LABEL_541:
  v543 = (int64x2_t *)result[56];
  v544 = result[57] - (_QWORD)v543;
  if ((uint64_t)v544 < 1)
    goto LABEL_550;
  v545 = v544 >> 3;
  v546 = (v544 >> 3) - (v544 > 7) + 1;
  if (v546 >= 4)
  {
    v545 -= v546 & 0xFFFFFFFFFFFFFFFCLL;
    v547 = &v543->i64[v546 & 0xFFFFFFFFFFFFFFFCLL];
    v548 = vdupq_lane_s64(v2, 0);
    v549 = v543 + 1;
    v550 = v546 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v549[-1] = v548;
      *v549 = v548;
      v549 += 2;
      v550 -= 4;
    }
    while (v550);
    if (v546 == (v546 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_549;
  }
  else
  {
    v547 = (uint64_t *)result[56];
  }
  v551 = v545 + 1;
  do
  {
    *v547++ = v2;
    --v551;
  }
  while (v551 > 1);
LABEL_549:
  v2 = *a2;
LABEL_550:
  v552 = (int64x2_t *)result[236];
  v553 = result[237] - (_QWORD)v552;
  if ((uint64_t)v553 < 1)
    goto LABEL_559;
  v554 = v553 >> 3;
  v555 = (v553 >> 3) - (v553 > 7) + 1;
  if (v555 >= 4)
  {
    v554 -= v555 & 0xFFFFFFFFFFFFFFFCLL;
    v556 = &v552->i64[v555 & 0xFFFFFFFFFFFFFFFCLL];
    v557 = vdupq_lane_s64(v2, 0);
    v558 = v552 + 1;
    v559 = v555 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v558[-1] = v557;
      *v558 = v557;
      v558 += 2;
      v559 -= 4;
    }
    while (v559);
    if (v555 == (v555 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_558;
  }
  else
  {
    v556 = (uint64_t *)result[236];
  }
  v560 = v554 + 1;
  do
  {
    *v556++ = v2;
    --v560;
  }
  while (v560 > 1);
LABEL_558:
  v2 = *a2;
LABEL_559:
  v561 = (int64x2_t *)result[416];
  v562 = result[417] - (_QWORD)v561;
  if ((uint64_t)v562 < 1)
    goto LABEL_568;
  v563 = v562 >> 3;
  v564 = (v562 >> 3) - (v562 > 7) + 1;
  if (v564 >= 4)
  {
    v563 -= v564 & 0xFFFFFFFFFFFFFFFCLL;
    v565 = &v561->i64[v564 & 0xFFFFFFFFFFFFFFFCLL];
    v566 = vdupq_lane_s64(v2, 0);
    v567 = v561 + 1;
    v568 = v564 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v567[-1] = v566;
      *v567 = v566;
      v567 += 2;
      v568 -= 4;
    }
    while (v568);
    if (v564 == (v564 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_567;
  }
  else
  {
    v565 = (uint64_t *)result[416];
  }
  v569 = v563 + 1;
  do
  {
    *v565++ = v2;
    --v569;
  }
  while (v569 > 1);
LABEL_567:
  v2 = *a2;
LABEL_568:
  v570 = (int64x2_t *)result[596];
  v571 = result[597] - (_QWORD)v570;
  if ((uint64_t)v571 < 1)
    goto LABEL_577;
  v572 = v571 >> 3;
  v573 = (v571 >> 3) - (v571 > 7) + 1;
  if (v573 >= 4)
  {
    v572 -= v573 & 0xFFFFFFFFFFFFFFFCLL;
    v574 = &v570->i64[v573 & 0xFFFFFFFFFFFFFFFCLL];
    v575 = vdupq_lane_s64(v2, 0);
    v576 = v570 + 1;
    v577 = v573 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v576[-1] = v575;
      *v576 = v575;
      v576 += 2;
      v577 -= 4;
    }
    while (v577);
    if (v573 == (v573 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_576;
  }
  else
  {
    v574 = (uint64_t *)result[596];
  }
  v578 = v572 + 1;
  do
  {
    *v574++ = v2;
    --v578;
  }
  while (v578 > 1);
LABEL_576:
  v2 = *a2;
LABEL_577:
  v579 = (int64x2_t *)result[776];
  v580 = result[777] - (_QWORD)v579;
  if ((uint64_t)v580 < 1)
    goto LABEL_586;
  v581 = v580 >> 3;
  v582 = (v580 >> 3) - (v580 > 7) + 1;
  if (v582 >= 4)
  {
    v581 -= v582 & 0xFFFFFFFFFFFFFFFCLL;
    v583 = &v579->i64[v582 & 0xFFFFFFFFFFFFFFFCLL];
    v584 = vdupq_lane_s64(v2, 0);
    v585 = v579 + 1;
    v586 = v582 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v585[-1] = v584;
      *v585 = v584;
      v585 += 2;
      v586 -= 4;
    }
    while (v586);
    if (v582 == (v582 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_585;
  }
  else
  {
    v583 = (uint64_t *)result[776];
  }
  v587 = v581 + 1;
  do
  {
    *v583++ = v2;
    --v587;
  }
  while (v587 > 1);
LABEL_585:
  v2 = *a2;
LABEL_586:
  v588 = (int64x2_t *)result[956];
  v589 = result[957] - (_QWORD)v588;
  if ((uint64_t)v589 < 1)
    goto LABEL_595;
  v590 = v589 >> 3;
  v591 = (v589 >> 3) - (v589 > 7) + 1;
  if (v591 >= 4)
  {
    v590 -= v591 & 0xFFFFFFFFFFFFFFFCLL;
    v592 = &v588->i64[v591 & 0xFFFFFFFFFFFFFFFCLL];
    v593 = vdupq_lane_s64(v2, 0);
    v594 = v588 + 1;
    v595 = v591 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v594[-1] = v593;
      *v594 = v593;
      v594 += 2;
      v595 -= 4;
    }
    while (v595);
    if (v591 == (v591 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_594;
  }
  else
  {
    v592 = (uint64_t *)result[956];
  }
  v596 = v590 + 1;
  do
  {
    *v592++ = v2;
    --v596;
  }
  while (v596 > 1);
LABEL_594:
  v2 = *a2;
LABEL_595:
  v597 = (int64x2_t *)result[1136];
  v598 = result[1137] - (_QWORD)v597;
  if ((uint64_t)v598 < 1)
    goto LABEL_604;
  v599 = v598 >> 3;
  v600 = (v598 >> 3) - (v598 > 7) + 1;
  if (v600 >= 4)
  {
    v599 -= v600 & 0xFFFFFFFFFFFFFFFCLL;
    v601 = &v597->i64[v600 & 0xFFFFFFFFFFFFFFFCLL];
    v602 = vdupq_lane_s64(v2, 0);
    v603 = v597 + 1;
    v604 = v600 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v603[-1] = v602;
      *v603 = v602;
      v603 += 2;
      v604 -= 4;
    }
    while (v604);
    if (v600 == (v600 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_603;
  }
  else
  {
    v601 = (uint64_t *)result[1136];
  }
  v605 = v599 + 1;
  do
  {
    *v601++ = v2;
    --v605;
  }
  while (v605 > 1);
LABEL_603:
  v2 = *a2;
LABEL_604:
  v606 = (int64x2_t *)result[1316];
  v607 = result[1317] - (_QWORD)v606;
  if ((uint64_t)v607 < 1)
    goto LABEL_613;
  v608 = v607 >> 3;
  v609 = (v607 >> 3) - (v607 > 7) + 1;
  if (v609 >= 4)
  {
    v608 -= v609 & 0xFFFFFFFFFFFFFFFCLL;
    v610 = &v606->i64[v609 & 0xFFFFFFFFFFFFFFFCLL];
    v611 = vdupq_lane_s64(v2, 0);
    v612 = v606 + 1;
    v613 = v609 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v612[-1] = v611;
      *v612 = v611;
      v612 += 2;
      v613 -= 4;
    }
    while (v613);
    if (v609 == (v609 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_612;
  }
  else
  {
    v610 = (uint64_t *)result[1316];
  }
  v614 = v608 + 1;
  do
  {
    *v610++ = v2;
    --v614;
  }
  while (v614 > 1);
LABEL_612:
  v2 = *a2;
LABEL_613:
  v615 = (int64x2_t *)result[1496];
  v616 = result[1497] - (_QWORD)v615;
  if ((uint64_t)v616 < 1)
    goto LABEL_622;
  v617 = v616 >> 3;
  v618 = (v616 >> 3) - (v616 > 7) + 1;
  if (v618 >= 4)
  {
    v617 -= v618 & 0xFFFFFFFFFFFFFFFCLL;
    v619 = &v615->i64[v618 & 0xFFFFFFFFFFFFFFFCLL];
    v620 = vdupq_lane_s64(v2, 0);
    v621 = v615 + 1;
    v622 = v618 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v621[-1] = v620;
      *v621 = v620;
      v621 += 2;
      v622 -= 4;
    }
    while (v622);
    if (v618 == (v618 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_621;
  }
  else
  {
    v619 = (uint64_t *)result[1496];
  }
  v623 = v617 + 1;
  do
  {
    *v619++ = v2;
    --v623;
  }
  while (v623 > 1);
LABEL_621:
  v2 = *a2;
LABEL_622:
  v624 = (int64x2_t *)result[1676];
  v625 = result[1677] - (_QWORD)v624;
  if ((uint64_t)v625 < 1)
    goto LABEL_631;
  v626 = v625 >> 3;
  v627 = (v625 >> 3) - (v625 > 7) + 1;
  if (v627 >= 4)
  {
    v626 -= v627 & 0xFFFFFFFFFFFFFFFCLL;
    v628 = &v624->i64[v627 & 0xFFFFFFFFFFFFFFFCLL];
    v629 = vdupq_lane_s64(v2, 0);
    v630 = v624 + 1;
    v631 = v627 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v630[-1] = v629;
      *v630 = v629;
      v630 += 2;
      v631 -= 4;
    }
    while (v631);
    if (v627 == (v627 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_630;
  }
  else
  {
    v628 = (uint64_t *)result[1676];
  }
  v632 = v626 + 1;
  do
  {
    *v628++ = v2;
    --v632;
  }
  while (v632 > 1);
LABEL_630:
  v2 = *a2;
LABEL_631:
  v633 = (int64x2_t *)result[38];
  v634 = result[39] - (_QWORD)v633;
  if ((uint64_t)v634 < 1)
    goto LABEL_640;
  v635 = v634 >> 3;
  v636 = (v634 >> 3) - (v634 > 7) + 1;
  if (v636 >= 4)
  {
    v635 -= v636 & 0xFFFFFFFFFFFFFFFCLL;
    v637 = &v633->i64[v636 & 0xFFFFFFFFFFFFFFFCLL];
    v638 = vdupq_lane_s64(v2, 0);
    v639 = v633 + 1;
    v640 = v636 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v639[-1] = v638;
      *v639 = v638;
      v639 += 2;
      v640 -= 4;
    }
    while (v640);
    if (v636 == (v636 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_639;
  }
  else
  {
    v637 = (uint64_t *)result[38];
  }
  v641 = v635 + 1;
  do
  {
    *v637++ = v2;
    --v641;
  }
  while (v641 > 1);
LABEL_639:
  v2 = *a2;
LABEL_640:
  v642 = (int64x2_t *)result[218];
  v643 = result[219] - (_QWORD)v642;
  if ((uint64_t)v643 < 1)
    goto LABEL_649;
  v644 = v643 >> 3;
  v645 = (v643 >> 3) - (v643 > 7) + 1;
  if (v645 >= 4)
  {
    v644 -= v645 & 0xFFFFFFFFFFFFFFFCLL;
    v646 = &v642->i64[v645 & 0xFFFFFFFFFFFFFFFCLL];
    v647 = vdupq_lane_s64(v2, 0);
    v648 = v642 + 1;
    v649 = v645 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v648[-1] = v647;
      *v648 = v647;
      v648 += 2;
      v649 -= 4;
    }
    while (v649);
    if (v645 == (v645 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_648;
  }
  else
  {
    v646 = (uint64_t *)result[218];
  }
  v650 = v644 + 1;
  do
  {
    *v646++ = v2;
    --v650;
  }
  while (v650 > 1);
LABEL_648:
  v2 = *a2;
LABEL_649:
  v651 = (int64x2_t *)result[398];
  v652 = result[399] - (_QWORD)v651;
  if ((uint64_t)v652 < 1)
    goto LABEL_658;
  v653 = v652 >> 3;
  v654 = (v652 >> 3) - (v652 > 7) + 1;
  if (v654 >= 4)
  {
    v653 -= v654 & 0xFFFFFFFFFFFFFFFCLL;
    v655 = &v651->i64[v654 & 0xFFFFFFFFFFFFFFFCLL];
    v656 = vdupq_lane_s64(v2, 0);
    v657 = v651 + 1;
    v658 = v654 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v657[-1] = v656;
      *v657 = v656;
      v657 += 2;
      v658 -= 4;
    }
    while (v658);
    if (v654 == (v654 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_657;
  }
  else
  {
    v655 = (uint64_t *)result[398];
  }
  v659 = v653 + 1;
  do
  {
    *v655++ = v2;
    --v659;
  }
  while (v659 > 1);
LABEL_657:
  v2 = *a2;
LABEL_658:
  v660 = (int64x2_t *)result[578];
  v661 = result[579] - (_QWORD)v660;
  if ((uint64_t)v661 < 1)
    goto LABEL_667;
  v662 = v661 >> 3;
  v663 = (v661 >> 3) - (v661 > 7) + 1;
  if (v663 >= 4)
  {
    v662 -= v663 & 0xFFFFFFFFFFFFFFFCLL;
    v664 = &v660->i64[v663 & 0xFFFFFFFFFFFFFFFCLL];
    v665 = vdupq_lane_s64(v2, 0);
    v666 = v660 + 1;
    v667 = v663 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v666[-1] = v665;
      *v666 = v665;
      v666 += 2;
      v667 -= 4;
    }
    while (v667);
    if (v663 == (v663 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_666;
  }
  else
  {
    v664 = (uint64_t *)result[578];
  }
  v668 = v662 + 1;
  do
  {
    *v664++ = v2;
    --v668;
  }
  while (v668 > 1);
LABEL_666:
  v2 = *a2;
LABEL_667:
  v669 = (int64x2_t *)result[758];
  v670 = result[759] - (_QWORD)v669;
  if ((uint64_t)v670 < 1)
    goto LABEL_676;
  v671 = v670 >> 3;
  v672 = (v670 >> 3) - (v670 > 7) + 1;
  if (v672 >= 4)
  {
    v671 -= v672 & 0xFFFFFFFFFFFFFFFCLL;
    v673 = &v669->i64[v672 & 0xFFFFFFFFFFFFFFFCLL];
    v674 = vdupq_lane_s64(v2, 0);
    v675 = v669 + 1;
    v676 = v672 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v675[-1] = v674;
      *v675 = v674;
      v675 += 2;
      v676 -= 4;
    }
    while (v676);
    if (v672 == (v672 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_675;
  }
  else
  {
    v673 = (uint64_t *)result[758];
  }
  v677 = v671 + 1;
  do
  {
    *v673++ = v2;
    --v677;
  }
  while (v677 > 1);
LABEL_675:
  v2 = *a2;
LABEL_676:
  v678 = (int64x2_t *)result[938];
  v679 = result[939] - (_QWORD)v678;
  if ((uint64_t)v679 < 1)
    goto LABEL_685;
  v680 = v679 >> 3;
  v681 = (v679 >> 3) - (v679 > 7) + 1;
  if (v681 >= 4)
  {
    v680 -= v681 & 0xFFFFFFFFFFFFFFFCLL;
    v682 = &v678->i64[v681 & 0xFFFFFFFFFFFFFFFCLL];
    v683 = vdupq_lane_s64(v2, 0);
    v684 = v678 + 1;
    v685 = v681 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v684[-1] = v683;
      *v684 = v683;
      v684 += 2;
      v685 -= 4;
    }
    while (v685);
    if (v681 == (v681 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_684;
  }
  else
  {
    v682 = (uint64_t *)result[938];
  }
  v686 = v680 + 1;
  do
  {
    *v682++ = v2;
    --v686;
  }
  while (v686 > 1);
LABEL_684:
  v2 = *a2;
LABEL_685:
  v687 = (int64x2_t *)result[1118];
  v688 = result[1119] - (_QWORD)v687;
  if ((uint64_t)v688 < 1)
    goto LABEL_694;
  v689 = v688 >> 3;
  v690 = (v688 >> 3) - (v688 > 7) + 1;
  if (v690 >= 4)
  {
    v689 -= v690 & 0xFFFFFFFFFFFFFFFCLL;
    v691 = &v687->i64[v690 & 0xFFFFFFFFFFFFFFFCLL];
    v692 = vdupq_lane_s64(v2, 0);
    v693 = v687 + 1;
    v694 = v690 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v693[-1] = v692;
      *v693 = v692;
      v693 += 2;
      v694 -= 4;
    }
    while (v694);
    if (v690 == (v690 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_693;
  }
  else
  {
    v691 = (uint64_t *)result[1118];
  }
  v695 = v689 + 1;
  do
  {
    *v691++ = v2;
    --v695;
  }
  while (v695 > 1);
LABEL_693:
  v2 = *a2;
LABEL_694:
  v696 = (int64x2_t *)result[1298];
  v697 = result[1299] - (_QWORD)v696;
  if ((uint64_t)v697 < 1)
    goto LABEL_703;
  v698 = v697 >> 3;
  v699 = (v697 >> 3) - (v697 > 7) + 1;
  if (v699 >= 4)
  {
    v698 -= v699 & 0xFFFFFFFFFFFFFFFCLL;
    v700 = &v696->i64[v699 & 0xFFFFFFFFFFFFFFFCLL];
    v701 = vdupq_lane_s64(v2, 0);
    v702 = v696 + 1;
    v703 = v699 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v702[-1] = v701;
      *v702 = v701;
      v702 += 2;
      v703 -= 4;
    }
    while (v703);
    if (v699 == (v699 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_702;
  }
  else
  {
    v700 = (uint64_t *)result[1298];
  }
  v704 = v698 + 1;
  do
  {
    *v700++ = v2;
    --v704;
  }
  while (v704 > 1);
LABEL_702:
  v2 = *a2;
LABEL_703:
  v705 = (int64x2_t *)result[1478];
  v706 = result[1479] - (_QWORD)v705;
  if ((uint64_t)v706 < 1)
    goto LABEL_712;
  v707 = v706 >> 3;
  v708 = (v706 >> 3) - (v706 > 7) + 1;
  if (v708 >= 4)
  {
    v707 -= v708 & 0xFFFFFFFFFFFFFFFCLL;
    v709 = &v705->i64[v708 & 0xFFFFFFFFFFFFFFFCLL];
    v710 = vdupq_lane_s64(v2, 0);
    v711 = v705 + 1;
    v712 = v708 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v711[-1] = v710;
      *v711 = v710;
      v711 += 2;
      v712 -= 4;
    }
    while (v712);
    if (v708 == (v708 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_711;
  }
  else
  {
    v709 = (uint64_t *)result[1478];
  }
  v713 = v707 + 1;
  do
  {
    *v709++ = v2;
    --v713;
  }
  while (v713 > 1);
LABEL_711:
  v2 = *a2;
LABEL_712:
  v714 = (int64x2_t *)result[1658];
  v715 = result[1659] - (_QWORD)v714;
  if ((uint64_t)v715 < 1)
    goto LABEL_721;
  v716 = v715 >> 3;
  v717 = (v715 >> 3) - (v715 > 7) + 1;
  if (v717 >= 4)
  {
    v716 -= v717 & 0xFFFFFFFFFFFFFFFCLL;
    v718 = &v714->i64[v717 & 0xFFFFFFFFFFFFFFFCLL];
    v719 = vdupq_lane_s64(v2, 0);
    v720 = v714 + 1;
    v721 = v717 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v720[-1] = v719;
      *v720 = v719;
      v720 += 2;
      v721 -= 4;
    }
    while (v721);
    if (v717 == (v717 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_720;
  }
  else
  {
    v718 = (uint64_t *)result[1658];
  }
  v722 = v716 + 1;
  do
  {
    *v718++ = v2;
    --v722;
  }
  while (v722 > 1);
LABEL_720:
  v2 = *a2;
LABEL_721:
  v723 = (int64x2_t *)result[20];
  v724 = result[21] - (_QWORD)v723;
  if ((uint64_t)v724 < 1)
    goto LABEL_730;
  v725 = v724 >> 3;
  v726 = (v724 >> 3) - (v724 > 7) + 1;
  if (v726 >= 4)
  {
    v725 -= v726 & 0xFFFFFFFFFFFFFFFCLL;
    v727 = &v723->i64[v726 & 0xFFFFFFFFFFFFFFFCLL];
    v728 = vdupq_lane_s64(v2, 0);
    v729 = v723 + 1;
    v730 = v726 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v729[-1] = v728;
      *v729 = v728;
      v729 += 2;
      v730 -= 4;
    }
    while (v730);
    if (v726 == (v726 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_729;
  }
  else
  {
    v727 = (uint64_t *)result[20];
  }
  v731 = v725 + 1;
  do
  {
    *v727++ = v2;
    --v731;
  }
  while (v731 > 1);
LABEL_729:
  v2 = *a2;
LABEL_730:
  v732 = (int64x2_t *)result[200];
  v733 = result[201] - (_QWORD)v732;
  if ((uint64_t)v733 < 1)
    goto LABEL_739;
  v734 = v733 >> 3;
  v735 = (v733 >> 3) - (v733 > 7) + 1;
  if (v735 >= 4)
  {
    v734 -= v735 & 0xFFFFFFFFFFFFFFFCLL;
    v736 = &v732->i64[v735 & 0xFFFFFFFFFFFFFFFCLL];
    v737 = vdupq_lane_s64(v2, 0);
    v738 = v732 + 1;
    v739 = v735 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v738[-1] = v737;
      *v738 = v737;
      v738 += 2;
      v739 -= 4;
    }
    while (v739);
    if (v735 == (v735 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_738;
  }
  else
  {
    v736 = (uint64_t *)result[200];
  }
  v740 = v734 + 1;
  do
  {
    *v736++ = v2;
    --v740;
  }
  while (v740 > 1);
LABEL_738:
  v2 = *a2;
LABEL_739:
  v741 = (int64x2_t *)result[380];
  v742 = result[381] - (_QWORD)v741;
  if ((uint64_t)v742 < 1)
    goto LABEL_748;
  v743 = v742 >> 3;
  v744 = (v742 >> 3) - (v742 > 7) + 1;
  if (v744 >= 4)
  {
    v743 -= v744 & 0xFFFFFFFFFFFFFFFCLL;
    v745 = &v741->i64[v744 & 0xFFFFFFFFFFFFFFFCLL];
    v746 = vdupq_lane_s64(v2, 0);
    v747 = v741 + 1;
    v748 = v744 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v747[-1] = v746;
      *v747 = v746;
      v747 += 2;
      v748 -= 4;
    }
    while (v748);
    if (v744 == (v744 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_747;
  }
  else
  {
    v745 = (uint64_t *)result[380];
  }
  v749 = v743 + 1;
  do
  {
    *v745++ = v2;
    --v749;
  }
  while (v749 > 1);
LABEL_747:
  v2 = *a2;
LABEL_748:
  v750 = (int64x2_t *)result[560];
  v751 = result[561] - (_QWORD)v750;
  if ((uint64_t)v751 < 1)
    goto LABEL_757;
  v752 = v751 >> 3;
  v753 = (v751 >> 3) - (v751 > 7) + 1;
  if (v753 >= 4)
  {
    v752 -= v753 & 0xFFFFFFFFFFFFFFFCLL;
    v754 = &v750->i64[v753 & 0xFFFFFFFFFFFFFFFCLL];
    v755 = vdupq_lane_s64(v2, 0);
    v756 = v750 + 1;
    v757 = v753 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v756[-1] = v755;
      *v756 = v755;
      v756 += 2;
      v757 -= 4;
    }
    while (v757);
    if (v753 == (v753 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_756;
  }
  else
  {
    v754 = (uint64_t *)result[560];
  }
  v758 = v752 + 1;
  do
  {
    *v754++ = v2;
    --v758;
  }
  while (v758 > 1);
LABEL_756:
  v2 = *a2;
LABEL_757:
  v759 = (int64x2_t *)result[740];
  v760 = result[741] - (_QWORD)v759;
  if ((uint64_t)v760 < 1)
    goto LABEL_766;
  v761 = v760 >> 3;
  v762 = (v760 >> 3) - (v760 > 7) + 1;
  if (v762 >= 4)
  {
    v761 -= v762 & 0xFFFFFFFFFFFFFFFCLL;
    v763 = &v759->i64[v762 & 0xFFFFFFFFFFFFFFFCLL];
    v764 = vdupq_lane_s64(v2, 0);
    v765 = v759 + 1;
    v766 = v762 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v765[-1] = v764;
      *v765 = v764;
      v765 += 2;
      v766 -= 4;
    }
    while (v766);
    if (v762 == (v762 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_765;
  }
  else
  {
    v763 = (uint64_t *)result[740];
  }
  v767 = v761 + 1;
  do
  {
    *v763++ = v2;
    --v767;
  }
  while (v767 > 1);
LABEL_765:
  v2 = *a2;
LABEL_766:
  v768 = (int64x2_t *)result[920];
  v769 = result[921] - (_QWORD)v768;
  if ((uint64_t)v769 < 1)
    goto LABEL_775;
  v770 = v769 >> 3;
  v771 = (v769 >> 3) - (v769 > 7) + 1;
  if (v771 >= 4)
  {
    v770 -= v771 & 0xFFFFFFFFFFFFFFFCLL;
    v772 = &v768->i64[v771 & 0xFFFFFFFFFFFFFFFCLL];
    v773 = vdupq_lane_s64(v2, 0);
    v774 = v768 + 1;
    v775 = v771 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v774[-1] = v773;
      *v774 = v773;
      v774 += 2;
      v775 -= 4;
    }
    while (v775);
    if (v771 == (v771 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_774;
  }
  else
  {
    v772 = (uint64_t *)result[920];
  }
  v776 = v770 + 1;
  do
  {
    *v772++ = v2;
    --v776;
  }
  while (v776 > 1);
LABEL_774:
  v2 = *a2;
LABEL_775:
  v777 = (int64x2_t *)result[1100];
  v778 = result[1101] - (_QWORD)v777;
  if ((uint64_t)v778 < 1)
    goto LABEL_784;
  v779 = v778 >> 3;
  v780 = (v778 >> 3) - (v778 > 7) + 1;
  if (v780 >= 4)
  {
    v779 -= v780 & 0xFFFFFFFFFFFFFFFCLL;
    v781 = &v777->i64[v780 & 0xFFFFFFFFFFFFFFFCLL];
    v782 = vdupq_lane_s64(v2, 0);
    v783 = v777 + 1;
    v784 = v780 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v783[-1] = v782;
      *v783 = v782;
      v783 += 2;
      v784 -= 4;
    }
    while (v784);
    if (v780 == (v780 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_783;
  }
  else
  {
    v781 = (uint64_t *)result[1100];
  }
  v785 = v779 + 1;
  do
  {
    *v781++ = v2;
    --v785;
  }
  while (v785 > 1);
LABEL_783:
  v2 = *a2;
LABEL_784:
  v786 = (int64x2_t *)result[1280];
  v787 = result[1281] - (_QWORD)v786;
  if ((uint64_t)v787 < 1)
    goto LABEL_793;
  v788 = v787 >> 3;
  v789 = (v787 >> 3) - (v787 > 7) + 1;
  if (v789 >= 4)
  {
    v788 -= v789 & 0xFFFFFFFFFFFFFFFCLL;
    v790 = &v786->i64[v789 & 0xFFFFFFFFFFFFFFFCLL];
    v791 = vdupq_lane_s64(v2, 0);
    v792 = v786 + 1;
    v793 = v789 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v792[-1] = v791;
      *v792 = v791;
      v792 += 2;
      v793 -= 4;
    }
    while (v793);
    if (v789 == (v789 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_792;
  }
  else
  {
    v790 = (uint64_t *)result[1280];
  }
  v794 = v788 + 1;
  do
  {
    *v790++ = v2;
    --v794;
  }
  while (v794 > 1);
LABEL_792:
  v2 = *a2;
LABEL_793:
  v795 = (int64x2_t *)result[1460];
  v796 = result[1461] - (_QWORD)v795;
  if ((uint64_t)v796 < 1)
    goto LABEL_802;
  v797 = v796 >> 3;
  v798 = (v796 >> 3) - (v796 > 7) + 1;
  if (v798 >= 4)
  {
    v797 -= v798 & 0xFFFFFFFFFFFFFFFCLL;
    v799 = &v795->i64[v798 & 0xFFFFFFFFFFFFFFFCLL];
    v800 = vdupq_lane_s64(v2, 0);
    v801 = v795 + 1;
    v802 = v798 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v801[-1] = v800;
      *v801 = v800;
      v801 += 2;
      v802 -= 4;
    }
    while (v802);
    if (v798 == (v798 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_801;
  }
  else
  {
    v799 = (uint64_t *)result[1460];
  }
  v803 = v797 + 1;
  do
  {
    *v799++ = v2;
    --v803;
  }
  while (v803 > 1);
LABEL_801:
  v2 = *a2;
LABEL_802:
  v804 = (int64x2_t *)result[1640];
  v805 = result[1641] - (_QWORD)v804;
  if ((uint64_t)v805 < 1)
    goto LABEL_811;
  v806 = v805 >> 3;
  v807 = (v805 >> 3) - (v805 > 7) + 1;
  if (v807 >= 4)
  {
    v806 -= v807 & 0xFFFFFFFFFFFFFFFCLL;
    v808 = &v804->i64[v807 & 0xFFFFFFFFFFFFFFFCLL];
    v809 = vdupq_lane_s64(v2, 0);
    v810 = v804 + 1;
    v811 = v807 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v810[-1] = v809;
      *v810 = v809;
      v810 += 2;
      v811 -= 4;
    }
    while (v811);
    if (v807 == (v807 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_810;
  }
  else
  {
    v808 = (uint64_t *)result[1640];
  }
  v812 = v806 + 1;
  do
  {
    *v808++ = v2;
    --v812;
  }
  while (v812 > 1);
LABEL_810:
  v2 = *a2;
LABEL_811:
  v813 = (int64x2_t *)result[2];
  v814 = result[3] - (_QWORD)v813;
  if ((uint64_t)v814 < 1)
    goto LABEL_820;
  v815 = v814 >> 3;
  v816 = (v814 >> 3) - (v814 > 7) + 1;
  if (v816 >= 4)
  {
    v815 -= v816 & 0xFFFFFFFFFFFFFFFCLL;
    v817 = &v813->i64[v816 & 0xFFFFFFFFFFFFFFFCLL];
    v818 = vdupq_lane_s64(v2, 0);
    v819 = v813 + 1;
    v820 = v816 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v819[-1] = v818;
      *v819 = v818;
      v819 += 2;
      v820 -= 4;
    }
    while (v820);
    if (v816 == (v816 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_819;
  }
  else
  {
    v817 = (uint64_t *)result[2];
  }
  v821 = v815 + 1;
  do
  {
    *v817++ = v2;
    --v821;
  }
  while (v821 > 1);
LABEL_819:
  v2 = *a2;
LABEL_820:
  v822 = (int64x2_t *)result[182];
  v823 = result[183] - (_QWORD)v822;
  if ((uint64_t)v823 < 1)
    goto LABEL_829;
  v824 = v823 >> 3;
  v825 = (v823 >> 3) - (v823 > 7) + 1;
  if (v825 >= 4)
  {
    v824 -= v825 & 0xFFFFFFFFFFFFFFFCLL;
    v826 = &v822->i64[v825 & 0xFFFFFFFFFFFFFFFCLL];
    v827 = vdupq_lane_s64(v2, 0);
    v828 = v822 + 1;
    v829 = v825 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v828[-1] = v827;
      *v828 = v827;
      v828 += 2;
      v829 -= 4;
    }
    while (v829);
    if (v825 == (v825 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_828;
  }
  else
  {
    v826 = (uint64_t *)result[182];
  }
  v830 = v824 + 1;
  do
  {
    *v826++ = v2;
    --v830;
  }
  while (v830 > 1);
LABEL_828:
  v2 = *a2;
LABEL_829:
  v831 = (int64x2_t *)result[362];
  v832 = result[363] - (_QWORD)v831;
  if ((uint64_t)v832 < 1)
    goto LABEL_838;
  v833 = v832 >> 3;
  v834 = (v832 >> 3) - (v832 > 7) + 1;
  if (v834 >= 4)
  {
    v833 -= v834 & 0xFFFFFFFFFFFFFFFCLL;
    v835 = &v831->i64[v834 & 0xFFFFFFFFFFFFFFFCLL];
    v836 = vdupq_lane_s64(v2, 0);
    v837 = v831 + 1;
    v838 = v834 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v837[-1] = v836;
      *v837 = v836;
      v837 += 2;
      v838 -= 4;
    }
    while (v838);
    if (v834 == (v834 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_837;
  }
  else
  {
    v835 = (uint64_t *)result[362];
  }
  v839 = v833 + 1;
  do
  {
    *v835++ = v2;
    --v839;
  }
  while (v839 > 1);
LABEL_837:
  v2 = *a2;
LABEL_838:
  v840 = (int64x2_t *)result[542];
  v841 = result[543] - (_QWORD)v840;
  if ((uint64_t)v841 < 1)
    goto LABEL_847;
  v842 = v841 >> 3;
  v843 = (v841 >> 3) - (v841 > 7) + 1;
  if (v843 >= 4)
  {
    v842 -= v843 & 0xFFFFFFFFFFFFFFFCLL;
    v844 = &v840->i64[v843 & 0xFFFFFFFFFFFFFFFCLL];
    v845 = vdupq_lane_s64(v2, 0);
    v846 = v840 + 1;
    v847 = v843 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v846[-1] = v845;
      *v846 = v845;
      v846 += 2;
      v847 -= 4;
    }
    while (v847);
    if (v843 == (v843 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_846;
  }
  else
  {
    v844 = (uint64_t *)result[542];
  }
  v848 = v842 + 1;
  do
  {
    *v844++ = v2;
    --v848;
  }
  while (v848 > 1);
LABEL_846:
  v2 = *a2;
LABEL_847:
  v849 = (int64x2_t *)result[722];
  v850 = result[723] - (_QWORD)v849;
  if ((uint64_t)v850 < 1)
    goto LABEL_856;
  v851 = v850 >> 3;
  v852 = (v850 >> 3) - (v850 > 7) + 1;
  if (v852 >= 4)
  {
    v851 -= v852 & 0xFFFFFFFFFFFFFFFCLL;
    v853 = &v849->i64[v852 & 0xFFFFFFFFFFFFFFFCLL];
    v854 = vdupq_lane_s64(v2, 0);
    v855 = v849 + 1;
    v856 = v852 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v855[-1] = v854;
      *v855 = v854;
      v855 += 2;
      v856 -= 4;
    }
    while (v856);
    if (v852 == (v852 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_855;
  }
  else
  {
    v853 = (uint64_t *)result[722];
  }
  v857 = v851 + 1;
  do
  {
    *v853++ = v2;
    --v857;
  }
  while (v857 > 1);
LABEL_855:
  v2 = *a2;
LABEL_856:
  v858 = (int64x2_t *)result[902];
  v859 = result[903] - (_QWORD)v858;
  if ((uint64_t)v859 < 1)
    goto LABEL_865;
  v860 = v859 >> 3;
  v861 = (v859 >> 3) - (v859 > 7) + 1;
  if (v861 >= 4)
  {
    v860 -= v861 & 0xFFFFFFFFFFFFFFFCLL;
    v862 = &v858->i64[v861 & 0xFFFFFFFFFFFFFFFCLL];
    v863 = vdupq_lane_s64(v2, 0);
    v864 = v858 + 1;
    v865 = v861 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v864[-1] = v863;
      *v864 = v863;
      v864 += 2;
      v865 -= 4;
    }
    while (v865);
    if (v861 == (v861 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_864;
  }
  else
  {
    v862 = (uint64_t *)result[902];
  }
  v866 = v860 + 1;
  do
  {
    *v862++ = v2;
    --v866;
  }
  while (v866 > 1);
LABEL_864:
  v2 = *a2;
LABEL_865:
  v867 = (int64x2_t *)result[1082];
  v868 = result[1083] - (_QWORD)v867;
  if ((uint64_t)v868 < 1)
    goto LABEL_874;
  v869 = v868 >> 3;
  v870 = (v868 >> 3) - (v868 > 7) + 1;
  if (v870 >= 4)
  {
    v869 -= v870 & 0xFFFFFFFFFFFFFFFCLL;
    v871 = &v867->i64[v870 & 0xFFFFFFFFFFFFFFFCLL];
    v872 = vdupq_lane_s64(v2, 0);
    v873 = v867 + 1;
    v874 = v870 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v873[-1] = v872;
      *v873 = v872;
      v873 += 2;
      v874 -= 4;
    }
    while (v874);
    if (v870 == (v870 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_873;
  }
  else
  {
    v871 = (uint64_t *)result[1082];
  }
  v875 = v869 + 1;
  do
  {
    *v871++ = v2;
    --v875;
  }
  while (v875 > 1);
LABEL_873:
  v2 = *a2;
LABEL_874:
  v876 = (int64x2_t *)result[1262];
  v877 = result[1263] - (_QWORD)v876;
  if ((uint64_t)v877 < 1)
    goto LABEL_883;
  v878 = v877 >> 3;
  v879 = (v877 >> 3) - (v877 > 7) + 1;
  if (v879 >= 4)
  {
    v878 -= v879 & 0xFFFFFFFFFFFFFFFCLL;
    v880 = &v876->i64[v879 & 0xFFFFFFFFFFFFFFFCLL];
    v881 = vdupq_lane_s64(v2, 0);
    v882 = v876 + 1;
    v883 = v879 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v882[-1] = v881;
      *v882 = v881;
      v882 += 2;
      v883 -= 4;
    }
    while (v883);
    if (v879 == (v879 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_882;
  }
  else
  {
    v880 = (uint64_t *)result[1262];
  }
  v884 = v878 + 1;
  do
  {
    *v880++ = v2;
    --v884;
  }
  while (v884 > 1);
LABEL_882:
  v2 = *a2;
LABEL_883:
  v885 = (int64x2_t *)result[1442];
  v886 = result[1443] - (_QWORD)v885;
  if ((uint64_t)v886 < 1)
    goto LABEL_892;
  v887 = v886 >> 3;
  v888 = (v886 >> 3) - (v886 > 7) + 1;
  if (v888 >= 4)
  {
    v887 -= v888 & 0xFFFFFFFFFFFFFFFCLL;
    v889 = &v885->i64[v888 & 0xFFFFFFFFFFFFFFFCLL];
    v890 = vdupq_lane_s64(v2, 0);
    v891 = v885 + 1;
    v892 = v888 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v891[-1] = v890;
      *v891 = v890;
      v891 += 2;
      v892 -= 4;
    }
    while (v892);
    if (v888 == (v888 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_891;
  }
  else
  {
    v889 = (uint64_t *)result[1442];
  }
  v893 = v887 + 1;
  do
  {
    *v889++ = v2;
    --v893;
  }
  while (v893 > 1);
LABEL_891:
  v2 = *a2;
LABEL_892:
  v894 = (int64x2_t *)result[1622];
  v895 = result[1623] - (_QWORD)v894;
  if ((uint64_t)v895 < 1)
    return result;
  v896 = v895 >> 3;
  v897 = (v895 >> 3) - (v895 > 7) + 1;
  if (v897 < 4)
  {
    v898 = (uint64_t *)result[1622];
LABEL_898:
    v902 = v896 + 1;
    do
    {
      *v898++ = v2;
      --v902;
    }
    while (v902 > 1);
    return result;
  }
  v896 -= v897 & 0xFFFFFFFFFFFFFFFCLL;
  v898 = &v894->i64[v897 & 0xFFFFFFFFFFFFFFFCLL];
  v899 = vdupq_lane_s64(v2, 0);
  v900 = v894 + 1;
  v901 = v897 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v900[-1] = v899;
    *v900 = v899;
    v900 += 2;
    v901 -= 4;
  }
  while (v901);
  if (v897 != (v897 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_898;
  return result;
}

uint64_t sub_20F926890(_QWORD *a1, void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[2];

  v77[0] = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  sub_20F8E03B8(a1, (int *)v77 + 1, v77, &v72, &v67);
  v5 = v77[0];
  v4 = HIDWORD(v77[0]);
  *((_DWORD *)a2 + 4) = HIDWORD(v77[0]);
  *((_DWORD *)a2 + 5) = v5;
  v6 = v5 * (unint64_t)v4;
  if ((unint64_t)a2[1] < v6)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v7 = (8 * v6 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v7 >> 3);
    *a2 = operator new(v7, (std::align_val_t)0x20uLL);
    v4 = *((_DWORD *)a2 + 4);
    v5 = *((_DWORD *)a2 + 5);
  }
  v8 = v5 * v4;
  if (v8)
    bzero(*a2, 8 * v8);
  v9 = DWORD2(v76);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[162] + 64))(a1 + 162, a2, DWORD2(v76) | ((unint64_t)v67 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[342] + 64))(a1 + 342, a2, v9 | ((unint64_t)DWORD2(v67) << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[522] + 64))(a1 + 522, a2, v9 | ((unint64_t)v68 << 32));
  v63 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[702] + 64))(a1 + 702, a2, v9 | ((unint64_t)DWORD2(v68) << 32));
  v59 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[882] + 64))(a1 + 882, a2, v9 | ((unint64_t)v69 << 32));
  v55 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1062] + 64))(a1 + 1062, a2, v9 | ((unint64_t)DWORD2(v69) << 32));
  v10 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1242] + 64))(a1 + 1242, a2, v9 | ((unint64_t)v70 << 32));
  v11 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1422] + 64))(a1 + 1422, a2, v9 | ((unint64_t)DWORD2(v70) << 32));
  v12 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1602] + 64))(a1 + 1602, a2, v9 | ((unint64_t)v71 << 32));
  v13 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1782] + 64))(a1 + 1782, a2, v9 | ((unint64_t)DWORD2(v71) << 32));
  v14 = v76;
  v15 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[144] + 64))(a1 + 144, a2, v76 | ((unint64_t)v67 << 32));
  v16 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[324] + 64))(a1 + 324, a2, v14 | ((unint64_t)DWORD2(v67) << 32));
  v17 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[504] + 64))(a1 + 504, a2, v14 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[684] + 64))(a1 + 684, a2, v14 | ((unint64_t)v63 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[864] + 64))(a1 + 864, a2, v14 | ((unint64_t)v59 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1044] + 64))(a1 + 1044, a2, v14 | ((unint64_t)v55 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1224] + 64))(a1 + 1224, a2, v14 | ((unint64_t)v10 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1404] + 64))(a1 + 1404, a2, v14 | ((unint64_t)v11 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1584] + 64))(a1 + 1584, a2, v14 | ((unint64_t)v12 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1764] + 64))(a1 + 1764, a2, v14 | ((unint64_t)v13 << 32));
  v18 = DWORD2(v75);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[126] + 64))(a1 + 126, a2, DWORD2(v75) | ((unint64_t)v15 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[306] + 64))(a1 + 306, a2, v18 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[486] + 64))(a1 + 486, a2, v18 | ((unint64_t)v17 << 32));
  v64 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[666] + 64))(a1 + 666, a2, v18 | ((unint64_t)DWORD2(v68) << 32));
  v60 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[846] + 64))(a1 + 846, a2, v18 | ((unint64_t)v69 << 32));
  v56 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1026] + 64))(a1 + 1026, a2, v18 | ((unint64_t)DWORD2(v69) << 32));
  v19 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1206] + 64))(a1 + 1206, a2, v18 | ((unint64_t)v70 << 32));
  v20 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1386] + 64))(a1 + 1386, a2, v18 | ((unint64_t)DWORD2(v70) << 32));
  v21 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1566] + 64))(a1 + 1566, a2, v18 | ((unint64_t)v71 << 32));
  v22 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1746] + 64))(a1 + 1746, a2, v18 | ((unint64_t)DWORD2(v71) << 32));
  v23 = v75;
  v24 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[108] + 64))(a1 + 108, a2, v75 | ((unint64_t)v67 << 32));
  v25 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[288] + 64))(a1 + 288, a2, v23 | ((unint64_t)DWORD2(v67) << 32));
  v26 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[468] + 64))(a1 + 468, a2, v23 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[648] + 64))(a1 + 648, a2, v23 | ((unint64_t)v64 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[828] + 64))(a1 + 828, a2, v23 | ((unint64_t)v60 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1008] + 64))(a1 + 1008, a2, v23 | ((unint64_t)v56 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1188] + 64))(a1 + 1188, a2, v23 | ((unint64_t)v19 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1368] + 64))(a1 + 1368, a2, v23 | ((unint64_t)v20 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1548] + 64))(a1 + 1548, a2, v23 | ((unint64_t)v21 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1728] + 64))(a1 + 1728, a2, v23 | ((unint64_t)v22 << 32));
  v27 = DWORD2(v74);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[90] + 64))(a1 + 90, a2, DWORD2(v74) | ((unint64_t)v24 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[270] + 64))(a1 + 270, a2, v27 | ((unint64_t)v25 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[450] + 64))(a1 + 450, a2, v27 | ((unint64_t)v26 << 32));
  v65 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[630] + 64))(a1 + 630, a2, v27 | ((unint64_t)DWORD2(v68) << 32));
  v61 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[810] + 64))(a1 + 810, a2, v27 | ((unint64_t)v69 << 32));
  v57 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[990] + 64))(a1 + 990, a2, v27 | ((unint64_t)DWORD2(v69) << 32));
  v28 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1170] + 64))(a1 + 1170, a2, v27 | ((unint64_t)v70 << 32));
  v29 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1350] + 64))(a1 + 1350, a2, v27 | ((unint64_t)DWORD2(v70) << 32));
  v30 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1530] + 64))(a1 + 1530, a2, v27 | ((unint64_t)v71 << 32));
  v31 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1710] + 64))(a1 + 1710, a2, v27 | ((unint64_t)DWORD2(v71) << 32));
  v32 = v74;
  v33 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[72] + 64))(a1 + 72, a2, v74 | ((unint64_t)v67 << 32));
  v34 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[252] + 64))(a1 + 252, a2, v32 | ((unint64_t)DWORD2(v67) << 32));
  v35 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[432] + 64))(a1 + 432, a2, v32 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[612] + 64))(a1 + 612, a2, v32 | ((unint64_t)v65 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[792] + 64))(a1 + 792, a2, v32 | ((unint64_t)v61 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[972] + 64))(a1 + 972, a2, v32 | ((unint64_t)v57 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1152] + 64))(a1 + 1152, a2, v32 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1332] + 64))(a1 + 1332, a2, v32 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1512] + 64))(a1 + 1512, a2, v32 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1692] + 64))(a1 + 1692, a2, v32 | ((unint64_t)v31 << 32));
  v36 = DWORD2(v73);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[54] + 64))(a1 + 54, a2, DWORD2(v73) | ((unint64_t)v33 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[234] + 64))(a1 + 234, a2, v36 | ((unint64_t)v34 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[414] + 64))(a1 + 414, a2, v36 | ((unint64_t)v35 << 32));
  v66 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[594] + 64))(a1 + 594, a2, v36 | ((unint64_t)DWORD2(v68) << 32));
  v62 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[774] + 64))(a1 + 774, a2, v36 | ((unint64_t)v69 << 32));
  v58 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[954] + 64))(a1 + 954, a2, v36 | ((unint64_t)DWORD2(v69) << 32));
  v37 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1134] + 64))(a1 + 1134, a2, v36 | ((unint64_t)v70 << 32));
  v38 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1314] + 64))(a1 + 1314, a2, v36 | ((unint64_t)DWORD2(v70) << 32));
  v39 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1494] + 64))(a1 + 1494, a2, v36 | ((unint64_t)v71 << 32));
  v40 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1674] + 64))(a1 + 1674, a2, v36 | ((unint64_t)DWORD2(v71) << 32));
  v41 = v73;
  v42 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[36] + 64))(a1 + 36, a2, v73 | ((unint64_t)v67 << 32));
  v43 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[216] + 64))(a1 + 216, a2, v41 | ((unint64_t)DWORD2(v67) << 32));
  v44 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[396] + 64))(a1 + 396, a2, v41 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[576] + 64))(a1 + 576, a2, v41 | ((unint64_t)v66 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[756] + 64))(a1 + 756, a2, v41 | ((unint64_t)v62 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[936] + 64))(a1 + 936, a2, v41 | ((unint64_t)v58 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1116] + 64))(a1 + 1116, a2, v41 | ((unint64_t)v37 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1296] + 64))(a1 + 1296, a2, v41 | ((unint64_t)v38 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1476] + 64))(a1 + 1476, a2, v41 | ((unint64_t)v39 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1656] + 64))(a1 + 1656, a2, v41 | ((unint64_t)v40 << 32));
  v45 = DWORD2(v72);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[18] + 64))(a1 + 18, a2, DWORD2(v72) | ((unint64_t)v42 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[198] + 64))(a1 + 198, a2, v45 | ((unint64_t)v43 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[378] + 64))(a1 + 378, a2, v45 | ((unint64_t)v44 << 32));
  v46 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[558] + 64))(a1 + 558, a2, v45 | ((unint64_t)DWORD2(v68) << 32));
  v47 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[738] + 64))(a1 + 738, a2, v45 | ((unint64_t)v69 << 32));
  v48 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[918] + 64))(a1 + 918, a2, v45 | ((unint64_t)DWORD2(v69) << 32));
  v49 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1098] + 64))(a1 + 1098, a2, v45 | ((unint64_t)v70 << 32));
  v50 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1278] + 64))(a1 + 1278, a2, v45 | ((unint64_t)DWORD2(v70) << 32));
  v51 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1458] + 64))(a1 + 1458, a2, v45 | ((unint64_t)v71 << 32));
  v52 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1638] + 64))(a1 + 1638, a2, v45 | ((unint64_t)DWORD2(v71) << 32));
  v53 = v72;
  (*(void (**)(_QWORD *, void **, unint64_t))(*a1 + 64))(a1, a2, v72 | ((unint64_t)v67 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[180] + 64))(a1 + 180, a2, v53 | ((unint64_t)DWORD2(v67) << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[360] + 64))(a1 + 360, a2, v53 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[540] + 64))(a1 + 540, a2, v53 | ((unint64_t)v46 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[720] + 64))(a1 + 720, a2, v53 | ((unint64_t)v47 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[900] + 64))(a1 + 900, a2, v53 | ((unint64_t)v48 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1080] + 64))(a1 + 1080, a2, v53 | ((unint64_t)v49 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1260] + 64))(a1 + 1260, a2, v53 | ((unint64_t)v50 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1440] + 64))(a1 + 1440, a2, v53 | ((unint64_t)v51 << 32));
  return (*(uint64_t (**)(_QWORD *, void **, unint64_t))(a1[1620] + 64))(a1 + 1620, a2, v53 | ((unint64_t)v52 << 32));
}

void sub_20F927604(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t a5, double a6, double a7, __n128 a8)
{
  float64x2_t v8;
  _QWORD *v9;
  unint64_t v13;
  unsigned int v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  double cosval;
  __double2 v24;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v41;
  double v42;
  double v44;
  double v46;
  float64x2_t v48;
  double v54;
  float64x2_t v55;
  float64x2_t v57;
  int64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  int v63;
  double *v64;
  uint64_t v65;
  double v66;
  double v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  double v83;
  double v84;
  __double2 v85;
  double v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v102;
  double v103;
  double v105;
  double v107;
  float64x2_t v109;
  double v111;
  float64x2_t v112;
  float64x2_t v114;
  int64x2_t v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t v119;
  int v120;
  double *v121;
  uint64_t v122;
  double v123;
  double v126;
  _DWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  double v130;
  double v131;
  __double2 v132;
  double v134;
  double v135;
  double v136;
  double v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  float64x2_t v149;
  double v150;
  double v152;
  double v154;
  float64x2_t v156;
  double v158;
  float64x2_t v159;
  float64x2_t v161;
  int64x2_t v162;
  float64x2_t *v163;
  float64x2_t v164;
  float64x2_t v165;
  uint64_t v166;
  int v167;
  double *v168;
  uint64_t v169;
  double v170;
  double v173;
  _DWORD *v174;
  _DWORD *v175;
  uint64_t v176;
  int v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t *v181;
  _DWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  _DWORD *v187;
  uint64_t v188;
  int v189;
  float64x2_t *v190;
  uint64_t v191;
  float64x2_t v192;
  float64x2_t *v193;
  _DWORD *v194;
  _DWORD *v195;
  uint64_t v196;
  int v197;
  float64x2_t *v198;
  uint64_t v199;
  float64x2_t v200;
  float64x2_t *v201;
  char *v202;
  _DWORD *v203;
  _DWORD *v204;
  uint64_t v205;
  double v206;
  double v207;
  double v208;
  __double2 v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  float64x2_t v232;
  double v233;
  float64x2_t v234;
  double v235;
  float64x2_t v236;
  __n128 *v237;
  int v238;
  __int128 *v239;
  uint64_t v240;
  double v244;
  _DWORD *v245;
  _DWORD *v246;
  uint64_t v247;
  int v248;
  float64x2_t *v249;
  uint64_t v250;
  float64x2_t v251;
  float64x2_t *v252;
  _QWORD *v253;
  _QWORD *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  float64x2_t v258;
  uint64_t v259;
  float64x2_t v260;
  double v261;
  float64x2_t v262;
  double v263;
  float64x2_t v264;
  double v265;

  v9 = (_QWORD *)a4;
  v13 = *(unsigned int *)(a4 + 16);
  v14 = v13;
  if ((_DWORD)v13 == *(_DWORD *)(a2 + 16))
  {
    v15 = *(void **)a2;
  }
  else
  {
    *(_DWORD *)(a2 + 16) = v13;
    v15 = *(void **)a2;
    if (*(_QWORD *)(a2 + 8) < v13)
    {
      if (v15)
      {
        MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
        v14 = *(_DWORD *)(a2 + 16);
      }
      v16 = (8 * v13 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v16 >> 3;
      v15 = operator new(v16, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v15;
    }
  }
  if (v14)
    bzero(v15, 8 * v14);
  v17 = *v9;
  v18 = *(_DWORD **)a3;
  v19 = *(_DWORD **)(a3 + 8);
  v254 = a1;
  v253 = v9;
  v20 = 0;
  if (*(_DWORD **)a3 != v19)
  {
    v21 = a1[1];
    do
    {
      v21 -= 16;
      do
      {
        v63 = *(_DWORD *)(v21 + 16);
        v21 += 16;
      }
      while (*v18 != v63);
      v64 = (double *)(v17 + 8 * v20);
      v65 = *(_QWORD *)(v21 + 8);
      v66 = v64[2];
      _Q7 = *(_OWORD *)v64;
      _D13 = v64[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v69 = _D0 + v66 * v66;
      if (v69 >= 0.0000002635)
      {
        v22 = sqrt(v69);
        v255 = *(_OWORD *)v64;
        v24 = __sincos_stret(v22);
        cosval = v24.__cosval;
        *(_QWORD *)&_Q7 = v255;
        v26 = v24.__sinval / v22;
        v27 = 1.0 / v69 * (1.0 - v24.__cosval);
      }
      else
      {
        v27 = 0.5 - v69 * (v69 / -720.0 + 0.0416666667);
        v26 = 1.0 - v69 * (0.166666667 - v69 * (v69 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v69 * v27;
      }
      v28 = *(double *)&_Q7 * v27;
      v29 = _D13 * v27;
      v30.f64[0] = cosval + *(double *)&_Q7 * (*(double *)&_Q7 * v27);
      v31 = cosval + _D13 * (_D13 * v27);
      v32 = cosval + v66 * (v66 * v27);
      v33 = _D13 * (*(double *)&_Q7 * v27);
      v34 = v66 * v29;
      v35 = *(double *)&_Q7 * v26;
      v36 = _D13 * v26;
      v37 = v66 * v26;
      v38 = v33 - v37;
      _Q0.f64[0] = v33 + v37;
      _D2 = v34 - v35;
      v41.f64[0] = v66 * v28 - v36;
      v30.f64[1] = v38;
      _Q0.f64[1] = v31;
      v41.f64[1] = v35 + v34;
      v42 = *(double *)(v65 + 48);
      _Q6 = *(float64x2_t *)(v65 + 32);
      v44 = *(double *)(v65 + 72);
      _Q16 = *(float64x2_t *)(v65 + 56);
      v46 = *(double *)(v65 + 96);
      _Q19 = *(float64x2_t *)(v65 + 80);
      v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q6.f64[0]), _Q0, _Q6, 1), v41, v42);
      __asm { FMLA            D21, D2, V6.D[1] }
      v54 = _D21 + v32 * v42;
      v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q16.f64[0]), _Q0, _Q16, 1), v41, v44);
      __asm { FMLA            D21, D2, V16.D[1] }
      v57 = vmlaq_laneq_f64(vmulq_n_f64(v30, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v261 = v54;
      v260 = v48;
      v263 = _D21 + v32 * v44;
      v262 = v55;
      v265 = _Q0.f64[0] + v32 * v46;
      v264 = vmlaq_n_f64(v57, v41, v46);
      v259 = 0;
      v258 = 0uLL;
      sub_20E9733B8(&v260, v258.f64);
      v58.i64[0] = v259;
      v59 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v60.f64[0] = *(float64_t *)(v65 + 120);
      v61.f64[0] = v59[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v65 + 104), *v59);
      a5 = (float64x2_t)vzip1q_s64(v58, (int64x2_t)a8);
      v62 = *(_QWORD *)a2 + 8 * v20;
      *(float64x2_t *)v62 = v258;
      *(float64x2_t *)(v62 + 16) = a5;
      *(int8x16_t *)(v62 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v60, v61), 8uLL);
      v20 += 6;
      ++v18;
    }
    while (v18 != v19);
    v9 = v253;
    v17 = *v253;
  }
  v70 = *(_DWORD **)(a3 + 24);
  v71 = *(_DWORD **)(a3 + 32);
  if (v70 != v71)
  {
    v72 = a1[13];
    do
    {
      v72 -= 16;
      do
      {
        v73 = *(_DWORD *)(v72 + 16);
        v72 += 16;
      }
      while (*v70 != v73);
      v74 = *(float64x2_t **)(v72 + 8);
      v75 = 8 * v20;
      a5.f64[0] = v74[6].f64[0];
      v8.f64[0] = *(float64_t *)(v17 + v75 + 64);
      a5 = vsubq_f64(a5, v8);
      v76 = vsubq_f64(v74[2], *(float64x2_t *)(v17 + v75));
      v77 = vsubq_f64(v74[5], *(float64x2_t *)(v17 + v75 + 48));
      v78 = vsubq_f64(v74[4], *(float64x2_t *)(v17 + v75 + 32));
      a8 = (__n128)vsubq_f64(v74[3], *(float64x2_t *)(v17 + v75 + 16));
      v79 = *(_QWORD *)a2 + v75;
      *(float64x2_t *)(v79 + 32) = v78;
      *(float64x2_t *)(v79 + 48) = v77;
      *(float64x2_t *)v79 = v76;
      *(__n128 *)(v79 + 16) = a8;
      *(float64_t *)(v79 + 64) = a5.f64[0];
      v20 += 9;
      ++v70;
    }
    while (v70 != v71);
    v17 = *v9;
  }
  v80 = *(_DWORD **)(a3 + 48);
  v81 = *(_DWORD **)(a3 + 56);
  if (v80 != v81)
  {
    v82 = a1[25];
    do
    {
      v82 -= 16;
      do
      {
        v120 = *(_DWORD *)(v82 + 16);
        v82 += 16;
      }
      while (*v80 != v120);
      v121 = (double *)(v17 + 8 * v20);
      v122 = *(_QWORD *)(v82 + 8);
      v123 = v121[2];
      _Q7 = *(_OWORD *)v121;
      _D13 = v121[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v126 = _D0 + v123 * v123;
      if (v126 >= 0.0000002635)
      {
        v83 = sqrt(v126);
        v256 = *(_OWORD *)v121;
        v85 = __sincos_stret(v83);
        v84 = v85.__cosval;
        *(_QWORD *)&_Q7 = v256;
        v87 = v85.__sinval / v83;
        v88 = 1.0 / v126 * (1.0 - v85.__cosval);
      }
      else
      {
        v88 = 0.5 - v126 * (v126 / -720.0 + 0.0416666667);
        v87 = 1.0 - v126 * (0.166666667 - v126 * (v126 / -5040.0 + 0.00833333333));
        v84 = 1.0 - v126 * v88;
      }
      v89 = *(double *)&_Q7 * v88;
      v90 = _D13 * v88;
      v91.f64[0] = v84 + *(double *)&_Q7 * (*(double *)&_Q7 * v88);
      v92 = v84 + _D13 * (_D13 * v88);
      v93 = v84 + v123 * (v123 * v88);
      v94 = _D13 * (*(double *)&_Q7 * v88);
      v95 = v123 * v90;
      v96 = *(double *)&_Q7 * v87;
      v97 = _D13 * v87;
      v98 = v123 * v87;
      v99 = v94 - v98;
      _Q0.f64[0] = v94 + v98;
      _D2 = v95 - v96;
      v102.f64[0] = v123 * v89 - v97;
      v91.f64[1] = v99;
      _Q0.f64[1] = v92;
      v102.f64[1] = v96 + v95;
      v103 = *(double *)(v122 + 48);
      _Q6 = *(float64x2_t *)(v122 + 32);
      v105 = *(double *)(v122 + 72);
      _Q16 = *(float64x2_t *)(v122 + 56);
      v107 = *(double *)(v122 + 96);
      _Q19 = *(float64x2_t *)(v122 + 80);
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q6.f64[0]), _Q0, _Q6, 1), v102, v103);
      __asm { FMLA            D21, D2, V6.D[1] }
      v111 = _D21 + v93 * v103;
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q16.f64[0]), _Q0, _Q16, 1), v102, v105);
      __asm { FMLA            D21, D2, V16.D[1] }
      v114 = vmlaq_laneq_f64(vmulq_n_f64(v91, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v261 = v111;
      v260 = v109;
      v263 = _D21 + v93 * v105;
      v262 = v112;
      v265 = _Q0.f64[0] + v93 * v107;
      v264 = vmlaq_n_f64(v114, v102, v107);
      v259 = 0;
      v258 = 0uLL;
      sub_20E9733B8(&v260, v258.f64);
      v115.i64[0] = v259;
      v116 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v117.f64[0] = *(float64_t *)(v122 + 120);
      v118.f64[0] = v116[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v122 + 104), *v116);
      a5 = (float64x2_t)vzip1q_s64(v115, (int64x2_t)a8);
      v119 = *(_QWORD *)a2 + 8 * v20;
      *(float64x2_t *)v119 = v258;
      *(float64x2_t *)(v119 + 16) = a5;
      *(int8x16_t *)(v119 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v117, v118), 8uLL);
      v20 += 6;
      ++v80;
    }
    while (v80 != v81);
    v9 = v253;
    v17 = *v253;
  }
  v127 = *(_DWORD **)(a3 + 72);
  v128 = *(_DWORD **)(a3 + 80);
  if (v127 != v128)
  {
    v129 = a1[37];
    do
    {
      v129 -= 16;
      do
      {
        v167 = *(_DWORD *)(v129 + 16);
        v129 += 16;
      }
      while (*v127 != v167);
      v168 = (double *)(v17 + 8 * v20);
      v169 = *(_QWORD *)(v129 + 8);
      v170 = v168[2];
      _Q7 = *(_OWORD *)v168;
      _D13 = v168[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v173 = _D0 + v170 * v170;
      if (v173 >= 0.0000002635)
      {
        v130 = sqrt(v173);
        v257 = *(_OWORD *)v168;
        v132 = __sincos_stret(v130);
        v131 = v132.__cosval;
        *(_QWORD *)&_Q7 = v257;
        v134 = v132.__sinval / v130;
        v135 = 1.0 / v173 * (1.0 - v132.__cosval);
      }
      else
      {
        v135 = 0.5 - v173 * (v173 / -720.0 + 0.0416666667);
        v134 = 1.0 - v173 * (0.166666667 - v173 * (v173 / -5040.0 + 0.00833333333));
        v131 = 1.0 - v173 * v135;
      }
      v136 = *(double *)&_Q7 * v135;
      v137 = _D13 * v135;
      v138.f64[0] = v131 + *(double *)&_Q7 * (*(double *)&_Q7 * v135);
      v139 = v131 + _D13 * (_D13 * v135);
      v140 = v131 + v170 * (v170 * v135);
      v141 = _D13 * (*(double *)&_Q7 * v135);
      v142 = v170 * v137;
      v143 = *(double *)&_Q7 * v134;
      v144 = _D13 * v134;
      v145 = v170 * v134;
      v146 = v141 - v145;
      _Q0.f64[0] = v141 + v145;
      _D2 = v142 - v143;
      v149.f64[0] = v170 * v136 - v144;
      v138.f64[1] = v146;
      _Q0.f64[1] = v139;
      v149.f64[1] = v143 + v142;
      v150 = *(double *)(v169 + 48);
      _Q6 = *(float64x2_t *)(v169 + 32);
      v152 = *(double *)(v169 + 72);
      _Q16 = *(float64x2_t *)(v169 + 56);
      v154 = *(double *)(v169 + 96);
      _Q19 = *(float64x2_t *)(v169 + 80);
      v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q6.f64[0]), _Q0, _Q6, 1), v149, v150);
      __asm { FMLA            D21, D2, V6.D[1] }
      v158 = _D21 + v140 * v150;
      v159 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q16.f64[0]), _Q0, _Q16, 1), v149, v152);
      __asm { FMLA            D21, D2, V16.D[1] }
      v161 = vmlaq_laneq_f64(vmulq_n_f64(v138, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v261 = v158;
      v260 = v156;
      v263 = _D21 + v140 * v152;
      v262 = v159;
      v265 = _Q0.f64[0] + v140 * v154;
      v264 = vmlaq_n_f64(v161, v149, v154);
      v259 = 0;
      v258 = 0uLL;
      sub_20E9733B8(&v260, v258.f64);
      v162.i64[0] = v259;
      v163 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v164.f64[0] = *(float64_t *)(v169 + 120);
      v165.f64[0] = v163[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v169 + 104), *v163);
      a5 = (float64x2_t)vzip1q_s64(v162, (int64x2_t)a8);
      v166 = *(_QWORD *)a2 + 8 * v20;
      *(float64x2_t *)v166 = v258;
      *(float64x2_t *)(v166 + 16) = a5;
      *(int8x16_t *)(v166 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v164, v165), 8uLL);
      v20 += 6;
      ++v127;
    }
    while (v127 != v128);
    v9 = v253;
    v17 = *v253;
  }
  v174 = *(_DWORD **)(a3 + 96);
  v175 = *(_DWORD **)(a3 + 104);
  if (v174 == v175)
  {
    v182 = *(_DWORD **)(a3 + 120);
    v183 = *(_DWORD **)(a3 + 128);
    if (v182 != v183)
      goto LABEL_48;
LABEL_65:
    v186 = *(_DWORD **)(a3 + 144);
    v187 = *(_DWORD **)(a3 + 152);
    if (v186 != v187)
      goto LABEL_53;
LABEL_66:
    v194 = *(_DWORD **)(a3 + 168);
    v195 = *(_DWORD **)(a3 + 176);
    if (v194 != v195)
      goto LABEL_58;
LABEL_67:
    v202 = "eNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_";
    v203 = *(_DWORD **)(a3 + 192);
    v204 = *(_DWORD **)(a3 + 200);
    if (v203 == v204)
      goto LABEL_76;
    goto LABEL_68;
  }
  v176 = a1[49];
  do
  {
    v176 -= 16;
    do
    {
      v177 = *(_DWORD *)(v176 + 16);
      v176 += 16;
    }
    while (*v174 != v177);
    v178 = *(float64x2_t **)(v176 + 8);
    v179 = 8 * v20;
    a5.f64[0] = v178[3].f64[0];
    a8.n128_u64[0] = *(_QWORD *)(v17 + v179 + 16);
    a5 = vsubq_f64(a5, (float64x2_t)a8);
    v180 = vsubq_f64(v178[2], *(float64x2_t *)(v17 + v179));
    v181 = (float64x2_t *)(*(_QWORD *)a2 + v179);
    *v181 = v180;
    v181[1].f64[0] = a5.f64[0];
    v20 += 3;
    ++v174;
  }
  while (v174 != v175);
  v17 = *v9;
  v182 = *(_DWORD **)(a3 + 120);
  v183 = *(_DWORD **)(a3 + 128);
  if (v182 == v183)
    goto LABEL_65;
LABEL_48:
  v184 = a1[61];
  do
  {
    v184 -= 16;
    do
    {
      v185 = *(_DWORD *)(v184 + 16);
      v184 += 16;
    }
    while (*v182 != v185);
    *(double *)(*(_QWORD *)a2 + 8 * v20) = *(double *)(*(_QWORD *)(v184 + 8) + 32) - *(double *)(v17 + 8 * v20);
    ++v20;
    ++v182;
  }
  while (v182 != v183);
  v17 = *v9;
  v186 = *(_DWORD **)(a3 + 144);
  v187 = *(_DWORD **)(a3 + 152);
  if (v186 == v187)
    goto LABEL_66;
LABEL_53:
  v188 = a1[73];
  do
  {
    v188 -= 16;
    do
    {
      v189 = *(_DWORD *)(v188 + 16);
      v188 += 16;
    }
    while (*v186 != v189);
    v190 = *(float64x2_t **)(v188 + 8);
    v191 = 8 * v20;
    a8 = *(__n128 *)(v17 + v191);
    v192 = vsubq_f64(v190[2], (float64x2_t)a8);
    a5 = vsubq_f64(v190[3], *(float64x2_t *)(v17 + v191 + 16));
    v193 = (float64x2_t *)(*(_QWORD *)a2 + v191);
    *v193 = v192;
    v193[1] = a5;
    v20 += 4;
    ++v186;
  }
  while (v186 != v187);
  v17 = *v9;
  v194 = *(_DWORD **)(a3 + 168);
  v195 = *(_DWORD **)(a3 + 176);
  if (v194 == v195)
    goto LABEL_67;
LABEL_58:
  v196 = a1[85];
  do
  {
    v196 -= 16;
    do
    {
      v197 = *(_DWORD *)(v196 + 16);
      v196 += 16;
    }
    while (*v194 != v197);
    v198 = *(float64x2_t **)(v196 + 8);
    v199 = 8 * v20;
    a8 = *(__n128 *)(v17 + v199);
    v200 = vsubq_f64(v198[2], (float64x2_t)a8);
    a5 = vsubq_f64(v198[3], *(float64x2_t *)(v17 + v199 + 16));
    v201 = (float64x2_t *)(*(_QWORD *)a2 + v199);
    *v201 = v200;
    v201[1] = a5;
    v20 += 4;
    ++v194;
  }
  while (v194 != v195);
  v17 = *v9;
  v202 = "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mappi"
         "ng_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"
       + 38;
  v203 = *(_DWORD **)(a3 + 192);
  v204 = *(_DWORD **)(a3 + 200);
  if (v203 != v204)
  {
LABEL_68:
    v205 = a1[97];
    v206 = *((double *)v202 + 300);
    do
    {
      v205 -= 16;
      do
      {
        v238 = *(_DWORD *)(v205 + 16);
        v205 += 16;
      }
      while (*v203 != v238);
      v239 = (__int128 *)(v17 + 8 * v20);
      v240 = *(_QWORD *)(v205 + 8);
      _Q1 = *v239;
      _D3 = *((_QWORD *)v239 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      v244 = _D2 + *((double *)v239 + 2) * *((double *)v239 + 2);
      if (v244 >= v206)
      {
        v207 = sqrt(v244);
        v209 = __sincos_stret(v207);
        v208 = v209.__cosval;
        v210 = v209.__sinval / v207;
        v211 = 1.0 / v244 * (1.0 - v209.__cosval);
      }
      else
      {
        v211 = 0.5 - v244 * (v244 / -720.0 + 0.0416666667);
        v210 = 1.0 - v244 * (0.166666667 - v244 * (v244 / -5040.0 + 0.00833333333));
        v208 = 1.0 - v244 * v211;
      }
      v212 = *((double *)v239 + 1);
      v213 = v211 * *(double *)v239;
      v214 = v211 * v212;
      v215 = *((double *)v239 + 2);
      v216 = v208 + *(double *)v239 * v213;
      v217 = v208 + v212 * (v211 * v212);
      v218 = v208 + v215 * (v211 * v215);
      v219 = v213 * v212;
      v220 = v213 * v215;
      v221 = v214 * v215;
      v222 = v210 * *(double *)v239;
      v223 = v210 * v212;
      v224 = v210 * v215;
      v225 = v219 - v224;
      v226 = v223 + v220;
      v227 = v219 + v224;
      v228 = v221 - v222;
      v229 = v220 - v223;
      v230 = v222 + v221;
      v231 = *(double *)(v240 + 48);
      v232 = *(float64x2_t *)(v240 + 32);
      v233 = *(double *)(v240 + 72);
      v234 = *(float64x2_t *)(v240 + 56);
      v235 = *(double *)(v240 + 96);
      v236 = *(float64x2_t *)(v240 + 80);
      v261 = v231 * v216 + v233 * v225 + v235 * v226;
      v260 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v232, v216), v234, v225), v236, v226);
      v263 = v231 * v227 + v233 * v217 + v235 * v228;
      v262 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v232, v227), v234, v217), v236, v228);
      v265 = v231 * v229 + v233 * v230 + v235 * v218;
      v264 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v232, v229), v234, v230), v236, v218);
      v258 = 0uLL;
      v259 = 0;
      sub_20E9733B8(&v260, v258.f64);
      a5 = v258;
      v237 = (__n128 *)(*(_QWORD *)a2 + 8 * v20);
      v237[1].n128_u64[0] = v259;
      *v237 = (__n128)a5;
      v20 += 3;
      ++v203;
    }
    while (v203 != v204);
    v17 = *v253;
    a1 = v254;
  }
LABEL_76:
  v245 = *(_DWORD **)(a3 + 216);
  v246 = *(_DWORD **)(a3 + 224);
  if (v245 != v246)
  {
    v247 = a1[109];
    do
    {
      v247 -= 16;
      do
      {
        v248 = *(_DWORD *)(v247 + 16);
        v247 += 16;
      }
      while (*v245 != v248);
      v249 = *(float64x2_t **)(v247 + 8);
      v250 = 8 * v20;
      a5.f64[0] = v249[3].f64[0];
      a8.n128_u64[0] = *(_QWORD *)(v17 + v250 + 16);
      a5 = vsubq_f64(a5, (float64x2_t)a8);
      v251 = vsubq_f64(v249[2], *(float64x2_t *)(v17 + v250));
      v252 = (float64x2_t *)(*(_QWORD *)a2 + v250);
      *v252 = v251;
      v252[1].f64[0] = a5.f64[0];
      v20 += 3;
      ++v245;
    }
    while (v245 != v246);
  }
}

#error "20F928268: too big function (funcsize=0)"

void sub_20F9A7618(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A762C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7654(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7668(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A767C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7690(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A76A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A76B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A76CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A76E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A76F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7708(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A771C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7744(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A776C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7780(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7794(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A77A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A77BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A77D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A77E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A77F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A780C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7820(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7834(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7848(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A785C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A7870(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7884(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

void sub_20F9A7898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 400));
  _Unwind_Resume(a1);
}

void sub_20F9A78AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 360));
  _Unwind_Resume(a1);
}

_QWORD *sub_20F9A78C4(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = (unsigned int *)*result;
  v4 = *(unsigned __int8 *)(*result + 20);
  *(_BYTE *)a3 = v4;
  if (v4)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2[6] + 4 * *v3);
    v5 = (unsigned int *)result[1];
    v6 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = -1;
    v5 = (unsigned int *)result[1];
    v23 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v23;
    if (v23)
    {
LABEL_3:
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2[6] + 4 * *v5);
      v7 = (unsigned int *)result[2];
      v8 = *((unsigned __int8 *)v7 + 20);
      *(_BYTE *)(a3 + 16) = v8;
      if (v8)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a3 + 12) = -1;
  v7 = (unsigned int *)result[2];
  v24 = *((unsigned __int8 *)v7 + 20);
  *(_BYTE *)(a3 + 16) = v24;
  if (v24)
  {
LABEL_4:
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(*a2 + 4 * *v7);
    v9 = (unsigned int *)result[3];
    v10 = *((unsigned __int8 *)v9 + 20);
    *(_BYTE *)(a3 + 24) = v10;
    if (v10)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a3 + 20) = -1;
  v9 = (unsigned int *)result[3];
  v25 = *((unsigned __int8 *)v9 + 20);
  *(_BYTE *)(a3 + 24) = v25;
  if (v25)
  {
LABEL_5:
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(*a2 + 4 * *v9);
    v11 = (unsigned int *)result[4];
    v12 = *((unsigned __int8 *)v11 + 20);
    *(_BYTE *)(a3 + 32) = v12;
    if (v12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_DWORD *)(a3 + 28) = -1;
  v11 = (unsigned int *)result[4];
  v26 = *((unsigned __int8 *)v11 + 20);
  *(_BYTE *)(a3 + 32) = v26;
  if (v26)
  {
LABEL_6:
    *(_DWORD *)(a3 + 36) = *(_DWORD *)(a2[18] + 4 * *v11);
    v13 = (unsigned int *)result[5];
    v14 = *((unsigned __int8 *)v13 + 20);
    *(_BYTE *)(a3 + 40) = v14;
    if (v14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(a3 + 36) = -1;
  v13 = (unsigned int *)result[5];
  v27 = *((unsigned __int8 *)v13 + 20);
  *(_BYTE *)(a3 + 40) = v27;
  if (v27)
  {
LABEL_7:
    *(_DWORD *)(a3 + 44) = *(_DWORD *)(a2[18] + 4 * *v13);
    v15 = (unsigned int *)result[6];
    v16 = *((unsigned __int8 *)v15 + 20);
    *(_BYTE *)(a3 + 48) = v16;
    if (v16)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a3 + 44) = -1;
  v15 = (unsigned int *)result[6];
  v28 = *((unsigned __int8 *)v15 + 20);
  *(_BYTE *)(a3 + 48) = v28;
  if (v28)
  {
LABEL_8:
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2[21] + 4 * *v15);
    v17 = (unsigned int *)result[7];
    v18 = *((unsigned __int8 *)v17 + 20);
    *(_BYTE *)(a3 + 56) = v18;
    if (v18)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_DWORD *)(a3 + 52) = -1;
  v17 = (unsigned int *)result[7];
  v29 = *((unsigned __int8 *)v17 + 20);
  *(_BYTE *)(a3 + 56) = v29;
  if (v29)
  {
LABEL_9:
    *(_DWORD *)(a3 + 60) = *(_DWORD *)(a2[21] + 4 * *v17);
    v19 = (unsigned int *)result[8];
    v20 = *((unsigned __int8 *)v19 + 20);
    *(_BYTE *)(a3 + 64) = v20;
    if (v20)
      goto LABEL_10;
LABEL_20:
    *(_DWORD *)(a3 + 68) = -1;
    v21 = (unsigned int *)result[9];
    v31 = *((unsigned __int8 *)v21 + 20);
    *(_BYTE *)(a3 + 72) = v31;
    if (v31)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_19:
  *(_DWORD *)(a3 + 60) = -1;
  v19 = (unsigned int *)result[8];
  v30 = *((unsigned __int8 *)v19 + 20);
  *(_BYTE *)(a3 + 64) = v30;
  if (!v30)
    goto LABEL_20;
LABEL_10:
  *(_DWORD *)(a3 + 68) = *(_DWORD *)(a2[24] + 4 * *v19);
  v21 = (unsigned int *)result[9];
  v22 = *((unsigned __int8 *)v21 + 20);
  *(_BYTE *)(a3 + 72) = v22;
  if (v22)
  {
LABEL_11:
    *(_DWORD *)(a3 + 76) = *(_DWORD *)(a2[24] + 4 * *v21);
    *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
    *(_DWORD *)(a3 + 84) = -1;
    return result;
  }
LABEL_21:
  *(_DWORD *)(a3 + 76) = -1;
  *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
  *(_DWORD *)(a3 + 84) = -1;
  return result;
}

BOOL sub_20F9A7B14(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  _OWORD *v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v216;
  float64x2_t v217;

  v6 = (_OWORD *)(a1 + 152);
  v7 = sub_20FC7238C(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(float64x2_t **)(a1 + 184);
      v11 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v10->f64[0] + 16))(v10);
      switch(v11)
      {
        case 0:
          v12 = v10[1];
          v13 = v10[2];
          goto LABEL_8;
        case 1:
          v14 = a3[1];
          v15 = vmulq_f64(*a3, v10[1]);
          v17 = a3[4];
          v16 = a3[5];
          v19 = a3[2];
          v18 = a3[3];
          *a3 = v15;
          v20 = vmulq_f64(v14, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          v21 = vmulq_f64(v19, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          v22 = vmulq_f64(v18, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          v23 = vmulq_f64(v17, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          a3[4] = v23;
          v24 = vmulq_f64(v16, v10[1]);
          a3[2] = v21;
          a3[3] = v22;
          *a3 = v15;
          a3[1] = v20;
          a3[4] = v23;
          a3[5] = v24;
          break;
        case 2:
          v25 = v10[1].f64[0];
          v26 = vmulq_n_f64(a3[5], v25);
          v27 = vmulq_n_f64(a3[4], v25);
          v28 = vmulq_n_f64(a3[3], v25);
          v29 = vmulq_n_f64(a3[2], v25);
          v30 = vmulq_n_f64(a3[1], v25);
          *a3 = vmulq_n_f64(*a3, v25);
          a3[1] = v30;
          a3[2] = v29;
          a3[3] = v28;
          a3[4] = v27;
          a3[5] = v26;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v12 = v216;
          v13 = v217;
LABEL_8:
          v31 = a3[5];
          v32 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[1].f64[0]), v13, a3[1], 1);
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[2].f64[0]), v13, a3[2], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[3].f64[0]), v13, a3[3], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[4].f64[0]), v13, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3->f64[0]), v13, *a3, 1);
          a3[1] = v32;
          a3[2] = v33;
          a3[3] = v34;
          a3[4] = v35;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v13, v31, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v36 = v10[1];
          v37 = v10[2];
          goto LABEL_14;
        case 1:
          v38 = a3[7];
          v39 = vmulq_f64(a3[6], v10[1]);
          v41 = a3[10];
          v40 = a3[11];
          v43 = a3[8];
          v42 = a3[9];
          a3[6] = v39;
          v44 = vmulq_f64(v38, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          v45 = vmulq_f64(v43, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          v46 = vmulq_f64(v42, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          v47 = vmulq_f64(v41, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          a3[10] = v47;
          v48 = vmulq_f64(v40, v10[1]);
          a3[8] = v45;
          a3[9] = v46;
          a3[6] = v39;
          a3[7] = v44;
          a3[10] = v47;
          a3[11] = v48;
          break;
        case 2:
          v49 = v10[1].f64[0];
          v50 = vmulq_n_f64(a3[11], v49);
          v51 = vmulq_n_f64(a3[10], v49);
          v52 = vmulq_n_f64(a3[9], v49);
          v53 = vmulq_n_f64(a3[8], v49);
          v54 = vmulq_n_f64(a3[7], v49);
          a3[6] = vmulq_n_f64(a3[6], v49);
          a3[7] = v54;
          a3[8] = v53;
          a3[9] = v52;
          a3[10] = v51;
          a3[11] = v50;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v36 = v216;
          v37 = v217;
LABEL_14:
          v55 = a3[11];
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[7].f64[0]), v37, a3[7], 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[8].f64[0]), v37, a3[8], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[9].f64[0]), v37, a3[9], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[10].f64[0]), v37, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[6].f64[0]), v37, a3[6], 1);
          a3[7] = v56;
          a3[8] = v57;
          a3[9] = v58;
          a3[10] = v59;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v36, v55.f64[0]), v37, v55, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v60 = v10[1];
          v61 = v10[2];
          goto LABEL_20;
        case 1:
          v62 = a3[13];
          v63 = vmulq_f64(a3[12], v10[1]);
          v65 = a3[16];
          v64 = a3[17];
          v67 = a3[14];
          v66 = a3[15];
          a3[12] = v63;
          v68 = vmulq_f64(v62, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          v69 = vmulq_f64(v67, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          v70 = vmulq_f64(v66, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          v71 = vmulq_f64(v65, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          a3[16] = v71;
          v72 = vmulq_f64(v64, v10[1]);
          a3[14] = v69;
          a3[15] = v70;
          a3[12] = v63;
          a3[13] = v68;
          a3[16] = v71;
          a3[17] = v72;
          break;
        case 2:
          v73 = v10[1].f64[0];
          v74 = vmulq_n_f64(a3[17], v73);
          v75 = vmulq_n_f64(a3[16], v73);
          v76 = vmulq_n_f64(a3[15], v73);
          v77 = vmulq_n_f64(a3[14], v73);
          v78 = vmulq_n_f64(a3[13], v73);
          a3[12] = vmulq_n_f64(a3[12], v73);
          a3[13] = v78;
          a3[14] = v77;
          a3[15] = v76;
          a3[16] = v75;
          a3[17] = v74;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v60 = v216;
          v61 = v217;
LABEL_20:
          v79 = a3[17];
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[13].f64[0]), v61, a3[13], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[14].f64[0]), v61, a3[14], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[15].f64[0]), v61, a3[15], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[16].f64[0]), v61, a3[16], 1);
          a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[12].f64[0]), v61, a3[12], 1);
          a3[13] = v80;
          a3[14] = v81;
          a3[15] = v82;
          a3[16] = v83;
          a3[17] = vmlaq_laneq_f64(vmulq_n_f64(v60, v79.f64[0]), v61, v79, 1);
          break;
        default:
          break;
      }
      v84 = a3 + 18;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v11)
        {
          case 0:
            v85 = v10[1];
            v86 = v10[2];
            goto LABEL_27;
          case 1:
            v87 = a3[19];
            v88 = vmulq_f64(*v84, v10[1]);
            v90 = a3[22];
            v89 = a3[23];
            v92 = a3[20];
            v91 = a3[21];
            *v84 = v88;
            v93 = vmulq_f64(v87, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            v94 = vmulq_f64(v92, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            v95 = vmulq_f64(v91, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            v96 = vmulq_f64(v90, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            a3[22] = v96;
            v97 = vmulq_f64(v89, v10[1]);
            a3[20] = v94;
            a3[21] = v95;
            *v84 = v88;
            a3[19] = v93;
            a3[22] = v96;
            a3[23] = v97;
            break;
          case 2:
            v98 = v10[1].f64[0];
            v99 = vmulq_n_f64(a3[23], v98);
            v100 = vmulq_n_f64(a3[22], v98);
            v101 = vmulq_n_f64(a3[21], v98);
            v102 = vmulq_n_f64(a3[20], v98);
            v103 = vmulq_n_f64(a3[19], v98);
            *v84 = vmulq_n_f64(*v84, v98);
            a3[19] = v103;
            a3[20] = v102;
            a3[21] = v101;
            a3[22] = v100;
            a3[23] = v99;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v85 = v216;
            v86 = v217;
LABEL_27:
            v104 = a3[23];
            v105 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[19].f64[0]), v86, a3[19], 1);
            v106 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[20].f64[0]), v86, a3[20], 1);
            v107 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[21].f64[0]), v86, a3[21], 1);
            v108 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[22].f64[0]), v86, a3[22], 1);
            a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[18].f64[0]), v86, a3[18], 1);
            a3[19] = v105;
            a3[20] = v106;
            a3[21] = v107;
            a3[22] = v108;
            a3[23] = vmlaq_laneq_f64(vmulq_n_f64(v85, v104.f64[0]), v86, v104, 1);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
            v109 = v10[1];
            v110 = v10[2];
            goto LABEL_34;
          case 1:
            v111 = a3[25];
            v112 = vmulq_f64(a3[24], v10[1]);
            v114 = a3[26];
            v113 = a3[27];
            a3[24] = v112;
            v115 = vmulq_f64(v111, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            v116 = vmulq_f64(v114, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            v117 = vmulq_f64(v113, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            a3[27] = v117;
            break;
          case 2:
            v118 = v10[1].f64[0];
            v119 = vmulq_n_f64(a3[25], v118);
            v120 = vmulq_n_f64(a3[24], v118);
            v121 = vmulq_n_f64(a3[27], v118);
            a3[26] = vmulq_n_f64(a3[26], v118);
            a3[27] = v121;
            a3[24] = v120;
            a3[25] = v119;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v109 = v216;
            v110 = v217;
LABEL_34:
            v122 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[24].f64[0]), v110, a3[24], 1);
            v123 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[25].f64[0]), v110, a3[25], 1);
            v124 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[26].f64[0]), v110, a3[26], 1);
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[27].f64[0]), v110, a3[27], 1);
            a3[24] = v122;
            a3[25] = v123;
            a3[26] = v124;
            a3[27] = v125;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
            v126 = v10[1];
            v127 = v10[2];
            goto LABEL_41;
          case 1:
            v128 = a3[29];
            v129 = vmulq_f64(a3[28], v10[1]);
            v131 = a3[30];
            v130 = a3[31];
            a3[28] = v129;
            v132 = vmulq_f64(v128, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            v133 = vmulq_f64(v131, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            v134 = vmulq_f64(v130, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            a3[31] = v134;
            break;
          case 2:
            v135 = v10[1].f64[0];
            v136 = vmulq_n_f64(a3[29], v135);
            v137 = vmulq_n_f64(a3[28], v135);
            v138 = vmulq_n_f64(a3[31], v135);
            a3[30] = vmulq_n_f64(a3[30], v135);
            a3[31] = v138;
            a3[28] = v137;
            a3[29] = v136;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v126 = v216;
            v127 = v217;
LABEL_41:
            v139 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[28].f64[0]), v127, a3[28], 1);
            v140 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[29].f64[0]), v127, a3[29], 1);
            v141 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[30].f64[0]), v127, a3[30], 1);
            v142 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[31].f64[0]), v127, a3[31], 1);
            a3[28] = v139;
            a3[29] = v140;
            a3[30] = v141;
            a3[31] = v142;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
            v143 = v10[1];
            v144 = v10[2];
            goto LABEL_48;
          case 1:
            v145 = a3[33];
            v146 = vmulq_f64(a3[32], v10[1]);
            v148 = a3[34];
            v147 = a3[35];
            a3[32] = v146;
            v149 = vmulq_f64(v145, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            v150 = vmulq_f64(v148, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            v151 = vmulq_f64(v147, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            a3[35] = v151;
            break;
          case 2:
            v152 = v10[1].f64[0];
            v153 = vmulq_n_f64(a3[33], v152);
            v154 = vmulq_n_f64(a3[32], v152);
            v155 = vmulq_n_f64(a3[35], v152);
            a3[34] = vmulq_n_f64(a3[34], v152);
            a3[35] = v155;
            a3[32] = v154;
            a3[33] = v153;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v143 = v216;
            v144 = v217;
LABEL_48:
            v156 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[32].f64[0]), v144, a3[32], 1);
            v157 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[33].f64[0]), v144, a3[33], 1);
            v158 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[34].f64[0]), v144, a3[34], 1);
            v159 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[35].f64[0]), v144, a3[35], 1);
            a3[32] = v156;
            a3[33] = v157;
            a3[34] = v158;
            a3[35] = v159;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
            v160 = v10[1];
            v161 = v10[2];
            goto LABEL_55;
          case 1:
            v162 = a3[37];
            v163 = vmulq_f64(a3[36], v10[1]);
            v165 = a3[38];
            v164 = a3[39];
            a3[36] = v163;
            v166 = vmulq_f64(v162, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            v167 = vmulq_f64(v165, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            v168 = vmulq_f64(v164, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            a3[39] = v168;
            break;
          case 2:
            v169 = v10[1].f64[0];
            v170 = vmulq_n_f64(a3[37], v169);
            v171 = vmulq_n_f64(a3[36], v169);
            v172 = vmulq_n_f64(a3[39], v169);
            a3[38] = vmulq_n_f64(a3[38], v169);
            a3[39] = v172;
            a3[36] = v171;
            a3[37] = v170;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v160 = v216;
            v161 = v217;
LABEL_55:
            v173 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[36].f64[0]), v161, a3[36], 1);
            v174 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[37].f64[0]), v161, a3[37], 1);
            v175 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[38].f64[0]), v161, a3[38], 1);
            v176 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[39].f64[0]), v161, a3[39], 1);
            a3[36] = v173;
            a3[37] = v174;
            a3[38] = v175;
            a3[39] = v176;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v177 = a3 + 40;
        switch(v11)
        {
          case 0:
            v178 = v10[1];
            v179 = v10[2];
            goto LABEL_62;
          case 1:
            v180 = a3[41];
            v181 = vmulq_f64(*v177, v10[1]);
            v182 = a3[42];
            *v177 = v181;
            v183 = vmulq_f64(v180, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            v184 = vmulq_f64(v182, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            a3[42] = v184;
            break;
          case 2:
            v185 = v10[1].f64[0];
            v186 = vmulq_n_f64(a3[42], v185);
            v187 = vmulq_n_f64(a3[41], v185);
            *v177 = vmulq_n_f64(*v177, v185);
            a3[41] = v187;
            a3[42] = v186;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v178 = v216;
            v179 = v217;
LABEL_62:
            v188 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[40].f64[0]), v179, a3[40], 1);
            v189 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[41].f64[0]), v179, a3[41], 1);
            v190 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[42].f64[0]), v179, a3[42], 1);
            a3[40] = v188;
            a3[41] = v189;
            a3[42] = v190;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v191 = a3 + 43;
        switch(v11)
        {
          case 0:
            v192 = v10[1];
            v193 = v10[2];
            goto LABEL_69;
          case 1:
            v194 = a3[44];
            v195 = vmulq_f64(*v191, v10[1]);
            v196 = a3[45];
            *v191 = v195;
            v197 = vmulq_f64(v194, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            v198 = vmulq_f64(v196, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            a3[45] = v198;
            break;
          case 2:
            v199 = v10[1].f64[0];
            v200 = vmulq_n_f64(a3[45], v199);
            v201 = vmulq_n_f64(a3[44], v199);
            *v191 = vmulq_n_f64(*v191, v199);
            a3[44] = v201;
            a3[45] = v200;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v192 = v216;
            v193 = v217;
LABEL_69:
            v202 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[43].f64[0]), v193, a3[43], 1);
            v203 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[44].f64[0]), v193, a3[44], 1);
            v204 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[45].f64[0]), v193, a3[45], 1);
            a3[43] = v202;
            a3[44] = v203;
            a3[45] = v204;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
            v205 = v10[1];
            v206 = v10[2];
            goto LABEL_76;
          case 1:
            v207 = vmulq_f64(a3[46], v10[1]);
            goto LABEL_77;
          case 2:
            v207 = vmulq_n_f64(a3[46], v10[1].f64[0]);
            goto LABEL_77;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v205 = v216;
            v206 = v217;
LABEL_76:
            v207 = vmlaq_laneq_f64(vmulq_n_f64(v205, a3[46].f64[0]), v206, a3[46], 1);
LABEL_77:
            a3[46] = v207;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 136) = *v6;
    _Q0 = *(_OWORD *)(a1 + 152);
    _D2 = *(_QWORD *)(a1 + 160);
    __asm { FMLA            D1, D2, V0.D[1] }
    v8 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 168) = v8;
  return v7;
}

uint64_t sub_20F9A8690(uint64_t result, unsigned __int8 *a2, float64x2_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  const double *f64;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  unsigned int v61;
  unsigned int v62;
  const double *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  const double *v81;
  const double *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  const double *v94;
  float64x2_t v95;
  float64x2_t v96;
  const double *v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  const double *v134;
  float64x2_t v135;
  float64x2_t v136;
  const double *v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  const double *v179;
  const double *v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  const double *v192;
  float64x2_t v193;
  float64x2_t v194;
  const double *v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  int v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  const double *v254;
  float64x2_t v255;
  float64x2_t v256;
  const double *v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  int v318;
  const double *v319;
  const double *v320;
  const double *v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  const double *v357;
  const double *v358;
  const double *v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  unsigned int v396;
  unsigned int v397;
  const double *v398;
  const double *v399;
  const double *v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  const double *v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  const double *v486;
  const double *v487;
  int v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  int v610;
  const double *v611;
  const double *v612;
  const double *v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  const double *v649;
  const double *v650;
  const double *v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  const double *v688;
  float64x2_t v689;
  float64x2_t v690;
  const double *v691;
  float64x2_t v692;
  float64x2_t v693;
  const double *v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  int v739;
  unsigned int v740;
  unsigned int v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  int v863;
  unsigned int v864;
  unsigned int v865;
  const double *v866;
  const double *v867;
  const double *v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  const double *v904;
  float64x2_t v905;
  float64x2_t v906;
  const double *v907;
  float64x2_t v908;
  float64x2_t v909;
  const double *v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  int v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  const double *v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  const double *v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  int v1124;
  unsigned int v1125;
  unsigned int v1126;
  float64x2_t v1127;
  int64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  int64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  int64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  int64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  int64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  int64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2x2_t v1326;
  float64x2x2_t v1327;
  float64x2x2_t v1328;
  float64x2x2_t v1329;
  float64x2x2_t v1330;
  float64x2x2_t v1331;
  float64x2x2_t v1332;
  float64x2x2_t v1333;
  float64x2x2_t v1334;
  float64x2x2_t v1335;
  float64x2x2_t v1336;
  float64x2x2_t v1337;
  float64x2x2_t v1338;
  float64x2x2_t v1339;
  float64x2x2_t v1340;
  float64x2x2_t v1341;
  float64x2x2_t v1342;
  float64x2x2_t v1343;
  float64x2x2_t v1344;
  float64x2x2_t v1345;
  float64x2x2_t v1346;
  float64x2x2_t v1347;
  float64x2x2_t v1348;
  float64x2x2_t v1349;
  float64x2x2_t v1350;
  float64x2x2_t v1351;
  float64x2x2_t v1352;
  float64x2x2_t v1353;
  float64x2x2_t v1354;
  float64x2x2_t v1355;
  float64x2x2_t v1356;
  float64x2x2_t v1357;
  float64x2x2_t v1358;
  float64x2x2_t v1359;
  float64x2x2_t v1360;
  float64x2x2_t v1361;
  float64x2x2_t v1362;
  float64x2x2_t v1363;
  float64x2x2_t v1364;
  float64x2x2_t v1365;
  float64x2x2_t v1366;
  float64x2x2_t v1367;
  float64x2x2_t v1368;
  float64x2x2_t v1369;
  float64x2x2_t v1370;
  float64x2x2_t v1371;
  float64x2x2_t v1372;
  float64x2x2_t v1373;
  float64x2x2_t v1374;
  float64x2x2_t v1375;
  float64x2x2_t v1376;
  float64x2x2_t v1377;
  float64x2x2_t v1378;
  float64x2x2_t v1379;
  float64x2x2_t v1380;
  float64x2x2_t v1381;
  float64x2x2_t v1382;
  float64x2x2_t v1383;
  float64x2x2_t v1384;
  float64x2x2_t v1385;
  float64x2x2_t v1386;
  float64x2x2_t v1387;
  float64x2x2_t v1388;
  float64x2x2_t v1389;
  float64x2x2_t v1390;
  float64x2x2_t v1391;
  float64x2x2_t v1392;
  float64x2x2_t v1393;
  float64x2x2_t v1394;
  float64x2x2_t v1395;
  float64x2x2_t v1396;
  float64x2x2_t v1397;
  float64x2x2_t v1398;
  float64x2x2_t v1399;
  float64x2x2_t v1400;
  float64x2x2_t v1401;
  float64x2x2_t v1402;
  float64x2x2_t v1403;
  float64x2x2_t v1404;
  float64x2x2_t v1405;
  float64x2x2_t v1406;
  float64x2x2_t v1407;
  float64x2x2_t v1408;
  float64x2x2_t v1409;
  float64x2x2_t v1410;
  float64x2x2_t v1411;
  float64x2x2_t v1412;
  float64x2x2_t v1413;
  float64x2x2_t v1414;
  float64x2x2_t v1415;
  float64x2x2_t v1416;
  float64x2x2_t v1417;
  float64x2x2_t v1418;
  float64x2x2_t v1419;
  float64x2x2_t v1420;
  float64x2x2_t v1421;
  float64x2x2_t v1422;
  float64x2x2_t v1423;
  float64x2x2_t v1424;
  float64x2x2_t v1425;
  float64x2x2_t v1426;
  float64x2x2_t v1427;
  float64x2x2_t v1428;
  float64x2x2_t v1429;
  float64x2x2_t v1430;
  float64x2x2_t v1431;
  float64x2x2_t v1432;
  float64x2x2_t v1433;
  float64x2x2_t v1434;
  float64x2x2_t v1435;
  float64x2x2_t v1436;
  float64x2x2_t v1437;
  float64x2x2_t v1438;
  float64x2x2_t v1439;
  float64x2x2_t v1440;
  float64x2x2_t v1441;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  v7 = a2[72];
  if (a2[72])
    _ZF = a2[64] == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v9 = *((_DWORD *)a2 + 19);
    v10 = *((_DWORD *)a2 + 17);
    if (v10 < v9)
    {
LABEL_9:
      result = sub_20F9ABFD0(v6 + 12776, v9, v9);
      v29.f64[0] = *(float64_t *)(result + 16);
      v30.f64[0] = *(float64_t *)(result + 40);
      v31.f64[0] = *(float64_t *)(result + 64);
      _Q6 = a3[43];
      _Q7 = a3[44];
      _Q16 = a3[45];
      v35 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
      v36 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
      v37 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q6.f64[0]), v36, _Q6, 1);
      _Q20 = vmulq_f64(_Q16, _Q6);
      _Q6.f64[0] = a3[43].f64[1];
      __asm { FMLA            D20, D6, V16.D[1] }
      _Q6.f64[0] = a3[45].f64[1];
      v39 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q7.f64[0]), v36, _Q7, 1);
      _Q22 = vmulq_f64(_Q16, _Q7);
      _Q7.f64[0] = a3[44].f64[1];
      __asm { FMLA            D22, D7, V16.D[1] }
      v41 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q16.f64[0]), v36, _Q16, 1);
      _Q17 = vmulq_f64(_Q16, _Q16);
      __asm { FMLA            D17, D6, V16.D[1] }
      v43 = vaddq_f64(*(float64x2_t *)(result + 24), v39);
      v44 = vaddq_f64(*(float64x2_t *)(result + 48), v41);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v37);
      *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v29, _Q20);
      *(float64x2_t *)(result + 24) = v43;
      *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v30, _Q22);
      *(float64x2_t *)(result + 48) = v44;
      *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v31, _Q17);
      v6 = *v5;
      goto LABEL_10;
    }
    result = sub_20F9ABFD0(v6 + 12776, v9, v10);
    v12.f64[0] = *(float64_t *)(result + 16);
    f64 = a3[43].f64;
    v1353 = vld2q_f64(f64);
    v13.f64[0] = *(float64_t *)(result + 40);
    v14.f64[0] = *(float64_t *)(result + 64);
    _Q16 = a3[45];
    _Q17 = a3[40];
    _Q18 = a3[41];
    v18 = a3[42];
    v19 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], _Q17.f64[0]), v1353.val[1], _Q17, 1);
    _Q21 = vmulq_f64(_Q16, _Q17);
    _Q17.f64[0] = a3[40].f64[1];
    __asm { FMLA            D21, D17, V16.D[1] }
    v24 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], _Q18.f64[0]), v1353.val[1], _Q18, 1);
    _Q22 = vmulq_f64(_Q16, _Q18);
    _Q18.f64[0] = a3[41].f64[1];
    __asm { FMLA            D22, D18, V16.D[1] }
    v26 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], v18.f64[0]), v1353.val[1], v18, 1);
    v1353.val[0] = vmulq_f64(_Q16, v18);
    v1353.val[1].f64[0] = a3[42].f64[1];
    __asm { FMLA            D3, D4, V16.D[1] }
    *(_QWORD *)&v1353.val[1].f64[0] = *(_OWORD *)&vaddq_f64(v13, _Q22);
    v27 = vaddq_f64(*(float64x2_t *)(result + 24), v24);
    v28 = vaddq_f64(*(float64x2_t *)(result + 48), v26);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v19);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v12, _Q21);
    *(float64x2_t *)(result + 24) = v27;
    *(float64_t *)(result + 40) = v1353.val[1].f64[0];
    *(float64x2_t *)(result + 48) = v28;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v14, v1353.val[0]);
    v7 = a2[72];
    v6 = *v5;
  }
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 19);
    goto LABEL_9;
  }
LABEL_10:
  if (a2[64])
  {
    result = sub_20F9ABFD0(v6 + 12776, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 17));
    v45.f64[0] = *(float64_t *)(result + 16);
    v46.f64[0] = *(float64_t *)(result + 40);
    v47.f64[0] = *(float64_t *)(result + 64);
    _Q6 = a3[40];
    _Q7 = a3[41];
    _Q16 = a3[42];
    v51 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v52 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v53 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q6.f64[0]), v52, _Q6, 1);
    _Q20 = vmulq_f64(_Q16, _Q6);
    _Q6.f64[0] = a3[40].f64[1];
    __asm { FMLA            D20, D6, V16.D[1] }
    _Q6.f64[0] = a3[42].f64[1];
    v55 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q7.f64[0]), v52, _Q7, 1);
    _Q22 = vmulq_f64(_Q16, _Q7);
    _Q7.f64[0] = a3[41].f64[1];
    __asm { FMLA            D22, D7, V16.D[1] }
    v57 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q16.f64[0]), v52, _Q16, 1);
    _Q17 = vmulq_f64(_Q16, _Q16);
    __asm { FMLA            D17, D6, V16.D[1] }
    v59 = vaddq_f64(*(float64x2_t *)(result + 24), v55);
    v60 = vaddq_f64(*(float64x2_t *)(result + 48), v57);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v53);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v45, _Q20);
    *(float64x2_t *)(result + 24) = v59;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v46, _Q22);
    *(float64x2_t *)(result + 48) = v60;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v47, _Q17);
    v6 = *v5;
    if (a2[64])
    {
      if (a2[72])
      {
        v61 = *((_DWORD *)a2 + 17);
        v62 = *((_DWORD *)a2 + 19);
        if (v62 >= v61)
        {
          result = sub_20F9ABFD0(v6 + 12776, v61, v62);
          v64.f64[0] = *(float64_t *)(result + 16);
          v65.f64[0] = *(float64_t *)(result + 40);
          v66.f64[0] = *(float64_t *)(result + 64);
          v63 = a3[40].f64;
          v1357 = vld2q_f64(v63);
          _Q16 = a3[42];
          _Q17 = a3[43];
          _Q18 = a3[44];
          v70 = a3[45];
          v71 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], _Q17.f64[0]), v1357.val[1], _Q17, 1);
          _Q21 = vmulq_f64(_Q16, _Q17);
          _Q17.f64[0] = a3[43].f64[1];
          __asm { FMLA            D21, D17, V16.D[1] }
          v73 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], _Q18.f64[0]), v1357.val[1], _Q18, 1);
          _Q22 = vmulq_f64(_Q16, _Q18);
          _Q18.f64[0] = a3[44].f64[1];
          __asm { FMLA            D22, D18, V16.D[1] }
          v75 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], v70.f64[0]), v1357.val[1], v70, 1);
          v1357.val[0] = vmulq_f64(_Q16, v70);
          v1357.val[1].f64[0] = a3[45].f64[1];
          __asm { FMLA            D6, D7, V16.D[1] }
          v76 = vaddq_f64(*(float64x2_t *)(result + 24), v73);
          v77 = vaddq_f64(*(float64x2_t *)(result + 48), v75);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v71);
          *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v64, _Q21);
          *(float64x2_t *)(result + 24) = v76;
          *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v65, _Q22);
          *(float64x2_t *)(result + 48) = v77;
          *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v66, v1357.val[0]);
          v6 = *v5;
        }
      }
    }
  }
  v78 = a2[56];
  if (a2[56] && a2[48])
  {
    v79 = *((_DWORD *)a2 + 15);
    v80 = *((_DWORD *)a2 + 13);
    if (v80 < v79)
      goto LABEL_21;
    result = sub_20F9AC0F4(v6 + 11192, v79, v80);
    v81 = a3[36].f64;
    v1369 = vld2q_f64(v81);
    v82 = a3[38].f64;
    v1394 = vld2q_f64(v82);
    v83 = a3[32];
    v84 = a3[33];
    v85 = a3[34];
    v86 = a3[35];
    v87 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v83.f64[0]), v1394.val[1], v83, 1));
    v88 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v84.f64[0]), v1394.val[1], v84, 1));
    v89 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v84.f64[0]), v1369.val[1], v84, 1));
    v90 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v85.f64[0]), v1394.val[1], v85, 1));
    v91 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v85.f64[0]), v1369.val[1], v85, 1));
    v92 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v86.f64[0]), v1394.val[1], v86, 1));
    v93 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v86.f64[0]), v1369.val[1], v86, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v83.f64[0]), v1369.val[1], v83, 1));
    *(float64x2_t *)(result + 16) = v87;
    *(float64x2_t *)(result + 32) = v89;
    *(float64x2_t *)(result + 48) = v88;
    *(float64x2_t *)(result + 64) = v91;
    *(float64x2_t *)(result + 80) = v90;
    *(float64x2_t *)(result + 96) = v93;
    *(float64x2_t *)(result + 112) = v92;
    v78 = a2[56];
    v6 = *v5;
  }
  if (!v78)
    goto LABEL_27;
  v79 = *((_DWORD *)a2 + 15);
LABEL_21:
  v94 = a3[36].f64;
  result = sub_20F9AC0F4(v6 + 11192, v79, v79);
  v95 = a3[36];
  v96 = a3[37];
  v97 = a3[38].f64;
  v98 = a3[38];
  v99 = a3[39];
  v100 = (float64x2_t)vzip1q_s64((int64x2_t)v98, (int64x2_t)v99);
  *(_QWORD *)&v101.f64[0] = vdupq_laneq_s64((int64x2_t)v98, 1).u64[0];
  v101.f64[1] = a3[39].f64[1];
  v102 = (float64x2_t)vzip1q_s64((int64x2_t)v95, (int64x2_t)v96);
  v103 = (float64x2_t)vzip2q_s64((int64x2_t)v95, (int64x2_t)v96);
  v104 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v100, v95.f64[0]), v101, v95, 1));
  v105 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v100, v96.f64[0]), v101, v96, 1));
  v106 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v102, v96.f64[0]), v103, v96, 1));
  v107 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v100, v98.f64[0]), v101, v98, 1));
  v108 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v102, v98.f64[0]), v103, v98, 1));
  v109 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v100, v99.f64[0]), v101, v99, 1));
  v110 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v102, v99.f64[0]), v103, v99, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v102, v95.f64[0]), v103, v95, 1));
  *(float64x2_t *)(result + 16) = v104;
  *(float64x2_t *)(result + 32) = v106;
  *(float64x2_t *)(result + 48) = v105;
  *(float64x2_t *)(result + 64) = v108;
  *(float64x2_t *)(result + 80) = v107;
  *(float64x2_t *)(result + 96) = v110;
  *(float64x2_t *)(result + 112) = v109;
  v111 = a2[56];
  v6 = *v5;
  if (a2[56] && a2[64])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 17));
    v1334 = vld2q_f64(v94);
    v1358 = vld2q_f64(v97);
    v112 = a3[40];
    v113 = a3[41];
    v114 = a3[42];
    v115 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v112.f64[0]), v1334.val[1], v112, 1);
    v116 = vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v112.f64[0]), v1358.val[1], v112, 1);
    v117 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v113.f64[0]), v1334.val[1], v113, 1);
    v118 = vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v113.f64[0]), v1358.val[1], v113, 1);
    v119 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v114.f64[0]), v1334.val[1], v114, 1);
    v120 = vaddq_f64(*(float64x2_t *)(result + 16), v116);
    v1334.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v118);
    v121 = vaddq_f64(*(float64x2_t *)(result + 32), v117);
    v1334.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v114.f64[0]), v1358.val[1], v114, 1));
    v122 = vaddq_f64(*(float64x2_t *)(result + 64), v119);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v115);
    *(float64x2_t *)(result + 16) = v120;
    *(float64x2_t *)(result + 32) = v121;
    *(float64x2_t *)(result + 48) = v1334.val[1];
    *(float64x2_t *)(result + 64) = v122;
    *(float64x2_t *)(result + 80) = v1334.val[0];
    v111 = a2[56];
    v6 = *v5;
  }
  if (v111 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 19));
    v1335 = vld2q_f64(v94);
    v1359 = vld2q_f64(v97);
    v123 = a3[43];
    v124 = a3[44];
    v125 = a3[45];
    v126 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v123.f64[0]), v1335.val[1], v123, 1);
    v127 = vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v123.f64[0]), v1359.val[1], v123, 1);
    v128 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v124.f64[0]), v1335.val[1], v124, 1);
    v129 = vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v124.f64[0]), v1359.val[1], v124, 1);
    v130 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v125.f64[0]), v1335.val[1], v125, 1);
    v131 = vaddq_f64(*(float64x2_t *)(result + 16), v127);
    v1335.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v129);
    v132 = vaddq_f64(*(float64x2_t *)(result + 32), v128);
    v1335.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v125.f64[0]), v1359.val[1], v125, 1));
    v133 = vaddq_f64(*(float64x2_t *)(result + 64), v130);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v126);
    *(float64x2_t *)(result + 16) = v131;
    *(float64x2_t *)(result + 32) = v132;
    *(float64x2_t *)(result + 48) = v1335.val[1];
    *(float64x2_t *)(result + 64) = v133;
    *(float64x2_t *)(result + 80) = v1335.val[0];
    v6 = *v5;
  }
LABEL_27:
  if (!a2[48])
    goto LABEL_38;
  v134 = a3[32].f64;
  result = sub_20F9AC0F4(v6 + 11192, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 13));
  v135 = a3[32];
  v136 = a3[33];
  v137 = a3[34].f64;
  v138 = a3[34];
  v139 = a3[35];
  v140 = (float64x2_t)vzip1q_s64((int64x2_t)v138, (int64x2_t)v139);
  *(_QWORD *)&v141.f64[0] = vdupq_laneq_s64((int64x2_t)v138, 1).u64[0];
  v141.f64[1] = a3[35].f64[1];
  v142 = (float64x2_t)vzip1q_s64((int64x2_t)v135, (int64x2_t)v136);
  v143 = (float64x2_t)vzip2q_s64((int64x2_t)v135, (int64x2_t)v136);
  v144 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v140, v135.f64[0]), v141, v135, 1));
  v145 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v140, v136.f64[0]), v141, v136, 1));
  v146 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v142, v136.f64[0]), v143, v136, 1));
  v147 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v140, v138.f64[0]), v141, v138, 1));
  v148 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v142, v138.f64[0]), v143, v138, 1));
  v149 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v140, v139.f64[0]), v141, v139, 1));
  v150 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v142, v139.f64[0]), v143, v139, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v142, v135.f64[0]), v143, v135, 1));
  *(float64x2_t *)(result + 16) = v144;
  *(float64x2_t *)(result + 32) = v146;
  *(float64x2_t *)(result + 48) = v145;
  *(float64x2_t *)(result + 64) = v148;
  *(float64x2_t *)(result + 80) = v147;
  *(float64x2_t *)(result + 96) = v150;
  *(float64x2_t *)(result + 112) = v149;
  v6 = *v5;
  v151 = a2[48];
  if (!a2[48] || !a2[56])
  {
LABEL_32:
    if (v151)
      goto LABEL_33;
    goto LABEL_35;
  }
  v152 = *((_DWORD *)a2 + 13);
  v153 = *((_DWORD *)a2 + 15);
  if (v153 < v152)
  {
    v151 = 1;
    goto LABEL_32;
  }
  result = sub_20F9AC0F4(v6 + 11192, v152, v153);
  v1391 = vld2q_f64(v134);
  v1403 = vld2q_f64(v137);
  v1234 = a3[36];
  v1235 = a3[37];
  v1236 = a3[38];
  v1237 = a3[39];
  v1238 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1234.f64[0]), v1403.val[1], v1234, 1));
  v1239 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1235.f64[0]), v1403.val[1], v1235, 1));
  v1240 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1235.f64[0]), v1391.val[1], v1235, 1));
  v1241 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1236.f64[0]), v1403.val[1], v1236, 1));
  v1242 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1236.f64[0]), v1391.val[1], v1236, 1));
  v1243 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1237.f64[0]), v1403.val[1], v1237, 1));
  v1244 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1237.f64[0]), v1391.val[1], v1237, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1234.f64[0]), v1391.val[1], v1234, 1));
  *(float64x2_t *)(result + 16) = v1238;
  *(float64x2_t *)(result + 32) = v1240;
  *(float64x2_t *)(result + 48) = v1239;
  *(float64x2_t *)(result + 64) = v1242;
  *(float64x2_t *)(result + 80) = v1241;
  *(float64x2_t *)(result + 96) = v1244;
  *(float64x2_t *)(result + 112) = v1243;
  v151 = a2[48];
  v6 = *v5;
  if (a2[48])
  {
LABEL_33:
    if (a2[64])
    {
      result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 17));
      v1336 = vld2q_f64(v134);
      v1360 = vld2q_f64(v137);
      v154 = a3[40];
      v155 = a3[41];
      v156 = a3[42];
      v157 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v154.f64[0]), v1336.val[1], v154, 1);
      v158 = vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v154.f64[0]), v1360.val[1], v154, 1);
      v159 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v155.f64[0]), v1336.val[1], v155, 1);
      v160 = vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v155.f64[0]), v1360.val[1], v155, 1);
      v161 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v156.f64[0]), v1336.val[1], v156, 1);
      v162 = vaddq_f64(*(float64x2_t *)(result + 16), v158);
      v1336.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v160);
      v163 = vaddq_f64(*(float64x2_t *)(result + 32), v159);
      v1336.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v156.f64[0]), v1360.val[1], v156, 1));
      v164 = vaddq_f64(*(float64x2_t *)(result + 64), v161);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v157);
      *(float64x2_t *)(result + 16) = v162;
      *(float64x2_t *)(result + 32) = v163;
      *(float64x2_t *)(result + 48) = v1336.val[1];
      *(float64x2_t *)(result + 64) = v164;
      *(float64x2_t *)(result + 80) = v1336.val[0];
      v151 = a2[48];
      v6 = *v5;
    }
  }
LABEL_35:
  if (v151 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 19));
    v1337 = vld2q_f64(v134);
    v1361 = vld2q_f64(v137);
    v165 = a3[43];
    v166 = a3[44];
    v167 = a3[45];
    v168 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v165.f64[0]), v1337.val[1], v165, 1);
    v169 = vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v165.f64[0]), v1361.val[1], v165, 1);
    v170 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v166.f64[0]), v1337.val[1], v166, 1);
    v171 = vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v166.f64[0]), v1361.val[1], v166, 1);
    v172 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v167.f64[0]), v1337.val[1], v167, 1);
    v173 = vaddq_f64(*(float64x2_t *)(result + 16), v169);
    v1337.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v171);
    v174 = vaddq_f64(*(float64x2_t *)(result + 32), v170);
    v1337.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v167.f64[0]), v1361.val[1], v167, 1));
    v175 = vaddq_f64(*(float64x2_t *)(result + 64), v172);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v168);
    *(float64x2_t *)(result + 16) = v173;
    *(float64x2_t *)(result + 32) = v174;
    *(float64x2_t *)(result + 48) = v1337.val[1];
    *(float64x2_t *)(result + 64) = v175;
    *(float64x2_t *)(result + 80) = v1337.val[0];
    v6 = *v5;
  }
LABEL_38:
  v176 = a2[40];
  if (a2[40] && a2[32])
  {
    v177 = *((_DWORD *)a2 + 11);
    v178 = *((_DWORD *)a2 + 9);
    if (v178 < v177)
      goto LABEL_44;
    result = sub_20F9AC0F4(v6 + 9608, v177, v178);
    v179 = a3[28].f64;
    v1370 = vld2q_f64(v179);
    v180 = a3[30].f64;
    v1395 = vld2q_f64(v180);
    v181 = a3[24];
    v182 = a3[25];
    v183 = a3[26];
    v184 = a3[27];
    v185 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v181.f64[0]), v1395.val[1], v181, 1));
    v186 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v182.f64[0]), v1395.val[1], v182, 1));
    v187 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v182.f64[0]), v1370.val[1], v182, 1));
    v188 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v183.f64[0]), v1395.val[1], v183, 1));
    v189 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v183.f64[0]), v1370.val[1], v183, 1));
    v190 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v184.f64[0]), v1395.val[1], v184, 1));
    v191 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v184.f64[0]), v1370.val[1], v184, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v181.f64[0]), v1370.val[1], v181, 1));
    *(float64x2_t *)(result + 16) = v185;
    *(float64x2_t *)(result + 32) = v187;
    *(float64x2_t *)(result + 48) = v186;
    *(float64x2_t *)(result + 64) = v189;
    *(float64x2_t *)(result + 80) = v188;
    *(float64x2_t *)(result + 96) = v191;
    *(float64x2_t *)(result + 112) = v190;
    v176 = a2[40];
    v6 = *v5;
  }
  if (!v176)
    goto LABEL_56;
  v177 = *((_DWORD *)a2 + 11);
LABEL_44:
  v192 = a3[28].f64;
  result = sub_20F9AC0F4(v6 + 9608, v177, v177);
  v193 = a3[28];
  v194 = a3[29];
  v195 = a3[30].f64;
  v196 = a3[30];
  v197 = a3[31];
  v198 = (float64x2_t)vzip1q_s64((int64x2_t)v196, (int64x2_t)v197);
  *(_QWORD *)&v199.f64[0] = vdupq_laneq_s64((int64x2_t)v196, 1).u64[0];
  v199.f64[1] = a3[31].f64[1];
  v200 = (float64x2_t)vzip1q_s64((int64x2_t)v193, (int64x2_t)v194);
  v201 = (float64x2_t)vzip2q_s64((int64x2_t)v193, (int64x2_t)v194);
  v202 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v198, v193.f64[0]), v199, v193, 1));
  v203 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v198, v194.f64[0]), v199, v194, 1));
  v204 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v200, v194.f64[0]), v201, v194, 1));
  v205 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v198, v196.f64[0]), v199, v196, 1));
  v206 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v200, v196.f64[0]), v201, v196, 1));
  v207 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v198, v197.f64[0]), v199, v197, 1));
  v208 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v200, v197.f64[0]), v201, v197, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v200, v193.f64[0]), v201, v193, 1));
  *(float64x2_t *)(result + 16) = v202;
  *(float64x2_t *)(result + 32) = v204;
  *(float64x2_t *)(result + 48) = v203;
  *(float64x2_t *)(result + 64) = v206;
  *(float64x2_t *)(result + 80) = v205;
  *(float64x2_t *)(result + 96) = v208;
  *(float64x2_t *)(result + 112) = v207;
  v209 = a2[40];
  v6 = *v5;
  if (a2[40] && a2[48])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 13));
    v1371 = vld2q_f64(v192);
    v1396 = vld2q_f64(v195);
    v210 = a3[32];
    v211 = a3[33];
    v212 = a3[34];
    v213 = a3[35];
    v214 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v210.f64[0]), v1396.val[1], v210, 1));
    v215 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v211.f64[0]), v1396.val[1], v211, 1));
    v216 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v211.f64[0]), v1371.val[1], v211, 1));
    v217 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v212.f64[0]), v1396.val[1], v212, 1));
    v218 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v212.f64[0]), v1371.val[1], v212, 1));
    v219 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v213.f64[0]), v1396.val[1], v213, 1));
    v220 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v213.f64[0]), v1371.val[1], v213, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v210.f64[0]), v1371.val[1], v210, 1));
    *(float64x2_t *)(result + 16) = v214;
    *(float64x2_t *)(result + 32) = v216;
    *(float64x2_t *)(result + 48) = v215;
    *(float64x2_t *)(result + 64) = v218;
    *(float64x2_t *)(result + 80) = v217;
    *(float64x2_t *)(result + 96) = v220;
    *(float64x2_t *)(result + 112) = v219;
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 15));
    v1372 = vld2q_f64(v192);
    v1397 = vld2q_f64(v195);
    v221 = a3[36];
    v222 = a3[37];
    v223 = a3[38];
    v224 = a3[39];
    v225 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v221.f64[0]), v1397.val[1], v221, 1));
    v226 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v222.f64[0]), v1397.val[1], v222, 1));
    v227 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v222.f64[0]), v1372.val[1], v222, 1));
    v228 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v223.f64[0]), v1397.val[1], v223, 1));
    v229 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v223.f64[0]), v1372.val[1], v223, 1));
    v230 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v224.f64[0]), v1397.val[1], v224, 1));
    v231 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v224.f64[0]), v1372.val[1], v224, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v221.f64[0]), v1372.val[1], v221, 1));
    *(float64x2_t *)(result + 16) = v225;
    *(float64x2_t *)(result + 32) = v227;
    *(float64x2_t *)(result + 48) = v226;
    *(float64x2_t *)(result + 64) = v229;
    *(float64x2_t *)(result + 80) = v228;
    *(float64x2_t *)(result + 96) = v231;
    *(float64x2_t *)(result + 112) = v230;
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[64])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 17));
    v1338 = vld2q_f64(v192);
    v1362 = vld2q_f64(v195);
    v232 = a3[40];
    v233 = a3[41];
    v234 = a3[42];
    v235 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v232.f64[0]), v1338.val[1], v232, 1);
    v236 = vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v232.f64[0]), v1362.val[1], v232, 1);
    v237 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v233.f64[0]), v1338.val[1], v233, 1);
    v238 = vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v233.f64[0]), v1362.val[1], v233, 1);
    v239 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v234.f64[0]), v1338.val[1], v234, 1);
    v240 = vaddq_f64(*(float64x2_t *)(result + 16), v236);
    v1338.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v238);
    v241 = vaddq_f64(*(float64x2_t *)(result + 32), v237);
    v1338.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v234.f64[0]), v1362.val[1], v234, 1));
    v242 = vaddq_f64(*(float64x2_t *)(result + 64), v239);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v235);
    *(float64x2_t *)(result + 16) = v240;
    *(float64x2_t *)(result + 32) = v241;
    *(float64x2_t *)(result + 48) = v1338.val[1];
    *(float64x2_t *)(result + 64) = v242;
    *(float64x2_t *)(result + 80) = v1338.val[0];
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 19));
    v1339 = vld2q_f64(v192);
    v1363 = vld2q_f64(v195);
    v243 = a3[43];
    v244 = a3[44];
    v245 = a3[45];
    v246 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v243.f64[0]), v1339.val[1], v243, 1);
    v247 = vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v243.f64[0]), v1363.val[1], v243, 1);
    v248 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v244.f64[0]), v1339.val[1], v244, 1);
    v249 = vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v244.f64[0]), v1363.val[1], v244, 1);
    v250 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v245.f64[0]), v1339.val[1], v245, 1);
    v251 = vaddq_f64(*(float64x2_t *)(result + 16), v247);
    v1339.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v249);
    v252 = vaddq_f64(*(float64x2_t *)(result + 32), v248);
    v1339.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v245.f64[0]), v1363.val[1], v245, 1));
    v253 = vaddq_f64(*(float64x2_t *)(result + 64), v250);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v246);
    *(float64x2_t *)(result + 16) = v251;
    *(float64x2_t *)(result + 32) = v252;
    *(float64x2_t *)(result + 48) = v1339.val[1];
    *(float64x2_t *)(result + 64) = v253;
    *(float64x2_t *)(result + 80) = v1339.val[0];
    v6 = *v5;
  }
LABEL_56:
  if (!a2[32])
    goto LABEL_73;
  v254 = a3[24].f64;
  result = sub_20F9AC0F4(v6 + 9608, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 9));
  v255 = a3[24];
  v256 = a3[25];
  v257 = a3[26].f64;
  v258 = a3[26];
  v259 = a3[27];
  v260 = (float64x2_t)vzip1q_s64((int64x2_t)v258, (int64x2_t)v259);
  *(_QWORD *)&v261.f64[0] = vdupq_laneq_s64((int64x2_t)v258, 1).u64[0];
  v261.f64[1] = a3[27].f64[1];
  v262 = (float64x2_t)vzip1q_s64((int64x2_t)v255, (int64x2_t)v256);
  v263 = (float64x2_t)vzip2q_s64((int64x2_t)v255, (int64x2_t)v256);
  v264 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v260, v255.f64[0]), v261, v255, 1));
  v265 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v260, v256.f64[0]), v261, v256, 1));
  v266 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v262, v256.f64[0]), v263, v256, 1));
  v267 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v260, v258.f64[0]), v261, v258, 1));
  v268 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v262, v258.f64[0]), v263, v258, 1));
  v269 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v260, v259.f64[0]), v261, v259, 1));
  v270 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v262, v259.f64[0]), v263, v259, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v262, v255.f64[0]), v263, v255, 1));
  *(float64x2_t *)(result + 16) = v264;
  *(float64x2_t *)(result + 32) = v266;
  *(float64x2_t *)(result + 48) = v265;
  *(float64x2_t *)(result + 64) = v268;
  *(float64x2_t *)(result + 80) = v267;
  *(float64x2_t *)(result + 96) = v270;
  *(float64x2_t *)(result + 112) = v269;
  v6 = *v5;
  v271 = a2[32];
  if (!a2[32] || !a2[40])
  {
LABEL_61:
    if (v271)
      goto LABEL_62;
    goto LABEL_64;
  }
  v272 = *((_DWORD *)a2 + 9);
  v273 = *((_DWORD *)a2 + 11);
  if (v273 < v272)
  {
    v271 = 1;
    goto LABEL_61;
  }
  result = sub_20F9AC0F4(v6 + 9608, v272, v273);
  v1392 = vld2q_f64(v254);
  v1404 = vld2q_f64(v257);
  v1245 = a3[28];
  v1246 = a3[29];
  v1247 = a3[30];
  v1248 = a3[31];
  v1249 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1245.f64[0]), v1404.val[1], v1245, 1));
  v1250 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1246.f64[0]), v1404.val[1], v1246, 1));
  v1251 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1246.f64[0]), v1392.val[1], v1246, 1));
  v1252 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1247.f64[0]), v1404.val[1], v1247, 1));
  v1253 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1247.f64[0]), v1392.val[1], v1247, 1));
  v1254 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1248.f64[0]), v1404.val[1], v1248, 1));
  v1255 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1248.f64[0]), v1392.val[1], v1248, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1245.f64[0]), v1392.val[1], v1245, 1));
  *(float64x2_t *)(result + 16) = v1249;
  *(float64x2_t *)(result + 32) = v1251;
  *(float64x2_t *)(result + 48) = v1250;
  *(float64x2_t *)(result + 64) = v1253;
  *(float64x2_t *)(result + 80) = v1252;
  *(float64x2_t *)(result + 96) = v1255;
  *(float64x2_t *)(result + 112) = v1254;
  v271 = a2[32];
  v6 = *v5;
  if (a2[32])
  {
LABEL_62:
    if (a2[48])
    {
      result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 13));
      v1373 = vld2q_f64(v254);
      v1398 = vld2q_f64(v257);
      v274 = a3[32];
      v275 = a3[33];
      v276 = a3[34];
      v277 = a3[35];
      v278 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v274.f64[0]), v1398.val[1], v274, 1));
      v279 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v275.f64[0]), v1398.val[1], v275, 1));
      v280 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v275.f64[0]), v1373.val[1], v275, 1));
      v281 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v276.f64[0]), v1398.val[1], v276, 1));
      v282 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v276.f64[0]), v1373.val[1], v276, 1));
      v283 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v277.f64[0]), v1398.val[1], v277, 1));
      v284 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v277.f64[0]), v1373.val[1], v277, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v274.f64[0]), v1373.val[1], v274, 1));
      *(float64x2_t *)(result + 16) = v278;
      *(float64x2_t *)(result + 32) = v280;
      *(float64x2_t *)(result + 48) = v279;
      *(float64x2_t *)(result + 64) = v282;
      *(float64x2_t *)(result + 80) = v281;
      *(float64x2_t *)(result + 96) = v284;
      *(float64x2_t *)(result + 112) = v283;
      v271 = a2[32];
      v6 = *v5;
    }
  }
LABEL_64:
  if (v271 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 15));
    v1374 = vld2q_f64(v254);
    v1399 = vld2q_f64(v257);
    v285 = a3[36];
    v286 = a3[37];
    v287 = a3[38];
    v288 = a3[39];
    v289 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v285.f64[0]), v1399.val[1], v285, 1));
    v290 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v286.f64[0]), v1399.val[1], v286, 1));
    v291 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v286.f64[0]), v1374.val[1], v286, 1));
    v292 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v287.f64[0]), v1399.val[1], v287, 1));
    v293 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v287.f64[0]), v1374.val[1], v287, 1));
    v294 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v288.f64[0]), v1399.val[1], v288, 1));
    v295 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v288.f64[0]), v1374.val[1], v288, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v285.f64[0]), v1374.val[1], v285, 1));
    *(float64x2_t *)(result + 16) = v289;
    *(float64x2_t *)(result + 32) = v291;
    *(float64x2_t *)(result + 48) = v290;
    *(float64x2_t *)(result + 64) = v293;
    *(float64x2_t *)(result + 80) = v292;
    *(float64x2_t *)(result + 96) = v295;
    *(float64x2_t *)(result + 112) = v294;
    v271 = a2[32];
    v6 = *v5;
  }
  if (v271 && a2[64])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 17));
    v1340 = vld2q_f64(v254);
    v1364 = vld2q_f64(v257);
    v296 = a3[40];
    v297 = a3[41];
    v298 = a3[42];
    v299 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v296.f64[0]), v1340.val[1], v296, 1);
    v300 = vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v296.f64[0]), v1364.val[1], v296, 1);
    v301 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v297.f64[0]), v1340.val[1], v297, 1);
    v302 = vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v297.f64[0]), v1364.val[1], v297, 1);
    v303 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v298.f64[0]), v1340.val[1], v298, 1);
    v304 = vaddq_f64(*(float64x2_t *)(result + 16), v300);
    v1340.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v302);
    v305 = vaddq_f64(*(float64x2_t *)(result + 32), v301);
    v1340.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v298.f64[0]), v1364.val[1], v298, 1));
    v306 = vaddq_f64(*(float64x2_t *)(result + 64), v303);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v299);
    *(float64x2_t *)(result + 16) = v304;
    *(float64x2_t *)(result + 32) = v305;
    *(float64x2_t *)(result + 48) = v1340.val[1];
    *(float64x2_t *)(result + 64) = v306;
    *(float64x2_t *)(result + 80) = v1340.val[0];
    v271 = a2[32];
    v6 = *v5;
  }
  if (v271 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 19));
    v1341 = vld2q_f64(v254);
    v1365 = vld2q_f64(v257);
    v307 = a3[43];
    v308 = a3[44];
    v309 = a3[45];
    v310 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v307.f64[0]), v1341.val[1], v307, 1);
    v311 = vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v307.f64[0]), v1365.val[1], v307, 1);
    v312 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v308.f64[0]), v1341.val[1], v308, 1);
    v313 = vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v308.f64[0]), v1365.val[1], v308, 1);
    v314 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v309.f64[0]), v1341.val[1], v309, 1);
    v315 = vaddq_f64(*(float64x2_t *)(result + 16), v311);
    v1341.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v313);
    v316 = vaddq_f64(*(float64x2_t *)(result + 32), v312);
    v1341.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v309.f64[0]), v1365.val[1], v309, 1));
    v317 = vaddq_f64(*(float64x2_t *)(result + 64), v314);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v310);
    *(float64x2_t *)(result + 16) = v315;
    *(float64x2_t *)(result + 32) = v316;
    *(float64x2_t *)(result + 48) = v1341.val[1];
    *(float64x2_t *)(result + 64) = v317;
    *(float64x2_t *)(result + 80) = v1341.val[0];
    v6 = *v5;
  }
LABEL_73:
  v318 = a2[24];
  if (a2[24] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 1));
    v319 = a3[18].f64;
    v1326 = vld2q_f64(v319);
    v320 = a3[20].f64;
    v1342 = vld2q_f64(v320);
    v321 = a3[22].f64;
    v322 = a3[1];
    v323 = a3[2];
    v324 = a3[3];
    v325 = a3[4];
    v326 = a3[5];
    v327 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], a3->f64[0]), v1326.val[1], *a3, 1);
    v328 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], a3->f64[0]), v1342.val[1], *a3, 1);
    v329 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v322.f64[0]), v1326.val[1], v322, 1);
    v330 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v322.f64[0]), v1342.val[1], v322, 1);
    v331 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v323.f64[0]), v1326.val[1], v323, 1);
    v332 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v323.f64[0]), v1342.val[1], v323, 1);
    v333 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v324.f64[0]), v1326.val[1], v324, 1);
    v334 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v324.f64[0]), v1342.val[1], v324, 1);
    v335 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v325.f64[0]), v1326.val[1], v325, 1);
    v336 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v325.f64[0]), v1342.val[1], v325, 1);
    v337 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v326.f64[0]), v1326.val[1], v326, 1);
    v1326.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v326.f64[0]), v1342.val[1], v326, 1);
    *(float64x2x2_t *)((char *)&v1326 + 16) = vld2q_f64(v321);
    v338 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v322.f64[0]), v1342.val[0], v322, 1);
    v339 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v323.f64[0]), v1342.val[0], v323, 1);
    v340 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v324.f64[0]), v1342.val[0], v324, 1);
    v341 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v325.f64[0]), v1342.val[0], v325, 1);
    v342 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v326.f64[0]), v1342.val[0], v326, 1);
    v1326.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], a3->f64[0]), v1342.val[0], *a3, 1));
    v1342.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v328);
    v343 = vaddq_f64(*(float64x2_t *)result, v327);
    v344 = vaddq_f64(*(float64x2_t *)(result + 80), v338);
    v345 = vaddq_f64(*(float64x2_t *)(result + 64), v330);
    v1342.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v329);
    v346 = vaddq_f64(*(float64x2_t *)(result + 128), v339);
    v347 = vaddq_f64(*(float64x2_t *)(result + 112), v332);
    v348 = vaddq_f64(*(float64x2_t *)(result + 96), v331);
    v349 = vaddq_f64(*(float64x2_t *)(result + 176), v340);
    v350 = vaddq_f64(*(float64x2_t *)(result + 160), v334);
    v351 = vaddq_f64(*(float64x2_t *)(result + 144), v333);
    v352 = *(float64x2_t *)(result + 240);
    v353 = vaddq_f64(*(float64x2_t *)(result + 224), v341);
    v354 = vaddq_f64(*(float64x2_t *)(result + 208), v336);
    v355 = vaddq_f64(*(float64x2_t *)(result + 192), v335);
    v356 = vaddq_f64(*(float64x2_t *)(result + 272), v342);
    v1326.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1326.val[0]);
    *(float64x2_t *)result = v343;
    *(float64x2_t *)(result + 16) = v1342.val[1];
    *(float64x2_t *)(result + 32) = v1326.val[1];
    *(float64x2_t *)(result + 48) = v1342.val[0];
    *(float64x2_t *)(result + 64) = v345;
    *(float64x2_t *)(result + 80) = v344;
    *(float64x2_t *)(result + 96) = v348;
    *(float64x2_t *)(result + 112) = v347;
    *(float64x2_t *)(result + 128) = v346;
    *(float64x2_t *)(result + 144) = v351;
    *(float64x2_t *)(result + 160) = v350;
    *(float64x2_t *)(result + 176) = v349;
    *(float64x2_t *)(result + 192) = v355;
    *(float64x2_t *)(result + 208) = v354;
    *(float64x2_t *)(result + 224) = v353;
    *(float64x2_t *)(result + 240) = vaddq_f64(v352, v337);
    *(float64x2_t *)(result + 256) = v1326.val[0];
    *(float64x2_t *)(result + 272) = v356;
    v318 = a2[24];
    v6 = *v5;
  }
  if (v318 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 3));
    v357 = a3[18].f64;
    v1327 = vld2q_f64(v357);
    v358 = a3[20].f64;
    v1343 = vld2q_f64(v358);
    v359 = a3[22].f64;
    v360 = a3[6];
    v361 = a3[7];
    v362 = a3[8];
    v363 = a3[9];
    v364 = a3[10];
    v365 = a3[11];
    v366 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v360.f64[0]), v1327.val[1], v360, 1);
    v367 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v360.f64[0]), v1343.val[1], v360, 1);
    v368 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v361.f64[0]), v1327.val[1], v361, 1);
    v369 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v361.f64[0]), v1343.val[1], v361, 1);
    v370 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v362.f64[0]), v1327.val[1], v362, 1);
    v371 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v362.f64[0]), v1343.val[1], v362, 1);
    v372 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v363.f64[0]), v1327.val[1], v363, 1);
    v373 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v363.f64[0]), v1343.val[1], v363, 1);
    v374 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v364.f64[0]), v1327.val[1], v364, 1);
    v375 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v364.f64[0]), v1343.val[1], v364, 1);
    v376 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v365.f64[0]), v1327.val[1], v365, 1);
    v1327.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v365.f64[0]), v1343.val[1], v365, 1);
    *(float64x2x2_t *)((char *)&v1327 + 16) = vld2q_f64(v359);
    v1343.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v360.f64[0]), v1343.val[0], v360, 1);
    v377 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v361.f64[0]), v1343.val[0], v361, 1);
    v378 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v362.f64[0]), v1343.val[0], v362, 1);
    v379 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v363.f64[0]), v1343.val[0], v363, 1);
    v380 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v364.f64[0]), v1343.val[0], v364, 1);
    v381 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v365.f64[0]), v1343.val[0], v365, 1);
    v1327.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1343.val[1]);
    v1343.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v367);
    v382 = vaddq_f64(*(float64x2_t *)result, v366);
    v383 = vaddq_f64(*(float64x2_t *)(result + 80), v377);
    v384 = vaddq_f64(*(float64x2_t *)(result + 64), v369);
    v1343.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v368);
    v385 = vaddq_f64(*(float64x2_t *)(result + 128), v378);
    v386 = vaddq_f64(*(float64x2_t *)(result + 112), v371);
    v387 = vaddq_f64(*(float64x2_t *)(result + 96), v370);
    v388 = vaddq_f64(*(float64x2_t *)(result + 176), v379);
    v389 = vaddq_f64(*(float64x2_t *)(result + 160), v373);
    v390 = vaddq_f64(*(float64x2_t *)(result + 144), v372);
    v391 = *(float64x2_t *)(result + 240);
    v392 = vaddq_f64(*(float64x2_t *)(result + 224), v380);
    v393 = vaddq_f64(*(float64x2_t *)(result + 208), v375);
    v394 = vaddq_f64(*(float64x2_t *)(result + 192), v374);
    v395 = vaddq_f64(*(float64x2_t *)(result + 272), v381);
    v1327.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1327.val[0]);
    *(float64x2_t *)result = v382;
    *(float64x2_t *)(result + 16) = v1343.val[1];
    *(float64x2_t *)(result + 32) = v1327.val[1];
    *(float64x2_t *)(result + 48) = v1343.val[0];
    *(float64x2_t *)(result + 64) = v384;
    *(float64x2_t *)(result + 80) = v383;
    *(float64x2_t *)(result + 96) = v387;
    *(float64x2_t *)(result + 112) = v386;
    *(float64x2_t *)(result + 128) = v385;
    *(float64x2_t *)(result + 144) = v390;
    *(float64x2_t *)(result + 160) = v389;
    *(float64x2_t *)(result + 176) = v388;
    *(float64x2_t *)(result + 192) = v394;
    *(float64x2_t *)(result + 208) = v393;
    *(float64x2_t *)(result + 224) = v392;
    *(float64x2_t *)(result + 240) = vaddq_f64(v391, v376);
    *(float64x2_t *)(result + 256) = v1327.val[0];
    *(float64x2_t *)(result + 272) = v395;
    v6 = *v5;
    v318 = a2[24];
  }
  if (v318 && a2[16])
  {
    v396 = *((_DWORD *)a2 + 7);
    v397 = *((_DWORD *)a2 + 5);
    if (v397 < v396)
      goto LABEL_85;
    result = sub_20F9AC33C(v6 + 104, v396, v397);
    v398 = a3[18].f64;
    v1328 = vld2q_f64(v398);
    v399 = a3[20].f64;
    v1344 = vld2q_f64(v399);
    v400 = a3[22].f64;
    v401 = a3[12];
    v402 = a3[13];
    v403 = a3[14];
    v404 = a3[15];
    v405 = a3[16];
    v406 = a3[17];
    v407 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v401.f64[0]), v1328.val[1], v401, 1);
    v408 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v401.f64[0]), v1344.val[1], v401, 1);
    v409 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v402.f64[0]), v1328.val[1], v402, 1);
    v410 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v402.f64[0]), v1344.val[1], v402, 1);
    v411 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v403.f64[0]), v1328.val[1], v403, 1);
    v412 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v403.f64[0]), v1344.val[1], v403, 1);
    v413 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v404.f64[0]), v1328.val[1], v404, 1);
    v414 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v404.f64[0]), v1344.val[1], v404, 1);
    v415 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v405.f64[0]), v1328.val[1], v405, 1);
    v416 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v405.f64[0]), v1344.val[1], v405, 1);
    v417 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v406.f64[0]), v1328.val[1], v406, 1);
    v1328.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v406.f64[0]), v1344.val[1], v406, 1);
    *(float64x2x2_t *)((char *)&v1328 + 16) = vld2q_f64(v400);
    v1344.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v401.f64[0]), v1344.val[0], v401, 1);
    v418 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v402.f64[0]), v1344.val[0], v402, 1);
    v419 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v403.f64[0]), v1344.val[0], v403, 1);
    v420 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v404.f64[0]), v1344.val[0], v404, 1);
    v421 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v405.f64[0]), v1344.val[0], v405, 1);
    v422 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v406.f64[0]), v1344.val[0], v406, 1);
    v1328.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1344.val[1]);
    v1344.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v408);
    v423 = vaddq_f64(*(float64x2_t *)result, v407);
    v424 = vaddq_f64(*(float64x2_t *)(result + 80), v418);
    v425 = vaddq_f64(*(float64x2_t *)(result + 64), v410);
    v1344.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v409);
    v426 = vaddq_f64(*(float64x2_t *)(result + 128), v419);
    v427 = vaddq_f64(*(float64x2_t *)(result + 112), v412);
    v428 = vaddq_f64(*(float64x2_t *)(result + 96), v411);
    v429 = vaddq_f64(*(float64x2_t *)(result + 176), v420);
    v430 = vaddq_f64(*(float64x2_t *)(result + 160), v414);
    v431 = vaddq_f64(*(float64x2_t *)(result + 144), v413);
    v432 = *(float64x2_t *)(result + 240);
    v433 = vaddq_f64(*(float64x2_t *)(result + 224), v421);
    v434 = vaddq_f64(*(float64x2_t *)(result + 208), v416);
    v435 = vaddq_f64(*(float64x2_t *)(result + 192), v415);
    v436 = vaddq_f64(*(float64x2_t *)(result + 272), v422);
    v1328.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1328.val[0]);
    *(float64x2_t *)result = v423;
    *(float64x2_t *)(result + 16) = v1344.val[1];
    *(float64x2_t *)(result + 32) = v1328.val[1];
    *(float64x2_t *)(result + 48) = v1344.val[0];
    *(float64x2_t *)(result + 64) = v425;
    *(float64x2_t *)(result + 80) = v424;
    *(float64x2_t *)(result + 96) = v428;
    *(float64x2_t *)(result + 112) = v427;
    *(float64x2_t *)(result + 128) = v426;
    *(float64x2_t *)(result + 144) = v431;
    *(float64x2_t *)(result + 160) = v430;
    *(float64x2_t *)(result + 176) = v429;
    *(float64x2_t *)(result + 192) = v435;
    *(float64x2_t *)(result + 208) = v434;
    *(float64x2_t *)(result + 224) = v433;
    *(float64x2_t *)(result + 240) = vaddq_f64(v432, v417);
    *(float64x2_t *)(result + 256) = v1328.val[0];
    *(float64x2_t *)(result + 272) = v436;
    v318 = a2[24];
    v6 = *v5;
  }
  if (!v318)
    goto LABEL_103;
  v396 = *((_DWORD *)a2 + 7);
LABEL_85:
  v437 = a3[18].f64;
  result = sub_20F9AC33C(v6 + 104, v396, v396);
  v438 = a3[18];
  v439 = a3[19];
  v440 = a3[20];
  v441 = a3[21];
  v442 = a3[22];
  v443 = a3[23];
  v444 = (float64x2_t)vzip1q_s64((int64x2_t)v440, (int64x2_t)v441);
  v445 = (float64x2_t)vzip1q_s64((int64x2_t)v442, (int64x2_t)v443);
  *(_QWORD *)&v446.f64[0] = vdupq_laneq_s64((int64x2_t)v440, 1).u64[0];
  v446.f64[1] = a3[21].f64[1];
  *(_QWORD *)&v447.f64[0] = vdupq_laneq_s64((int64x2_t)v442, 1).u64[0];
  v447.f64[1] = a3[23].f64[1];
  v448 = (float64x2_t)vzip1q_s64((int64x2_t)v438, (int64x2_t)v439);
  v449 = (float64x2_t)vzip2q_s64((int64x2_t)v438, (int64x2_t)v439);
  v450 = vmlaq_laneq_f64(vmulq_n_f64(v448, v438.f64[0]), v449, v438, 1);
  v451 = vmlaq_laneq_f64(vmulq_n_f64(v444, v438.f64[0]), v446, v438, 1);
  v452 = vmlaq_laneq_f64(vmulq_n_f64(v445, v438.f64[0]), v447, v438, 1);
  v453 = vmlaq_laneq_f64(vmulq_n_f64(v448, v439.f64[0]), v449, v439, 1);
  v454 = vmlaq_laneq_f64(vmulq_n_f64(v444, v439.f64[0]), v446, v439, 1);
  v455 = vmlaq_laneq_f64(vmulq_n_f64(v445, v439.f64[0]), v447, v439, 1);
  v456 = vmlaq_laneq_f64(vmulq_n_f64(v448, v440.f64[0]), v449, v440, 1);
  v457 = vmlaq_laneq_f64(vmulq_n_f64(v444, v440.f64[0]), v446, v440, 1);
  v458 = vmlaq_laneq_f64(vmulq_n_f64(v445, v440.f64[0]), v447, v440, 1);
  v459 = vmlaq_laneq_f64(vmulq_n_f64(v448, v441.f64[0]), v449, v441, 1);
  v460 = vmlaq_laneq_f64(vmulq_n_f64(v444, v441.f64[0]), v446, v441, 1);
  v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v441.f64[0]), v447, v441, 1);
  v462 = vmlaq_laneq_f64(vmulq_n_f64(v448, v442.f64[0]), v449, v442, 1);
  v463 = vmlaq_laneq_f64(vmulq_n_f64(v444, v442.f64[0]), v446, v442, 1);
  v464 = vmlaq_laneq_f64(vmulq_n_f64(v445, v442.f64[0]), v447, v442, 1);
  v465 = vmlaq_laneq_f64(vmulq_n_f64(v448, v443.f64[0]), v449, v443, 1);
  v466 = vmlaq_laneq_f64(vmulq_n_f64(v444, v443.f64[0]), v446, v443, 1);
  v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v443.f64[0]), v447, v443, 1);
  v468 = vaddq_f64(*(float64x2_t *)(result + 32), v452);
  v469 = vaddq_f64(*(float64x2_t *)(result + 16), v451);
  v470 = vaddq_f64(*(float64x2_t *)result, v450);
  v471 = vaddq_f64(*(float64x2_t *)(result + 80), v455);
  v472 = vaddq_f64(*(float64x2_t *)(result + 64), v454);
  v473 = vaddq_f64(*(float64x2_t *)(result + 48), v453);
  v474 = vaddq_f64(*(float64x2_t *)(result + 128), v458);
  v475 = vaddq_f64(*(float64x2_t *)(result + 112), v457);
  v476 = vaddq_f64(*(float64x2_t *)(result + 96), v456);
  v477 = vaddq_f64(*(float64x2_t *)(result + 176), v461);
  v478 = vaddq_f64(*(float64x2_t *)(result + 160), v460);
  v479 = vaddq_f64(*(float64x2_t *)(result + 144), v459);
  v480 = *(float64x2_t *)(result + 240);
  v481 = vaddq_f64(*(float64x2_t *)(result + 224), v464);
  v482 = vaddq_f64(*(float64x2_t *)(result + 208), v463);
  v483 = vaddq_f64(*(float64x2_t *)(result + 192), v462);
  v484 = vaddq_f64(*(float64x2_t *)(result + 272), v467);
  v485 = vaddq_f64(*(float64x2_t *)(result + 256), v466);
  *(float64x2_t *)result = v470;
  *(float64x2_t *)(result + 16) = v469;
  *(float64x2_t *)(result + 32) = v468;
  *(float64x2_t *)(result + 48) = v473;
  *(float64x2_t *)(result + 64) = v472;
  *(float64x2_t *)(result + 80) = v471;
  *(float64x2_t *)(result + 96) = v476;
  *(float64x2_t *)(result + 112) = v475;
  *(float64x2_t *)(result + 128) = v474;
  *(float64x2_t *)(result + 144) = v479;
  *(float64x2_t *)(result + 160) = v478;
  *(float64x2_t *)(result + 176) = v477;
  *(float64x2_t *)(result + 192) = v483;
  *(float64x2_t *)(result + 208) = v482;
  *(float64x2_t *)(result + 224) = v481;
  *(float64x2_t *)(result + 240) = vaddq_f64(v480, v465);
  *(float64x2_t *)(result + 256) = v485;
  *(float64x2_t *)(result + 272) = v484;
  v486 = a3[20].f64;
  v487 = a3[22].f64;
  v488 = a2[24];
  v6 = *v5;
  if (a2[24] && a2[32])
  {
    result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 9));
    v1375 = vld2q_f64(v437);
    v489 = *(float64x2_t *)(result + 144);
    v1406 = vld2q_f64(v486);
    v1426 = vld2q_f64(v487);
    v490 = a3[24];
    v491 = a3[25];
    v492 = a3[26];
    v493 = a3[27];
    v494 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v490.f64[0]), v1375.val[1], v490, 1);
    v495 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v490.f64[0]), v1406.val[1], v490, 1);
    v496 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v490.f64[0]), v1426.val[1], v490, 1);
    v497 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v491.f64[0]), v1375.val[1], v491, 1);
    v498 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v491.f64[0]), v1406.val[1], v491, 1);
    v499 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v491.f64[0]), v1426.val[1], v491, 1);
    v500 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v492.f64[0]), v1375.val[1], v492, 1);
    v501 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v492.f64[0]), v1406.val[1], v492, 1);
    v502 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v492.f64[0]), v1426.val[1], v492, 1);
    v503 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v493.f64[0]), v1375.val[1], v493, 1);
    v504 = vaddq_f64(*(float64x2_t *)(result + 32), v496);
    v505 = vaddq_f64(*(float64x2_t *)(result + 16), v495);
    v506 = vaddq_f64(*(float64x2_t *)(result + 80), v499);
    v507 = vaddq_f64(*(float64x2_t *)(result + 64), v498);
    v508 = vaddq_f64(*(float64x2_t *)(result + 48), v497);
    v509 = vaddq_f64(*(float64x2_t *)(result + 128), v502);
    v510 = vaddq_f64(*(float64x2_t *)(result + 112), v501);
    v511 = vaddq_f64(*(float64x2_t *)(result + 96), v500);
    v1375.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v493.f64[0]), v1426.val[1], v493, 1));
    v1375.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v493.f64[0]), v1406.val[1], v493, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v494);
    *(float64x2_t *)(result + 16) = v505;
    *(float64x2_t *)(result + 32) = v504;
    *(float64x2_t *)(result + 48) = v508;
    *(float64x2_t *)(result + 64) = v507;
    *(float64x2_t *)(result + 80) = v506;
    *(float64x2_t *)(result + 96) = v511;
    *(float64x2_t *)(result + 112) = v510;
    *(float64x2_t *)(result + 128) = v509;
    *(float64x2_t *)(result + 144) = vaddq_f64(v489, v503);
    *(float64x2x2_t *)(result + 160) = v1375;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[40])
  {
    result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 11));
    v1376 = vld2q_f64(v437);
    v512 = *(float64x2_t *)(result + 144);
    v1407 = vld2q_f64(v486);
    v1427 = vld2q_f64(v487);
    v513 = a3[28];
    v514 = a3[29];
    v515 = a3[30];
    v516 = a3[31];
    v517 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v513.f64[0]), v1376.val[1], v513, 1);
    v518 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v513.f64[0]), v1407.val[1], v513, 1);
    v519 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v513.f64[0]), v1427.val[1], v513, 1);
    v520 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v514.f64[0]), v1376.val[1], v514, 1);
    v521 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v514.f64[0]), v1407.val[1], v514, 1);
    v522 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v514.f64[0]), v1427.val[1], v514, 1);
    v523 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v515.f64[0]), v1376.val[1], v515, 1);
    v524 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v515.f64[0]), v1407.val[1], v515, 1);
    v525 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v515.f64[0]), v1427.val[1], v515, 1);
    v526 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v516.f64[0]), v1376.val[1], v516, 1);
    v527 = vaddq_f64(*(float64x2_t *)(result + 32), v519);
    v528 = vaddq_f64(*(float64x2_t *)(result + 16), v518);
    v529 = vaddq_f64(*(float64x2_t *)(result + 80), v522);
    v530 = vaddq_f64(*(float64x2_t *)(result + 64), v521);
    v531 = vaddq_f64(*(float64x2_t *)(result + 48), v520);
    v532 = vaddq_f64(*(float64x2_t *)(result + 128), v525);
    v533 = vaddq_f64(*(float64x2_t *)(result + 112), v524);
    v534 = vaddq_f64(*(float64x2_t *)(result + 96), v523);
    v1376.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v516.f64[0]), v1427.val[1], v516, 1));
    v1376.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v516.f64[0]), v1407.val[1], v516, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v517);
    *(float64x2_t *)(result + 16) = v528;
    *(float64x2_t *)(result + 32) = v527;
    *(float64x2_t *)(result + 48) = v531;
    *(float64x2_t *)(result + 64) = v530;
    *(float64x2_t *)(result + 80) = v529;
    *(float64x2_t *)(result + 96) = v534;
    *(float64x2_t *)(result + 112) = v533;
    *(float64x2_t *)(result + 128) = v532;
    *(float64x2_t *)(result + 144) = vaddq_f64(v512, v526);
    *(float64x2x2_t *)(result + 160) = v1376;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[48])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 13));
    v1377 = vld2q_f64(v437);
    v535 = *(float64x2_t *)(result + 144);
    v1408 = vld2q_f64(v486);
    v1428 = vld2q_f64(v487);
    v536 = a3[32];
    v537 = a3[33];
    v538 = a3[34];
    v539 = a3[35];
    v540 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v536.f64[0]), v1377.val[1], v536, 1);
    v541 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v536.f64[0]), v1408.val[1], v536, 1);
    v542 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v536.f64[0]), v1428.val[1], v536, 1);
    v543 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v537.f64[0]), v1377.val[1], v537, 1);
    v544 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v537.f64[0]), v1408.val[1], v537, 1);
    v545 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v537.f64[0]), v1428.val[1], v537, 1);
    v546 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v538.f64[0]), v1377.val[1], v538, 1);
    v547 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v538.f64[0]), v1408.val[1], v538, 1);
    v548 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v538.f64[0]), v1428.val[1], v538, 1);
    v549 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v539.f64[0]), v1377.val[1], v539, 1);
    v550 = vaddq_f64(*(float64x2_t *)(result + 32), v542);
    v551 = vaddq_f64(*(float64x2_t *)(result + 16), v541);
    v552 = vaddq_f64(*(float64x2_t *)(result + 80), v545);
    v553 = vaddq_f64(*(float64x2_t *)(result + 64), v544);
    v554 = vaddq_f64(*(float64x2_t *)(result + 48), v543);
    v555 = vaddq_f64(*(float64x2_t *)(result + 128), v548);
    v556 = vaddq_f64(*(float64x2_t *)(result + 112), v547);
    v557 = vaddq_f64(*(float64x2_t *)(result + 96), v546);
    v1377.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v539.f64[0]), v1428.val[1], v539, 1));
    v1377.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v539.f64[0]), v1408.val[1], v539, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v540);
    *(float64x2_t *)(result + 16) = v551;
    *(float64x2_t *)(result + 32) = v550;
    *(float64x2_t *)(result + 48) = v554;
    *(float64x2_t *)(result + 64) = v553;
    *(float64x2_t *)(result + 80) = v552;
    *(float64x2_t *)(result + 96) = v557;
    *(float64x2_t *)(result + 112) = v556;
    *(float64x2_t *)(result + 128) = v555;
    *(float64x2_t *)(result + 144) = vaddq_f64(v535, v549);
    *(float64x2x2_t *)(result + 160) = v1377;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[56])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 15));
    v1378 = vld2q_f64(v437);
    v558 = *(float64x2_t *)(result + 144);
    v1409 = vld2q_f64(v486);
    v1429 = vld2q_f64(v487);
    v559 = a3[36];
    v560 = a3[37];
    v561 = a3[38];
    v562 = a3[39];
    v563 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v559.f64[0]), v1378.val[1], v559, 1);
    v564 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v559.f64[0]), v1409.val[1], v559, 1);
    v565 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v559.f64[0]), v1429.val[1], v559, 1);
    v566 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v560.f64[0]), v1378.val[1], v560, 1);
    v567 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v560.f64[0]), v1409.val[1], v560, 1);
    v568 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v560.f64[0]), v1429.val[1], v560, 1);
    v569 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v561.f64[0]), v1378.val[1], v561, 1);
    v570 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v561.f64[0]), v1409.val[1], v561, 1);
    v571 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v561.f64[0]), v1429.val[1], v561, 1);
    v572 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v562.f64[0]), v1378.val[1], v562, 1);
    v573 = vaddq_f64(*(float64x2_t *)(result + 32), v565);
    v574 = vaddq_f64(*(float64x2_t *)(result + 16), v564);
    v575 = vaddq_f64(*(float64x2_t *)(result + 80), v568);
    v576 = vaddq_f64(*(float64x2_t *)(result + 64), v567);
    v577 = vaddq_f64(*(float64x2_t *)(result + 48), v566);
    v578 = vaddq_f64(*(float64x2_t *)(result + 128), v571);
    v579 = vaddq_f64(*(float64x2_t *)(result + 112), v570);
    v580 = vaddq_f64(*(float64x2_t *)(result + 96), v569);
    v1378.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v562.f64[0]), v1429.val[1], v562, 1));
    v1378.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v562.f64[0]), v1409.val[1], v562, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v563);
    *(float64x2_t *)(result + 16) = v574;
    *(float64x2_t *)(result + 32) = v573;
    *(float64x2_t *)(result + 48) = v577;
    *(float64x2_t *)(result + 64) = v576;
    *(float64x2_t *)(result + 80) = v575;
    *(float64x2_t *)(result + 96) = v580;
    *(float64x2_t *)(result + 112) = v579;
    *(float64x2_t *)(result + 128) = v578;
    *(float64x2_t *)(result + 144) = vaddq_f64(v558, v572);
    *(float64x2x2_t *)(result + 160) = v1378;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[64])
  {
    result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 17));
    v1354 = vld2q_f64(v437);
    v1379 = vld2q_f64(v486);
    v1410 = vld2q_f64(v487);
    v581 = a3[40];
    v582 = a3[41];
    v583 = a3[42];
    v584 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v581.f64[0]), v1354.val[1], v581, 1);
    v585 = vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v581.f64[0]), v1379.val[1], v581, 1);
    v586 = vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v581.f64[0]), v1410.val[1], v581, 1);
    v587 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v582.f64[0]), v1354.val[1], v582, 1);
    v588 = vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v582.f64[0]), v1379.val[1], v582, 1);
    v589 = vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v582.f64[0]), v1410.val[1], v582, 1);
    v590 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v583.f64[0]), v1354.val[1], v583, 1);
    v591 = vaddq_f64(*(float64x2_t *)(result + 32), v586);
    v592 = vaddq_f64(*(float64x2_t *)(result + 16), v585);
    v593 = vaddq_f64(*(float64x2_t *)(result + 80), v589);
    v594 = vaddq_f64(*(float64x2_t *)(result + 64), v588);
    v595 = vaddq_f64(*(float64x2_t *)(result + 48), v587);
    v1354.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v583.f64[0]), v1410.val[1], v583, 1));
    v1354.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v583.f64[0]), v1379.val[1], v583, 1));
    v1379.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v590);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v584);
    *(float64x2_t *)(result + 16) = v592;
    *(float64x2_t *)(result + 32) = v591;
    *(float64x2_t *)(result + 48) = v595;
    *(float64x2_t *)(result + 64) = v594;
    *(float64x2_t *)(result + 80) = v593;
    *(float64x2_t *)(result + 96) = v1379.val[0];
    *(float64x2x2_t *)(result + 112) = v1354;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[72])
  {
    result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 19));
    v1345 = vld2q_f64(v437);
    v1366 = vld2q_f64(v486);
    v1400 = vld2q_f64(v487);
    v596 = a3[43];
    v597 = a3[44];
    v598 = a3[45];
    v599 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v596.f64[0]), v1345.val[1], v596, 1);
    v600 = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v596.f64[0]), v1366.val[1], v596, 1);
    v601 = vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v596.f64[0]), v1400.val[1], v596, 1);
    v602 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v597.f64[0]), v1345.val[1], v597, 1);
    v603 = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v597.f64[0]), v1366.val[1], v597, 1);
    v604 = vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v597.f64[0]), v1400.val[1], v597, 1);
    v605 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v598.f64[0]), v1345.val[1], v598, 1);
    v1345.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v598.f64[0]), v1366.val[1], v598, 1);
    v606 = vaddq_f64(*(float64x2_t *)(result + 32), v601);
    v607 = vaddq_f64(*(float64x2_t *)(result + 16), v600);
    v1366.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v604);
    v1366.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v603);
    v608 = vaddq_f64(*(float64x2_t *)(result + 48), v602);
    v1345.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v598.f64[0]), v1400.val[1], v598, 1));
    v1345.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1345.val[0]);
    v609 = vaddq_f64(*(float64x2_t *)(result + 96), v605);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v599);
    *(float64x2_t *)(result + 16) = v607;
    *(float64x2_t *)(result + 32) = v606;
    *(float64x2_t *)(result + 48) = v608;
    *(float64x2_t *)(result + 64) = v1366.val[1];
    *(float64x2_t *)(result + 80) = v1366.val[0];
    *(float64x2_t *)(result + 96) = v609;
    *(float64x2x2_t *)(result + 112) = v1345;
    v6 = *v5;
  }
LABEL_103:
  v610 = a2[16];
  if (a2[16] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 1));
    v611 = a3[12].f64;
    v1329 = vld2q_f64(v611);
    v612 = a3[14].f64;
    v1346 = vld2q_f64(v612);
    v613 = a3[16].f64;
    v614 = a3[1];
    v615 = a3[2];
    v616 = a3[3];
    v617 = a3[4];
    v618 = a3[5];
    v619 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], a3->f64[0]), v1329.val[1], *a3, 1);
    v620 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], a3->f64[0]), v1346.val[1], *a3, 1);
    v621 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v614.f64[0]), v1329.val[1], v614, 1);
    v622 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v614.f64[0]), v1346.val[1], v614, 1);
    v623 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v615.f64[0]), v1329.val[1], v615, 1);
    v624 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v615.f64[0]), v1346.val[1], v615, 1);
    v625 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v616.f64[0]), v1329.val[1], v616, 1);
    v626 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v616.f64[0]), v1346.val[1], v616, 1);
    v627 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v617.f64[0]), v1329.val[1], v617, 1);
    v628 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v617.f64[0]), v1346.val[1], v617, 1);
    v629 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v618.f64[0]), v1329.val[1], v618, 1);
    v1329.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v618.f64[0]), v1346.val[1], v618, 1);
    *(float64x2x2_t *)((char *)&v1329 + 16) = vld2q_f64(v613);
    v630 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v614.f64[0]), v1346.val[0], v614, 1);
    v631 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v615.f64[0]), v1346.val[0], v615, 1);
    v632 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v616.f64[0]), v1346.val[0], v616, 1);
    v633 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v617.f64[0]), v1346.val[0], v617, 1);
    v634 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v618.f64[0]), v1346.val[0], v618, 1);
    v1329.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], a3->f64[0]), v1346.val[0], *a3, 1));
    v1346.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v620);
    v635 = vaddq_f64(*(float64x2_t *)result, v619);
    v636 = vaddq_f64(*(float64x2_t *)(result + 80), v630);
    v637 = vaddq_f64(*(float64x2_t *)(result + 64), v622);
    v1346.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v621);
    v638 = vaddq_f64(*(float64x2_t *)(result + 128), v631);
    v639 = vaddq_f64(*(float64x2_t *)(result + 112), v624);
    v640 = vaddq_f64(*(float64x2_t *)(result + 96), v623);
    v641 = vaddq_f64(*(float64x2_t *)(result + 176), v632);
    v642 = vaddq_f64(*(float64x2_t *)(result + 160), v626);
    v643 = vaddq_f64(*(float64x2_t *)(result + 144), v625);
    v644 = *(float64x2_t *)(result + 240);
    v645 = vaddq_f64(*(float64x2_t *)(result + 224), v633);
    v646 = vaddq_f64(*(float64x2_t *)(result + 208), v628);
    v647 = vaddq_f64(*(float64x2_t *)(result + 192), v627);
    v648 = vaddq_f64(*(float64x2_t *)(result + 272), v634);
    v1329.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1329.val[0]);
    *(float64x2_t *)result = v635;
    *(float64x2_t *)(result + 16) = v1346.val[1];
    *(float64x2_t *)(result + 32) = v1329.val[1];
    *(float64x2_t *)(result + 48) = v1346.val[0];
    *(float64x2_t *)(result + 64) = v637;
    *(float64x2_t *)(result + 80) = v636;
    *(float64x2_t *)(result + 96) = v640;
    *(float64x2_t *)(result + 112) = v639;
    *(float64x2_t *)(result + 128) = v638;
    *(float64x2_t *)(result + 144) = v643;
    *(float64x2_t *)(result + 160) = v642;
    *(float64x2_t *)(result + 176) = v641;
    *(float64x2_t *)(result + 192) = v647;
    *(float64x2_t *)(result + 208) = v646;
    *(float64x2_t *)(result + 224) = v645;
    *(float64x2_t *)(result + 240) = vaddq_f64(v644, v629);
    *(float64x2_t *)(result + 256) = v1329.val[0];
    *(float64x2_t *)(result + 272) = v648;
    v610 = a2[16];
    v6 = *v5;
  }
  if (v610 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 3));
    v649 = a3[12].f64;
    v1330 = vld2q_f64(v649);
    v650 = a3[14].f64;
    v1347 = vld2q_f64(v650);
    v651 = a3[16].f64;
    v652 = a3[6];
    v653 = a3[7];
    v654 = a3[8];
    v655 = a3[9];
    v656 = a3[10];
    v657 = a3[11];
    v658 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v652.f64[0]), v1330.val[1], v652, 1);
    v659 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v652.f64[0]), v1347.val[1], v652, 1);
    v660 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v653.f64[0]), v1330.val[1], v653, 1);
    v661 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v653.f64[0]), v1347.val[1], v653, 1);
    v662 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v654.f64[0]), v1330.val[1], v654, 1);
    v663 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v654.f64[0]), v1347.val[1], v654, 1);
    v664 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v655.f64[0]), v1330.val[1], v655, 1);
    v665 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v655.f64[0]), v1347.val[1], v655, 1);
    v666 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v656.f64[0]), v1330.val[1], v656, 1);
    v667 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v656.f64[0]), v1347.val[1], v656, 1);
    v668 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v657.f64[0]), v1330.val[1], v657, 1);
    v1330.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v657.f64[0]), v1347.val[1], v657, 1);
    *(float64x2x2_t *)((char *)&v1330 + 16) = vld2q_f64(v651);
    v1347.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v652.f64[0]), v1347.val[0], v652, 1);
    v669 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v653.f64[0]), v1347.val[0], v653, 1);
    v670 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v654.f64[0]), v1347.val[0], v654, 1);
    v671 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v655.f64[0]), v1347.val[0], v655, 1);
    v672 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v656.f64[0]), v1347.val[0], v656, 1);
    v673 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v657.f64[0]), v1347.val[0], v657, 1);
    v1330.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1347.val[1]);
    v1347.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v659);
    v674 = vaddq_f64(*(float64x2_t *)result, v658);
    v675 = vaddq_f64(*(float64x2_t *)(result + 80), v669);
    v676 = vaddq_f64(*(float64x2_t *)(result + 64), v661);
    v1347.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v660);
    v677 = vaddq_f64(*(float64x2_t *)(result + 128), v670);
    v678 = vaddq_f64(*(float64x2_t *)(result + 112), v663);
    v679 = vaddq_f64(*(float64x2_t *)(result + 96), v662);
    v680 = vaddq_f64(*(float64x2_t *)(result + 176), v671);
    v681 = vaddq_f64(*(float64x2_t *)(result + 160), v665);
    v682 = vaddq_f64(*(float64x2_t *)(result + 144), v664);
    v683 = *(float64x2_t *)(result + 240);
    v684 = vaddq_f64(*(float64x2_t *)(result + 224), v672);
    v685 = vaddq_f64(*(float64x2_t *)(result + 208), v667);
    v686 = vaddq_f64(*(float64x2_t *)(result + 192), v666);
    v687 = vaddq_f64(*(float64x2_t *)(result + 272), v673);
    v1330.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1330.val[0]);
    *(float64x2_t *)result = v674;
    *(float64x2_t *)(result + 16) = v1347.val[1];
    *(float64x2_t *)(result + 32) = v1330.val[1];
    *(float64x2_t *)(result + 48) = v1347.val[0];
    *(float64x2_t *)(result + 64) = v676;
    *(float64x2_t *)(result + 80) = v675;
    *(float64x2_t *)(result + 96) = v679;
    *(float64x2_t *)(result + 112) = v678;
    *(float64x2_t *)(result + 128) = v677;
    *(float64x2_t *)(result + 144) = v682;
    *(float64x2_t *)(result + 160) = v681;
    *(float64x2_t *)(result + 176) = v680;
    *(float64x2_t *)(result + 192) = v686;
    *(float64x2_t *)(result + 208) = v685;
    *(float64x2_t *)(result + 224) = v684;
    *(float64x2_t *)(result + 240) = vaddq_f64(v683, v668);
    *(float64x2_t *)(result + 256) = v1330.val[0];
    *(float64x2_t *)(result + 272) = v687;
    v610 = a2[16];
    v6 = *v5;
  }
  if (v610)
  {
    result = sub_20F9AC33C(v6 + 104, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 5));
    v689 = a3[12];
    v690 = a3[13];
    v688 = a3[12].f64;
    v691 = a3[14].f64;
    v692 = a3[14];
    v693 = a3[15];
    v694 = a3[16].f64;
    v695 = a3[16];
    v696 = a3[17];
    v697 = (float64x2_t)vzip1q_s64((int64x2_t)v692, (int64x2_t)v693);
    v698 = (float64x2_t)vzip1q_s64((int64x2_t)v695, (int64x2_t)v696);
    *(_QWORD *)&v699.f64[0] = vdupq_laneq_s64((int64x2_t)v692, 1).u64[0];
    v699.f64[1] = a3[15].f64[1];
    *(_QWORD *)&v700.f64[0] = vdupq_laneq_s64((int64x2_t)v695, 1).u64[0];
    v700.f64[1] = a3[17].f64[1];
    v701 = (float64x2_t)vzip1q_s64((int64x2_t)v689, (int64x2_t)v690);
    v702 = (float64x2_t)vzip2q_s64((int64x2_t)v689, (int64x2_t)v690);
    v703 = vmlaq_laneq_f64(vmulq_n_f64(v701, v689.f64[0]), v702, v689, 1);
    v704 = vmlaq_laneq_f64(vmulq_n_f64(v697, v689.f64[0]), v699, v689, 1);
    v705 = vmlaq_laneq_f64(vmulq_n_f64(v698, v689.f64[0]), v700, v689, 1);
    v706 = vmlaq_laneq_f64(vmulq_n_f64(v701, v690.f64[0]), v702, v690, 1);
    v707 = vmlaq_laneq_f64(vmulq_n_f64(v697, v690.f64[0]), v699, v690, 1);
    v708 = vmlaq_laneq_f64(vmulq_n_f64(v698, v690.f64[0]), v700, v690, 1);
    v709 = vmlaq_laneq_f64(vmulq_n_f64(v701, v692.f64[0]), v702, v692, 1);
    v710 = vmlaq_laneq_f64(vmulq_n_f64(v697, v692.f64[0]), v699, v692, 1);
    v711 = vmlaq_laneq_f64(vmulq_n_f64(v698, v692.f64[0]), v700, v692, 1);
    v712 = vmlaq_laneq_f64(vmulq_n_f64(v701, v693.f64[0]), v702, v693, 1);
    v713 = vmlaq_laneq_f64(vmulq_n_f64(v697, v693.f64[0]), v699, v693, 1);
    v714 = vmlaq_laneq_f64(vmulq_n_f64(v698, v693.f64[0]), v700, v693, 1);
    v715 = vmlaq_laneq_f64(vmulq_n_f64(v701, v695.f64[0]), v702, v695, 1);
    v716 = vmlaq_laneq_f64(vmulq_n_f64(v697, v695.f64[0]), v699, v695, 1);
    v717 = vmlaq_laneq_f64(vmulq_n_f64(v698, v695.f64[0]), v700, v695, 1);
    v718 = vmlaq_laneq_f64(vmulq_n_f64(v701, v696.f64[0]), v702, v696, 1);
    v719 = vmlaq_laneq_f64(vmulq_n_f64(v697, v696.f64[0]), v699, v696, 1);
    v720 = vmlaq_laneq_f64(vmulq_n_f64(v698, v696.f64[0]), v700, v696, 1);
    v721 = vaddq_f64(*(float64x2_t *)(result + 32), v705);
    v722 = vaddq_f64(*(float64x2_t *)(result + 16), v704);
    v723 = vaddq_f64(*(float64x2_t *)result, v703);
    v724 = vaddq_f64(*(float64x2_t *)(result + 80), v708);
    v725 = vaddq_f64(*(float64x2_t *)(result + 64), v707);
    v726 = vaddq_f64(*(float64x2_t *)(result + 48), v706);
    v727 = vaddq_f64(*(float64x2_t *)(result + 128), v711);
    v728 = vaddq_f64(*(float64x2_t *)(result + 112), v710);
    v729 = vaddq_f64(*(float64x2_t *)(result + 96), v709);
    v730 = vaddq_f64(*(float64x2_t *)(result + 176), v714);
    v731 = vaddq_f64(*(float64x2_t *)(result + 160), v713);
    v732 = vaddq_f64(*(float64x2_t *)(result + 144), v712);
    v733 = *(float64x2_t *)(result + 240);
    v734 = vaddq_f64(*(float64x2_t *)(result + 224), v717);
    v735 = vaddq_f64(*(float64x2_t *)(result + 208), v716);
    v736 = vaddq_f64(*(float64x2_t *)(result + 192), v715);
    v737 = vaddq_f64(*(float64x2_t *)(result + 272), v720);
    v738 = vaddq_f64(*(float64x2_t *)(result + 256), v719);
    *(float64x2_t *)result = v723;
    *(float64x2_t *)(result + 16) = v722;
    *(float64x2_t *)(result + 32) = v721;
    *(float64x2_t *)(result + 48) = v726;
    *(float64x2_t *)(result + 64) = v725;
    *(float64x2_t *)(result + 80) = v724;
    *(float64x2_t *)(result + 96) = v729;
    *(float64x2_t *)(result + 112) = v728;
    *(float64x2_t *)(result + 128) = v727;
    *(float64x2_t *)(result + 144) = v732;
    *(float64x2_t *)(result + 160) = v731;
    *(float64x2_t *)(result + 176) = v730;
    *(float64x2_t *)(result + 192) = v736;
    *(float64x2_t *)(result + 208) = v735;
    *(float64x2_t *)(result + 224) = v734;
    *(float64x2_t *)(result + 240) = vaddq_f64(v733, v718);
    *(float64x2_t *)(result + 256) = v738;
    *(float64x2_t *)(result + 272) = v737;
    v6 = *v5;
    v739 = a2[16];
    if (a2[16] && a2[24])
    {
      v740 = *((_DWORD *)a2 + 5);
      v741 = *((_DWORD *)a2 + 7);
      if (v741 >= v740)
      {
        result = sub_20F9AC33C(v6 + 104, v740, v741);
        v1332 = vld2q_f64(v688);
        v1351 = vld2q_f64(v691);
        v1256 = a3[18];
        v1257 = a3[19];
        v1258 = a3[20];
        v1259 = a3[21];
        v1260 = a3[22];
        v1261 = a3[23];
        v1262 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1256.f64[0]), v1332.val[1], v1256, 1);
        v1263 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1256.f64[0]), v1351.val[1], v1256, 1);
        v1264 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1257.f64[0]), v1332.val[1], v1257, 1);
        v1265 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1257.f64[0]), v1351.val[1], v1257, 1);
        v1266 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1258.f64[0]), v1332.val[1], v1258, 1);
        v1267 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1258.f64[0]), v1351.val[1], v1258, 1);
        v1268 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1259.f64[0]), v1332.val[1], v1259, 1);
        v1269 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1259.f64[0]), v1351.val[1], v1259, 1);
        v1270 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1260.f64[0]), v1332.val[1], v1260, 1);
        v1271 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1260.f64[0]), v1351.val[1], v1260, 1);
        v1272 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1261.f64[0]), v1332.val[1], v1261, 1);
        v1332.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1261.f64[0]), v1351.val[1], v1261, 1);
        *(float64x2x2_t *)((char *)&v1332 + 16) = vld2q_f64(v694);
        v1351.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1256.f64[0]), v1351.val[0], v1256, 1);
        v1273 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1257.f64[0]), v1351.val[0], v1257, 1);
        v1274 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1258.f64[0]), v1351.val[0], v1258, 1);
        v1275 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1259.f64[0]), v1351.val[0], v1259, 1);
        v1276 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1260.f64[0]), v1351.val[0], v1260, 1);
        v1277 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1261.f64[0]), v1351.val[0], v1261, 1);
        v1332.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1351.val[1]);
        v1351.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v1263);
        v1278 = vaddq_f64(*(float64x2_t *)result, v1262);
        v1279 = vaddq_f64(*(float64x2_t *)(result + 80), v1273);
        v1280 = vaddq_f64(*(float64x2_t *)(result + 64), v1265);
        v1351.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v1264);
        v1281 = vaddq_f64(*(float64x2_t *)(result + 128), v1274);
        v1282 = vaddq_f64(*(float64x2_t *)(result + 112), v1267);
        v1283 = vaddq_f64(*(float64x2_t *)(result + 96), v1266);
        v1284 = vaddq_f64(*(float64x2_t *)(result + 176), v1275);
        v1285 = vaddq_f64(*(float64x2_t *)(result + 160), v1269);
        v1286 = vaddq_f64(*(float64x2_t *)(result + 144), v1268);
        v1287 = *(float64x2_t *)(result + 240);
        v1288 = vaddq_f64(*(float64x2_t *)(result + 224), v1276);
        v1289 = vaddq_f64(*(float64x2_t *)(result + 208), v1271);
        v1290 = vaddq_f64(*(float64x2_t *)(result + 192), v1270);
        v1291 = vaddq_f64(*(float64x2_t *)(result + 272), v1277);
        v1332.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1332.val[0]);
        *(float64x2_t *)result = v1278;
        *(float64x2_t *)(result + 16) = v1351.val[1];
        *(float64x2_t *)(result + 32) = v1332.val[1];
        *(float64x2_t *)(result + 48) = v1351.val[0];
        *(float64x2_t *)(result + 64) = v1280;
        *(float64x2_t *)(result + 80) = v1279;
        *(float64x2_t *)(result + 96) = v1283;
        *(float64x2_t *)(result + 112) = v1282;
        *(float64x2_t *)(result + 128) = v1281;
        *(float64x2_t *)(result + 144) = v1286;
        *(float64x2_t *)(result + 160) = v1285;
        *(float64x2_t *)(result + 176) = v1284;
        *(float64x2_t *)(result + 192) = v1290;
        *(float64x2_t *)(result + 208) = v1289;
        *(float64x2_t *)(result + 224) = v1288;
        *(float64x2_t *)(result + 240) = vaddq_f64(v1287, v1272);
        *(float64x2_t *)(result + 256) = v1332.val[0];
        *(float64x2_t *)(result + 272) = v1291;
        v739 = a2[16];
        v6 = *v5;
        if (a2[16])
        {
LABEL_115:
          if (a2[32])
          {
            result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 9));
            v1380 = vld2q_f64(v688);
            v742 = *(float64x2_t *)(result + 144);
            v1411 = vld2q_f64(v691);
            v1430 = vld2q_f64(v694);
            v743 = a3[24];
            v744 = a3[25];
            v745 = a3[26];
            v746 = a3[27];
            v747 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v743.f64[0]), v1380.val[1], v743, 1);
            v748 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v743.f64[0]), v1411.val[1], v743, 1);
            v749 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v743.f64[0]), v1430.val[1], v743, 1);
            v750 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v744.f64[0]), v1380.val[1], v744, 1);
            v751 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v744.f64[0]), v1411.val[1], v744, 1);
            v752 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v744.f64[0]), v1430.val[1], v744, 1);
            v753 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v745.f64[0]), v1380.val[1], v745, 1);
            v754 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v745.f64[0]), v1411.val[1], v745, 1);
            v755 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v745.f64[0]), v1430.val[1], v745, 1);
            v756 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v746.f64[0]), v1380.val[1], v746, 1);
            v757 = vaddq_f64(*(float64x2_t *)(result + 32), v749);
            v758 = vaddq_f64(*(float64x2_t *)(result + 16), v748);
            v759 = vaddq_f64(*(float64x2_t *)(result + 80), v752);
            v760 = vaddq_f64(*(float64x2_t *)(result + 64), v751);
            v761 = vaddq_f64(*(float64x2_t *)(result + 48), v750);
            v762 = vaddq_f64(*(float64x2_t *)(result + 128), v755);
            v763 = vaddq_f64(*(float64x2_t *)(result + 112), v754);
            v764 = vaddq_f64(*(float64x2_t *)(result + 96), v753);
            v1380.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v746.f64[0]), v1430.val[1], v746, 1));
            v1380.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v746.f64[0]), v1411.val[1], v746, 1));
            *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v747);
            *(float64x2_t *)(result + 16) = v758;
            *(float64x2_t *)(result + 32) = v757;
            *(float64x2_t *)(result + 48) = v761;
            *(float64x2_t *)(result + 64) = v760;
            *(float64x2_t *)(result + 80) = v759;
            *(float64x2_t *)(result + 96) = v764;
            *(float64x2_t *)(result + 112) = v763;
            *(float64x2_t *)(result + 128) = v762;
            *(float64x2_t *)(result + 144) = vaddq_f64(v742, v756);
            *(float64x2x2_t *)(result + 160) = v1380;
            v739 = a2[16];
            v6 = *v5;
          }
        }
LABEL_117:
        if (v739 && a2[40])
        {
          result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 11));
          v1381 = vld2q_f64(v688);
          v765 = *(float64x2_t *)(result + 144);
          v1412 = vld2q_f64(v691);
          v1431 = vld2q_f64(v694);
          v766 = a3[28];
          v767 = a3[29];
          v768 = a3[30];
          v769 = a3[31];
          v770 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v766.f64[0]), v1381.val[1], v766, 1);
          v771 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v766.f64[0]), v1412.val[1], v766, 1);
          v772 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v766.f64[0]), v1431.val[1], v766, 1);
          v773 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v767.f64[0]), v1381.val[1], v767, 1);
          v774 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v767.f64[0]), v1412.val[1], v767, 1);
          v775 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v767.f64[0]), v1431.val[1], v767, 1);
          v776 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v768.f64[0]), v1381.val[1], v768, 1);
          v777 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v768.f64[0]), v1412.val[1], v768, 1);
          v778 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v768.f64[0]), v1431.val[1], v768, 1);
          v779 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v769.f64[0]), v1381.val[1], v769, 1);
          v780 = vaddq_f64(*(float64x2_t *)(result + 32), v772);
          v781 = vaddq_f64(*(float64x2_t *)(result + 16), v771);
          v782 = vaddq_f64(*(float64x2_t *)(result + 80), v775);
          v783 = vaddq_f64(*(float64x2_t *)(result + 64), v774);
          v784 = vaddq_f64(*(float64x2_t *)(result + 48), v773);
          v785 = vaddq_f64(*(float64x2_t *)(result + 128), v778);
          v786 = vaddq_f64(*(float64x2_t *)(result + 112), v777);
          v787 = vaddq_f64(*(float64x2_t *)(result + 96), v776);
          v1381.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v769.f64[0]), v1431.val[1], v769, 1));
          v1381.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v769.f64[0]), v1412.val[1], v769, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v770);
          *(float64x2_t *)(result + 16) = v781;
          *(float64x2_t *)(result + 32) = v780;
          *(float64x2_t *)(result + 48) = v784;
          *(float64x2_t *)(result + 64) = v783;
          *(float64x2_t *)(result + 80) = v782;
          *(float64x2_t *)(result + 96) = v787;
          *(float64x2_t *)(result + 112) = v786;
          *(float64x2_t *)(result + 128) = v785;
          *(float64x2_t *)(result + 144) = vaddq_f64(v765, v779);
          *(float64x2x2_t *)(result + 160) = v1381;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[48])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 13));
          v1382 = vld2q_f64(v688);
          v788 = *(float64x2_t *)(result + 144);
          v1413 = vld2q_f64(v691);
          v1432 = vld2q_f64(v694);
          v789 = a3[32];
          v790 = a3[33];
          v791 = a3[34];
          v792 = a3[35];
          v793 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v789.f64[0]), v1382.val[1], v789, 1);
          v794 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v789.f64[0]), v1413.val[1], v789, 1);
          v795 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v789.f64[0]), v1432.val[1], v789, 1);
          v796 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v790.f64[0]), v1382.val[1], v790, 1);
          v797 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v790.f64[0]), v1413.val[1], v790, 1);
          v798 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v790.f64[0]), v1432.val[1], v790, 1);
          v799 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v791.f64[0]), v1382.val[1], v791, 1);
          v800 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v791.f64[0]), v1413.val[1], v791, 1);
          v801 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v791.f64[0]), v1432.val[1], v791, 1);
          v802 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v792.f64[0]), v1382.val[1], v792, 1);
          v803 = vaddq_f64(*(float64x2_t *)(result + 32), v795);
          v804 = vaddq_f64(*(float64x2_t *)(result + 16), v794);
          v805 = vaddq_f64(*(float64x2_t *)(result + 80), v798);
          v806 = vaddq_f64(*(float64x2_t *)(result + 64), v797);
          v807 = vaddq_f64(*(float64x2_t *)(result + 48), v796);
          v808 = vaddq_f64(*(float64x2_t *)(result + 128), v801);
          v809 = vaddq_f64(*(float64x2_t *)(result + 112), v800);
          v810 = vaddq_f64(*(float64x2_t *)(result + 96), v799);
          v1382.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v792.f64[0]), v1432.val[1], v792, 1));
          v1382.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v792.f64[0]), v1413.val[1], v792, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v793);
          *(float64x2_t *)(result + 16) = v804;
          *(float64x2_t *)(result + 32) = v803;
          *(float64x2_t *)(result + 48) = v807;
          *(float64x2_t *)(result + 64) = v806;
          *(float64x2_t *)(result + 80) = v805;
          *(float64x2_t *)(result + 96) = v810;
          *(float64x2_t *)(result + 112) = v809;
          *(float64x2_t *)(result + 128) = v808;
          *(float64x2_t *)(result + 144) = vaddq_f64(v788, v802);
          *(float64x2x2_t *)(result + 160) = v1382;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[56])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 15));
          v1383 = vld2q_f64(v688);
          v811 = *(float64x2_t *)(result + 144);
          v1414 = vld2q_f64(v691);
          v1433 = vld2q_f64(v694);
          v812 = a3[36];
          v813 = a3[37];
          v814 = a3[38];
          v815 = a3[39];
          v816 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v812.f64[0]), v1383.val[1], v812, 1);
          v817 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v812.f64[0]), v1414.val[1], v812, 1);
          v818 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v812.f64[0]), v1433.val[1], v812, 1);
          v819 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v813.f64[0]), v1383.val[1], v813, 1);
          v820 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v813.f64[0]), v1414.val[1], v813, 1);
          v821 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v813.f64[0]), v1433.val[1], v813, 1);
          v822 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v814.f64[0]), v1383.val[1], v814, 1);
          v823 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v814.f64[0]), v1414.val[1], v814, 1);
          v824 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v814.f64[0]), v1433.val[1], v814, 1);
          v825 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v815.f64[0]), v1383.val[1], v815, 1);
          v826 = vaddq_f64(*(float64x2_t *)(result + 32), v818);
          v827 = vaddq_f64(*(float64x2_t *)(result + 16), v817);
          v828 = vaddq_f64(*(float64x2_t *)(result + 80), v821);
          v829 = vaddq_f64(*(float64x2_t *)(result + 64), v820);
          v830 = vaddq_f64(*(float64x2_t *)(result + 48), v819);
          v831 = vaddq_f64(*(float64x2_t *)(result + 128), v824);
          v832 = vaddq_f64(*(float64x2_t *)(result + 112), v823);
          v833 = vaddq_f64(*(float64x2_t *)(result + 96), v822);
          v1383.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v815.f64[0]), v1433.val[1], v815, 1));
          v1383.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v815.f64[0]), v1414.val[1], v815, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v816);
          *(float64x2_t *)(result + 16) = v827;
          *(float64x2_t *)(result + 32) = v826;
          *(float64x2_t *)(result + 48) = v830;
          *(float64x2_t *)(result + 64) = v829;
          *(float64x2_t *)(result + 80) = v828;
          *(float64x2_t *)(result + 96) = v833;
          *(float64x2_t *)(result + 112) = v832;
          *(float64x2_t *)(result + 128) = v831;
          *(float64x2_t *)(result + 144) = vaddq_f64(v811, v825);
          *(float64x2x2_t *)(result + 160) = v1383;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[64])
        {
          result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 17));
          v1355 = vld2q_f64(v688);
          v1384 = vld2q_f64(v691);
          v1415 = vld2q_f64(v694);
          v834 = a3[40];
          v835 = a3[41];
          v836 = a3[42];
          v837 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v834.f64[0]), v1355.val[1], v834, 1);
          v838 = vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v834.f64[0]), v1384.val[1], v834, 1);
          v839 = vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v834.f64[0]), v1415.val[1], v834, 1);
          v840 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v835.f64[0]), v1355.val[1], v835, 1);
          v841 = vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v835.f64[0]), v1384.val[1], v835, 1);
          v842 = vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v835.f64[0]), v1415.val[1], v835, 1);
          v843 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v836.f64[0]), v1355.val[1], v836, 1);
          v844 = vaddq_f64(*(float64x2_t *)(result + 32), v839);
          v845 = vaddq_f64(*(float64x2_t *)(result + 16), v838);
          v846 = vaddq_f64(*(float64x2_t *)(result + 80), v842);
          v847 = vaddq_f64(*(float64x2_t *)(result + 64), v841);
          v848 = vaddq_f64(*(float64x2_t *)(result + 48), v840);
          v1355.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v836.f64[0]), v1415.val[1], v836, 1));
          v1355.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v836.f64[0]), v1384.val[1], v836, 1));
          v1384.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v843);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v837);
          *(float64x2_t *)(result + 16) = v845;
          *(float64x2_t *)(result + 32) = v844;
          *(float64x2_t *)(result + 48) = v848;
          *(float64x2_t *)(result + 64) = v847;
          *(float64x2_t *)(result + 80) = v846;
          *(float64x2_t *)(result + 96) = v1384.val[0];
          *(float64x2x2_t *)(result + 112) = v1355;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[72])
        {
          result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 19));
          v1348 = vld2q_f64(v688);
          v1367 = vld2q_f64(v691);
          v1401 = vld2q_f64(v694);
          v849 = a3[43];
          v850 = a3[44];
          v851 = a3[45];
          v852 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v849.f64[0]), v1348.val[1], v849, 1);
          v853 = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v849.f64[0]), v1367.val[1], v849, 1);
          v854 = vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v849.f64[0]), v1401.val[1], v849, 1);
          v855 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v850.f64[0]), v1348.val[1], v850, 1);
          v856 = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v850.f64[0]), v1367.val[1], v850, 1);
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v850.f64[0]), v1401.val[1], v850, 1);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v851.f64[0]), v1348.val[1], v851, 1);
          v1348.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v851.f64[0]), v1367.val[1], v851, 1);
          v859 = vaddq_f64(*(float64x2_t *)(result + 32), v854);
          v860 = vaddq_f64(*(float64x2_t *)(result + 16), v853);
          v1367.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v857);
          v1367.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v856);
          v861 = vaddq_f64(*(float64x2_t *)(result + 48), v855);
          v1348.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v851.f64[0]), v1401.val[1], v851, 1));
          v1348.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1348.val[0]);
          v862 = vaddq_f64(*(float64x2_t *)(result + 96), v858);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v852);
          *(float64x2_t *)(result + 16) = v860;
          *(float64x2_t *)(result + 32) = v859;
          *(float64x2_t *)(result + 48) = v861;
          *(float64x2_t *)(result + 64) = v1367.val[1];
          *(float64x2_t *)(result + 80) = v1367.val[0];
          *(float64x2_t *)(result + 96) = v862;
          *(float64x2x2_t *)(result + 112) = v1348;
          v6 = *v5;
        }
        goto LABEL_132;
      }
      v739 = 1;
    }
    if (v739)
      goto LABEL_115;
    goto LABEL_117;
  }
LABEL_132:
  v863 = a2[8];
  if (a2[8] && *a2)
  {
    v864 = *((_DWORD *)a2 + 3);
    v865 = *((_DWORD *)a2 + 1);
    if (v865 < v864)
      goto LABEL_138;
    result = sub_20F9AC33C(v6 + 3272, v864, v865);
    v866 = a3[6].f64;
    v1331 = vld2q_f64(v866);
    v867 = a3[8].f64;
    v1349 = vld2q_f64(v867);
    v868 = a3[10].f64;
    v869 = a3[1];
    v870 = a3[2];
    v871 = a3[3];
    v872 = a3[4];
    v873 = a3[5];
    v874 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], a3->f64[0]), v1331.val[1], *a3, 1);
    v875 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], a3->f64[0]), v1349.val[1], *a3, 1);
    v876 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v869.f64[0]), v1331.val[1], v869, 1);
    v877 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v869.f64[0]), v1349.val[1], v869, 1);
    v878 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v870.f64[0]), v1331.val[1], v870, 1);
    v879 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v870.f64[0]), v1349.val[1], v870, 1);
    v880 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v871.f64[0]), v1331.val[1], v871, 1);
    v881 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v871.f64[0]), v1349.val[1], v871, 1);
    v882 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v872.f64[0]), v1331.val[1], v872, 1);
    v883 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v872.f64[0]), v1349.val[1], v872, 1);
    v884 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v873.f64[0]), v1331.val[1], v873, 1);
    v1331.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v873.f64[0]), v1349.val[1], v873, 1);
    *(float64x2x2_t *)((char *)&v1331 + 16) = vld2q_f64(v868);
    v885 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v869.f64[0]), v1349.val[0], v869, 1);
    v886 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v870.f64[0]), v1349.val[0], v870, 1);
    v887 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v871.f64[0]), v1349.val[0], v871, 1);
    v888 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v872.f64[0]), v1349.val[0], v872, 1);
    v889 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v873.f64[0]), v1349.val[0], v873, 1);
    v1331.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], a3->f64[0]), v1349.val[0], *a3, 1));
    v1349.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v875);
    v890 = vaddq_f64(*(float64x2_t *)result, v874);
    v891 = vaddq_f64(*(float64x2_t *)(result + 80), v885);
    v892 = vaddq_f64(*(float64x2_t *)(result + 64), v877);
    v1349.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v876);
    v893 = vaddq_f64(*(float64x2_t *)(result + 128), v886);
    v894 = vaddq_f64(*(float64x2_t *)(result + 112), v879);
    v895 = vaddq_f64(*(float64x2_t *)(result + 96), v878);
    v896 = vaddq_f64(*(float64x2_t *)(result + 176), v887);
    v897 = vaddq_f64(*(float64x2_t *)(result + 160), v881);
    v898 = vaddq_f64(*(float64x2_t *)(result + 144), v880);
    v899 = *(float64x2_t *)(result + 240);
    v900 = vaddq_f64(*(float64x2_t *)(result + 224), v888);
    v901 = vaddq_f64(*(float64x2_t *)(result + 208), v883);
    v902 = vaddq_f64(*(float64x2_t *)(result + 192), v882);
    v903 = vaddq_f64(*(float64x2_t *)(result + 272), v889);
    v1331.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1331.val[0]);
    *(float64x2_t *)result = v890;
    *(float64x2_t *)(result + 16) = v1349.val[1];
    *(float64x2_t *)(result + 32) = v1331.val[1];
    *(float64x2_t *)(result + 48) = v1349.val[0];
    *(float64x2_t *)(result + 64) = v892;
    *(float64x2_t *)(result + 80) = v891;
    *(float64x2_t *)(result + 96) = v895;
    *(float64x2_t *)(result + 112) = v894;
    *(float64x2_t *)(result + 128) = v893;
    *(float64x2_t *)(result + 144) = v898;
    *(float64x2_t *)(result + 160) = v897;
    *(float64x2_t *)(result + 176) = v896;
    *(float64x2_t *)(result + 192) = v902;
    *(float64x2_t *)(result + 208) = v901;
    *(float64x2_t *)(result + 224) = v900;
    *(float64x2_t *)(result + 240) = vaddq_f64(v899, v884);
    *(float64x2_t *)(result + 256) = v1331.val[0];
    *(float64x2_t *)(result + 272) = v903;
    v863 = a2[8];
    v6 = *v5;
  }
  if (!v863)
    goto LABEL_156;
  v864 = *((_DWORD *)a2 + 3);
LABEL_138:
  result = sub_20F9AC33C(v6 + 3272, v864, v864);
  v905 = a3[6];
  v906 = a3[7];
  v904 = a3[6].f64;
  v907 = a3[8].f64;
  v908 = a3[8];
  v909 = a3[9];
  v910 = a3[10].f64;
  v911 = a3[10];
  v912 = a3[11];
  v913 = (float64x2_t)vzip1q_s64((int64x2_t)v908, (int64x2_t)v909);
  v914 = (float64x2_t)vzip1q_s64((int64x2_t)v911, (int64x2_t)v912);
  *(_QWORD *)&v915.f64[0] = vdupq_laneq_s64((int64x2_t)v908, 1).u64[0];
  v915.f64[1] = a3[9].f64[1];
  *(_QWORD *)&v916.f64[0] = vdupq_laneq_s64((int64x2_t)v911, 1).u64[0];
  v916.f64[1] = a3[11].f64[1];
  v917 = (float64x2_t)vzip1q_s64((int64x2_t)v905, (int64x2_t)v906);
  v918 = (float64x2_t)vzip2q_s64((int64x2_t)v905, (int64x2_t)v906);
  v919 = vmlaq_laneq_f64(vmulq_n_f64(v917, v905.f64[0]), v918, v905, 1);
  v920 = vmlaq_laneq_f64(vmulq_n_f64(v913, v905.f64[0]), v915, v905, 1);
  v921 = vmlaq_laneq_f64(vmulq_n_f64(v914, v905.f64[0]), v916, v905, 1);
  v922 = vmlaq_laneq_f64(vmulq_n_f64(v917, v906.f64[0]), v918, v906, 1);
  v923 = vmlaq_laneq_f64(vmulq_n_f64(v913, v906.f64[0]), v915, v906, 1);
  v924 = vmlaq_laneq_f64(vmulq_n_f64(v914, v906.f64[0]), v916, v906, 1);
  v925 = vmlaq_laneq_f64(vmulq_n_f64(v917, v908.f64[0]), v918, v908, 1);
  v926 = vmlaq_laneq_f64(vmulq_n_f64(v913, v908.f64[0]), v915, v908, 1);
  v927 = vmlaq_laneq_f64(vmulq_n_f64(v914, v908.f64[0]), v916, v908, 1);
  v928 = vmlaq_laneq_f64(vmulq_n_f64(v917, v909.f64[0]), v918, v909, 1);
  v929 = vmlaq_laneq_f64(vmulq_n_f64(v913, v909.f64[0]), v915, v909, 1);
  v930 = vmlaq_laneq_f64(vmulq_n_f64(v914, v909.f64[0]), v916, v909, 1);
  v931 = vmlaq_laneq_f64(vmulq_n_f64(v917, v911.f64[0]), v918, v911, 1);
  v932 = vmlaq_laneq_f64(vmulq_n_f64(v913, v911.f64[0]), v915, v911, 1);
  v933 = vmlaq_laneq_f64(vmulq_n_f64(v914, v911.f64[0]), v916, v911, 1);
  v934 = vmlaq_laneq_f64(vmulq_n_f64(v917, v912.f64[0]), v918, v912, 1);
  v935 = vmlaq_laneq_f64(vmulq_n_f64(v913, v912.f64[0]), v915, v912, 1);
  v936 = vmlaq_laneq_f64(vmulq_n_f64(v914, v912.f64[0]), v916, v912, 1);
  v937 = vaddq_f64(*(float64x2_t *)(result + 32), v921);
  v938 = vaddq_f64(*(float64x2_t *)(result + 16), v920);
  v939 = vaddq_f64(*(float64x2_t *)result, v919);
  v940 = vaddq_f64(*(float64x2_t *)(result + 80), v924);
  v941 = vaddq_f64(*(float64x2_t *)(result + 64), v923);
  v942 = vaddq_f64(*(float64x2_t *)(result + 48), v922);
  v943 = vaddq_f64(*(float64x2_t *)(result + 128), v927);
  v944 = vaddq_f64(*(float64x2_t *)(result + 112), v926);
  v945 = vaddq_f64(*(float64x2_t *)(result + 96), v925);
  v946 = vaddq_f64(*(float64x2_t *)(result + 176), v930);
  v947 = vaddq_f64(*(float64x2_t *)(result + 160), v929);
  v948 = vaddq_f64(*(float64x2_t *)(result + 144), v928);
  v949 = *(float64x2_t *)(result + 240);
  v950 = vaddq_f64(*(float64x2_t *)(result + 224), v933);
  v951 = vaddq_f64(*(float64x2_t *)(result + 208), v932);
  v952 = vaddq_f64(*(float64x2_t *)(result + 192), v931);
  v953 = vaddq_f64(*(float64x2_t *)(result + 272), v936);
  v954 = vaddq_f64(*(float64x2_t *)(result + 256), v935);
  *(float64x2_t *)result = v939;
  *(float64x2_t *)(result + 16) = v938;
  *(float64x2_t *)(result + 32) = v937;
  *(float64x2_t *)(result + 48) = v942;
  *(float64x2_t *)(result + 64) = v941;
  *(float64x2_t *)(result + 80) = v940;
  *(float64x2_t *)(result + 96) = v945;
  *(float64x2_t *)(result + 112) = v944;
  *(float64x2_t *)(result + 128) = v943;
  *(float64x2_t *)(result + 144) = v948;
  *(float64x2_t *)(result + 160) = v947;
  *(float64x2_t *)(result + 176) = v946;
  *(float64x2_t *)(result + 192) = v952;
  *(float64x2_t *)(result + 208) = v951;
  *(float64x2_t *)(result + 224) = v950;
  *(float64x2_t *)(result + 240) = vaddq_f64(v949, v934);
  *(float64x2_t *)(result + 256) = v954;
  *(float64x2_t *)(result + 272) = v953;
  v955 = a2[8];
  v6 = *v5;
  if (a2[8] && a2[32])
  {
    result = sub_20F9AC460(v6 + 9032, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 9));
    v1385 = vld2q_f64(v904);
    v956 = *(float64x2_t *)(result + 144);
    v1416 = vld2q_f64(v907);
    v1434 = vld2q_f64(v910);
    v957 = a3[24];
    v958 = a3[25];
    v959 = a3[26];
    v960 = a3[27];
    v961 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v957.f64[0]), v1385.val[1], v957, 1);
    v962 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v957.f64[0]), v1416.val[1], v957, 1);
    v963 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v957.f64[0]), v1434.val[1], v957, 1);
    v964 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v958.f64[0]), v1385.val[1], v958, 1);
    v965 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v958.f64[0]), v1416.val[1], v958, 1);
    v966 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v958.f64[0]), v1434.val[1], v958, 1);
    v967 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v959.f64[0]), v1385.val[1], v959, 1);
    v968 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v959.f64[0]), v1416.val[1], v959, 1);
    v969 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v959.f64[0]), v1434.val[1], v959, 1);
    v970 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v960.f64[0]), v1385.val[1], v960, 1);
    v971 = vaddq_f64(*(float64x2_t *)(result + 32), v963);
    v972 = vaddq_f64(*(float64x2_t *)(result + 16), v962);
    v973 = vaddq_f64(*(float64x2_t *)(result + 80), v966);
    v974 = vaddq_f64(*(float64x2_t *)(result + 64), v965);
    v975 = vaddq_f64(*(float64x2_t *)(result + 48), v964);
    v976 = vaddq_f64(*(float64x2_t *)(result + 128), v969);
    v977 = vaddq_f64(*(float64x2_t *)(result + 112), v968);
    v978 = vaddq_f64(*(float64x2_t *)(result + 96), v967);
    v1385.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v960.f64[0]), v1434.val[1], v960, 1));
    v1385.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v960.f64[0]), v1416.val[1], v960, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v961);
    *(float64x2_t *)(result + 16) = v972;
    *(float64x2_t *)(result + 32) = v971;
    *(float64x2_t *)(result + 48) = v975;
    *(float64x2_t *)(result + 64) = v974;
    *(float64x2_t *)(result + 80) = v973;
    *(float64x2_t *)(result + 96) = v978;
    *(float64x2_t *)(result + 112) = v977;
    *(float64x2_t *)(result + 128) = v976;
    *(float64x2_t *)(result + 144) = vaddq_f64(v956, v970);
    *(float64x2x2_t *)(result + 160) = v1385;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[40])
  {
    result = sub_20F9AC460(v6 + 9032, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 11));
    v1386 = vld2q_f64(v904);
    v979 = *(float64x2_t *)(result + 144);
    v1417 = vld2q_f64(v907);
    v1435 = vld2q_f64(v910);
    v980 = a3[28];
    v981 = a3[29];
    v982 = a3[30];
    v983 = a3[31];
    v984 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v980.f64[0]), v1386.val[1], v980, 1);
    v985 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v980.f64[0]), v1417.val[1], v980, 1);
    v986 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v980.f64[0]), v1435.val[1], v980, 1);
    v987 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v981.f64[0]), v1386.val[1], v981, 1);
    v988 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v981.f64[0]), v1417.val[1], v981, 1);
    v989 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v981.f64[0]), v1435.val[1], v981, 1);
    v990 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v982.f64[0]), v1386.val[1], v982, 1);
    v991 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v982.f64[0]), v1417.val[1], v982, 1);
    v992 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v982.f64[0]), v1435.val[1], v982, 1);
    v993 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v983.f64[0]), v1386.val[1], v983, 1);
    v994 = vaddq_f64(*(float64x2_t *)(result + 32), v986);
    v995 = vaddq_f64(*(float64x2_t *)(result + 16), v985);
    v996 = vaddq_f64(*(float64x2_t *)(result + 80), v989);
    v997 = vaddq_f64(*(float64x2_t *)(result + 64), v988);
    v998 = vaddq_f64(*(float64x2_t *)(result + 48), v987);
    v999 = vaddq_f64(*(float64x2_t *)(result + 128), v992);
    v1000 = vaddq_f64(*(float64x2_t *)(result + 112), v991);
    v1001 = vaddq_f64(*(float64x2_t *)(result + 96), v990);
    v1386.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v983.f64[0]), v1435.val[1], v983, 1));
    v1386.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v983.f64[0]), v1417.val[1], v983, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v984);
    *(float64x2_t *)(result + 16) = v995;
    *(float64x2_t *)(result + 32) = v994;
    *(float64x2_t *)(result + 48) = v998;
    *(float64x2_t *)(result + 64) = v997;
    *(float64x2_t *)(result + 80) = v996;
    *(float64x2_t *)(result + 96) = v1001;
    *(float64x2_t *)(result + 112) = v1000;
    *(float64x2_t *)(result + 128) = v999;
    *(float64x2_t *)(result + 144) = vaddq_f64(v979, v993);
    *(float64x2x2_t *)(result + 160) = v1386;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[48])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 13));
    v1387 = vld2q_f64(v904);
    v1002 = *(float64x2_t *)(result + 144);
    v1418 = vld2q_f64(v907);
    v1436 = vld2q_f64(v910);
    v1003 = a3[32];
    v1004 = a3[33];
    v1005 = a3[34];
    v1006 = a3[35];
    v1007 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1003.f64[0]), v1387.val[1], v1003, 1);
    v1008 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1003.f64[0]), v1418.val[1], v1003, 1);
    v1009 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1003.f64[0]), v1436.val[1], v1003, 1);
    v1010 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1004.f64[0]), v1387.val[1], v1004, 1);
    v1011 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1004.f64[0]), v1418.val[1], v1004, 1);
    v1012 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1004.f64[0]), v1436.val[1], v1004, 1);
    v1013 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1005.f64[0]), v1387.val[1], v1005, 1);
    v1014 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1005.f64[0]), v1418.val[1], v1005, 1);
    v1015 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1005.f64[0]), v1436.val[1], v1005, 1);
    v1016 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1006.f64[0]), v1387.val[1], v1006, 1);
    v1017 = vaddq_f64(*(float64x2_t *)(result + 32), v1009);
    v1018 = vaddq_f64(*(float64x2_t *)(result + 16), v1008);
    v1019 = vaddq_f64(*(float64x2_t *)(result + 80), v1012);
    v1020 = vaddq_f64(*(float64x2_t *)(result + 64), v1011);
    v1021 = vaddq_f64(*(float64x2_t *)(result + 48), v1010);
    v1022 = vaddq_f64(*(float64x2_t *)(result + 128), v1015);
    v1023 = vaddq_f64(*(float64x2_t *)(result + 112), v1014);
    v1024 = vaddq_f64(*(float64x2_t *)(result + 96), v1013);
    v1387.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1006.f64[0]), v1436.val[1], v1006, 1));
    v1387.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1006.f64[0]), v1418.val[1], v1006, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1007);
    *(float64x2_t *)(result + 16) = v1018;
    *(float64x2_t *)(result + 32) = v1017;
    *(float64x2_t *)(result + 48) = v1021;
    *(float64x2_t *)(result + 64) = v1020;
    *(float64x2_t *)(result + 80) = v1019;
    *(float64x2_t *)(result + 96) = v1024;
    *(float64x2_t *)(result + 112) = v1023;
    *(float64x2_t *)(result + 128) = v1022;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1002, v1016);
    *(float64x2x2_t *)(result + 160) = v1387;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[56])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 15));
    v1388 = vld2q_f64(v904);
    v1025 = *(float64x2_t *)(result + 144);
    v1419 = vld2q_f64(v907);
    v1437 = vld2q_f64(v910);
    v1026 = a3[36];
    v1027 = a3[37];
    v1028 = a3[38];
    v1029 = a3[39];
    v1030 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1026.f64[0]), v1388.val[1], v1026, 1);
    v1031 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1026.f64[0]), v1419.val[1], v1026, 1);
    v1032 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1026.f64[0]), v1437.val[1], v1026, 1);
    v1033 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1027.f64[0]), v1388.val[1], v1027, 1);
    v1034 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1027.f64[0]), v1419.val[1], v1027, 1);
    v1035 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1027.f64[0]), v1437.val[1], v1027, 1);
    v1036 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1028.f64[0]), v1388.val[1], v1028, 1);
    v1037 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1028.f64[0]), v1419.val[1], v1028, 1);
    v1038 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1028.f64[0]), v1437.val[1], v1028, 1);
    v1039 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1029.f64[0]), v1388.val[1], v1029, 1);
    v1040 = vaddq_f64(*(float64x2_t *)(result + 32), v1032);
    v1041 = vaddq_f64(*(float64x2_t *)(result + 16), v1031);
    v1042 = vaddq_f64(*(float64x2_t *)(result + 80), v1035);
    v1043 = vaddq_f64(*(float64x2_t *)(result + 64), v1034);
    v1044 = vaddq_f64(*(float64x2_t *)(result + 48), v1033);
    v1045 = vaddq_f64(*(float64x2_t *)(result + 128), v1038);
    v1046 = vaddq_f64(*(float64x2_t *)(result + 112), v1037);
    v1047 = vaddq_f64(*(float64x2_t *)(result + 96), v1036);
    v1388.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1029.f64[0]), v1437.val[1], v1029, 1));
    v1388.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1029.f64[0]), v1419.val[1], v1029, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1030);
    *(float64x2_t *)(result + 16) = v1041;
    *(float64x2_t *)(result + 32) = v1040;
    *(float64x2_t *)(result + 48) = v1044;
    *(float64x2_t *)(result + 64) = v1043;
    *(float64x2_t *)(result + 80) = v1042;
    *(float64x2_t *)(result + 96) = v1047;
    *(float64x2_t *)(result + 112) = v1046;
    *(float64x2_t *)(result + 128) = v1045;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1025, v1039);
    *(float64x2x2_t *)(result + 160) = v1388;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[64])
  {
    result = sub_20F9AC584(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 17));
    v1356 = vld2q_f64(v904);
    v1389 = vld2q_f64(v907);
    v1420 = vld2q_f64(v910);
    v1048 = a3[40];
    v1049 = a3[41];
    v1050 = a3[42];
    v1051 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1048.f64[0]), v1356.val[1], v1048, 1);
    v1052 = vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1048.f64[0]), v1389.val[1], v1048, 1);
    v1053 = vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1048.f64[0]), v1420.val[1], v1048, 1);
    v1054 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1049.f64[0]), v1356.val[1], v1049, 1);
    v1055 = vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1049.f64[0]), v1389.val[1], v1049, 1);
    v1056 = vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1049.f64[0]), v1420.val[1], v1049, 1);
    v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1050.f64[0]), v1356.val[1], v1050, 1);
    v1058 = vaddq_f64(*(float64x2_t *)(result + 32), v1053);
    v1059 = vaddq_f64(*(float64x2_t *)(result + 16), v1052);
    v1060 = vaddq_f64(*(float64x2_t *)(result + 80), v1056);
    v1061 = vaddq_f64(*(float64x2_t *)(result + 64), v1055);
    v1062 = vaddq_f64(*(float64x2_t *)(result + 48), v1054);
    v1356.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1050.f64[0]), v1420.val[1], v1050, 1));
    v1356.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1050.f64[0]), v1389.val[1], v1050, 1));
    v1389.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v1057);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1051);
    *(float64x2_t *)(result + 16) = v1059;
    *(float64x2_t *)(result + 32) = v1058;
    *(float64x2_t *)(result + 48) = v1062;
    *(float64x2_t *)(result + 64) = v1061;
    *(float64x2_t *)(result + 80) = v1060;
    *(float64x2_t *)(result + 96) = v1389.val[0];
    *(float64x2x2_t *)(result + 112) = v1356;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[72])
  {
    result = sub_20F9AC584(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 19));
    v1350 = vld2q_f64(v904);
    v1368 = vld2q_f64(v907);
    v1402 = vld2q_f64(v910);
    v1063 = a3[43];
    v1064 = a3[44];
    v1065 = a3[45];
    v1066 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1063.f64[0]), v1350.val[1], v1063, 1);
    v1067 = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1063.f64[0]), v1368.val[1], v1063, 1);
    v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1063.f64[0]), v1402.val[1], v1063, 1);
    v1069 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1064.f64[0]), v1350.val[1], v1064, 1);
    v1070 = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1064.f64[0]), v1368.val[1], v1064, 1);
    v1071 = vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1064.f64[0]), v1402.val[1], v1064, 1);
    v1072 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1065.f64[0]), v1350.val[1], v1065, 1);
    v1350.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1065.f64[0]), v1368.val[1], v1065, 1);
    v1073 = vaddq_f64(*(float64x2_t *)(result + 32), v1068);
    v1074 = vaddq_f64(*(float64x2_t *)(result + 16), v1067);
    v1368.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v1071);
    v1368.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v1070);
    v1075 = vaddq_f64(*(float64x2_t *)(result + 48), v1069);
    v1350.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1065.f64[0]), v1402.val[1], v1065, 1));
    v1350.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1350.val[0]);
    v1076 = vaddq_f64(*(float64x2_t *)(result + 96), v1072);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1066);
    *(float64x2_t *)(result + 16) = v1074;
    *(float64x2_t *)(result + 32) = v1073;
    *(float64x2_t *)(result + 48) = v1075;
    *(float64x2_t *)(result + 64) = v1368.val[1];
    *(float64x2_t *)(result + 80) = v1368.val[0];
    *(float64x2_t *)(result + 96) = v1076;
    *(float64x2x2_t *)(result + 112) = v1350;
    v6 = *v5;
  }
LABEL_156:
  if (!*a2)
    return result;
  result = sub_20F9AC33C(v6 + 3272, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 1));
  v1077 = a3[1];
  v1078 = a3[2].f64;
  v1079 = a3[2];
  v1080 = a3[3];
  v1081 = a3[4].f64;
  v1082 = a3[4];
  v1083 = a3[5];
  v1084 = (float64x2_t)vzip1q_s64((int64x2_t)v1079, (int64x2_t)v1080);
  *(_QWORD *)&v1085.f64[0] = vdupq_laneq_s64((int64x2_t)v1079, 1).u64[0];
  v1085.f64[1] = a3[3].f64[1];
  *(_QWORD *)&v1086.f64[0] = vdupq_laneq_s64((int64x2_t)v1082, 1).u64[0];
  v1087 = (float64x2_t)vzip1q_s64((int64x2_t)v1082, (int64x2_t)v1083);
  v1086.f64[1] = a3[5].f64[1];
  v1088 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1077);
  v1089 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1077);
  v1090 = vmlaq_laneq_f64(vmulq_n_f64(v1084, a3->f64[0]), v1085, *a3, 1);
  v1091 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1077.f64[0]), v1089, v1077, 1);
  v1092 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1077.f64[0]), v1085, v1077, 1);
  v1093 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1077.f64[0]), v1086, v1077, 1);
  v1094 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1079.f64[0]), v1089, v1079, 1);
  v1095 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1079.f64[0]), v1085, v1079, 1);
  v1096 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1079.f64[0]), v1086, v1079, 1);
  v1097 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1080.f64[0]), v1089, v1080, 1);
  v1098 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1080.f64[0]), v1085, v1080, 1);
  v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1080.f64[0]), v1086, v1080, 1);
  v1100 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1082.f64[0]), v1089, v1082, 1);
  v1101 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1082.f64[0]), v1085, v1082, 1);
  v1102 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1082.f64[0]), v1086, v1082, 1);
  v1103 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1083.f64[0]), v1089, v1083, 1);
  v1104 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1083.f64[0]), v1085, v1083, 1);
  v1105 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1083.f64[0]), v1086, v1083, 1);
  v1106 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1087, a3->f64[0]), v1086, *a3, 1));
  v1107 = vaddq_f64(*(float64x2_t *)(result + 16), v1090);
  v1108 = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1088, a3->f64[0]), v1089, *a3, 1));
  v1109 = vaddq_f64(*(float64x2_t *)(result + 80), v1093);
  v1110 = vaddq_f64(*(float64x2_t *)(result + 64), v1092);
  v1111 = vaddq_f64(*(float64x2_t *)(result + 48), v1091);
  v1112 = vaddq_f64(*(float64x2_t *)(result + 128), v1096);
  v1113 = vaddq_f64(*(float64x2_t *)(result + 112), v1095);
  v1114 = vaddq_f64(*(float64x2_t *)(result + 96), v1094);
  v1115 = vaddq_f64(*(float64x2_t *)(result + 176), v1099);
  v1116 = vaddq_f64(*(float64x2_t *)(result + 160), v1098);
  v1117 = vaddq_f64(*(float64x2_t *)(result + 144), v1097);
  v1118 = *(float64x2_t *)(result + 240);
  v1119 = vaddq_f64(*(float64x2_t *)(result + 224), v1102);
  v1120 = vaddq_f64(*(float64x2_t *)(result + 208), v1101);
  v1121 = vaddq_f64(*(float64x2_t *)(result + 192), v1100);
  v1122 = vaddq_f64(*(float64x2_t *)(result + 272), v1105);
  v1123 = vaddq_f64(*(float64x2_t *)(result + 256), v1104);
  *(float64x2_t *)result = v1108;
  *(float64x2_t *)(result + 16) = v1107;
  *(float64x2_t *)(result + 32) = v1106;
  *(float64x2_t *)(result + 48) = v1111;
  *(float64x2_t *)(result + 64) = v1110;
  *(float64x2_t *)(result + 80) = v1109;
  *(float64x2_t *)(result + 96) = v1114;
  *(float64x2_t *)(result + 112) = v1113;
  *(float64x2_t *)(result + 128) = v1112;
  *(float64x2_t *)(result + 144) = v1117;
  *(float64x2_t *)(result + 160) = v1116;
  *(float64x2_t *)(result + 176) = v1115;
  *(float64x2_t *)(result + 192) = v1121;
  *(float64x2_t *)(result + 208) = v1120;
  *(float64x2_t *)(result + 224) = v1119;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1118, v1103);
  *(float64x2_t *)(result + 256) = v1123;
  *(float64x2_t *)(result + 272) = v1122;
  v1124 = *a2;
  if (!*a2 || !a2[8])
  {
LABEL_161:
    if (v1124)
      goto LABEL_162;
    goto LABEL_164;
  }
  v1125 = *((_DWORD *)a2 + 1);
  v1126 = *((_DWORD *)a2 + 3);
  if (v1126 < v1125)
  {
    v1124 = 1;
    goto LABEL_161;
  }
  result = sub_20F9AC33C(*v5 + 3272, v1125, v1126);
  v1333 = vld2q_f64(v1078);
  v1352 = vld2q_f64(v1081);
  v1292 = a3[6];
  v1293 = a3[7];
  v1294 = a3[8];
  v1295 = a3[9];
  v1296 = a3[10];
  v1297 = a3[11];
  v1298 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1292.f64[0]), v1333.val[1], v1292, 1);
  v1299 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1292.f64[0]), v1352.val[1], v1292, 1);
  v1300 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1293.f64[0]), v1333.val[1], v1293, 1);
  v1301 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1293.f64[0]), v1352.val[1], v1293, 1);
  v1302 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1294.f64[0]), v1333.val[1], v1294, 1);
  v1303 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1294.f64[0]), v1352.val[1], v1294, 1);
  v1304 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1295.f64[0]), v1333.val[1], v1295, 1);
  v1305 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1295.f64[0]), v1352.val[1], v1295, 1);
  v1306 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1296.f64[0]), v1333.val[1], v1296, 1);
  v1307 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1296.f64[0]), v1352.val[1], v1296, 1);
  v1308 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1297.f64[0]), v1333.val[1], v1297, 1);
  v1333.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1297.f64[0]), v1352.val[1], v1297, 1);
  v1352.val[0] = a3[1];
  v1352.val[1] = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1352.val[0]);
  v1333.val[1] = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1352.val[0]);
  v1352.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1292.f64[0]), v1333.val[1], v1292, 1);
  v1309 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1293.f64[0]), v1333.val[1], v1293, 1);
  v1310 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1294.f64[0]), v1333.val[1], v1294, 1);
  v1311 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1295.f64[0]), v1333.val[1], v1295, 1);
  v1312 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1296.f64[0]), v1333.val[1], v1296, 1);
  v1352.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1297.f64[0]), v1333.val[1], v1297, 1);
  v1333.val[1] = vaddq_f64(*(float64x2_t *)result, v1352.val[0]);
  v1352.val[0] = vaddq_f64(*(float64x2_t *)(result + 32), v1299);
  v1313 = vaddq_f64(*(float64x2_t *)(result + 16), v1298);
  v1314 = vaddq_f64(*(float64x2_t *)(result + 48), v1309);
  v1315 = vaddq_f64(*(float64x2_t *)(result + 80), v1301);
  v1316 = vaddq_f64(*(float64x2_t *)(result + 64), v1300);
  v1317 = vaddq_f64(*(float64x2_t *)(result + 96), v1310);
  v1318 = vaddq_f64(*(float64x2_t *)(result + 128), v1303);
  v1319 = vaddq_f64(*(float64x2_t *)(result + 112), v1302);
  v1320 = vaddq_f64(*(float64x2_t *)(result + 144), v1311);
  v1321 = vaddq_f64(*(float64x2_t *)(result + 176), v1305);
  v1322 = vaddq_f64(*(float64x2_t *)(result + 160), v1304);
  v1323 = vaddq_f64(*(float64x2_t *)(result + 192), v1312);
  v1324 = vaddq_f64(*(float64x2_t *)(result + 224), v1307);
  v1325 = vaddq_f64(*(float64x2_t *)(result + 208), v1306);
  v1352.val[1] = vaddq_f64(*(float64x2_t *)(result + 240), v1352.val[1]);
  v1333.val[0] = vaddq_f64(*(float64x2_t *)(result + 272), v1333.val[0]);
  *(float64x2_t *)result = v1333.val[1];
  *(float64x2_t *)(result + 16) = v1313;
  *(float64x2_t *)(result + 32) = v1352.val[0];
  *(float64x2_t *)(result + 48) = v1314;
  *(float64x2_t *)(result + 64) = v1316;
  *(float64x2_t *)(result + 80) = v1315;
  *(float64x2_t *)(result + 96) = v1317;
  *(float64x2_t *)(result + 112) = v1319;
  v1333.val[1] = vaddq_f64(*(float64x2_t *)(result + 256), v1308);
  *(float64x2_t *)(result + 128) = v1318;
  *(float64x2_t *)(result + 144) = v1320;
  *(float64x2_t *)(result + 160) = v1322;
  *(float64x2_t *)(result + 176) = v1321;
  *(float64x2_t *)(result + 192) = v1323;
  *(float64x2_t *)(result + 208) = v1325;
  *(float64x2_t *)(result + 224) = v1324;
  *(float64x2_t *)(result + 240) = v1352.val[1];
  *(float64x2_t *)(result + 256) = v1333.val[1];
  *(float64x2_t *)(result + 272) = v1333.val[0];
  v1124 = *a2;
  if (*a2)
  {
LABEL_162:
    if (a2[32])
    {
      result = sub_20F9AC460(*v5 + 9032, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 9));
      v1127 = *(float64x2_t *)(result + 144);
      v1421 = vld2q_f64(v1078);
      v1128 = (int64x2_t)a3[1];
      v1438 = vld2q_f64(v1081);
      v1129 = a3[24];
      v1130 = a3[25];
      v1131 = a3[26];
      v1132 = a3[27];
      v1133 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1128);
      v1134 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1128);
      v1135 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1129.f64[0]), v1438.val[1], v1129, 1));
      v1136 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1129.f64[0]), v1421.val[1], v1129, 1));
      v1137 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1130.f64[0]), v1438.val[1], v1130, 1));
      v1138 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1130.f64[0]), v1421.val[1], v1130, 1));
      v1139 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1133, v1130.f64[0]), v1134, v1130, 1));
      v1140 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1131.f64[0]), v1438.val[1], v1131, 1));
      v1141 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1131.f64[0]), v1421.val[1], v1131, 1));
      v1142 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1133, v1131.f64[0]), v1134, v1131, 1));
      v1143 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1132.f64[0]), v1438.val[1], v1132, 1));
      v1144 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1132.f64[0]), v1421.val[1], v1132, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1133, v1129.f64[0]), v1134, v1129, 1));
      *(float64x2_t *)(result + 16) = v1136;
      *(float64x2_t *)(result + 32) = v1135;
      *(float64x2_t *)(result + 48) = v1139;
      *(float64x2_t *)(result + 64) = v1138;
      *(float64x2_t *)(result + 80) = v1137;
      *(float64x2_t *)(result + 96) = v1142;
      *(float64x2_t *)(result + 112) = v1141;
      *(float64x2_t *)(result + 128) = v1140;
      *(float64x2_t *)(result + 144) = vaddq_f64(v1127, vmlaq_laneq_f64(vmulq_n_f64(v1133, v1132.f64[0]), v1134, v1132, 1));
      *(float64x2_t *)(result + 160) = v1144;
      *(float64x2_t *)(result + 176) = v1143;
      v1124 = *a2;
    }
  }
LABEL_164:
  if (v1124 && a2[40])
  {
    result = sub_20F9AC460(*v5 + 9032, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 11));
    v1145 = *(float64x2_t *)(result + 144);
    v1422 = vld2q_f64(v1078);
    v1146 = (int64x2_t)a3[1];
    v1439 = vld2q_f64(v1081);
    v1147 = a3[28];
    v1148 = a3[29];
    v1149 = a3[30];
    v1150 = a3[31];
    v1151 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1146);
    v1152 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1146);
    v1153 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1147.f64[0]), v1439.val[1], v1147, 1));
    v1154 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1147.f64[0]), v1422.val[1], v1147, 1));
    v1155 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1148.f64[0]), v1439.val[1], v1148, 1));
    v1156 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1148.f64[0]), v1422.val[1], v1148, 1));
    v1157 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1151, v1148.f64[0]), v1152, v1148, 1));
    v1158 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1149.f64[0]), v1439.val[1], v1149, 1));
    v1159 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1149.f64[0]), v1422.val[1], v1149, 1));
    v1160 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1151, v1149.f64[0]), v1152, v1149, 1));
    v1161 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1150.f64[0]), v1439.val[1], v1150, 1));
    v1162 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1150.f64[0]), v1422.val[1], v1150, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1151, v1147.f64[0]), v1152, v1147, 1));
    *(float64x2_t *)(result + 16) = v1154;
    *(float64x2_t *)(result + 32) = v1153;
    *(float64x2_t *)(result + 48) = v1157;
    *(float64x2_t *)(result + 64) = v1156;
    *(float64x2_t *)(result + 80) = v1155;
    *(float64x2_t *)(result + 96) = v1160;
    *(float64x2_t *)(result + 112) = v1159;
    *(float64x2_t *)(result + 128) = v1158;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1145, vmlaq_laneq_f64(vmulq_n_f64(v1151, v1150.f64[0]), v1152, v1150, 1));
    *(float64x2_t *)(result + 160) = v1162;
    *(float64x2_t *)(result + 176) = v1161;
    v1124 = *a2;
  }
  if (v1124 && a2[48])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 13));
    v1163 = *(float64x2_t *)(result + 144);
    v1423 = vld2q_f64(v1078);
    v1164 = (int64x2_t)a3[1];
    v1440 = vld2q_f64(v1081);
    v1165 = a3[32];
    v1166 = a3[33];
    v1167 = a3[34];
    v1168 = a3[35];
    v1169 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1164);
    v1170 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1164);
    v1171 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1165.f64[0]), v1440.val[1], v1165, 1));
    v1172 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1165.f64[0]), v1423.val[1], v1165, 1));
    v1173 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1166.f64[0]), v1440.val[1], v1166, 1));
    v1174 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1166.f64[0]), v1423.val[1], v1166, 1));
    v1175 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1169, v1166.f64[0]), v1170, v1166, 1));
    v1176 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1167.f64[0]), v1440.val[1], v1167, 1));
    v1177 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1167.f64[0]), v1423.val[1], v1167, 1));
    v1178 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1169, v1167.f64[0]), v1170, v1167, 1));
    v1179 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1168.f64[0]), v1440.val[1], v1168, 1));
    v1180 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1168.f64[0]), v1423.val[1], v1168, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1169, v1165.f64[0]), v1170, v1165, 1));
    *(float64x2_t *)(result + 16) = v1172;
    *(float64x2_t *)(result + 32) = v1171;
    *(float64x2_t *)(result + 48) = v1175;
    *(float64x2_t *)(result + 64) = v1174;
    *(float64x2_t *)(result + 80) = v1173;
    *(float64x2_t *)(result + 96) = v1178;
    *(float64x2_t *)(result + 112) = v1177;
    *(float64x2_t *)(result + 128) = v1176;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1163, vmlaq_laneq_f64(vmulq_n_f64(v1169, v1168.f64[0]), v1170, v1168, 1));
    *(float64x2_t *)(result + 160) = v1180;
    *(float64x2_t *)(result + 176) = v1179;
    v1124 = *a2;
  }
  if (v1124 && a2[56])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 15));
    v1181 = *(float64x2_t *)(result + 144);
    v1424 = vld2q_f64(v1078);
    v1182 = (int64x2_t)a3[1];
    v1441 = vld2q_f64(v1081);
    v1183 = a3[36];
    v1184 = a3[37];
    v1185 = a3[38];
    v1186 = a3[39];
    v1187 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1182);
    v1188 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1182);
    v1189 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1183.f64[0]), v1441.val[1], v1183, 1));
    v1190 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1183.f64[0]), v1424.val[1], v1183, 1));
    v1191 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1184.f64[0]), v1441.val[1], v1184, 1));
    v1192 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1184.f64[0]), v1424.val[1], v1184, 1));
    v1193 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1187, v1184.f64[0]), v1188, v1184, 1));
    v1194 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1185.f64[0]), v1441.val[1], v1185, 1));
    v1195 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1185.f64[0]), v1424.val[1], v1185, 1));
    v1196 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1187, v1185.f64[0]), v1188, v1185, 1));
    v1197 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1186.f64[0]), v1441.val[1], v1186, 1));
    v1198 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1186.f64[0]), v1424.val[1], v1186, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1187, v1183.f64[0]), v1188, v1183, 1));
    *(float64x2_t *)(result + 16) = v1190;
    *(float64x2_t *)(result + 32) = v1189;
    *(float64x2_t *)(result + 48) = v1193;
    *(float64x2_t *)(result + 64) = v1192;
    *(float64x2_t *)(result + 80) = v1191;
    *(float64x2_t *)(result + 96) = v1196;
    *(float64x2_t *)(result + 112) = v1195;
    *(float64x2_t *)(result + 128) = v1194;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1181, vmlaq_laneq_f64(vmulq_n_f64(v1187, v1186.f64[0]), v1188, v1186, 1));
    *(float64x2_t *)(result + 160) = v1198;
    *(float64x2_t *)(result + 176) = v1197;
    v1124 = *a2;
  }
  if (v1124 && a2[64])
  {
    result = sub_20F9AC584(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 17));
    v1393 = vld2q_f64(v1078);
    v1199 = (int64x2_t)a3[1];
    v1425 = vld2q_f64(v1081);
    v1200 = a3[40];
    v1201 = a3[41];
    v1202 = a3[42];
    v1203 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1199);
    v1204 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1199);
    v1205 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1200.f64[0]), v1425.val[1], v1200, 1));
    v1206 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1200.f64[0]), v1393.val[1], v1200, 1));
    v1207 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1201.f64[0]), v1425.val[1], v1201, 1));
    v1208 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1201.f64[0]), v1393.val[1], v1201, 1));
    v1209 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1203, v1201.f64[0]), v1204, v1201, 1));
    v1210 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1202.f64[0]), v1425.val[1], v1202, 1));
    v1211 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1202.f64[0]), v1393.val[1], v1202, 1));
    v1212 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1203, v1202.f64[0]), v1204, v1202, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1203, v1200.f64[0]), v1204, v1200, 1));
    *(float64x2_t *)(result + 16) = v1206;
    *(float64x2_t *)(result + 32) = v1205;
    *(float64x2_t *)(result + 48) = v1209;
    *(float64x2_t *)(result + 64) = v1208;
    *(float64x2_t *)(result + 80) = v1207;
    *(float64x2_t *)(result + 96) = v1212;
    *(float64x2_t *)(result + 112) = v1211;
    *(float64x2_t *)(result + 128) = v1210;
    v1124 = *a2;
  }
  if (v1124)
  {
    if (a2[72])
    {
      result = sub_20F9AC584(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 19));
      v1213 = *(float64x2_t *)(result + 96);
      v1390 = vld2q_f64(v1078);
      v1405 = vld2q_f64(v1081);
      v1214 = (int64x2_t)a3[1];
      v1215 = a3[43];
      v1216 = a3[44];
      v1217 = a3[45];
      v1218 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1214);
      v1219 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1214);
      v1220 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1215.f64[0]), v1219, v1215, 1);
      v1221 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1215.f64[0]), v1390.val[1], v1215, 1);
      v1222 = vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1215.f64[0]), v1405.val[1], v1215, 1);
      v1223 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1216.f64[0]), v1219, v1216, 1);
      v1224 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1216.f64[0]), v1390.val[1], v1216, 1);
      v1225 = vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1216.f64[0]), v1405.val[1], v1216, 1);
      v1226 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1217.f64[0]), v1219, v1217, 1);
      v1227 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1217.f64[0]), v1390.val[1], v1217, 1);
      v1228 = vaddq_f64(*(float64x2_t *)(result + 32), v1222);
      v1229 = vaddq_f64(*(float64x2_t *)(result + 16), v1221);
      v1230 = vaddq_f64(*(float64x2_t *)(result + 80), v1225);
      v1231 = vaddq_f64(*(float64x2_t *)(result + 64), v1224);
      v1232 = vaddq_f64(*(float64x2_t *)(result + 48), v1223);
      v1390.val[0] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1217.f64[0]), v1405.val[1], v1217, 1));
      v1233 = vaddq_f64(*(float64x2_t *)(result + 112), v1227);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1220);
      *(float64x2_t *)(result + 16) = v1229;
      *(float64x2_t *)(result + 32) = v1228;
      *(float64x2_t *)(result + 48) = v1232;
      *(float64x2_t *)(result + 64) = v1231;
      *(float64x2_t *)(result + 80) = v1230;
      *(float64x2_t *)(result + 96) = vaddq_f64(v1213, v1226);
      *(float64x2_t *)(result + 112) = v1233;
      *(float64x2_t *)(result + 128) = v1390.val[0];
    }
  }
  return result;
}

uint64_t sub_20F9ABFD0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 9uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 72;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AC0F4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x10uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 128;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AC218(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0xCuLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 96;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AC33C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x24uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 288;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AC460(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x18uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 192;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AC584(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x12uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 144;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

BOOL sub_20F9AC6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  double *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t *v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  float64_t v40;

  v6 = a1 + 152;
  v7 = sub_20FC7E7B4(a1, (_QWORD *)(a1 + 56), (double *)(a1 + 152), a3);
  *(_BYTE *)(a1 + 168) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 176);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(double **)(a1 + 176);
      v11 = (*(uint64_t (**)(double *))(*(_QWORD *)v10 + 16))(v10);
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v14 = v10[2];
          goto LABEL_6;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v14 = v40;
LABEL_6:
          v13 = *(float64x2_t *)a3;
          v15 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v14);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v14);
          v12 = vmulq_n_f64(*(float64x2_t *)a3, v14);
          *(float64x2_t *)a3 = v12;
          *(float64x2_t *)(a3 + 16) = v16;
          *(float64x2_t *)(a3 + 32) = v15;
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v17 = v10[2];
          goto LABEL_10;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v17 = v40;
LABEL_10:
          v13 = *(float64x2_t *)(a3 + 48);
          v18 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v17);
          v19 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v17);
          v12 = vmulq_n_f64(v13, v17);
          *(float64x2_t *)(a3 + 48) = v12;
          *(float64x2_t *)(a3 + 64) = v19;
          *(float64x2_t *)(a3 + 80) = v18;
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v20 = v10[2];
          goto LABEL_14;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v20 = v40;
LABEL_14:
          v13 = *(float64x2_t *)(a3 + 96);
          v21 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v20);
          v22 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v20);
          v12 = vmulq_n_f64(v13, v20);
          *(float64x2_t *)(a3 + 96) = v12;
          *(float64x2_t *)(a3 + 112) = v22;
          *(float64x2_t *)(a3 + 128) = v21;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v23 = v10[2];
            goto LABEL_19;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v23 = v40;
LABEL_19:
            v13 = *(float64x2_t *)(a3 + 144);
            v24 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v23);
            v25 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v23);
            v12 = vmulq_n_f64(v13, v23);
            *(float64x2_t *)(a3 + 144) = v12;
            *(float64x2_t *)(a3 + 160) = v25;
            *(float64x2_t *)(a3 + 176) = v24;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v26 = v10[2];
            goto LABEL_24;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v26 = v40;
LABEL_24:
            v13 = *(float64x2_t *)(a3 + 192);
            v27 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v26);
            v12 = vmulq_n_f64(v13, v26);
            *(float64x2_t *)(a3 + 192) = v12;
            *(float64x2_t *)(a3 + 208) = v27;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v28 = v10[2];
            goto LABEL_29;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v28 = v40;
LABEL_29:
            v13 = *(float64x2_t *)(a3 + 224);
            v29 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v28);
            v12 = vmulq_n_f64(v13, v28);
            *(float64x2_t *)(a3 + 224) = v12;
            *(float64x2_t *)(a3 + 240) = v29;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v30 = v10[2];
            goto LABEL_34;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v30 = v40;
LABEL_34:
            v13 = *(float64x2_t *)(a3 + 256);
            v31 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v30);
            v12 = vmulq_n_f64(v13, v30);
            *(float64x2_t *)(a3 + 256) = v12;
            *(float64x2_t *)(a3 + 272) = v31;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v32 = v10[2];
            goto LABEL_39;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v32 = v40;
LABEL_39:
            v13 = *(float64x2_t *)(a3 + 288);
            v33 = vmulq_n_f64(*(float64x2_t *)(a3 + 304), v32);
            v12 = vmulq_n_f64(v13, v32);
            *(float64x2_t *)(a3 + 288) = v12;
            *(float64x2_t *)(a3 + 304) = v33;
            break;
          default:
            break;
        }
      }
      v34 = (float64x2_t *)(a3 + 320);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v12.f64[0] = v10[2];
            goto LABEL_44;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v12.f64[0] = v40;
LABEL_44:
            v13.f64[0] = *(float64_t *)(a3 + 336);
            v13 = vmulq_f64(v13, v12);
            v12 = vmulq_n_f64(*v34, v12.f64[0]);
            *v34 = v12;
            *(float64_t *)(a3 + 336) = v13.f64[0];
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v12.f64[0] = v10[2];
            goto LABEL_49;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v12.f64[0] = v40;
LABEL_49:
            v13.f64[0] = *(float64_t *)(a3 + 360);
            *(float64x2_t *)(a3 + 344) = vmulq_n_f64(*(float64x2_t *)(a3 + 344), v12.f64[0]);
            *(_QWORD *)(a3 + 360) = *(_OWORD *)&vmulq_f64(v13, v12);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 20))
      {
        v35 = (double *)(a3 + 368);
        switch(v11)
        {
          case 0:
            v36 = *v35;
            v37 = v10[2];
            goto LABEL_57;
          case 1:
            v36 = *v35;
            v37 = *v35;
            if (v10 + 2 != v35)
            {
              *v35 = 0.0;
              v37 = v10[2];
            }
            goto LABEL_57;
          case 2:
            v36 = v10[2];
            v37 = *v35;
            goto LABEL_57;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v36 = *v35;
            v37 = v40;
LABEL_57:
            *v35 = v36 * v37;
            break;
          default:
            break;
        }
      }
    }
    v38 = *(double *)(a1 + 152);
    *(double *)(a1 + 144) = v38;
    v8 = *(double *)(a2 + 8) * (v38 * v38);
  }
  *(double *)(a1 + 160) = v8;
  return v7;
}

uint64_t sub_20F9ACBCC(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unsigned int v45;
  unsigned int v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  double v99;
  double v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  double v130;
  double v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  float64x2_t v141;
  float64x2_t v142;
  double v143;
  double v144;
  double v145;
  double v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  int v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  double v167;
  double v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  double v180;
  double v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  double v192;
  double v193;
  double v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  double v202;
  double v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  float64x2_t v222;
  float64x2_t v223;
  double v224;
  double v225;
  double v226;
  double v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  double v250;
  double v251;
  double v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  int v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  unsigned int v320;
  unsigned int v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  int v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  double v372;
  double v373;
  double v374;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  double v408;
  double v409;
  double v410;
  double v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  double v426;
  double v427;
  double v428;
  double v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  double v444;
  double v445;
  double v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  double v458;
  double v459;
  double v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  int v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  int v541;
  unsigned int v542;
  unsigned int v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  double v547;
  double v548;
  double v549;
  double v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  double v565;
  double v566;
  double v567;
  double v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  double v583;
  double v584;
  double v585;
  double v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  double v601;
  double v602;
  double v603;
  double v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  double v619;
  double v620;
  double v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  double v633;
  double v634;
  double v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  double v650;
  double v651;
  double v652;
  double v653;
  double v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  int v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  double v696;
  double v697;
  double v698;
  double v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  double v714;
  double v715;
  double v716;
  double v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  double v732;
  double v733;
  double v734;
  double v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  double v750;
  double v751;
  double v752;
  double v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  double v768;
  double v769;
  double v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  double v782;
  double v783;
  double v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  int v812;
  unsigned int v813;
  unsigned int v814;
  float64x2_t v815;
  float64x2_t v816;
  double v817;
  double v818;
  double v819;
  double v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  double v834;
  double v835;
  double v836;
  double v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  double v851;
  double v852;
  double v853;
  double v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  double v868;
  double v869;
  double v870;
  double v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  double v885;
  double v886;
  double v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  double v898;
  double v899;
  double v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  double v911;
  double v912;
  double v913;
  double v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  double v924;
  double v925;
  double v926;
  double v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  double v938;
  double v939;
  double v940;
  double v941;
  double v942;
  double v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  double v963;
  double v964;
  double v965;
  double v966;
  double v967;
  double v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  v7 = a2[72];
  if (a2[72])
    v8 = a2[64] == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *((_DWORD *)a2 + 19);
    v10 = *((_DWORD *)a2 + 17);
    if (v10 < v9)
    {
LABEL_9:
      result = sub_20F9ABFD0(v6 + 12776, v9, v9);
      v24.f64[0] = *(float64_t *)(result + 16);
      v25.f64[0] = *(float64_t *)(result + 40);
      v26.f64[0] = *(float64_t *)(result + 64);
      v27 = *(double *)(a3 + 360);
      v28 = *(float64x2_t *)(a3 + 344);
      v29.f64[0] = v27 * v28.f64[0];
      v30.f64[0] = v27 * v28.f64[1];
      v31.f64[0] = v27 * v27;
      v32 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v28, v28.f64[1]);
      v33 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v28, v27);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v28, v28.f64[0]);
      *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v24, v29);
      *(float64x2_t *)(result + 24) = v32;
      *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v25, v30);
      *(float64x2_t *)(result + 48) = v33;
      *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v26, v31);
      v6 = *v5;
      goto LABEL_10;
    }
    result = sub_20F9ABFD0(v6 + 12776, v9, v10);
    v11.f64[0] = *(float64_t *)(result + 16);
    v12.f64[0] = *(float64_t *)(result + 40);
    v13.f64[0] = *(float64_t *)(result + 64);
    v15 = *(double *)(a3 + 336);
    v14 = *(float64x2_t *)(a3 + 344);
    v16 = *(double *)(a3 + 360);
    v17 = *(double *)(a3 + 320);
    v18 = *(double *)(a3 + 328);
    v19.f64[0] = v16 * v17;
    v20.f64[0] = v16 * v18;
    v21.f64[0] = v16 * v15;
    v22 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v14, v18);
    v23 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v14, v15);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v14, v17);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v11, v19);
    *(float64x2_t *)(result + 24) = v22;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v12, v20);
    *(float64x2_t *)(result + 48) = v23;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v13, v21);
    v7 = a2[72];
    v6 = *v5;
  }
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 19);
    goto LABEL_9;
  }
LABEL_10:
  if (a2[64])
  {
    result = sub_20F9ABFD0(v6 + 12776, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 17));
    v34.f64[0] = *(float64_t *)(result + 16);
    v35.f64[0] = *(float64_t *)(result + 40);
    v36.f64[0] = *(float64_t *)(result + 64);
    v37 = *(float64x2_t *)(a3 + 320);
    v38 = *(double *)(a3 + 336);
    v39.f64[0] = v38 * v37.f64[0];
    v40.f64[0] = v38 * v37.f64[1];
    v41.f64[0] = v38 * v38;
    v42 = vmlaq_n_f64(*(float64x2_t *)result, v37, v37.f64[0]);
    v43 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v37, v37.f64[1]);
    v44 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v37, v38);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v34, v39);
    *(float64x2_t *)result = v42;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v35, v40);
    *(float64x2_t *)(result + 24) = v43;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v36, v41);
    *(float64x2_t *)(result + 48) = v44;
    v6 = *v5;
    if (a2[64])
    {
      if (a2[72])
      {
        v45 = *((_DWORD *)a2 + 17);
        v46 = *((_DWORD *)a2 + 19);
        if (v46 >= v45)
        {
          result = sub_20F9ABFD0(v6 + 12776, v45, v46);
          v47.f64[0] = *(float64_t *)(result + 16);
          v48.f64[0] = *(float64_t *)(result + 40);
          v49.f64[0] = *(float64_t *)(result + 64);
          v50 = *(float64x2_t *)(a3 + 320);
          v51 = *(double *)(a3 + 352);
          v52 = *(double *)(a3 + 360);
          v54 = *(double *)(a3 + 336);
          v53 = *(double *)(a3 + 344);
          v55.f64[0] = v54 * v53;
          v56.f64[0] = v54 * v51;
          v57.f64[0] = v54 * v52;
          v58 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v50, v51);
          v59 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v50, v52);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v50, v53);
          *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v47, v55);
          *(float64x2_t *)(result + 24) = v58;
          *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v48, v56);
          *(float64x2_t *)(result + 48) = v59;
          *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v49, v57);
          v6 = *v5;
        }
      }
    }
  }
  v60 = a2[56];
  if (a2[56] && a2[48])
  {
    v61 = *((_DWORD *)a2 + 15);
    v62 = *((_DWORD *)a2 + 13);
    if (v62 < v61)
      goto LABEL_21;
    result = sub_20F9AC0F4(v6 + 11192, v61, v62);
    v63 = *(float64x2_t *)(a3 + 288);
    v64 = *(float64x2_t *)(a3 + 304);
    v65 = *(double *)(a3 + 256);
    v66 = *(double *)(a3 + 264);
    v67 = *(double *)(a3 + 272);
    v68 = *(double *)(a3 + 280);
    v69 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v64, v65);
    v70 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v64, v66);
    v71 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v63, v66);
    v72 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v64, v67);
    v73 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v63, v67);
    v74 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v64, v68);
    v75 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v63, v68);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v63, v65);
    *(float64x2_t *)(result + 16) = v69;
    *(float64x2_t *)(result + 32) = v71;
    *(float64x2_t *)(result + 48) = v70;
    *(float64x2_t *)(result + 64) = v73;
    *(float64x2_t *)(result + 80) = v72;
    *(float64x2_t *)(result + 96) = v75;
    *(float64x2_t *)(result + 112) = v74;
    v60 = a2[56];
    v6 = *v5;
  }
  if (!v60)
    goto LABEL_27;
  v61 = *((_DWORD *)a2 + 15);
LABEL_21:
  result = sub_20F9AC0F4(v6 + 11192, v61, v61);
  v76 = *(float64x2_t *)(a3 + 304);
  v77 = *(float64x2_t *)(a3 + 288);
  v78 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v76, v77.f64[0]);
  v79 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v76, v77.f64[1]);
  v80 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v77, v77.f64[1]);
  v81 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v76, v76.f64[0]);
  v82 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v77, v76.f64[0]);
  v83 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v76, v76.f64[1]);
  v84 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v77, v76.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v77, v77.f64[0]);
  *(float64x2_t *)(result + 16) = v78;
  *(float64x2_t *)(result + 32) = v80;
  *(float64x2_t *)(result + 48) = v79;
  *(float64x2_t *)(result + 64) = v82;
  *(float64x2_t *)(result + 80) = v81;
  *(float64x2_t *)(result + 96) = v84;
  *(float64x2_t *)(result + 112) = v83;
  v85 = a2[56];
  v6 = *v5;
  if (a2[56] && a2[64])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 17));
    v86 = *(float64x2_t *)(a3 + 288);
    v87 = *(float64x2_t *)(a3 + 304);
    v88 = *(double *)(a3 + 320);
    v89 = *(double *)(a3 + 328);
    v90 = *(double *)(a3 + 336);
    v91 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v87, v88);
    v92 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v87, v89);
    v93 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v86, v89);
    v94 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v87, v90);
    v95 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v86, v90);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v86, v88);
    *(float64x2_t *)(result + 16) = v91;
    *(float64x2_t *)(result + 32) = v93;
    *(float64x2_t *)(result + 48) = v92;
    *(float64x2_t *)(result + 64) = v95;
    *(float64x2_t *)(result + 80) = v94;
    v85 = a2[56];
    v6 = *v5;
  }
  if (v85 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 19));
    v96 = *(float64x2_t *)(a3 + 288);
    v97 = *(float64x2_t *)(a3 + 304);
    v98 = *(double *)(a3 + 344);
    v99 = *(double *)(a3 + 352);
    v100 = *(double *)(a3 + 360);
    v101 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v97, v98);
    v102 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v97, v99);
    v103 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v96, v99);
    v104 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v97, v100);
    v105 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v96, v100);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v96, v98);
    *(float64x2_t *)(result + 16) = v101;
    *(float64x2_t *)(result + 32) = v103;
    *(float64x2_t *)(result + 48) = v102;
    *(float64x2_t *)(result + 64) = v105;
    *(float64x2_t *)(result + 80) = v104;
    v6 = *v5;
  }
LABEL_27:
  if (!a2[48])
    goto LABEL_38;
  result = sub_20F9AC0F4(v6 + 11192, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 13));
  v106 = *(float64x2_t *)(a3 + 272);
  v107 = *(float64x2_t *)(a3 + 256);
  v108 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v106, v107.f64[0]);
  v109 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v106, v107.f64[1]);
  v110 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v107, v107.f64[1]);
  v111 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v106, v106.f64[0]);
  v112 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v107, v106.f64[0]);
  v113 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v106, v106.f64[1]);
  v114 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v107, v106.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v107, v107.f64[0]);
  *(float64x2_t *)(result + 16) = v108;
  *(float64x2_t *)(result + 32) = v110;
  *(float64x2_t *)(result + 48) = v109;
  *(float64x2_t *)(result + 64) = v112;
  *(float64x2_t *)(result + 80) = v111;
  *(float64x2_t *)(result + 96) = v114;
  *(float64x2_t *)(result + 112) = v113;
  v6 = *v5;
  v115 = a2[48];
  if (!a2[48] || !a2[56])
  {
LABEL_32:
    if (v115)
      goto LABEL_33;
    goto LABEL_35;
  }
  v116 = *((_DWORD *)a2 + 13);
  v117 = *((_DWORD *)a2 + 15);
  if (v117 < v116)
  {
    v115 = 1;
    goto LABEL_32;
  }
  result = sub_20F9AC0F4(v6 + 11192, v116, v117);
  v909 = *(float64x2_t *)(a3 + 256);
  v910 = *(float64x2_t *)(a3 + 272);
  v911 = *(double *)(a3 + 288);
  v912 = *(double *)(a3 + 296);
  v913 = *(double *)(a3 + 304);
  v914 = *(double *)(a3 + 312);
  v915 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v910, v911);
  v916 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v910, v912);
  v917 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v909, v912);
  v918 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v910, v913);
  v919 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v909, v913);
  v920 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v910, v914);
  v921 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v909, v914);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v909, v911);
  *(float64x2_t *)(result + 16) = v915;
  *(float64x2_t *)(result + 32) = v917;
  *(float64x2_t *)(result + 48) = v916;
  *(float64x2_t *)(result + 64) = v919;
  *(float64x2_t *)(result + 80) = v918;
  *(float64x2_t *)(result + 96) = v921;
  *(float64x2_t *)(result + 112) = v920;
  v115 = a2[48];
  v6 = *v5;
  if (a2[48])
  {
LABEL_33:
    if (a2[64])
    {
      result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 17));
      v118 = *(float64x2_t *)(a3 + 256);
      v119 = *(float64x2_t *)(a3 + 272);
      v120 = *(double *)(a3 + 320);
      v121 = *(double *)(a3 + 328);
      v122 = *(double *)(a3 + 336);
      v123 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v119, v120);
      v124 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v119, v121);
      v125 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v118, v121);
      v126 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v119, v122);
      v127 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v118, v122);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v118, v120);
      *(float64x2_t *)(result + 16) = v123;
      *(float64x2_t *)(result + 32) = v125;
      *(float64x2_t *)(result + 48) = v124;
      *(float64x2_t *)(result + 64) = v127;
      *(float64x2_t *)(result + 80) = v126;
      v115 = a2[48];
      v6 = *v5;
    }
  }
LABEL_35:
  if (v115 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12632, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 19));
    v128 = *(float64x2_t *)(a3 + 256);
    v129 = *(float64x2_t *)(a3 + 272);
    v130 = *(double *)(a3 + 344);
    v131 = *(double *)(a3 + 352);
    v132 = *(double *)(a3 + 360);
    v133 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v129, v130);
    v134 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v129, v131);
    v135 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v128, v131);
    v136 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v129, v132);
    v137 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v128, v132);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v128, v130);
    *(float64x2_t *)(result + 16) = v133;
    *(float64x2_t *)(result + 32) = v135;
    *(float64x2_t *)(result + 48) = v134;
    *(float64x2_t *)(result + 64) = v137;
    *(float64x2_t *)(result + 80) = v136;
    v6 = *v5;
  }
LABEL_38:
  v138 = a2[40];
  if (a2[40] && a2[32])
  {
    v139 = *((_DWORD *)a2 + 11);
    v140 = *((_DWORD *)a2 + 9);
    if (v140 < v139)
      goto LABEL_44;
    result = sub_20F9AC0F4(v6 + 9608, v139, v140);
    v141 = *(float64x2_t *)(a3 + 224);
    v142 = *(float64x2_t *)(a3 + 240);
    v143 = *(double *)(a3 + 192);
    v144 = *(double *)(a3 + 200);
    v145 = *(double *)(a3 + 208);
    v146 = *(double *)(a3 + 216);
    v147 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v142, v143);
    v148 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v142, v144);
    v149 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v141, v144);
    v150 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v142, v145);
    v151 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v141, v145);
    v152 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v142, v146);
    v153 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v141, v146);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v141, v143);
    *(float64x2_t *)(result + 16) = v147;
    *(float64x2_t *)(result + 32) = v149;
    *(float64x2_t *)(result + 48) = v148;
    *(float64x2_t *)(result + 64) = v151;
    *(float64x2_t *)(result + 80) = v150;
    *(float64x2_t *)(result + 96) = v153;
    *(float64x2_t *)(result + 112) = v152;
    v138 = a2[40];
    v6 = *v5;
  }
  if (!v138)
    goto LABEL_56;
  v139 = *((_DWORD *)a2 + 11);
LABEL_44:
  result = sub_20F9AC0F4(v6 + 9608, v139, v139);
  v154 = *(float64x2_t *)(a3 + 240);
  v155 = *(float64x2_t *)(a3 + 224);
  v156 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v154, v155.f64[0]);
  v157 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v154, v155.f64[1]);
  v158 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v155, v155.f64[1]);
  v159 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v154, v154.f64[0]);
  v160 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v155, v154.f64[0]);
  v161 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v154, v154.f64[1]);
  v162 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v155, v154.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v155, v155.f64[0]);
  *(float64x2_t *)(result + 16) = v156;
  *(float64x2_t *)(result + 32) = v158;
  *(float64x2_t *)(result + 48) = v157;
  *(float64x2_t *)(result + 64) = v160;
  *(float64x2_t *)(result + 80) = v159;
  *(float64x2_t *)(result + 96) = v162;
  *(float64x2_t *)(result + 112) = v161;
  v163 = a2[40];
  v6 = *v5;
  if (a2[40] && a2[48])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 13));
    v164 = *(float64x2_t *)(a3 + 224);
    v165 = *(float64x2_t *)(a3 + 240);
    v166 = *(double *)(a3 + 256);
    v167 = *(double *)(a3 + 264);
    v168 = *(double *)(a3 + 272);
    v169 = *(double *)(a3 + 280);
    v170 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v165, v166);
    v171 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v165, v167);
    v172 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v164, v167);
    v173 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v165, v168);
    v174 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v164, v168);
    v175 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v165, v169);
    v176 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v164, v169);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v164, v166);
    *(float64x2_t *)(result + 16) = v170;
    *(float64x2_t *)(result + 32) = v172;
    *(float64x2_t *)(result + 48) = v171;
    *(float64x2_t *)(result + 64) = v174;
    *(float64x2_t *)(result + 80) = v173;
    *(float64x2_t *)(result + 96) = v176;
    *(float64x2_t *)(result + 112) = v175;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 15));
    v177 = *(float64x2_t *)(a3 + 224);
    v178 = *(float64x2_t *)(a3 + 240);
    v179 = *(double *)(a3 + 288);
    v180 = *(double *)(a3 + 296);
    v181 = *(double *)(a3 + 304);
    v182 = *(double *)(a3 + 312);
    v183 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v178, v179);
    v184 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v178, v180);
    v185 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v177, v180);
    v186 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v178, v181);
    v187 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v177, v181);
    v188 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v178, v182);
    v189 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v177, v182);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v177, v179);
    *(float64x2_t *)(result + 16) = v183;
    *(float64x2_t *)(result + 32) = v185;
    *(float64x2_t *)(result + 48) = v184;
    *(float64x2_t *)(result + 64) = v187;
    *(float64x2_t *)(result + 80) = v186;
    *(float64x2_t *)(result + 96) = v189;
    *(float64x2_t *)(result + 112) = v188;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[64])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 17));
    v190 = *(float64x2_t *)(a3 + 224);
    v191 = *(float64x2_t *)(a3 + 240);
    v192 = *(double *)(a3 + 320);
    v193 = *(double *)(a3 + 328);
    v194 = *(double *)(a3 + 336);
    v195 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v191, v192);
    v196 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v191, v193);
    v197 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v190, v193);
    v198 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v191, v194);
    v199 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v190, v194);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v190, v192);
    *(float64x2_t *)(result + 16) = v195;
    *(float64x2_t *)(result + 32) = v197;
    *(float64x2_t *)(result + 48) = v196;
    *(float64x2_t *)(result + 64) = v199;
    *(float64x2_t *)(result + 80) = v198;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 19));
    v200 = *(float64x2_t *)(a3 + 224);
    v201 = *(float64x2_t *)(a3 + 240);
    v202 = *(double *)(a3 + 344);
    v203 = *(double *)(a3 + 352);
    v204 = *(double *)(a3 + 360);
    v205 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v201, v202);
    v206 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v201, v203);
    v207 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v200, v203);
    v208 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v201, v204);
    v209 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v200, v204);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v200, v202);
    *(float64x2_t *)(result + 16) = v205;
    *(float64x2_t *)(result + 32) = v207;
    *(float64x2_t *)(result + 48) = v206;
    *(float64x2_t *)(result + 64) = v209;
    *(float64x2_t *)(result + 80) = v208;
    v6 = *v5;
  }
LABEL_56:
  if (!a2[32])
    goto LABEL_73;
  result = sub_20F9AC0F4(v6 + 9608, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 9));
  v210 = *(float64x2_t *)(a3 + 208);
  v211 = *(float64x2_t *)(a3 + 192);
  v212 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v210, v211.f64[0]);
  v213 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v210, v211.f64[1]);
  v214 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v211, v211.f64[1]);
  v215 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v210, v210.f64[0]);
  v216 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v211, v210.f64[0]);
  v217 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v210, v210.f64[1]);
  v218 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v211, v210.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v211, v211.f64[0]);
  *(float64x2_t *)(result + 16) = v212;
  *(float64x2_t *)(result + 32) = v214;
  *(float64x2_t *)(result + 48) = v213;
  *(float64x2_t *)(result + 64) = v216;
  *(float64x2_t *)(result + 80) = v215;
  *(float64x2_t *)(result + 96) = v218;
  *(float64x2_t *)(result + 112) = v217;
  v6 = *v5;
  v219 = a2[32];
  if (!a2[32] || !a2[40])
  {
LABEL_61:
    if (v219)
      goto LABEL_62;
    goto LABEL_64;
  }
  v220 = *((_DWORD *)a2 + 9);
  v221 = *((_DWORD *)a2 + 11);
  if (v221 < v220)
  {
    v219 = 1;
    goto LABEL_61;
  }
  result = sub_20F9AC0F4(v6 + 9608, v220, v221);
  v922 = *(float64x2_t *)(a3 + 192);
  v923 = *(float64x2_t *)(a3 + 208);
  v924 = *(double *)(a3 + 224);
  v925 = *(double *)(a3 + 232);
  v926 = *(double *)(a3 + 240);
  v927 = *(double *)(a3 + 248);
  v928 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v923, v924);
  v929 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v923, v925);
  v930 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v922, v925);
  v931 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v923, v926);
  v932 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v922, v926);
  v933 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v923, v927);
  v934 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v922, v927);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v922, v924);
  *(float64x2_t *)(result + 16) = v928;
  *(float64x2_t *)(result + 32) = v930;
  *(float64x2_t *)(result + 48) = v929;
  *(float64x2_t *)(result + 64) = v932;
  *(float64x2_t *)(result + 80) = v931;
  *(float64x2_t *)(result + 96) = v934;
  *(float64x2_t *)(result + 112) = v933;
  v219 = a2[32];
  v6 = *v5;
  if (a2[32])
  {
LABEL_62:
    if (a2[48])
    {
      result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 13));
      v222 = *(float64x2_t *)(a3 + 192);
      v223 = *(float64x2_t *)(a3 + 208);
      v224 = *(double *)(a3 + 256);
      v225 = *(double *)(a3 + 264);
      v226 = *(double *)(a3 + 272);
      v227 = *(double *)(a3 + 280);
      v228 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v223, v224);
      v229 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v223, v225);
      v230 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v222, v225);
      v231 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v223, v226);
      v232 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v222, v226);
      v233 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v223, v227);
      v234 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v222, v227);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v222, v224);
      *(float64x2_t *)(result + 16) = v228;
      *(float64x2_t *)(result + 32) = v230;
      *(float64x2_t *)(result + 48) = v229;
      *(float64x2_t *)(result + 64) = v232;
      *(float64x2_t *)(result + 80) = v231;
      *(float64x2_t *)(result + 96) = v234;
      *(float64x2_t *)(result + 112) = v233;
      v219 = a2[32];
      v6 = *v5;
    }
  }
LABEL_64:
  if (v219 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 11048, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 15));
    v235 = *(float64x2_t *)(a3 + 192);
    v236 = *(float64x2_t *)(a3 + 208);
    v237 = *(double *)(a3 + 288);
    v238 = *(double *)(a3 + 296);
    v239 = *(double *)(a3 + 304);
    v240 = *(double *)(a3 + 312);
    v241 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v236, v237);
    v242 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v236, v238);
    v243 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v235, v238);
    v244 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v236, v239);
    v245 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v235, v239);
    v246 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v236, v240);
    v247 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v235, v240);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v235, v237);
    *(float64x2_t *)(result + 16) = v241;
    *(float64x2_t *)(result + 32) = v243;
    *(float64x2_t *)(result + 48) = v242;
    *(float64x2_t *)(result + 64) = v245;
    *(float64x2_t *)(result + 80) = v244;
    *(float64x2_t *)(result + 96) = v247;
    *(float64x2_t *)(result + 112) = v246;
    v219 = a2[32];
    v6 = *v5;
  }
  if (v219 && a2[64])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 17));
    v248 = *(float64x2_t *)(a3 + 192);
    v249 = *(float64x2_t *)(a3 + 208);
    v250 = *(double *)(a3 + 320);
    v251 = *(double *)(a3 + 328);
    v252 = *(double *)(a3 + 336);
    v253 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v249, v250);
    v254 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v249, v251);
    v255 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v248, v251);
    v256 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v249, v252);
    v257 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v248, v252);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v248, v250);
    *(float64x2_t *)(result + 16) = v253;
    *(float64x2_t *)(result + 32) = v255;
    *(float64x2_t *)(result + 48) = v254;
    *(float64x2_t *)(result + 64) = v257;
    *(float64x2_t *)(result + 80) = v256;
    v219 = a2[32];
    v6 = *v5;
  }
  if (v219 && a2[72])
  {
    result = sub_20F9AC218(v6 + 12488, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 19));
    v258 = *(float64x2_t *)(a3 + 192);
    v259 = *(float64x2_t *)(a3 + 208);
    v260 = *(double *)(a3 + 344);
    v261 = *(double *)(a3 + 352);
    v262 = *(double *)(a3 + 360);
    v263 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v259, v260);
    v264 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v259, v261);
    v265 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v258, v261);
    v266 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v259, v262);
    v267 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v258, v262);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v258, v260);
    *(float64x2_t *)(result + 16) = v263;
    *(float64x2_t *)(result + 32) = v265;
    *(float64x2_t *)(result + 48) = v264;
    *(float64x2_t *)(result + 64) = v267;
    *(float64x2_t *)(result + 80) = v266;
    v6 = *v5;
  }
LABEL_73:
  v268 = a2[24];
  if (a2[24] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 1));
    v269 = *(float64x2_t *)(a3 + 144);
    v270 = *(float64x2_t *)(a3 + 160);
    v271 = *(float64x2_t *)(a3 + 176);
    v272 = *(double *)(a3 + 8);
    v273 = *(double *)(a3 + 16);
    v274 = *(double *)(a3 + 24);
    v275 = *(double *)(a3 + 32);
    v276 = *(double *)(a3 + 40);
    v277 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v270, *(double *)a3);
    v278 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v271, *(double *)a3);
    v279 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v269, v272);
    v280 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v270, v272);
    v281 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v271, v272);
    v282 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v269, v273);
    v283 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v270, v273);
    v284 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v271, v273);
    v285 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v269, v274);
    v286 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v270, v274);
    v287 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v271, v274);
    v288 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v269, v275);
    v289 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v270, v275);
    v290 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v271, v275);
    v291 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v269, v276);
    v292 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v270, v276);
    v293 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v271, v276);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v269, *(double *)a3);
    *(float64x2_t *)(result + 16) = v277;
    *(float64x2_t *)(result + 64) = v280;
    *(float64x2_t *)(result + 80) = v281;
    *(float64x2_t *)(result + 32) = v278;
    *(float64x2_t *)(result + 48) = v279;
    *(float64x2_t *)(result + 96) = v282;
    *(float64x2_t *)(result + 112) = v283;
    *(float64x2_t *)(result + 160) = v286;
    *(float64x2_t *)(result + 176) = v287;
    *(float64x2_t *)(result + 128) = v284;
    *(float64x2_t *)(result + 144) = v285;
    *(float64x2_t *)(result + 192) = v288;
    *(float64x2_t *)(result + 208) = v289;
    *(float64x2_t *)(result + 256) = v292;
    *(float64x2_t *)(result + 272) = v293;
    *(float64x2_t *)(result + 224) = v290;
    *(float64x2_t *)(result + 240) = v291;
    v268 = a2[24];
    v6 = *v5;
  }
  if (v268 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 3));
    v294 = *(float64x2_t *)(a3 + 144);
    v295 = *(float64x2_t *)(a3 + 160);
    v296 = *(float64x2_t *)(a3 + 176);
    v297 = *(double *)(a3 + 48);
    v298 = *(double *)(a3 + 56);
    v299 = *(double *)(a3 + 64);
    v300 = *(double *)(a3 + 72);
    v301 = *(double *)(a3 + 80);
    v302 = *(double *)(a3 + 88);
    v303 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v295, v297);
    v304 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v296, v297);
    v305 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v294, v298);
    v306 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v295, v298);
    v307 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v296, v298);
    v308 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v294, v299);
    v309 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v295, v299);
    v310 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v296, v299);
    v311 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v294, v300);
    v312 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v295, v300);
    v313 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v296, v300);
    v314 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v294, v301);
    v315 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v295, v301);
    v316 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v296, v301);
    v317 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v294, v302);
    v318 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v295, v302);
    v319 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v296, v302);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v294, v297);
    *(float64x2_t *)(result + 16) = v303;
    *(float64x2_t *)(result + 64) = v306;
    *(float64x2_t *)(result + 80) = v307;
    *(float64x2_t *)(result + 32) = v304;
    *(float64x2_t *)(result + 48) = v305;
    *(float64x2_t *)(result + 96) = v308;
    *(float64x2_t *)(result + 112) = v309;
    *(float64x2_t *)(result + 160) = v312;
    *(float64x2_t *)(result + 176) = v313;
    *(float64x2_t *)(result + 128) = v310;
    *(float64x2_t *)(result + 144) = v311;
    *(float64x2_t *)(result + 192) = v314;
    *(float64x2_t *)(result + 208) = v315;
    *(float64x2_t *)(result + 256) = v318;
    *(float64x2_t *)(result + 272) = v319;
    *(float64x2_t *)(result + 224) = v316;
    *(float64x2_t *)(result + 240) = v317;
    v6 = *v5;
    v268 = a2[24];
  }
  if (v268 && a2[16])
  {
    v320 = *((_DWORD *)a2 + 7);
    v321 = *((_DWORD *)a2 + 5);
    if (v321 < v320)
      goto LABEL_85;
    result = sub_20F9AC33C(v6 + 104, v320, v321);
    v322 = *(float64x2_t *)(a3 + 144);
    v323 = *(float64x2_t *)(a3 + 160);
    v324 = *(float64x2_t *)(a3 + 176);
    v325 = *(double *)(a3 + 96);
    v326 = *(double *)(a3 + 104);
    v327 = *(double *)(a3 + 112);
    v328 = *(double *)(a3 + 120);
    v329 = *(double *)(a3 + 128);
    v330 = *(double *)(a3 + 136);
    v331 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v323, v325);
    v332 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v324, v325);
    v333 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v322, v326);
    v334 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v323, v326);
    v335 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v324, v326);
    v336 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v322, v327);
    v337 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v323, v327);
    v338 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v324, v327);
    v339 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v322, v328);
    v340 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v323, v328);
    v341 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v324, v328);
    v342 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v322, v329);
    v343 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v323, v329);
    v344 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v324, v329);
    v345 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v322, v330);
    v346 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v323, v330);
    v347 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v324, v330);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v322, v325);
    *(float64x2_t *)(result + 16) = v331;
    *(float64x2_t *)(result + 64) = v334;
    *(float64x2_t *)(result + 80) = v335;
    *(float64x2_t *)(result + 32) = v332;
    *(float64x2_t *)(result + 48) = v333;
    *(float64x2_t *)(result + 96) = v336;
    *(float64x2_t *)(result + 112) = v337;
    *(float64x2_t *)(result + 160) = v340;
    *(float64x2_t *)(result + 176) = v341;
    *(float64x2_t *)(result + 128) = v338;
    *(float64x2_t *)(result + 144) = v339;
    *(float64x2_t *)(result + 192) = v342;
    *(float64x2_t *)(result + 208) = v343;
    *(float64x2_t *)(result + 256) = v346;
    *(float64x2_t *)(result + 272) = v347;
    *(float64x2_t *)(result + 224) = v344;
    *(float64x2_t *)(result + 240) = v345;
    v268 = a2[24];
    v6 = *v5;
  }
  if (!v268)
    goto LABEL_103;
  v320 = *((_DWORD *)a2 + 7);
LABEL_85:
  result = sub_20F9AC33C(v6 + 104, v320, v320);
  v348 = *(float64x2_t *)(a3 + 160);
  v349 = *(float64x2_t *)(a3 + 176);
  v350 = *(float64x2_t *)(a3 + 144);
  v351 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v349, v350.f64[0]);
  v352 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v348, v350.f64[0]);
  v353 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v349, v350.f64[1]);
  v354 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v348, v350.f64[1]);
  v355 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v350, v350.f64[1]);
  v356 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v349, v348.f64[0]);
  v357 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v348, v348.f64[0]);
  v358 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v350, v348.f64[0]);
  v359 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v349, v348.f64[1]);
  v360 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v348, v348.f64[1]);
  v361 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v350, v348.f64[1]);
  v362 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v349, v349.f64[0]);
  v363 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v348, v349.f64[0]);
  v364 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v350, v349.f64[0]);
  v365 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v349, v349.f64[1]);
  v366 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v348, v349.f64[1]);
  v367 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v350, v349.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v350, v350.f64[0]);
  *(float64x2_t *)(result + 16) = v352;
  *(float64x2_t *)(result + 32) = v351;
  *(float64x2_t *)(result + 48) = v355;
  *(float64x2_t *)(result + 64) = v354;
  *(float64x2_t *)(result + 80) = v353;
  *(float64x2_t *)(result + 96) = v358;
  *(float64x2_t *)(result + 112) = v357;
  *(float64x2_t *)(result + 128) = v356;
  *(float64x2_t *)(result + 144) = v361;
  *(float64x2_t *)(result + 160) = v360;
  *(float64x2_t *)(result + 176) = v359;
  *(float64x2_t *)(result + 192) = v364;
  *(float64x2_t *)(result + 208) = v363;
  *(float64x2_t *)(result + 224) = v362;
  *(float64x2_t *)(result + 240) = v367;
  *(float64x2_t *)(result + 256) = v366;
  *(float64x2_t *)(result + 272) = v365;
  v368 = a2[24];
  v6 = *v5;
  if (a2[24] && a2[32])
  {
    result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 9));
    v369 = *(float64x2_t *)(a3 + 144);
    v370 = *(float64x2_t *)(a3 + 160);
    v371 = *(float64x2_t *)(a3 + 176);
    v372 = *(double *)(a3 + 192);
    v373 = *(double *)(a3 + 200);
    v374 = *(double *)(a3 + 208);
    v375 = *(double *)(a3 + 216);
    v376 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v371, v372);
    v377 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v370, v372);
    v378 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v371, v373);
    v379 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v370, v373);
    v380 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v369, v373);
    v381 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v371, v374);
    v382 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v370, v374);
    v383 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v369, v374);
    v384 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v371, v375);
    v385 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v370, v375);
    v386 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v369, v375);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v369, v372);
    *(float64x2_t *)(result + 16) = v377;
    *(float64x2_t *)(result + 32) = v376;
    *(float64x2_t *)(result + 48) = v380;
    *(float64x2_t *)(result + 64) = v379;
    *(float64x2_t *)(result + 80) = v378;
    *(float64x2_t *)(result + 96) = v383;
    *(float64x2_t *)(result + 112) = v382;
    *(float64x2_t *)(result + 128) = v381;
    *(float64x2_t *)(result + 144) = v386;
    *(float64x2_t *)(result + 160) = v385;
    *(float64x2_t *)(result + 176) = v384;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[40])
  {
    result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 11));
    v387 = *(float64x2_t *)(a3 + 144);
    v388 = *(float64x2_t *)(a3 + 160);
    v389 = *(float64x2_t *)(a3 + 176);
    v390 = *(double *)(a3 + 224);
    v391 = *(double *)(a3 + 232);
    v392 = *(double *)(a3 + 240);
    v393 = *(double *)(a3 + 248);
    v394 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v389, v390);
    v395 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v388, v390);
    v396 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v389, v391);
    v397 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v388, v391);
    v398 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v387, v391);
    v399 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v389, v392);
    v400 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v388, v392);
    v401 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v387, v392);
    v402 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v389, v393);
    v403 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v388, v393);
    v404 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v387, v393);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v387, v390);
    *(float64x2_t *)(result + 16) = v395;
    *(float64x2_t *)(result + 32) = v394;
    *(float64x2_t *)(result + 48) = v398;
    *(float64x2_t *)(result + 64) = v397;
    *(float64x2_t *)(result + 80) = v396;
    *(float64x2_t *)(result + 96) = v401;
    *(float64x2_t *)(result + 112) = v400;
    *(float64x2_t *)(result + 128) = v399;
    *(float64x2_t *)(result + 144) = v404;
    *(float64x2_t *)(result + 160) = v403;
    *(float64x2_t *)(result + 176) = v402;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[48])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 13));
    v405 = *(float64x2_t *)(a3 + 144);
    v406 = *(float64x2_t *)(a3 + 160);
    v407 = *(float64x2_t *)(a3 + 176);
    v408 = *(double *)(a3 + 256);
    v409 = *(double *)(a3 + 264);
    v410 = *(double *)(a3 + 272);
    v411 = *(double *)(a3 + 280);
    v412 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v407, v408);
    v413 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v406, v408);
    v414 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v407, v409);
    v415 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v406, v409);
    v416 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v405, v409);
    v417 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v407, v410);
    v418 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v406, v410);
    v419 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v405, v410);
    v420 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v407, v411);
    v421 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v406, v411);
    v422 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v405, v411);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v405, v408);
    *(float64x2_t *)(result + 16) = v413;
    *(float64x2_t *)(result + 32) = v412;
    *(float64x2_t *)(result + 48) = v416;
    *(float64x2_t *)(result + 64) = v415;
    *(float64x2_t *)(result + 80) = v414;
    *(float64x2_t *)(result + 96) = v419;
    *(float64x2_t *)(result + 112) = v418;
    *(float64x2_t *)(result + 128) = v417;
    *(float64x2_t *)(result + 144) = v422;
    *(float64x2_t *)(result + 160) = v421;
    *(float64x2_t *)(result + 176) = v420;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[56])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 15));
    v423 = *(float64x2_t *)(a3 + 144);
    v424 = *(float64x2_t *)(a3 + 160);
    v425 = *(float64x2_t *)(a3 + 176);
    v426 = *(double *)(a3 + 288);
    v427 = *(double *)(a3 + 296);
    v428 = *(double *)(a3 + 304);
    v429 = *(double *)(a3 + 312);
    v430 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v425, v426);
    v431 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v424, v426);
    v432 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v425, v427);
    v433 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v424, v427);
    v434 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v423, v427);
    v435 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v425, v428);
    v436 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v424, v428);
    v437 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v423, v428);
    v438 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v425, v429);
    v439 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v424, v429);
    v440 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v423, v429);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v423, v426);
    *(float64x2_t *)(result + 16) = v431;
    *(float64x2_t *)(result + 32) = v430;
    *(float64x2_t *)(result + 48) = v434;
    *(float64x2_t *)(result + 64) = v433;
    *(float64x2_t *)(result + 80) = v432;
    *(float64x2_t *)(result + 96) = v437;
    *(float64x2_t *)(result + 112) = v436;
    *(float64x2_t *)(result + 128) = v435;
    *(float64x2_t *)(result + 144) = v440;
    *(float64x2_t *)(result + 160) = v439;
    *(float64x2_t *)(result + 176) = v438;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[64])
  {
    result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 17));
    v441 = *(float64x2_t *)(a3 + 144);
    v442 = *(float64x2_t *)(a3 + 160);
    v443 = *(float64x2_t *)(a3 + 176);
    v444 = *(double *)(a3 + 320);
    v445 = *(double *)(a3 + 328);
    v446 = *(double *)(a3 + 336);
    v447 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v443, v444);
    v448 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v442, v444);
    v449 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v443, v445);
    v450 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v442, v445);
    v451 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v441, v445);
    v452 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v443, v446);
    v453 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v442, v446);
    v454 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v441, v446);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v441, v444);
    *(float64x2_t *)(result + 16) = v448;
    *(float64x2_t *)(result + 32) = v447;
    *(float64x2_t *)(result + 48) = v451;
    *(float64x2_t *)(result + 64) = v450;
    *(float64x2_t *)(result + 80) = v449;
    *(float64x2_t *)(result + 96) = v454;
    *(float64x2_t *)(result + 112) = v453;
    *(float64x2_t *)(result + 128) = v452;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[72])
  {
    result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 19));
    v455 = *(float64x2_t *)(a3 + 144);
    v456 = *(float64x2_t *)(a3 + 160);
    v457 = *(float64x2_t *)(a3 + 176);
    v458 = *(double *)(a3 + 344);
    v459 = *(double *)(a3 + 352);
    v460 = *(double *)(a3 + 360);
    v461 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v457, v458);
    v462 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v456, v458);
    v463 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v457, v459);
    v464 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v456, v459);
    v465 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v455, v459);
    v466 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v457, v460);
    v467 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v456, v460);
    v468 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v455, v460);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v455, v458);
    *(float64x2_t *)(result + 16) = v462;
    *(float64x2_t *)(result + 32) = v461;
    *(float64x2_t *)(result + 48) = v465;
    *(float64x2_t *)(result + 64) = v464;
    *(float64x2_t *)(result + 80) = v463;
    *(float64x2_t *)(result + 96) = v468;
    *(float64x2_t *)(result + 112) = v467;
    *(float64x2_t *)(result + 128) = v466;
    v6 = *v5;
  }
LABEL_103:
  v469 = a2[16];
  if (a2[16] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 1));
    v470 = *(float64x2_t *)(a3 + 96);
    v471 = *(float64x2_t *)(a3 + 112);
    v472 = *(float64x2_t *)(a3 + 128);
    v473 = *(double *)(a3 + 8);
    v474 = *(double *)(a3 + 16);
    v475 = *(double *)(a3 + 24);
    v476 = *(double *)(a3 + 32);
    v477 = *(double *)(a3 + 40);
    v478 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v471, *(double *)a3);
    v479 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v472, *(double *)a3);
    v480 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v470, v473);
    v481 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v471, v473);
    v482 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v472, v473);
    v483 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v470, v474);
    v484 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v471, v474);
    v485 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v472, v474);
    v486 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v470, v475);
    v487 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v471, v475);
    v488 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v472, v475);
    v489 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v470, v476);
    v490 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v471, v476);
    v491 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v472, v476);
    v492 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v470, v477);
    v493 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v471, v477);
    v494 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v472, v477);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v470, *(double *)a3);
    *(float64x2_t *)(result + 16) = v478;
    *(float64x2_t *)(result + 64) = v481;
    *(float64x2_t *)(result + 80) = v482;
    *(float64x2_t *)(result + 32) = v479;
    *(float64x2_t *)(result + 48) = v480;
    *(float64x2_t *)(result + 96) = v483;
    *(float64x2_t *)(result + 112) = v484;
    *(float64x2_t *)(result + 160) = v487;
    *(float64x2_t *)(result + 176) = v488;
    *(float64x2_t *)(result + 128) = v485;
    *(float64x2_t *)(result + 144) = v486;
    *(float64x2_t *)(result + 192) = v489;
    *(float64x2_t *)(result + 208) = v490;
    *(float64x2_t *)(result + 256) = v493;
    *(float64x2_t *)(result + 272) = v494;
    *(float64x2_t *)(result + 224) = v491;
    *(float64x2_t *)(result + 240) = v492;
    v469 = a2[16];
    v6 = *v5;
  }
  if (v469 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 3));
    v495 = *(float64x2_t *)(a3 + 96);
    v496 = *(float64x2_t *)(a3 + 112);
    v497 = *(float64x2_t *)(a3 + 128);
    v498 = *(double *)(a3 + 48);
    v499 = *(double *)(a3 + 56);
    v500 = *(double *)(a3 + 64);
    v501 = *(double *)(a3 + 72);
    v502 = *(double *)(a3 + 80);
    v503 = *(double *)(a3 + 88);
    v504 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v496, v498);
    v505 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v497, v498);
    v506 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v495, v499);
    v507 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v496, v499);
    v508 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v497, v499);
    v509 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v495, v500);
    v510 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v496, v500);
    v511 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v497, v500);
    v512 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v495, v501);
    v513 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v496, v501);
    v514 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v497, v501);
    v515 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v495, v502);
    v516 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v496, v502);
    v517 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v497, v502);
    v518 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v495, v503);
    v519 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v496, v503);
    v520 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v497, v503);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v495, v498);
    *(float64x2_t *)(result + 16) = v504;
    *(float64x2_t *)(result + 64) = v507;
    *(float64x2_t *)(result + 80) = v508;
    *(float64x2_t *)(result + 32) = v505;
    *(float64x2_t *)(result + 48) = v506;
    *(float64x2_t *)(result + 96) = v509;
    *(float64x2_t *)(result + 112) = v510;
    *(float64x2_t *)(result + 160) = v513;
    *(float64x2_t *)(result + 176) = v514;
    *(float64x2_t *)(result + 128) = v511;
    *(float64x2_t *)(result + 144) = v512;
    *(float64x2_t *)(result + 192) = v515;
    *(float64x2_t *)(result + 208) = v516;
    *(float64x2_t *)(result + 256) = v519;
    *(float64x2_t *)(result + 272) = v520;
    *(float64x2_t *)(result + 224) = v517;
    *(float64x2_t *)(result + 240) = v518;
    v469 = a2[16];
    v6 = *v5;
  }
  if (v469)
  {
    result = sub_20F9AC33C(v6 + 104, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 5));
    v521 = *(float64x2_t *)(a3 + 112);
    v522 = *(float64x2_t *)(a3 + 128);
    v523 = *(float64x2_t *)(a3 + 96);
    v524 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v522, v523.f64[0]);
    v525 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v521, v523.f64[0]);
    v526 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v522, v523.f64[1]);
    v527 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v521, v523.f64[1]);
    v528 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v523, v523.f64[1]);
    v529 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v522, v521.f64[0]);
    v530 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v521, v521.f64[0]);
    v531 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v523, v521.f64[0]);
    v532 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v522, v521.f64[1]);
    v533 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v521, v521.f64[1]);
    v534 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v523, v521.f64[1]);
    v535 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v522, v522.f64[0]);
    v536 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v521, v522.f64[0]);
    v537 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v523, v522.f64[0]);
    v538 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v522, v522.f64[1]);
    v539 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v521, v522.f64[1]);
    v540 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v523, v522.f64[1]);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v523, v523.f64[0]);
    *(float64x2_t *)(result + 16) = v525;
    *(float64x2_t *)(result + 32) = v524;
    *(float64x2_t *)(result + 48) = v528;
    *(float64x2_t *)(result + 64) = v527;
    *(float64x2_t *)(result + 80) = v526;
    *(float64x2_t *)(result + 96) = v531;
    *(float64x2_t *)(result + 112) = v530;
    *(float64x2_t *)(result + 128) = v529;
    *(float64x2_t *)(result + 144) = v534;
    *(float64x2_t *)(result + 160) = v533;
    *(float64x2_t *)(result + 176) = v532;
    *(float64x2_t *)(result + 192) = v537;
    *(float64x2_t *)(result + 208) = v536;
    *(float64x2_t *)(result + 224) = v535;
    *(float64x2_t *)(result + 240) = v540;
    *(float64x2_t *)(result + 256) = v539;
    *(float64x2_t *)(result + 272) = v538;
    v6 = *v5;
    v541 = a2[16];
    if (a2[16] && a2[24])
    {
      v542 = *((_DWORD *)a2 + 5);
      v543 = *((_DWORD *)a2 + 7);
      if (v543 >= v542)
      {
        result = sub_20F9AC33C(v6 + 104, v542, v543);
        v935 = *(float64x2_t *)(a3 + 96);
        v936 = *(float64x2_t *)(a3 + 112);
        v937 = *(float64x2_t *)(a3 + 128);
        v938 = *(double *)(a3 + 144);
        v939 = *(double *)(a3 + 152);
        v940 = *(double *)(a3 + 160);
        v941 = *(double *)(a3 + 168);
        v942 = *(double *)(a3 + 176);
        v943 = *(double *)(a3 + 184);
        v944 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v936, v938);
        v945 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v937, v938);
        v946 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v935, v939);
        v947 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v936, v939);
        v948 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v937, v939);
        v949 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v935, v940);
        v950 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v936, v940);
        v951 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v937, v940);
        v952 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v935, v941);
        v953 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v936, v941);
        v954 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v937, v941);
        v955 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v935, v942);
        v956 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v936, v942);
        v957 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v937, v942);
        v958 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v935, v943);
        v959 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v936, v943);
        v960 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v937, v943);
        *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v935, v938);
        *(float64x2_t *)(result + 16) = v944;
        *(float64x2_t *)(result + 64) = v947;
        *(float64x2_t *)(result + 80) = v948;
        *(float64x2_t *)(result + 32) = v945;
        *(float64x2_t *)(result + 48) = v946;
        *(float64x2_t *)(result + 96) = v949;
        *(float64x2_t *)(result + 112) = v950;
        *(float64x2_t *)(result + 160) = v953;
        *(float64x2_t *)(result + 176) = v954;
        *(float64x2_t *)(result + 128) = v951;
        *(float64x2_t *)(result + 144) = v952;
        *(float64x2_t *)(result + 192) = v955;
        *(float64x2_t *)(result + 208) = v956;
        *(float64x2_t *)(result + 256) = v959;
        *(float64x2_t *)(result + 272) = v960;
        *(float64x2_t *)(result + 224) = v957;
        *(float64x2_t *)(result + 240) = v958;
        v541 = a2[16];
        v6 = *v5;
        if (a2[16])
        {
LABEL_115:
          if (a2[32])
          {
            result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 9));
            v544 = *(float64x2_t *)(a3 + 96);
            v545 = *(float64x2_t *)(a3 + 112);
            v546 = *(float64x2_t *)(a3 + 128);
            v547 = *(double *)(a3 + 192);
            v548 = *(double *)(a3 + 200);
            v549 = *(double *)(a3 + 208);
            v550 = *(double *)(a3 + 216);
            v551 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v546, v547);
            v552 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v545, v547);
            v553 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v546, v548);
            v554 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v545, v548);
            v555 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v544, v548);
            v556 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v546, v549);
            v557 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v545, v549);
            v558 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v544, v549);
            v559 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v546, v550);
            v560 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v545, v550);
            v561 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v544, v550);
            *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v544, v547);
            *(float64x2_t *)(result + 16) = v552;
            *(float64x2_t *)(result + 32) = v551;
            *(float64x2_t *)(result + 48) = v555;
            *(float64x2_t *)(result + 64) = v554;
            *(float64x2_t *)(result + 80) = v553;
            *(float64x2_t *)(result + 96) = v558;
            *(float64x2_t *)(result + 112) = v557;
            *(float64x2_t *)(result + 128) = v556;
            *(float64x2_t *)(result + 144) = v561;
            *(float64x2_t *)(result + 160) = v560;
            *(float64x2_t *)(result + 176) = v559;
            v541 = a2[16];
            v6 = *v5;
          }
        }
LABEL_117:
        if (v541 && a2[40])
        {
          result = sub_20F9AC460(v6 + 8744, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 11));
          v562 = *(float64x2_t *)(a3 + 96);
          v563 = *(float64x2_t *)(a3 + 112);
          v564 = *(float64x2_t *)(a3 + 128);
          v565 = *(double *)(a3 + 224);
          v566 = *(double *)(a3 + 232);
          v567 = *(double *)(a3 + 240);
          v568 = *(double *)(a3 + 248);
          v569 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v564, v565);
          v570 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v563, v565);
          v571 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v564, v566);
          v572 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v563, v566);
          v573 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v562, v566);
          v574 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v564, v567);
          v575 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v563, v567);
          v576 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v562, v567);
          v577 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v564, v568);
          v578 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v563, v568);
          v579 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v562, v568);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v562, v565);
          *(float64x2_t *)(result + 16) = v570;
          *(float64x2_t *)(result + 32) = v569;
          *(float64x2_t *)(result + 48) = v573;
          *(float64x2_t *)(result + 64) = v572;
          *(float64x2_t *)(result + 80) = v571;
          *(float64x2_t *)(result + 96) = v576;
          *(float64x2_t *)(result + 112) = v575;
          *(float64x2_t *)(result + 128) = v574;
          *(float64x2_t *)(result + 144) = v579;
          *(float64x2_t *)(result + 160) = v578;
          *(float64x2_t *)(result + 176) = v577;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[48])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 13));
          v580 = *(float64x2_t *)(a3 + 96);
          v581 = *(float64x2_t *)(a3 + 112);
          v582 = *(float64x2_t *)(a3 + 128);
          v583 = *(double *)(a3 + 256);
          v584 = *(double *)(a3 + 264);
          v585 = *(double *)(a3 + 272);
          v586 = *(double *)(a3 + 280);
          v587 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v582, v583);
          v588 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v581, v583);
          v589 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v582, v584);
          v590 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v581, v584);
          v591 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v580, v584);
          v592 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v582, v585);
          v593 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v581, v585);
          v594 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v580, v585);
          v595 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v582, v586);
          v596 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v581, v586);
          v597 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v580, v586);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v580, v583);
          *(float64x2_t *)(result + 16) = v588;
          *(float64x2_t *)(result + 32) = v587;
          *(float64x2_t *)(result + 48) = v591;
          *(float64x2_t *)(result + 64) = v590;
          *(float64x2_t *)(result + 80) = v589;
          *(float64x2_t *)(result + 96) = v594;
          *(float64x2_t *)(result + 112) = v593;
          *(float64x2_t *)(result + 128) = v592;
          *(float64x2_t *)(result + 144) = v597;
          *(float64x2_t *)(result + 160) = v596;
          *(float64x2_t *)(result + 176) = v595;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[56])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 15));
          v598 = *(float64x2_t *)(a3 + 96);
          v599 = *(float64x2_t *)(a3 + 112);
          v600 = *(float64x2_t *)(a3 + 128);
          v601 = *(double *)(a3 + 288);
          v602 = *(double *)(a3 + 296);
          v603 = *(double *)(a3 + 304);
          v604 = *(double *)(a3 + 312);
          v605 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v600, v601);
          v606 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v599, v601);
          v607 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v600, v602);
          v608 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v599, v602);
          v609 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v598, v602);
          v610 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v600, v603);
          v611 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v599, v603);
          v612 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v598, v603);
          v613 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v600, v604);
          v614 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v599, v604);
          v615 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v598, v604);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v598, v601);
          *(float64x2_t *)(result + 16) = v606;
          *(float64x2_t *)(result + 32) = v605;
          *(float64x2_t *)(result + 48) = v609;
          *(float64x2_t *)(result + 64) = v608;
          *(float64x2_t *)(result + 80) = v607;
          *(float64x2_t *)(result + 96) = v612;
          *(float64x2_t *)(result + 112) = v611;
          *(float64x2_t *)(result + 128) = v610;
          *(float64x2_t *)(result + 144) = v615;
          *(float64x2_t *)(result + 160) = v614;
          *(float64x2_t *)(result + 176) = v613;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[64])
        {
          result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 17));
          v616 = *(float64x2_t *)(a3 + 96);
          v617 = *(float64x2_t *)(a3 + 112);
          v618 = *(float64x2_t *)(a3 + 128);
          v619 = *(double *)(a3 + 320);
          v620 = *(double *)(a3 + 328);
          v621 = *(double *)(a3 + 336);
          v622 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v618, v619);
          v623 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v617, v619);
          v624 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v618, v620);
          v625 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v617, v620);
          v626 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v616, v620);
          v627 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v618, v621);
          v628 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v617, v621);
          v629 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v616, v621);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v616, v619);
          *(float64x2_t *)(result + 16) = v623;
          *(float64x2_t *)(result + 32) = v622;
          *(float64x2_t *)(result + 48) = v626;
          *(float64x2_t *)(result + 64) = v625;
          *(float64x2_t *)(result + 80) = v624;
          *(float64x2_t *)(result + 96) = v629;
          *(float64x2_t *)(result + 112) = v628;
          *(float64x2_t *)(result + 128) = v627;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[72])
        {
          result = sub_20F9AC584(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 19));
          v630 = *(float64x2_t *)(a3 + 96);
          v631 = *(float64x2_t *)(a3 + 112);
          v632 = *(float64x2_t *)(a3 + 128);
          v633 = *(double *)(a3 + 344);
          v634 = *(double *)(a3 + 352);
          v635 = *(double *)(a3 + 360);
          v636 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v632, v633);
          v637 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v631, v633);
          v638 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v632, v634);
          v639 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v631, v634);
          v640 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v630, v634);
          v641 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v632, v635);
          v642 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v631, v635);
          v643 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v630, v635);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v630, v633);
          *(float64x2_t *)(result + 16) = v637;
          *(float64x2_t *)(result + 32) = v636;
          *(float64x2_t *)(result + 48) = v640;
          *(float64x2_t *)(result + 64) = v639;
          *(float64x2_t *)(result + 80) = v638;
          *(float64x2_t *)(result + 96) = v643;
          *(float64x2_t *)(result + 112) = v642;
          *(float64x2_t *)(result + 128) = v641;
          v6 = *v5;
        }
        goto LABEL_132;
      }
      v541 = 1;
    }
    if (v541)
      goto LABEL_115;
    goto LABEL_117;
  }
LABEL_132:
  v644 = a2[8];
  if (a2[8] && *a2)
  {
    v645 = *((_DWORD *)a2 + 3);
    v646 = *((_DWORD *)a2 + 1);
    if (v646 < v645)
      goto LABEL_138;
    result = sub_20F9AC33C(v6 + 3272, v645, v646);
    v647 = *(float64x2_t *)(a3 + 48);
    v648 = *(float64x2_t *)(a3 + 64);
    v649 = *(float64x2_t *)(a3 + 80);
    v650 = *(double *)(a3 + 8);
    v651 = *(double *)(a3 + 16);
    v652 = *(double *)(a3 + 24);
    v653 = *(double *)(a3 + 32);
    v654 = *(double *)(a3 + 40);
    v655 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v648, *(double *)a3);
    v656 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v649, *(double *)a3);
    v657 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v647, v650);
    v658 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v648, v650);
    v659 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v649, v650);
    v660 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v647, v651);
    v661 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v648, v651);
    v662 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v649, v651);
    v663 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v647, v652);
    v664 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v648, v652);
    v665 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v649, v652);
    v666 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v647, v653);
    v667 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v648, v653);
    v668 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v649, v653);
    v669 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v647, v654);
    v670 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v648, v654);
    v671 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v649, v654);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v647, *(double *)a3);
    *(float64x2_t *)(result + 16) = v655;
    *(float64x2_t *)(result + 64) = v658;
    *(float64x2_t *)(result + 80) = v659;
    *(float64x2_t *)(result + 32) = v656;
    *(float64x2_t *)(result + 48) = v657;
    *(float64x2_t *)(result + 96) = v660;
    *(float64x2_t *)(result + 112) = v661;
    *(float64x2_t *)(result + 160) = v664;
    *(float64x2_t *)(result + 176) = v665;
    *(float64x2_t *)(result + 128) = v662;
    *(float64x2_t *)(result + 144) = v663;
    *(float64x2_t *)(result + 192) = v666;
    *(float64x2_t *)(result + 208) = v667;
    *(float64x2_t *)(result + 256) = v670;
    *(float64x2_t *)(result + 272) = v671;
    *(float64x2_t *)(result + 224) = v668;
    *(float64x2_t *)(result + 240) = v669;
    v644 = a2[8];
    v6 = *v5;
  }
  if (!v644)
    goto LABEL_156;
  v645 = *((_DWORD *)a2 + 3);
LABEL_138:
  result = sub_20F9AC33C(v6 + 3272, v645, v645);
  v672 = *(float64x2_t *)(a3 + 64);
  v673 = *(float64x2_t *)(a3 + 80);
  v674 = *(float64x2_t *)(a3 + 48);
  v675 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v673, v674.f64[0]);
  v676 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v672, v674.f64[0]);
  v677 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v673, v674.f64[1]);
  v678 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v672, v674.f64[1]);
  v679 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v674, v674.f64[1]);
  v680 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v673, v672.f64[0]);
  v681 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v672, v672.f64[0]);
  v682 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v674, v672.f64[0]);
  v683 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v673, v672.f64[1]);
  v684 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v672, v672.f64[1]);
  v685 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v674, v672.f64[1]);
  v686 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v673, v673.f64[0]);
  v687 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v672, v673.f64[0]);
  v688 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v674, v673.f64[0]);
  v689 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v673, v673.f64[1]);
  v690 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v672, v673.f64[1]);
  v691 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v674, v673.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v674, v674.f64[0]);
  *(float64x2_t *)(result + 16) = v676;
  *(float64x2_t *)(result + 32) = v675;
  *(float64x2_t *)(result + 48) = v679;
  *(float64x2_t *)(result + 64) = v678;
  *(float64x2_t *)(result + 80) = v677;
  *(float64x2_t *)(result + 96) = v682;
  *(float64x2_t *)(result + 112) = v681;
  *(float64x2_t *)(result + 128) = v680;
  *(float64x2_t *)(result + 144) = v685;
  *(float64x2_t *)(result + 160) = v684;
  *(float64x2_t *)(result + 176) = v683;
  *(float64x2_t *)(result + 192) = v688;
  *(float64x2_t *)(result + 208) = v687;
  *(float64x2_t *)(result + 224) = v686;
  *(float64x2_t *)(result + 240) = v691;
  *(float64x2_t *)(result + 256) = v690;
  *(float64x2_t *)(result + 272) = v689;
  v692 = a2[8];
  v6 = *v5;
  if (a2[8] && a2[32])
  {
    result = sub_20F9AC460(v6 + 9032, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 9));
    v693 = *(float64x2_t *)(a3 + 48);
    v694 = *(float64x2_t *)(a3 + 64);
    v695 = *(float64x2_t *)(a3 + 80);
    v696 = *(double *)(a3 + 192);
    v697 = *(double *)(a3 + 200);
    v698 = *(double *)(a3 + 208);
    v699 = *(double *)(a3 + 216);
    v700 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v695, v696);
    v701 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v694, v696);
    v702 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v695, v697);
    v703 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v694, v697);
    v704 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v693, v697);
    v705 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v695, v698);
    v706 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v694, v698);
    v707 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v693, v698);
    v708 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v695, v699);
    v709 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v694, v699);
    v710 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v693, v699);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v693, v696);
    *(float64x2_t *)(result + 16) = v701;
    *(float64x2_t *)(result + 32) = v700;
    *(float64x2_t *)(result + 48) = v704;
    *(float64x2_t *)(result + 64) = v703;
    *(float64x2_t *)(result + 80) = v702;
    *(float64x2_t *)(result + 96) = v707;
    *(float64x2_t *)(result + 112) = v706;
    *(float64x2_t *)(result + 128) = v705;
    *(float64x2_t *)(result + 144) = v710;
    *(float64x2_t *)(result + 160) = v709;
    *(float64x2_t *)(result + 176) = v708;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[40])
  {
    result = sub_20F9AC460(v6 + 9032, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 11));
    v711 = *(float64x2_t *)(a3 + 48);
    v712 = *(float64x2_t *)(a3 + 64);
    v713 = *(float64x2_t *)(a3 + 80);
    v714 = *(double *)(a3 + 224);
    v715 = *(double *)(a3 + 232);
    v716 = *(double *)(a3 + 240);
    v717 = *(double *)(a3 + 248);
    v718 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v713, v714);
    v719 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v712, v714);
    v720 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v713, v715);
    v721 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v712, v715);
    v722 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v711, v715);
    v723 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v713, v716);
    v724 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v712, v716);
    v725 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v711, v716);
    v726 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v713, v717);
    v727 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v712, v717);
    v728 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v711, v717);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v711, v714);
    *(float64x2_t *)(result + 16) = v719;
    *(float64x2_t *)(result + 32) = v718;
    *(float64x2_t *)(result + 48) = v722;
    *(float64x2_t *)(result + 64) = v721;
    *(float64x2_t *)(result + 80) = v720;
    *(float64x2_t *)(result + 96) = v725;
    *(float64x2_t *)(result + 112) = v724;
    *(float64x2_t *)(result + 128) = v723;
    *(float64x2_t *)(result + 144) = v728;
    *(float64x2_t *)(result + 160) = v727;
    *(float64x2_t *)(result + 176) = v726;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[48])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 13));
    v729 = *(float64x2_t *)(a3 + 48);
    v730 = *(float64x2_t *)(a3 + 64);
    v731 = *(float64x2_t *)(a3 + 80);
    v732 = *(double *)(a3 + 256);
    v733 = *(double *)(a3 + 264);
    v734 = *(double *)(a3 + 272);
    v735 = *(double *)(a3 + 280);
    v736 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v731, v732);
    v737 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v730, v732);
    v738 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v731, v733);
    v739 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v730, v733);
    v740 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v729, v733);
    v741 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v731, v734);
    v742 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v730, v734);
    v743 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v729, v734);
    v744 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v731, v735);
    v745 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v730, v735);
    v746 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v729, v735);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v729, v732);
    *(float64x2_t *)(result + 16) = v737;
    *(float64x2_t *)(result + 32) = v736;
    *(float64x2_t *)(result + 48) = v740;
    *(float64x2_t *)(result + 64) = v739;
    *(float64x2_t *)(result + 80) = v738;
    *(float64x2_t *)(result + 96) = v743;
    *(float64x2_t *)(result + 112) = v742;
    *(float64x2_t *)(result + 128) = v741;
    *(float64x2_t *)(result + 144) = v746;
    *(float64x2_t *)(result + 160) = v745;
    *(float64x2_t *)(result + 176) = v744;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[56])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 15));
    v747 = *(float64x2_t *)(a3 + 48);
    v748 = *(float64x2_t *)(a3 + 64);
    v749 = *(float64x2_t *)(a3 + 80);
    v750 = *(double *)(a3 + 288);
    v751 = *(double *)(a3 + 296);
    v752 = *(double *)(a3 + 304);
    v753 = *(double *)(a3 + 312);
    v754 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v749, v750);
    v755 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v748, v750);
    v756 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v749, v751);
    v757 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v748, v751);
    v758 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v747, v751);
    v759 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v749, v752);
    v760 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v748, v752);
    v761 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v747, v752);
    v762 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v749, v753);
    v763 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v748, v753);
    v764 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v747, v753);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v747, v750);
    *(float64x2_t *)(result + 16) = v755;
    *(float64x2_t *)(result + 32) = v754;
    *(float64x2_t *)(result + 48) = v758;
    *(float64x2_t *)(result + 64) = v757;
    *(float64x2_t *)(result + 80) = v756;
    *(float64x2_t *)(result + 96) = v761;
    *(float64x2_t *)(result + 112) = v760;
    *(float64x2_t *)(result + 128) = v759;
    *(float64x2_t *)(result + 144) = v764;
    *(float64x2_t *)(result + 160) = v763;
    *(float64x2_t *)(result + 176) = v762;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[64])
  {
    result = sub_20F9AC584(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 17));
    v765 = *(float64x2_t *)(a3 + 48);
    v766 = *(float64x2_t *)(a3 + 64);
    v767 = *(float64x2_t *)(a3 + 80);
    v768 = *(double *)(a3 + 320);
    v769 = *(double *)(a3 + 328);
    v770 = *(double *)(a3 + 336);
    v771 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v767, v768);
    v772 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v766, v768);
    v773 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v767, v769);
    v774 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v766, v769);
    v775 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v765, v769);
    v776 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v767, v770);
    v777 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v766, v770);
    v778 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v765, v770);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v765, v768);
    *(float64x2_t *)(result + 16) = v772;
    *(float64x2_t *)(result + 32) = v771;
    *(float64x2_t *)(result + 48) = v775;
    *(float64x2_t *)(result + 64) = v774;
    *(float64x2_t *)(result + 80) = v773;
    *(float64x2_t *)(result + 96) = v778;
    *(float64x2_t *)(result + 112) = v777;
    *(float64x2_t *)(result + 128) = v776;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[72])
  {
    result = sub_20F9AC584(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 19));
    v779 = *(float64x2_t *)(a3 + 48);
    v780 = *(float64x2_t *)(a3 + 64);
    v781 = *(float64x2_t *)(a3 + 80);
    v782 = *(double *)(a3 + 344);
    v783 = *(double *)(a3 + 352);
    v784 = *(double *)(a3 + 360);
    v785 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v781, v782);
    v786 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v780, v782);
    v787 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v781, v783);
    v788 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v780, v783);
    v789 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v779, v783);
    v790 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v781, v784);
    v791 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v780, v784);
    v792 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v779, v784);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v779, v782);
    *(float64x2_t *)(result + 16) = v786;
    *(float64x2_t *)(result + 32) = v785;
    *(float64x2_t *)(result + 48) = v789;
    *(float64x2_t *)(result + 64) = v788;
    *(float64x2_t *)(result + 80) = v787;
    *(float64x2_t *)(result + 96) = v792;
    *(float64x2_t *)(result + 112) = v791;
    *(float64x2_t *)(result + 128) = v790;
    v6 = *v5;
  }
LABEL_156:
  if (!*a2)
    return result;
  result = sub_20F9AC33C(v6 + 3272, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 1));
  v793 = *(float64x2_t *)(a3 + 16);
  v794 = *(float64x2_t *)(a3 + 32);
  v795 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v794, *(double *)a3);
  v796 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v793, *(double *)a3);
  v797 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v794, *(double *)(a3 + 8));
  v798 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v793, *(double *)(a3 + 8));
  v799 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, *(double *)(a3 + 8));
  v800 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v794, v793.f64[0]);
  v801 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v793, v793.f64[0]);
  v802 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v793.f64[0]);
  v803 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v794, v793.f64[1]);
  v804 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v793, v793.f64[1]);
  v805 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v793.f64[1]);
  v806 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v794, v794.f64[0]);
  v807 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v793, v794.f64[0]);
  v808 = vmlaq_n_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)a3, v794.f64[0]);
  v809 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v794, v794.f64[1]);
  v810 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v793, v794.f64[1]);
  v811 = vmlaq_n_f64(*(float64x2_t *)(result + 240), *(float64x2_t *)a3, v794.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, *(double *)a3);
  *(float64x2_t *)(result + 16) = v796;
  *(float64x2_t *)(result + 32) = v795;
  *(float64x2_t *)(result + 48) = v799;
  *(float64x2_t *)(result + 64) = v798;
  *(float64x2_t *)(result + 80) = v797;
  *(float64x2_t *)(result + 96) = v802;
  *(float64x2_t *)(result + 112) = v801;
  *(float64x2_t *)(result + 128) = v800;
  *(float64x2_t *)(result + 144) = v805;
  *(float64x2_t *)(result + 160) = v804;
  *(float64x2_t *)(result + 176) = v803;
  *(float64x2_t *)(result + 192) = v808;
  *(float64x2_t *)(result + 208) = v807;
  *(float64x2_t *)(result + 224) = v806;
  *(float64x2_t *)(result + 240) = v811;
  *(float64x2_t *)(result + 256) = v810;
  *(float64x2_t *)(result + 272) = v809;
  v812 = *a2;
  if (!*a2 || !a2[8])
  {
LABEL_161:
    if (v812)
      goto LABEL_162;
    goto LABEL_164;
  }
  v813 = *((_DWORD *)a2 + 1);
  v814 = *((_DWORD *)a2 + 3);
  if (v814 < v813)
  {
    v812 = 1;
    goto LABEL_161;
  }
  result = sub_20F9AC33C(*v5 + 3272, v813, v814);
  v961 = *(float64x2_t *)(a3 + 16);
  v962 = *(float64x2_t *)(a3 + 32);
  v963 = *(double *)(a3 + 48);
  v964 = *(double *)(a3 + 56);
  v965 = *(double *)(a3 + 64);
  v966 = *(double *)(a3 + 72);
  v967 = *(double *)(a3 + 80);
  v968 = *(double *)(a3 + 88);
  v969 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v961, v963);
  v970 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v962, v963);
  v971 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v964);
  v972 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v961, v964);
  v973 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v962, v964);
  v974 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v965);
  v975 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v961, v965);
  v976 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v962, v965);
  v977 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v966);
  v978 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v961, v966);
  v979 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v962, v966);
  v980 = vmlaq_n_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)a3, v967);
  v981 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v961, v967);
  v982 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v962, v967);
  v983 = vmlaq_n_f64(*(float64x2_t *)(result + 240), *(float64x2_t *)a3, v968);
  v984 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v961, v968);
  v985 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v962, v968);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v963);
  *(float64x2_t *)(result + 16) = v969;
  *(float64x2_t *)(result + 64) = v972;
  *(float64x2_t *)(result + 80) = v973;
  *(float64x2_t *)(result + 32) = v970;
  *(float64x2_t *)(result + 48) = v971;
  *(float64x2_t *)(result + 96) = v974;
  *(float64x2_t *)(result + 112) = v975;
  *(float64x2_t *)(result + 160) = v978;
  *(float64x2_t *)(result + 176) = v979;
  *(float64x2_t *)(result + 128) = v976;
  *(float64x2_t *)(result + 144) = v977;
  *(float64x2_t *)(result + 192) = v980;
  *(float64x2_t *)(result + 208) = v981;
  *(float64x2_t *)(result + 256) = v984;
  *(float64x2_t *)(result + 272) = v985;
  *(float64x2_t *)(result + 224) = v982;
  *(float64x2_t *)(result + 240) = v983;
  v812 = *a2;
  if (*a2)
  {
LABEL_162:
    if (a2[32])
    {
      result = sub_20F9AC460(*v5 + 9032, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 9));
      v815 = *(float64x2_t *)(a3 + 16);
      v816 = *(float64x2_t *)(a3 + 32);
      v817 = *(double *)(a3 + 192);
      v818 = *(double *)(a3 + 200);
      v819 = *(double *)(a3 + 208);
      v820 = *(double *)(a3 + 216);
      v821 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v816, v817);
      v822 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v815, v817);
      v823 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v816, v818);
      v824 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v815, v818);
      v825 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v818);
      v826 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v816, v819);
      v827 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v815, v819);
      v828 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v819);
      v829 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v816, v820);
      v830 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v815, v820);
      v831 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v820);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v817);
      *(float64x2_t *)(result + 16) = v822;
      *(float64x2_t *)(result + 32) = v821;
      *(float64x2_t *)(result + 48) = v825;
      *(float64x2_t *)(result + 64) = v824;
      *(float64x2_t *)(result + 80) = v823;
      *(float64x2_t *)(result + 96) = v828;
      *(float64x2_t *)(result + 112) = v827;
      *(float64x2_t *)(result + 128) = v826;
      *(float64x2_t *)(result + 144) = v831;
      *(float64x2_t *)(result + 160) = v830;
      *(float64x2_t *)(result + 176) = v829;
      v812 = *a2;
    }
  }
LABEL_164:
  if (v812 && a2[40])
  {
    result = sub_20F9AC460(*v5 + 9032, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 11));
    v832 = *(float64x2_t *)(a3 + 16);
    v833 = *(float64x2_t *)(a3 + 32);
    v834 = *(double *)(a3 + 224);
    v835 = *(double *)(a3 + 232);
    v836 = *(double *)(a3 + 240);
    v837 = *(double *)(a3 + 248);
    v838 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v833, v834);
    v839 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v832, v834);
    v840 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v833, v835);
    v841 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v832, v835);
    v842 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v835);
    v843 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v833, v836);
    v844 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v832, v836);
    v845 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v836);
    v846 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v833, v837);
    v847 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v832, v837);
    v848 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v837);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v834);
    *(float64x2_t *)(result + 16) = v839;
    *(float64x2_t *)(result + 32) = v838;
    *(float64x2_t *)(result + 48) = v842;
    *(float64x2_t *)(result + 64) = v841;
    *(float64x2_t *)(result + 80) = v840;
    *(float64x2_t *)(result + 96) = v845;
    *(float64x2_t *)(result + 112) = v844;
    *(float64x2_t *)(result + 128) = v843;
    *(float64x2_t *)(result + 144) = v848;
    *(float64x2_t *)(result + 160) = v847;
    *(float64x2_t *)(result + 176) = v846;
    v812 = *a2;
  }
  if (v812 && a2[48])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 13));
    v849 = *(float64x2_t *)(a3 + 16);
    v850 = *(float64x2_t *)(a3 + 32);
    v851 = *(double *)(a3 + 256);
    v852 = *(double *)(a3 + 264);
    v853 = *(double *)(a3 + 272);
    v854 = *(double *)(a3 + 280);
    v855 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v850, v851);
    v856 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v849, v851);
    v857 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v850, v852);
    v858 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v849, v852);
    v859 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v852);
    v860 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v850, v853);
    v861 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v849, v853);
    v862 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v853);
    v863 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v850, v854);
    v864 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v849, v854);
    v865 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v854);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v851);
    *(float64x2_t *)(result + 16) = v856;
    *(float64x2_t *)(result + 32) = v855;
    *(float64x2_t *)(result + 48) = v859;
    *(float64x2_t *)(result + 64) = v858;
    *(float64x2_t *)(result + 80) = v857;
    *(float64x2_t *)(result + 96) = v862;
    *(float64x2_t *)(result + 112) = v861;
    *(float64x2_t *)(result + 128) = v860;
    *(float64x2_t *)(result + 144) = v865;
    *(float64x2_t *)(result + 160) = v864;
    *(float64x2_t *)(result + 176) = v863;
    v812 = *a2;
  }
  if (v812 && a2[56])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 15));
    v866 = *(float64x2_t *)(a3 + 16);
    v867 = *(float64x2_t *)(a3 + 32);
    v868 = *(double *)(a3 + 288);
    v869 = *(double *)(a3 + 296);
    v870 = *(double *)(a3 + 304);
    v871 = *(double *)(a3 + 312);
    v872 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v867, v868);
    v873 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v866, v868);
    v874 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v867, v869);
    v875 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v866, v869);
    v876 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v869);
    v877 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v867, v870);
    v878 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v866, v870);
    v879 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v870);
    v880 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v867, v871);
    v881 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v866, v871);
    v882 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v871);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v868);
    *(float64x2_t *)(result + 16) = v873;
    *(float64x2_t *)(result + 32) = v872;
    *(float64x2_t *)(result + 48) = v876;
    *(float64x2_t *)(result + 64) = v875;
    *(float64x2_t *)(result + 80) = v874;
    *(float64x2_t *)(result + 96) = v879;
    *(float64x2_t *)(result + 112) = v878;
    *(float64x2_t *)(result + 128) = v877;
    *(float64x2_t *)(result + 144) = v882;
    *(float64x2_t *)(result + 160) = v881;
    *(float64x2_t *)(result + 176) = v880;
    v812 = *a2;
  }
  if (v812 && a2[64])
  {
    result = sub_20F9AC584(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 17));
    v883 = *(float64x2_t *)(a3 + 16);
    v884 = *(float64x2_t *)(a3 + 32);
    v885 = *(double *)(a3 + 320);
    v886 = *(double *)(a3 + 328);
    v887 = *(double *)(a3 + 336);
    v888 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v884, v885);
    v889 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v883, v885);
    v890 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v884, v886);
    v891 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v883, v886);
    v892 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v886);
    v893 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v884, v887);
    v894 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v883, v887);
    v895 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v887);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v885);
    *(float64x2_t *)(result + 16) = v889;
    *(float64x2_t *)(result + 32) = v888;
    *(float64x2_t *)(result + 48) = v892;
    *(float64x2_t *)(result + 64) = v891;
    *(float64x2_t *)(result + 80) = v890;
    *(float64x2_t *)(result + 96) = v895;
    *(float64x2_t *)(result + 112) = v894;
    *(float64x2_t *)(result + 128) = v893;
    v812 = *a2;
  }
  if (v812)
  {
    if (a2[72])
    {
      result = sub_20F9AC584(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 19));
      v896 = *(float64x2_t *)(a3 + 16);
      v897 = *(float64x2_t *)(a3 + 32);
      v898 = *(double *)(a3 + 344);
      v899 = *(double *)(a3 + 352);
      v900 = *(double *)(a3 + 360);
      v901 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v897, v898);
      v902 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v896, v898);
      v903 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v897, v899);
      v904 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v896, v899);
      v905 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v899);
      v906 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v897, v900);
      v907 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v896, v900);
      v908 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v900);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v898);
      *(float64x2_t *)(result + 16) = v902;
      *(float64x2_t *)(result + 32) = v901;
      *(float64x2_t *)(result + 48) = v905;
      *(float64x2_t *)(result + 64) = v904;
      *(float64x2_t *)(result + 80) = v903;
      *(float64x2_t *)(result + 96) = v908;
      *(float64x2_t *)(result + 112) = v907;
      *(float64x2_t *)(result + 128) = v906;
    }
  }
  return result;
}

uint64_t sub_20F9AF12C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x36uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 432;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AF250(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 6uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 48;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AF374(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x51uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 648;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AF498(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 0x1BuLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 216;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AF5BC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 1uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 8;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

uint64_t sub_20F9AF6E0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5 != -1)
    return *(_QWORD *)(a1 + 16) + 8 * v5;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = a2;
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v12 = ((v10 - v11) << 6) - 1;
    v13 = *(_QWORD *)(a1 + 72);
    if (v10 == v11)
      v12 = 0;
    v6 = *(_QWORD *)(a1 + 16)
       + 8
       * *(_QWORD *)(*(_QWORD *)(v11 + (((unint64_t)(v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v13 + v8 - 1) & 0x1FF));
    *(_QWORD *)(a1 + 80) = v8 - 1;
    if ((unint64_t)(v12 - (v8 + v13) + 1) >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      *(_QWORD *)(a1 + 56) -= 8;
    }
  }
  else
  {
    v14 = *(void **)(a1 + 24);
    v16 = 0;
    sub_20F1C5A3C((unint64_t *)(a1 + 16), v14, 3uLL, &v16);
    v6 = *(_QWORD *)(a1 + 24) - 24;
  }
  *(_QWORD *)(v4 + 8 * v9) = (v6 - *(_QWORD *)(a1 + 16)) >> 3;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
  return v6;
}

float64x2_t sub_20F9AF804(float64x2_t *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t result;

  v2 = a2[8];
  v3 = *a2;
  v4 = a2[4];
  if (v2 >= 0.0)
  {
    if (v3 >= -v4)
    {
      a1->f64[0] = a2[5] - a2[7];
      a1->f64[1] = a2[6] - a2[2];
      a1[1].f64[0] = a2[1] - a2[3];
      v6 = a2[8] + 1.0 + *a2 + a2[4];
      v5 = v6;
    }
    else
    {
      a1->f64[0] = a2[6] + a2[2];
      a1->f64[1] = a2[5] + a2[7];
      v5 = a2[8] + 1.0 - (*a2 + a2[4]);
      a1[1].f64[0] = v5;
      v6 = a2[1] - a2[3];
    }
  }
  else if (v3 <= v4)
  {
    a1->f64[0] = a2[1] + a2[3];
    v5 = 1.0 - a2[8] + a2[4] - *a2;
    a1->f64[1] = v5;
    a1[1].f64[0] = a2[5] + a2[7];
    v6 = a2[6] - a2[2];
  }
  else
  {
    v5 = 1.0 - v2 + v3 - v4;
    a1->f64[0] = v5;
    a1->f64[1] = a2[1] + a2[3];
    a1[1].f64[0] = a2[6] + a2[2];
    v6 = a2[5] - a2[7];
  }
  a1[1].f64[1] = v6;
  v7 = 0.5 / sqrt(v5);
  v8 = vmulq_n_f64(a1[1], v7);
  result = vmulq_n_f64(*a1, v7);
  *a1 = result;
  a1[1] = v8;
  return result;
}

BOOL sub_20F9AF984(uint64_t a1, float64x2_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const double *v9;
  float64x2_t *v10;
  double v11;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v23;
  float64x2_t v24;
  double v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v36;
  double v40;
  double v41;
  double cosval;
  double v43;
  __double2 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  double v60;
  float64x2_t v62;
  unint64_t v63;
  double v64;
  uint64_t v66;
  uint64_t v67;
  float64x2_t v68;
  double v70;
  float64x2_t v71;
  double v73;
  float64x2_t v74;
  BOOL v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  __int128 v79;
  float64x2_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  double v84;
  float64_t v85;
  double v86;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  float64x2x3_t v103;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v9 = (const double *)(a1 + 16);
    v103 = vld3q_f64(v9);
    v10 = *a2;
    v11 = *(double *)(a1 + 80);
    _Q4 = *(_OWORD *)(a1 + 64);
    v13 = (*a2)[3].f64[0];
    v14 = (*a2)[4].f64[1];
    v15 = (*a2)[6].f64[0];
    v16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103.val[0], (*a2)[2].f64[0]), v103.val[1], (*a2)[2], 1), v103.val[2], v13);
    _D6 = (*a2)[2].f64[1];
    __asm { FMLA            D20, D6, V4.D[1] }
    v23 = _D20 + v11 * v13;
    v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103.val[0], (*a2)[3].f64[1]), v103.val[1], *(float64x2_t *)((char *)*a2 + 56), 1), v103.val[2], v14);
    _D16 = (*a2)[4].f64[0];
    __asm { FMLA            D20, D16, V4.D[1] }
    v27 = _D20 + v11 * v14;
    v28 = vmlaq_laneq_f64(vmulq_n_f64(v103.val[0], (*a2)[5].f64[0]), v103.val[1], (*a2)[5], 1);
    _D18 = (*a2)[5].f64[1];
    __asm { FMLA            D20, D18, V4.D[1] }
    v88 = v23;
    v87 = v16;
    v90 = v27;
    v89 = v24;
    v92 = _D20 + v11 * v15;
    v91 = vmlaq_n_f64(v28, v103.val[2], v15);
    v96 = 0.0;
    v95 = 0uLL;
    sub_20E9733B8(&v87, v95.f64);
    v31 = v95;
    *(double *)(a3 + 16) = v96;
    *(float64x2_t *)a3 = v31;
    v31.f64[0] = v10[7].f64[1];
    v32.f64[0] = *(float64_t *)(a1 + 104);
    _Q0 = vsubq_f64(v31, v32);
    *(float64x2_t *)(a3 + 24) = vsubq_f64(*(float64x2_t *)((char *)v10 + 104), *(float64x2_t *)(a1 + 88));
    *(float64_t *)(a3 + 40) = _Q0.f64[0];
    if (BYTE4((*a2)[1].f64[0]))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 16);
      _Q1 = *(float64x2_t *)a3;
      *(_QWORD *)&_D16 = *(_OWORD *)&vnegq_f64(_Q0);
      v36 = vnegq_f64(*(float64x2_t *)a3);
      _D9 = v36.f64[1];
      __asm
      {
        FMLS            D3, D9, V1.D[1]
        FMLS            D3, D16, V0.D[0]
      }
      if (_D3 >= 0.0000002635)
      {
        v43 = sqrt(_D3);
        v85 = v36.f64[0];
        v86 = _D16;
        v84 = _D3;
        v44 = __sincos_stret(v43);
        cosval = v44.__cosval;
        v36.f64[0] = v85;
        _D16 = v86;
        v41 = v44.__sinval / v43;
        v40 = 1.0 / v84 * (1.0 - v44.__cosval);
      }
      else
      {
        v40 = 0.5 - _D3 * (_D3 / -720.0 + 0.0416666667);
        v41 = 1.0 - _D3 * (0.166666667 - _D3 * (_D3 / -5040.0 + 0.00833333333));
        cosval = 1.0 - _D3 * v40;
      }
      v45 = _D9 * v40;
      v46 = cosval + v36.f64[0] * (v36.f64[0] * v40);
      v47 = cosval + _D9 * (_D9 * v40);
      v102 = cosval + _D16 * (_D16 * v40);
      v48 = _D9 * (v36.f64[0] * v40);
      v49 = _D16 * (v36.f64[0] * v40);
      v50 = _D16 * v45;
      v51 = v36.f64[0] * v41;
      v52 = _D9 * v41;
      v53 = _D16 * v41;
      v95.f64[0] = v46;
      v95.f64[1] = v48 + v53;
      v100 = v52 + v49;
      v101 = v50 - v51;
      v96 = v49 - v52;
      v97 = v48 - v53;
      v98 = v47;
      v99 = v51 + v50;
      v87 = 0uLL;
      v88 = 0.0;
      sub_20F20830C(&v95, v87.f64, v89.f64);
      v54 = 0;
      v55 = 0;
      v56 = *(_QWORD *)(a1 + 112);
      _Q4.f64[0] = 0.0;
      _Q4.f64[1] = *(float64_t *)(v56 + 24);
      _V6.D[1] = v89.f64[1];
      _V16.D[1] = v91.f64[1];
      v60 = v94;
      _V18.D[1] = v93.f64[1];
      v62.f64[0] = *(float64_t *)(v56 + 16);
      v64 = *(double *)(v56 + 32);
      v63 = *(_QWORD *)(v56 + 40);
      _D0 = 0;
      v67 = *(_QWORD *)(v56 + 48);
      v66 = *(_QWORD *)(v56 + 56);
      v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v89.f64[0]), _Q4, v89, 1), (float64x2_t)0, v90);
      __asm { FMLA            D23, D0, V6.D[1] }
      v70 = _D23 + v64 * v90;
      v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v91.f64[0]), _Q4, v91, 1), (float64x2_t)0, v92);
      __asm { FMLA            D23, D0, V16.D[1] }
      v73 = _D23 + v64 * v92;
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v93.f64[0]), _Q4, v93, 1), (float64x2_t)0, v94);
      __asm { FMLA            D4, D0, V18.D[1] }
      *(double *)(a4 + 16) = v70;
      *(float64x2_t *)a4 = v68;
      *(double *)(a4 + 64) = v73;
      *(float64x2_t *)(a4 + 48) = v71;
      *(double *)(a4 + 112) = _Q4.f64[0] + v64 * v60;
      *(float64x2_t *)(a4 + 96) = v74;
      do
      {
        *(_QWORD *)(a4 + 144 + 8 * v54) = 0;
        v75 = v55 < 2;
        if (v55 < 2)
          ++v55;
        else
          v55 = 0;
        if (v75)
          ++v54;
        else
          v54 += 4;
      }
      while (v54 != 18);
      v76 = 0;
      v77 = 0;
      do
      {
        *(_QWORD *)(a4 + 24 + 8 * v76) = 0;
        v78 = v77 < 2;
        if (v77 < 2)
          ++v77;
        else
          v77 = 0;
        if (v78)
          ++v76;
        else
          v76 += 4;
      }
      while (v76 != 18);
      *(_QWORD *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 168) = v63;
      *(_QWORD *)(a4 + 232) = 0;
      *(_QWORD *)&v79 = 0;
      *((_QWORD *)&v79 + 1) = v67;
      *(_OWORD *)(a4 + 216) = v79;
      *(_QWORD *)(a4 + 280) = v66;
      *(_OWORD *)(a4 + 264) = 0uLL;
    }
    v80 = *(float64x2_t **)(a1 + 112);
    v81 = vmulq_f64(*(float64x2_t *)a3, v80[1]);
    v82 = vmulq_f64(*(float64x2_t *)(a3 + 32), v80[3]);
    *(float64x2_t *)(a3 + 16) = vmulq_f64(*(float64x2_t *)(a3 + 16), v80[2]);
    *(float64x2_t *)(a3 + 32) = v82;
    *(float64x2_t *)a3 = v81;
  }
  return v4 != 0;
}

BOOL sub_20F9AFD70(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  double v10;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v22;
  float64x2_t v23;
  double v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  void *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  uint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t v166;
  unint64_t v167;
  float64x2_t *v168;
  int8x16_t v169;
  unint64_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  unint64_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64_t v180;
  float64_t v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  _QWORD *v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _BOOL8 result;
  float64x2_t v250[18];
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  float64x2_t v450;
  uint64_t v451;
  float64x2_t v452;
  _BYTE v453[32];
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  uint64_t v469;
  float64x2x3_t v470;

  v469 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v7 = a1 + 128;
    v8 = *(_QWORD *)(a1 + 128);
    v9 = (const double *)(a1 + 16);
    v470 = vld3q_f64(v9);
    v10 = *(double *)(a1 + 80);
    _Q4 = *(_OWORD *)(a1 + 64);
    v12 = *(double *)(v8 + 48);
    v13 = *(double *)(v8 + 72);
    v14 = *(double *)(v8 + 96);
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 32)), v470.val[1], *(float64x2_t *)(v8 + 32), 1), v470.val[2], v12);
    _D6 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D20, D6, V4.D[1] }
    v22 = _D20 + v10 * v12;
    v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 56)), v470.val[1], *(float64x2_t *)(v8 + 56), 1), v470.val[2], v13);
    _D16 = *(_QWORD *)(v8 + 64);
    __asm { FMLA            D20, D16, V4.D[1] }
    v26 = _D20 + v10 * v13;
    v27 = vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 80)), v470.val[1], *(float64x2_t *)(v8 + 80), 1);
    _D18 = *(_QWORD *)(v8 + 88);
    __asm { FMLA            D20, D18, V4.D[1] }
    v452 = v15;
    *(double *)v453 = v22;
    *(double *)&v453[24] = v26;
    *(float64x2_t *)&v453[8] = v23;
    v455.f64[0] = _D20 + v10 * v14;
    v454 = vmlaq_n_f64(v27, v470.val[2], v14);
    v451 = 0;
    v450 = 0uLL;
    sub_20E9733B8(&v452, v450.f64);
    v30 = v450;
    *(_QWORD *)(a1 + 200) = v451;
    *(float64x2_t *)(a1 + 184) = v30;
    v30.f64[0] = *(float64_t *)(v8 + 120);
    v31.f64[0] = *(float64_t *)(a1 + 104);
    *(float64x2_t *)(a1 + 208) = vsubq_f64(*(float64x2_t *)(v8 + 104), *(float64x2_t *)(a1 + 88));
    *(_QWORD *)(a1 + 224) = *(_OWORD *)&vsubq_f64(v30, v31);
    v32 = *(float64x2_t **)(a1 + 112);
    v33 = vmulq_f64(*(float64x2_t *)(a1 + 216), v32[3]);
    v34 = vmulq_f64(*(float64x2_t *)(a1 + 200), v32[2]);
    *(float64x2_t *)(a1 + 184) = vmulq_f64(*(float64x2_t *)(a1 + 184), v32[1]);
    *(float64x2_t *)(a1 + 200) = v34;
    *(float64x2_t *)(a1 + 216) = v33;
    if (*(_BYTE *)(*(_QWORD *)v7 + 20))
    {
      v36 = v32[2].f64[0];
      v35 = v32[2].f64[1];
      v37 = v32[1].f64[1];
      v38 = v32[3].f64[0];
      v39 = v32[3].f64[1];
      a3->f64[0] = v32[1].f64[0];
      *(float64x2_t *)((char *)a3 + 8) = 0u;
      *(float64x2_t *)((char *)&a3[1] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[2] + 8) = 0u;
      a3[3].f64[1] = v37;
      a3[4] = 0u;
      a3[5] = 0u;
      a3[6] = 0u;
      a3[7].f64[0] = v36;
      *(float64x2_t *)((char *)&a3[7] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[8] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[9] + 8) = 0u;
      a3[10].f64[1] = v35;
      a3[11] = 0u;
      a3[12] = 0u;
      a3[13] = 0u;
      a3[14].f64[0] = v38;
      *(float64x2_t *)((char *)&a3[15] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[14] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[16] + 8) = 0u;
      a3[17].f64[1] = v39;
    }
    *(_BYTE *)(a1 + 240) = 1;
    v40 = *(_QWORD *)(a1 + 248);
    if (v40)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, a1 + 184);
      v41 = *(float64x2_t **)(a1 + 248);
      v42 = (void *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v41->f64[0] + 16))(v41);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch((int)v42)
        {
          case 0:
            v43 = v41 + 1;
            if (&a3[18] > &v41[1] && &v41[19] > a3)
            {
              MEMORY[0x24BDAC7A8](v42);
              v42 = memcpy(v250, v43, sizeof(v250));
              v43 = v250;
            }
            MEMORY[0x24BDAC7A8](v42);
            v44 = &v250[-18];
            memcpy(&v250[-18], a3, 0x120uLL);
            v45 = v43[1];
            v47 = v43[3];
            v46 = v43[4];
            v49 = v43[6];
            v48 = v43[7];
            v51 = v43[9];
            v50 = v43[10];
            v52 = v250[-17];
            v53 = v250[-18];
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v44->f64[0]), v47, *v44, 1), v49, v52.f64[0]), v51, v52, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v44->f64[0]), v46, *v44, 1), v48, v52.f64[0]), v50, v52, 1);
            v57 = v250[-16];
            v56 = v250[-15];
            v59 = v56;
            v58 = v250[-14];
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v56.f64[0]), v47, v56, 1), v49, v58.f64[0]), v51, v58, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
            v63 = v250[-13];
            v62 = v250[-12];
            v65 = v62;
            v64 = v250[-11];
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v62.f64[0]), v47, v62, 1), v49, v64.f64[0]), v51, v64, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v46, v62, 1), v48, v64.f64[0]), v50, v64, 1);
            v69 = v250[-10];
            v68 = v250[-9];
            v70 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v68.f64[0]), v47, v68, 1);
            v72 = v68;
            v71 = v250[-8];
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v49, v71.f64[0]), v51, v71, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v68.f64[0]), v46, v68, 1), v48, v71.f64[0]), v50, v71, 1);
            v76 = v43[12];
            v75 = v43[13];
            v78 = v43[15];
            v77 = v43[16];
            v79 = v57;
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v76, v79.f64[0]), v78, v79, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v75, v79.f64[0]), v77, v79, 1);
            v83 = v250[-14];
            v82 = v63;
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v76, v82.f64[0]), v78, v82, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v75, v82.f64[0]), v77, v82, 1);
            v87 = v250[-11];
            v86 = v69;
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v76, v86.f64[0]), v78, v86, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v75, v86.f64[0]), v77, v86, 1);
            v91 = v250[-8];
            v90 = v250[-7];
            *a3 = v80;
            a3[1] = v81;
            a3[3] = v84;
            a3[4] = v85;
            a3[6] = v88;
            a3[7] = v89;
            a3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v90.f64[0]), v78, v90, 1);
            a3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v75, v90.f64[0]), v77, v90, 1);
            v92 = v43[2];
            v93 = v43[5];
            v94 = v43[8];
            v95 = v43[11];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v53.f64[0]), v93, v53, 1), v94, v250[-17].f64[0]), v95, v250[-17], 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v59.f64[0]), v93, v59, 1), v94, v83.f64[0]), v95, v83, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v65.f64[0]), v93, v65, 1), v94, v87.f64[0]), v95, v87, 1);
            v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v72.f64[0]), v93, v72, 1), v94, v91.f64[0]), v95, v91, 1);
            v100 = v43[14];
            v101 = v43[17];
            v102 = v250[-6];
            v103 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v250[-7].f64[0]), v101, v250[-7], 1);
            a3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v96, v100, v57.f64[0]), v101, v57, 1);
            a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v63.f64[0]), v101, v63, 1);
            a3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v100, v69.f64[0]), v101, v69, 1);
            a3[11] = v103;
            v104 = v43[1];
            v106 = v43[3];
            v105 = v43[4];
            v108 = v43[6];
            v107 = v43[7];
            v110 = v43[9];
            v109 = v43[10];
            v112 = v250[-6];
            v111 = v250[-5];
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v102.f64[0]), v106, v102, 1), v108, v111.f64[0]), v110, v111, 1);
            v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v102.f64[0]), v105, v102, 1), v107, v111.f64[0]), v109, v111, 1);
            v116 = v250[-4];
            v115 = v250[-3];
            v117 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v115.f64[0]), v106, v115, 1);
            v119 = v115;
            v118 = v250[-2];
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v108, v118.f64[0]), v110, v118, 1);
            v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v115.f64[0]), v105, v115, 1), v107, v118.f64[0]), v109, v118, 1);
            v123 = v43[12];
            v122 = v43[13];
            v125 = v43[15];
            v124 = v43[16];
            v127 = v250[-5];
            v126 = v116;
            v128 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v123, v126.f64[0]), v125, v126, 1);
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v122, v126.f64[0]), v124, v126, 1);
            v131 = v250[-2];
            v130 = v250[-1];
            a3[12] = v128;
            a3[13] = v129;
            a3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v120, v123, v130.f64[0]), v125, v130, 1);
            a3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v121, v122, v130.f64[0]), v124, v130, 1);
            v132 = v43[2];
            v133 = v43[5];
            v134 = v43[8];
            v135 = v43[11];
            v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v112.f64[0]), v133, v112, 1), v134, v127.f64[0]), v135, v127, 1);
            v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v119.f64[0]), v133, v119, 1), v134, v131.f64[0]), v135, v131, 1);
            v138 = v43[14];
            v139 = v43[17];
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v250[-1].f64[0]), v139, v250[-1], 1);
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v136, v138, v116.f64[0]), v139, v116, 1);
            a3[17] = v140;
            break;
          case 1:
            v142 = 0;
            v144 = (int8x16_t)a3[16];
            v143 = (int8x16_t)a3[17];
            v146 = (int8x16_t)a3[14];
            v145 = (int8x16_t)a3[15];
            v148 = (int8x16_t)a3[12];
            v147 = (int8x16_t)a3[13];
            v150 = (int8x16_t)a3[10];
            v149 = (int8x16_t)a3[11];
            v152 = (int8x16_t)a3[8];
            v151 = (int8x16_t)a3[9];
            v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
            v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
            v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
            v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
            v153 = vextq_s8(v147, v147, 8uLL).u64[0];
            v154 = vextq_s8(v148, v148, 8uLL).u64[0];
            v155 = vextq_s8(v149, v149, 8uLL).u64[0];
            v157 = (int8x16_t)a3[6];
            v156 = (int8x16_t)a3[7];
            v158 = vextq_s8(v150, v150, 8uLL).u64[0];
            v159 = vextq_s8(v151, v151, 8uLL).u64[0];
            v160 = vextq_s8(v152, v152, 8uLL).u64[0];
            v162 = (int8x16_t)a3[4];
            v161 = (int8x16_t)a3[5];
            v163 = vextq_s8(v156, v156, 8uLL).u64[0];
            v164 = vextq_s8(v157, v157, 8uLL).u64[0];
            v165 = vextq_s8(v161, v161, 8uLL).u64[0];
            v166 = (int8x16_t)a3[3];
            v167 = vextq_s8(v162, v162, 8uLL).u64[0];
            v168 = a3 + 2;
            v169 = (int8x16_t)a3[2];
            v170 = vextq_s8(v166, v166, 8uLL).u64[0];
            v171 = vextq_s8(v169, v169, 8uLL).u64[0];
            v173 = *(int8x16_t *)a3;
            v172 = (int8x16_t)a3[1];
            v174 = vextq_s8(v172, v172, 8uLL).u64[0];
            v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            do
            {
              v173.i64[1] = v175;
              v172.i64[1] = v174;
              v169.i64[1] = v171;
              v166.i64[1] = v170;
              v176 = v168[-1];
              v177 = v41[2];
              v178 = vmulq_f64(v168[-2], v41[1]);
              v253 = *v168;
              v179 = v41[3];
              v251 = v178;
              v252 = v179;
              v418 = v173;
              v419 = v172;
              v420 = v169;
              v421 = v166;
              v162.i64[1] = v167;
              v161.i64[1] = v165;
              v157.i64[1] = v164;
              v422 = v162;
              v423 = v161;
              v156.i64[1] = v163;
              v152.i64[1] = v160;
              v424 = v157;
              v425 = v156;
              v151.i64[1] = v159;
              v150.i64[1] = v158;
              v426 = v152;
              v427 = v151;
              v149.i64[1] = v155;
              v148.i64[1] = v154;
              v428 = v150;
              v429 = v149;
              v147.i64[1] = v153;
              v146.i64[1] = *(_QWORD *)&v254.f64[0];
              v430 = v148;
              v431 = v147;
              v145.i64[1] = *(_QWORD *)&v255.f64[0];
              v144.i64[1] = *(_QWORD *)&v256.f64[0];
              v432 = v146;
              v433 = v145;
              v143.i64[1] = *(_QWORD *)&v257.f64[0];
              v434 = v144;
              v435 = v143;
              v418.i64[v142 & 0x3F] = *(_QWORD *)&v178.f64[0];
              v257 = vmulq_f64(v176, v177);
              v417 = v449;
              v416 = v448;
              v415 = v447;
              v414 = v446;
              v413 = v445;
              v412 = v444;
              v411 = v443;
              v410 = v442;
              v409 = v441;
              v408 = v440;
              v407 = v439;
              v406 = v438;
              v405 = v437;
              v404 = v436;
              v403 = v435;
              v402 = v434;
              v401 = v433;
              v400 = v432;
              v399 = v431;
              v398 = v430;
              v397 = v429;
              v396 = v428;
              v395 = v427;
              v394 = v426;
              v393 = v425;
              v392 = v424;
              v391 = v423;
              v390 = v422;
              v389 = v421;
              v388 = v420;
              v387 = v419;
              v386 = v418;
              v386.i64[((_BYTE)v142 + 1) & 0x3F] = *(_QWORD *)&v251.f64[1];
              v385 = v417;
              v384 = v416;
              v383 = v415;
              v382 = v414;
              v381 = v413;
              v380 = v412;
              v379 = v411;
              v378 = v410;
              v377 = v409;
              v376 = v408;
              v375 = v407;
              v374 = v406;
              v373 = v405;
              v372 = v404;
              v371 = v403;
              v370 = v402;
              v369 = v401;
              v368 = v400;
              v367 = v399;
              v366 = v398;
              v365 = v397;
              v364 = v396;
              v363 = v395;
              v362 = v394;
              v361 = v393;
              v360 = v392;
              v359 = v391;
              v358 = v390;
              v357 = v389;
              v356 = v388;
              v355 = v387;
              v354 = v386;
              v180 = v257.f64[1];
              v354.i64[((_BYTE)v142 + 2) & 0x3F] = *(_QWORD *)&v257.f64[0];
              v256 = vmulq_f64(v253, v252);
              v353 = v385;
              v352 = v384;
              v351 = v383;
              v350 = v382;
              v349 = v381;
              v348 = v380;
              v347 = v379;
              v346 = v378;
              v345 = v377;
              v344 = v376;
              v343 = v375;
              v342 = v374;
              v341 = v373;
              v340 = v372;
              v339 = v371;
              v338 = v370;
              v337 = v369;
              v336 = v368;
              v335 = v367;
              v334 = v366;
              v333 = v365;
              v332 = v364;
              v331 = v363;
              v330 = v362;
              v329 = v361;
              v328 = v360;
              v327 = v359;
              v326 = v358;
              v325 = v357;
              v324 = v356;
              v323 = v355;
              v322 = v354;
              *(float64_t *)&v322.i64[((_BYTE)v142 + 3) & 0x3F] = v180;
              v321 = v353;
              v320 = v352;
              v319 = v351;
              v318 = v350;
              v317 = v349;
              v316 = v348;
              v314 = v346;
              v315 = v347;
              v312 = v344;
              v313 = v345;
              v310 = v342;
              v311 = v343;
              v308 = v340;
              v309 = v341;
              v306 = v338;
              v307 = v339;
              v304 = v336;
              v305 = v337;
              v302 = v334;
              v303 = v335;
              v300 = v332;
              v301 = v333;
              v298 = v330;
              v299 = v331;
              v296 = v328;
              v297 = v329;
              v294 = v326;
              v295 = v327;
              v292 = v324;
              v293 = v325;
              v290 = v322;
              v291 = v323;
              v181 = v256.f64[1];
              v290.i64[((_BYTE)v142 + 4) & 0x3F] = *(_QWORD *)&v256.f64[0];
              v288 = v320;
              v289 = v321;
              v286 = v318;
              v287 = v319;
              v284 = v316;
              v285 = v317;
              v282 = v314;
              v283 = v315;
              v280 = v312;
              v281 = v313;
              v278 = v310;
              v279 = v311;
              v276 = v308;
              v277 = v309;
              v274 = v306;
              v275 = v307;
              v272 = v304;
              v273 = v305;
              v270 = v302;
              v271 = v303;
              v268 = v300;
              v269 = v301;
              v266 = v298;
              v267 = v299;
              v264 = v296;
              v265 = v297;
              v262 = v294;
              v263 = v295;
              v260 = v292;
              v261 = v293;
              v259 = v291;
              v258 = v290;
              *(float64_t *)&v258.i64[((_BYTE)v142 + 5) & 0x3F] = v181;
              v144 = v274;
              v143 = v275;
              v146 = v272;
              v145 = v273;
              v148 = v270;
              v147 = v271;
              v150 = v268;
              v149 = v269;
              v152 = v266;
              v151 = v267;
              v157 = v264;
              v156 = v265;
              v162 = v262;
              v161 = v263;
              v169 = v260;
              v166 = v261;
              v173 = v258;
              v172 = v259;
              v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
              v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
              v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
              v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
              v153 = vextq_s8(v147, v147, 8uLL).u64[0];
              v154 = vextq_s8(v148, v148, 8uLL).u64[0];
              v155 = vextq_s8(v149, v149, 8uLL).u64[0];
              v158 = vextq_s8(v150, v150, 8uLL).u64[0];
              v159 = vextq_s8(v151, v151, 8uLL).u64[0];
              v160 = vextq_s8(v152, v152, 8uLL).u64[0];
              v163 = vextq_s8(v156, v156, 8uLL).u64[0];
              v164 = vextq_s8(v157, v157, 8uLL).u64[0];
              v165 = vextq_s8(v161, v161, 8uLL).u64[0];
              v167 = vextq_s8(v162, v162, 8uLL).u64[0];
              a3[2] = (float64x2_t)v260;
              a3[3] = (float64x2_t)v166;
              a3[4] = (float64x2_t)v162;
              a3[5] = (float64x2_t)v161;
              a3[6] = (float64x2_t)v157;
              a3[7] = (float64x2_t)v156;
              a3[8] = (float64x2_t)v152;
              a3[9] = (float64x2_t)v151;
              a3[10] = (float64x2_t)v150;
              a3[11] = (float64x2_t)v149;
              a3[12] = (float64x2_t)v148;
              a3[13] = (float64x2_t)v147;
              a3[14] = (float64x2_t)v146;
              a3[15] = (float64x2_t)v145;
              v142 += 6;
              v168 += 3;
              a3[16] = (float64x2_t)v144;
              a3[17] = (float64x2_t)v143;
              *a3 = (float64x2_t)v173;
              a3[1] = (float64x2_t)v172;
              v170 = vextq_s8(v166, v166, 8uLL).u64[0];
              v171 = vextq_s8(v169, v169, 8uLL).u64[0];
              v174 = vextq_s8(v172, v172, 8uLL).u64[0];
              v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            }
            while (v142 != 36);
            break;
          case 2:
            v182 = v41[1].f64[0];
            v183 = vmulq_n_f64(*a3, v182);
            v184 = vmulq_n_f64(a3[1], v182);
            v185 = vmulq_n_f64(a3[2], v182);
            v186 = vmulq_n_f64(a3[3], v182);
            v187 = vmulq_n_f64(a3[4], v182);
            v188 = vmulq_n_f64(a3[5], v182);
            v189 = vmulq_n_f64(a3[6], v182);
            v190 = vmulq_n_f64(a3[7], v182);
            v191 = vmulq_n_f64(a3[8], v182);
            v192 = vmulq_n_f64(a3[9], v182);
            v193 = vmulq_n_f64(a3[10], v182);
            v194 = vmulq_n_f64(a3[11], v182);
            v195 = vmulq_n_f64(a3[12], v182);
            v196 = vmulq_n_f64(a3[13], v182);
            v197 = vmulq_n_f64(a3[14], v182);
            v198 = vmulq_n_f64(a3[15], v182);
            v199 = vmulq_n_f64(a3[16], v182);
            v200 = vmulq_n_f64(a3[17], v182);
            a3[16] = v199;
            a3[17] = v200;
            a3[14] = v197;
            a3[15] = v198;
            a3[12] = v195;
            a3[13] = v196;
            a3[10] = v193;
            a3[11] = v194;
            a3[8] = v191;
            a3[9] = v192;
            a3[6] = v189;
            a3[7] = v190;
            a3[4] = v187;
            a3[5] = v188;
            a3[2] = v185;
            a3[3] = v186;
            *a3 = v183;
            a3[1] = v184;
            break;
          case 4:
            v201 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v41->f64[0] + 56))(&v452, v41);
            MEMORY[0x24BDAC7A8](v201);
            memcpy(v250, a3, sizeof(v250));
            v256 = v456;
            v257 = *(float64x2_t *)&v453[16];
            v202 = v452;
            v203 = v454;
            v254 = v457;
            v255 = v459;
            v204 = v460;
            v205 = v462;
            v206 = v465;
            v207 = v463;
            v208 = v466;
            v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[0].f64[0]), v455, v250[0], 1), v458, v250[1].f64[0]), v461, v250[1], 1), v464, v250[2].f64[0]), v467, v250[2], 1);
            v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[3].f64[0]), v454, v250[3], 1), v457, v250[4].f64[0]), v460, v250[4], 1), v463, v250[5].f64[0]), v466, v250[5], 1);
            v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[3].f64[0]), v455, v250[3], 1), v458, v250[4].f64[0]), v461, v250[4], 1), v464, v250[5].f64[0]), v467, v250[5], 1);
            v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[6].f64[0]), v454, v250[6], 1), v457, v250[7].f64[0]), v460, v250[7], 1), v463, v250[8].f64[0]), v466, v250[8], 1);
            v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[6].f64[0]), v455, v250[6], 1), v458, v250[7].f64[0]), v461, v250[7], 1), v464, v250[8].f64[0]), v467, v250[8], 1);
            v214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[9].f64[0]), v454, v250[9], 1), v457, v250[10].f64[0]), v460, v250[10], 1), v463, v250[11].f64[0]), v466, v250[11], 1);
            v215 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[9].f64[0]), v455, v250[9], 1), v458, v250[10].f64[0]), v461, v250[10], 1), v464, v250[11].f64[0]), v467, v250[11], 1);
            v216 = *(float64x2_t *)v453;
            v217 = v455;
            v218 = v458;
            v219 = v461;
            v220 = v464;
            v221 = v467;
            v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[0].f64[0]), v456, v250[0], 1), v459, v250[1].f64[0]), v462, v250[1], 1), v465, v250[2].f64[0]), v468, v250[2], 1);
            v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[3].f64[0]), v456, v250[3], 1), v459, v250[4].f64[0]), v462, v250[4], 1), v465, v250[5].f64[0]), v468, v250[5], 1);
            v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[6].f64[0]), v456, v250[6], 1), v459, v250[7].f64[0]), v462, v250[7], 1), v465, v250[8].f64[0]), v468, v250[8], 1);
            v225 = v250[12];
            v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[9].f64[0]), v456, v250[9], 1), v459, v250[10].f64[0]), v462, v250[10], 1), v465, v250[11].f64[0]), v468, v250[11], 1);
            *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[0].f64[0]), v454, v250[0], 1), v457, v250[1].f64[0]), v460, v250[1], 1), v463, v250[2].f64[0]), v466, v250[2], 1);
            a3[1] = v209;
            a3[6] = v212;
            a3[7] = v213;
            a3[2] = v222;
            a3[3] = v210;
            a3[4] = v211;
            a3[5] = v223;
            a3[8] = v224;
            a3[9] = v214;
            a3[10] = v215;
            a3[11] = v226;
            v227 = v250[12];
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v225.f64[0]), v203, v225, 1), v254, v250[13].f64[0]), v204, v250[13], 1);
            v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v225.f64[0]), v217, v225, 1), v218, v250[13].f64[0]), v219, v250[13], 1);
            v230 = v250[14];
            v231 = v250[15];
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v250[15].f64[0]), v203, v250[15], 1), v254, v250[16].f64[0]), v204, v250[16], 1);
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v250[15].f64[0]), v217, v250[15], 1), v218, v250[16].f64[0]), v219, v250[16], 1);
            v234 = v250[13];
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v220, v250[14].f64[0]), v221, v250[14], 1);
            v236 = v250[16];
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v207, v250[17].f64[0]), v208, v250[17], 1);
            v238 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v220, v250[17].f64[0]), v221, v250[17], 1);
            a3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v228, v207, v250[14].f64[0]), v208, v250[14], 1);
            a3[13] = v235;
            v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v227.f64[0]), v256, v227, 1), v255, v234.f64[0]), v205, v234, 1);
            v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v231.f64[0]), v256, v231, 1), v255, v236.f64[0]);
            v241 = v468;
            v242 = v250[17];
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v239, v206, v230.f64[0]), v468, v230, 1);
            a3[15] = v237;
            a3[16] = v238;
            a3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v240, v205, v236, 1), v206, v242.f64[0]), v241, v242, 1);
            break;
          default:
            break;
        }
      }
    }
    _Q1 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 152) = _Q1;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 216);
    _Q2 = *(_OWORD *)(a1 + 184);
    _D4 = *(_QWORD *)(a1 + 192);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a1 + 208);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 224);
    __asm { FMLA            D3, D1, V0.D[1] }
    v141 = *(double *)(a2 + 8) * _D3;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    v141 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 232) = v141;
  return result;
}

BOOL sub_20F9B0DB8(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  double v10;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v22;
  float64x2_t v23;
  double v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  void *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  uint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t v166;
  unint64_t v167;
  float64x2_t *v168;
  int8x16_t v169;
  unint64_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  unint64_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64_t v180;
  float64_t v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  _QWORD *v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _BOOL8 result;
  float64x2_t v250[18];
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  float64x2_t v450;
  uint64_t v451;
  float64x2_t v452;
  _BYTE v453[32];
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  uint64_t v469;
  float64x2x3_t v470;

  v469 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v7 = a1 + 128;
    v8 = *(_QWORD *)(a1 + 128);
    v9 = (const double *)(a1 + 16);
    v470 = vld3q_f64(v9);
    v10 = *(double *)(a1 + 80);
    _Q4 = *(_OWORD *)(a1 + 64);
    v12 = *(double *)(v8 + 48);
    v13 = *(double *)(v8 + 72);
    v14 = *(double *)(v8 + 96);
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 32)), v470.val[1], *(float64x2_t *)(v8 + 32), 1), v470.val[2], v12);
    _D6 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D20, D6, V4.D[1] }
    v22 = _D20 + v10 * v12;
    v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 56)), v470.val[1], *(float64x2_t *)(v8 + 56), 1), v470.val[2], v13);
    _D16 = *(_QWORD *)(v8 + 64);
    __asm { FMLA            D20, D16, V4.D[1] }
    v26 = _D20 + v10 * v13;
    v27 = vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 80)), v470.val[1], *(float64x2_t *)(v8 + 80), 1);
    _D18 = *(_QWORD *)(v8 + 88);
    __asm { FMLA            D20, D18, V4.D[1] }
    v452 = v15;
    *(double *)v453 = v22;
    *(double *)&v453[24] = v26;
    *(float64x2_t *)&v453[8] = v23;
    v455.f64[0] = _D20 + v10 * v14;
    v454 = vmlaq_n_f64(v27, v470.val[2], v14);
    v451 = 0;
    v450 = 0uLL;
    sub_20E9733B8(&v452, v450.f64);
    v30 = v450;
    *(_QWORD *)(a1 + 200) = v451;
    *(float64x2_t *)(a1 + 184) = v30;
    v30.f64[0] = *(float64_t *)(v8 + 120);
    v31.f64[0] = *(float64_t *)(a1 + 104);
    *(float64x2_t *)(a1 + 208) = vsubq_f64(*(float64x2_t *)(v8 + 104), *(float64x2_t *)(a1 + 88));
    *(_QWORD *)(a1 + 224) = *(_OWORD *)&vsubq_f64(v30, v31);
    v32 = *(float64x2_t **)(a1 + 112);
    v33 = vmulq_f64(*(float64x2_t *)(a1 + 216), v32[3]);
    v34 = vmulq_f64(*(float64x2_t *)(a1 + 200), v32[2]);
    *(float64x2_t *)(a1 + 184) = vmulq_f64(*(float64x2_t *)(a1 + 184), v32[1]);
    *(float64x2_t *)(a1 + 200) = v34;
    *(float64x2_t *)(a1 + 216) = v33;
    if (*(_BYTE *)(*(_QWORD *)v7 + 20))
    {
      v36 = v32[2].f64[0];
      v35 = v32[2].f64[1];
      v37 = v32[1].f64[1];
      v38 = v32[3].f64[0];
      v39 = v32[3].f64[1];
      a3->f64[0] = v32[1].f64[0];
      *(float64x2_t *)((char *)a3 + 8) = 0u;
      *(float64x2_t *)((char *)&a3[1] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[2] + 8) = 0u;
      a3[3].f64[1] = v37;
      a3[4] = 0u;
      a3[5] = 0u;
      a3[6] = 0u;
      a3[7].f64[0] = v36;
      *(float64x2_t *)((char *)&a3[7] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[8] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[9] + 8) = 0u;
      a3[10].f64[1] = v35;
      a3[11] = 0u;
      a3[12] = 0u;
      a3[13] = 0u;
      a3[14].f64[0] = v38;
      *(float64x2_t *)((char *)&a3[15] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[14] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[16] + 8) = 0u;
      a3[17].f64[1] = v39;
    }
    *(_BYTE *)(a1 + 240) = 1;
    v40 = *(_QWORD *)(a1 + 248);
    if (v40)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, a1 + 184);
      v41 = *(float64x2_t **)(a1 + 248);
      v42 = (void *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v41->f64[0] + 16))(v41);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch((int)v42)
        {
          case 0:
            v43 = v41 + 1;
            if (&a3[18] > &v41[1] && &v41[19] > a3)
            {
              MEMORY[0x24BDAC7A8](v42);
              v42 = memcpy(v250, v43, sizeof(v250));
              v43 = v250;
            }
            MEMORY[0x24BDAC7A8](v42);
            v44 = &v250[-18];
            memcpy(&v250[-18], a3, 0x120uLL);
            v45 = v43[1];
            v47 = v43[3];
            v46 = v43[4];
            v49 = v43[6];
            v48 = v43[7];
            v51 = v43[9];
            v50 = v43[10];
            v52 = v250[-17];
            v53 = v250[-18];
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v44->f64[0]), v47, *v44, 1), v49, v52.f64[0]), v51, v52, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v44->f64[0]), v46, *v44, 1), v48, v52.f64[0]), v50, v52, 1);
            v57 = v250[-16];
            v56 = v250[-15];
            v59 = v56;
            v58 = v250[-14];
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v56.f64[0]), v47, v56, 1), v49, v58.f64[0]), v51, v58, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
            v63 = v250[-13];
            v62 = v250[-12];
            v65 = v62;
            v64 = v250[-11];
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v62.f64[0]), v47, v62, 1), v49, v64.f64[0]), v51, v64, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v46, v62, 1), v48, v64.f64[0]), v50, v64, 1);
            v69 = v250[-10];
            v68 = v250[-9];
            v70 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v68.f64[0]), v47, v68, 1);
            v72 = v68;
            v71 = v250[-8];
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v49, v71.f64[0]), v51, v71, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v68.f64[0]), v46, v68, 1), v48, v71.f64[0]), v50, v71, 1);
            v76 = v43[12];
            v75 = v43[13];
            v78 = v43[15];
            v77 = v43[16];
            v79 = v57;
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v76, v79.f64[0]), v78, v79, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v75, v79.f64[0]), v77, v79, 1);
            v83 = v250[-14];
            v82 = v63;
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v76, v82.f64[0]), v78, v82, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v75, v82.f64[0]), v77, v82, 1);
            v87 = v250[-11];
            v86 = v69;
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v76, v86.f64[0]), v78, v86, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v75, v86.f64[0]), v77, v86, 1);
            v91 = v250[-8];
            v90 = v250[-7];
            *a3 = v80;
            a3[1] = v81;
            a3[3] = v84;
            a3[4] = v85;
            a3[6] = v88;
            a3[7] = v89;
            a3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v90.f64[0]), v78, v90, 1);
            a3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v75, v90.f64[0]), v77, v90, 1);
            v92 = v43[2];
            v93 = v43[5];
            v94 = v43[8];
            v95 = v43[11];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v53.f64[0]), v93, v53, 1), v94, v250[-17].f64[0]), v95, v250[-17], 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v59.f64[0]), v93, v59, 1), v94, v83.f64[0]), v95, v83, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v65.f64[0]), v93, v65, 1), v94, v87.f64[0]), v95, v87, 1);
            v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v72.f64[0]), v93, v72, 1), v94, v91.f64[0]), v95, v91, 1);
            v100 = v43[14];
            v101 = v43[17];
            v102 = v250[-6];
            v103 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v250[-7].f64[0]), v101, v250[-7], 1);
            a3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v96, v100, v57.f64[0]), v101, v57, 1);
            a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v63.f64[0]), v101, v63, 1);
            a3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v100, v69.f64[0]), v101, v69, 1);
            a3[11] = v103;
            v104 = v43[1];
            v106 = v43[3];
            v105 = v43[4];
            v108 = v43[6];
            v107 = v43[7];
            v110 = v43[9];
            v109 = v43[10];
            v112 = v250[-6];
            v111 = v250[-5];
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v102.f64[0]), v106, v102, 1), v108, v111.f64[0]), v110, v111, 1);
            v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v102.f64[0]), v105, v102, 1), v107, v111.f64[0]), v109, v111, 1);
            v116 = v250[-4];
            v115 = v250[-3];
            v117 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v115.f64[0]), v106, v115, 1);
            v119 = v115;
            v118 = v250[-2];
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v108, v118.f64[0]), v110, v118, 1);
            v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v115.f64[0]), v105, v115, 1), v107, v118.f64[0]), v109, v118, 1);
            v123 = v43[12];
            v122 = v43[13];
            v125 = v43[15];
            v124 = v43[16];
            v127 = v250[-5];
            v126 = v116;
            v128 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v123, v126.f64[0]), v125, v126, 1);
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v122, v126.f64[0]), v124, v126, 1);
            v131 = v250[-2];
            v130 = v250[-1];
            a3[12] = v128;
            a3[13] = v129;
            a3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v120, v123, v130.f64[0]), v125, v130, 1);
            a3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v121, v122, v130.f64[0]), v124, v130, 1);
            v132 = v43[2];
            v133 = v43[5];
            v134 = v43[8];
            v135 = v43[11];
            v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v112.f64[0]), v133, v112, 1), v134, v127.f64[0]), v135, v127, 1);
            v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v119.f64[0]), v133, v119, 1), v134, v131.f64[0]), v135, v131, 1);
            v138 = v43[14];
            v139 = v43[17];
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v250[-1].f64[0]), v139, v250[-1], 1);
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v136, v138, v116.f64[0]), v139, v116, 1);
            a3[17] = v140;
            break;
          case 1:
            v142 = 0;
            v144 = (int8x16_t)a3[16];
            v143 = (int8x16_t)a3[17];
            v146 = (int8x16_t)a3[14];
            v145 = (int8x16_t)a3[15];
            v148 = (int8x16_t)a3[12];
            v147 = (int8x16_t)a3[13];
            v150 = (int8x16_t)a3[10];
            v149 = (int8x16_t)a3[11];
            v152 = (int8x16_t)a3[8];
            v151 = (int8x16_t)a3[9];
            v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
            v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
            v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
            v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
            v153 = vextq_s8(v147, v147, 8uLL).u64[0];
            v154 = vextq_s8(v148, v148, 8uLL).u64[0];
            v155 = vextq_s8(v149, v149, 8uLL).u64[0];
            v157 = (int8x16_t)a3[6];
            v156 = (int8x16_t)a3[7];
            v158 = vextq_s8(v150, v150, 8uLL).u64[0];
            v159 = vextq_s8(v151, v151, 8uLL).u64[0];
            v160 = vextq_s8(v152, v152, 8uLL).u64[0];
            v162 = (int8x16_t)a3[4];
            v161 = (int8x16_t)a3[5];
            v163 = vextq_s8(v156, v156, 8uLL).u64[0];
            v164 = vextq_s8(v157, v157, 8uLL).u64[0];
            v165 = vextq_s8(v161, v161, 8uLL).u64[0];
            v166 = (int8x16_t)a3[3];
            v167 = vextq_s8(v162, v162, 8uLL).u64[0];
            v168 = a3 + 2;
            v169 = (int8x16_t)a3[2];
            v170 = vextq_s8(v166, v166, 8uLL).u64[0];
            v171 = vextq_s8(v169, v169, 8uLL).u64[0];
            v173 = *(int8x16_t *)a3;
            v172 = (int8x16_t)a3[1];
            v174 = vextq_s8(v172, v172, 8uLL).u64[0];
            v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            do
            {
              v173.i64[1] = v175;
              v172.i64[1] = v174;
              v169.i64[1] = v171;
              v166.i64[1] = v170;
              v176 = v168[-1];
              v177 = v41[2];
              v178 = vmulq_f64(v168[-2], v41[1]);
              v253 = *v168;
              v179 = v41[3];
              v251 = v178;
              v252 = v179;
              v418 = v173;
              v419 = v172;
              v420 = v169;
              v421 = v166;
              v162.i64[1] = v167;
              v161.i64[1] = v165;
              v157.i64[1] = v164;
              v422 = v162;
              v423 = v161;
              v156.i64[1] = v163;
              v152.i64[1] = v160;
              v424 = v157;
              v425 = v156;
              v151.i64[1] = v159;
              v150.i64[1] = v158;
              v426 = v152;
              v427 = v151;
              v149.i64[1] = v155;
              v148.i64[1] = v154;
              v428 = v150;
              v429 = v149;
              v147.i64[1] = v153;
              v146.i64[1] = *(_QWORD *)&v254.f64[0];
              v430 = v148;
              v431 = v147;
              v145.i64[1] = *(_QWORD *)&v255.f64[0];
              v144.i64[1] = *(_QWORD *)&v256.f64[0];
              v432 = v146;
              v433 = v145;
              v143.i64[1] = *(_QWORD *)&v257.f64[0];
              v434 = v144;
              v435 = v143;
              v418.i64[v142 & 0x3F] = *(_QWORD *)&v178.f64[0];
              v257 = vmulq_f64(v176, v177);
              v417 = v449;
              v416 = v448;
              v415 = v447;
              v414 = v446;
              v413 = v445;
              v412 = v444;
              v411 = v443;
              v410 = v442;
              v409 = v441;
              v408 = v440;
              v407 = v439;
              v406 = v438;
              v405 = v437;
              v404 = v436;
              v403 = v435;
              v402 = v434;
              v401 = v433;
              v400 = v432;
              v399 = v431;
              v398 = v430;
              v397 = v429;
              v396 = v428;
              v395 = v427;
              v394 = v426;
              v393 = v425;
              v392 = v424;
              v391 = v423;
              v390 = v422;
              v389 = v421;
              v388 = v420;
              v387 = v419;
              v386 = v418;
              v386.i64[((_BYTE)v142 + 1) & 0x3F] = *(_QWORD *)&v251.f64[1];
              v385 = v417;
              v384 = v416;
              v383 = v415;
              v382 = v414;
              v381 = v413;
              v380 = v412;
              v379 = v411;
              v378 = v410;
              v377 = v409;
              v376 = v408;
              v375 = v407;
              v374 = v406;
              v373 = v405;
              v372 = v404;
              v371 = v403;
              v370 = v402;
              v369 = v401;
              v368 = v400;
              v367 = v399;
              v366 = v398;
              v365 = v397;
              v364 = v396;
              v363 = v395;
              v362 = v394;
              v361 = v393;
              v360 = v392;
              v359 = v391;
              v358 = v390;
              v357 = v389;
              v356 = v388;
              v355 = v387;
              v354 = v386;
              v180 = v257.f64[1];
              v354.i64[((_BYTE)v142 + 2) & 0x3F] = *(_QWORD *)&v257.f64[0];
              v256 = vmulq_f64(v253, v252);
              v353 = v385;
              v352 = v384;
              v351 = v383;
              v350 = v382;
              v349 = v381;
              v348 = v380;
              v347 = v379;
              v346 = v378;
              v345 = v377;
              v344 = v376;
              v343 = v375;
              v342 = v374;
              v341 = v373;
              v340 = v372;
              v339 = v371;
              v338 = v370;
              v337 = v369;
              v336 = v368;
              v335 = v367;
              v334 = v366;
              v333 = v365;
              v332 = v364;
              v331 = v363;
              v330 = v362;
              v329 = v361;
              v328 = v360;
              v327 = v359;
              v326 = v358;
              v325 = v357;
              v324 = v356;
              v323 = v355;
              v322 = v354;
              *(float64_t *)&v322.i64[((_BYTE)v142 + 3) & 0x3F] = v180;
              v321 = v353;
              v320 = v352;
              v319 = v351;
              v318 = v350;
              v317 = v349;
              v316 = v348;
              v314 = v346;
              v315 = v347;
              v312 = v344;
              v313 = v345;
              v310 = v342;
              v311 = v343;
              v308 = v340;
              v309 = v341;
              v306 = v338;
              v307 = v339;
              v304 = v336;
              v305 = v337;
              v302 = v334;
              v303 = v335;
              v300 = v332;
              v301 = v333;
              v298 = v330;
              v299 = v331;
              v296 = v328;
              v297 = v329;
              v294 = v326;
              v295 = v327;
              v292 = v324;
              v293 = v325;
              v290 = v322;
              v291 = v323;
              v181 = v256.f64[1];
              v290.i64[((_BYTE)v142 + 4) & 0x3F] = *(_QWORD *)&v256.f64[0];
              v288 = v320;
              v289 = v321;
              v286 = v318;
              v287 = v319;
              v284 = v316;
              v285 = v317;
              v282 = v314;
              v283 = v315;
              v280 = v312;
              v281 = v313;
              v278 = v310;
              v279 = v311;
              v276 = v308;
              v277 = v309;
              v274 = v306;
              v275 = v307;
              v272 = v304;
              v273 = v305;
              v270 = v302;
              v271 = v303;
              v268 = v300;
              v269 = v301;
              v266 = v298;
              v267 = v299;
              v264 = v296;
              v265 = v297;
              v262 = v294;
              v263 = v295;
              v260 = v292;
              v261 = v293;
              v259 = v291;
              v258 = v290;
              *(float64_t *)&v258.i64[((_BYTE)v142 + 5) & 0x3F] = v181;
              v144 = v274;
              v143 = v275;
              v146 = v272;
              v145 = v273;
              v148 = v270;
              v147 = v271;
              v150 = v268;
              v149 = v269;
              v152 = v266;
              v151 = v267;
              v157 = v264;
              v156 = v265;
              v162 = v262;
              v161 = v263;
              v169 = v260;
              v166 = v261;
              v173 = v258;
              v172 = v259;
              v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
              v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
              v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
              v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
              v153 = vextq_s8(v147, v147, 8uLL).u64[0];
              v154 = vextq_s8(v148, v148, 8uLL).u64[0];
              v155 = vextq_s8(v149, v149, 8uLL).u64[0];
              v158 = vextq_s8(v150, v150, 8uLL).u64[0];
              v159 = vextq_s8(v151, v151, 8uLL).u64[0];
              v160 = vextq_s8(v152, v152, 8uLL).u64[0];
              v163 = vextq_s8(v156, v156, 8uLL).u64[0];
              v164 = vextq_s8(v157, v157, 8uLL).u64[0];
              v165 = vextq_s8(v161, v161, 8uLL).u64[0];
              v167 = vextq_s8(v162, v162, 8uLL).u64[0];
              a3[2] = (float64x2_t)v260;
              a3[3] = (float64x2_t)v166;
              a3[4] = (float64x2_t)v162;
              a3[5] = (float64x2_t)v161;
              a3[6] = (float64x2_t)v157;
              a3[7] = (float64x2_t)v156;
              a3[8] = (float64x2_t)v152;
              a3[9] = (float64x2_t)v151;
              a3[10] = (float64x2_t)v150;
              a3[11] = (float64x2_t)v149;
              a3[12] = (float64x2_t)v148;
              a3[13] = (float64x2_t)v147;
              a3[14] = (float64x2_t)v146;
              a3[15] = (float64x2_t)v145;
              v142 += 6;
              v168 += 3;
              a3[16] = (float64x2_t)v144;
              a3[17] = (float64x2_t)v143;
              *a3 = (float64x2_t)v173;
              a3[1] = (float64x2_t)v172;
              v170 = vextq_s8(v166, v166, 8uLL).u64[0];
              v171 = vextq_s8(v169, v169, 8uLL).u64[0];
              v174 = vextq_s8(v172, v172, 8uLL).u64[0];
              v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            }
            while (v142 != 36);
            break;
          case 2:
            v182 = v41[1].f64[0];
            v183 = vmulq_n_f64(*a3, v182);
            v184 = vmulq_n_f64(a3[1], v182);
            v185 = vmulq_n_f64(a3[2], v182);
            v186 = vmulq_n_f64(a3[3], v182);
            v187 = vmulq_n_f64(a3[4], v182);
            v188 = vmulq_n_f64(a3[5], v182);
            v189 = vmulq_n_f64(a3[6], v182);
            v190 = vmulq_n_f64(a3[7], v182);
            v191 = vmulq_n_f64(a3[8], v182);
            v192 = vmulq_n_f64(a3[9], v182);
            v193 = vmulq_n_f64(a3[10], v182);
            v194 = vmulq_n_f64(a3[11], v182);
            v195 = vmulq_n_f64(a3[12], v182);
            v196 = vmulq_n_f64(a3[13], v182);
            v197 = vmulq_n_f64(a3[14], v182);
            v198 = vmulq_n_f64(a3[15], v182);
            v199 = vmulq_n_f64(a3[16], v182);
            v200 = vmulq_n_f64(a3[17], v182);
            a3[16] = v199;
            a3[17] = v200;
            a3[14] = v197;
            a3[15] = v198;
            a3[12] = v195;
            a3[13] = v196;
            a3[10] = v193;
            a3[11] = v194;
            a3[8] = v191;
            a3[9] = v192;
            a3[6] = v189;
            a3[7] = v190;
            a3[4] = v187;
            a3[5] = v188;
            a3[2] = v185;
            a3[3] = v186;
            *a3 = v183;
            a3[1] = v184;
            break;
          case 4:
            v201 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v41->f64[0] + 56))(&v452, v41);
            MEMORY[0x24BDAC7A8](v201);
            memcpy(v250, a3, sizeof(v250));
            v256 = v456;
            v257 = *(float64x2_t *)&v453[16];
            v202 = v452;
            v203 = v454;
            v254 = v457;
            v255 = v459;
            v204 = v460;
            v205 = v462;
            v206 = v465;
            v207 = v463;
            v208 = v466;
            v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[0].f64[0]), v455, v250[0], 1), v458, v250[1].f64[0]), v461, v250[1], 1), v464, v250[2].f64[0]), v467, v250[2], 1);
            v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[3].f64[0]), v454, v250[3], 1), v457, v250[4].f64[0]), v460, v250[4], 1), v463, v250[5].f64[0]), v466, v250[5], 1);
            v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[3].f64[0]), v455, v250[3], 1), v458, v250[4].f64[0]), v461, v250[4], 1), v464, v250[5].f64[0]), v467, v250[5], 1);
            v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[6].f64[0]), v454, v250[6], 1), v457, v250[7].f64[0]), v460, v250[7], 1), v463, v250[8].f64[0]), v466, v250[8], 1);
            v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[6].f64[0]), v455, v250[6], 1), v458, v250[7].f64[0]), v461, v250[7], 1), v464, v250[8].f64[0]), v467, v250[8], 1);
            v214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[9].f64[0]), v454, v250[9], 1), v457, v250[10].f64[0]), v460, v250[10], 1), v463, v250[11].f64[0]), v466, v250[11], 1);
            v215 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[9].f64[0]), v455, v250[9], 1), v458, v250[10].f64[0]), v461, v250[10], 1), v464, v250[11].f64[0]), v467, v250[11], 1);
            v216 = *(float64x2_t *)v453;
            v217 = v455;
            v218 = v458;
            v219 = v461;
            v220 = v464;
            v221 = v467;
            v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[0].f64[0]), v456, v250[0], 1), v459, v250[1].f64[0]), v462, v250[1], 1), v465, v250[2].f64[0]), v468, v250[2], 1);
            v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[3].f64[0]), v456, v250[3], 1), v459, v250[4].f64[0]), v462, v250[4], 1), v465, v250[5].f64[0]), v468, v250[5], 1);
            v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[6].f64[0]), v456, v250[6], 1), v459, v250[7].f64[0]), v462, v250[7], 1), v465, v250[8].f64[0]), v468, v250[8], 1);
            v225 = v250[12];
            v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[9].f64[0]), v456, v250[9], 1), v459, v250[10].f64[0]), v462, v250[10], 1), v465, v250[11].f64[0]), v468, v250[11], 1);
            *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[0].f64[0]), v454, v250[0], 1), v457, v250[1].f64[0]), v460, v250[1], 1), v463, v250[2].f64[0]), v466, v250[2], 1);
            a3[1] = v209;
            a3[6] = v212;
            a3[7] = v213;
            a3[2] = v222;
            a3[3] = v210;
            a3[4] = v211;
            a3[5] = v223;
            a3[8] = v224;
            a3[9] = v214;
            a3[10] = v215;
            a3[11] = v226;
            v227 = v250[12];
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v225.f64[0]), v203, v225, 1), v254, v250[13].f64[0]), v204, v250[13], 1);
            v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v225.f64[0]), v217, v225, 1), v218, v250[13].f64[0]), v219, v250[13], 1);
            v230 = v250[14];
            v231 = v250[15];
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v250[15].f64[0]), v203, v250[15], 1), v254, v250[16].f64[0]), v204, v250[16], 1);
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v250[15].f64[0]), v217, v250[15], 1), v218, v250[16].f64[0]), v219, v250[16], 1);
            v234 = v250[13];
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v220, v250[14].f64[0]), v221, v250[14], 1);
            v236 = v250[16];
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v207, v250[17].f64[0]), v208, v250[17], 1);
            v238 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v220, v250[17].f64[0]), v221, v250[17], 1);
            a3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v228, v207, v250[14].f64[0]), v208, v250[14], 1);
            a3[13] = v235;
            v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v227.f64[0]), v256, v227, 1), v255, v234.f64[0]), v205, v234, 1);
            v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v231.f64[0]), v256, v231, 1), v255, v236.f64[0]);
            v241 = v468;
            v242 = v250[17];
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v239, v206, v230.f64[0]), v468, v230, 1);
            a3[15] = v237;
            a3[16] = v238;
            a3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v240, v205, v236, 1), v206, v242.f64[0]), v241, v242, 1);
            break;
          default:
            break;
        }
      }
    }
    _Q1 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 152) = _Q1;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 216);
    _Q2 = *(_OWORD *)(a1 + 184);
    _D4 = *(_QWORD *)(a1 + 192);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a1 + 208);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 224);
    __asm { FMLA            D3, D1, V0.D[1] }
    v141 = *(double *)(a2 + 8) * _D3;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    v141 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 232) = v141;
  return result;
}

double sub_20F9B1E00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(double *)(a1 + 32);
  *(double *)(a2 + 64) = result;
  return result;
}

float64x2_t sub_20F9B1E28(float64x2_t *a1, float64x2_t *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t result;

  a4.f64[0] = a2[1].f64[0];
  a5.f64[0] = a1[2].f64[0];
  result = vmulq_f64(*a2, a1[1]);
  *a2 = result;
  *(_QWORD *)&a2[1].f64[0] = *(_OWORD *)&vmulq_f64(a4, a5);
  return result;
}

uint64_t sub_20F9B1E54(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  void *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t *v48;
  const void *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v56;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  _QWORD *v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  uint64_t v123;
  uint64_t v124;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v138;
  float64x2_t v155[113];
  char v156;
  float64x2_t v157[112];
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7848;
  v7 = a1 + 7688;
  v8 = sub_20F565D3C(a1);
  *(_BYTE *)(v6 + 128) = v8;
  v9 = 0.0;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 7984);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v10 + 24))(v10, v6, 0.0);
      v11 = *(float64x2_t **)(a1 + 7984);
      v12 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      sub_20F576E60((float64x2_t *)&v156, v7, a3, v13, v14, v15, v16, v17, v18, v19, v11, v12);
      sub_20F572AE8(&v156, v20, v21, v22, v23, v24, v25, v26, v7, a3, v11, v12);
      sub_20F56FE10((float64_t *)&v156, v27, v28, v29, v30, v31, v32, v33, v34, v7, (uint64_t)a3, v11, v12);
      v43 = sub_20F56BAB4(&v156, v35, v36, v37, v38, v39, v40, v41, v42, v7, (uint64_t)a3, v11, v12);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7720) + 20))
      {
        v48 = a3 + 225;
        switch(v12)
        {
          case 0:
            if ((float64x2_t *)&a3[232].f64[1] > &v11[1] && (float64x2_t *)&v11[113].f64[1] > v48)
            {
              MEMORY[0x24BDAC7A8](v43);
              v43 = memcpy(v155, v49, 0x708uLL);
            }
            MEMORY[0x24BDAC7A8](v43);
            v50 = a3[226];
            v155[-8] = *v48;
            v155[-7] = v50;
            v51 = a3[228];
            v155[-6] = a3[227];
            v155[-5] = v51;
            v52 = a3[230];
            v155[-4] = a3[229];
            v155[-3] = v52;
            v155[-1].f64[0] = a3[232].f64[0];
            v155[-2] = a3[231];
            _Q7 = v155[-8];
            _Q17 = _Q7;
            v56 = v155[-7];
            _Q1 = v56;
            v59 = v155[-6];
            _Q2 = v59;
            v61 = v155[-5];
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 16), _Q7.f64[0]), *(float64x2_t *)(v53 + 136), _Q7, 1), *(float64x2_t *)(v53 + 256), v56.f64[0]), *(float64x2_t *)(v54 + 104), v56, 1), *(float64x2_t *)(v53 + 496), v59.f64[0]), *(float64x2_t *)(v53 + 616), v59,
                        1),
                      *(float64x2_t *)(v53 + 736),
                      v61.f64[0]),
                    *(float64x2_t *)(v53 + 856),
                    v61,
                    1);
            _Q3 = v61;
            v64 = v155[-4];
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v53, _Q7.f64[0]), *(float64x2_t *)(v53 + 120), _Q7, 1), *(float64x2_t *)(v53 + 240), v56.f64[0]), *(float64x2_t *)(v54 + 88), v56, 1), *(float64x2_t *)(v53 + 480), v59.f64[0]),
                            *(float64x2_t *)(v53 + 600),
                            v59,
                            1),
                          *(float64x2_t *)(v53 + 720),
                          v61.f64[0]),
                        *(float64x2_t *)(v53 + 840),
                        v61,
                        1),
                      *(float64x2_t *)(v53 + 960),
                      v64.f64[0]),
                    *(float64x2_t *)(v53 + 1080),
                    v64,
                    1);
            _Q4 = v64;
            v67 = v155[-3];
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, *(float64x2_t *)(v53 + 976), v64.f64[0]), *(float64x2_t *)(v53 + 1096), v64, 1), *(float64x2_t *)(v53 + 1216), v67.f64[0]), *(float64x2_t *)(v53 + 1336), v67, 1);
            _Q5 = v67;
            v70 = v155[-2];
            v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, *(float64x2_t *)(v53 + 1200), v67.f64[0]), *(float64x2_t *)(v53 + 1320), v67, 1), *(float64x2_t *)(v53 + 1440), v70.f64[0]);
            v67.f64[0] = v155[-1].f64[0];
            v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, *(float64x2_t *)(v53 + 1456), v70.f64[0]), *(float64x2_t *)(v53 + 1576), v70, 1), *(float64x2_t *)(v53 + 1696), v67.f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(v71, *(float64x2_t *)(v53 + 1560), v70, 1), *(float64x2_t *)(v53 + 1680), v67.f64[0]);
            a3[226] = v72;
            v73 = v155[-8];
            v74 = v155[-7];
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 32), v73.f64[0]), *(float64x2_t *)(v53 + 152), v73, 1), *(float64x2_t *)(v53 + 272), v74.f64[0]), *(float64x2_t *)(v54 + 120), v74, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 48), v73.f64[0]), *(float64x2_t *)(v53 + 168), v73, 1), *(float64x2_t *)(v53 + 288), v74.f64[0]), *(float64x2_t *)(v54 + 136), v74, 1);
            v77 = v155[-6];
            v78 = v155[-5];
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v76, *(float64x2_t *)(v53 + 528), v77.f64[0]), *(float64x2_t *)(v53 + 648), v77, 1), *(float64x2_t *)(v53 + 768), v78.f64[0]), *(float64x2_t *)(v53 + 888), v78, 1);
            v80 = v155[-4];
            v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v75, *(float64x2_t *)(v53 + 512), v77.f64[0]), *(float64x2_t *)(v53 + 632), v77, 1), *(float64x2_t *)(v53 + 752), v78.f64[0]), *(float64x2_t *)(v53 + 872), v78, 1), *(float64x2_t *)(v53 + 992), v80.f64[0]);
            v82 = v155[-3];
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v81, *(float64x2_t *)(v53 + 1112), v80, 1), *(float64x2_t *)(v53 + 1232), v82.f64[0]), *(float64x2_t *)(v53 + 1352), v82, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v79, *(float64x2_t *)(v53 + 1008), v80.f64[0]), *(float64x2_t *)(v53 + 1128), v80, 1), *(float64x2_t *)(v53 + 1248), v82.f64[0]), *(float64x2_t *)(v53 + 1368), v82, 1);
            v85 = v155[-2];
            v86 = v155[-1].f64[0];
            v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v84, *(float64x2_t *)(v53 + 1488), v85.f64[0]), *(float64x2_t *)(v53 + 1608), v85, 1), *(float64x2_t *)(v53 + 1728), v86);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v83, *(float64x2_t *)(v53 + 1472), v85.f64[0]), *(float64x2_t *)(v53 + 1592), v85, 1), *(float64x2_t *)(v53 + 1712), v86);
            a3[228] = v87;
            v88 = v155[-8];
            _Q16 = v155[-7];
            v90 = v155[-6];
            v91 = v155[-5];
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 64), v88.f64[0]), *(float64x2_t *)(v53 + 184), v88, 1), *(float64x2_t *)(v53 + 304), _Q16.f64[0]), *(float64x2_t *)(v54 + 152), _Q16, 1), *(float64x2_t *)(v53 + 544), v90.f64[0]), *(float64x2_t *)(v53 + 664), v90,
                        1),
                      *(float64x2_t *)(v53 + 784),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 904),
                    v91,
                    1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 80), v88.f64[0]), *(float64x2_t *)(v53 + 200), v88, 1), *(float64x2_t *)(v53 + 320), _Q16.f64[0]), *(float64x2_t *)(v54 + 168), _Q16, 1), *(float64x2_t *)(v53 + 560), v90.f64[0]), *(float64x2_t *)(v53 + 680), v90,
                        1),
                      *(float64x2_t *)(v53 + 800),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 920),
                    v91,
                    1);
            v94 = v155[-4];
            _Q18 = v155[-3];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v92, *(float64x2_t *)(v53 + 1024), v94.f64[0]), *(float64x2_t *)(v53 + 1144), v94, 1), *(float64x2_t *)(v53 + 1264), _Q18.f64[0]), *(float64x2_t *)(v53 + 1384), _Q18, 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, *(float64x2_t *)(v53 + 1040), v94.f64[0]), *(float64x2_t *)(v53 + 1160), v94, 1), *(float64x2_t *)(v53 + 1280), _Q18.f64[0]), *(float64x2_t *)(v53 + 1400), _Q18, 1);
            v98 = v155[-2];
            _Q18.f64[0] = v155[-1].f64[0];
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, *(float64x2_t *)(v53 + 1520), v98.f64[0]), *(float64x2_t *)(v53 + 1640), v98, 1), *(float64x2_t *)(v53 + 1760), _Q18.f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, *(float64x2_t *)(v53 + 1504), v98.f64[0]), *(float64x2_t *)(v53 + 1624), v98, 1), *(float64x2_t *)(v53 + 1744), _Q18.f64[0]);
            a3[230] = _Q0;
            _Q7.f64[0] = *(float64_t *)(v53 + 232);
            _Q16.f64[0] = *(float64_t *)(v53 + 472);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _Q16.f64[0] = *(float64_t *)(v53 + 712);
            _Q7.f64[0] = *(float64_t *)(v53 + 952);
            v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 96), _Q17.f64[0]), *(float64x2_t *)(v53 + 216), _Q17, 1), *(float64x2_t *)(v53 + 336), _Q1.f64[0]), *(float64x2_t *)(v54 + 184), _Q1, 1), *(float64x2_t *)(v53 + 576), _Q2.f64[0]), *(float64x2_t *)(v53 + 696), _Q2,
                         1),
                       *(float64x2_t *)(v53 + 816),
                       _Q3.f64[0]),
                     *(float64x2_t *)(v53 + 936),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1192);
            _Q18.f64[0] = *(float64_t *)(v53 + 1432);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1672);
            _Q16.f64[0] = v155[-1].f64[0];
            _Q17 = v155[-2];
            v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v53 + 1056), _Q4.f64[0]), *(float64x2_t *)(v53 + 1176), _Q4, 1), *(float64x2_t *)(v53 + 1296), _Q5.f64[0]), *(float64x2_t *)(v53 + 1416), _Q5, 1), *(float64x2_t *)(v53 + 1536), _Q17.f64[0]), *(float64x2_t *)(v53 + 1656), _Q17, 1),
                     *(float64x2_t *)(v53 + 1776),
                     _Q16.f64[0]);
            __asm { FMLA            D0, D3, V17.D[1] }
            a3[232].f64[0] = _Q0.f64[0] + *(double *)(v53 + 1792) * _Q16.f64[0];
            a3[231] = v106;
            break;
          case 1:
            v46.f64[0] = a3[232].f64[0];
            v47.f64[0] = v11[8].f64[0];
            v107 = vmulq_f64(a3[225], v11[1]);
            v108 = vmulq_f64(a3[231], v11[7]);
            v109 = vmulq_f64(a3[230], v11[6]);
            v110 = vmulq_f64(a3[229], v11[5]);
            v111 = vmulq_f64(a3[228], v11[4]);
            v112 = vmulq_f64(a3[226], v11[2]);
            a3[227] = vmulq_f64(a3[227], v11[3]);
            a3[228] = v111;
            a3[229] = v110;
            a3[230] = v109;
            a3[231] = v108;
            *v48 = v107;
            a3[226] = v112;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v46, v47);
            break;
          case 2:
            v44.f64[0] = v11[1].f64[0];
            v45.f64[0] = a3[232].f64[0];
            v113 = vmulq_n_f64(a3[231], v44.f64[0]);
            v114 = vmulq_n_f64(a3[230], v44.f64[0]);
            v115 = vmulq_n_f64(a3[229], v44.f64[0]);
            v116 = vmulq_n_f64(a3[228], v44.f64[0]);
            v117 = vmulq_n_f64(a3[227], v44.f64[0]);
            v118 = vmulq_n_f64(a3[226], v44.f64[0]);
            *v48 = vmulq_n_f64(*v48, v44.f64[0]);
            a3[226] = v118;
            a3[227] = v117;
            a3[228] = v116;
            a3[229] = v115;
            a3[230] = v114;
            a3[231] = v113;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v45, v44);
            break;
          case 4:
            v119 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(v157, v11);
            MEMORY[0x24BDAC7A8](v119);
            v120 = a3[226];
            v155[105] = *v48;
            v155[106] = v120;
            v121 = a3[228];
            v155[107] = a3[227];
            v155[108] = v121;
            v122 = a3[230];
            v155[109] = a3[229];
            v155[110] = v122;
            v155[112].f64[0] = a3[232].f64[0];
            v155[111] = a3[231];
            _Q17 = v155[105];
            _Q1 = v155[106];
            _Q2 = v155[107];
            _Q3 = v155[108];
            _Q4 = v155[109];
            _Q5 = v122;
            v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[1], v155[105].f64[0]), *(float64x2_t *)(v123 + 136), v155[105], 1), *(float64x2_t *)(v123 + 256), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 104),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 496),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 344),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 464),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 584),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 976),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 824),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 944),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1064),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1456),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1304),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1424),
                     v155[112].f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[0], v155[105].f64[0]), *(float64x2_t *)((char *)&v157[7] + 8), v155[105], 1), *(float64x2_t *)(v123 + 240), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 88),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 480),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 328),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 448),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 568),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 960),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 808),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 928),
                             v122.f64[0]),
                           *(float64x2_t *)(v124 + 1048),
                           v122,
                           1),
                         *(float64x2_t *)(v123 + 1440),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1288),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1408),
                     v155[112].f64[0]);
            a3[226] = v131;
            v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[3], v155[105].f64[0]), *(float64x2_t *)(v123 + 168), v155[105], 1), *(float64x2_t *)(v124 + 16), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 136),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 528),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 376),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 496),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 616),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 1008),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 856),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 976),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1096),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1488),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1336),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1456),
                     v155[112].f64[0]);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[2], v155[105].f64[0]), *(float64x2_t *)(v123 + 152), v155[105], 1), *(float64x2_t *)v124, v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 120),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 512),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 360),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 480),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 600),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 992),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 840),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 960),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1080),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1472),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1320),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1440),
                        v155[112].f64[0]);
            a3[228] = v132;
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[5], v155[105].f64[0]), *(float64x2_t *)(v123 + 200), v155[105], 1), *(float64x2_t *)(v124 + 48), v155[106].f64[0]),
                                          *(float64x2_t *)(v124 + 168),
                                          v155[106],
                                          1),
                                        *(float64x2_t *)(v123 + 560),
                                        v155[107].f64[0]),
                                      *(float64x2_t *)(v124 + 408),
                                      v155[107],
                                      1),
                                    *(float64x2_t *)(v124 + 528),
                                    v155[108].f64[0]),
                                  *(float64x2_t *)(v124 + 648),
                                  v155[108],
                                  1),
                                *(float64x2_t *)(v123 + 1040),
                                v155[109].f64[0]),
                              *(float64x2_t *)(v124 + 888),
                              v155[109],
                              1),
                            *(float64x2_t *)(v124 + 1008),
                            v155[110].f64[0]),
                          *(float64x2_t *)(v124 + 1128),
                          v155[110],
                          1),
                        *(float64x2_t *)(v123 + 1520),
                        v155[111].f64[0]),
                      *(float64x2_t *)(v124 + 1368),
                      v155[111],
                      1),
                    *(float64x2_t *)(v124 + 1488),
                    v155[112].f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[4], v155[105].f64[0]), *(float64x2_t *)(v123 + 184), v155[105], 1), *(float64x2_t *)(v124 + 32), v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 152),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 544),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 392),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 512),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 632),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 1024),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 872),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 992),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1112),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1504),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1352),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1472),
                        v155[112].f64[0]);
            a3[230] = _Q0;
            _D7 = *(_QWORD *)(v123 + 232);
            _D16 = *(_QWORD *)(v124 + 200);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _D16 = *(_QWORD *)(v124 + 440);
            _D7 = *(_QWORD *)(v124 + 680);
            v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[6], _Q17.f64[0]), *(float64x2_t *)(v123 + 216), _Q17, 1), *(float64x2_t *)(v124 + 64), _Q1.f64[0]), *(float64x2_t *)(v124 + 184), _Q1, 1), *(float64x2_t *)(v124 + 304), _Q2.f64[0]), *(float64x2_t *)(v124 + 424), _Q2, 1), *(float64x2_t *)(v124 + 544), _Q3.f64[0]), *(float64x2_t *)(v124 + 664),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 920);
            _D18 = *(_QWORD *)(v124 + 1160);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 1400);
            _Q17.f64[1] = v155[111].f64[1];
            __asm { FMLA            D0, D3, V17.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + *(double *)(v124 + 1520) * v155[112].f64[0];
            a3[231] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v138, *(float64x2_t *)(v124 + 784), _Q4.f64[0]), *(float64x2_t *)(v124 + 904), _Q4, 1), *(float64x2_t *)(v124 + 1024), _Q5.f64[0]), *(float64x2_t *)(v124 + 1144), _Q5, 1), *(float64x2_t *)(v124 + 1264), v155[111].f64[0]), *(float64x2_t *)(v124 + 1384), v155[111], 1),
                        *(float64x2_t *)(v124 + 1504),
                        v155[112].f64[0]);
            a3[232].f64[0] = _Q0.f64[0];
            break;
          default:
            break;
        }
      }
    }
    _Q2 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 7728) = *(_OWORD *)v6;
    _Q1 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 7744) = *(_OWORD *)(v6 + 16);
    _Q6 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 7760) = *(_OWORD *)(v6 + 32);
    _Q3 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 7776) = *(_OWORD *)(v6 + 48);
    *(_QWORD *)(a1 + 7840) = *(_QWORD *)(v6 + 112);
    _Q4 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7824) = *(_OWORD *)(v6 + 96);
    _Q5 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 7808) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7792) = *(_OWORD *)(v6 + 64);
    _D17 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D16, D17, V1.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D16, D1, V2.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q3 + 1);
    __asm { FMLA            D16, D1, V3.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q6 + 1);
    __asm { FMLA            D16, D1, V6.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q5 + 1);
    __asm { FMLA            D16, D1, V5.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q4 + 1);
    __asm { FMLA            D16, D1, V4.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v6 + 104);
    __asm { FMLA            D16, D1, V7.D[1] }
    v9 = *(double *)(a2 + 8) * (_D16 + *(double *)(v6 + 112) * *(double *)(v6 + 112));
  }
  *(double *)(a1 + 7968) = v9;
  return v8;
}

void sub_20F9B2A4C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6B820);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6B818);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6B820);
  }
  *a1 = qword_254A6B818;
}

void sub_20F9B2AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6B820);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6B820);
  _Unwind_Resume(a1);
}

void sub_20F9B2B40(_BYTE *a1, float64x2_t *a2, int a3)
{
  int v4;
  int v5;
  int v6;
  char v7;
  int v8;
  double **v9;
  double *v10[225];
  BOOL v11;
  _BYTE __dst[1808];

  switch(a3)
  {
    case 0:
      memcpy(&__dst[8], a2, 0x708uLL);
      v4 = sub_20E8BE940();
      *(_DWORD *)__dst = v4 != 0;
      a1[8] = v4 == 0;
      if (v4
        || (v9 = (double **)&__dst[8],
            v11 = 0,
            sub_20F4CE6EC((uint64_t)v10, &v9),
            v5 = sub_20E8BE990(),
            v11 = v5 == 0,
            a1[8] = v5 == 0,
            v5))
      {
        memset_pattern16(a1 + 16, &unk_210315390, 0x708uLL);
        a1[1816] = 0;
      }
      else
      {
        v9 = v10;
        sub_20F4CE6EC((uint64_t)(a1 + 16), &v9);
        a1[1816] = 1;
      }
      break;
    case 1:
      sub_20F4CEBA4((uint64_t)a1, a2);
      break;
    case 2:
      memcpy(&__dst[8], a2, 0x708uLL);
      v6 = sub_20E8BE940();
      *(_DWORD *)__dst = v6 != 0;
      a1[8] = v6 == 0;
      if (v6)
      {
        memset_pattern16(a1 + 16, &unk_210315390, 0x708uLL);
      }
      else
      {
        v10[0] = (double *)&__dst[8];
        sub_20F4D52BC((uint64_t)(a1 + 16), v10);
      }
      a1[1816] = 0;
      break;
    case 3:
      *(_QWORD *)__dst = a2;
      sub_20F4CE6EC((uint64_t)(a1 + 16), (_QWORD **)__dst);
      __dst[1800] = 0;
      memcpy(__dst, a1 + 16, 0x708uLL);
      v7 = 1;
      v8 = sub_20E8BE990();
      a1[8] = v8 == 0;
      if (v8)
      {
        memset_pattern16(a1 + 16, &unk_210315390, 0x708uLL);
        v7 = 0;
      }
      a1[1816] = v7;
      break;
    default:
      return;
  }
}

double sub_20F9B2D98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

float64x2_t sub_20F9B2DBC(uint64_t a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4)
{
  float64_t v4;
  float64x2_t result;

  a3.f64[0] = *(float64_t *)(a1 + 16);
  a4.f64[0] = a2[1].f64[0];
  *(_QWORD *)&v4 = *(_OWORD *)&vmulq_f64(a4, a3);
  result = vmulq_n_f64(*a2, a3.f64[0]);
  *a2 = result;
  a2[1].f64[0] = v4;
  return result;
}

BOOL sub_20F9B2DDC(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t a4, double a5, float64x2_t a6)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int v13;
  float64x2_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float64x2_t v22;
  int v23;
  float64x2_t v24;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v63;
  double v65;
  double v67;
  double v69;
  double v71;
  float64x2_t v73;
  double v79;
  float64x2_t v80;
  double v82;
  float64x2_t v83;
  double v85;
  float64x2_t v86;
  double v88;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  int64x2_t v108;
  int8x16_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int64x2_t v113;
  int8x16_t v114;
  int64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  double v131;
  double v133;
  double v135;
  double v137;
  double v139;
  float64x2_t v141;
  double v143;
  float64x2_t v144;
  double v146;
  float64x2_t v147;
  double v149;
  float64x2_t v150;
  double v152;
  _BOOL8 result;
  float64x2_t v159;
  float64x2_t v160;
  uint64_t v161;
  float64x2_t v162;
  double v163;

  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  a4.f64[0] = *(float64_t *)(v7 + 120);
  a6.f64[0] = *(float64_t *)(v8 + 120);
  v9 = vsubq_f64(*(float64x2_t *)(v7 + 104), *(float64x2_t *)(v8 + 104));
  *(float64x2_t *)(a1 + 80) = v9;
  v10 = a1 + 80;
  v11 = vsubq_f64(a4, a6);
  *(float64_t *)(a1 + 96) = v11.f64[0];
  a6.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 16) + 16);
  v12 = vmulq_n_f64(v9, a6.f64[0]);
  *(float64x2_t *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = *(_OWORD *)&vmulq_f64(v11, a6);
  v13 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(v8 + 20))
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v12.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 16) + 16);
      v16 = vnegq_f64((float64x2_t)*(unint64_t *)&v12.f64[0]);
      v17 = vdupq_n_s64(0x8000000000000000);
      *(int64x2_t *)(a3 + 120) = v17;
      *(int64x2_t *)(a3 + 88) = v17;
      *(_QWORD *)(a3 + 136) = *(_OWORD *)&vnegq_f64(v12);
      *(float64x2_t *)(a3 + 104) = v16;
      *(float64x2_t *)(a3 + 72) = v16;
    }
    if (*(_BYTE *)(v7 + 20))
    {
      *(_QWORD *)(a3 + 208) = 0;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      *(_OWORD *)(a3 + 216) = v18;
      *(_QWORD *)(a3 + 280) = v18;
      *(_OWORD *)(a3 + 248) = v18;
      *(_OWORD *)(a3 + 264) = 0u;
      *(_OWORD *)(a3 + 232) = 0u;
    }
    *(_BYTE *)(a1 + 112) = 1;
    v19 = *(_QWORD *)(a1 + 120);
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v10);
      v20 = *(_QWORD *)(a1 + 120);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v23 = v21;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 20))
      {
        switch(v21)
        {
          case 0:
            v24 = *(float64x2_t *)(v20 + 16);
            _D2 = *(_QWORD *)(v20 + 56);
            v26 = *(float64x2_t *)(v20 + 40);
            v27 = *(double *)(v20 + 80);
            v28 = *(float64x2_t *)(v20 + 64);
            goto LABEL_14;
          case 1:
            v31 = *(float64x2_t *)(a3 + 112);
            v30 = *(float64x2_t *)(a3 + 128);
            v33 = *(float64x2_t *)(a3 + 80);
            v32 = *(float64x2_t *)(a3 + 96);
            v35 = *(float64x2_t *)(a3 + 48);
            v34 = *(float64x2_t *)(a3 + 64);
            v36 = *(float64x2_t *)(a3 + 32);
            v22.f64[0] = *(float64_t *)(v20 + 32);
            v37 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v20 + 16));
            v38 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 16), v22);
            *(_QWORD *)&v39.f64[0] = v38.i64[0];
            v39.f64[1] = *(float64_t *)(a3 + 24);
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v39;
            v40 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v36, 8uLL);
            v39.f64[0] = *(float64_t *)(v20 + 32);
            v41 = vmulq_f64(*(float64x2_t *)(v20 + 16), v40);
            v22 = (float64x2_t)vzip1q_s64(v38, (int64x2_t)v41);
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            v42 = vextq_s8((int8x16_t)v41, (int8x16_t)vmulq_laneq_f64(v39, v36, 1), 8uLL);
            *(int8x16_t *)(a3 + 32) = v42;
            v41.f64[0] = *(float64_t *)(v20 + 32);
            v43 = *(float64x2_t *)(v20 + 16);
            v44 = vmulq_f64(v43, v35);
            v45 = vmulq_f64(v41, v34);
            v34.f64[0] = v45.f64[0];
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)(a3 + 64) = v34;
            v43.f64[0] = *(float64_t *)(v20 + 32);
            v46 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL));
            v47 = vextq_s8((int8x16_t)v46, (int8x16_t)vmulq_laneq_f64(v43, v33, 1), 8uLL);
            v48 = vzip1q_s64((int64x2_t)v45, v46);
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            v45.f64[0] = *(float64_t *)(v20 + 32);
            v49 = *(float64x2_t *)(v20 + 16);
            v50 = vmulq_f64(v49, v32);
            v51 = (int64x2_t)vmulq_f64(v45, v31);
            *(_QWORD *)&v31.f64[0] = v51.i64[0];
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            *(float64x2_t *)(a3 + 96) = v50;
            *(float64x2_t *)(a3 + 112) = v31;
            v49.f64[0] = *(float64_t *)(v20 + 32);
            v52 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v30, 8uLL));
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(float64x2_t *)(a3 + 96) = v50;
            *(int64x2_t *)(a3 + 112) = vzip1q_s64(v51, v52);
            *(int8x16_t *)(a3 + 128) = vextq_s8((int8x16_t)v52, (int8x16_t)vmulq_laneq_f64(v49, v30, 1), 8uLL);
            break;
          case 2:
            v53 = *(double *)(v20 + 16);
            v22 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v53);
            v54 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v53);
            v55 = vmulq_n_f64(*(float64x2_t *)(a3 + 96), v53);
            v56 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v53);
            v57 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v53);
            v58 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v53);
            v59 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v53);
            v60 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v53);
            *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v53);
            *(float64x2_t *)(a3 + 16) = v60;
            *(float64x2_t *)(a3 + 32) = v59;
            *(float64x2_t *)(a3 + 48) = v58;
            *(float64x2_t *)(a3 + 64) = v57;
            *(float64x2_t *)(a3 + 80) = v56;
            *(float64x2_t *)(a3 + 96) = v55;
            *(float64x2_t *)(a3 + 112) = v54;
            *(float64x2_t *)(a3 + 128) = v22;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(&v159, v20);
            v24 = v159;
            _D2 = v161;
            v26 = v160;
            v27 = v163;
            v28 = v162;
LABEL_14:
            v61 = *(double *)(a3 + 16);
            _Q18 = *(float64x2_t *)a3;
            v63 = *(double *)(a3 + 40);
            _Q20 = *(float64x2_t *)(a3 + 24);
            v65 = *(double *)(a3 + 64);
            _Q22 = *(float64x2_t *)(a3 + 48);
            v67 = *(double *)(a3 + 88);
            _Q24 = *(float64x2_t *)(a3 + 72);
            v69 = *(double *)(a3 + 112);
            _Q26 = *(float64x2_t *)(a3 + 96);
            v71 = *(double *)(a3 + 136);
            _Q16 = *(float64x2_t *)(a3 + 120);
            v73 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, *(double *)a3), v26, *(float64x2_t *)a3, 1), v28, v61);
            __asm { FMLA            D27, D2, V18.D[1] }
            v79 = _D27 + v27 * v61;
            v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q20.f64[0]), v26, _Q20, 1), v28, v63);
            __asm { FMLA            D27, D2, V20.D[1] }
            v82 = _D27 + v27 * v63;
            v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q22.f64[0]), v26, _Q22, 1), v28, v65);
            __asm { FMLA            D27, D2, V22.D[1] }
            v85 = _D27 + v27 * v65;
            v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q24.f64[0]), v26, _Q24, 1), v28, v67);
            __asm { FMLA            D27, D2, V24.D[1] }
            v88 = _D27 + v27 * v67;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)a3 = v73;
            *(double *)(a3 + 16) = v79;
            *(float64x2_t *)(a3 + 24) = v80;
            *(double *)(a3 + 40) = v82;
            *(float64x2_t *)(a3 + 48) = v83;
            *(double *)(a3 + 64) = v85;
            *(float64x2_t *)(a3 + 72) = v86;
            *(double *)(a3 + 88) = v88;
            *(float64x2_t *)(a3 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q26.f64[0]), v26, _Q26, 1), v28, v69);
            *(double *)(a3 + 112) = _D27 + v27 * v69;
            *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q16.f64[0]), v26, _Q16, 1), v28, v71);
            *(double *)(a3 + 136) = _D1 + v27 * v71;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 20))
      {
        switch(v23)
        {
          case 0:
            v91 = *(float64x2_t *)(v20 + 16);
            _D2 = *(_QWORD *)(v20 + 56);
            v93 = *(float64x2_t *)(v20 + 40);
            v94 = *(double *)(v20 + 80);
            v95 = *(float64x2_t *)(v20 + 64);
            goto LABEL_21;
          case 1:
            v97 = *(float64x2_t *)(a3 + 256);
            v96 = *(float64x2_t *)(a3 + 272);
            v99 = *(float64x2_t *)(a3 + 224);
            v98 = *(float64x2_t *)(a3 + 240);
            v101 = *(float64x2_t *)(a3 + 192);
            v100 = *(float64x2_t *)(a3 + 208);
            v102 = *(float64x2_t *)(a3 + 176);
            v22.f64[0] = *(float64_t *)(v20 + 32);
            v103 = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v20 + 16));
            v104 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 160), v22);
            *(_QWORD *)&v105.f64[0] = v104.i64[0];
            v105.f64[1] = *(float64_t *)(a3 + 168);
            *(float64x2_t *)(a3 + 144) = v103;
            *(float64x2_t *)(a3 + 160) = v105;
            v106 = (float64x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v102, 8uLL);
            v105.f64[0] = *(float64_t *)(v20 + 32);
            v107 = vmulq_f64(*(float64x2_t *)(v20 + 16), v106);
            v108 = vzip1q_s64(v104, (int64x2_t)v107);
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            v109 = vextq_s8((int8x16_t)v107, (int8x16_t)vmulq_laneq_f64(v105, v102, 1), 8uLL);
            *(int8x16_t *)(a3 + 176) = v109;
            v107.f64[0] = *(float64_t *)(v20 + 32);
            v110 = *(float64x2_t *)(v20 + 16);
            v111 = vmulq_f64(v110, v101);
            v112 = vmulq_f64(v107, v100);
            v100.f64[0] = v112.f64[0];
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 208) = v100;
            v110.f64[0] = *(float64_t *)(v20 + 32);
            v113 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v99, 8uLL));
            v114 = vextq_s8((int8x16_t)v113, (int8x16_t)vmulq_laneq_f64(v110, v99, 1), 8uLL);
            v115 = vzip1q_s64((int64x2_t)v112, v113);
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            v112.f64[0] = *(float64_t *)(v20 + 32);
            v116 = *(float64x2_t *)(v20 + 16);
            v117 = vmulq_f64(v116, v98);
            v118 = (int64x2_t)vmulq_f64(v112, v97);
            *(_QWORD *)&v97.f64[0] = v118.i64[0];
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            *(float64x2_t *)(a3 + 240) = v117;
            *(float64x2_t *)(a3 + 256) = v97;
            v116.f64[0] = *(float64_t *)(v20 + 32);
            v119 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v96, 8uLL));
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(float64x2_t *)(a3 + 240) = v117;
            *(int64x2_t *)(a3 + 256) = vzip1q_s64(v118, v119);
            *(int8x16_t *)(a3 + 272) = vextq_s8((int8x16_t)v119, (int8x16_t)vmulq_laneq_f64(v116, v96, 1), 8uLL);
            break;
          case 2:
            v120 = *(double *)(v20 + 16);
            v121 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v120);
            v122 = vmulq_n_f64(*(float64x2_t *)(a3 + 256), v120);
            v123 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v120);
            v124 = vmulq_n_f64(*(float64x2_t *)(a3 + 224), v120);
            v125 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v120);
            v126 = vmulq_n_f64(*(float64x2_t *)(a3 + 192), v120);
            v127 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v120);
            v128 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v120);
            *(float64x2_t *)(a3 + 144) = vmulq_n_f64(*(float64x2_t *)(a3 + 144), v120);
            *(float64x2_t *)(a3 + 160) = v128;
            *(float64x2_t *)(a3 + 176) = v127;
            *(float64x2_t *)(a3 + 192) = v126;
            *(float64x2_t *)(a3 + 208) = v125;
            *(float64x2_t *)(a3 + 224) = v124;
            *(float64x2_t *)(a3 + 240) = v123;
            *(float64x2_t *)(a3 + 256) = v122;
            *(float64x2_t *)(a3 + 272) = v121;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(&v159, v20);
            v91 = v159;
            _D2 = v161;
            v93 = v160;
            v94 = v163;
            v95 = v162;
LABEL_21:
            v129 = *(double *)(a3 + 160);
            _Q18 = *(float64x2_t *)(a3 + 144);
            v131 = *(double *)(a3 + 184);
            _Q20 = *(float64x2_t *)(a3 + 168);
            v133 = *(double *)(a3 + 208);
            _Q22 = *(float64x2_t *)(a3 + 192);
            v135 = *(double *)(a3 + 232);
            _Q24 = *(float64x2_t *)(a3 + 216);
            v137 = *(double *)(a3 + 256);
            _Q26 = *(float64x2_t *)(a3 + 240);
            v139 = *(double *)(a3 + 280);
            _Q16 = *(float64x2_t *)(a3 + 264);
            v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q18.f64[0]), v93, _Q18, 1), v95, v129);
            __asm { FMLA            D27, D2, V18.D[1] }
            v143 = _D27 + v94 * v129;
            v144 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q20.f64[0]), v93, _Q20, 1), v95, v131);
            __asm { FMLA            D27, D2, V20.D[1] }
            v146 = _D27 + v94 * v131;
            v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q22.f64[0]), v93, _Q22, 1), v95, v133);
            __asm { FMLA            D27, D2, V22.D[1] }
            v149 = _D27 + v94 * v133;
            v150 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q24.f64[0]), v93, _Q24, 1), v95, v135);
            __asm { FMLA            D27, D2, V24.D[1] }
            v152 = _D27 + v94 * v135;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)(a3 + 144) = v141;
            *(double *)(a3 + 160) = v143;
            *(float64x2_t *)(a3 + 168) = v144;
            *(double *)(a3 + 184) = v146;
            *(float64x2_t *)(a3 + 192) = v147;
            *(double *)(a3 + 208) = v149;
            *(float64x2_t *)(a3 + 216) = v150;
            *(double *)(a3 + 232) = v152;
            *(float64x2_t *)(a3 + 240) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q26.f64[0]), v93, _Q26, 1), v95, v137);
            *(double *)(a3 + 256) = _D27 + v94 * v137;
            *(float64x2_t *)(a3 + 264) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q16.f64[0]), v93, _Q16, 1), v95, v139);
            *(double *)(a3 + 280) = _D1 + v94 * v139;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v10 + 16);
    _Q1 = *(_OWORD *)(a1 + 80);
    _D3 = *(_QWORD *)(a1 + 88);
    __asm { FMLA            D2, D3, V1.D[1] }
    v29 = *(double *)(a2 + 8) * (_D2 + *(double *)(a1 + 96) * *(double *)(a1 + 96));
  }
  else
  {
    *(_BYTE *)(a1 + 112) = 0;
    v29 = 0.0;
  }
  result = v13 != 0;
  *(double *)(a1 + 104) = v29;
  return result;
}

uint64_t sub_20F9B34D0(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4)
{
  _OWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v103;
  float64x2_t v104;

  v7 = (_OWORD *)(a1 + 240);
  v8 = sub_20FC81820(a1, (uint64_t *)(a1 + 192), a1 + 240, a3, (double **)(a4 + 1560));
  *(_BYTE *)(a1 + 264) = v8;
  v9 = 0.0;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 272);
    if (v10)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v10 + 24))(v10, v7, 0.0);
      v11 = *(float64x2_t **)(a1 + 272);
      v12 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      switch(v12)
      {
        case 0:
          v13 = v11[1];
          v14 = v11[2];
          goto LABEL_8;
        case 1:
          v15 = a3[1];
          v16 = vmulq_f64(*a3, v11[1]);
          v18 = a3[4];
          v17 = a3[5];
          v20 = a3[2];
          v19 = a3[3];
          *a3 = v16;
          v21 = vmulq_f64(v15, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          v22 = vmulq_f64(v20, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          v23 = vmulq_f64(v19, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          a3[3] = v23;
          v24 = vmulq_f64(v18, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          a3[3] = v23;
          a3[4] = v24;
          v25 = vmulq_f64(v17, v11[1]);
          a3[2] = v22;
          a3[3] = v23;
          *a3 = v16;
          a3[1] = v21;
          a3[4] = v24;
          a3[5] = v25;
          break;
        case 2:
          v26 = v11[1].f64[0];
          v27 = vmulq_n_f64(a3[5], v26);
          v28 = vmulq_n_f64(a3[4], v26);
          v29 = vmulq_n_f64(a3[3], v26);
          v30 = vmulq_n_f64(a3[2], v26);
          v31 = vmulq_n_f64(a3[1], v26);
          *a3 = vmulq_n_f64(*a3, v26);
          a3[1] = v31;
          a3[2] = v30;
          a3[3] = v29;
          a3[4] = v28;
          a3[5] = v27;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v13 = v103;
          v14 = v104;
LABEL_8:
          v32 = a3[5];
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[1].f64[0]), v14, a3[1], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[2].f64[0]), v14, a3[2], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[3].f64[0]), v14, a3[3], 1);
          v36 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[4].f64[0]), v14, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3->f64[0]), v14, *a3, 1);
          a3[1] = v33;
          a3[2] = v34;
          a3[3] = v35;
          a3[4] = v36;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v13, v32.f64[0]), v14, v32, 1);
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v37 = v11[1];
          v38 = v11[2];
          goto LABEL_14;
        case 1:
          v39 = a3[7];
          v40 = vmulq_f64(a3[6], v11[1]);
          v42 = a3[10];
          v41 = a3[11];
          v44 = a3[8];
          v43 = a3[9];
          a3[6] = v40;
          v45 = vmulq_f64(v39, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          v46 = vmulq_f64(v44, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          v47 = vmulq_f64(v43, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          a3[9] = v47;
          v48 = vmulq_f64(v42, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          a3[9] = v47;
          a3[10] = v48;
          v49 = vmulq_f64(v41, v11[1]);
          a3[8] = v46;
          a3[9] = v47;
          a3[6] = v40;
          a3[7] = v45;
          a3[10] = v48;
          a3[11] = v49;
          break;
        case 2:
          v50 = v11[1].f64[0];
          v51 = vmulq_n_f64(a3[11], v50);
          v52 = vmulq_n_f64(a3[10], v50);
          v53 = vmulq_n_f64(a3[9], v50);
          v54 = vmulq_n_f64(a3[8], v50);
          v55 = vmulq_n_f64(a3[7], v50);
          a3[6] = vmulq_n_f64(a3[6], v50);
          a3[7] = v55;
          a3[8] = v54;
          a3[9] = v53;
          a3[10] = v52;
          a3[11] = v51;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v37 = v103;
          v38 = v104;
LABEL_14:
          v56 = a3[11];
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[7].f64[0]), v38, a3[7], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[8].f64[0]), v38, a3[8], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[9].f64[0]), v38, a3[9], 1);
          v60 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[10].f64[0]), v38, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[6].f64[0]), v38, a3[6], 1);
          a3[7] = v57;
          a3[8] = v58;
          a3[9] = v59;
          a3[10] = v60;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v37, v56.f64[0]), v38, v56, 1);
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v61 = v11[1];
          v62 = v11[2];
          goto LABEL_20;
        case 1:
          v63 = a3[13];
          v64 = vmulq_f64(a3[12], v11[1]);
          v66 = a3[14];
          v65 = a3[15];
          a3[12] = v64;
          v67 = vmulq_f64(v63, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          v68 = vmulq_f64(v66, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          a3[14] = v68;
          v69 = vmulq_f64(v65, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          a3[14] = v68;
          a3[15] = v69;
          break;
        case 2:
          v70 = v11[1].f64[0];
          v71 = vmulq_n_f64(a3[13], v70);
          v72 = vmulq_n_f64(a3[12], v70);
          v73 = vmulq_n_f64(a3[15], v70);
          a3[14] = vmulq_n_f64(a3[14], v70);
          a3[15] = v73;
          a3[12] = v72;
          a3[13] = v71;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v61 = v103;
          v62 = v104;
LABEL_20:
          v74 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[12].f64[0]), v62, a3[12], 1);
          v75 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[13].f64[0]), v62, a3[13], 1);
          v76 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[14].f64[0]), v62, a3[14], 1);
          v77 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[15].f64[0]), v62, a3[15], 1);
          a3[12] = v74;
          a3[13] = v75;
          a3[14] = v76;
          a3[15] = v77;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 216) + 20))
      {
        switch(v12)
        {
          case 0:
            v78 = v11[1];
            v79 = v11[2];
            goto LABEL_27;
          case 1:
            v80 = a3[17];
            v81 = vmulq_f64(a3[16], v11[1]);
            v83 = a3[18];
            v82 = a3[19];
            a3[16] = v81;
            v84 = vmulq_f64(v80, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            v85 = vmulq_f64(v83, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            a3[18] = v85;
            v86 = vmulq_f64(v82, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            a3[18] = v85;
            a3[19] = v86;
            break;
          case 2:
            v87 = v11[1].f64[0];
            v88 = vmulq_n_f64(a3[17], v87);
            v89 = vmulq_n_f64(a3[16], v87);
            v90 = vmulq_n_f64(a3[19], v87);
            a3[18] = vmulq_n_f64(a3[18], v87);
            a3[19] = v90;
            a3[16] = v89;
            a3[17] = v88;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
            v78 = v103;
            v79 = v104;
LABEL_27:
            v91 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[16].f64[0]), v79, a3[16], 1);
            v92 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[17].f64[0]), v79, a3[17], 1);
            v93 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[18].f64[0]), v79, a3[18], 1);
            v94 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[19].f64[0]), v79, a3[19], 1);
            a3[16] = v91;
            a3[17] = v92;
            a3[18] = v93;
            a3[19] = v94;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 224) = *v7;
    _Q0 = *(_OWORD *)(a1 + 240);
    _D2 = *(_QWORD *)(a1 + 248);
    __asm { FMLA            D1, D2, V0.D[1] }
    v9 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 256) = v9;
  return v8;
}

BOOL sub_20F9B39E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int64x2_t v40;
  int8x16_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v51;
  double v53;
  double v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v67;
  float64x2_t v68;
  double v70;
  float64x2_t v71;
  double v73;
  float64x2_t v74;
  double v76;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int8x16_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  int8x16_t v103;
  double v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  double v113;
  double v115;
  double v117;
  double v119;
  double v121;
  float64x2_t v123;
  double v125;
  float64x2_t v126;
  double v128;
  float64x2_t v129;
  double v131;
  float64x2_t v132;
  double v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  int64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  int8x16_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  int64x2_t v162;
  int8x16_t v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v173;
  double v175;
  double v177;
  double v179;
  double v181;
  float64x2_t v183;
  double v185;
  float64x2_t v186;
  double v188;
  float64x2_t v189;
  double v191;
  float64x2_t v192;
  double v194;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  int64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  int8x16_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  int64x2_t v220;
  int8x16_t v221;
  double v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double v229;
  double v231;
  double v233;
  double v235;
  double v237;
  double v239;
  float64x2_t v241;
  double v243;
  float64x2_t v244;
  double v246;
  float64x2_t v247;
  double v249;
  float64x2_t v250;
  double v252;
  float64x2_t *v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  int64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  int64x2_t v270;
  int8x16_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  int64x2_t v280;
  int8x16_t v281;
  double v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  double v290;
  double v292;
  double v294;
  double v296;
  double v298;
  double v300;
  float64x2_t v302;
  double v304;
  float64x2_t v305;
  double v307;
  float64x2_t v308;
  double v310;
  float64x2_t v311;
  double v313;
  float64x2_t *v316;
  int v317;
  float64x2_t v318;
  float64x2_t v320;
  double v321;
  float64x2_t v322;
  float64x2_t v323;
  double v324;
  float64x2_t v331;
  float64x2_t v332;
  float64_t v333;
  float64x2_t v334;
  float64_t v335;

  v6 = a1 + 288;
  v7 = sub_20F9B4988(a1);
  *(_BYTE *)(a1 + 320) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 328);
    if (v9)
    {
      v10 = (float64x2_t *)(a3 + 264);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v11 = *(_QWORD *)(a1 + 328);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      switch(v12)
      {
        case 0:
          v17 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v18 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v19 = *(float64x2_t *)(v11 + 64);
          goto LABEL_8;
        case 1:
          v21 = *(float64x2_t *)(a3 + 112);
          v20 = *(float64x2_t *)(a3 + 128);
          v23 = *(float64x2_t *)(a3 + 80);
          v22 = *(float64x2_t *)(a3 + 96);
          v25 = *(float64x2_t *)(a3 + 48);
          v24 = *(float64x2_t *)(a3 + 64);
          v26 = *(float64x2_t *)(a3 + 32);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v11 + 16));
          v27 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 16), v16);
          *(_QWORD *)&v28.f64[0] = v27.i64[0];
          v28.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v28;
          v29 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v26, 8uLL);
          v28.f64[0] = *(float64_t *)(v11 + 32);
          v30 = vmulq_f64(*(float64x2_t *)(v11 + 16), v29);
          v16 = (float64x2_t)vzip1q_s64(v27, (int64x2_t)v30);
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          v31 = vextq_s8((int8x16_t)v30, (int8x16_t)vmulq_laneq_f64(v28, v26, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v31;
          v30.f64[0] = *(float64_t *)(v11 + 32);
          v32 = *(float64x2_t *)(v11 + 16);
          v33 = vmulq_f64(v32, v25);
          v34 = vmulq_f64(v30, v24);
          v24.f64[0] = v34.f64[0];
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)(a3 + 64) = v24;
          v32.f64[0] = *(float64_t *)(v11 + 32);
          v35 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 8uLL));
          v36 = vextq_s8(v35, (int8x16_t)vmulq_laneq_f64(v32, v23, 1), 8uLL);
          v37 = vzip1q_s64((int64x2_t)v34, (int64x2_t)v35);
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          v34.f64[0] = *(float64_t *)(v11 + 32);
          v38 = *(float64x2_t *)(v11 + 16);
          v39 = vmulq_f64(v38, v22);
          v40 = (int64x2_t)vmulq_f64(v34, v21);
          *(_QWORD *)&v21.f64[0] = v40.i64[0];
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          *(float64x2_t *)(a3 + 96) = v39;
          *(float64x2_t *)(a3 + 112) = v21;
          v38.f64[0] = *(float64_t *)(v11 + 32);
          v41 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 8uLL));
          v13 = (float64x2_t)vextq_s8(v41, (int8x16_t)vmulq_laneq_f64(v38, v20, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v40, (int64x2_t)v41);
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(float64x2_t *)(a3 + 96) = v39;
          *(float64x2_t *)(a3 + 112) = _Q2;
          *(float64x2_t *)(a3 + 128) = v13;
          break;
        case 2:
          v42 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)a3;
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v42);
          v43 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v42);
          v44 = vmulq_n_f64(*(float64x2_t *)(a3 + 96), v42);
          v45 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v42);
          v46 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v42);
          v47 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v42);
          v48 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v42);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v42);
          v13 = vmulq_n_f64(*(float64x2_t *)a3, v42);
          *(float64x2_t *)a3 = v13;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v48;
          *(float64x2_t *)(a3 + 48) = v47;
          *(float64x2_t *)(a3 + 64) = v46;
          *(float64x2_t *)(a3 + 80) = v45;
          *(float64x2_t *)(a3 + 96) = v44;
          *(float64x2_t *)(a3 + 112) = v43;
          *(float64x2_t *)(a3 + 128) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v17 = v331;
          _Q2.f64[0] = v333;
          v18 = v332;
          v13.f64[0] = v335;
          v19 = v334;
LABEL_8:
          v49 = *(double *)(a3 + 16);
          _Q18 = *(float64x2_t *)a3;
          v51 = *(double *)(a3 + 40);
          _Q20 = *(float64x2_t *)(a3 + 24);
          v53 = *(double *)(a3 + 64);
          _Q22 = *(float64x2_t *)(a3 + 48);
          v55 = *(double *)(a3 + 88);
          _Q24 = *(float64x2_t *)(a3 + 72);
          v57 = *(double *)(a3 + 112);
          _Q26 = *(float64x2_t *)(a3 + 96);
          v59 = *(double *)(a3 + 136);
          _Q16 = *(float64x2_t *)(a3 + 120);
          v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, *(double *)a3), v18, *(float64x2_t *)a3, 1), v19, v49);
          __asm { FMLA            D27, D2, V18.D[1] }
          v67 = _D27 + v13.f64[0] * v49;
          v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q20.f64[0]), v18, _Q20, 1), v19, v51);
          __asm { FMLA            D27, D2, V20.D[1] }
          v70 = _D27 + v13.f64[0] * v51;
          v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q22.f64[0]), v18, _Q22, 1), v19, v53);
          __asm { FMLA            D27, D2, V22.D[1] }
          v73 = _D27 + v13.f64[0] * v53;
          v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q24.f64[0]), v18, _Q24, 1), v19, v55);
          __asm { FMLA            D27, D2, V24.D[1] }
          v76 = _D27 + v13.f64[0] * v55;
          __asm
          {
            FMLA            D27, D2, V26.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)a3 = v61;
          *(double *)(a3 + 16) = v67;
          *(float64x2_t *)(a3 + 24) = v68;
          *(double *)(a3 + 40) = v70;
          *(float64x2_t *)(a3 + 48) = v71;
          *(double *)(a3 + 64) = v73;
          *(float64x2_t *)(a3 + 72) = v74;
          *(double *)(a3 + 88) = v76;
          *(float64x2_t *)(a3 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q26.f64[0]), v18, _Q26, 1), v19, v57);
          *(double *)(a3 + 112) = _D27 + v13.f64[0] * v57;
          *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q16.f64[0]), v18, _Q16, 1), v19, v59);
          *(double *)(a3 + 136) = _D1 + v13.f64[0] * v59;
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v79 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v80 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v81 = *(float64x2_t *)(v11 + 64);
          goto LABEL_14;
        case 1:
          v83 = *(float64x2_t *)(a3 + 256);
          v82 = *(float64x2_t *)(a3 + 272);
          v85 = *(float64x2_t *)(a3 + 224);
          v84 = *(float64x2_t *)(a3 + 240);
          v87 = *(float64x2_t *)(a3 + 192);
          v86 = *(float64x2_t *)(a3 + 208);
          v88 = *(float64x2_t *)(a3 + 176);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v11 + 16));
          v89 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 160), v16);
          *(_QWORD *)&v90.f64[0] = v89.i64[0];
          v90.f64[1] = *(float64_t *)(a3 + 168);
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v90;
          v91 = (float64x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v88, 8uLL);
          v90.f64[0] = *(float64_t *)(v11 + 32);
          v92 = vmulq_f64(*(float64x2_t *)(v11 + 16), v91);
          v16 = (float64x2_t)vzip1q_s64(v89, (int64x2_t)v92);
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          v93 = vextq_s8((int8x16_t)v92, (int8x16_t)vmulq_laneq_f64(v90, v88, 1), 8uLL);
          *(int8x16_t *)(a3 + 176) = v93;
          v92.f64[0] = *(float64_t *)(v11 + 32);
          v94 = *(float64x2_t *)(v11 + 16);
          v95 = vmulq_f64(v94, v87);
          v96 = vmulq_f64(v92, v86);
          v86.f64[0] = v96.f64[0];
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 208) = v86;
          v94.f64[0] = *(float64_t *)(v11 + 32);
          v97 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v85, 8uLL));
          v98 = vextq_s8(v97, (int8x16_t)vmulq_laneq_f64(v94, v85, 1), 8uLL);
          v99 = vzip1q_s64((int64x2_t)v96, (int64x2_t)v97);
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          v96.f64[0] = *(float64_t *)(v11 + 32);
          v100 = *(float64x2_t *)(v11 + 16);
          v101 = vmulq_f64(v100, v84);
          v102 = (int64x2_t)vmulq_f64(v96, v83);
          *(_QWORD *)&v83.f64[0] = v102.i64[0];
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          *(float64x2_t *)(a3 + 240) = v101;
          *(float64x2_t *)(a3 + 256) = v83;
          v100.f64[0] = *(float64_t *)(v11 + 32);
          v103 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v82, 8uLL));
          v13 = (float64x2_t)vextq_s8(v103, (int8x16_t)vmulq_laneq_f64(v100, v82, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v102, (int64x2_t)v103);
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(float64x2_t *)(a3 + 240) = v101;
          *(float64x2_t *)(a3 + 256) = _Q2;
          *(float64x2_t *)(a3 + 272) = v13;
          break;
        case 2:
          v104 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)(a3 + 144);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v104);
          v105 = vmulq_n_f64(*(float64x2_t *)(a3 + 256), v104);
          v106 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v104);
          v107 = vmulq_n_f64(*(float64x2_t *)(a3 + 224), v104);
          v108 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v104);
          v109 = vmulq_n_f64(*(float64x2_t *)(a3 + 192), v104);
          v110 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v104);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v104);
          v13 = vmulq_n_f64(v14, v104);
          *(float64x2_t *)(a3 + 144) = v13;
          *(float64x2_t *)(a3 + 160) = _Q2;
          *(float64x2_t *)(a3 + 176) = v110;
          *(float64x2_t *)(a3 + 192) = v109;
          *(float64x2_t *)(a3 + 208) = v108;
          *(float64x2_t *)(a3 + 224) = v107;
          *(float64x2_t *)(a3 + 240) = v106;
          *(float64x2_t *)(a3 + 256) = v105;
          *(float64x2_t *)(a3 + 272) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v79 = v331;
          _Q2.f64[0] = v333;
          v80 = v332;
          v13.f64[0] = v335;
          v81 = v334;
LABEL_14:
          v111 = *(double *)(a3 + 160);
          _Q18 = *(float64x2_t *)(a3 + 144);
          v113 = *(double *)(a3 + 184);
          _Q20 = *(float64x2_t *)(a3 + 168);
          v115 = *(double *)(a3 + 208);
          _Q22 = *(float64x2_t *)(a3 + 192);
          v117 = *(double *)(a3 + 232);
          _Q24 = *(float64x2_t *)(a3 + 216);
          v119 = *(double *)(a3 + 256);
          _Q26 = *(float64x2_t *)(a3 + 240);
          v121 = *(double *)(a3 + 280);
          _Q16 = *v10;
          v123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q18.f64[0]), v80, _Q18, 1), v81, v111);
          __asm { FMLA            D27, D2, V18.D[1] }
          v125 = _D27 + v13.f64[0] * v111;
          v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q20.f64[0]), v80, _Q20, 1), v81, v113);
          __asm { FMLA            D27, D2, V20.D[1] }
          v128 = _D27 + v13.f64[0] * v113;
          v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q22.f64[0]), v80, _Q22, 1), v81, v115);
          __asm { FMLA            D27, D2, V22.D[1] }
          v131 = _D27 + v13.f64[0] * v115;
          v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q24.f64[0]), v80, _Q24, 1), v81, v117);
          __asm { FMLA            D27, D2, V24.D[1] }
          v134 = _D27 + v13.f64[0] * v117;
          v135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q26.f64[0]), v80, _Q26, 1), v81, v119);
          __asm { FMLA            D27, D2, V26.D[1] }
          v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v10->f64[0]), v80, *v10, 1), v81, v121);
          __asm { FMLA            D1, D2, V16.D[1] }
          *(float64x2_t *)(a3 + 144) = v123;
          *(double *)(a3 + 160) = v125;
          *(float64x2_t *)(a3 + 168) = v126;
          *(double *)(a3 + 184) = v128;
          *(float64x2_t *)(a3 + 192) = v129;
          *(double *)(a3 + 208) = v131;
          *(float64x2_t *)(a3 + 216) = v132;
          *(double *)(a3 + 232) = v134;
          *(float64x2_t *)(a3 + 240) = v135;
          *(double *)(a3 + 256) = _D27 + v13.f64[0] * v119;
          *v10 = v137;
          *(double *)(a3 + 280) = _D1 + v13.f64[0] * v121;
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v139 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v140 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v141 = *(float64x2_t *)(v11 + 64);
          goto LABEL_20;
        case 1:
          v142 = *(float64x2_t *)(a3 + 416);
          v143 = *(float64x2_t *)(a3 + 400);
          v144 = *(float64x2_t *)(a3 + 384);
          v145 = *(float64x2_t *)(a3 + 368);
          v146 = *(float64x2_t *)(a3 + 352);
          v147 = *(float64x2_t *)(a3 + 336);
          v148 = *(float64x2_t *)(a3 + 320);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)(a3 + 288), *(float64x2_t *)(v11 + 16));
          v149 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 304), v16);
          *(_QWORD *)&v150.f64[0] = v149.i64[0];
          v150.f64[1] = *(float64_t *)(a3 + 312);
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 304) = v150;
          v151 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v148, 8uLL);
          v150.f64[0] = *(float64_t *)(v11 + 32);
          v152 = vmulq_f64(*(float64x2_t *)(v11 + 16), v151);
          v16 = (float64x2_t)vzip1q_s64(v149, (int64x2_t)v152);
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 304) = v16;
          v153 = vextq_s8((int8x16_t)v152, (int8x16_t)vmulq_laneq_f64(v150, v148, 1), 8uLL);
          *(int8x16_t *)(a3 + 320) = v153;
          v152.f64[0] = *(float64_t *)(v11 + 32);
          v154 = *(float64x2_t *)(v11 + 16);
          v155 = vmulq_f64(v154, v147);
          v156 = vmulq_f64(v152, v146);
          v146.f64[0] = v156.f64[0];
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 336) = v155;
          *(float64x2_t *)(a3 + 352) = v146;
          v154.f64[0] = *(float64_t *)(v11 + 32);
          v157 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v146, (int8x16_t)v145, 8uLL));
          v158 = vextq_s8(v157, (int8x16_t)vmulq_laneq_f64(v154, v145, 1), 8uLL);
          v159 = vzip1q_s64((int64x2_t)v156, (int64x2_t)v157);
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(int64x2_t *)(a3 + 352) = v159;
          *(int8x16_t *)(a3 + 368) = v158;
          v156.f64[0] = *(float64_t *)(v11 + 32);
          v160 = *(float64x2_t *)(v11 + 16);
          v161 = vmulq_f64(v160, v144);
          v162 = (int64x2_t)vmulq_f64(v156, v143);
          *(_QWORD *)&v143.f64[0] = v162.i64[0];
          *(int8x16_t *)(a3 + 368) = v158;
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(int64x2_t *)(a3 + 352) = v159;
          *(float64x2_t *)(a3 + 384) = v161;
          *(float64x2_t *)(a3 + 400) = v143;
          v160.f64[0] = *(float64_t *)(v11 + 32);
          v163 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v142, 8uLL));
          v13 = (float64x2_t)vextq_s8(v163, (int8x16_t)vmulq_laneq_f64(v160, v142, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v162, (int64x2_t)v163);
          *(int64x2_t *)(a3 + 352) = v159;
          *(float64x2_t *)(a3 + 384) = v161;
          *(int8x16_t *)(a3 + 368) = v158;
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 400) = _Q2;
          *(float64x2_t *)(a3 + 416) = v13;
          break;
        case 2:
          v164 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)(a3 + 288);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 416), v164);
          v165 = vmulq_n_f64(*(float64x2_t *)(a3 + 400), v164);
          v166 = vmulq_n_f64(*(float64x2_t *)(a3 + 384), v164);
          v167 = vmulq_n_f64(*(float64x2_t *)(a3 + 368), v164);
          v168 = vmulq_n_f64(*(float64x2_t *)(a3 + 352), v164);
          v169 = vmulq_n_f64(*(float64x2_t *)(a3 + 336), v164);
          v170 = vmulq_n_f64(*(float64x2_t *)(a3 + 320), v164);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 304), v164);
          v13 = vmulq_n_f64(v14, v164);
          *(float64x2_t *)(a3 + 288) = v13;
          *(float64x2_t *)(a3 + 304) = _Q2;
          *(float64x2_t *)(a3 + 320) = v170;
          *(float64x2_t *)(a3 + 336) = v169;
          *(float64x2_t *)(a3 + 352) = v168;
          *(float64x2_t *)(a3 + 368) = v167;
          *(float64x2_t *)(a3 + 384) = v166;
          *(float64x2_t *)(a3 + 400) = v165;
          *(float64x2_t *)(a3 + 416) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v139 = v331;
          _Q2.f64[0] = v333;
          v140 = v332;
          v13.f64[0] = v335;
          v141 = v334;
LABEL_20:
          v171 = *(double *)(a3 + 304);
          _Q18 = *(float64x2_t *)(a3 + 288);
          v173 = *(double *)(a3 + 328);
          _Q20 = *(float64x2_t *)(a3 + 312);
          v175 = *(double *)(a3 + 352);
          _Q22 = *(float64x2_t *)(a3 + 336);
          v177 = *(double *)(a3 + 376);
          _Q24 = *(float64x2_t *)(a3 + 360);
          v179 = *(double *)(a3 + 400);
          _Q26 = *(float64x2_t *)(a3 + 384);
          v181 = *(double *)(a3 + 424);
          _Q16 = *(float64x2_t *)(a3 + 408);
          v183 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q18.f64[0]), v140, _Q18, 1), v141, v171);
          __asm { FMLA            D27, D2, V18.D[1] }
          v185 = _D27 + v13.f64[0] * v171;
          v186 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q20.f64[0]), v140, _Q20, 1), v141, v173);
          __asm { FMLA            D27, D2, V20.D[1] }
          v188 = _D27 + v13.f64[0] * v173;
          v189 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q22.f64[0]), v140, _Q22, 1), v141, v175);
          __asm { FMLA            D27, D2, V22.D[1] }
          v191 = _D27 + v13.f64[0] * v175;
          v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q24.f64[0]), v140, _Q24, 1), v141, v177);
          __asm { FMLA            D27, D2, V24.D[1] }
          v194 = _D27 + v13.f64[0] * v177;
          __asm
          {
            FMLA            D27, D2, V26.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)(a3 + 288) = v183;
          *(double *)(a3 + 304) = v185;
          *(float64x2_t *)(a3 + 312) = v186;
          *(double *)(a3 + 328) = v188;
          *(float64x2_t *)(a3 + 336) = v189;
          *(double *)(a3 + 352) = v191;
          *(float64x2_t *)(a3 + 360) = v192;
          *(double *)(a3 + 376) = v194;
          *(float64x2_t *)(a3 + 384) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q26.f64[0]), v140, _Q26, 1), v141, v179);
          *(double *)(a3 + 400) = _D27 + v13.f64[0] * v179;
          *(float64x2_t *)(a3 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q16.f64[0]), v140, _Q16, 1), v141, v181);
          *(double *)(a3 + 424) = _D1 + v13.f64[0] * v181;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 240) + 20))
      {
        switch(v12)
        {
          case 0:
            v197 = *(float64x2_t *)(v11 + 16);
            _Q2.f64[0] = *(float64_t *)(v11 + 56);
            v198 = *(float64x2_t *)(v11 + 40);
            v13.f64[0] = *(float64_t *)(v11 + 80);
            v199 = *(float64x2_t *)(v11 + 64);
            goto LABEL_27;
          case 1:
            v201 = *(float64x2_t *)(a3 + 544);
            v200 = *(float64x2_t *)(a3 + 560);
            v203 = *(float64x2_t *)(a3 + 512);
            v202 = *(float64x2_t *)(a3 + 528);
            v205 = *(float64x2_t *)(a3 + 480);
            v204 = *(float64x2_t *)(a3 + 496);
            v206 = *(float64x2_t *)(a3 + 464);
            v16.f64[0] = *(float64_t *)(v11 + 32);
            v14 = vmulq_f64(*(float64x2_t *)(a3 + 432), *(float64x2_t *)(v11 + 16));
            v207 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 448), v16);
            *(_QWORD *)&v208.f64[0] = v207.i64[0];
            v208.f64[1] = *(float64_t *)(a3 + 456);
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v208;
            v209 = (float64x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v206, 8uLL);
            v208.f64[0] = *(float64_t *)(v11 + 32);
            v210 = vmulq_f64(*(float64x2_t *)(v11 + 16), v209);
            v16 = (float64x2_t)vzip1q_s64(v207, (int64x2_t)v210);
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            v211 = vextq_s8((int8x16_t)v210, (int8x16_t)vmulq_laneq_f64(v208, v206, 1), 8uLL);
            *(int8x16_t *)(a3 + 464) = v211;
            v210.f64[0] = *(float64_t *)(v11 + 32);
            v212 = *(float64x2_t *)(v11 + 16);
            v213 = vmulq_f64(v212, v205);
            v214 = vmulq_f64(v210, v204);
            v204.f64[0] = v214.f64[0];
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 496) = v204;
            v212.f64[0] = *(float64_t *)(v11 + 32);
            v215 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v204, (int8x16_t)v203, 8uLL));
            v216 = vextq_s8(v215, (int8x16_t)vmulq_laneq_f64(v212, v203, 1), 8uLL);
            v217 = vzip1q_s64((int64x2_t)v214, (int64x2_t)v215);
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            v214.f64[0] = *(float64_t *)(v11 + 32);
            v218 = *(float64x2_t *)(v11 + 16);
            v219 = vmulq_f64(v218, v202);
            v220 = (int64x2_t)vmulq_f64(v214, v201);
            *(_QWORD *)&v201.f64[0] = v220.i64[0];
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            *(float64x2_t *)(a3 + 528) = v219;
            *(float64x2_t *)(a3 + 544) = v201;
            v218.f64[0] = *(float64_t *)(v11 + 32);
            v221 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v200, 8uLL));
            v13 = (float64x2_t)vextq_s8(v221, (int8x16_t)vmulq_laneq_f64(v218, v200, 1), 8uLL);
            _Q2 = (float64x2_t)vzip1q_s64(v220, (int64x2_t)v221);
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(float64x2_t *)(a3 + 528) = v219;
            *(float64x2_t *)(a3 + 544) = _Q2;
            *(float64x2_t *)(a3 + 560) = v13;
            break;
          case 2:
            v222 = *(double *)(v11 + 16);
            v14 = *(float64x2_t *)(a3 + 432);
            v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 560), v222);
            v223 = vmulq_n_f64(*(float64x2_t *)(a3 + 544), v222);
            v224 = vmulq_n_f64(*(float64x2_t *)(a3 + 528), v222);
            v225 = vmulq_n_f64(*(float64x2_t *)(a3 + 512), v222);
            v226 = vmulq_n_f64(*(float64x2_t *)(a3 + 496), v222);
            v227 = vmulq_n_f64(*(float64x2_t *)(a3 + 480), v222);
            v228 = vmulq_n_f64(*(float64x2_t *)(a3 + 464), v222);
            _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 448), v222);
            v13 = vmulq_n_f64(v14, v222);
            *(float64x2_t *)(a3 + 432) = v13;
            *(float64x2_t *)(a3 + 448) = _Q2;
            *(float64x2_t *)(a3 + 464) = v228;
            *(float64x2_t *)(a3 + 480) = v227;
            *(float64x2_t *)(a3 + 496) = v226;
            *(float64x2_t *)(a3 + 512) = v225;
            *(float64x2_t *)(a3 + 528) = v224;
            *(float64x2_t *)(a3 + 544) = v223;
            *(float64x2_t *)(a3 + 560) = v16;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v197 = v331;
            _Q2.f64[0] = v333;
            v198 = v332;
            v13.f64[0] = v335;
            v199 = v334;
LABEL_27:
            v229 = *(double *)(a3 + 448);
            _Q18 = *(float64x2_t *)(a3 + 432);
            v231 = *(double *)(a3 + 472);
            _Q20 = *(float64x2_t *)(a3 + 456);
            v233 = *(double *)(a3 + 496);
            _Q22 = *(float64x2_t *)(a3 + 480);
            v235 = *(double *)(a3 + 520);
            _Q24 = *(float64x2_t *)(a3 + 504);
            v237 = *(double *)(a3 + 544);
            _Q26 = *(float64x2_t *)(a3 + 528);
            v239 = *(double *)(a3 + 568);
            _Q16 = *(float64x2_t *)(a3 + 552);
            v241 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q18.f64[0]), v198, _Q18, 1), v199, v229);
            __asm { FMLA            D27, D2, V18.D[1] }
            v243 = _D27 + v13.f64[0] * v229;
            v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q20.f64[0]), v198, _Q20, 1), v199, v231);
            __asm { FMLA            D27, D2, V20.D[1] }
            v246 = _D27 + v13.f64[0] * v231;
            v247 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q22.f64[0]), v198, _Q22, 1), v199, v233);
            __asm { FMLA            D27, D2, V22.D[1] }
            v249 = _D27 + v13.f64[0] * v233;
            v250 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q24.f64[0]), v198, _Q24, 1), v199, v235);
            __asm { FMLA            D27, D2, V24.D[1] }
            v252 = _D27 + v13.f64[0] * v235;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)(a3 + 432) = v241;
            *(double *)(a3 + 448) = v243;
            *(float64x2_t *)(a3 + 456) = v244;
            *(double *)(a3 + 472) = v246;
            *(float64x2_t *)(a3 + 480) = v247;
            *(double *)(a3 + 496) = v249;
            *(float64x2_t *)(a3 + 504) = v250;
            *(double *)(a3 + 520) = v252;
            *(float64x2_t *)(a3 + 528) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q26.f64[0]), v198, _Q26, 1), v199, v237);
            *(double *)(a3 + 544) = _D27 + v13.f64[0] * v237;
            *(float64x2_t *)(a3 + 552) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q16.f64[0]), v198, _Q16, 1), v199, v239);
            *(double *)(a3 + 568) = _D1 + v13.f64[0] * v239;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 248) + 20))
      {
        v255 = (float64x2_t *)(a3 + 576);
        switch(v12)
        {
          case 0:
            v256 = *(float64x2_t *)(v11 + 16);
            _Q2.f64[0] = *(float64_t *)(v11 + 56);
            v257 = *(float64x2_t *)(v11 + 40);
            v13.f64[0] = *(float64_t *)(v11 + 80);
            v258 = *(float64x2_t *)(v11 + 64);
            goto LABEL_34;
          case 1:
            v260 = *(float64x2_t *)(a3 + 688);
            v259 = *(float64x2_t *)(a3 + 704);
            v262 = *(float64x2_t *)(a3 + 656);
            v261 = *(float64x2_t *)(a3 + 672);
            v264 = *(float64x2_t *)(a3 + 624);
            v263 = *(float64x2_t *)(a3 + 640);
            v265 = *(float64x2_t *)(a3 + 608);
            v16.f64[0] = *(float64_t *)(v11 + 32);
            v14 = vmulq_f64(*v255, *(float64x2_t *)(v11 + 16));
            v266 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 592), v16);
            *(_QWORD *)&v267.f64[0] = v266.i64[0];
            v267.f64[1] = *(float64_t *)(a3 + 600);
            *v255 = v14;
            *(float64x2_t *)(a3 + 592) = v267;
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v265, 8uLL);
            v267.f64[0] = *(float64_t *)(v11 + 32);
            v269 = vmulq_f64(*(float64x2_t *)(v11 + 16), v268);
            v270 = vzip1q_s64(v266, (int64x2_t)v269);
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            v271 = vextq_s8((int8x16_t)v269, (int8x16_t)vmulq_laneq_f64(v267, v265, 1), 8uLL);
            *(int8x16_t *)(a3 + 608) = v271;
            v269.f64[0] = *(float64_t *)(v11 + 32);
            v272 = *(float64x2_t *)(v11 + 16);
            v273 = vmulq_f64(v272, v264);
            v274 = vmulq_f64(v269, v263);
            v263.f64[0] = v274.f64[0];
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *(float64x2_t *)(a3 + 640) = v263;
            v272.f64[0] = *(float64_t *)(v11 + 32);
            v275 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v263, (int8x16_t)v262, 8uLL));
            v276 = vextq_s8(v275, (int8x16_t)vmulq_laneq_f64(v272, v262, 1), 8uLL);
            v277 = vzip1q_s64((int64x2_t)v274, (int64x2_t)v275);
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            v274.f64[0] = *(float64_t *)(v11 + 32);
            v278 = *(float64x2_t *)(v11 + 16);
            v279 = vmulq_f64(v278, v261);
            v280 = (int64x2_t)vmulq_f64(v274, v260);
            *(_QWORD *)&v260.f64[0] = v280.i64[0];
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            *(float64x2_t *)(a3 + 672) = v279;
            *(float64x2_t *)(a3 + 688) = v260;
            v278.f64[0] = *(float64_t *)(v11 + 32);
            v281 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v260, (int8x16_t)v259, 8uLL));
            v13 = (float64x2_t)vextq_s8(v281, (int8x16_t)vmulq_laneq_f64(v278, v259, 1), 8uLL);
            _Q2 = (float64x2_t)vzip1q_s64(v280, (int64x2_t)v281);
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(float64x2_t *)(a3 + 672) = v279;
            *(float64x2_t *)(a3 + 688) = _Q2;
            *(float64x2_t *)(a3 + 704) = v13;
            break;
          case 2:
            v282 = *(double *)(v11 + 16);
            v14 = *v255;
            v283 = vmulq_n_f64(*(float64x2_t *)(a3 + 704), v282);
            v284 = vmulq_n_f64(*(float64x2_t *)(a3 + 688), v282);
            v285 = vmulq_n_f64(*(float64x2_t *)(a3 + 672), v282);
            v286 = vmulq_n_f64(*(float64x2_t *)(a3 + 656), v282);
            v287 = vmulq_n_f64(*(float64x2_t *)(a3 + 640), v282);
            v288 = vmulq_n_f64(*(float64x2_t *)(a3 + 624), v282);
            v289 = vmulq_n_f64(*(float64x2_t *)(a3 + 608), v282);
            _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 592), v282);
            v13 = vmulq_n_f64(*v255, v282);
            *v255 = v13;
            *(float64x2_t *)(a3 + 592) = _Q2;
            *(float64x2_t *)(a3 + 608) = v289;
            *(float64x2_t *)(a3 + 624) = v288;
            *(float64x2_t *)(a3 + 640) = v287;
            *(float64x2_t *)(a3 + 656) = v286;
            *(float64x2_t *)(a3 + 672) = v285;
            *(float64x2_t *)(a3 + 688) = v284;
            *(float64x2_t *)(a3 + 704) = v283;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v256 = v331;
            _Q2.f64[0] = v333;
            v257 = v332;
            v13.f64[0] = v335;
            v258 = v334;
LABEL_34:
            v290 = *(double *)(a3 + 592);
            _Q18 = *v255;
            v292 = *(double *)(a3 + 616);
            _Q20 = *(float64x2_t *)(a3 + 600);
            v294 = *(double *)(a3 + 640);
            _Q22 = *(float64x2_t *)(a3 + 624);
            v296 = *(double *)(a3 + 664);
            _Q24 = *(float64x2_t *)(a3 + 648);
            v298 = *(double *)(a3 + 688);
            _Q26 = *(float64x2_t *)(a3 + 672);
            v300 = *(double *)(a3 + 712);
            _Q16 = *(float64x2_t *)(a3 + 696);
            v302 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, v255->f64[0]), v257, *v255, 1), v258, v290);
            __asm { FMLA            D27, D2, V18.D[1] }
            v304 = _D27 + v13.f64[0] * v290;
            v305 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q20.f64[0]), v257, _Q20, 1), v258, v292);
            __asm { FMLA            D27, D2, V20.D[1] }
            v307 = _D27 + v13.f64[0] * v292;
            v308 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q22.f64[0]), v257, _Q22, 1), v258, v294);
            __asm { FMLA            D27, D2, V22.D[1] }
            v310 = _D27 + v13.f64[0] * v294;
            v311 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q24.f64[0]), v257, _Q24, 1), v258, v296);
            __asm { FMLA            D27, D2, V24.D[1] }
            v313 = _D27 + v13.f64[0] * v296;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *v255 = v302;
            *(double *)(a3 + 592) = v304;
            *(float64x2_t *)(a3 + 600) = v305;
            *(double *)(a3 + 616) = v307;
            *(float64x2_t *)(a3 + 624) = v308;
            *(double *)(a3 + 640) = v310;
            *(float64x2_t *)(a3 + 648) = v311;
            *(double *)(a3 + 664) = v313;
            *(float64x2_t *)(a3 + 672) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q26.f64[0]), v257, _Q26, 1), v258, v298);
            *(double *)(a3 + 688) = _D27 + v13.f64[0] * v298;
            *(float64x2_t *)(a3 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q16.f64[0]), v257, _Q16, 1), v258, v300);
            *(double *)(a3 + 712) = _D1 + v13.f64[0] * v300;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 20))
      {
        v317 = v12;
        v316 = (float64x2_t *)(a3 + 720);
        switch(v317)
        {
          case 0:
            v318 = *(float64x2_t *)(v11 + 16);
            _D2 = *(double *)(v11 + 56);
            v320 = *(float64x2_t *)(v11 + 40);
            v321 = *(double *)(v11 + 80);
            v322 = *(float64x2_t *)(v11 + 64);
            goto LABEL_42;
          case 1:
            v14.f64[0] = *(float64_t *)(a3 + 736);
            _Q2.f64[0] = *(float64_t *)(v11 + 32);
            *(_QWORD *)&v14.f64[0] = *(_OWORD *)&vmulq_f64(v14, _Q2);
            v323 = vmulq_f64(*(float64x2_t *)(a3 + 720), *(float64x2_t *)(v11 + 16));
            goto LABEL_40;
          case 2:
            v13.f64[0] = *(float64_t *)(v11 + 16);
            v14.f64[0] = *(float64_t *)(a3 + 736);
            *(_QWORD *)&v14.f64[0] = *(_OWORD *)&vmulq_f64(v14, v13);
            v323 = vmulq_n_f64(*v316, v13.f64[0]);
LABEL_40:
            *v316 = v323;
            *(float64_t *)(a3 + 736) = v14.f64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v318 = v331;
            _D2 = v333;
            v320 = v332;
            v321 = v335;
            v322 = v334;
LABEL_42:
            v324 = *(double *)(a3 + 736);
            _Q7 = *v316;
            __asm { FMLA            D0, D2, V7.D[1] }
            *v316 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v316->f64[0]), v320, *v316, 1), v322, v324);
            *(double *)(a3 + 736) = _D0 + v321 * v324;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 264) = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(v6 + 16);
    _Q1 = *(_OWORD *)v6;
    _D3 = *(_QWORD *)(v6 + 8);
    __asm { FMLA            D2, D3, V1.D[1] }
    v8 = *(double *)(a2 + 8) * (_D2 + *(double *)(v6 + 16) * *(double *)(v6 + 16));
  }
  *(double *)(a1 + 312) = v8;
  return v7;
}

BOOL sub_20F9B4988(uint64_t a1)
{
  double v1;
  __int128 *v2;
  __int128 *v3;
  int64x2_t **v4;
  int64x2_t **v5;
  uint64_t v6;
  float64x2_t *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  _BOOL8 result;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t *v21;
  int64x2_t *v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  float64x2_t *v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  unint64_t v32;
  BOOL v33;
  __int128 v34;
  double v35;
  char v36;
  double v37;
  double v38;
  double v45;
  __double2 v46;
  float64x2_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v77;
  double v80;
  __double2 v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  double v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t v113;
  float64x2_t v114;
  __int128 v115;
  __int128 v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  __int128 *v129;
  float64x2_t *v130;
  float64x2_t v131;
  uint64_t v132;
  float64x2_t v133;
  uint64_t v134;
  float64x2_t v135;
  unint64_t v136;
  BOOL v137;
  __int128 v138;
  double v139;
  char v140;
  double v141;
  double v142;
  double v146;
  __double2 v147;
  float64x2_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  float64x2_t v178;
  double v181;
  __double2 v182;
  float64x2_t v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  float64x2_t v197;
  double v198;
  float64x2_t v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  uint64_t v214;
  float64x2_t v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  float64x2_t v227;
  _OWORD *v228;
  int64x2_t *v229;
  float64x2_t *v231;
  float64x2_t v232;
  uint64_t v233;
  float64x2_t v234;
  uint64_t v235;
  float64x2_t v236;
  unint64_t v237;
  BOOL v238;
  __int128 v239;
  double v240;
  char v241;
  double v242;
  double v243;
  double v247;
  __double2 v248;
  float64x2_t v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  double v266;
  float64x2_t v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  float64x2_t v271;
  double v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  double v276;
  float64x2_t v277;
  float64x2_t v279;
  double v282;
  __double2 v283;
  float64x2_t v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  float64x2_t v298;
  double v299;
  float64x2_t v300;
  double v301;
  float64x2_t v302;
  float64x2_t v303;
  double v304;
  float64x2_t v305;
  float64x2_t v306;
  double v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  double v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  uint64_t v315;
  float64x2_t v316;
  __int128 v317;
  __int128 v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  float64x2_t v328;
  int64x2_t *v329;
  __int128 *v330;
  BOOL v332;
  float64x2_t *v333;
  float64x2_t v334;
  uint64_t v335;
  float64x2_t v336;
  uint64_t v337;
  float64x2_t v338;
  unint64_t v339;
  BOOL v340;
  __int128 v341;
  double v342;
  char v343;
  double v344;
  double v345;
  double v349;
  __double2 v350;
  float64x2_t v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  float64x2_t v365;
  double v366;
  float64x2_t v367;
  double v368;
  float64x2_t v369;
  float64x2_t v370;
  double v371;
  float64x2_t v372;
  float64x2_t v373;
  double v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  double v378;
  float64x2_t v379;
  float64x2_t v381;
  double v384;
  __double2 v385;
  float64x2_t v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  float64x2_t v400;
  double v401;
  float64x2_t v402;
  double v403;
  float64x2_t v404;
  float64x2_t v405;
  double v406;
  float64x2_t v407;
  float64x2_t v408;
  double v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  double v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  uint64_t v417;
  float64x2_t v418;
  __int128 v419;
  __int128 v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  float64x2_t v430;
  int64x2_t *v431;
  float64x2_t *v432;
  float64x2_t v433;
  uint64_t v434;
  float64x2_t v435;
  float64x2_t *v436;
  uint64_t v437;
  float64x2_t v438;
  unint64_t v439;
  BOOL v440;
  __int128 *v441;
  __int128 v442;
  float64x2_t v443;
  char v444;
  float64x2_t v445;
  float64x2_t v446;
  double v447;
  double v451;
  __double2 v452;
  float64x2_t v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  float64x2_t v462;
  double v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  double v473;
  __double2 v474;
  float64x2_t v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  float64x2_t v484;
  double v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  uint64_t v490;
  float64x2_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  __int128 v500;
  __int128 v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  int64x2_t *v506;
  double v507;
  double v508;
  double v509;
  double v510;
  double v511;
  double v512;
  double v513;
  double v514;
  double v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  uint64_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  __int32 v527;
  __int32 v528;
  __int32 v529;
  __int32 v530;
  __int32 v531;
  __int32 v532;
  __int32 v533;
  __int32 v534;
  int v535;
  int v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  int64x2_t **v541;
  float64x2_t v542;
  float64x2_t v543;
  double v544;
  double v545;
  float64x2_t v546;
  float64x2_t v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t *v556;
  float64x2_t *v557;
  float64x2_t *v558;
  float64x2_t *v559;
  double v560;
  double v561;
  uint64_t v562;
  __int128 v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  uint64_t v804;
  __int128 v805;
  float64_t v806;
  float64x2_t v807;
  float64_t v808;
  float64x2_t v809;
  float64_t v810;
  float64x2_t v811;
  float64x2_t v812[2];
  float64x2_t v813;
  float64x2_t v814;
  int64x2_t v815;
  float64x2_t v816;
  uint64_t v817;
  float64x2_t v818;
  uint64_t v819;
  unsigned int v820;
  int64x2_t *v821;
  int v822;
  __int128 v823;
  uint64_t v824;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v562 = v6;
  result = sub_20F9B6D14(v6, v4, v7, v1, v8, v9, v10, v11, v12, v13, v14);
  if (!result)
    return result;
  v22 = *v5;
  v21 = v5[1];
  v23 = (*v5)[1].i32[0];
  v24 = v21[1].i32[0];
  v25 = v5[2][1].i32[0];
  v527 = v5[3][1].i32[0];
  v541 = v5;
  if ((*v5)[1].i8[4])
  {
    v528 = v5[2][1].i32[0];
    v531 = (*v5)[1].i32[0];
    v534 = v21[1].i32[0];
    v26 = (float64x2_t *)&v22[2];
    v27 = (float64x2_t)v22[5];
    v815 = v22[4];
    v816 = v27;
    v28 = v22[6].i64[0];
    v29 = (float64x2_t)v22[2];
    v814 = (float64x2_t)v22[3];
    v813 = v29;
    v556 = (float64x2_t *)&v22[6].u64[1];
    v818 = *(float64x2_t *)((char *)&v22[6] + 8);
    v30 = v22[7].i64[1];
    v817 = v28;
    v819 = v30;
    memset(v812, 0, sizeof(v812));
    v811 = 0u;
    v820 = 3;
    v821 = v22 + 2;
    v822 = 0;
    v824 = 0;
    v823 = 0uLL;
    sub_20F053450(&v820, (double *)&v823);
    v32 = 0;
    v33 = 0;
    v803 = v823;
    v34 = *(__int128 *)((char *)&v22[6] + 8);
    v35 = *(double *)&v22[7].i64[1];
    v804 = v824;
    v806 = v35;
    v805 = v34;
    v36 = 2;
    while (1)
    {
      v37 = fabs(*((double *)&v803 + v32) * 0.00000001);
      if (v37 >= 0.000001)
        v38 = v37 * 0.5;
      else
        v38 = 0.0000005;
      v811.f64[v32] = v38;
      v31.f64[0] = v812[0].f64[0];
      _V2.D[1] = v811.f64[1];
      _D3 = v811.f64[1];
      __asm { FMLA            D0, D3, V2.D[1] }
      v45 = sqrt(_D0 + v31.f64[0] * v31.f64[0]);
      v16.f64[0] = 1.0 / v45;
      if (v45 == 0.0)
        v16.f64[0] = 1.0;
      v542 = vmulq_n_f64(v811, v16.f64[0]);
      v550 = vmulq_f64(v31, v16).f64[0];
      v46 = __sincos_stret(v45);
      v47 = v542;
      v48 = v46.__cosval + (1.0 - v46.__cosval) * vmuld_n_f64(v47.f64[0], v47.f64[0]);
      v49 = (1.0 - v46.__cosval) * vmuld_lane_f64(v47.f64[0], v47, 1);
      v50 = v49 - v46.__sinval * v550;
      v51 = (1.0 - v46.__cosval) * vmuld_n_f64(v542.f64[0], v550);
      v52 = vmuld_lane_f64(v46.__sinval, v542, 1);
      v53 = v52 + v51;
      v54 = v46.__sinval * v550 + v49;
      v55 = v46.__cosval + (1.0 - v46.__cosval) * vmuld_lane_f64(v542.f64[1], v542, 1);
      v56 = (1.0 - v46.__cosval) * vmuld_lane_f64(v550, v542, 1);
      v47.f64[0] = v56 - v46.__sinval * v542.f64[0];
      v57 = v51 - v52;
      v58 = v46.__sinval * v542.f64[0] + v56;
      v59 = v46.__cosval + (1.0 - v46.__cosval) * vmuld_n_f64(v550, v550);
      v60 = *(double *)v22[3].i64;
      v61 = (float64x2_t)v22[2];
      v62 = *(double *)&v22[4].i64[1];
      v63 = *(float64x2_t *)((char *)&v22[3] + 8);
      v64 = *(double *)v22[6].i64;
      v65 = (float64x2_t)v22[5];
      v66 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, v48), v63, v54), v65, v57);
      v67 = v60 * v48 + v62 * v54 + v64 * v57;
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, v50), v63, v55), v65, v58);
      v69.f64[0] = v60 * v50;
      v70 = v60 * v50 + v62 * v55 + v64 * v58;
      v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, v53), v63, v47.f64[0]), v65, v59);
      v22[2] = (int64x2_t)v66;
      *(double *)v22[3].i64 = v67;
      *(float64x2_t *)((char *)v22 + 56) = v68;
      *(double *)&v22[4].i64[1] = v70;
      v22[5] = (int64x2_t)v71;
      *(double *)v22[6].i64 = v60 * v53 + v62 * v47.f64[0] + v64 * v59;
      *(_QWORD *)&v72.f64[0] = v22[7].i64[1];
      v73.f64[0] = v812[1].f64[1];
      v74 = v812[0].f64[1];
      v75 = vaddq_f64(*(float64x2_t *)((char *)&v22[6] + 8), *(float64x2_t *)((char *)v812 + 8));
      *(float64x2_t *)((char *)v22 + 104) = v75;
      *(_QWORD *)&v72.f64[0] = *(_OWORD *)&vaddq_f64(v72, v73);
      v22[7].i64[1] = *(_QWORD *)&v72.f64[0];
      v22[8].i8[0] = 0;
      v5 = v541;
      if (!sub_20F9B6D14(v562, v541, &v809, v72.f64[0], v75.f64[0], v73.f64[0], v74, v71.f64[0], v61.f64[0], v68.f64[0], v69))break;
      v22[6].i64[0] = v817;
      _Q0 = v816;
      v22[4] = v815;
      v22[5] = (int64x2_t)_Q0;
      v77 = v814;
      *v26 = v813;
      v22[3] = (int64x2_t)v77;
      *v556 = v818;
      v22[7].i64[1] = v819;
      v811.f64[v32] = -v38;
      v77.f64[0] = v812[0].f64[0];
      _V2.D[1] = v811.f64[1];
      _D3 = v811.f64[1];
      __asm { FMLA            D0, D3, V2.D[1] }
      v80 = sqrt(_Q0.f64[0] + v77.f64[0] * v77.f64[0]);
      v16.f64[0] = 1.0 / v80;
      if (v80 == 0.0)
        v16.f64[0] = 1.0;
      v543 = vmulq_n_f64(v811, v16.f64[0]);
      v551 = vmulq_f64(v77, v16).f64[0];
      v81 = __sincos_stret(v80);
      v82 = v543;
      v83 = v81.__cosval + (1.0 - v81.__cosval) * vmuld_n_f64(v82.f64[0], v82.f64[0]);
      v84 = (1.0 - v81.__cosval) * vmuld_lane_f64(v82.f64[0], v82, 1);
      v85 = v84 - v81.__sinval * v551;
      v86 = (1.0 - v81.__cosval) * vmuld_n_f64(v543.f64[0], v551);
      v87 = vmuld_lane_f64(v81.__sinval, v543, 1);
      v88 = v87 + v86;
      v89 = v81.__sinval * v551 + v84;
      v90 = v81.__cosval + (1.0 - v81.__cosval) * vmuld_lane_f64(v543.f64[1], v543, 1);
      v91 = (1.0 - v81.__cosval) * vmuld_lane_f64(v551, v543, 1);
      v82.f64[0] = v91 - v81.__sinval * v543.f64[0];
      v92 = v86 - v87;
      v93 = v81.__sinval * v543.f64[0] + v91;
      v94 = v81.__cosval + (1.0 - v81.__cosval) * vmuld_n_f64(v551, v551);
      v95 = *(double *)v22[3].i64;
      v96 = (float64x2_t)v22[2];
      v97 = *(double *)&v22[4].i64[1];
      v98 = *(float64x2_t *)((char *)&v22[3] + 8);
      v99 = *(double *)v22[6].i64;
      v100 = (float64x2_t)v22[5];
      v101 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v83), v98, v89), v100, v92);
      v102 = v95 * v83 + v97 * v89 + v99 * v92;
      v103 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v85), v98, v90), v100, v93);
      v104.f64[0] = v95 * v85;
      v105 = v95 * v85 + v97 * v90 + v99 * v93;
      v106 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v88), v98, v82.f64[0]), v100, v94);
      v22[2] = (int64x2_t)v101;
      *(double *)v22[3].i64 = v102;
      *(float64x2_t *)((char *)v22 + 56) = v103;
      *(double *)&v22[4].i64[1] = v105;
      v22[5] = (int64x2_t)v106;
      *(double *)v22[6].i64 = v95 * v88 + v97 * v82.f64[0] + v99 * v94;
      *(_QWORD *)&v107.f64[0] = v22[7].i64[1];
      v108.f64[0] = v812[1].f64[1];
      v109 = v812[0].f64[1];
      v110 = vaddq_f64(*(float64x2_t *)((char *)&v22[6] + 8), *(float64x2_t *)((char *)v812 + 8));
      *(float64x2_t *)((char *)v22 + 104) = v110;
      *(_QWORD *)&v107.f64[0] = *(_OWORD *)&vaddq_f64(v107, v108);
      v22[7].i64[1] = *(_QWORD *)&v107.f64[0];
      v22[8].i8[0] = 0;
      if (!sub_20F9B6D14(v562, v541, &v807, v107.f64[0], v110.f64[0], v108.f64[0], v109, v106.f64[0], v96.f64[0], v103.f64[0], v104))break;
      v111.f64[0] = v38 + v38;
      v112.f64[0] = v810;
      v16.f64[0] = v808;
      v113 = *(_OWORD *)&vdivq_f64(vsubq_f64(v112, v16), v111);
      v114 = vdivq_f64(vsubq_f64(v809, v807), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v38 + v38), 0));
      v115 = v3[8];
      v116 = *v3;
      v117 = (float64x2_t)v3[1];
      v118 = (float64x2_t)v3[2];
      v119 = (float64x2_t)v3[3];
      v120 = (float64x2_t)v3[4];
      v121 = (float64x2_t)v3[5];
      v122 = v3[6];
      v794 = v3[7];
      v793 = v122;
      v792 = v121;
      v791 = v120;
      v790 = v119;
      v789 = v118;
      v788 = v117;
      v787 = v116;
      v795 = v115;
      *((_QWORD *)&v787 + ((v36 - 2) & 0x1F)) = *(_QWORD *)&v114.f64[0];
      v786 = v802;
      v785 = v801;
      v784 = v800;
      v783 = v799;
      v782 = v798;
      v781 = v797;
      v780 = v796;
      v779 = v795;
      v778 = v794;
      v777 = v793;
      v776 = v792;
      v775 = v791;
      v774 = v790;
      v773 = v789;
      v772 = v788;
      v771 = v787;
      *((_QWORD *)&v771 + ((v36 - 1) & 0x1F)) = *(_QWORD *)&v114.f64[1];
      v770 = v786;
      v769 = v785;
      v768 = v784;
      v767 = v783;
      v766 = v782;
      v765 = v781;
      v764 = v780;
      v763 = v779;
      v762 = v778;
      v761 = v777;
      v760 = v776;
      v759 = v775;
      v758 = v774;
      v757 = v773;
      v756 = v772;
      v755 = v771;
      *((_QWORD *)&v755 + (v36 & 0x1F)) = v113;
      v123 = v763;
      v124 = v762;
      v125 = v761;
      v16 = v760;
      v17 = v759;
      v18 = v758;
      v19 = v757;
      v20 = v756;
      *v3 = v755;
      v3[1] = (__int128)v20;
      v3[2] = (__int128)v19;
      v3[3] = (__int128)v18;
      v3[4] = (__int128)v17;
      v3[5] = (__int128)v16;
      v3[6] = v125;
      v3[7] = v124;
      v3[8] = v123;
      v811.f64[v32] = 0.0;
      v31 = v816;
      v22[4] = v815;
      v22[5] = (int64x2_t)v31;
      v22[6].i64[0] = v817;
      v126 = v814;
      v31.f64[1] = v813.f64[1];
      *v26 = v813;
      v22[3] = (int64x2_t)v126;
      *v556 = v818;
      v33 = v32 > 4;
      v22[7].i64[1] = v819;
      v36 += 3;
      ++v32;
      v22[8].i8[0] = 0;
      if (v32 == 6)
      {
        v5 = v541;
        v23 = v531;
        v24 = v534;
        v25 = v528;
        goto LABEL_16;
      }
    }
    result = 0;
    v22[6].i64[0] = v817;
    v127 = v816;
    v22[4] = v815;
    v22[5] = (int64x2_t)v127;
    v128 = v814;
    *v26 = v813;
    v22[3] = (int64x2_t)v128;
    *v556 = v818;
    v22[7].i64[1] = v819;
    v22[8].i8[0] = 0;
    v23 = v531;
    v24 = v534;
    v25 = v528;
    if (!v33)
      return result;
LABEL_16:
    v21 = v5[1];
  }
  if (!v21[1].i8[4])
    goto LABEL_33;
  v129 = v3 + 9;
  if (v23 == v24 || *v5 == v21)
  {
    v3[16] = 0u;
    v3[17] = 0u;
    v3[14] = 0u;
    v3[15] = 0u;
    v3[12] = 0u;
    v3[13] = 0u;
    v3[10] = 0u;
    v3[11] = 0u;
    *v129 = 0u;
    goto LABEL_33;
  }
  v529 = v25;
  v532 = v23;
  v535 = v24;
  v130 = (float64x2_t *)&v21[2];
  v131 = (float64x2_t)v21[5];
  v815 = v21[4];
  v816 = v131;
  v132 = v21[6].i64[0];
  v133 = (float64x2_t)v21[2];
  v814 = (float64x2_t)v21[3];
  v813 = v133;
  v557 = (float64x2_t *)&v21[6].u64[1];
  v818 = *(float64x2_t *)((char *)&v21[6] + 8);
  v134 = v21[7].i64[1];
  v817 = v132;
  v819 = v134;
  memset(v812, 0, sizeof(v812));
  v811 = 0u;
  v820 = 3;
  v821 = v21 + 2;
  v822 = 0;
  v824 = 0;
  v823 = 0uLL;
  sub_20F053450(&v820, (double *)&v823);
  v136 = 0;
  v137 = 0;
  v803 = v823;
  v138 = *(__int128 *)((char *)&v21[6] + 8);
  v139 = *(double *)&v21[7].i64[1];
  v804 = v824;
  v806 = v139;
  v805 = v138;
  v140 = 2;
  while (1)
  {
    v141 = fabs(*((double *)&v803 + v136) * 0.00000001);
    if (v141 >= 0.000001)
      v142 = v141 * 0.5;
    else
      v142 = 0.0000005;
    v811.f64[v136] = v142;
    v135.f64[0] = v812[0].f64[0];
    _V2.D[1] = v811.f64[1];
    _D3 = v811.f64[1];
    __asm { FMLA            D0, D3, V2.D[1] }
    v146 = sqrt(_D0 + v135.f64[0] * v135.f64[0]);
    v16.f64[0] = 1.0 / v146;
    if (v146 == 0.0)
      v16.f64[0] = 1.0;
    v544 = vmulq_f64(v135, v16).f64[0];
    v537 = vmulq_n_f64(v811, v16.f64[0]);
    v147 = __sincos_stret(v146);
    v148 = v537;
    v149 = v147.__cosval + (1.0 - v147.__cosval) * vmuld_n_f64(v148.f64[0], v148.f64[0]);
    v150 = (1.0 - v147.__cosval) * vmuld_lane_f64(v148.f64[0], v148, 1);
    v151 = v150 - v147.__sinval * v544;
    v152 = (1.0 - v147.__cosval) * vmuld_n_f64(v537.f64[0], v544);
    v153 = vmuld_lane_f64(v147.__sinval, v537, 1);
    v154 = v153 + v152;
    v155 = v147.__sinval * v544 + v150;
    v156 = v147.__cosval + (1.0 - v147.__cosval) * vmuld_lane_f64(v537.f64[1], v537, 1);
    v157 = (1.0 - v147.__cosval) * vmuld_lane_f64(v544, v537, 1);
    v148.f64[0] = v157 - v147.__sinval * v537.f64[0];
    v158 = v152 - v153;
    v159 = v147.__sinval * v537.f64[0] + v157;
    v160 = v147.__cosval + (1.0 - v147.__cosval) * vmuld_n_f64(v544, v544);
    v161 = *(double *)v21[3].i64;
    v162 = (float64x2_t)v21[2];
    v163 = *(double *)&v21[4].i64[1];
    v164 = *(float64x2_t *)((char *)&v21[3] + 8);
    v165 = *(double *)v21[6].i64;
    v166 = (float64x2_t)v21[5];
    v167 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v162, v149), v164, v155), v166, v158);
    v168 = v161 * v149 + v163 * v155 + v165 * v158;
    v169 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v162, v151), v164, v156), v166, v159);
    v170.f64[0] = v161 * v151;
    v171 = v161 * v151 + v163 * v156 + v165 * v159;
    v172 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v162, v154), v164, v148.f64[0]), v166, v160);
    v21[2] = (int64x2_t)v167;
    *(double *)v21[3].i64 = v168;
    *(float64x2_t *)((char *)v21 + 56) = v169;
    *(double *)&v21[4].i64[1] = v171;
    v21[5] = (int64x2_t)v172;
    *(double *)v21[6].i64 = v161 * v154 + v163 * v148.f64[0] + v165 * v160;
    *(_QWORD *)&v173.f64[0] = v21[7].i64[1];
    v174.f64[0] = v812[1].f64[1];
    v175 = v812[0].f64[1];
    v176 = vaddq_f64(*(float64x2_t *)((char *)&v21[6] + 8), *(float64x2_t *)((char *)v812 + 8));
    *(float64x2_t *)((char *)v21 + 104) = v176;
    *(_QWORD *)&v173.f64[0] = *(_OWORD *)&vaddq_f64(v173, v174);
    v21[7].i64[1] = *(_QWORD *)&v173.f64[0];
    v21[8].i8[0] = 0;
    v5 = v541;
    if (!sub_20F9B6D14(v562, v541, &v809, v173.f64[0], v176.f64[0], v174.f64[0], v175, v172.f64[0], v162.f64[0], v169.f64[0], v170))break;
    v21[6].i64[0] = v817;
    _Q0 = v816;
    v21[4] = v815;
    v21[5] = (int64x2_t)_Q0;
    v178 = v814;
    *v130 = v813;
    v21[3] = (int64x2_t)v178;
    *v557 = v818;
    v21[7].i64[1] = v819;
    v811.f64[v136] = -v142;
    v178.f64[0] = v812[0].f64[0];
    _V2.D[1] = v811.f64[1];
    _D3 = v811.f64[1];
    __asm { FMLA            D0, D3, V2.D[1] }
    v181 = sqrt(_Q0.f64[0] + v178.f64[0] * v178.f64[0]);
    v16.f64[0] = 1.0 / v181;
    if (v181 == 0.0)
      v16.f64[0] = 1.0;
    v545 = vmulq_f64(v178, v16).f64[0];
    v538 = vmulq_n_f64(v811, v16.f64[0]);
    v182 = __sincos_stret(v181);
    v183 = v538;
    v184 = v182.__cosval + (1.0 - v182.__cosval) * vmuld_n_f64(v183.f64[0], v183.f64[0]);
    v185 = (1.0 - v182.__cosval) * vmuld_lane_f64(v183.f64[0], v183, 1);
    v186 = v185 - v182.__sinval * v545;
    v187 = (1.0 - v182.__cosval) * vmuld_n_f64(v538.f64[0], v545);
    v188 = vmuld_lane_f64(v182.__sinval, v538, 1);
    v189 = v188 + v187;
    v190 = v182.__sinval * v545 + v185;
    v191 = v182.__cosval + (1.0 - v182.__cosval) * vmuld_lane_f64(v538.f64[1], v538, 1);
    v192 = (1.0 - v182.__cosval) * vmuld_lane_f64(v545, v538, 1);
    v183.f64[0] = v192 - v182.__sinval * v538.f64[0];
    v193 = v187 - v188;
    v194 = v182.__sinval * v538.f64[0] + v192;
    v195 = v182.__cosval + (1.0 - v182.__cosval) * vmuld_n_f64(v545, v545);
    v196 = *(double *)v21[3].i64;
    v197 = (float64x2_t)v21[2];
    v198 = *(double *)&v21[4].i64[1];
    v199 = *(float64x2_t *)((char *)&v21[3] + 8);
    v200 = *(double *)v21[6].i64;
    v201 = (float64x2_t)v21[5];
    v202 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v197, v184), v199, v190), v201, v193);
    v203 = v196 * v184 + v198 * v190 + v200 * v193;
    v204 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v197, v186), v199, v191), v201, v194);
    v205.f64[0] = v196 * v186;
    v206 = v196 * v186 + v198 * v191 + v200 * v194;
    v207 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v197, v189), v199, v183.f64[0]), v201, v195);
    v21[2] = (int64x2_t)v202;
    *(double *)v21[3].i64 = v203;
    *(float64x2_t *)((char *)v21 + 56) = v204;
    *(double *)&v21[4].i64[1] = v206;
    v21[5] = (int64x2_t)v207;
    *(double *)v21[6].i64 = v196 * v189 + v198 * v183.f64[0] + v200 * v195;
    *(_QWORD *)&v208.f64[0] = v21[7].i64[1];
    v209.f64[0] = v812[1].f64[1];
    v210 = v812[0].f64[1];
    v211 = vaddq_f64(*(float64x2_t *)((char *)&v21[6] + 8), *(float64x2_t *)((char *)v812 + 8));
    *(float64x2_t *)((char *)v21 + 104) = v211;
    *(_QWORD *)&v208.f64[0] = *(_OWORD *)&vaddq_f64(v208, v209);
    v21[7].i64[1] = *(_QWORD *)&v208.f64[0];
    v21[8].i8[0] = 0;
    if (!sub_20F9B6D14(v562, v541, &v807, v208.f64[0], v211.f64[0], v209.f64[0], v210, v207.f64[0], v197.f64[0], v204.f64[0], v205))break;
    v212.f64[0] = v142 + v142;
    v213.f64[0] = v810;
    v16.f64[0] = v808;
    v214 = *(_OWORD *)&vdivq_f64(vsubq_f64(v213, v16), v212);
    v215 = vdivq_f64(vsubq_f64(v809, v807), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v142 + v142), 0));
    v216 = v3[17];
    v217 = *v129;
    v218 = (float64x2_t)v3[10];
    v219 = (float64x2_t)v3[11];
    v220 = (float64x2_t)v3[12];
    v221 = (float64x2_t)v3[13];
    v222 = (float64x2_t)v3[14];
    v223 = v3[15];
    v746 = v3[16];
    v745 = v223;
    v744 = v222;
    v743 = v221;
    v742 = v220;
    v741 = v219;
    v740 = v218;
    v739 = v217;
    v747 = v216;
    *((_QWORD *)&v739 + ((v140 - 2) & 0x1F)) = *(_QWORD *)&v215.f64[0];
    v738 = v754;
    v737 = v753;
    v736 = v752;
    v735 = v751;
    v734 = v750;
    v733 = v749;
    v732 = v748;
    v731 = v747;
    v730 = v746;
    v729 = v745;
    v728 = v744;
    v727 = v743;
    v726 = v742;
    v725 = v741;
    v724 = v740;
    v723 = v739;
    *((_QWORD *)&v723 + ((v140 - 1) & 0x1F)) = *(_QWORD *)&v215.f64[1];
    v722 = v738;
    v721 = v737;
    v720 = v736;
    v719 = v735;
    v718 = v734;
    v717 = v733;
    v716 = v732;
    v715 = v731;
    v714 = v730;
    v713 = v729;
    v712 = v728;
    v711 = v727;
    v710 = v726;
    v709 = v725;
    v708 = v724;
    v707 = v723;
    *((_QWORD *)&v707 + (v140 & 0x1F)) = v214;
    v224 = v715;
    v225 = v714;
    v226 = v713;
    v16 = v712;
    v17 = v711;
    v18 = v710;
    v19 = v709;
    v20 = v708;
    *v129 = v707;
    v3[10] = (__int128)v20;
    v3[11] = (__int128)v19;
    v3[12] = (__int128)v18;
    v3[13] = (__int128)v17;
    v3[14] = (__int128)v16;
    v3[15] = v226;
    v3[16] = v225;
    v3[17] = v224;
    v811.f64[v136] = 0.0;
    v135 = v816;
    v21[4] = v815;
    v21[5] = (int64x2_t)v135;
    v21[6].i64[0] = v817;
    v227 = v814;
    v135.f64[1] = v813.f64[1];
    *v130 = v813;
    v21[3] = (int64x2_t)v227;
    *v557 = v818;
    v137 = v136 > 4;
    v21[7].i64[1] = v819;
    v140 += 3;
    ++v136;
    v21[8].i8[0] = 0;
    if (v136 == 6)
    {
      v5 = v541;
      v23 = v532;
      v24 = v535;
      v25 = v529;
      goto LABEL_33;
    }
  }
  result = 0;
  v21[6].i64[0] = v817;
  v521 = v816;
  v21[4] = v815;
  v21[5] = (int64x2_t)v521;
  v522 = v814;
  *v130 = v813;
  v21[3] = (int64x2_t)v522;
  *v557 = v818;
  v21[7].i64[1] = v819;
  v21[8].i8[0] = 0;
  v23 = v532;
  v24 = v535;
  v25 = v529;
  if (v137)
  {
LABEL_33:
    v228 = v3 + 18;
    v229 = v5[2];
    if (v229[1].i8[4])
    {
      _ZF = v23 == v25 || v24 == v25;
      if (_ZF || *v5 == v229 || v5[1] == v229)
      {
        v228[7] = 0u;
        v228[8] = 0u;
        v228[5] = 0u;
        v228[6] = 0u;
        v228[3] = 0u;
        v228[4] = 0u;
        v228[1] = 0u;
        v228[2] = 0u;
        *v228 = 0u;
      }
      else
      {
        v530 = v25;
        v533 = v23;
        v536 = v24;
        v231 = (float64x2_t *)&v229[2];
        v232 = (float64x2_t)v229[5];
        v815 = v229[4];
        v816 = v232;
        v233 = v229[6].i64[0];
        v234 = (float64x2_t)v229[2];
        v814 = (float64x2_t)v229[3];
        v813 = v234;
        v558 = (float64x2_t *)&v229[6].u64[1];
        v818 = *(float64x2_t *)((char *)&v229[6] + 8);
        v235 = v229[7].i64[1];
        v817 = v233;
        v819 = v235;
        memset(v812, 0, sizeof(v812));
        v811 = 0u;
        v820 = 3;
        v821 = v229 + 2;
        v822 = 0;
        v824 = 0;
        v823 = 0uLL;
        sub_20F053450(&v820, (double *)&v823);
        v237 = 0;
        v238 = 0;
        v803 = v823;
        v239 = *(__int128 *)((char *)&v229[6] + 8);
        v240 = *(double *)&v229[7].i64[1];
        v804 = v824;
        v806 = v240;
        v805 = v239;
        v241 = 2;
        while (1)
        {
          v242 = fabs(*((double *)&v803 + v237) * 0.00000001);
          if (v242 >= 0.000001)
            v243 = v242 * 0.5;
          else
            v243 = 0.0000005;
          v811.f64[v237] = v243;
          v236.f64[0] = v812[0].f64[0];
          _V2.D[1] = v811.f64[1];
          _D3 = v811.f64[1];
          __asm { FMLA            D0, D3, V2.D[1] }
          v247 = sqrt(_D0 + v236.f64[0] * v236.f64[0]);
          v16.f64[0] = 1.0 / v247;
          if (v247 == 0.0)
            v16.f64[0] = 1.0;
          v546 = vmulq_n_f64(v811, v16.f64[0]);
          v552 = vmulq_f64(v236, v16).f64[0];
          v248 = __sincos_stret(v247);
          v249 = v546;
          v250 = v248.__cosval + (1.0 - v248.__cosval) * vmuld_n_f64(v249.f64[0], v249.f64[0]);
          v251 = (1.0 - v248.__cosval) * vmuld_lane_f64(v249.f64[0], v249, 1);
          v252 = v251 - v248.__sinval * v552;
          v253 = (1.0 - v248.__cosval) * vmuld_n_f64(v546.f64[0], v552);
          v254 = vmuld_lane_f64(v248.__sinval, v546, 1);
          v255 = v254 + v253;
          v256 = v248.__sinval * v552 + v251;
          v257 = v248.__cosval + (1.0 - v248.__cosval) * vmuld_lane_f64(v546.f64[1], v546, 1);
          v258 = (1.0 - v248.__cosval) * vmuld_lane_f64(v552, v546, 1);
          v249.f64[0] = v258 - v248.__sinval * v546.f64[0];
          v259 = v253 - v254;
          v260 = v248.__sinval * v546.f64[0] + v258;
          v261 = v248.__cosval + (1.0 - v248.__cosval) * vmuld_n_f64(v552, v552);
          v262 = *(double *)v229[3].i64;
          v263 = (float64x2_t)v229[2];
          v264 = *(double *)&v229[4].i64[1];
          v265 = *(float64x2_t *)((char *)&v229[3] + 8);
          v266 = *(double *)v229[6].i64;
          v267 = (float64x2_t)v229[5];
          v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v263, v250), v265, v256), v267, v259);
          v269 = v262 * v250 + v264 * v256 + v266 * v259;
          v270 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v263, v252), v265, v257), v267, v260);
          v271.f64[0] = v262 * v252;
          v272 = v262 * v252 + v264 * v257 + v266 * v260;
          v273 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v263, v255), v265, v249.f64[0]), v267, v261);
          v229[2] = (int64x2_t)v268;
          *(double *)v229[3].i64 = v269;
          *(float64x2_t *)((char *)v229 + 56) = v270;
          *(double *)&v229[4].i64[1] = v272;
          v229[5] = (int64x2_t)v273;
          *(double *)v229[6].i64 = v262 * v255 + v264 * v249.f64[0] + v266 * v261;
          *(_QWORD *)&v274.f64[0] = v229[7].i64[1];
          v275.f64[0] = v812[1].f64[1];
          v276 = v812[0].f64[1];
          v277 = vaddq_f64(*(float64x2_t *)((char *)&v229[6] + 8), *(float64x2_t *)((char *)v812 + 8));
          *(float64x2_t *)((char *)v229 + 104) = v277;
          *(_QWORD *)&v274.f64[0] = *(_OWORD *)&vaddq_f64(v274, v275);
          v229[7].i64[1] = *(_QWORD *)&v274.f64[0];
          v229[8].i8[0] = 0;
          v5 = v541;
          if (!sub_20F9B6D14(v562, v541, &v809, v274.f64[0], v277.f64[0], v275.f64[0], v276, v273.f64[0], v263.f64[0], v270.f64[0], v271))break;
          v229[6].i64[0] = v817;
          _Q0 = v816;
          v229[4] = v815;
          v229[5] = (int64x2_t)_Q0;
          v279 = v814;
          *v231 = v813;
          v229[3] = (int64x2_t)v279;
          *v558 = v818;
          v229[7].i64[1] = v819;
          v811.f64[v237] = -v243;
          v279.f64[0] = v812[0].f64[0];
          _V2.D[1] = v811.f64[1];
          _D3 = v811.f64[1];
          __asm { FMLA            D0, D3, V2.D[1] }
          v282 = sqrt(_Q0.f64[0] + v279.f64[0] * v279.f64[0]);
          v16.f64[0] = 1.0 / v282;
          if (v282 == 0.0)
            v16.f64[0] = 1.0;
          v547 = vmulq_n_f64(v811, v16.f64[0]);
          v553 = vmulq_f64(v279, v16).f64[0];
          v283 = __sincos_stret(v282);
          v284 = v547;
          v285 = v283.__cosval + (1.0 - v283.__cosval) * vmuld_n_f64(v284.f64[0], v284.f64[0]);
          v286 = (1.0 - v283.__cosval) * vmuld_lane_f64(v284.f64[0], v284, 1);
          v287 = v286 - v283.__sinval * v553;
          v288 = (1.0 - v283.__cosval) * vmuld_n_f64(v547.f64[0], v553);
          v289 = vmuld_lane_f64(v283.__sinval, v547, 1);
          v290 = v289 + v288;
          v291 = v283.__sinval * v553 + v286;
          v292 = v283.__cosval + (1.0 - v283.__cosval) * vmuld_lane_f64(v547.f64[1], v547, 1);
          v293 = (1.0 - v283.__cosval) * vmuld_lane_f64(v553, v547, 1);
          v284.f64[0] = v293 - v283.__sinval * v547.f64[0];
          v294 = v288 - v289;
          v295 = v283.__sinval * v547.f64[0] + v293;
          v296 = v283.__cosval + (1.0 - v283.__cosval) * vmuld_n_f64(v553, v553);
          v297 = *(double *)v229[3].i64;
          v298 = (float64x2_t)v229[2];
          v299 = *(double *)&v229[4].i64[1];
          v300 = *(float64x2_t *)((char *)&v229[3] + 8);
          v301 = *(double *)v229[6].i64;
          v302 = (float64x2_t)v229[5];
          v303 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v298, v285), v300, v291), v302, v294);
          v304 = v297 * v285 + v299 * v291 + v301 * v294;
          v305 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v298, v287), v300, v292), v302, v295);
          v306.f64[0] = v297 * v287;
          v307 = v297 * v287 + v299 * v292 + v301 * v295;
          v308 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v298, v290), v300, v284.f64[0]), v302, v296);
          v229[2] = (int64x2_t)v303;
          *(double *)v229[3].i64 = v304;
          *(float64x2_t *)((char *)v229 + 56) = v305;
          *(double *)&v229[4].i64[1] = v307;
          v229[5] = (int64x2_t)v308;
          *(double *)v229[6].i64 = v297 * v290 + v299 * v284.f64[0] + v301 * v296;
          *(_QWORD *)&v309.f64[0] = v229[7].i64[1];
          v310.f64[0] = v812[1].f64[1];
          v311 = v812[0].f64[1];
          v312 = vaddq_f64(*(float64x2_t *)((char *)&v229[6] + 8), *(float64x2_t *)((char *)v812 + 8));
          *(float64x2_t *)((char *)v229 + 104) = v312;
          *(_QWORD *)&v309.f64[0] = *(_OWORD *)&vaddq_f64(v309, v310);
          v229[7].i64[1] = *(_QWORD *)&v309.f64[0];
          v229[8].i8[0] = 0;
          if (!sub_20F9B6D14(v562, v541, &v807, v309.f64[0], v312.f64[0], v310.f64[0], v311, v308.f64[0], v298.f64[0], v305.f64[0], v306))break;
          v313.f64[0] = v243 + v243;
          v314.f64[0] = v810;
          v16.f64[0] = v808;
          v315 = *(_OWORD *)&vdivq_f64(vsubq_f64(v314, v16), v313);
          v316 = vdivq_f64(vsubq_f64(v809, v807), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v243 + v243), 0));
          v317 = v228[8];
          v318 = *v228;
          v319 = *((float64x2_t *)v228 + 1);
          v320 = *((float64x2_t *)v228 + 2);
          v321 = *((float64x2_t *)v228 + 3);
          v322 = *((float64x2_t *)v228 + 4);
          v323 = *((float64x2_t *)v228 + 5);
          v324 = v228[6];
          v698 = v228[7];
          v697 = v324;
          v696 = v323;
          v695 = v322;
          v694 = v321;
          v693 = v320;
          v692 = v319;
          v691 = v318;
          v699 = v317;
          *((_QWORD *)&v691 + ((v241 - 2) & 0x1F)) = *(_QWORD *)&v316.f64[0];
          v690 = v706;
          v689 = v705;
          v688 = v704;
          v687 = v703;
          v686 = v702;
          v685 = v701;
          v684 = v700;
          v683 = v699;
          v682 = v698;
          v681 = v697;
          v680 = v696;
          v679 = v695;
          v678 = v694;
          v677 = v693;
          v676 = v692;
          v675 = v691;
          *((_QWORD *)&v675 + ((v241 - 1) & 0x1F)) = *(_QWORD *)&v316.f64[1];
          v674 = v690;
          v673 = v689;
          v672 = v688;
          v671 = v687;
          v670 = v686;
          v669 = v685;
          v668 = v684;
          v667 = v683;
          v666 = v682;
          v665 = v681;
          v664 = v680;
          v663 = v679;
          v662 = v678;
          v661 = v677;
          v660 = v676;
          v659 = v675;
          *((_QWORD *)&v659 + (v241 & 0x1F)) = v315;
          v325 = v667;
          v326 = v666;
          v327 = v665;
          v16 = v664;
          v17 = v663;
          v18 = v662;
          v19 = v661;
          v20 = v660;
          *v228 = v659;
          v228[1] = v20;
          v228[2] = v19;
          v228[3] = v18;
          v228[4] = v17;
          v228[5] = v16;
          v228[6] = v327;
          v228[7] = v326;
          v228[8] = v325;
          v811.f64[v237] = 0.0;
          v236 = v816;
          v229[4] = v815;
          v229[5] = (int64x2_t)v236;
          v229[6].i64[0] = v817;
          v328 = v814;
          v236.f64[1] = v813.f64[1];
          *v231 = v813;
          v229[3] = (int64x2_t)v328;
          *v558 = v818;
          v238 = v237 > 4;
          v229[7].i64[1] = v819;
          v241 += 3;
          ++v237;
          v229[8].i8[0] = 0;
          if (v237 == 6)
          {
            v5 = v541;
            v23 = v533;
            v24 = v536;
            v25 = v530;
            goto LABEL_53;
          }
        }
        result = 0;
        v229[6].i64[0] = v817;
        v523 = v816;
        v229[4] = v815;
        v229[5] = (int64x2_t)v523;
        v524 = v814;
        *v231 = v813;
        v229[3] = (int64x2_t)v524;
        *v558 = v818;
        v229[7].i64[1] = v819;
        v229[8].i8[0] = 0;
        v23 = v533;
        v24 = v536;
        v25 = v530;
        if (!v238)
          return result;
      }
    }
LABEL_53:
    v329 = v5[3];
    if (v329[1].i8[4])
    {
      v330 = v228 + 9;
      v332 = v23 == v527 || v24 == v527 || v25 == v527;
      if (v332 || *v5 == v329 || v5[1] == v329 || v5[2] == v329)
      {
        v228[16] = 0u;
        v228[17] = 0u;
        v228[14] = 0u;
        v228[15] = 0u;
        v228[12] = 0u;
        v228[13] = 0u;
        v228[10] = 0u;
        v228[11] = 0u;
        *v330 = 0u;
      }
      else
      {
        v333 = (float64x2_t *)&v329[2];
        v334 = (float64x2_t)v329[5];
        v815 = v329[4];
        v816 = v334;
        v335 = v329[6].i64[0];
        v336 = (float64x2_t)v329[2];
        v814 = (float64x2_t)v329[3];
        v813 = v336;
        v559 = (float64x2_t *)&v329[6].u64[1];
        v818 = *(float64x2_t *)((char *)&v329[6] + 8);
        v337 = v329[7].i64[1];
        v817 = v335;
        v819 = v337;
        memset(v812, 0, sizeof(v812));
        v811 = 0u;
        v820 = 3;
        v821 = v329 + 2;
        v822 = 0;
        v824 = 0;
        v823 = 0uLL;
        sub_20F053450(&v820, (double *)&v823);
        v339 = 0;
        v340 = 0;
        v803 = v823;
        v341 = *(__int128 *)((char *)&v329[6] + 8);
        v342 = *(double *)&v329[7].i64[1];
        v804 = v824;
        v806 = v342;
        v805 = v341;
        v343 = 2;
        while (1)
        {
          v344 = fabs(*((double *)&v803 + v339) * 0.00000001);
          if (v344 >= 0.000001)
            v345 = v344 * 0.5;
          else
            v345 = 0.0000005;
          v811.f64[v339] = v345;
          v338.f64[0] = v812[0].f64[0];
          _V2.D[1] = v811.f64[1];
          _D3 = v811.f64[1];
          __asm { FMLA            D0, D3, V2.D[1] }
          v349 = sqrt(_D0 + v338.f64[0] * v338.f64[0]);
          v16.f64[0] = 1.0 / v349;
          if (v349 == 0.0)
            v16.f64[0] = 1.0;
          v548 = vmulq_f64(v338, v16).f64[0];
          v539 = vmulq_n_f64(v811, v16.f64[0]);
          v350 = __sincos_stret(v349);
          v351 = v539;
          v352 = v350.__cosval + (1.0 - v350.__cosval) * vmuld_n_f64(v351.f64[0], v351.f64[0]);
          v353 = (1.0 - v350.__cosval) * vmuld_lane_f64(v351.f64[0], v351, 1);
          v354 = v353 - v350.__sinval * v548;
          v355 = (1.0 - v350.__cosval) * vmuld_n_f64(v539.f64[0], v548);
          v356 = vmuld_lane_f64(v350.__sinval, v539, 1);
          v357 = v356 + v355;
          v358 = v350.__sinval * v548 + v353;
          v359 = v350.__cosval + (1.0 - v350.__cosval) * vmuld_lane_f64(v539.f64[1], v539, 1);
          v360 = (1.0 - v350.__cosval) * vmuld_lane_f64(v548, v539, 1);
          v351.f64[0] = v360 - v350.__sinval * v539.f64[0];
          v361 = v355 - v356;
          v362 = v350.__sinval * v539.f64[0] + v360;
          v363 = v350.__cosval + (1.0 - v350.__cosval) * vmuld_n_f64(v548, v548);
          v364 = *(double *)v329[3].i64;
          v365 = (float64x2_t)v329[2];
          v366 = *(double *)&v329[4].i64[1];
          v367 = *(float64x2_t *)((char *)&v329[3] + 8);
          v368 = *(double *)v329[6].i64;
          v369 = (float64x2_t)v329[5];
          v370 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v365, v352), v367, v358), v369, v361);
          v371 = v364 * v352 + v366 * v358 + v368 * v361;
          v372 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v365, v354), v367, v359), v369, v362);
          v373.f64[0] = v364 * v354;
          v374 = v364 * v354 + v366 * v359 + v368 * v362;
          v375 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v365, v357), v367, v351.f64[0]), v369, v363);
          v329[2] = (int64x2_t)v370;
          *(double *)v329[3].i64 = v371;
          *(float64x2_t *)((char *)v329 + 56) = v372;
          *(double *)&v329[4].i64[1] = v374;
          v329[5] = (int64x2_t)v375;
          *(double *)v329[6].i64 = v364 * v357 + v366 * v351.f64[0] + v368 * v363;
          *(_QWORD *)&v376.f64[0] = v329[7].i64[1];
          v377.f64[0] = v812[1].f64[1];
          v378 = v812[0].f64[1];
          v379 = vaddq_f64(*(float64x2_t *)((char *)&v329[6] + 8), *(float64x2_t *)((char *)v812 + 8));
          *(float64x2_t *)((char *)v329 + 104) = v379;
          *(_QWORD *)&v376.f64[0] = *(_OWORD *)&vaddq_f64(v376, v377);
          v329[7].i64[1] = *(_QWORD *)&v376.f64[0];
          v329[8].i8[0] = 0;
          v5 = v541;
          if (!sub_20F9B6D14(v562, v541, &v809, v376.f64[0], v379.f64[0], v377.f64[0], v378, v375.f64[0], v365.f64[0], v372.f64[0], v373))break;
          v329[6].i64[0] = v817;
          _Q0 = v816;
          v329[4] = v815;
          v329[5] = (int64x2_t)_Q0;
          v381 = v814;
          *v333 = v813;
          v329[3] = (int64x2_t)v381;
          *v559 = v818;
          v329[7].i64[1] = v819;
          v811.f64[v339] = -v345;
          v381.f64[0] = v812[0].f64[0];
          _V2.D[1] = v811.f64[1];
          _D3 = v811.f64[1];
          __asm { FMLA            D0, D3, V2.D[1] }
          v384 = sqrt(_Q0.f64[0] + v381.f64[0] * v381.f64[0]);
          v16.f64[0] = 1.0 / v384;
          if (v384 == 0.0)
            v16.f64[0] = 1.0;
          v549 = vmulq_f64(v381, v16).f64[0];
          v540 = vmulq_n_f64(v811, v16.f64[0]);
          v385 = __sincos_stret(v384);
          v386 = v540;
          v387 = v385.__cosval + (1.0 - v385.__cosval) * vmuld_n_f64(v386.f64[0], v386.f64[0]);
          v388 = (1.0 - v385.__cosval) * vmuld_lane_f64(v386.f64[0], v386, 1);
          v389 = v388 - v385.__sinval * v549;
          v390 = (1.0 - v385.__cosval) * vmuld_n_f64(v540.f64[0], v549);
          v391 = vmuld_lane_f64(v385.__sinval, v540, 1);
          v392 = v391 + v390;
          v393 = v385.__sinval * v549 + v388;
          v394 = v385.__cosval + (1.0 - v385.__cosval) * vmuld_lane_f64(v540.f64[1], v540, 1);
          v395 = (1.0 - v385.__cosval) * vmuld_lane_f64(v549, v540, 1);
          v386.f64[0] = v395 - v385.__sinval * v540.f64[0];
          v396 = v390 - v391;
          v397 = v385.__sinval * v540.f64[0] + v395;
          v398 = v385.__cosval + (1.0 - v385.__cosval) * vmuld_n_f64(v549, v549);
          v399 = *(double *)v329[3].i64;
          v400 = (float64x2_t)v329[2];
          v401 = *(double *)&v329[4].i64[1];
          v402 = *(float64x2_t *)((char *)&v329[3] + 8);
          v403 = *(double *)v329[6].i64;
          v404 = (float64x2_t)v329[5];
          v405 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v400, v387), v402, v393), v404, v396);
          v406 = v399 * v387 + v401 * v393 + v403 * v396;
          v407 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v400, v389), v402, v394), v404, v397);
          v408.f64[0] = v399 * v389;
          v409 = v399 * v389 + v401 * v394 + v403 * v397;
          v410 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v400, v392), v402, v386.f64[0]), v404, v398);
          v329[2] = (int64x2_t)v405;
          *(double *)v329[3].i64 = v406;
          *(float64x2_t *)((char *)v329 + 56) = v407;
          *(double *)&v329[4].i64[1] = v409;
          v329[5] = (int64x2_t)v410;
          *(double *)v329[6].i64 = v399 * v392 + v401 * v386.f64[0] + v403 * v398;
          *(_QWORD *)&v411.f64[0] = v329[7].i64[1];
          v412.f64[0] = v812[1].f64[1];
          v413 = v812[0].f64[1];
          v414 = vaddq_f64(*(float64x2_t *)((char *)&v329[6] + 8), *(float64x2_t *)((char *)v812 + 8));
          *(float64x2_t *)((char *)v329 + 104) = v414;
          *(_QWORD *)&v411.f64[0] = *(_OWORD *)&vaddq_f64(v411, v412);
          v329[7].i64[1] = *(_QWORD *)&v411.f64[0];
          v329[8].i8[0] = 0;
          if (!sub_20F9B6D14(v562, v541, &v807, v411.f64[0], v414.f64[0], v412.f64[0], v413, v410.f64[0], v400.f64[0], v407.f64[0], v408))break;
          v415.f64[0] = v345 + v345;
          v416.f64[0] = v810;
          v16.f64[0] = v808;
          v417 = *(_OWORD *)&vdivq_f64(vsubq_f64(v416, v16), v415);
          v418 = vdivq_f64(vsubq_f64(v809, v807), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v345 + v345), 0));
          v419 = v228[17];
          v420 = *v330;
          v421 = *((float64x2_t *)v228 + 10);
          v422 = *((float64x2_t *)v228 + 11);
          v423 = *((float64x2_t *)v228 + 12);
          v424 = *((float64x2_t *)v228 + 13);
          v425 = *((float64x2_t *)v228 + 14);
          v426 = v228[15];
          v650 = v228[16];
          v649 = v426;
          v648 = v425;
          v647 = v424;
          v646 = v423;
          v645 = v422;
          v644 = v421;
          v643 = v420;
          v651 = v419;
          *((_QWORD *)&v643 + ((v343 - 2) & 0x1F)) = *(_QWORD *)&v418.f64[0];
          v642 = v658;
          v641 = v657;
          v640 = v656;
          v639 = v655;
          v638 = v654;
          v637 = v653;
          v636 = v652;
          v635 = v651;
          v634 = v650;
          v633 = v649;
          v632 = v648;
          v631 = v647;
          v630 = v646;
          v629 = v645;
          v628 = v644;
          v627 = v643;
          *((_QWORD *)&v627 + ((v343 - 1) & 0x1F)) = *(_QWORD *)&v418.f64[1];
          v626 = v642;
          v625 = v641;
          v624 = v640;
          v623 = v639;
          v622 = v638;
          v621 = v637;
          v619 = v635;
          v620 = v636;
          v617 = v633;
          v618 = v634;
          v615 = v631;
          v616 = v632;
          v613 = v629;
          v614 = v630;
          v611 = v627;
          v612 = v628;
          *((_QWORD *)&v611 + (v343 & 0x1F)) = v417;
          v428 = v618;
          v427 = v619;
          v16 = v616;
          v429 = v617;
          v18 = v614;
          v17 = v615;
          v20 = v612;
          v19 = v613;
          *v330 = v611;
          v228[10] = v20;
          v228[11] = v19;
          v228[12] = v18;
          v228[13] = v17;
          v228[14] = v16;
          v228[15] = v429;
          v228[16] = v428;
          v228[17] = v427;
          v811.f64[v339] = 0.0;
          v338 = v816;
          v329[4] = v815;
          v329[5] = (int64x2_t)v338;
          v329[6].i64[0] = v817;
          v430 = v814;
          v338.f64[1] = v813.f64[1];
          *v333 = v813;
          v329[3] = (int64x2_t)v430;
          *v559 = v818;
          v340 = v339 > 4;
          v329[7].i64[1] = v819;
          v343 += 3;
          ++v339;
          v329[8].i8[0] = 0;
          if (v339 == 6)
          {
            v5 = v541;
            goto LABEL_77;
          }
        }
        result = 0;
        v329[6].i64[0] = v817;
        v525 = v816;
        v329[4] = v815;
        v329[5] = (int64x2_t)v525;
        v526 = v814;
        *v333 = v813;
        v329[3] = (int64x2_t)v526;
        *v559 = v818;
        v329[7].i64[1] = v819;
        v329[8].i8[0] = 0;
        if (!v340)
          return result;
      }
    }
LABEL_77:
    v431 = v5[4];
    if (!v431[1].i8[4])
      goto LABEL_99;
    v432 = (float64x2_t *)&v431[2];
    v433 = (float64x2_t)v431[5];
    v815 = v431[4];
    v816 = v433;
    v434 = v431[6].i64[0];
    v435 = (float64x2_t)v431[2];
    v814 = (float64x2_t)v431[3];
    v813 = v435;
    v436 = (float64x2_t *)&v431[6].u64[1];
    v818 = *(float64x2_t *)((char *)&v431[6] + 8);
    v437 = v431[7].i64[1];
    v817 = v434;
    v819 = v437;
    memset(v812, 0, sizeof(v812));
    v811 = 0u;
    v820 = 3;
    v821 = v431 + 2;
    v822 = 0;
    v824 = 0;
    v823 = 0uLL;
    sub_20F053450(&v820, (double *)&v823);
    v439 = 0;
    v440 = 0;
    v441 = v228 + 18;
    v803 = v823;
    v442 = *(__int128 *)((char *)&v431[6] + 8);
    *(_QWORD *)&v443.f64[0] = v431[7].i64[1];
    v804 = v824;
    v806 = v443.f64[0];
    v805 = v442;
    v444 = 2;
    while (1)
    {
      v445.f64[0] = fabs(*((double *)&v803 + v439) * 0.00000001);
      v446.f64[0] = v445.f64[0] * 0.5;
      if (v445.f64[0] >= 0.000001)
        v447 = v445.f64[0] * 0.5;
      else
        v447 = 0.0000005;
      v811.f64[v439] = v447;
      if (v431[1].i8[4] && v431[8].i8[1])
      {
        v438.f64[0] = v812[0].f64[0];
        _V2.D[1] = v811.f64[1];
        _D3 = v811.f64[1];
        __asm { FMLA            D0, D3, V2.D[1] }
        v451 = sqrt(_D0 + v438.f64[0] * v438.f64[0]);
        v16.f64[0] = 1.0 / v451;
        if (v451 == 0.0)
          v16.f64[0] = 1.0;
        v554 = vmulq_n_f64(v811, v16.f64[0]);
        v560 = vmulq_f64(v438, v16).f64[0];
        v452 = __sincos_stret(v451);
        v446.f64[0] = v452.__cosval;
        v453 = v554;
        v16.f64[0] = v446.f64[0] + (1.0 - v446.f64[0]) * vmuld_n_f64(v453.f64[0], v453.f64[0]);
        v454 = (1.0 - v452.__cosval) * vmuld_lane_f64(v453.f64[0], v453, 1);
        v455 = v454 - v452.__sinval * v560;
        v20.f64[0] = (1.0 - v452.__cosval) * vmuld_n_f64(v554.f64[0], v560);
        v456 = vmuld_lane_f64(v452.__sinval, v554, 1);
        v457 = v456 + v20.f64[0];
        v458 = v452.__sinval * v560 + v454;
        v459 = v446.f64[0] + (1.0 - v446.f64[0]) * vmuld_lane_f64(v554.f64[1], v554, 1);
        v460 = (1.0 - v452.__cosval) * vmuld_lane_f64(v560, v554, 1);
        v453.f64[0] = v460 - v452.__sinval * v554.f64[0];
        v20.f64[0] = v20.f64[0] - v456;
        v445.f64[0] = v452.__sinval * v554.f64[0] + v460;
        v446.f64[0] = v446.f64[0] + (1.0 - v446.f64[0]) * vmuld_n_f64(v560, v560);
        *(_QWORD *)&v443.f64[0] = v431[3].i64[0];
        v18 = (float64x2_t)v431[2];
        v461 = *(double *)&v431[4].i64[1];
        v462 = *(float64x2_t *)((char *)&v431[3] + 8);
        v463 = *(double *)v431[6].i64;
        v464 = (float64x2_t)v431[5];
        v465 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v16.f64[0]), v462, v458), v464, v20.f64[0]);
        v16.f64[0] = v443.f64[0] * v16.f64[0] + v461 * v458 + v463 * v20.f64[0];
        v19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v455), v462, v459), v464, v445.f64[0]);
        v20.f64[0] = v443.f64[0] * v455;
        v445.f64[0] = v443.f64[0] * v455 + v461 * v459 + v463 * v445.f64[0];
        v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v457), v462, v453.f64[0]), v464, v446.f64[0]);
        v443.f64[0] = v443.f64[0] * v457 + v461 * v453.f64[0];
        v446.f64[0] = v443.f64[0] + v463 * v446.f64[0];
        v431[2] = (int64x2_t)v465;
        v431[3].i64[0] = *(_QWORD *)&v16.f64[0];
        *(float64x2_t *)((char *)v431 + 56) = v19;
        v431[4].i64[1] = *(_QWORD *)&v445.f64[0];
        v431[5] = (int64x2_t)v17;
        v431[6].i64[0] = *(_QWORD *)&v446.f64[0];
        if (v431[8].i8[0])
        {
          *(_QWORD *)&v445.f64[0] = v431[7].i64[1];
          v443.f64[0] = v812[1].f64[1];
          v16.f64[0] = v812[0].f64[1];
          *(_QWORD *)&v445.f64[0] = *(_OWORD *)&vaddq_f64(v445, v443);
          v446 = vaddq_f64(*v436, *(float64x2_t *)((char *)v812 + 8));
          *v436 = v446;
          v431[7].i64[1] = *(_QWORD *)&v445.f64[0];
        }
      }
      if (!sub_20F9B6D14(v562, v5, &v809, v445.f64[0], v446.f64[0], v443.f64[0], v16.f64[0], v17.f64[0], v18.f64[0], v19.f64[0], v20))break;
      v467 = v816;
      v431[4] = v815;
      v431[5] = (int64x2_t)v467;
      v431[6].i64[0] = v817;
      v469 = v814;
      v468 = v813;
      *v432 = v813;
      v431[3] = (int64x2_t)v469;
      *v436 = v818;
      v431[7].i64[1] = v819;
      v469.f64[0] = -v447;
      v811.f64[v439] = -v447;
      if (v431[1].i8[4] && v431[8].i8[1])
      {
        v468.f64[0] = v812[0].f64[0];
        _V2.D[1] = v811.f64[1];
        _D3 = v811.f64[1];
        __asm { FMLA            D0, D3, V2.D[1] }
        v473 = sqrt(_D0 + v468.f64[0] * v468.f64[0]);
        v16.f64[0] = 1.0 / v473;
        if (v473 == 0.0)
          v16.f64[0] = 1.0;
        v555 = vmulq_n_f64(v811, v16.f64[0]);
        v561 = vmulq_f64(v468, v16).f64[0];
        v474 = __sincos_stret(v473);
        v468.f64[0] = v474.__cosval;
        v475 = v555;
        v16.f64[0] = v468.f64[0] + (1.0 - v468.f64[0]) * vmuld_n_f64(v475.f64[0], v475.f64[0]);
        v476 = (1.0 - v474.__cosval) * vmuld_lane_f64(v475.f64[0], v475, 1);
        v477 = v476 - v474.__sinval * v561;
        v20.f64[0] = (1.0 - v474.__cosval) * vmuld_n_f64(v555.f64[0], v561);
        v478 = vmuld_lane_f64(v474.__sinval, v555, 1);
        v479 = v478 + v20.f64[0];
        v480 = v474.__sinval * v561 + v476;
        v481 = v468.f64[0] + (1.0 - v468.f64[0]) * vmuld_lane_f64(v555.f64[1], v555, 1);
        v482 = (1.0 - v474.__cosval) * vmuld_lane_f64(v561, v555, 1);
        v475.f64[0] = v482 - v474.__sinval * v555.f64[0];
        v20.f64[0] = v20.f64[0] - v478;
        v469.f64[0] = v474.__sinval * v555.f64[0] + v482;
        v468.f64[0] = v468.f64[0] + (1.0 - v468.f64[0]) * vmuld_n_f64(v561, v561);
        *(_QWORD *)&v466.f64[0] = v431[3].i64[0];
        v18 = (float64x2_t)v431[2];
        v483 = *(double *)&v431[4].i64[1];
        v484 = *(float64x2_t *)((char *)&v431[3] + 8);
        v485 = *(double *)v431[6].i64;
        v486 = (float64x2_t)v431[5];
        v487 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v16.f64[0]), v484, v480), v486, v20.f64[0]);
        v16.f64[0] = v466.f64[0] * v16.f64[0] + v483 * v480 + v485 * v20.f64[0];
        v19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v477), v484, v481), v486, v469.f64[0]);
        v20.f64[0] = v466.f64[0] * v477;
        v469.f64[0] = v466.f64[0] * v477 + v483 * v481 + v485 * v469.f64[0];
        v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v479), v484, v475.f64[0]), v486, v468.f64[0]);
        v466.f64[0] = v466.f64[0] * v479 + v483 * v475.f64[0];
        v468.f64[0] = v466.f64[0] + v485 * v468.f64[0];
        v431[2] = (int64x2_t)v487;
        v431[3].i64[0] = *(_QWORD *)&v16.f64[0];
        *(float64x2_t *)((char *)v431 + 56) = v19;
        v431[4].i64[1] = *(_QWORD *)&v469.f64[0];
        v431[5] = (int64x2_t)v17;
        v431[6].i64[0] = *(_QWORD *)&v468.f64[0];
        if (v431[8].i8[0])
        {
          *(_QWORD *)&v469.f64[0] = v431[7].i64[1];
          v466.f64[0] = v812[1].f64[1];
          v16.f64[0] = v812[0].f64[1];
          *(_QWORD *)&v469.f64[0] = *(_OWORD *)&vaddq_f64(v469, v466);
          v468 = vaddq_f64(*v436, *(float64x2_t *)((char *)v812 + 8));
          *v436 = v468;
          v431[7].i64[1] = *(_QWORD *)&v469.f64[0];
        }
      }
      if (!sub_20F9B6D14(v562, v5, &v807, v469.f64[0], v468.f64[0], v466.f64[0], v16.f64[0], v17.f64[0], v18.f64[0], v19.f64[0], v20))break;
      v488.f64[0] = v447 + v447;
      v489.f64[0] = v810;
      v16.f64[0] = v808;
      v490 = *(_OWORD *)&vdivq_f64(vsubq_f64(v489, v16), v488);
      v491 = vdivq_f64(vsubq_f64(v809, v807), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v447 + v447), 0));
      v493 = v228[25];
      v492 = v228[26];
      v494 = *v441;
      v495 = *((float64x2_t *)v228 + 19);
      v496 = *((float64x2_t *)v228 + 20);
      v497 = *((float64x2_t *)v228 + 21);
      v498 = *((float64x2_t *)v228 + 22);
      v499 = *((float64x2_t *)v228 + 23);
      v601 = *((float64x2_t *)v228 + 24);
      v602 = v493;
      v599 = v498;
      v600 = v499;
      v597 = v496;
      v598 = v497;
      v595 = v494;
      v596 = v495;
      v603 = v492;
      *((_QWORD *)&v595 + ((v444 - 2) & 0x1F)) = *(_QWORD *)&v491.f64[0];
      v593 = v609;
      v594 = v610;
      v591 = v607;
      v592 = v608;
      v589 = v605;
      v590 = v606;
      v587 = v603;
      v588 = v604;
      v585 = v601;
      v586 = v602;
      v583 = v599;
      v584 = v600;
      v581 = v597;
      v582 = v598;
      v579 = v595;
      v580 = v596;
      *((_QWORD *)&v579 + ((v444 - 1) & 0x1F)) = *(_QWORD *)&v491.f64[1];
      v577 = v593;
      v578 = v594;
      v575 = v591;
      v576 = v592;
      v573 = v589;
      v574 = v590;
      v571 = v587;
      v572 = v588;
      v569 = v585;
      v570 = v586;
      v567 = v583;
      v568 = v584;
      v565 = v581;
      v566 = v582;
      v563 = v579;
      v564 = v580;
      *((_QWORD *)&v563 + (v444 & 0x1F)) = v490;
      v501 = v570;
      v500 = v571;
      v16 = v568;
      v443 = v569;
      v18 = v566;
      v17 = v567;
      v20 = v564;
      v19 = v565;
      *v441 = v563;
      v228[19] = v20;
      v228[20] = v19;
      v228[21] = v18;
      v228[22] = v17;
      v228[23] = v16;
      v228[24] = v443;
      v228[25] = v501;
      v228[26] = v500;
      v811.f64[v439] = 0.0;
      v438 = v816;
      v431[4] = v815;
      v431[5] = (int64x2_t)v438;
      v431[6].i64[0] = v817;
      v502 = v814;
      v438.f64[1] = v813.f64[1];
      *v432 = v813;
      v431[3] = (int64x2_t)v502;
      v503 = v818;
      v440 = v439 > 4;
      v431[7].i64[1] = v819;
      v444 += 3;
      ++v439;
      *v436 = v503;
      if (v439 == 6)
        goto LABEL_99;
    }
    v504 = v816;
    v431[4] = v815;
    v431[5] = (int64x2_t)v504;
    v431[6].i64[0] = v817;
    v505 = v814;
    *v432 = v813;
    v431[3] = (int64x2_t)v505;
    *v436 = v818;
    v431[7].i64[1] = v819;
    if (!v440)
    {
      return 0;
    }
    else
    {
LABEL_99:
      v506 = v5[5];
      if (v506[1].i8[4])
      {
        v507 = *(double *)v506[2].i64;
        v508 = fabs(v507 * 0.00000001);
        if (v508 >= 0.000001)
          v509 = v508 * 0.5;
        else
          v509 = 0.0000005;
        *(double *)v506[2].i64 = v507 + v509;
        v506[2].i8[8] = 0;
        if (sub_20F9B6D14(v562, v5, &v813, v507 + v509, v508 * 0.5, 0.000001, v16.f64[0], v17.f64[0], v18.f64[0], v19.f64[0], v20)&& (*(double *)v506[2].i64 = v507 - v509, v506[2].i8[8] = 0, sub_20F9B6D14(v562, v5, &v811, v507 - v509, v510, v511, v512, v513, v514, v515, v516)))
        {
          v517.f64[0] = v509 + v509;
          v518.f64[0] = v814.f64[0];
          v519.f64[0] = v812[0].f64[0];
          v520 = *(_OWORD *)&vdivq_f64(vsubq_f64(v518, v519), v517);
          v517.f64[1] = v509 + v509;
          v228[27] = vdivq_f64(vsubq_f64(v813, v811), v517);
          *((_QWORD *)v228 + 56) = v520;
          *(double *)v506[2].i64 = v507;
          v506[2].i8[8] = 0;
          return 1;
        }
        else
        {
          result = 0;
          *(double *)v506[2].i64 = v507;
          v506[2].i8[8] = 0;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_20F9B6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v21 = *(_OWORD *)&STACK[0x1030];
  *(_OWORD *)(v19 + 32) = *(_OWORD *)&STACK[0x1020];
  *(_OWORD *)(v19 + 48) = v21;
  *(_QWORD *)(v19 + 64) = STACK[0x1040];
  v22 = *(_OWORD *)&STACK[0x1010];
  *(_OWORD *)v19 = *(_OWORD *)&STACK[0x1000];
  *(_OWORD *)(v19 + 16) = v22;
  *(_OWORD *)a19 = *(_OWORD *)a17;
  *(_QWORD *)(a19 + 16) = *(_QWORD *)(a17 + 16);
  *(_BYTE *)(v20 + 128) = 0;
  _Unwind_Resume(a1);
}

BOOL sub_20F9B6D14(uint64_t a1, int64x2_t **a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t a11)
{
  _BOOL8 v11;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t *v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  double v25;
  float64x2_t v27;
  float64x2_t v28;
  int8x16_t v29;
  float64x2_t v30;
  int64x2_t v38;
  int64x2_t v39;
  double v40;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int8x16_t v45;
  float64x2_t v46;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  double v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int8x16_t v59;
  float64x2_t v60;
  float64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  double v67;
  float64x2_t v69;
  float64x2_t v70;
  int8x16_t v71;
  float64x2_t v72;
  float64x2_t v74;
  double v78;
  float64x2_t v84;
  double v105;
  double v106;
  double v109;
  float64x2_t v112;
  float64x2_t v113;
  double v115;
  float64x2_t v118;
  float64x2_t v120;
  double v122;
  double v127;
  double v130;
  float64x2_t v131;
  double v134;
  float64x2_t v136;
  double v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  unint64_t v141;
  float64x2_t v142;
  double v143;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  double v148;
  double v149;
  float64_t v150;
  float64x2_t v151;
  double v152;
  double v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  float64x2_t v175;
  BOOL v176;
  double v177;
  float64x2_t v178;
  double v179;
  double v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int64x2_t v192;
  int64x2_t v193;
  float64_t v194;
  float64_t v195;
  double v196;
  double v197;
  float64_t v198;
  float64x2_t v199;
  __int128 v200;
  float64x2_t v201;
  __int128 v202;
  float64x2_t v203;
  __int128 v204;
  float64x2_t v205;
  uint64_t v206;
  uint64_t v207;
  float64x2_t v208;
  __int128 v209;
  float64x2_t v210;
  __int128 v211;
  float64x2_t v212;
  __int128 v213;
  float64x2_t v214;
  float64_t v215;
  uint64_t v216;
  int64x2_t v217;
  float64_t v218;
  int64x2_t v219;
  float64_t v220;
  float64x2_t v221;
  double v222;
  float64x2_t v223;
  double v224;

  if (*(_BYTE *)(a1 + 193))
    return 0;
  *(_BYTE *)(a1 + 192) = 0;
  v15 = *a2;
  v14 = a2[1];
  v17 = a2[2];
  v16 = a2[3];
  v18 = a2[4];
  v19 = *(double *)a2[5][2].i64;
  v20 = *(double *)(a1 + 176) + v19;
  v21 = v19 + *(double *)(a1 + 184);
  *(_QWORD *)&v22.f64[0] = (*a2)[3].i64[0];
  v23 = (*a2)[2];
  v24 = *(int64x2_t *)((char *)*a2 + 56);
  v25 = *(double *)(*a2)[6].i64;
  _Q5 = (*a2)[5];
  v27 = (float64x2_t)vzip1q_s64(v23, v24);
  v28 = (float64x2_t)vzip2q_s64(v23, v24);
  *(_QWORD *)&v22.f64[1] = (*a2)[4].i64[1];
  v29 = vextq_s8((int8x16_t)v28, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
  *(_QWORD *)&a11.f64[0] = (*a2)[7].i64[1];
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, *(double *)&(*a2)[6].i64[1]), v28, *(float64x2_t *)((char *)&(*a2)[6] + 8), 1), v22, a11.f64[0]);
  _D16 = (*a2)[7].i64[0];
  __asm { FMLA            D18, D16, V5.D[1] }
  a11.f64[0] = _D18 + v25 * a11.f64[0];
  _Q16 = vnegq_f64(v30);
  *(_QWORD *)&v30.f64[0] = (*a2)[5].i64[0];
  *(_QWORD *)&v28.f64[1] = v29.i64[0];
  v212 = v22;
  v213 = *(unint64_t *)&v25;
  v208 = v27;
  v209 = *(unint64_t *)&v30.f64[0];
  v210 = v28;
  v211 = v29.u64[1];
  v214 = _Q16;
  *(_QWORD *)&v215 = *(_OWORD *)&vnegq_f64(a11);
  v216 = 0x3FF0000000000000;
  *(_QWORD *)&v22.f64[0] = v14[3].i64[0];
  v38 = v14[2];
  v39 = *(int64x2_t *)((char *)v14 + 56);
  v40 = *(double *)v14[6].i64;
  _Q5 = v14[5];
  v42 = (float64x2_t)vzip1q_s64(v38, v39);
  v43 = (float64x2_t)vdupq_laneq_s64(_Q5, 1);
  *(_QWORD *)&v22.f64[1] = v14[4].i64[1];
  v44 = (float64x2_t)vzip2q_s64(v38, v39);
  v45 = vextq_s8((int8x16_t)v44, (int8x16_t)v43, 8uLL);
  *(_QWORD *)&v43.f64[0] = v14[7].i64[1];
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)&v14[6].i64[1]), v44, *(float64x2_t *)((char *)&v14[6] + 8), 1), v22, v43.f64[0]);
  *(_QWORD *)&_Q16.f64[0] = v14[7].i64[0];
  __asm { FMLA            D18, D16, V5.D[1] }
  v43.f64[0] = _D18 + v40 * v43.f64[0];
  v48 = vnegq_f64(v46);
  *(_QWORD *)&v46.f64[0] = v14[5].i64[0];
  *(_QWORD *)&v44.f64[1] = v45.i64[0];
  v203 = v22;
  v204 = *(unint64_t *)&v40;
  v201 = v44;
  v202 = v45.u64[1];
  v199 = v42;
  v200 = *(unint64_t *)&v46.f64[0];
  v205 = v48;
  v206 = *(_OWORD *)&vnegq_f64(v43);
  v207 = 0x3FF0000000000000;
  sub_20F13632C(&v208, &v199, (float64x2_t *)&v217, *(double *)(v15[1].i64[1] + 816), *(double *)(v14[1].i64[1] + 816), v20, v42);
  v197 = v218;
  v196 = v220;
  v192 = v219;
  v193 = v217;
  v49 = v222;
  v50 = v224;
  v194 = v223.f64[1];
  v195 = v221.f64[1];
  *(_QWORD *)&v51.f64[0] = v17[3].i64[0];
  v52 = v17[2];
  v53 = *(int64x2_t *)((char *)v17 + 56);
  v54 = *(double *)v17[6].i64;
  _Q4 = v17[5];
  v56 = (float64x2_t)vzip1q_s64(v52, v53);
  v57 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
  *(_QWORD *)&v51.f64[1] = v17[4].i64[1];
  v58 = (float64x2_t)vzip2q_s64(v52, v53);
  v59 = vextq_s8((int8x16_t)v58, (int8x16_t)v57, 8uLL);
  *(_QWORD *)&v57.f64[0] = v17[7].i64[1];
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, *(double *)&v17[6].i64[1]), v58, *(float64x2_t *)((char *)&v17[6] + 8), 1), v51, v57.f64[0]);
  _D7 = v17[7].i64[0];
  __asm { FMLA            D17, D7, V4.D[1] }
  v57.f64[0] = _D17 + v54 * v57.f64[0];
  _Q7 = vnegq_f64(v60);
  v64 = vnegq_f64(v57);
  *(_QWORD *)&v60.f64[0] = v17[5].i64[0];
  *(_QWORD *)&v58.f64[1] = v59.i64[0];
  v212 = v51;
  v213 = *(unint64_t *)&v54;
  v208 = v56;
  v209 = *(unint64_t *)&v60.f64[0];
  v210 = v58;
  v211 = v59.u64[1];
  v214 = _Q7;
  v215 = v64.f64[0];
  v216 = 0x3FF0000000000000;
  *(_QWORD *)&v51.f64[0] = v16[3].i64[0];
  v65 = v16[2];
  v66 = *(int64x2_t *)((char *)v16 + 56);
  v67 = *(double *)v16[6].i64;
  _Q4 = v16[5];
  v69 = (float64x2_t)vzip1q_s64(v65, v66);
  v70 = (float64x2_t)vzip2q_s64(v65, v66);
  *(_QWORD *)&v51.f64[1] = v16[4].i64[1];
  v71 = vextq_s8((int8x16_t)v70, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  *(_QWORD *)&v64.f64[0] = v16[7].i64[1];
  v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)&v16[6].i64[1]), v70, *(float64x2_t *)((char *)&v16[6] + 8), 1), v51, v64.f64[0]);
  *(_QWORD *)&_Q7.f64[0] = v16[7].i64[0];
  __asm { FMLA            D17, D7, V4.D[1] }
  v64.f64[0] = _D17 + v67 * v64.f64[0];
  v74 = vnegq_f64(v72);
  *(_QWORD *)&v72.f64[0] = v16[5].i64[0];
  *(_QWORD *)&v70.f64[1] = v71.i64[0];
  v203 = v51;
  v204 = *(unint64_t *)&v67;
  v201 = v70;
  v202 = v71.u64[1];
  v199 = v69;
  v200 = *(unint64_t *)&v72.f64[0];
  v205 = v74;
  v206 = *(_OWORD *)&vnegq_f64(v64);
  v207 = 0x3FF0000000000000;
  sub_20F13632C(&v208, &v199, (float64x2_t *)&v217, *(double *)(v17[1].i64[1] + 816), *(double *)(v16[1].i64[1] + 816), v21, (float64x2_t)v71.u64[1]);
  _Q3 = *(float64x2_t *)(a1 + 40);
  _Q1 = (float64x2_t)v18[2];
  _Q2 = *(float64x2_t *)((char *)&v18[3] + 8);
  _Q0 = (float64x2_t)v18[5];
  v78 = *(double *)(a1 + 56);
  _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q3.f64[0]), _Q2, _Q3, 1), _Q0, v78);
  _Q5 = *(__int128 *)((char *)&v18[6] + 8);
  _D16 = v18[2].i64[1];
  __asm { FMLS            D18, D16, V5.D[1] }
  _V25.D[1] = v192.i64[1];
  v84 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v193, v192), _Q7.f64[0]), (float64x2_t)vzip2q_s64(v193, v192), _Q7, 1);
  _Q22.f64[1] = v194;
  _V26.D[1] = v195;
  _D20 = v193.i64[1];
  __asm { FMLA            D19, D20, V22.D[1] }
  _D21 = v192.i64[1];
  __asm { FMLA            D20, D21, V22.D[1] }
  _V23.D[1] = v194;
  _Q22.f64[0] = v195;
  __asm { FMLA            D21, D22, V23.D[1] }
  _D23 = _Q7.f64[1];
  __asm { FMLA            D22, D23, V26.D[1] }
  _D20 = _D20 + v50 * v196;
  _D21 = _D21 + v50 * v49;
  __asm { FMLA            D24, D20, V25.D[1] }
  *(_QWORD *)&_Q25.f64[0] = v18[3].i64[0];
  __asm { FMLA            D24, D21, V26.D[1] }
  _D26 = *(double *)&v18[4].i64[1];
  __asm { FMLA            D23, D24, V7.D[1] }
  _D24 = v18[4].i64[0];
  __asm { FMLS            D7, D24, V5.D[1] }
  _D24 = *(double *)&v18[7].i64[1];
  __asm
  {
    FMLS            D18, D25, V24.D[0]
    FMLS            D7, D26, V24.D[0]
    FMLA            D18, D7, V3.D[1]
    FMLA            D7, D26, V3.D[1]
  }
  _D17 = v18[5].i64[1];
  __asm { FMLS            D3, D17, V5.D[1] }
  _D17 = *(double *)v18[6].i64;
  __asm { FMLS            D3, D17, V24.D[0] }
  _Q3.f64[0] = _D18 + _Q3.f64[0] * v78;
  v105 = _Q7.f64[0] + _D17 * v78;
  v106 = (_D19 + v50 * v197) * v197 + _D20 * v196;
  _Q20.f64[0] = v197;
  _Q20.f64[1] = v196;
  _Q16 = vmlaq_n_f64(v84, _Q20, v105);
  _Q22.f64[0] = _Q22.f64[0] + v49 * v105;
  v109 = _D23 + (v106 + _D21 * v49) * v105;
  _Q23.f64[0] = v218;
  _Q23.f64[1] = v220;
  _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v217, v219), v223.f64[0]), (float64x2_t)vzip2q_s64(v217, v219), v223, 1), _Q23, v224);
  v112 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v217, _Q16.f64[0]), (float64x2_t)v219, _Q16, 1);
  __asm { FMLA            D7, D27, V16.D[1] }
  _Q16.f64[0] = _Q16.f64[1];
  __asm { FMLS            D20, D16, V6.D[1] }
  _Q6.f64[1] = v221.f64[1];
  _Q23.f64[0] = v223.f64[1];
  __asm { FMLA            D16, D23, V6.D[1] }
  _Q16.f64[0] = _Q16.f64[0] + v222 * v224;
  v113 = vmlaq_n_f64(v112, v221, _Q22.f64[0]);
  _Q6 = *(float64x2_t *)(a1 + 24);
  v115 = _Q7.f64[0] + v222 * _Q22.f64[0];
  _Q7 = *(float64x2_t *)(a1 + 8);
  __asm { FMLS            D20, D22, V16.D[0] }
  _Q22.f64[0] = _Q7.f64[1];
  __asm { FMLA            D16, D22, V7.D[1] }
  _Q22.f64[0] = _Q6.f64[1];
  __asm { FMLA            D16, D22, V6.D[1] }
  _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0]);
  v118 = vmulq_n_f64(_Q6, _Q16.f64[0]);
  _Q7 = vmulq_n_f64(_Q7, _Q16.f64[0]);
  v120 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)_Q2), v113.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q1, (int64x2_t)_Q2), v113, 1);
  _Q2.f64[0] = v113.f64[1];
  __asm
  {
    FMLA            D1, D2, V0.D[1]
    FMLA            D0, D2, V5.D[1]
  }
  _Q2 = vmulq_f64(_Q7, _Q7);
  *(float64_t *)&_Q5 = _Q7.f64[1];
  __asm { FMLA            D2, D5, V7.D[1] }
  v122 = _Q20.f64[0] + v109 + *(double *)(a1 + 64) + _Q3.f64[0];
  _Q25.f64[1] = _D26;
  _Q16 = vmlaq_n_f64(v120, _Q25, v115);
  _Q1.f64[0] = _Q1.f64[0] + _D17 * v115;
  _Q2.f64[0] = sqrt(vmlad_n_f64(_Q2.f64[0], v118.f64[0], v118.f64[0]));
  _ZF = _Q2.f64[0] == 0.0;
  _Q2.f64[0] = 1.0 / _Q2.f64[0];
  if (_ZF)
    _Q2.f64[0] = 1.0;
  v127 = _D0 + _D24 * v115 + v122;
  _D4 = _Q16.f64[1];
  __asm { FMLA            D3, D4, V16.D[1] }
  _Q1.f64[1] = v127;
  v130 = 1.0 / sqrt(_D3 + _Q1.f64[0] * _Q1.f64[0] + v127 * v127);
  v131 = vmulq_n_f64(_Q1, v130);
  _Q19 = vmulq_n_f64(_Q16, v130);
  _Q1 = vmulq_f64(_Q19, _Q19);
  _D3 = _Q19.f64[1];
  __asm { FMLA            D1, D3, V19.D[1] }
  v134 = sqrt(vmlad_n_f64(_Q1.f64[0], v131.f64[0], v131.f64[0]));
  _Q1.f64[0] = 1.0 / v134;
  if (v134 == 0.0)
    _Q1.f64[0] = 1.0;
  v136 = vmulq_f64(v131, _Q1);
  if (v134 == 0.0)
    v137 = 1.0;
  else
    v137 = v134;
  v138 = fabs(v136.f64[0]);
  v11 = v138 > 0.000001;
  if (v138 > 0.000001)
  {
    v139 = vmulq_f64(v118, _Q2);
    v140 = vmulq_n_f64(_Q7, _Q2.f64[0]);
    v141 = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    _Q2.f64[0] = *(float64_t *)(a1 + 168);
    v142 = *(float64x2_t *)(a1 + 152);
    *(_QWORD *)&v143 = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
    *(_QWORD *)&v144 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
    v145 = vmulq_n_f64(_Q19, _Q1.f64[0]);
    v146 = (float64x2_t)vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL);
    v147 = fabs(v145.f64[0]);
    v148 = -v131.f64[1] / v137;
    v149 = fabs(v146.f64[0]);
    if (*(_BYTE *)(a1 + 194))
    {
      v176 = v147 <= v149;
      v150 = v145.f64[0];
      v151.f64[1] = v146.f64[0];
      v151.f64[0] = sqrt(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v151, v151).f64[1]) + v136.f64[0] * v136.f64[0]);
      _Q22.f64[0] = v136.f64[0] / v151.f64[0];
      v151.f64[0] = -v146.f64[0] / v151.f64[0];
      v152 = sqrt(v145.f64[0] * v145.f64[0] + v136.f64[0] * v136.f64[0]);
      _Q25.f64[0] = -v136.f64[0] / v152;
      v153 = v145.f64[0] / v152;
      if (v176)
      {
        _Q25.f64[0] = 0.0;
      }
      else
      {
        _Q22.f64[0] = 0.0;
        v151.f64[0] = v153;
      }
      v154.f64[0] = v145.f64[0];
      v154.f64[1] = v146.f64[0];
      v155.f64[0] = v146.f64[0];
      v155.f64[1] = v136.f64[0];
      v156.f64[0] = v151.f64[0];
      v156.f64[1] = _Q25.f64[0];
      v157 = vmulq_f64(v156, v155);
      v158 = vmulq_f64(_Q22, v145);
      v159.f64[0] = v136.f64[0];
      v159.f64[1] = v145.f64[0];
      v160.f64[0] = _Q22.f64[0];
      v160.f64[1] = v151.f64[0];
      *(_QWORD *)&v161 = *(_OWORD *)&vsubq_f64(v158, vmulq_f64(_Q25, v146));
      v162 = vsubq_f64(v157, vmulq_f64(v160, v159));
      _Q22.f64[1] = v162.f64[1];
      _Q25.f64[1] = v162.f64[0];
      v151.f64[1] = v161;
      *(_QWORD *)&v140.f64[1] = v141;
      v163 = vsubq_f64(v140, v154);
      v164 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q25, v163.f64[0]), _Q22, v163, 1), v151, vsubq_f64(v139, v136).f64[0]);
      v165 = vmulq_f64(v154, v142).f64[0] + v144 * _Q1.f64[0] * v143 + v131.f64[0] * _Q1.f64[0] * _Q2.f64[0] - v148;
      v166 = *(double *)(a1 + 128);
      v167 = v164.f64[1];
      v168 = vmuld_n_f64(v164.f64[0], v164.f64[0]) + vmuld_lane_f64(v164.f64[1], v164, 1);
      v169 = v166 * v166 * v168;
      if (v169 >= 0.00000001)
      {
        v170 = sqrt(v168);
        v198 = v164.f64[0];
        v171 = log1p(v169);
        v164.f64[0] = v198;
        v166 = sqrt(v171) / v170;
      }
      a3->f64[0] = v164.f64[0] * v166;
      a3->f64[1] = v167 * v166;
      v172 = *(double *)(a1 + 144);
      v173 = v165 * v165 * (v172 * v172);
      if (v173 >= 0.00000001)
      {
        v174 = sqrt(log1p(v173));
        if (v165 <= 0.0)
          v174 = -v174;
      }
      else
      {
        v174 = v165 * v172;
      }
      a3[1].f64[0] = v174;
    }
    else
    {
      v175.f64[0] = v145.f64[0];
      v175.f64[1] = v146.f64[0];
      v176 = v147 <= v149;
      v177 = sqrt(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v175, v175).f64[1]) + v136.f64[0] * v136.f64[0]);
      _Q22.f64[0] = v136.f64[0] / v177;
      v178.f64[0] = -v146.f64[0] / v177;
      v179 = sqrt(v145.f64[0] * v145.f64[0] + v136.f64[0] * v136.f64[0]);
      _Q25.f64[0] = -v136.f64[0] / v179;
      v180 = v145.f64[0] / v179;
      if (v176)
        _Q25.f64[0] = 0.0;
      else
        _Q22.f64[0] = 0.0;
      v181.f64[0] = v145.f64[0];
      v181.f64[1] = v146.f64[0];
      v182.f64[0] = v146.f64[0];
      v182.f64[1] = v136.f64[0];
      if (!v176)
        v178.f64[0] = v180;
      v183.f64[0] = v178.f64[0];
      v183.f64[1] = _Q25.f64[0];
      v184 = vmulq_f64(v183, v182);
      v185 = vmulq_f64(_Q22, v145);
      v186.f64[0] = v136.f64[0];
      v186.f64[1] = v145.f64[0];
      v187.f64[0] = _Q22.f64[0];
      v187.f64[1] = v178.f64[0];
      *(_QWORD *)&v188 = *(_OWORD *)&vsubq_f64(v185, vmulq_f64(_Q25, v146));
      v189 = vsubq_f64(v184, vmulq_f64(v187, v186));
      _Q22.f64[1] = v189.f64[1];
      _Q25.f64[1] = v189.f64[0];
      v178.f64[1] = v188;
      *(_QWORD *)&v140.f64[1] = v141;
      v190 = vsubq_f64(v140, v181);
      v131.f64[0] = vmulq_f64(v181, v142).f64[0]
                  + v144 * _Q1.f64[0] * v143
                  + v131.f64[0] * _Q1.f64[0] * _Q2.f64[0]
                  - v148;
      *a3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q25, v190.f64[0]), _Q22, v190, 1), v178, vsubq_f64(v139, v136).f64[0]);
      a3[1].f64[0] = v131.f64[0];
      _Q2.f64[0] = *(float64_t *)(a1 + 144);
      *a3 = vmulq_f64(*a3, *(float64x2_t *)(a1 + 128));
      *(_QWORD *)&a3[1].f64[0] = *(_OWORD *)&vmulq_f64(v131, _Q2);
    }
  }
  *(_BYTE *)(a1 + 192) = v138 > 0.000001;
  return v11;
}

BOOL sub_20F9B7580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v7;
  float64x2_t v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  float64x2_t v12;
  _OWORD *v13;
  uint64_t v14;
  float64x2_t *v15;
  int v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  __int128 v55;
  _BOOL8 result;
  _OWORD v65[8];

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(_QWORD *)(a1 + 88);
    v8 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v7 + 48), *(float64x2_t *)(a1 + 32)), *(float64x2_t *)(a1 + 64));
    *(float64x2_t *)(a1 + 128) = vmulq_f64(vsubq_f64(*(float64x2_t *)(v7 + 32), *(float64x2_t *)(a1 + 16)), *(float64x2_t *)(a1 + 48));
    *(float64x2_t *)(a1 + 144) = v8;
    if (*(_BYTE *)(v7 + 20))
    {
      if (a1 + 48 == a3)
      {
        v12 = *(float64x2_t *)a3;
        v11 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 72) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(_OWORD *)(a3 + 88) = 0u;
        *(_OWORD *)(a3 + 104) = 0u;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 8) = 0u;
        *(float64_t *)a3 = v12.f64[0];
        *(float64_t *)(a3 + 40) = v12.f64[1];
        *(_QWORD *)(a3 + 80) = v11;
        v9 = *((_QWORD *)&v11 + 1);
      }
      else
      {
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_QWORD *)a3 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a3 + 80) = *(_QWORD *)(a1 + 64);
        v9 = *(_QWORD *)(a1 + 72);
      }
      *(_QWORD *)(a3 + 120) = v9;
    }
    v13 = (_OWORD *)(a1 + 128);
    *(_BYTE *)(a1 + 168) = 1;
    v14 = *(_QWORD *)(a1 + 176);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a1 + 128);
      v15 = *(float64x2_t **)(a1 + 176);
      v16 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v15->f64[0] + 16))(v15);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v16)
        {
          case 0:
            v18 = v15[1];
            v17 = v15[2];
            v20 = v15[3];
            v19 = v15[4];
            v22 = v15[5];
            v21 = v15[6];
            v24 = v15[7];
            v23 = v15[8];
            goto LABEL_15;
          case 1:
            v25 = vmulq_f64(*(float64x2_t *)a3, v15[1]);
            v26 = *(float64x2_t *)(a3 + 32);
            v27 = vmulq_f64(*(float64x2_t *)(a3 + 16), v15[2]);
            v29 = *(float64x2_t *)(a3 + 96);
            v28 = *(float64x2_t *)(a3 + 112);
            v31 = *(float64x2_t *)(a3 + 64);
            v30 = *(float64x2_t *)(a3 + 80);
            v32 = *(float64x2_t *)(a3 + 48);
            *(float64x2_t *)a3 = v25;
            *(float64x2_t *)(a3 + 16) = v27;
            v33 = vmulq_f64(v26, v15[1]);
            v34 = vmulq_f64(v32, v15[2]);
            *(float64x2_t *)a3 = v25;
            *(float64x2_t *)(a3 + 16) = v27;
            *(float64x2_t *)(a3 + 32) = v33;
            *(float64x2_t *)(a3 + 48) = v34;
            v35 = vmulq_f64(v31, v15[1]);
            v36 = vmulq_f64(v30, v15[2]);
            *(float64x2_t *)a3 = v25;
            *(float64x2_t *)(a3 + 16) = v27;
            *(float64x2_t *)(a3 + 32) = v33;
            *(float64x2_t *)(a3 + 48) = v34;
            *(float64x2_t *)(a3 + 112) = v28;
            *(float64x2_t *)(a3 + 64) = v35;
            *(float64x2_t *)(a3 + 80) = v36;
            v37 = vmulq_f64(v29, v15[1]);
            v38 = vmulq_f64(v28, v15[2]);
            *(float64x2_t *)a3 = v25;
            *(float64x2_t *)(a3 + 16) = v27;
            *(float64x2_t *)(a3 + 32) = v33;
            *(float64x2_t *)(a3 + 48) = v34;
            *(float64x2_t *)(a3 + 64) = v35;
            *(float64x2_t *)(a3 + 80) = v36;
            *(float64x2_t *)(a3 + 96) = v37;
            *(float64x2_t *)(a3 + 112) = v38;
            break;
          case 2:
            v39 = v15[1].f64[0];
            v40 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v39);
            v41 = vmulq_n_f64(*(float64x2_t *)a3, v39);
            v42 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v39);
            v43 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v39);
            v44 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v39);
            v45 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v39);
            v46 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v39);
            *(float64x2_t *)(a3 + 96) = vmulq_n_f64(*(float64x2_t *)(a3 + 96), v39);
            *(float64x2_t *)(a3 + 112) = v46;
            *(float64x2_t *)(a3 + 64) = v45;
            *(float64x2_t *)(a3 + 80) = v44;
            *(float64x2_t *)(a3 + 32) = v43;
            *(float64x2_t *)(a3 + 48) = v42;
            *(float64x2_t *)a3 = v41;
            *(float64x2_t *)(a3 + 16) = v40;
            break;
          case 4:
            (*(void (**)(_OWORD *__return_ptr, float64x2_t *))(*(_QWORD *)&v15->f64[0] + 56))(v65, v15);
            v18 = (float64x2_t)v65[0];
            v17 = (float64x2_t)v65[1];
            v20 = (float64x2_t)v65[2];
            v19 = (float64x2_t)v65[3];
            v22 = (float64x2_t)v65[4];
            v21 = (float64x2_t)v65[5];
            v24 = (float64x2_t)v65[6];
            v23 = (float64x2_t)v65[7];
LABEL_15:
            v47 = *(float64x2_t *)(a3 + 16);
            v49 = *(float64x2_t *)(a3 + 32);
            v48 = *(float64x2_t *)(a3 + 48);
            v51 = *(float64x2_t *)(a3 + 64);
            v50 = *(float64x2_t *)(a3 + 80);
            v53 = *(float64x2_t *)(a3 + 96);
            v52 = *(float64x2_t *)(a3 + 112);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, *(double *)a3), v19, *(float64x2_t *)a3, 1), v21, v47.f64[0]), v23, v47, 1);
            *(float64x2_t *)a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, *(double *)a3), v20, *(float64x2_t *)a3, 1), v22, v47.f64[0]), v24, v47, 1);
            *(float64x2_t *)(a3 + 16) = v54;
            *(float64x2_t *)(a3 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v49.f64[0]), v20, v49, 1), v22, v48.f64[0]), v24, v48, 1);
            *(float64x2_t *)(a3 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v49.f64[0]), v19, v49, 1), v21, v48.f64[0]), v23, v48, 1);
            *(float64x2_t *)(a3 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v51.f64[0]), v20, v51, 1), v22, v50.f64[0]), v24, v50, 1);
            *(float64x2_t *)(a3 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v51.f64[0]), v19, v51, 1), v21, v50.f64[0]), v23, v50, 1);
            *(float64x2_t *)(a3 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v53.f64[0]), v20, v53, 1), v22, v52.f64[0]), v24, v52, 1);
            *(float64x2_t *)(a3 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v53.f64[0]), v19, v53, 1), v21, v52.f64[0]), v23, v52, 1);
            break;
          default:
            break;
        }
      }
    }
    v55 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 96) = *v13;
    *(_OWORD *)(a1 + 112) = v55;
    _Q1 = *(_OWORD *)(a1 + 128);
    _D3 = *(_QWORD *)(a1 + 136);
    __asm { FMLA            D2, D3, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 152);
    __asm { FMLA            D2, D1, V0.D[1] }
    v10 = *(double *)(a2 + 8) * _D2;
  }
  else
  {
    *(_BYTE *)(a1 + 168) = 0;
    v10 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 160) = v10;
  return result;
}

BOOL sub_20F9B78B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _OWORD *v7;
  uint64_t v8;
  double v16;
  double v17;
  double v18;
  double cosval;
  double v20;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  float64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int8x16_t v69;
  float64x2_t v70;
  float64x2_t v71;
  int64x2_t v72;
  int8x16_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  double v80;
  double v82;
  float64x2_t v84;
  double v86;
  _BOOL8 result;
  __int128 v93;
  uint64_t v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  double v100;

  v4 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v7 = (_OWORD *)(a1 + 104);
    v8 = *(_QWORD *)(a1 + 72);
    _Q1 = *(_OWORD *)(a1 + 16);
    _D3 = *(_QWORD *)(a1 + 24);
    __asm { FMLA            D2, D3, V1.D[1] }
    v16 = _D2 + *(double *)(a1 + 32) * *(double *)(a1 + 32);
    if (v16 >= 0.0000002635)
    {
      v21 = sqrt(v16);
      v22 = __sincos_stret(v21);
      cosval = v22.__cosval;
      v18 = v22.__sinval / v21;
      v17 = 1.0 / v16 * (1.0 - v22.__cosval);
    }
    else
    {
      v17 = 0.5 - v16 * (v16 / -720.0 + 0.0416666667);
      v18 = 1.0 - v16 * (0.166666667 - v16 * (v16 / -5040.0 + 0.00833333333));
      cosval = 1.0 - v16 * v17;
    }
    v23 = *(double *)(a1 + 16);
    v24 = *(double *)(a1 + 24);
    v25 = v17 * v23;
    v26 = v17 * v24;
    v27 = *(double *)(a1 + 32);
    v28 = cosval + v23 * (v17 * v23);
    v29 = cosval + v24 * (v17 * v24);
    v30 = cosval + v27 * (v17 * v27);
    v31 = v17 * v23 * v24;
    v32 = v25 * v27;
    v33 = v26 * v27;
    v34 = v18 * v23;
    v35 = v18 * v24;
    v36 = v18 * v27;
    v37 = v31 - v36;
    v38 = v35 + v32;
    v39 = v31 + v36;
    v40 = v33 - v34;
    v41 = v32 - v35;
    v42 = v34 + v33;
    v43 = *(double *)(v8 + 48);
    v44 = *(float64x2_t *)(v8 + 32);
    v45 = *(double *)(v8 + 72);
    v46 = *(float64x2_t *)(v8 + 56);
    v47 = *(double *)(v8 + 96);
    v48 = *(float64x2_t *)(v8 + 80);
    v96 = v43 * v28 + v45 * v37 + v47 * v38;
    v95 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v44, v28), v46, v37), v48, v38);
    v98 = v43 * v39 + v45 * v29 + v47 * v40;
    v97 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v44, v39), v46, v29), v48, v40);
    v100 = v43 * v41 + v45 * v42 + v47 * v30;
    v99 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v44, v41), v46, v42), v48, v30);
    v93 = 0uLL;
    v94 = 0;
    sub_20E9733B8(&v95, (double *)&v93);
    v49 = v94;
    v50.f64[1] = *((float64_t *)&v93 + 1);
    *v7 = v93;
    *(_QWORD *)(a1 + 120) = v49;
    v50.f64[0] = *(float64_t *)(a1 + 120);
    v51.f64[0] = *(float64_t *)(a1 + 56);
    *(float64x2_t *)(a1 + 104) = vmulq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a1 + 40));
    *(_QWORD *)(a1 + 120) = *(_OWORD *)&vmulq_f64(v50, v51);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
    {
      if (a1 + 40 == a3)
      {
        v52 = *(_QWORD *)(a3 + 16);
        v53 = *(float64x2_t *)a3;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_QWORD *)(a3 + 56) = 0;
        *(_OWORD *)(a3 + 8) = 0u;
        *(float64_t *)a3 = v53.f64[0];
        *(float64_t *)(a3 + 32) = v53.f64[1];
      }
      else
      {
        *(_QWORD *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_QWORD *)a3 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 48);
        v52 = *(_QWORD *)(a1 + 56);
      }
      *(_QWORD *)(a3 + 64) = v52;
    }
    *(_BYTE *)(a1 + 136) = 1;
    v54 = *(_QWORD *)(a1 + 144);
    if (v54)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, a1 + 104);
      v55 = *(_QWORD *)(a1 + 144);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v56)
        {
          case 0:
            v60 = *(float64x2_t *)(v55 + 16);
            _D2 = *(double *)(v55 + 56);
            v62 = *(float64x2_t *)(v55 + 40);
            v63 = *(double *)(v55 + 80);
            v64 = *(float64x2_t *)(v55 + 64);
            goto LABEL_18;
          case 1:
            v58.f64[0] = *(float64_t *)(a3 + 16);
            v59.f64[0] = *(float64_t *)(v55 + 32);
            v65 = (int64x2_t)vmulq_f64(v58, v59);
            v66 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v55 + 16));
            v59.f64[0] = *(float64_t *)(a3 + 64);
            v68 = *(float64x2_t *)(a3 + 32);
            v67 = *(float64x2_t *)(a3 + 48);
            v69 = *(int8x16_t *)(a3 + 16);
            *(_QWORD *)&v70.f64[0] = v65.i64[0];
            v70.f64[1] = *(float64_t *)(a3 + 24);
            *(float64x2_t *)a3 = v66;
            *(float64x2_t *)(a3 + 16) = v70;
            v70.f64[0] = *(float64_t *)(v55 + 32);
            v71 = vmulq_f64((float64x2_t)vextq_s8(v69, (int8x16_t)v68, 8uLL), *(float64x2_t *)(v55 + 16));
            v72 = vzip1q_s64(v65, (int64x2_t)v71);
            *(float64x2_t *)a3 = v66;
            *(int64x2_t *)(a3 + 16) = v72;
            v73 = vextq_s8((int8x16_t)v71, (int8x16_t)vmulq_laneq_f64(v70, v68, 1), 8uLL);
            *(int8x16_t *)(a3 + 32) = v73;
            v71.f64[0] = *(float64_t *)(v55 + 32);
            v74 = vmulq_f64(v67, *(float64x2_t *)(v55 + 16));
            *(float64x2_t *)a3 = v66;
            *(int64x2_t *)(a3 + 16) = v72;
            *(int8x16_t *)(a3 + 32) = v73;
            *(float64x2_t *)(a3 + 48) = v74;
            *(_QWORD *)(a3 + 64) = *(_OWORD *)&vmulq_f64(v59, v71);
            break;
          case 2:
            v57.f64[0] = *(float64_t *)(v55 + 16);
            v58.f64[0] = *(float64_t *)(a3 + 64);
            v75 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v57.f64[0]);
            v76 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v57.f64[0]);
            v77 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v57.f64[0]);
            *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v57.f64[0]);
            *(float64x2_t *)(a3 + 16) = v77;
            *(float64x2_t *)(a3 + 32) = v76;
            *(float64x2_t *)(a3 + 48) = v75;
            *(_QWORD *)(a3 + 64) = *(_OWORD *)&vmulq_f64(v58, v57);
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v55 + 56))(&v95, v55);
            v60 = v95;
            _D2 = v98;
            v62 = v97;
            v63 = v100;
            v64 = v99;
LABEL_18:
            v78 = *(double *)(a3 + 16);
            _Q7 = *(float64x2_t *)a3;
            v80 = *(double *)(a3 + 40);
            _Q17 = *(float64x2_t *)(a3 + 24);
            v82 = *(double *)(a3 + 64);
            _Q19 = *(float64x2_t *)(a3 + 48);
            v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, *(double *)a3), v62, *(float64x2_t *)a3, 1), v64, v78);
            __asm { FMLA            D21, D2, V7.D[1] }
            v86 = _D21 + v63 * v78;
            __asm
            {
              FMLA            D21, D2, V17.D[1]
              FMLA            D0, D2, V19.D[1]
            }
            *(float64x2_t *)a3 = v84;
            *(double *)(a3 + 16) = v86;
            *(float64x2_t *)(a3 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, _Q17.f64[0]), v62, _Q17, 1), v64, v80);
            *(double *)(a3 + 40) = _D21 + v63 * v80;
            *(float64x2_t *)(a3 + 48) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, _Q19.f64[0]), v62, _Q19, 1), v64, v82);
            *(double *)(a3 + 64) = _D0 + v63 * v82;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 80) = *v7;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 120);
    _Q1 = *(_OWORD *)(a1 + 104);
    _D3 = *(_QWORD *)(a1 + 112);
    __asm { FMLA            D2, D3, V1.D[1] }
    v20 = *(double *)(a2 + 8) * (_D2 + *(double *)(a1 + 120) * *(double *)(a1 + 120));
  }
  else
  {
    *(_BYTE *)(a1 + 136) = 0;
    v20 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 128) = v20;
  return result;
}

BOOL sub_20F9B7D74(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  _OWORD *v13;
  _BOOL8 v14;
  double v15;
  uint64_t v16;
  float64x2_t *v17;
  int v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v136;
  float64x2_t v137;

  v13 = (_OWORD *)(a1 + 120);
  v14 = sub_20FC78414(a1, (_QWORD *)(a1 + 56), a1 + 120, a3, a4, a5, a6, a7, a8, a9, a10);
  *(_BYTE *)(a1 + 144) = v14;
  v15 = 0.0;
  if (v14)
  {
    v16 = *(_QWORD *)(a1 + 152);
    if (v16)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v16 + 24))(v16, v13, 0.0);
      v17 = *(float64x2_t **)(a1 + 152);
      v18 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v17->f64[0] + 16))(v17);
      switch(v18)
      {
        case 0:
          v19 = v17[1];
          v20 = v17[2];
          goto LABEL_8;
        case 1:
          v21 = a3[1];
          v22 = vmulq_f64(*a3, v17[1]);
          v24 = a3[4];
          v23 = a3[5];
          v26 = a3[2];
          v25 = a3[3];
          *a3 = v22;
          v27 = vmulq_f64(v21, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          v28 = vmulq_f64(v26, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          v29 = vmulq_f64(v25, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          a3[3] = v29;
          v30 = vmulq_f64(v24, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          a3[3] = v29;
          a3[4] = v30;
          v31 = vmulq_f64(v23, v17[1]);
          a3[2] = v28;
          a3[3] = v29;
          *a3 = v22;
          a3[1] = v27;
          a3[4] = v30;
          a3[5] = v31;
          break;
        case 2:
          v32 = v17[1].f64[0];
          v33 = vmulq_n_f64(a3[5], v32);
          v34 = vmulq_n_f64(a3[4], v32);
          v35 = vmulq_n_f64(a3[3], v32);
          v36 = vmulq_n_f64(a3[2], v32);
          v37 = vmulq_n_f64(a3[1], v32);
          *a3 = vmulq_n_f64(*a3, v32);
          a3[1] = v37;
          a3[2] = v36;
          a3[3] = v35;
          a3[4] = v34;
          a3[5] = v33;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v19 = v136;
          v20 = v137;
LABEL_8:
          v38 = a3[5];
          v39 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[1].f64[0]), v20, a3[1], 1);
          v40 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[2].f64[0]), v20, a3[2], 1);
          v41 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[3].f64[0]), v20, a3[3], 1);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[4].f64[0]), v20, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3->f64[0]), v20, *a3, 1);
          a3[1] = v39;
          a3[2] = v40;
          a3[3] = v41;
          a3[4] = v42;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v19, v38.f64[0]), v20, v38, 1);
          break;
        default:
          break;
      }
      switch(v18)
      {
        case 0:
          v43 = v17[1];
          v44 = v17[2];
          goto LABEL_14;
        case 1:
          v45 = a3[7];
          v46 = vmulq_f64(a3[6], v17[1]);
          v48 = a3[10];
          v47 = a3[11];
          v50 = a3[8];
          v49 = a3[9];
          a3[6] = v46;
          v51 = vmulq_f64(v45, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          v52 = vmulq_f64(v50, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          v53 = vmulq_f64(v49, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          a3[9] = v53;
          v54 = vmulq_f64(v48, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          a3[9] = v53;
          a3[10] = v54;
          v55 = vmulq_f64(v47, v17[1]);
          a3[8] = v52;
          a3[9] = v53;
          a3[6] = v46;
          a3[7] = v51;
          a3[10] = v54;
          a3[11] = v55;
          break;
        case 2:
          v56 = v17[1].f64[0];
          v57 = vmulq_n_f64(a3[11], v56);
          v58 = vmulq_n_f64(a3[10], v56);
          v59 = vmulq_n_f64(a3[9], v56);
          v60 = vmulq_n_f64(a3[8], v56);
          v61 = vmulq_n_f64(a3[7], v56);
          a3[6] = vmulq_n_f64(a3[6], v56);
          a3[7] = v61;
          a3[8] = v60;
          a3[9] = v59;
          a3[10] = v58;
          a3[11] = v57;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v43 = v136;
          v44 = v137;
LABEL_14:
          v62 = a3[11];
          v63 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[7].f64[0]), v44, a3[7], 1);
          v64 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[8].f64[0]), v44, a3[8], 1);
          v65 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[9].f64[0]), v44, a3[9], 1);
          v66 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[10].f64[0]), v44, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[6].f64[0]), v44, a3[6], 1);
          a3[7] = v63;
          a3[8] = v64;
          a3[9] = v65;
          a3[10] = v66;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v43, v62.f64[0]), v44, v62, 1);
          break;
        default:
          break;
      }
      switch(v18)
      {
        case 0:
          v67 = v17[1];
          v68 = v17[2];
          goto LABEL_20;
        case 1:
          v69 = a3[13];
          v70 = vmulq_f64(a3[12], v17[1]);
          v72 = a3[14];
          v71 = a3[15];
          a3[12] = v70;
          v73 = vmulq_f64(v69, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          v74 = vmulq_f64(v72, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          a3[14] = v74;
          v75 = vmulq_f64(v71, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          a3[14] = v74;
          a3[15] = v75;
          break;
        case 2:
          v76 = v17[1].f64[0];
          v77 = vmulq_n_f64(a3[13], v76);
          v78 = vmulq_n_f64(a3[12], v76);
          v79 = vmulq_n_f64(a3[15], v76);
          a3[14] = vmulq_n_f64(a3[14], v76);
          a3[15] = v79;
          a3[12] = v78;
          a3[13] = v77;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v67 = v136;
          v68 = v137;
LABEL_20:
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[12].f64[0]), v68, a3[12], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[13].f64[0]), v68, a3[13], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[14].f64[0]), v68, a3[14], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[15].f64[0]), v68, a3[15], 1);
          a3[12] = v80;
          a3[13] = v81;
          a3[14] = v82;
          a3[15] = v83;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v18)
        {
          case 0:
            v84 = v17[1];
            v85 = v17[2];
            goto LABEL_27;
          case 1:
            v86 = a3[17];
            v87 = vmulq_f64(a3[16], v17[1]);
            v89 = a3[18];
            v88 = a3[19];
            a3[16] = v87;
            v90 = vmulq_f64(v86, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            v91 = vmulq_f64(v89, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            a3[18] = v91;
            v92 = vmulq_f64(v88, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            a3[18] = v91;
            a3[19] = v92;
            break;
          case 2:
            v93 = v17[1].f64[0];
            v94 = vmulq_n_f64(a3[17], v93);
            v95 = vmulq_n_f64(a3[16], v93);
            v96 = vmulq_n_f64(a3[19], v93);
            a3[18] = vmulq_n_f64(a3[18], v93);
            a3[19] = v96;
            a3[16] = v95;
            a3[17] = v94;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v84 = v136;
            v85 = v137;
LABEL_27:
            v97 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[16].f64[0]), v85, a3[16], 1);
            v98 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[17].f64[0]), v85, a3[17], 1);
            v99 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[18].f64[0]), v85, a3[18], 1);
            v100 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[19].f64[0]), v85, a3[19], 1);
            a3[16] = v97;
            a3[17] = v98;
            a3[18] = v99;
            a3[19] = v100;
            break;
          default:
            break;
        }
      }
      v101 = a3 + 20;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v18)
        {
          case 0:
            v102 = v17[1];
            v103 = v17[2];
            goto LABEL_34;
          case 1:
            v104 = a3[21];
            v105 = vmulq_f64(*v101, v17[1]);
            v106 = a3[22];
            *v101 = v105;
            v107 = vmulq_f64(v104, v17[1]);
            *v101 = v105;
            a3[21] = v107;
            v108 = vmulq_f64(v106, v17[1]);
            *v101 = v105;
            a3[21] = v107;
            a3[22] = v108;
            break;
          case 2:
            v109 = v17[1].f64[0];
            v110 = vmulq_n_f64(a3[22], v109);
            v111 = vmulq_n_f64(a3[21], v109);
            *v101 = vmulq_n_f64(*v101, v109);
            a3[21] = v111;
            a3[22] = v110;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v102 = v136;
            v103 = v137;
LABEL_34:
            v112 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[20].f64[0]), v103, a3[20], 1);
            v113 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[21].f64[0]), v103, a3[21], 1);
            v114 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[22].f64[0]), v103, a3[22], 1);
            a3[20] = v112;
            a3[21] = v113;
            a3[22] = v114;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v18)
        {
          case 0:
            v115 = v17[1];
            v116 = v17[2];
            goto LABEL_41;
          case 1:
            v117 = a3[24];
            v118 = vmulq_f64(a3[23], v17[1]);
            v119 = a3[25];
            a3[23] = v118;
            v120 = vmulq_f64(v117, v17[1]);
            a3[23] = v118;
            a3[24] = v120;
            v121 = vmulq_f64(v119, v17[1]);
            a3[23] = v118;
            a3[24] = v120;
            a3[25] = v121;
            break;
          case 2:
            v122 = v17[1].f64[0];
            v123 = vmulq_n_f64(a3[25], v122);
            v124 = vmulq_n_f64(a3[24], v122);
            a3[23] = vmulq_n_f64(a3[23], v122);
            a3[24] = v124;
            a3[25] = v123;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v115 = v136;
            v116 = v137;
LABEL_41:
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[23].f64[0]), v116, a3[23], 1);
            v126 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[24].f64[0]), v116, a3[24], 1);
            v127 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[25].f64[0]), v116, a3[25], 1);
            a3[23] = v125;
            a3[24] = v126;
            a3[25] = v127;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 104) = *v13;
    _Q0 = *(_OWORD *)(a1 + 120);
    _D2 = *(_QWORD *)(a1 + 128);
    __asm { FMLA            D1, D2, V0.D[1] }
    v15 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 136) = v15;
  return v14;
}

float64x2_t sub_20F9B8424(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  const double *f64;
  const double *v54;
  float64x2_t *v55;
  const double *v56;
  const double *v57;
  float64x2_t *v58;
  const double *v59;
  const double *v60;
  float64x2_t *v61;
  const double *v62;
  const double *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2x2_t v73;
  float64x2x2_t v74;
  float64x2x2_t v75;
  float64x2x2_t v76;
  float64x2x2_t v77;
  float64x2x2_t v78;
  float64x2x2_t v79;
  float64x2x2_t v80;

  if (*(_BYTE *)a2)
  {
    v8 = (int8x16_t)vmulq_f64(a3[5], a3[5]);
    a8 = vmulq_f64(a3[4], a3[4]);
    v9 = (int64x2_t)vmulq_f64(a3[1], a3[1]);
    v10 = (int64x2_t)vmulq_f64(*a3, *a3);
    v11 = (int64x2_t)vmulq_f64(a3[3], a3[3]);
    v12 = (int64x2_t)vmulq_f64(a3[2], a3[2]);
    v13 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 4)));
    v14 = (float64x2_t)vzip1q_s64(v12, v11);
    v15 = (float64x2_t)vzip2q_s64(v12, v11);
    v16 = vaddq_f64((float64x2_t)vzip1q_s64(v10, v9), (float64x2_t)vzip2q_s64(v10, v9));
    v17 = (float64x2_t)vextq_s8((int8x16_t)a8, v8, 8uLL);
    *(_QWORD *)&a8.f64[1] = v8.i64[1];
    v18 = vaddq_f64(v13[2], vaddq_f64(v17, a8));
    result = vaddq_f64(v13[1], vaddq_f64(v14, v15));
    *v13 = vaddq_f64(*v13, v16);
    v13[1] = result;
    v13[2] = v18;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v20 = (int8x16_t)vmulq_f64(a3[11], a3[11]);
    a8 = vmulq_f64(a3[10], a3[10]);
    v21 = (int64x2_t)vmulq_f64(a3[7], a3[7]);
    v22 = (int64x2_t)vmulq_f64(a3[6], a3[6]);
    v23 = (int64x2_t)vmulq_f64(a3[9], a3[9]);
    v24 = (int64x2_t)vmulq_f64(a3[8], a3[8]);
    v25 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 12)));
    v26 = (float64x2_t)vzip1q_s64(v24, v23);
    v27 = (float64x2_t)vzip2q_s64(v24, v23);
    v28 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v21), (float64x2_t)vzip2q_s64(v22, v21));
    v29 = (float64x2_t)vextq_s8((int8x16_t)a8, v20, 8uLL);
    *(_QWORD *)&a8.f64[1] = v20.i64[1];
    v30 = vaddq_f64(v25[2], vaddq_f64(v29, a8));
    result = vaddq_f64(v25[1], vaddq_f64(v26, v27));
    *v25 = vaddq_f64(*v25, v28);
    v25[1] = result;
    v25[2] = v30;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v31 = (int8x16_t)vmulq_f64(a3[17], a3[17]);
    a8 = vmulq_f64(a3[16], a3[16]);
    v32 = (int64x2_t)vmulq_f64(a3[13], a3[13]);
    v33 = (int64x2_t)vmulq_f64(a3[12], a3[12]);
    v34 = (int64x2_t)vmulq_f64(a3[15], a3[15]);
    v35 = (int64x2_t)vmulq_f64(a3[14], a3[14]);
    v36 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 20)));
    v37 = (float64x2_t)vzip1q_s64(v35, v34);
    v38 = (float64x2_t)vzip2q_s64(v35, v34);
    v39 = vaddq_f64((float64x2_t)vzip1q_s64(v33, v32), (float64x2_t)vzip2q_s64(v33, v32));
    v40 = (float64x2_t)vextq_s8((int8x16_t)a8, v31, 8uLL);
    *(_QWORD *)&a8.f64[1] = v31.i64[1];
    v41 = vaddq_f64(v36[2], vaddq_f64(v40, a8));
    result = vaddq_f64(v36[1], vaddq_f64(v37, v38));
    *v36 = vaddq_f64(*v36, v39);
    v36[1] = result;
    v36[2] = v41;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v42 = (int8x16_t)vmulq_f64(a3[23], a3[23]);
    a8 = vmulq_f64(a3[22], a3[22]);
    v43 = (int64x2_t)vmulq_f64(a3[19], a3[19]);
    v44 = (int64x2_t)vmulq_f64(a3[18], a3[18]);
    v45 = (int64x2_t)vmulq_f64(a3[21], a3[21]);
    v46 = (int64x2_t)vmulq_f64(a3[20], a3[20]);
    v47 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 28)));
    v48 = (float64x2_t)vzip1q_s64(v46, v45);
    v49 = (float64x2_t)vzip2q_s64(v46, v45);
    v50 = vaddq_f64((float64x2_t)vzip1q_s64(v44, v43), (float64x2_t)vzip2q_s64(v44, v43));
    v51 = (float64x2_t)vextq_s8((int8x16_t)a8, v42, 8uLL);
    *(_QWORD *)&a8.f64[1] = v42.i64[1];
    v52 = vaddq_f64(v47[2], vaddq_f64(v51, a8));
    result = vaddq_f64(v47[1], vaddq_f64(v48, v49));
    *v47 = vaddq_f64(*v47, v50);
    v47[1] = result;
    v47[2] = v52;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    f64 = a3[24].f64;
    v73 = vld2q_f64(f64);
    v54 = a3[26].f64;
    v77 = vld2q_f64(v54);
    v55 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 88) + 4 * *(_DWORD *)(a2 + 36)));
    a8 = *v55;
    v73.val[0] = vaddq_f64(vmulq_f64(v73.val[0], v73.val[0]), vmulq_f64(v73.val[1], v73.val[1]));
    v73.val[1] = vaddq_f64(v55[1], vaddq_f64(vmulq_f64(v77.val[0], v77.val[0]), vmulq_f64(v77.val[1], v77.val[1])));
    result = vaddq_f64(*v55, v73.val[0]);
    *v55 = result;
    v55[1] = v73.val[1];
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v56 = a3[28].f64;
    v74 = vld2q_f64(v56);
    v57 = a3[30].f64;
    v78 = vld2q_f64(v57);
    v58 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 88) + 4 * *(_DWORD *)(a2 + 44)));
    a8 = *v58;
    v74.val[0] = vaddq_f64(vmulq_f64(v74.val[0], v74.val[0]), vmulq_f64(v74.val[1], v74.val[1]));
    v74.val[1] = vaddq_f64(v58[1], vaddq_f64(vmulq_f64(v78.val[0], v78.val[0]), vmulq_f64(v78.val[1], v78.val[1])));
    result = vaddq_f64(*v58, v74.val[0]);
    *v58 = result;
    v58[1] = v74.val[1];
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v59 = a3[32].f64;
    v75 = vld2q_f64(v59);
    v60 = a3[34].f64;
    v79 = vld2q_f64(v60);
    v61 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 52)));
    a8 = *v61;
    v75.val[0] = vaddq_f64(vmulq_f64(v75.val[0], v75.val[0]), vmulq_f64(v75.val[1], v75.val[1]));
    v75.val[1] = vaddq_f64(v61[1], vaddq_f64(vmulq_f64(v79.val[0], v79.val[0]), vmulq_f64(v79.val[1], v79.val[1])));
    result = vaddq_f64(*v61, v75.val[0]);
    *v61 = result;
    v61[1] = v75.val[1];
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v62 = a3[36].f64;
    v76 = vld2q_f64(v62);
    v63 = a3[38].f64;
    v80 = vld2q_f64(v63);
    v64 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 60)));
    a8 = *v64;
    v76.val[0] = vaddq_f64(vmulq_f64(v76.val[0], v76.val[0]), vmulq_f64(v76.val[1], v76.val[1]));
    v76.val[1] = vaddq_f64(v64[1], vaddq_f64(vmulq_f64(v80.val[0], v80.val[0]), vmulq_f64(v80.val[1], v80.val[1])));
    result = vaddq_f64(*v64, v76.val[0]);
    *v64 = result;
    v64[1] = v76.val[1];
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v65 = vmulq_f64(a3[41], a3[41]);
    v66 = vmulq_f64(a3[40], a3[40]);
    v67 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 3 * *(_DWORD *)(a2 + 68));
    a8.f64[0] = *(float64_t *)(v67 + 16);
    v68 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v65, 8uLL);
    v66.f64[1] = v65.f64[1];
    v65.f64[0] = vaddvq_f64(vmulq_f64(a3[42], a3[42]));
    result = vaddq_f64(*(float64x2_t *)v67, vaddq_f64(v68, v66));
    *(float64x2_t *)v67 = result;
    *(_QWORD *)(v67 + 16) = *(_OWORD *)&vaddq_f64(a8, v65);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v69 = vmulq_f64(a3[44], a3[44]);
    v70 = vmulq_f64(a3[43], a3[43]);
    v71 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 3 * *(_DWORD *)(a2 + 76));
    a8.f64[0] = *(float64_t *)(v71 + 16);
    v72 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v69, 8uLL);
    v70.f64[1] = v69.f64[1];
    v69.f64[0] = vaddvq_f64(vmulq_f64(a3[45], a3[45]));
    result = vaddq_f64(*(float64x2_t *)v71, vaddq_f64(v72, v70));
    *(float64x2_t *)v71 = result;
    *(_QWORD *)(v71 + 16) = *(_OWORD *)&vaddq_f64(a8, v69);
  }
  return result;
}

float64x2_t sub_20F9B886C(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  float64x2_t result;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v35;
  uint64_t v36;

  if (*(_BYTE *)a2)
  {
    v8.f64[0] = *a3 * *a3;
    v9.f64[0] = a3[2] * a3[2];
    a8.f64[0] = a3[4] * a3[4];
    v10 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 4)));
    a8.f64[1] = a3[5] * a3[5];
    v9.f64[1] = a3[3] * a3[3];
    v8.f64[1] = a3[1] * a3[1];
    result = vaddq_f64(v8, *v10);
    v12 = vaddq_f64(v9, v10[1]);
    a6 = vaddq_f64(a8, v10[2]);
    v10[1] = v12;
    v10[2] = a6;
    *v10 = result;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v13.f64[0] = a3[6] * a3[6];
    v14.f64[0] = a3[8] * a3[8];
    a8.f64[0] = a3[10] * a3[10];
    v15 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 12)));
    a8.f64[1] = a3[11] * a3[11];
    v14.f64[1] = a3[9] * a3[9];
    v13.f64[1] = a3[7] * a3[7];
    result = vaddq_f64(v13, *v15);
    v16 = vaddq_f64(v14, v15[1]);
    a6 = vaddq_f64(a8, v15[2]);
    v15[1] = v16;
    v15[2] = a6;
    *v15 = result;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v17.f64[0] = a3[12] * a3[12];
    v18.f64[0] = a3[14] * a3[14];
    a8.f64[0] = a3[16] * a3[16];
    v19 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 20)));
    a8.f64[1] = a3[17] * a3[17];
    v18.f64[1] = a3[15] * a3[15];
    v17.f64[1] = a3[13] * a3[13];
    result = vaddq_f64(v17, *v19);
    v20 = vaddq_f64(v18, v19[1]);
    a6 = vaddq_f64(a8, v19[2]);
    v19[1] = v20;
    v19[2] = a6;
    *v19 = result;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v21.f64[0] = a3[18] * a3[18];
    v22.f64[0] = a3[20] * a3[20];
    a8.f64[0] = a3[22] * a3[22];
    v23 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 28)));
    a8.f64[1] = a3[23] * a3[23];
    v22.f64[1] = a3[21] * a3[21];
    v21.f64[1] = a3[19] * a3[19];
    result = vaddq_f64(v21, *v23);
    v24 = vaddq_f64(v22, v23[1]);
    a6 = vaddq_f64(a8, v23[2]);
    v23[1] = v24;
    v23[2] = a6;
    *v23 = result;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v25.f64[0] = a3[24] * a3[24];
    a6.f64[0] = a3[26] * a3[26];
    v26 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 88) + 4 * *(_DWORD *)(a2 + 36));
    a8 = *(float64x2_t *)(v26 + 16);
    a6.f64[1] = a3[27] * a3[27];
    v25.f64[1] = a3[25] * a3[25];
    result = vaddq_f64(v25, *(float64x2_t *)v26);
    *(float64x2_t *)v26 = result;
    *(float64x2_t *)(v26 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v27.f64[0] = a3[28] * a3[28];
    a6.f64[0] = a3[30] * a3[30];
    v28 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 88) + 4 * *(_DWORD *)(a2 + 44));
    a8 = *(float64x2_t *)(v28 + 16);
    a6.f64[1] = a3[31] * a3[31];
    v27.f64[1] = a3[29] * a3[29];
    result = vaddq_f64(v27, *(float64x2_t *)v28);
    *(float64x2_t *)v28 = result;
    *(float64x2_t *)(v28 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v29.f64[0] = a3[32] * a3[32];
    a6.f64[0] = a3[34] * a3[34];
    v30 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 52));
    a8 = *(float64x2_t *)(v30 + 16);
    a6.f64[1] = a3[35] * a3[35];
    v29.f64[1] = a3[33] * a3[33];
    result = vaddq_f64(v29, *(float64x2_t *)v30);
    *(float64x2_t *)v30 = result;
    *(float64x2_t *)(v30 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v31.f64[0] = a3[36] * a3[36];
    a6.f64[0] = a3[38] * a3[38];
    v32 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 60));
    a8 = *(float64x2_t *)(v32 + 16);
    a6.f64[1] = a3[39] * a3[39];
    v31.f64[1] = a3[37] * a3[37];
    result = vaddq_f64(v31, *(float64x2_t *)v32);
    *(float64x2_t *)v32 = result;
    *(float64x2_t *)(v32 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v33.f64[0] = a3[40] * a3[40];
    a6.f64[0] = a3[42] * a3[42];
    v34 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 3 * *(_DWORD *)(a2 + 68));
    a8.f64[0] = *(float64_t *)(v34 + 16);
    v33.f64[1] = a3[41] * a3[41];
    result = vaddq_f64(v33, *(float64x2_t *)v34);
    *(float64x2_t *)v34 = result;
    *(_QWORD *)(v34 + 16) = *(_OWORD *)&vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v35.f64[0] = a3[43] * a3[43];
    a6.f64[0] = a3[45] * a3[45];
    v36 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 3 * *(_DWORD *)(a2 + 76));
    a8.f64[0] = *(float64_t *)(v36 + 16);
    v35.f64[1] = a3[44] * a3[44];
    result = vaddq_f64(v35, *(float64x2_t *)v36);
    *(float64x2_t *)v36 = result;
    *(_QWORD *)(v36 + 16) = *(_OWORD *)&vaddq_f64(a6, a8);
  }
  return result;
}

double sub_20F9B8C18(uint64_t a1, __int128 *a2, __int128 *a3)
{
  int64x2_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;

  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = v3;
  *(_BYTE *)(a1 + 160) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(double *)&v5 = *(double *)a2 * *((double *)a2 + 4);
  *(double *)(a1 + 72) = 1.0 / *(double *)a2;
  *(double *)(a1 + 80) = -*((double *)a2 + 1) / *(double *)&v5;
  *(double *)(a1 + 88) = -(*((double *)a2 + 4) * *((double *)a2 + 2) - *((double *)a2 + 1) * *((double *)a2 + 5))
                       / *(double *)&v5;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = 1.0 / *((double *)a2 + 4);
  *(double *)(a1 + 112) = -*((double *)a2 + 5) / *((double *)a2 + 4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_2102E3C70;
  *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(int64x2_t *)(a1 + 168) = v3;
  *(int64x2_t *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 468) = 0;
  v8 = *a3;
  *(_OWORD *)(a1 + 184) = a3[1];
  *(_OWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 472) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 480) = 0xFFEFFFFFFFFFFFFFLL;
  result = -1.0;
  *(_OWORD *)(a1 + 896) = xmmword_2102E3C60;
  return result;
}

int64x2_t *sub_20F9B8CF0(_QWORD *a1, uint64_t *a2, void **a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  size_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;

  v6 = (uint64_t)(a1 + 13);
  if ((a4 & 1) != 0)
  {
    v21 = 1;
    v7 = a1[1813];
    v8 = *(_DWORD *)(v7 + 12);
    v9 = 9 * *(_DWORD *)(a1[1823] + 8)
       + 6 * (*(_DWORD *)(a1[1833] + 8) + *(_DWORD *)(v7 + 8) + *(_DWORD *)(a1[1843] + 8))
       + *(_DWORD *)(a1[1863] + 8)
       + 4 * (*(_DWORD *)(a1[1883] + 8) + *(_DWORD *)(a1[1873] + 8))
       + 3 * (*(_DWORD *)(a1[1893] + 8) + *(_DWORD *)(a1[1853] + 8) + *(_DWORD *)(a1[1903] + 8));
    v10 = 9 * *(_DWORD *)(a1[1814] + 12)
        + 6 * (*(_DWORD *)(a1[1815] + 12) + v8 + *(_DWORD *)(a1[1816] + 12))
        + *(_DWORD *)(a1[1818] + 12)
        + 4 * (*(_DWORD *)(a1[1820] + 12) + *(_DWORD *)(a1[1819] + 12))
        + 3 * (*(_DWORD *)(a1[1821] + 12) + *(_DWORD *)(a1[1817] + 12) + *(_DWORD *)(a1[1822] + 12));
    *((_DWORD *)a3 + 4) = v9;
    *((_DWORD *)a3 + 5) = v10;
    v11 = v10 * (unint64_t)v9;
    if ((unint64_t)a3[1] < v11)
    {
      if (*a3)
        MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
      v12 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
      *a3 = 0;
      a3[1] = (void *)(v12 >> 3);
      *a3 = operator new(v12, (std::align_val_t)0x20uLL);
      v9 = *((_DWORD *)a3 + 4);
      v10 = *((_DWORD *)a3 + 5);
    }
    v13 = v9 * v10;
    if (v13)
      bzero(*a3, 8 * v13);
    return sub_20F9BDF50(v6, (uint64_t)a3, a2, (unsigned int **)a2, &v21);
  }
  else
  {
    v15 = 9 * *(_DWORD *)(a1[1823] + 8)
        + 6 * (*(_DWORD *)(a1[1833] + 8) + *(_DWORD *)(a1[1813] + 8) + *(_DWORD *)(a1[1843] + 8))
        + *(_DWORD *)(a1[1863] + 8)
        + 4 * (*(_DWORD *)(a1[1883] + 8) + *(_DWORD *)(a1[1873] + 8))
        + 3 * (*(_DWORD *)(a1[1893] + 8) + *(_DWORD *)(a1[1853] + 8) + *(_DWORD *)(a1[1903] + 8));
    *((_DWORD *)a3 + 4) = v15;
    *((_DWORD *)a3 + 5) = v15;
    v16 = v15 * (unint64_t)v15;
    v17 = v15;
    if ((unint64_t)a3[1] < v16)
    {
      if (*a3)
        MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
      v18 = (8 * v16 + 31) & 0xFFFFFFFFFFFFFFE0;
      *a3 = 0;
      a3[1] = (void *)(v18 >> 3);
      *a3 = operator new(v18, (std::align_val_t)0x20uLL);
      v17 = *((_DWORD *)a3 + 4);
      v15 = *((_DWORD *)a3 + 5);
    }
    v19 = v17 * v15;
    if (v19)
      bzero(*a3, 8 * v19);
    v20 = 1;
    return (int64x2_t *)sub_20F9CAB5C(v6, (uint64_t *)a3, a2, (unsigned int **)a2, &v20);
  }
}

void sub_20F9B8FC4(uint64_t a1, int *a2, unsigned int a3, _DWORD *a4)
{
  int v8;
  char **v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  _BYTE *v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  char v47[8];
  char v48;

  v8 = *a2;
  if (*a2)
  {
    v9 = (char **)(a2 + 2);
    v10 = *((_QWORD *)a2 + 1);
    v11 = a2[1];
    v12 = a3 - v11;
    v13 = *((_QWORD *)a2 + 2);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2);
    if (v14 <= v12)
    {
      v21 = v11 - a3;
      if (v11 > a3)
      {
        if ((int)(v11 - a3) < 0)
        {
          if (v12 <= v14)
            LODWORD(v12) = -1431655765 * ((v13 - v10) >> 2);
          v42 = 1431655765 - v14;
          if (v42 >= v12)
            v43 = v12;
          else
            v43 = v42;
          v47[0] = 0;
          v48 = 0;
          sub_20F9B93B8(v9, v13, v43, (unint64_t)v47);
          v24 = a2[1];
        }
        else
        {
          if (v21 <= v14)
            v22 = -1431655765 * ((v13 - v10) >> 2);
          else
            v22 = v21;
          if (v11 < v22)
            v22 = a2[1];
          if (1431655765 - (int)v14 >= v22)
            v23 = v22;
          else
            v23 = (1431655765 - v14);
          v47[0] = 0;
          v48 = 0;
          sub_20F9B93B8(v9, v10, v23, (unint64_t)v47);
          v24 = a2[1] - v23;
          a2[1] = v24;
        }
        v44 = a3 - v24;
        v45 = *((_QWORD *)a2 + 1);
        v46 = v45 + 12 * (a3 - v24);
        *(_DWORD *)v46 = *a4;
        *(_DWORD *)(v46 + 4) = 0;
        v16 = 1;
        *(_BYTE *)(v46 + 8) = 1;
        ++*a2;
        v15 = v45 + 12 * v44;
        goto LABEL_60;
      }
      v47[0] = 0;
      v48 = 0;
      if ((v12 & 0x80000000) != 0)
      {
        sub_20F9B93B8(v9, v10, v21, (unint64_t)v47);
        a2[1] = a3;
        v15 = *((_QWORD *)a2 + 1);
        *(_DWORD *)v15 = *a4;
      }
      else
      {
        sub_20F9B93B8(v9, v13, (v12 + 1) - v14, (unint64_t)v47);
        v25 = *((_QWORD *)a2 + 2);
        *(_DWORD *)(v25 - 12) = *a4;
        v15 = v25 - 12;
      }
      *(_DWORD *)(v15 + 4) = 0;
      v16 = 1;
      *(_BYTE *)(v15 + 8) = 1;
      v37 = *a2 + 1;
    }
    else
    {
      v15 = v10 + 12 * v12;
      if (*(_BYTE *)(v15 + 8))
      {
        v16 = 0;
LABEL_60:
        *(_QWORD *)a1 = a2;
        *(_QWORD *)(a1 + 8) = v15;
        goto LABEL_61;
      }
      *(_DWORD *)v15 = *a4;
      *(_DWORD *)(v15 + 4) = 0;
      v16 = 1;
      *(_BYTE *)(v15 + 8) = 1;
      v37 = v8 + 1;
    }
    *a2 = v37;
    goto LABEL_60;
  }
  v17 = *((_QWORD *)a2 + 1);
  v18 = (_BYTE *)*((_QWORD *)a2 + 2);
  v19 = (uint64_t)&v18[-v17] / 12;
  if (v18 == (_BYTE *)v17)
  {
    v26 = *((_QWORD *)a2 + 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v18) >> 2) >= 1 - v19)
    {
      if (&v18[-v17] != (_BYTE *)12)
      {
        v38 = &v18[12 * (1 - v19)];
        if (-12 * v19 < 0xC)
          goto LABEL_65;
        v39 = -12 * v19 / 0xC + 1;
        v40 = v18 + 12;
        v41 = v39 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 12) = 0;
          *v40 = 0;
          *(v40 - 4) = 0;
          v40[8] = 0;
          v40 += 24;
          v41 -= 2;
        }
        while (v41);
        v18 += 12 * (v39 & 0x3FFFFFFFFFFFFFFELL);
        if (v39 != (v39 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_65:
          do
          {
            *v18 = 0;
            v18[8] = 0;
            v18 += 12;
          }
          while (v18 != v38);
        }
        v18 = v38;
      }
      *((_QWORD *)a2 + 2) = v18;
    }
    else
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v17) >> 2);
      v28 = 2 * v27;
      if (2 * v27 <= 1)
        v28 = 1;
      if (v27 >= 0xAAAAAAAAAAAAAAALL)
        v29 = 0x1555555555555555;
      else
        v29 = v28;
      if (v29 > 0x1555555555555555)
        sub_20E877A38();
      v30 = (char *)operator new(12 * v29);
      v31 = &v30[12 * v19];
      v32 = v31;
      if (-12 * v19 < 0xC)
        goto LABEL_34;
      v33 = -12 * v19 / 0xC + 1;
      v32 = &v31[12 * (v33 & 0x3FFFFFFFFFFFFFFELL)];
      v34 = &v30[12 * v19 + 12];
      v35 = v33 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(v34 - 12) = 0;
        *v34 = 0;
        *(v34 - 4) = 0;
        v34[8] = 0;
        v34 += 24;
        v35 -= 2;
      }
      while (v35);
      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *v32 = 0;
          v32[8] = 0;
          v36 = v32 == v30;
          v32 += 12;
        }
        while (!v36);
      }
      *((_QWORD *)a2 + 1) = v31;
      *((_QWORD *)a2 + 2) = v30 + 12;
      *((_QWORD *)a2 + 3) = &v30[12 * v29];
      if (v18)
        operator delete(v18);
    }
    v17 = *((_QWORD *)a2 + 1);
    v20 = *a2 + 1;
  }
  else
  {
    if (v19 >= 2)
      *((_QWORD *)a2 + 2) = v17 + 12;
    v20 = 1;
  }
  a2[1] = a3;
  *(_DWORD *)v17 = *a4;
  *(_DWORD *)(v17 + 4) = 0;
  *(_BYTE *)(v17 + 8) = 1;
  *a2 = v20;
  if (!v20)
    v17 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v17;
  v16 = 1;
LABEL_61:
  *(_BYTE *)(a1 + 16) = v16;
}

void sub_20F9B93B8(char **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char *i;
  uint64_t v45;
  char *v46;

  if (a3)
  {
    v4 = a4;
    v7 = *a1;
    v8 = (unint64_t)a1[1];
    v9 = (a2 - (uint64_t)*a1) / 12;
    v10 = (unint64_t)&(*a1)[12 * v9];
    v11 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v8] >> 2) >= a3)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 2);
      v18 = a1[1];
      v19 = a3;
      if (a3 > v17)
      {
        v20 = 0;
        v18 = (char *)(v8 + 12 * (a3 - v17));
        do
        {
          v21 = v8 + v20;
          v22 = *(_QWORD *)a4;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(a4 + 8);
          *(_QWORD *)v21 = v22;
          v20 += 12;
        }
        while (12 * a3 - 4 * ((uint64_t)(v8 - v10) >> 2) != v20);
        a1[1] = v18;
        if (v8 == v10)
          return;
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 2);
      }
      v23 = v10 + 12 * a3;
      v24 = &v18[-12 * a3];
      v25 = v18;
      if ((unint64_t)v24 < v8)
      {
        v25 = v18;
        do
        {
          v26 = *(_QWORD *)v24;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v24 += 12;
        }
        while ((unint64_t)v24 < v8);
      }
      a1[1] = v25;
      if (v18 != (char *)v23)
      {
        v27 = 0;
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v18[-v23] >> 2);
        v29 = &v7[12 * v9 + 4 * ((uint64_t)&v18[-v23] >> 2)];
        v30 = -12 * v28;
        do
        {
          v31 = &v29[v27];
          v32 = &v18[v27];
          if (v18[v27 - 4] == v29[v27 - 4])
          {
            if (v18[v27 - 4])
            {
              *((_DWORD *)v32 - 3) = *((_DWORD *)v31 - 3);
              *(_DWORD *)&v18[v27 - 8] = *(_DWORD *)&v29[v27 - 8];
            }
          }
          else if (v18[v27 - 4])
          {
            *(v32 - 4) = 0;
          }
          else
          {
            *(_QWORD *)(v32 - 12) = *(_QWORD *)(v31 - 12);
            *(v32 - 4) = 1;
          }
          v27 -= 12;
        }
        while (v30 != v27);
      }
      if (v10 <= a4)
      {
        if ((unint64_t)a1[1] <= a4)
          v33 = 0;
        else
          v33 = a3;
        v4 = a4 + 12 * v33;
      }
      v34 = &v7[12 * v9 + 8];
      do
      {
        if (*v34 == *(_BYTE *)(v4 + 8))
        {
          if (*v34)
            *((_QWORD *)v34 - 1) = *(_QWORD *)v4;
        }
        else if (*v34)
        {
          *v34 = 0;
        }
        else
        {
          *((_QWORD *)v34 - 1) = *(_QWORD *)v4;
          *v34 = 1;
        }
        v34 += 12;
        --v19;
      }
      while (v19);
    }
    else
    {
      v12 = a3 - 0x5555555555555555 * ((uint64_t)(v8 - (_QWORD)v7) >> 2);
      if (v12 > 0x1555555555555555)
        sub_20E867F44();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 2);
      v14 = 2 * v13;
      if (2 * v13 <= v12)
        v14 = v12;
      if (v13 >= 0xAAAAAAAAAAAAAAALL)
        v15 = 0x1555555555555555;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 > 0x1555555555555555)
          sub_20E877A38();
        v16 = (char *)operator new(12 * v15);
      }
      else
      {
        v16 = 0;
      }
      v35 = &v16[12 * v9];
      v36 = 12 * a3;
      v37 = &v35[12 * a3];
      v38 = v35;
      do
      {
        v39 = *(_QWORD *)v4;
        *((_DWORD *)v38 + 2) = *(_DWORD *)(v4 + 8);
        *(_QWORD *)v38 = v39;
        v38 += 12;
        v36 -= 12;
      }
      while (v36);
      v40 = *a1;
      if (*a1 != (char *)v10)
      {
        v41 = v10;
        do
        {
          v42 = *(_QWORD *)(v41 - 12);
          v41 -= 12;
          v43 = *(_DWORD *)(v41 + 8);
          *(_QWORD *)(v35 - 12) = v42;
          v35 -= 12;
          *((_DWORD *)v35 + 2) = v43;
        }
        while ((char *)v41 != v40);
        v8 = (unint64_t)a1[1];
      }
      for (i = &v16[12 * v15]; v10 != v8; v10 += 12)
      {
        v45 = *(_QWORD *)v10;
        *((_DWORD *)v37 + 2) = *(_DWORD *)(v10 + 8);
        *(_QWORD *)v37 = v45;
        v37 += 12;
      }
      v46 = *a1;
      *a1 = v35;
      a1[1] = v37;
      a1[2] = i;
      if (v46)
        operator delete(v46);
    }
  }
}

void sub_20F9B971C(char **a1, __int128 *a2, int *a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  char *v31;
  __int128 *i;
  __int128 v33;
  char *v34;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = *a3;
      v12 = *((_QWORD *)a3 + 1);
      v13 = v9 + 1;
      v14 = (__int128 *)(v5 - 16);
      v15 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v16 = *v14++;
          *(_OWORD *)v15 = v16;
          v15 += 16;
        }
        while ((unint64_t)v14 < v5);
      }
      a1[1] = v15;
      if ((_OWORD *)v5 != v13)
      {
        v17 = (uint64_t)(v5 - (_QWORD)v13) >> 4;
        v18 = (_QWORD *)(v5 - 8);
        v19 = v17;
        do
        {
          *((_DWORD *)v18 - 2) = v9[v19 - 1];
          *v18 = *((_QWORD *)&v9[v19 - 1] + 1);
          v18 -= 2;
          --v19;
        }
        while (v19 * 16);
      }
      *(_DWORD *)v9 = v11;
      *((_QWORD *)&v6[v8] + 1) = v12;
    }
    return;
  }
  v20 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v20 >> 60)
    sub_20E867F44();
  v22 = v10 - (_QWORD)v6;
  if (v22 >> 3 > v20)
    v20 = v22 >> 3;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
    v23 = 0xFFFFFFFFFFFFFFFLL;
  else
    v23 = v20;
  if (!v23)
  {
    v24 = 0;
    v25 = (char *)(16 * v8);
    v26 = 0;
    if (v8)
      goto LABEL_31;
    goto LABEL_21;
  }
  if (v23 >> 60)
    sub_20E877A38();
  v24 = (char *)operator new(16 * v23);
  v25 = &v24[16 * v8];
  v26 = &v24[16 * v23];
  if (v8 == v23)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v28 = 1;
      else
        v28 = v7 >> 3;
      if (v28 >> 60)
        sub_20E877A38();
      v25 = (char *)operator new(16 * v28);
      v26 = &v25[16 * v28];
      if (v24)
      {
        operator delete(v24);
        v26 = &v25[16 * v28];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v27 = v8 + 2;
      if (v8 >= -1)
        v27 = v8 + 1;
      v25 -= 16 * (v27 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v25 = *(_OWORD *)a3;
  v29 = v25 + 16;
  if (v6 == v9)
  {
    v31 = v25;
    i = (__int128 *)a1[1];
    if (i == v9)
      goto LABEL_36;
    goto LABEL_35;
  }
  v30 = v9;
  do
  {
    v31 = v25 - 16;
    *((_OWORD *)v25 - 1) = *--v30;
    v25 -= 16;
  }
  while (v30 != v6);
  for (i = (__int128 *)a1[1]; v9 != i; v29 += 16)
  {
LABEL_35:
    v33 = *v9++;
    *(_OWORD *)v29 = v33;
  }
LABEL_36:
  v34 = *a1;
  *a1 = v31;
  a1[1] = v29;
  a1[2] = v26;
  if (v34)
    operator delete(v34);
}

void sub_20F9B9984(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F9B999C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const float *v29;
  float *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  float32x4x2_t v71;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 >= v10)
  {
    v34 = ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v34 >> 61)
      sub_20E92CED8();
    v35 = v10 - v6;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v70 = a1 + 2;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = (char *)operator new(8 * v36);
    }
    else
    {
      v37 = 0;
    }
    v66 = v37;
    v67 = &v37[8 * v8];
    v68 = v67;
    v69 = &v37[8 * v36];
    sub_20F9B9DF8(&v66, (_QWORD *)a3);
    v38 = v67;
    v39 = (char *)*a1;
    v40 = v67;
    if ((char *)*a1 != v9)
    {
      v41 = (_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
      v42 = v41 - v39 - 8;
      v43 = v9;
      v40 = v67;
      if (v42 < 0x58)
        goto LABEL_59;
      v43 = v9;
      v40 = v67;
      if ((unint64_t)(v41 - v67) < 0x20)
        goto LABEL_59;
      v44 = (v42 >> 3) + 1;
      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v43 = &v9[-v45];
      v40 = &v67[-v45];
      v46 = v67 - 16;
      v47 = (__int128 *)(v6 + 8 * v8 - 16);
      v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *v47;
        *((_OWORD *)v46 - 1) = *(v47 - 1);
        *(_OWORD *)v46 = v49;
        v46 -= 32;
        v47 -= 2;
        v48 -= 4;
      }
      while (v48);
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v50 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *((_QWORD *)v40 - 1) = v50;
          v40 -= 8;
        }
        while (v43 != v39);
      }
    }
    v67 = v40;
    v51 = (char *)a1[1];
    v52 = v68;
    if (v51 != v9)
    {
      v53 = (_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
      v54 = v51 - v53 - 8;
      if (v54 < 0x38)
        goto LABEL_46;
      if ((unint64_t)(v68 - v53) < 0x20)
        goto LABEL_46;
      v55 = (v54 >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v9 += v56;
      v57 = &v68[v56];
      v58 = v68 + 16;
      v59 = (__int128 *)(v6 + 8 * v8 + 16);
      v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61 = *v59;
        *(v58 - 1) = *(v59 - 1);
        *v58 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 4;
      }
      while (v60);
      v52 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        v57 = v52;
        do
        {
          v62 = *(_QWORD *)v9;
          v9 += 8;
          *(_QWORD *)v57 = v62;
          v57 += 8;
        }
        while (v9 != v51);
      }
      v40 = v67;
      v9 = (char *)a1[1];
      v52 = v57;
    }
    v63 = (char *)*a1;
    *a1 = (unint64_t)v40;
    a1[1] = (unint64_t)v52;
    v64 = (char *)a1[2];
    a1[2] = (unint64_t)v69;
    v68 = v9;
    v69 = v64;
    v66 = v63;
    v67 = v63;
    if (v9 != v63)
      v68 = &v9[(v63 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
    if (v63)
      operator delete(v63);
    return v38;
  }
  else if (v9 == (char *)v5)
  {
    *(_QWORD *)v9 = *(_QWORD *)a3;
    a1[1] = (unint64_t)(v9 + 8);
  }
  else
  {
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v5 - 8;
    v13 = (_QWORD *)a1[1];
    if (v5 >= 8)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = a1[1];
      v16 = v15 + ~v6 - v14;
      v17 = (uint64_t *)(v5 - 8);
      v13 = (_QWORD *)a1[1];
      if (v16 < 0x58)
        goto LABEL_60;
      v17 = (uint64_t *)(v5 - 8);
      v13 = (_QWORD *)a1[1];
      if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] < 0x20)
        goto LABEL_60;
      v18 = (v16 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = (uint64_t *)(v12 + v19);
      v13 = (_QWORD *)(v5 + v19);
      v20 = (_OWORD *)(v5 + 16);
      v21 = (__int128 *)(8 * (v11 >> 3) + 8 * v8 + v6 + 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_60:
        do
        {
          v24 = *v17++;
          *v13++ = v24;
        }
        while ((unint64_t)v17 < v5);
      }
    }
    a1[1] = (unint64_t)v13;
    if ((char *)v5 != v9 + 8)
    {
      if ((unint64_t)(v11 - 8) < 0x78
        || v5 - (v11 & 0xFFFFFFFFFFFFFFF8) < v12
        && v6 + v11 + (v7 & 0xFFFFFFFFFFFFFFF8) - (v11 & 0xFFFFFFFFFFFFFFF8) < v5)
      {
        goto LABEL_19;
      }
      v25 = ((unint64_t)(v11 - 8) >> 3) + 1;
      v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v27 = v5 - v26;
      v28 = v12 - v26;
      v29 = (const float *)(v5 - 40);
      v30 = (float *)(v5 - 32);
      v31 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = vld2q_f32(v29);
        v29 -= 8;
        vst2q_f32(v30, v71);
        v30 -= 8;
        v31 -= 4;
      }
      while (v31);
      v5 = v27;
      v12 = v28;
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_19:
        v32 = (_DWORD *)(v5 - 4);
        do
        {
          v33 = *(_DWORD *)(v12 - 8);
          v12 -= 8;
          *(v32 - 1) = v33;
          *v32 = *(_DWORD *)(v12 + 4);
          v32 -= 2;
        }
        while ((char *)v12 != v9);
      }
    }
    *(_DWORD *)v9 = *(_DWORD *)a3;
    *(_DWORD *)(v6 + 8 * v8 + 4) = *(_DWORD *)(a3 + 4);
  }
  return v9;
}

void sub_20F9B9DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v13;

  if (a12 == a11)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20F9B9DF8(_BYTE **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  v4 = a1[2];
  v5 = v4;
  if (v4 != a1[3])
    goto LABEL_61;
  v6 = *a1;
  v7 = a1[1];
  if (v7 > *a1)
  {
    v8 = (v7 - *a1) >> 3;
    if (v8 >= -1)
      v9 = v8 + 1;
    else
      v9 = v8 + 2;
    v10 = v9 >> 1;
    v11 = &v7[-8 * (v9 >> 1)];
    v5 = v11;
    if (v7 == v4)
      goto LABEL_53;
    v12 = v4 - v7 - 8;
    if (v12 < 0x118)
      goto LABEL_51;
    v13 = -8 * v10;
    v14 = v13 + (v12 & 0xFFFFFFFFFFFFFFF8);
    v15 = v7 + 4;
    v16 = &v7[v14 + 4];
    v17 = &v7[v13 + 4];
    v18 = (unint64_t)&v7[v14 + 8];
    v19 = (unint64_t)&v7[(v12 & 0xFFFFFFFFFFFFFFF8) + 4];
    v20 = (unint64_t)&v7[(v12 & 0xFFFFFFFFFFFFFFF8) + 8];
    v21 = (unint64_t)v11 >= v19 || v7 >= v16;
    v22 = !v21;
    v23 = (unint64_t)v11 >= v20 || v15 >= v16;
    v24 = !v23;
    v25 = (unint64_t)v17 >= v19 || (unint64_t)v7 >= v18;
    v26 = !v25;
    v27 = (unint64_t)v17 >= v20 || (unint64_t)v15 >= v18;
    v28 = !v27;
    v29 = v17 >= v16 || (unint64_t)v11 >= v18;
    if (!v29 || v22 || v24 || v26 || v28)
    {
LABEL_51:
      v5 = v11;
      v32 = a1[1];
    }
    else
    {
      v30 = (v12 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFF8);
      v5 = &v11[v31];
      v32 = &v7[v31];
      v33 = v30 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v34 = &v7[v13];
        v35 = *((_OWORD *)v7 + 1);
        v37 = *((_OWORD *)v7 + 2);
        v36 = *((_OWORD *)v7 + 3);
        *(_OWORD *)v34 = *(_OWORD *)v7;
        *((_OWORD *)v34 + 1) = v35;
        *((_OWORD *)v34 + 2) = v37;
        *((_OWORD *)v34 + 3) = v36;
        v7 += 64;
        v33 -= 8;
      }
      while (v33);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_53;
    }
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v32;
      *((_DWORD *)v5 + 1) = *((_DWORD *)v32 + 1);
      v5 += 8;
      v32 += 8;
    }
    while (v32 != v4);
LABEL_53:
    a1[1] = v11;
    a1[2] = v5;
    goto LABEL_61;
  }
  v38 = (v4 - v6) >> 2;
  if (v4 == v6)
    v38 = 1;
  if (v38 >> 61)
    sub_20E877A38();
  v39 = v38 >> 2;
  v40 = 8 * v38;
  v41 = (char *)operator new(8 * v38);
  v42 = &v41[8 * v39];
  v5 = v42;
  v43 = v4 - v7;
  if (v4 != v7)
  {
    v5 = &v42[v43 & 0xFFFFFFFFFFFFFFF8];
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = &v41[8 * v39];
      do
      {
LABEL_58:
        v54 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v45 = v54;
        v45 += 8;
      }
      while (v45 != v5);
      goto LABEL_59;
    }
    v46 = &v41[8 * v39];
    v45 = v46;
    if ((unint64_t)(v46 - v7) < 0x20)
      goto LABEL_58;
    v47 = (v44 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &v42[v48];
    v49 = &v7[v48];
    v50 = (__int128 *)(v7 + 16);
    v51 = v46 + 16;
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v50;
      *(v51 - 1) = *(v50 - 1);
      *v51 = v53;
      v50 += 2;
      v51 += 2;
      v52 -= 4;
    }
    while (v52);
    v7 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_58;
  }
LABEL_59:
  *a1 = v41;
  a1[1] = v42;
  a1[2] = v5;
  a1[3] = &v41[v40];
  if (v6)
  {
    operator delete(v6);
    v5 = a1[2];
  }
LABEL_61:
  *(_QWORD *)v5 = *a2;
  a1[2] += 8;
}

uint64_t sub_20F9BA068(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int *v25;
  char v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int *v36;
  BOOL v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  char v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  int v56;
  char v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  unint64_t v63;
  unsigned int *i;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  char v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  char v78;
  unsigned int v79;
  BOOL v80;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = (int *)(a2 - 2);
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v28 = *(a2 - 2);
        v29 = *v8;
        v30 = -1;
        if (v28 >= *v8)
          v30 = 1;
        if (v28 == v29)
        {
          v31 = *(a2 - 1);
          v32 = v8[1];
          v33 = v31 >= v32;
          v34 = v31 == v32;
          v30 = -1;
          if (v33)
            v30 = 1;
          if (v34)
            v30 = 0;
        }
        if (v30 < 0)
        {
          *v8 = v28;
          *(a2 - 2) = v29;
          v35 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v35;
        }
        return result;
      case 3uLL:
        return sub_20F9BA56C((int *)v8, v8 + 2, v9);
      case 4uLL:
        return sub_20F9BACB0((int *)v8, v8 + 2, (int *)v8 + 4, v9);
      case 5uLL:
        return sub_20F9BADCC((int *)v8, v8 + 2, (int *)v8 + 4, (int *)v8 + 6, v9);
      default:
        if (v12 <= 191)
        {
          v36 = v8 + 2;
          v38 = v8 == a2 || v36 == a2;
          if ((a5 & 1) != 0)
          {
            if (v38)
              return result;
            v39 = 0;
            v40 = v8;
            while (1)
            {
              v42 = v36;
              v43 = v40[2];
              v44 = *v40;
              v45 = v43 == *v40;
              if (v43 >= *v40)
                v46 = 1;
              else
                v46 = -1;
              if (v45)
              {
                v47 = v40[3];
                v48 = v40[1];
                v49 = v47 == v48;
                if (v47 >= v48)
                  v50 = 1;
                else
                  v50 = -1;
                if (v49)
                  v51 = 0;
                else
                  v51 = v50;
                if (v51 < 0)
                {
LABEL_69:
                  v52 = *v42;
                  v53 = v42[1];
                  v54 = v39;
                  do
                  {
                    v55 = (char *)v8 + v54;
                    v56 = *(unsigned int *)((char *)v8 + v54 + 4);
                    *((_DWORD *)v55 + 2) = v44;
                    *((_DWORD *)v55 + 3) = v56;
                    if (!v54)
                    {
                      v41 = v8;
                      goto LABEL_54;
                    }
                    v44 = *((_DWORD *)v55 - 2);
                    if (v44 <= v52)
                      v57 = 1;
                    else
                      v57 = -1;
                    if (v44 == v52)
                    {
                      v58 = *(unsigned int *)((char *)v8 + v54 - 4);
                      v59 = v58 == v53;
                      v57 = v58 <= v53 ? 1 : -1;
                      if (v59)
                        v57 = 0;
                    }
                    v54 -= 8;
                  }
                  while (v57 < 0);
                  v41 = (unsigned int *)((char *)v8 + v54 + 8);
LABEL_54:
                  *v41 = v52;
                  v41[1] = v53;
                }
              }
              else if (v46 < 0)
              {
                goto LABEL_69;
              }
              v36 = v42 + 2;
              v39 += 8;
              v40 = v42;
              if (v42 + 2 == a2)
                return result;
            }
          }
          if (v38)
            return result;
          for (i = v8 + 3; ; i += 2)
          {
            v66 = v36;
            v67 = v8[2];
            v68 = *v8;
            v69 = v67 == *v8;
            v70 = v67 >= *v8 ? 1 : -1;
            if (v69)
              break;
            if (v70 < 0)
              goto LABEL_106;
LABEL_93:
            v36 = v66 + 2;
            v8 = v66;
            if (v66 + 2 == a2)
              return result;
          }
          v71 = v8[3];
          v72 = v8[1];
          v73 = v71 == v72;
          if (v71 >= v72)
            v74 = 1;
          else
            v74 = -1;
          if (v73)
            v74 = 0;
          if ((v74 & 0x80) == 0)
            goto LABEL_93;
LABEL_106:
          v75 = *v66;
          v76 = v66[1];
          v77 = i;
          do
          {
            *(v77 - 1) = v68;
            *v77 = *(v77 - 2);
            v68 = *(v77 - 5);
            if (v68 <= v75)
              v78 = 1;
            else
              v78 = -1;
            if (v68 == v75)
            {
              v79 = *(v77 - 4);
              v80 = v79 == v76;
              v78 = v79 <= v76 ? 1 : -1;
              if (v80)
                v78 = 0;
            }
            v77 -= 2;
          }
          while (v78 < 0);
          *(v77 - 1) = v75;
          *v77 = v76;
          goto LABEL_93;
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = (int *)&v8[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20F9BA56C(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            sub_20F9BA56C((int *)v8, (unsigned int *)v16, v9);
            v17 = &v8[2 * v15];
            sub_20F9BA56C((int *)v8 + 2, v17 - 2, (int *)a2 - 4);
            sub_20F9BA56C((int *)v8 + 4, &v8[2 * v15 + 2], (int *)a2 - 6);
            sub_20F9BA56C((int *)v17 - 2, (unsigned int *)v16, (int *)&v8[2 * v15 + 2]);
            v18 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v17;
            *(_QWORD *)v17 = v18;
            v9 = (int *)(a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v19 = *(v8 - 2);
          v20 = v19 == *v8;
          if (v19 >= *v8)
            v21 = 1;
          else
            v21 = -1;
          if (v20)
          {
            v22 = *(v8 - 1);
            v23 = v8[1];
            v24 = v22 == v23;
            v21 = v22 >= v23 ? 1 : -1;
            if (v24)
              v21 = 0;
          }
          if ((v21 & 0x80) == 0)
          {
            result = (uint64_t)sub_20F9BA704(v8, a2);
            v10 = (unsigned int *)result;
            goto LABEL_27;
          }
LABEL_22:
          v25 = sub_20F9BA8C0(v8, a2);
          if ((v26 & 1) == 0)
            goto LABEL_25;
          v27 = sub_20F9BAA58(v8, (char *)v25);
          v10 = v25 + 2;
          result = sub_20F9BAA58(v25 + 2, (char *)a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v27)
              continue;
LABEL_25:
            result = sub_20F9BA068(v8, v25, a3, -v14, a5 & 1);
            v10 = v25 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v25;
          if (v27)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v60 = (v13 - 2) >> 1;
          v61 = v60 + 1;
          v62 = &v8[2 * v60];
          do
          {
            sub_20F9BAF40((uint64_t)v8, a3, v12 >> 3, v62);
            v62 -= 2;
            --v61;
          }
          while (v61);
          v63 = (unint64_t)v12 >> 3;
          do
          {
            result = (uint64_t)sub_20F9BB0D0(v8, (uint64_t)a2, a3, v63);
            a2 -= 2;
          }
          while (v63-- > 2);
        }
        return result;
    }
  }
}

uint64_t sub_20F9BA56C(int *a1, unsigned int *a2, int *a3)
{
  unsigned int v3;
  int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  char v10;
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  char v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  unsigned int v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int *v38;
  unsigned int v39;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1)
    v5 = 1;
  else
    v5 = -1;
  if (v3 == v4)
  {
    v6 = a2[1];
    v7 = a1[1];
    v8 = v6 >= v7;
    v9 = v6 == v7;
    v10 = -1;
    if (v8)
      v10 = 1;
    if (v9)
      v5 = 0;
    else
      v5 = v10;
  }
  v11 = *a3;
  v12 = -1;
  if (*a3 >= v3)
    v12 = 1;
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      v18 = a3[1];
      v19 = a2[1];
      v8 = v18 >= v19;
      v20 = v18 == v19;
      v12 = -1;
      if (v8)
        v12 = 1;
      if (v20)
        v12 = 0;
    }
    if (v12 < 0)
    {
      *a1 = v11;
      v34 = a1 + 1;
      *a3 = v4;
      v35 = a3 + 1;
      v36 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v21 = a1[1];
      a1[1] = a2[1];
      a2[1] = v21;
      v22 = *a3;
      v23 = *a2;
      v24 = -1;
      if (*a3 >= *a2)
        v24 = 1;
      if (v22 == v23)
      {
        v25 = a3[1];
        v8 = v25 >= v21;
        v26 = v25 == v21;
        v27 = -1;
        if (v8)
          v27 = 1;
        if (v26)
          v24 = 0;
        else
          v24 = v27;
      }
      if ((v24 & 0x80) == 0)
        return 1;
      *a2 = v22;
      *a3 = v23;
      v35 = a3 + 1;
      v36 = 2;
      v34 = (int *)(a2 + 1);
    }
    v37 = *v34;
    *v34 = *v35;
    *v35 = v37;
    return v36;
  }
  else
  {
    if (v11 == v3)
    {
      v13 = a3[1];
      v14 = a2[1];
      v8 = v13 >= v14;
      v15 = v13 == v14;
      v16 = -1;
      if (v8)
        v16 = 1;
      if (v15)
        v12 = 0;
      else
        v12 = v16;
    }
    if (v12 < 0)
    {
      *a2 = v11;
      *a3 = v3;
      v29 = a2 + 1;
      v28 = a2[1];
      a2[1] = a3[1];
      a3[1] = v28;
      v30 = *a2;
      v31 = *a1;
      v32 = -1;
      if (*a2 >= *a1)
        v32 = 1;
      if (v30 == v31)
      {
        v33 = a1[1];
        v32 = -1;
        if (*v29 >= v33)
          v32 = 1;
        if (*v29 == v33)
          v32 = 0;
      }
      if (v32 < 0)
      {
        *a1 = v30;
        v38 = a1 + 1;
        *a2 = v31;
        v39 = *v38;
        *v38 = *v29;
        *v29 = v39;
        return 2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

unsigned int *sub_20F9BA704(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  char v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  BOOL v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  BOOL v41;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  v5 = v4 == *a1;
  if (v4 <= *a1)
    v6 = 1;
  else
    v6 = -1;
  if (v5)
  {
    v7 = *(a2 - 1);
    v8 = v7 == v2;
    v9 = v7 > v2;
    v6 = -1;
    if (!v9)
      v6 = 1;
    if (v8)
      v6 = 0;
  }
  if (v6 < 0)
  {
    v15 = a1;
    v11 = a1;
    do
    {
      v16 = v11[2];
      v11 += 2;
      v17 = v16 == v3;
      if (v16 <= v3)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = v15[3];
        v20 = v19 == v2;
        v18 = v19 <= v2 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    v10 = a1 + 2;
    do
    {
      v11 = v10;
      if (v10 >= a2)
        break;
      if (*v10 <= v3)
        v12 = 1;
      else
        v12 = -1;
      if (*v10 == v3)
      {
        v13 = v10[1];
        v14 = v13 == v2;
        v12 = v13 <= v2 ? 1 : -1;
        if (v14)
          v12 = 0;
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    v21 = a2;
  }
  else
  {
    v21 = a2;
    do
    {
      v22 = *(v21 - 2);
      v21 -= 2;
      v23 = v22 == v3;
      if (v22 <= v3)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = *(a2 - 1);
        v26 = v25 == v2;
        v24 = v25 <= v2 ? 1 : -1;
        if (v26)
          v24 = 0;
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    v27 = *v11;
    v28 = *v21;
    do
    {
      *v11 = v28;
      *v21 = v27;
      v29 = v11[1];
      v11[1] = v21[1];
      v21[1] = v29;
      v30 = v11;
      do
      {
        v31 = v11[2];
        v11 += 2;
        v27 = v31;
        v32 = v31 == v3;
        if (v31 <= v3)
          v33 = 1;
        else
          v33 = -1;
        if (v32)
        {
          v34 = v30[3];
          v35 = v34 == v2;
          v33 = v34 <= v2 ? 1 : -1;
          if (v35)
            v33 = 0;
        }
        v30 = v11;
      }
      while ((v33 & 0x80) == 0);
      v36 = v21;
      do
      {
        v37 = *(v21 - 2);
        v21 -= 2;
        v28 = v37;
        v38 = v37 == v3;
        if (v37 <= v3)
          v39 = 1;
        else
          v39 = -1;
        if (v38)
        {
          v40 = *(v36 - 1);
          v41 = v40 == v2;
          v39 = v40 <= v2 ? 1 : -1;
          if (v41)
            v39 = 0;
        }
        v36 = v21;
      }
      while (v39 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1)
  {
    *a1 = *(v11 - 2);
    a1[1] = *(v11 - 1);
  }
  *(v11 - 2) = v3;
  *(v11 - 1) = v2;
  return v11;
}

unsigned int *sub_20F9BA8C0(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  BOOL v36;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3)
      v6 = 1;
    else
      v6 = -1;
    if (v5 == v3)
    {
      v7 = a1[v2 + 3];
      v8 = v7 == v4;
      v6 = v7 >= v4 ? 1 : -1;
      if (v8)
        v6 = 0;
    }
    v2 += 2;
  }
  while (v6 < 0);
  v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      v10 = a2 - 2;
      v16 = *(a2 - 2);
      v17 = v16 == v3;
      if (v16 >= v3)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = *(a2 - 1);
        v20 = v19 == v4;
        v18 = v19 >= v4 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      a2 -= 2;
      if (v18 < 0)
        goto LABEL_41;
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v11 = *(v10 - 2);
      v10 -= 2;
      v12 = v11 == v3;
      if (v11 >= v3)
        v13 = 1;
      else
        v13 = -1;
      if (v12)
      {
        v14 = *(a2 - 1);
        v15 = v14 == v4;
        v13 = v14 >= v4 ? 1 : -1;
        if (v15)
          v13 = 0;
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_41:
  if (v9 >= v10)
  {
    v22 = v9;
  }
  else
  {
    v21 = *v10;
    v22 = v9;
    v23 = v10;
    do
    {
      *v22 = v21;
      *v23 = v5;
      v24 = v22[1];
      v22[1] = v23[1];
      v23[1] = v24;
      v25 = v22;
      do
      {
        v26 = v22[2];
        v22 += 2;
        v5 = v26;
        v27 = v26 == v3;
        if (v26 >= v3)
          v28 = 1;
        else
          v28 = -1;
        if (v27)
        {
          v29 = v25[3];
          v30 = v29 == v4;
          v28 = v29 >= v4 ? 1 : -1;
          if (v30)
            v28 = 0;
        }
        v25 = v22;
      }
      while (v28 < 0);
      v31 = v23;
      do
      {
        v32 = *(v23 - 2);
        v23 -= 2;
        v21 = v32;
        v33 = v32 == v3;
        if (v32 >= v3)
          v34 = 1;
        else
          v34 = -1;
        if (v33)
        {
          v35 = *(v31 - 1);
          v36 = v35 == v4;
          v34 = v35 >= v4 ? 1 : -1;
          if (v36)
            v34 = 0;
        }
        v31 = v23;
      }
      while ((v34 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1)
  {
    *a1 = *(v22 - 2);
    a1[1] = *(v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL sub_20F9BAA58(unsigned int *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  char v20;
  unsigned int v21;
  BOOL v22;
  char *v23;
  unsigned int v24;
  int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;

  v4 = (a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v24 = *((_DWORD *)a2 - 2);
      v25 = *a1;
      v26 = -1;
      if (v24 >= *a1)
        v26 = 1;
      if (v24 == v25)
      {
        v27 = *((_DWORD *)a2 - 1);
        v28 = a1[1];
        v29 = v27 >= v28;
        v30 = v27 == v28;
        v26 = -1;
        if (v29)
          v26 = 1;
        if (v30)
          v26 = 0;
      }
      if (v26 < 0)
      {
        *a1 = v24;
        *((_DWORD *)a2 - 2) = v25;
        v31 = a1[1];
        a1[1] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v31;
      }
      break;
    case 3:
      sub_20F9BA56C((int *)a1, a1 + 2, (int *)a2 - 2);
      result = 1;
      break;
    case 4:
      sub_20F9BACB0((int *)a1, a1 + 2, (int *)a1 + 4, (int *)a2 - 2);
      result = 1;
      break;
    case 5:
      sub_20F9BADCC((int *)a1, a1 + 2, (int *)a1 + 4, (int *)a1 + 6, (int *)a2 - 2);
      result = 1;
      break;
    default:
      v6 = (char *)(a1 + 4);
      sub_20F9BA56C((int *)a1, a1 + 2, (int *)a1 + 4);
      v7 = (char *)(a1 + 6);
      if (a1 + 6 == (unsigned int *)a2)
      {
LABEL_32:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(_DWORD *)v6;
          if (*(_DWORD *)v7 >= *(_DWORD *)v6)
            v11 = 1;
          else
            v11 = -1;
          if (*(_DWORD *)v7 == *(_DWORD *)v6)
          {
            v12 = *((_DWORD *)v7 + 1);
            v13 = *((_DWORD *)v6 + 1);
            v14 = v12 == v13;
            v11 = v12 >= v13 ? 1 : -1;
            if (v14)
              v11 = 0;
          }
          if (v11 < 0)
            break;
LABEL_31:
          v6 = v7;
          v8 += 8;
          v7 += 8;
          if (v7 == a2)
            goto LABEL_32;
        }
        v15 = *(_DWORD *)v7;
        v16 = *((_DWORD *)v7 + 1);
        v17 = v8;
        do
        {
          v18 = (unsigned int *)((char *)a1 + v17);
          v19 = *(unsigned int *)((char *)a1 + v17 + 20);
          v18[6] = v10;
          v18[7] = v19;
          if (v17 == -16)
          {
            *a1 = v15;
            a1[1] = v16;
            if (++v9 != 8)
              goto LABEL_31;
            goto LABEL_46;
          }
          v10 = v18[2];
          if (v10 <= v15)
            v20 = 1;
          else
            v20 = -1;
          if (v10 == v15)
          {
            v21 = *(unsigned int *)((char *)a1 + v17 + 12);
            v22 = v21 == v16;
            v20 = v21 <= v16 ? 1 : -1;
            if (v22)
              v20 = 0;
          }
          v17 -= 8;
        }
        while (v20 < 0);
        v23 = (char *)a1 + v17;
        *((_DWORD *)v23 + 6) = v15;
        *((_DWORD *)v23 + 7) = v16;
        if (++v9 != 8)
          goto LABEL_31;
LABEL_46:
        result = v7 + 8 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_20F9BACB0(int *a1, unsigned int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  int v30;

  result = sub_20F9BA56C(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = -1;
  if (*a4 >= *a3)
    v11 = 1;
  if (v9 == v10)
  {
    v12 = a4[1];
    v13 = a3[1];
    v14 = v12 >= v13;
    v15 = v12 == v13;
    v11 = -1;
    if (v14)
      v11 = 1;
    if (v15)
      v11 = 0;
  }
  if (v11 < 0)
  {
    *a3 = v9;
    *a4 = v10;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a3;
    v18 = *a2;
    v19 = -1;
    if (*a3 >= *a2)
      v19 = 1;
    if (v17 == v18)
    {
      v20 = a3[1];
      v21 = a2[1];
      v14 = v20 >= v21;
      v22 = v20 == v21;
      v19 = -1;
      if (v14)
        v19 = 1;
      if (v22)
        v19 = 0;
    }
    if (v19 < 0)
    {
      *a2 = v17;
      *a3 = v18;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v24 = *a2;
      v25 = *a1;
      v26 = -1;
      if (*a2 >= *a1)
        v26 = 1;
      if (v24 == v25)
      {
        v27 = a2[1];
        v28 = a1[1];
        v14 = v27 >= v28;
        v29 = v27 == v28;
        v26 = -1;
        if (v14)
          v26 = 1;
        if (v29)
          v26 = 0;
      }
      if (v26 < 0)
      {
        *a1 = v24;
        *a2 = v25;
        v30 = a1[1];
        a1[1] = a2[1];
        a2[1] = v30;
      }
    }
  }
  return result;
}

uint64_t sub_20F9BADCC(int *a1, unsigned int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  int v39;

  result = sub_20F9BACB0(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = -1;
  if (*a5 >= *a4)
    v13 = 1;
  if (v11 == v12)
  {
    v14 = a5[1];
    v15 = a4[1];
    v16 = v14 >= v15;
    v17 = v14 == v15;
    v13 = -1;
    if (v16)
      v13 = 1;
    if (v17)
      v13 = 0;
  }
  if (v13 < 0)
  {
    *a4 = v11;
    *a5 = v12;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = *a4;
    v20 = *a3;
    v21 = -1;
    if (*a4 >= *a3)
      v21 = 1;
    if (v19 == v20)
    {
      v22 = a4[1];
      v23 = a3[1];
      v16 = v22 >= v23;
      v24 = v22 == v23;
      v21 = -1;
      if (v16)
        v21 = 1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      *a3 = v19;
      *a4 = v20;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      v28 = -1;
      if (*a3 >= *a2)
        v28 = 1;
      if (v26 == v27)
      {
        v29 = a3[1];
        v30 = a2[1];
        v16 = v29 >= v30;
        v31 = v29 == v30;
        v28 = -1;
        if (v16)
          v28 = 1;
        if (v31)
          v28 = 0;
      }
      if (v28 < 0)
      {
        *a2 = v26;
        *a3 = v27;
        v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        v33 = *a2;
        v34 = *a1;
        v35 = -1;
        if (*a2 >= *a1)
          v35 = 1;
        if (v33 == v34)
        {
          v36 = a2[1];
          v37 = a1[1];
          v16 = v36 >= v37;
          v38 = v36 == v37;
          v35 = -1;
          if (v16)
            v35 = 1;
          if (v38)
            v35 = 0;
        }
        if (v35 < 0)
        {
          *a1 = v33;
          *a2 = v34;
          v39 = a1[1];
          a1[1] = a2[1];
          a2[1] = v39;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F9BAF40(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  BOOL v35;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v12 = v8[2];
        v13 = *v8 == v12;
        if (*v8 >= v12)
          v14 = 1;
        else
          v14 = -1;
        if (v13)
        {
          v15 = *(_DWORD *)(result + 8 * v7 + 4);
          v16 = v8[3];
          v17 = v15 >= v16;
          v18 = v15 == v16;
          v14 = -1;
          if (v17)
            v14 = 1;
          if (v18)
            v14 = 0;
        }
        if (v14 < 0)
        {
          v8 += 2;
          v7 = v9;
        }
        v10 = *v8;
        if (*v8 >= *a4)
          v11 = 1;
        else
          v11 = -1;
        if (*v8 != *a4)
        {
LABEL_8:
          if (v11 < 0)
            return result;
          goto LABEL_32;
        }
      }
      else
      {
        v10 = *v8;
        if (*v8 >= *a4)
          v11 = 1;
        else
          v11 = -1;
        if (*v8 != *a4)
          goto LABEL_8;
      }
      v19 = v8[1];
      v20 = a4[1];
      v17 = v19 >= v20;
      v21 = v19 == v20;
      v22 = -1;
      if (v17)
        v22 = 1;
      if (v21)
        v22 = 0;
      if ((v22 & 0x80) == 0)
      {
LABEL_32:
        v23 = *a4;
        v24 = a4[1];
        while (1)
        {
          v25 = a4;
          a4 = v8;
          *v25 = v10;
          v25[1] = v8[1];
          if (v5 < v7)
          {
LABEL_64:
            *a4 = v23;
            a4[1] = v24;
            return result;
          }
          v26 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 8 * v26);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v7 = v26;
            v10 = *v8;
            if (*v8 >= v23)
              v33 = 1;
            else
              v33 = -1;
            if (v10 != v23)
              goto LABEL_33;
          }
          else
          {
            v27 = v8[2];
            v28 = *v8 == v27;
            if (*v8 >= v27)
              v29 = 1;
            else
              v29 = -1;
            if (v28)
            {
              v30 = *(_DWORD *)(result + 8 * v26 + 4);
              v31 = v8[3];
              v32 = v30 == v31;
              v29 = v30 >= v31 ? 1 : -1;
              if (v32)
                v29 = 0;
            }
            if (v29 < 0)
              v8 += 2;
            else
              v7 = v26;
            v10 = *v8;
            if (*v8 >= v23)
              v33 = 1;
            else
              v33 = -1;
            if (v10 != v23)
              goto LABEL_33;
          }
          v34 = v8[1];
          v35 = v34 == v24;
          if (v34 >= v24)
            v33 = 1;
          else
            v33 = -1;
          if (v35)
            v33 = 0;
LABEL_33:
          if (v33 < 0)
            goto LABEL_64;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_20F9BB0D0(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  char v30;
  unsigned int v31;
  BOOL v32;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)result;
    v6 = result;
    do
    {
      v9 = v4 + 1;
      v7 = &v6[2 * v4 + 2];
      v8 = (2 * v4) | 1;
      v10 = 2 * v4 + 2;
      if (v10 < a4)
      {
        v11 = v7[2];
        v12 = *v7 == v11;
        if (*v7 >= v11)
          v13 = 1;
        else
          v13 = -1;
        if (v12)
        {
          v14 = v6[2 * v9 + 1];
          v15 = v7[3];
          v16 = v14 == v15;
          if (v14 >= v15)
            v17 = 1;
          else
            v17 = -1;
          if (v16)
            v13 = 0;
          else
            v13 = v17;
        }
        if (v13 < 0)
        {
          v7 += 2;
          v8 = v10;
        }
      }
      *v6 = *v7;
      v6[1] = v7[1];
      v6 = v7;
      v4 = v8;
    }
    while (v8 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (unsigned int *)(a2 - 8))
    {
      *(_QWORD *)v7 = v5;
    }
    else
    {
      *v7 = *(_DWORD *)(a2 - 8);
      v7[1] = *(_DWORD *)(a2 - 4);
      *(_QWORD *)(a2 - 8) = v5;
      v18 = (char *)v7 - (char *)result + 8;
      if (v18 >= 9)
      {
        v19 = (((unint64_t)v18 >> 3) - 2) >> 1;
        v20 = &result[2 * v19];
        v21 = *v20;
        if (*v20 >= *v7)
          v22 = 1;
        else
          v22 = -1;
        if (*v20 == *v7)
        {
          v23 = v20[1];
          v24 = v7[1];
          v25 = v23 >= v24;
          v26 = v23 == v24;
          v22 = -1;
          if (v25)
            v22 = 1;
          if (v26)
            v22 = 0;
        }
        if (v22 < 0)
        {
          v27 = *v7;
          v28 = v7[1];
          do
          {
            v29 = v7;
            v7 = v20;
            *v29 = v21;
            v29[1] = v20[1];
            if (!v19)
              break;
            v19 = (v19 - 1) >> 1;
            v20 = &result[2 * v19];
            v21 = *v20;
            if (*v20 >= v27)
              v30 = 1;
            else
              v30 = -1;
            if (v21 == v27)
            {
              v31 = v20[1];
              v32 = v31 == v28;
              if (v31 >= v28)
                v30 = 1;
              else
                v30 = -1;
              if (v32)
                v30 = 0;
            }
          }
          while (v30 < 0);
          *v7 = v27;
          v7[1] = v28;
        }
      }
    }
  }
  return result;
}

char *sub_20F9BB250(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  const float *v22;
  float *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  __int128 *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 *v39;
  char *v40;
  __int128 *i;
  __int128 v42;
  char *v43;
  float32x4x4_t v45;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        v14 = (__int128 *)(v5 - 16);
        v13 = a1[1];
        do
        {
          v15 = *v14++;
          *(_OWORD *)v13 = v15;
          v13 += 16;
        }
        while ((unint64_t)v14 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v16 = v5 - (_QWORD)v11;
        v17 = v5 - (_QWORD)v11 - 16;
        if (v17 < 0x70
          || v5 - (v16 & 0xFFFFFFFFFFFFFFF0) < (unint64_t)v12
          && (unint64_t)v6 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v5)
        {
          goto LABEL_13;
        }
        v18 = (v17 >> 4) + 1;
        v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
        v20 = v5 - v19;
        v21 = &v12[v19 / 0xFFFFFFFFFFFFFFF0];
        v22 = (const float *)(v5 - 80);
        v23 = (float *)(v5 - 64);
        v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = vld4q_f32(v22);
          vst4q_f32(v23, v45);
          v22 -= 16;
          v23 -= 16;
          v24 -= 4;
        }
        while (v24);
        v5 = v20;
        v12 = v21;
        if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v25 = (_DWORD *)(v5 - 8);
          do
          {
            v26 = *((_DWORD *)v12-- - 4);
            *(v25 - 2) = v26;
            *(v25 - 1) = *((_DWORD *)v12 + 1);
            *v25 = *((_DWORD *)v12 + 2);
            v25[1] = *((_DWORD *)v12 + 3);
            v25 -= 4;
          }
          while (v12 != v9);
        }
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      v27 = &v6[v8];
      *((_DWORD *)v27 + 1) = *(_DWORD *)(a3 + 4);
      *((_DWORD *)v27 + 2) = *(_DWORD *)(a3 + 8);
      *((_DWORD *)v27 + 3) = *(_DWORD *)(a3 + 12);
    }
    return (char *)v9;
  }
  v28 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v28 >> 60)
    sub_20E867F44();
  v29 = v10 - (_QWORD)v6;
  if (v29 >> 3 > v28)
    v28 = v29 >> 3;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
    v30 = 0xFFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 >> 60)
      sub_20E877A38();
    v31 = (char *)operator new(16 * v30);
    v32 = &v31[16 * v8];
    v33 = &v31[16 * v30];
    if (v8 != v30)
      goto LABEL_38;
    goto LABEL_28;
  }
  v31 = 0;
  v32 = (char *)(16 * v8);
  v33 = 0;
  if (!v8)
  {
LABEL_28:
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF0) < 1)
    {
      if ((unint64_t)v7 < 0x10)
        v35 = 1;
      else
        v35 = (v7 >> 3) & 0xFFFFFFFFFFFFFFFELL;
      if (v35 >> 60)
        sub_20E877A38();
      v36 = (char *)operator new(16 * v35);
      v32 = &v36[16 * (v35 >> 2)];
      v33 = &v36[16 * v35];
      if (v31)
      {
        operator delete(v31);
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v34 = v8 + 2;
      if (v8 >= -1)
        v34 = v8 + 1;
      v32 -= 16 * (v34 >> 1);
    }
  }
LABEL_38:
  *(_OWORD *)v32 = *(_OWORD *)a3;
  v37 = v32 + 16;
  v38 = v32;
  if (v6 != v9)
  {
    v39 = v9;
    v40 = v32;
    do
    {
      v38 = v40 - 16;
      *((_OWORD *)v40 - 1) = *--v39;
      v40 -= 16;
    }
    while (v39 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v37 += 16)
  {
    v42 = *v9++;
    *(_OWORD *)v37 = v42;
  }
  v43 = *a1;
  *a1 = v38;
  a1[1] = v37;
  a1[2] = v33;
  if (v43)
    operator delete(v43);
  return v32;
}

void sub_20F9BB53C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F9BB554(char *result, uint64_t a2)
{
  char *v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  std::runtime_error *exception;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::runtime_error *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::runtime_error *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::runtime_error *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::runtime_error *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string v98;
  std::string v99;
  std::string v100;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 992);
  if (v4 == -1)
  {
    result = (char *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
    v4 = *(_DWORD *)(a2 + 992);
  }
  if (v4 > 7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v4 <= 0xB)
    {
      if (v4 <= 9)
      {
        if (v4 != 9)
        {
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
          *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103134C0;
          strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLensKR7>]");
          sub_20E8D1238(&v98, 85, 1uLL);
          v82 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          v84 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
          v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v100);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DBEF0;
        strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::NoncentricLensModelT<cv3d::vio::geometry::LensType::NoncentricLensKR7>]");
        sub_20E8D1238(&v98, 91, 1uLL);
        v42 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v100);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (v4 == 10)
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
        *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103134D0;
        strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLensKDR7>]");
        sub_20E8D1238(&v98, 86, 1uLL);
        v65 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        v67 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v100);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103B8460;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::NoncentricLensModelT<cv3d::vio::geometry::LensType::NoncentricLensKDR7>]");
      sub_20E8D1238(&v98, 92, 1uLL);
      v90 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v100);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (v4 <= 0xD)
    {
      if (v4 != 13)
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DBEF0;
        strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLensHermesKR4>]");
        sub_20E8D1238(&v98, 91, 1uLL);
        v86 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v100);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DB450;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::I15LensModelImpl]");
      sub_20E8D1238(&v98, 37, 1uLL);
      v46 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v100);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (v4 == 14)
    {
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103B8480;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLensKDRC7>]");
      sub_20E8D1238(&v98, 87, 1uLL);
      v69 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v100);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
    *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103B8470;
    strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::NoncentricLensModelT<cv3d::vio::geometry::LensType::NoncentricLensKDRC7>]");
    sub_20E8D1238(&v98, 93, 1uLL);
    v94 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    v96 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v100);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v4 > 3)
  {
    if (v4 > 5)
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (v4 == 6)
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DCA30;
        strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FlyoverPerspectiveLensModelImpl]");
        sub_20E8D1238(&v98, 52, 1uLL);
        v51 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v50, &v100);
        __cxa_throw(v50, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_210316910;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::NoncentricLensModelT<cv3d::vio::geometry::LensType::NoncentricLens>]");
      sub_20E8D1238(&v98, 88, 1uLL);
      v78 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v50, &v100);
      __cxa_throw(v50, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (v4 == 5)
    {
      v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2103B8480;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLensFast2>]");
      sub_20E8D1238(&v98, 87, 1uLL);
      v61 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      v63 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v60, &v100);
      __cxa_throw(v60, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (*((_DWORD *)v3 + 118) == 2)
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v15 = *(_OWORD *)(a2 + 16);
      v16 = *(_OWORD *)(a2 + 32);
      v17 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v3 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v3 + 2) = v16;
      *((_OWORD *)v3 + 3) = v17;
      *((_OWORD *)v3 + 1) = v15;
      v18 = *(_OWORD *)(a2 + 104);
      v19 = *(_OWORD *)(a2 + 120);
      v20 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *((_QWORD *)v3 + 17) = v20;
      *(_OWORD *)(v3 + 120) = v19;
      *(_OWORD *)(v3 + 104) = v18;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      v21 = *(_OWORD *)(a2 + 144);
      v3[160] = *(_BYTE *)(a2 + 160);
      *((_OWORD *)v3 + 9) = v21;
      v22 = *(_OWORD *)(a2 + 168);
      v23 = *(_OWORD *)(a2 + 184);
      v3[200] = *(_BYTE *)(a2 + 200);
      *(_OWORD *)(v3 + 184) = v23;
      *(_OWORD *)(v3 + 168) = v22;
      result = (char *)memcpy(v3 + 204, (const void *)(a2 + 204), 0x108uLL);
      v3[468] = *(_BYTE *)(a2 + 468);
    }
    else
    {
      *((_DWORD *)v3 + 118) = -1;
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v34 = *(_OWORD *)(a2 + 16);
      v35 = *(_OWORD *)(a2 + 32);
      v36 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v3 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v3 + 2) = v35;
      *((_OWORD *)v3 + 3) = v36;
      *((_OWORD *)v3 + 1) = v34;
      v37 = *(_OWORD *)(a2 + 104);
      v38 = *(_OWORD *)(a2 + 120);
      v39 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *((_QWORD *)v3 + 17) = v39;
      *(_OWORD *)(v3 + 120) = v38;
      *(_OWORD *)(v3 + 104) = v37;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      v40 = *(_OWORD *)(a2 + 144);
      v3[160] = *(_BYTE *)(a2 + 160);
      *((_OWORD *)v3 + 9) = v40;
      result = (char *)memcpy(v3 + 168, (const void *)(a2 + 168), 0x12DuLL);
      *((_DWORD *)v3 + 118) = 2;
    }
  }
  else
  {
    if (v4 <= 1)
    {
      if (!v4)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DCA00;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::LinearLensModelImpl]");
      sub_20E8D1238(&v98, 40, 1uLL);
      v74 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      v76 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v73, &v100);
      __cxa_throw(v73, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (v4 != 2)
    {
      v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = xmmword_2102DB460;
      strcpy(v98.__r_.__value_.__l.__data_, "cv3d::vio::geometry::FisheyeLensModelT<cv3d::vio::geometry::LensType::FisheyeLens>]");
      sub_20E8D1238(&v98, 82, 1uLL);
      v56 = std::string::insert(&v98, 0, "Invalid variant lens model assignment: ", 0x27uLL);
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      v58 = std::string::append(&v99, " not handled by this specialization.", 0x24uLL);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v55, &v100);
      __cxa_throw(v55, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (*((_DWORD *)v3 + 118) == 1)
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v3 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v3 + 2) = v6;
      *((_OWORD *)v3 + 3) = v7;
      *((_OWORD *)v3 + 1) = v5;
      v8 = *(_OWORD *)(a2 + 104);
      v9 = *(_OWORD *)(a2 + 120);
      v10 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *((_QWORD *)v3 + 17) = v10;
      *(_OWORD *)(v3 + 120) = v9;
      *(_OWORD *)(v3 + 104) = v8;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 144);
      v3[160] = *(_BYTE *)(a2 + 160);
      *((_OWORD *)v3 + 9) = v11;
      v12 = *(_OWORD *)(a2 + 200);
      v13 = *(_OWORD *)(a2 + 216);
      v14 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v3 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(v3 + 232) = v14;
      *(_OWORD *)(v3 + 216) = v13;
      *(_OWORD *)(v3 + 200) = v12;
      *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
    }
    else
    {
      *((_DWORD *)v3 + 118) = -1;
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)(a2 + 32);
      v26 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v3 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v3 + 2) = v25;
      *((_OWORD *)v3 + 3) = v26;
      *((_OWORD *)v3 + 1) = v24;
      v27 = *(_OWORD *)(a2 + 104);
      v28 = *(_OWORD *)(a2 + 120);
      v29 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *((_QWORD *)v3 + 17) = v29;
      *(_OWORD *)(v3 + 120) = v28;
      *(_OWORD *)(v3 + 104) = v27;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      v30 = *(_OWORD *)(a2 + 144);
      v3[160] = *(_BYTE *)(a2 + 160);
      *((_OWORD *)v3 + 9) = v30;
      v31 = *(_OWORD *)(a2 + 184);
      v32 = *(_OWORD *)(a2 + 200);
      v33 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v3 + 232) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v3 + 216) = v33;
      *(_OWORD *)(v3 + 200) = v32;
      *(_OWORD *)(v3 + 184) = v31;
      *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
      *((_DWORD *)v3 + 118) = 1;
    }
  }
  return result;
}

void sub_20F9BC444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v29 & 1) != 0)
      __cxa_free_exception(v28);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a10);
  goto LABEL_5;
}

double sub_20F9BC74C(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int32 v17;
  unsigned __int32 v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  __n128 v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  BOOL v27;
  _BOOL4 v28;
  _BOOL4 v29;
  __n128 v30;
  __n128 v31;
  _BOOL4 v32;
  __int128 v33;
  __n128 v34;
  _BOOL4 v35;
  __int128 v36;
  unsigned int v37;
  __int128 v38;
  unsigned __int32 v39;
  _BOOL4 v40;
  __n128 v41;
  __n128 *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  BOOL v48;
  BOOL v49;
  unsigned __int32 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  unsigned int v57;
  _BOOL4 v58;
  __n128 v59;
  __int128 v60;
  __int128 v61;
  unsigned __int32 v62;
  _BOOL4 v63;
  __n128 v64;
  unsigned __int32 v65;
  __n128 v66;
  __int128 v67;
  unsigned __int32 v68;
  _BOOL4 v69;
  __n128 v70;
  __n128 *v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int32 v75;
  unsigned __int32 v76;
  BOOL v77;
  BOOL v78;
  unsigned __int32 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  unsigned int v86;
  _BOOL4 v87;
  __n128 v88;
  __int128 v89;
  __n128 v90;
  __int128 v91;
  unsigned __int32 v92;
  _BOOL4 v93;
  __n128 v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  _BOOL4 v98;
  _BOOL4 v99;
  __int128 v100;
  __int128 v101;
  _BOOL4 v102;
  __int128 v103;
  __int128 v104;
  _BOOL4 v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  BOOL v113;
  unint64_t v114;
  __n128 *v115;
  unsigned int v116;
  unsigned __int32 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  unsigned int v120;
  unsigned __int32 v121;
  BOOL v122;
  BOOL v123;
  __n128 *v124;
  __n128 v125;
  unsigned int v126;
  unsigned __int32 v127;
  BOOL v128;
  BOOL v129;
  unsigned __int32 v130;
  unsigned __int32 v131;
  _BOOL4 v132;
  _BOOL4 v133;
  __int128 v134;
  BOOL v135;
  __n128 v136;
  unsigned __int32 v137;
  BOOL v138;
  unsigned int v139;
  unsigned __int32 v140;
  BOOL v141;
  BOOL v142;
  __n128 *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  __n128 *v147;
  unsigned __int32 v148;
  unsigned __int32 v149;
  BOOL v150;
  BOOL v151;
  __n128 v152;
  unsigned int v153;
  unsigned __int32 v154;
  _BOOL4 v155;
  _BOOL4 v156;
  unsigned __int32 v157;
  unsigned __int32 v158;
  BOOL v159;
  BOOL v160;
  __int128 v161;
  __n128 *v162;
  unsigned __int32 v163;
  unsigned __int32 v164;
  BOOL v165;
  __n128 *v166;
  unsigned __int32 v167;
  _BOOL4 v168;
  _BOOL4 v169;
  __n128 v170;
  __n128 v171;
  unsigned __int32 v172;
  unsigned __int32 v173;
  __n128 *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  __n128 v177;
  __n128 *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  __n128 *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  _BOOL4 v200;
  unint64_t v201;
  unsigned int v202;
  unsigned int v203;
  BOOL v204;
  unsigned int v205;
  unsigned int v206;
  _BOOL4 v207;
  _BOOL4 v208;
  _BOOL4 v209;
  _OWORD *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v215;
  _OWORD *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  __n128 v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  _OWORD *v230;
  __int128 v231;
  BOOL v232;
  __n128 v233;
  unsigned int v234;
  _BOOL4 v235;
  __int128 v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  _BOOL4 v240;
  uint64_t v241;
  __int128 v242;
  unsigned int v243;
  unsigned int v244;
  BOOL v245;
  BOOL v246;
  __int128 v247;
  unsigned __int32 v248;
  unsigned __int32 v249;
  _BOOL4 v250;
  __n128 v251;
  __n128 v253;
  __n128 v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  __n128 v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __int128 v280;
  __int128 v281;
  __n128 v282;
  __n128 v283;
  __int128 v284;
  __n128 v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __int128 v289;
  __n128 v290;
  __int128 v291;
  __int128 v292;
  __n128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __n128 v297;
  __n128 v298;
  __int128 v299;
  __int128 v300;
  __n128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  uint64_t v311;
  uint64_t v312;
  __n128 v313;
  __n128 v314;
  __int128 v315;
  uint64_t v316;
  __int128 v317;

BOOL sub_20F9BD5F4(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 *v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  __n128 *v17;
  unsigned int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __n128 *v24;
  unsigned int v25;
  __n128 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  __int128 v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  unsigned int v41;
  _BOOL4 v42;
  __int128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 v48;
  unsigned int v49;
  _BOOL4 v50;
  _BOOL4 v51;
  __int128 v52;
  __n128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  unsigned int v65;
  _BOOL4 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  _BOOL4 v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  unsigned int v80;
  BOOL v81;
  BOOL v82;
  __int128 v83;
  uint64_t v84;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v5 = *(_DWORD *)(a2 - 32);
      v6 = *(_DWORD *)(a2 - 28);
      v4 = (__n128 *)(a2 - 32);
      v7 = v6 < *(_DWORD *)(a1 + 4);
      v8 = v5 == *(_DWORD *)a1;
      LODWORD(v9) = v5 < *(_DWORD *)a1;
      if (v8)
        v9 = v7;
      else
        v9 = v9;
      if ((_DWORD)v9 != 1)
        return 1;
      v11 = *(__n128 *)a1;
      v10 = *(__n128 *)(a1 + 16);
      v12 = v4[1];
      *(__n128 *)a1 = *v4;
      *(__n128 *)(a1 + 16) = v12;
      *v4 = v11;
      v4[1] = v10;
      return v9;
    case 3:
      v13 = (__n128 *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 32);
      v15 = *(_DWORD *)(a1 + 36);
      v16 = v14 < *(_DWORD *)a1;
      if (v14 == *(_DWORD *)a1)
        v16 = v15 < *(_DWORD *)(a1 + 4);
      v18 = *(_DWORD *)(a2 - 32);
      v17 = (__n128 *)(a2 - 32);
      v19 = *(_DWORD *)(a2 - 28) < v15;
      v8 = v18 == v14;
      v20 = v18 < v14;
      if (v8)
        v20 = v19;
      if (v16)
      {
        if (v20)
        {
          v22 = *(__n128 *)a1;
          v21 = *(_OWORD *)(a1 + 16);
          v23 = *(_OWORD *)(a2 - 16);
          *(__n128 *)a1 = *v17;
          *(_OWORD *)(a1 + 16) = v23;
        }
        else
        {
          v56 = *(__n128 *)a1;
          v55 = *(_OWORD *)(a1 + 16);
          v57 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v57;
          *v13 = v56;
          *(_OWORD *)(a1 + 48) = v55;
          v58 = *(_DWORD *)(a2 - 32);
          v59 = *(_DWORD *)(a1 + 32);
          v8 = v58 == v59;
          v60 = v58 < v59;
          if (v8)
            v60 = *(_DWORD *)(a2 - 28) < *(_DWORD *)(a1 + 36);
          if (!v60)
            return 1;
          v22 = *v13;
          v21 = *(_OWORD *)(a1 + 48);
          v61 = *(_OWORD *)(a2 - 16);
          *v13 = *v17;
          *(_OWORD *)(a1 + 48) = v61;
        }
        *v17 = v22;
        *(_OWORD *)(a2 - 16) = v21;
        return 1;
      }
      else
      {
        if (!v20)
          return 1;
        v39 = *v13;
        v38 = *(_OWORD *)(a1 + 48);
        v40 = *(_OWORD *)(a2 - 16);
        *v13 = *v17;
        *(_OWORD *)(a1 + 48) = v40;
        *v17 = v39;
        *(_OWORD *)(a2 - 16) = v38;
        v41 = *(_DWORD *)(a1 + 32);
        v8 = v41 == *(_DWORD *)a1;
        v42 = v41 < *(_DWORD *)a1;
        if (v8)
          v42 = *(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 4);
        if (!v42)
          return 1;
        v44 = *(__n128 *)a1;
        v43 = *(_OWORD *)(a1 + 16);
        v45 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v13;
        *(_OWORD *)(a1 + 16) = v45;
        *v13 = v44;
        *(_OWORD *)(a1 + 48) = v43;
        return 1;
      }
    case 4:
      sub_20F9BD9CC((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32), a3);
      return 1;
    case 5:
      sub_20F9BDB58((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v24 = (__n128 *)(a1 + 64);
      v25 = *(_DWORD *)(a1 + 64);
      v26 = (__n128 *)(a1 + 32);
      v27 = *(_DWORD *)(a1 + 32);
      v28 = *(_DWORD *)(a1 + 36);
      v29 = *(_DWORD *)a1;
      v30 = *(_DWORD *)(a1 + 4);
      v31 = v27 < *(_DWORD *)a1;
      if (v27 == *(_DWORD *)a1)
        v31 = v28 < v30;
      v32 = *(_DWORD *)(a1 + 68);
      v33 = v32 < v28;
      v8 = v25 == v27;
      v34 = v25 < v27;
      if (v8)
        v34 = v33;
      if (v31)
      {
        if (v34)
        {
          v36 = *(__n128 *)a1;
          v35 = *(_OWORD *)(a1 + 16);
          v37 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v24;
          *(_OWORD *)(a1 + 16) = v37;
LABEL_44:
          *v24 = v36;
          *(_OWORD *)(a1 + 80) = v35;
          goto LABEL_45;
        }
        v63 = *(__n128 *)a1;
        v62 = *(_OWORD *)(a1 + 16);
        v64 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v64;
        *v26 = v63;
        *(_OWORD *)(a1 + 48) = v62;
        v65 = *(_DWORD *)(a1 + 32);
        v8 = v25 == v65;
        v66 = v25 < v65;
        if (v8)
          v66 = v32 < *(_DWORD *)(a1 + 36);
        if (v66)
        {
          v36 = *v26;
          v35 = *(_OWORD *)(a1 + 48);
          v67 = *(_OWORD *)(a1 + 80);
          *v26 = *v24;
          *(_OWORD *)(a1 + 48) = v67;
          goto LABEL_44;
        }
      }
      else if (v34)
      {
        v47 = *v26;
        v46 = *(_OWORD *)(a1 + 48);
        v48 = *(_OWORD *)(a1 + 80);
        *v26 = *v24;
        *(_OWORD *)(a1 + 48) = v48;
        *v24 = v47;
        *(_OWORD *)(a1 + 80) = v46;
        v49 = *(_DWORD *)(a1 + 32);
        v50 = *(_DWORD *)(a1 + 36) < v30;
        v8 = v49 == v29;
        v51 = v49 < v29;
        if (v8)
          v51 = v50;
        if (v51)
        {
          v53 = *(__n128 *)a1;
          v52 = *(_OWORD *)(a1 + 16);
          v54 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v26;
          *(_OWORD *)(a1 + 16) = v54;
          *v26 = v53;
          *(_OWORD *)(a1 + 48) = v52;
        }
      }
LABEL_45:
      v68 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v69 = 0;
      v70 = 0;
      while (1)
      {
        v72 = *(_DWORD *)v68;
        v73 = *(_DWORD *)(v68 + 4);
        v74 = v24->n128_u32[0];
        v75 = v73 < v24->n128_u32[1];
        v8 = *(_DWORD *)v68 == v74;
        v76 = *(_DWORD *)v68 < v74;
        if (!v8)
          v75 = v76;
        if (v75)
        {
          v83 = *(_OWORD *)(v68 + 8);
          v84 = *(_QWORD *)(v68 + 24);
          v77 = v69;
          do
          {
            v78 = a1 + v77;
            v79 = *(_OWORD *)(a1 + v77 + 80);
            *(_OWORD *)(v78 + 96) = *(_OWORD *)(a1 + v77 + 64);
            *(_OWORD *)(v78 + 112) = v79;
            if (v77 == -64)
            {
              v71 = a1;
              goto LABEL_48;
            }
            v80 = *(_DWORD *)(v78 + 32);
            v81 = v73 < *(_DWORD *)(v78 + 36);
            v8 = v72 == v80;
            v82 = v72 < v80;
            if (!v8)
              v81 = v82;
            v77 -= 32;
          }
          while (v81);
          v71 = a1 + v77 + 96;
LABEL_48:
          *(_DWORD *)v71 = v72;
          *(_DWORD *)(v71 + 4) = v73;
          *(_OWORD *)(v71 + 8) = v83;
          *(_QWORD *)(v71 + 24) = v84;
          if (++v70 == 8)
            return v68 + 32 == a2;
        }
        v24 = (__n128 *)v68;
        v69 += 32;
        v68 += 32;
        if (v68 == a2)
          return 1;
      }
  }
}

__n128 sub_20F9BD9CC(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unsigned __int32 v5;
  unsigned __int32 v6;
  BOOL v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  _BOOL4 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  _BOOL4 v20;
  __n128 v21;
  _BOOL4 v22;
  __n128 v23;
  __n128 v24;
  _BOOL4 v25;
  __n128 v26;
  __n128 v27;
  _BOOL4 v28;
  __n128 v29;
  __n128 v30;

  v5 = a2->n128_u32[0];
  v6 = a2->n128_u32[1];
  v7 = a2->n128_u32[0] < a1->n128_u32[0];
  if (a2->n128_u32[0] == a1->n128_u32[0])
    v7 = v6 < a1->n128_u32[1];
  v8 = a3->n128_u32[1] < v6;
  v9 = a3->n128_u32[0] == v5;
  v10 = a3->n128_u32[0] < v5;
  if (v9)
    v10 = v8;
  if (v7)
  {
    if (v10)
    {
      v11 = *a1;
      result = a1[1];
      v12 = a3[1];
      *a1 = *a3;
      a1[1] = v12;
LABEL_17:
      *a3 = v11;
      a3[1] = result;
      goto LABEL_18;
    }
    v18 = *a1;
    result = a1[1];
    v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    *a2 = v18;
    a2[1] = result;
    v20 = a3->n128_u32[0] < a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0])
      v20 = a3->n128_u32[1] < a2->n128_u32[1];
    if (v20)
    {
      v11 = *a2;
      result = a2[1];
      v21 = a3[1];
      *a2 = *a3;
      a2[1] = v21;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    v13 = *a2;
    result = a2[1];
    v14 = a3[1];
    *a2 = *a3;
    a2[1] = v14;
    *a3 = v13;
    a3[1] = result;
    v15 = a2->n128_u32[0] < a1->n128_u32[0];
    if (a2->n128_u32[0] == a1->n128_u32[0])
      v15 = a2->n128_u32[1] < a1->n128_u32[1];
    if (v15)
    {
      v16 = *a1;
      result = a1[1];
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      *a2 = v16;
      a2[1] = result;
    }
  }
LABEL_18:
  v22 = a4->n128_u32[0] < a3->n128_u32[0];
  if (a4->n128_u32[0] == a3->n128_u32[0])
    v22 = a4->n128_u32[1] < a3->n128_u32[1];
  if (v22)
  {
    v23 = *a3;
    result = a3[1];
    v24 = a4[1];
    *a3 = *a4;
    a3[1] = v24;
    *a4 = v23;
    a4[1] = result;
    v25 = a3->n128_u32[0] < a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0])
      v25 = a3->n128_u32[1] < a2->n128_u32[1];
    if (v25)
    {
      v26 = *a2;
      result = a2[1];
      v27 = a3[1];
      *a2 = *a3;
      a2[1] = v27;
      *a3 = v26;
      a3[1] = result;
      v28 = a2->n128_u32[0] < a1->n128_u32[0];
      if (a2->n128_u32[0] == a1->n128_u32[0])
        v28 = a2->n128_u32[1] < a1->n128_u32[1];
      if (v28)
      {
        v29 = *a1;
        result = a1[1];
        v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        *a2 = v29;
        a2[1] = result;
      }
    }
  }
  return result;
}

__n128 sub_20F9BDB58(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 a6)
{
  __n128 result;
  _BOOL4 v12;
  __n128 v13;
  __n128 v14;
  _BOOL4 v15;
  __n128 v16;
  __n128 v17;
  _BOOL4 v18;
  __n128 v19;
  __n128 v20;
  _BOOL4 v21;
  __n128 v22;
  __n128 v23;

  result.n128_u64[0] = sub_20F9BD9CC(a1, a2, a3, a4, a6).n128_u64[0];
  v12 = a5->n128_u32[0] < a4->n128_u32[0];
  if (a5->n128_u32[0] == a4->n128_u32[0])
    v12 = a5->n128_u32[1] < a4->n128_u32[1];
  if (v12)
  {
    v13 = *a4;
    result = a4[1];
    v14 = a5[1];
    *a4 = *a5;
    a4[1] = v14;
    *a5 = v13;
    a5[1] = result;
    v15 = a4->n128_u32[0] < a3->n128_u32[0];
    if (a4->n128_u32[0] == a3->n128_u32[0])
      v15 = a4->n128_u32[1] < a3->n128_u32[1];
    if (v15)
    {
      v16 = *a3;
      result = a3[1];
      v17 = a4[1];
      *a3 = *a4;
      a3[1] = v17;
      *a4 = v16;
      a4[1] = result;
      v18 = a3->n128_u32[0] < a2->n128_u32[0];
      if (a3->n128_u32[0] == a2->n128_u32[0])
        v18 = a3->n128_u32[1] < a2->n128_u32[1];
      if (v18)
      {
        v19 = *a2;
        result = a2[1];
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *a3 = v19;
        a3[1] = result;
        v21 = a2->n128_u32[0] < a1->n128_u32[0];
        if (a2->n128_u32[0] == a1->n128_u32[0])
          v21 = a2->n128_u32[1] < a1->n128_u32[1];
        if (v21)
        {
          v22 = *a1;
          result = a1[1];
          v23 = a2[1];
          *a1 = *a2;
          a1[1] = v23;
          *a2 = v22;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

__n128 sub_20F9BDC70(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  __n128 *v67;
  __n128 *v68;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 64);
    v6 = 4 * v3;
    do
    {
      v7 = *(_QWORD *)a2 + 8 * v5;
      v8 = *a3 + 8 * *(unsigned int *)(*a1 + v4);
      result = *(__n128 *)(v7 + 32);
      v10 = *(_OWORD *)v7;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 + 16);
      *(__n128 *)(v8 + 32) = result;
      *(_OWORD *)v8 = v10;
      v4 += 4;
      v5 += 6;
    }
    while (v6 != v4);
  }
  v11 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 68);
    v14 = 4 * v11;
    do
    {
      v15 = *(_QWORD *)a2 + 8 * v13;
      v16 = *a3 + 8 * *(unsigned int *)(a1[3] + v12);
      result.n128_u64[0] = *(_QWORD *)(v15 + 64);
      v17 = *(_OWORD *)(v15 + 48);
      v18 = *(_OWORD *)v15;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v16 + 48) = v17;
      *(_QWORD *)(v16 + 64) = result.n128_u64[0];
      *(_OWORD *)v16 = v18;
      *(_OWORD *)(v16 + 16) = v19;
      v12 += 4;
      v13 += 9;
    }
    while (v14 != v12);
  }
  v20 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_DWORD *)(a2 + 72);
    v23 = 4 * v20;
    do
    {
      v24 = *(_QWORD *)a2 + 8 * v22;
      v25 = *a3 + 8 * *(unsigned int *)(a1[6] + v21);
      result = *(__n128 *)(v24 + 32);
      v26 = *(_OWORD *)v24;
      *(_OWORD *)(v25 + 16) = *(_OWORD *)(v24 + 16);
      *(__n128 *)(v25 + 32) = result;
      *(_OWORD *)v25 = v26;
      v21 += 4;
      v22 += 6;
    }
    while (v23 != v21);
  }
  v27 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = *(_DWORD *)(a2 + 76);
    v30 = 4 * v27;
    do
    {
      v31 = *(_QWORD *)a2 + 8 * v29;
      v32 = *a3 + 8 * *(unsigned int *)(a1[9] + v28);
      result = *(__n128 *)(v31 + 32);
      v33 = *(_OWORD *)v31;
      *(_OWORD *)(v32 + 16) = *(_OWORD *)(v31 + 16);
      *(__n128 *)(v32 + 32) = result;
      *(_OWORD *)v32 = v33;
      v28 += 4;
      v29 += 6;
    }
    while (v30 != v28);
  }
  v34 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = *(_DWORD *)(a2 + 80);
    v37 = 4 * v34;
    do
    {
      v38 = (__n128 *)(*(_QWORD *)a2 + 8 * v36);
      v39 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[12] + v35));
      result = *v38;
      v39[1].n128_u64[0] = v38[1].n128_u64[0];
      *v39 = result;
      v35 += 4;
      v36 += 3;
    }
    while (v37 != v35);
  }
  v40 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = *(_DWORD *)(a2 + 84);
    do
    {
      result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v42 + v41));
      *(_QWORD *)(*a3 + 8 * *(unsigned int *)(a1[15] + 4 * v41++)) = result.n128_u64[0];
    }
    while (v40 != v41);
  }
  v43 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v43)
  {
    v44 = 0;
    v45 = *(_DWORD *)(a2 + 88);
    v46 = 4 * v43;
    do
    {
      v47 = *(_QWORD *)a2 + 8 * (v45 + v44);
      v48 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[18] + v44));
      result = *(__n128 *)v47;
      v49 = *(_OWORD *)(v47 + 16);
      *v48 = *(_OWORD *)v47;
      v48[1] = v49;
      v44 += 4;
    }
    while (v46 != v44);
  }
  v50 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = *(_DWORD *)(a2 + 92);
    v53 = 4 * v50;
    do
    {
      v54 = *(_QWORD *)a2 + 8 * (v52 + v51);
      v55 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[21] + v51));
      result = *(__n128 *)v54;
      v56 = *(_OWORD *)(v54 + 16);
      *v55 = *(_OWORD *)v54;
      v55[1] = v56;
      v51 += 4;
    }
    while (v53 != v51);
  }
  v57 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v57)
  {
    v58 = 0;
    v59 = *(_DWORD *)(a2 + 96);
    v60 = 4 * v57;
    do
    {
      v61 = (__n128 *)(*(_QWORD *)a2 + 8 * v59);
      v62 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[24] + v58));
      result = *v61;
      v62[1].n128_u64[0] = v61[1].n128_u64[0];
      *v62 = result;
      v58 += 4;
      v59 += 3;
    }
    while (v60 != v58);
  }
  v63 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v63)
  {
    v64 = 0;
    v65 = *(_DWORD *)(a2 + 100);
    v66 = 4 * v63;
    do
    {
      v67 = (__n128 *)(*(_QWORD *)a2 + 8 * v65);
      v68 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[27] + v64));
      result = *v67;
      v68[1].n128_u64[0] = v67[1].n128_u64[0];
      *v68 = result;
      v64 += 4;
      v65 += 3;
    }
    while (v66 != v64);
  }
  return result;
}

int64x2_t *sub_20F9BDF50(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, unsigned __int8 *a5)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int64x2_t v29;
  __int128 v30;
  int64x2_t v31;
  int64x2_t v32;
  __int128 v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int64x2_t v82;
  __int128 v83;
  int64x2_t v84;
  int64x2_t v85;
  __int128 v86;
  int64x2_t v87;
  int64x2_t v88;
  __int128 v89;
  int64x2_t v90;
  int64x2_t v91;
  uint64_t v92;
  __int128 v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  int64x2_t v149;
  __int128 v150;
  int64x2_t v151;
  int64x2_t v152;
  __int128 v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t *v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int *v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  int v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  int64x2_t v202;
  __int128 v203;
  int64x2_t v204;
  int64x2_t v205;
  __int128 v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t *v211;
  _OWORD *v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t *v242;
  int v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int8x16_t v254;
  unint64_t v255;
  int64x2_t v256;
  __int128 v257;
  uint64_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t *v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  int8x16_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t *v278;
  int v279;
  unsigned int v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  int8x16_t *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int *v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t *v305;
  int v306;
  unsigned int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  int64x2_t *v316;
  int64x2_t v317;
  int64x2_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t *v324;
  int64x2_t *v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int *v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t *v349;
  int v350;
  unsigned int v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  int64x2_t *v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t *v368;
  int64x2_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int *v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t *v393;
  int v394;
  unsigned int v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int8x16_t v405;
  unint64_t v406;
  int64x2_t v407;
  __int128 v408;
  uint64_t v409;
  int64x2_t v410;
  int64x2_t v411;
  int64x2_t *v412;
  uint64_t v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  uint64_t v417;
  int8x16_t *v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int *v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t *v429;
  int v430;
  unsigned int v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int8x16_t v441;
  unint64_t v442;
  int64x2_t v443;
  __int128 v444;
  uint64_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t *v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  int8x16_t *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int *v462;
  uint64_t v463;
  unsigned int v464;
  uint64_t *v465;
  int v466;
  unsigned int v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  int64x2_t v478;
  __int128 v479;
  int64x2_t v480;
  int64x2_t v481;
  __int128 v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  int64x2_t v486;
  int64x2_t *v487;
  _OWORD *v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  uint64_t v492;
  __int128 v493;
  uint64_t v494;
  __int128 v495;
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  __int128 v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int *v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t *v518;
  int v519;
  unsigned int v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  __int128 v529;
  uint64_t v530;
  int64x2_t v531;
  __int128 v532;
  int64x2_t v533;
  int64x2_t v534;
  __int128 v535;
  int64x2_t v536;
  int64x2_t v537;
  __int128 v538;
  int64x2_t v539;
  int64x2_t v540;
  uint64_t v541;
  __int128 v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  __int128 v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  __int128 v559;
  uint64_t v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int *v582;
  uint64_t v583;
  unsigned int v584;
  uint64_t *v585;
  int v586;
  unsigned int v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  __int128 v597;
  int64x2_t v598;
  __int128 v599;
  int64x2_t v600;
  int64x2_t v601;
  __int128 v602;
  int64x2_t v603;
  int64x2_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t *v607;
  _OWORD *v608;
  uint64_t v609;
  uint64_t v610;
  __int128 v611;
  uint64_t v612;
  __int128 v613;
  uint64_t v614;
  __int128 v615;
  uint64_t v616;
  __int128 v617;
  uint64_t v618;
  __int128 v619;
  uint64_t v620;
  __int128 v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unsigned int v633;
  unsigned int v634;
  unsigned int *v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t *v638;
  int v639;
  unsigned int v640;
  uint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  __int128 v650;
  int64x2_t v651;
  __int128 v652;
  int64x2_t v653;
  int64x2_t v654;
  __int128 v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t *v660;
  _OWORD *v661;
  uint64_t v662;
  uint64_t v663;
  __int128 v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667;
  __int128 v668;
  uint64_t v669;
  __int128 v670;
  uint64_t v671;
  __int128 v672;
  uint64_t v673;
  __int128 v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  unsigned int v687;
  unsigned int *v688;
  uint64_t v689;
  unsigned int v690;
  uint64_t *v691;
  int v692;
  unsigned int v693;
  uint64_t *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  unsigned int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int8x16_t v703;
  unint64_t v704;
  int64x2_t v705;
  __int128 v706;
  uint64_t v707;
  int64x2_t v708;
  int64x2_t v709;
  int64x2_t *v710;
  uint64_t v711;
  __int128 v712;
  __int128 v713;
  uint64_t v714;
  uint64_t v715;
  int8x16_t *v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unsigned int v722;
  unsigned int v723;
  unsigned int *v724;
  uint64_t v725;
  unsigned int v726;
  uint64_t *v727;
  int v728;
  unsigned int v729;
  uint64_t *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unsigned int v734;
  unsigned int v735;
  int8x16_t *v736;
  uint64_t v737;
  _QWORD *v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  __int128 v743;
  uint64_t *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unsigned int v749;
  unsigned int v750;
  unsigned int *v751;
  uint64_t v752;
  unsigned int v753;
  uint64_t *v754;
  int v755;
  unsigned int v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unsigned int v761;
  unsigned int v762;
  uint64_t v763;
  uint64_t v764;
  int64x2_t *v765;
  int64x2_t v766;
  int64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  int64x2_t v770;
  int64x2_t v771;
  int64x2_t v772;
  int64x2_t *v773;
  int64x2_t *v774;
  uint64_t v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  __int128 v779;
  uint64_t v780;
  __int128 v781;
  uint64_t v782;
  __int128 v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unsigned int v793;
  unsigned int v794;
  unsigned int *v795;
  uint64_t v796;
  unsigned int v797;
  uint64_t *v798;
  int v799;
  unsigned int v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  unsigned int v805;
  unsigned int v806;
  uint64_t v807;
  uint64_t v808;
  int64x2_t *v809;
  int64x2_t v810;
  int64x2_t v811;
  int64x2_t v812;
  int64x2_t v813;
  int64x2_t v814;
  int64x2_t v815;
  int64x2_t v816;
  int64x2_t *v817;
  int64x2_t *v818;
  uint64_t v819;
  uint64_t v820;
  __int128 v821;
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  __int128 v825;
  uint64_t v826;
  __int128 v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  unsigned int v837;
  unsigned int v838;
  unsigned int *v839;
  uint64_t v840;
  unsigned int v841;
  uint64_t *v842;
  int v843;
  unsigned int v844;
  uint64_t *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unsigned int v849;
  unsigned int v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int8x16_t v854;
  unint64_t v855;
  int64x2_t v856;
  __int128 v857;
  uint64_t v858;
  int64x2_t v859;
  int64x2_t v860;
  int64x2_t *v861;
  uint64_t v862;
  __int128 v863;
  __int128 v864;
  uint64_t v865;
  uint64_t v866;
  int8x16_t *v867;
  uint64_t *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unsigned int v873;
  unsigned int v874;
  unsigned int *v875;
  uint64_t v876;
  unsigned int v877;
  uint64_t *v878;
  int v879;
  unsigned int v880;
  uint64_t *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unsigned int v885;
  unsigned int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int8x16_t v890;
  unint64_t v891;
  int64x2_t v892;
  __int128 v893;
  uint64_t v894;
  int64x2_t v895;
  int64x2_t v896;
  int64x2_t *v897;
  uint64_t v898;
  __int128 v899;
  __int128 v900;
  uint64_t v901;
  uint64_t v902;
  int8x16_t *v903;
  uint64_t *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int *v911;
  uint64_t v912;
  unsigned int v913;
  uint64_t *v914;
  int v915;
  unsigned int v916;
  uint64_t *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  unsigned int v921;
  unsigned int v922;
  uint64_t v923;
  uint64_t v924;
  int64x2_t *v925;
  int64x2_t v926;
  int64x2_t v927;
  int64x2_t v928;
  int64x2_t v929;
  int64x2_t v930;
  int64x2_t v931;
  int64x2_t v932;
  int64x2_t v933;
  int64x2_t v934;
  int64x2_t v935;
  int64x2_t v936;
  int64x2_t v937;
  int64x2_t v938;
  int64x2_t v939;
  int64x2_t v940;
  int64x2_t *v941;
  int64x2_t *v942;
  int64x2_t *v943;
  _OWORD *v944;
  uint64_t v945;
  _OWORD *v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  _OWORD *v958;
  _OWORD *v959;
  _OWORD *v960;
  _OWORD *v961;
  _OWORD *v962;
  uint64_t *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  unsigned int v968;
  unsigned int v969;
  unsigned int *v970;
  uint64_t v971;
  unsigned int v972;
  uint64_t *v973;
  int v974;
  unsigned int v975;
  uint64_t *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unsigned int v980;
  unsigned int v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int64x2_t v985;
  int64x2_t v986;
  int64x2_t v987;
  int64x2_t v988;
  int64x2_t v989;
  int64x2_t v990;
  int64x2_t v991;
  int64x2_t v992;
  int64x2_t v993;
  __int128 v994;
  __int128 v995;
  int64x2_t v996;
  int64x2_t v997;
  int64x2_t v998;
  int64x2_t v999;
  __int128 v1000;
  int64x2_t v1001;
  int64x2_t v1002;
  int64x2_t v1003;
  __int128 v1004;
  uint64_t v1005;
  int64x2_t *v1006;
  uint64_t v1007;
  _OWORD *v1008;
  uint64_t v1009;
  _OWORD *v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  _OWORD *v1028;
  _OWORD *v1029;
  _OWORD *v1030;
  _OWORD *v1031;
  _OWORD *v1032;
  _OWORD *v1033;
  _OWORD *v1034;
  _OWORD *v1035;
  uint64_t *v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unsigned int v1041;
  unsigned int v1042;
  unsigned int *v1043;
  uint64_t v1044;
  unsigned int v1045;
  uint64_t *v1046;
  int v1047;
  unsigned int v1048;
  uint64_t *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unsigned int v1053;
  unsigned int v1054;
  uint64_t v1055;
  uint64_t v1056;
  int64x2_t *v1057;
  int64x2_t v1058;
  int64x2_t v1059;
  int64x2_t v1060;
  int64x2_t v1061;
  int64x2_t v1062;
  int64x2_t v1063;
  int64x2_t v1064;
  int64x2_t v1065;
  int64x2_t v1066;
  int64x2_t v1067;
  int64x2_t v1068;
  int64x2_t v1069;
  int64x2_t v1070;
  int64x2_t v1071;
  int64x2_t v1072;
  int64x2_t *v1073;
  int64x2_t *v1074;
  int64x2_t *v1075;
  _OWORD *v1076;
  uint64_t v1077;
  _OWORD *v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  _OWORD *v1090;
  _OWORD *v1091;
  _OWORD *v1092;
  _OWORD *v1093;
  _OWORD *v1094;
  uint64_t *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  unsigned int v1100;
  unsigned int v1101;
  unsigned int *v1102;
  uint64_t v1103;
  unsigned int v1104;
  uint64_t *v1105;
  int v1106;
  unsigned int v1107;
  uint64_t *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int v1112;
  unsigned int v1113;
  uint64_t v1114;
  uint64_t v1115;
  int64x2_t *v1116;
  int64x2_t v1117;
  int64x2_t v1118;
  int64x2_t v1119;
  int64x2_t v1120;
  int64x2_t v1121;
  int64x2_t v1122;
  int64x2_t v1123;
  int64x2_t v1124;
  int64x2_t v1125;
  int64x2_t v1126;
  int64x2_t v1127;
  int64x2_t v1128;
  int64x2_t v1129;
  int64x2_t v1130;
  int64x2_t v1131;
  int64x2_t *v1132;
  int64x2_t *v1133;
  int64x2_t *v1134;
  _OWORD *v1135;
  uint64_t v1136;
  _OWORD *v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  _OWORD *v1149;
  _OWORD *v1150;
  _OWORD *v1151;
  _OWORD *v1152;
  _OWORD *v1153;
  uint64_t *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  unsigned int v1159;
  unsigned int v1160;
  unsigned int *v1161;
  uint64_t v1162;
  unsigned int v1163;
  uint64_t *v1164;
  int v1165;
  unsigned int v1166;
  uint64_t *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unsigned int v1171;
  unsigned int v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  int64x2_t v1176;
  int64x2_t v1177;
  int64x2_t v1178;
  __int128 v1179;
  __int128 v1180;
  int64x2_t v1181;
  int64x2_t v1182;
  int64x2_t *v1183;
  int64x2_t *v1184;
  int64x2_t *v1185;
  _OWORD *v1186;
  uint64_t v1187;
  _OWORD *v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  _OWORD *v1194;
  _OWORD *v1195;
  uint64_t *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  unsigned int v1201;
  unsigned int v1202;
  unsigned int *v1203;
  uint64_t v1204;
  unsigned int v1205;
  uint64_t *v1206;
  int v1207;
  unsigned int v1208;
  uint64_t *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  unsigned int v1213;
  unsigned int v1214;
  uint64_t v1215;
  uint64_t v1216;
  _QWORD *v1217;
  int8x16_t v1218;
  unint64_t v1219;
  _OWORD *v1220;
  _OWORD *v1221;
  __int128 v1222;
  uint64_t *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  unsigned int v1229;
  unsigned int *v1230;
  uint64_t v1231;
  unsigned int v1232;
  uint64_t *v1233;
  int v1234;
  unsigned int v1235;
  uint64_t *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  unsigned int v1240;
  unsigned int v1241;
  uint64_t v1242;
  uint64_t v1243;
  int64x2_t *v1244;
  int64x2_t v1245;
  int64x2_t v1246;
  int64x2_t v1247;
  int64x2_t v1248;
  int64x2_t v1249;
  int64x2_t v1250;
  int64x2_t v1251;
  int64x2_t v1252;
  int64x2_t v1253;
  int64x2_t v1254;
  int64x2_t v1255;
  int64x2_t v1256;
  int64x2_t *v1257;
  int64x2_t *v1258;
  int64x2_t v1259;
  int64x2_t v1260;
  int64x2_t v1261;
  __int8 *v1262;
  int64x2_t *v1263;
  int64x2_t *v1264;
  uint64_t *v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unsigned int v1270;
  unsigned int v1271;
  unsigned int *v1272;
  uint64_t v1273;
  unsigned int v1274;
  uint64_t *v1275;
  int v1276;
  unsigned int v1277;
  uint64_t *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  unsigned int v1282;
  unsigned int v1283;
  uint64_t v1284;
  uint64_t v1285;
  int64x2_t *v1286;
  int64x2_t v1287;
  int64x2_t v1288;
  int64x2_t v1289;
  int64x2_t v1290;
  int64x2_t v1291;
  int64x2_t v1292;
  int64x2_t v1293;
  int64x2_t v1294;
  int64x2_t v1295;
  int64x2_t v1296;
  int64x2_t v1297;
  int64x2_t v1298;
  int64x2_t *v1299;
  int64x2_t *v1300;
  int64x2_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  __int8 *v1304;
  int64x2_t *v1305;
  int64x2_t *v1306;
  uint64_t *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unsigned int v1312;
  unsigned int v1313;
  unsigned int *v1314;
  uint64_t v1315;
  unsigned int v1316;
  uint64_t *v1317;
  int v1318;
  unsigned int v1319;
  uint64_t *v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  unsigned int v1324;
  unsigned int v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  int64x2_t v1329;
  int64x2_t v1330;
  int64x2_t v1331;
  __int128 v1332;
  __int128 v1333;
  int64x2_t v1334;
  int64x2_t v1335;
  int64x2_t *v1336;
  int64x2_t *v1337;
  int64x2_t *v1338;
  _OWORD *v1339;
  uint64_t v1340;
  _OWORD *v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  _OWORD *v1347;
  _OWORD *v1348;
  uint64_t *v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unsigned int v1354;
  unsigned int v1355;
  unsigned int *v1356;
  uint64_t v1357;
  unsigned int v1358;
  uint64_t *v1359;
  int v1360;
  unsigned int v1361;
  uint64_t *v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  unsigned int v1366;
  unsigned int v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  int64x2_t v1371;
  int64x2_t v1372;
  int64x2_t v1373;
  __int128 v1374;
  __int128 v1375;
  int64x2_t v1376;
  int64x2_t v1377;
  int64x2_t *v1378;
  int64x2_t *v1379;
  int64x2_t *v1380;
  _OWORD *v1381;
  uint64_t v1382;
  _OWORD *v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  __int128 v1388;
  _OWORD *v1389;
  _OWORD *v1390;
  uint64_t *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  unsigned int v1396;
  unsigned int v1397;
  unsigned int *v1398;
  uint64_t v1399;
  unsigned int v1400;
  uint64_t *v1401;
  int v1402;
  unsigned int v1403;
  uint64_t *v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unsigned int v1408;
  unsigned int v1409;
  uint64_t v1410;
  uint64_t v1411;
  int64x2_t *v1412;
  int64x2_t v1413;
  int64x2_t v1414;
  int64x2_t v1415;
  int64x2_t v1416;
  int64x2_t v1417;
  int64x2_t v1418;
  int64x2_t v1419;
  int64x2_t v1420;
  int64x2_t v1421;
  int64x2_t v1422;
  int64x2_t v1423;
  int64x2_t v1424;
  int64x2_t v1425;
  int64x2_t v1426;
  int64x2_t v1427;
  int64x2_t *v1428;
  int64x2_t *v1429;
  int64x2_t *v1430;
  _OWORD *v1431;
  uint64_t v1432;
  _OWORD *v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  _OWORD *v1445;
  _OWORD *v1446;
  _OWORD *v1447;
  _OWORD *v1448;
  _OWORD *v1449;
  uint64_t *v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  unsigned int v1455;
  unsigned int v1456;
  unsigned int *v1457;
  uint64_t v1458;
  unsigned int v1459;
  uint64_t *v1460;
  int v1461;
  unsigned int v1462;
  uint64_t *v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unsigned int v1467;
  unsigned int v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  int64x2_t v1472;
  int64x2_t v1473;
  int64x2_t v1474;
  int64x2_t v1475;
  int64x2_t v1476;
  int64x2_t v1477;
  int64x2_t v1478;
  int64x2_t v1479;
  int64x2_t v1480;
  __int128 v1481;
  __int128 v1482;
  int64x2_t v1483;
  int64x2_t v1484;
  int64x2_t v1485;
  int64x2_t v1486;
  __int128 v1487;
  int64x2_t v1488;
  int64x2_t v1489;
  int64x2_t v1490;
  __int128 v1491;
  uint64_t v1492;
  int64x2_t *v1493;
  uint64_t v1494;
  _OWORD *v1495;
  uint64_t v1496;
  _OWORD *v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  _OWORD *v1515;
  _OWORD *v1516;
  _OWORD *v1517;
  _OWORD *v1518;
  _OWORD *v1519;
  _OWORD *v1520;
  _OWORD *v1521;
  _OWORD *v1522;
  uint64_t *v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unsigned int v1528;
  unsigned int v1529;
  unsigned int *v1530;
  uint64_t v1531;
  unsigned int v1532;
  uint64_t *v1533;
  int v1534;
  unsigned int v1535;
  uint64_t *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  unsigned int v1540;
  unsigned int v1541;
  uint64_t v1542;
  uint64_t v1543;
  int64x2_t *v1544;
  int64x2_t v1545;
  int64x2_t v1546;
  int64x2_t v1547;
  int64x2_t v1548;
  int64x2_t v1549;
  int64x2_t v1550;
  int64x2_t v1551;
  int64x2_t v1552;
  int64x2_t v1553;
  int64x2_t v1554;
  int64x2_t v1555;
  int64x2_t v1556;
  int64x2_t v1557;
  int64x2_t v1558;
  int64x2_t v1559;
  int64x2_t *v1560;
  int64x2_t *v1561;
  int64x2_t *v1562;
  _OWORD *v1563;
  uint64_t v1564;
  _OWORD *v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  _OWORD *v1577;
  _OWORD *v1578;
  _OWORD *v1579;
  _OWORD *v1580;
  _OWORD *v1581;
  uint64_t *v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  unsigned int v1587;
  unsigned int v1588;
  unsigned int *v1589;
  uint64_t v1590;
  unsigned int v1591;
  uint64_t *v1592;
  int v1593;
  unsigned int v1594;
  uint64_t *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  unsigned int v1599;
  unsigned int v1600;
  uint64_t v1601;
  uint64_t v1602;
  int64x2_t *v1603;
  int64x2_t v1604;
  int64x2_t v1605;
  int64x2_t v1606;
  int64x2_t v1607;
  int64x2_t v1608;
  int64x2_t v1609;
  int64x2_t v1610;
  int64x2_t v1611;
  int64x2_t v1612;
  int64x2_t v1613;
  int64x2_t v1614;
  int64x2_t v1615;
  int64x2_t v1616;
  int64x2_t v1617;
  int64x2_t v1618;
  int64x2_t *v1619;
  int64x2_t *v1620;
  int64x2_t *v1621;
  _OWORD *v1622;
  uint64_t v1623;
  _OWORD *v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  __int128 v1635;
  _OWORD *v1636;
  _OWORD *v1637;
  _OWORD *v1638;
  _OWORD *v1639;
  _OWORD *v1640;
  uint64_t *v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  unsigned int v1646;
  unsigned int v1647;
  unsigned int *v1648;
  uint64_t v1649;
  unsigned int v1650;
  uint64_t *v1651;
  int v1652;
  unsigned int v1653;
  uint64_t *v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unsigned int v1658;
  unsigned int v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  int64x2_t v1663;
  int64x2_t v1664;
  int64x2_t v1665;
  __int128 v1666;
  __int128 v1667;
  int64x2_t v1668;
  int64x2_t v1669;
  int64x2_t *v1670;
  int64x2_t *v1671;
  int64x2_t *v1672;
  _OWORD *v1673;
  uint64_t v1674;
  _OWORD *v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  __int128 v1680;
  _OWORD *v1681;
  _OWORD *v1682;
  uint64_t *v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  unsigned int v1688;
  unsigned int v1689;
  unsigned int *v1690;
  uint64_t v1691;
  unsigned int v1692;
  uint64_t *v1693;
  int v1694;
  unsigned int v1695;
  uint64_t *v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  unsigned int v1700;
  unsigned int v1701;
  uint64_t v1702;
  uint64_t v1703;
  _QWORD *v1704;
  int8x16_t v1705;
  unint64_t v1706;
  _OWORD *v1707;
  _OWORD *v1708;
  __int128 v1709;
  uint64_t *v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  unsigned int v1715;
  unsigned int v1716;
  unsigned int *v1717;
  uint64_t v1718;
  unsigned int v1719;
  uint64_t *v1720;
  int v1721;
  unsigned int v1722;
  uint64_t *v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  unsigned int v1727;
  unsigned int v1728;
  uint64_t v1729;
  uint64_t v1730;
  int64x2_t *v1731;
  int64x2_t v1732;
  int64x2_t v1733;
  int64x2_t v1734;
  int64x2_t v1735;
  int64x2_t v1736;
  int64x2_t v1737;
  int64x2_t v1738;
  int64x2_t v1739;
  int64x2_t v1740;
  int64x2_t v1741;
  int64x2_t v1742;
  int64x2_t v1743;
  int64x2_t *v1744;
  int64x2_t *v1745;
  int64x2_t v1746;
  int64x2_t v1747;
  int64x2_t v1748;
  __int8 *v1749;
  int64x2_t *v1750;
  int64x2_t *v1751;
  uint64_t *v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  unsigned int v1757;
  unsigned int v1758;
  unsigned int *v1759;
  uint64_t v1760;
  unsigned int v1761;
  uint64_t *v1762;
  int v1763;
  unsigned int v1764;
  uint64_t *v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  unsigned int v1769;
  unsigned int v1770;
  uint64_t v1771;
  uint64_t v1772;
  int64x2_t *v1773;
  int64x2_t v1774;
  int64x2_t v1775;
  int64x2_t v1776;
  int64x2_t v1777;
  int64x2_t v1778;
  int64x2_t v1779;
  int64x2_t v1780;
  int64x2_t v1781;
  int64x2_t v1782;
  int64x2_t v1783;
  int64x2_t v1784;
  int64x2_t v1785;
  int64x2_t *v1786;
  int64x2_t *v1787;
  int64x2_t v1788;
  int64x2_t v1789;
  int64x2_t v1790;
  __int8 *v1791;
  int64x2_t *v1792;
  int64x2_t *v1793;
  uint64_t *v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  unsigned int v1799;
  unsigned int v1800;
  unsigned int *v1801;
  uint64_t v1802;
  unsigned int v1803;
  uint64_t *v1804;
  int v1805;
  unsigned int v1806;
  uint64_t *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unsigned int v1811;
  unsigned int v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  int64x2_t v1816;
  int64x2_t v1817;
  int64x2_t v1818;
  __int128 v1819;
  __int128 v1820;
  int64x2_t v1821;
  int64x2_t v1822;
  int64x2_t *v1823;
  int64x2_t *v1824;
  int64x2_t *v1825;
  _OWORD *v1826;
  uint64_t v1827;
  _OWORD *v1828;
  __int128 v1829;
  __int128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  _OWORD *v1834;
  _OWORD *v1835;
  uint64_t *v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  unsigned int v1841;
  unsigned int v1842;
  unsigned int *v1843;
  uint64_t v1844;
  unsigned int v1845;
  uint64_t *v1846;
  int v1847;
  unsigned int v1848;
  uint64_t *v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  unsigned int v1853;
  unsigned int v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  int64x2_t v1858;
  int64x2_t v1859;
  int64x2_t v1860;
  __int128 v1861;
  __int128 v1862;
  int64x2_t v1863;
  int64x2_t v1864;
  int64x2_t *v1865;
  int64x2_t *v1866;
  int64x2_t *v1867;
  _OWORD *v1868;
  uint64_t v1869;
  _OWORD *v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  _OWORD *v1876;
  _OWORD *v1877;
  uint64_t *v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t *v1883;
  unsigned int v1884;
  unsigned int v1885;
  unsigned int *v1886;
  uint64_t v1887;
  unsigned int v1888;
  uint64_t *v1889;
  int v1890;
  unsigned int v1891;
  uint64_t *v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  unsigned int v1896;
  unsigned int v1897;
  __int128 *v1898;
  _OWORD *v1899;
  __int128 v1900;
  __int128 v1901;
  _QWORD *v1902;
  uint64_t v1903;
  _QWORD *v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t *v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  unsigned int v1915;
  unsigned int v1916;
  unsigned int *v1917;
  uint64_t v1918;
  unsigned int v1919;
  uint64_t *v1920;
  int v1921;
  unsigned int v1922;
  uint64_t *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unsigned int v1927;
  unsigned int v1928;
  uint64_t v1929;
  uint64_t v1930;
  __int128 v1931;
  __int128 v1932;
  __int128 v1933;
  __int128 v1934;
  _QWORD *v1935;
  uint64_t v1936;
  _QWORD *v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t *v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  unsigned int v1951;
  unsigned int v1952;
  unsigned int *v1953;
  uint64_t v1954;
  unsigned int v1955;
  uint64_t *v1956;
  int v1957;
  unsigned int v1958;
  uint64_t *v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  unsigned int v1963;
  unsigned int v1964;
  __int128 *v1965;
  _OWORD *v1966;
  __int128 v1967;
  __int128 v1968;
  _QWORD *v1969;
  uint64_t v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t *v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  unsigned int v1982;
  unsigned int v1983;
  unsigned int *v1984;
  uint64_t v1985;
  unsigned int v1986;
  uint64_t *v1987;
  int v1988;
  unsigned int v1989;
  uint64_t *v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  unsigned int v1994;
  unsigned int v1995;
  __int128 *v1996;
  _OWORD *v1997;
  __int128 v1998;
  __int128 v1999;
  _QWORD *v2000;
  uint64_t v2001;
  _QWORD *v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t *v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  unsigned int v2013;
  unsigned int v2014;
  unsigned int *v2015;
  uint64_t v2016;
  unsigned int v2017;
  uint64_t *v2018;
  int v2019;
  unsigned int v2020;
  uint64_t *v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  unsigned int v2025;
  unsigned int v2026;
  uint64_t v2027;
  uint64_t v2028;
  __int128 v2029;
  _QWORD *v2030;
  uint64_t v2031;
  _QWORD *v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t *v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  int v2040;
  unsigned int v2041;
  unsigned int v2042;
  unsigned int *v2043;
  uint64_t v2044;
  unsigned int v2045;
  uint64_t *v2046;
  int v2047;
  unsigned int v2048;
  uint64_t *v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  unsigned int v2053;
  unsigned int v2054;
  _OWORD *v2055;
  _OWORD *v2056;
  __int128 v2057;
  _QWORD *v2058;
  uint64_t v2059;
  _QWORD *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t *v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  unsigned int v2069;
  unsigned int v2070;
  unsigned int *v2071;
  uint64_t v2072;
  unsigned int v2073;
  uint64_t *v2074;
  int v2075;
  unsigned int v2076;
  uint64_t *v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  unsigned int v2081;
  unsigned int v2082;
  _OWORD *v2083;
  _OWORD *v2084;
  __int128 v2085;
  _QWORD *v2086;
  uint64_t v2087;
  _QWORD *v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t *v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  unsigned int v2097;
  unsigned int v2098;
  unsigned int *v2099;
  uint64_t v2100;
  unsigned int v2101;
  uint64_t *v2102;
  int v2103;
  unsigned int v2104;
  uint64_t *v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  unsigned int v2109;
  unsigned int v2110;
  uint64_t v2111;
  uint64_t v2112;
  __int128 v2113;
  _QWORD *v2114;
  uint64_t v2115;
  _QWORD *v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t *v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  unsigned int v2124;
  unsigned int v2125;
  unsigned int *v2126;
  uint64_t v2127;
  unsigned int v2128;
  uint64_t *v2129;
  int v2130;
  unsigned int v2131;
  uint64_t *v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  unsigned int v2136;
  unsigned int v2137;
  uint64_t v2138;
  uint64_t v2139;
  __int128 v2140;
  _QWORD *v2141;
  uint64_t v2142;
  _QWORD *v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t *v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  unsigned int v2151;
  unsigned int v2152;
  unsigned int *v2153;
  uint64_t v2154;
  unsigned int v2155;
  uint64_t *v2156;
  int v2157;
  unsigned int v2158;
  uint64_t *v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  unsigned int v2163;
  unsigned int v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  __int128 v2168;
  int64x2_t v2169;
  __int128 v2170;
  int64x2_t v2171;
  int64x2_t v2172;
  __int128 v2173;
  int64x2_t v2174;
  int64x2_t v2175;
  int64x2_t v2176;
  int64x2_t v2177;
  int64x2_t *v2178;
  _OWORD *v2179;
  uint64_t v2180;
  uint64_t v2181;
  __int128 v2182;
  uint64_t v2183;
  __int128 v2184;
  uint64_t v2185;
  __int128 v2186;
  uint64_t v2187;
  __int128 v2188;
  uint64_t v2189;
  __int128 v2190;
  uint64_t v2191;
  __int128 v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t *v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  unsigned int v2204;
  unsigned int v2205;
  unsigned int *v2206;
  uint64_t v2207;
  unsigned int v2208;
  uint64_t *v2209;
  int v2210;
  unsigned int v2211;
  uint64_t *v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  unsigned int v2216;
  unsigned int v2217;
  uint64_t v2218;
  uint64_t v2219;
  __int128 v2220;
  uint64_t v2221;
  int64x2_t v2222;
  __int128 v2223;
  int64x2_t v2224;
  int64x2_t v2225;
  __int128 v2226;
  int64x2_t v2227;
  int64x2_t v2228;
  __int128 v2229;
  int64x2_t v2230;
  int64x2_t v2231;
  uint64_t v2232;
  __int128 v2233;
  int64x2_t v2234;
  int64x2_t v2235;
  int64x2_t *v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  __int128 v2240;
  uint64_t v2241;
  __int128 v2242;
  uint64_t v2243;
  __int128 v2244;
  uint64_t v2245;
  __int128 v2246;
  uint64_t v2247;
  __int128 v2248;
  uint64_t v2249;
  __int128 v2250;
  uint64_t v2251;
  __int128 v2252;
  uint64_t v2253;
  __int128 v2254;
  uint64_t v2255;
  __int128 v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t *v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  unsigned int v2271;
  unsigned int v2272;
  unsigned int *v2273;
  uint64_t v2274;
  unsigned int v2275;
  uint64_t *v2276;
  int v2277;
  unsigned int v2278;
  uint64_t *v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  unsigned int v2283;
  unsigned int v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  __int128 v2288;
  int64x2_t v2289;
  __int128 v2290;
  int64x2_t v2291;
  int64x2_t v2292;
  __int128 v2293;
  int64x2_t v2294;
  int64x2_t v2295;
  int64x2_t v2296;
  int64x2_t v2297;
  int64x2_t *v2298;
  _OWORD *v2299;
  uint64_t v2300;
  uint64_t v2301;
  __int128 v2302;
  uint64_t v2303;
  __int128 v2304;
  uint64_t v2305;
  __int128 v2306;
  uint64_t v2307;
  __int128 v2308;
  uint64_t v2309;
  __int128 v2310;
  uint64_t v2311;
  __int128 v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t *v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  unsigned int v2324;
  unsigned int v2325;
  unsigned int *v2326;
  uint64_t v2327;
  unsigned int v2328;
  uint64_t *v2329;
  int v2330;
  unsigned int v2331;
  uint64_t *v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  unsigned int v2336;
  unsigned int v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  __int128 v2341;
  int64x2_t v2342;
  __int128 v2343;
  int64x2_t v2344;
  int64x2_t v2345;
  __int128 v2346;
  int64x2_t v2347;
  int64x2_t v2348;
  int64x2_t v2349;
  int64x2_t v2350;
  int64x2_t *v2351;
  _OWORD *v2352;
  uint64_t v2353;
  uint64_t v2354;
  __int128 v2355;
  uint64_t v2356;
  __int128 v2357;
  uint64_t v2358;
  __int128 v2359;
  uint64_t v2360;
  __int128 v2361;
  uint64_t v2362;
  __int128 v2363;
  uint64_t v2364;
  __int128 v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t *v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  unsigned int v2377;
  unsigned int v2378;
  unsigned int *v2379;
  uint64_t v2380;
  unsigned int v2381;
  uint64_t *v2382;
  int v2383;
  unsigned int v2384;
  uint64_t *v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  unsigned int v2389;
  unsigned int v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  int8x16_t v2394;
  unint64_t v2395;
  int64x2_t v2396;
  __int128 v2397;
  uint64_t v2398;
  int64x2_t v2399;
  int64x2_t v2400;
  int64x2_t *v2401;
  uint64_t v2402;
  __int128 v2403;
  __int128 v2404;
  uint64_t v2405;
  uint64_t v2406;
  int8x16_t *v2407;
  uint64_t *v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  unsigned int v2413;
  unsigned int v2414;
  unsigned int *v2415;
  uint64_t v2416;
  unsigned int v2417;
  uint64_t *v2418;
  int v2419;
  unsigned int v2420;
  uint64_t *v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  unsigned int v2425;
  unsigned int v2426;
  int8x16_t *v2427;
  uint64_t v2428;
  _QWORD *v2429;
  uint64_t v2430;
  unint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  __int128 v2434;
  uint64_t *v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  unsigned int v2440;
  unsigned int v2441;
  unsigned int *v2442;
  uint64_t v2443;
  unsigned int v2444;
  uint64_t *v2445;
  int v2446;
  unsigned int v2447;
  uint64_t *v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  unsigned int v2452;
  unsigned int v2453;
  uint64_t v2454;
  uint64_t v2455;
  int64x2_t *v2456;
  int64x2_t v2457;
  int64x2_t v2458;
  int64x2_t v2459;
  int64x2_t v2460;
  int64x2_t v2461;
  int64x2_t v2462;
  int64x2_t v2463;
  int64x2_t *v2464;
  int64x2_t *v2465;
  uint64_t v2466;
  uint64_t v2467;
  __int128 v2468;
  uint64_t v2469;
  __int128 v2470;
  uint64_t v2471;
  __int128 v2472;
  uint64_t v2473;
  __int128 v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t *v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  unsigned int v2484;
  unsigned int v2485;
  unsigned int *v2486;
  uint64_t v2487;
  unsigned int v2488;
  uint64_t *v2489;
  int v2490;
  unsigned int v2491;
  uint64_t *v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  unsigned int v2496;
  unsigned int v2497;
  uint64_t v2498;
  uint64_t v2499;
  int64x2_t *v2500;
  int64x2_t v2501;
  int64x2_t v2502;
  int64x2_t v2503;
  int64x2_t v2504;
  int64x2_t v2505;
  int64x2_t v2506;
  int64x2_t v2507;
  int64x2_t *v2508;
  int64x2_t *v2509;
  uint64_t v2510;
  uint64_t v2511;
  __int128 v2512;
  uint64_t v2513;
  __int128 v2514;
  uint64_t v2515;
  __int128 v2516;
  uint64_t v2517;
  __int128 v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t *v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  unsigned int v2528;
  unsigned int v2529;
  unsigned int *v2530;
  uint64_t v2531;
  unsigned int v2532;
  uint64_t *v2533;
  int v2534;
  unsigned int v2535;
  uint64_t *v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  unsigned int v2540;
  unsigned int v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  int8x16_t v2545;
  unint64_t v2546;
  int64x2_t v2547;
  __int128 v2548;
  uint64_t v2549;
  int64x2_t v2550;
  int64x2_t v2551;
  int64x2_t *v2552;
  uint64_t v2553;
  __int128 v2554;
  __int128 v2555;
  uint64_t v2556;
  uint64_t v2557;
  int8x16_t *v2558;
  uint64_t *v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  unsigned int v2564;
  unsigned int v2565;
  unsigned int *v2566;
  uint64_t v2567;
  unsigned int v2568;
  uint64_t *v2569;
  int v2570;
  unsigned int v2571;
  uint64_t *v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  unsigned int v2576;
  unsigned int v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  int8x16_t v2581;
  unint64_t v2582;
  int64x2_t v2583;
  __int128 v2584;
  uint64_t v2585;
  int64x2_t v2586;
  int64x2_t v2587;
  int64x2_t *v2588;
  uint64_t v2589;
  __int128 v2590;
  __int128 v2591;
  uint64_t v2592;
  uint64_t v2593;
  int8x16_t *v2594;
  uint64_t *v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  unsigned int v2600;
  unsigned int v2601;
  unsigned int *v2602;
  uint64_t v2603;
  unsigned int v2604;
  uint64_t *v2605;
  int v2606;
  unsigned int v2607;
  uint64_t *v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611;
  unsigned int v2612;
  unsigned int v2613;
  uint64_t v2614;
  uint64_t v2615;
  int64x2_t *v2616;
  int64x2_t v2617;
  int64x2_t v2618;
  int64x2_t v2619;
  int64x2_t v2620;
  int64x2_t v2621;
  int64x2_t v2622;
  int64x2_t v2623;
  int64x2_t v2624;
  int64x2_t v2625;
  int64x2_t v2626;
  int64x2_t v2627;
  int64x2_t v2628;
  int64x2_t v2629;
  int64x2_t v2630;
  int64x2_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int8x16_t v2634;
  int8x16_t v2635;
  int8x16_t v2636;
  unint64_t v2637;
  unint64_t v2638;
  unint64_t v2639;
  int8x16_t v2640;
  int8x16_t v2641;
  int8x16_t v2642;
  unint64_t v2643;
  unint64_t v2644;
  unint64_t v2645;
  int8x16_t v2646;
  int8x16_t v2647;
  int8x16_t v2648;
  unint64_t v2649;
  unint64_t v2650;
  unint64_t v2651;
  int8x16_t v2652;
  int8x16_t v2653;
  int8x16_t v2654;
  unint64_t v2655;
  unint64_t v2656;
  unint64_t v2657;
  int64x2_t *v2658;
  _OWORD *v2659;
  int64x2_t v2660;
  int64x2_t v2661;
  int64x2_t v2662;
  int64x2_t v2663;
  int8x16_t *v2664;
  int8x16_t *v2665;
  int8x16_t *v2666;
  int8x16_t *v2667;
  uint64_t *v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  uint64_t v2672;
  unsigned int v2673;
  unsigned int v2674;
  unsigned int *v2675;
  uint64_t v2676;
  unsigned int v2677;
  uint64_t *v2678;
  int v2679;
  unsigned int v2680;
  uint64_t *v2681;
  uint64_t v2682;
  uint64_t v2683;
  uint64_t v2684;
  unsigned int v2685;
  unsigned int v2686;
  uint64_t v2687;
  uint64_t v2688;
  uint64_t v2689;
  int64x2_t v2690;
  int64x2_t v2691;
  int64x2_t v2692;
  int64x2_t v2693;
  int64x2_t v2694;
  int64x2_t v2695;
  int64x2_t v2696;
  int64x2_t v2697;
  int64x2_t v2698;
  int64x2_t v2699;
  int64x2_t v2700;
  int64x2_t v2701;
  int64x2_t v2702;
  int64x2_t v2703;
  int64x2_t v2704;
  int64x2_t v2705;
  int64x2_t v2706;
  int64x2_t v2707;
  int64x2_t v2708;
  int64x2_t v2709;
  int64x2_t v2710;
  int64x2_t v2711;
  int64x2_t v2712;
  __int128 v2713;
  __int128 v2714;
  __int128 v2715;
  int64x2_t v2716;
  int64x2_t v2717;
  int64x2_t *v2718;
  int64x2_t *v2719;
  int64x2_t *v2720;
  int64x2_t *v2721;
  int64x2_t *v2722;
  __int128 *v2723;
  uint64_t v2724;
  _OWORD *v2725;
  __int128 v2726;
  __int128 v2727;
  __int128 v2728;
  __int128 v2729;
  __int128 v2730;
  __int128 v2731;
  __int128 v2732;
  __int128 v2733;
  __int128 v2734;
  __int128 v2735;
  __int128 v2736;
  __int128 v2737;
  __int128 v2738;
  __int128 v2739;
  __int128 v2740;
  __int128 v2741;
  __int128 v2742;
  __int128 v2743;
  __int128 v2744;
  __int128 v2745;
  __int128 v2746;
  __int128 v2747;
  __int128 v2748;
  __int128 v2749;
  __int128 v2750;
  __int128 v2751;
  _OWORD *v2752;
  _OWORD *v2753;
  _OWORD *v2754;
  _OWORD *v2755;
  _OWORD *v2756;
  _OWORD *v2757;
  _OWORD *v2758;
  _OWORD *v2759;
  uint64_t *v2760;
  uint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  unsigned int v2765;
  unsigned int v2766;
  unsigned int *v2767;
  uint64_t v2768;
  unsigned int v2769;
  uint64_t *v2770;
  int v2771;
  unsigned int v2772;
  uint64_t *v2773;
  uint64_t v2774;
  uint64_t v2775;
  uint64_t v2776;
  unsigned int v2777;
  unsigned int v2778;
  uint64_t v2779;
  uint64_t v2780;
  int64x2_t *v2781;
  int64x2_t v2782;
  int64x2_t v2783;
  int64x2_t v2784;
  int64x2_t v2785;
  int64x2_t v2786;
  int64x2_t v2787;
  int64x2_t v2788;
  int64x2_t v2789;
  int64x2_t v2790;
  int64x2_t v2791;
  int64x2_t v2792;
  int64x2_t v2793;
  int64x2_t v2794;
  int64x2_t v2795;
  int64x2_t v2796;
  int64x2_t v2797;
  int64x2_t v2798;
  int8x16_t v2799;
  int8x16_t v2800;
  int8x16_t v2801;
  unint64_t v2802;
  unint64_t v2803;
  unint64_t v2804;
  int8x16_t v2805;
  int8x16_t v2806;
  int8x16_t v2807;
  unint64_t v2808;
  unint64_t v2809;
  unint64_t v2810;
  int8x16_t v2811;
  int8x16_t v2812;
  int8x16_t v2813;
  unint64_t v2814;
  unint64_t v2815;
  unint64_t v2816;
  int8x16_t v2817;
  int8x16_t v2818;
  int8x16_t v2819;
  unint64_t v2820;
  unint64_t v2821;
  unint64_t v2822;
  int64x2_t *v2823;
  _OWORD *v2824;
  int64x2_t v2825;
  int64x2_t v2826;
  int64x2_t v2827;
  int64x2_t v2828;
  int8x16_t *v2829;
  int8x16_t *v2830;
  int8x16_t *v2831;
  int8x16_t *v2832;
  uint64_t *v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  unsigned int v2838;
  unsigned int v2839;
  unsigned int *v2840;
  uint64_t v2841;
  unsigned int v2842;
  uint64_t *v2843;
  int v2844;
  unsigned int v2845;
  uint64_t *v2846;
  uint64_t v2847;
  uint64_t v2848;
  uint64_t v2849;
  unsigned int v2850;
  unsigned int v2851;
  uint64_t v2852;
  uint64_t v2853;
  int64x2_t *v2854;
  int64x2_t v2855;
  int64x2_t v2856;
  int64x2_t v2857;
  int64x2_t v2858;
  int64x2_t v2859;
  int64x2_t v2860;
  int64x2_t v2861;
  int64x2_t v2862;
  int64x2_t v2863;
  int64x2_t v2864;
  int64x2_t v2865;
  int64x2_t v2866;
  int64x2_t v2867;
  int64x2_t v2868;
  int64x2_t v2869;
  int64x2_t v2870;
  int64x2_t v2871;
  int8x16_t v2872;
  int8x16_t v2873;
  int8x16_t v2874;
  unint64_t v2875;
  unint64_t v2876;
  unint64_t v2877;
  int8x16_t v2878;
  int8x16_t v2879;
  int8x16_t v2880;
  unint64_t v2881;
  unint64_t v2882;
  unint64_t v2883;
  int8x16_t v2884;
  int8x16_t v2885;
  int8x16_t v2886;
  unint64_t v2887;
  unint64_t v2888;
  unint64_t v2889;
  int8x16_t v2890;
  int8x16_t v2891;
  int8x16_t v2892;
  unint64_t v2893;
  unint64_t v2894;
  unint64_t v2895;
  int64x2_t *v2896;
  _OWORD *v2897;
  int64x2_t v2898;
  int64x2_t v2899;
  int64x2_t v2900;
  int64x2_t v2901;
  int8x16_t *v2902;
  int8x16_t *v2903;
  int8x16_t *v2904;
  int8x16_t *v2905;
  uint64_t *v2906;
  uint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  uint64_t v2910;
  unsigned int v2911;
  unsigned int v2912;
  unsigned int *v2913;
  uint64_t v2914;
  unsigned int v2915;
  uint64_t *v2916;
  int v2917;
  unsigned int v2918;
  uint64_t *v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  unsigned int v2923;
  unsigned int v2924;
  uint64_t v2925;
  uint64_t v2926;
  uint64_t v2927;
  int64x2_t v2928;
  int64x2_t v2929;
  int64x2_t v2930;
  int64x2_t v2931;
  int64x2_t v2932;
  __int128 v2933;
  __int128 v2934;
  __int128 v2935;
  int64x2_t v2936;
  int64x2_t v2937;
  int64x2_t *v2938;
  int64x2_t *v2939;
  int64x2_t *v2940;
  int64x2_t *v2941;
  int64x2_t *v2942;
  __int128 *v2943;
  uint64_t v2944;
  _OWORD *v2945;
  __int128 v2946;
  __int128 v2947;
  __int128 v2948;
  __int128 v2949;
  __int128 v2950;
  __int128 v2951;
  __int128 v2952;
  __int128 v2953;
  _OWORD *v2954;
  _OWORD *v2955;
  uint64_t *v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t v2959;
  uint64_t v2960;
  unsigned int v2961;
  unsigned int v2962;
  unsigned int *v2963;
  uint64_t v2964;
  unsigned int v2965;
  uint64_t *v2966;
  int v2967;
  unsigned int v2968;
  uint64_t *v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  unsigned int v2973;
  unsigned int v2974;
  uint64_t v2975;
  uint64_t v2976;
  _QWORD *v2977;
  int8x16_t v2978;
  int8x16_t v2979;
  unint64_t v2980;
  __int128 *v2981;
  _OWORD *v2982;
  __int128 v2983;
  __int128 v2984;
  uint64_t *v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  unsigned int v2990;
  unsigned int v2991;
  unsigned int *v2992;
  uint64_t v2993;
  unsigned int v2994;
  uint64_t *v2995;
  int v2996;
  unsigned int v2997;
  uint64_t *v2998;
  uint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  unsigned int v3002;
  unsigned int v3003;
  uint64_t v3004;
  uint64_t v3005;
  int64x2_t *v3006;
  int64x2_t v3007;
  int64x2_t v3008;
  int64x2_t v3009;
  int64x2_t v3010;
  int64x2_t v3011;
  int64x2_t v3012;
  int64x2_t v3013;
  int64x2_t v3014;
  int64x2_t v3015;
  int64x2_t v3016;
  int64x2_t v3017;
  int64x2_t v3018;
  int64x2_t *v3019;
  int64x2_t *v3020;
  int64x2_t *v3021;
  int64x2_t *v3022;
  int64x2_t *v3023;
  __int128 *v3024;
  uint64_t v3025;
  _OWORD *v3026;
  __int128 v3027;
  __int128 v3028;
  __int128 v3029;
  __int128 v3030;
  __int128 v3031;
  __int128 v3032;
  __int128 v3033;
  __int128 v3034;
  __int128 v3035;
  __int128 v3036;
  __int128 v3037;
  _OWORD *v3038;
  _OWORD *v3039;
  _OWORD *v3040;
  uint64_t *v3041;
  uint64_t v3042;
  uint64_t v3043;
  uint64_t v3044;
  uint64_t v3045;
  unsigned int v3046;
  unsigned int v3047;
  unsigned int *v3048;
  uint64_t v3049;
  unsigned int v3050;
  uint64_t *v3051;
  int v3052;
  unsigned int v3053;
  uint64_t *v3054;
  uint64_t v3055;
  uint64_t v3056;
  uint64_t v3057;
  unsigned int v3058;
  unsigned int v3059;
  uint64_t v3060;
  uint64_t v3061;
  int64x2_t *v3062;
  int64x2_t v3063;
  int64x2_t v3064;
  int64x2_t v3065;
  int64x2_t v3066;
  int64x2_t v3067;
  int64x2_t v3068;
  int64x2_t v3069;
  int64x2_t v3070;
  int64x2_t v3071;
  int64x2_t v3072;
  int64x2_t v3073;
  int64x2_t v3074;
  int64x2_t *v3075;
  int64x2_t *v3076;
  int64x2_t *v3077;
  int64x2_t *v3078;
  int64x2_t *v3079;
  __int128 *v3080;
  uint64_t v3081;
  _OWORD *v3082;
  __int128 v3083;
  __int128 v3084;
  __int128 v3085;
  __int128 v3086;
  __int128 v3087;
  __int128 v3088;
  __int128 v3089;
  __int128 v3090;
  __int128 v3091;
  __int128 v3092;
  __int128 v3093;
  _OWORD *v3094;
  _OWORD *v3095;
  _OWORD *v3096;
  uint64_t *v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  unsigned int v3102;
  unsigned int v3103;
  unsigned int *v3104;
  uint64_t v3105;
  unsigned int v3106;
  uint64_t *v3107;
  int v3108;
  unsigned int v3109;
  uint64_t *v3110;
  uint64_t v3111;
  uint64_t v3112;
  uint64_t v3113;
  unsigned int v3114;
  unsigned int v3115;
  uint64_t v3116;
  uint64_t v3117;
  uint64_t v3118;
  int64x2_t v3119;
  int64x2_t v3120;
  int64x2_t v3121;
  int64x2_t v3122;
  int64x2_t v3123;
  __int128 v3124;
  __int128 v3125;
  __int128 v3126;
  int64x2_t v3127;
  int64x2_t v3128;
  int64x2_t *v3129;
  int64x2_t *v3130;
  int64x2_t *v3131;
  int64x2_t *v3132;
  int64x2_t *v3133;
  __int128 *v3134;
  uint64_t v3135;
  _OWORD *v3136;
  __int128 v3137;
  __int128 v3138;
  __int128 v3139;
  __int128 v3140;
  __int128 v3141;
  __int128 v3142;
  __int128 v3143;
  __int128 v3144;
  _OWORD *v3145;
  _OWORD *v3146;
  uint64_t *v3147;
  uint64_t v3148;
  uint64_t v3149;
  uint64_t v3150;
  uint64_t v3151;
  unsigned int v3152;
  unsigned int v3153;
  unsigned int *v3154;
  uint64_t v3155;
  unsigned int v3156;
  uint64_t *v3157;
  int v3158;
  unsigned int v3159;
  uint64_t *v3160;
  uint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  unsigned int v3164;
  unsigned int v3165;
  uint64_t v3166;
  uint64_t v3167;
  uint64_t v3168;
  int64x2_t v3169;
  int64x2_t v3170;
  int64x2_t v3171;
  int64x2_t v3172;
  int64x2_t v3173;
  __int128 v3174;
  __int128 v3175;
  __int128 v3176;
  int64x2_t v3177;
  int64x2_t v3178;
  int64x2_t *v3179;
  int64x2_t *v3180;
  int64x2_t *v3181;
  int64x2_t *v3182;
  int64x2_t *v3183;
  __int128 *v3184;
  uint64_t v3185;
  _OWORD *v3186;
  __int128 v3187;
  __int128 v3188;
  __int128 v3189;
  __int128 v3190;
  __int128 v3191;
  __int128 v3192;
  __int128 v3193;
  __int128 v3194;
  _OWORD *v3195;
  _OWORD *v3196;
  uint64_t *v3197;
  uint64_t v3198;
  uint64_t v3199;
  uint64_t v3200;
  uint64_t v3201;
  unsigned int v3202;
  unsigned int v3203;
  unsigned int *v3204;
  uint64_t v3205;
  unsigned int v3206;
  uint64_t *v3207;
  int v3208;
  unsigned int v3209;
  uint64_t *v3210;
  uint64_t v3211;
  uint64_t v3212;
  uint64_t v3213;
  unsigned int v3214;
  unsigned int v3215;
  uint64_t v3216;
  uint64_t v3217;
  int64x2_t *v3218;
  int64x2_t v3219;
  int64x2_t v3220;
  int64x2_t v3221;
  int64x2_t v3222;
  int64x2_t v3223;
  int64x2_t v3224;
  int64x2_t v3225;
  int64x2_t v3226;
  int64x2_t v3227;
  int64x2_t v3228;
  int64x2_t v3229;
  int64x2_t v3230;
  int64x2_t v3231;
  int64x2_t v3232;
  int64x2_t v3233;
  int64x2_t v3234;
  int64x2_t v3235;
  int8x16_t v3236;
  int8x16_t v3237;
  int8x16_t v3238;
  unint64_t v3239;
  unint64_t v3240;
  unint64_t v3241;
  int8x16_t v3242;
  int8x16_t v3243;
  int8x16_t v3244;
  unint64_t v3245;
  unint64_t v3246;
  unint64_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  unint64_t v3251;
  unint64_t v3252;
  unint64_t v3253;
  int8x16_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  unint64_t v3257;
  unint64_t v3258;
  unint64_t v3259;
  int64x2_t *v3260;
  _OWORD *v3261;
  int64x2_t v3262;
  int64x2_t v3263;
  int64x2_t v3264;
  int64x2_t v3265;
  int8x16_t *v3266;
  int8x16_t *v3267;
  int8x16_t *v3268;
  int8x16_t *v3269;
  uint64_t *v3270;
  uint64_t v3271;
  uint64_t v3272;
  uint64_t v3273;
  uint64_t v3274;
  unsigned int v3275;
  unsigned int v3276;
  unsigned int *v3277;
  uint64_t v3278;
  unsigned int v3279;
  uint64_t *v3280;
  int v3281;
  unsigned int v3282;
  uint64_t *v3283;
  uint64_t v3284;
  uint64_t v3285;
  uint64_t v3286;
  unsigned int v3287;
  unsigned int v3288;
  uint64_t v3289;
  uint64_t v3290;
  uint64_t v3291;
  int64x2_t v3292;
  int64x2_t v3293;
  int64x2_t v3294;
  int64x2_t v3295;
  int64x2_t v3296;
  int64x2_t v3297;
  int64x2_t v3298;
  int64x2_t v3299;
  int64x2_t v3300;
  int64x2_t v3301;
  int64x2_t v3302;
  int64x2_t v3303;
  int64x2_t v3304;
  int64x2_t v3305;
  int64x2_t v3306;
  int64x2_t v3307;
  int64x2_t v3308;
  int64x2_t v3309;
  int64x2_t v3310;
  int64x2_t v3311;
  int64x2_t v3312;
  int64x2_t v3313;
  int64x2_t v3314;
  __int128 v3315;
  __int128 v3316;
  __int128 v3317;
  int64x2_t v3318;
  int64x2_t v3319;
  int64x2_t *v3320;
  int64x2_t *v3321;
  int64x2_t *v3322;
  int64x2_t *v3323;
  int64x2_t *v3324;
  __int128 *v3325;
  uint64_t v3326;
  _OWORD *v3327;
  __int128 v3328;
  __int128 v3329;
  __int128 v3330;
  __int128 v3331;
  __int128 v3332;
  __int128 v3333;
  __int128 v3334;
  __int128 v3335;
  __int128 v3336;
  __int128 v3337;
  __int128 v3338;
  __int128 v3339;
  __int128 v3340;
  __int128 v3341;
  __int128 v3342;
  __int128 v3343;
  __int128 v3344;
  __int128 v3345;
  __int128 v3346;
  __int128 v3347;
  __int128 v3348;
  __int128 v3349;
  __int128 v3350;
  __int128 v3351;
  __int128 v3352;
  __int128 v3353;
  _OWORD *v3354;
  _OWORD *v3355;
  _OWORD *v3356;
  _OWORD *v3357;
  _OWORD *v3358;
  _OWORD *v3359;
  _OWORD *v3360;
  _OWORD *v3361;
  uint64_t *v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t v3365;
  uint64_t v3366;
  unsigned int v3367;
  unsigned int v3368;
  unsigned int *v3369;
  uint64_t v3370;
  unsigned int v3371;
  uint64_t *v3372;
  int v3373;
  unsigned int v3374;
  uint64_t *v3375;
  uint64_t v3376;
  uint64_t v3377;
  uint64_t v3378;
  unsigned int v3379;
  unsigned int v3380;
  uint64_t v3381;
  uint64_t v3382;
  int64x2_t *v3383;
  int64x2_t v3384;
  int64x2_t v3385;
  int64x2_t v3386;
  int64x2_t v3387;
  int64x2_t v3388;
  int64x2_t v3389;
  int64x2_t v3390;
  int64x2_t v3391;
  int64x2_t v3392;
  int64x2_t v3393;
  int64x2_t v3394;
  int64x2_t v3395;
  int64x2_t v3396;
  int64x2_t v3397;
  int64x2_t v3398;
  int64x2_t v3399;
  int64x2_t v3400;
  int8x16_t v3401;
  int8x16_t v3402;
  int8x16_t v3403;
  unint64_t v3404;
  unint64_t v3405;
  unint64_t v3406;
  int8x16_t v3407;
  int8x16_t v3408;
  int8x16_t v3409;
  unint64_t v3410;
  unint64_t v3411;
  unint64_t v3412;
  int8x16_t v3413;
  int8x16_t v3414;
  int8x16_t v3415;
  unint64_t v3416;
  unint64_t v3417;
  unint64_t v3418;
  int8x16_t v3419;
  int8x16_t v3420;
  int8x16_t v3421;
  unint64_t v3422;
  unint64_t v3423;
  unint64_t v3424;
  int64x2_t *v3425;
  _OWORD *v3426;
  int64x2_t v3427;
  int64x2_t v3428;
  int64x2_t v3429;
  int64x2_t v3430;
  int8x16_t *v3431;
  int8x16_t *v3432;
  int8x16_t *v3433;
  int8x16_t *v3434;
  uint64_t *v3435;
  uint64_t v3436;
  uint64_t v3437;
  uint64_t v3438;
  uint64_t v3439;
  unsigned int v3440;
  unsigned int v3441;
  unsigned int *v3442;
  uint64_t v3443;
  unsigned int v3444;
  uint64_t *v3445;
  int v3446;
  unsigned int v3447;
  uint64_t *v3448;
  uint64_t v3449;
  uint64_t v3450;
  uint64_t v3451;
  unsigned int v3452;
  unsigned int v3453;
  uint64_t v3454;
  uint64_t v3455;
  int64x2_t *v3456;
  int64x2_t v3457;
  int64x2_t v3458;
  int64x2_t v3459;
  int64x2_t v3460;
  int64x2_t v3461;
  int64x2_t v3462;
  int64x2_t v3463;
  int64x2_t v3464;
  int64x2_t v3465;
  int64x2_t v3466;
  int64x2_t v3467;
  int64x2_t v3468;
  int64x2_t v3469;
  int64x2_t v3470;
  int64x2_t v3471;
  int64x2_t v3472;
  int64x2_t v3473;
  int8x16_t v3474;
  int8x16_t v3475;
  int8x16_t v3476;
  unint64_t v3477;
  unint64_t v3478;
  unint64_t v3479;
  int8x16_t v3480;
  int8x16_t v3481;
  int8x16_t v3482;
  unint64_t v3483;
  unint64_t v3484;
  unint64_t v3485;
  int8x16_t v3486;
  int8x16_t v3487;
  int8x16_t v3488;
  unint64_t v3489;
  unint64_t v3490;
  unint64_t v3491;
  int8x16_t v3492;
  int8x16_t v3493;
  int8x16_t v3494;
  unint64_t v3495;
  unint64_t v3496;
  unint64_t v3497;
  int64x2_t *v3498;
  _OWORD *v3499;
  int64x2_t v3500;
  int64x2_t v3501;
  int64x2_t v3502;
  int64x2_t v3503;
  int8x16_t *v3504;
  int8x16_t *v3505;
  int8x16_t *v3506;
  int8x16_t *v3507;
  uint64_t *v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  uint64_t v3512;
  unsigned int v3513;
  unsigned int v3514;
  unsigned int *v3515;
  uint64_t v3516;
  unsigned int v3517;
  uint64_t *v3518;
  int v3519;
  unsigned int v3520;
  uint64_t *v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  unsigned int v3525;
  unsigned int v3526;
  uint64_t v3527;
  uint64_t v3528;
  uint64_t v3529;
  int64x2_t v3530;
  int64x2_t v3531;
  int64x2_t v3532;
  int64x2_t v3533;
  int64x2_t v3534;
  __int128 v3535;
  __int128 v3536;
  __int128 v3537;
  int64x2_t v3538;
  int64x2_t v3539;
  int64x2_t *v3540;
  int64x2_t *v3541;
  int64x2_t *v3542;
  int64x2_t *v3543;
  int64x2_t *v3544;
  __int128 *v3545;
  uint64_t v3546;
  _OWORD *v3547;
  __int128 v3548;
  __int128 v3549;
  __int128 v3550;
  __int128 v3551;
  __int128 v3552;
  __int128 v3553;
  __int128 v3554;
  __int128 v3555;
  _OWORD *v3556;
  _OWORD *v3557;
  uint64_t *v3558;
  uint64_t v3559;
  uint64_t v3560;
  uint64_t v3561;
  uint64_t v3562;
  unsigned int v3563;
  unsigned int v3564;
  unsigned int *v3565;
  uint64_t v3566;
  unsigned int v3567;
  uint64_t *v3568;
  int v3569;
  unsigned int v3570;
  uint64_t *v3571;
  uint64_t v3572;
  uint64_t v3573;
  uint64_t v3574;
  unsigned int v3575;
  unsigned int v3576;
  uint64_t v3577;
  uint64_t v3578;
  _QWORD *v3579;
  int8x16_t v3580;
  int8x16_t v3581;
  unint64_t v3582;
  __int128 *v3583;
  _OWORD *v3584;
  __int128 v3585;
  __int128 v3586;
  uint64_t *v3587;
  uint64_t v3588;
  uint64_t v3589;
  uint64_t v3590;
  uint64_t v3591;
  unsigned int v3592;
  unsigned int v3593;
  unsigned int *v3594;
  uint64_t v3595;
  unsigned int v3596;
  uint64_t *v3597;
  int v3598;
  unsigned int v3599;
  uint64_t *v3600;
  uint64_t v3601;
  uint64_t v3602;
  uint64_t v3603;
  unsigned int v3604;
  unsigned int v3605;
  uint64_t v3606;
  uint64_t v3607;
  int64x2_t *v3608;
  int64x2_t v3609;
  int64x2_t v3610;
  int64x2_t v3611;
  int64x2_t v3612;
  int64x2_t v3613;
  int64x2_t v3614;
  int64x2_t v3615;
  int64x2_t v3616;
  int64x2_t v3617;
  int64x2_t v3618;
  int64x2_t v3619;
  int64x2_t v3620;
  int64x2_t *v3621;
  int64x2_t *v3622;
  int64x2_t *v3623;
  int64x2_t *v3624;
  int64x2_t *v3625;
  __int128 *v3626;
  uint64_t v3627;
  _OWORD *v3628;
  __int128 v3629;
  __int128 v3630;
  __int128 v3631;
  __int128 v3632;
  __int128 v3633;
  __int128 v3634;
  __int128 v3635;
  __int128 v3636;
  __int128 v3637;
  __int128 v3638;
  __int128 v3639;
  _OWORD *v3640;
  _OWORD *v3641;
  _OWORD *v3642;
  uint64_t *v3643;
  uint64_t v3644;
  uint64_t v3645;
  uint64_t v3646;
  uint64_t v3647;
  unsigned int v3648;
  unsigned int v3649;
  unsigned int *v3650;
  uint64_t v3651;
  unsigned int v3652;
  uint64_t *v3653;
  int v3654;
  unsigned int v3655;
  uint64_t *v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  unsigned int v3660;
  unsigned int v3661;
  uint64_t v3662;
  uint64_t v3663;
  int64x2_t *v3664;
  int64x2_t v3665;
  int64x2_t v3666;
  int64x2_t v3667;
  int64x2_t v3668;
  int64x2_t v3669;
  int64x2_t v3670;
  int64x2_t v3671;
  int64x2_t v3672;
  int64x2_t v3673;
  int64x2_t v3674;
  int64x2_t v3675;
  int64x2_t v3676;
  int64x2_t *v3677;
  int64x2_t *v3678;
  int64x2_t *v3679;
  int64x2_t *v3680;
  int64x2_t *v3681;
  __int128 *v3682;
  uint64_t v3683;
  _OWORD *v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  __int128 v3688;
  __int128 v3689;
  __int128 v3690;
  __int128 v3691;
  __int128 v3692;
  __int128 v3693;
  __int128 v3694;
  __int128 v3695;
  _OWORD *v3696;
  _OWORD *v3697;
  _OWORD *v3698;
  uint64_t *v3699;
  uint64_t v3700;
  uint64_t v3701;
  uint64_t v3702;
  uint64_t v3703;
  unsigned int v3704;
  unsigned int v3705;
  unsigned int *v3706;
  uint64_t v3707;
  unsigned int v3708;
  uint64_t *v3709;
  int v3710;
  unsigned int v3711;
  uint64_t *v3712;
  uint64_t v3713;
  uint64_t v3714;
  uint64_t v3715;
  unsigned int v3716;
  unsigned int v3717;
  uint64_t v3718;
  uint64_t v3719;
  uint64_t v3720;
  int64x2_t v3721;
  int64x2_t v3722;
  int64x2_t v3723;
  int64x2_t v3724;
  int64x2_t v3725;
  __int128 v3726;
  __int128 v3727;
  __int128 v3728;
  int64x2_t v3729;
  int64x2_t v3730;
  int64x2_t *v3731;
  int64x2_t *v3732;
  int64x2_t *v3733;
  int64x2_t *v3734;
  int64x2_t *v3735;
  __int128 *v3736;
  uint64_t v3737;
  _OWORD *v3738;
  __int128 v3739;
  __int128 v3740;
  __int128 v3741;
  __int128 v3742;
  __int128 v3743;
  __int128 v3744;
  __int128 v3745;
  __int128 v3746;
  _OWORD *v3747;
  _OWORD *v3748;
  uint64_t *v3749;
  uint64_t v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  unsigned int v3754;
  unsigned int v3755;
  unsigned int *v3756;
  uint64_t v3757;
  unsigned int v3758;
  uint64_t *v3759;
  int v3760;
  unsigned int v3761;
  uint64_t *v3762;
  uint64_t v3763;
  uint64_t v3764;
  uint64_t v3765;
  unsigned int v3766;
  unsigned int v3767;
  uint64_t v3768;
  uint64_t v3769;
  uint64_t v3770;
  int64x2_t v3771;
  int64x2_t v3772;
  int64x2_t v3773;
  int64x2_t v3774;
  int64x2_t v3775;
  __int128 v3776;
  __int128 v3777;
  __int128 v3778;
  int64x2_t v3779;
  int64x2_t v3780;
  int64x2_t *v3781;
  int64x2_t *v3782;
  int64x2_t *v3783;
  int64x2_t *v3784;
  int64x2_t *v3785;
  __int128 *v3786;
  uint64_t v3787;
  _OWORD *v3788;
  __int128 v3789;
  __int128 v3790;
  __int128 v3791;
  __int128 v3792;
  __int128 v3793;
  __int128 v3794;
  __int128 v3795;
  __int128 v3796;
  _OWORD *v3797;
  _OWORD *v3798;
  uint64_t *v3799;
  uint64_t v3800;
  uint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  unsigned int v3804;
  unsigned int v3805;
  unsigned int *v3806;
  uint64_t v3807;
  unsigned int v3808;
  uint64_t *v3809;
  int v3810;
  unsigned int v3811;
  uint64_t *v3812;
  uint64_t v3813;
  uint64_t v3814;
  uint64_t v3815;
  unsigned int v3816;
  unsigned int v3817;
  uint64_t v3818;
  uint64_t v3819;
  int64x2_t v3820;
  int64x2_t *v3821;
  int64x2_t v3822;
  int64x2_t v3823;
  int64x2_t v3824;
  int64x2_t v3825;
  int64x2_t v3826;
  int64x2_t v3827;
  int64x2_t v3828;
  int64x2_t v3829;
  int64x2_t v3830;
  int64x2_t v3831;
  int64x2_t v3832;
  int64x2_t v3833;
  int64x2_t v3834;
  int64x2_t v3835;
  int64x2_t v3836;
  int64x2_t v3837;
  int64x2_t v3838;
  int64x2_t v3839;
  int64x2_t v3840;
  int64x2_t v3841;
  int64x2_t v3842;
  int64x2_t v3843;
  int64x2_t v3844;
  int64x2_t v3845;
  int64x2_t v3846;
  int64x2_t v3847;
  int64x2_t v3848;
  int64x2_t v3849;
  int64x2_t v3850;
  int64x2_t v3851;
  int64x2_t *v3852;
  int64x2_t *v3853;
  int64x2_t *v3854;
  int64x2_t *v3855;
  int64x2_t *v3856;
  int64x2_t *v3857;
  int64x2_t *v3858;
  int64x2_t *v3859;
  uint64_t v3860;
  uint64_t v3861;
  uint64_t v3862;
  uint64_t v3863;
  __int128 v3864;
  __int128 v3865;
  __int128 v3866;
  __int128 v3867;
  __int128 v3868;
  __int128 v3869;
  __int128 v3870;
  uint64_t v3871;
  __int128 v3872;
  __int128 v3873;
  __int128 v3874;
  __int128 v3875;
  uint64_t v3876;
  __int128 v3877;
  __int128 v3878;
  uint64_t v3879;
  __int128 v3880;
  __int128 v3881;
  __int128 v3882;
  __int128 v3883;
  uint64_t v3884;
  uint64_t v3885;
  __int128 v3886;
  __int128 v3887;
  __int128 v3888;
  __int128 v3889;
  __int128 v3890;
  __int128 v3891;
  uint64_t v3892;
  uint64_t v3893;
  uint64_t v3894;
  uint64_t v3895;
  uint64_t v3896;
  uint64_t *v3897;
  uint64_t v3898;
  uint64_t v3899;
  uint64_t v3900;
  uint64_t v3901;
  unsigned int v3902;
  unsigned int v3903;
  unsigned int *v3904;
  uint64_t v3905;
  unsigned int v3906;
  uint64_t *v3907;
  int v3908;
  unsigned int v3909;
  uint64_t *v3910;
  uint64_t v3911;
  uint64_t v3912;
  uint64_t v3913;
  unsigned int v3914;
  unsigned int v3915;
  uint64_t v3916;
  int64x2_t v3917;
  int8x16_t v3918;
  int64x2_t v3919;
  int64x2_t v3920;
  int64x2_t v3921;
  int8x16_t v3922;
  int64x2_t v3923;
  int64x2_t v3924;
  int64x2_t v3925;
  int64x2_t v3926;
  int64x2_t v3927;
  int64x2_t v3928;
  int64x2_t v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int8x16_t v3934;
  __int128 v3935;
  int8x16_t v3936;
  int8x16_t v3937;
  int8x16_t v3938;
  int8x16_t v3939;
  int8x16_t v3940;
  int8x16_t v3941;
  int8x16_t v3942;
  int8x16_t v3943;
  int8x16_t v3944;
  int8x16_t v3945;
  int8x16_t v3946;
  int64x2_t v3947;
  int8x16_t v3948;
  int64x2_t v3949;
  int8x16_t v3950;
  int8x16_t v3951;
  int8x16_t v3952;
  int64x2_t v3953;
  int8x16_t v3954;
  int8x16_t v3955;
  uint64_t v3956;
  uint64_t v3957;
  int8x16_t v3958;
  int8x16_t v3959;
  __int128 v3960;
  int8x16_t v3961;
  uint64_t v3962;
  unint64_t v3963;
  int8x16_t v3964;
  int8x16_t v3965;
  unint64_t v3966;
  unint64_t v3967;
  unint64_t v3968;
  int8x16_t v3969;
  unint64_t v3970;
  unint64_t v3971;
  unint64_t v3972;
  unint64_t v3973;
  int8x16_t v3974;
  unint64_t v3975;
  unint64_t v3976;
  unint64_t v3977;
  unint64_t v3978;
  uint64_t v3979;
  unint64_t v3980;
  unint64_t v3981;
  unint64_t v3982;
  unint64_t v3983;
  unint64_t v3984;
  uint64_t v3985;
  uint64_t v3986;
  int8x16_t v3987;
  int8x16_t v3988;
  int8x16_t v3989;
  int8x16_t v3990;
  int8x16_t v3991;
  int8x16_t v3992;
  int8x16_t v3993;
  int8x16_t v3994;
  int8x16_t v3995;
  int8x16_t v3996;
  int8x16_t v3997;
  int8x16_t v3998;
  int8x16_t v3999;
  int8x16_t v4000;
  int8x16_t v4001;
  int8x16_t v4002;
  int8x16_t v4003;
  uint64_t v4004;
  unint64_t v4005;
  unint64_t v4006;
  __int128 v4007;
  __int128 v4008;
  __int128 v4009;
  __int128 v4010;
  __int128 v4011;
  __int128 v4012;
  __int128 v4013;
  __int128 v4014;
  __int128 v4015;
  __int128 v4016;
  __int128 v4017;
  __int128 v4018;
  __int128 v4019;
  __int128 v4020;
  __int128 v4021;
  __int128 v4022;
  __int128 v4023;
  __int128 v4024;
  uint64_t v4025;
  uint64_t v4026;
  uint64_t v4027;
  int8x16_t *v4028;
  uint64_t v4029;
  uint64_t v4030;
  uint64_t v4031;
  uint64_t *v4032;
  uint64_t v4033;
  uint64_t v4034;
  uint64_t v4035;
  uint64_t v4036;
  unsigned int v4037;
  unsigned int v4038;
  unsigned int *v4039;
  uint64_t v4040;
  unsigned int v4041;
  uint64_t *v4042;
  int v4043;
  unsigned int v4044;
  uint64_t *v4045;
  uint64_t v4046;
  uint64_t v4047;
  uint64_t v4048;
  unsigned int v4049;
  unsigned int v4050;
  uint64_t v4051;
  uint64_t v4052;
  int64x2_t v4053;
  int64x2_t *v4054;
  int64x2_t v4055;
  int64x2_t v4056;
  int64x2_t v4057;
  int64x2_t v4058;
  int64x2_t v4059;
  int64x2_t v4060;
  int64x2_t v4061;
  int64x2_t v4062;
  int64x2_t v4063;
  int64x2_t v4064;
  int64x2_t v4065;
  int64x2_t v4066;
  int64x2_t v4067;
  int64x2_t v4068;
  int64x2_t v4069;
  int64x2_t v4070;
  int64x2_t v4071;
  int64x2_t v4072;
  int64x2_t v4073;
  int64x2_t v4074;
  int64x2_t v4075;
  int64x2_t v4076;
  int64x2_t v4077;
  int64x2_t v4078;
  int64x2_t v4079;
  int64x2_t v4080;
  int64x2_t v4081;
  int64x2_t v4082;
  int64x2_t v4083;
  int64x2_t v4084;
  int64x2_t *v4085;
  int64x2_t *v4086;
  int64x2_t *v4087;
  int64x2_t *v4088;
  int64x2_t *v4089;
  int64x2_t *v4090;
  int64x2_t *v4091;
  int64x2_t *v4092;
  uint64_t v4093;
  uint64_t v4094;
  uint64_t v4095;
  uint64_t v4096;
  __int128 v4097;
  __int128 v4098;
  __int128 v4099;
  __int128 v4100;
  __int128 v4101;
  __int128 v4102;
  __int128 v4103;
  uint64_t v4104;
  __int128 v4105;
  __int128 v4106;
  __int128 v4107;
  __int128 v4108;
  uint64_t v4109;
  __int128 v4110;
  __int128 v4111;
  uint64_t v4112;
  __int128 v4113;
  __int128 v4114;
  __int128 v4115;
  __int128 v4116;
  uint64_t v4117;
  uint64_t v4118;
  __int128 v4119;
  __int128 v4120;
  __int128 v4121;
  __int128 v4122;
  __int128 v4123;
  __int128 v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  uint64_t v4129;
  uint64_t *v4130;
  uint64_t v4131;
  uint64_t v4132;
  uint64_t v4133;
  uint64_t v4134;
  unsigned int v4135;
  unsigned int v4136;
  unsigned int *v4137;
  uint64_t v4138;
  unsigned int v4139;
  uint64_t *v4140;
  int v4141;
  unsigned int v4142;
  uint64_t *v4143;
  uint64_t v4144;
  uint64_t v4145;
  uint64_t v4146;
  unsigned int v4147;
  unsigned int v4148;
  uint64_t v4149;
  uint64_t v4150;
  int64x2_t v4151;
  int64x2_t *v4152;
  int64x2_t v4153;
  int64x2_t v4154;
  int64x2_t v4155;
  int64x2_t v4156;
  int64x2_t v4157;
  int64x2_t v4158;
  int64x2_t v4159;
  int64x2_t v4160;
  int64x2_t v4161;
  int64x2_t v4162;
  int64x2_t v4163;
  int64x2_t v4164;
  int64x2_t v4165;
  int64x2_t v4166;
  int64x2_t v4167;
  int64x2_t v4168;
  int64x2_t v4169;
  int64x2_t v4170;
  int64x2_t v4171;
  int64x2_t v4172;
  int64x2_t v4173;
  int64x2_t v4174;
  int64x2_t v4175;
  int64x2_t v4176;
  int64x2_t v4177;
  int64x2_t v4178;
  int64x2_t v4179;
  int64x2_t v4180;
  int64x2_t v4181;
  int64x2_t v4182;
  int64x2_t *v4183;
  int64x2_t *v4184;
  int64x2_t *v4185;
  int64x2_t *v4186;
  int64x2_t *v4187;
  int64x2_t *v4188;
  int64x2_t *v4189;
  int64x2_t *v4190;
  uint64_t v4191;
  uint64_t v4192;
  uint64_t v4193;
  uint64_t v4194;
  __int128 v4195;
  __int128 v4196;
  __int128 v4197;
  __int128 v4198;
  __int128 v4199;
  __int128 v4200;
  __int128 v4201;
  uint64_t v4202;
  __int128 v4203;
  __int128 v4204;
  __int128 v4205;
  __int128 v4206;
  uint64_t v4207;
  __int128 v4208;
  __int128 v4209;
  uint64_t v4210;
  __int128 v4211;
  __int128 v4212;
  __int128 v4213;
  __int128 v4214;
  uint64_t v4215;
  uint64_t v4216;
  __int128 v4217;
  __int128 v4218;
  __int128 v4219;
  __int128 v4220;
  __int128 v4221;
  __int128 v4222;
  uint64_t v4223;
  uint64_t v4224;
  uint64_t v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint64_t *v4228;
  uint64_t v4229;
  uint64_t v4230;
  uint64_t v4231;
  uint64_t v4232;
  unsigned int v4233;
  unsigned int v4234;
  unsigned int *v4235;
  uint64_t v4236;
  unsigned int v4237;
  uint64_t *v4238;
  int v4239;
  unsigned int v4240;
  uint64_t *v4241;
  uint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  unsigned int v4245;
  unsigned int v4246;
  uint64_t v4247;
  uint64_t v4248;
  __int128 v4249;
  uint64_t v4250;
  int64x2_t v4251;
  int64x2_t v4252;
  int64x2_t v4253;
  int64x2_t v4254;
  int64x2_t v4255;
  int64x2_t v4256;
  int64x2_t v4257;
  uint64_t v4258;
  __int128 v4259;
  __int128 v4260;
  __int128 v4261;
  __int128 v4262;
  int64x2_t v4263;
  int64x2_t v4264;
  int64x2_t *v4265;
  int64x2_t *v4266;
  int64x2_t *v4267;
  int64x2_t *v4268;
  int64x2_t *v4269;
  int64x2_t *v4270;
  int64x2_t *v4271;
  uint64_t v4272;
  uint64_t v4273;
  uint64_t v4274;
  uint64_t v4275;
  uint64_t v4276;
  __int128 v4277;
  __int128 v4278;
  __int128 v4279;
  __int128 v4280;
  __int128 v4281;
  __int128 v4282;
  __int128 v4283;
  uint64_t v4284;
  __int128 v4285;
  __int128 v4286;
  __int128 v4287;
  __int128 v4288;
  uint64_t v4289;
  uint64_t v4290;
  uint64_t v4291;
  uint64_t *v4292;
  uint64_t v4293;
  uint64_t v4294;
  uint64_t v4295;
  uint64_t v4296;
  unsigned int v4297;
  unsigned int v4298;
  unsigned int *v4299;
  uint64_t v4300;
  unsigned int v4301;
  uint64_t *v4302;
  int v4303;
  unsigned int v4304;
  uint64_t *v4305;
  uint64_t v4306;
  uint64_t v4307;
  uint64_t v4308;
  unsigned int v4309;
  unsigned int v4310;
  uint64_t v4311;
  uint64_t v4312;
  _QWORD *v4313;
  uint64_t v4314;
  int8x16_t v4315;
  int8x16_t v4316;
  int8x16_t v4317;
  unint64_t v4318;
  uint64_t v4319;
  uint64_t v4320;
  uint64_t v4321;
  __int128 v4322;
  __int128 v4323;
  __int128 v4324;
  uint64_t *v4325;
  uint64_t v4326;
  uint64_t v4327;
  uint64_t v4328;
  uint64_t v4329;
  unsigned int v4330;
  unsigned int v4331;
  unsigned int *v4332;
  uint64_t v4333;
  unsigned int v4334;
  uint64_t *v4335;
  int v4336;
  unsigned int v4337;
  uint64_t *v4338;
  uint64_t v4339;
  uint64_t v4340;
  uint64_t v4341;
  unsigned int v4342;
  unsigned int v4343;
  uint64_t v4344;
  uint64_t v4345;
  int64x2_t v4346;
  int64x2_t v4347;
  int64x2_t v4348;
  int64x2_t v4349;
  int64x2_t v4350;
  int64x2_t v4351;
  int64x2_t v4352;
  int64x2_t v4353;
  int64x2_t v4354;
  int64x2_t v4355;
  int64x2_t v4356;
  int64x2_t v4357;
  int64x2_t v4358;
  int64x2_t v4359;
  int64x2_t v4360;
  int64x2_t v4361;
  int64x2_t *v4362;
  int64x2_t v4363;
  int64x2_t v4364;
  int64x2_t *v4365;
  int64x2_t *v4366;
  int64x2_t *v4367;
  int64x2_t *v4368;
  int64x2_t *v4369;
  int64x2_t *v4370;
  int64x2_t *v4371;
  int64x2_t *v4372;
  uint64_t v4373;
  uint64_t v4374;
  uint64_t v4375;
  uint64_t v4376;
  __int128 v4377;
  __int128 v4378;
  __int128 v4379;
  __int128 v4380;
  __int128 v4381;
  __int128 v4382;
  __int128 v4383;
  uint64_t v4384;
  __int128 v4385;
  __int128 v4386;
  __int128 v4387;
  __int128 v4388;
  uint64_t v4389;
  __int128 v4390;
  __int128 v4391;
  uint64_t v4392;
  __int128 v4393;
  __int128 v4394;
  uint64_t v4395;
  uint64_t v4396;
  uint64_t v4397;
  uint64_t *v4398;
  uint64_t v4399;
  uint64_t v4400;
  uint64_t v4401;
  uint64_t v4402;
  unsigned int v4403;
  unsigned int v4404;
  unsigned int *v4405;
  uint64_t v4406;
  unsigned int v4407;
  uint64_t *v4408;
  int v4409;
  unsigned int v4410;
  uint64_t *v4411;
  uint64_t v4412;
  uint64_t v4413;
  uint64_t v4414;
  unsigned int v4415;
  unsigned int v4416;
  uint64_t v4417;
  uint64_t v4418;
  int64x2_t v4419;
  int64x2_t v4420;
  int64x2_t v4421;
  int64x2_t v4422;
  int64x2_t v4423;
  int64x2_t v4424;
  int64x2_t v4425;
  int64x2_t v4426;
  int64x2_t v4427;
  int64x2_t v4428;
  int64x2_t v4429;
  int64x2_t v4430;
  int64x2_t v4431;
  int64x2_t v4432;
  int64x2_t v4433;
  int64x2_t v4434;
  int64x2_t *v4435;
  int64x2_t v4436;
  int64x2_t v4437;
  int64x2_t *v4438;
  int64x2_t *v4439;
  int64x2_t *v4440;
  int64x2_t *v4441;
  int64x2_t *v4442;
  int64x2_t *v4443;
  int64x2_t *v4444;
  int64x2_t *v4445;
  uint64_t v4446;
  uint64_t v4447;
  uint64_t v4448;
  uint64_t v4449;
  __int128 v4450;
  __int128 v4451;
  __int128 v4452;
  __int128 v4453;
  __int128 v4454;
  __int128 v4455;
  __int128 v4456;
  uint64_t v4457;
  __int128 v4458;
  __int128 v4459;
  __int128 v4460;
  __int128 v4461;
  uint64_t v4462;
  __int128 v4463;
  __int128 v4464;
  uint64_t v4465;
  __int128 v4466;
  __int128 v4467;
  uint64_t v4468;
  uint64_t v4469;
  uint64_t v4470;
  uint64_t *v4471;
  uint64_t v4472;
  uint64_t v4473;
  uint64_t v4474;
  uint64_t v4475;
  unsigned int v4476;
  unsigned int v4477;
  unsigned int *v4478;
  uint64_t v4479;
  unsigned int v4480;
  uint64_t *v4481;
  int v4482;
  unsigned int v4483;
  uint64_t *v4484;
  uint64_t v4485;
  uint64_t v4486;
  uint64_t v4487;
  unsigned int v4488;
  unsigned int v4489;
  uint64_t v4490;
  uint64_t v4491;
  __int128 v4492;
  uint64_t v4493;
  int64x2_t v4494;
  int64x2_t v4495;
  int64x2_t v4496;
  int64x2_t v4497;
  int64x2_t v4498;
  int64x2_t v4499;
  int64x2_t v4500;
  uint64_t v4501;
  __int128 v4502;
  __int128 v4503;
  __int128 v4504;
  __int128 v4505;
  int64x2_t v4506;
  int64x2_t v4507;
  int64x2_t *v4508;
  int64x2_t *v4509;
  int64x2_t *v4510;
  int64x2_t *v4511;
  int64x2_t *v4512;
  int64x2_t *v4513;
  int64x2_t *v4514;
  uint64_t v4515;
  uint64_t v4516;
  uint64_t v4517;
  uint64_t v4518;
  uint64_t v4519;
  __int128 v4520;
  __int128 v4521;
  __int128 v4522;
  __int128 v4523;
  __int128 v4524;
  __int128 v4525;
  __int128 v4526;
  uint64_t v4527;
  __int128 v4528;
  __int128 v4529;
  __int128 v4530;
  __int128 v4531;
  uint64_t v4532;
  uint64_t v4533;
  uint64_t v4534;
  uint64_t *v4535;
  uint64_t v4536;
  uint64_t v4537;
  uint64_t v4538;
  uint64_t v4539;
  unsigned int v4540;
  unsigned int v4541;
  unsigned int *v4542;
  uint64_t v4543;
  unsigned int v4544;
  uint64_t *v4545;
  int v4546;
  unsigned int v4547;
  uint64_t *v4548;
  uint64_t v4549;
  uint64_t v4550;
  uint64_t v4551;
  unsigned int v4552;
  unsigned int v4553;
  uint64_t v4554;
  uint64_t v4555;
  __int128 v4556;
  uint64_t v4557;
  int64x2_t v4558;
  int64x2_t v4559;
  int64x2_t v4560;
  int64x2_t v4561;
  int64x2_t v4562;
  int64x2_t v4563;
  int64x2_t v4564;
  uint64_t v4565;
  __int128 v4566;
  __int128 v4567;
  __int128 v4568;
  __int128 v4569;
  int64x2_t v4570;
  int64x2_t v4571;
  int64x2_t *v4572;
  int64x2_t *v4573;
  int64x2_t *v4574;
  int64x2_t *v4575;
  int64x2_t *v4576;
  int64x2_t *v4577;
  int64x2_t *v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  uint64_t v4582;
  uint64_t v4583;
  __int128 v4584;
  __int128 v4585;
  __int128 v4586;
  __int128 v4587;
  __int128 v4588;
  __int128 v4589;
  __int128 v4590;
  uint64_t v4591;
  __int128 v4592;
  __int128 v4593;
  __int128 v4594;
  __int128 v4595;
  uint64_t v4596;
  uint64_t v4597;
  uint64_t v4598;
  uint64_t *v4599;
  uint64_t v4600;
  uint64_t v4601;
  uint64_t v4602;
  uint64_t v4603;
  unsigned int v4604;
  unsigned int v4605;
  unsigned int *v4606;
  uint64_t v4607;
  unsigned int v4608;
  uint64_t *v4609;
  int v4610;
  unsigned int v4611;
  uint64_t *v4612;
  uint64_t v4613;
  uint64_t v4614;
  uint64_t v4615;
  unsigned int v4616;
  unsigned int v4617;
  uint64_t v4618;
  uint64_t v4619;
  int64x2_t *v4620;
  int64x2_t v4621;
  int64x2_t v4622;
  int64x2_t v4623;
  int64x2_t v4624;
  int64x2_t v4625;
  int64x2_t v4626;
  int64x2_t v4627;
  int64x2_t v4628;
  int64x2_t v4629;
  int64x2_t v4630;
  int64x2_t v4631;
  int64x2_t v4632;
  int64x2_t v4633;
  int64x2_t v4634;
  int64x2_t v4635;
  int64x2_t v4636;
  int64x2_t v4637;
  int8x16_t v4638;
  int8x16_t v4639;
  int8x16_t v4640;
  unint64_t v4641;
  unint64_t v4642;
  unint64_t v4643;
  int8x16_t v4644;
  int8x16_t v4645;
  int8x16_t v4646;
  unint64_t v4647;
  unint64_t v4648;
  unint64_t v4649;
  int8x16_t v4650;
  int8x16_t v4651;
  int8x16_t v4652;
  unint64_t v4653;
  unint64_t v4654;
  unint64_t v4655;
  int8x16_t v4656;
  int8x16_t v4657;
  int8x16_t v4658;
  unint64_t v4659;
  unint64_t v4660;
  unint64_t v4661;
  int64x2_t *v4662;
  _OWORD *v4663;
  int64x2_t v4664;
  int64x2_t v4665;
  int64x2_t v4666;
  int64x2_t v4667;
  int8x16_t *v4668;
  int8x16_t *v4669;
  int8x16_t *v4670;
  int8x16_t *v4671;
  uint64_t *v4672;
  uint64_t v4673;
  uint64_t v4674;
  uint64_t v4675;
  uint64_t v4676;
  int64x2_t *result;
  unsigned int v4678;
  unsigned int *v4679;
  uint64_t v4680;
  unsigned int v4681;
  uint64_t *v4682;
  int v4683;
  unsigned int v4684;
  uint64_t *v4685;
  uint64_t v4686;
  uint64_t v4687;
  uint64_t v4688;
  unsigned int v4689;
  unsigned int v4690;
  uint64_t v4691;
  uint64_t v4692;
  uint64_t v4693;
  int64x2_t v4694;
  int64x2_t v4695;
  int64x2_t v4696;
  int64x2_t v4697;
  int64x2_t v4698;
  int64x2_t v4699;
  int64x2_t v4700;
  int64x2_t v4701;
  int64x2_t v4702;
  int64x2_t v4703;
  int64x2_t v4704;
  int64x2_t v4705;
  int64x2_t v4706;
  int64x2_t v4707;
  int64x2_t v4708;
  int64x2_t v4709;
  int64x2_t v4710;
  int64x2_t v4711;
  int64x2_t v4712;
  int64x2_t v4713;
  int64x2_t v4714;
  int64x2_t v4715;
  int64x2_t v4716;
  __int128 v4717;
  __int128 v4718;
  __int128 v4719;
  int64x2_t v4720;
  int64x2_t v4721;
  int64x2_t *v4722;
  int64x2_t *v4723;
  int64x2_t *v4724;
  int64x2_t *v4725;
  int64x2_t *v4726;
  __int128 *v4727;
  uint64_t v4728;
  _OWORD *v4729;
  __int128 v4730;
  __int128 v4731;
  __int128 v4732;
  __int128 v4733;
  __int128 v4734;
  __int128 v4735;
  __int128 v4736;
  __int128 v4737;
  __int128 v4738;
  __int128 v4739;
  __int128 v4740;
  __int128 v4741;
  __int128 v4742;
  __int128 v4743;
  __int128 v4744;
  __int128 v4745;
  __int128 v4746;
  __int128 v4747;
  __int128 v4748;
  __int128 v4749;
  __int128 v4750;
  __int128 v4751;
  __int128 v4752;
  __int128 v4753;
  __int128 v4754;
  __int128 v4755;
  _OWORD *v4756;
  _OWORD *v4757;
  _OWORD *v4758;
  _OWORD *v4759;
  _OWORD *v4760;
  _OWORD *v4761;
  _OWORD *v4762;
  _OWORD *v4763;
  uint64_t *v4764;
  uint64_t v4765;
  uint64_t v4766;
  uint64_t v4767;
  uint64_t v4768;
  unsigned int v4769;
  unsigned int v4770;
  unsigned int *v4771;
  uint64_t v4772;
  unsigned int v4773;
  uint64_t *v4774;
  unsigned int v4775;
  uint64_t *v4776;
  uint64_t v4777;
  uint64_t v4778;
  uint64_t v4779;
  unsigned int v4780;
  unsigned int v4781;
  uint64_t v4782;
  uint64_t v4783;
  int64x2_t *v4784;
  int64x2_t v4785;
  int64x2_t v4786;
  int64x2_t v4787;
  int64x2_t v4788;
  int64x2_t v4789;
  int64x2_t v4790;
  int64x2_t v4791;
  int64x2_t v4792;
  int64x2_t v4793;
  int64x2_t v4794;
  int64x2_t v4795;
  int64x2_t v4796;
  int64x2_t v4797;
  int64x2_t v4798;
  int64x2_t v4799;
  int64x2_t v4800;
  int64x2_t v4801;
  int8x16_t v4802;
  int8x16_t v4803;
  int8x16_t v4804;
  unint64_t v4805;
  unint64_t v4806;
  unint64_t v4807;
  int8x16_t v4808;
  int8x16_t v4809;
  int8x16_t v4810;
  unint64_t v4811;
  unint64_t v4812;
  unint64_t v4813;
  int8x16_t v4814;
  int8x16_t v4815;
  int8x16_t v4816;
  unint64_t v4817;
  unint64_t v4818;
  unint64_t v4819;
  int8x16_t v4820;
  int8x16_t v4821;
  int8x16_t v4822;
  unint64_t v4823;
  unint64_t v4824;
  unint64_t v4825;
  int64x2_t *v4826;
  _OWORD *v4827;
  int64x2_t v4828;
  int64x2_t v4829;
  int64x2_t v4830;
  int64x2_t v4831;
  int8x16_t *v4832;
  int8x16_t *v4833;
  int8x16_t *v4834;
  uint64_t *v4835;
  uint64_t v4836;
  uint64_t v4837;
  uint64_t v4838;
  uint64_t v4839;
  unsigned int v4840;
  unsigned int v4841;
  unsigned int *v4842;
  uint64_t v4843;
  unsigned int v4844;
  uint64_t *v4845;
  unsigned int v4846;
  uint64_t *v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  unsigned int v4851;
  unsigned int v4852;
  uint64_t v4853;
  uint64_t v4854;
  int64x2_t *v4855;
  int64x2_t v4856;
  int64x2_t v4857;
  int64x2_t v4858;
  int64x2_t v4859;
  int64x2_t v4860;
  int64x2_t v4861;
  int64x2_t v4862;
  int64x2_t v4863;
  int64x2_t v4864;
  int64x2_t v4865;
  int64x2_t v4866;
  int64x2_t v4867;
  int64x2_t v4868;
  int64x2_t v4869;
  int64x2_t v4870;
  int64x2_t v4871;
  int64x2_t v4872;
  int8x16_t v4873;
  int8x16_t v4874;
  int8x16_t v4875;
  unint64_t v4876;
  unint64_t v4877;
  unint64_t v4878;
  int8x16_t v4879;
  int8x16_t v4880;
  int8x16_t v4881;
  unint64_t v4882;
  unint64_t v4883;
  unint64_t v4884;
  int8x16_t v4885;
  int8x16_t v4886;
  int8x16_t v4887;
  unint64_t v4888;
  unint64_t v4889;
  unint64_t v4890;
  int8x16_t v4891;
  int8x16_t v4892;
  int8x16_t v4893;
  unint64_t v4894;
  unint64_t v4895;
  unint64_t v4896;
  int64x2_t *v4897;
  _OWORD *v4898;
  int64x2_t v4899;
  int64x2_t v4900;
  int64x2_t v4901;
  int64x2_t v4902;
  int8x16_t *v4903;
  int8x16_t *v4904;
  int8x16_t *v4905;
  uint64_t *v4906;
  uint64_t v4907;
  uint64_t v4908;
  uint64_t v4909;
  uint64_t v4910;
  unsigned int v4911;
  unsigned int v4912;
  unsigned int *v4913;
  uint64_t v4914;
  unsigned int v4915;
  uint64_t *v4916;
  unsigned int v4917;
  uint64_t *v4918;
  uint64_t v4919;
  uint64_t v4920;
  uint64_t v4921;
  unsigned int v4922;
  unsigned int v4923;
  uint64_t v4924;
  uint64_t v4925;
  uint64_t v4926;
  int64x2_t v4927;
  int64x2_t v4928;
  int64x2_t v4929;
  int64x2_t v4930;
  int64x2_t v4931;
  __int128 v4932;
  __int128 v4933;
  __int128 v4934;
  int64x2_t v4935;
  int64x2_t v4936;
  int64x2_t *v4937;
  int64x2_t *v4938;
  int64x2_t *v4939;
  int64x2_t *v4940;
  int64x2_t *v4941;
  __int128 *v4942;
  uint64_t v4943;
  unsigned int v4944;
  _OWORD *v4945;
  __int128 v4946;
  __int128 v4947;
  __int128 v4948;
  __int128 v4949;
  __int128 v4950;
  __int128 v4951;
  __int128 v4952;
  __int128 v4953;
  _OWORD *v4954;
  _OWORD *v4955;
  uint64_t *v4956;
  uint64_t v4957;
  uint64_t v4958;
  uint64_t v4959;
  uint64_t v4960;
  unsigned int v4961;
  unsigned int v4962;
  unsigned int *v4963;
  uint64_t v4964;
  unsigned int v4965;
  uint64_t *v4966;
  unsigned int v4967;
  uint64_t *v4968;
  uint64_t v4969;
  uint64_t v4970;
  uint64_t v4971;
  unsigned int v4972;
  unsigned int v4973;
  uint64_t v4974;
  uint64_t v4975;
  unsigned int v4976;
  _QWORD *v4977;
  int8x16_t v4978;
  int8x16_t v4979;
  unint64_t v4980;
  __int128 *v4981;
  unsigned int v4982;
  _OWORD *v4983;
  __int128 v4984;
  __int128 v4985;
  uint64_t *v4986;
  uint64_t v4987;
  uint64_t v4988;
  uint64_t v4989;
  uint64_t v4990;
  unsigned int v4991;
  unsigned int v4992;
  unsigned int *v4993;
  uint64_t v4994;
  unsigned int v4995;
  uint64_t *v4996;
  unsigned int v4997;
  uint64_t *v4998;
  uint64_t v4999;
  uint64_t v5000;
  uint64_t v5001;
  unsigned int v5002;
  unsigned int v5003;
  uint64_t v5004;
  uint64_t v5005;
  unsigned int v5006;
  int64x2_t *v5007;
  int64x2_t v5008;
  int64x2_t v5009;
  int64x2_t v5010;
  int64x2_t v5011;
  int64x2_t v5012;
  int64x2_t v5013;
  int64x2_t v5014;
  int64x2_t v5015;
  int64x2_t v5016;
  int64x2_t v5017;
  int64x2_t v5018;
  int64x2_t v5019;
  int64x2_t *v5020;
  int64x2_t *v5021;
  int64x2_t *v5022;
  int64x2_t *v5023;
  int64x2_t *v5024;
  __int128 *v5025;
  uint64_t v5026;
  unsigned int v5027;
  _OWORD *v5028;
  __int128 v5029;
  __int128 v5030;
  __int128 v5031;
  __int128 v5032;
  __int128 v5033;
  __int128 v5034;
  __int128 v5035;
  __int128 v5036;
  __int128 v5037;
  __int128 v5038;
  __int128 v5039;
  _OWORD *v5040;
  _OWORD *v5041;
  _OWORD *v5042;
  uint64_t *v5043;
  uint64_t v5044;
  uint64_t v5045;
  uint64_t v5046;
  uint64_t v5047;
  unsigned int v5048;
  unsigned int v5049;
  unsigned int *v5050;
  uint64_t v5051;
  unsigned int v5052;
  uint64_t *v5053;
  unsigned int v5054;
  uint64_t *v5055;
  uint64_t v5056;
  uint64_t v5057;
  uint64_t v5058;
  unsigned int v5059;
  unsigned int v5060;
  uint64_t v5061;
  uint64_t v5062;
  unsigned int v5063;
  int64x2_t *v5064;
  int64x2_t v5065;
  int64x2_t v5066;
  int64x2_t v5067;
  int64x2_t v5068;
  int64x2_t v5069;
  int64x2_t v5070;
  int64x2_t v5071;
  int64x2_t v5072;
  int64x2_t v5073;
  int64x2_t v5074;
  int64x2_t v5075;
  int64x2_t v5076;
  int64x2_t *v5077;
  int64x2_t *v5078;
  int64x2_t *v5079;
  int64x2_t *v5080;
  int64x2_t *v5081;
  __int128 *v5082;
  uint64_t v5083;
  unsigned int v5084;
  _OWORD *v5085;
  __int128 v5086;
  __int128 v5087;
  __int128 v5088;
  __int128 v5089;
  __int128 v5090;
  __int128 v5091;
  __int128 v5092;
  __int128 v5093;
  __int128 v5094;
  __int128 v5095;
  __int128 v5096;
  _OWORD *v5097;
  _OWORD *v5098;
  _OWORD *v5099;
  uint64_t *v5100;
  uint64_t v5101;
  uint64_t v5102;
  uint64_t v5103;
  uint64_t v5104;
  unsigned int v5105;
  unsigned int v5106;
  unsigned int *v5107;
  uint64_t v5108;
  unsigned int v5109;
  uint64_t *v5110;
  unsigned int v5111;
  uint64_t *v5112;
  uint64_t v5113;
  uint64_t v5114;
  uint64_t v5115;
  unsigned int v5116;
  unsigned int v5117;
  uint64_t v5118;
  uint64_t v5119;
  uint64_t v5120;
  int64x2_t v5121;
  int64x2_t v5122;
  int64x2_t v5123;
  int64x2_t v5124;
  int64x2_t v5125;
  __int128 v5126;
  __int128 v5127;
  __int128 v5128;
  int64x2_t v5129;
  int64x2_t v5130;
  int64x2_t *v5131;
  int64x2_t *v5132;
  int64x2_t *v5133;
  int64x2_t *v5134;
  int64x2_t *v5135;
  __int128 *v5136;
  uint64_t v5137;
  unsigned int v5138;
  _OWORD *v5139;
  __int128 v5140;
  __int128 v5141;
  __int128 v5142;
  __int128 v5143;
  __int128 v5144;
  __int128 v5145;
  __int128 v5146;
  __int128 v5147;
  _OWORD *v5148;
  _OWORD *v5149;
  uint64_t *v5150;
  uint64_t v5151;
  uint64_t v5152;
  uint64_t v5153;
  uint64_t v5154;
  unsigned int v5155;
  int v5156;
  unsigned int *i;
  uint64_t v5158;
  unsigned int v5159;
  uint64_t *v5160;
  unsigned int v5161;
  uint64_t *v5162;
  uint64_t v5163;
  uint64_t v5164;
  uint64_t v5165;
  unsigned int v5166;
  unsigned int v5167;
  uint64_t v5168;
  uint64_t v5169;
  uint64_t v5170;
  int64x2_t v5171;
  int64x2_t v5172;
  int64x2_t v5173;
  int64x2_t v5174;
  int64x2_t v5175;
  __int128 v5176;
  __int128 v5177;
  __int128 v5178;
  int64x2_t v5179;
  int64x2_t v5180;
  int64x2_t *v5181;
  int64x2_t *v5182;
  int64x2_t *v5183;
  int64x2_t *v5184;
  int64x2_t *v5185;
  __int128 *v5186;
  uint64_t v5187;
  unsigned int v5188;
  _OWORD *v5189;
  __int128 v5190;
  __int128 v5191;
  __int128 v5192;
  __int128 v5193;
  __int128 v5194;
  __int128 v5195;
  __int128 v5196;
  __int128 v5197;
  _OWORD *v5198;
  _OWORD *v5199;
  uint64_t *v5200;
  uint64_t v5201;
  uint64_t v5202;
  uint64_t v5203;
  uint64_t v5204;
  unint64_t v5205;
  int8x16_t v5206;
  unint64_t v5207;
  unint64_t v5208;
  unint64_t v5209;
  unint64_t v5210;
  unint64_t v5211;
  uint64_t v5212;
  unint64_t v5213;
  unint64_t v5214;
  unint64_t v5215;
  uint64_t v5216;
  uint64_t v5217;
  uint64_t v5218;
  uint64_t v5219;
  uint64_t v5220;
  uint64_t v5221;
  uint64_t v5222;
  unint64_t v5223;
  unint64_t v5224;
  uint64_t v5225;
  unint64_t v5226;
  unint64_t v5227;
  unint64_t v5228;
  unint64_t v5229;
  int64x2_t v5230;
  uint64_t v5231;
  int64x2_t v5232;
  uint64_t v5233;
  int64x2_t v5234;
  uint64_t v5235;
  __int128 v5236;
  uint64_t v5237;
  uint64_t v5238;
  __int128 v5239;
  uint64_t v5240;
  __int128 v5241;
  int64x2_t v5242;
  uint64_t v5243;
  __int128 v5244;
  __int128 v5245;
  uint64_t v5246;
  __int128 v5247;
  uint64_t v5248;
  __int128 v5249;
  uint64_t v5250;
  uint64_t v5251;
  int64x2_t v5252;
  uint64_t v5253;
  __int128 v5254;
  int64x2_t v5255;
  uint64_t v5256;
  __int128 v5257;

  v10 = *a5;
  v11 = *(_DWORD *)(a1 + 1308);
  if (v11)
  {
    v12 = 0;
    v13 = *a4;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 1384);
      v15 = *(_DWORD *)(a1 + 1408) * v12;
      v16 = (uint64_t *)(v14 + 8 * v15);
      v17 = *(_DWORD *)(a1 + 1304);
      if (v17 && *v16 == -1)
      {
        v18 = 0;
        v61 = 8 * (v17 + v15) - 8 * v15 - 8;
        v62 = v14 + 8 * v15;
        while (v61)
        {
          v16 = (uint64_t *)(v62 + 8);
          ++v18;
          v63 = *(_QWORD *)(v62 + 8);
          v61 -= 8;
          v62 += 8;
          if (v63 != -1)
            goto LABEL_8;
        }
        goto LABEL_4;
      }
      v18 = 0;
LABEL_8:
      v19 = (uint64_t *)(v14 + 8 * (v15 + v17));
      if (v16 != v19)
        break;
LABEL_4:
      ++v12;
      ++v13;
      if (v12 >= v11)
      {
        v10 = *a5;
        goto LABEL_24;
      }
    }
    v20 = *v16;
    v21 = v18;
    v22 = a3[27];
    if (v10)
    {
LABEL_10:
      v23 = *v13;
      v24 = *(_DWORD *)(v22 + 4 * v21);
      if (*v13 < v24)
      {
        v25 = *(_QWORD *)(a1 + 1312) + 8 * v20;
        v26 = *(unsigned int *)(a2 + 16);
        v27 = *(_QWORD *)a2 + 8 * (v23 + (_DWORD)v26 * v24);
        *(_QWORD *)&v28 = *(_QWORD *)(v25 + 16);
        v29 = *(int64x2_t *)(v25 + 24);
        *(_QWORD *)&v30 = *(_QWORD *)(v25 + 64);
        v31 = *(int64x2_t *)(v25 + 48);
        v32 = *(int64x2_t *)(v25 + 72);
        *(_QWORD *)&v33 = *(_QWORD *)(v25 + 112);
        v34 = *(int64x2_t *)(v25 + 96);
        v35 = *(int64x2_t *)(v25 + 120);
        v36 = vzip1q_s64(*(int64x2_t *)v25, v29);
        v37 = vzip2q_s64(*(int64x2_t *)v25, v29);
        *((_QWORD *)&v28 + 1) = *(_QWORD *)(v25 + 40);
        *((_QWORD *)&v30 + 1) = *(_QWORD *)(v25 + 88);
        *((_QWORD *)&v33 + 1) = *(_QWORD *)(v25 + 136);
        *(int64x2_t *)(v27 + 16) = vzip1q_s64(v31, v32);
        *(int64x2_t *)(v27 + 32) = vzip1q_s64(v34, v35);
        *(int64x2_t *)v27 = v36;
        v38 = (int64x2_t *)(v27 + 8 * v26);
        v38[1] = vzip1q_s64(vdupq_laneq_s64(v31, 1), vdupq_laneq_s64(v32, 1));
        v38[2] = vzip2q_s64(v34, v35);
        *v38 = v37;
        v39 = (_OWORD *)(v27 + 16 * v26);
        v39[1] = v30;
        v39[2] = v33;
        *v39 = v28;
        goto LABEL_14;
      }
    }
    else
    {
LABEL_12:
      v24 = *(_DWORD *)(v22 + 4 * v21);
      v23 = *v13;
    }
    v40 = *(_QWORD *)(a1 + 1312) + 8 * v20;
    v41 = *(unsigned int *)(a2 + 16);
    v42 = *(_OWORD *)v40;
    v43 = *(_QWORD *)a2 + 8 * (v24 + (_DWORD)v41 * v23);
    v44 = *(_OWORD *)(v40 + 24);
    v45 = *(_QWORD *)(v40 + 40);
    v46 = *(_OWORD *)(v40 + 48);
    v47 = *(_QWORD *)(v40 + 64);
    v48 = *(_OWORD *)(v40 + 72);
    v49 = *(_QWORD *)(v40 + 88);
    v50 = *(_OWORD *)(v40 + 96);
    v51 = *(_QWORD *)(v40 + 112);
    v52 = *(_OWORD *)(v40 + 120);
    v53 = *(_QWORD *)(v40 + 136);
    *(_QWORD *)(v43 + 16) = *(_QWORD *)(v40 + 16);
    *(_OWORD *)v43 = v42;
    v54 = v43 + 8 * v41;
    *(_QWORD *)(v54 + 16) = v45;
    *(_OWORD *)v54 = v44;
    v55 = v43 + 16 * v41;
    *(_QWORD *)(v55 + 16) = v47;
    *(_OWORD *)v55 = v46;
    v56 = v43 + 24 * v41;
    *(_QWORD *)(v56 + 16) = v49;
    *(_OWORD *)v56 = v48;
    v57 = v43 + 32 * v41;
    *(_QWORD *)(v57 + 16) = v51;
    *(_OWORD *)v57 = v50;
    v58 = v43 + 40 * v41;
    *(_QWORD *)(v58 + 16) = v53;
    *(_OWORD *)v58 = v52;
LABEL_14:
    v59 = v16 + 1;
    while (v59 != v19)
    {
      ++v18;
      v60 = *v59++;
      v20 = v60;
      if (v60 != -1)
      {
        v16 = v59 - 1;
        v21 = v18;
        v22 = a3[27];
        if (v10)
          goto LABEL_10;
        goto LABEL_12;
      }
    }
    v11 = *(_DWORD *)(a1 + 1308);
    goto LABEL_4;
  }
LABEL_24:
  v64 = *(_DWORD *)(a1 + 2748);
  if (!v64)
    goto LABEL_47;
  v65 = 0;
  v66 = a4[3];
  do
  {
    v67 = *(_QWORD *)(a1 + 2824);
    v68 = *(_DWORD *)(a1 + 2848) * v65;
    v69 = (uint64_t *)(v67 + 8 * v68);
    v70 = *(_DWORD *)(a1 + 2744);
    if (v70 && *v69 == -1)
    {
      v71 = 0;
      v128 = 8 * (v70 + v68) - 8 * v68 - 8;
      v129 = v67 + 8 * v68;
      while (v128)
      {
        v69 = (uint64_t *)(v129 + 8);
        ++v71;
        v130 = *(_QWORD *)(v129 + 8);
        v128 -= 8;
        v129 += 8;
        if (v130 != -1)
          goto LABEL_31;
      }
    }
    else
    {
      v71 = 0;
LABEL_31:
      v72 = (uint64_t *)(v67 + 8 * (v68 + v70));
      if (v69 != v72)
      {
        v73 = *v69;
        v74 = v71;
        v75 = a3[27];
        if (v10)
        {
LABEL_33:
          v76 = *v66;
          v77 = *(_DWORD *)(v75 + 4 * v74);
          if (*v66 < v77)
          {
            v78 = *(unsigned int *)(a2 + 16);
            v79 = *(_QWORD *)(a1 + 2752) + 8 * v73;
            *(_QWORD *)&v80 = *(_QWORD *)(v79 + 16);
            v81 = *(_QWORD *)a2 + 8 * (v76 + (_DWORD)v78 * v77);
            v82 = *(int64x2_t *)(v79 + 24);
            *(_QWORD *)&v83 = *(_QWORD *)(v79 + 64);
            v84 = *(int64x2_t *)(v79 + 48);
            v85 = *(int64x2_t *)(v79 + 72);
            *(_QWORD *)&v86 = *(_QWORD *)(v79 + 112);
            v87 = *(int64x2_t *)(v79 + 96);
            v88 = *(int64x2_t *)(v79 + 120);
            *(_QWORD *)&v89 = *(_QWORD *)(v79 + 160);
            v90 = *(int64x2_t *)(v79 + 144);
            v91 = *(int64x2_t *)(v79 + 168);
            v92 = *(_QWORD *)(v79 + 208);
            v93 = *(_OWORD *)(v79 + 192);
            v94 = vzip1q_s64(*(int64x2_t *)v79, v82);
            v95 = vzip2q_s64(*(int64x2_t *)v79, v82);
            *((_QWORD *)&v80 + 1) = *(_QWORD *)(v79 + 40);
            *((_QWORD *)&v83 + 1) = *(_QWORD *)(v79 + 88);
            *((_QWORD *)&v86 + 1) = *(_QWORD *)(v79 + 136);
            *((_QWORD *)&v89 + 1) = *(_QWORD *)(v79 + 184);
            *(int64x2_t *)(v81 + 32) = vzip1q_s64(v87, v88);
            *(int64x2_t *)(v81 + 48) = vzip1q_s64(v90, v91);
            *(_QWORD *)(v81 + 64) = v93;
            *(int64x2_t *)v81 = v94;
            *(int64x2_t *)(v81 + 16) = vzip1q_s64(v84, v85);
            v96 = (int64x2_t *)(v81 + 8 * v78);
            v96[2] = vzip2q_s64(v87, v88);
            v96[3] = vzip2q_s64(v90, v91);
            *v96 = v95;
            v96[1] = vzip2q_s64(v84, v85);
            v96[4].i64[0] = *((_QWORD *)&v93 + 1);
            v97 = v81 + 16 * v78;
            *(_QWORD *)(v97 + 64) = v92;
            *(_OWORD *)(v97 + 32) = v86;
            *(_OWORD *)(v97 + 48) = v89;
            *(_OWORD *)v97 = v80;
            *(_OWORD *)(v97 + 16) = v83;
            goto LABEL_37;
          }
        }
        else
        {
LABEL_35:
          v77 = *(_DWORD *)(v75 + 4 * v74);
          v76 = *v66;
        }
        v98 = *(_QWORD *)(a1 + 2752) + 8 * v73;
        v99 = *(unsigned int *)(a2 + 16);
        v100 = *(_OWORD *)v98;
        v101 = *(_QWORD *)a2 + 8 * (v77 + (_DWORD)v99 * v76);
        v102 = *(_OWORD *)(v98 + 24);
        v103 = *(_QWORD *)(v98 + 40);
        v104 = *(_OWORD *)(v98 + 48);
        v105 = *(_QWORD *)(v98 + 64);
        v106 = *(_OWORD *)(v98 + 72);
        v107 = *(_QWORD *)(v98 + 88);
        v108 = *(_OWORD *)(v98 + 96);
        v109 = *(_QWORD *)(v98 + 112);
        v110 = *(_OWORD *)(v98 + 120);
        v111 = *(_QWORD *)(v98 + 136);
        v112 = *(_OWORD *)(v98 + 144);
        v113 = *(_QWORD *)(v98 + 160);
        v114 = *(_OWORD *)(v98 + 168);
        v115 = *(_QWORD *)(v98 + 184);
        v116 = *(_OWORD *)(v98 + 192);
        v117 = *(_QWORD *)(v98 + 208);
        *(_QWORD *)(v101 + 16) = *(_QWORD *)(v98 + 16);
        *(_OWORD *)v101 = v100;
        v118 = v101 + 8 * v99;
        *(_QWORD *)(v118 + 16) = v103;
        *(_OWORD *)v118 = v102;
        v119 = v101 + 16 * v99;
        *(_QWORD *)(v119 + 16) = v105;
        *(_OWORD *)v119 = v104;
        v120 = v101 + 24 * v99;
        *(_QWORD *)(v120 + 16) = v107;
        *(_OWORD *)v120 = v106;
        v121 = v101 + 32 * v99;
        *(_QWORD *)(v121 + 16) = v109;
        *(_OWORD *)v121 = v108;
        v122 = v101 + 40 * v99;
        *(_QWORD *)(v122 + 16) = v111;
        *(_OWORD *)v122 = v110;
        v123 = v101 + 48 * v99;
        *(_QWORD *)(v123 + 16) = v113;
        *(_OWORD *)v123 = v112;
        v124 = v101 + 56 * v99;
        *(_QWORD *)(v124 + 16) = v115;
        *(_OWORD *)v124 = v114;
        v125 = v101 + (v99 << 6);
        *(_QWORD *)(v125 + 16) = v117;
        *(_OWORD *)v125 = v116;
LABEL_37:
        v126 = v69 + 1;
        while (v126 != v72)
        {
          ++v71;
          v127 = *v126++;
          v73 = v127;
          if (v127 != -1)
          {
            v69 = v126 - 1;
            v74 = v71;
            v75 = a3[27];
            if (v10)
              goto LABEL_33;
            goto LABEL_35;
          }
        }
        v64 = *(_DWORD *)(a1 + 2748);
      }
    }
    ++v65;
    ++v66;
  }
  while (v65 < v64);
  v10 = *a5;
LABEL_47:
  v131 = *(_DWORD *)(a1 + 4188);
  if (!v131)
    goto LABEL_70;
  v132 = 0;
  v133 = a4[6];
  while (2)
  {
    v134 = *(_QWORD *)(a1 + 4264);
    v135 = *(_DWORD *)(a1 + 4288) * v132;
    v136 = (uint64_t *)(v134 + 8 * v135);
    v137 = *(_DWORD *)(a1 + 4184);
    if (v137 && *v136 == -1)
    {
      v138 = 0;
      v181 = 8 * (v137 + v135) - 8 * v135 - 8;
      v182 = v134 + 8 * v135;
      while (v181)
      {
        v136 = (uint64_t *)(v182 + 8);
        ++v138;
        v183 = *(_QWORD *)(v182 + 8);
        v181 -= 8;
        v182 += 8;
        if (v183 != -1)
          goto LABEL_54;
      }
      goto LABEL_50;
    }
    v138 = 0;
LABEL_54:
    v139 = (uint64_t *)(v134 + 8 * (v135 + v137));
    if (v136 == v139)
      goto LABEL_50;
    v140 = *v136;
    v141 = v138;
    v142 = a3[27];
    if (!v10)
    {
LABEL_58:
      v144 = *(_DWORD *)(v142 + 4 * v141);
      v143 = *v133;
      goto LABEL_59;
    }
LABEL_56:
    v143 = *v133;
    v144 = *(_DWORD *)(v142 + 4 * v141);
    if (*v133 >= v144)
    {
LABEL_59:
      v160 = *(_QWORD *)(a1 + 4192) + 8 * v140;
      v161 = *(unsigned int *)(a2 + 16);
      v162 = *(_OWORD *)v160;
      v163 = *(_QWORD *)a2 + 8 * (v144 + (_DWORD)v161 * v143);
      v164 = *(_OWORD *)(v160 + 24);
      v165 = *(_QWORD *)(v160 + 40);
      v166 = *(_OWORD *)(v160 + 48);
      v167 = *(_QWORD *)(v160 + 64);
      v168 = *(_OWORD *)(v160 + 72);
      v169 = *(_QWORD *)(v160 + 88);
      v170 = *(_OWORD *)(v160 + 96);
      v171 = *(_QWORD *)(v160 + 112);
      v172 = *(_OWORD *)(v160 + 120);
      v173 = *(_QWORD *)(v160 + 136);
      *(_QWORD *)(v163 + 16) = *(_QWORD *)(v160 + 16);
      *(_OWORD *)v163 = v162;
      v174 = v163 + 8 * v161;
      *(_QWORD *)(v174 + 16) = v165;
      *(_OWORD *)v174 = v164;
      v175 = v163 + 16 * v161;
      *(_QWORD *)(v175 + 16) = v167;
      *(_OWORD *)v175 = v166;
      v176 = v163 + 24 * v161;
      *(_QWORD *)(v176 + 16) = v169;
      *(_OWORD *)v176 = v168;
      v177 = v163 + 32 * v161;
      *(_QWORD *)(v177 + 16) = v171;
      *(_OWORD *)v177 = v170;
      v178 = v163 + 40 * v161;
      *(_QWORD *)(v178 + 16) = v173;
      *(_OWORD *)v178 = v172;
      goto LABEL_60;
    }
    v145 = *(_QWORD *)(a1 + 4192) + 8 * v140;
    v146 = *(unsigned int *)(a2 + 16);
    v147 = *(_QWORD *)a2 + 8 * (v143 + (_DWORD)v146 * v144);
    *(_QWORD *)&v148 = *(_QWORD *)(v145 + 16);
    v149 = *(int64x2_t *)(v145 + 24);
    *(_QWORD *)&v150 = *(_QWORD *)(v145 + 64);
    v151 = *(int64x2_t *)(v145 + 48);
    v152 = *(int64x2_t *)(v145 + 72);
    *(_QWORD *)&v153 = *(_QWORD *)(v145 + 112);
    v154 = *(int64x2_t *)(v145 + 96);
    v155 = *(int64x2_t *)(v145 + 120);
    v156 = vzip1q_s64(*(int64x2_t *)v145, v149);
    v157 = vzip2q_s64(*(int64x2_t *)v145, v149);
    *((_QWORD *)&v148 + 1) = *(_QWORD *)(v145 + 40);
    *((_QWORD *)&v150 + 1) = *(_QWORD *)(v145 + 88);
    *((_QWORD *)&v153 + 1) = *(_QWORD *)(v145 + 136);
    *(int64x2_t *)(v147 + 16) = vzip1q_s64(v151, v152);
    *(int64x2_t *)(v147 + 32) = vzip1q_s64(v154, v155);
    *(int64x2_t *)v147 = v156;
    v158 = (int64x2_t *)(v147 + 8 * v146);
    v158[1] = vzip1q_s64(vdupq_laneq_s64(v151, 1), vdupq_laneq_s64(v152, 1));
    v158[2] = vzip2q_s64(v154, v155);
    *v158 = v157;
    v159 = (_OWORD *)(v147 + 16 * v146);
    v159[1] = v150;
    v159[2] = v153;
    *v159 = v148;
LABEL_60:
    v179 = v136 + 1;
    while (v179 != v139)
    {
      ++v138;
      v180 = *v179++;
      v140 = v180;
      if (v180 != -1)
      {
        v136 = v179 - 1;
        v141 = v138;
        v142 = a3[27];
        if (v10)
          goto LABEL_56;
        goto LABEL_58;
      }
    }
    v131 = *(_DWORD *)(a1 + 4188);
LABEL_50:
    ++v132;
    ++v133;
    if (v132 < v131)
      continue;
    break;
  }
  v10 = *a5;
LABEL_70:
  v184 = *(_DWORD *)(a1 + 5628);
  if (!v184)
    goto LABEL_93;
  v185 = 0;
  v186 = a4[9];
  while (2)
  {
    v187 = *(_QWORD *)(a1 + 5704);
    v188 = *(_DWORD *)(a1 + 5728) * v185;
    v189 = (uint64_t *)(v187 + 8 * v188);
    v190 = *(_DWORD *)(a1 + 5624);
    if (v190 && *v189 == -1)
    {
      v191 = 0;
      v234 = 8 * (v190 + v188) - 8 * v188 - 8;
      v235 = v187 + 8 * v188;
      while (v234)
      {
        v189 = (uint64_t *)(v235 + 8);
        ++v191;
        v236 = *(_QWORD *)(v235 + 8);
        v234 -= 8;
        v235 += 8;
        if (v236 != -1)
          goto LABEL_77;
      }
      goto LABEL_73;
    }
    v191 = 0;
LABEL_77:
    v192 = (uint64_t *)(v187 + 8 * (v188 + v190));
    if (v189 == v192)
      goto LABEL_73;
    v193 = *v189;
    v194 = v191;
    v195 = a3[27];
    if (!v10)
    {
LABEL_81:
      v197 = *(_DWORD *)(v195 + 4 * v194);
      v196 = *v186;
      goto LABEL_82;
    }
LABEL_79:
    v196 = *v186;
    v197 = *(_DWORD *)(v195 + 4 * v194);
    if (*v186 >= v197)
    {
LABEL_82:
      v213 = *(_QWORD *)(a1 + 5632) + 8 * v193;
      v214 = *(unsigned int *)(a2 + 16);
      v215 = *(_OWORD *)v213;
      v216 = *(_QWORD *)a2 + 8 * (v197 + (_DWORD)v214 * v196);
      v217 = *(_OWORD *)(v213 + 24);
      v218 = *(_QWORD *)(v213 + 40);
      v219 = *(_OWORD *)(v213 + 48);
      v220 = *(_QWORD *)(v213 + 64);
      v221 = *(_OWORD *)(v213 + 72);
      v222 = *(_QWORD *)(v213 + 88);
      v223 = *(_OWORD *)(v213 + 96);
      v224 = *(_QWORD *)(v213 + 112);
      v225 = *(_OWORD *)(v213 + 120);
      v226 = *(_QWORD *)(v213 + 136);
      *(_QWORD *)(v216 + 16) = *(_QWORD *)(v213 + 16);
      *(_OWORD *)v216 = v215;
      v227 = v216 + 8 * v214;
      *(_QWORD *)(v227 + 16) = v218;
      *(_OWORD *)v227 = v217;
      v228 = v216 + 16 * v214;
      *(_QWORD *)(v228 + 16) = v220;
      *(_OWORD *)v228 = v219;
      v229 = v216 + 24 * v214;
      *(_QWORD *)(v229 + 16) = v222;
      *(_OWORD *)v229 = v221;
      v230 = v216 + 32 * v214;
      *(_QWORD *)(v230 + 16) = v224;
      *(_OWORD *)v230 = v223;
      v231 = v216 + 40 * v214;
      *(_QWORD *)(v231 + 16) = v226;
      *(_OWORD *)v231 = v225;
      goto LABEL_83;
    }
    v198 = *(_QWORD *)(a1 + 5632) + 8 * v193;
    v199 = *(unsigned int *)(a2 + 16);
    v200 = *(_QWORD *)a2 + 8 * (v196 + (_DWORD)v199 * v197);
    *(_QWORD *)&v201 = *(_QWORD *)(v198 + 16);
    v202 = *(int64x2_t *)(v198 + 24);
    *(_QWORD *)&v203 = *(_QWORD *)(v198 + 64);
    v204 = *(int64x2_t *)(v198 + 48);
    v205 = *(int64x2_t *)(v198 + 72);
    *(_QWORD *)&v206 = *(_QWORD *)(v198 + 112);
    v207 = *(int64x2_t *)(v198 + 96);
    v208 = *(int64x2_t *)(v198 + 120);
    v209 = vzip1q_s64(*(int64x2_t *)v198, v202);
    v210 = vzip2q_s64(*(int64x2_t *)v198, v202);
    *((_QWORD *)&v201 + 1) = *(_QWORD *)(v198 + 40);
    *((_QWORD *)&v203 + 1) = *(_QWORD *)(v198 + 88);
    *((_QWORD *)&v206 + 1) = *(_QWORD *)(v198 + 136);
    *(int64x2_t *)(v200 + 16) = vzip1q_s64(v204, v205);
    *(int64x2_t *)(v200 + 32) = vzip1q_s64(v207, v208);
    *(int64x2_t *)v200 = v209;
    v211 = (int64x2_t *)(v200 + 8 * v199);
    v211[1] = vzip1q_s64(vdupq_laneq_s64(v204, 1), vdupq_laneq_s64(v205, 1));
    v211[2] = vzip2q_s64(v207, v208);
    *v211 = v210;
    v212 = (_OWORD *)(v200 + 16 * v199);
    v212[1] = v203;
    v212[2] = v206;
    *v212 = v201;
LABEL_83:
    v232 = v189 + 1;
    while (v232 != v192)
    {
      ++v191;
      v233 = *v232++;
      v193 = v233;
      if (v233 != -1)
      {
        v189 = v232 - 1;
        v194 = v191;
        v195 = a3[27];
        if (v10)
          goto LABEL_79;
        goto LABEL_81;
      }
    }
    v184 = *(_DWORD *)(a1 + 5628);
LABEL_73:
    ++v185;
    ++v186;
    if (v185 < v184)
      continue;
    break;
  }
  v10 = *a5;
LABEL_93:
  v237 = *(_DWORD *)(a1 + 7068);
  if (!v237)
    goto LABEL_116;
  v238 = 0;
  v239 = a4[12];
  while (2)
  {
    v240 = *(_QWORD *)(a1 + 7144);
    v241 = *(_DWORD *)(a1 + 7168) * v238;
    v242 = (uint64_t *)(v240 + 8 * v241);
    v243 = *(_DWORD *)(a1 + 7064);
    if (v243 && *v242 == -1)
    {
      v244 = 0;
      v270 = 8 * (v243 + v241) - 8 * v241 - 8;
      v271 = v240 + 8 * v241;
      while (v270)
      {
        v242 = (uint64_t *)(v271 + 8);
        ++v244;
        v272 = *(_QWORD *)(v271 + 8);
        v270 -= 8;
        v271 += 8;
        if (v272 != -1)
          goto LABEL_100;
      }
      goto LABEL_96;
    }
    v244 = 0;
LABEL_100:
    v245 = (uint64_t *)(v240 + 8 * (v241 + v243));
    if (v242 == v245)
      goto LABEL_96;
    v246 = *v242;
    v247 = v244;
    v248 = a3[27];
    if (!v10)
    {
LABEL_104:
      v250 = *(_DWORD *)(v248 + 4 * v247);
      v249 = *v239;
      goto LABEL_105;
    }
LABEL_102:
    v249 = *v239;
    v250 = *(_DWORD *)(v248 + 4 * v247);
    if (*v239 >= v250)
    {
LABEL_105:
      v262 = *(_QWORD *)(a1 + 7072) + 8 * v246;
      v252 = *(unsigned int *)(a2 + 16);
      v253 = *(_QWORD *)a2 + 8 * (v250 + (_DWORD)v252 * v249);
      v263 = *(_OWORD *)v262;
      v264 = *(_OWORD *)(v262 + 24);
      v265 = *(_QWORD *)(v262 + 40);
      v254 = *(int8x16_t *)(v262 + 48);
      v258 = *(_QWORD *)(v262 + 64);
      v255 = vextq_s8(v254, v254, 8uLL).u64[0];
      *(_QWORD *)(v253 + 16) = *(_QWORD *)(v262 + 16);
      *(_OWORD *)v253 = v263;
      v266 = v253 + 8 * v252;
      *(_QWORD *)(v266 + 16) = v265;
      *(_OWORD *)v266 = v264;
      goto LABEL_106;
    }
    v251 = *(_QWORD *)(a1 + 7072) + 8 * v246;
    v252 = *(unsigned int *)(a2 + 16);
    v253 = *(_QWORD *)a2 + 8 * (v249 + (_DWORD)v252 * v250);
    v254.i64[0] = *(_QWORD *)(v251 + 16);
    v255 = *(_QWORD *)(v251 + 40);
    v256 = *(int64x2_t *)(v251 + 24);
    v257 = *(_OWORD *)(v251 + 48);
    v258 = *(_QWORD *)(v251 + 64);
    v259 = vzip1q_s64(*(int64x2_t *)v251, v256);
    v260 = vzip2q_s64(*(int64x2_t *)v251, v256);
    *(_QWORD *)(v253 + 16) = v257;
    *(int64x2_t *)v253 = v259;
    v261 = (int64x2_t *)(v253 + 8 * v252);
    *v261 = v260;
    v261[1].i64[0] = *((_QWORD *)&v257 + 1);
LABEL_106:
    v267 = (int8x16_t *)(v253 + 16 * v252);
    v267[1].i64[0] = v258;
    v254.i64[1] = v255;
    *v267 = v254;
    v268 = v242 + 1;
    while (v268 != v245)
    {
      ++v244;
      v269 = *v268++;
      v246 = v269;
      if (v269 != -1)
      {
        v242 = v268 - 1;
        v247 = v244;
        v248 = a3[27];
        if (v10)
          goto LABEL_102;
        goto LABEL_104;
      }
    }
    v237 = *(_DWORD *)(a1 + 7068);
LABEL_96:
    ++v238;
    ++v239;
    if (v238 < v237)
      continue;
    break;
  }
  v10 = *a5;
LABEL_116:
  v273 = *(_DWORD *)(a1 + 8508);
  if (!v273)
    goto LABEL_139;
  v274 = 0;
  v275 = a4[15];
  while (2)
  {
    v276 = *(_QWORD *)(a1 + 8584);
    v277 = *(_DWORD *)(a1 + 8608) * v274;
    v278 = (uint64_t *)(v276 + 8 * v277);
    v279 = *(_DWORD *)(a1 + 8504);
    if (v279 && *v278 == -1)
    {
      v280 = 0;
      v297 = 8 * (v279 + v277) - 8 * v277 - 8;
      v298 = v276 + 8 * v277;
      while (v297)
      {
        v278 = (uint64_t *)(v298 + 8);
        ++v280;
        v299 = *(_QWORD *)(v298 + 8);
        v297 -= 8;
        v298 += 8;
        if (v299 != -1)
          goto LABEL_123;
      }
      goto LABEL_119;
    }
    v280 = 0;
LABEL_123:
    v281 = (uint64_t *)(v276 + 8 * (v277 + v279));
    if (v278 == v281)
      goto LABEL_119;
    v282 = *v278;
    v283 = v280;
    v284 = a3[27];
    if (!v10)
    {
LABEL_127:
      v286 = *(_DWORD *)(v284 + 4 * v283);
      v285 = *v275;
      goto LABEL_128;
    }
LABEL_125:
    v285 = *v275;
    v286 = *(_DWORD *)(v284 + 4 * v283);
    if (*v275 >= v286)
    {
LABEL_128:
      v292 = *(_QWORD *)(a1 + 8512) + 8 * v282;
      v293 = *(_QWORD *)a2 + 8 * (v286 + *(_DWORD *)(a2 + 16) * v285);
      v294 = *(_OWORD *)v292;
      *(_QWORD *)(v293 + 16) = *(_QWORD *)(v292 + 16);
      *(_OWORD *)v293 = v294;
      goto LABEL_129;
    }
    v287 = (int8x16_t *)(*(_QWORD *)(a1 + 8512) + 8 * v282);
    v288 = *(unsigned int *)(a2 + 16);
    v289 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v285 + (_DWORD)v288 * v286));
    v290 = v287[1].i64[0];
    v291 = vextq_s8(*v287, *v287, 8uLL).u64[0];
    *v289 = v287->i64[0];
    v289[v288] = v291;
    v289[2 * v288] = v290;
LABEL_129:
    v295 = v278 + 1;
    while (v295 != v281)
    {
      ++v280;
      v296 = *v295++;
      v282 = v296;
      if (v296 != -1)
      {
        v278 = v295 - 1;
        v283 = v280;
        v284 = a3[27];
        if (v10)
          goto LABEL_125;
        goto LABEL_127;
      }
    }
    v273 = *(_DWORD *)(a1 + 8508);
LABEL_119:
    ++v274;
    ++v275;
    if (v274 < v273)
      continue;
    break;
  }
  v10 = *a5;
LABEL_139:
  v300 = *(_DWORD *)(a1 + 9948);
  if (!v300)
    goto LABEL_162;
  v301 = 0;
  v302 = a4[18];
  while (2)
  {
    v303 = *(_QWORD *)(a1 + 10024);
    v304 = *(_DWORD *)(a1 + 10048) * v301;
    v305 = (uint64_t *)(v303 + 8 * v304);
    v306 = *(_DWORD *)(a1 + 9944);
    if (v306 && *v305 == -1)
    {
      v307 = 0;
      v341 = 8 * (v306 + v304) - 8 * v304 - 8;
      v342 = v303 + 8 * v304;
      while (v341)
      {
        v305 = (uint64_t *)(v342 + 8);
        ++v307;
        v343 = *(_QWORD *)(v342 + 8);
        v341 -= 8;
        v342 += 8;
        if (v343 != -1)
          goto LABEL_146;
      }
      goto LABEL_142;
    }
    v307 = 0;
LABEL_146:
    v308 = (uint64_t *)(v303 + 8 * (v304 + v306));
    if (v305 == v308)
      goto LABEL_142;
    v309 = *v305;
    v310 = v307;
    v311 = a3[27];
    if (!v10)
    {
LABEL_150:
      v313 = *(_DWORD *)(v311 + 4 * v310);
      v312 = *v302;
      goto LABEL_151;
    }
LABEL_148:
    v312 = *v302;
    v313 = *(_DWORD *)(v311 + 4 * v310);
    if (*v302 >= v313)
    {
LABEL_151:
      v326 = *(_QWORD *)(a1 + 9952) + 8 * v309;
      v327 = *(unsigned int *)(a2 + 16);
      v328 = *(_OWORD *)v326;
      v329 = *(_QWORD *)a2 + 8 * (v313 + (_DWORD)v327 * v312);
      v330 = *(_OWORD *)(v326 + 24);
      v331 = *(_QWORD *)(v326 + 40);
      v332 = *(_OWORD *)(v326 + 48);
      v333 = *(_QWORD *)(v326 + 64);
      v334 = *(_OWORD *)(v326 + 72);
      v335 = *(_QWORD *)(v326 + 88);
      *(_QWORD *)(v329 + 16) = *(_QWORD *)(v326 + 16);
      *(_OWORD *)v329 = v328;
      v336 = v329 + 8 * v327;
      *(_QWORD *)(v336 + 16) = v331;
      *(_OWORD *)v336 = v330;
      v337 = v329 + 16 * v327;
      *(_QWORD *)(v337 + 16) = v333;
      *(_OWORD *)v337 = v332;
      v338 = v329 + 24 * v327;
      *(_QWORD *)(v338 + 16) = v335;
      *(_OWORD *)v338 = v334;
      goto LABEL_152;
    }
    v314 = *(_QWORD *)(a1 + 9952) + 8 * v309;
    v315 = *(unsigned int *)(a2 + 16);
    v316 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v312 + (_DWORD)v315 * v313));
    v317.i64[0] = *(_QWORD *)(v314 + 16);
    v318 = *(int64x2_t *)(v314 + 24);
    v319.i64[0] = *(_QWORD *)(v314 + 64);
    v320 = *(int64x2_t *)(v314 + 48);
    v321 = vzip1q_s64(*(int64x2_t *)v314, v318);
    v322 = vzip1q_s64(v320, *(int64x2_t *)(v314 + 72));
    v323 = vzip2q_s64(*(int64x2_t *)v314, v318);
    v318.i64[0] = vdupq_laneq_s64(v320, 1).u64[0];
    v318.i64[1] = *(_QWORD *)(v314 + 80);
    v317.i64[1] = *(_QWORD *)(v314 + 40);
    v319.i64[1] = *(_QWORD *)(v314 + 88);
    *v316 = v321;
    v316[1] = v322;
    v324 = (int64x2_t *)((char *)v316 + 8 * v315);
    *v324 = v323;
    v324[1] = v318;
    v325 = &v316[v315];
    *v325 = v317;
    v325[1] = v319;
LABEL_152:
    v339 = v305 + 1;
    while (v339 != v308)
    {
      ++v307;
      v340 = *v339++;
      v309 = v340;
      if (v340 != -1)
      {
        v305 = v339 - 1;
        v310 = v307;
        v311 = a3[27];
        if (v10)
          goto LABEL_148;
        goto LABEL_150;
      }
    }
    v300 = *(_DWORD *)(a1 + 9948);
LABEL_142:
    ++v301;
    ++v302;
    if (v301 < v300)
      continue;
    break;
  }
  v10 = *a5;
LABEL_162:
  v344 = *(_DWORD *)(a1 + 11388);
  if (!v344)
    goto LABEL_185;
  v345 = 0;
  v346 = a4[21];
  while (2)
  {
    v347 = *(_QWORD *)(a1 + 11464);
    v348 = *(_DWORD *)(a1 + 11488) * v345;
    v349 = (uint64_t *)(v347 + 8 * v348);
    v350 = *(_DWORD *)(a1 + 11384);
    if (v350 && *v349 == -1)
    {
      v351 = 0;
      v385 = 8 * (v350 + v348) - 8 * v348 - 8;
      v386 = v347 + 8 * v348;
      while (v385)
      {
        v349 = (uint64_t *)(v386 + 8);
        ++v351;
        v387 = *(_QWORD *)(v386 + 8);
        v385 -= 8;
        v386 += 8;
        if (v387 != -1)
          goto LABEL_169;
      }
      goto LABEL_165;
    }
    v351 = 0;
LABEL_169:
    v352 = (uint64_t *)(v347 + 8 * (v348 + v350));
    if (v349 == v352)
      goto LABEL_165;
    v353 = *v349;
    v354 = v351;
    v355 = a3[27];
    if (!v10)
    {
LABEL_173:
      v357 = *(_DWORD *)(v355 + 4 * v354);
      v356 = *v346;
      goto LABEL_174;
    }
LABEL_171:
    v356 = *v346;
    v357 = *(_DWORD *)(v355 + 4 * v354);
    if (*v346 >= v357)
    {
LABEL_174:
      v370 = *(_QWORD *)(a1 + 11392) + 8 * v353;
      v371 = *(unsigned int *)(a2 + 16);
      v372 = *(_OWORD *)v370;
      v373 = *(_QWORD *)a2 + 8 * (v357 + (_DWORD)v371 * v356);
      v374 = *(_OWORD *)(v370 + 24);
      v375 = *(_QWORD *)(v370 + 40);
      v376 = *(_OWORD *)(v370 + 48);
      v377 = *(_QWORD *)(v370 + 64);
      v378 = *(_OWORD *)(v370 + 72);
      v379 = *(_QWORD *)(v370 + 88);
      *(_QWORD *)(v373 + 16) = *(_QWORD *)(v370 + 16);
      *(_OWORD *)v373 = v372;
      v380 = v373 + 8 * v371;
      *(_QWORD *)(v380 + 16) = v375;
      *(_OWORD *)v380 = v374;
      v381 = v373 + 16 * v371;
      *(_QWORD *)(v381 + 16) = v377;
      *(_OWORD *)v381 = v376;
      v382 = v373 + 24 * v371;
      *(_QWORD *)(v382 + 16) = v379;
      *(_OWORD *)v382 = v378;
      goto LABEL_175;
    }
    v358 = *(_QWORD *)(a1 + 11392) + 8 * v353;
    v359 = *(unsigned int *)(a2 + 16);
    v360 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v356 + (_DWORD)v359 * v357));
    v361.i64[0] = *(_QWORD *)(v358 + 16);
    v362 = *(int64x2_t *)(v358 + 24);
    v363.i64[0] = *(_QWORD *)(v358 + 64);
    v364 = *(int64x2_t *)(v358 + 48);
    v365 = vzip1q_s64(*(int64x2_t *)v358, v362);
    v366 = vzip1q_s64(v364, *(int64x2_t *)(v358 + 72));
    v367 = vzip2q_s64(*(int64x2_t *)v358, v362);
    v362.i64[0] = vdupq_laneq_s64(v364, 1).u64[0];
    v362.i64[1] = *(_QWORD *)(v358 + 80);
    v361.i64[1] = *(_QWORD *)(v358 + 40);
    v363.i64[1] = *(_QWORD *)(v358 + 88);
    *v360 = v365;
    v360[1] = v366;
    v368 = (int64x2_t *)((char *)v360 + 8 * v359);
    *v368 = v367;
    v368[1] = v362;
    v369 = &v360[v359];
    *v369 = v361;
    v369[1] = v363;
LABEL_175:
    v383 = v349 + 1;
    while (v383 != v352)
    {
      ++v351;
      v384 = *v383++;
      v353 = v384;
      if (v384 != -1)
      {
        v349 = v383 - 1;
        v354 = v351;
        v355 = a3[27];
        if (v10)
          goto LABEL_171;
        goto LABEL_173;
      }
    }
    v344 = *(_DWORD *)(a1 + 11388);
LABEL_165:
    ++v345;
    ++v346;
    if (v345 < v344)
      continue;
    break;
  }
  v10 = *a5;
LABEL_185:
  v388 = *(_DWORD *)(a1 + 12828);
  if (!v388)
    goto LABEL_208;
  v389 = 0;
  v390 = a4[24];
  while (2)
  {
    v391 = *(_QWORD *)(a1 + 12904);
    v392 = *(_DWORD *)(a1 + 12928) * v389;
    v393 = (uint64_t *)(v391 + 8 * v392);
    v394 = *(_DWORD *)(a1 + 12824);
    if (v394 && *v393 == -1)
    {
      v395 = 0;
      v421 = 8 * (v394 + v392) - 8 * v392 - 8;
      v422 = v391 + 8 * v392;
      while (v421)
      {
        v393 = (uint64_t *)(v422 + 8);
        ++v395;
        v423 = *(_QWORD *)(v422 + 8);
        v421 -= 8;
        v422 += 8;
        if (v423 != -1)
          goto LABEL_192;
      }
      goto LABEL_188;
    }
    v395 = 0;
LABEL_192:
    v396 = (uint64_t *)(v391 + 8 * (v392 + v394));
    if (v393 == v396)
      goto LABEL_188;
    v397 = *v393;
    v398 = v395;
    v399 = a3[27];
    if (!v10)
    {
LABEL_196:
      v401 = *(_DWORD *)(v399 + 4 * v398);
      v400 = *v390;
      goto LABEL_197;
    }
LABEL_194:
    v400 = *v390;
    v401 = *(_DWORD *)(v399 + 4 * v398);
    if (*v390 >= v401)
    {
LABEL_197:
      v413 = *(_QWORD *)(a1 + 12832) + 8 * v397;
      v403 = *(unsigned int *)(a2 + 16);
      v404 = *(_QWORD *)a2 + 8 * (v401 + (_DWORD)v403 * v400);
      v414 = *(_OWORD *)v413;
      v415 = *(_OWORD *)(v413 + 24);
      v416 = *(_QWORD *)(v413 + 40);
      v405 = *(int8x16_t *)(v413 + 48);
      v409 = *(_QWORD *)(v413 + 64);
      v406 = vextq_s8(v405, v405, 8uLL).u64[0];
      *(_QWORD *)(v404 + 16) = *(_QWORD *)(v413 + 16);
      *(_OWORD *)v404 = v414;
      v417 = v404 + 8 * v403;
      *(_QWORD *)(v417 + 16) = v416;
      *(_OWORD *)v417 = v415;
      goto LABEL_198;
    }
    v402 = *(_QWORD *)(a1 + 12832) + 8 * v397;
    v403 = *(unsigned int *)(a2 + 16);
    v404 = *(_QWORD *)a2 + 8 * (v400 + (_DWORD)v403 * v401);
    v405.i64[0] = *(_QWORD *)(v402 + 16);
    v406 = *(_QWORD *)(v402 + 40);
    v407 = *(int64x2_t *)(v402 + 24);
    v408 = *(_OWORD *)(v402 + 48);
    v409 = *(_QWORD *)(v402 + 64);
    v410 = vzip1q_s64(*(int64x2_t *)v402, v407);
    v411 = vzip2q_s64(*(int64x2_t *)v402, v407);
    *(_QWORD *)(v404 + 16) = v408;
    *(int64x2_t *)v404 = v410;
    v412 = (int64x2_t *)(v404 + 8 * v403);
    *v412 = v411;
    v412[1].i64[0] = *((_QWORD *)&v408 + 1);
LABEL_198:
    v418 = (int8x16_t *)(v404 + 16 * v403);
    v418[1].i64[0] = v409;
    v405.i64[1] = v406;
    *v418 = v405;
    v419 = v393 + 1;
    while (v419 != v396)
    {
      ++v395;
      v420 = *v419++;
      v397 = v420;
      if (v420 != -1)
      {
        v393 = v419 - 1;
        v398 = v395;
        v399 = a3[27];
        if (v10)
          goto LABEL_194;
        goto LABEL_196;
      }
    }
    v388 = *(_DWORD *)(a1 + 12828);
LABEL_188:
    ++v389;
    ++v390;
    if (v389 < v388)
      continue;
    break;
  }
  v10 = *a5;
LABEL_208:
  v424 = *(_DWORD *)(a1 + 14268);
  if (!v424)
    goto LABEL_231;
  v425 = 0;
  v426 = a4[27];
  while (2)
  {
    v427 = *(_QWORD *)(a1 + 14344);
    v428 = *(_DWORD *)(a1 + 14368) * v425;
    v429 = (uint64_t *)(v427 + 8 * v428);
    v430 = *(_DWORD *)(a1 + 14264);
    if (v430 && *v429 == -1)
    {
      v431 = 0;
      v457 = 8 * (v430 + v428) - 8 * v428 - 8;
      v458 = v427 + 8 * v428;
      while (v457)
      {
        v429 = (uint64_t *)(v458 + 8);
        ++v431;
        v459 = *(_QWORD *)(v458 + 8);
        v457 -= 8;
        v458 += 8;
        if (v459 != -1)
          goto LABEL_215;
      }
      goto LABEL_211;
    }
    v431 = 0;
LABEL_215:
    v432 = (uint64_t *)(v427 + 8 * (v428 + v430));
    if (v429 == v432)
      goto LABEL_211;
    v433 = *v429;
    v434 = v431;
    v435 = a3[27];
    if (!v10)
    {
LABEL_219:
      v437 = *(_DWORD *)(v435 + 4 * v434);
      v436 = *v426;
      goto LABEL_220;
    }
LABEL_217:
    v436 = *v426;
    v437 = *(_DWORD *)(v435 + 4 * v434);
    if (*v426 >= v437)
    {
LABEL_220:
      v449 = *(_QWORD *)(a1 + 14272) + 8 * v433;
      v439 = *(unsigned int *)(a2 + 16);
      v440 = *(_QWORD *)a2 + 8 * (v437 + (_DWORD)v439 * v436);
      v450 = *(_OWORD *)v449;
      v451 = *(_OWORD *)(v449 + 24);
      v452 = *(_QWORD *)(v449 + 40);
      v441 = *(int8x16_t *)(v449 + 48);
      v445 = *(_QWORD *)(v449 + 64);
      v442 = vextq_s8(v441, v441, 8uLL).u64[0];
      *(_QWORD *)(v440 + 16) = *(_QWORD *)(v449 + 16);
      *(_OWORD *)v440 = v450;
      v453 = v440 + 8 * v439;
      *(_QWORD *)(v453 + 16) = v452;
      *(_OWORD *)v453 = v451;
      goto LABEL_221;
    }
    v438 = *(_QWORD *)(a1 + 14272) + 8 * v433;
    v439 = *(unsigned int *)(a2 + 16);
    v440 = *(_QWORD *)a2 + 8 * (v436 + (_DWORD)v439 * v437);
    v441.i64[0] = *(_QWORD *)(v438 + 16);
    v442 = *(_QWORD *)(v438 + 40);
    v443 = *(int64x2_t *)(v438 + 24);
    v444 = *(_OWORD *)(v438 + 48);
    v445 = *(_QWORD *)(v438 + 64);
    v446 = vzip1q_s64(*(int64x2_t *)v438, v443);
    v447 = vzip2q_s64(*(int64x2_t *)v438, v443);
    *(_QWORD *)(v440 + 16) = v444;
    *(int64x2_t *)v440 = v446;
    v448 = (int64x2_t *)(v440 + 8 * v439);
    *v448 = v447;
    v448[1].i64[0] = *((_QWORD *)&v444 + 1);
LABEL_221:
    v454 = (int8x16_t *)(v440 + 16 * v439);
    v454[1].i64[0] = v445;
    v441.i64[1] = v442;
    *v454 = v441;
    v455 = v429 + 1;
    while (v455 != v432)
    {
      ++v431;
      v456 = *v455++;
      v433 = v456;
      if (v456 != -1)
      {
        v429 = v455 - 1;
        v434 = v431;
        v435 = a3[27];
        if (v10)
          goto LABEL_217;
        goto LABEL_219;
      }
    }
    v424 = *(_DWORD *)(a1 + 14268);
LABEL_211:
    ++v425;
    ++v426;
    if (v425 < v424)
      continue;
    break;
  }
  v10 = *a5;
LABEL_231:
  v460 = *(_DWORD *)(a1 + 1164);
  if (!v460)
    goto LABEL_254;
  v461 = 0;
  v462 = *a4;
  while (2)
  {
    v463 = *(_QWORD *)(a1 + 1240);
    v464 = *(_DWORD *)(a1 + 1264) * v461;
    v465 = (uint64_t *)(v463 + 8 * v464);
    v466 = *(_DWORD *)(a1 + 1160);
    if (v466 && *v465 == -1)
    {
      v467 = 0;
      v510 = 8 * (v466 + v464) - 8 * v464 - 8;
      v511 = v463 + 8 * v464;
      while (v510)
      {
        v465 = (uint64_t *)(v511 + 8);
        ++v467;
        v512 = *(_QWORD *)(v511 + 8);
        v510 -= 8;
        v511 += 8;
        if (v512 != -1)
          goto LABEL_238;
      }
      goto LABEL_234;
    }
    v467 = 0;
LABEL_238:
    v468 = (uint64_t *)(v463 + 8 * (v464 + v466));
    if (v465 == v468)
      goto LABEL_234;
    v469 = *v465;
    v470 = v467;
    v471 = a3[24];
    if (!v10)
    {
LABEL_242:
      v473 = *(_DWORD *)(v471 + 4 * v470);
      v472 = *v462;
      goto LABEL_243;
    }
LABEL_240:
    v472 = *v462;
    v473 = *(_DWORD *)(v471 + 4 * v470);
    if (*v462 >= v473)
    {
LABEL_243:
      v489 = *(_QWORD *)(a1 + 1168) + 8 * v469;
      v490 = *(unsigned int *)(a2 + 16);
      v491 = *(_OWORD *)v489;
      v492 = *(_QWORD *)a2 + 8 * (v473 + (_DWORD)v490 * v472);
      v493 = *(_OWORD *)(v489 + 24);
      v494 = *(_QWORD *)(v489 + 40);
      v495 = *(_OWORD *)(v489 + 48);
      v496 = *(_QWORD *)(v489 + 64);
      v497 = *(_OWORD *)(v489 + 72);
      v498 = *(_QWORD *)(v489 + 88);
      v499 = *(_OWORD *)(v489 + 96);
      v500 = *(_QWORD *)(v489 + 112);
      v501 = *(_OWORD *)(v489 + 120);
      v502 = *(_QWORD *)(v489 + 136);
      *(_QWORD *)(v492 + 16) = *(_QWORD *)(v489 + 16);
      *(_OWORD *)v492 = v491;
      v503 = v492 + 8 * v490;
      *(_QWORD *)(v503 + 16) = v494;
      *(_OWORD *)v503 = v493;
      v504 = v492 + 16 * v490;
      *(_QWORD *)(v504 + 16) = v496;
      *(_OWORD *)v504 = v495;
      v505 = v492 + 24 * v490;
      *(_QWORD *)(v505 + 16) = v498;
      *(_OWORD *)v505 = v497;
      v506 = v492 + 32 * v490;
      *(_QWORD *)(v506 + 16) = v500;
      *(_OWORD *)v506 = v499;
      v507 = v492 + 40 * v490;
      *(_QWORD *)(v507 + 16) = v502;
      *(_OWORD *)v507 = v501;
      goto LABEL_244;
    }
    v474 = *(_QWORD *)(a1 + 1168) + 8 * v469;
    v475 = *(unsigned int *)(a2 + 16);
    v476 = *(_QWORD *)a2 + 8 * (v472 + (_DWORD)v475 * v473);
    *(_QWORD *)&v477 = *(_QWORD *)(v474 + 16);
    v478 = *(int64x2_t *)(v474 + 24);
    *(_QWORD *)&v479 = *(_QWORD *)(v474 + 64);
    v480 = *(int64x2_t *)(v474 + 48);
    v481 = *(int64x2_t *)(v474 + 72);
    *(_QWORD *)&v482 = *(_QWORD *)(v474 + 112);
    v483 = *(int64x2_t *)(v474 + 96);
    v484 = *(int64x2_t *)(v474 + 120);
    v485 = vzip1q_s64(*(int64x2_t *)v474, v478);
    v486 = vzip2q_s64(*(int64x2_t *)v474, v478);
    *((_QWORD *)&v477 + 1) = *(_QWORD *)(v474 + 40);
    *((_QWORD *)&v479 + 1) = *(_QWORD *)(v474 + 88);
    *((_QWORD *)&v482 + 1) = *(_QWORD *)(v474 + 136);
    *(int64x2_t *)(v476 + 16) = vzip1q_s64(v480, v481);
    *(int64x2_t *)(v476 + 32) = vzip1q_s64(v483, v484);
    *(int64x2_t *)v476 = v485;
    v487 = (int64x2_t *)(v476 + 8 * v475);
    v487[1] = vzip1q_s64(vdupq_laneq_s64(v480, 1), vdupq_laneq_s64(v481, 1));
    v487[2] = vzip2q_s64(v483, v484);
    *v487 = v486;
    v488 = (_OWORD *)(v476 + 16 * v475);
    v488[1] = v479;
    v488[2] = v482;
    *v488 = v477;
LABEL_244:
    v508 = v465 + 1;
    while (v508 != v468)
    {
      ++v467;
      v509 = *v508++;
      v469 = v509;
      if (v509 != -1)
      {
        v465 = v508 - 1;
        v470 = v467;
        v471 = a3[24];
        if (v10)
          goto LABEL_240;
        goto LABEL_242;
      }
    }
    v460 = *(_DWORD *)(a1 + 1164);
LABEL_234:
    ++v461;
    ++v462;
    if (v461 < v460)
      continue;
    break;
  }
  v10 = *a5;
LABEL_254:
  v513 = *(_DWORD *)(a1 + 2604);
  if (!v513)
    goto LABEL_277;
  v514 = 0;
  v515 = a4[3];
  while (2)
  {
    v516 = *(_QWORD *)(a1 + 2680);
    v517 = *(_DWORD *)(a1 + 2704) * v514;
    v518 = (uint64_t *)(v516 + 8 * v517);
    v519 = *(_DWORD *)(a1 + 2600);
    if (v519 && *v518 == -1)
    {
      v520 = 0;
      v577 = 8 * (v519 + v517) - 8 * v517 - 8;
      v578 = v516 + 8 * v517;
      while (v577)
      {
        v518 = (uint64_t *)(v578 + 8);
        ++v520;
        v579 = *(_QWORD *)(v578 + 8);
        v577 -= 8;
        v578 += 8;
        if (v579 != -1)
          goto LABEL_261;
      }
      goto LABEL_257;
    }
    v520 = 0;
LABEL_261:
    v521 = (uint64_t *)(v516 + 8 * (v517 + v519));
    if (v518 == v521)
      goto LABEL_257;
    v522 = *v518;
    v523 = v520;
    v524 = a3[24];
    if (!v10)
    {
LABEL_265:
      v526 = *(_DWORD *)(v524 + 4 * v523);
      v525 = *v515;
      goto LABEL_266;
    }
LABEL_263:
    v525 = *v515;
    v526 = *(_DWORD *)(v524 + 4 * v523);
    if (*v515 >= v526)
    {
LABEL_266:
      v547 = *(_QWORD *)(a1 + 2608) + 8 * v522;
      v548 = *(unsigned int *)(a2 + 16);
      v549 = *(_OWORD *)v547;
      v550 = *(_QWORD *)a2 + 8 * (v526 + (_DWORD)v548 * v525);
      v551 = *(_OWORD *)(v547 + 24);
      v552 = *(_QWORD *)(v547 + 40);
      v553 = *(_OWORD *)(v547 + 48);
      v554 = *(_QWORD *)(v547 + 64);
      v555 = *(_OWORD *)(v547 + 72);
      v556 = *(_QWORD *)(v547 + 88);
      v557 = *(_OWORD *)(v547 + 96);
      v558 = *(_QWORD *)(v547 + 112);
      v559 = *(_OWORD *)(v547 + 120);
      v560 = *(_QWORD *)(v547 + 136);
      v561 = *(_OWORD *)(v547 + 144);
      v562 = *(_QWORD *)(v547 + 160);
      v563 = *(_OWORD *)(v547 + 168);
      v564 = *(_QWORD *)(v547 + 184);
      v565 = *(_OWORD *)(v547 + 192);
      v566 = *(_QWORD *)(v547 + 208);
      *(_QWORD *)(v550 + 16) = *(_QWORD *)(v547 + 16);
      *(_OWORD *)v550 = v549;
      v567 = v550 + 8 * v548;
      *(_QWORD *)(v567 + 16) = v552;
      *(_OWORD *)v567 = v551;
      v568 = v550 + 16 * v548;
      *(_QWORD *)(v568 + 16) = v554;
      *(_OWORD *)v568 = v553;
      v569 = v550 + 24 * v548;
      *(_QWORD *)(v569 + 16) = v556;
      *(_OWORD *)v569 = v555;
      v570 = v550 + 32 * v548;
      *(_QWORD *)(v570 + 16) = v558;
      *(_OWORD *)v570 = v557;
      v571 = v550 + 40 * v548;
      *(_QWORD *)(v571 + 16) = v560;
      *(_OWORD *)v571 = v559;
      v572 = v550 + 48 * v548;
      *(_QWORD *)(v572 + 16) = v562;
      *(_OWORD *)v572 = v561;
      v573 = v550 + 56 * v548;
      *(_QWORD *)(v573 + 16) = v564;
      *(_OWORD *)v573 = v563;
      v574 = v550 + (v548 << 6);
      *(_QWORD *)(v574 + 16) = v566;
      *(_OWORD *)v574 = v565;
      goto LABEL_267;
    }
    v527 = *(unsigned int *)(a2 + 16);
    v528 = *(_QWORD *)(a1 + 2608) + 8 * v522;
    *(_QWORD *)&v529 = *(_QWORD *)(v528 + 16);
    v530 = *(_QWORD *)a2 + 8 * (v525 + (_DWORD)v527 * v526);
    v531 = *(int64x2_t *)(v528 + 24);
    *(_QWORD *)&v532 = *(_QWORD *)(v528 + 64);
    v533 = *(int64x2_t *)(v528 + 48);
    v534 = *(int64x2_t *)(v528 + 72);
    *(_QWORD *)&v535 = *(_QWORD *)(v528 + 112);
    v536 = *(int64x2_t *)(v528 + 96);
    v537 = *(int64x2_t *)(v528 + 120);
    *(_QWORD *)&v538 = *(_QWORD *)(v528 + 160);
    v539 = *(int64x2_t *)(v528 + 144);
    v540 = *(int64x2_t *)(v528 + 168);
    v541 = *(_QWORD *)(v528 + 208);
    v542 = *(_OWORD *)(v528 + 192);
    v543 = vzip1q_s64(*(int64x2_t *)v528, v531);
    v544 = vzip2q_s64(*(int64x2_t *)v528, v531);
    *((_QWORD *)&v529 + 1) = *(_QWORD *)(v528 + 40);
    *((_QWORD *)&v532 + 1) = *(_QWORD *)(v528 + 88);
    *((_QWORD *)&v535 + 1) = *(_QWORD *)(v528 + 136);
    *((_QWORD *)&v538 + 1) = *(_QWORD *)(v528 + 184);
    *(int64x2_t *)(v530 + 32) = vzip1q_s64(v536, v537);
    *(int64x2_t *)(v530 + 48) = vzip1q_s64(v539, v540);
    *(_QWORD *)(v530 + 64) = v542;
    *(int64x2_t *)v530 = v543;
    *(int64x2_t *)(v530 + 16) = vzip1q_s64(v533, v534);
    v545 = (int64x2_t *)(v530 + 8 * v527);
    v545[2] = vzip2q_s64(v536, v537);
    v545[3] = vzip2q_s64(v539, v540);
    *v545 = v544;
    v545[1] = vzip2q_s64(v533, v534);
    v545[4].i64[0] = *((_QWORD *)&v542 + 1);
    v546 = v530 + 16 * v527;
    *(_QWORD *)(v546 + 64) = v541;
    *(_OWORD *)(v546 + 32) = v535;
    *(_OWORD *)(v546 + 48) = v538;
    *(_OWORD *)v546 = v529;
    *(_OWORD *)(v546 + 16) = v532;
LABEL_267:
    v575 = v518 + 1;
    while (v575 != v521)
    {
      ++v520;
      v576 = *v575++;
      v522 = v576;
      if (v576 != -1)
      {
        v518 = v575 - 1;
        v523 = v520;
        v524 = a3[24];
        if (v10)
          goto LABEL_263;
        goto LABEL_265;
      }
    }
    v513 = *(_DWORD *)(a1 + 2604);
LABEL_257:
    ++v514;
    ++v515;
    if (v514 < v513)
      continue;
    break;
  }
  v10 = *a5;
LABEL_277:
  v580 = *(_DWORD *)(a1 + 4044);
  if (!v580)
    goto LABEL_300;
  v581 = 0;
  v582 = a4[6];
  while (2)
  {
    v583 = *(_QWORD *)(a1 + 4120);
    v584 = *(_DWORD *)(a1 + 4144) * v581;
    v585 = (uint64_t *)(v583 + 8 * v584);
    v586 = *(_DWORD *)(a1 + 4040);
    if (v586 && *v585 == -1)
    {
      v587 = 0;
      v630 = 8 * (v586 + v584) - 8 * v584 - 8;
      v631 = v583 + 8 * v584;
      while (v630)
      {
        v585 = (uint64_t *)(v631 + 8);
        ++v587;
        v632 = *(_QWORD *)(v631 + 8);
        v630 -= 8;
        v631 += 8;
        if (v632 != -1)
          goto LABEL_284;
      }
      goto LABEL_280;
    }
    v587 = 0;
LABEL_284:
    v588 = (uint64_t *)(v583 + 8 * (v584 + v586));
    if (v585 == v588)
      goto LABEL_280;
    v589 = *v585;
    v590 = v587;
    v591 = a3[24];
    if (!v10)
    {
LABEL_288:
      v593 = *(_DWORD *)(v591 + 4 * v590);
      v592 = *v582;
      goto LABEL_289;
    }
LABEL_286:
    v592 = *v582;
    v593 = *(_DWORD *)(v591 + 4 * v590);
    if (*v582 >= v593)
    {
LABEL_289:
      v609 = *(_QWORD *)(a1 + 4048) + 8 * v589;
      v610 = *(unsigned int *)(a2 + 16);
      v611 = *(_OWORD *)v609;
      v612 = *(_QWORD *)a2 + 8 * (v593 + (_DWORD)v610 * v592);
      v613 = *(_OWORD *)(v609 + 24);
      v614 = *(_QWORD *)(v609 + 40);
      v615 = *(_OWORD *)(v609 + 48);
      v616 = *(_QWORD *)(v609 + 64);
      v617 = *(_OWORD *)(v609 + 72);
      v618 = *(_QWORD *)(v609 + 88);
      v619 = *(_OWORD *)(v609 + 96);
      v620 = *(_QWORD *)(v609 + 112);
      v621 = *(_OWORD *)(v609 + 120);
      v622 = *(_QWORD *)(v609 + 136);
      *(_QWORD *)(v612 + 16) = *(_QWORD *)(v609 + 16);
      *(_OWORD *)v612 = v611;
      v623 = v612 + 8 * v610;
      *(_QWORD *)(v623 + 16) = v614;
      *(_OWORD *)v623 = v613;
      v624 = v612 + 16 * v610;
      *(_QWORD *)(v624 + 16) = v616;
      *(_OWORD *)v624 = v615;
      v625 = v612 + 24 * v610;
      *(_QWORD *)(v625 + 16) = v618;
      *(_OWORD *)v625 = v617;
      v626 = v612 + 32 * v610;
      *(_QWORD *)(v626 + 16) = v620;
      *(_OWORD *)v626 = v619;
      v627 = v612 + 40 * v610;
      *(_QWORD *)(v627 + 16) = v622;
      *(_OWORD *)v627 = v621;
      goto LABEL_290;
    }
    v594 = *(_QWORD *)(a1 + 4048) + 8 * v589;
    v595 = *(unsigned int *)(a2 + 16);
    v596 = *(_QWORD *)a2 + 8 * (v592 + (_DWORD)v595 * v593);
    *(_QWORD *)&v597 = *(_QWORD *)(v594 + 16);
    v598 = *(int64x2_t *)(v594 + 24);
    *(_QWORD *)&v599 = *(_QWORD *)(v594 + 64);
    v600 = *(int64x2_t *)(v594 + 48);
    v601 = *(int64x2_t *)(v594 + 72);
    *(_QWORD *)&v602 = *(_QWORD *)(v594 + 112);
    v603 = *(int64x2_t *)(v594 + 96);
    v604 = *(int64x2_t *)(v594 + 120);
    v605 = vzip1q_s64(*(int64x2_t *)v594, v598);
    v606 = vzip2q_s64(*(int64x2_t *)v594, v598);
    *((_QWORD *)&v597 + 1) = *(_QWORD *)(v594 + 40);
    *((_QWORD *)&v599 + 1) = *(_QWORD *)(v594 + 88);
    *((_QWORD *)&v602 + 1) = *(_QWORD *)(v594 + 136);
    *(int64x2_t *)(v596 + 16) = vzip1q_s64(v600, v601);
    *(int64x2_t *)(v596 + 32) = vzip1q_s64(v603, v604);
    *(int64x2_t *)v596 = v605;
    v607 = (int64x2_t *)(v596 + 8 * v595);
    v607[1] = vzip1q_s64(vdupq_laneq_s64(v600, 1), vdupq_laneq_s64(v601, 1));
    v607[2] = vzip2q_s64(v603, v604);
    *v607 = v606;
    v608 = (_OWORD *)(v596 + 16 * v595);
    v608[1] = v599;
    v608[2] = v602;
    *v608 = v597;
LABEL_290:
    v628 = v585 + 1;
    while (v628 != v588)
    {
      ++v587;
      v629 = *v628++;
      v589 = v629;
      if (v629 != -1)
      {
        v585 = v628 - 1;
        v590 = v587;
        v591 = a3[24];
        if (v10)
          goto LABEL_286;
        goto LABEL_288;
      }
    }
    v580 = *(_DWORD *)(a1 + 4044);
LABEL_280:
    ++v581;
    ++v582;
    if (v581 < v580)
      continue;
    break;
  }
  v10 = *a5;
LABEL_300:
  v633 = *(_DWORD *)(a1 + 5484);
  if (!v633)
    goto LABEL_323;
  v634 = 0;
  v635 = a4[9];
  while (2)
  {
    v636 = *(_QWORD *)(a1 + 5560);
    v637 = *(_DWORD *)(a1 + 5584) * v634;
    v638 = (uint64_t *)(v636 + 8 * v637);
    v639 = *(_DWORD *)(a1 + 5480);
    if (v639 && *v638 == -1)
    {
      v640 = 0;
      v683 = 8 * (v639 + v637) - 8 * v637 - 8;
      v684 = v636 + 8 * v637;
      while (v683)
      {
        v638 = (uint64_t *)(v684 + 8);
        ++v640;
        v685 = *(_QWORD *)(v684 + 8);
        v683 -= 8;
        v684 += 8;
        if (v685 != -1)
          goto LABEL_307;
      }
      goto LABEL_303;
    }
    v640 = 0;
LABEL_307:
    v641 = (uint64_t *)(v636 + 8 * (v637 + v639));
    if (v638 == v641)
      goto LABEL_303;
    v642 = *v638;
    v643 = v640;
    v644 = a3[24];
    if (!v10)
    {
LABEL_311:
      v646 = *(_DWORD *)(v644 + 4 * v643);
      v645 = *v635;
      goto LABEL_312;
    }
LABEL_309:
    v645 = *v635;
    v646 = *(_DWORD *)(v644 + 4 * v643);
    if (*v635 >= v646)
    {
LABEL_312:
      v662 = *(_QWORD *)(a1 + 5488) + 8 * v642;
      v663 = *(unsigned int *)(a2 + 16);
      v664 = *(_OWORD *)v662;
      v665 = *(_QWORD *)a2 + 8 * (v646 + (_DWORD)v663 * v645);
      v666 = *(_OWORD *)(v662 + 24);
      v667 = *(_QWORD *)(v662 + 40);
      v668 = *(_OWORD *)(v662 + 48);
      v669 = *(_QWORD *)(v662 + 64);
      v670 = *(_OWORD *)(v662 + 72);
      v671 = *(_QWORD *)(v662 + 88);
      v672 = *(_OWORD *)(v662 + 96);
      v673 = *(_QWORD *)(v662 + 112);
      v674 = *(_OWORD *)(v662 + 120);
      v675 = *(_QWORD *)(v662 + 136);
      *(_QWORD *)(v665 + 16) = *(_QWORD *)(v662 + 16);
      *(_OWORD *)v665 = v664;
      v676 = v665 + 8 * v663;
      *(_QWORD *)(v676 + 16) = v667;
      *(_OWORD *)v676 = v666;
      v677 = v665 + 16 * v663;
      *(_QWORD *)(v677 + 16) = v669;
      *(_OWORD *)v677 = v668;
      v678 = v665 + 24 * v663;
      *(_QWORD *)(v678 + 16) = v671;
      *(_OWORD *)v678 = v670;
      v679 = v665 + 32 * v663;
      *(_QWORD *)(v679 + 16) = v673;
      *(_OWORD *)v679 = v672;
      v680 = v665 + 40 * v663;
      *(_QWORD *)(v680 + 16) = v675;
      *(_OWORD *)v680 = v674;
      goto LABEL_313;
    }
    v647 = *(_QWORD *)(a1 + 5488) + 8 * v642;
    v648 = *(unsigned int *)(a2 + 16);
    v649 = *(_QWORD *)a2 + 8 * (v645 + (_DWORD)v648 * v646);
    *(_QWORD *)&v650 = *(_QWORD *)(v647 + 16);
    v651 = *(int64x2_t *)(v647 + 24);
    *(_QWORD *)&v652 = *(_QWORD *)(v647 + 64);
    v653 = *(int64x2_t *)(v647 + 48);
    v654 = *(int64x2_t *)(v647 + 72);
    *(_QWORD *)&v655 = *(_QWORD *)(v647 + 112);
    v656 = *(int64x2_t *)(v647 + 96);
    v657 = *(int64x2_t *)(v647 + 120);
    v658 = vzip1q_s64(*(int64x2_t *)v647, v651);
    v659 = vzip2q_s64(*(int64x2_t *)v647, v651);
    *((_QWORD *)&v650 + 1) = *(_QWORD *)(v647 + 40);
    *((_QWORD *)&v652 + 1) = *(_QWORD *)(v647 + 88);
    *((_QWORD *)&v655 + 1) = *(_QWORD *)(v647 + 136);
    *(int64x2_t *)(v649 + 16) = vzip1q_s64(v653, v654);
    *(int64x2_t *)(v649 + 32) = vzip1q_s64(v656, v657);
    *(int64x2_t *)v649 = v658;
    v660 = (int64x2_t *)(v649 + 8 * v648);
    v660[1] = vzip1q_s64(vdupq_laneq_s64(v653, 1), vdupq_laneq_s64(v654, 1));
    v660[2] = vzip2q_s64(v656, v657);
    *v660 = v659;
    v661 = (_OWORD *)(v649 + 16 * v648);
    v661[1] = v652;
    v661[2] = v655;
    *v661 = v650;
LABEL_313:
    v681 = v638 + 1;
    while (v681 != v641)
    {
      ++v640;
      v682 = *v681++;
      v642 = v682;
      if (v682 != -1)
      {
        v638 = v681 - 1;
        v643 = v640;
        v644 = a3[24];
        if (v10)
          goto LABEL_309;
        goto LABEL_311;
      }
    }
    v633 = *(_DWORD *)(a1 + 5484);
LABEL_303:
    ++v634;
    ++v635;
    if (v634 < v633)
      continue;
    break;
  }
  v10 = *a5;
LABEL_323:
  v686 = *(_DWORD *)(a1 + 6924);
  if (!v686)
    goto LABEL_346;
  v687 = 0;
  v688 = a4[12];
  while (2)
  {
    v689 = *(_QWORD *)(a1 + 7000);
    v690 = *(_DWORD *)(a1 + 7024) * v687;
    v691 = (uint64_t *)(v689 + 8 * v690);
    v692 = *(_DWORD *)(a1 + 6920);
    if (v692 && *v691 == -1)
    {
      v693 = 0;
      v719 = 8 * (v692 + v690) - 8 * v690 - 8;
      v720 = v689 + 8 * v690;
      while (v719)
      {
        v691 = (uint64_t *)(v720 + 8);
        ++v693;
        v721 = *(_QWORD *)(v720 + 8);
        v719 -= 8;
        v720 += 8;
        if (v721 != -1)
          goto LABEL_330;
      }
      goto LABEL_326;
    }
    v693 = 0;
LABEL_330:
    v694 = (uint64_t *)(v689 + 8 * (v690 + v692));
    if (v691 == v694)
      goto LABEL_326;
    v695 = *v691;
    v696 = v693;
    v697 = a3[24];
    if (!v10)
    {
LABEL_334:
      v699 = *(_DWORD *)(v697 + 4 * v696);
      v698 = *v688;
      goto LABEL_335;
    }
LABEL_332:
    v698 = *v688;
    v699 = *(_DWORD *)(v697 + 4 * v696);
    if (*v688 >= v699)
    {
LABEL_335:
      v711 = *(_QWORD *)(a1 + 6928) + 8 * v695;
      v701 = *(unsigned int *)(a2 + 16);
      v702 = *(_QWORD *)a2 + 8 * (v699 + (_DWORD)v701 * v698);
      v712 = *(_OWORD *)v711;
      v713 = *(_OWORD *)(v711 + 24);
      v714 = *(_QWORD *)(v711 + 40);
      v703 = *(int8x16_t *)(v711 + 48);
      v707 = *(_QWORD *)(v711 + 64);
      v704 = vextq_s8(v703, v703, 8uLL).u64[0];
      *(_QWORD *)(v702 + 16) = *(_QWORD *)(v711 + 16);
      *(_OWORD *)v702 = v712;
      v715 = v702 + 8 * v701;
      *(_QWORD *)(v715 + 16) = v714;
      *(_OWORD *)v715 = v713;
      goto LABEL_336;
    }
    v700 = *(_QWORD *)(a1 + 6928) + 8 * v695;
    v701 = *(unsigned int *)(a2 + 16);
    v702 = *(_QWORD *)a2 + 8 * (v698 + (_DWORD)v701 * v699);
    v703.i64[0] = *(_QWORD *)(v700 + 16);
    v704 = *(_QWORD *)(v700 + 40);
    v705 = *(int64x2_t *)(v700 + 24);
    v706 = *(_OWORD *)(v700 + 48);
    v707 = *(_QWORD *)(v700 + 64);
    v708 = vzip1q_s64(*(int64x2_t *)v700, v705);
    v709 = vzip2q_s64(*(int64x2_t *)v700, v705);
    *(_QWORD *)(v702 + 16) = v706;
    *(int64x2_t *)v702 = v708;
    v710 = (int64x2_t *)(v702 + 8 * v701);
    *v710 = v709;
    v710[1].i64[0] = *((_QWORD *)&v706 + 1);
LABEL_336:
    v716 = (int8x16_t *)(v702 + 16 * v701);
    v716[1].i64[0] = v707;
    v703.i64[1] = v704;
    *v716 = v703;
    v717 = v691 + 1;
    while (v717 != v694)
    {
      ++v693;
      v718 = *v717++;
      v695 = v718;
      if (v718 != -1)
      {
        v691 = v717 - 1;
        v696 = v693;
        v697 = a3[24];
        if (v10)
          goto LABEL_332;
        goto LABEL_334;
      }
    }
    v686 = *(_DWORD *)(a1 + 6924);
LABEL_326:
    ++v687;
    ++v688;
    if (v687 < v686)
      continue;
    break;
  }
  v10 = *a5;
LABEL_346:
  v722 = *(_DWORD *)(a1 + 8364);
  if (!v722)
    goto LABEL_369;
  v723 = 0;
  v724 = a4[15];
  while (2)
  {
    v725 = *(_QWORD *)(a1 + 8440);
    v726 = *(_DWORD *)(a1 + 8464) * v723;
    v727 = (uint64_t *)(v725 + 8 * v726);
    v728 = *(_DWORD *)(a1 + 8360);
    if (v728 && *v727 == -1)
    {
      v729 = 0;
      v746 = 8 * (v728 + v726) - 8 * v726 - 8;
      v747 = v725 + 8 * v726;
      while (v746)
      {
        v727 = (uint64_t *)(v747 + 8);
        ++v729;
        v748 = *(_QWORD *)(v747 + 8);
        v746 -= 8;
        v747 += 8;
        if (v748 != -1)
          goto LABEL_353;
      }
      goto LABEL_349;
    }
    v729 = 0;
LABEL_353:
    v730 = (uint64_t *)(v725 + 8 * (v726 + v728));
    if (v727 == v730)
      goto LABEL_349;
    v731 = *v727;
    v732 = v729;
    v733 = a3[24];
    if (!v10)
    {
LABEL_357:
      v735 = *(_DWORD *)(v733 + 4 * v732);
      v734 = *v724;
      goto LABEL_358;
    }
LABEL_355:
    v734 = *v724;
    v735 = *(_DWORD *)(v733 + 4 * v732);
    if (*v724 >= v735)
    {
LABEL_358:
      v741 = *(_QWORD *)(a1 + 8368) + 8 * v731;
      v742 = *(_QWORD *)a2 + 8 * (v735 + *(_DWORD *)(a2 + 16) * v734);
      v743 = *(_OWORD *)v741;
      *(_QWORD *)(v742 + 16) = *(_QWORD *)(v741 + 16);
      *(_OWORD *)v742 = v743;
      goto LABEL_359;
    }
    v736 = (int8x16_t *)(*(_QWORD *)(a1 + 8368) + 8 * v731);
    v737 = *(unsigned int *)(a2 + 16);
    v738 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v734 + (_DWORD)v737 * v735));
    v739 = v736[1].i64[0];
    v740 = vextq_s8(*v736, *v736, 8uLL).u64[0];
    *v738 = v736->i64[0];
    v738[v737] = v740;
    v738[2 * v737] = v739;
LABEL_359:
    v744 = v727 + 1;
    while (v744 != v730)
    {
      ++v729;
      v745 = *v744++;
      v731 = v745;
      if (v745 != -1)
      {
        v727 = v744 - 1;
        v732 = v729;
        v733 = a3[24];
        if (v10)
          goto LABEL_355;
        goto LABEL_357;
      }
    }
    v722 = *(_DWORD *)(a1 + 8364);
LABEL_349:
    ++v723;
    ++v724;
    if (v723 < v722)
      continue;
    break;
  }
  v10 = *a5;
LABEL_369:
  v749 = *(_DWORD *)(a1 + 9804);
  if (!v749)
    goto LABEL_392;
  v750 = 0;
  v751 = a4[18];
  while (2)
  {
    v752 = *(_QWORD *)(a1 + 9880);
    v753 = *(_DWORD *)(a1 + 9904) * v750;
    v754 = (uint64_t *)(v752 + 8 * v753);
    v755 = *(_DWORD *)(a1 + 9800);
    if (v755 && *v754 == -1)
    {
      v756 = 0;
      v790 = 8 * (v755 + v753) - 8 * v753 - 8;
      v791 = v752 + 8 * v753;
      while (v790)
      {
        v754 = (uint64_t *)(v791 + 8);
        ++v756;
        v792 = *(_QWORD *)(v791 + 8);
        v790 -= 8;
        v791 += 8;
        if (v792 != -1)
          goto LABEL_376;
      }
      goto LABEL_372;
    }
    v756 = 0;
LABEL_376:
    v757 = (uint64_t *)(v752 + 8 * (v753 + v755));
    if (v754 == v757)
      goto LABEL_372;
    v758 = *v754;
    v759 = v756;
    v760 = a3[24];
    if (!v10)
    {
LABEL_380:
      v762 = *(_DWORD *)(v760 + 4 * v759);
      v761 = *v751;
      goto LABEL_381;
    }
LABEL_378:
    v761 = *v751;
    v762 = *(_DWORD *)(v760 + 4 * v759);
    if (*v751 >= v762)
    {
LABEL_381:
      v775 = *(_QWORD *)(a1 + 9808) + 8 * v758;
      v776 = *(unsigned int *)(a2 + 16);
      v777 = *(_OWORD *)v775;
      v778 = *(_QWORD *)a2 + 8 * (v762 + (_DWORD)v776 * v761);
      v779 = *(_OWORD *)(v775 + 24);
      v780 = *(_QWORD *)(v775 + 40);
      v781 = *(_OWORD *)(v775 + 48);
      v782 = *(_QWORD *)(v775 + 64);
      v783 = *(_OWORD *)(v775 + 72);
      v784 = *(_QWORD *)(v775 + 88);
      *(_QWORD *)(v778 + 16) = *(_QWORD *)(v775 + 16);
      *(_OWORD *)v778 = v777;
      v785 = v778 + 8 * v776;
      *(_QWORD *)(v785 + 16) = v780;
      *(_OWORD *)v785 = v779;
      v786 = v778 + 16 * v776;
      *(_QWORD *)(v786 + 16) = v782;
      *(_OWORD *)v786 = v781;
      v787 = v778 + 24 * v776;
      *(_QWORD *)(v787 + 16) = v784;
      *(_OWORD *)v787 = v783;
      goto LABEL_382;
    }
    v763 = *(_QWORD *)(a1 + 9808) + 8 * v758;
    v764 = *(unsigned int *)(a2 + 16);
    v765 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v761 + (_DWORD)v764 * v762));
    v766.i64[0] = *(_QWORD *)(v763 + 16);
    v767 = *(int64x2_t *)(v763 + 24);
    v768.i64[0] = *(_QWORD *)(v763 + 64);
    v769 = *(int64x2_t *)(v763 + 48);
    v770 = vzip1q_s64(*(int64x2_t *)v763, v767);
    v771 = vzip1q_s64(v769, *(int64x2_t *)(v763 + 72));
    v772 = vzip2q_s64(*(int64x2_t *)v763, v767);
    v767.i64[0] = vdupq_laneq_s64(v769, 1).u64[0];
    v767.i64[1] = *(_QWORD *)(v763 + 80);
    v766.i64[1] = *(_QWORD *)(v763 + 40);
    v768.i64[1] = *(_QWORD *)(v763 + 88);
    *v765 = v770;
    v765[1] = v771;
    v773 = (int64x2_t *)((char *)v765 + 8 * v764);
    *v773 = v772;
    v773[1] = v767;
    v774 = &v765[v764];
    *v774 = v766;
    v774[1] = v768;
LABEL_382:
    v788 = v754 + 1;
    while (v788 != v757)
    {
      ++v756;
      v789 = *v788++;
      v758 = v789;
      if (v789 != -1)
      {
        v754 = v788 - 1;
        v759 = v756;
        v760 = a3[24];
        if (v10)
          goto LABEL_378;
        goto LABEL_380;
      }
    }
    v749 = *(_DWORD *)(a1 + 9804);
LABEL_372:
    ++v750;
    ++v751;
    if (v750 < v749)
      continue;
    break;
  }
  v10 = *a5;
LABEL_392:
  v793 = *(_DWORD *)(a1 + 11244);
  if (!v793)
    goto LABEL_415;
  v794 = 0;
  v795 = a4[21];
  while (2)
  {
    v796 = *(_QWORD *)(a1 + 11320);
    v797 = *(_DWORD *)(a1 + 11344) * v794;
    v798 = (uint64_t *)(v796 + 8 * v797);
    v799 = *(_DWORD *)(a1 + 11240);
    if (v799 && *v798 == -1)
    {
      v800 = 0;
      v834 = 8 * (v799 + v797) - 8 * v797 - 8;
      v835 = v796 + 8 * v797;
      while (v834)
      {
        v798 = (uint64_t *)(v835 + 8);
        ++v800;
        v836 = *(_QWORD *)(v835 + 8);
        v834 -= 8;
        v835 += 8;
        if (v836 != -1)
          goto LABEL_399;
      }
      goto LABEL_395;
    }
    v800 = 0;
LABEL_399:
    v801 = (uint64_t *)(v796 + 8 * (v797 + v799));
    if (v798 == v801)
      goto LABEL_395;
    v802 = *v798;
    v803 = v800;
    v804 = a3[24];
    if (!v10)
    {
LABEL_403:
      v806 = *(_DWORD *)(v804 + 4 * v803);
      v805 = *v795;
      goto LABEL_404;
    }
LABEL_401:
    v805 = *v795;
    v806 = *(_DWORD *)(v804 + 4 * v803);
    if (*v795 >= v806)
    {
LABEL_404:
      v819 = *(_QWORD *)(a1 + 11248) + 8 * v802;
      v820 = *(unsigned int *)(a2 + 16);
      v821 = *(_OWORD *)v819;
      v822 = *(_QWORD *)a2 + 8 * (v806 + (_DWORD)v820 * v805);
      v823 = *(_OWORD *)(v819 + 24);
      v824 = *(_QWORD *)(v819 + 40);
      v825 = *(_OWORD *)(v819 + 48);
      v826 = *(_QWORD *)(v819 + 64);
      v827 = *(_OWORD *)(v819 + 72);
      v828 = *(_QWORD *)(v819 + 88);
      *(_QWORD *)(v822 + 16) = *(_QWORD *)(v819 + 16);
      *(_OWORD *)v822 = v821;
      v829 = v822 + 8 * v820;
      *(_QWORD *)(v829 + 16) = v824;
      *(_OWORD *)v829 = v823;
      v830 = v822 + 16 * v820;
      *(_QWORD *)(v830 + 16) = v826;
      *(_OWORD *)v830 = v825;
      v831 = v822 + 24 * v820;
      *(_QWORD *)(v831 + 16) = v828;
      *(_OWORD *)v831 = v827;
      goto LABEL_405;
    }
    v807 = *(_QWORD *)(a1 + 11248) + 8 * v802;
    v808 = *(unsigned int *)(a2 + 16);
    v809 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v805 + (_DWORD)v808 * v806));
    v810.i64[0] = *(_QWORD *)(v807 + 16);
    v811 = *(int64x2_t *)(v807 + 24);
    v812.i64[0] = *(_QWORD *)(v807 + 64);
    v813 = *(int64x2_t *)(v807 + 48);
    v814 = vzip1q_s64(*(int64x2_t *)v807, v811);
    v815 = vzip1q_s64(v813, *(int64x2_t *)(v807 + 72));
    v816 = vzip2q_s64(*(int64x2_t *)v807, v811);
    v811.i64[0] = vdupq_laneq_s64(v813, 1).u64[0];
    v811.i64[1] = *(_QWORD *)(v807 + 80);
    v810.i64[1] = *(_QWORD *)(v807 + 40);
    v812.i64[1] = *(_QWORD *)(v807 + 88);
    *v809 = v814;
    v809[1] = v815;
    v817 = (int64x2_t *)((char *)v809 + 8 * v808);
    *v817 = v816;
    v817[1] = v811;
    v818 = &v809[v808];
    *v818 = v810;
    v818[1] = v812;
LABEL_405:
    v832 = v798 + 1;
    while (v832 != v801)
    {
      ++v800;
      v833 = *v832++;
      v802 = v833;
      if (v833 != -1)
      {
        v798 = v832 - 1;
        v803 = v800;
        v804 = a3[24];
        if (v10)
          goto LABEL_401;
        goto LABEL_403;
      }
    }
    v793 = *(_DWORD *)(a1 + 11244);
LABEL_395:
    ++v794;
    ++v795;
    if (v794 < v793)
      continue;
    break;
  }
  v10 = *a5;
LABEL_415:
  v837 = *(_DWORD *)(a1 + 12684);
  if (!v837)
    goto LABEL_438;
  v838 = 0;
  v839 = a4[24];
  while (2)
  {
    v840 = *(_QWORD *)(a1 + 12760);
    v841 = *(_DWORD *)(a1 + 12784) * v838;
    v842 = (uint64_t *)(v840 + 8 * v841);
    v843 = *(_DWORD *)(a1 + 12680);
    if (v843 && *v842 == -1)
    {
      v844 = 0;
      v870 = 8 * (v843 + v841) - 8 * v841 - 8;
      v871 = v840 + 8 * v841;
      while (v870)
      {
        v842 = (uint64_t *)(v871 + 8);
        ++v844;
        v872 = *(_QWORD *)(v871 + 8);
        v870 -= 8;
        v871 += 8;
        if (v872 != -1)
          goto LABEL_422;
      }
      goto LABEL_418;
    }
    v844 = 0;
LABEL_422:
    v845 = (uint64_t *)(v840 + 8 * (v841 + v843));
    if (v842 == v845)
      goto LABEL_418;
    v846 = *v842;
    v847 = v844;
    v848 = a3[24];
    if (!v10)
    {
LABEL_426:
      v850 = *(_DWORD *)(v848 + 4 * v847);
      v849 = *v839;
      goto LABEL_427;
    }
LABEL_424:
    v849 = *v839;
    v850 = *(_DWORD *)(v848 + 4 * v847);
    if (*v839 >= v850)
    {
LABEL_427:
      v862 = *(_QWORD *)(a1 + 12688) + 8 * v846;
      v852 = *(unsigned int *)(a2 + 16);
      v853 = *(_QWORD *)a2 + 8 * (v850 + (_DWORD)v852 * v849);
      v863 = *(_OWORD *)v862;
      v864 = *(_OWORD *)(v862 + 24);
      v865 = *(_QWORD *)(v862 + 40);
      v854 = *(int8x16_t *)(v862 + 48);
      v858 = *(_QWORD *)(v862 + 64);
      v855 = vextq_s8(v854, v854, 8uLL).u64[0];
      *(_QWORD *)(v853 + 16) = *(_QWORD *)(v862 + 16);
      *(_OWORD *)v853 = v863;
      v866 = v853 + 8 * v852;
      *(_QWORD *)(v866 + 16) = v865;
      *(_OWORD *)v866 = v864;
      goto LABEL_428;
    }
    v851 = *(_QWORD *)(a1 + 12688) + 8 * v846;
    v852 = *(unsigned int *)(a2 + 16);
    v853 = *(_QWORD *)a2 + 8 * (v849 + (_DWORD)v852 * v850);
    v854.i64[0] = *(_QWORD *)(v851 + 16);
    v855 = *(_QWORD *)(v851 + 40);
    v856 = *(int64x2_t *)(v851 + 24);
    v857 = *(_OWORD *)(v851 + 48);
    v858 = *(_QWORD *)(v851 + 64);
    v859 = vzip1q_s64(*(int64x2_t *)v851, v856);
    v860 = vzip2q_s64(*(int64x2_t *)v851, v856);
    *(_QWORD *)(v853 + 16) = v857;
    *(int64x2_t *)v853 = v859;
    v861 = (int64x2_t *)(v853 + 8 * v852);
    *v861 = v860;
    v861[1].i64[0] = *((_QWORD *)&v857 + 1);
LABEL_428:
    v867 = (int8x16_t *)(v853 + 16 * v852);
    v867[1].i64[0] = v858;
    v854.i64[1] = v855;
    *v867 = v854;
    v868 = v842 + 1;
    while (v868 != v845)
    {
      ++v844;
      v869 = *v868++;
      v846 = v869;
      if (v869 != -1)
      {
        v842 = v868 - 1;
        v847 = v844;
        v848 = a3[24];
        if (v10)
          goto LABEL_424;
        goto LABEL_426;
      }
    }
    v837 = *(_DWORD *)(a1 + 12684);
LABEL_418:
    ++v838;
    ++v839;
    if (v838 < v837)
      continue;
    break;
  }
  v10 = *a5;
LABEL_438:
  v873 = *(_DWORD *)(a1 + 14124);
  if (!v873)
    goto LABEL_461;
  v874 = 0;
  v875 = a4[27];
  while (2)
  {
    v876 = *(_QWORD *)(a1 + 14200);
    v877 = *(_DWORD *)(a1 + 14224) * v874;
    v878 = (uint64_t *)(v876 + 8 * v877);
    v879 = *(_DWORD *)(a1 + 14120);
    if (v879 && *v878 == -1)
    {
      v880 = 0;
      v906 = 8 * (v879 + v877) - 8 * v877 - 8;
      v907 = v876 + 8 * v877;
      while (v906)
      {
        v878 = (uint64_t *)(v907 + 8);
        ++v880;
        v908 = *(_QWORD *)(v907 + 8);
        v906 -= 8;
        v907 += 8;
        if (v908 != -1)
          goto LABEL_445;
      }
      goto LABEL_441;
    }
    v880 = 0;
LABEL_445:
    v881 = (uint64_t *)(v876 + 8 * (v877 + v879));
    if (v878 == v881)
      goto LABEL_441;
    v882 = *v878;
    v883 = v880;
    v884 = a3[24];
    if (!v10)
    {
LABEL_449:
      v886 = *(_DWORD *)(v884 + 4 * v883);
      v885 = *v875;
      goto LABEL_450;
    }
LABEL_447:
    v885 = *v875;
    v886 = *(_DWORD *)(v884 + 4 * v883);
    if (*v875 >= v886)
    {
LABEL_450:
      v898 = *(_QWORD *)(a1 + 14128) + 8 * v882;
      v888 = *(unsigned int *)(a2 + 16);
      v889 = *(_QWORD *)a2 + 8 * (v886 + (_DWORD)v888 * v885);
      v899 = *(_OWORD *)v898;
      v900 = *(_OWORD *)(v898 + 24);
      v901 = *(_QWORD *)(v898 + 40);
      v890 = *(int8x16_t *)(v898 + 48);
      v894 = *(_QWORD *)(v898 + 64);
      v891 = vextq_s8(v890, v890, 8uLL).u64[0];
      *(_QWORD *)(v889 + 16) = *(_QWORD *)(v898 + 16);
      *(_OWORD *)v889 = v899;
      v902 = v889 + 8 * v888;
      *(_QWORD *)(v902 + 16) = v901;
      *(_OWORD *)v902 = v900;
      goto LABEL_451;
    }
    v887 = *(_QWORD *)(a1 + 14128) + 8 * v882;
    v888 = *(unsigned int *)(a2 + 16);
    v889 = *(_QWORD *)a2 + 8 * (v885 + (_DWORD)v888 * v886);
    v890.i64[0] = *(_QWORD *)(v887 + 16);
    v891 = *(_QWORD *)(v887 + 40);
    v892 = *(int64x2_t *)(v887 + 24);
    v893 = *(_OWORD *)(v887 + 48);
    v894 = *(_QWORD *)(v887 + 64);
    v895 = vzip1q_s64(*(int64x2_t *)v887, v892);
    v896 = vzip2q_s64(*(int64x2_t *)v887, v892);
    *(_QWORD *)(v889 + 16) = v893;
    *(int64x2_t *)v889 = v895;
    v897 = (int64x2_t *)(v889 + 8 * v888);
    *v897 = v896;
    v897[1].i64[0] = *((_QWORD *)&v893 + 1);
LABEL_451:
    v903 = (int8x16_t *)(v889 + 16 * v888);
    v903[1].i64[0] = v894;
    v890.i64[1] = v891;
    *v903 = v890;
    v904 = v878 + 1;
    while (v904 != v881)
    {
      ++v880;
      v905 = *v904++;
      v882 = v905;
      if (v905 != -1)
      {
        v878 = v904 - 1;
        v883 = v880;
        v884 = a3[24];
        if (v10)
          goto LABEL_447;
        goto LABEL_449;
      }
    }
    v873 = *(_DWORD *)(a1 + 14124);
LABEL_441:
    ++v874;
    ++v875;
    if (v874 < v873)
      continue;
    break;
  }
  v10 = *a5;
LABEL_461:
  v909 = *(_DWORD *)(a1 + 1020);
  if (!v909)
    goto LABEL_484;
  v910 = 0;
  v911 = *a4;
  while (2)
  {
    v912 = *(_QWORD *)(a1 + 1096);
    v913 = *(_DWORD *)(a1 + 1120) * v910;
    v914 = (uint64_t *)(v912 + 8 * v913);
    v915 = *(_DWORD *)(a1 + 1016);
    if (v915 && *v914 == -1)
    {
      v916 = 0;
      v965 = 8 * (v915 + v913) - 8 * v913 - 8;
      v966 = v912 + 8 * v913;
      while (v965)
      {
        v914 = (uint64_t *)(v966 + 8);
        ++v916;
        v967 = *(_QWORD *)(v966 + 8);
        v965 -= 8;
        v966 += 8;
        if (v967 != -1)
          goto LABEL_468;
      }
      goto LABEL_464;
    }
    v916 = 0;
LABEL_468:
    v917 = (uint64_t *)(v912 + 8 * (v913 + v915));
    if (v914 == v917)
      goto LABEL_464;
    v918 = *v914;
    v919 = v916;
    v920 = a3[21];
    if (!v10)
    {
LABEL_472:
      v922 = *(_DWORD *)(v920 + 4 * v919);
      v921 = *v911;
      goto LABEL_473;
    }
LABEL_470:
    v921 = *v911;
    v922 = *(_DWORD *)(v920 + 4 * v919);
    if (*v911 >= v922)
    {
LABEL_473:
      v944 = (_OWORD *)(*(_QWORD *)(a1 + 1024) + 8 * v918);
      v945 = *(unsigned int *)(a2 + 16);
      v946 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v922 + (_DWORD)v945 * v921));
      v947 = v944[1];
      v948 = v944[2];
      v949 = v944[3];
      v950 = v944[4];
      v951 = v944[5];
      v952 = v944[6];
      v953 = v944[7];
      v954 = v944[8];
      v955 = v944[9];
      v956 = v944[10];
      v957 = v944[11];
      *v946 = *v944;
      v946[1] = v947;
      v958 = (_OWORD *)((char *)v946 + 8 * v945);
      *v958 = v948;
      v958[1] = v949;
      v959 = &v946[v945];
      *v959 = v950;
      v959[1] = v951;
      v960 = (_OWORD *)((char *)v946 + 24 * v945);
      *v960 = v952;
      v960[1] = v953;
      v961 = &v946[2 * v945];
      *v961 = v954;
      v961[1] = v955;
      v962 = (_OWORD *)((char *)v946 + 40 * v945);
      *v962 = v956;
      v962[1] = v957;
      goto LABEL_474;
    }
    v923 = *(_QWORD *)(a1 + 1024) + 8 * v918;
    v924 = *(unsigned int *)(a2 + 16);
    v925 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v921 + (_DWORD)v924 * v922));
    v926 = *(int64x2_t *)(v923 + 16);
    v928 = *(int64x2_t *)(v923 + 32);
    v927 = *(int64x2_t *)(v923 + 48);
    v930 = *(int64x2_t *)(v923 + 64);
    v929 = *(int64x2_t *)(v923 + 80);
    v932 = *(int64x2_t *)(v923 + 128);
    v931 = *(int64x2_t *)(v923 + 144);
    v933 = vzip1q_s64(*(int64x2_t *)v923, v928);
    v934 = vzip1q_s64(v930, *(int64x2_t *)(v923 + 96));
    v935 = vzip1q_s64(v932, *(int64x2_t *)(v923 + 160));
    v930.i64[0] = vdupq_laneq_s64(v930, 1).u64[0];
    v930.i64[1] = *(_QWORD *)(v923 + 104);
    v936.i64[0] = vdupq_laneq_s64(v932, 1).u64[0];
    v937 = vzip2q_s64(*(int64x2_t *)v923, v928);
    v936.i64[1] = *(_QWORD *)(v923 + 168);
    v938 = vzip1q_s64(v929, *(int64x2_t *)(v923 + 112));
    v939 = vzip1q_s64(v931, *(int64x2_t *)(v923 + 176));
    v929.i64[0] = vdupq_laneq_s64(v929, 1).u64[0];
    v929.i64[1] = *(_QWORD *)(v923 + 120);
    v940.i64[0] = vdupq_laneq_s64(v931, 1).u64[0];
    v940.i64[1] = *(_QWORD *)(v923 + 184);
    v925[1] = v934;
    v925[2] = v935;
    *v925 = v933;
    v941 = (int64x2_t *)((char *)v925 + 8 * v924);
    v941[1] = v930;
    v941[2] = v936;
    *v941 = v937;
    v942 = &v925[v924];
    v942[1] = v938;
    v942[2] = v939;
    *v942 = vzip1q_s64(v926, v927);
    v943 = (int64x2_t *)((char *)v925 + 24 * v924);
    v943[1] = v929;
    v943[2] = v940;
    *v943 = vzip2q_s64(v926, v927);
LABEL_474:
    v963 = v914 + 1;
    while (v963 != v917)
    {
      ++v916;
      v964 = *v963++;
      v918 = v964;
      if (v964 != -1)
      {
        v914 = v963 - 1;
        v919 = v916;
        v920 = a3[21];
        if (v10)
          goto LABEL_470;
        goto LABEL_472;
      }
    }
    v909 = *(_DWORD *)(a1 + 1020);
LABEL_464:
    ++v910;
    ++v911;
    if (v910 < v909)
      continue;
    break;
  }
  v10 = *a5;
LABEL_484:
  v968 = *(_DWORD *)(a1 + 2460);
  if (!v968)
    goto LABEL_507;
  v969 = 0;
  v970 = a4[3];
  while (2)
  {
    v971 = *(_QWORD *)(a1 + 2536);
    v972 = *(_DWORD *)(a1 + 2560) * v969;
    v973 = (uint64_t *)(v971 + 8 * v972);
    v974 = *(_DWORD *)(a1 + 2456);
    if (v974 && *v973 == -1)
    {
      v975 = 0;
      v1038 = 8 * (v974 + v972) - 8 * v972 - 8;
      v1039 = v971 + 8 * v972;
      while (v1038)
      {
        v973 = (uint64_t *)(v1039 + 8);
        ++v975;
        v1040 = *(_QWORD *)(v1039 + 8);
        v1038 -= 8;
        v1039 += 8;
        if (v1040 != -1)
          goto LABEL_491;
      }
      goto LABEL_487;
    }
    v975 = 0;
LABEL_491:
    v976 = (uint64_t *)(v971 + 8 * (v972 + v974));
    if (v973 == v976)
      goto LABEL_487;
    v977 = *v973;
    v978 = v975;
    v979 = a3[21];
    if (!v10)
    {
LABEL_495:
      v981 = *(_DWORD *)(v979 + 4 * v978);
      v980 = *v970;
      goto LABEL_496;
    }
LABEL_493:
    v980 = *v970;
    v981 = *(_DWORD *)(v979 + 4 * v978);
    if (*v970 >= v981)
    {
LABEL_496:
      v1008 = (_OWORD *)(*(_QWORD *)(a1 + 2464) + 8 * v977);
      v1009 = *(unsigned int *)(a2 + 16);
      v1010 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v981 + (_DWORD)v1009 * v980));
      v1011 = v1008[1];
      v1012 = v1008[2];
      v1013 = v1008[3];
      v1014 = v1008[4];
      v1015 = v1008[5];
      v1016 = v1008[6];
      v1017 = v1008[7];
      v1018 = v1008[8];
      v1019 = v1008[9];
      v1020 = v1008[10];
      v1021 = v1008[11];
      v1022 = v1008[12];
      v1023 = v1008[13];
      v1024 = v1008[14];
      v1025 = v1008[15];
      v1026 = v1008[16];
      v1027 = v1008[17];
      *v1010 = *v1008;
      v1010[1] = v1011;
      v1028 = (_OWORD *)((char *)v1010 + 8 * v1009);
      *v1028 = v1012;
      v1028[1] = v1013;
      v1029 = &v1010[v1009];
      *v1029 = v1014;
      v1029[1] = v1015;
      v1030 = (_OWORD *)((char *)v1010 + 24 * v1009);
      *v1030 = v1016;
      v1030[1] = v1017;
      v1031 = &v1010[2 * v1009];
      *v1031 = v1018;
      v1031[1] = v1019;
      v1032 = (_OWORD *)((char *)v1010 + 40 * v1009);
      *v1032 = v1020;
      v1032[1] = v1021;
      v1033 = &v1010[3 * v1009];
      *v1033 = v1022;
      v1033[1] = v1023;
      v1034 = (_OWORD *)((char *)v1010 + 56 * v1009);
      *v1034 = v1024;
      v1034[1] = v1025;
      v1035 = &v1010[4 * v1009];
      *v1035 = v1026;
      v1035[1] = v1027;
      goto LABEL_497;
    }
    v982 = *(_QWORD *)(a1 + 2464) + 8 * v977;
    v983 = *(unsigned int *)(a2 + 16);
    v984 = *(_QWORD *)a2 + 8 * (v980 + (_DWORD)v983 * v981);
    v985 = *(int64x2_t *)(v982 + 16);
    v987 = *(int64x2_t *)(v982 + 32);
    v986 = *(int64x2_t *)(v982 + 48);
    v989 = *(int64x2_t *)(v982 + 64);
    v988 = *(int64x2_t *)(v982 + 80);
    v991 = *(int64x2_t *)(v982 + 128);
    v990 = *(int64x2_t *)(v982 + 144);
    v993 = *(int64x2_t *)(v982 + 192);
    v992 = *(int64x2_t *)(v982 + 208);
    v995 = *(_OWORD *)(v982 + 256);
    v994 = *(_OWORD *)(v982 + 272);
    v996 = vzip1q_s64(*(int64x2_t *)v982, v987);
    v997 = vzip1q_s64(v989, *(int64x2_t *)(v982 + 96));
    v998 = vzip1q_s64(v993, *(int64x2_t *)(v982 + 224));
    v999 = vzip2q_s64(*(int64x2_t *)v982, v987);
    v987.i64[0] = vdupq_laneq_s64(v989, 1).u64[0];
    v987.i64[1] = *(_QWORD *)(v982 + 104);
    v989.i64[0] = vdupq_laneq_s64(v991, 1).u64[0];
    v989.i64[1] = *(_QWORD *)(v982 + 168);
    *(_QWORD *)&v1000 = vdupq_laneq_s64(v993, 1).u64[0];
    *((_QWORD *)&v1000 + 1) = *(_QWORD *)(v982 + 232);
    v1001 = vzip1q_s64(v988, *(int64x2_t *)(v982 + 112));
    v1002 = vzip1q_s64(v990, *(int64x2_t *)(v982 + 176));
    v1003 = vzip1q_s64(v992, *(int64x2_t *)(v982 + 240));
    v988.i64[0] = vdupq_laneq_s64(v988, 1).u64[0];
    v988.i64[1] = *(_QWORD *)(v982 + 120);
    *(_QWORD *)&v1004 = vdupq_laneq_s64(v990, 1).u64[0];
    *((_QWORD *)&v1004 + 1) = *(_QWORD *)(v982 + 184);
    v990.i64[0] = vdupq_laneq_s64(v992, 1).u64[0];
    v990.i64[1] = *(_QWORD *)(v982 + 248);
    *(int64x2_t *)(v984 + 32) = vzip1q_s64(v991, *(int64x2_t *)(v982 + 160));
    *(int64x2_t *)(v984 + 48) = v998;
    *(_QWORD *)(v984 + 64) = v995;
    *(int64x2_t *)v984 = v996;
    *(int64x2_t *)(v984 + 16) = v997;
    v1005 = v984 + 8 * v983;
    *(int64x2_t *)(v1005 + 32) = v989;
    *(_OWORD *)(v1005 + 48) = v1000;
    *(int64x2_t *)v1005 = v999;
    *(int64x2_t *)(v1005 + 16) = v987;
    *(_QWORD *)(v1005 + 64) = *((_QWORD *)&v995 + 1);
    v1006 = (int64x2_t *)(v984 + 16 * v983);
    v1006[4].i64[0] = v994;
    v1006[2] = v1002;
    v1006[3] = v1003;
    *v1006 = vzip1q_s64(v985, v986);
    v1006[1] = v1001;
    v1007 = v984 + 24 * v983;
    *(_QWORD *)(v1007 + 64) = *((_QWORD *)&v994 + 1);
    *(_OWORD *)(v1007 + 32) = v1004;
    *(int64x2_t *)(v1007 + 48) = v990;
    *(int64x2_t *)v1007 = vzip2q_s64(v985, v986);
    *(int64x2_t *)(v1007 + 16) = v988;
LABEL_497:
    v1036 = v973 + 1;
    while (v1036 != v976)
    {
      ++v975;
      v1037 = *v1036++;
      v977 = v1037;
      if (v1037 != -1)
      {
        v973 = v1036 - 1;
        v978 = v975;
        v979 = a3[21];
        if (v10)
          goto LABEL_493;
        goto LABEL_495;
      }
    }
    v968 = *(_DWORD *)(a1 + 2460);
LABEL_487:
    ++v969;
    ++v970;
    if (v969 < v968)
      continue;
    break;
  }
  v10 = *a5;
LABEL_507:
  v1041 = *(_DWORD *)(a1 + 3900);
  if (!v1041)
    goto LABEL_530;
  v1042 = 0;
  v1043 = a4[6];
  while (2)
  {
    v1044 = *(_QWORD *)(a1 + 3976);
    v1045 = *(_DWORD *)(a1 + 4000) * v1042;
    v1046 = (uint64_t *)(v1044 + 8 * v1045);
    v1047 = *(_DWORD *)(a1 + 3896);
    if (v1047 && *v1046 == -1)
    {
      v1048 = 0;
      v1097 = 8 * (v1047 + v1045) - 8 * v1045 - 8;
      v1098 = v1044 + 8 * v1045;
      while (v1097)
      {
        v1046 = (uint64_t *)(v1098 + 8);
        ++v1048;
        v1099 = *(_QWORD *)(v1098 + 8);
        v1097 -= 8;
        v1098 += 8;
        if (v1099 != -1)
          goto LABEL_514;
      }
      goto LABEL_510;
    }
    v1048 = 0;
LABEL_514:
    v1049 = (uint64_t *)(v1044 + 8 * (v1045 + v1047));
    if (v1046 == v1049)
      goto LABEL_510;
    v1050 = *v1046;
    v1051 = v1048;
    v1052 = a3[21];
    if (!v10)
    {
LABEL_518:
      v1054 = *(_DWORD *)(v1052 + 4 * v1051);
      v1053 = *v1043;
      goto LABEL_519;
    }
LABEL_516:
    v1053 = *v1043;
    v1054 = *(_DWORD *)(v1052 + 4 * v1051);
    if (*v1043 >= v1054)
    {
LABEL_519:
      v1076 = (_OWORD *)(*(_QWORD *)(a1 + 3904) + 8 * v1050);
      v1077 = *(unsigned int *)(a2 + 16);
      v1078 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1054 + (_DWORD)v1077 * v1053));
      v1079 = v1076[1];
      v1080 = v1076[2];
      v1081 = v1076[3];
      v1082 = v1076[4];
      v1083 = v1076[5];
      v1084 = v1076[6];
      v1085 = v1076[7];
      v1086 = v1076[8];
      v1087 = v1076[9];
      v1088 = v1076[10];
      v1089 = v1076[11];
      *v1078 = *v1076;
      v1078[1] = v1079;
      v1090 = (_OWORD *)((char *)v1078 + 8 * v1077);
      *v1090 = v1080;
      v1090[1] = v1081;
      v1091 = &v1078[v1077];
      *v1091 = v1082;
      v1091[1] = v1083;
      v1092 = (_OWORD *)((char *)v1078 + 24 * v1077);
      *v1092 = v1084;
      v1092[1] = v1085;
      v1093 = &v1078[2 * v1077];
      *v1093 = v1086;
      v1093[1] = v1087;
      v1094 = (_OWORD *)((char *)v1078 + 40 * v1077);
      *v1094 = v1088;
      v1094[1] = v1089;
      goto LABEL_520;
    }
    v1055 = *(_QWORD *)(a1 + 3904) + 8 * v1050;
    v1056 = *(unsigned int *)(a2 + 16);
    v1057 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1053 + (_DWORD)v1056 * v1054));
    v1058 = *(int64x2_t *)(v1055 + 16);
    v1060 = *(int64x2_t *)(v1055 + 32);
    v1059 = *(int64x2_t *)(v1055 + 48);
    v1062 = *(int64x2_t *)(v1055 + 64);
    v1061 = *(int64x2_t *)(v1055 + 80);
    v1064 = *(int64x2_t *)(v1055 + 128);
    v1063 = *(int64x2_t *)(v1055 + 144);
    v1065 = vzip1q_s64(*(int64x2_t *)v1055, v1060);
    v1066 = vzip1q_s64(v1062, *(int64x2_t *)(v1055 + 96));
    v1067 = vzip1q_s64(v1064, *(int64x2_t *)(v1055 + 160));
    v1062.i64[0] = vdupq_laneq_s64(v1062, 1).u64[0];
    v1062.i64[1] = *(_QWORD *)(v1055 + 104);
    v1068.i64[0] = vdupq_laneq_s64(v1064, 1).u64[0];
    v1069 = vzip2q_s64(*(int64x2_t *)v1055, v1060);
    v1068.i64[1] = *(_QWORD *)(v1055 + 168);
    v1070 = vzip1q_s64(v1061, *(int64x2_t *)(v1055 + 112));
    v1071 = vzip1q_s64(v1063, *(int64x2_t *)(v1055 + 176));
    v1061.i64[0] = vdupq_laneq_s64(v1061, 1).u64[0];
    v1061.i64[1] = *(_QWORD *)(v1055 + 120);
    v1072.i64[0] = vdupq_laneq_s64(v1063, 1).u64[0];
    v1072.i64[1] = *(_QWORD *)(v1055 + 184);
    v1057[1] = v1066;
    v1057[2] = v1067;
    *v1057 = v1065;
    v1073 = (int64x2_t *)((char *)v1057 + 8 * v1056);
    v1073[1] = v1062;
    v1073[2] = v1068;
    *v1073 = v1069;
    v1074 = &v1057[v1056];
    v1074[1] = v1070;
    v1074[2] = v1071;
    *v1074 = vzip1q_s64(v1058, v1059);
    v1075 = (int64x2_t *)((char *)v1057 + 24 * v1056);
    v1075[1] = v1061;
    v1075[2] = v1072;
    *v1075 = vzip2q_s64(v1058, v1059);
LABEL_520:
    v1095 = v1046 + 1;
    while (v1095 != v1049)
    {
      ++v1048;
      v1096 = *v1095++;
      v1050 = v1096;
      if (v1096 != -1)
      {
        v1046 = v1095 - 1;
        v1051 = v1048;
        v1052 = a3[21];
        if (v10)
          goto LABEL_516;
        goto LABEL_518;
      }
    }
    v1041 = *(_DWORD *)(a1 + 3900);
LABEL_510:
    ++v1042;
    ++v1043;
    if (v1042 < v1041)
      continue;
    break;
  }
  v10 = *a5;
LABEL_530:
  v1100 = *(_DWORD *)(a1 + 5340);
  if (!v1100)
    goto LABEL_553;
  v1101 = 0;
  v1102 = a4[9];
  while (2)
  {
    v1103 = *(_QWORD *)(a1 + 5416);
    v1104 = *(_DWORD *)(a1 + 5440) * v1101;
    v1105 = (uint64_t *)(v1103 + 8 * v1104);
    v1106 = *(_DWORD *)(a1 + 5336);
    if (v1106 && *v1105 == -1)
    {
      v1107 = 0;
      v1156 = 8 * (v1106 + v1104) - 8 * v1104 - 8;
      v1157 = v1103 + 8 * v1104;
      while (v1156)
      {
        v1105 = (uint64_t *)(v1157 + 8);
        ++v1107;
        v1158 = *(_QWORD *)(v1157 + 8);
        v1156 -= 8;
        v1157 += 8;
        if (v1158 != -1)
          goto LABEL_537;
      }
      goto LABEL_533;
    }
    v1107 = 0;
LABEL_537:
    v1108 = (uint64_t *)(v1103 + 8 * (v1104 + v1106));
    if (v1105 == v1108)
      goto LABEL_533;
    v1109 = *v1105;
    v1110 = v1107;
    v1111 = a3[21];
    if (!v10)
    {
LABEL_541:
      v1113 = *(_DWORD *)(v1111 + 4 * v1110);
      v1112 = *v1102;
      goto LABEL_542;
    }
LABEL_539:
    v1112 = *v1102;
    v1113 = *(_DWORD *)(v1111 + 4 * v1110);
    if (*v1102 >= v1113)
    {
LABEL_542:
      v1135 = (_OWORD *)(*(_QWORD *)(a1 + 5344) + 8 * v1109);
      v1136 = *(unsigned int *)(a2 + 16);
      v1137 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1113 + (_DWORD)v1136 * v1112));
      v1138 = v1135[1];
      v1139 = v1135[2];
      v1140 = v1135[3];
      v1141 = v1135[4];
      v1142 = v1135[5];
      v1143 = v1135[6];
      v1144 = v1135[7];
      v1145 = v1135[8];
      v1146 = v1135[9];
      v1147 = v1135[10];
      v1148 = v1135[11];
      *v1137 = *v1135;
      v1137[1] = v1138;
      v1149 = (_OWORD *)((char *)v1137 + 8 * v1136);
      *v1149 = v1139;
      v1149[1] = v1140;
      v1150 = &v1137[v1136];
      *v1150 = v1141;
      v1150[1] = v1142;
      v1151 = (_OWORD *)((char *)v1137 + 24 * v1136);
      *v1151 = v1143;
      v1151[1] = v1144;
      v1152 = &v1137[2 * v1136];
      *v1152 = v1145;
      v1152[1] = v1146;
      v1153 = (_OWORD *)((char *)v1137 + 40 * v1136);
      *v1153 = v1147;
      v1153[1] = v1148;
      goto LABEL_543;
    }
    v1114 = *(_QWORD *)(a1 + 5344) + 8 * v1109;
    v1115 = *(unsigned int *)(a2 + 16);
    v1116 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1112 + (_DWORD)v1115 * v1113));
    v1117 = *(int64x2_t *)(v1114 + 16);
    v1119 = *(int64x2_t *)(v1114 + 32);
    v1118 = *(int64x2_t *)(v1114 + 48);
    v1121 = *(int64x2_t *)(v1114 + 64);
    v1120 = *(int64x2_t *)(v1114 + 80);
    v1123 = *(int64x2_t *)(v1114 + 128);
    v1122 = *(int64x2_t *)(v1114 + 144);
    v1124 = vzip1q_s64(*(int64x2_t *)v1114, v1119);
    v1125 = vzip1q_s64(v1121, *(int64x2_t *)(v1114 + 96));
    v1126 = vzip1q_s64(v1123, *(int64x2_t *)(v1114 + 160));
    v1121.i64[0] = vdupq_laneq_s64(v1121, 1).u64[0];
    v1121.i64[1] = *(_QWORD *)(v1114 + 104);
    v1127.i64[0] = vdupq_laneq_s64(v1123, 1).u64[0];
    v1128 = vzip2q_s64(*(int64x2_t *)v1114, v1119);
    v1127.i64[1] = *(_QWORD *)(v1114 + 168);
    v1129 = vzip1q_s64(v1120, *(int64x2_t *)(v1114 + 112));
    v1130 = vzip1q_s64(v1122, *(int64x2_t *)(v1114 + 176));
    v1120.i64[0] = vdupq_laneq_s64(v1120, 1).u64[0];
    v1120.i64[1] = *(_QWORD *)(v1114 + 120);
    v1131.i64[0] = vdupq_laneq_s64(v1122, 1).u64[0];
    v1131.i64[1] = *(_QWORD *)(v1114 + 184);
    v1116[1] = v1125;
    v1116[2] = v1126;
    *v1116 = v1124;
    v1132 = (int64x2_t *)((char *)v1116 + 8 * v1115);
    v1132[1] = v1121;
    v1132[2] = v1127;
    *v1132 = v1128;
    v1133 = &v1116[v1115];
    v1133[1] = v1129;
    v1133[2] = v1130;
    *v1133 = vzip1q_s64(v1117, v1118);
    v1134 = (int64x2_t *)((char *)v1116 + 24 * v1115);
    v1134[1] = v1120;
    v1134[2] = v1131;
    *v1134 = vzip2q_s64(v1117, v1118);
LABEL_543:
    v1154 = v1105 + 1;
    while (v1154 != v1108)
    {
      ++v1107;
      v1155 = *v1154++;
      v1109 = v1155;
      if (v1155 != -1)
      {
        v1105 = v1154 - 1;
        v1110 = v1107;
        v1111 = a3[21];
        if (v10)
          goto LABEL_539;
        goto LABEL_541;
      }
    }
    v1100 = *(_DWORD *)(a1 + 5340);
LABEL_533:
    ++v1101;
    ++v1102;
    if (v1101 < v1100)
      continue;
    break;
  }
  v10 = *a5;
LABEL_553:
  v1159 = *(_DWORD *)(a1 + 6780);
  if (!v1159)
    goto LABEL_576;
  v1160 = 0;
  v1161 = a4[12];
  while (2)
  {
    v1162 = *(_QWORD *)(a1 + 6856);
    v1163 = *(_DWORD *)(a1 + 6880) * v1160;
    v1164 = (uint64_t *)(v1162 + 8 * v1163);
    v1165 = *(_DWORD *)(a1 + 6776);
    if (v1165 && *v1164 == -1)
    {
      v1166 = 0;
      v1198 = 8 * (v1165 + v1163) - 8 * v1163 - 8;
      v1199 = v1162 + 8 * v1163;
      while (v1198)
      {
        v1164 = (uint64_t *)(v1199 + 8);
        ++v1166;
        v1200 = *(_QWORD *)(v1199 + 8);
        v1198 -= 8;
        v1199 += 8;
        if (v1200 != -1)
          goto LABEL_560;
      }
      goto LABEL_556;
    }
    v1166 = 0;
LABEL_560:
    v1167 = (uint64_t *)(v1162 + 8 * (v1163 + v1165));
    if (v1164 == v1167)
      goto LABEL_556;
    v1168 = *v1164;
    v1169 = v1166;
    v1170 = a3[21];
    if (!v10)
    {
LABEL_564:
      v1172 = *(_DWORD *)(v1170 + 4 * v1169);
      v1171 = *v1161;
      goto LABEL_565;
    }
LABEL_562:
    v1171 = *v1161;
    v1172 = *(_DWORD *)(v1170 + 4 * v1169);
    if (*v1161 >= v1172)
    {
LABEL_565:
      v1186 = (_OWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v1168);
      v1187 = *(unsigned int *)(a2 + 16);
      v1188 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1172 + (_DWORD)v1187 * v1171));
      v1189 = v1186[1];
      v1190 = v1186[2];
      v1191 = v1186[3];
      v1192 = v1186[4];
      v1193 = v1186[5];
      *v1188 = *v1186;
      v1188[1] = v1189;
      v1194 = (_OWORD *)((char *)v1188 + 8 * v1187);
      *v1194 = v1190;
      v1194[1] = v1191;
      v1195 = &v1188[v1187];
      *v1195 = v1192;
      v1195[1] = v1193;
      goto LABEL_566;
    }
    v1173 = *(_QWORD *)(a1 + 6784) + 8 * v1168;
    v1174 = *(unsigned int *)(a2 + 16);
    v1175 = *(_QWORD *)a2 + 8 * (v1171 + (_DWORD)v1174 * v1172);
    v1176 = *(int64x2_t *)(v1173 + 16);
    v1178 = *(int64x2_t *)(v1173 + 32);
    v1177 = *(int64x2_t *)(v1173 + 48);
    v1180 = *(_OWORD *)(v1173 + 64);
    v1179 = *(_OWORD *)(v1173 + 80);
    v1181 = vzip1q_s64(*(int64x2_t *)v1173, v1178);
    v1182 = vzip2q_s64(*(int64x2_t *)v1173, v1178);
    *(_QWORD *)(v1175 + 16) = v1180;
    *(int64x2_t *)v1175 = v1181;
    v1183 = (int64x2_t *)(v1175 + 8 * v1174);
    *v1183 = v1182;
    v1183[1].i64[0] = *((_QWORD *)&v1180 + 1);
    v1184 = (int64x2_t *)(v1175 + 16 * v1174);
    v1184[1].i64[0] = v1179;
    *v1184 = vzip1q_s64(v1176, v1177);
    v1185 = (int64x2_t *)(v1175 + 24 * v1174);
    v1185[1].i64[0] = *((_QWORD *)&v1179 + 1);
    *v1185 = vzip2q_s64(v1176, v1177);
LABEL_566:
    v1196 = v1164 + 1;
    while (v1196 != v1167)
    {
      ++v1166;
      v1197 = *v1196++;
      v1168 = v1197;
      if (v1197 != -1)
      {
        v1164 = v1196 - 1;
        v1169 = v1166;
        v1170 = a3[21];
        if (v10)
          goto LABEL_562;
        goto LABEL_564;
      }
    }
    v1159 = *(_DWORD *)(a1 + 6780);
LABEL_556:
    ++v1160;
    ++v1161;
    if (v1160 < v1159)
      continue;
    break;
  }
  v10 = *a5;
LABEL_576:
  v1201 = *(_DWORD *)(a1 + 8220);
  if (!v1201)
    goto LABEL_599;
  v1202 = 0;
  v1203 = a4[15];
  while (2)
  {
    v1204 = *(_QWORD *)(a1 + 8296);
    v1205 = *(_DWORD *)(a1 + 8320) * v1202;
    v1206 = (uint64_t *)(v1204 + 8 * v1205);
    v1207 = *(_DWORD *)(a1 + 8216);
    if (v1207 && *v1206 == -1)
    {
      v1208 = 0;
      v1225 = 8 * (v1207 + v1205) - 8 * v1205 - 8;
      v1226 = v1204 + 8 * v1205;
      while (v1225)
      {
        v1206 = (uint64_t *)(v1226 + 8);
        ++v1208;
        v1227 = *(_QWORD *)(v1226 + 8);
        v1225 -= 8;
        v1226 += 8;
        if (v1227 != -1)
          goto LABEL_583;
      }
      goto LABEL_579;
    }
    v1208 = 0;
LABEL_583:
    v1209 = (uint64_t *)(v1204 + 8 * (v1205 + v1207));
    if (v1206 == v1209)
      goto LABEL_579;
    v1210 = *v1206;
    v1211 = v1208;
    v1212 = a3[21];
    if (!v10)
    {
LABEL_587:
      v1214 = *(_DWORD *)(v1212 + 4 * v1211);
      v1213 = *v1203;
      goto LABEL_588;
    }
LABEL_585:
    v1213 = *v1203;
    v1214 = *(_DWORD *)(v1212 + 4 * v1211);
    if (*v1203 >= v1214)
    {
LABEL_588:
      v1220 = (_OWORD *)(*(_QWORD *)(a1 + 8224) + 8 * v1210);
      v1221 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1214 + *(_DWORD *)(a2 + 16) * v1213));
      v1222 = v1220[1];
      *v1221 = *v1220;
      v1221[1] = v1222;
      goto LABEL_589;
    }
    v1215 = *(_QWORD *)(a1 + 8224) + 8 * v1210;
    v1216 = *(unsigned int *)(a2 + 16);
    v1217 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1213 + (_DWORD)v1216 * v1214));
    v1218 = *(int8x16_t *)(v1215 + 16);
    v1219 = vextq_s8(*(int8x16_t *)v1215, *(int8x16_t *)v1215, 8uLL).u64[0];
    *v1217 = *(_QWORD *)v1215;
    v1217[v1216] = v1219;
    v1217[2 * v1216] = v1218.i64[0];
    v1217[3 * v1216] = vextq_s8(v1218, v1218, 8uLL).u64[0];
LABEL_589:
    v1223 = v1206 + 1;
    while (v1223 != v1209)
    {
      ++v1208;
      v1224 = *v1223++;
      v1210 = v1224;
      if (v1224 != -1)
      {
        v1206 = v1223 - 1;
        v1211 = v1208;
        v1212 = a3[21];
        if (v10)
          goto LABEL_585;
        goto LABEL_587;
      }
    }
    v1201 = *(_DWORD *)(a1 + 8220);
LABEL_579:
    ++v1202;
    ++v1203;
    if (v1202 < v1201)
      continue;
    break;
  }
  v10 = *a5;
LABEL_599:
  v1228 = *(_DWORD *)(a1 + 9660);
  if (!v1228)
    goto LABEL_622;
  v1229 = 0;
  v1230 = a4[18];
  while (2)
  {
    v1231 = *(_QWORD *)(a1 + 9736);
    v1232 = *(_DWORD *)(a1 + 9760) * v1229;
    v1233 = (uint64_t *)(v1231 + 8 * v1232);
    v1234 = *(_DWORD *)(a1 + 9656);
    if (v1234 && *v1233 == -1)
    {
      v1235 = 0;
      v1267 = 8 * (v1234 + v1232) - 8 * v1232 - 8;
      v1268 = v1231 + 8 * v1232;
      while (v1267)
      {
        v1233 = (uint64_t *)(v1268 + 8);
        ++v1235;
        v1269 = *(_QWORD *)(v1268 + 8);
        v1267 -= 8;
        v1268 += 8;
        if (v1269 != -1)
          goto LABEL_606;
      }
      goto LABEL_602;
    }
    v1235 = 0;
LABEL_606:
    v1236 = (uint64_t *)(v1231 + 8 * (v1232 + v1234));
    if (v1233 == v1236)
      goto LABEL_602;
    v1237 = *v1233;
    v1238 = v1235;
    v1239 = a3[21];
    if (!v10)
    {
LABEL_610:
      v1241 = *(_DWORD *)(v1239 + 4 * v1238);
      v1240 = *v1230;
      goto LABEL_611;
    }
LABEL_608:
    v1240 = *v1230;
    v1241 = *(_DWORD *)(v1239 + 4 * v1238);
    if (*v1230 >= v1241)
    {
LABEL_611:
      v1258 = (int64x2_t *)(*(_QWORD *)(a1 + 9664) + 8 * v1237);
      v1243 = *(unsigned int *)(a2 + 16);
      v1244 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1241 + (_DWORD)v1243 * v1240));
      v1259 = v1258[1];
      v1260 = v1258[2];
      v1261 = v1258[3];
      v1253 = v1258[4];
      v1254 = v1258[5];
      v1256 = v1258[6];
      v1255 = v1258[7];
      *v1244 = *v1258;
      v1244[1] = v1259;
      v1262 = &v1244->i8[8 * v1243];
      *(int64x2_t *)v1262 = v1260;
      *((int64x2_t *)v1262 + 1) = v1261;
      goto LABEL_612;
    }
    v1242 = *(_QWORD *)(a1 + 9664) + 8 * v1237;
    v1243 = *(unsigned int *)(a2 + 16);
    v1244 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1240 + (_DWORD)v1243 * v1241));
    v1245 = *(int64x2_t *)(v1242 + 16);
    v1246 = *(int64x2_t *)(v1242 + 32);
    v1247 = *(int64x2_t *)(v1242 + 48);
    v1249 = *(int64x2_t *)(v1242 + 64);
    v1248 = *(int64x2_t *)(v1242 + 80);
    v1250 = vzip1q_s64(*(int64x2_t *)v1242, v1246);
    v1251 = vzip1q_s64(v1249, *(int64x2_t *)(v1242 + 96));
    v1252 = vzip2q_s64(*(int64x2_t *)v1242, v1246);
    v1249.i64[0] = vdupq_laneq_s64(v1249, 1).u64[0];
    v1249.i64[1] = *(_QWORD *)(v1242 + 104);
    v1253 = vzip1q_s64(v1245, v1247);
    v1254 = vzip1q_s64(v1248, *(int64x2_t *)(v1242 + 112));
    v1255.i64[0] = vdupq_laneq_s64(v1248, 1).u64[0];
    v1255.i64[1] = *(_QWORD *)(v1242 + 120);
    v1256 = vzip2q_s64(v1245, v1247);
    *v1244 = v1250;
    v1244[1] = v1251;
    v1257 = (int64x2_t *)((char *)v1244 + 8 * v1243);
    *v1257 = v1252;
    v1257[1] = v1249;
LABEL_612:
    v1263 = &v1244[v1243];
    *v1263 = v1253;
    v1263[1] = v1254;
    v1264 = (int64x2_t *)((char *)v1244 + 24 * v1243);
    *v1264 = v1256;
    v1264[1] = v1255;
    v1265 = v1233 + 1;
    while (v1265 != v1236)
    {
      ++v1235;
      v1266 = *v1265++;
      v1237 = v1266;
      if (v1266 != -1)
      {
        v1233 = v1265 - 1;
        v1238 = v1235;
        v1239 = a3[21];
        if (v10)
          goto LABEL_608;
        goto LABEL_610;
      }
    }
    v1228 = *(_DWORD *)(a1 + 9660);
LABEL_602:
    ++v1229;
    ++v1230;
    if (v1229 < v1228)
      continue;
    break;
  }
  v10 = *a5;
LABEL_622:
  v1270 = *(_DWORD *)(a1 + 11100);
  if (!v1270)
    goto LABEL_645;
  v1271 = 0;
  v1272 = a4[21];
  while (2)
  {
    v1273 = *(_QWORD *)(a1 + 11176);
    v1274 = *(_DWORD *)(a1 + 11200) * v1271;
    v1275 = (uint64_t *)(v1273 + 8 * v1274);
    v1276 = *(_DWORD *)(a1 + 11096);
    if (v1276 && *v1275 == -1)
    {
      v1277 = 0;
      v1309 = 8 * (v1276 + v1274) - 8 * v1274 - 8;
      v1310 = v1273 + 8 * v1274;
      while (v1309)
      {
        v1275 = (uint64_t *)(v1310 + 8);
        ++v1277;
        v1311 = *(_QWORD *)(v1310 + 8);
        v1309 -= 8;
        v1310 += 8;
        if (v1311 != -1)
          goto LABEL_629;
      }
      goto LABEL_625;
    }
    v1277 = 0;
LABEL_629:
    v1278 = (uint64_t *)(v1273 + 8 * (v1274 + v1276));
    if (v1275 == v1278)
      goto LABEL_625;
    v1279 = *v1275;
    v1280 = v1277;
    v1281 = a3[21];
    if (!v10)
    {
LABEL_633:
      v1283 = *(_DWORD *)(v1281 + 4 * v1280);
      v1282 = *v1272;
      goto LABEL_634;
    }
LABEL_631:
    v1282 = *v1272;
    v1283 = *(_DWORD *)(v1281 + 4 * v1280);
    if (*v1272 >= v1283)
    {
LABEL_634:
      v1300 = (int64x2_t *)(*(_QWORD *)(a1 + 11104) + 8 * v1279);
      v1285 = *(unsigned int *)(a2 + 16);
      v1286 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1283 + (_DWORD)v1285 * v1282));
      v1301 = v1300[1];
      v1302 = v1300[2];
      v1303 = v1300[3];
      v1295 = v1300[4];
      v1296 = v1300[5];
      v1298 = v1300[6];
      v1297 = v1300[7];
      *v1286 = *v1300;
      v1286[1] = v1301;
      v1304 = &v1286->i8[8 * v1285];
      *(int64x2_t *)v1304 = v1302;
      *((int64x2_t *)v1304 + 1) = v1303;
      goto LABEL_635;
    }
    v1284 = *(_QWORD *)(a1 + 11104) + 8 * v1279;
    v1285 = *(unsigned int *)(a2 + 16);
    v1286 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1282 + (_DWORD)v1285 * v1283));
    v1287 = *(int64x2_t *)(v1284 + 16);
    v1288 = *(int64x2_t *)(v1284 + 32);
    v1289 = *(int64x2_t *)(v1284 + 48);
    v1291 = *(int64x2_t *)(v1284 + 64);
    v1290 = *(int64x2_t *)(v1284 + 80);
    v1292 = vzip1q_s64(*(int64x2_t *)v1284, v1288);
    v1293 = vzip1q_s64(v1291, *(int64x2_t *)(v1284 + 96));
    v1294 = vzip2q_s64(*(int64x2_t *)v1284, v1288);
    v1291.i64[0] = vdupq_laneq_s64(v1291, 1).u64[0];
    v1291.i64[1] = *(_QWORD *)(v1284 + 104);
    v1295 = vzip1q_s64(v1287, v1289);
    v1296 = vzip1q_s64(v1290, *(int64x2_t *)(v1284 + 112));
    v1297.i64[0] = vdupq_laneq_s64(v1290, 1).u64[0];
    v1297.i64[1] = *(_QWORD *)(v1284 + 120);
    v1298 = vzip2q_s64(v1287, v1289);
    *v1286 = v1292;
    v1286[1] = v1293;
    v1299 = (int64x2_t *)((char *)v1286 + 8 * v1285);
    *v1299 = v1294;
    v1299[1] = v1291;
LABEL_635:
    v1305 = &v1286[v1285];
    *v1305 = v1295;
    v1305[1] = v1296;
    v1306 = (int64x2_t *)((char *)v1286 + 24 * v1285);
    *v1306 = v1298;
    v1306[1] = v1297;
    v1307 = v1275 + 1;
    while (v1307 != v1278)
    {
      ++v1277;
      v1308 = *v1307++;
      v1279 = v1308;
      if (v1308 != -1)
      {
        v1275 = v1307 - 1;
        v1280 = v1277;
        v1281 = a3[21];
        if (v10)
          goto LABEL_631;
        goto LABEL_633;
      }
    }
    v1270 = *(_DWORD *)(a1 + 11100);
LABEL_625:
    ++v1271;
    ++v1272;
    if (v1271 < v1270)
      continue;
    break;
  }
  v10 = *a5;
LABEL_645:
  v1312 = *(_DWORD *)(a1 + 12540);
  if (!v1312)
    goto LABEL_668;
  v1313 = 0;
  v1314 = a4[24];
  while (2)
  {
    v1315 = *(_QWORD *)(a1 + 12616);
    v1316 = *(_DWORD *)(a1 + 12640) * v1313;
    v1317 = (uint64_t *)(v1315 + 8 * v1316);
    v1318 = *(_DWORD *)(a1 + 12536);
    if (v1318 && *v1317 == -1)
    {
      v1319 = 0;
      v1351 = 8 * (v1318 + v1316) - 8 * v1316 - 8;
      v1352 = v1315 + 8 * v1316;
      while (v1351)
      {
        v1317 = (uint64_t *)(v1352 + 8);
        ++v1319;
        v1353 = *(_QWORD *)(v1352 + 8);
        v1351 -= 8;
        v1352 += 8;
        if (v1353 != -1)
          goto LABEL_652;
      }
      goto LABEL_648;
    }
    v1319 = 0;
LABEL_652:
    v1320 = (uint64_t *)(v1315 + 8 * (v1316 + v1318));
    if (v1317 == v1320)
      goto LABEL_648;
    v1321 = *v1317;
    v1322 = v1319;
    v1323 = a3[21];
    if (!v10)
    {
LABEL_656:
      v1325 = *(_DWORD *)(v1323 + 4 * v1322);
      v1324 = *v1314;
      goto LABEL_657;
    }
LABEL_654:
    v1324 = *v1314;
    v1325 = *(_DWORD *)(v1323 + 4 * v1322);
    if (*v1314 >= v1325)
    {
LABEL_657:
      v1339 = (_OWORD *)(*(_QWORD *)(a1 + 12544) + 8 * v1321);
      v1340 = *(unsigned int *)(a2 + 16);
      v1341 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1325 + (_DWORD)v1340 * v1324));
      v1342 = v1339[1];
      v1343 = v1339[2];
      v1344 = v1339[3];
      v1345 = v1339[4];
      v1346 = v1339[5];
      *v1341 = *v1339;
      v1341[1] = v1342;
      v1347 = (_OWORD *)((char *)v1341 + 8 * v1340);
      *v1347 = v1343;
      v1347[1] = v1344;
      v1348 = &v1341[v1340];
      *v1348 = v1345;
      v1348[1] = v1346;
      goto LABEL_658;
    }
    v1326 = *(_QWORD *)(a1 + 12544) + 8 * v1321;
    v1327 = *(unsigned int *)(a2 + 16);
    v1328 = *(_QWORD *)a2 + 8 * (v1324 + (_DWORD)v1327 * v1325);
    v1329 = *(int64x2_t *)(v1326 + 16);
    v1331 = *(int64x2_t *)(v1326 + 32);
    v1330 = *(int64x2_t *)(v1326 + 48);
    v1333 = *(_OWORD *)(v1326 + 64);
    v1332 = *(_OWORD *)(v1326 + 80);
    v1334 = vzip1q_s64(*(int64x2_t *)v1326, v1331);
    v1335 = vzip2q_s64(*(int64x2_t *)v1326, v1331);
    *(_QWORD *)(v1328 + 16) = v1333;
    *(int64x2_t *)v1328 = v1334;
    v1336 = (int64x2_t *)(v1328 + 8 * v1327);
    *v1336 = v1335;
    v1336[1].i64[0] = *((_QWORD *)&v1333 + 1);
    v1337 = (int64x2_t *)(v1328 + 16 * v1327);
    v1337[1].i64[0] = v1332;
    *v1337 = vzip1q_s64(v1329, v1330);
    v1338 = (int64x2_t *)(v1328 + 24 * v1327);
    v1338[1].i64[0] = *((_QWORD *)&v1332 + 1);
    *v1338 = vzip2q_s64(v1329, v1330);
LABEL_658:
    v1349 = v1317 + 1;
    while (v1349 != v1320)
    {
      ++v1319;
      v1350 = *v1349++;
      v1321 = v1350;
      if (v1350 != -1)
      {
        v1317 = v1349 - 1;
        v1322 = v1319;
        v1323 = a3[21];
        if (v10)
          goto LABEL_654;
        goto LABEL_656;
      }
    }
    v1312 = *(_DWORD *)(a1 + 12540);
LABEL_648:
    ++v1313;
    ++v1314;
    if (v1313 < v1312)
      continue;
    break;
  }
  v10 = *a5;
LABEL_668:
  v1354 = *(_DWORD *)(a1 + 13980);
  if (!v1354)
    goto LABEL_691;
  v1355 = 0;
  v1356 = a4[27];
  while (2)
  {
    v1357 = *(_QWORD *)(a1 + 14056);
    v1358 = *(_DWORD *)(a1 + 14080) * v1355;
    v1359 = (uint64_t *)(v1357 + 8 * v1358);
    v1360 = *(_DWORD *)(a1 + 13976);
    if (v1360 && *v1359 == -1)
    {
      v1361 = 0;
      v1393 = 8 * (v1360 + v1358) - 8 * v1358 - 8;
      v1394 = v1357 + 8 * v1358;
      while (v1393)
      {
        v1359 = (uint64_t *)(v1394 + 8);
        ++v1361;
        v1395 = *(_QWORD *)(v1394 + 8);
        v1393 -= 8;
        v1394 += 8;
        if (v1395 != -1)
          goto LABEL_675;
      }
      goto LABEL_671;
    }
    v1361 = 0;
LABEL_675:
    v1362 = (uint64_t *)(v1357 + 8 * (v1358 + v1360));
    if (v1359 == v1362)
      goto LABEL_671;
    v1363 = *v1359;
    v1364 = v1361;
    v1365 = a3[21];
    if (!v10)
    {
LABEL_679:
      v1367 = *(_DWORD *)(v1365 + 4 * v1364);
      v1366 = *v1356;
      goto LABEL_680;
    }
LABEL_677:
    v1366 = *v1356;
    v1367 = *(_DWORD *)(v1365 + 4 * v1364);
    if (*v1356 >= v1367)
    {
LABEL_680:
      v1381 = (_OWORD *)(*(_QWORD *)(a1 + 13984) + 8 * v1363);
      v1382 = *(unsigned int *)(a2 + 16);
      v1383 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1367 + (_DWORD)v1382 * v1366));
      v1384 = v1381[1];
      v1385 = v1381[2];
      v1386 = v1381[3];
      v1387 = v1381[4];
      v1388 = v1381[5];
      *v1383 = *v1381;
      v1383[1] = v1384;
      v1389 = (_OWORD *)((char *)v1383 + 8 * v1382);
      *v1389 = v1385;
      v1389[1] = v1386;
      v1390 = &v1383[v1382];
      *v1390 = v1387;
      v1390[1] = v1388;
      goto LABEL_681;
    }
    v1368 = *(_QWORD *)(a1 + 13984) + 8 * v1363;
    v1369 = *(unsigned int *)(a2 + 16);
    v1370 = *(_QWORD *)a2 + 8 * (v1366 + (_DWORD)v1369 * v1367);
    v1371 = *(int64x2_t *)(v1368 + 16);
    v1373 = *(int64x2_t *)(v1368 + 32);
    v1372 = *(int64x2_t *)(v1368 + 48);
    v1375 = *(_OWORD *)(v1368 + 64);
    v1374 = *(_OWORD *)(v1368 + 80);
    v1376 = vzip1q_s64(*(int64x2_t *)v1368, v1373);
    v1377 = vzip2q_s64(*(int64x2_t *)v1368, v1373);
    *(_QWORD *)(v1370 + 16) = v1375;
    *(int64x2_t *)v1370 = v1376;
    v1378 = (int64x2_t *)(v1370 + 8 * v1369);
    *v1378 = v1377;
    v1378[1].i64[0] = *((_QWORD *)&v1375 + 1);
    v1379 = (int64x2_t *)(v1370 + 16 * v1369);
    v1379[1].i64[0] = v1374;
    *v1379 = vzip1q_s64(v1371, v1372);
    v1380 = (int64x2_t *)(v1370 + 24 * v1369);
    v1380[1].i64[0] = *((_QWORD *)&v1374 + 1);
    *v1380 = vzip2q_s64(v1371, v1372);
LABEL_681:
    v1391 = v1359 + 1;
    while (v1391 != v1362)
    {
      ++v1361;
      v1392 = *v1391++;
      v1363 = v1392;
      if (v1392 != -1)
      {
        v1359 = v1391 - 1;
        v1364 = v1361;
        v1365 = a3[21];
        if (v10)
          goto LABEL_677;
        goto LABEL_679;
      }
    }
    v1354 = *(_DWORD *)(a1 + 13980);
LABEL_671:
    ++v1355;
    ++v1356;
    if (v1355 < v1354)
      continue;
    break;
  }
  v10 = *a5;
LABEL_691:
  v1396 = *(_DWORD *)(a1 + 876);
  if (!v1396)
    goto LABEL_714;
  v1397 = 0;
  v1398 = *a4;
  while (2)
  {
    v1399 = *(_QWORD *)(a1 + 952);
    v1400 = *(_DWORD *)(a1 + 976) * v1397;
    v1401 = (uint64_t *)(v1399 + 8 * v1400);
    v1402 = *(_DWORD *)(a1 + 872);
    if (v1402 && *v1401 == -1)
    {
      v1403 = 0;
      v1452 = 8 * (v1402 + v1400) - 8 * v1400 - 8;
      v1453 = v1399 + 8 * v1400;
      while (v1452)
      {
        v1401 = (uint64_t *)(v1453 + 8);
        ++v1403;
        v1454 = *(_QWORD *)(v1453 + 8);
        v1452 -= 8;
        v1453 += 8;
        if (v1454 != -1)
          goto LABEL_698;
      }
      goto LABEL_694;
    }
    v1403 = 0;
LABEL_698:
    v1404 = (uint64_t *)(v1399 + 8 * (v1400 + v1402));
    if (v1401 == v1404)
      goto LABEL_694;
    v1405 = *v1401;
    v1406 = v1403;
    v1407 = a3[18];
    if (!v10)
    {
LABEL_702:
      v1409 = *(_DWORD *)(v1407 + 4 * v1406);
      v1408 = *v1398;
      goto LABEL_703;
    }
LABEL_700:
    v1408 = *v1398;
    v1409 = *(_DWORD *)(v1407 + 4 * v1406);
    if (*v1398 >= v1409)
    {
LABEL_703:
      v1431 = (_OWORD *)(*(_QWORD *)(a1 + 880) + 8 * v1405);
      v1432 = *(unsigned int *)(a2 + 16);
      v1433 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1409 + (_DWORD)v1432 * v1408));
      v1434 = v1431[1];
      v1435 = v1431[2];
      v1436 = v1431[3];
      v1437 = v1431[4];
      v1438 = v1431[5];
      v1439 = v1431[6];
      v1440 = v1431[7];
      v1441 = v1431[8];
      v1442 = v1431[9];
      v1443 = v1431[10];
      v1444 = v1431[11];
      *v1433 = *v1431;
      v1433[1] = v1434;
      v1445 = (_OWORD *)((char *)v1433 + 8 * v1432);
      *v1445 = v1435;
      v1445[1] = v1436;
      v1446 = &v1433[v1432];
      *v1446 = v1437;
      v1446[1] = v1438;
      v1447 = (_OWORD *)((char *)v1433 + 24 * v1432);
      *v1447 = v1439;
      v1447[1] = v1440;
      v1448 = &v1433[2 * v1432];
      *v1448 = v1441;
      v1448[1] = v1442;
      v1449 = (_OWORD *)((char *)v1433 + 40 * v1432);
      *v1449 = v1443;
      v1449[1] = v1444;
      goto LABEL_704;
    }
    v1410 = *(_QWORD *)(a1 + 880) + 8 * v1405;
    v1411 = *(unsigned int *)(a2 + 16);
    v1412 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1408 + (_DWORD)v1411 * v1409));
    v1413 = *(int64x2_t *)(v1410 + 16);
    v1415 = *(int64x2_t *)(v1410 + 32);
    v1414 = *(int64x2_t *)(v1410 + 48);
    v1417 = *(int64x2_t *)(v1410 + 64);
    v1416 = *(int64x2_t *)(v1410 + 80);
    v1419 = *(int64x2_t *)(v1410 + 128);
    v1418 = *(int64x2_t *)(v1410 + 144);
    v1420 = vzip1q_s64(*(int64x2_t *)v1410, v1415);
    v1421 = vzip1q_s64(v1417, *(int64x2_t *)(v1410 + 96));
    v1422 = vzip1q_s64(v1419, *(int64x2_t *)(v1410 + 160));
    v1417.i64[0] = vdupq_laneq_s64(v1417, 1).u64[0];
    v1417.i64[1] = *(_QWORD *)(v1410 + 104);
    v1423.i64[0] = vdupq_laneq_s64(v1419, 1).u64[0];
    v1424 = vzip2q_s64(*(int64x2_t *)v1410, v1415);
    v1423.i64[1] = *(_QWORD *)(v1410 + 168);
    v1425 = vzip1q_s64(v1416, *(int64x2_t *)(v1410 + 112));
    v1426 = vzip1q_s64(v1418, *(int64x2_t *)(v1410 + 176));
    v1416.i64[0] = vdupq_laneq_s64(v1416, 1).u64[0];
    v1416.i64[1] = *(_QWORD *)(v1410 + 120);
    v1427.i64[0] = vdupq_laneq_s64(v1418, 1).u64[0];
    v1427.i64[1] = *(_QWORD *)(v1410 + 184);
    v1412[1] = v1421;
    v1412[2] = v1422;
    *v1412 = v1420;
    v1428 = (int64x2_t *)((char *)v1412 + 8 * v1411);
    v1428[1] = v1417;
    v1428[2] = v1423;
    *v1428 = v1424;
    v1429 = &v1412[v1411];
    v1429[1] = v1425;
    v1429[2] = v1426;
    *v1429 = vzip1q_s64(v1413, v1414);
    v1430 = (int64x2_t *)((char *)v1412 + 24 * v1411);
    v1430[1] = v1416;
    v1430[2] = v1427;
    *v1430 = vzip2q_s64(v1413, v1414);
LABEL_704:
    v1450 = v1401 + 1;
    while (v1450 != v1404)
    {
      ++v1403;
      v1451 = *v1450++;
      v1405 = v1451;
      if (v1451 != -1)
      {
        v1401 = v1450 - 1;
        v1406 = v1403;
        v1407 = a3[18];
        if (v10)
          goto LABEL_700;
        goto LABEL_702;
      }
    }
    v1396 = *(_DWORD *)(a1 + 876);
LABEL_694:
    ++v1397;
    ++v1398;
    if (v1397 < v1396)
      continue;
    break;
  }
  v10 = *a5;
LABEL_714:
  v1455 = *(_DWORD *)(a1 + 2316);
  if (!v1455)
    goto LABEL_737;
  v1456 = 0;
  v1457 = a4[3];
  while (2)
  {
    v1458 = *(_QWORD *)(a1 + 2392);
    v1459 = *(_DWORD *)(a1 + 2416) * v1456;
    v1460 = (uint64_t *)(v1458 + 8 * v1459);
    v1461 = *(_DWORD *)(a1 + 2312);
    if (v1461 && *v1460 == -1)
    {
      v1462 = 0;
      v1525 = 8 * (v1461 + v1459) - 8 * v1459 - 8;
      v1526 = v1458 + 8 * v1459;
      while (v1525)
      {
        v1460 = (uint64_t *)(v1526 + 8);
        ++v1462;
        v1527 = *(_QWORD *)(v1526 + 8);
        v1525 -= 8;
        v1526 += 8;
        if (v1527 != -1)
          goto LABEL_721;
      }
      goto LABEL_717;
    }
    v1462 = 0;
LABEL_721:
    v1463 = (uint64_t *)(v1458 + 8 * (v1459 + v1461));
    if (v1460 == v1463)
      goto LABEL_717;
    v1464 = *v1460;
    v1465 = v1462;
    v1466 = a3[18];
    if (!v10)
    {
LABEL_725:
      v1468 = *(_DWORD *)(v1466 + 4 * v1465);
      v1467 = *v1457;
      goto LABEL_726;
    }
LABEL_723:
    v1467 = *v1457;
    v1468 = *(_DWORD *)(v1466 + 4 * v1465);
    if (*v1457 >= v1468)
    {
LABEL_726:
      v1495 = (_OWORD *)(*(_QWORD *)(a1 + 2320) + 8 * v1464);
      v1496 = *(unsigned int *)(a2 + 16);
      v1497 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1468 + (_DWORD)v1496 * v1467));
      v1498 = v1495[1];
      v1499 = v1495[2];
      v1500 = v1495[3];
      v1501 = v1495[4];
      v1502 = v1495[5];
      v1503 = v1495[6];
      v1504 = v1495[7];
      v1505 = v1495[8];
      v1506 = v1495[9];
      v1507 = v1495[10];
      v1508 = v1495[11];
      v1509 = v1495[12];
      v1510 = v1495[13];
      v1511 = v1495[14];
      v1512 = v1495[15];
      v1513 = v1495[16];
      v1514 = v1495[17];
      *v1497 = *v1495;
      v1497[1] = v1498;
      v1515 = (_OWORD *)((char *)v1497 + 8 * v1496);
      *v1515 = v1499;
      v1515[1] = v1500;
      v1516 = &v1497[v1496];
      *v1516 = v1501;
      v1516[1] = v1502;
      v1517 = (_OWORD *)((char *)v1497 + 24 * v1496);
      *v1517 = v1503;
      v1517[1] = v1504;
      v1518 = &v1497[2 * v1496];
      *v1518 = v1505;
      v1518[1] = v1506;
      v1519 = (_OWORD *)((char *)v1497 + 40 * v1496);
      *v1519 = v1507;
      v1519[1] = v1508;
      v1520 = &v1497[3 * v1496];
      *v1520 = v1509;
      v1520[1] = v1510;
      v1521 = (_OWORD *)((char *)v1497 + 56 * v1496);
      *v1521 = v1511;
      v1521[1] = v1512;
      v1522 = &v1497[4 * v1496];
      *v1522 = v1513;
      v1522[1] = v1514;
      goto LABEL_727;
    }
    v1469 = *(_QWORD *)(a1 + 2320) + 8 * v1464;
    v1470 = *(unsigned int *)(a2 + 16);
    v1471 = *(_QWORD *)a2 + 8 * (v1467 + (_DWORD)v1470 * v1468);
    v1472 = *(int64x2_t *)(v1469 + 16);
    v1474 = *(int64x2_t *)(v1469 + 32);
    v1473 = *(int64x2_t *)(v1469 + 48);
    v1476 = *(int64x2_t *)(v1469 + 64);
    v1475 = *(int64x2_t *)(v1469 + 80);
    v1478 = *(int64x2_t *)(v1469 + 128);
    v1477 = *(int64x2_t *)(v1469 + 144);
    v1480 = *(int64x2_t *)(v1469 + 192);
    v1479 = *(int64x2_t *)(v1469 + 208);
    v1482 = *(_OWORD *)(v1469 + 256);
    v1481 = *(_OWORD *)(v1469 + 272);
    v1483 = vzip1q_s64(*(int64x2_t *)v1469, v1474);
    v1484 = vzip1q_s64(v1476, *(int64x2_t *)(v1469 + 96));
    v1485 = vzip1q_s64(v1480, *(int64x2_t *)(v1469 + 224));
    v1486 = vzip2q_s64(*(int64x2_t *)v1469, v1474);
    v1474.i64[0] = vdupq_laneq_s64(v1476, 1).u64[0];
    v1474.i64[1] = *(_QWORD *)(v1469 + 104);
    v1476.i64[0] = vdupq_laneq_s64(v1478, 1).u64[0];
    v1476.i64[1] = *(_QWORD *)(v1469 + 168);
    *(_QWORD *)&v1487 = vdupq_laneq_s64(v1480, 1).u64[0];
    *((_QWORD *)&v1487 + 1) = *(_QWORD *)(v1469 + 232);
    v1488 = vzip1q_s64(v1475, *(int64x2_t *)(v1469 + 112));
    v1489 = vzip1q_s64(v1477, *(int64x2_t *)(v1469 + 176));
    v1490 = vzip1q_s64(v1479, *(int64x2_t *)(v1469 + 240));
    v1475.i64[0] = vdupq_laneq_s64(v1475, 1).u64[0];
    v1475.i64[1] = *(_QWORD *)(v1469 + 120);
    *(_QWORD *)&v1491 = vdupq_laneq_s64(v1477, 1).u64[0];
    *((_QWORD *)&v1491 + 1) = *(_QWORD *)(v1469 + 184);
    v1477.i64[0] = vdupq_laneq_s64(v1479, 1).u64[0];
    v1477.i64[1] = *(_QWORD *)(v1469 + 248);
    *(int64x2_t *)(v1471 + 32) = vzip1q_s64(v1478, *(int64x2_t *)(v1469 + 160));
    *(int64x2_t *)(v1471 + 48) = v1485;
    *(_QWORD *)(v1471 + 64) = v1482;
    *(int64x2_t *)v1471 = v1483;
    *(int64x2_t *)(v1471 + 16) = v1484;
    v1492 = v1471 + 8 * v1470;
    *(int64x2_t *)(v1492 + 32) = v1476;
    *(_OWORD *)(v1492 + 48) = v1487;
    *(int64x2_t *)v1492 = v1486;
    *(int64x2_t *)(v1492 + 16) = v1474;
    *(_QWORD *)(v1492 + 64) = *((_QWORD *)&v1482 + 1);
    v1493 = (int64x2_t *)(v1471 + 16 * v1470);
    v1493[4].i64[0] = v1481;
    v1493[2] = v1489;
    v1493[3] = v1490;
    *v1493 = vzip1q_s64(v1472, v1473);
    v1493[1] = v1488;
    v1494 = v1471 + 24 * v1470;
    *(_QWORD *)(v1494 + 64) = *((_QWORD *)&v1481 + 1);
    *(_OWORD *)(v1494 + 32) = v1491;
    *(int64x2_t *)(v1494 + 48) = v1477;
    *(int64x2_t *)v1494 = vzip2q_s64(v1472, v1473);
    *(int64x2_t *)(v1494 + 16) = v1475;
LABEL_727:
    v1523 = v1460 + 1;
    while (v1523 != v1463)
    {
      ++v1462;
      v1524 = *v1523++;
      v1464 = v1524;
      if (v1524 != -1)
      {
        v1460 = v1523 - 1;
        v1465 = v1462;
        v1466 = a3[18];
        if (v10)
          goto LABEL_723;
        goto LABEL_725;
      }
    }
    v1455 = *(_DWORD *)(a1 + 2316);
LABEL_717:
    ++v1456;
    ++v1457;
    if (v1456 < v1455)
      continue;
    break;
  }
  v10 = *a5;
LABEL_737:
  v1528 = *(_DWORD *)(a1 + 3756);
  if (!v1528)
    goto LABEL_760;
  v1529 = 0;
  v1530 = a4[6];
  while (2)
  {
    v1531 = *(_QWORD *)(a1 + 3832);
    v1532 = *(_DWORD *)(a1 + 3856) * v1529;
    v1533 = (uint64_t *)(v1531 + 8 * v1532);
    v1534 = *(_DWORD *)(a1 + 3752);
    if (v1534 && *v1533 == -1)
    {
      v1535 = 0;
      v1584 = 8 * (v1534 + v1532) - 8 * v1532 - 8;
      v1585 = v1531 + 8 * v1532;
      while (v1584)
      {
        v1533 = (uint64_t *)(v1585 + 8);
        ++v1535;
        v1586 = *(_QWORD *)(v1585 + 8);
        v1584 -= 8;
        v1585 += 8;
        if (v1586 != -1)
          goto LABEL_744;
      }
      goto LABEL_740;
    }
    v1535 = 0;
LABEL_744:
    v1536 = (uint64_t *)(v1531 + 8 * (v1532 + v1534));
    if (v1533 == v1536)
      goto LABEL_740;
    v1537 = *v1533;
    v1538 = v1535;
    v1539 = a3[18];
    if (!v10)
    {
LABEL_748:
      v1541 = *(_DWORD *)(v1539 + 4 * v1538);
      v1540 = *v1530;
      goto LABEL_749;
    }
LABEL_746:
    v1540 = *v1530;
    v1541 = *(_DWORD *)(v1539 + 4 * v1538);
    if (*v1530 >= v1541)
    {
LABEL_749:
      v1563 = (_OWORD *)(*(_QWORD *)(a1 + 3760) + 8 * v1537);
      v1564 = *(unsigned int *)(a2 + 16);
      v1565 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1541 + (_DWORD)v1564 * v1540));
      v1566 = v1563[1];
      v1567 = v1563[2];
      v1568 = v1563[3];
      v1569 = v1563[4];
      v1570 = v1563[5];
      v1571 = v1563[6];
      v1572 = v1563[7];
      v1573 = v1563[8];
      v1574 = v1563[9];
      v1575 = v1563[10];
      v1576 = v1563[11];
      *v1565 = *v1563;
      v1565[1] = v1566;
      v1577 = (_OWORD *)((char *)v1565 + 8 * v1564);
      *v1577 = v1567;
      v1577[1] = v1568;
      v1578 = &v1565[v1564];
      *v1578 = v1569;
      v1578[1] = v1570;
      v1579 = (_OWORD *)((char *)v1565 + 24 * v1564);
      *v1579 = v1571;
      v1579[1] = v1572;
      v1580 = &v1565[2 * v1564];
      *v1580 = v1573;
      v1580[1] = v1574;
      v1581 = (_OWORD *)((char *)v1565 + 40 * v1564);
      *v1581 = v1575;
      v1581[1] = v1576;
      goto LABEL_750;
    }
    v1542 = *(_QWORD *)(a1 + 3760) + 8 * v1537;
    v1543 = *(unsigned int *)(a2 + 16);
    v1544 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1540 + (_DWORD)v1543 * v1541));
    v1545 = *(int64x2_t *)(v1542 + 16);
    v1547 = *(int64x2_t *)(v1542 + 32);
    v1546 = *(int64x2_t *)(v1542 + 48);
    v1549 = *(int64x2_t *)(v1542 + 64);
    v1548 = *(int64x2_t *)(v1542 + 80);
    v1551 = *(int64x2_t *)(v1542 + 128);
    v1550 = *(int64x2_t *)(v1542 + 144);
    v1552 = vzip1q_s64(*(int64x2_t *)v1542, v1547);
    v1553 = vzip1q_s64(v1549, *(int64x2_t *)(v1542 + 96));
    v1554 = vzip1q_s64(v1551, *(int64x2_t *)(v1542 + 160));
    v1549.i64[0] = vdupq_laneq_s64(v1549, 1).u64[0];
    v1549.i64[1] = *(_QWORD *)(v1542 + 104);
    v1555.i64[0] = vdupq_laneq_s64(v1551, 1).u64[0];
    v1556 = vzip2q_s64(*(int64x2_t *)v1542, v1547);
    v1555.i64[1] = *(_QWORD *)(v1542 + 168);
    v1557 = vzip1q_s64(v1548, *(int64x2_t *)(v1542 + 112));
    v1558 = vzip1q_s64(v1550, *(int64x2_t *)(v1542 + 176));
    v1548.i64[0] = vdupq_laneq_s64(v1548, 1).u64[0];
    v1548.i64[1] = *(_QWORD *)(v1542 + 120);
    v1559.i64[0] = vdupq_laneq_s64(v1550, 1).u64[0];
    v1559.i64[1] = *(_QWORD *)(v1542 + 184);
    v1544[1] = v1553;
    v1544[2] = v1554;
    *v1544 = v1552;
    v1560 = (int64x2_t *)((char *)v1544 + 8 * v1543);
    v1560[1] = v1549;
    v1560[2] = v1555;
    *v1560 = v1556;
    v1561 = &v1544[v1543];
    v1561[1] = v1557;
    v1561[2] = v1558;
    *v1561 = vzip1q_s64(v1545, v1546);
    v1562 = (int64x2_t *)((char *)v1544 + 24 * v1543);
    v1562[1] = v1548;
    v1562[2] = v1559;
    *v1562 = vzip2q_s64(v1545, v1546);
LABEL_750:
    v1582 = v1533 + 1;
    while (v1582 != v1536)
    {
      ++v1535;
      v1583 = *v1582++;
      v1537 = v1583;
      if (v1583 != -1)
      {
        v1533 = v1582 - 1;
        v1538 = v1535;
        v1539 = a3[18];
        if (v10)
          goto LABEL_746;
        goto LABEL_748;
      }
    }
    v1528 = *(_DWORD *)(a1 + 3756);
LABEL_740:
    ++v1529;
    ++v1530;
    if (v1529 < v1528)
      continue;
    break;
  }
  v10 = *a5;
LABEL_760:
  v1587 = *(_DWORD *)(a1 + 5196);
  if (!v1587)
    goto LABEL_783;
  v1588 = 0;
  v1589 = a4[9];
  while (2)
  {
    v1590 = *(_QWORD *)(a1 + 5272);
    v1591 = *(_DWORD *)(a1 + 5296) * v1588;
    v1592 = (uint64_t *)(v1590 + 8 * v1591);
    v1593 = *(_DWORD *)(a1 + 5192);
    if (v1593 && *v1592 == -1)
    {
      v1594 = 0;
      v1643 = 8 * (v1593 + v1591) - 8 * v1591 - 8;
      v1644 = v1590 + 8 * v1591;
      while (v1643)
      {
        v1592 = (uint64_t *)(v1644 + 8);
        ++v1594;
        v1645 = *(_QWORD *)(v1644 + 8);
        v1643 -= 8;
        v1644 += 8;
        if (v1645 != -1)
          goto LABEL_767;
      }
      goto LABEL_763;
    }
    v1594 = 0;
LABEL_767:
    v1595 = (uint64_t *)(v1590 + 8 * (v1591 + v1593));
    if (v1592 == v1595)
      goto LABEL_763;
    v1596 = *v1592;
    v1597 = v1594;
    v1598 = a3[18];
    if (!v10)
    {
LABEL_771:
      v1600 = *(_DWORD *)(v1598 + 4 * v1597);
      v1599 = *v1589;
      goto LABEL_772;
    }
LABEL_769:
    v1599 = *v1589;
    v1600 = *(_DWORD *)(v1598 + 4 * v1597);
    if (*v1589 >= v1600)
    {
LABEL_772:
      v1622 = (_OWORD *)(*(_QWORD *)(a1 + 5200) + 8 * v1596);
      v1623 = *(unsigned int *)(a2 + 16);
      v1624 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1600 + (_DWORD)v1623 * v1599));
      v1625 = v1622[1];
      v1626 = v1622[2];
      v1627 = v1622[3];
      v1628 = v1622[4];
      v1629 = v1622[5];
      v1630 = v1622[6];
      v1631 = v1622[7];
      v1632 = v1622[8];
      v1633 = v1622[9];
      v1634 = v1622[10];
      v1635 = v1622[11];
      *v1624 = *v1622;
      v1624[1] = v1625;
      v1636 = (_OWORD *)((char *)v1624 + 8 * v1623);
      *v1636 = v1626;
      v1636[1] = v1627;
      v1637 = &v1624[v1623];
      *v1637 = v1628;
      v1637[1] = v1629;
      v1638 = (_OWORD *)((char *)v1624 + 24 * v1623);
      *v1638 = v1630;
      v1638[1] = v1631;
      v1639 = &v1624[2 * v1623];
      *v1639 = v1632;
      v1639[1] = v1633;
      v1640 = (_OWORD *)((char *)v1624 + 40 * v1623);
      *v1640 = v1634;
      v1640[1] = v1635;
      goto LABEL_773;
    }
    v1601 = *(_QWORD *)(a1 + 5200) + 8 * v1596;
    v1602 = *(unsigned int *)(a2 + 16);
    v1603 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1599 + (_DWORD)v1602 * v1600));
    v1604 = *(int64x2_t *)(v1601 + 16);
    v1606 = *(int64x2_t *)(v1601 + 32);
    v1605 = *(int64x2_t *)(v1601 + 48);
    v1608 = *(int64x2_t *)(v1601 + 64);
    v1607 = *(int64x2_t *)(v1601 + 80);
    v1610 = *(int64x2_t *)(v1601 + 128);
    v1609 = *(int64x2_t *)(v1601 + 144);
    v1611 = vzip1q_s64(*(int64x2_t *)v1601, v1606);
    v1612 = vzip1q_s64(v1608, *(int64x2_t *)(v1601 + 96));
    v1613 = vzip1q_s64(v1610, *(int64x2_t *)(v1601 + 160));
    v1608.i64[0] = vdupq_laneq_s64(v1608, 1).u64[0];
    v1608.i64[1] = *(_QWORD *)(v1601 + 104);
    v1614.i64[0] = vdupq_laneq_s64(v1610, 1).u64[0];
    v1615 = vzip2q_s64(*(int64x2_t *)v1601, v1606);
    v1614.i64[1] = *(_QWORD *)(v1601 + 168);
    v1616 = vzip1q_s64(v1607, *(int64x2_t *)(v1601 + 112));
    v1617 = vzip1q_s64(v1609, *(int64x2_t *)(v1601 + 176));
    v1607.i64[0] = vdupq_laneq_s64(v1607, 1).u64[0];
    v1607.i64[1] = *(_QWORD *)(v1601 + 120);
    v1618.i64[0] = vdupq_laneq_s64(v1609, 1).u64[0];
    v1618.i64[1] = *(_QWORD *)(v1601 + 184);
    v1603[1] = v1612;
    v1603[2] = v1613;
    *v1603 = v1611;
    v1619 = (int64x2_t *)((char *)v1603 + 8 * v1602);
    v1619[1] = v1608;
    v1619[2] = v1614;
    *v1619 = v1615;
    v1620 = &v1603[v1602];
    v1620[1] = v1616;
    v1620[2] = v1617;
    *v1620 = vzip1q_s64(v1604, v1605);
    v1621 = (int64x2_t *)((char *)v1603 + 24 * v1602);
    v1621[1] = v1607;
    v1621[2] = v1618;
    *v1621 = vzip2q_s64(v1604, v1605);
LABEL_773:
    v1641 = v1592 + 1;
    while (v1641 != v1595)
    {
      ++v1594;
      v1642 = *v1641++;
      v1596 = v1642;
      if (v1642 != -1)
      {
        v1592 = v1641 - 1;
        v1597 = v1594;
        v1598 = a3[18];
        if (v10)
          goto LABEL_769;
        goto LABEL_771;
      }
    }
    v1587 = *(_DWORD *)(a1 + 5196);
LABEL_763:
    ++v1588;
    ++v1589;
    if (v1588 < v1587)
      continue;
    break;
  }
  v10 = *a5;
LABEL_783:
  v1646 = *(_DWORD *)(a1 + 6636);
  if (!v1646)
    goto LABEL_806;
  v1647 = 0;
  v1648 = a4[12];
  while (2)
  {
    v1649 = *(_QWORD *)(a1 + 6712);
    v1650 = *(_DWORD *)(a1 + 6736) * v1647;
    v1651 = (uint64_t *)(v1649 + 8 * v1650);
    v1652 = *(_DWORD *)(a1 + 6632);
    if (v1652 && *v1651 == -1)
    {
      v1653 = 0;
      v1685 = 8 * (v1652 + v1650) - 8 * v1650 - 8;
      v1686 = v1649 + 8 * v1650;
      while (v1685)
      {
        v1651 = (uint64_t *)(v1686 + 8);
        ++v1653;
        v1687 = *(_QWORD *)(v1686 + 8);
        v1685 -= 8;
        v1686 += 8;
        if (v1687 != -1)
          goto LABEL_790;
      }
      goto LABEL_786;
    }
    v1653 = 0;
LABEL_790:
    v1654 = (uint64_t *)(v1649 + 8 * (v1650 + v1652));
    if (v1651 == v1654)
      goto LABEL_786;
    v1655 = *v1651;
    v1656 = v1653;
    v1657 = a3[18];
    if (!v10)
    {
LABEL_794:
      v1659 = *(_DWORD *)(v1657 + 4 * v1656);
      v1658 = *v1648;
      goto LABEL_795;
    }
LABEL_792:
    v1658 = *v1648;
    v1659 = *(_DWORD *)(v1657 + 4 * v1656);
    if (*v1648 >= v1659)
    {
LABEL_795:
      v1673 = (_OWORD *)(*(_QWORD *)(a1 + 6640) + 8 * v1655);
      v1674 = *(unsigned int *)(a2 + 16);
      v1675 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1659 + (_DWORD)v1674 * v1658));
      v1676 = v1673[1];
      v1677 = v1673[2];
      v1678 = v1673[3];
      v1679 = v1673[4];
      v1680 = v1673[5];
      *v1675 = *v1673;
      v1675[1] = v1676;
      v1681 = (_OWORD *)((char *)v1675 + 8 * v1674);
      *v1681 = v1677;
      v1681[1] = v1678;
      v1682 = &v1675[v1674];
      *v1682 = v1679;
      v1682[1] = v1680;
      goto LABEL_796;
    }
    v1660 = *(_QWORD *)(a1 + 6640) + 8 * v1655;
    v1661 = *(unsigned int *)(a2 + 16);
    v1662 = *(_QWORD *)a2 + 8 * (v1658 + (_DWORD)v1661 * v1659);
    v1663 = *(int64x2_t *)(v1660 + 16);
    v1665 = *(int64x2_t *)(v1660 + 32);
    v1664 = *(int64x2_t *)(v1660 + 48);
    v1667 = *(_OWORD *)(v1660 + 64);
    v1666 = *(_OWORD *)(v1660 + 80);
    v1668 = vzip1q_s64(*(int64x2_t *)v1660, v1665);
    v1669 = vzip2q_s64(*(int64x2_t *)v1660, v1665);
    *(_QWORD *)(v1662 + 16) = v1667;
    *(int64x2_t *)v1662 = v1668;
    v1670 = (int64x2_t *)(v1662 + 8 * v1661);
    *v1670 = v1669;
    v1670[1].i64[0] = *((_QWORD *)&v1667 + 1);
    v1671 = (int64x2_t *)(v1662 + 16 * v1661);
    v1671[1].i64[0] = v1666;
    *v1671 = vzip1q_s64(v1663, v1664);
    v1672 = (int64x2_t *)(v1662 + 24 * v1661);
    v1672[1].i64[0] = *((_QWORD *)&v1666 + 1);
    *v1672 = vzip2q_s64(v1663, v1664);
LABEL_796:
    v1683 = v1651 + 1;
    while (v1683 != v1654)
    {
      ++v1653;
      v1684 = *v1683++;
      v1655 = v1684;
      if (v1684 != -1)
      {
        v1651 = v1683 - 1;
        v1656 = v1653;
        v1657 = a3[18];
        if (v10)
          goto LABEL_792;
        goto LABEL_794;
      }
    }
    v1646 = *(_DWORD *)(a1 + 6636);
LABEL_786:
    ++v1647;
    ++v1648;
    if (v1647 < v1646)
      continue;
    break;
  }
  v10 = *a5;
LABEL_806:
  v1688 = *(_DWORD *)(a1 + 8076);
  if (!v1688)
    goto LABEL_829;
  v1689 = 0;
  v1690 = a4[15];
  while (2)
  {
    v1691 = *(_QWORD *)(a1 + 8152);
    v1692 = *(_DWORD *)(a1 + 8176) * v1689;
    v1693 = (uint64_t *)(v1691 + 8 * v1692);
    v1694 = *(_DWORD *)(a1 + 8072);
    if (v1694 && *v1693 == -1)
    {
      v1695 = 0;
      v1712 = 8 * (v1694 + v1692) - 8 * v1692 - 8;
      v1713 = v1691 + 8 * v1692;
      while (v1712)
      {
        v1693 = (uint64_t *)(v1713 + 8);
        ++v1695;
        v1714 = *(_QWORD *)(v1713 + 8);
        v1712 -= 8;
        v1713 += 8;
        if (v1714 != -1)
          goto LABEL_813;
      }
      goto LABEL_809;
    }
    v1695 = 0;
LABEL_813:
    v1696 = (uint64_t *)(v1691 + 8 * (v1692 + v1694));
    if (v1693 == v1696)
      goto LABEL_809;
    v1697 = *v1693;
    v1698 = v1695;
    v1699 = a3[18];
    if (!v10)
    {
LABEL_817:
      v1701 = *(_DWORD *)(v1699 + 4 * v1698);
      v1700 = *v1690;
      goto LABEL_818;
    }
LABEL_815:
    v1700 = *v1690;
    v1701 = *(_DWORD *)(v1699 + 4 * v1698);
    if (*v1690 >= v1701)
    {
LABEL_818:
      v1707 = (_OWORD *)(*(_QWORD *)(a1 + 8080) + 8 * v1697);
      v1708 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1701 + *(_DWORD *)(a2 + 16) * v1700));
      v1709 = v1707[1];
      *v1708 = *v1707;
      v1708[1] = v1709;
      goto LABEL_819;
    }
    v1702 = *(_QWORD *)(a1 + 8080) + 8 * v1697;
    v1703 = *(unsigned int *)(a2 + 16);
    v1704 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1700 + (_DWORD)v1703 * v1701));
    v1705 = *(int8x16_t *)(v1702 + 16);
    v1706 = vextq_s8(*(int8x16_t *)v1702, *(int8x16_t *)v1702, 8uLL).u64[0];
    *v1704 = *(_QWORD *)v1702;
    v1704[v1703] = v1706;
    v1704[2 * v1703] = v1705.i64[0];
    v1704[3 * v1703] = vextq_s8(v1705, v1705, 8uLL).u64[0];
LABEL_819:
    v1710 = v1693 + 1;
    while (v1710 != v1696)
    {
      ++v1695;
      v1711 = *v1710++;
      v1697 = v1711;
      if (v1711 != -1)
      {
        v1693 = v1710 - 1;
        v1698 = v1695;
        v1699 = a3[18];
        if (v10)
          goto LABEL_815;
        goto LABEL_817;
      }
    }
    v1688 = *(_DWORD *)(a1 + 8076);
LABEL_809:
    ++v1689;
    ++v1690;
    if (v1689 < v1688)
      continue;
    break;
  }
  v10 = *a5;
LABEL_829:
  v1715 = *(_DWORD *)(a1 + 9516);
  if (!v1715)
    goto LABEL_852;
  v1716 = 0;
  v1717 = a4[18];
  while (2)
  {
    v1718 = *(_QWORD *)(a1 + 9592);
    v1719 = *(_DWORD *)(a1 + 9616) * v1716;
    v1720 = (uint64_t *)(v1718 + 8 * v1719);
    v1721 = *(_DWORD *)(a1 + 9512);
    if (v1721 && *v1720 == -1)
    {
      v1722 = 0;
      v1754 = 8 * (v1721 + v1719) - 8 * v1719 - 8;
      v1755 = v1718 + 8 * v1719;
      while (v1754)
      {
        v1720 = (uint64_t *)(v1755 + 8);
        ++v1722;
        v1756 = *(_QWORD *)(v1755 + 8);
        v1754 -= 8;
        v1755 += 8;
        if (v1756 != -1)
          goto LABEL_836;
      }
      goto LABEL_832;
    }
    v1722 = 0;
LABEL_836:
    v1723 = (uint64_t *)(v1718 + 8 * (v1719 + v1721));
    if (v1720 == v1723)
      goto LABEL_832;
    v1724 = *v1720;
    v1725 = v1722;
    v1726 = a3[18];
    if (!v10)
    {
LABEL_840:
      v1728 = *(_DWORD *)(v1726 + 4 * v1725);
      v1727 = *v1717;
      goto LABEL_841;
    }
LABEL_838:
    v1727 = *v1717;
    v1728 = *(_DWORD *)(v1726 + 4 * v1725);
    if (*v1717 >= v1728)
    {
LABEL_841:
      v1745 = (int64x2_t *)(*(_QWORD *)(a1 + 9520) + 8 * v1724);
      v1730 = *(unsigned int *)(a2 + 16);
      v1731 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1728 + (_DWORD)v1730 * v1727));
      v1746 = v1745[1];
      v1747 = v1745[2];
      v1748 = v1745[3];
      v1740 = v1745[4];
      v1741 = v1745[5];
      v1743 = v1745[6];
      v1742 = v1745[7];
      *v1731 = *v1745;
      v1731[1] = v1746;
      v1749 = &v1731->i8[8 * v1730];
      *(int64x2_t *)v1749 = v1747;
      *((int64x2_t *)v1749 + 1) = v1748;
      goto LABEL_842;
    }
    v1729 = *(_QWORD *)(a1 + 9520) + 8 * v1724;
    v1730 = *(unsigned int *)(a2 + 16);
    v1731 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1727 + (_DWORD)v1730 * v1728));
    v1732 = *(int64x2_t *)(v1729 + 16);
    v1733 = *(int64x2_t *)(v1729 + 32);
    v1734 = *(int64x2_t *)(v1729 + 48);
    v1736 = *(int64x2_t *)(v1729 + 64);
    v1735 = *(int64x2_t *)(v1729 + 80);
    v1737 = vzip1q_s64(*(int64x2_t *)v1729, v1733);
    v1738 = vzip1q_s64(v1736, *(int64x2_t *)(v1729 + 96));
    v1739 = vzip2q_s64(*(int64x2_t *)v1729, v1733);
    v1736.i64[0] = vdupq_laneq_s64(v1736, 1).u64[0];
    v1736.i64[1] = *(_QWORD *)(v1729 + 104);
    v1740 = vzip1q_s64(v1732, v1734);
    v1741 = vzip1q_s64(v1735, *(int64x2_t *)(v1729 + 112));
    v1742.i64[0] = vdupq_laneq_s64(v1735, 1).u64[0];
    v1742.i64[1] = *(_QWORD *)(v1729 + 120);
    v1743 = vzip2q_s64(v1732, v1734);
    *v1731 = v1737;
    v1731[1] = v1738;
    v1744 = (int64x2_t *)((char *)v1731 + 8 * v1730);
    *v1744 = v1739;
    v1744[1] = v1736;
LABEL_842:
    v1750 = &v1731[v1730];
    *v1750 = v1740;
    v1750[1] = v1741;
    v1751 = (int64x2_t *)((char *)v1731 + 24 * v1730);
    *v1751 = v1743;
    v1751[1] = v1742;
    v1752 = v1720 + 1;
    while (v1752 != v1723)
    {
      ++v1722;
      v1753 = *v1752++;
      v1724 = v1753;
      if (v1753 != -1)
      {
        v1720 = v1752 - 1;
        v1725 = v1722;
        v1726 = a3[18];
        if (v10)
          goto LABEL_838;
        goto LABEL_840;
      }
    }
    v1715 = *(_DWORD *)(a1 + 9516);
LABEL_832:
    ++v1716;
    ++v1717;
    if (v1716 < v1715)
      continue;
    break;
  }
  v10 = *a5;
LABEL_852:
  v1757 = *(_DWORD *)(a1 + 10956);
  if (!v1757)
    goto LABEL_875;
  v1758 = 0;
  v1759 = a4[21];
  while (2)
  {
    v1760 = *(_QWORD *)(a1 + 11032);
    v1761 = *(_DWORD *)(a1 + 11056) * v1758;
    v1762 = (uint64_t *)(v1760 + 8 * v1761);
    v1763 = *(_DWORD *)(a1 + 10952);
    if (v1763 && *v1762 == -1)
    {
      v1764 = 0;
      v1796 = 8 * (v1763 + v1761) - 8 * v1761 - 8;
      v1797 = v1760 + 8 * v1761;
      while (v1796)
      {
        v1762 = (uint64_t *)(v1797 + 8);
        ++v1764;
        v1798 = *(_QWORD *)(v1797 + 8);
        v1796 -= 8;
        v1797 += 8;
        if (v1798 != -1)
          goto LABEL_859;
      }
      goto LABEL_855;
    }
    v1764 = 0;
LABEL_859:
    v1765 = (uint64_t *)(v1760 + 8 * (v1761 + v1763));
    if (v1762 == v1765)
      goto LABEL_855;
    v1766 = *v1762;
    v1767 = v1764;
    v1768 = a3[18];
    if (!v10)
    {
LABEL_863:
      v1770 = *(_DWORD *)(v1768 + 4 * v1767);
      v1769 = *v1759;
      goto LABEL_864;
    }
LABEL_861:
    v1769 = *v1759;
    v1770 = *(_DWORD *)(v1768 + 4 * v1767);
    if (*v1759 >= v1770)
    {
LABEL_864:
      v1787 = (int64x2_t *)(*(_QWORD *)(a1 + 10960) + 8 * v1766);
      v1772 = *(unsigned int *)(a2 + 16);
      v1773 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1770 + (_DWORD)v1772 * v1769));
      v1788 = v1787[1];
      v1789 = v1787[2];
      v1790 = v1787[3];
      v1782 = v1787[4];
      v1783 = v1787[5];
      v1785 = v1787[6];
      v1784 = v1787[7];
      *v1773 = *v1787;
      v1773[1] = v1788;
      v1791 = &v1773->i8[8 * v1772];
      *(int64x2_t *)v1791 = v1789;
      *((int64x2_t *)v1791 + 1) = v1790;
      goto LABEL_865;
    }
    v1771 = *(_QWORD *)(a1 + 10960) + 8 * v1766;
    v1772 = *(unsigned int *)(a2 + 16);
    v1773 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1769 + (_DWORD)v1772 * v1770));
    v1774 = *(int64x2_t *)(v1771 + 16);
    v1775 = *(int64x2_t *)(v1771 + 32);
    v1776 = *(int64x2_t *)(v1771 + 48);
    v1778 = *(int64x2_t *)(v1771 + 64);
    v1777 = *(int64x2_t *)(v1771 + 80);
    v1779 = vzip1q_s64(*(int64x2_t *)v1771, v1775);
    v1780 = vzip1q_s64(v1778, *(int64x2_t *)(v1771 + 96));
    v1781 = vzip2q_s64(*(int64x2_t *)v1771, v1775);
    v1778.i64[0] = vdupq_laneq_s64(v1778, 1).u64[0];
    v1778.i64[1] = *(_QWORD *)(v1771 + 104);
    v1782 = vzip1q_s64(v1774, v1776);
    v1783 = vzip1q_s64(v1777, *(int64x2_t *)(v1771 + 112));
    v1784.i64[0] = vdupq_laneq_s64(v1777, 1).u64[0];
    v1784.i64[1] = *(_QWORD *)(v1771 + 120);
    v1785 = vzip2q_s64(v1774, v1776);
    *v1773 = v1779;
    v1773[1] = v1780;
    v1786 = (int64x2_t *)((char *)v1773 + 8 * v1772);
    *v1786 = v1781;
    v1786[1] = v1778;
LABEL_865:
    v1792 = &v1773[v1772];
    *v1792 = v1782;
    v1792[1] = v1783;
    v1793 = (int64x2_t *)((char *)v1773 + 24 * v1772);
    *v1793 = v1785;
    v1793[1] = v1784;
    v1794 = v1762 + 1;
    while (v1794 != v1765)
    {
      ++v1764;
      v1795 = *v1794++;
      v1766 = v1795;
      if (v1795 != -1)
      {
        v1762 = v1794 - 1;
        v1767 = v1764;
        v1768 = a3[18];
        if (v10)
          goto LABEL_861;
        goto LABEL_863;
      }
    }
    v1757 = *(_DWORD *)(a1 + 10956);
LABEL_855:
    ++v1758;
    ++v1759;
    if (v1758 < v1757)
      continue;
    break;
  }
  v10 = *a5;
LABEL_875:
  v1799 = *(_DWORD *)(a1 + 12396);
  if (!v1799)
    goto LABEL_898;
  v1800 = 0;
  v1801 = a4[24];
  while (2)
  {
    v1802 = *(_QWORD *)(a1 + 12472);
    v1803 = *(_DWORD *)(a1 + 12496) * v1800;
    v1804 = (uint64_t *)(v1802 + 8 * v1803);
    v1805 = *(_DWORD *)(a1 + 12392);
    if (v1805 && *v1804 == -1)
    {
      v1806 = 0;
      v1838 = 8 * (v1805 + v1803) - 8 * v1803 - 8;
      v1839 = v1802 + 8 * v1803;
      while (v1838)
      {
        v1804 = (uint64_t *)(v1839 + 8);
        ++v1806;
        v1840 = *(_QWORD *)(v1839 + 8);
        v1838 -= 8;
        v1839 += 8;
        if (v1840 != -1)
          goto LABEL_882;
      }
      goto LABEL_878;
    }
    v1806 = 0;
LABEL_882:
    v1807 = (uint64_t *)(v1802 + 8 * (v1803 + v1805));
    if (v1804 == v1807)
      goto LABEL_878;
    v1808 = *v1804;
    v1809 = v1806;
    v1810 = a3[18];
    if (!v10)
    {
LABEL_886:
      v1812 = *(_DWORD *)(v1810 + 4 * v1809);
      v1811 = *v1801;
      goto LABEL_887;
    }
LABEL_884:
    v1811 = *v1801;
    v1812 = *(_DWORD *)(v1810 + 4 * v1809);
    if (*v1801 >= v1812)
    {
LABEL_887:
      v1826 = (_OWORD *)(*(_QWORD *)(a1 + 12400) + 8 * v1808);
      v1827 = *(unsigned int *)(a2 + 16);
      v1828 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1812 + (_DWORD)v1827 * v1811));
      v1829 = v1826[1];
      v1830 = v1826[2];
      v1831 = v1826[3];
      v1832 = v1826[4];
      v1833 = v1826[5];
      *v1828 = *v1826;
      v1828[1] = v1829;
      v1834 = (_OWORD *)((char *)v1828 + 8 * v1827);
      *v1834 = v1830;
      v1834[1] = v1831;
      v1835 = &v1828[v1827];
      *v1835 = v1832;
      v1835[1] = v1833;
      goto LABEL_888;
    }
    v1813 = *(_QWORD *)(a1 + 12400) + 8 * v1808;
    v1814 = *(unsigned int *)(a2 + 16);
    v1815 = *(_QWORD *)a2 + 8 * (v1811 + (_DWORD)v1814 * v1812);
    v1816 = *(int64x2_t *)(v1813 + 16);
    v1818 = *(int64x2_t *)(v1813 + 32);
    v1817 = *(int64x2_t *)(v1813 + 48);
    v1820 = *(_OWORD *)(v1813 + 64);
    v1819 = *(_OWORD *)(v1813 + 80);
    v1821 = vzip1q_s64(*(int64x2_t *)v1813, v1818);
    v1822 = vzip2q_s64(*(int64x2_t *)v1813, v1818);
    *(_QWORD *)(v1815 + 16) = v1820;
    *(int64x2_t *)v1815 = v1821;
    v1823 = (int64x2_t *)(v1815 + 8 * v1814);
    *v1823 = v1822;
    v1823[1].i64[0] = *((_QWORD *)&v1820 + 1);
    v1824 = (int64x2_t *)(v1815 + 16 * v1814);
    v1824[1].i64[0] = v1819;
    *v1824 = vzip1q_s64(v1816, v1817);
    v1825 = (int64x2_t *)(v1815 + 24 * v1814);
    v1825[1].i64[0] = *((_QWORD *)&v1819 + 1);
    *v1825 = vzip2q_s64(v1816, v1817);
LABEL_888:
    v1836 = v1804 + 1;
    while (v1836 != v1807)
    {
      ++v1806;
      v1837 = *v1836++;
      v1808 = v1837;
      if (v1837 != -1)
      {
        v1804 = v1836 - 1;
        v1809 = v1806;
        v1810 = a3[18];
        if (v10)
          goto LABEL_884;
        goto LABEL_886;
      }
    }
    v1799 = *(_DWORD *)(a1 + 12396);
LABEL_878:
    ++v1800;
    ++v1801;
    if (v1800 < v1799)
      continue;
    break;
  }
  v10 = *a5;
LABEL_898:
  v1841 = *(_DWORD *)(a1 + 13836);
  if (!v1841)
    goto LABEL_921;
  v1842 = 0;
  v1843 = a4[27];
  while (2)
  {
    v1844 = *(_QWORD *)(a1 + 13912);
    v1845 = *(_DWORD *)(a1 + 13936) * v1842;
    v1846 = (uint64_t *)(v1844 + 8 * v1845);
    v1847 = *(_DWORD *)(a1 + 13832);
    if (v1847 && *v1846 == -1)
    {
      v1848 = 0;
      v1880 = 8 * (v1847 + v1845) - 8 * v1845 - 8;
      v1881 = v1844 + 8 * v1845;
      while (v1880)
      {
        v1846 = (uint64_t *)(v1881 + 8);
        ++v1848;
        v1882 = *(_QWORD *)(v1881 + 8);
        v1880 -= 8;
        v1881 += 8;
        if (v1882 != -1)
          goto LABEL_905;
      }
      goto LABEL_901;
    }
    v1848 = 0;
LABEL_905:
    v1849 = (uint64_t *)(v1844 + 8 * (v1845 + v1847));
    if (v1846 == v1849)
      goto LABEL_901;
    v1850 = *v1846;
    v1851 = v1848;
    v1852 = a3[18];
    if (!v10)
    {
LABEL_909:
      v1854 = *(_DWORD *)(v1852 + 4 * v1851);
      v1853 = *v1843;
      goto LABEL_910;
    }
LABEL_907:
    v1853 = *v1843;
    v1854 = *(_DWORD *)(v1852 + 4 * v1851);
    if (*v1843 >= v1854)
    {
LABEL_910:
      v1868 = (_OWORD *)(*(_QWORD *)(a1 + 13840) + 8 * v1850);
      v1869 = *(unsigned int *)(a2 + 16);
      v1870 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1854 + (_DWORD)v1869 * v1853));
      v1871 = v1868[1];
      v1872 = v1868[2];
      v1873 = v1868[3];
      v1874 = v1868[4];
      v1875 = v1868[5];
      *v1870 = *v1868;
      v1870[1] = v1871;
      v1876 = (_OWORD *)((char *)v1870 + 8 * v1869);
      *v1876 = v1872;
      v1876[1] = v1873;
      v1877 = &v1870[v1869];
      *v1877 = v1874;
      v1877[1] = v1875;
      goto LABEL_911;
    }
    v1855 = *(_QWORD *)(a1 + 13840) + 8 * v1850;
    v1856 = *(unsigned int *)(a2 + 16);
    v1857 = *(_QWORD *)a2 + 8 * (v1853 + (_DWORD)v1856 * v1854);
    v1858 = *(int64x2_t *)(v1855 + 16);
    v1860 = *(int64x2_t *)(v1855 + 32);
    v1859 = *(int64x2_t *)(v1855 + 48);
    v1862 = *(_OWORD *)(v1855 + 64);
    v1861 = *(_OWORD *)(v1855 + 80);
    v1863 = vzip1q_s64(*(int64x2_t *)v1855, v1860);
    v1864 = vzip2q_s64(*(int64x2_t *)v1855, v1860);
    *(_QWORD *)(v1857 + 16) = v1862;
    *(int64x2_t *)v1857 = v1863;
    v1865 = (int64x2_t *)(v1857 + 8 * v1856);
    *v1865 = v1864;
    v1865[1].i64[0] = *((_QWORD *)&v1862 + 1);
    v1866 = (int64x2_t *)(v1857 + 16 * v1856);
    v1866[1].i64[0] = v1861;
    *v1866 = vzip1q_s64(v1858, v1859);
    v1867 = (int64x2_t *)(v1857 + 24 * v1856);
    v1867[1].i64[0] = *((_QWORD *)&v1861 + 1);
    *v1867 = vzip2q_s64(v1858, v1859);
LABEL_911:
    v1878 = v1846 + 1;
    while (v1878 != v1849)
    {
      ++v1848;
      v1879 = *v1878++;
      v1850 = v1879;
      if (v1879 != -1)
      {
        v1846 = v1878 - 1;
        v1851 = v1848;
        v1852 = a3[18];
        if (v10)
          goto LABEL_907;
        goto LABEL_909;
      }
    }
    v1841 = *(_DWORD *)(a1 + 13836);
LABEL_901:
    ++v1842;
    ++v1843;
    if (v1842 < v1841)
      continue;
    break;
  }
  v10 = *a5;
LABEL_921:
  v1883 = a3 + 15;
  v1884 = *(_DWORD *)(a1 + 732);
  if (!v1884)
    goto LABEL_944;
  v1885 = 0;
  v1886 = *a4;
  while (2)
  {
    v1887 = *(_QWORD *)(a1 + 808);
    v1888 = *(_DWORD *)(a1 + 832) * v1885;
    v1889 = (uint64_t *)(v1887 + 8 * v1888);
    v1890 = *(_DWORD *)(a1 + 728);
    if (v1890 && *v1889 == -1)
    {
      v1891 = 0;
      v1912 = 8 * (v1890 + v1888) - 8 * v1888 - 8;
      v1913 = v1887 + 8 * v1888;
      while (v1912)
      {
        v1889 = (uint64_t *)(v1913 + 8);
        ++v1891;
        v1914 = *(_QWORD *)(v1913 + 8);
        v1912 -= 8;
        v1913 += 8;
        if (v1914 != -1)
          goto LABEL_928;
      }
      goto LABEL_924;
    }
    v1891 = 0;
LABEL_928:
    v1892 = (uint64_t *)(v1887 + 8 * (v1888 + v1890));
    if (v1889 == v1892)
      goto LABEL_924;
    v1893 = *v1889;
    v1894 = v1891;
    v1895 = *v1883;
    if (!v10)
    {
LABEL_932:
      v1897 = *(_DWORD *)(v1895 + 4 * v1894);
      v1896 = *v1886;
      goto LABEL_933;
    }
LABEL_930:
    v1896 = *v1886;
    v1897 = *(_DWORD *)(v1895 + 4 * v1894);
    if (*v1886 >= v1897)
    {
LABEL_933:
      v1902 = (_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v1893);
      v1903 = *(unsigned int *)(a2 + 16);
      v1904 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1897 + (_DWORD)v1903 * v1896));
      v1905 = v1902[1];
      v1906 = v1902[2];
      v1907 = v1902[3];
      v1908 = v1902[4];
      v1909 = v1902[5];
      *v1904 = *v1902;
      v1904[v1903] = v1905;
      v1904[2 * v1903] = v1906;
      v1904[3 * v1903] = v1907;
      v1904[4 * v1903] = v1908;
      v1904[5 * v1903] = v1909;
      goto LABEL_934;
    }
    v1898 = (__int128 *)(*(_QWORD *)(a1 + 736) + 8 * v1893);
    v1899 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1896 + *(_DWORD *)(a2 + 16) * v1897));
    v1900 = *v1898;
    v1901 = v1898[2];
    v1899[1] = v1898[1];
    v1899[2] = v1901;
    *v1899 = v1900;
LABEL_934:
    v1910 = v1889 + 1;
    while (v1910 != v1892)
    {
      ++v1891;
      v1911 = *v1910++;
      v1893 = v1911;
      if (v1911 != -1)
      {
        v1889 = v1910 - 1;
        v1894 = v1891;
        v1895 = *v1883;
        if (v10)
          goto LABEL_930;
        goto LABEL_932;
      }
    }
    v1884 = *(_DWORD *)(a1 + 732);
LABEL_924:
    ++v1885;
    ++v1886;
    if (v1885 < v1884)
      continue;
    break;
  }
  v10 = *a5;
LABEL_944:
  v1915 = *(_DWORD *)(a1 + 2172);
  if (!v1915)
    goto LABEL_967;
  v1916 = 0;
  v1917 = a4[3];
  while (2)
  {
    v1918 = *(_QWORD *)(a1 + 2248);
    v1919 = *(_DWORD *)(a1 + 2272) * v1916;
    v1920 = (uint64_t *)(v1918 + 8 * v1919);
    v1921 = *(_DWORD *)(a1 + 2168);
    if (v1921 && *v1920 == -1)
    {
      v1922 = 0;
      v1948 = 8 * (v1921 + v1919) - 8 * v1919 - 8;
      v1949 = v1918 + 8 * v1919;
      while (v1948)
      {
        v1920 = (uint64_t *)(v1949 + 8);
        ++v1922;
        v1950 = *(_QWORD *)(v1949 + 8);
        v1948 -= 8;
        v1949 += 8;
        if (v1950 != -1)
          goto LABEL_951;
      }
      goto LABEL_947;
    }
    v1922 = 0;
LABEL_951:
    v1923 = (uint64_t *)(v1918 + 8 * (v1919 + v1921));
    if (v1920 == v1923)
      goto LABEL_947;
    v1924 = *v1920;
    v1925 = v1922;
    v1926 = *v1883;
    if (!v10)
    {
LABEL_955:
      v1928 = *(_DWORD *)(v1926 + 4 * v1925);
      v1927 = *v1917;
      goto LABEL_956;
    }
LABEL_953:
    v1927 = *v1917;
    v1928 = *(_DWORD *)(v1926 + 4 * v1925);
    if (*v1917 >= v1928)
    {
LABEL_956:
      v1935 = (_QWORD *)(*(_QWORD *)(a1 + 2176) + 8 * v1924);
      v1936 = *(unsigned int *)(a2 + 16);
      v1937 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1928 + (_DWORD)v1936 * v1927));
      v1938 = v1935[1];
      v1939 = v1935[2];
      v1940 = v1935[3];
      v1941 = v1935[4];
      v1942 = v1935[5];
      v1943 = v1935[6];
      v1944 = v1935[7];
      v1945 = v1935[8];
      *v1937 = *v1935;
      v1937[v1936] = v1938;
      v1937[2 * v1936] = v1939;
      v1937[3 * v1936] = v1940;
      v1937[4 * v1936] = v1941;
      v1937[5 * v1936] = v1942;
      v1937[6 * v1936] = v1943;
      v1937[7 * v1936] = v1944;
      v1937[8 * v1936] = v1945;
      goto LABEL_957;
    }
    v1929 = *(_QWORD *)(a1 + 2176) + 8 * v1924;
    v1930 = *(_QWORD *)a2 + 8 * (v1927 + *(_DWORD *)(a2 + 16) * v1928);
    v1931 = *(_OWORD *)v1929;
    v1932 = *(_OWORD *)(v1929 + 16);
    v1933 = *(_OWORD *)(v1929 + 32);
    v1934 = *(_OWORD *)(v1929 + 48);
    *(_QWORD *)(v1930 + 64) = *(_QWORD *)(v1929 + 64);
    *(_OWORD *)(v1930 + 32) = v1933;
    *(_OWORD *)(v1930 + 48) = v1934;
    *(_OWORD *)v1930 = v1931;
    *(_OWORD *)(v1930 + 16) = v1932;
LABEL_957:
    v1946 = v1920 + 1;
    while (v1946 != v1923)
    {
      ++v1922;
      v1947 = *v1946++;
      v1924 = v1947;
      if (v1947 != -1)
      {
        v1920 = v1946 - 1;
        v1925 = v1922;
        v1926 = *v1883;
        if (v10)
          goto LABEL_953;
        goto LABEL_955;
      }
    }
    v1915 = *(_DWORD *)(a1 + 2172);
LABEL_947:
    ++v1916;
    ++v1917;
    if (v1916 < v1915)
      continue;
    break;
  }
  v10 = *a5;
LABEL_967:
  v1951 = *(_DWORD *)(a1 + 3612);
  if (!v1951)
    goto LABEL_990;
  v1952 = 0;
  v1953 = a4[6];
  while (2)
  {
    v1954 = *(_QWORD *)(a1 + 3688);
    v1955 = *(_DWORD *)(a1 + 3712) * v1952;
    v1956 = (uint64_t *)(v1954 + 8 * v1955);
    v1957 = *(_DWORD *)(a1 + 3608);
    if (v1957 && *v1956 == -1)
    {
      v1958 = 0;
      v1979 = 8 * (v1957 + v1955) - 8 * v1955 - 8;
      v1980 = v1954 + 8 * v1955;
      while (v1979)
      {
        v1956 = (uint64_t *)(v1980 + 8);
        ++v1958;
        v1981 = *(_QWORD *)(v1980 + 8);
        v1979 -= 8;
        v1980 += 8;
        if (v1981 != -1)
          goto LABEL_974;
      }
      goto LABEL_970;
    }
    v1958 = 0;
LABEL_974:
    v1959 = (uint64_t *)(v1954 + 8 * (v1955 + v1957));
    if (v1956 == v1959)
      goto LABEL_970;
    v1960 = *v1956;
    v1961 = v1958;
    v1962 = *v1883;
    if (!v10)
    {
LABEL_978:
      v1964 = *(_DWORD *)(v1962 + 4 * v1961);
      v1963 = *v1953;
      goto LABEL_979;
    }
LABEL_976:
    v1963 = *v1953;
    v1964 = *(_DWORD *)(v1962 + 4 * v1961);
    if (*v1953 >= v1964)
    {
LABEL_979:
      v1969 = (_QWORD *)(*(_QWORD *)(a1 + 3616) + 8 * v1960);
      v1970 = *(unsigned int *)(a2 + 16);
      v1971 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1964 + (_DWORD)v1970 * v1963));
      v1972 = v1969[1];
      v1973 = v1969[2];
      v1974 = v1969[3];
      v1975 = v1969[4];
      v1976 = v1969[5];
      *v1971 = *v1969;
      v1971[v1970] = v1972;
      v1971[2 * v1970] = v1973;
      v1971[3 * v1970] = v1974;
      v1971[4 * v1970] = v1975;
      v1971[5 * v1970] = v1976;
      goto LABEL_980;
    }
    v1965 = (__int128 *)(*(_QWORD *)(a1 + 3616) + 8 * v1960);
    v1966 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1963 + *(_DWORD *)(a2 + 16) * v1964));
    v1967 = *v1965;
    v1968 = v1965[2];
    v1966[1] = v1965[1];
    v1966[2] = v1968;
    *v1966 = v1967;
LABEL_980:
    v1977 = v1956 + 1;
    while (v1977 != v1959)
    {
      ++v1958;
      v1978 = *v1977++;
      v1960 = v1978;
      if (v1978 != -1)
      {
        v1956 = v1977 - 1;
        v1961 = v1958;
        v1962 = *v1883;
        if (v10)
          goto LABEL_976;
        goto LABEL_978;
      }
    }
    v1951 = *(_DWORD *)(a1 + 3612);
LABEL_970:
    ++v1952;
    ++v1953;
    if (v1952 < v1951)
      continue;
    break;
  }
  v10 = *a5;
LABEL_990:
  v1982 = *(_DWORD *)(a1 + 5052);
  if (!v1982)
    goto LABEL_1013;
  v1983 = 0;
  v1984 = a4[9];
  while (2)
  {
    v1985 = *(_QWORD *)(a1 + 5128);
    v1986 = *(_DWORD *)(a1 + 5152) * v1983;
    v1987 = (uint64_t *)(v1985 + 8 * v1986);
    v1988 = *(_DWORD *)(a1 + 5048);
    if (v1988 && *v1987 == -1)
    {
      v1989 = 0;
      v2010 = 8 * (v1988 + v1986) - 8 * v1986 - 8;
      v2011 = v1985 + 8 * v1986;
      while (v2010)
      {
        v1987 = (uint64_t *)(v2011 + 8);
        ++v1989;
        v2012 = *(_QWORD *)(v2011 + 8);
        v2010 -= 8;
        v2011 += 8;
        if (v2012 != -1)
          goto LABEL_997;
      }
      goto LABEL_993;
    }
    v1989 = 0;
LABEL_997:
    v1990 = (uint64_t *)(v1985 + 8 * (v1986 + v1988));
    if (v1987 == v1990)
      goto LABEL_993;
    v1991 = *v1987;
    v1992 = v1989;
    v1993 = *v1883;
    if (!v10)
    {
LABEL_1001:
      v1995 = *(_DWORD *)(v1993 + 4 * v1992);
      v1994 = *v1984;
      goto LABEL_1002;
    }
LABEL_999:
    v1994 = *v1984;
    v1995 = *(_DWORD *)(v1993 + 4 * v1992);
    if (*v1984 >= v1995)
    {
LABEL_1002:
      v2000 = (_QWORD *)(*(_QWORD *)(a1 + 5056) + 8 * v1991);
      v2001 = *(unsigned int *)(a2 + 16);
      v2002 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1995 + (_DWORD)v2001 * v1994));
      v2003 = v2000[1];
      v2004 = v2000[2];
      v2005 = v2000[3];
      v2006 = v2000[4];
      v2007 = v2000[5];
      *v2002 = *v2000;
      v2002[v2001] = v2003;
      v2002[2 * v2001] = v2004;
      v2002[3 * v2001] = v2005;
      v2002[4 * v2001] = v2006;
      v2002[5 * v2001] = v2007;
      goto LABEL_1003;
    }
    v1996 = (__int128 *)(*(_QWORD *)(a1 + 5056) + 8 * v1991);
    v1997 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1994 + *(_DWORD *)(a2 + 16) * v1995));
    v1998 = *v1996;
    v1999 = v1996[2];
    v1997[1] = v1996[1];
    v1997[2] = v1999;
    *v1997 = v1998;
LABEL_1003:
    v2008 = v1987 + 1;
    while (v2008 != v1990)
    {
      ++v1989;
      v2009 = *v2008++;
      v1991 = v2009;
      if (v2009 != -1)
      {
        v1987 = v2008 - 1;
        v1992 = v1989;
        v1993 = *v1883;
        if (v10)
          goto LABEL_999;
        goto LABEL_1001;
      }
    }
    v1982 = *(_DWORD *)(a1 + 5052);
LABEL_993:
    ++v1983;
    ++v1984;
    if (v1983 < v1982)
      continue;
    break;
  }
  v10 = *a5;
LABEL_1013:
  v2013 = *(_DWORD *)(a1 + 6492);
  if (!v2013)
    goto LABEL_1036;
  v2014 = 0;
  v2015 = a4[12];
  while (2)
  {
    v2016 = *(_QWORD *)(a1 + 6568);
    v2017 = *(_DWORD *)(a1 + 6592) * v2014;
    v2018 = (uint64_t *)(v2016 + 8 * v2017);
    v2019 = *(_DWORD *)(a1 + 6488);
    if (v2019 && *v2018 == -1)
    {
      v2020 = 0;
      v2037 = 8 * (v2019 + v2017) - 8 * v2017 - 8;
      v2038 = v2016 + 8 * v2017;
      while (v2037)
      {
        v2018 = (uint64_t *)(v2038 + 8);
        ++v2020;
        v2039 = *(_QWORD *)(v2038 + 8);
        v2037 -= 8;
        v2038 += 8;
        if (v2039 != -1)
          goto LABEL_1020;
      }
      goto LABEL_1016;
    }
    v2020 = 0;
LABEL_1020:
    v2021 = (uint64_t *)(v2016 + 8 * (v2017 + v2019));
    if (v2018 == v2021)
      goto LABEL_1016;
    v2022 = *v2018;
    v2023 = v2020;
    v2024 = *v1883;
    if (!v10)
    {
LABEL_1024:
      v2026 = *(_DWORD *)(v2024 + 4 * v2023);
      v2025 = *v2015;
      goto LABEL_1025;
    }
LABEL_1022:
    v2025 = *v2015;
    v2026 = *(_DWORD *)(v2024 + 4 * v2023);
    if (*v2015 >= v2026)
    {
LABEL_1025:
      v2030 = (_QWORD *)(*(_QWORD *)(a1 + 6496) + 8 * v2022);
      v2031 = *(unsigned int *)(a2 + 16);
      v2032 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2026 + (_DWORD)v2031 * v2025));
      v2033 = v2030[1];
      v2034 = v2030[2];
      *v2032 = *v2030;
      v2032[v2031] = v2033;
      v2032[2 * v2031] = v2034;
      goto LABEL_1026;
    }
    v2027 = *(_QWORD *)(a1 + 6496) + 8 * v2022;
    v2028 = *(_QWORD *)a2 + 8 * (v2025 + *(_DWORD *)(a2 + 16) * v2026);
    v2029 = *(_OWORD *)v2027;
    *(_QWORD *)(v2028 + 16) = *(_QWORD *)(v2027 + 16);
    *(_OWORD *)v2028 = v2029;
LABEL_1026:
    v2035 = v2018 + 1;
    while (v2035 != v2021)
    {
      ++v2020;
      v2036 = *v2035++;
      v2022 = v2036;
      if (v2036 != -1)
      {
        v2018 = v2035 - 1;
        v2023 = v2020;
        v2024 = *v1883;
        if (v10)
          goto LABEL_1022;
        goto LABEL_1024;
      }
    }
    v2013 = *(_DWORD *)(a1 + 6492);
LABEL_1016:
    ++v2014;
    ++v2015;
    if (v2014 < v2013)
      continue;
    break;
  }
  v10 = *a5;
LABEL_1036:
  sub_20F9CA990(a1 + 7920, a2, a3 + 15, a4[15], v10 != 0);
  v2040 = *a5;
  v2041 = *(_DWORD *)(a1 + 9372);
  if (!v2041)
    goto LABEL_1059;
  v2042 = 0;
  v2043 = a4[18];
  while (2)
  {
    v2044 = *(_QWORD *)(a1 + 9448);
    v2045 = *(_DWORD *)(a1 + 9472) * v2042;
    v2046 = (uint64_t *)(v2044 + 8 * v2045);
    v2047 = *(_DWORD *)(a1 + 9368);
    if (v2047 && *v2046 == -1)
    {
      v2048 = 0;
      v2066 = 8 * (v2047 + v2045) - 8 * v2045 - 8;
      v2067 = v2044 + 8 * v2045;
      while (v2066)
      {
        v2046 = (uint64_t *)(v2067 + 8);
        ++v2048;
        v2068 = *(_QWORD *)(v2067 + 8);
        v2066 -= 8;
        v2067 += 8;
        if (v2068 != -1)
          goto LABEL_1043;
      }
      goto LABEL_1039;
    }
    v2048 = 0;
LABEL_1043:
    v2049 = (uint64_t *)(v2044 + 8 * (v2045 + v2047));
    if (v2046 == v2049)
      goto LABEL_1039;
    v2050 = *v2046;
    v2051 = v2048;
    v2052 = *v1883;
    if (!v2040)
    {
LABEL_1047:
      v2054 = *(_DWORD *)(v2052 + 4 * v2051);
      v2053 = *v2043;
      goto LABEL_1048;
    }
LABEL_1045:
    v2053 = *v2043;
    v2054 = *(_DWORD *)(v2052 + 4 * v2051);
    if (*v2043 >= v2054)
    {
LABEL_1048:
      v2058 = (_QWORD *)(*(_QWORD *)(a1 + 9376) + 8 * v2050);
      v2059 = *(unsigned int *)(a2 + 16);
      v2060 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2054 + (_DWORD)v2059 * v2053));
      v2061 = v2058[1];
      v2062 = v2058[2];
      v2063 = v2058[3];
      *v2060 = *v2058;
      v2060[v2059] = v2061;
      v2060[2 * v2059] = v2062;
      v2060[3 * v2059] = v2063;
      goto LABEL_1049;
    }
    v2055 = (_OWORD *)(*(_QWORD *)(a1 + 9376) + 8 * v2050);
    v2056 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2053 + *(_DWORD *)(a2 + 16) * v2054));
    v2057 = v2055[1];
    *v2056 = *v2055;
    v2056[1] = v2057;
LABEL_1049:
    v2064 = v2046 + 1;
    while (v2064 != v2049)
    {
      ++v2048;
      v2065 = *v2064++;
      v2050 = v2065;
      if (v2065 != -1)
      {
        v2046 = v2064 - 1;
        v2051 = v2048;
        v2052 = *v1883;
        if (v2040)
          goto LABEL_1045;
        goto LABEL_1047;
      }
    }
    v2041 = *(_DWORD *)(a1 + 9372);
LABEL_1039:
    ++v2042;
    ++v2043;
    if (v2042 < v2041)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1059:
  v2069 = *(_DWORD *)(a1 + 10812);
  if (!v2069)
    goto LABEL_1082;
  v2070 = 0;
  v2071 = a4[21];
  while (2)
  {
    v2072 = *(_QWORD *)(a1 + 10888);
    v2073 = *(_DWORD *)(a1 + 10912) * v2070;
    v2074 = (uint64_t *)(v2072 + 8 * v2073);
    v2075 = *(_DWORD *)(a1 + 10808);
    if (v2075 && *v2074 == -1)
    {
      v2076 = 0;
      v2094 = 8 * (v2075 + v2073) - 8 * v2073 - 8;
      v2095 = v2072 + 8 * v2073;
      while (v2094)
      {
        v2074 = (uint64_t *)(v2095 + 8);
        ++v2076;
        v2096 = *(_QWORD *)(v2095 + 8);
        v2094 -= 8;
        v2095 += 8;
        if (v2096 != -1)
          goto LABEL_1066;
      }
      goto LABEL_1062;
    }
    v2076 = 0;
LABEL_1066:
    v2077 = (uint64_t *)(v2072 + 8 * (v2073 + v2075));
    if (v2074 == v2077)
      goto LABEL_1062;
    v2078 = *v2074;
    v2079 = v2076;
    v2080 = *v1883;
    if (!v2040)
    {
LABEL_1070:
      v2082 = *(_DWORD *)(v2080 + 4 * v2079);
      v2081 = *v2071;
      goto LABEL_1071;
    }
LABEL_1068:
    v2081 = *v2071;
    v2082 = *(_DWORD *)(v2080 + 4 * v2079);
    if (*v2071 >= v2082)
    {
LABEL_1071:
      v2086 = (_QWORD *)(*(_QWORD *)(a1 + 10816) + 8 * v2078);
      v2087 = *(unsigned int *)(a2 + 16);
      v2088 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2082 + (_DWORD)v2087 * v2081));
      v2089 = v2086[1];
      v2090 = v2086[2];
      v2091 = v2086[3];
      *v2088 = *v2086;
      v2088[v2087] = v2089;
      v2088[2 * v2087] = v2090;
      v2088[3 * v2087] = v2091;
      goto LABEL_1072;
    }
    v2083 = (_OWORD *)(*(_QWORD *)(a1 + 10816) + 8 * v2078);
    v2084 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2081 + *(_DWORD *)(a2 + 16) * v2082));
    v2085 = v2083[1];
    *v2084 = *v2083;
    v2084[1] = v2085;
LABEL_1072:
    v2092 = v2074 + 1;
    while (v2092 != v2077)
    {
      ++v2076;
      v2093 = *v2092++;
      v2078 = v2093;
      if (v2093 != -1)
      {
        v2074 = v2092 - 1;
        v2079 = v2076;
        v2080 = *v1883;
        if (v2040)
          goto LABEL_1068;
        goto LABEL_1070;
      }
    }
    v2069 = *(_DWORD *)(a1 + 10812);
LABEL_1062:
    ++v2070;
    ++v2071;
    if (v2070 < v2069)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1082:
  v2097 = *(_DWORD *)(a1 + 12252);
  if (!v2097)
    goto LABEL_1105;
  v2098 = 0;
  v2099 = a4[24];
  while (2)
  {
    v2100 = *(_QWORD *)(a1 + 12328);
    v2101 = *(_DWORD *)(a1 + 12352) * v2098;
    v2102 = (uint64_t *)(v2100 + 8 * v2101);
    v2103 = *(_DWORD *)(a1 + 12248);
    if (v2103 && *v2102 == -1)
    {
      v2104 = 0;
      v2121 = 8 * (v2103 + v2101) - 8 * v2101 - 8;
      v2122 = v2100 + 8 * v2101;
      while (v2121)
      {
        v2102 = (uint64_t *)(v2122 + 8);
        ++v2104;
        v2123 = *(_QWORD *)(v2122 + 8);
        v2121 -= 8;
        v2122 += 8;
        if (v2123 != -1)
          goto LABEL_1089;
      }
      goto LABEL_1085;
    }
    v2104 = 0;
LABEL_1089:
    v2105 = (uint64_t *)(v2100 + 8 * (v2101 + v2103));
    if (v2102 == v2105)
      goto LABEL_1085;
    v2106 = *v2102;
    v2107 = v2104;
    v2108 = *v1883;
    if (!v2040)
    {
LABEL_1093:
      v2110 = *(_DWORD *)(v2108 + 4 * v2107);
      v2109 = *v2099;
      goto LABEL_1094;
    }
LABEL_1091:
    v2109 = *v2099;
    v2110 = *(_DWORD *)(v2108 + 4 * v2107);
    if (*v2099 >= v2110)
    {
LABEL_1094:
      v2114 = (_QWORD *)(*(_QWORD *)(a1 + 12256) + 8 * v2106);
      v2115 = *(unsigned int *)(a2 + 16);
      v2116 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2110 + (_DWORD)v2115 * v2109));
      v2117 = v2114[1];
      v2118 = v2114[2];
      *v2116 = *v2114;
      v2116[v2115] = v2117;
      v2116[2 * v2115] = v2118;
      goto LABEL_1095;
    }
    v2111 = *(_QWORD *)(a1 + 12256) + 8 * v2106;
    v2112 = *(_QWORD *)a2 + 8 * (v2109 + *(_DWORD *)(a2 + 16) * v2110);
    v2113 = *(_OWORD *)v2111;
    *(_QWORD *)(v2112 + 16) = *(_QWORD *)(v2111 + 16);
    *(_OWORD *)v2112 = v2113;
LABEL_1095:
    v2119 = v2102 + 1;
    while (v2119 != v2105)
    {
      ++v2104;
      v2120 = *v2119++;
      v2106 = v2120;
      if (v2120 != -1)
      {
        v2102 = v2119 - 1;
        v2107 = v2104;
        v2108 = *v1883;
        if (v2040)
          goto LABEL_1091;
        goto LABEL_1093;
      }
    }
    v2097 = *(_DWORD *)(a1 + 12252);
LABEL_1085:
    ++v2098;
    ++v2099;
    if (v2098 < v2097)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1105:
  v2124 = *(_DWORD *)(a1 + 13692);
  if (!v2124)
    goto LABEL_1128;
  v2125 = 0;
  v2126 = a4[27];
  while (2)
  {
    v2127 = *(_QWORD *)(a1 + 13768);
    v2128 = *(_DWORD *)(a1 + 13792) * v2125;
    v2129 = (uint64_t *)(v2127 + 8 * v2128);
    v2130 = *(_DWORD *)(a1 + 13688);
    if (v2130 && *v2129 == -1)
    {
      v2131 = 0;
      v2148 = 8 * (v2130 + v2128) - 8 * v2128 - 8;
      v2149 = v2127 + 8 * v2128;
      while (v2148)
      {
        v2129 = (uint64_t *)(v2149 + 8);
        ++v2131;
        v2150 = *(_QWORD *)(v2149 + 8);
        v2148 -= 8;
        v2149 += 8;
        if (v2150 != -1)
          goto LABEL_1112;
      }
      goto LABEL_1108;
    }
    v2131 = 0;
LABEL_1112:
    v2132 = (uint64_t *)(v2127 + 8 * (v2128 + v2130));
    if (v2129 == v2132)
      goto LABEL_1108;
    v2133 = *v2129;
    v2134 = v2131;
    v2135 = *v1883;
    if (!v2040)
    {
LABEL_1116:
      v2137 = *(_DWORD *)(v2135 + 4 * v2134);
      v2136 = *v2126;
      goto LABEL_1117;
    }
LABEL_1114:
    v2136 = *v2126;
    v2137 = *(_DWORD *)(v2135 + 4 * v2134);
    if (*v2126 >= v2137)
    {
LABEL_1117:
      v2141 = (_QWORD *)(*(_QWORD *)(a1 + 13696) + 8 * v2133);
      v2142 = *(unsigned int *)(a2 + 16);
      v2143 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2137 + (_DWORD)v2142 * v2136));
      v2144 = v2141[1];
      v2145 = v2141[2];
      *v2143 = *v2141;
      v2143[v2142] = v2144;
      v2143[2 * v2142] = v2145;
      goto LABEL_1118;
    }
    v2138 = *(_QWORD *)(a1 + 13696) + 8 * v2133;
    v2139 = *(_QWORD *)a2 + 8 * (v2136 + *(_DWORD *)(a2 + 16) * v2137);
    v2140 = *(_OWORD *)v2138;
    *(_QWORD *)(v2139 + 16) = *(_QWORD *)(v2138 + 16);
    *(_OWORD *)v2139 = v2140;
LABEL_1118:
    v2146 = v2129 + 1;
    while (v2146 != v2132)
    {
      ++v2131;
      v2147 = *v2146++;
      v2133 = v2147;
      if (v2147 != -1)
      {
        v2129 = v2146 - 1;
        v2134 = v2131;
        v2135 = *v1883;
        if (v2040)
          goto LABEL_1114;
        goto LABEL_1116;
      }
    }
    v2124 = *(_DWORD *)(a1 + 13692);
LABEL_1108:
    ++v2125;
    ++v2126;
    if (v2125 < v2124)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1128:
  v2151 = *(_DWORD *)(a1 + 588);
  if (!v2151)
    goto LABEL_1151;
  v2152 = 0;
  v2153 = *a4;
  while (2)
  {
    v2154 = *(_QWORD *)(a1 + 664);
    v2155 = *(_DWORD *)(a1 + 688) * v2152;
    v2156 = (uint64_t *)(v2154 + 8 * v2155);
    v2157 = *(_DWORD *)(a1 + 584);
    if (v2157 && *v2156 == -1)
    {
      v2158 = 0;
      v2201 = 8 * (v2157 + v2155) - 8 * v2155 - 8;
      v2202 = v2154 + 8 * v2155;
      while (v2201)
      {
        v2156 = (uint64_t *)(v2202 + 8);
        ++v2158;
        v2203 = *(_QWORD *)(v2202 + 8);
        v2201 -= 8;
        v2202 += 8;
        if (v2203 != -1)
          goto LABEL_1135;
      }
      goto LABEL_1131;
    }
    v2158 = 0;
LABEL_1135:
    v2159 = (uint64_t *)(v2154 + 8 * (v2155 + v2157));
    if (v2156 == v2159)
      goto LABEL_1131;
    v2160 = *v2156;
    v2161 = v2158;
    v2162 = a3[12];
    if (!v2040)
    {
LABEL_1139:
      v2164 = *(_DWORD *)(v2162 + 4 * v2161);
      v2163 = *v2153;
      goto LABEL_1140;
    }
LABEL_1137:
    v2163 = *v2153;
    v2164 = *(_DWORD *)(v2162 + 4 * v2161);
    if (*v2153 >= v2164)
    {
LABEL_1140:
      v2180 = *(_QWORD *)(a1 + 592) + 8 * v2160;
      v2181 = *(unsigned int *)(a2 + 16);
      v2182 = *(_OWORD *)v2180;
      v2183 = *(_QWORD *)a2 + 8 * (v2164 + (_DWORD)v2181 * v2163);
      v2184 = *(_OWORD *)(v2180 + 24);
      v2185 = *(_QWORD *)(v2180 + 40);
      v2186 = *(_OWORD *)(v2180 + 48);
      v2187 = *(_QWORD *)(v2180 + 64);
      v2188 = *(_OWORD *)(v2180 + 72);
      v2189 = *(_QWORD *)(v2180 + 88);
      v2190 = *(_OWORD *)(v2180 + 96);
      v2191 = *(_QWORD *)(v2180 + 112);
      v2192 = *(_OWORD *)(v2180 + 120);
      v2193 = *(_QWORD *)(v2180 + 136);
      *(_QWORD *)(v2183 + 16) = *(_QWORD *)(v2180 + 16);
      *(_OWORD *)v2183 = v2182;
      v2194 = v2183 + 8 * v2181;
      *(_QWORD *)(v2194 + 16) = v2185;
      *(_OWORD *)v2194 = v2184;
      v2195 = v2183 + 16 * v2181;
      *(_QWORD *)(v2195 + 16) = v2187;
      *(_OWORD *)v2195 = v2186;
      v2196 = v2183 + 24 * v2181;
      *(_QWORD *)(v2196 + 16) = v2189;
      *(_OWORD *)v2196 = v2188;
      v2197 = v2183 + 32 * v2181;
      *(_QWORD *)(v2197 + 16) = v2191;
      *(_OWORD *)v2197 = v2190;
      v2198 = v2183 + 40 * v2181;
      *(_QWORD *)(v2198 + 16) = v2193;
      *(_OWORD *)v2198 = v2192;
      goto LABEL_1141;
    }
    v2165 = *(_QWORD *)(a1 + 592) + 8 * v2160;
    v2166 = *(unsigned int *)(a2 + 16);
    v2167 = *(_QWORD *)a2 + 8 * (v2163 + (_DWORD)v2166 * v2164);
    *(_QWORD *)&v2168 = *(_QWORD *)(v2165 + 16);
    v2169 = *(int64x2_t *)(v2165 + 24);
    *(_QWORD *)&v2170 = *(_QWORD *)(v2165 + 64);
    v2171 = *(int64x2_t *)(v2165 + 48);
    v2172 = *(int64x2_t *)(v2165 + 72);
    *(_QWORD *)&v2173 = *(_QWORD *)(v2165 + 112);
    v2174 = *(int64x2_t *)(v2165 + 96);
    v2175 = *(int64x2_t *)(v2165 + 120);
    v2176 = vzip1q_s64(*(int64x2_t *)v2165, v2169);
    v2177 = vzip2q_s64(*(int64x2_t *)v2165, v2169);
    *((_QWORD *)&v2168 + 1) = *(_QWORD *)(v2165 + 40);
    *((_QWORD *)&v2170 + 1) = *(_QWORD *)(v2165 + 88);
    *((_QWORD *)&v2173 + 1) = *(_QWORD *)(v2165 + 136);
    *(int64x2_t *)(v2167 + 16) = vzip1q_s64(v2171, v2172);
    *(int64x2_t *)(v2167 + 32) = vzip1q_s64(v2174, v2175);
    *(int64x2_t *)v2167 = v2176;
    v2178 = (int64x2_t *)(v2167 + 8 * v2166);
    v2178[1] = vzip1q_s64(vdupq_laneq_s64(v2171, 1), vdupq_laneq_s64(v2172, 1));
    v2178[2] = vzip2q_s64(v2174, v2175);
    *v2178 = v2177;
    v2179 = (_OWORD *)(v2167 + 16 * v2166);
    v2179[1] = v2170;
    v2179[2] = v2173;
    *v2179 = v2168;
LABEL_1141:
    v2199 = v2156 + 1;
    while (v2199 != v2159)
    {
      ++v2158;
      v2200 = *v2199++;
      v2160 = v2200;
      if (v2200 != -1)
      {
        v2156 = v2199 - 1;
        v2161 = v2158;
        v2162 = a3[12];
        if (v2040)
          goto LABEL_1137;
        goto LABEL_1139;
      }
    }
    v2151 = *(_DWORD *)(a1 + 588);
LABEL_1131:
    ++v2152;
    ++v2153;
    if (v2152 < v2151)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1151:
  v2204 = *(_DWORD *)(a1 + 2028);
  if (!v2204)
    goto LABEL_1174;
  v2205 = 0;
  v2206 = a4[3];
  while (2)
  {
    v2207 = *(_QWORD *)(a1 + 2104);
    v2208 = *(_DWORD *)(a1 + 2128) * v2205;
    v2209 = (uint64_t *)(v2207 + 8 * v2208);
    v2210 = *(_DWORD *)(a1 + 2024);
    if (v2210 && *v2209 == -1)
    {
      v2211 = 0;
      v2268 = 8 * (v2210 + v2208) - 8 * v2208 - 8;
      v2269 = v2207 + 8 * v2208;
      while (v2268)
      {
        v2209 = (uint64_t *)(v2269 + 8);
        ++v2211;
        v2270 = *(_QWORD *)(v2269 + 8);
        v2268 -= 8;
        v2269 += 8;
        if (v2270 != -1)
          goto LABEL_1158;
      }
      goto LABEL_1154;
    }
    v2211 = 0;
LABEL_1158:
    v2212 = (uint64_t *)(v2207 + 8 * (v2208 + v2210));
    if (v2209 == v2212)
      goto LABEL_1154;
    v2213 = *v2209;
    v2214 = v2211;
    v2215 = a3[12];
    if (!v2040)
    {
LABEL_1162:
      v2217 = *(_DWORD *)(v2215 + 4 * v2214);
      v2216 = *v2206;
      goto LABEL_1163;
    }
LABEL_1160:
    v2216 = *v2206;
    v2217 = *(_DWORD *)(v2215 + 4 * v2214);
    if (*v2206 >= v2217)
    {
LABEL_1163:
      v2238 = *(_QWORD *)(a1 + 2032) + 8 * v2213;
      v2239 = *(unsigned int *)(a2 + 16);
      v2240 = *(_OWORD *)v2238;
      v2241 = *(_QWORD *)a2 + 8 * (v2217 + (_DWORD)v2239 * v2216);
      v2242 = *(_OWORD *)(v2238 + 24);
      v2243 = *(_QWORD *)(v2238 + 40);
      v2244 = *(_OWORD *)(v2238 + 48);
      v2245 = *(_QWORD *)(v2238 + 64);
      v2246 = *(_OWORD *)(v2238 + 72);
      v2247 = *(_QWORD *)(v2238 + 88);
      v2248 = *(_OWORD *)(v2238 + 96);
      v2249 = *(_QWORD *)(v2238 + 112);
      v2250 = *(_OWORD *)(v2238 + 120);
      v2251 = *(_QWORD *)(v2238 + 136);
      v2252 = *(_OWORD *)(v2238 + 144);
      v2253 = *(_QWORD *)(v2238 + 160);
      v2254 = *(_OWORD *)(v2238 + 168);
      v2255 = *(_QWORD *)(v2238 + 184);
      v2256 = *(_OWORD *)(v2238 + 192);
      v2257 = *(_QWORD *)(v2238 + 208);
      *(_QWORD *)(v2241 + 16) = *(_QWORD *)(v2238 + 16);
      *(_OWORD *)v2241 = v2240;
      v2258 = v2241 + 8 * v2239;
      *(_QWORD *)(v2258 + 16) = v2243;
      *(_OWORD *)v2258 = v2242;
      v2259 = v2241 + 16 * v2239;
      *(_QWORD *)(v2259 + 16) = v2245;
      *(_OWORD *)v2259 = v2244;
      v2260 = v2241 + 24 * v2239;
      *(_QWORD *)(v2260 + 16) = v2247;
      *(_OWORD *)v2260 = v2246;
      v2261 = v2241 + 32 * v2239;
      *(_QWORD *)(v2261 + 16) = v2249;
      *(_OWORD *)v2261 = v2248;
      v2262 = v2241 + 40 * v2239;
      *(_QWORD *)(v2262 + 16) = v2251;
      *(_OWORD *)v2262 = v2250;
      v2263 = v2241 + 48 * v2239;
      *(_QWORD *)(v2263 + 16) = v2253;
      *(_OWORD *)v2263 = v2252;
      v2264 = v2241 + 56 * v2239;
      *(_QWORD *)(v2264 + 16) = v2255;
      *(_OWORD *)v2264 = v2254;
      v2265 = v2241 + (v2239 << 6);
      *(_QWORD *)(v2265 + 16) = v2257;
      *(_OWORD *)v2265 = v2256;
      goto LABEL_1164;
    }
    v2218 = *(unsigned int *)(a2 + 16);
    v2219 = *(_QWORD *)(a1 + 2032) + 8 * v2213;
    *(_QWORD *)&v2220 = *(_QWORD *)(v2219 + 16);
    v2221 = *(_QWORD *)a2 + 8 * (v2216 + (_DWORD)v2218 * v2217);
    v2222 = *(int64x2_t *)(v2219 + 24);
    *(_QWORD *)&v2223 = *(_QWORD *)(v2219 + 64);
    v2224 = *(int64x2_t *)(v2219 + 48);
    v2225 = *(int64x2_t *)(v2219 + 72);
    *(_QWORD *)&v2226 = *(_QWORD *)(v2219 + 112);
    v2227 = *(int64x2_t *)(v2219 + 96);
    v2228 = *(int64x2_t *)(v2219 + 120);
    *(_QWORD *)&v2229 = *(_QWORD *)(v2219 + 160);
    v2230 = *(int64x2_t *)(v2219 + 144);
    v2231 = *(int64x2_t *)(v2219 + 168);
    v2232 = *(_QWORD *)(v2219 + 208);
    v2233 = *(_OWORD *)(v2219 + 192);
    v2234 = vzip1q_s64(*(int64x2_t *)v2219, v2222);
    v2235 = vzip2q_s64(*(int64x2_t *)v2219, v2222);
    *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v2219 + 40);
    *((_QWORD *)&v2223 + 1) = *(_QWORD *)(v2219 + 88);
    *((_QWORD *)&v2226 + 1) = *(_QWORD *)(v2219 + 136);
    *((_QWORD *)&v2229 + 1) = *(_QWORD *)(v2219 + 184);
    *(int64x2_t *)(v2221 + 32) = vzip1q_s64(v2227, v2228);
    *(int64x2_t *)(v2221 + 48) = vzip1q_s64(v2230, v2231);
    *(_QWORD *)(v2221 + 64) = v2233;
    *(int64x2_t *)v2221 = v2234;
    *(int64x2_t *)(v2221 + 16) = vzip1q_s64(v2224, v2225);
    v2236 = (int64x2_t *)(v2221 + 8 * v2218);
    v2236[2] = vzip2q_s64(v2227, v2228);
    v2236[3] = vzip2q_s64(v2230, v2231);
    *v2236 = v2235;
    v2236[1] = vzip2q_s64(v2224, v2225);
    v2236[4].i64[0] = *((_QWORD *)&v2233 + 1);
    v2237 = v2221 + 16 * v2218;
    *(_QWORD *)(v2237 + 64) = v2232;
    *(_OWORD *)(v2237 + 32) = v2226;
    *(_OWORD *)(v2237 + 48) = v2229;
    *(_OWORD *)v2237 = v2220;
    *(_OWORD *)(v2237 + 16) = v2223;
LABEL_1164:
    v2266 = v2209 + 1;
    while (v2266 != v2212)
    {
      ++v2211;
      v2267 = *v2266++;
      v2213 = v2267;
      if (v2267 != -1)
      {
        v2209 = v2266 - 1;
        v2214 = v2211;
        v2215 = a3[12];
        if (v2040)
          goto LABEL_1160;
        goto LABEL_1162;
      }
    }
    v2204 = *(_DWORD *)(a1 + 2028);
LABEL_1154:
    ++v2205;
    ++v2206;
    if (v2205 < v2204)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1174:
  v2271 = *(_DWORD *)(a1 + 3468);
  if (!v2271)
    goto LABEL_1197;
  v2272 = 0;
  v2273 = a4[6];
  while (2)
  {
    v2274 = *(_QWORD *)(a1 + 3544);
    v2275 = *(_DWORD *)(a1 + 3568) * v2272;
    v2276 = (uint64_t *)(v2274 + 8 * v2275);
    v2277 = *(_DWORD *)(a1 + 3464);
    if (v2277 && *v2276 == -1)
    {
      v2278 = 0;
      v2321 = 8 * (v2277 + v2275) - 8 * v2275 - 8;
      v2322 = v2274 + 8 * v2275;
      while (v2321)
      {
        v2276 = (uint64_t *)(v2322 + 8);
        ++v2278;
        v2323 = *(_QWORD *)(v2322 + 8);
        v2321 -= 8;
        v2322 += 8;
        if (v2323 != -1)
          goto LABEL_1181;
      }
      goto LABEL_1177;
    }
    v2278 = 0;
LABEL_1181:
    v2279 = (uint64_t *)(v2274 + 8 * (v2275 + v2277));
    if (v2276 == v2279)
      goto LABEL_1177;
    v2280 = *v2276;
    v2281 = v2278;
    v2282 = a3[12];
    if (!v2040)
    {
LABEL_1185:
      v2284 = *(_DWORD *)(v2282 + 4 * v2281);
      v2283 = *v2273;
      goto LABEL_1186;
    }
LABEL_1183:
    v2283 = *v2273;
    v2284 = *(_DWORD *)(v2282 + 4 * v2281);
    if (*v2273 >= v2284)
    {
LABEL_1186:
      v2300 = *(_QWORD *)(a1 + 3472) + 8 * v2280;
      v2301 = *(unsigned int *)(a2 + 16);
      v2302 = *(_OWORD *)v2300;
      v2303 = *(_QWORD *)a2 + 8 * (v2284 + (_DWORD)v2301 * v2283);
      v2304 = *(_OWORD *)(v2300 + 24);
      v2305 = *(_QWORD *)(v2300 + 40);
      v2306 = *(_OWORD *)(v2300 + 48);
      v2307 = *(_QWORD *)(v2300 + 64);
      v2308 = *(_OWORD *)(v2300 + 72);
      v2309 = *(_QWORD *)(v2300 + 88);
      v2310 = *(_OWORD *)(v2300 + 96);
      v2311 = *(_QWORD *)(v2300 + 112);
      v2312 = *(_OWORD *)(v2300 + 120);
      v2313 = *(_QWORD *)(v2300 + 136);
      *(_QWORD *)(v2303 + 16) = *(_QWORD *)(v2300 + 16);
      *(_OWORD *)v2303 = v2302;
      v2314 = v2303 + 8 * v2301;
      *(_QWORD *)(v2314 + 16) = v2305;
      *(_OWORD *)v2314 = v2304;
      v2315 = v2303 + 16 * v2301;
      *(_QWORD *)(v2315 + 16) = v2307;
      *(_OWORD *)v2315 = v2306;
      v2316 = v2303 + 24 * v2301;
      *(_QWORD *)(v2316 + 16) = v2309;
      *(_OWORD *)v2316 = v2308;
      v2317 = v2303 + 32 * v2301;
      *(_QWORD *)(v2317 + 16) = v2311;
      *(_OWORD *)v2317 = v2310;
      v2318 = v2303 + 40 * v2301;
      *(_QWORD *)(v2318 + 16) = v2313;
      *(_OWORD *)v2318 = v2312;
      goto LABEL_1187;
    }
    v2285 = *(_QWORD *)(a1 + 3472) + 8 * v2280;
    v2286 = *(unsigned int *)(a2 + 16);
    v2287 = *(_QWORD *)a2 + 8 * (v2283 + (_DWORD)v2286 * v2284);
    *(_QWORD *)&v2288 = *(_QWORD *)(v2285 + 16);
    v2289 = *(int64x2_t *)(v2285 + 24);
    *(_QWORD *)&v2290 = *(_QWORD *)(v2285 + 64);
    v2291 = *(int64x2_t *)(v2285 + 48);
    v2292 = *(int64x2_t *)(v2285 + 72);
    *(_QWORD *)&v2293 = *(_QWORD *)(v2285 + 112);
    v2294 = *(int64x2_t *)(v2285 + 96);
    v2295 = *(int64x2_t *)(v2285 + 120);
    v2296 = vzip1q_s64(*(int64x2_t *)v2285, v2289);
    v2297 = vzip2q_s64(*(int64x2_t *)v2285, v2289);
    *((_QWORD *)&v2288 + 1) = *(_QWORD *)(v2285 + 40);
    *((_QWORD *)&v2290 + 1) = *(_QWORD *)(v2285 + 88);
    *((_QWORD *)&v2293 + 1) = *(_QWORD *)(v2285 + 136);
    *(int64x2_t *)(v2287 + 16) = vzip1q_s64(v2291, v2292);
    *(int64x2_t *)(v2287 + 32) = vzip1q_s64(v2294, v2295);
    *(int64x2_t *)v2287 = v2296;
    v2298 = (int64x2_t *)(v2287 + 8 * v2286);
    v2298[1] = vzip1q_s64(vdupq_laneq_s64(v2291, 1), vdupq_laneq_s64(v2292, 1));
    v2298[2] = vzip2q_s64(v2294, v2295);
    *v2298 = v2297;
    v2299 = (_OWORD *)(v2287 + 16 * v2286);
    v2299[1] = v2290;
    v2299[2] = v2293;
    *v2299 = v2288;
LABEL_1187:
    v2319 = v2276 + 1;
    while (v2319 != v2279)
    {
      ++v2278;
      v2320 = *v2319++;
      v2280 = v2320;
      if (v2320 != -1)
      {
        v2276 = v2319 - 1;
        v2281 = v2278;
        v2282 = a3[12];
        if (v2040)
          goto LABEL_1183;
        goto LABEL_1185;
      }
    }
    v2271 = *(_DWORD *)(a1 + 3468);
LABEL_1177:
    ++v2272;
    ++v2273;
    if (v2272 < v2271)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1197:
  v2324 = *(_DWORD *)(a1 + 4908);
  if (!v2324)
    goto LABEL_1220;
  v2325 = 0;
  v2326 = a4[9];
  while (2)
  {
    v2327 = *(_QWORD *)(a1 + 4984);
    v2328 = *(_DWORD *)(a1 + 5008) * v2325;
    v2329 = (uint64_t *)(v2327 + 8 * v2328);
    v2330 = *(_DWORD *)(a1 + 4904);
    if (v2330 && *v2329 == -1)
    {
      v2331 = 0;
      v2374 = 8 * (v2330 + v2328) - 8 * v2328 - 8;
      v2375 = v2327 + 8 * v2328;
      while (v2374)
      {
        v2329 = (uint64_t *)(v2375 + 8);
        ++v2331;
        v2376 = *(_QWORD *)(v2375 + 8);
        v2374 -= 8;
        v2375 += 8;
        if (v2376 != -1)
          goto LABEL_1204;
      }
      goto LABEL_1200;
    }
    v2331 = 0;
LABEL_1204:
    v2332 = (uint64_t *)(v2327 + 8 * (v2328 + v2330));
    if (v2329 == v2332)
      goto LABEL_1200;
    v2333 = *v2329;
    v2334 = v2331;
    v2335 = a3[12];
    if (!v2040)
    {
LABEL_1208:
      v2337 = *(_DWORD *)(v2335 + 4 * v2334);
      v2336 = *v2326;
      goto LABEL_1209;
    }
LABEL_1206:
    v2336 = *v2326;
    v2337 = *(_DWORD *)(v2335 + 4 * v2334);
    if (*v2326 >= v2337)
    {
LABEL_1209:
      v2353 = *(_QWORD *)(a1 + 4912) + 8 * v2333;
      v2354 = *(unsigned int *)(a2 + 16);
      v2355 = *(_OWORD *)v2353;
      v2356 = *(_QWORD *)a2 + 8 * (v2337 + (_DWORD)v2354 * v2336);
      v2357 = *(_OWORD *)(v2353 + 24);
      v2358 = *(_QWORD *)(v2353 + 40);
      v2359 = *(_OWORD *)(v2353 + 48);
      v2360 = *(_QWORD *)(v2353 + 64);
      v2361 = *(_OWORD *)(v2353 + 72);
      v2362 = *(_QWORD *)(v2353 + 88);
      v2363 = *(_OWORD *)(v2353 + 96);
      v2364 = *(_QWORD *)(v2353 + 112);
      v2365 = *(_OWORD *)(v2353 + 120);
      v2366 = *(_QWORD *)(v2353 + 136);
      *(_QWORD *)(v2356 + 16) = *(_QWORD *)(v2353 + 16);
      *(_OWORD *)v2356 = v2355;
      v2367 = v2356 + 8 * v2354;
      *(_QWORD *)(v2367 + 16) = v2358;
      *(_OWORD *)v2367 = v2357;
      v2368 = v2356 + 16 * v2354;
      *(_QWORD *)(v2368 + 16) = v2360;
      *(_OWORD *)v2368 = v2359;
      v2369 = v2356 + 24 * v2354;
      *(_QWORD *)(v2369 + 16) = v2362;
      *(_OWORD *)v2369 = v2361;
      v2370 = v2356 + 32 * v2354;
      *(_QWORD *)(v2370 + 16) = v2364;
      *(_OWORD *)v2370 = v2363;
      v2371 = v2356 + 40 * v2354;
      *(_QWORD *)(v2371 + 16) = v2366;
      *(_OWORD *)v2371 = v2365;
      goto LABEL_1210;
    }
    v2338 = *(_QWORD *)(a1 + 4912) + 8 * v2333;
    v2339 = *(unsigned int *)(a2 + 16);
    v2340 = *(_QWORD *)a2 + 8 * (v2336 + (_DWORD)v2339 * v2337);
    *(_QWORD *)&v2341 = *(_QWORD *)(v2338 + 16);
    v2342 = *(int64x2_t *)(v2338 + 24);
    *(_QWORD *)&v2343 = *(_QWORD *)(v2338 + 64);
    v2344 = *(int64x2_t *)(v2338 + 48);
    v2345 = *(int64x2_t *)(v2338 + 72);
    *(_QWORD *)&v2346 = *(_QWORD *)(v2338 + 112);
    v2347 = *(int64x2_t *)(v2338 + 96);
    v2348 = *(int64x2_t *)(v2338 + 120);
    v2349 = vzip1q_s64(*(int64x2_t *)v2338, v2342);
    v2350 = vzip2q_s64(*(int64x2_t *)v2338, v2342);
    *((_QWORD *)&v2341 + 1) = *(_QWORD *)(v2338 + 40);
    *((_QWORD *)&v2343 + 1) = *(_QWORD *)(v2338 + 88);
    *((_QWORD *)&v2346 + 1) = *(_QWORD *)(v2338 + 136);
    *(int64x2_t *)(v2340 + 16) = vzip1q_s64(v2344, v2345);
    *(int64x2_t *)(v2340 + 32) = vzip1q_s64(v2347, v2348);
    *(int64x2_t *)v2340 = v2349;
    v2351 = (int64x2_t *)(v2340 + 8 * v2339);
    v2351[1] = vzip1q_s64(vdupq_laneq_s64(v2344, 1), vdupq_laneq_s64(v2345, 1));
    v2351[2] = vzip2q_s64(v2347, v2348);
    *v2351 = v2350;
    v2352 = (_OWORD *)(v2340 + 16 * v2339);
    v2352[1] = v2343;
    v2352[2] = v2346;
    *v2352 = v2341;
LABEL_1210:
    v2372 = v2329 + 1;
    while (v2372 != v2332)
    {
      ++v2331;
      v2373 = *v2372++;
      v2333 = v2373;
      if (v2373 != -1)
      {
        v2329 = v2372 - 1;
        v2334 = v2331;
        v2335 = a3[12];
        if (v2040)
          goto LABEL_1206;
        goto LABEL_1208;
      }
    }
    v2324 = *(_DWORD *)(a1 + 4908);
LABEL_1200:
    ++v2325;
    ++v2326;
    if (v2325 < v2324)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1220:
  v2377 = *(_DWORD *)(a1 + 6348);
  if (!v2377)
    goto LABEL_1243;
  v2378 = 0;
  v2379 = a4[12];
  while (2)
  {
    v2380 = *(_QWORD *)(a1 + 6424);
    v2381 = *(_DWORD *)(a1 + 6448) * v2378;
    v2382 = (uint64_t *)(v2380 + 8 * v2381);
    v2383 = *(_DWORD *)(a1 + 6344);
    if (v2383 && *v2382 == -1)
    {
      v2384 = 0;
      v2410 = 8 * (v2383 + v2381) - 8 * v2381 - 8;
      v2411 = v2380 + 8 * v2381;
      while (v2410)
      {
        v2382 = (uint64_t *)(v2411 + 8);
        ++v2384;
        v2412 = *(_QWORD *)(v2411 + 8);
        v2410 -= 8;
        v2411 += 8;
        if (v2412 != -1)
          goto LABEL_1227;
      }
      goto LABEL_1223;
    }
    v2384 = 0;
LABEL_1227:
    v2385 = (uint64_t *)(v2380 + 8 * (v2381 + v2383));
    if (v2382 == v2385)
      goto LABEL_1223;
    v2386 = *v2382;
    v2387 = v2384;
    v2388 = a3[12];
    if (!v2040)
    {
LABEL_1231:
      v2390 = *(_DWORD *)(v2388 + 4 * v2387);
      v2389 = *v2379;
      goto LABEL_1232;
    }
LABEL_1229:
    v2389 = *v2379;
    v2390 = *(_DWORD *)(v2388 + 4 * v2387);
    if (*v2379 >= v2390)
    {
LABEL_1232:
      v2402 = *(_QWORD *)(a1 + 6352) + 8 * v2386;
      v2392 = *(unsigned int *)(a2 + 16);
      v2393 = *(_QWORD *)a2 + 8 * (v2390 + (_DWORD)v2392 * v2389);
      v2403 = *(_OWORD *)v2402;
      v2404 = *(_OWORD *)(v2402 + 24);
      v2405 = *(_QWORD *)(v2402 + 40);
      v2394 = *(int8x16_t *)(v2402 + 48);
      v2398 = *(_QWORD *)(v2402 + 64);
      v2395 = vextq_s8(v2394, v2394, 8uLL).u64[0];
      *(_QWORD *)(v2393 + 16) = *(_QWORD *)(v2402 + 16);
      *(_OWORD *)v2393 = v2403;
      v2406 = v2393 + 8 * v2392;
      *(_QWORD *)(v2406 + 16) = v2405;
      *(_OWORD *)v2406 = v2404;
      goto LABEL_1233;
    }
    v2391 = *(_QWORD *)(a1 + 6352) + 8 * v2386;
    v2392 = *(unsigned int *)(a2 + 16);
    v2393 = *(_QWORD *)a2 + 8 * (v2389 + (_DWORD)v2392 * v2390);
    v2394.i64[0] = *(_QWORD *)(v2391 + 16);
    v2395 = *(_QWORD *)(v2391 + 40);
    v2396 = *(int64x2_t *)(v2391 + 24);
    v2397 = *(_OWORD *)(v2391 + 48);
    v2398 = *(_QWORD *)(v2391 + 64);
    v2399 = vzip1q_s64(*(int64x2_t *)v2391, v2396);
    v2400 = vzip2q_s64(*(int64x2_t *)v2391, v2396);
    *(_QWORD *)(v2393 + 16) = v2397;
    *(int64x2_t *)v2393 = v2399;
    v2401 = (int64x2_t *)(v2393 + 8 * v2392);
    *v2401 = v2400;
    v2401[1].i64[0] = *((_QWORD *)&v2397 + 1);
LABEL_1233:
    v2407 = (int8x16_t *)(v2393 + 16 * v2392);
    v2407[1].i64[0] = v2398;
    v2394.i64[1] = v2395;
    *v2407 = v2394;
    v2408 = v2382 + 1;
    while (v2408 != v2385)
    {
      ++v2384;
      v2409 = *v2408++;
      v2386 = v2409;
      if (v2409 != -1)
      {
        v2382 = v2408 - 1;
        v2387 = v2384;
        v2388 = a3[12];
        if (v2040)
          goto LABEL_1229;
        goto LABEL_1231;
      }
    }
    v2377 = *(_DWORD *)(a1 + 6348);
LABEL_1223:
    ++v2378;
    ++v2379;
    if (v2378 < v2377)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1243:
  v2413 = *(_DWORD *)(a1 + 7788);
  if (!v2413)
    goto LABEL_1266;
  v2414 = 0;
  v2415 = a4[15];
  while (2)
  {
    v2416 = *(_QWORD *)(a1 + 7864);
    v2417 = *(_DWORD *)(a1 + 7888) * v2414;
    v2418 = (uint64_t *)(v2416 + 8 * v2417);
    v2419 = *(_DWORD *)(a1 + 7784);
    if (v2419 && *v2418 == -1)
    {
      v2420 = 0;
      v2437 = 8 * (v2419 + v2417) - 8 * v2417 - 8;
      v2438 = v2416 + 8 * v2417;
      while (v2437)
      {
        v2418 = (uint64_t *)(v2438 + 8);
        ++v2420;
        v2439 = *(_QWORD *)(v2438 + 8);
        v2437 -= 8;
        v2438 += 8;
        if (v2439 != -1)
          goto LABEL_1250;
      }
      goto LABEL_1246;
    }
    v2420 = 0;
LABEL_1250:
    v2421 = (uint64_t *)(v2416 + 8 * (v2417 + v2419));
    if (v2418 == v2421)
      goto LABEL_1246;
    v2422 = *v2418;
    v2423 = v2420;
    v2424 = a3[12];
    if (!v2040)
    {
LABEL_1254:
      v2426 = *(_DWORD *)(v2424 + 4 * v2423);
      v2425 = *v2415;
      goto LABEL_1255;
    }
LABEL_1252:
    v2425 = *v2415;
    v2426 = *(_DWORD *)(v2424 + 4 * v2423);
    if (*v2415 >= v2426)
    {
LABEL_1255:
      v2432 = *(_QWORD *)(a1 + 7792) + 8 * v2422;
      v2433 = *(_QWORD *)a2 + 8 * (v2426 + *(_DWORD *)(a2 + 16) * v2425);
      v2434 = *(_OWORD *)v2432;
      *(_QWORD *)(v2433 + 16) = *(_QWORD *)(v2432 + 16);
      *(_OWORD *)v2433 = v2434;
      goto LABEL_1256;
    }
    v2427 = (int8x16_t *)(*(_QWORD *)(a1 + 7792) + 8 * v2422);
    v2428 = *(unsigned int *)(a2 + 16);
    v2429 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2425 + (_DWORD)v2428 * v2426));
    v2430 = v2427[1].i64[0];
    v2431 = vextq_s8(*v2427, *v2427, 8uLL).u64[0];
    *v2429 = v2427->i64[0];
    v2429[v2428] = v2431;
    v2429[2 * v2428] = v2430;
LABEL_1256:
    v2435 = v2418 + 1;
    while (v2435 != v2421)
    {
      ++v2420;
      v2436 = *v2435++;
      v2422 = v2436;
      if (v2436 != -1)
      {
        v2418 = v2435 - 1;
        v2423 = v2420;
        v2424 = a3[12];
        if (v2040)
          goto LABEL_1252;
        goto LABEL_1254;
      }
    }
    v2413 = *(_DWORD *)(a1 + 7788);
LABEL_1246:
    ++v2414;
    ++v2415;
    if (v2414 < v2413)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1266:
  v2440 = *(_DWORD *)(a1 + 9228);
  if (!v2440)
    goto LABEL_1289;
  v2441 = 0;
  v2442 = a4[18];
  while (2)
  {
    v2443 = *(_QWORD *)(a1 + 9304);
    v2444 = *(_DWORD *)(a1 + 9328) * v2441;
    v2445 = (uint64_t *)(v2443 + 8 * v2444);
    v2446 = *(_DWORD *)(a1 + 9224);
    if (v2446 && *v2445 == -1)
    {
      v2447 = 0;
      v2481 = 8 * (v2446 + v2444) - 8 * v2444 - 8;
      v2482 = v2443 + 8 * v2444;
      while (v2481)
      {
        v2445 = (uint64_t *)(v2482 + 8);
        ++v2447;
        v2483 = *(_QWORD *)(v2482 + 8);
        v2481 -= 8;
        v2482 += 8;
        if (v2483 != -1)
          goto LABEL_1273;
      }
      goto LABEL_1269;
    }
    v2447 = 0;
LABEL_1273:
    v2448 = (uint64_t *)(v2443 + 8 * (v2444 + v2446));
    if (v2445 == v2448)
      goto LABEL_1269;
    v2449 = *v2445;
    v2450 = v2447;
    v2451 = a3[12];
    if (!v2040)
    {
LABEL_1277:
      v2453 = *(_DWORD *)(v2451 + 4 * v2450);
      v2452 = *v2442;
      goto LABEL_1278;
    }
LABEL_1275:
    v2452 = *v2442;
    v2453 = *(_DWORD *)(v2451 + 4 * v2450);
    if (*v2442 >= v2453)
    {
LABEL_1278:
      v2466 = *(_QWORD *)(a1 + 9232) + 8 * v2449;
      v2467 = *(unsigned int *)(a2 + 16);
      v2468 = *(_OWORD *)v2466;
      v2469 = *(_QWORD *)a2 + 8 * (v2453 + (_DWORD)v2467 * v2452);
      v2470 = *(_OWORD *)(v2466 + 24);
      v2471 = *(_QWORD *)(v2466 + 40);
      v2472 = *(_OWORD *)(v2466 + 48);
      v2473 = *(_QWORD *)(v2466 + 64);
      v2474 = *(_OWORD *)(v2466 + 72);
      v2475 = *(_QWORD *)(v2466 + 88);
      *(_QWORD *)(v2469 + 16) = *(_QWORD *)(v2466 + 16);
      *(_OWORD *)v2469 = v2468;
      v2476 = v2469 + 8 * v2467;
      *(_QWORD *)(v2476 + 16) = v2471;
      *(_OWORD *)v2476 = v2470;
      v2477 = v2469 + 16 * v2467;
      *(_QWORD *)(v2477 + 16) = v2473;
      *(_OWORD *)v2477 = v2472;
      v2478 = v2469 + 24 * v2467;
      *(_QWORD *)(v2478 + 16) = v2475;
      *(_OWORD *)v2478 = v2474;
      goto LABEL_1279;
    }
    v2454 = *(_QWORD *)(a1 + 9232) + 8 * v2449;
    v2455 = *(unsigned int *)(a2 + 16);
    v2456 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2452 + (_DWORD)v2455 * v2453));
    v2457.i64[0] = *(_QWORD *)(v2454 + 16);
    v2458 = *(int64x2_t *)(v2454 + 24);
    v2459.i64[0] = *(_QWORD *)(v2454 + 64);
    v2460 = *(int64x2_t *)(v2454 + 48);
    v2461 = vzip1q_s64(*(int64x2_t *)v2454, v2458);
    v2462 = vzip1q_s64(v2460, *(int64x2_t *)(v2454 + 72));
    v2463 = vzip2q_s64(*(int64x2_t *)v2454, v2458);
    v2458.i64[0] = vdupq_laneq_s64(v2460, 1).u64[0];
    v2458.i64[1] = *(_QWORD *)(v2454 + 80);
    v2457.i64[1] = *(_QWORD *)(v2454 + 40);
    v2459.i64[1] = *(_QWORD *)(v2454 + 88);
    *v2456 = v2461;
    v2456[1] = v2462;
    v2464 = (int64x2_t *)((char *)v2456 + 8 * v2455);
    *v2464 = v2463;
    v2464[1] = v2458;
    v2465 = &v2456[v2455];
    *v2465 = v2457;
    v2465[1] = v2459;
LABEL_1279:
    v2479 = v2445 + 1;
    while (v2479 != v2448)
    {
      ++v2447;
      v2480 = *v2479++;
      v2449 = v2480;
      if (v2480 != -1)
      {
        v2445 = v2479 - 1;
        v2450 = v2447;
        v2451 = a3[12];
        if (v2040)
          goto LABEL_1275;
        goto LABEL_1277;
      }
    }
    v2440 = *(_DWORD *)(a1 + 9228);
LABEL_1269:
    ++v2441;
    ++v2442;
    if (v2441 < v2440)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1289:
  v2484 = *(_DWORD *)(a1 + 10668);
  if (!v2484)
    goto LABEL_1312;
  v2485 = 0;
  v2486 = a4[21];
  while (2)
  {
    v2487 = *(_QWORD *)(a1 + 10744);
    v2488 = *(_DWORD *)(a1 + 10768) * v2485;
    v2489 = (uint64_t *)(v2487 + 8 * v2488);
    v2490 = *(_DWORD *)(a1 + 10664);
    if (v2490 && *v2489 == -1)
    {
      v2491 = 0;
      v2525 = 8 * (v2490 + v2488) - 8 * v2488 - 8;
      v2526 = v2487 + 8 * v2488;
      while (v2525)
      {
        v2489 = (uint64_t *)(v2526 + 8);
        ++v2491;
        v2527 = *(_QWORD *)(v2526 + 8);
        v2525 -= 8;
        v2526 += 8;
        if (v2527 != -1)
          goto LABEL_1296;
      }
      goto LABEL_1292;
    }
    v2491 = 0;
LABEL_1296:
    v2492 = (uint64_t *)(v2487 + 8 * (v2488 + v2490));
    if (v2489 == v2492)
      goto LABEL_1292;
    v2493 = *v2489;
    v2494 = v2491;
    v2495 = a3[12];
    if (!v2040)
    {
LABEL_1300:
      v2497 = *(_DWORD *)(v2495 + 4 * v2494);
      v2496 = *v2486;
      goto LABEL_1301;
    }
LABEL_1298:
    v2496 = *v2486;
    v2497 = *(_DWORD *)(v2495 + 4 * v2494);
    if (*v2486 >= v2497)
    {
LABEL_1301:
      v2510 = *(_QWORD *)(a1 + 10672) + 8 * v2493;
      v2511 = *(unsigned int *)(a2 + 16);
      v2512 = *(_OWORD *)v2510;
      v2513 = *(_QWORD *)a2 + 8 * (v2497 + (_DWORD)v2511 * v2496);
      v2514 = *(_OWORD *)(v2510 + 24);
      v2515 = *(_QWORD *)(v2510 + 40);
      v2516 = *(_OWORD *)(v2510 + 48);
      v2517 = *(_QWORD *)(v2510 + 64);
      v2518 = *(_OWORD *)(v2510 + 72);
      v2519 = *(_QWORD *)(v2510 + 88);
      *(_QWORD *)(v2513 + 16) = *(_QWORD *)(v2510 + 16);
      *(_OWORD *)v2513 = v2512;
      v2520 = v2513 + 8 * v2511;
      *(_QWORD *)(v2520 + 16) = v2515;
      *(_OWORD *)v2520 = v2514;
      v2521 = v2513 + 16 * v2511;
      *(_QWORD *)(v2521 + 16) = v2517;
      *(_OWORD *)v2521 = v2516;
      v2522 = v2513 + 24 * v2511;
      *(_QWORD *)(v2522 + 16) = v2519;
      *(_OWORD *)v2522 = v2518;
      goto LABEL_1302;
    }
    v2498 = *(_QWORD *)(a1 + 10672) + 8 * v2493;
    v2499 = *(unsigned int *)(a2 + 16);
    v2500 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2496 + (_DWORD)v2499 * v2497));
    v2501.i64[0] = *(_QWORD *)(v2498 + 16);
    v2502 = *(int64x2_t *)(v2498 + 24);
    v2503.i64[0] = *(_QWORD *)(v2498 + 64);
    v2504 = *(int64x2_t *)(v2498 + 48);
    v2505 = vzip1q_s64(*(int64x2_t *)v2498, v2502);
    v2506 = vzip1q_s64(v2504, *(int64x2_t *)(v2498 + 72));
    v2507 = vzip2q_s64(*(int64x2_t *)v2498, v2502);
    v2502.i64[0] = vdupq_laneq_s64(v2504, 1).u64[0];
    v2502.i64[1] = *(_QWORD *)(v2498 + 80);
    v2501.i64[1] = *(_QWORD *)(v2498 + 40);
    v2503.i64[1] = *(_QWORD *)(v2498 + 88);
    *v2500 = v2505;
    v2500[1] = v2506;
    v2508 = (int64x2_t *)((char *)v2500 + 8 * v2499);
    *v2508 = v2507;
    v2508[1] = v2502;
    v2509 = &v2500[v2499];
    *v2509 = v2501;
    v2509[1] = v2503;
LABEL_1302:
    v2523 = v2489 + 1;
    while (v2523 != v2492)
    {
      ++v2491;
      v2524 = *v2523++;
      v2493 = v2524;
      if (v2524 != -1)
      {
        v2489 = v2523 - 1;
        v2494 = v2491;
        v2495 = a3[12];
        if (v2040)
          goto LABEL_1298;
        goto LABEL_1300;
      }
    }
    v2484 = *(_DWORD *)(a1 + 10668);
LABEL_1292:
    ++v2485;
    ++v2486;
    if (v2485 < v2484)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1312:
  v2528 = *(_DWORD *)(a1 + 12108);
  if (!v2528)
    goto LABEL_1335;
  v2529 = 0;
  v2530 = a4[24];
  while (2)
  {
    v2531 = *(_QWORD *)(a1 + 12184);
    v2532 = *(_DWORD *)(a1 + 12208) * v2529;
    v2533 = (uint64_t *)(v2531 + 8 * v2532);
    v2534 = *(_DWORD *)(a1 + 12104);
    if (v2534 && *v2533 == -1)
    {
      v2535 = 0;
      v2561 = 8 * (v2534 + v2532) - 8 * v2532 - 8;
      v2562 = v2531 + 8 * v2532;
      while (v2561)
      {
        v2533 = (uint64_t *)(v2562 + 8);
        ++v2535;
        v2563 = *(_QWORD *)(v2562 + 8);
        v2561 -= 8;
        v2562 += 8;
        if (v2563 != -1)
          goto LABEL_1319;
      }
      goto LABEL_1315;
    }
    v2535 = 0;
LABEL_1319:
    v2536 = (uint64_t *)(v2531 + 8 * (v2532 + v2534));
    if (v2533 == v2536)
      goto LABEL_1315;
    v2537 = *v2533;
    v2538 = v2535;
    v2539 = a3[12];
    if (!v2040)
    {
LABEL_1323:
      v2541 = *(_DWORD *)(v2539 + 4 * v2538);
      v2540 = *v2530;
      goto LABEL_1324;
    }
LABEL_1321:
    v2540 = *v2530;
    v2541 = *(_DWORD *)(v2539 + 4 * v2538);
    if (*v2530 >= v2541)
    {
LABEL_1324:
      v2553 = *(_QWORD *)(a1 + 12112) + 8 * v2537;
      v2543 = *(unsigned int *)(a2 + 16);
      v2544 = *(_QWORD *)a2 + 8 * (v2541 + (_DWORD)v2543 * v2540);
      v2554 = *(_OWORD *)v2553;
      v2555 = *(_OWORD *)(v2553 + 24);
      v2556 = *(_QWORD *)(v2553 + 40);
      v2545 = *(int8x16_t *)(v2553 + 48);
      v2549 = *(_QWORD *)(v2553 + 64);
      v2546 = vextq_s8(v2545, v2545, 8uLL).u64[0];
      *(_QWORD *)(v2544 + 16) = *(_QWORD *)(v2553 + 16);
      *(_OWORD *)v2544 = v2554;
      v2557 = v2544 + 8 * v2543;
      *(_QWORD *)(v2557 + 16) = v2556;
      *(_OWORD *)v2557 = v2555;
      goto LABEL_1325;
    }
    v2542 = *(_QWORD *)(a1 + 12112) + 8 * v2537;
    v2543 = *(unsigned int *)(a2 + 16);
    v2544 = *(_QWORD *)a2 + 8 * (v2540 + (_DWORD)v2543 * v2541);
    v2545.i64[0] = *(_QWORD *)(v2542 + 16);
    v2546 = *(_QWORD *)(v2542 + 40);
    v2547 = *(int64x2_t *)(v2542 + 24);
    v2548 = *(_OWORD *)(v2542 + 48);
    v2549 = *(_QWORD *)(v2542 + 64);
    v2550 = vzip1q_s64(*(int64x2_t *)v2542, v2547);
    v2551 = vzip2q_s64(*(int64x2_t *)v2542, v2547);
    *(_QWORD *)(v2544 + 16) = v2548;
    *(int64x2_t *)v2544 = v2550;
    v2552 = (int64x2_t *)(v2544 + 8 * v2543);
    *v2552 = v2551;
    v2552[1].i64[0] = *((_QWORD *)&v2548 + 1);
LABEL_1325:
    v2558 = (int8x16_t *)(v2544 + 16 * v2543);
    v2558[1].i64[0] = v2549;
    v2545.i64[1] = v2546;
    *v2558 = v2545;
    v2559 = v2533 + 1;
    while (v2559 != v2536)
    {
      ++v2535;
      v2560 = *v2559++;
      v2537 = v2560;
      if (v2560 != -1)
      {
        v2533 = v2559 - 1;
        v2538 = v2535;
        v2539 = a3[12];
        if (v2040)
          goto LABEL_1321;
        goto LABEL_1323;
      }
    }
    v2528 = *(_DWORD *)(a1 + 12108);
LABEL_1315:
    ++v2529;
    ++v2530;
    if (v2529 < v2528)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1335:
  v2564 = *(_DWORD *)(a1 + 13548);
  if (!v2564)
    goto LABEL_1358;
  v2565 = 0;
  v2566 = a4[27];
  while (2)
  {
    v2567 = *(_QWORD *)(a1 + 13624);
    v2568 = *(_DWORD *)(a1 + 13648) * v2565;
    v2569 = (uint64_t *)(v2567 + 8 * v2568);
    v2570 = *(_DWORD *)(a1 + 13544);
    if (v2570 && *v2569 == -1)
    {
      v2571 = 0;
      v2597 = 8 * (v2570 + v2568) - 8 * v2568 - 8;
      v2598 = v2567 + 8 * v2568;
      while (v2597)
      {
        v2569 = (uint64_t *)(v2598 + 8);
        ++v2571;
        v2599 = *(_QWORD *)(v2598 + 8);
        v2597 -= 8;
        v2598 += 8;
        if (v2599 != -1)
          goto LABEL_1342;
      }
      goto LABEL_1338;
    }
    v2571 = 0;
LABEL_1342:
    v2572 = (uint64_t *)(v2567 + 8 * (v2568 + v2570));
    if (v2569 == v2572)
      goto LABEL_1338;
    v2573 = *v2569;
    v2574 = v2571;
    v2575 = a3[12];
    if (!v2040)
    {
LABEL_1346:
      v2577 = *(_DWORD *)(v2575 + 4 * v2574);
      v2576 = *v2566;
      goto LABEL_1347;
    }
LABEL_1344:
    v2576 = *v2566;
    v2577 = *(_DWORD *)(v2575 + 4 * v2574);
    if (*v2566 >= v2577)
    {
LABEL_1347:
      v2589 = *(_QWORD *)(a1 + 13552) + 8 * v2573;
      v2579 = *(unsigned int *)(a2 + 16);
      v2580 = *(_QWORD *)a2 + 8 * (v2577 + (_DWORD)v2579 * v2576);
      v2590 = *(_OWORD *)v2589;
      v2591 = *(_OWORD *)(v2589 + 24);
      v2592 = *(_QWORD *)(v2589 + 40);
      v2581 = *(int8x16_t *)(v2589 + 48);
      v2585 = *(_QWORD *)(v2589 + 64);
      v2582 = vextq_s8(v2581, v2581, 8uLL).u64[0];
      *(_QWORD *)(v2580 + 16) = *(_QWORD *)(v2589 + 16);
      *(_OWORD *)v2580 = v2590;
      v2593 = v2580 + 8 * v2579;
      *(_QWORD *)(v2593 + 16) = v2592;
      *(_OWORD *)v2593 = v2591;
      goto LABEL_1348;
    }
    v2578 = *(_QWORD *)(a1 + 13552) + 8 * v2573;
    v2579 = *(unsigned int *)(a2 + 16);
    v2580 = *(_QWORD *)a2 + 8 * (v2576 + (_DWORD)v2579 * v2577);
    v2581.i64[0] = *(_QWORD *)(v2578 + 16);
    v2582 = *(_QWORD *)(v2578 + 40);
    v2583 = *(int64x2_t *)(v2578 + 24);
    v2584 = *(_OWORD *)(v2578 + 48);
    v2585 = *(_QWORD *)(v2578 + 64);
    v2586 = vzip1q_s64(*(int64x2_t *)v2578, v2583);
    v2587 = vzip2q_s64(*(int64x2_t *)v2578, v2583);
    *(_QWORD *)(v2580 + 16) = v2584;
    *(int64x2_t *)v2580 = v2586;
    v2588 = (int64x2_t *)(v2580 + 8 * v2579);
    *v2588 = v2587;
    v2588[1].i64[0] = *((_QWORD *)&v2584 + 1);
LABEL_1348:
    v2594 = (int8x16_t *)(v2580 + 16 * v2579);
    v2594[1].i64[0] = v2585;
    v2581.i64[1] = v2582;
    *v2594 = v2581;
    v2595 = v2569 + 1;
    while (v2595 != v2572)
    {
      ++v2571;
      v2596 = *v2595++;
      v2573 = v2596;
      if (v2596 != -1)
      {
        v2569 = v2595 - 1;
        v2574 = v2571;
        v2575 = a3[12];
        if (v2040)
          goto LABEL_1344;
        goto LABEL_1346;
      }
    }
    v2564 = *(_DWORD *)(a1 + 13548);
LABEL_1338:
    ++v2565;
    ++v2566;
    if (v2565 < v2564)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1358:
  v2600 = *(_DWORD *)(a1 + 444);
  if (!v2600)
    goto LABEL_1381;
  v2601 = 0;
  v2602 = *a4;
  while (2)
  {
    v2603 = *(_QWORD *)(a1 + 520);
    v2604 = *(_DWORD *)(a1 + 544) * v2601;
    v2605 = (uint64_t *)(v2603 + 8 * v2604);
    v2606 = *(_DWORD *)(a1 + 440);
    if (v2606 && *v2605 == -1)
    {
      v2607 = 0;
      v2670 = 8 * (v2606 + v2604) - 8 * v2604 - 8;
      v2671 = v2603 + 8 * v2604;
      while (v2670)
      {
        v2605 = (uint64_t *)(v2671 + 8);
        ++v2607;
        v2672 = *(_QWORD *)(v2671 + 8);
        v2670 -= 8;
        v2671 += 8;
        if (v2672 != -1)
          goto LABEL_1365;
      }
      goto LABEL_1361;
    }
    v2607 = 0;
LABEL_1365:
    v2608 = (uint64_t *)(v2603 + 8 * (v2604 + v2606));
    if (v2605 == v2608)
      goto LABEL_1361;
    v2609 = *v2605;
    v2610 = v2607;
    v2611 = a3[9];
    if (!v2040)
    {
LABEL_1369:
      v2613 = *(_DWORD *)(v2611 + 4 * v2610);
      v2612 = *v2602;
      goto LABEL_1370;
    }
LABEL_1367:
    v2612 = *v2602;
    v2613 = *(_DWORD *)(v2611 + 4 * v2610);
    if (*v2602 >= v2613)
    {
LABEL_1370:
      v2659 = (_OWORD *)(*(_QWORD *)(a1 + 448) + 8 * v2609);
      v2615 = *(unsigned int *)(a2 + 16);
      v2616 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2613 + (_DWORD)v2615 * v2612));
      v2660 = *(int64x2_t *)v2659;
      v2661 = *((int64x2_t *)v2659 + 2);
      v2632 = *((int64x2_t *)v2659 + 3);
      v2662 = *((int64x2_t *)v2659 + 4);
      v2663 = *((int64x2_t *)v2659 + 5);
      v2634 = *((int8x16_t *)v2659 + 6);
      v2635 = *((int8x16_t *)v2659 + 7);
      v2636 = *((int8x16_t *)v2659 + 8);
      v2640 = *((int8x16_t *)v2659 + 9);
      v2637 = vextq_s8(v2636, v2636, 8uLL).u64[0];
      v2638 = vextq_s8(v2635, v2635, 8uLL).u64[0];
      v2639 = vextq_s8(v2634, v2634, 8uLL).u64[0];
      v2641 = *((int8x16_t *)v2659 + 10);
      v2642 = *((int8x16_t *)v2659 + 11);
      v2644 = vextq_s8(v2642, v2642, 8uLL).u64[0];
      v2645 = vextq_s8(v2641, v2641, 8uLL).u64[0];
      v2643 = vextq_s8(v2640, v2640, 8uLL).u64[0];
      v2646 = *((int8x16_t *)v2659 + 12);
      v2647 = *((int8x16_t *)v2659 + 13);
      v2648 = *((int8x16_t *)v2659 + 14);
      v2652 = *((int8x16_t *)v2659 + 15);
      v2649 = vextq_s8(v2648, v2648, 8uLL).u64[0];
      v2650 = vextq_s8(v2647, v2647, 8uLL).u64[0];
      v2651 = vextq_s8(v2646, v2646, 8uLL).u64[0];
      v2653 = *((int8x16_t *)v2659 + 16);
      v2654 = *((int8x16_t *)v2659 + 17);
      v2656 = vextq_s8(v2654, v2654, 8uLL).u64[0];
      v2657 = vextq_s8(v2653, v2653, 8uLL).u64[0];
      v2655 = vextq_s8(v2652, v2652, 8uLL).u64[0];
      v2616[1] = *((int64x2_t *)v2659 + 1);
      v2616[2] = v2661;
      *v2616 = v2660;
      v2658 = (int64x2_t *)((char *)v2616 + 8 * v2615);
      v2658[1] = v2662;
      v2658[2] = v2663;
      goto LABEL_1371;
    }
    v2614 = *(_QWORD *)(a1 + 448) + 8 * v2609;
    v2615 = *(unsigned int *)(a2 + 16);
    v2616 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2612 + (_DWORD)v2615 * v2613));
    v2617 = *(int64x2_t *)(v2614 + 16);
    v2618 = *(int64x2_t *)(v2614 + 64);
    v2619 = *(int64x2_t *)(v2614 + 80);
    v2621 = *(int64x2_t *)(v2614 + 32);
    v2620 = *(int64x2_t *)(v2614 + 48);
    v2622 = *(int64x2_t *)(v2614 + 96);
    v2623 = *(int64x2_t *)(v2614 + 112);
    v2624 = *(int64x2_t *)(v2614 + 128);
    v2625 = *(int64x2_t *)(v2614 + 192);
    v2626 = *(int64x2_t *)(v2614 + 208);
    v2627 = *(int64x2_t *)(v2614 + 224);
    v2628 = vzip1q_s64(*(int64x2_t *)v2614, v2620);
    v2629 = vzip1q_s64(v2622, *(int64x2_t *)(v2614 + 144));
    v2630 = vzip1q_s64(v2625, *(int64x2_t *)(v2614 + 240));
    v2631.i64[0] = vdupq_laneq_s64(v2622, 1).u64[0];
    v2631.i64[1] = *(_QWORD *)(v2614 + 152);
    v2632 = vzip2q_s64(*(int64x2_t *)v2614, v2620);
    v2633.i64[0] = vdupq_laneq_s64(v2625, 1).u64[0];
    v2633.i64[1] = *(_QWORD *)(v2614 + 248);
    v2634 = (int8x16_t)vzip1q_s64(v2617, v2618);
    v2635 = (int8x16_t)vzip1q_s64(v2623, *(int64x2_t *)(v2614 + 160));
    v2636 = (int8x16_t)vzip1q_s64(v2626, *(int64x2_t *)(v2614 + 256));
    v2637 = vextq_s8(v2636, v2636, 8uLL).u64[0];
    v2638 = vextq_s8(v2635, v2635, 8uLL).u64[0];
    v2639 = vextq_s8(v2634, v2634, 8uLL).u64[0];
    v2640 = (int8x16_t)vzip2q_s64(v2617, v2618);
    v2641.i64[0] = vdupq_laneq_s64(v2623, 1).u64[0];
    v2641.i64[1] = *(_QWORD *)(v2614 + 168);
    v2642.i64[0] = vdupq_laneq_s64(v2626, 1).u64[0];
    v2642.i64[1] = *(_QWORD *)(v2614 + 264);
    v2643 = vextq_s8(v2640, v2640, 8uLL).u64[0];
    v2644 = vextq_s8(v2642, v2642, 8uLL).u64[0];
    v2645 = vextq_s8(v2641, v2641, 8uLL).u64[0];
    v2646 = (int8x16_t)vzip1q_s64(v2621, v2619);
    v2647 = (int8x16_t)vzip1q_s64(v2624, *(int64x2_t *)(v2614 + 176));
    v2648 = (int8x16_t)vzip1q_s64(v2627, *(int64x2_t *)(v2614 + 272));
    v2649 = vextq_s8(v2648, v2648, 8uLL).u64[0];
    v2650 = vextq_s8(v2647, v2647, 8uLL).u64[0];
    v2651 = vextq_s8(v2646, v2646, 8uLL).u64[0];
    v2652 = (int8x16_t)vzip2q_s64(v2621, v2619);
    v2653.i64[0] = vdupq_laneq_s64(v2624, 1).u64[0];
    v2653.i64[1] = *(_QWORD *)(v2614 + 184);
    v2654.i64[0] = vdupq_laneq_s64(v2627, 1).u64[0];
    v2654.i64[1] = *(_QWORD *)(v2614 + 280);
    v2655 = vextq_s8(v2652, v2652, 8uLL).u64[0];
    v2656 = vextq_s8(v2654, v2654, 8uLL).u64[0];
    v2657 = vextq_s8(v2653, v2653, 8uLL).u64[0];
    v2616[1] = v2629;
    v2616[2] = v2630;
    *v2616 = v2628;
    v2658 = (int64x2_t *)((char *)v2616 + 8 * v2615);
    v2658[1] = v2631;
    v2658[2] = v2633;
LABEL_1371:
    *v2658 = v2632;
    v2634.i64[1] = v2639;
    v2635.i64[1] = v2638;
    v2664 = (int8x16_t *)&v2616[v2615];
    *v2664 = v2634;
    v2664[1] = v2635;
    v2636.i64[1] = v2637;
    v2664[2] = v2636;
    v2665 = (int8x16_t *)((char *)v2616 + 24 * v2615);
    v2642.i64[1] = v2644;
    v2641.i64[1] = v2645;
    v2640.i64[1] = v2643;
    v2665[1] = v2641;
    v2665[2] = v2642;
    *v2665 = v2640;
    v2666 = (int8x16_t *)&v2616[2 * v2615];
    v2648.i64[1] = v2649;
    v2647.i64[1] = v2650;
    v2646.i64[1] = v2651;
    v2666[1] = v2647;
    v2666[2] = v2648;
    *v2666 = v2646;
    v2667 = (int8x16_t *)((char *)v2616 + 40 * v2615);
    v2654.i64[1] = v2656;
    v2653.i64[1] = v2657;
    v2667[1] = v2653;
    v2667[2] = v2654;
    v2652.i64[1] = v2655;
    v2668 = v2605 + 1;
    *v2667 = v2652;
    while (v2668 != v2608)
    {
      ++v2607;
      v2669 = *v2668++;
      v2609 = v2669;
      if (v2669 != -1)
      {
        v2605 = v2668 - 1;
        v2610 = v2607;
        v2611 = a3[9];
        if (v2040)
          goto LABEL_1367;
        goto LABEL_1369;
      }
    }
    v2600 = *(_DWORD *)(a1 + 444);
LABEL_1361:
    ++v2601;
    ++v2602;
    if (v2601 < v2600)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1381:
  v2673 = *(_DWORD *)(a1 + 1884);
  if (!v2673)
    goto LABEL_1404;
  v2674 = 0;
  v2675 = a4[3];
  while (2)
  {
    v2676 = *(_QWORD *)(a1 + 1960);
    v2677 = *(_DWORD *)(a1 + 1984) * v2674;
    v2678 = (uint64_t *)(v2676 + 8 * v2677);
    v2679 = *(_DWORD *)(a1 + 1880);
    if (v2679 && *v2678 == -1)
    {
      v2680 = 0;
      v2762 = 8 * (v2679 + v2677) - 8 * v2677 - 8;
      v2763 = v2676 + 8 * v2677;
      while (v2762)
      {
        v2678 = (uint64_t *)(v2763 + 8);
        ++v2680;
        v2764 = *(_QWORD *)(v2763 + 8);
        v2762 -= 8;
        v2763 += 8;
        if (v2764 != -1)
          goto LABEL_1388;
      }
      goto LABEL_1384;
    }
    v2680 = 0;
LABEL_1388:
    v2681 = (uint64_t *)(v2676 + 8 * (v2677 + v2679));
    if (v2678 == v2681)
      goto LABEL_1384;
    v2682 = *v2678;
    v2683 = v2680;
    v2684 = a3[9];
    if (!v2040)
    {
LABEL_1392:
      v2686 = *(_DWORD *)(v2684 + 4 * v2683);
      v2685 = *v2675;
      goto LABEL_1393;
    }
LABEL_1390:
    v2685 = *v2675;
    v2686 = *(_DWORD *)(v2684 + 4 * v2683);
    if (*v2675 >= v2686)
    {
LABEL_1393:
      v2723 = (__int128 *)(*(_QWORD *)(a1 + 1888) + 8 * v2682);
      v2724 = *(unsigned int *)(a2 + 16);
      v2725 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2686 + (_DWORD)v2724 * v2685));
      v2726 = *v2723;
      v2727 = v2723[2];
      v2728 = v2723[3];
      v2729 = v2723[4];
      v2730 = v2723[5];
      v2731 = v2723[6];
      v2732 = v2723[7];
      v2733 = v2723[8];
      v2734 = v2723[9];
      v2735 = v2723[10];
      v2736 = v2723[11];
      v2737 = v2723[12];
      v2738 = v2723[13];
      v2739 = v2723[14];
      v2740 = v2723[15];
      v2741 = v2723[16];
      v2742 = v2723[17];
      v2743 = v2723[18];
      v2744 = v2723[19];
      v2745 = v2723[20];
      v2746 = v2723[21];
      v2747 = v2723[22];
      v2748 = v2723[23];
      v2749 = v2723[24];
      v2750 = v2723[25];
      v2751 = v2723[26];
      v2725[1] = v2723[1];
      v2725[2] = v2727;
      *v2725 = v2726;
      v2752 = (_OWORD *)((char *)v2725 + 8 * v2724);
      v2752[1] = v2729;
      v2752[2] = v2730;
      *v2752 = v2728;
      v2753 = &v2725[v2724];
      v2753[1] = v2732;
      v2753[2] = v2733;
      *v2753 = v2731;
      v2754 = (_OWORD *)((char *)v2725 + 24 * v2724);
      v2754[1] = v2735;
      v2754[2] = v2736;
      *v2754 = v2734;
      v2755 = &v2725[2 * v2724];
      v2755[1] = v2738;
      v2755[2] = v2739;
      *v2755 = v2737;
      v2756 = (_OWORD *)((char *)v2725 + 40 * v2724);
      v2756[1] = v2741;
      v2756[2] = v2742;
      *v2756 = v2740;
      v2757 = &v2725[3 * v2724];
      v2757[1] = v2744;
      v2757[2] = v2745;
      *v2757 = v2743;
      v2758 = (_OWORD *)((char *)v2725 + 56 * v2724);
      v2758[1] = v2747;
      v2758[2] = v2748;
      *v2758 = v2746;
      v2759 = &v2725[4 * v2724];
      v2759[1] = v2750;
      v2759[2] = v2751;
      *v2759 = v2749;
      goto LABEL_1394;
    }
    v2687 = *(_QWORD *)(a1 + 1888) + 8 * v2682;
    v2688 = *(unsigned int *)(a2 + 16);
    v2689 = *(_QWORD *)a2 + 8 * (v2685 + (_DWORD)v2688 * v2686);
    v2690 = *(int64x2_t *)(v2687 + 16);
    v2692 = *(int64x2_t *)(v2687 + 64);
    v2691 = *(int64x2_t *)(v2687 + 80);
    v2693 = *(int64x2_t *)(v2687 + 32);
    v2694 = *(int64x2_t *)(v2687 + 48);
    v2696 = *(int64x2_t *)(v2687 + 96);
    v2695 = *(int64x2_t *)(v2687 + 112);
    v2698 = *(int64x2_t *)(v2687 + 160);
    v2697 = *(int64x2_t *)(v2687 + 176);
    v2699 = *(int64x2_t *)(v2687 + 128);
    v2700 = *(int64x2_t *)(v2687 + 144);
    v2702 = *(int64x2_t *)(v2687 + 192);
    v2701 = *(int64x2_t *)(v2687 + 208);
    v2704 = *(int64x2_t *)(v2687 + 256);
    v2703 = *(int64x2_t *)(v2687 + 272);
    v2705 = *(int64x2_t *)(v2687 + 224);
    v2706 = *(int64x2_t *)(v2687 + 240);
    v2708 = *(int64x2_t *)(v2687 + 288);
    v2707 = *(int64x2_t *)(v2687 + 304);
    v2710 = *(int64x2_t *)(v2687 + 352);
    v2709 = *(int64x2_t *)(v2687 + 368);
    v2712 = *(int64x2_t *)(v2687 + 320);
    v2711 = *(int64x2_t *)(v2687 + 336);
    v2714 = *(_OWORD *)(v2687 + 400);
    v2713 = *(_OWORD *)(v2687 + 416);
    v2715 = *(_OWORD *)(v2687 + 384);
    v2716 = vzip1q_s64(*(int64x2_t *)v2687, v2694);
    v2717 = vzip2q_s64(*(int64x2_t *)v2687, v2694);
    *(int64x2_t *)(v2689 + 32) = vzip1q_s64(v2702, v2706);
    *(int64x2_t *)(v2689 + 48) = vzip1q_s64(v2708, v2711);
    *(_QWORD *)(v2689 + 64) = v2715;
    *(int64x2_t *)v2689 = v2716;
    *(int64x2_t *)(v2689 + 16) = vzip1q_s64(v2696, v2700);
    v2718 = (int64x2_t *)(v2689 + 8 * v2688);
    v2718[2] = vzip2q_s64(v2702, v2706);
    v2718[3] = vzip2q_s64(v2708, v2711);
    *v2718 = v2717;
    v2718[1] = vzip2q_s64(v2696, v2700);
    v2718[4].i64[0] = *((_QWORD *)&v2715 + 1);
    v2719 = (int64x2_t *)(v2689 + 16 * v2688);
    v2719[4].i64[0] = v2714;
    v2719[2] = vzip1q_s64(v2701, v2704);
    v2719[3] = vzip1q_s64(v2707, v2710);
    *v2719 = vzip1q_s64(v2690, v2692);
    v2719[1] = vzip1q_s64(v2695, v2698);
    v2720 = (int64x2_t *)(v2689 + 24 * v2688);
    v2720[4].i64[0] = *((_QWORD *)&v2714 + 1);
    v2720[2] = vzip2q_s64(v2701, v2704);
    v2720[3] = vzip2q_s64(v2707, v2710);
    *v2720 = vzip2q_s64(v2690, v2692);
    v2720[1] = vzip2q_s64(v2695, v2698);
    v2721 = (int64x2_t *)(v2689 + 32 * v2688);
    v2721[4].i64[0] = v2713;
    v2721[2] = vzip1q_s64(v2705, v2703);
    v2721[3] = vzip1q_s64(v2712, v2709);
    *v2721 = vzip1q_s64(v2693, v2691);
    v2721[1] = vzip1q_s64(v2699, v2697);
    v2722 = (int64x2_t *)(v2689 + 40 * v2688);
    v2722[4].i64[0] = *((_QWORD *)&v2713 + 1);
    v2722[2] = vzip2q_s64(v2705, v2703);
    v2722[3] = vzip2q_s64(v2712, v2709);
    *v2722 = vzip2q_s64(v2693, v2691);
    v2722[1] = vzip2q_s64(v2699, v2697);
LABEL_1394:
    v2760 = v2678 + 1;
    while (v2760 != v2681)
    {
      ++v2680;
      v2761 = *v2760++;
      v2682 = v2761;
      if (v2761 != -1)
      {
        v2678 = v2760 - 1;
        v2683 = v2680;
        v2684 = a3[9];
        if (v2040)
          goto LABEL_1390;
        goto LABEL_1392;
      }
    }
    v2673 = *(_DWORD *)(a1 + 1884);
LABEL_1384:
    ++v2674;
    ++v2675;
    if (v2674 < v2673)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1404:
  v2765 = *(_DWORD *)(a1 + 3324);
  if (!v2765)
    goto LABEL_1427;
  v2766 = 0;
  v2767 = a4[6];
  while (2)
  {
    v2768 = *(_QWORD *)(a1 + 3400);
    v2769 = *(_DWORD *)(a1 + 3424) * v2766;
    v2770 = (uint64_t *)(v2768 + 8 * v2769);
    v2771 = *(_DWORD *)(a1 + 3320);
    if (v2771 && *v2770 == -1)
    {
      v2772 = 0;
      v2835 = 8 * (v2771 + v2769) - 8 * v2769 - 8;
      v2836 = v2768 + 8 * v2769;
      while (v2835)
      {
        v2770 = (uint64_t *)(v2836 + 8);
        ++v2772;
        v2837 = *(_QWORD *)(v2836 + 8);
        v2835 -= 8;
        v2836 += 8;
        if (v2837 != -1)
          goto LABEL_1411;
      }
      goto LABEL_1407;
    }
    v2772 = 0;
LABEL_1411:
    v2773 = (uint64_t *)(v2768 + 8 * (v2769 + v2771));
    if (v2770 == v2773)
      goto LABEL_1407;
    v2774 = *v2770;
    v2775 = v2772;
    v2776 = a3[9];
    if (!v2040)
    {
LABEL_1415:
      v2778 = *(_DWORD *)(v2776 + 4 * v2775);
      v2777 = *v2767;
      goto LABEL_1416;
    }
LABEL_1413:
    v2777 = *v2767;
    v2778 = *(_DWORD *)(v2776 + 4 * v2775);
    if (*v2767 >= v2778)
    {
LABEL_1416:
      v2824 = (_OWORD *)(*(_QWORD *)(a1 + 3328) + 8 * v2774);
      v2780 = *(unsigned int *)(a2 + 16);
      v2781 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2778 + (_DWORD)v2780 * v2777));
      v2825 = *(int64x2_t *)v2824;
      v2826 = *((int64x2_t *)v2824 + 2);
      v2797 = *((int64x2_t *)v2824 + 3);
      v2827 = *((int64x2_t *)v2824 + 4);
      v2828 = *((int64x2_t *)v2824 + 5);
      v2799 = *((int8x16_t *)v2824 + 6);
      v2800 = *((int8x16_t *)v2824 + 7);
      v2801 = *((int8x16_t *)v2824 + 8);
      v2805 = *((int8x16_t *)v2824 + 9);
      v2802 = vextq_s8(v2801, v2801, 8uLL).u64[0];
      v2803 = vextq_s8(v2800, v2800, 8uLL).u64[0];
      v2804 = vextq_s8(v2799, v2799, 8uLL).u64[0];
      v2806 = *((int8x16_t *)v2824 + 10);
      v2807 = *((int8x16_t *)v2824 + 11);
      v2809 = vextq_s8(v2807, v2807, 8uLL).u64[0];
      v2810 = vextq_s8(v2806, v2806, 8uLL).u64[0];
      v2808 = vextq_s8(v2805, v2805, 8uLL).u64[0];
      v2811 = *((int8x16_t *)v2824 + 12);
      v2812 = *((int8x16_t *)v2824 + 13);
      v2813 = *((int8x16_t *)v2824 + 14);
      v2817 = *((int8x16_t *)v2824 + 15);
      v2814 = vextq_s8(v2813, v2813, 8uLL).u64[0];
      v2815 = vextq_s8(v2812, v2812, 8uLL).u64[0];
      v2816 = vextq_s8(v2811, v2811, 8uLL).u64[0];
      v2818 = *((int8x16_t *)v2824 + 16);
      v2819 = *((int8x16_t *)v2824 + 17);
      v2821 = vextq_s8(v2819, v2819, 8uLL).u64[0];
      v2822 = vextq_s8(v2818, v2818, 8uLL).u64[0];
      v2820 = vextq_s8(v2817, v2817, 8uLL).u64[0];
      v2781[1] = *((int64x2_t *)v2824 + 1);
      v2781[2] = v2826;
      *v2781 = v2825;
      v2823 = (int64x2_t *)((char *)v2781 + 8 * v2780);
      v2823[1] = v2827;
      v2823[2] = v2828;
      goto LABEL_1417;
    }
    v2779 = *(_QWORD *)(a1 + 3328) + 8 * v2774;
    v2780 = *(unsigned int *)(a2 + 16);
    v2781 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2777 + (_DWORD)v2780 * v2778));
    v2782 = *(int64x2_t *)(v2779 + 16);
    v2783 = *(int64x2_t *)(v2779 + 64);
    v2784 = *(int64x2_t *)(v2779 + 80);
    v2786 = *(int64x2_t *)(v2779 + 32);
    v2785 = *(int64x2_t *)(v2779 + 48);
    v2787 = *(int64x2_t *)(v2779 + 96);
    v2788 = *(int64x2_t *)(v2779 + 112);
    v2789 = *(int64x2_t *)(v2779 + 128);
    v2790 = *(int64x2_t *)(v2779 + 192);
    v2791 = *(int64x2_t *)(v2779 + 208);
    v2792 = *(int64x2_t *)(v2779 + 224);
    v2793 = vzip1q_s64(*(int64x2_t *)v2779, v2785);
    v2794 = vzip1q_s64(v2787, *(int64x2_t *)(v2779 + 144));
    v2795 = vzip1q_s64(v2790, *(int64x2_t *)(v2779 + 240));
    v2796.i64[0] = vdupq_laneq_s64(v2787, 1).u64[0];
    v2796.i64[1] = *(_QWORD *)(v2779 + 152);
    v2797 = vzip2q_s64(*(int64x2_t *)v2779, v2785);
    v2798.i64[0] = vdupq_laneq_s64(v2790, 1).u64[0];
    v2798.i64[1] = *(_QWORD *)(v2779 + 248);
    v2799 = (int8x16_t)vzip1q_s64(v2782, v2783);
    v2800 = (int8x16_t)vzip1q_s64(v2788, *(int64x2_t *)(v2779 + 160));
    v2801 = (int8x16_t)vzip1q_s64(v2791, *(int64x2_t *)(v2779 + 256));
    v2802 = vextq_s8(v2801, v2801, 8uLL).u64[0];
    v2803 = vextq_s8(v2800, v2800, 8uLL).u64[0];
    v2804 = vextq_s8(v2799, v2799, 8uLL).u64[0];
    v2805 = (int8x16_t)vzip2q_s64(v2782, v2783);
    v2806.i64[0] = vdupq_laneq_s64(v2788, 1).u64[0];
    v2806.i64[1] = *(_QWORD *)(v2779 + 168);
    v2807.i64[0] = vdupq_laneq_s64(v2791, 1).u64[0];
    v2807.i64[1] = *(_QWORD *)(v2779 + 264);
    v2808 = vextq_s8(v2805, v2805, 8uLL).u64[0];
    v2809 = vextq_s8(v2807, v2807, 8uLL).u64[0];
    v2810 = vextq_s8(v2806, v2806, 8uLL).u64[0];
    v2811 = (int8x16_t)vzip1q_s64(v2786, v2784);
    v2812 = (int8x16_t)vzip1q_s64(v2789, *(int64x2_t *)(v2779 + 176));
    v2813 = (int8x16_t)vzip1q_s64(v2792, *(int64x2_t *)(v2779 + 272));
    v2814 = vextq_s8(v2813, v2813, 8uLL).u64[0];
    v2815 = vextq_s8(v2812, v2812, 8uLL).u64[0];
    v2816 = vextq_s8(v2811, v2811, 8uLL).u64[0];
    v2817 = (int8x16_t)vzip2q_s64(v2786, v2784);
    v2818.i64[0] = vdupq_laneq_s64(v2789, 1).u64[0];
    v2818.i64[1] = *(_QWORD *)(v2779 + 184);
    v2819.i64[0] = vdupq_laneq_s64(v2792, 1).u64[0];
    v2819.i64[1] = *(_QWORD *)(v2779 + 280);
    v2820 = vextq_s8(v2817, v2817, 8uLL).u64[0];
    v2821 = vextq_s8(v2819, v2819, 8uLL).u64[0];
    v2822 = vextq_s8(v2818, v2818, 8uLL).u64[0];
    v2781[1] = v2794;
    v2781[2] = v2795;
    *v2781 = v2793;
    v2823 = (int64x2_t *)((char *)v2781 + 8 * v2780);
    v2823[1] = v2796;
    v2823[2] = v2798;
LABEL_1417:
    *v2823 = v2797;
    v2799.i64[1] = v2804;
    v2800.i64[1] = v2803;
    v2829 = (int8x16_t *)&v2781[v2780];
    *v2829 = v2799;
    v2829[1] = v2800;
    v2801.i64[1] = v2802;
    v2829[2] = v2801;
    v2830 = (int8x16_t *)((char *)v2781 + 24 * v2780);
    v2807.i64[1] = v2809;
    v2806.i64[1] = v2810;
    v2805.i64[1] = v2808;
    v2830[1] = v2806;
    v2830[2] = v2807;
    *v2830 = v2805;
    v2831 = (int8x16_t *)&v2781[2 * v2780];
    v2813.i64[1] = v2814;
    v2812.i64[1] = v2815;
    v2811.i64[1] = v2816;
    v2831[1] = v2812;
    v2831[2] = v2813;
    *v2831 = v2811;
    v2832 = (int8x16_t *)((char *)v2781 + 40 * v2780);
    v2819.i64[1] = v2821;
    v2818.i64[1] = v2822;
    v2832[1] = v2818;
    v2832[2] = v2819;
    v2817.i64[1] = v2820;
    v2833 = v2770 + 1;
    *v2832 = v2817;
    while (v2833 != v2773)
    {
      ++v2772;
      v2834 = *v2833++;
      v2774 = v2834;
      if (v2834 != -1)
      {
        v2770 = v2833 - 1;
        v2775 = v2772;
        v2776 = a3[9];
        if (v2040)
          goto LABEL_1413;
        goto LABEL_1415;
      }
    }
    v2765 = *(_DWORD *)(a1 + 3324);
LABEL_1407:
    ++v2766;
    ++v2767;
    if (v2766 < v2765)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1427:
  v2838 = *(_DWORD *)(a1 + 4764);
  if (!v2838)
    goto LABEL_1450;
  v2839 = 0;
  v2840 = a4[9];
  while (2)
  {
    v2841 = *(_QWORD *)(a1 + 4840);
    v2842 = *(_DWORD *)(a1 + 4864) * v2839;
    v2843 = (uint64_t *)(v2841 + 8 * v2842);
    v2844 = *(_DWORD *)(a1 + 4760);
    if (v2844 && *v2843 == -1)
    {
      v2845 = 0;
      v2908 = 8 * (v2844 + v2842) - 8 * v2842 - 8;
      v2909 = v2841 + 8 * v2842;
      while (v2908)
      {
        v2843 = (uint64_t *)(v2909 + 8);
        ++v2845;
        v2910 = *(_QWORD *)(v2909 + 8);
        v2908 -= 8;
        v2909 += 8;
        if (v2910 != -1)
          goto LABEL_1434;
      }
      goto LABEL_1430;
    }
    v2845 = 0;
LABEL_1434:
    v2846 = (uint64_t *)(v2841 + 8 * (v2842 + v2844));
    if (v2843 == v2846)
      goto LABEL_1430;
    v2847 = *v2843;
    v2848 = v2845;
    v2849 = a3[9];
    if (!v2040)
    {
LABEL_1438:
      v2851 = *(_DWORD *)(v2849 + 4 * v2848);
      v2850 = *v2840;
      goto LABEL_1439;
    }
LABEL_1436:
    v2850 = *v2840;
    v2851 = *(_DWORD *)(v2849 + 4 * v2848);
    if (*v2840 >= v2851)
    {
LABEL_1439:
      v2897 = (_OWORD *)(*(_QWORD *)(a1 + 4768) + 8 * v2847);
      v2853 = *(unsigned int *)(a2 + 16);
      v2854 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2851 + (_DWORD)v2853 * v2850));
      v2898 = *(int64x2_t *)v2897;
      v2899 = *((int64x2_t *)v2897 + 2);
      v2870 = *((int64x2_t *)v2897 + 3);
      v2900 = *((int64x2_t *)v2897 + 4);
      v2901 = *((int64x2_t *)v2897 + 5);
      v2872 = *((int8x16_t *)v2897 + 6);
      v2873 = *((int8x16_t *)v2897 + 7);
      v2874 = *((int8x16_t *)v2897 + 8);
      v2878 = *((int8x16_t *)v2897 + 9);
      v2875 = vextq_s8(v2874, v2874, 8uLL).u64[0];
      v2876 = vextq_s8(v2873, v2873, 8uLL).u64[0];
      v2877 = vextq_s8(v2872, v2872, 8uLL).u64[0];
      v2879 = *((int8x16_t *)v2897 + 10);
      v2880 = *((int8x16_t *)v2897 + 11);
      v2882 = vextq_s8(v2880, v2880, 8uLL).u64[0];
      v2883 = vextq_s8(v2879, v2879, 8uLL).u64[0];
      v2881 = vextq_s8(v2878, v2878, 8uLL).u64[0];
      v2884 = *((int8x16_t *)v2897 + 12);
      v2885 = *((int8x16_t *)v2897 + 13);
      v2886 = *((int8x16_t *)v2897 + 14);
      v2890 = *((int8x16_t *)v2897 + 15);
      v2887 = vextq_s8(v2886, v2886, 8uLL).u64[0];
      v2888 = vextq_s8(v2885, v2885, 8uLL).u64[0];
      v2889 = vextq_s8(v2884, v2884, 8uLL).u64[0];
      v2891 = *((int8x16_t *)v2897 + 16);
      v2892 = *((int8x16_t *)v2897 + 17);
      v2894 = vextq_s8(v2892, v2892, 8uLL).u64[0];
      v2895 = vextq_s8(v2891, v2891, 8uLL).u64[0];
      v2893 = vextq_s8(v2890, v2890, 8uLL).u64[0];
      v2854[1] = *((int64x2_t *)v2897 + 1);
      v2854[2] = v2899;
      *v2854 = v2898;
      v2896 = (int64x2_t *)((char *)v2854 + 8 * v2853);
      v2896[1] = v2900;
      v2896[2] = v2901;
      goto LABEL_1440;
    }
    v2852 = *(_QWORD *)(a1 + 4768) + 8 * v2847;
    v2853 = *(unsigned int *)(a2 + 16);
    v2854 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2850 + (_DWORD)v2853 * v2851));
    v2855 = *(int64x2_t *)(v2852 + 16);
    v2856 = *(int64x2_t *)(v2852 + 64);
    v2857 = *(int64x2_t *)(v2852 + 80);
    v2859 = *(int64x2_t *)(v2852 + 32);
    v2858 = *(int64x2_t *)(v2852 + 48);
    v2860 = *(int64x2_t *)(v2852 + 96);
    v2861 = *(int64x2_t *)(v2852 + 112);
    v2862 = *(int64x2_t *)(v2852 + 128);
    v2863 = *(int64x2_t *)(v2852 + 192);
    v2864 = *(int64x2_t *)(v2852 + 208);
    v2865 = *(int64x2_t *)(v2852 + 224);
    v2866 = vzip1q_s64(*(int64x2_t *)v2852, v2858);
    v2867 = vzip1q_s64(v2860, *(int64x2_t *)(v2852 + 144));
    v2868 = vzip1q_s64(v2863, *(int64x2_t *)(v2852 + 240));
    v2869.i64[0] = vdupq_laneq_s64(v2860, 1).u64[0];
    v2869.i64[1] = *(_QWORD *)(v2852 + 152);
    v2870 = vzip2q_s64(*(int64x2_t *)v2852, v2858);
    v2871.i64[0] = vdupq_laneq_s64(v2863, 1).u64[0];
    v2871.i64[1] = *(_QWORD *)(v2852 + 248);
    v2872 = (int8x16_t)vzip1q_s64(v2855, v2856);
    v2873 = (int8x16_t)vzip1q_s64(v2861, *(int64x2_t *)(v2852 + 160));
    v2874 = (int8x16_t)vzip1q_s64(v2864, *(int64x2_t *)(v2852 + 256));
    v2875 = vextq_s8(v2874, v2874, 8uLL).u64[0];
    v2876 = vextq_s8(v2873, v2873, 8uLL).u64[0];
    v2877 = vextq_s8(v2872, v2872, 8uLL).u64[0];
    v2878 = (int8x16_t)vzip2q_s64(v2855, v2856);
    v2879.i64[0] = vdupq_laneq_s64(v2861, 1).u64[0];
    v2879.i64[1] = *(_QWORD *)(v2852 + 168);
    v2880.i64[0] = vdupq_laneq_s64(v2864, 1).u64[0];
    v2880.i64[1] = *(_QWORD *)(v2852 + 264);
    v2881 = vextq_s8(v2878, v2878, 8uLL).u64[0];
    v2882 = vextq_s8(v2880, v2880, 8uLL).u64[0];
    v2883 = vextq_s8(v2879, v2879, 8uLL).u64[0];
    v2884 = (int8x16_t)vzip1q_s64(v2859, v2857);
    v2885 = (int8x16_t)vzip1q_s64(v2862, *(int64x2_t *)(v2852 + 176));
    v2886 = (int8x16_t)vzip1q_s64(v2865, *(int64x2_t *)(v2852 + 272));
    v2887 = vextq_s8(v2886, v2886, 8uLL).u64[0];
    v2888 = vextq_s8(v2885, v2885, 8uLL).u64[0];
    v2889 = vextq_s8(v2884, v2884, 8uLL).u64[0];
    v2890 = (int8x16_t)vzip2q_s64(v2859, v2857);
    v2891.i64[0] = vdupq_laneq_s64(v2862, 1).u64[0];
    v2891.i64[1] = *(_QWORD *)(v2852 + 184);
    v2892.i64[0] = vdupq_laneq_s64(v2865, 1).u64[0];
    v2892.i64[1] = *(_QWORD *)(v2852 + 280);
    v2893 = vextq_s8(v2890, v2890, 8uLL).u64[0];
    v2894 = vextq_s8(v2892, v2892, 8uLL).u64[0];
    v2895 = vextq_s8(v2891, v2891, 8uLL).u64[0];
    v2854[1] = v2867;
    v2854[2] = v2868;
    *v2854 = v2866;
    v2896 = (int64x2_t *)((char *)v2854 + 8 * v2853);
    v2896[1] = v2869;
    v2896[2] = v2871;
LABEL_1440:
    *v2896 = v2870;
    v2872.i64[1] = v2877;
    v2873.i64[1] = v2876;
    v2902 = (int8x16_t *)&v2854[v2853];
    *v2902 = v2872;
    v2902[1] = v2873;
    v2874.i64[1] = v2875;
    v2902[2] = v2874;
    v2903 = (int8x16_t *)((char *)v2854 + 24 * v2853);
    v2880.i64[1] = v2882;
    v2879.i64[1] = v2883;
    v2878.i64[1] = v2881;
    v2903[1] = v2879;
    v2903[2] = v2880;
    *v2903 = v2878;
    v2904 = (int8x16_t *)&v2854[2 * v2853];
    v2886.i64[1] = v2887;
    v2885.i64[1] = v2888;
    v2884.i64[1] = v2889;
    v2904[1] = v2885;
    v2904[2] = v2886;
    *v2904 = v2884;
    v2905 = (int8x16_t *)((char *)v2854 + 40 * v2853);
    v2892.i64[1] = v2894;
    v2891.i64[1] = v2895;
    v2905[1] = v2891;
    v2905[2] = v2892;
    v2890.i64[1] = v2893;
    v2906 = v2843 + 1;
    *v2905 = v2890;
    while (v2906 != v2846)
    {
      ++v2845;
      v2907 = *v2906++;
      v2847 = v2907;
      if (v2907 != -1)
      {
        v2843 = v2906 - 1;
        v2848 = v2845;
        v2849 = a3[9];
        if (v2040)
          goto LABEL_1436;
        goto LABEL_1438;
      }
    }
    v2838 = *(_DWORD *)(a1 + 4764);
LABEL_1430:
    ++v2839;
    ++v2840;
    if (v2839 < v2838)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1450:
  v2911 = *(_DWORD *)(a1 + 6204);
  if (!v2911)
    goto LABEL_1473;
  v2912 = 0;
  v2913 = a4[12];
  while (2)
  {
    v2914 = *(_QWORD *)(a1 + 6280);
    v2915 = *(_DWORD *)(a1 + 6304) * v2912;
    v2916 = (uint64_t *)(v2914 + 8 * v2915);
    v2917 = *(_DWORD *)(a1 + 6200);
    if (v2917 && *v2916 == -1)
    {
      v2918 = 0;
      v2958 = 8 * (v2917 + v2915) - 8 * v2915 - 8;
      v2959 = v2914 + 8 * v2915;
      while (v2958)
      {
        v2916 = (uint64_t *)(v2959 + 8);
        ++v2918;
        v2960 = *(_QWORD *)(v2959 + 8);
        v2958 -= 8;
        v2959 += 8;
        if (v2960 != -1)
          goto LABEL_1457;
      }
      goto LABEL_1453;
    }
    v2918 = 0;
LABEL_1457:
    v2919 = (uint64_t *)(v2914 + 8 * (v2915 + v2917));
    if (v2916 == v2919)
      goto LABEL_1453;
    v2920 = *v2916;
    v2921 = v2918;
    v2922 = a3[9];
    if (!v2040)
    {
LABEL_1461:
      v2924 = *(_DWORD *)(v2922 + 4 * v2921);
      v2923 = *v2913;
      goto LABEL_1462;
    }
LABEL_1459:
    v2923 = *v2913;
    v2924 = *(_DWORD *)(v2922 + 4 * v2921);
    if (*v2913 >= v2924)
    {
LABEL_1462:
      v2943 = (__int128 *)(*(_QWORD *)(a1 + 6208) + 8 * v2920);
      v2944 = *(unsigned int *)(a2 + 16);
      v2945 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2924 + (_DWORD)v2944 * v2923));
      v2946 = *v2943;
      v2947 = v2943[2];
      v2948 = v2943[3];
      v2949 = v2943[4];
      v2950 = v2943[5];
      v2951 = v2943[6];
      v2952 = v2943[7];
      v2953 = v2943[8];
      v2945[1] = v2943[1];
      v2945[2] = v2947;
      *v2945 = v2946;
      v2954 = (_OWORD *)((char *)v2945 + 8 * v2944);
      v2954[1] = v2949;
      v2954[2] = v2950;
      *v2954 = v2948;
      v2955 = &v2945[v2944];
      v2955[1] = v2952;
      v2955[2] = v2953;
      *v2955 = v2951;
      goto LABEL_1463;
    }
    v2925 = *(_QWORD *)(a1 + 6208) + 8 * v2920;
    v2926 = *(unsigned int *)(a2 + 16);
    v2927 = *(_QWORD *)a2 + 8 * (v2923 + (_DWORD)v2926 * v2924);
    v2928 = *(int64x2_t *)(v2925 + 16);
    v2930 = *(int64x2_t *)(v2925 + 64);
    v2929 = *(int64x2_t *)(v2925 + 80);
    v2931 = *(int64x2_t *)(v2925 + 32);
    v2932 = *(int64x2_t *)(v2925 + 48);
    v2934 = *(_OWORD *)(v2925 + 112);
    v2933 = *(_OWORD *)(v2925 + 128);
    v2935 = *(_OWORD *)(v2925 + 96);
    v2936 = vzip1q_s64(*(int64x2_t *)v2925, v2932);
    v2937 = vzip2q_s64(*(int64x2_t *)v2925, v2932);
    *(_QWORD *)(v2927 + 16) = v2935;
    *(int64x2_t *)v2927 = v2936;
    v2938 = (int64x2_t *)(v2927 + 8 * v2926);
    *v2938 = v2937;
    v2938[1].i64[0] = *((_QWORD *)&v2935 + 1);
    v2939 = (int64x2_t *)(v2927 + 16 * v2926);
    v2939[1].i64[0] = v2934;
    *v2939 = vzip1q_s64(v2928, v2930);
    v2940 = (int64x2_t *)(v2927 + 24 * v2926);
    v2940[1].i64[0] = *((_QWORD *)&v2934 + 1);
    *v2940 = vzip2q_s64(v2928, v2930);
    v2941 = (int64x2_t *)(v2927 + 32 * v2926);
    v2941[1].i64[0] = v2933;
    *v2941 = vzip1q_s64(v2931, v2929);
    v2942 = (int64x2_t *)(v2927 + 40 * v2926);
    v2942[1].i64[0] = *((_QWORD *)&v2933 + 1);
    *v2942 = vzip2q_s64(v2931, v2929);
LABEL_1463:
    v2956 = v2916 + 1;
    while (v2956 != v2919)
    {
      ++v2918;
      v2957 = *v2956++;
      v2920 = v2957;
      if (v2957 != -1)
      {
        v2916 = v2956 - 1;
        v2921 = v2918;
        v2922 = a3[9];
        if (v2040)
          goto LABEL_1459;
        goto LABEL_1461;
      }
    }
    v2911 = *(_DWORD *)(a1 + 6204);
LABEL_1453:
    ++v2912;
    ++v2913;
    if (v2912 < v2911)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1473:
  v2961 = *(_DWORD *)(a1 + 7644);
  if (!v2961)
    goto LABEL_1496;
  v2962 = 0;
  v2963 = a4[15];
  while (2)
  {
    v2964 = *(_QWORD *)(a1 + 7720);
    v2965 = *(_DWORD *)(a1 + 7744) * v2962;
    v2966 = (uint64_t *)(v2964 + 8 * v2965);
    v2967 = *(_DWORD *)(a1 + 7640);
    if (v2967 && *v2966 == -1)
    {
      v2968 = 0;
      v2987 = 8 * (v2967 + v2965) - 8 * v2965 - 8;
      v2988 = v2964 + 8 * v2965;
      while (v2987)
      {
        v2966 = (uint64_t *)(v2988 + 8);
        ++v2968;
        v2989 = *(_QWORD *)(v2988 + 8);
        v2987 -= 8;
        v2988 += 8;
        if (v2989 != -1)
          goto LABEL_1480;
      }
      goto LABEL_1476;
    }
    v2968 = 0;
LABEL_1480:
    v2969 = (uint64_t *)(v2964 + 8 * (v2965 + v2967));
    if (v2966 == v2969)
      goto LABEL_1476;
    v2970 = *v2966;
    v2971 = v2968;
    v2972 = a3[9];
    if (!v2040)
    {
LABEL_1484:
      v2974 = *(_DWORD *)(v2972 + 4 * v2971);
      v2973 = *v2963;
      goto LABEL_1485;
    }
LABEL_1482:
    v2973 = *v2963;
    v2974 = *(_DWORD *)(v2972 + 4 * v2971);
    if (*v2963 >= v2974)
    {
LABEL_1485:
      v2981 = (__int128 *)(*(_QWORD *)(a1 + 7648) + 8 * v2970);
      v2982 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2974 + *(_DWORD *)(a2 + 16) * v2973));
      v2983 = v2981[2];
      v2984 = *v2981;
      v2982[1] = v2981[1];
      v2982[2] = v2983;
      *v2982 = v2984;
      goto LABEL_1486;
    }
    v2975 = *(_QWORD *)(a1 + 7648) + 8 * v2970;
    v2976 = *(unsigned int *)(a2 + 16);
    v2977 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2973 + (_DWORD)v2976 * v2974));
    v2979 = *(int8x16_t *)(v2975 + 16);
    v2978 = *(int8x16_t *)(v2975 + 32);
    v2980 = vextq_s8(*(int8x16_t *)v2975, *(int8x16_t *)v2975, 8uLL).u64[0];
    *v2977 = *(_QWORD *)v2975;
    v2977[v2976] = v2980;
    v2977[2 * v2976] = v2979.i64[0];
    v2977[3 * v2976] = vextq_s8(v2979, v2979, 8uLL).u64[0];
    v2977[4 * v2976] = v2978.i64[0];
    v2977[5 * v2976] = vextq_s8(v2978, v2978, 8uLL).u64[0];
LABEL_1486:
    v2985 = v2966 + 1;
    while (v2985 != v2969)
    {
      ++v2968;
      v2986 = *v2985++;
      v2970 = v2986;
      if (v2986 != -1)
      {
        v2966 = v2985 - 1;
        v2971 = v2968;
        v2972 = a3[9];
        if (v2040)
          goto LABEL_1482;
        goto LABEL_1484;
      }
    }
    v2961 = *(_DWORD *)(a1 + 7644);
LABEL_1476:
    ++v2962;
    ++v2963;
    if (v2962 < v2961)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1496:
  v2990 = *(_DWORD *)(a1 + 9084);
  if (!v2990)
    goto LABEL_1519;
  v2991 = 0;
  v2992 = a4[18];
  while (2)
  {
    v2993 = *(_QWORD *)(a1 + 9160);
    v2994 = *(_DWORD *)(a1 + 9184) * v2991;
    v2995 = (uint64_t *)(v2993 + 8 * v2994);
    v2996 = *(_DWORD *)(a1 + 9080);
    if (v2996 && *v2995 == -1)
    {
      v2997 = 0;
      v3043 = 8 * (v2996 + v2994) - 8 * v2994 - 8;
      v3044 = v2993 + 8 * v2994;
      while (v3043)
      {
        v2995 = (uint64_t *)(v3044 + 8);
        ++v2997;
        v3045 = *(_QWORD *)(v3044 + 8);
        v3043 -= 8;
        v3044 += 8;
        if (v3045 != -1)
          goto LABEL_1503;
      }
      goto LABEL_1499;
    }
    v2997 = 0;
LABEL_1503:
    v2998 = (uint64_t *)(v2993 + 8 * (v2994 + v2996));
    if (v2995 == v2998)
      goto LABEL_1499;
    v2999 = *v2995;
    v3000 = v2997;
    v3001 = a3[9];
    if (!v2040)
    {
LABEL_1507:
      v3003 = *(_DWORD *)(v3001 + 4 * v3000);
      v3002 = *v2992;
      goto LABEL_1508;
    }
LABEL_1505:
    v3002 = *v2992;
    v3003 = *(_DWORD *)(v3001 + 4 * v3000);
    if (*v2992 >= v3003)
    {
LABEL_1508:
      v3024 = (__int128 *)(*(_QWORD *)(a1 + 9088) + 8 * v2999);
      v3025 = *(unsigned int *)(a2 + 16);
      v3026 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3003 + (_DWORD)v3025 * v3002));
      v3027 = *v3024;
      v3028 = v3024[2];
      v3029 = v3024[3];
      v3030 = v3024[4];
      v3031 = v3024[5];
      v3032 = v3024[6];
      v3033 = v3024[7];
      v3034 = v3024[8];
      v3035 = v3024[9];
      v3036 = v3024[10];
      v3037 = v3024[11];
      v3026[1] = v3024[1];
      v3026[2] = v3028;
      *v3026 = v3027;
      v3038 = (_OWORD *)((char *)v3026 + 8 * v3025);
      v3038[1] = v3030;
      v3038[2] = v3031;
      *v3038 = v3029;
      v3039 = &v3026[v3025];
      v3039[1] = v3033;
      v3039[2] = v3034;
      *v3039 = v3032;
      v3040 = (_OWORD *)((char *)v3026 + 24 * v3025);
      v3040[1] = v3036;
      v3040[2] = v3037;
      *v3040 = v3035;
      goto LABEL_1509;
    }
    v3004 = *(_QWORD *)(a1 + 9088) + 8 * v2999;
    v3005 = *(unsigned int *)(a2 + 16);
    v3006 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3002 + (_DWORD)v3005 * v3003));
    v3007 = *(int64x2_t *)(v3004 + 16);
    v3009 = *(int64x2_t *)(v3004 + 64);
    v3008 = *(int64x2_t *)(v3004 + 80);
    v3010 = *(int64x2_t *)(v3004 + 32);
    v3011 = *(int64x2_t *)(v3004 + 48);
    v3013 = *(int64x2_t *)(v3004 + 96);
    v3012 = *(int64x2_t *)(v3004 + 112);
    v3015 = *(int64x2_t *)(v3004 + 160);
    v3014 = *(int64x2_t *)(v3004 + 176);
    v3016 = *(int64x2_t *)(v3004 + 128);
    v3017 = *(int64x2_t *)(v3004 + 144);
    v3018 = vzip2q_s64(*(int64x2_t *)v3004, v3011);
    *v3006 = vzip1q_s64(*(int64x2_t *)v3004, v3011);
    v3006[1] = vzip1q_s64(v3013, v3017);
    v3019 = (int64x2_t *)((char *)v3006 + 8 * v3005);
    *v3019 = v3018;
    v3019[1] = vzip2q_s64(v3013, v3017);
    v3020 = &v3006[v3005];
    *v3020 = vzip1q_s64(v3007, v3009);
    v3020[1] = vzip1q_s64(v3012, v3015);
    v3021 = (int64x2_t *)((char *)v3006 + 24 * v3005);
    *v3021 = vzip2q_s64(v3007, v3009);
    v3021[1] = vzip2q_s64(v3012, v3015);
    v3022 = &v3006[2 * v3005];
    *v3022 = vzip1q_s64(v3010, v3008);
    v3022[1] = vzip1q_s64(v3016, v3014);
    v3023 = (int64x2_t *)((char *)v3006 + 40 * v3005);
    *v3023 = vzip2q_s64(v3010, v3008);
    v3023[1] = vzip2q_s64(v3016, v3014);
LABEL_1509:
    v3041 = v2995 + 1;
    while (v3041 != v2998)
    {
      ++v2997;
      v3042 = *v3041++;
      v2999 = v3042;
      if (v3042 != -1)
      {
        v2995 = v3041 - 1;
        v3000 = v2997;
        v3001 = a3[9];
        if (v2040)
          goto LABEL_1505;
        goto LABEL_1507;
      }
    }
    v2990 = *(_DWORD *)(a1 + 9084);
LABEL_1499:
    ++v2991;
    ++v2992;
    if (v2991 < v2990)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1519:
  v3046 = *(_DWORD *)(a1 + 10524);
  if (!v3046)
    goto LABEL_1542;
  v3047 = 0;
  v3048 = a4[21];
  while (2)
  {
    v3049 = *(_QWORD *)(a1 + 10600);
    v3050 = *(_DWORD *)(a1 + 10624) * v3047;
    v3051 = (uint64_t *)(v3049 + 8 * v3050);
    v3052 = *(_DWORD *)(a1 + 10520);
    if (v3052 && *v3051 == -1)
    {
      v3053 = 0;
      v3099 = 8 * (v3052 + v3050) - 8 * v3050 - 8;
      v3100 = v3049 + 8 * v3050;
      while (v3099)
      {
        v3051 = (uint64_t *)(v3100 + 8);
        ++v3053;
        v3101 = *(_QWORD *)(v3100 + 8);
        v3099 -= 8;
        v3100 += 8;
        if (v3101 != -1)
          goto LABEL_1526;
      }
      goto LABEL_1522;
    }
    v3053 = 0;
LABEL_1526:
    v3054 = (uint64_t *)(v3049 + 8 * (v3050 + v3052));
    if (v3051 == v3054)
      goto LABEL_1522;
    v3055 = *v3051;
    v3056 = v3053;
    v3057 = a3[9];
    if (!v2040)
    {
LABEL_1530:
      v3059 = *(_DWORD *)(v3057 + 4 * v3056);
      v3058 = *v3048;
      goto LABEL_1531;
    }
LABEL_1528:
    v3058 = *v3048;
    v3059 = *(_DWORD *)(v3057 + 4 * v3056);
    if (*v3048 >= v3059)
    {
LABEL_1531:
      v3080 = (__int128 *)(*(_QWORD *)(a1 + 10528) + 8 * v3055);
      v3081 = *(unsigned int *)(a2 + 16);
      v3082 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3059 + (_DWORD)v3081 * v3058));
      v3083 = *v3080;
      v3084 = v3080[2];
      v3085 = v3080[3];
      v3086 = v3080[4];
      v3087 = v3080[5];
      v3088 = v3080[6];
      v3089 = v3080[7];
      v3090 = v3080[8];
      v3091 = v3080[9];
      v3092 = v3080[10];
      v3093 = v3080[11];
      v3082[1] = v3080[1];
      v3082[2] = v3084;
      *v3082 = v3083;
      v3094 = (_OWORD *)((char *)v3082 + 8 * v3081);
      v3094[1] = v3086;
      v3094[2] = v3087;
      *v3094 = v3085;
      v3095 = &v3082[v3081];
      v3095[1] = v3089;
      v3095[2] = v3090;
      *v3095 = v3088;
      v3096 = (_OWORD *)((char *)v3082 + 24 * v3081);
      v3096[1] = v3092;
      v3096[2] = v3093;
      *v3096 = v3091;
      goto LABEL_1532;
    }
    v3060 = *(_QWORD *)(a1 + 10528) + 8 * v3055;
    v3061 = *(unsigned int *)(a2 + 16);
    v3062 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3058 + (_DWORD)v3061 * v3059));
    v3063 = *(int64x2_t *)(v3060 + 16);
    v3065 = *(int64x2_t *)(v3060 + 64);
    v3064 = *(int64x2_t *)(v3060 + 80);
    v3066 = *(int64x2_t *)(v3060 + 32);
    v3067 = *(int64x2_t *)(v3060 + 48);
    v3069 = *(int64x2_t *)(v3060 + 96);
    v3068 = *(int64x2_t *)(v3060 + 112);
    v3071 = *(int64x2_t *)(v3060 + 160);
    v3070 = *(int64x2_t *)(v3060 + 176);
    v3072 = *(int64x2_t *)(v3060 + 128);
    v3073 = *(int64x2_t *)(v3060 + 144);
    v3074 = vzip2q_s64(*(int64x2_t *)v3060, v3067);
    *v3062 = vzip1q_s64(*(int64x2_t *)v3060, v3067);
    v3062[1] = vzip1q_s64(v3069, v3073);
    v3075 = (int64x2_t *)((char *)v3062 + 8 * v3061);
    *v3075 = v3074;
    v3075[1] = vzip2q_s64(v3069, v3073);
    v3076 = &v3062[v3061];
    *v3076 = vzip1q_s64(v3063, v3065);
    v3076[1] = vzip1q_s64(v3068, v3071);
    v3077 = (int64x2_t *)((char *)v3062 + 24 * v3061);
    *v3077 = vzip2q_s64(v3063, v3065);
    v3077[1] = vzip2q_s64(v3068, v3071);
    v3078 = &v3062[2 * v3061];
    *v3078 = vzip1q_s64(v3066, v3064);
    v3078[1] = vzip1q_s64(v3072, v3070);
    v3079 = (int64x2_t *)((char *)v3062 + 40 * v3061);
    *v3079 = vzip2q_s64(v3066, v3064);
    v3079[1] = vzip2q_s64(v3072, v3070);
LABEL_1532:
    v3097 = v3051 + 1;
    while (v3097 != v3054)
    {
      ++v3053;
      v3098 = *v3097++;
      v3055 = v3098;
      if (v3098 != -1)
      {
        v3051 = v3097 - 1;
        v3056 = v3053;
        v3057 = a3[9];
        if (v2040)
          goto LABEL_1528;
        goto LABEL_1530;
      }
    }
    v3046 = *(_DWORD *)(a1 + 10524);
LABEL_1522:
    ++v3047;
    ++v3048;
    if (v3047 < v3046)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1542:
  v3102 = *(_DWORD *)(a1 + 11964);
  if (!v3102)
    goto LABEL_1565;
  v3103 = 0;
  v3104 = a4[24];
  while (2)
  {
    v3105 = *(_QWORD *)(a1 + 12040);
    v3106 = *(_DWORD *)(a1 + 12064) * v3103;
    v3107 = (uint64_t *)(v3105 + 8 * v3106);
    v3108 = *(_DWORD *)(a1 + 11960);
    if (v3108 && *v3107 == -1)
    {
      v3109 = 0;
      v3149 = 8 * (v3108 + v3106) - 8 * v3106 - 8;
      v3150 = v3105 + 8 * v3106;
      while (v3149)
      {
        v3107 = (uint64_t *)(v3150 + 8);
        ++v3109;
        v3151 = *(_QWORD *)(v3150 + 8);
        v3149 -= 8;
        v3150 += 8;
        if (v3151 != -1)
          goto LABEL_1549;
      }
      goto LABEL_1545;
    }
    v3109 = 0;
LABEL_1549:
    v3110 = (uint64_t *)(v3105 + 8 * (v3106 + v3108));
    if (v3107 == v3110)
      goto LABEL_1545;
    v3111 = *v3107;
    v3112 = v3109;
    v3113 = a3[9];
    if (!v2040)
    {
LABEL_1553:
      v3115 = *(_DWORD *)(v3113 + 4 * v3112);
      v3114 = *v3104;
      goto LABEL_1554;
    }
LABEL_1551:
    v3114 = *v3104;
    v3115 = *(_DWORD *)(v3113 + 4 * v3112);
    if (*v3104 >= v3115)
    {
LABEL_1554:
      v3134 = (__int128 *)(*(_QWORD *)(a1 + 11968) + 8 * v3111);
      v3135 = *(unsigned int *)(a2 + 16);
      v3136 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3115 + (_DWORD)v3135 * v3114));
      v3137 = *v3134;
      v3138 = v3134[2];
      v3139 = v3134[3];
      v3140 = v3134[4];
      v3141 = v3134[5];
      v3142 = v3134[6];
      v3143 = v3134[7];
      v3144 = v3134[8];
      v3136[1] = v3134[1];
      v3136[2] = v3138;
      *v3136 = v3137;
      v3145 = (_OWORD *)((char *)v3136 + 8 * v3135);
      v3145[1] = v3140;
      v3145[2] = v3141;
      *v3145 = v3139;
      v3146 = &v3136[v3135];
      v3146[1] = v3143;
      v3146[2] = v3144;
      *v3146 = v3142;
      goto LABEL_1555;
    }
    v3116 = *(_QWORD *)(a1 + 11968) + 8 * v3111;
    v3117 = *(unsigned int *)(a2 + 16);
    v3118 = *(_QWORD *)a2 + 8 * (v3114 + (_DWORD)v3117 * v3115);
    v3119 = *(int64x2_t *)(v3116 + 16);
    v3121 = *(int64x2_t *)(v3116 + 64);
    v3120 = *(int64x2_t *)(v3116 + 80);
    v3122 = *(int64x2_t *)(v3116 + 32);
    v3123 = *(int64x2_t *)(v3116 + 48);
    v3125 = *(_OWORD *)(v3116 + 112);
    v3124 = *(_OWORD *)(v3116 + 128);
    v3126 = *(_OWORD *)(v3116 + 96);
    v3127 = vzip1q_s64(*(int64x2_t *)v3116, v3123);
    v3128 = vzip2q_s64(*(int64x2_t *)v3116, v3123);
    *(_QWORD *)(v3118 + 16) = v3126;
    *(int64x2_t *)v3118 = v3127;
    v3129 = (int64x2_t *)(v3118 + 8 * v3117);
    *v3129 = v3128;
    v3129[1].i64[0] = *((_QWORD *)&v3126 + 1);
    v3130 = (int64x2_t *)(v3118 + 16 * v3117);
    v3130[1].i64[0] = v3125;
    *v3130 = vzip1q_s64(v3119, v3121);
    v3131 = (int64x2_t *)(v3118 + 24 * v3117);
    v3131[1].i64[0] = *((_QWORD *)&v3125 + 1);
    *v3131 = vzip2q_s64(v3119, v3121);
    v3132 = (int64x2_t *)(v3118 + 32 * v3117);
    v3132[1].i64[0] = v3124;
    *v3132 = vzip1q_s64(v3122, v3120);
    v3133 = (int64x2_t *)(v3118 + 40 * v3117);
    v3133[1].i64[0] = *((_QWORD *)&v3124 + 1);
    *v3133 = vzip2q_s64(v3122, v3120);
LABEL_1555:
    v3147 = v3107 + 1;
    while (v3147 != v3110)
    {
      ++v3109;
      v3148 = *v3147++;
      v3111 = v3148;
      if (v3148 != -1)
      {
        v3107 = v3147 - 1;
        v3112 = v3109;
        v3113 = a3[9];
        if (v2040)
          goto LABEL_1551;
        goto LABEL_1553;
      }
    }
    v3102 = *(_DWORD *)(a1 + 11964);
LABEL_1545:
    ++v3103;
    ++v3104;
    if (v3103 < v3102)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1565:
  v3152 = *(_DWORD *)(a1 + 13404);
  if (!v3152)
    goto LABEL_1588;
  v3153 = 0;
  v3154 = a4[27];
  while (2)
  {
    v3155 = *(_QWORD *)(a1 + 13480);
    v3156 = *(_DWORD *)(a1 + 13504) * v3153;
    v3157 = (uint64_t *)(v3155 + 8 * v3156);
    v3158 = *(_DWORD *)(a1 + 13400);
    if (v3158 && *v3157 == -1)
    {
      v3159 = 0;
      v3199 = 8 * (v3158 + v3156) - 8 * v3156 - 8;
      v3200 = v3155 + 8 * v3156;
      while (v3199)
      {
        v3157 = (uint64_t *)(v3200 + 8);
        ++v3159;
        v3201 = *(_QWORD *)(v3200 + 8);
        v3199 -= 8;
        v3200 += 8;
        if (v3201 != -1)
          goto LABEL_1572;
      }
      goto LABEL_1568;
    }
    v3159 = 0;
LABEL_1572:
    v3160 = (uint64_t *)(v3155 + 8 * (v3156 + v3158));
    if (v3157 == v3160)
      goto LABEL_1568;
    v3161 = *v3157;
    v3162 = v3159;
    v3163 = a3[9];
    if (!v2040)
    {
LABEL_1576:
      v3165 = *(_DWORD *)(v3163 + 4 * v3162);
      v3164 = *v3154;
      goto LABEL_1577;
    }
LABEL_1574:
    v3164 = *v3154;
    v3165 = *(_DWORD *)(v3163 + 4 * v3162);
    if (*v3154 >= v3165)
    {
LABEL_1577:
      v3184 = (__int128 *)(*(_QWORD *)(a1 + 13408) + 8 * v3161);
      v3185 = *(unsigned int *)(a2 + 16);
      v3186 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3165 + (_DWORD)v3185 * v3164));
      v3187 = *v3184;
      v3188 = v3184[2];
      v3189 = v3184[3];
      v3190 = v3184[4];
      v3191 = v3184[5];
      v3192 = v3184[6];
      v3193 = v3184[7];
      v3194 = v3184[8];
      v3186[1] = v3184[1];
      v3186[2] = v3188;
      *v3186 = v3187;
      v3195 = (_OWORD *)((char *)v3186 + 8 * v3185);
      v3195[1] = v3190;
      v3195[2] = v3191;
      *v3195 = v3189;
      v3196 = &v3186[v3185];
      v3196[1] = v3193;
      v3196[2] = v3194;
      *v3196 = v3192;
      goto LABEL_1578;
    }
    v3166 = *(_QWORD *)(a1 + 13408) + 8 * v3161;
    v3167 = *(unsigned int *)(a2 + 16);
    v3168 = *(_QWORD *)a2 + 8 * (v3164 + (_DWORD)v3167 * v3165);
    v3169 = *(int64x2_t *)(v3166 + 16);
    v3171 = *(int64x2_t *)(v3166 + 64);
    v3170 = *(int64x2_t *)(v3166 + 80);
    v3172 = *(int64x2_t *)(v3166 + 32);
    v3173 = *(int64x2_t *)(v3166 + 48);
    v3175 = *(_OWORD *)(v3166 + 112);
    v3174 = *(_OWORD *)(v3166 + 128);
    v3176 = *(_OWORD *)(v3166 + 96);
    v3177 = vzip1q_s64(*(int64x2_t *)v3166, v3173);
    v3178 = vzip2q_s64(*(int64x2_t *)v3166, v3173);
    *(_QWORD *)(v3168 + 16) = v3176;
    *(int64x2_t *)v3168 = v3177;
    v3179 = (int64x2_t *)(v3168 + 8 * v3167);
    *v3179 = v3178;
    v3179[1].i64[0] = *((_QWORD *)&v3176 + 1);
    v3180 = (int64x2_t *)(v3168 + 16 * v3167);
    v3180[1].i64[0] = v3175;
    *v3180 = vzip1q_s64(v3169, v3171);
    v3181 = (int64x2_t *)(v3168 + 24 * v3167);
    v3181[1].i64[0] = *((_QWORD *)&v3175 + 1);
    *v3181 = vzip2q_s64(v3169, v3171);
    v3182 = (int64x2_t *)(v3168 + 32 * v3167);
    v3182[1].i64[0] = v3174;
    *v3182 = vzip1q_s64(v3172, v3170);
    v3183 = (int64x2_t *)(v3168 + 40 * v3167);
    v3183[1].i64[0] = *((_QWORD *)&v3174 + 1);
    *v3183 = vzip2q_s64(v3172, v3170);
LABEL_1578:
    v3197 = v3157 + 1;
    while (v3197 != v3160)
    {
      ++v3159;
      v3198 = *v3197++;
      v3161 = v3198;
      if (v3198 != -1)
      {
        v3157 = v3197 - 1;
        v3162 = v3159;
        v3163 = a3[9];
        if (v2040)
          goto LABEL_1574;
        goto LABEL_1576;
      }
    }
    v3152 = *(_DWORD *)(a1 + 13404);
LABEL_1568:
    ++v3153;
    ++v3154;
    if (v3153 < v3152)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1588:
  v3202 = *(_DWORD *)(a1 + 300);
  if (!v3202)
    goto LABEL_1611;
  v3203 = 0;
  v3204 = *a4;
  while (2)
  {
    v3205 = *(_QWORD *)(a1 + 376);
    v3206 = *(_DWORD *)(a1 + 400) * v3203;
    v3207 = (uint64_t *)(v3205 + 8 * v3206);
    v3208 = *(_DWORD *)(a1 + 296);
    if (v3208 && *v3207 == -1)
    {
      v3209 = 0;
      v3272 = 8 * (v3208 + v3206) - 8 * v3206 - 8;
      v3273 = v3205 + 8 * v3206;
      while (v3272)
      {
        v3207 = (uint64_t *)(v3273 + 8);
        ++v3209;
        v3274 = *(_QWORD *)(v3273 + 8);
        v3272 -= 8;
        v3273 += 8;
        if (v3274 != -1)
          goto LABEL_1595;
      }
      goto LABEL_1591;
    }
    v3209 = 0;
LABEL_1595:
    v3210 = (uint64_t *)(v3205 + 8 * (v3206 + v3208));
    if (v3207 == v3210)
      goto LABEL_1591;
    v3211 = *v3207;
    v3212 = v3209;
    v3213 = a3[6];
    if (!v2040)
    {
LABEL_1599:
      v3215 = *(_DWORD *)(v3213 + 4 * v3212);
      v3214 = *v3204;
      goto LABEL_1600;
    }
LABEL_1597:
    v3214 = *v3204;
    v3215 = *(_DWORD *)(v3213 + 4 * v3212);
    if (*v3204 >= v3215)
    {
LABEL_1600:
      v3261 = (_OWORD *)(*(_QWORD *)(a1 + 304) + 8 * v3211);
      v3217 = *(unsigned int *)(a2 + 16);
      v3218 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3215 + (_DWORD)v3217 * v3214));
      v3262 = *(int64x2_t *)v3261;
      v3263 = *((int64x2_t *)v3261 + 2);
      v3234 = *((int64x2_t *)v3261 + 3);
      v3264 = *((int64x2_t *)v3261 + 4);
      v3265 = *((int64x2_t *)v3261 + 5);
      v3236 = *((int8x16_t *)v3261 + 6);
      v3237 = *((int8x16_t *)v3261 + 7);
      v3238 = *((int8x16_t *)v3261 + 8);
      v3242 = *((int8x16_t *)v3261 + 9);
      v3239 = vextq_s8(v3238, v3238, 8uLL).u64[0];
      v3240 = vextq_s8(v3237, v3237, 8uLL).u64[0];
      v3241 = vextq_s8(v3236, v3236, 8uLL).u64[0];
      v3243 = *((int8x16_t *)v3261 + 10);
      v3244 = *((int8x16_t *)v3261 + 11);
      v3246 = vextq_s8(v3244, v3244, 8uLL).u64[0];
      v3247 = vextq_s8(v3243, v3243, 8uLL).u64[0];
      v3245 = vextq_s8(v3242, v3242, 8uLL).u64[0];
      v3248 = *((int8x16_t *)v3261 + 12);
      v3249 = *((int8x16_t *)v3261 + 13);
      v3250 = *((int8x16_t *)v3261 + 14);
      v3254 = *((int8x16_t *)v3261 + 15);
      v3251 = vextq_s8(v3250, v3250, 8uLL).u64[0];
      v3252 = vextq_s8(v3249, v3249, 8uLL).u64[0];
      v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
      v3255 = *((int8x16_t *)v3261 + 16);
      v3256 = *((int8x16_t *)v3261 + 17);
      v3258 = vextq_s8(v3256, v3256, 8uLL).u64[0];
      v3259 = vextq_s8(v3255, v3255, 8uLL).u64[0];
      v3257 = vextq_s8(v3254, v3254, 8uLL).u64[0];
      v3218[1] = *((int64x2_t *)v3261 + 1);
      v3218[2] = v3263;
      *v3218 = v3262;
      v3260 = (int64x2_t *)((char *)v3218 + 8 * v3217);
      v3260[1] = v3264;
      v3260[2] = v3265;
      goto LABEL_1601;
    }
    v3216 = *(_QWORD *)(a1 + 304) + 8 * v3211;
    v3217 = *(unsigned int *)(a2 + 16);
    v3218 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3214 + (_DWORD)v3217 * v3215));
    v3219 = *(int64x2_t *)(v3216 + 16);
    v3220 = *(int64x2_t *)(v3216 + 64);
    v3221 = *(int64x2_t *)(v3216 + 80);
    v3223 = *(int64x2_t *)(v3216 + 32);
    v3222 = *(int64x2_t *)(v3216 + 48);
    v3224 = *(int64x2_t *)(v3216 + 96);
    v3225 = *(int64x2_t *)(v3216 + 112);
    v3226 = *(int64x2_t *)(v3216 + 128);
    v3227 = *(int64x2_t *)(v3216 + 192);
    v3228 = *(int64x2_t *)(v3216 + 208);
    v3229 = *(int64x2_t *)(v3216 + 224);
    v3230 = vzip1q_s64(*(int64x2_t *)v3216, v3222);
    v3231 = vzip1q_s64(v3224, *(int64x2_t *)(v3216 + 144));
    v3232 = vzip1q_s64(v3227, *(int64x2_t *)(v3216 + 240));
    v3233.i64[0] = vdupq_laneq_s64(v3224, 1).u64[0];
    v3233.i64[1] = *(_QWORD *)(v3216 + 152);
    v3234 = vzip2q_s64(*(int64x2_t *)v3216, v3222);
    v3235.i64[0] = vdupq_laneq_s64(v3227, 1).u64[0];
    v3235.i64[1] = *(_QWORD *)(v3216 + 248);
    v3236 = (int8x16_t)vzip1q_s64(v3219, v3220);
    v3237 = (int8x16_t)vzip1q_s64(v3225, *(int64x2_t *)(v3216 + 160));
    v3238 = (int8x16_t)vzip1q_s64(v3228, *(int64x2_t *)(v3216 + 256));
    v3239 = vextq_s8(v3238, v3238, 8uLL).u64[0];
    v3240 = vextq_s8(v3237, v3237, 8uLL).u64[0];
    v3241 = vextq_s8(v3236, v3236, 8uLL).u64[0];
    v3242 = (int8x16_t)vzip2q_s64(v3219, v3220);
    v3243.i64[0] = vdupq_laneq_s64(v3225, 1).u64[0];
    v3243.i64[1] = *(_QWORD *)(v3216 + 168);
    v3244.i64[0] = vdupq_laneq_s64(v3228, 1).u64[0];
    v3244.i64[1] = *(_QWORD *)(v3216 + 264);
    v3245 = vextq_s8(v3242, v3242, 8uLL).u64[0];
    v3246 = vextq_s8(v3244, v3244, 8uLL).u64[0];
    v3247 = vextq_s8(v3243, v3243, 8uLL).u64[0];
    v3248 = (int8x16_t)vzip1q_s64(v3223, v3221);
    v3249 = (int8x16_t)vzip1q_s64(v3226, *(int64x2_t *)(v3216 + 176));
    v3250 = (int8x16_t)vzip1q_s64(v3229, *(int64x2_t *)(v3216 + 272));
    v3251 = vextq_s8(v3250, v3250, 8uLL).u64[0];
    v3252 = vextq_s8(v3249, v3249, 8uLL).u64[0];
    v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
    v3254 = (int8x16_t)vzip2q_s64(v3223, v3221);
    v3255.i64[0] = vdupq_laneq_s64(v3226, 1).u64[0];
    v3255.i64[1] = *(_QWORD *)(v3216 + 184);
    v3256.i64[0] = vdupq_laneq_s64(v3229, 1).u64[0];
    v3256.i64[1] = *(_QWORD *)(v3216 + 280);
    v3257 = vextq_s8(v3254, v3254, 8uLL).u64[0];
    v3258 = vextq_s8(v3256, v3256, 8uLL).u64[0];
    v3259 = vextq_s8(v3255, v3255, 8uLL).u64[0];
    v3218[1] = v3231;
    v3218[2] = v3232;
    *v3218 = v3230;
    v3260 = (int64x2_t *)((char *)v3218 + 8 * v3217);
    v3260[1] = v3233;
    v3260[2] = v3235;
LABEL_1601:
    *v3260 = v3234;
    v3236.i64[1] = v3241;
    v3237.i64[1] = v3240;
    v3266 = (int8x16_t *)&v3218[v3217];
    *v3266 = v3236;
    v3266[1] = v3237;
    v3238.i64[1] = v3239;
    v3266[2] = v3238;
    v3267 = (int8x16_t *)((char *)v3218 + 24 * v3217);
    v3244.i64[1] = v3246;
    v3243.i64[1] = v3247;
    v3242.i64[1] = v3245;
    v3267[1] = v3243;
    v3267[2] = v3244;
    *v3267 = v3242;
    v3268 = (int8x16_t *)&v3218[2 * v3217];
    v3250.i64[1] = v3251;
    v3249.i64[1] = v3252;
    v3248.i64[1] = v3253;
    v3268[1] = v3249;
    v3268[2] = v3250;
    *v3268 = v3248;
    v3269 = (int8x16_t *)((char *)v3218 + 40 * v3217);
    v3256.i64[1] = v3258;
    v3255.i64[1] = v3259;
    v3269[1] = v3255;
    v3269[2] = v3256;
    v3254.i64[1] = v3257;
    v3270 = v3207 + 1;
    *v3269 = v3254;
    while (v3270 != v3210)
    {
      ++v3209;
      v3271 = *v3270++;
      v3211 = v3271;
      if (v3271 != -1)
      {
        v3207 = v3270 - 1;
        v3212 = v3209;
        v3213 = a3[6];
        if (v2040)
          goto LABEL_1597;
        goto LABEL_1599;
      }
    }
    v3202 = *(_DWORD *)(a1 + 300);
LABEL_1591:
    ++v3203;
    ++v3204;
    if (v3203 < v3202)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1611:
  v3275 = *(_DWORD *)(a1 + 1740);
  if (!v3275)
    goto LABEL_1634;
  v3276 = 0;
  v3277 = a4[3];
  while (2)
  {
    v3278 = *(_QWORD *)(a1 + 1816);
    v3279 = *(_DWORD *)(a1 + 1840) * v3276;
    v3280 = (uint64_t *)(v3278 + 8 * v3279);
    v3281 = *(_DWORD *)(a1 + 1736);
    if (v3281 && *v3280 == -1)
    {
      v3282 = 0;
      v3364 = 8 * (v3281 + v3279) - 8 * v3279 - 8;
      v3365 = v3278 + 8 * v3279;
      while (v3364)
      {
        v3280 = (uint64_t *)(v3365 + 8);
        ++v3282;
        v3366 = *(_QWORD *)(v3365 + 8);
        v3364 -= 8;
        v3365 += 8;
        if (v3366 != -1)
          goto LABEL_1618;
      }
      goto LABEL_1614;
    }
    v3282 = 0;
LABEL_1618:
    v3283 = (uint64_t *)(v3278 + 8 * (v3279 + v3281));
    if (v3280 == v3283)
      goto LABEL_1614;
    v3284 = *v3280;
    v3285 = v3282;
    v3286 = a3[6];
    if (!v2040)
    {
LABEL_1622:
      v3288 = *(_DWORD *)(v3286 + 4 * v3285);
      v3287 = *v3277;
      goto LABEL_1623;
    }
LABEL_1620:
    v3287 = *v3277;
    v3288 = *(_DWORD *)(v3286 + 4 * v3285);
    if (*v3277 >= v3288)
    {
LABEL_1623:
      v3325 = (__int128 *)(*(_QWORD *)(a1 + 1744) + 8 * v3284);
      v3326 = *(unsigned int *)(a2 + 16);
      v3327 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3288 + (_DWORD)v3326 * v3287));
      v3328 = *v3325;
      v3329 = v3325[2];
      v3330 = v3325[3];
      v3331 = v3325[4];
      v3332 = v3325[5];
      v3333 = v3325[6];
      v3334 = v3325[7];
      v3335 = v3325[8];
      v3336 = v3325[9];
      v3337 = v3325[10];
      v3338 = v3325[11];
      v3339 = v3325[12];
      v3340 = v3325[13];
      v3341 = v3325[14];
      v3342 = v3325[15];
      v3343 = v3325[16];
      v3344 = v3325[17];
      v3345 = v3325[18];
      v3346 = v3325[19];
      v3347 = v3325[20];
      v3348 = v3325[21];
      v3349 = v3325[22];
      v3350 = v3325[23];
      v3351 = v3325[24];
      v3352 = v3325[25];
      v3353 = v3325[26];
      v3327[1] = v3325[1];
      v3327[2] = v3329;
      *v3327 = v3328;
      v3354 = (_OWORD *)((char *)v3327 + 8 * v3326);
      v3354[1] = v3331;
      v3354[2] = v3332;
      *v3354 = v3330;
      v3355 = &v3327[v3326];
      v3355[1] = v3334;
      v3355[2] = v3335;
      *v3355 = v3333;
      v3356 = (_OWORD *)((char *)v3327 + 24 * v3326);
      v3356[1] = v3337;
      v3356[2] = v3338;
      *v3356 = v3336;
      v3357 = &v3327[2 * v3326];
      v3357[1] = v3340;
      v3357[2] = v3341;
      *v3357 = v3339;
      v3358 = (_OWORD *)((char *)v3327 + 40 * v3326);
      v3358[1] = v3343;
      v3358[2] = v3344;
      *v3358 = v3342;
      v3359 = &v3327[3 * v3326];
      v3359[1] = v3346;
      v3359[2] = v3347;
      *v3359 = v3345;
      v3360 = (_OWORD *)((char *)v3327 + 56 * v3326);
      v3360[1] = v3349;
      v3360[2] = v3350;
      *v3360 = v3348;
      v3361 = &v3327[4 * v3326];
      v3361[1] = v3352;
      v3361[2] = v3353;
      *v3361 = v3351;
      goto LABEL_1624;
    }
    v3289 = *(_QWORD *)(a1 + 1744) + 8 * v3284;
    v3290 = *(unsigned int *)(a2 + 16);
    v3291 = *(_QWORD *)a2 + 8 * (v3287 + (_DWORD)v3290 * v3288);
    v3292 = *(int64x2_t *)(v3289 + 16);
    v3294 = *(int64x2_t *)(v3289 + 64);
    v3293 = *(int64x2_t *)(v3289 + 80);
    v3295 = *(int64x2_t *)(v3289 + 32);
    v3296 = *(int64x2_t *)(v3289 + 48);
    v3298 = *(int64x2_t *)(v3289 + 96);
    v3297 = *(int64x2_t *)(v3289 + 112);
    v3300 = *(int64x2_t *)(v3289 + 160);
    v3299 = *(int64x2_t *)(v3289 + 176);
    v3301 = *(int64x2_t *)(v3289 + 128);
    v3302 = *(int64x2_t *)(v3289 + 144);
    v3304 = *(int64x2_t *)(v3289 + 192);
    v3303 = *(int64x2_t *)(v3289 + 208);
    v3306 = *(int64x2_t *)(v3289 + 256);
    v3305 = *(int64x2_t *)(v3289 + 272);
    v3307 = *(int64x2_t *)(v3289 + 224);
    v3308 = *(int64x2_t *)(v3289 + 240);
    v3310 = *(int64x2_t *)(v3289 + 288);
    v3309 = *(int64x2_t *)(v3289 + 304);
    v3312 = *(int64x2_t *)(v3289 + 352);
    v3311 = *(int64x2_t *)(v3289 + 368);
    v3314 = *(int64x2_t *)(v3289 + 320);
    v3313 = *(int64x2_t *)(v3289 + 336);
    v3316 = *(_OWORD *)(v3289 + 400);
    v3315 = *(_OWORD *)(v3289 + 416);
    v3317 = *(_OWORD *)(v3289 + 384);
    v3318 = vzip1q_s64(*(int64x2_t *)v3289, v3296);
    v3319 = vzip2q_s64(*(int64x2_t *)v3289, v3296);
    *(int64x2_t *)(v3291 + 32) = vzip1q_s64(v3304, v3308);
    *(int64x2_t *)(v3291 + 48) = vzip1q_s64(v3310, v3313);
    *(_QWORD *)(v3291 + 64) = v3317;
    *(int64x2_t *)v3291 = v3318;
    *(int64x2_t *)(v3291 + 16) = vzip1q_s64(v3298, v3302);
    v3320 = (int64x2_t *)(v3291 + 8 * v3290);
    v3320[2] = vzip2q_s64(v3304, v3308);
    v3320[3] = vzip2q_s64(v3310, v3313);
    *v3320 = v3319;
    v3320[1] = vzip2q_s64(v3298, v3302);
    v3320[4].i64[0] = *((_QWORD *)&v3317 + 1);
    v3321 = (int64x2_t *)(v3291 + 16 * v3290);
    v3321[4].i64[0] = v3316;
    v3321[2] = vzip1q_s64(v3303, v3306);
    v3321[3] = vzip1q_s64(v3309, v3312);
    *v3321 = vzip1q_s64(v3292, v3294);
    v3321[1] = vzip1q_s64(v3297, v3300);
    v3322 = (int64x2_t *)(v3291 + 24 * v3290);
    v3322[4].i64[0] = *((_QWORD *)&v3316 + 1);
    v3322[2] = vzip2q_s64(v3303, v3306);
    v3322[3] = vzip2q_s64(v3309, v3312);
    *v3322 = vzip2q_s64(v3292, v3294);
    v3322[1] = vzip2q_s64(v3297, v3300);
    v3323 = (int64x2_t *)(v3291 + 32 * v3290);
    v3323[4].i64[0] = v3315;
    v3323[2] = vzip1q_s64(v3307, v3305);
    v3323[3] = vzip1q_s64(v3314, v3311);
    *v3323 = vzip1q_s64(v3295, v3293);
    v3323[1] = vzip1q_s64(v3301, v3299);
    v3324 = (int64x2_t *)(v3291 + 40 * v3290);
    v3324[4].i64[0] = *((_QWORD *)&v3315 + 1);
    v3324[2] = vzip2q_s64(v3307, v3305);
    v3324[3] = vzip2q_s64(v3314, v3311);
    *v3324 = vzip2q_s64(v3295, v3293);
    v3324[1] = vzip2q_s64(v3301, v3299);
LABEL_1624:
    v3362 = v3280 + 1;
    while (v3362 != v3283)
    {
      ++v3282;
      v3363 = *v3362++;
      v3284 = v3363;
      if (v3363 != -1)
      {
        v3280 = v3362 - 1;
        v3285 = v3282;
        v3286 = a3[6];
        if (v2040)
          goto LABEL_1620;
        goto LABEL_1622;
      }
    }
    v3275 = *(_DWORD *)(a1 + 1740);
LABEL_1614:
    ++v3276;
    ++v3277;
    if (v3276 < v3275)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1634:
  v3367 = *(_DWORD *)(a1 + 3180);
  if (!v3367)
    goto LABEL_1657;
  v3368 = 0;
  v3369 = a4[6];
  while (2)
  {
    v3370 = *(_QWORD *)(a1 + 3256);
    v3371 = *(_DWORD *)(a1 + 3280) * v3368;
    v3372 = (uint64_t *)(v3370 + 8 * v3371);
    v3373 = *(_DWORD *)(a1 + 3176);
    if (v3373 && *v3372 == -1)
    {
      v3374 = 0;
      v3437 = 8 * (v3373 + v3371) - 8 * v3371 - 8;
      v3438 = v3370 + 8 * v3371;
      while (v3437)
      {
        v3372 = (uint64_t *)(v3438 + 8);
        ++v3374;
        v3439 = *(_QWORD *)(v3438 + 8);
        v3437 -= 8;
        v3438 += 8;
        if (v3439 != -1)
          goto LABEL_1641;
      }
      goto LABEL_1637;
    }
    v3374 = 0;
LABEL_1641:
    v3375 = (uint64_t *)(v3370 + 8 * (v3371 + v3373));
    if (v3372 == v3375)
      goto LABEL_1637;
    v3376 = *v3372;
    v3377 = v3374;
    v3378 = a3[6];
    if (!v2040)
    {
LABEL_1645:
      v3380 = *(_DWORD *)(v3378 + 4 * v3377);
      v3379 = *v3369;
      goto LABEL_1646;
    }
LABEL_1643:
    v3379 = *v3369;
    v3380 = *(_DWORD *)(v3378 + 4 * v3377);
    if (*v3369 >= v3380)
    {
LABEL_1646:
      v3426 = (_OWORD *)(*(_QWORD *)(a1 + 3184) + 8 * v3376);
      v3382 = *(unsigned int *)(a2 + 16);
      v3383 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3380 + (_DWORD)v3382 * v3379));
      v3427 = *(int64x2_t *)v3426;
      v3428 = *((int64x2_t *)v3426 + 2);
      v3399 = *((int64x2_t *)v3426 + 3);
      v3429 = *((int64x2_t *)v3426 + 4);
      v3430 = *((int64x2_t *)v3426 + 5);
      v3401 = *((int8x16_t *)v3426 + 6);
      v3402 = *((int8x16_t *)v3426 + 7);
      v3403 = *((int8x16_t *)v3426 + 8);
      v3407 = *((int8x16_t *)v3426 + 9);
      v3404 = vextq_s8(v3403, v3403, 8uLL).u64[0];
      v3405 = vextq_s8(v3402, v3402, 8uLL).u64[0];
      v3406 = vextq_s8(v3401, v3401, 8uLL).u64[0];
      v3408 = *((int8x16_t *)v3426 + 10);
      v3409 = *((int8x16_t *)v3426 + 11);
      v3411 = vextq_s8(v3409, v3409, 8uLL).u64[0];
      v3412 = vextq_s8(v3408, v3408, 8uLL).u64[0];
      v3410 = vextq_s8(v3407, v3407, 8uLL).u64[0];
      v3413 = *((int8x16_t *)v3426 + 12);
      v3414 = *((int8x16_t *)v3426 + 13);
      v3415 = *((int8x16_t *)v3426 + 14);
      v3419 = *((int8x16_t *)v3426 + 15);
      v3416 = vextq_s8(v3415, v3415, 8uLL).u64[0];
      v3417 = vextq_s8(v3414, v3414, 8uLL).u64[0];
      v3418 = vextq_s8(v3413, v3413, 8uLL).u64[0];
      v3420 = *((int8x16_t *)v3426 + 16);
      v3421 = *((int8x16_t *)v3426 + 17);
      v3423 = vextq_s8(v3421, v3421, 8uLL).u64[0];
      v3424 = vextq_s8(v3420, v3420, 8uLL).u64[0];
      v3422 = vextq_s8(v3419, v3419, 8uLL).u64[0];
      v3383[1] = *((int64x2_t *)v3426 + 1);
      v3383[2] = v3428;
      *v3383 = v3427;
      v3425 = (int64x2_t *)((char *)v3383 + 8 * v3382);
      v3425[1] = v3429;
      v3425[2] = v3430;
      goto LABEL_1647;
    }
    v3381 = *(_QWORD *)(a1 + 3184) + 8 * v3376;
    v3382 = *(unsigned int *)(a2 + 16);
    v3383 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3379 + (_DWORD)v3382 * v3380));
    v3384 = *(int64x2_t *)(v3381 + 16);
    v3385 = *(int64x2_t *)(v3381 + 64);
    v3386 = *(int64x2_t *)(v3381 + 80);
    v3388 = *(int64x2_t *)(v3381 + 32);
    v3387 = *(int64x2_t *)(v3381 + 48);
    v3389 = *(int64x2_t *)(v3381 + 96);
    v3390 = *(int64x2_t *)(v3381 + 112);
    v3391 = *(int64x2_t *)(v3381 + 128);
    v3392 = *(int64x2_t *)(v3381 + 192);
    v3393 = *(int64x2_t *)(v3381 + 208);
    v3394 = *(int64x2_t *)(v3381 + 224);
    v3395 = vzip1q_s64(*(int64x2_t *)v3381, v3387);
    v3396 = vzip1q_s64(v3389, *(int64x2_t *)(v3381 + 144));
    v3397 = vzip1q_s64(v3392, *(int64x2_t *)(v3381 + 240));
    v3398.i64[0] = vdupq_laneq_s64(v3389, 1).u64[0];
    v3398.i64[1] = *(_QWORD *)(v3381 + 152);
    v3399 = vzip2q_s64(*(int64x2_t *)v3381, v3387);
    v3400.i64[0] = vdupq_laneq_s64(v3392, 1).u64[0];
    v3400.i64[1] = *(_QWORD *)(v3381 + 248);
    v3401 = (int8x16_t)vzip1q_s64(v3384, v3385);
    v3402 = (int8x16_t)vzip1q_s64(v3390, *(int64x2_t *)(v3381 + 160));
    v3403 = (int8x16_t)vzip1q_s64(v3393, *(int64x2_t *)(v3381 + 256));
    v3404 = vextq_s8(v3403, v3403, 8uLL).u64[0];
    v3405 = vextq_s8(v3402, v3402, 8uLL).u64[0];
    v3406 = vextq_s8(v3401, v3401, 8uLL).u64[0];
    v3407 = (int8x16_t)vzip2q_s64(v3384, v3385);
    v3408.i64[0] = vdupq_laneq_s64(v3390, 1).u64[0];
    v3408.i64[1] = *(_QWORD *)(v3381 + 168);
    v3409.i64[0] = vdupq_laneq_s64(v3393, 1).u64[0];
    v3409.i64[1] = *(_QWORD *)(v3381 + 264);
    v3410 = vextq_s8(v3407, v3407, 8uLL).u64[0];
    v3411 = vextq_s8(v3409, v3409, 8uLL).u64[0];
    v3412 = vextq_s8(v3408, v3408, 8uLL).u64[0];
    v3413 = (int8x16_t)vzip1q_s64(v3388, v3386);
    v3414 = (int8x16_t)vzip1q_s64(v3391, *(int64x2_t *)(v3381 + 176));
    v3415 = (int8x16_t)vzip1q_s64(v3394, *(int64x2_t *)(v3381 + 272));
    v3416 = vextq_s8(v3415, v3415, 8uLL).u64[0];
    v3417 = vextq_s8(v3414, v3414, 8uLL).u64[0];
    v3418 = vextq_s8(v3413, v3413, 8uLL).u64[0];
    v3419 = (int8x16_t)vzip2q_s64(v3388, v3386);
    v3420.i64[0] = vdupq_laneq_s64(v3391, 1).u64[0];
    v3420.i64[1] = *(_QWORD *)(v3381 + 184);
    v3421.i64[0] = vdupq_laneq_s64(v3394, 1).u64[0];
    v3421.i64[1] = *(_QWORD *)(v3381 + 280);
    v3422 = vextq_s8(v3419, v3419, 8uLL).u64[0];
    v3423 = vextq_s8(v3421, v3421, 8uLL).u64[0];
    v3424 = vextq_s8(v3420, v3420, 8uLL).u64[0];
    v3383[1] = v3396;
    v3383[2] = v3397;
    *v3383 = v3395;
    v3425 = (int64x2_t *)((char *)v3383 + 8 * v3382);
    v3425[1] = v3398;
    v3425[2] = v3400;
LABEL_1647:
    *v3425 = v3399;
    v3401.i64[1] = v3406;
    v3402.i64[1] = v3405;
    v3431 = (int8x16_t *)&v3383[v3382];
    *v3431 = v3401;
    v3431[1] = v3402;
    v3403.i64[1] = v3404;
    v3431[2] = v3403;
    v3432 = (int8x16_t *)((char *)v3383 + 24 * v3382);
    v3409.i64[1] = v3411;
    v3408.i64[1] = v3412;
    v3407.i64[1] = v3410;
    v3432[1] = v3408;
    v3432[2] = v3409;
    *v3432 = v3407;
    v3433 = (int8x16_t *)&v3383[2 * v3382];
    v3415.i64[1] = v3416;
    v3414.i64[1] = v3417;
    v3413.i64[1] = v3418;
    v3433[1] = v3414;
    v3433[2] = v3415;
    *v3433 = v3413;
    v3434 = (int8x16_t *)((char *)v3383 + 40 * v3382);
    v3421.i64[1] = v3423;
    v3420.i64[1] = v3424;
    v3434[1] = v3420;
    v3434[2] = v3421;
    v3419.i64[1] = v3422;
    v3435 = v3372 + 1;
    *v3434 = v3419;
    while (v3435 != v3375)
    {
      ++v3374;
      v3436 = *v3435++;
      v3376 = v3436;
      if (v3436 != -1)
      {
        v3372 = v3435 - 1;
        v3377 = v3374;
        v3378 = a3[6];
        if (v2040)
          goto LABEL_1643;
        goto LABEL_1645;
      }
    }
    v3367 = *(_DWORD *)(a1 + 3180);
LABEL_1637:
    ++v3368;
    ++v3369;
    if (v3368 < v3367)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1657:
  v3440 = *(_DWORD *)(a1 + 4620);
  if (!v3440)
    goto LABEL_1680;
  v3441 = 0;
  v3442 = a4[9];
  while (2)
  {
    v3443 = *(_QWORD *)(a1 + 4696);
    v3444 = *(_DWORD *)(a1 + 4720) * v3441;
    v3445 = (uint64_t *)(v3443 + 8 * v3444);
    v3446 = *(_DWORD *)(a1 + 4616);
    if (v3446 && *v3445 == -1)
    {
      v3447 = 0;
      v3510 = 8 * (v3446 + v3444) - 8 * v3444 - 8;
      v3511 = v3443 + 8 * v3444;
      while (v3510)
      {
        v3445 = (uint64_t *)(v3511 + 8);
        ++v3447;
        v3512 = *(_QWORD *)(v3511 + 8);
        v3510 -= 8;
        v3511 += 8;
        if (v3512 != -1)
          goto LABEL_1664;
      }
      goto LABEL_1660;
    }
    v3447 = 0;
LABEL_1664:
    v3448 = (uint64_t *)(v3443 + 8 * (v3444 + v3446));
    if (v3445 == v3448)
      goto LABEL_1660;
    v3449 = *v3445;
    v3450 = v3447;
    v3451 = a3[6];
    if (!v2040)
    {
LABEL_1668:
      v3453 = *(_DWORD *)(v3451 + 4 * v3450);
      v3452 = *v3442;
      goto LABEL_1669;
    }
LABEL_1666:
    v3452 = *v3442;
    v3453 = *(_DWORD *)(v3451 + 4 * v3450);
    if (*v3442 >= v3453)
    {
LABEL_1669:
      v3499 = (_OWORD *)(*(_QWORD *)(a1 + 4624) + 8 * v3449);
      v3455 = *(unsigned int *)(a2 + 16);
      v3456 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3453 + (_DWORD)v3455 * v3452));
      v3500 = *(int64x2_t *)v3499;
      v3501 = *((int64x2_t *)v3499 + 2);
      v3472 = *((int64x2_t *)v3499 + 3);
      v3502 = *((int64x2_t *)v3499 + 4);
      v3503 = *((int64x2_t *)v3499 + 5);
      v3474 = *((int8x16_t *)v3499 + 6);
      v3475 = *((int8x16_t *)v3499 + 7);
      v3476 = *((int8x16_t *)v3499 + 8);
      v3480 = *((int8x16_t *)v3499 + 9);
      v3477 = vextq_s8(v3476, v3476, 8uLL).u64[0];
      v3478 = vextq_s8(v3475, v3475, 8uLL).u64[0];
      v3479 = vextq_s8(v3474, v3474, 8uLL).u64[0];
      v3481 = *((int8x16_t *)v3499 + 10);
      v3482 = *((int8x16_t *)v3499 + 11);
      v3484 = vextq_s8(v3482, v3482, 8uLL).u64[0];
      v3485 = vextq_s8(v3481, v3481, 8uLL).u64[0];
      v3483 = vextq_s8(v3480, v3480, 8uLL).u64[0];
      v3486 = *((int8x16_t *)v3499 + 12);
      v3487 = *((int8x16_t *)v3499 + 13);
      v3488 = *((int8x16_t *)v3499 + 14);
      v3492 = *((int8x16_t *)v3499 + 15);
      v3489 = vextq_s8(v3488, v3488, 8uLL).u64[0];
      v3490 = vextq_s8(v3487, v3487, 8uLL).u64[0];
      v3491 = vextq_s8(v3486, v3486, 8uLL).u64[0];
      v3493 = *((int8x16_t *)v3499 + 16);
      v3494 = *((int8x16_t *)v3499 + 17);
      v3496 = vextq_s8(v3494, v3494, 8uLL).u64[0];
      v3497 = vextq_s8(v3493, v3493, 8uLL).u64[0];
      v3495 = vextq_s8(v3492, v3492, 8uLL).u64[0];
      v3456[1] = *((int64x2_t *)v3499 + 1);
      v3456[2] = v3501;
      *v3456 = v3500;
      v3498 = (int64x2_t *)((char *)v3456 + 8 * v3455);
      v3498[1] = v3502;
      v3498[2] = v3503;
      goto LABEL_1670;
    }
    v3454 = *(_QWORD *)(a1 + 4624) + 8 * v3449;
    v3455 = *(unsigned int *)(a2 + 16);
    v3456 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3452 + (_DWORD)v3455 * v3453));
    v3457 = *(int64x2_t *)(v3454 + 16);
    v3458 = *(int64x2_t *)(v3454 + 64);
    v3459 = *(int64x2_t *)(v3454 + 80);
    v3461 = *(int64x2_t *)(v3454 + 32);
    v3460 = *(int64x2_t *)(v3454 + 48);
    v3462 = *(int64x2_t *)(v3454 + 96);
    v3463 = *(int64x2_t *)(v3454 + 112);
    v3464 = *(int64x2_t *)(v3454 + 128);
    v3465 = *(int64x2_t *)(v3454 + 192);
    v3466 = *(int64x2_t *)(v3454 + 208);
    v3467 = *(int64x2_t *)(v3454 + 224);
    v3468 = vzip1q_s64(*(int64x2_t *)v3454, v3460);
    v3469 = vzip1q_s64(v3462, *(int64x2_t *)(v3454 + 144));
    v3470 = vzip1q_s64(v3465, *(int64x2_t *)(v3454 + 240));
    v3471.i64[0] = vdupq_laneq_s64(v3462, 1).u64[0];
    v3471.i64[1] = *(_QWORD *)(v3454 + 152);
    v3472 = vzip2q_s64(*(int64x2_t *)v3454, v3460);
    v3473.i64[0] = vdupq_laneq_s64(v3465, 1).u64[0];
    v3473.i64[1] = *(_QWORD *)(v3454 + 248);
    v3474 = (int8x16_t)vzip1q_s64(v3457, v3458);
    v3475 = (int8x16_t)vzip1q_s64(v3463, *(int64x2_t *)(v3454 + 160));
    v3476 = (int8x16_t)vzip1q_s64(v3466, *(int64x2_t *)(v3454 + 256));
    v3477 = vextq_s8(v3476, v3476, 8uLL).u64[0];
    v3478 = vextq_s8(v3475, v3475, 8uLL).u64[0];
    v3479 = vextq_s8(v3474, v3474, 8uLL).u64[0];
    v3480 = (int8x16_t)vzip2q_s64(v3457, v3458);
    v3481.i64[0] = vdupq_laneq_s64(v3463, 1).u64[0];
    v3481.i64[1] = *(_QWORD *)(v3454 + 168);
    v3482.i64[0] = vdupq_laneq_s64(v3466, 1).u64[0];
    v3482.i64[1] = *(_QWORD *)(v3454 + 264);
    v3483 = vextq_s8(v3480, v3480, 8uLL).u64[0];
    v3484 = vextq_s8(v3482, v3482, 8uLL).u64[0];
    v3485 = vextq_s8(v3481, v3481, 8uLL).u64[0];
    v3486 = (int8x16_t)vzip1q_s64(v3461, v3459);
    v3487 = (int8x16_t)vzip1q_s64(v3464, *(int64x2_t *)(v3454 + 176));
    v3488 = (int8x16_t)vzip1q_s64(v3467, *(int64x2_t *)(v3454 + 272));
    v3489 = vextq_s8(v3488, v3488, 8uLL).u64[0];
    v3490 = vextq_s8(v3487, v3487, 8uLL).u64[0];
    v3491 = vextq_s8(v3486, v3486, 8uLL).u64[0];
    v3492 = (int8x16_t)vzip2q_s64(v3461, v3459);
    v3493.i64[0] = vdupq_laneq_s64(v3464, 1).u64[0];
    v3493.i64[1] = *(_QWORD *)(v3454 + 184);
    v3494.i64[0] = vdupq_laneq_s64(v3467, 1).u64[0];
    v3494.i64[1] = *(_QWORD *)(v3454 + 280);
    v3495 = vextq_s8(v3492, v3492, 8uLL).u64[0];
    v3496 = vextq_s8(v3494, v3494, 8uLL).u64[0];
    v3497 = vextq_s8(v3493, v3493, 8uLL).u64[0];
    v3456[1] = v3469;
    v3456[2] = v3470;
    *v3456 = v3468;
    v3498 = (int64x2_t *)((char *)v3456 + 8 * v3455);
    v3498[1] = v3471;
    v3498[2] = v3473;
LABEL_1670:
    *v3498 = v3472;
    v3474.i64[1] = v3479;
    v3475.i64[1] = v3478;
    v3504 = (int8x16_t *)&v3456[v3455];
    *v3504 = v3474;
    v3504[1] = v3475;
    v3476.i64[1] = v3477;
    v3504[2] = v3476;
    v3505 = (int8x16_t *)((char *)v3456 + 24 * v3455);
    v3482.i64[1] = v3484;
    v3481.i64[1] = v3485;
    v3480.i64[1] = v3483;
    v3505[1] = v3481;
    v3505[2] = v3482;
    *v3505 = v3480;
    v3506 = (int8x16_t *)&v3456[2 * v3455];
    v3488.i64[1] = v3489;
    v3487.i64[1] = v3490;
    v3486.i64[1] = v3491;
    v3506[1] = v3487;
    v3506[2] = v3488;
    *v3506 = v3486;
    v3507 = (int8x16_t *)((char *)v3456 + 40 * v3455);
    v3494.i64[1] = v3496;
    v3493.i64[1] = v3497;
    v3507[1] = v3493;
    v3507[2] = v3494;
    v3492.i64[1] = v3495;
    v3508 = v3445 + 1;
    *v3507 = v3492;
    while (v3508 != v3448)
    {
      ++v3447;
      v3509 = *v3508++;
      v3449 = v3509;
      if (v3509 != -1)
      {
        v3445 = v3508 - 1;
        v3450 = v3447;
        v3451 = a3[6];
        if (v2040)
          goto LABEL_1666;
        goto LABEL_1668;
      }
    }
    v3440 = *(_DWORD *)(a1 + 4620);
LABEL_1660:
    ++v3441;
    ++v3442;
    if (v3441 < v3440)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1680:
  v3513 = *(_DWORD *)(a1 + 6060);
  if (!v3513)
    goto LABEL_1703;
  v3514 = 0;
  v3515 = a4[12];
  while (2)
  {
    v3516 = *(_QWORD *)(a1 + 6136);
    v3517 = *(_DWORD *)(a1 + 6160) * v3514;
    v3518 = (uint64_t *)(v3516 + 8 * v3517);
    v3519 = *(_DWORD *)(a1 + 6056);
    if (v3519 && *v3518 == -1)
    {
      v3520 = 0;
      v3560 = 8 * (v3519 + v3517) - 8 * v3517 - 8;
      v3561 = v3516 + 8 * v3517;
      while (v3560)
      {
        v3518 = (uint64_t *)(v3561 + 8);
        ++v3520;
        v3562 = *(_QWORD *)(v3561 + 8);
        v3560 -= 8;
        v3561 += 8;
        if (v3562 != -1)
          goto LABEL_1687;
      }
      goto LABEL_1683;
    }
    v3520 = 0;
LABEL_1687:
    v3521 = (uint64_t *)(v3516 + 8 * (v3517 + v3519));
    if (v3518 == v3521)
      goto LABEL_1683;
    v3522 = *v3518;
    v3523 = v3520;
    v3524 = a3[6];
    if (!v2040)
    {
LABEL_1691:
      v3526 = *(_DWORD *)(v3524 + 4 * v3523);
      v3525 = *v3515;
      goto LABEL_1692;
    }
LABEL_1689:
    v3525 = *v3515;
    v3526 = *(_DWORD *)(v3524 + 4 * v3523);
    if (*v3515 >= v3526)
    {
LABEL_1692:
      v3545 = (__int128 *)(*(_QWORD *)(a1 + 6064) + 8 * v3522);
      v3546 = *(unsigned int *)(a2 + 16);
      v3547 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3526 + (_DWORD)v3546 * v3525));
      v3548 = *v3545;
      v3549 = v3545[2];
      v3550 = v3545[3];
      v3551 = v3545[4];
      v3552 = v3545[5];
      v3553 = v3545[6];
      v3554 = v3545[7];
      v3555 = v3545[8];
      v3547[1] = v3545[1];
      v3547[2] = v3549;
      *v3547 = v3548;
      v3556 = (_OWORD *)((char *)v3547 + 8 * v3546);
      v3556[1] = v3551;
      v3556[2] = v3552;
      *v3556 = v3550;
      v3557 = &v3547[v3546];
      v3557[1] = v3554;
      v3557[2] = v3555;
      *v3557 = v3553;
      goto LABEL_1693;
    }
    v3527 = *(_QWORD *)(a1 + 6064) + 8 * v3522;
    v3528 = *(unsigned int *)(a2 + 16);
    v3529 = *(_QWORD *)a2 + 8 * (v3525 + (_DWORD)v3528 * v3526);
    v3530 = *(int64x2_t *)(v3527 + 16);
    v3532 = *(int64x2_t *)(v3527 + 64);
    v3531 = *(int64x2_t *)(v3527 + 80);
    v3533 = *(int64x2_t *)(v3527 + 32);
    v3534 = *(int64x2_t *)(v3527 + 48);
    v3536 = *(_OWORD *)(v3527 + 112);
    v3535 = *(_OWORD *)(v3527 + 128);
    v3537 = *(_OWORD *)(v3527 + 96);
    v3538 = vzip1q_s64(*(int64x2_t *)v3527, v3534);
    v3539 = vzip2q_s64(*(int64x2_t *)v3527, v3534);
    *(_QWORD *)(v3529 + 16) = v3537;
    *(int64x2_t *)v3529 = v3538;
    v3540 = (int64x2_t *)(v3529 + 8 * v3528);
    *v3540 = v3539;
    v3540[1].i64[0] = *((_QWORD *)&v3537 + 1);
    v3541 = (int64x2_t *)(v3529 + 16 * v3528);
    v3541[1].i64[0] = v3536;
    *v3541 = vzip1q_s64(v3530, v3532);
    v3542 = (int64x2_t *)(v3529 + 24 * v3528);
    v3542[1].i64[0] = *((_QWORD *)&v3536 + 1);
    *v3542 = vzip2q_s64(v3530, v3532);
    v3543 = (int64x2_t *)(v3529 + 32 * v3528);
    v3543[1].i64[0] = v3535;
    *v3543 = vzip1q_s64(v3533, v3531);
    v3544 = (int64x2_t *)(v3529 + 40 * v3528);
    v3544[1].i64[0] = *((_QWORD *)&v3535 + 1);
    *v3544 = vzip2q_s64(v3533, v3531);
LABEL_1693:
    v3558 = v3518 + 1;
    while (v3558 != v3521)
    {
      ++v3520;
      v3559 = *v3558++;
      v3522 = v3559;
      if (v3559 != -1)
      {
        v3518 = v3558 - 1;
        v3523 = v3520;
        v3524 = a3[6];
        if (v2040)
          goto LABEL_1689;
        goto LABEL_1691;
      }
    }
    v3513 = *(_DWORD *)(a1 + 6060);
LABEL_1683:
    ++v3514;
    ++v3515;
    if (v3514 < v3513)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1703:
  v3563 = *(_DWORD *)(a1 + 7500);
  if (!v3563)
    goto LABEL_1726;
  v3564 = 0;
  v3565 = a4[15];
  while (2)
  {
    v3566 = *(_QWORD *)(a1 + 7576);
    v3567 = *(_DWORD *)(a1 + 7600) * v3564;
    v3568 = (uint64_t *)(v3566 + 8 * v3567);
    v3569 = *(_DWORD *)(a1 + 7496);
    if (v3569 && *v3568 == -1)
    {
      v3570 = 0;
      v3589 = 8 * (v3569 + v3567) - 8 * v3567 - 8;
      v3590 = v3566 + 8 * v3567;
      while (v3589)
      {
        v3568 = (uint64_t *)(v3590 + 8);
        ++v3570;
        v3591 = *(_QWORD *)(v3590 + 8);
        v3589 -= 8;
        v3590 += 8;
        if (v3591 != -1)
          goto LABEL_1710;
      }
      goto LABEL_1706;
    }
    v3570 = 0;
LABEL_1710:
    v3571 = (uint64_t *)(v3566 + 8 * (v3567 + v3569));
    if (v3568 == v3571)
      goto LABEL_1706;
    v3572 = *v3568;
    v3573 = v3570;
    v3574 = a3[6];
    if (!v2040)
    {
LABEL_1714:
      v3576 = *(_DWORD *)(v3574 + 4 * v3573);
      v3575 = *v3565;
      goto LABEL_1715;
    }
LABEL_1712:
    v3575 = *v3565;
    v3576 = *(_DWORD *)(v3574 + 4 * v3573);
    if (*v3565 >= v3576)
    {
LABEL_1715:
      v3583 = (__int128 *)(*(_QWORD *)(a1 + 7504) + 8 * v3572);
      v3584 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3576 + *(_DWORD *)(a2 + 16) * v3575));
      v3585 = v3583[2];
      v3586 = *v3583;
      v3584[1] = v3583[1];
      v3584[2] = v3585;
      *v3584 = v3586;
      goto LABEL_1716;
    }
    v3577 = *(_QWORD *)(a1 + 7504) + 8 * v3572;
    v3578 = *(unsigned int *)(a2 + 16);
    v3579 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v3575 + (_DWORD)v3578 * v3576));
    v3581 = *(int8x16_t *)(v3577 + 16);
    v3580 = *(int8x16_t *)(v3577 + 32);
    v3582 = vextq_s8(*(int8x16_t *)v3577, *(int8x16_t *)v3577, 8uLL).u64[0];
    *v3579 = *(_QWORD *)v3577;
    v3579[v3578] = v3582;
    v3579[2 * v3578] = v3581.i64[0];
    v3579[3 * v3578] = vextq_s8(v3581, v3581, 8uLL).u64[0];
    v3579[4 * v3578] = v3580.i64[0];
    v3579[5 * v3578] = vextq_s8(v3580, v3580, 8uLL).u64[0];
LABEL_1716:
    v3587 = v3568 + 1;
    while (v3587 != v3571)
    {
      ++v3570;
      v3588 = *v3587++;
      v3572 = v3588;
      if (v3588 != -1)
      {
        v3568 = v3587 - 1;
        v3573 = v3570;
        v3574 = a3[6];
        if (v2040)
          goto LABEL_1712;
        goto LABEL_1714;
      }
    }
    v3563 = *(_DWORD *)(a1 + 7500);
LABEL_1706:
    ++v3564;
    ++v3565;
    if (v3564 < v3563)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1726:
  v3592 = *(_DWORD *)(a1 + 8940);
  if (!v3592)
    goto LABEL_1749;
  v3593 = 0;
  v3594 = a4[18];
  while (2)
  {
    v3595 = *(_QWORD *)(a1 + 9016);
    v3596 = *(_DWORD *)(a1 + 9040) * v3593;
    v3597 = (uint64_t *)(v3595 + 8 * v3596);
    v3598 = *(_DWORD *)(a1 + 8936);
    if (v3598 && *v3597 == -1)
    {
      v3599 = 0;
      v3645 = 8 * (v3598 + v3596) - 8 * v3596 - 8;
      v3646 = v3595 + 8 * v3596;
      while (v3645)
      {
        v3597 = (uint64_t *)(v3646 + 8);
        ++v3599;
        v3647 = *(_QWORD *)(v3646 + 8);
        v3645 -= 8;
        v3646 += 8;
        if (v3647 != -1)
          goto LABEL_1733;
      }
      goto LABEL_1729;
    }
    v3599 = 0;
LABEL_1733:
    v3600 = (uint64_t *)(v3595 + 8 * (v3596 + v3598));
    if (v3597 == v3600)
      goto LABEL_1729;
    v3601 = *v3597;
    v3602 = v3599;
    v3603 = a3[6];
    if (!v2040)
    {
LABEL_1737:
      v3605 = *(_DWORD *)(v3603 + 4 * v3602);
      v3604 = *v3594;
      goto LABEL_1738;
    }
LABEL_1735:
    v3604 = *v3594;
    v3605 = *(_DWORD *)(v3603 + 4 * v3602);
    if (*v3594 >= v3605)
    {
LABEL_1738:
      v3626 = (__int128 *)(*(_QWORD *)(a1 + 8944) + 8 * v3601);
      v3627 = *(unsigned int *)(a2 + 16);
      v3628 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3605 + (_DWORD)v3627 * v3604));
      v3629 = *v3626;
      v3630 = v3626[2];
      v3631 = v3626[3];
      v3632 = v3626[4];
      v3633 = v3626[5];
      v3634 = v3626[6];
      v3635 = v3626[7];
      v3636 = v3626[8];
      v3637 = v3626[9];
      v3638 = v3626[10];
      v3639 = v3626[11];
      v3628[1] = v3626[1];
      v3628[2] = v3630;
      *v3628 = v3629;
      v3640 = (_OWORD *)((char *)v3628 + 8 * v3627);
      v3640[1] = v3632;
      v3640[2] = v3633;
      *v3640 = v3631;
      v3641 = &v3628[v3627];
      v3641[1] = v3635;
      v3641[2] = v3636;
      *v3641 = v3634;
      v3642 = (_OWORD *)((char *)v3628 + 24 * v3627);
      v3642[1] = v3638;
      v3642[2] = v3639;
      *v3642 = v3637;
      goto LABEL_1739;
    }
    v3606 = *(_QWORD *)(a1 + 8944) + 8 * v3601;
    v3607 = *(unsigned int *)(a2 + 16);
    v3608 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3604 + (_DWORD)v3607 * v3605));
    v3609 = *(int64x2_t *)(v3606 + 16);
    v3611 = *(int64x2_t *)(v3606 + 64);
    v3610 = *(int64x2_t *)(v3606 + 80);
    v3612 = *(int64x2_t *)(v3606 + 32);
    v3613 = *(int64x2_t *)(v3606 + 48);
    v3615 = *(int64x2_t *)(v3606 + 96);
    v3614 = *(int64x2_t *)(v3606 + 112);
    v3617 = *(int64x2_t *)(v3606 + 160);
    v3616 = *(int64x2_t *)(v3606 + 176);
    v3618 = *(int64x2_t *)(v3606 + 128);
    v3619 = *(int64x2_t *)(v3606 + 144);
    v3620 = vzip2q_s64(*(int64x2_t *)v3606, v3613);
    *v3608 = vzip1q_s64(*(int64x2_t *)v3606, v3613);
    v3608[1] = vzip1q_s64(v3615, v3619);
    v3621 = (int64x2_t *)((char *)v3608 + 8 * v3607);
    *v3621 = v3620;
    v3621[1] = vzip2q_s64(v3615, v3619);
    v3622 = &v3608[v3607];
    *v3622 = vzip1q_s64(v3609, v3611);
    v3622[1] = vzip1q_s64(v3614, v3617);
    v3623 = (int64x2_t *)((char *)v3608 + 24 * v3607);
    *v3623 = vzip2q_s64(v3609, v3611);
    v3623[1] = vzip2q_s64(v3614, v3617);
    v3624 = &v3608[2 * v3607];
    *v3624 = vzip1q_s64(v3612, v3610);
    v3624[1] = vzip1q_s64(v3618, v3616);
    v3625 = (int64x2_t *)((char *)v3608 + 40 * v3607);
    *v3625 = vzip2q_s64(v3612, v3610);
    v3625[1] = vzip2q_s64(v3618, v3616);
LABEL_1739:
    v3643 = v3597 + 1;
    while (v3643 != v3600)
    {
      ++v3599;
      v3644 = *v3643++;
      v3601 = v3644;
      if (v3644 != -1)
      {
        v3597 = v3643 - 1;
        v3602 = v3599;
        v3603 = a3[6];
        if (v2040)
          goto LABEL_1735;
        goto LABEL_1737;
      }
    }
    v3592 = *(_DWORD *)(a1 + 8940);
LABEL_1729:
    ++v3593;
    ++v3594;
    if (v3593 < v3592)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1749:
  v3648 = *(_DWORD *)(a1 + 10380);
  if (!v3648)
    goto LABEL_1772;
  v3649 = 0;
  v3650 = a4[21];
  while (2)
  {
    v3651 = *(_QWORD *)(a1 + 10456);
    v3652 = *(_DWORD *)(a1 + 10480) * v3649;
    v3653 = (uint64_t *)(v3651 + 8 * v3652);
    v3654 = *(_DWORD *)(a1 + 10376);
    if (v3654 && *v3653 == -1)
    {
      v3655 = 0;
      v3701 = 8 * (v3654 + v3652) - 8 * v3652 - 8;
      v3702 = v3651 + 8 * v3652;
      while (v3701)
      {
        v3653 = (uint64_t *)(v3702 + 8);
        ++v3655;
        v3703 = *(_QWORD *)(v3702 + 8);
        v3701 -= 8;
        v3702 += 8;
        if (v3703 != -1)
          goto LABEL_1756;
      }
      goto LABEL_1752;
    }
    v3655 = 0;
LABEL_1756:
    v3656 = (uint64_t *)(v3651 + 8 * (v3652 + v3654));
    if (v3653 == v3656)
      goto LABEL_1752;
    v3657 = *v3653;
    v3658 = v3655;
    v3659 = a3[6];
    if (!v2040)
    {
LABEL_1760:
      v3661 = *(_DWORD *)(v3659 + 4 * v3658);
      v3660 = *v3650;
      goto LABEL_1761;
    }
LABEL_1758:
    v3660 = *v3650;
    v3661 = *(_DWORD *)(v3659 + 4 * v3658);
    if (*v3650 >= v3661)
    {
LABEL_1761:
      v3682 = (__int128 *)(*(_QWORD *)(a1 + 10384) + 8 * v3657);
      v3683 = *(unsigned int *)(a2 + 16);
      v3684 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3661 + (_DWORD)v3683 * v3660));
      v3685 = *v3682;
      v3686 = v3682[2];
      v3687 = v3682[3];
      v3688 = v3682[4];
      v3689 = v3682[5];
      v3690 = v3682[6];
      v3691 = v3682[7];
      v3692 = v3682[8];
      v3693 = v3682[9];
      v3694 = v3682[10];
      v3695 = v3682[11];
      v3684[1] = v3682[1];
      v3684[2] = v3686;
      *v3684 = v3685;
      v3696 = (_OWORD *)((char *)v3684 + 8 * v3683);
      v3696[1] = v3688;
      v3696[2] = v3689;
      *v3696 = v3687;
      v3697 = &v3684[v3683];
      v3697[1] = v3691;
      v3697[2] = v3692;
      *v3697 = v3690;
      v3698 = (_OWORD *)((char *)v3684 + 24 * v3683);
      v3698[1] = v3694;
      v3698[2] = v3695;
      *v3698 = v3693;
      goto LABEL_1762;
    }
    v3662 = *(_QWORD *)(a1 + 10384) + 8 * v3657;
    v3663 = *(unsigned int *)(a2 + 16);
    v3664 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3660 + (_DWORD)v3663 * v3661));
    v3665 = *(int64x2_t *)(v3662 + 16);
    v3667 = *(int64x2_t *)(v3662 + 64);
    v3666 = *(int64x2_t *)(v3662 + 80);
    v3668 = *(int64x2_t *)(v3662 + 32);
    v3669 = *(int64x2_t *)(v3662 + 48);
    v3671 = *(int64x2_t *)(v3662 + 96);
    v3670 = *(int64x2_t *)(v3662 + 112);
    v3673 = *(int64x2_t *)(v3662 + 160);
    v3672 = *(int64x2_t *)(v3662 + 176);
    v3674 = *(int64x2_t *)(v3662 + 128);
    v3675 = *(int64x2_t *)(v3662 + 144);
    v3676 = vzip2q_s64(*(int64x2_t *)v3662, v3669);
    *v3664 = vzip1q_s64(*(int64x2_t *)v3662, v3669);
    v3664[1] = vzip1q_s64(v3671, v3675);
    v3677 = (int64x2_t *)((char *)v3664 + 8 * v3663);
    *v3677 = v3676;
    v3677[1] = vzip2q_s64(v3671, v3675);
    v3678 = &v3664[v3663];
    *v3678 = vzip1q_s64(v3665, v3667);
    v3678[1] = vzip1q_s64(v3670, v3673);
    v3679 = (int64x2_t *)((char *)v3664 + 24 * v3663);
    *v3679 = vzip2q_s64(v3665, v3667);
    v3679[1] = vzip2q_s64(v3670, v3673);
    v3680 = &v3664[2 * v3663];
    *v3680 = vzip1q_s64(v3668, v3666);
    v3680[1] = vzip1q_s64(v3674, v3672);
    v3681 = (int64x2_t *)((char *)v3664 + 40 * v3663);
    *v3681 = vzip2q_s64(v3668, v3666);
    v3681[1] = vzip2q_s64(v3674, v3672);
LABEL_1762:
    v3699 = v3653 + 1;
    while (v3699 != v3656)
    {
      ++v3655;
      v3700 = *v3699++;
      v3657 = v3700;
      if (v3700 != -1)
      {
        v3653 = v3699 - 1;
        v3658 = v3655;
        v3659 = a3[6];
        if (v2040)
          goto LABEL_1758;
        goto LABEL_1760;
      }
    }
    v3648 = *(_DWORD *)(a1 + 10380);
LABEL_1752:
    ++v3649;
    ++v3650;
    if (v3649 < v3648)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1772:
  v3704 = *(_DWORD *)(a1 + 11820);
  if (!v3704)
    goto LABEL_1795;
  v3705 = 0;
  v3706 = a4[24];
  while (2)
  {
    v3707 = *(_QWORD *)(a1 + 11896);
    v3708 = *(_DWORD *)(a1 + 11920) * v3705;
    v3709 = (uint64_t *)(v3707 + 8 * v3708);
    v3710 = *(_DWORD *)(a1 + 11816);
    if (v3710 && *v3709 == -1)
    {
      v3711 = 0;
      v3751 = 8 * (v3710 + v3708) - 8 * v3708 - 8;
      v3752 = v3707 + 8 * v3708;
      while (v3751)
      {
        v3709 = (uint64_t *)(v3752 + 8);
        ++v3711;
        v3753 = *(_QWORD *)(v3752 + 8);
        v3751 -= 8;
        v3752 += 8;
        if (v3753 != -1)
          goto LABEL_1779;
      }
      goto LABEL_1775;
    }
    v3711 = 0;
LABEL_1779:
    v3712 = (uint64_t *)(v3707 + 8 * (v3708 + v3710));
    if (v3709 == v3712)
      goto LABEL_1775;
    v3713 = *v3709;
    v3714 = v3711;
    v3715 = a3[6];
    if (!v2040)
    {
LABEL_1783:
      v3717 = *(_DWORD *)(v3715 + 4 * v3714);
      v3716 = *v3706;
      goto LABEL_1784;
    }
LABEL_1781:
    v3716 = *v3706;
    v3717 = *(_DWORD *)(v3715 + 4 * v3714);
    if (*v3706 >= v3717)
    {
LABEL_1784:
      v3736 = (__int128 *)(*(_QWORD *)(a1 + 11824) + 8 * v3713);
      v3737 = *(unsigned int *)(a2 + 16);
      v3738 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3717 + (_DWORD)v3737 * v3716));
      v3739 = *v3736;
      v3740 = v3736[2];
      v3741 = v3736[3];
      v3742 = v3736[4];
      v3743 = v3736[5];
      v3744 = v3736[6];
      v3745 = v3736[7];
      v3746 = v3736[8];
      v3738[1] = v3736[1];
      v3738[2] = v3740;
      *v3738 = v3739;
      v3747 = (_OWORD *)((char *)v3738 + 8 * v3737);
      v3747[1] = v3742;
      v3747[2] = v3743;
      *v3747 = v3741;
      v3748 = &v3738[v3737];
      v3748[1] = v3745;
      v3748[2] = v3746;
      *v3748 = v3744;
      goto LABEL_1785;
    }
    v3718 = *(_QWORD *)(a1 + 11824) + 8 * v3713;
    v3719 = *(unsigned int *)(a2 + 16);
    v3720 = *(_QWORD *)a2 + 8 * (v3716 + (_DWORD)v3719 * v3717);
    v3721 = *(int64x2_t *)(v3718 + 16);
    v3723 = *(int64x2_t *)(v3718 + 64);
    v3722 = *(int64x2_t *)(v3718 + 80);
    v3724 = *(int64x2_t *)(v3718 + 32);
    v3725 = *(int64x2_t *)(v3718 + 48);
    v3727 = *(_OWORD *)(v3718 + 112);
    v3726 = *(_OWORD *)(v3718 + 128);
    v3728 = *(_OWORD *)(v3718 + 96);
    v3729 = vzip1q_s64(*(int64x2_t *)v3718, v3725);
    v3730 = vzip2q_s64(*(int64x2_t *)v3718, v3725);
    *(_QWORD *)(v3720 + 16) = v3728;
    *(int64x2_t *)v3720 = v3729;
    v3731 = (int64x2_t *)(v3720 + 8 * v3719);
    *v3731 = v3730;
    v3731[1].i64[0] = *((_QWORD *)&v3728 + 1);
    v3732 = (int64x2_t *)(v3720 + 16 * v3719);
    v3732[1].i64[0] = v3727;
    *v3732 = vzip1q_s64(v3721, v3723);
    v3733 = (int64x2_t *)(v3720 + 24 * v3719);
    v3733[1].i64[0] = *((_QWORD *)&v3727 + 1);
    *v3733 = vzip2q_s64(v3721, v3723);
    v3734 = (int64x2_t *)(v3720 + 32 * v3719);
    v3734[1].i64[0] = v3726;
    *v3734 = vzip1q_s64(v3724, v3722);
    v3735 = (int64x2_t *)(v3720 + 40 * v3719);
    v3735[1].i64[0] = *((_QWORD *)&v3726 + 1);
    *v3735 = vzip2q_s64(v3724, v3722);
LABEL_1785:
    v3749 = v3709 + 1;
    while (v3749 != v3712)
    {
      ++v3711;
      v3750 = *v3749++;
      v3713 = v3750;
      if (v3750 != -1)
      {
        v3709 = v3749 - 1;
        v3714 = v3711;
        v3715 = a3[6];
        if (v2040)
          goto LABEL_1781;
        goto LABEL_1783;
      }
    }
    v3704 = *(_DWORD *)(a1 + 11820);
LABEL_1775:
    ++v3705;
    ++v3706;
    if (v3705 < v3704)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1795:
  v3754 = *(_DWORD *)(a1 + 13260);
  if (!v3754)
    goto LABEL_1818;
  v3755 = 0;
  v3756 = a4[27];
  while (2)
  {
    v3757 = *(_QWORD *)(a1 + 13336);
    v3758 = *(_DWORD *)(a1 + 13360) * v3755;
    v3759 = (uint64_t *)(v3757 + 8 * v3758);
    v3760 = *(_DWORD *)(a1 + 13256);
    if (v3760 && *v3759 == -1)
    {
      v3761 = 0;
      v3801 = 8 * (v3760 + v3758) - 8 * v3758 - 8;
      v3802 = v3757 + 8 * v3758;
      while (v3801)
      {
        v3759 = (uint64_t *)(v3802 + 8);
        ++v3761;
        v3803 = *(_QWORD *)(v3802 + 8);
        v3801 -= 8;
        v3802 += 8;
        if (v3803 != -1)
          goto LABEL_1802;
      }
      goto LABEL_1798;
    }
    v3761 = 0;
LABEL_1802:
    v3762 = (uint64_t *)(v3757 + 8 * (v3758 + v3760));
    if (v3759 == v3762)
      goto LABEL_1798;
    v3763 = *v3759;
    v3764 = v3761;
    v3765 = a3[6];
    if (!v2040)
    {
LABEL_1806:
      v3767 = *(_DWORD *)(v3765 + 4 * v3764);
      v3766 = *v3756;
      goto LABEL_1807;
    }
LABEL_1804:
    v3766 = *v3756;
    v3767 = *(_DWORD *)(v3765 + 4 * v3764);
    if (*v3756 >= v3767)
    {
LABEL_1807:
      v3786 = (__int128 *)(*(_QWORD *)(a1 + 13264) + 8 * v3763);
      v3787 = *(unsigned int *)(a2 + 16);
      v3788 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3767 + (_DWORD)v3787 * v3766));
      v3789 = *v3786;
      v3790 = v3786[2];
      v3791 = v3786[3];
      v3792 = v3786[4];
      v3793 = v3786[5];
      v3794 = v3786[6];
      v3795 = v3786[7];
      v3796 = v3786[8];
      v3788[1] = v3786[1];
      v3788[2] = v3790;
      *v3788 = v3789;
      v3797 = (_OWORD *)((char *)v3788 + 8 * v3787);
      v3797[1] = v3792;
      v3797[2] = v3793;
      *v3797 = v3791;
      v3798 = &v3788[v3787];
      v3798[1] = v3795;
      v3798[2] = v3796;
      *v3798 = v3794;
      goto LABEL_1808;
    }
    v3768 = *(_QWORD *)(a1 + 13264) + 8 * v3763;
    v3769 = *(unsigned int *)(a2 + 16);
    v3770 = *(_QWORD *)a2 + 8 * (v3766 + (_DWORD)v3769 * v3767);
    v3771 = *(int64x2_t *)(v3768 + 16);
    v3773 = *(int64x2_t *)(v3768 + 64);
    v3772 = *(int64x2_t *)(v3768 + 80);
    v3774 = *(int64x2_t *)(v3768 + 32);
    v3775 = *(int64x2_t *)(v3768 + 48);
    v3777 = *(_OWORD *)(v3768 + 112);
    v3776 = *(_OWORD *)(v3768 + 128);
    v3778 = *(_OWORD *)(v3768 + 96);
    v3779 = vzip1q_s64(*(int64x2_t *)v3768, v3775);
    v3780 = vzip2q_s64(*(int64x2_t *)v3768, v3775);
    *(_QWORD *)(v3770 + 16) = v3778;
    *(int64x2_t *)v3770 = v3779;
    v3781 = (int64x2_t *)(v3770 + 8 * v3769);
    *v3781 = v3780;
    v3781[1].i64[0] = *((_QWORD *)&v3778 + 1);
    v3782 = (int64x2_t *)(v3770 + 16 * v3769);
    v3782[1].i64[0] = v3777;
    *v3782 = vzip1q_s64(v3771, v3773);
    v3783 = (int64x2_t *)(v3770 + 24 * v3769);
    v3783[1].i64[0] = *((_QWORD *)&v3777 + 1);
    *v3783 = vzip2q_s64(v3771, v3773);
    v3784 = (int64x2_t *)(v3770 + 32 * v3769);
    v3784[1].i64[0] = v3776;
    *v3784 = vzip1q_s64(v3774, v3772);
    v3785 = (int64x2_t *)(v3770 + 40 * v3769);
    v3785[1].i64[0] = *((_QWORD *)&v3776 + 1);
    *v3785 = vzip2q_s64(v3774, v3772);
LABEL_1808:
    v3799 = v3759 + 1;
    while (v3799 != v3762)
    {
      ++v3761;
      v3800 = *v3799++;
      v3763 = v3800;
      if (v3800 != -1)
      {
        v3759 = v3799 - 1;
        v3764 = v3761;
        v3765 = a3[6];
        if (v2040)
          goto LABEL_1804;
        goto LABEL_1806;
      }
    }
    v3754 = *(_DWORD *)(a1 + 13260);
LABEL_1798:
    ++v3755;
    ++v3756;
    if (v3755 < v3754)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1818:
  v3804 = *(_DWORD *)(a1 + 156);
  if (!v3804)
    goto LABEL_1841;
  v3805 = 0;
  v3806 = *a4;
  while (2)
  {
    v3807 = *(_QWORD *)(a1 + 232);
    v3808 = *(_DWORD *)(a1 + 256) * v3805;
    v3809 = (uint64_t *)(v3807 + 8 * v3808);
    v3810 = *(_DWORD *)(a1 + 152);
    if (v3810 && *v3809 == -1)
    {
      v3811 = 0;
      v3899 = 8 * (v3810 + v3808) - 8 * v3808 - 8;
      v3900 = v3807 + 8 * v3808;
      while (v3899)
      {
        v3809 = (uint64_t *)(v3900 + 8);
        ++v3811;
        v3901 = *(_QWORD *)(v3900 + 8);
        v3899 -= 8;
        v3900 += 8;
        if (v3901 != -1)
          goto LABEL_1825;
      }
      goto LABEL_1821;
    }
    v3811 = 0;
LABEL_1825:
    v3812 = (uint64_t *)(v3807 + 8 * (v3808 + v3810));
    if (v3809 == v3812)
      goto LABEL_1821;
    v3813 = *v3809;
    v3814 = v3811;
    v3815 = a3[3];
    if (!v2040)
    {
LABEL_1829:
      v3817 = *(_DWORD *)(v3815 + 4 * v3814);
      v3816 = *v3806;
      goto LABEL_1830;
    }
LABEL_1827:
    v3816 = *v3806;
    v3817 = *(_DWORD *)(v3815 + 4 * v3814);
    if (*v3806 >= v3817)
    {
LABEL_1830:
      v3860 = *(_QWORD *)(a1 + 160) + 8 * v3813;
      v3861 = *(unsigned int *)(a2 + 16);
      v3862 = *(_QWORD *)(v3860 + 64);
      v3863 = *(_QWORD *)a2 + 8 * (v3817 + (_DWORD)v3861 * v3816);
      v3864 = *(_OWORD *)(v3860 + 48);
      v3865 = *(_OWORD *)v3860;
      v3866 = *(_OWORD *)(v3860 + 16);
      v3867 = *(_OWORD *)(v3860 + 72);
      v3868 = *(_OWORD *)(v3860 + 88);
      v3869 = *(_OWORD *)(v3860 + 104);
      v3870 = *(_OWORD *)(v3860 + 120);
      v3871 = *(_QWORD *)(v3860 + 136);
      v3872 = *(_OWORD *)(v3860 + 144);
      v3873 = *(_OWORD *)(v3860 + 160);
      v3874 = *(_OWORD *)(v3860 + 176);
      v3875 = *(_OWORD *)(v3860 + 192);
      v3876 = *(_QWORD *)(v3860 + 208);
      v3877 = *(_OWORD *)(v3860 + 232);
      v3878 = *(_OWORD *)(v3860 + 248);
      v3879 = *(_QWORD *)(v3860 + 280);
      v3880 = *(_OWORD *)(v3860 + 288);
      v3881 = *(_OWORD *)(v3860 + 304);
      v3882 = *(_OWORD *)(v3860 + 320);
      v3883 = *(_OWORD *)(v3860 + 336);
      v3884 = *(_QWORD *)(v3860 + 352);
      v3885 = *(_QWORD *)(v3860 + 424);
      v3886 = *(_OWORD *)(v3860 + 216);
      v3887 = *(_OWORD *)(v3860 + 264);
      v3888 = *(_OWORD *)(v3860 + 360);
      v3889 = *(_OWORD *)(v3860 + 376);
      v3890 = *(_OWORD *)(v3860 + 392);
      v3891 = *(_OWORD *)(v3860 + 408);
      *(_OWORD *)(v3863 + 32) = *(_OWORD *)(v3860 + 32);
      *(_OWORD *)(v3863 + 48) = v3864;
      *(_QWORD *)(v3863 + 64) = v3862;
      *(_OWORD *)v3863 = v3865;
      *(_OWORD *)(v3863 + 16) = v3866;
      v3892 = v3863 + 8 * v3861;
      *(_QWORD *)(v3892 + 64) = v3871;
      *(_OWORD *)(v3892 + 32) = v3869;
      *(_OWORD *)(v3892 + 48) = v3870;
      *(_OWORD *)v3892 = v3867;
      *(_OWORD *)(v3892 + 16) = v3868;
      v3893 = v3863 + 16 * v3861;
      *(_QWORD *)(v3893 + 64) = v3876;
      *(_OWORD *)(v3893 + 32) = v3874;
      *(_OWORD *)(v3893 + 48) = v3875;
      *(_OWORD *)v3893 = v3872;
      *(_OWORD *)(v3893 + 16) = v3873;
      v3894 = v3863 + 24 * v3861;
      *(_QWORD *)(v3894 + 64) = v3879;
      *(_OWORD *)(v3894 + 32) = v3878;
      *(_OWORD *)(v3894 + 48) = v3887;
      *(_OWORD *)v3894 = v3886;
      *(_OWORD *)(v3894 + 16) = v3877;
      v3895 = v3863 + 32 * v3861;
      *(_QWORD *)(v3895 + 64) = v3884;
      *(_OWORD *)(v3895 + 32) = v3882;
      *(_OWORD *)(v3895 + 48) = v3883;
      *(_OWORD *)v3895 = v3880;
      *(_OWORD *)(v3895 + 16) = v3881;
      v3896 = v3863 + 40 * v3861;
      *(_QWORD *)(v3896 + 64) = v3885;
      *(_OWORD *)(v3896 + 32) = v3890;
      *(_OWORD *)(v3896 + 48) = v3891;
      *(_OWORD *)v3896 = v3888;
      *(_OWORD *)(v3896 + 16) = v3889;
      goto LABEL_1831;
    }
    v3818 = *(unsigned int *)(a2 + 16);
    v3819 = *(_QWORD *)(a1 + 160) + 8 * v3813;
    v3820.i64[0] = *(_QWORD *)(v3819 + 64);
    v3821 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3816 + (_DWORD)v3818 * v3817));
    v3823 = *(int64x2_t *)(v3819 + 32);
    v3822 = *(int64x2_t *)(v3819 + 48);
    v3824 = *(int64x2_t *)(v3819 + 16);
    v3825 = *(int64x2_t *)(v3819 + 120);
    v3826 = *(int64x2_t *)(v3819 + 104);
    v3827 = *(int64x2_t *)(v3819 + 88);
    v3828 = *(int64x2_t *)(v3819 + 72);
    v3829.i64[0] = *(_QWORD *)(v3819 + 208);
    v3831 = *(int64x2_t *)(v3819 + 176);
    v3830 = *(int64x2_t *)(v3819 + 192);
    v3833 = *(int64x2_t *)(v3819 + 144);
    v3832 = *(int64x2_t *)(v3819 + 160);
    v3834 = *(int64x2_t *)(v3819 + 248);
    v3835 = *(int64x2_t *)(v3819 + 232);
    v3836.i64[0] = *(_QWORD *)(v3819 + 352);
    v3838 = *(int64x2_t *)(v3819 + 320);
    v3837 = *(int64x2_t *)(v3819 + 336);
    v3840 = *(int64x2_t *)(v3819 + 288);
    v3839 = *(int64x2_t *)(v3819 + 304);
    v3841 = *(int64x2_t *)(v3819 + 216);
    v3842 = *(int64x2_t *)(v3819 + 264);
    v3843 = *(int64x2_t *)(v3819 + 392);
    v3844 = *(int64x2_t *)(v3819 + 408);
    v3845 = *(int64x2_t *)(v3819 + 376);
    v3846 = vzip1q_s64(*(int64x2_t *)v3819, v3828);
    v3847 = vzip1q_s64(v3840, *(int64x2_t *)(v3819 + 360));
    v3848 = vzip1q_s64(v3833, v3841);
    v3849 = vzip2q_s64(*(int64x2_t *)v3819, v3828);
    v3850 = vzip2q_s64(v3833, v3841);
    v3851 = vzip2q_s64(v3840, *(int64x2_t *)(v3819 + 360));
    v3820.i64[1] = *(_QWORD *)(v3819 + 136);
    v3829.i64[1] = *(_QWORD *)(v3819 + 280);
    v3836.i64[1] = *(_QWORD *)(v3819 + 424);
    v3821[1] = v3848;
    v3821[2] = v3847;
    *v3821 = v3846;
    v3852 = (int64x2_t *)((char *)v3821 + 8 * v3818);
    v3852[1] = v3850;
    v3852[2] = v3851;
    *v3852 = v3849;
    v3853 = &v3821[v3818];
    v3853[1] = vzip1q_s64(v3832, v3835);
    v3853[2] = vzip1q_s64(v3839, v3845);
    *v3853 = vzip1q_s64(v3824, v3827);
    v3854 = (int64x2_t *)((char *)v3821 + 24 * v3818);
    v3854[1] = vzip2q_s64(v3832, v3835);
    v3854[2] = vzip2q_s64(v3839, v3845);
    *v3854 = vzip2q_s64(v3824, v3827);
    v3855 = &v3821[2 * v3818];
    v3855[1] = vzip1q_s64(v3831, v3834);
    v3855[2] = vzip1q_s64(v3838, v3843);
    *v3855 = vzip1q_s64(v3823, v3826);
    v3856 = (int64x2_t *)((char *)v3821 + 40 * v3818);
    v3856[1] = vzip2q_s64(v3831, v3834);
    v3856[2] = vzip2q_s64(v3838, v3843);
    *v3856 = vzip2q_s64(v3823, v3826);
    v3857 = &v3821[3 * v3818];
    v3857[1] = vzip1q_s64(v3830, v3842);
    v3857[2] = vzip1q_s64(v3837, v3844);
    *v3857 = vzip1q_s64(v3822, v3825);
    v3858 = (int64x2_t *)((char *)v3821 + 56 * v3818);
    v3858[1] = vzip2q_s64(v3830, v3842);
    v3858[2] = vzip2q_s64(v3837, v3844);
    *v3858 = vzip2q_s64(v3822, v3825);
    v3859 = &v3821[4 * v3818];
    v3859[1] = v3829;
    v3859[2] = v3836;
    *v3859 = v3820;
LABEL_1831:
    v3897 = v3809 + 1;
    while (v3897 != v3812)
    {
      ++v3811;
      v3898 = *v3897++;
      v3813 = v3898;
      if (v3898 != -1)
      {
        v3809 = v3897 - 1;
        v3814 = v3811;
        v3815 = a3[3];
        if (v2040)
          goto LABEL_1827;
        goto LABEL_1829;
      }
    }
    v3804 = *(_DWORD *)(a1 + 156);
LABEL_1821:
    ++v3805;
    ++v3806;
    if (v3805 < v3804)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1841:
  v3902 = *(_DWORD *)(a1 + 1596);
  if (!v3902)
    goto LABEL_1864;
  v3903 = 0;
  v3904 = a4[3];
  while (2)
  {
    v3905 = *(_QWORD *)(a1 + 1672);
    v3906 = *(_DWORD *)(a1 + 1696) * v3903;
    v3907 = (uint64_t *)(v3905 + 8 * v3906);
    v3908 = *(_DWORD *)(a1 + 1592);
    if (v3908 && *v3907 == -1)
    {
      v3909 = 0;
      v4034 = 8 * (v3908 + v3906) - 8 * v3906 - 8;
      v4035 = v3905 + 8 * v3906;
      while (v4034)
      {
        v3907 = (uint64_t *)(v4035 + 8);
        ++v3909;
        v4036 = *(_QWORD *)(v4035 + 8);
        v4034 -= 8;
        v4035 += 8;
        if (v4036 != -1)
          goto LABEL_1848;
      }
      goto LABEL_1844;
    }
    v3909 = 0;
LABEL_1848:
    v3910 = (uint64_t *)(v3905 + 8 * (v3906 + v3908));
    if (v3907 == v3910)
      goto LABEL_1844;
    v3911 = *v3907;
    v3912 = v3909;
    v3913 = a3[3];
    if (!v2040)
    {
LABEL_1852:
      v3915 = *(_DWORD *)(v3913 + 4 * v3912);
      v3914 = *v3904;
      goto LABEL_1853;
    }
LABEL_1850:
    v3914 = *v3904;
    v3915 = *(_DWORD *)(v3913 + 4 * v3912);
    if (*v3904 >= v3915)
    {
LABEL_1853:
      v3956 = *(unsigned int *)(a2 + 16);
      v3985 = *(_QWORD *)(a1 + 1600) + 8 * v3911;
      v5251 = *(_QWORD *)(v3985 + 64);
      v3957 = *(_QWORD *)a2 + 8 * (v3915 + (_DWORD)v3956 * v3914);
      v5244 = *(_OWORD *)(v3985 + 48);
      v5247 = *(_OWORD *)v3985;
      v5254 = *(_OWORD *)(v3985 + 88);
      v5257 = *(_OWORD *)(v3985 + 72);
      v5249 = *(_OWORD *)(v3985 + 104);
      v5239 = *(_OWORD *)(v3985 + 120);
      v5241 = *(_OWORD *)(v3985 + 16);
      v3986 = *(_QWORD *)(v3985 + 136);
      v3987 = *(int8x16_t *)(v3985 + 176);
      v3988 = *(int8x16_t *)(v3985 + 192);
      v3989 = *(int8x16_t *)(v3985 + 144);
      v3990 = *(int8x16_t *)(v3985 + 160);
      v5225 = *(_QWORD *)(v3985 + 208);
      v3991 = *(int8x16_t *)(v3985 + 248);
      v3992 = *(int8x16_t *)(v3985 + 232);
      v5227 = *(_QWORD *)(v3985 + 280);
      v3993 = *(int8x16_t *)(v3985 + 320);
      v3994 = *(int8x16_t *)(v3985 + 336);
      v3996 = *(int8x16_t *)(v3985 + 288);
      v3995 = *(int8x16_t *)(v3985 + 304);
      v5231 = *(_QWORD *)(v3985 + 352);
      v5228 = *(_QWORD *)(v3985 + 424);
      v3997 = *(int8x16_t *)(v3985 + 480);
      v5206 = *(int8x16_t *)(v3985 + 464);
      v3998 = *(int8x16_t *)(v3985 + 432);
      v3999 = *(int8x16_t *)(v3985 + 448);
      v5233 = *(_QWORD *)(v3985 + 496);
      v5229 = *(_QWORD *)(v3985 + 568);
      v4001 = *(int8x16_t *)(v3985 + 608);
      v4000 = *(int8x16_t *)(v3985 + 624);
      v3965 = *(int8x16_t *)(v3985 + 576);
      v4002 = *(int8x16_t *)(v3985 + 592);
      v5220 = *(_QWORD *)(v3985 + 640);
      v3964 = *(int8x16_t *)(v3985 + 216);
      v3939 = *(int8x16_t *)(v3985 + 264);
      v3974 = *(int8x16_t *)(v3985 + 392);
      v3946 = *(int8x16_t *)(v3985 + 408);
      v3941 = *(int8x16_t *)(v3985 + 360);
      v3943 = *(int8x16_t *)(v3985 + 376);
      v4003 = *(int8x16_t *)(v3985 + 536);
      v3955 = *(int8x16_t *)(v3985 + 552);
      v3969 = *(int8x16_t *)(v3985 + 504);
      v3951 = *(int8x16_t *)(v3985 + 520);
      *(_OWORD *)(v3957 + 32) = *(_OWORD *)(v3985 + 32);
      *(_OWORD *)(v3957 + 48) = v5244;
      *(_QWORD *)(v3957 + 64) = v5251;
      *(_OWORD *)v3957 = v5247;
      *(_OWORD *)(v3957 + 16) = v5241;
      v4004 = v3957 + 8 * v3956;
      *(_QWORD *)(v4004 + 64) = v3986;
      *(_OWORD *)(v4004 + 32) = v5249;
      *(_OWORD *)(v4004 + 48) = v5239;
      *(_OWORD *)v4004 = v5257;
      *(_OWORD *)(v4004 + 16) = v5254;
      v5256 = v3988.i64[0];
      v5243 = v3987.i64[0];
      v4005 = vextq_s8(v3987, v3987, 8uLL).u64[0];
      v5221 = v3989.i64[0];
      v5222 = v3990.i64[0];
      v3963 = vextq_s8(v3990, v3990, 8uLL).u64[0];
      v3973 = vextq_s8(v3989, v3989, 8uLL).u64[0];
      v5253 = v3991.i64[0];
      v5211 = vextq_s8(v3991, v3991, 8uLL).u64[0];
      v5218 = v3993.i64[0];
      v5219 = v3992.i64[0];
      v3968 = vextq_s8(v3992, v3992, 8uLL).u64[0];
      v3967 = vextq_s8(v3939, v3939, 8uLL).u64[0];
      v5216 = v3994.i64[0];
      v4006 = vextq_s8(v3993, v3993, 8uLL).u64[0];
      v5246 = v3995.i64[0];
      v5217 = v3996.i64[0];
      v3982 = vextq_s8(v3996, v3996, 8uLL).u64[0];
      v5214 = vextq_s8(v3946, v3946, 8uLL).u64[0];
      v5212 = v3997.i64[0];
      v5213 = vextq_s8(v3974, v3974, 8uLL).u64[0];
      v3975 = vextq_s8(v3943, v3943, 8uLL).u64[0];
      v5215 = vextq_s8(v3941, v3941, 8uLL).u64[0];
      v5210 = vextq_s8(v3997, v3997, 8uLL).u64[0];
      v3966 = vextq_s8(v3964, v3964, 8uLL).u64[0];
      v3978 = vextq_s8(v5206, v5206, 8uLL).u64[0];
      v5235 = v3999.i64[0];
      v5237 = v3998.i64[0];
      v5209 = vextq_s8(v3999, v3999, 8uLL).u64[0];
      v3977 = vextq_s8(v3998, v3998, 8uLL).u64[0];
      v5208 = vextq_s8(v3955, v3955, 8uLL).u64[0];
      v3979 = v4003.i64[0];
      v3980 = vextq_s8(v4003, v4003, 8uLL).u64[0];
      v3983 = vextq_s8(v3951, v3951, 8uLL).u64[0];
      v5207 = vextq_s8(v3969, v3969, 8uLL).u64[0];
      v5238 = v4000.i64[0];
      v5223 = vextq_s8(v4000, v4000, 8uLL).u64[0];
      v5240 = v4001.i64[0];
      v5224 = vextq_s8(v4001, v4001, 8uLL).u64[0];
      v3972 = v4005;
      v3976 = vextq_s8(v3995, v3995, 8uLL).u64[0];
      v5248 = v3965.i64[0];
      v5250 = v4002.i64[0];
      v3981 = vextq_s8(v4002, v4002, 8uLL).u64[0];
      v5226 = vextq_s8(v3965, v3965, 8uLL).u64[0];
      v3984 = vextq_s8(v3988, v3988, 8uLL).u64[0];
      v3970 = vextq_s8(v3994, v3994, 8uLL).u64[0];
      v3965.i64[0] = v5206.i64[0];
      v3971 = v4006;
      goto LABEL_1854;
    }
    v3916 = *(_QWORD *)(a1 + 1600) + 8 * v3911;
    v3918 = *(int8x16_t *)(v3916 + 16);
    v3917 = *(int64x2_t *)(v3916 + 32);
    v3919 = *(int64x2_t *)(v3916 + 120);
    v3920 = *(int64x2_t *)(v3916 + 104);
    v3921 = *(int64x2_t *)(v3916 + 88);
    v3922 = *(int8x16_t *)(v3916 + 72);
    v3923 = *(int64x2_t *)(v3916 + 176);
    v3924 = *(int64x2_t *)(v3916 + 192);
    v3926 = *(int64x2_t *)(v3916 + 144);
    v3925 = *(int64x2_t *)(v3916 + 160);
    v3927 = *(int64x2_t *)(v3916 + 320);
    v3928 = *(int64x2_t *)(v3916 + 336);
    v3930 = *(int64x2_t *)(v3916 + 288);
    v3929 = *(int64x2_t *)(v3916 + 304);
    v3931 = *(int64x2_t *)(v3916 + 464);
    v3932 = *(int64x2_t *)(v3916 + 480);
    v3934 = *(int8x16_t *)(v3916 + 432);
    v3933 = *(int64x2_t *)(v3916 + 448);
    v5242 = vzip1q_s64(v3926, *(int64x2_t *)(v3916 + 216));
    v3926.i64[0] = vdupq_laneq_s64(v3926, 1).u64[0];
    v3926.i64[1] = *(_QWORD *)(v3916 + 224);
    v5255 = v3926;
    v5234 = vzip1q_s64(*(int64x2_t *)v3916, (int64x2_t)v3922);
    v5252 = vzip2q_s64(*(int64x2_t *)v3916, (int64x2_t)v3922);
    v5232 = vzip1q_s64(v3930, *(int64x2_t *)(v3916 + 360));
    *(_QWORD *)&v3935 = vdupq_laneq_s64(v3930, 1).u64[0];
    *((_QWORD *)&v3935 + 1) = *(_QWORD *)(v3916 + 368);
    v5245 = v3935;
    v5230 = vzip1q_s64((int64x2_t)v3934, *(int64x2_t *)(v3916 + 504));
    *(_QWORD *)&v3935 = vdupq_laneq_s64((int64x2_t)v3934, 1).u64[0];
    *((_QWORD *)&v3935 + 1) = *(_QWORD *)(v3916 + 512);
    v5236 = v3935;
    v3974 = (int8x16_t)vzip1q_s64((int64x2_t)v3918, v3921);
    v3936 = (int8x16_t)vzip2q_s64((int64x2_t)v3918, v3921);
    v3964 = (int8x16_t)vzip1q_s64(v3925, *(int64x2_t *)(v3916 + 232));
    v3918.i64[0] = vdupq_laneq_s64(v3925, 1).u64[0];
    v3918.i64[1] = *(_QWORD *)(v3916 + 240);
    v3937 = (int8x16_t)vzip1q_s64(v3929, *(int64x2_t *)(v3916 + 376));
    v3934.i64[0] = vdupq_laneq_s64(v3929, 1).u64[0];
    v3934.i64[1] = *(_QWORD *)(v3916 + 384);
    v3938 = (int8x16_t)vzip1q_s64(v3933, *(int64x2_t *)(v3916 + 520));
    v3939.i64[0] = vdupq_laneq_s64(v3933, 1).u64[0];
    v3939.i64[1] = *(_QWORD *)(v3916 + 528);
    v3940 = (int8x16_t)vzip1q_s64(v3917, v3920);
    v3941 = (int8x16_t)vzip2q_s64(v3917, v3920);
    v3942 = (int8x16_t)vzip1q_s64(v3923, *(int64x2_t *)(v3916 + 248));
    v3943.i64[0] = vdupq_laneq_s64(v3923, 1).u64[0];
    v3943.i64[1] = *(_QWORD *)(v3916 + 256);
    v3944 = (int8x16_t)vzip1q_s64(v3927, *(int64x2_t *)(v3916 + 392));
    v3922.i64[0] = vdupq_laneq_s64(v3927, 1).u64[0];
    v3922.i64[1] = *(_QWORD *)(v3916 + 400);
    v3946.i64[0] = vdupq_laneq_s64(v3931, 1).u64[0];
    v3945 = (int8x16_t)vzip1q_s64(v3931, *(int64x2_t *)(v3916 + 536));
    v3946.i64[1] = *(_QWORD *)(v3916 + 544);
    v3947 = *(int64x2_t *)(v3916 + 48);
    v3948 = (int8x16_t)vzip1q_s64(v3947, v3919);
    v3949 = vzip2q_s64(v3947, v3919);
    v3950 = (int8x16_t)vzip1q_s64(v3924, *(int64x2_t *)(v3916 + 264));
    v3951.i64[0] = vdupq_laneq_s64(v3924, 1).u64[0];
    v3951.i64[1] = *(_QWORD *)(v3916 + 272);
    v3952.i64[0] = vdupq_laneq_s64(v3928, 1).u64[0];
    v3953 = vzip1q_s64(v3928, *(int64x2_t *)(v3916 + 408));
    v3952.i64[1] = *(_QWORD *)(v3916 + 416);
    v3955.i64[0] = vdupq_laneq_s64(v3932, 1).u64[0];
    v3954 = (int8x16_t)vzip1q_s64(v3932, *(int64x2_t *)(v3916 + 552));
    v3955.i64[1] = *(_QWORD *)(v3916 + 560);
    v3956 = *(unsigned int *)(a2 + 16);
    v3957 = *(_QWORD *)a2 + 8 * (v3914 + (_DWORD)v3956 * v3915);
    v5248 = *(_QWORD *)(v3916 + 64);
    v5226 = *(_QWORD *)(v3916 + 136);
    v5250 = *(_QWORD *)(v3916 + 208);
    v3925.i64[0] = *(_QWORD *)(v3916 + 280);
    v5240 = *(_QWORD *)(v3916 + 352);
    v5224 = *(_QWORD *)(v3916 + 424);
    v5238 = *(_QWORD *)(v3916 + 496);
    v5223 = *(_QWORD *)(v3916 + 568);
    v5220 = *(_QWORD *)(v3916 + 640);
    v3959 = *(int8x16_t *)(v3916 + 608);
    v3958 = *(int8x16_t *)(v3916 + 624);
    v3960 = *(_OWORD *)(v3916 + 576);
    v3961 = *(int8x16_t *)(v3916 + 592);
    *(int64x2_t *)(v3957 + 32) = v5232;
    *(int64x2_t *)(v3957 + 48) = v5230;
    *(int64x2_t *)(v3957 + 16) = v5242;
    *(int64x2_t *)v3957 = v5234;
    v3962 = v3957 + 8 * v3956;
    *(_QWORD *)(v3957 + 64) = v3960;
    *(_QWORD *)(v3962 + 64) = *((_QWORD *)&v3960 + 1);
    *(_OWORD *)(v3962 + 32) = v5245;
    *(_OWORD *)(v3962 + 48) = v5236;
    *(int64x2_t *)v3962 = v5252;
    *(int64x2_t *)(v3962 + 16) = v5255;
    v5221 = v3974.i64[0];
    v5222 = v3964.i64[0];
    v3963 = vextq_s8(v3964, v3964, 8uLL).u64[0];
    v3964.i64[0] = v3936.i64[0];
    v5256 = v3938.i64[0];
    v5205 = vextq_s8(v3938, v3938, 8uLL).u64[0];
    v3965 = (int8x16_t)v3953;
    v5243 = v3937.i64[0];
    v3966 = vextq_s8(v3936, v3936, 8uLL).u64[0];
    v3967 = vextq_s8(v3939, v3939, 8uLL).u64[0];
    v5253 = v3934.i64[0];
    v5211 = vextq_s8(v3934, v3934, 8uLL).u64[0];
    v5219 = v3918.i64[0];
    v3968 = vextq_s8(v3918, v3918, 8uLL).u64[0];
    v5225 = v3961.i64[0];
    v5227 = vextq_s8(v3961, v3961, 8uLL).u64[0];
    v5246 = v3942.i64[0];
    v5216 = v3945.i64[0];
    v5217 = v3940.i64[0];
    v3961.i64[0] = vextq_s8(v3940, v3940, 8uLL).u64[0];
    v3969 = (int8x16_t)v3949;
    v3970 = vextq_s8(v3945, v3945, 8uLL).u64[0];
    v5218 = v3944.i64[0];
    v3971 = vextq_s8(v3944, v3944, 8uLL).u64[0];
    v3972 = vextq_s8(v3937, v3937, 8uLL).u64[0];
    v3973 = vextq_s8(v3974, v3974, 8uLL).u64[0];
    v3974.i64[0] = v3922.i64[0];
    v5215 = vextq_s8(v3941, v3941, 8uLL).u64[0];
    v5214 = vextq_s8(v3946, v3946, 8uLL).u64[0];
    v5212 = v3954.i64[0];
    v5213 = vextq_s8(v3922, v3922, 8uLL).u64[0];
    v3975 = vextq_s8(v3943, v3943, 8uLL).u64[0];
    v5231 = v3959.i64[0];
    v5233 = v3958.i64[0];
    v5228 = vextq_s8(v3959, v3959, 8uLL).u64[0];
    v3976 = vextq_s8(v3942, v3942, 8uLL).u64[0];
    v5235 = v3950.i64[0];
    v5237 = v3948.i64[0];
    v3977 = vextq_s8(v3948, v3948, 8uLL).u64[0];
    v5210 = vextq_s8(v3954, v3954, 8uLL).u64[0];
    v3978 = vextq_s8(v3965, v3965, 8uLL).u64[0];
    v5209 = vextq_s8(v3950, v3950, 8uLL).u64[0];
    v5207 = vextq_s8(v3969, v3969, 8uLL).u64[0];
    v5208 = vextq_s8(v3955, v3955, 8uLL).u64[0];
    v3979 = v3952.i64[0];
    v3980 = vextq_s8(v3952, v3952, 8uLL).u64[0];
    v3981 = v3925.i64[0];
    v3982 = v3961.i64[0];
    v3983 = vextq_s8(v3951, v3951, 8uLL).u64[0];
    v5229 = vextq_s8(v3958, v3958, 8uLL).u64[0];
    v3984 = v5205;
LABEL_1854:
    *(_QWORD *)&v4007 = v5221;
    *((_QWORD *)&v4007 + 1) = v3973;
    *(_QWORD *)&v4008 = v5222;
    *((_QWORD *)&v4008 + 1) = v3963;
    *(_QWORD *)&v4009 = v5243;
    *((_QWORD *)&v4009 + 1) = v3972;
    *(_QWORD *)&v4010 = v5256;
    *((_QWORD *)&v4010 + 1) = v3984;
    v3939.i64[1] = v3967;
    *(_QWORD *)&v4011 = v5253;
    *((_QWORD *)&v4011 + 1) = v5211;
    *(_QWORD *)&v4012 = v5218;
    *(_QWORD *)&v4013 = v5219;
    *((_QWORD *)&v4013 + 1) = v3968;
    v3964.i64[1] = v3966;
    *(_QWORD *)&v4014 = v5216;
    *((_QWORD *)&v4014 + 1) = v3970;
    *((_QWORD *)&v4012 + 1) = v3971;
    *(_QWORD *)&v4015 = v5246;
    *((_QWORD *)&v4015 + 1) = v3976;
    *(_QWORD *)&v4016 = v5217;
    *((_QWORD *)&v4016 + 1) = v3982;
    v3946.i64[1] = v5214;
    *(_QWORD *)&v4017 = v5212;
    v3974.i64[1] = v5213;
    v3943.i64[1] = v3975;
    v3941.i64[1] = v5215;
    *((_QWORD *)&v4017 + 1) = v5210;
    v3965.i64[1] = v3978;
    *(_QWORD *)&v4018 = v5235;
    *((_QWORD *)&v4018 + 1) = v5209;
    *(_QWORD *)&v4019 = v5237;
    *((_QWORD *)&v4019 + 1) = v3977;
    v3955.i64[1] = v5208;
    *(_QWORD *)&v4020 = v3979;
    *((_QWORD *)&v4020 + 1) = v3980;
    v3951.i64[1] = v3983;
    v3969.i64[1] = v5207;
    *(_QWORD *)&v4022 = v5238;
    *(_QWORD *)&v4021 = v5240;
    *((_QWORD *)&v4022 + 1) = v5223;
    *((_QWORD *)&v4021 + 1) = v5224;
    *(_QWORD *)&v4023 = v5250;
    *((_QWORD *)&v4023 + 1) = v3981;
    *(_QWORD *)&v4024 = v5248;
    *((_QWORD *)&v4024 + 1) = v5226;
    v4025 = v3957 + 16 * v3956;
    *(_OWORD *)v4025 = v4007;
    *(_OWORD *)(v4025 + 16) = v4008;
    *(_OWORD *)(v4025 + 32) = v4009;
    *(_OWORD *)(v4025 + 48) = v4010;
    *(_QWORD *)(v4025 + 64) = v5225;
    v4026 = v3957 + 24 * v3956;
    *(_QWORD *)(v4026 + 64) = v5227;
    *(_OWORD *)(v4026 + 32) = v4011;
    *(int8x16_t *)(v4026 + 48) = v3939;
    *(int8x16_t *)v4026 = v3964;
    *(_OWORD *)(v4026 + 16) = v4013;
    v4027 = v3957 + 32 * v3956;
    *(_QWORD *)(v4027 + 64) = v5231;
    *(_OWORD *)(v4027 + 32) = v4012;
    *(_OWORD *)(v4027 + 48) = v4014;
    *(_OWORD *)v4027 = v4016;
    *(_OWORD *)(v4027 + 16) = v4015;
    v4028 = (int8x16_t *)(v3957 + 40 * v3956);
    v4028[4].i64[0] = v5228;
    v4028[2] = v3974;
    v4028[3] = v3946;
    *v4028 = v3941;
    v4028[1] = v3943;
    v4029 = v3957 + 48 * v3956;
    *(_QWORD *)(v4029 + 64) = v5233;
    *(int8x16_t *)(v4029 + 32) = v3965;
    *(_OWORD *)(v4029 + 48) = v4017;
    *(_OWORD *)v4029 = v4019;
    *(_OWORD *)(v4029 + 16) = v4018;
    v4030 = v3957 + 56 * v3956;
    *(_QWORD *)(v4030 + 64) = v5229;
    *(_OWORD *)(v4030 + 32) = v4020;
    *(int8x16_t *)(v4030 + 48) = v3955;
    *(int8x16_t *)v4030 = v3969;
    *(int8x16_t *)(v4030 + 16) = v3951;
    v4031 = v3957 + (v3956 << 6);
    *(_QWORD *)(v4031 + 64) = v5220;
    *(_OWORD *)(v4031 + 32) = v4021;
    *(_OWORD *)(v4031 + 48) = v4022;
    v4032 = v3907 + 1;
    *(_OWORD *)v4031 = v4024;
    *(_OWORD *)(v4031 + 16) = v4023;
    while (v4032 != v3910)
    {
      ++v3909;
      v4033 = *v4032++;
      v3911 = v4033;
      if (v4033 != -1)
      {
        v3907 = v4032 - 1;
        v3912 = v3909;
        v3913 = a3[3];
        if (v2040)
          goto LABEL_1850;
        goto LABEL_1852;
      }
    }
    v3902 = *(_DWORD *)(a1 + 1596);
LABEL_1844:
    ++v3903;
    ++v3904;
    if (v3903 < v3902)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1864:
  v4037 = *(_DWORD *)(a1 + 3036);
  if (!v4037)
    goto LABEL_1887;
  v4038 = 0;
  v4039 = a4[6];
  while (2)
  {
    v4040 = *(_QWORD *)(a1 + 3112);
    v4041 = *(_DWORD *)(a1 + 3136) * v4038;
    v4042 = (uint64_t *)(v4040 + 8 * v4041);
    v4043 = *(_DWORD *)(a1 + 3032);
    if (v4043 && *v4042 == -1)
    {
      v4044 = 0;
      v4132 = 8 * (v4043 + v4041) - 8 * v4041 - 8;
      v4133 = v4040 + 8 * v4041;
      while (v4132)
      {
        v4042 = (uint64_t *)(v4133 + 8);
        ++v4044;
        v4134 = *(_QWORD *)(v4133 + 8);
        v4132 -= 8;
        v4133 += 8;
        if (v4134 != -1)
          goto LABEL_1871;
      }
      goto LABEL_1867;
    }
    v4044 = 0;
LABEL_1871:
    v4045 = (uint64_t *)(v4040 + 8 * (v4041 + v4043));
    if (v4042 == v4045)
      goto LABEL_1867;
    v4046 = *v4042;
    v4047 = v4044;
    v4048 = a3[3];
    if (!v2040)
    {
LABEL_1875:
      v4050 = *(_DWORD *)(v4048 + 4 * v4047);
      v4049 = *v4039;
      goto LABEL_1876;
    }
LABEL_1873:
    v4049 = *v4039;
    v4050 = *(_DWORD *)(v4048 + 4 * v4047);
    if (*v4039 >= v4050)
    {
LABEL_1876:
      v4093 = *(_QWORD *)(a1 + 3040) + 8 * v4046;
      v4094 = *(unsigned int *)(a2 + 16);
      v4095 = *(_QWORD *)(v4093 + 64);
      v4096 = *(_QWORD *)a2 + 8 * (v4050 + (_DWORD)v4094 * v4049);
      v4097 = *(_OWORD *)(v4093 + 48);
      v4098 = *(_OWORD *)v4093;
      v4099 = *(_OWORD *)(v4093 + 16);
      v4100 = *(_OWORD *)(v4093 + 72);
      v4101 = *(_OWORD *)(v4093 + 88);
      v4102 = *(_OWORD *)(v4093 + 104);
      v4103 = *(_OWORD *)(v4093 + 120);
      v4104 = *(_QWORD *)(v4093 + 136);
      v4105 = *(_OWORD *)(v4093 + 144);
      v4106 = *(_OWORD *)(v4093 + 160);
      v4107 = *(_OWORD *)(v4093 + 176);
      v4108 = *(_OWORD *)(v4093 + 192);
      v4109 = *(_QWORD *)(v4093 + 208);
      v4110 = *(_OWORD *)(v4093 + 232);
      v4111 = *(_OWORD *)(v4093 + 248);
      v4112 = *(_QWORD *)(v4093 + 280);
      v4113 = *(_OWORD *)(v4093 + 288);
      v4114 = *(_OWORD *)(v4093 + 304);
      v4115 = *(_OWORD *)(v4093 + 320);
      v4116 = *(_OWORD *)(v4093 + 336);
      v4117 = *(_QWORD *)(v4093 + 352);
      v4118 = *(_QWORD *)(v4093 + 424);
      v4119 = *(_OWORD *)(v4093 + 216);
      v4120 = *(_OWORD *)(v4093 + 264);
      v4121 = *(_OWORD *)(v4093 + 360);
      v4122 = *(_OWORD *)(v4093 + 376);
      v4123 = *(_OWORD *)(v4093 + 392);
      v4124 = *(_OWORD *)(v4093 + 408);
      *(_OWORD *)(v4096 + 32) = *(_OWORD *)(v4093 + 32);
      *(_OWORD *)(v4096 + 48) = v4097;
      *(_QWORD *)(v4096 + 64) = v4095;
      *(_OWORD *)v4096 = v4098;
      *(_OWORD *)(v4096 + 16) = v4099;
      v4125 = v4096 + 8 * v4094;
      *(_QWORD *)(v4125 + 64) = v4104;
      *(_OWORD *)(v4125 + 32) = v4102;
      *(_OWORD *)(v4125 + 48) = v4103;
      *(_OWORD *)v4125 = v4100;
      *(_OWORD *)(v4125 + 16) = v4101;
      v4126 = v4096 + 16 * v4094;
      *(_QWORD *)(v4126 + 64) = v4109;
      *(_OWORD *)(v4126 + 32) = v4107;
      *(_OWORD *)(v4126 + 48) = v4108;
      *(_OWORD *)v4126 = v4105;
      *(_OWORD *)(v4126 + 16) = v4106;
      v4127 = v4096 + 24 * v4094;
      *(_QWORD *)(v4127 + 64) = v4112;
      *(_OWORD *)(v4127 + 32) = v4111;
      *(_OWORD *)(v4127 + 48) = v4120;
      *(_OWORD *)v4127 = v4119;
      *(_OWORD *)(v4127 + 16) = v4110;
      v4128 = v4096 + 32 * v4094;
      *(_QWORD *)(v4128 + 64) = v4117;
      *(_OWORD *)(v4128 + 32) = v4115;
      *(_OWORD *)(v4128 + 48) = v4116;
      *(_OWORD *)v4128 = v4113;
      *(_OWORD *)(v4128 + 16) = v4114;
      v4129 = v4096 + 40 * v4094;
      *(_QWORD *)(v4129 + 64) = v4118;
      *(_OWORD *)(v4129 + 32) = v4123;
      *(_OWORD *)(v4129 + 48) = v4124;
      *(_OWORD *)v4129 = v4121;
      *(_OWORD *)(v4129 + 16) = v4122;
      goto LABEL_1877;
    }
    v4051 = *(unsigned int *)(a2 + 16);
    v4052 = *(_QWORD *)(a1 + 3040) + 8 * v4046;
    v4053.i64[0] = *(_QWORD *)(v4052 + 64);
    v4054 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4049 + (_DWORD)v4051 * v4050));
    v4056 = *(int64x2_t *)(v4052 + 32);
    v4055 = *(int64x2_t *)(v4052 + 48);
    v4057 = *(int64x2_t *)(v4052 + 16);
    v4058 = *(int64x2_t *)(v4052 + 120);
    v4059 = *(int64x2_t *)(v4052 + 104);
    v4060 = *(int64x2_t *)(v4052 + 88);
    v4061 = *(int64x2_t *)(v4052 + 72);
    v4062.i64[0] = *(_QWORD *)(v4052 + 208);
    v4064 = *(int64x2_t *)(v4052 + 176);
    v4063 = *(int64x2_t *)(v4052 + 192);
    v4066 = *(int64x2_t *)(v4052 + 144);
    v4065 = *(int64x2_t *)(v4052 + 160);
    v4067 = *(int64x2_t *)(v4052 + 248);
    v4068 = *(int64x2_t *)(v4052 + 232);
    v4069.i64[0] = *(_QWORD *)(v4052 + 352);
    v4071 = *(int64x2_t *)(v4052 + 320);
    v4070 = *(int64x2_t *)(v4052 + 336);
    v4073 = *(int64x2_t *)(v4052 + 288);
    v4072 = *(int64x2_t *)(v4052 + 304);
    v4074 = *(int64x2_t *)(v4052 + 216);
    v4075 = *(int64x2_t *)(v4052 + 264);
    v4076 = *(int64x2_t *)(v4052 + 392);
    v4077 = *(int64x2_t *)(v4052 + 408);
    v4078 = *(int64x2_t *)(v4052 + 376);
    v4079 = vzip1q_s64(*(int64x2_t *)v4052, v4061);
    v4080 = vzip1q_s64(v4073, *(int64x2_t *)(v4052 + 360));
    v4081 = vzip1q_s64(v4066, v4074);
    v4082 = vzip2q_s64(*(int64x2_t *)v4052, v4061);
    v4083 = vzip2q_s64(v4066, v4074);
    v4084 = vzip2q_s64(v4073, *(int64x2_t *)(v4052 + 360));
    v4053.i64[1] = *(_QWORD *)(v4052 + 136);
    v4062.i64[1] = *(_QWORD *)(v4052 + 280);
    v4069.i64[1] = *(_QWORD *)(v4052 + 424);
    v4054[1] = v4081;
    v4054[2] = v4080;
    *v4054 = v4079;
    v4085 = (int64x2_t *)((char *)v4054 + 8 * v4051);
    v4085[1] = v4083;
    v4085[2] = v4084;
    *v4085 = v4082;
    v4086 = &v4054[v4051];
    v4086[1] = vzip1q_s64(v4065, v4068);
    v4086[2] = vzip1q_s64(v4072, v4078);
    *v4086 = vzip1q_s64(v4057, v4060);
    v4087 = (int64x2_t *)((char *)v4054 + 24 * v4051);
    v4087[1] = vzip2q_s64(v4065, v4068);
    v4087[2] = vzip2q_s64(v4072, v4078);
    *v4087 = vzip2q_s64(v4057, v4060);
    v4088 = &v4054[2 * v4051];
    v4088[1] = vzip1q_s64(v4064, v4067);
    v4088[2] = vzip1q_s64(v4071, v4076);
    *v4088 = vzip1q_s64(v4056, v4059);
    v4089 = (int64x2_t *)((char *)v4054 + 40 * v4051);
    v4089[1] = vzip2q_s64(v4064, v4067);
    v4089[2] = vzip2q_s64(v4071, v4076);
    *v4089 = vzip2q_s64(v4056, v4059);
    v4090 = &v4054[3 * v4051];
    v4090[1] = vzip1q_s64(v4063, v4075);
    v4090[2] = vzip1q_s64(v4070, v4077);
    *v4090 = vzip1q_s64(v4055, v4058);
    v4091 = (int64x2_t *)((char *)v4054 + 56 * v4051);
    v4091[1] = vzip2q_s64(v4063, v4075);
    v4091[2] = vzip2q_s64(v4070, v4077);
    *v4091 = vzip2q_s64(v4055, v4058);
    v4092 = &v4054[4 * v4051];
    v4092[1] = v4062;
    v4092[2] = v4069;
    *v4092 = v4053;
LABEL_1877:
    v4130 = v4042 + 1;
    while (v4130 != v4045)
    {
      ++v4044;
      v4131 = *v4130++;
      v4046 = v4131;
      if (v4131 != -1)
      {
        v4042 = v4130 - 1;
        v4047 = v4044;
        v4048 = a3[3];
        if (v2040)
          goto LABEL_1873;
        goto LABEL_1875;
      }
    }
    v4037 = *(_DWORD *)(a1 + 3036);
LABEL_1867:
    ++v4038;
    ++v4039;
    if (v4038 < v4037)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1887:
  v4135 = *(_DWORD *)(a1 + 4476);
  if (!v4135)
    goto LABEL_1910;
  v4136 = 0;
  v4137 = a4[9];
  while (2)
  {
    v4138 = *(_QWORD *)(a1 + 4552);
    v4139 = *(_DWORD *)(a1 + 4576) * v4136;
    v4140 = (uint64_t *)(v4138 + 8 * v4139);
    v4141 = *(_DWORD *)(a1 + 4472);
    if (v4141 && *v4140 == -1)
    {
      v4142 = 0;
      v4230 = 8 * (v4141 + v4139) - 8 * v4139 - 8;
      v4231 = v4138 + 8 * v4139;
      while (v4230)
      {
        v4140 = (uint64_t *)(v4231 + 8);
        ++v4142;
        v4232 = *(_QWORD *)(v4231 + 8);
        v4230 -= 8;
        v4231 += 8;
        if (v4232 != -1)
          goto LABEL_1894;
      }
      goto LABEL_1890;
    }
    v4142 = 0;
LABEL_1894:
    v4143 = (uint64_t *)(v4138 + 8 * (v4139 + v4141));
    if (v4140 == v4143)
      goto LABEL_1890;
    v4144 = *v4140;
    v4145 = v4142;
    v4146 = a3[3];
    if (!v2040)
    {
LABEL_1898:
      v4148 = *(_DWORD *)(v4146 + 4 * v4145);
      v4147 = *v4137;
      goto LABEL_1899;
    }
LABEL_1896:
    v4147 = *v4137;
    v4148 = *(_DWORD *)(v4146 + 4 * v4145);
    if (*v4137 >= v4148)
    {
LABEL_1899:
      v4191 = *(_QWORD *)(a1 + 4480) + 8 * v4144;
      v4192 = *(unsigned int *)(a2 + 16);
      v4193 = *(_QWORD *)(v4191 + 64);
      v4194 = *(_QWORD *)a2 + 8 * (v4148 + (_DWORD)v4192 * v4147);
      v4195 = *(_OWORD *)(v4191 + 48);
      v4196 = *(_OWORD *)v4191;
      v4197 = *(_OWORD *)(v4191 + 16);
      v4198 = *(_OWORD *)(v4191 + 72);
      v4199 = *(_OWORD *)(v4191 + 88);
      v4200 = *(_OWORD *)(v4191 + 104);
      v4201 = *(_OWORD *)(v4191 + 120);
      v4202 = *(_QWORD *)(v4191 + 136);
      v4203 = *(_OWORD *)(v4191 + 144);
      v4204 = *(_OWORD *)(v4191 + 160);
      v4205 = *(_OWORD *)(v4191 + 176);
      v4206 = *(_OWORD *)(v4191 + 192);
      v4207 = *(_QWORD *)(v4191 + 208);
      v4208 = *(_OWORD *)(v4191 + 232);
      v4209 = *(_OWORD *)(v4191 + 248);
      v4210 = *(_QWORD *)(v4191 + 280);
      v4211 = *(_OWORD *)(v4191 + 288);
      v4212 = *(_OWORD *)(v4191 + 304);
      v4213 = *(_OWORD *)(v4191 + 320);
      v4214 = *(_OWORD *)(v4191 + 336);
      v4215 = *(_QWORD *)(v4191 + 352);
      v4216 = *(_QWORD *)(v4191 + 424);
      v4217 = *(_OWORD *)(v4191 + 216);
      v4218 = *(_OWORD *)(v4191 + 264);
      v4219 = *(_OWORD *)(v4191 + 360);
      v4220 = *(_OWORD *)(v4191 + 376);
      v4221 = *(_OWORD *)(v4191 + 392);
      v4222 = *(_OWORD *)(v4191 + 408);
      *(_OWORD *)(v4194 + 32) = *(_OWORD *)(v4191 + 32);
      *(_OWORD *)(v4194 + 48) = v4195;
      *(_QWORD *)(v4194 + 64) = v4193;
      *(_OWORD *)v4194 = v4196;
      *(_OWORD *)(v4194 + 16) = v4197;
      v4223 = v4194 + 8 * v4192;
      *(_QWORD *)(v4223 + 64) = v4202;
      *(_OWORD *)(v4223 + 32) = v4200;
      *(_OWORD *)(v4223 + 48) = v4201;
      *(_OWORD *)v4223 = v4198;
      *(_OWORD *)(v4223 + 16) = v4199;
      v4224 = v4194 + 16 * v4192;
      *(_QWORD *)(v4224 + 64) = v4207;
      *(_OWORD *)(v4224 + 32) = v4205;
      *(_OWORD *)(v4224 + 48) = v4206;
      *(_OWORD *)v4224 = v4203;
      *(_OWORD *)(v4224 + 16) = v4204;
      v4225 = v4194 + 24 * v4192;
      *(_QWORD *)(v4225 + 64) = v4210;
      *(_OWORD *)(v4225 + 32) = v4209;
      *(_OWORD *)(v4225 + 48) = v4218;
      *(_OWORD *)v4225 = v4217;
      *(_OWORD *)(v4225 + 16) = v4208;
      v4226 = v4194 + 32 * v4192;
      *(_QWORD *)(v4226 + 64) = v4215;
      *(_OWORD *)(v4226 + 32) = v4213;
      *(_OWORD *)(v4226 + 48) = v4214;
      *(_OWORD *)v4226 = v4211;
      *(_OWORD *)(v4226 + 16) = v4212;
      v4227 = v4194 + 40 * v4192;
      *(_QWORD *)(v4227 + 64) = v4216;
      *(_OWORD *)(v4227 + 32) = v4221;
      *(_OWORD *)(v4227 + 48) = v4222;
      *(_OWORD *)v4227 = v4219;
      *(_OWORD *)(v4227 + 16) = v4220;
      goto LABEL_1900;
    }
    v4149 = *(unsigned int *)(a2 + 16);
    v4150 = *(_QWORD *)(a1 + 4480) + 8 * v4144;
    v4151.i64[0] = *(_QWORD *)(v4150 + 64);
    v4152 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4147 + (_DWORD)v4149 * v4148));
    v4154 = *(int64x2_t *)(v4150 + 32);
    v4153 = *(int64x2_t *)(v4150 + 48);
    v4155 = *(int64x2_t *)(v4150 + 16);
    v4156 = *(int64x2_t *)(v4150 + 120);
    v4157 = *(int64x2_t *)(v4150 + 104);
    v4158 = *(int64x2_t *)(v4150 + 88);
    v4159 = *(int64x2_t *)(v4150 + 72);
    v4160.i64[0] = *(_QWORD *)(v4150 + 208);
    v4162 = *(int64x2_t *)(v4150 + 176);
    v4161 = *(int64x2_t *)(v4150 + 192);
    v4164 = *(int64x2_t *)(v4150 + 144);
    v4163 = *(int64x2_t *)(v4150 + 160);
    v4165 = *(int64x2_t *)(v4150 + 248);
    v4166 = *(int64x2_t *)(v4150 + 232);
    v4167.i64[0] = *(_QWORD *)(v4150 + 352);
    v4169 = *(int64x2_t *)(v4150 + 320);
    v4168 = *(int64x2_t *)(v4150 + 336);
    v4171 = *(int64x2_t *)(v4150 + 288);
    v4170 = *(int64x2_t *)(v4150 + 304);
    v4172 = *(int64x2_t *)(v4150 + 216);
    v4173 = *(int64x2_t *)(v4150 + 264);
    v4174 = *(int64x2_t *)(v4150 + 392);
    v4175 = *(int64x2_t *)(v4150 + 408);
    v4176 = *(int64x2_t *)(v4150 + 376);
    v4177 = vzip1q_s64(*(int64x2_t *)v4150, v4159);
    v4178 = vzip1q_s64(v4171, *(int64x2_t *)(v4150 + 360));
    v4179 = vzip1q_s64(v4164, v4172);
    v4180 = vzip2q_s64(*(int64x2_t *)v4150, v4159);
    v4181 = vzip2q_s64(v4164, v4172);
    v4182 = vzip2q_s64(v4171, *(int64x2_t *)(v4150 + 360));
    v4151.i64[1] = *(_QWORD *)(v4150 + 136);
    v4160.i64[1] = *(_QWORD *)(v4150 + 280);
    v4167.i64[1] = *(_QWORD *)(v4150 + 424);
    v4152[1] = v4179;
    v4152[2] = v4178;
    *v4152 = v4177;
    v4183 = (int64x2_t *)((char *)v4152 + 8 * v4149);
    v4183[1] = v4181;
    v4183[2] = v4182;
    *v4183 = v4180;
    v4184 = &v4152[v4149];
    v4184[1] = vzip1q_s64(v4163, v4166);
    v4184[2] = vzip1q_s64(v4170, v4176);
    *v4184 = vzip1q_s64(v4155, v4158);
    v4185 = (int64x2_t *)((char *)v4152 + 24 * v4149);
    v4185[1] = vzip2q_s64(v4163, v4166);
    v4185[2] = vzip2q_s64(v4170, v4176);
    *v4185 = vzip2q_s64(v4155, v4158);
    v4186 = &v4152[2 * v4149];
    v4186[1] = vzip1q_s64(v4162, v4165);
    v4186[2] = vzip1q_s64(v4169, v4174);
    *v4186 = vzip1q_s64(v4154, v4157);
    v4187 = (int64x2_t *)((char *)v4152 + 40 * v4149);
    v4187[1] = vzip2q_s64(v4162, v4165);
    v4187[2] = vzip2q_s64(v4169, v4174);
    *v4187 = vzip2q_s64(v4154, v4157);
    v4188 = &v4152[3 * v4149];
    v4188[1] = vzip1q_s64(v4161, v4173);
    v4188[2] = vzip1q_s64(v4168, v4175);
    *v4188 = vzip1q_s64(v4153, v4156);
    v4189 = (int64x2_t *)((char *)v4152 + 56 * v4149);
    v4189[1] = vzip2q_s64(v4161, v4173);
    v4189[2] = vzip2q_s64(v4168, v4175);
    *v4189 = vzip2q_s64(v4153, v4156);
    v4190 = &v4152[4 * v4149];
    v4190[1] = v4160;
    v4190[2] = v4167;
    *v4190 = v4151;
LABEL_1900:
    v4228 = v4140 + 1;
    while (v4228 != v4143)
    {
      ++v4142;
      v4229 = *v4228++;
      v4144 = v4229;
      if (v4229 != -1)
      {
        v4140 = v4228 - 1;
        v4145 = v4142;
        v4146 = a3[3];
        if (v2040)
          goto LABEL_1896;
        goto LABEL_1898;
      }
    }
    v4135 = *(_DWORD *)(a1 + 4476);
LABEL_1890:
    ++v4136;
    ++v4137;
    if (v4136 < v4135)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1910:
  v4233 = *(_DWORD *)(a1 + 5916);
  if (!v4233)
    goto LABEL_1933;
  v4234 = 0;
  v4235 = a4[12];
  while (2)
  {
    v4236 = *(_QWORD *)(a1 + 5992);
    v4237 = *(_DWORD *)(a1 + 6016) * v4234;
    v4238 = (uint64_t *)(v4236 + 8 * v4237);
    v4239 = *(_DWORD *)(a1 + 5912);
    if (v4239 && *v4238 == -1)
    {
      v4240 = 0;
      v4294 = 8 * (v4239 + v4237) - 8 * v4237 - 8;
      v4295 = v4236 + 8 * v4237;
      while (v4294)
      {
        v4238 = (uint64_t *)(v4295 + 8);
        ++v4240;
        v4296 = *(_QWORD *)(v4295 + 8);
        v4294 -= 8;
        v4295 += 8;
        if (v4296 != -1)
          goto LABEL_1917;
      }
      goto LABEL_1913;
    }
    v4240 = 0;
LABEL_1917:
    v4241 = (uint64_t *)(v4236 + 8 * (v4237 + v4239));
    if (v4238 == v4241)
      goto LABEL_1913;
    v4242 = *v4238;
    v4243 = v4240;
    v4244 = a3[3];
    if (!v2040)
    {
LABEL_1921:
      v4246 = *(_DWORD *)(v4244 + 4 * v4243);
      v4245 = *v4235;
      goto LABEL_1922;
    }
LABEL_1919:
    v4245 = *v4235;
    v4246 = *(_DWORD *)(v4244 + 4 * v4243);
    if (*v4235 >= v4246)
    {
LABEL_1922:
      v4273 = *(_QWORD *)(a1 + 5920) + 8 * v4242;
      v4274 = *(unsigned int *)(a2 + 16);
      v4275 = *(_QWORD *)(v4273 + 64);
      v4276 = *(_QWORD *)a2 + 8 * (v4246 + (_DWORD)v4274 * v4245);
      v4277 = *(_OWORD *)(v4273 + 48);
      v4278 = *(_OWORD *)v4273;
      v4279 = *(_OWORD *)(v4273 + 16);
      v4280 = *(_OWORD *)(v4273 + 72);
      v4281 = *(_OWORD *)(v4273 + 88);
      v4282 = *(_OWORD *)(v4273 + 104);
      v4283 = *(_OWORD *)(v4273 + 120);
      v4284 = *(_QWORD *)(v4273 + 136);
      v4285 = *(_OWORD *)(v4273 + 144);
      v4286 = *(_OWORD *)(v4273 + 160);
      v4287 = *(_OWORD *)(v4273 + 176);
      v4288 = *(_OWORD *)(v4273 + 192);
      v4289 = *(_QWORD *)(v4273 + 208);
      *(_OWORD *)(v4276 + 32) = *(_OWORD *)(v4273 + 32);
      *(_OWORD *)(v4276 + 48) = v4277;
      *(_QWORD *)(v4276 + 64) = v4275;
      *(_OWORD *)v4276 = v4278;
      *(_OWORD *)(v4276 + 16) = v4279;
      v4290 = v4276 + 8 * v4274;
      *(_QWORD *)(v4290 + 64) = v4284;
      *(_OWORD *)(v4290 + 32) = v4282;
      *(_OWORD *)(v4290 + 48) = v4283;
      *(_OWORD *)v4290 = v4280;
      *(_OWORD *)(v4290 + 16) = v4281;
      v4291 = v4276 + 16 * v4274;
      *(_QWORD *)(v4291 + 64) = v4289;
      *(_OWORD *)(v4291 + 32) = v4287;
      *(_OWORD *)(v4291 + 48) = v4288;
      *(_OWORD *)v4291 = v4285;
      *(_OWORD *)(v4291 + 16) = v4286;
      goto LABEL_1923;
    }
    v4247 = *(_QWORD *)(a1 + 5920) + 8 * v4242;
    v4248 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4249 = *(_QWORD *)(v4247 + 64);
    v4250 = *(_QWORD *)a2 + 8 * (v4245 + (_DWORD)v4248 * v4246);
    v4252 = *(int64x2_t *)(v4247 + 32);
    v4251 = *(int64x2_t *)(v4247 + 48);
    v4253 = *(int64x2_t *)(v4247 + 16);
    v4254 = *(int64x2_t *)(v4247 + 120);
    v4255 = *(int64x2_t *)(v4247 + 104);
    v4256 = *(int64x2_t *)(v4247 + 88);
    v4257 = *(int64x2_t *)(v4247 + 72);
    v4258 = *(_QWORD *)(v4247 + 208);
    v4260 = *(_OWORD *)(v4247 + 176);
    v4259 = *(_OWORD *)(v4247 + 192);
    v4262 = *(_OWORD *)(v4247 + 144);
    v4261 = *(_OWORD *)(v4247 + 160);
    v4263 = vzip1q_s64(*(int64x2_t *)v4247, v4257);
    v4264 = vzip2q_s64(*(int64x2_t *)v4247, v4257);
    *((_QWORD *)&v4249 + 1) = *(_QWORD *)(v4247 + 136);
    *(_QWORD *)(v4250 + 16) = v4262;
    *(int64x2_t *)v4250 = v4263;
    v4265 = (int64x2_t *)(v4250 + 8 * v4248);
    *v4265 = v4264;
    v4265[1].i64[0] = *((_QWORD *)&v4262 + 1);
    v4266 = (int64x2_t *)(v4250 + 16 * v4248);
    v4266[1].i64[0] = v4261;
    *v4266 = vzip1q_s64(v4253, v4256);
    v4267 = (int64x2_t *)(v4250 + 24 * v4248);
    v4267[1].i64[0] = *((_QWORD *)&v4261 + 1);
    *v4267 = vzip2q_s64(v4253, v4256);
    v4268 = (int64x2_t *)(v4250 + 32 * v4248);
    v4268[1].i64[0] = v4260;
    *v4268 = vzip1q_s64(v4252, v4255);
    v4269 = (int64x2_t *)(v4250 + 40 * v4248);
    v4269[1].i64[0] = *((_QWORD *)&v4260 + 1);
    *v4269 = vzip2q_s64(v4252, v4255);
    v4270 = (int64x2_t *)(v4250 + 48 * v4248);
    v4270[1].i64[0] = v4259;
    *v4270 = vzip1q_s64(v4251, v4254);
    v4271 = (int64x2_t *)(v4250 + 56 * v4248);
    v4271[1].i64[0] = *((_QWORD *)&v4259 + 1);
    *v4271 = vzip2q_s64(v4251, v4254);
    v4272 = v4250 + (v4248 << 6);
    *(_QWORD *)(v4272 + 16) = v4258;
    *(_OWORD *)v4272 = v4249;
LABEL_1923:
    v4292 = v4238 + 1;
    while (v4292 != v4241)
    {
      ++v4240;
      v4293 = *v4292++;
      v4242 = v4293;
      if (v4293 != -1)
      {
        v4238 = v4292 - 1;
        v4243 = v4240;
        v4244 = a3[3];
        if (v2040)
          goto LABEL_1919;
        goto LABEL_1921;
      }
    }
    v4233 = *(_DWORD *)(a1 + 5916);
LABEL_1913:
    ++v4234;
    ++v4235;
    if (v4234 < v4233)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1933:
  v4297 = *(_DWORD *)(a1 + 7356);
  if (!v4297)
    goto LABEL_1956;
  v4298 = 0;
  v4299 = a4[15];
  while (2)
  {
    v4300 = *(_QWORD *)(a1 + 7432);
    v4301 = *(_DWORD *)(a1 + 7456) * v4298;
    v4302 = (uint64_t *)(v4300 + 8 * v4301);
    v4303 = *(_DWORD *)(a1 + 7352);
    if (v4303 && *v4302 == -1)
    {
      v4304 = 0;
      v4327 = 8 * (v4303 + v4301) - 8 * v4301 - 8;
      v4328 = v4300 + 8 * v4301;
      while (v4327)
      {
        v4302 = (uint64_t *)(v4328 + 8);
        ++v4304;
        v4329 = *(_QWORD *)(v4328 + 8);
        v4327 -= 8;
        v4328 += 8;
        if (v4329 != -1)
          goto LABEL_1940;
      }
      goto LABEL_1936;
    }
    v4304 = 0;
LABEL_1940:
    v4305 = (uint64_t *)(v4300 + 8 * (v4301 + v4303));
    if (v4302 == v4305)
      goto LABEL_1936;
    v4306 = *v4302;
    v4307 = v4304;
    v4308 = a3[3];
    if (!v2040)
    {
LABEL_1944:
      v4310 = *(_DWORD *)(v4308 + 4 * v4307);
      v4309 = *v4299;
      goto LABEL_1945;
    }
LABEL_1942:
    v4309 = *v4299;
    v4310 = *(_DWORD *)(v4308 + 4 * v4307);
    if (*v4299 >= v4310)
    {
LABEL_1945:
      v4319 = *(_QWORD *)(a1 + 7360) + 8 * v4306;
      v4320 = *(_QWORD *)a2 + 8 * (v4310 + *(_DWORD *)(a2 + 16) * v4309);
      v4321 = *(_QWORD *)(v4319 + 64);
      v4322 = *(_OWORD *)(v4319 + 48);
      v4323 = *(_OWORD *)v4319;
      v4324 = *(_OWORD *)(v4319 + 16);
      *(_OWORD *)(v4320 + 32) = *(_OWORD *)(v4319 + 32);
      *(_OWORD *)(v4320 + 48) = v4322;
      *(_QWORD *)(v4320 + 64) = v4321;
      *(_OWORD *)v4320 = v4323;
      *(_OWORD *)(v4320 + 16) = v4324;
      goto LABEL_1946;
    }
    v4311 = *(_QWORD *)(a1 + 7360) + 8 * v4306;
    v4312 = *(unsigned int *)(a2 + 16);
    v4313 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v4309 + (_DWORD)v4312 * v4310));
    v4314 = *(_QWORD *)(v4311 + 64);
    v4316 = *(int8x16_t *)(v4311 + 32);
    v4315 = *(int8x16_t *)(v4311 + 48);
    v4317 = *(int8x16_t *)(v4311 + 16);
    v4318 = vextq_s8(*(int8x16_t *)v4311, *(int8x16_t *)v4311, 8uLL).u64[0];
    *v4313 = *(_QWORD *)v4311;
    v4313[v4312] = v4318;
    v4313[2 * v4312] = v4317.i64[0];
    v4313[3 * v4312] = vextq_s8(v4317, v4317, 8uLL).u64[0];
    v4313[4 * v4312] = v4316.i64[0];
    v4313[5 * v4312] = vextq_s8(v4316, v4316, 8uLL).u64[0];
    v4313[6 * v4312] = v4315.i64[0];
    v4313[7 * v4312] = vextq_s8(v4315, v4315, 8uLL).u64[0];
    v4313[8 * v4312] = v4314;
LABEL_1946:
    v4325 = v4302 + 1;
    while (v4325 != v4305)
    {
      ++v4304;
      v4326 = *v4325++;
      v4306 = v4326;
      if (v4326 != -1)
      {
        v4302 = v4325 - 1;
        v4307 = v4304;
        v4308 = a3[3];
        if (v2040)
          goto LABEL_1942;
        goto LABEL_1944;
      }
    }
    v4297 = *(_DWORD *)(a1 + 7356);
LABEL_1936:
    ++v4298;
    ++v4299;
    if (v4298 < v4297)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1956:
  v4330 = *(_DWORD *)(a1 + 8796);
  if (!v4330)
    goto LABEL_1979;
  v4331 = 0;
  v4332 = a4[18];
  while (2)
  {
    v4333 = *(_QWORD *)(a1 + 8872);
    v4334 = *(_DWORD *)(a1 + 8896) * v4331;
    v4335 = (uint64_t *)(v4333 + 8 * v4334);
    v4336 = *(_DWORD *)(a1 + 8792);
    if (v4336 && *v4335 == -1)
    {
      v4337 = 0;
      v4400 = 8 * (v4336 + v4334) - 8 * v4334 - 8;
      v4401 = v4333 + 8 * v4334;
      while (v4400)
      {
        v4335 = (uint64_t *)(v4401 + 8);
        ++v4337;
        v4402 = *(_QWORD *)(v4401 + 8);
        v4400 -= 8;
        v4401 += 8;
        if (v4402 != -1)
          goto LABEL_1963;
      }
      goto LABEL_1959;
    }
    v4337 = 0;
LABEL_1963:
    v4338 = (uint64_t *)(v4333 + 8 * (v4334 + v4336));
    if (v4335 == v4338)
      goto LABEL_1959;
    v4339 = *v4335;
    v4340 = v4337;
    v4341 = a3[3];
    if (!v2040)
    {
LABEL_1967:
      v4343 = *(_DWORD *)(v4341 + 4 * v4340);
      v4342 = *v4332;
      goto LABEL_1968;
    }
LABEL_1965:
    v4342 = *v4332;
    v4343 = *(_DWORD *)(v4341 + 4 * v4340);
    if (*v4332 >= v4343)
    {
LABEL_1968:
      v4373 = *(_QWORD *)(a1 + 8800) + 8 * v4339;
      v4374 = *(unsigned int *)(a2 + 16);
      v4375 = *(_QWORD *)(v4373 + 64);
      v4376 = *(_QWORD *)a2 + 8 * (v4343 + (_DWORD)v4374 * v4342);
      v4377 = *(_OWORD *)(v4373 + 48);
      v4378 = *(_OWORD *)v4373;
      v4379 = *(_OWORD *)(v4373 + 16);
      v4380 = *(_OWORD *)(v4373 + 72);
      v4381 = *(_OWORD *)(v4373 + 88);
      v4382 = *(_OWORD *)(v4373 + 104);
      v4383 = *(_OWORD *)(v4373 + 120);
      v4384 = *(_QWORD *)(v4373 + 136);
      v4385 = *(_OWORD *)(v4373 + 144);
      v4386 = *(_OWORD *)(v4373 + 160);
      v4387 = *(_OWORD *)(v4373 + 176);
      v4388 = *(_OWORD *)(v4373 + 192);
      v4389 = *(_QWORD *)(v4373 + 208);
      v4390 = *(_OWORD *)(v4373 + 232);
      v4391 = *(_OWORD *)(v4373 + 248);
      v4392 = *(_QWORD *)(v4373 + 280);
      v4393 = *(_OWORD *)(v4373 + 216);
      v4394 = *(_OWORD *)(v4373 + 264);
      *(_OWORD *)(v4376 + 32) = *(_OWORD *)(v4373 + 32);
      *(_OWORD *)(v4376 + 48) = v4377;
      *(_QWORD *)(v4376 + 64) = v4375;
      *(_OWORD *)v4376 = v4378;
      *(_OWORD *)(v4376 + 16) = v4379;
      v4395 = v4376 + 8 * v4374;
      *(_QWORD *)(v4395 + 64) = v4384;
      *(_OWORD *)(v4395 + 32) = v4382;
      *(_OWORD *)(v4395 + 48) = v4383;
      *(_OWORD *)v4395 = v4380;
      *(_OWORD *)(v4395 + 16) = v4381;
      v4396 = v4376 + 16 * v4374;
      *(_QWORD *)(v4396 + 64) = v4389;
      *(_OWORD *)(v4396 + 32) = v4387;
      *(_OWORD *)(v4396 + 48) = v4388;
      *(_OWORD *)v4396 = v4385;
      *(_OWORD *)(v4396 + 16) = v4386;
      v4397 = v4376 + 24 * v4374;
      *(_QWORD *)(v4397 + 64) = v4392;
      *(_OWORD *)(v4397 + 32) = v4391;
      *(_OWORD *)(v4397 + 48) = v4394;
      *(_OWORD *)v4397 = v4393;
      *(_OWORD *)(v4397 + 16) = v4390;
      goto LABEL_1969;
    }
    v4344 = *(unsigned int *)(a2 + 16);
    v4345 = *(_QWORD *)(a1 + 8800) + 8 * v4339;
    v4346.i64[0] = *(_QWORD *)(v4345 + 64);
    v4348 = *(int64x2_t *)(v4345 + 32);
    v4347 = *(int64x2_t *)(v4345 + 48);
    v4349 = *(int64x2_t *)(v4345 + 16);
    v4350 = *(int64x2_t *)(v4345 + 120);
    v4351 = *(int64x2_t *)(v4345 + 104);
    v4352 = *(int64x2_t *)(v4345 + 88);
    v4353 = *(int64x2_t *)(v4345 + 72);
    v4354.i64[0] = *(_QWORD *)(v4345 + 208);
    v4356 = *(int64x2_t *)(v4345 + 176);
    v4355 = *(int64x2_t *)(v4345 + 192);
    v4358 = *(int64x2_t *)(v4345 + 144);
    v4357 = *(int64x2_t *)(v4345 + 160);
    v4359 = *(int64x2_t *)(v4345 + 248);
    v4360 = *(int64x2_t *)(v4345 + 232);
    v4361 = *(int64x2_t *)(v4345 + 216);
    v4362 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4342 + (_DWORD)v4344 * v4343));
    v4363 = *(int64x2_t *)(v4345 + 264);
    v4364 = vzip2q_s64(*(int64x2_t *)v4345, v4353);
    v4346.i64[1] = *(_QWORD *)(v4345 + 136);
    v4354.i64[1] = *(_QWORD *)(v4345 + 280);
    *v4362 = vzip1q_s64(*(int64x2_t *)v4345, v4353);
    v4362[1] = vzip1q_s64(v4358, v4361);
    v4365 = (int64x2_t *)((char *)v4362 + 8 * v4344);
    *v4365 = v4364;
    v4365[1] = vzip2q_s64(v4358, v4361);
    v4366 = &v4362[v4344];
    *v4366 = vzip1q_s64(v4349, v4352);
    v4366[1] = vzip1q_s64(v4357, v4360);
    v4367 = (int64x2_t *)((char *)v4362 + 24 * v4344);
    *v4367 = vzip2q_s64(v4349, v4352);
    v4367[1] = vzip2q_s64(v4357, v4360);
    v4368 = &v4362[2 * v4344];
    *v4368 = vzip1q_s64(v4348, v4351);
    v4368[1] = vzip1q_s64(v4356, v4359);
    v4369 = (int64x2_t *)((char *)v4362 + 40 * v4344);
    *v4369 = vzip2q_s64(v4348, v4351);
    v4369[1] = vzip2q_s64(v4356, v4359);
    v4370 = &v4362[3 * v4344];
    *v4370 = vzip1q_s64(v4347, v4350);
    v4370[1] = vzip1q_s64(v4355, v4363);
    v4371 = (int64x2_t *)((char *)v4362 + 56 * v4344);
    *v4371 = vzip2q_s64(v4347, v4350);
    v4371[1] = vzip2q_s64(v4355, v4363);
    v4372 = &v4362[4 * v4344];
    *v4372 = v4346;
    v4372[1] = v4354;
LABEL_1969:
    v4398 = v4335 + 1;
    while (v4398 != v4338)
    {
      ++v4337;
      v4399 = *v4398++;
      v4339 = v4399;
      if (v4399 != -1)
      {
        v4335 = v4398 - 1;
        v4340 = v4337;
        v4341 = a3[3];
        if (v2040)
          goto LABEL_1965;
        goto LABEL_1967;
      }
    }
    v4330 = *(_DWORD *)(a1 + 8796);
LABEL_1959:
    ++v4331;
    ++v4332;
    if (v4331 < v4330)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1979:
  v4403 = *(_DWORD *)(a1 + 10236);
  if (!v4403)
    goto LABEL_2002;
  v4404 = 0;
  v4405 = a4[21];
  while (2)
  {
    v4406 = *(_QWORD *)(a1 + 10312);
    v4407 = *(_DWORD *)(a1 + 10336) * v4404;
    v4408 = (uint64_t *)(v4406 + 8 * v4407);
    v4409 = *(_DWORD *)(a1 + 10232);
    if (v4409 && *v4408 == -1)
    {
      v4410 = 0;
      v4473 = 8 * (v4409 + v4407) - 8 * v4407 - 8;
      v4474 = v4406 + 8 * v4407;
      while (v4473)
      {
        v4408 = (uint64_t *)(v4474 + 8);
        ++v4410;
        v4475 = *(_QWORD *)(v4474 + 8);
        v4473 -= 8;
        v4474 += 8;
        if (v4475 != -1)
          goto LABEL_1986;
      }
      goto LABEL_1982;
    }
    v4410 = 0;
LABEL_1986:
    v4411 = (uint64_t *)(v4406 + 8 * (v4407 + v4409));
    if (v4408 == v4411)
      goto LABEL_1982;
    v4412 = *v4408;
    v4413 = v4410;
    v4414 = a3[3];
    if (!v2040)
    {
LABEL_1990:
      v4416 = *(_DWORD *)(v4414 + 4 * v4413);
      v4415 = *v4405;
      goto LABEL_1991;
    }
LABEL_1988:
    v4415 = *v4405;
    v4416 = *(_DWORD *)(v4414 + 4 * v4413);
    if (*v4405 >= v4416)
    {
LABEL_1991:
      v4446 = *(_QWORD *)(a1 + 10240) + 8 * v4412;
      v4447 = *(unsigned int *)(a2 + 16);
      v4448 = *(_QWORD *)(v4446 + 64);
      v4449 = *(_QWORD *)a2 + 8 * (v4416 + (_DWORD)v4447 * v4415);
      v4450 = *(_OWORD *)(v4446 + 48);
      v4451 = *(_OWORD *)v4446;
      v4452 = *(_OWORD *)(v4446 + 16);
      v4453 = *(_OWORD *)(v4446 + 72);
      v4454 = *(_OWORD *)(v4446 + 88);
      v4455 = *(_OWORD *)(v4446 + 104);
      v4456 = *(_OWORD *)(v4446 + 120);
      v4457 = *(_QWORD *)(v4446 + 136);
      v4458 = *(_OWORD *)(v4446 + 144);
      v4459 = *(_OWORD *)(v4446 + 160);
      v4460 = *(_OWORD *)(v4446 + 176);
      v4461 = *(_OWORD *)(v4446 + 192);
      v4462 = *(_QWORD *)(v4446 + 208);
      v4463 = *(_OWORD *)(v4446 + 232);
      v4464 = *(_OWORD *)(v4446 + 248);
      v4465 = *(_QWORD *)(v4446 + 280);
      v4466 = *(_OWORD *)(v4446 + 216);
      v4467 = *(_OWORD *)(v4446 + 264);
      *(_OWORD *)(v4449 + 32) = *(_OWORD *)(v4446 + 32);
      *(_OWORD *)(v4449 + 48) = v4450;
      *(_QWORD *)(v4449 + 64) = v4448;
      *(_OWORD *)v4449 = v4451;
      *(_OWORD *)(v4449 + 16) = v4452;
      v4468 = v4449 + 8 * v4447;
      *(_QWORD *)(v4468 + 64) = v4457;
      *(_OWORD *)(v4468 + 32) = v4455;
      *(_OWORD *)(v4468 + 48) = v4456;
      *(_OWORD *)v4468 = v4453;
      *(_OWORD *)(v4468 + 16) = v4454;
      v4469 = v4449 + 16 * v4447;
      *(_QWORD *)(v4469 + 64) = v4462;
      *(_OWORD *)(v4469 + 32) = v4460;
      *(_OWORD *)(v4469 + 48) = v4461;
      *(_OWORD *)v4469 = v4458;
      *(_OWORD *)(v4469 + 16) = v4459;
      v4470 = v4449 + 24 * v4447;
      *(_QWORD *)(v4470 + 64) = v4465;
      *(_OWORD *)(v4470 + 32) = v4464;
      *(_OWORD *)(v4470 + 48) = v4467;
      *(_OWORD *)v4470 = v4466;
      *(_OWORD *)(v4470 + 16) = v4463;
      goto LABEL_1992;
    }
    v4417 = *(unsigned int *)(a2 + 16);
    v4418 = *(_QWORD *)(a1 + 10240) + 8 * v4412;
    v4419.i64[0] = *(_QWORD *)(v4418 + 64);
    v4421 = *(int64x2_t *)(v4418 + 32);
    v4420 = *(int64x2_t *)(v4418 + 48);
    v4422 = *(int64x2_t *)(v4418 + 16);
    v4423 = *(int64x2_t *)(v4418 + 120);
    v4424 = *(int64x2_t *)(v4418 + 104);
    v4425 = *(int64x2_t *)(v4418 + 88);
    v4426 = *(int64x2_t *)(v4418 + 72);
    v4427.i64[0] = *(_QWORD *)(v4418 + 208);
    v4429 = *(int64x2_t *)(v4418 + 176);
    v4428 = *(int64x2_t *)(v4418 + 192);
    v4431 = *(int64x2_t *)(v4418 + 144);
    v4430 = *(int64x2_t *)(v4418 + 160);
    v4432 = *(int64x2_t *)(v4418 + 248);
    v4433 = *(int64x2_t *)(v4418 + 232);
    v4434 = *(int64x2_t *)(v4418 + 216);
    v4435 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4415 + (_DWORD)v4417 * v4416));
    v4436 = *(int64x2_t *)(v4418 + 264);
    v4437 = vzip2q_s64(*(int64x2_t *)v4418, v4426);
    v4419.i64[1] = *(_QWORD *)(v4418 + 136);
    v4427.i64[1] = *(_QWORD *)(v4418 + 280);
    *v4435 = vzip1q_s64(*(int64x2_t *)v4418, v4426);
    v4435[1] = vzip1q_s64(v4431, v4434);
    v4438 = (int64x2_t *)((char *)v4435 + 8 * v4417);
    *v4438 = v4437;
    v4438[1] = vzip2q_s64(v4431, v4434);
    v4439 = &v4435[v4417];
    *v4439 = vzip1q_s64(v4422, v4425);
    v4439[1] = vzip1q_s64(v4430, v4433);
    v4440 = (int64x2_t *)((char *)v4435 + 24 * v4417);
    *v4440 = vzip2q_s64(v4422, v4425);
    v4440[1] = vzip2q_s64(v4430, v4433);
    v4441 = &v4435[2 * v4417];
    *v4441 = vzip1q_s64(v4421, v4424);
    v4441[1] = vzip1q_s64(v4429, v4432);
    v4442 = (int64x2_t *)((char *)v4435 + 40 * v4417);
    *v4442 = vzip2q_s64(v4421, v4424);
    v4442[1] = vzip2q_s64(v4429, v4432);
    v4443 = &v4435[3 * v4417];
    *v4443 = vzip1q_s64(v4420, v4423);
    v4443[1] = vzip1q_s64(v4428, v4436);
    v4444 = (int64x2_t *)((char *)v4435 + 56 * v4417);
    *v4444 = vzip2q_s64(v4420, v4423);
    v4444[1] = vzip2q_s64(v4428, v4436);
    v4445 = &v4435[4 * v4417];
    *v4445 = v4419;
    v4445[1] = v4427;
LABEL_1992:
    v4471 = v4408 + 1;
    while (v4471 != v4411)
    {
      ++v4410;
      v4472 = *v4471++;
      v4412 = v4472;
      if (v4472 != -1)
      {
        v4408 = v4471 - 1;
        v4413 = v4410;
        v4414 = a3[3];
        if (v2040)
          goto LABEL_1988;
        goto LABEL_1990;
      }
    }
    v4403 = *(_DWORD *)(a1 + 10236);
LABEL_1982:
    ++v4404;
    ++v4405;
    if (v4404 < v4403)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2002:
  v4476 = *(_DWORD *)(a1 + 11676);
  if (!v4476)
    goto LABEL_2025;
  v4477 = 0;
  v4478 = a4[24];
  while (2)
  {
    v4479 = *(_QWORD *)(a1 + 11752);
    v4480 = *(_DWORD *)(a1 + 11776) * v4477;
    v4481 = (uint64_t *)(v4479 + 8 * v4480);
    v4482 = *(_DWORD *)(a1 + 11672);
    if (v4482 && *v4481 == -1)
    {
      v4483 = 0;
      v4537 = 8 * (v4482 + v4480) - 8 * v4480 - 8;
      v4538 = v4479 + 8 * v4480;
      while (v4537)
      {
        v4481 = (uint64_t *)(v4538 + 8);
        ++v4483;
        v4539 = *(_QWORD *)(v4538 + 8);
        v4537 -= 8;
        v4538 += 8;
        if (v4539 != -1)
          goto LABEL_2009;
      }
      goto LABEL_2005;
    }
    v4483 = 0;
LABEL_2009:
    v4484 = (uint64_t *)(v4479 + 8 * (v4480 + v4482));
    if (v4481 == v4484)
      goto LABEL_2005;
    v4485 = *v4481;
    v4486 = v4483;
    v4487 = a3[3];
    if (!v2040)
    {
LABEL_2013:
      v4489 = *(_DWORD *)(v4487 + 4 * v4486);
      v4488 = *v4478;
      goto LABEL_2014;
    }
LABEL_2011:
    v4488 = *v4478;
    v4489 = *(_DWORD *)(v4487 + 4 * v4486);
    if (*v4478 >= v4489)
    {
LABEL_2014:
      v4516 = *(_QWORD *)(a1 + 11680) + 8 * v4485;
      v4517 = *(unsigned int *)(a2 + 16);
      v4518 = *(_QWORD *)(v4516 + 64);
      v4519 = *(_QWORD *)a2 + 8 * (v4489 + (_DWORD)v4517 * v4488);
      v4520 = *(_OWORD *)(v4516 + 48);
      v4521 = *(_OWORD *)v4516;
      v4522 = *(_OWORD *)(v4516 + 16);
      v4523 = *(_OWORD *)(v4516 + 72);
      v4524 = *(_OWORD *)(v4516 + 88);
      v4525 = *(_OWORD *)(v4516 + 104);
      v4526 = *(_OWORD *)(v4516 + 120);
      v4527 = *(_QWORD *)(v4516 + 136);
      v4528 = *(_OWORD *)(v4516 + 144);
      v4529 = *(_OWORD *)(v4516 + 160);
      v4530 = *(_OWORD *)(v4516 + 176);
      v4531 = *(_OWORD *)(v4516 + 192);
      v4532 = *(_QWORD *)(v4516 + 208);
      *(_OWORD *)(v4519 + 32) = *(_OWORD *)(v4516 + 32);
      *(_OWORD *)(v4519 + 48) = v4520;
      *(_QWORD *)(v4519 + 64) = v4518;
      *(_OWORD *)v4519 = v4521;
      *(_OWORD *)(v4519 + 16) = v4522;
      v4533 = v4519 + 8 * v4517;
      *(_QWORD *)(v4533 + 64) = v4527;
      *(_OWORD *)(v4533 + 32) = v4525;
      *(_OWORD *)(v4533 + 48) = v4526;
      *(_OWORD *)v4533 = v4523;
      *(_OWORD *)(v4533 + 16) = v4524;
      v4534 = v4519 + 16 * v4517;
      *(_QWORD *)(v4534 + 64) = v4532;
      *(_OWORD *)(v4534 + 32) = v4530;
      *(_OWORD *)(v4534 + 48) = v4531;
      *(_OWORD *)v4534 = v4528;
      *(_OWORD *)(v4534 + 16) = v4529;
      goto LABEL_2015;
    }
    v4490 = *(_QWORD *)(a1 + 11680) + 8 * v4485;
    v4491 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4492 = *(_QWORD *)(v4490 + 64);
    v4493 = *(_QWORD *)a2 + 8 * (v4488 + (_DWORD)v4491 * v4489);
    v4495 = *(int64x2_t *)(v4490 + 32);
    v4494 = *(int64x2_t *)(v4490 + 48);
    v4496 = *(int64x2_t *)(v4490 + 16);
    v4497 = *(int64x2_t *)(v4490 + 120);
    v4498 = *(int64x2_t *)(v4490 + 104);
    v4499 = *(int64x2_t *)(v4490 + 88);
    v4500 = *(int64x2_t *)(v4490 + 72);
    v4501 = *(_QWORD *)(v4490 + 208);
    v4503 = *(_OWORD *)(v4490 + 176);
    v4502 = *(_OWORD *)(v4490 + 192);
    v4505 = *(_OWORD *)(v4490 + 144);
    v4504 = *(_OWORD *)(v4490 + 160);
    v4506 = vzip1q_s64(*(int64x2_t *)v4490, v4500);
    v4507 = vzip2q_s64(*(int64x2_t *)v4490, v4500);
    *((_QWORD *)&v4492 + 1) = *(_QWORD *)(v4490 + 136);
    *(_QWORD *)(v4493 + 16) = v4505;
    *(int64x2_t *)v4493 = v4506;
    v4508 = (int64x2_t *)(v4493 + 8 * v4491);
    *v4508 = v4507;
    v4508[1].i64[0] = *((_QWORD *)&v4505 + 1);
    v4509 = (int64x2_t *)(v4493 + 16 * v4491);
    v4509[1].i64[0] = v4504;
    *v4509 = vzip1q_s64(v4496, v4499);
    v4510 = (int64x2_t *)(v4493 + 24 * v4491);
    v4510[1].i64[0] = *((_QWORD *)&v4504 + 1);
    *v4510 = vzip2q_s64(v4496, v4499);
    v4511 = (int64x2_t *)(v4493 + 32 * v4491);
    v4511[1].i64[0] = v4503;
    *v4511 = vzip1q_s64(v4495, v4498);
    v4512 = (int64x2_t *)(v4493 + 40 * v4491);
    v4512[1].i64[0] = *((_QWORD *)&v4503 + 1);
    *v4512 = vzip2q_s64(v4495, v4498);
    v4513 = (int64x2_t *)(v4493 + 48 * v4491);
    v4513[1].i64[0] = v4502;
    *v4513 = vzip1q_s64(v4494, v4497);
    v4514 = (int64x2_t *)(v4493 + 56 * v4491);
    v4514[1].i64[0] = *((_QWORD *)&v4502 + 1);
    *v4514 = vzip2q_s64(v4494, v4497);
    v4515 = v4493 + (v4491 << 6);
    *(_QWORD *)(v4515 + 16) = v4501;
    *(_OWORD *)v4515 = v4492;
LABEL_2015:
    v4535 = v4481 + 1;
    while (v4535 != v4484)
    {
      ++v4483;
      v4536 = *v4535++;
      v4485 = v4536;
      if (v4536 != -1)
      {
        v4481 = v4535 - 1;
        v4486 = v4483;
        v4487 = a3[3];
        if (v2040)
          goto LABEL_2011;
        goto LABEL_2013;
      }
    }
    v4476 = *(_DWORD *)(a1 + 11676);
LABEL_2005:
    ++v4477;
    ++v4478;
    if (v4477 < v4476)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2025:
  v4540 = *(_DWORD *)(a1 + 13116);
  if (!v4540)
    goto LABEL_2048;
  v4541 = 0;
  v4542 = a4[27];
  while (2)
  {
    v4543 = *(_QWORD *)(a1 + 13192);
    v4544 = *(_DWORD *)(a1 + 13216) * v4541;
    v4545 = (uint64_t *)(v4543 + 8 * v4544);
    v4546 = *(_DWORD *)(a1 + 13112);
    if (v4546 && *v4545 == -1)
    {
      v4547 = 0;
      v4601 = 8 * (v4546 + v4544) - 8 * v4544 - 8;
      v4602 = v4543 + 8 * v4544;
      while (v4601)
      {
        v4545 = (uint64_t *)(v4602 + 8);
        ++v4547;
        v4603 = *(_QWORD *)(v4602 + 8);
        v4601 -= 8;
        v4602 += 8;
        if (v4603 != -1)
          goto LABEL_2032;
      }
      goto LABEL_2028;
    }
    v4547 = 0;
LABEL_2032:
    v4548 = (uint64_t *)(v4543 + 8 * (v4544 + v4546));
    if (v4545 == v4548)
      goto LABEL_2028;
    v4549 = *v4545;
    v4550 = v4547;
    v4551 = a3[3];
    if (!v2040)
    {
LABEL_2036:
      v4553 = *(_DWORD *)(v4551 + 4 * v4550);
      v4552 = *v4542;
      goto LABEL_2037;
    }
LABEL_2034:
    v4552 = *v4542;
    v4553 = *(_DWORD *)(v4551 + 4 * v4550);
    if (*v4542 >= v4553)
    {
LABEL_2037:
      v4580 = *(_QWORD *)(a1 + 13120) + 8 * v4549;
      v4581 = *(unsigned int *)(a2 + 16);
      v4582 = *(_QWORD *)(v4580 + 64);
      v4583 = *(_QWORD *)a2 + 8 * (v4553 + (_DWORD)v4581 * v4552);
      v4584 = *(_OWORD *)(v4580 + 48);
      v4585 = *(_OWORD *)v4580;
      v4586 = *(_OWORD *)(v4580 + 16);
      v4587 = *(_OWORD *)(v4580 + 72);
      v4588 = *(_OWORD *)(v4580 + 88);
      v4589 = *(_OWORD *)(v4580 + 104);
      v4590 = *(_OWORD *)(v4580 + 120);
      v4591 = *(_QWORD *)(v4580 + 136);
      v4592 = *(_OWORD *)(v4580 + 144);
      v4593 = *(_OWORD *)(v4580 + 160);
      v4594 = *(_OWORD *)(v4580 + 176);
      v4595 = *(_OWORD *)(v4580 + 192);
      v4596 = *(_QWORD *)(v4580 + 208);
      *(_OWORD *)(v4583 + 32) = *(_OWORD *)(v4580 + 32);
      *(_OWORD *)(v4583 + 48) = v4584;
      *(_QWORD *)(v4583 + 64) = v4582;
      *(_OWORD *)v4583 = v4585;
      *(_OWORD *)(v4583 + 16) = v4586;
      v4597 = v4583 + 8 * v4581;
      *(_QWORD *)(v4597 + 64) = v4591;
      *(_OWORD *)(v4597 + 32) = v4589;
      *(_OWORD *)(v4597 + 48) = v4590;
      *(_OWORD *)v4597 = v4587;
      *(_OWORD *)(v4597 + 16) = v4588;
      v4598 = v4583 + 16 * v4581;
      *(_QWORD *)(v4598 + 64) = v4596;
      *(_OWORD *)(v4598 + 32) = v4594;
      *(_OWORD *)(v4598 + 48) = v4595;
      *(_OWORD *)v4598 = v4592;
      *(_OWORD *)(v4598 + 16) = v4593;
      goto LABEL_2038;
    }
    v4554 = *(_QWORD *)(a1 + 13120) + 8 * v4549;
    v4555 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4556 = *(_QWORD *)(v4554 + 64);
    v4557 = *(_QWORD *)a2 + 8 * (v4552 + (_DWORD)v4555 * v4553);
    v4559 = *(int64x2_t *)(v4554 + 32);
    v4558 = *(int64x2_t *)(v4554 + 48);
    v4560 = *(int64x2_t *)(v4554 + 16);
    v4561 = *(int64x2_t *)(v4554 + 120);
    v4562 = *(int64x2_t *)(v4554 + 104);
    v4563 = *(int64x2_t *)(v4554 + 88);
    v4564 = *(int64x2_t *)(v4554 + 72);
    v4565 = *(_QWORD *)(v4554 + 208);
    v4567 = *(_OWORD *)(v4554 + 176);
    v4566 = *(_OWORD *)(v4554 + 192);
    v4569 = *(_OWORD *)(v4554 + 144);
    v4568 = *(_OWORD *)(v4554 + 160);
    v4570 = vzip1q_s64(*(int64x2_t *)v4554, v4564);
    v4571 = vzip2q_s64(*(int64x2_t *)v4554, v4564);
    *((_QWORD *)&v4556 + 1) = *(_QWORD *)(v4554 + 136);
    *(_QWORD *)(v4557 + 16) = v4569;
    *(int64x2_t *)v4557 = v4570;
    v4572 = (int64x2_t *)(v4557 + 8 * v4555);
    *v4572 = v4571;
    v4572[1].i64[0] = *((_QWORD *)&v4569 + 1);
    v4573 = (int64x2_t *)(v4557 + 16 * v4555);
    v4573[1].i64[0] = v4568;
    *v4573 = vzip1q_s64(v4560, v4563);
    v4574 = (int64x2_t *)(v4557 + 24 * v4555);
    v4574[1].i64[0] = *((_QWORD *)&v4568 + 1);
    *v4574 = vzip2q_s64(v4560, v4563);
    v4575 = (int64x2_t *)(v4557 + 32 * v4555);
    v4575[1].i64[0] = v4567;
    *v4575 = vzip1q_s64(v4559, v4562);
    v4576 = (int64x2_t *)(v4557 + 40 * v4555);
    v4576[1].i64[0] = *((_QWORD *)&v4567 + 1);
    *v4576 = vzip2q_s64(v4559, v4562);
    v4577 = (int64x2_t *)(v4557 + 48 * v4555);
    v4577[1].i64[0] = v4566;
    *v4577 = vzip1q_s64(v4558, v4561);
    v4578 = (int64x2_t *)(v4557 + 56 * v4555);
    v4578[1].i64[0] = *((_QWORD *)&v4566 + 1);
    *v4578 = vzip2q_s64(v4558, v4561);
    v4579 = v4557 + (v4555 << 6);
    *(_QWORD *)(v4579 + 16) = v4565;
    *(_OWORD *)v4579 = v4556;
LABEL_2038:
    v4599 = v4545 + 1;
    while (v4599 != v4548)
    {
      ++v4547;
      v4600 = *v4599++;
      v4549 = v4600;
      if (v4600 != -1)
      {
        v4545 = v4599 - 1;
        v4550 = v4547;
        v4551 = a3[3];
        if (v2040)
          goto LABEL_2034;
        goto LABEL_2036;
      }
    }
    v4540 = *(_DWORD *)(a1 + 13116);
LABEL_2028:
    ++v4541;
    ++v4542;
    if (v4541 < v4540)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2048:
  v4604 = *(_DWORD *)(a1 + 12);
  if (!v4604)
    goto LABEL_2071;
  v4605 = 0;
  v4606 = *a4;
  while (2)
  {
    v4607 = *(_QWORD *)(a1 + 88);
    v4608 = *(_DWORD *)(a1 + 112) * v4605;
    v4609 = (uint64_t *)(v4607 + 8 * v4608);
    v4610 = *(_DWORD *)(a1 + 8);
    if (v4610 && *v4609 == -1)
    {
      v4611 = 0;
      v4674 = 8 * (v4610 + v4608) - 8 * v4608 - 8;
      v4675 = v4607 + 8 * v4608;
      while (v4674)
      {
        v4609 = (uint64_t *)(v4675 + 8);
        ++v4611;
        v4676 = *(_QWORD *)(v4675 + 8);
        v4674 -= 8;
        v4675 += 8;
        if (v4676 != -1)
          goto LABEL_2055;
      }
      goto LABEL_2051;
    }
    v4611 = 0;
LABEL_2055:
    v4612 = (uint64_t *)(v4607 + 8 * (v4608 + v4610));
    if (v4609 == v4612)
      goto LABEL_2051;
    v4613 = *v4609;
    v4614 = v4611;
    v4615 = *a3;
    if (!v2040)
    {
LABEL_2059:
      v4617 = *(_DWORD *)(v4615 + 4 * v4614);
      v4616 = *v4606;
      goto LABEL_2060;
    }
LABEL_2057:
    v4616 = *v4606;
    v4617 = *(_DWORD *)(v4615 + 4 * v4614);
    if (*v4606 >= v4617)
    {
LABEL_2060:
      v4663 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4613);
      v4619 = *(unsigned int *)(a2 + 16);
      v4620 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4617 + (_DWORD)v4619 * v4616));
      v4664 = *(int64x2_t *)v4663;
      v4665 = *((int64x2_t *)v4663 + 2);
      v4636 = *((int64x2_t *)v4663 + 3);
      v4666 = *((int64x2_t *)v4663 + 4);
      v4667 = *((int64x2_t *)v4663 + 5);
      v4638 = *((int8x16_t *)v4663 + 6);
      v4639 = *((int8x16_t *)v4663 + 7);
      v4640 = *((int8x16_t *)v4663 + 8);
      v4644 = *((int8x16_t *)v4663 + 9);
      v4641 = vextq_s8(v4640, v4640, 8uLL).u64[0];
      v4642 = vextq_s8(v4639, v4639, 8uLL).u64[0];
      v4643 = vextq_s8(v4638, v4638, 8uLL).u64[0];
      v4645 = *((int8x16_t *)v4663 + 10);
      v4646 = *((int8x16_t *)v4663 + 11);
      v4648 = vextq_s8(v4646, v4646, 8uLL).u64[0];
      v4649 = vextq_s8(v4645, v4645, 8uLL).u64[0];
      v4647 = vextq_s8(v4644, v4644, 8uLL).u64[0];
      v4650 = *((int8x16_t *)v4663 + 12);
      v4651 = *((int8x16_t *)v4663 + 13);
      v4652 = *((int8x16_t *)v4663 + 14);
      v4656 = *((int8x16_t *)v4663 + 15);
      v4653 = vextq_s8(v4652, v4652, 8uLL).u64[0];
      v4654 = vextq_s8(v4651, v4651, 8uLL).u64[0];
      v4655 = vextq_s8(v4650, v4650, 8uLL).u64[0];
      v4657 = *((int8x16_t *)v4663 + 16);
      v4658 = *((int8x16_t *)v4663 + 17);
      v4660 = vextq_s8(v4658, v4658, 8uLL).u64[0];
      v4661 = vextq_s8(v4657, v4657, 8uLL).u64[0];
      v4659 = vextq_s8(v4656, v4656, 8uLL).u64[0];
      v4620[1] = *((int64x2_t *)v4663 + 1);
      v4620[2] = v4665;
      *v4620 = v4664;
      v4662 = (int64x2_t *)((char *)v4620 + 8 * v4619);
      v4662[1] = v4666;
      v4662[2] = v4667;
      goto LABEL_2061;
    }
    v4618 = *(_QWORD *)(a1 + 16) + 8 * v4613;
    v4619 = *(unsigned int *)(a2 + 16);
    v4620 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4616 + (_DWORD)v4619 * v4617));
    v4621 = *(int64x2_t *)(v4618 + 16);
    v4622 = *(int64x2_t *)(v4618 + 64);
    v4623 = *(int64x2_t *)(v4618 + 80);
    v4625 = *(int64x2_t *)(v4618 + 32);
    v4624 = *(int64x2_t *)(v4618 + 48);
    v4626 = *(int64x2_t *)(v4618 + 96);
    v4627 = *(int64x2_t *)(v4618 + 112);
    v4628 = *(int64x2_t *)(v4618 + 128);
    v4629 = *(int64x2_t *)(v4618 + 192);
    v4630 = *(int64x2_t *)(v4618 + 208);
    v4631 = *(int64x2_t *)(v4618 + 224);
    v4632 = vzip1q_s64(*(int64x2_t *)v4618, v4624);
    v4633 = vzip1q_s64(v4626, *(int64x2_t *)(v4618 + 144));
    v4634 = vzip1q_s64(v4629, *(int64x2_t *)(v4618 + 240));
    v4635.i64[0] = vdupq_laneq_s64(v4626, 1).u64[0];
    v4635.i64[1] = *(_QWORD *)(v4618 + 152);
    v4636 = vzip2q_s64(*(int64x2_t *)v4618, v4624);
    v4637.i64[0] = vdupq_laneq_s64(v4629, 1).u64[0];
    v4637.i64[1] = *(_QWORD *)(v4618 + 248);
    v4638 = (int8x16_t)vzip1q_s64(v4621, v4622);
    v4639 = (int8x16_t)vzip1q_s64(v4627, *(int64x2_t *)(v4618 + 160));
    v4640 = (int8x16_t)vzip1q_s64(v4630, *(int64x2_t *)(v4618 + 256));
    v4641 = vextq_s8(v4640, v4640, 8uLL).u64[0];
    v4642 = vextq_s8(v4639, v4639, 8uLL).u64[0];
    v4643 = vextq_s8(v4638, v4638, 8uLL).u64[0];
    v4644 = (int8x16_t)vzip2q_s64(v4621, v4622);
    v4645.i64[0] = vdupq_laneq_s64(v4627, 1).u64[0];
    v4645.i64[1] = *(_QWORD *)(v4618 + 168);
    v4646.i64[0] = vdupq_laneq_s64(v4630, 1).u64[0];
    v4646.i64[1] = *(_QWORD *)(v4618 + 264);
    v4647 = vextq_s8(v4644, v4644, 8uLL).u64[0];
    v4648 = vextq_s8(v4646, v4646, 8uLL).u64[0];
    v4649 = vextq_s8(v4645, v4645, 8uLL).u64[0];
    v4650 = (int8x16_t)vzip1q_s64(v4625, v4623);
    v4651 = (int8x16_t)vzip1q_s64(v4628, *(int64x2_t *)(v4618 + 176));
    v4652 = (int8x16_t)vzip1q_s64(v4631, *(int64x2_t *)(v4618 + 272));
    v4653 = vextq_s8(v4652, v4652, 8uLL).u64[0];
    v4654 = vextq_s8(v4651, v4651, 8uLL).u64[0];
    v4655 = vextq_s8(v4650, v4650, 8uLL).u64[0];
    v4656 = (int8x16_t)vzip2q_s64(v4625, v4623);
    v4657.i64[0] = vdupq_laneq_s64(v4628, 1).u64[0];
    v4657.i64[1] = *(_QWORD *)(v4618 + 184);
    v4658.i64[0] = vdupq_laneq_s64(v4631, 1).u64[0];
    v4658.i64[1] = *(_QWORD *)(v4618 + 280);
    v4659 = vextq_s8(v4656, v4656, 8uLL).u64[0];
    v4660 = vextq_s8(v4658, v4658, 8uLL).u64[0];
    v4661 = vextq_s8(v4657, v4657, 8uLL).u64[0];
    v4620[1] = v4633;
    v4620[2] = v4634;
    *v4620 = v4632;
    v4662 = (int64x2_t *)((char *)v4620 + 8 * v4619);
    v4662[1] = v4635;
    v4662[2] = v4637;
LABEL_2061:
    *v4662 = v4636;
    v4638.i64[1] = v4643;
    v4639.i64[1] = v4642;
    v4668 = (int8x16_t *)&v4620[v4619];
    *v4668 = v4638;
    v4668[1] = v4639;
    v4640.i64[1] = v4641;
    v4668[2] = v4640;
    v4669 = (int8x16_t *)((char *)v4620 + 24 * v4619);
    v4646.i64[1] = v4648;
    v4645.i64[1] = v4649;
    v4644.i64[1] = v4647;
    v4669[1] = v4645;
    v4669[2] = v4646;
    *v4669 = v4644;
    v4670 = (int8x16_t *)&v4620[2 * v4619];
    v4652.i64[1] = v4653;
    v4651.i64[1] = v4654;
    v4650.i64[1] = v4655;
    v4670[1] = v4651;
    v4670[2] = v4652;
    *v4670 = v4650;
    v4671 = (int8x16_t *)((char *)v4620 + 40 * v4619);
    v4658.i64[1] = v4660;
    v4657.i64[1] = v4661;
    v4671[1] = v4657;
    v4671[2] = v4658;
    v4656.i64[1] = v4659;
    v4672 = v4609 + 1;
    *v4671 = v4656;
    while (v4672 != v4612)
    {
      ++v4611;
      v4673 = *v4672++;
      v4613 = v4673;
      if (v4673 != -1)
      {
        v4609 = v4672 - 1;
        v4614 = v4611;
        v4615 = *a3;
        if (v2040)
          goto LABEL_2057;
        goto LABEL_2059;
      }
    }
    v4604 = *(_DWORD *)(a1 + 12);
LABEL_2051:
    ++v4605;
    ++v4606;
    if (v4605 < v4604)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2071:
  result = (int64x2_t *)*(unsigned int *)(a1 + 1452);
  if (!(_DWORD)result)
    goto LABEL_2094;
  v4678 = 0;
  v4679 = a4[3];
  while (2)
  {
    v4680 = *(_QWORD *)(a1 + 1528);
    v4681 = *(_DWORD *)(a1 + 1552) * v4678;
    v4682 = (uint64_t *)(v4680 + 8 * v4681);
    v4683 = *(_DWORD *)(a1 + 1448);
    if (v4683 && *v4682 == -1)
    {
      v4684 = 0;
      v4766 = 8 * (v4683 + v4681) - 8 * v4681 - 8;
      v4767 = v4680 + 8 * v4681;
      while (v4766)
      {
        v4682 = (uint64_t *)(v4767 + 8);
        ++v4684;
        v4768 = *(_QWORD *)(v4767 + 8);
        v4766 -= 8;
        v4767 += 8;
        if (v4768 != -1)
          goto LABEL_2078;
      }
      goto LABEL_2074;
    }
    v4684 = 0;
LABEL_2078:
    v4685 = (uint64_t *)(v4680 + 8 * (v4681 + v4683));
    if (v4682 == v4685)
      goto LABEL_2074;
    v4686 = *v4682;
    v4687 = v4684;
    v4688 = *a3;
    if (!v2040)
    {
LABEL_2082:
      v4690 = *(_DWORD *)(v4688 + 4 * v4687);
      v4689 = *v4679;
      goto LABEL_2083;
    }
LABEL_2080:
    v4689 = *v4679;
    v4690 = *(_DWORD *)(v4688 + 4 * v4687);
    if (*v4679 >= v4690)
    {
LABEL_2083:
      v4727 = (__int128 *)(*(_QWORD *)(a1 + 1456) + 8 * v4686);
      v4728 = *(unsigned int *)(a2 + 16);
      v4729 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v4690 + (_DWORD)v4728 * v4689));
      v4730 = *v4727;
      v4731 = v4727[2];
      v4732 = v4727[3];
      v4733 = v4727[4];
      v4734 = v4727[5];
      v4735 = v4727[6];
      v4736 = v4727[7];
      v4737 = v4727[8];
      v4738 = v4727[9];
      v4739 = v4727[10];
      v4740 = v4727[11];
      v4741 = v4727[12];
      v4742 = v4727[13];
      v4743 = v4727[14];
      v4744 = v4727[15];
      v4745 = v4727[16];
      v4746 = v4727[17];
      v4747 = v4727[18];
      v4748 = v4727[19];
      v4749 = v4727[20];
      v4750 = v4727[21];
      v4751 = v4727[22];
      v4752 = v4727[23];
      v4753 = v4727[24];
      v4754 = v4727[25];
      v4755 = v4727[26];
      v4729[1] = v4727[1];
      v4729[2] = v4731;
      *v4729 = v4730;
      v4756 = (_OWORD *)((char *)v4729 + 8 * v4728);
      v4756[1] = v4733;
      v4756[2] = v4734;
      *v4756 = v4732;
      v4757 = &v4729[v4728];
      v4757[1] = v4736;
      v4757[2] = v4737;
      *v4757 = v4735;
      v4758 = (_OWORD *)((char *)v4729 + 24 * v4728);
      v4758[1] = v4739;
      v4758[2] = v4740;
      *v4758 = v4738;
      v4759 = &v4729[2 * v4728];
      v4759[1] = v4742;
      v4759[2] = v4743;
      *v4759 = v4741;
      v4760 = (_OWORD *)((char *)v4729 + 40 * v4728);
      v4760[1] = v4745;
      v4760[2] = v4746;
      *v4760 = v4744;
      v4761 = &v4729[3 * v4728];
      v4761[1] = v4748;
      v4761[2] = v4749;
      *v4761 = v4747;
      v4762 = (_OWORD *)((char *)v4729 + 56 * v4728);
      v4762[1] = v4751;
      v4762[2] = v4752;
      *v4762 = v4750;
      v4763 = &v4729[4 * v4728];
      v4763[1] = v4754;
      v4763[2] = v4755;
      *v4763 = v4753;
      goto LABEL_2084;
    }
    v4691 = *(_QWORD *)(a1 + 1456) + 8 * v4686;
    v4692 = *(unsigned int *)(a2 + 16);
    v4693 = *(_QWORD *)a2 + 8 * (v4689 + (_DWORD)v4692 * v4690);
    v4694 = *(int64x2_t *)(v4691 + 16);
    v4696 = *(int64x2_t *)(v4691 + 64);
    v4695 = *(int64x2_t *)(v4691 + 80);
    v4697 = *(int64x2_t *)(v4691 + 32);
    v4698 = *(int64x2_t *)(v4691 + 48);
    v4700 = *(int64x2_t *)(v4691 + 96);
    v4699 = *(int64x2_t *)(v4691 + 112);
    v4702 = *(int64x2_t *)(v4691 + 160);
    v4701 = *(int64x2_t *)(v4691 + 176);
    v4703 = *(int64x2_t *)(v4691 + 128);
    v4704 = *(int64x2_t *)(v4691 + 144);
    v4706 = *(int64x2_t *)(v4691 + 192);
    v4705 = *(int64x2_t *)(v4691 + 208);
    v4708 = *(int64x2_t *)(v4691 + 256);
    v4707 = *(int64x2_t *)(v4691 + 272);
    v4709 = *(int64x2_t *)(v4691 + 224);
    v4710 = *(int64x2_t *)(v4691 + 240);
    v4712 = *(int64x2_t *)(v4691 + 288);
    v4711 = *(int64x2_t *)(v4691 + 304);
    v4714 = *(int64x2_t *)(v4691 + 352);
    v4713 = *(int64x2_t *)(v4691 + 368);
    v4716 = *(int64x2_t *)(v4691 + 320);
    v4715 = *(int64x2_t *)(v4691 + 336);
    v4718 = *(_OWORD *)(v4691 + 400);
    v4717 = *(_OWORD *)(v4691 + 416);
    v4719 = *(_OWORD *)(v4691 + 384);
    v4720 = vzip1q_s64(*(int64x2_t *)v4691, v4698);
    v4721 = vzip2q_s64(*(int64x2_t *)v4691, v4698);
    *(int64x2_t *)(v4693 + 32) = vzip1q_s64(v4706, v4710);
    *(int64x2_t *)(v4693 + 48) = vzip1q_s64(v4712, v4715);
    *(_QWORD *)(v4693 + 64) = v4719;
    *(int64x2_t *)v4693 = v4720;
    *(int64x2_t *)(v4693 + 16) = vzip1q_s64(v4700, v4704);
    v4722 = (int64x2_t *)(v4693 + 8 * v4692);
    v4722[2] = vzip2q_s64(v4706, v4710);
    v4722[3] = vzip2q_s64(v4712, v4715);
    *v4722 = v4721;
    v4722[1] = vzip2q_s64(v4700, v4704);
    v4722[4].i64[0] = *((_QWORD *)&v4719 + 1);
    v4723 = (int64x2_t *)(v4693 + 16 * v4692);
    v4723[4].i64[0] = v4718;
    v4723[2] = vzip1q_s64(v4705, v4708);
    v4723[3] = vzip1q_s64(v4711, v4714);
    *v4723 = vzip1q_s64(v4694, v4696);
    v4723[1] = vzip1q_s64(v4699, v4702);
    v4724 = (int64x2_t *)(v4693 + 24 * v4692);
    v4724[4].i64[0] = *((_QWORD *)&v4718 + 1);
    v4724[2] = vzip2q_s64(v4705, v4708);
    v4724[3] = vzip2q_s64(v4711, v4714);
    *v4724 = vzip2q_s64(v4694, v4696);
    v4724[1] = vzip2q_s64(v4699, v4702);
    v4725 = (int64x2_t *)(v4693 + 32 * v4692);
    v4725[4].i64[0] = v4717;
    v4725[2] = vzip1q_s64(v4709, v4707);
    v4725[3] = vzip1q_s64(v4716, v4713);
    *v4725 = vzip1q_s64(v4697, v4695);
    v4725[1] = vzip1q_s64(v4703, v4701);
    v4726 = (int64x2_t *)(v4693 + 40 * v4692);
    v4726[4].i64[0] = *((_QWORD *)&v4717 + 1);
    v4726[2] = vzip2q_s64(v4709, v4707);
    v4726[3] = vzip2q_s64(v4716, v4713);
    *v4726 = vzip2q_s64(v4697, v4695);
    v4726[1] = vzip2q_s64(v4703, v4701);
LABEL_2084:
    v4764 = v4682 + 1;
    while (v4764 != v4685)
    {
      ++v4684;
      v4765 = *v4764++;
      v4686 = v4765;
      if (v4765 != -1)
      {
        v4682 = v4764 - 1;
        v4687 = v4684;
        v4688 = *a3;
        if (v2040)
          goto LABEL_2080;
        goto LABEL_2082;
      }
    }
    result = (int64x2_t *)*(unsigned int *)(a1 + 1452);
LABEL_2074:
    ++v4678;
    ++v4679;
    if (v4678 < result)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2094:
  v4769 = *(_DWORD *)(a1 + 2892);
  if (!v4769)
    goto LABEL_2117;
  v4770 = 0;
  v4771 = a4[6];
  while (2)
  {
    v4772 = *(_QWORD *)(a1 + 2968);
    v4773 = *(_DWORD *)(a1 + 2992) * v4770;
    v4774 = (uint64_t *)(v4772 + 8 * v4773);
    result = (int64x2_t *)*(unsigned int *)(a1 + 2888);
    if ((_DWORD)result && *v4774 == -1)
    {
      v4775 = 0;
      v4837 = 8 * (result + v4773) - 8 * v4773 - 8;
      v4838 = v4772 + 8 * v4773;
      while (v4837)
      {
        v4774 = (uint64_t *)(v4838 + 8);
        ++v4775;
        v4839 = *(_QWORD *)(v4838 + 8);
        v4837 -= 8;
        v4838 += 8;
        if (v4839 != -1)
          goto LABEL_2101;
      }
      goto LABEL_2097;
    }
    v4775 = 0;
LABEL_2101:
    v4776 = (uint64_t *)(v4772 + 8 * (v4773 + result));
    if (v4774 == v4776)
      goto LABEL_2097;
    v4777 = *v4774;
    v4778 = v4775;
    v4779 = *a3;
    if (!v2040)
    {
LABEL_2105:
      v4781 = *(_DWORD *)(v4779 + 4 * v4778);
      v4780 = *v4771;
      goto LABEL_2106;
    }
LABEL_2103:
    v4780 = *v4771;
    v4781 = *(_DWORD *)(v4779 + 4 * v4778);
    if (*v4771 >= v4781)
    {
LABEL_2106:
      v4827 = (_OWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v4777);
      v4783 = *(unsigned int *)(a2 + 16);
      v4784 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4781 + (_DWORD)v4783 * v4780));
      v4828 = *(int64x2_t *)v4827;
      v4829 = *((int64x2_t *)v4827 + 2);
      v4800 = *((int64x2_t *)v4827 + 3);
      v4830 = *((int64x2_t *)v4827 + 4);
      v4831 = *((int64x2_t *)v4827 + 5);
      v4802 = *((int8x16_t *)v4827 + 6);
      v4803 = *((int8x16_t *)v4827 + 7);
      v4804 = *((int8x16_t *)v4827 + 8);
      v4808 = *((int8x16_t *)v4827 + 9);
      v4805 = vextq_s8(v4804, v4804, 8uLL).u64[0];
      v4806 = vextq_s8(v4803, v4803, 8uLL).u64[0];
      v4807 = vextq_s8(v4802, v4802, 8uLL).u64[0];
      v4809 = *((int8x16_t *)v4827 + 10);
      v4810 = *((int8x16_t *)v4827 + 11);
      v4812 = vextq_s8(v4810, v4810, 8uLL).u64[0];
      v4813 = vextq_s8(v4809, v4809, 8uLL).u64[0];
      v4811 = vextq_s8(v4808, v4808, 8uLL).u64[0];
      v4814 = *((int8x16_t *)v4827 + 12);
      v4815 = *((int8x16_t *)v4827 + 13);
      v4816 = *((int8x16_t *)v4827 + 14);
      v4820 = *((int8x16_t *)v4827 + 15);
      v4817 = vextq_s8(v4816, v4816, 8uLL).u64[0];
      v4818 = vextq_s8(v4815, v4815, 8uLL).u64[0];
      v4819 = vextq_s8(v4814, v4814, 8uLL).u64[0];
      v4821 = *((int8x16_t *)v4827 + 16);
      v4822 = *((int8x16_t *)v4827 + 17);
      v4824 = vextq_s8(v4822, v4822, 8uLL).u64[0];
      v4825 = vextq_s8(v4821, v4821, 8uLL).u64[0];
      v4823 = vextq_s8(v4820, v4820, 8uLL).u64[0];
      v4784[1] = *((int64x2_t *)v4827 + 1);
      v4784[2] = v4829;
      *v4784 = v4828;
      v4826 = (int64x2_t *)((char *)v4784 + 8 * v4783);
      v4826[1] = v4830;
      v4826[2] = v4831;
      goto LABEL_2107;
    }
    v4782 = *(_QWORD *)(a1 + 2896) + 8 * v4777;
    v4783 = *(unsigned int *)(a2 + 16);
    v4784 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4780 + (_DWORD)v4783 * v4781));
    v4785 = *(int64x2_t *)(v4782 + 16);
    v4786 = *(int64x2_t *)(v4782 + 64);
    v4787 = *(int64x2_t *)(v4782 + 80);
    v4789 = *(int64x2_t *)(v4782 + 32);
    v4788 = *(int64x2_t *)(v4782 + 48);
    v4790 = *(int64x2_t *)(v4782 + 96);
    v4791 = *(int64x2_t *)(v4782 + 112);
    v4792 = *(int64x2_t *)(v4782 + 128);
    v4793 = *(int64x2_t *)(v4782 + 192);
    v4794 = *(int64x2_t *)(v4782 + 208);
    v4795 = *(int64x2_t *)(v4782 + 224);
    v4796 = vzip1q_s64(*(int64x2_t *)v4782, v4788);
    v4797 = vzip1q_s64(v4790, *(int64x2_t *)(v4782 + 144));
    v4798 = vzip1q_s64(v4793, *(int64x2_t *)(v4782 + 240));
    v4799.i64[0] = vdupq_laneq_s64(v4790, 1).u64[0];
    v4799.i64[1] = *(_QWORD *)(v4782 + 152);
    v4800 = vzip2q_s64(*(int64x2_t *)v4782, v4788);
    v4801.i64[0] = vdupq_laneq_s64(v4793, 1).u64[0];
    v4801.i64[1] = *(_QWORD *)(v4782 + 248);
    v4802 = (int8x16_t)vzip1q_s64(v4785, v4786);
    v4803 = (int8x16_t)vzip1q_s64(v4791, *(int64x2_t *)(v4782 + 160));
    v4804 = (int8x16_t)vzip1q_s64(v4794, *(int64x2_t *)(v4782 + 256));
    v4805 = vextq_s8(v4804, v4804, 8uLL).u64[0];
    v4806 = vextq_s8(v4803, v4803, 8uLL).u64[0];
    v4807 = vextq_s8(v4802, v4802, 8uLL).u64[0];
    v4808 = (int8x16_t)vzip2q_s64(v4785, v4786);
    v4809.i64[0] = vdupq_laneq_s64(v4791, 1).u64[0];
    v4809.i64[1] = *(_QWORD *)(v4782 + 168);
    v4810.i64[0] = vdupq_laneq_s64(v4794, 1).u64[0];
    v4810.i64[1] = *(_QWORD *)(v4782 + 264);
    v4811 = vextq_s8(v4808, v4808, 8uLL).u64[0];
    v4812 = vextq_s8(v4810, v4810, 8uLL).u64[0];
    v4813 = vextq_s8(v4809, v4809, 8uLL).u64[0];
    v4814 = (int8x16_t)vzip1q_s64(v4789, v4787);
    v4815 = (int8x16_t)vzip1q_s64(v4792, *(int64x2_t *)(v4782 + 176));
    v4816 = (int8x16_t)vzip1q_s64(v4795, *(int64x2_t *)(v4782 + 272));
    v4817 = vextq_s8(v4816, v4816, 8uLL).u64[0];
    v4818 = vextq_s8(v4815, v4815, 8uLL).u64[0];
    v4819 = vextq_s8(v4814, v4814, 8uLL).u64[0];
    v4820 = (int8x16_t)vzip2q_s64(v4789, v4787);
    v4821.i64[0] = vdupq_laneq_s64(v4792, 1).u64[0];
    v4821.i64[1] = *(_QWORD *)(v4782 + 184);
    v4822.i64[0] = vdupq_laneq_s64(v4795, 1).u64[0];
    v4822.i64[1] = *(_QWORD *)(v4782 + 280);
    v4823 = vextq_s8(v4820, v4820, 8uLL).u64[0];
    v4824 = vextq_s8(v4822, v4822, 8uLL).u64[0];
    v4825 = vextq_s8(v4821, v4821, 8uLL).u64[0];
    v4784[1] = v4797;
    v4784[2] = v4798;
    *v4784 = v4796;
    v4826 = (int64x2_t *)((char *)v4784 + 8 * v4783);
    v4826[1] = v4799;
    v4826[2] = v4801;
LABEL_2107:
    *v4826 = v4800;
    v4802.i64[1] = v4807;
    v4803.i64[1] = v4806;
    v4832 = (int8x16_t *)&v4784[v4783];
    *v4832 = v4802;
    v4832[1] = v4803;
    v4804.i64[1] = v4805;
    v4832[2] = v4804;
    v4833 = (int8x16_t *)((char *)v4784 + 24 * v4783);
    v4810.i64[1] = v4812;
    v4809.i64[1] = v4813;
    v4808.i64[1] = v4811;
    v4833[1] = v4809;
    v4833[2] = v4810;
    *v4833 = v4808;
    result = &v4784[2 * v4783];
    v4816.i64[1] = v4817;
    v4815.i64[1] = v4818;
    v4814.i64[1] = v4819;
    result[1] = (int64x2_t)v4815;
    result[2] = (int64x2_t)v4816;
    *result = (int64x2_t)v4814;
    v4834 = (int8x16_t *)((char *)v4784 + 40 * v4783);
    v4822.i64[1] = v4824;
    v4821.i64[1] = v4825;
    v4834[1] = v4821;
    v4834[2] = v4822;
    v4820.i64[1] = v4823;
    v4835 = v4774 + 1;
    *v4834 = v4820;
    while (v4835 != v4776)
    {
      ++v4775;
      v4836 = *v4835++;
      v4777 = v4836;
      if (v4836 != -1)
      {
        v4774 = v4835 - 1;
        v4778 = v4775;
        v4779 = *a3;
        if (v2040)
          goto LABEL_2103;
        goto LABEL_2105;
      }
    }
    v4769 = *(_DWORD *)(a1 + 2892);
LABEL_2097:
    ++v4770;
    ++v4771;
    if (v4770 < v4769)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2117:
  v4840 = *(_DWORD *)(a1 + 4332);
  if (!v4840)
    goto LABEL_2140;
  v4841 = 0;
  v4842 = a4[9];
  while (2)
  {
    v4843 = *(_QWORD *)(a1 + 4408);
    v4844 = *(_DWORD *)(a1 + 4432) * v4841;
    v4845 = (uint64_t *)(v4843 + 8 * v4844);
    result = (int64x2_t *)*(unsigned int *)(a1 + 4328);
    if ((_DWORD)result && *v4845 == -1)
    {
      v4846 = 0;
      v4908 = 8 * (result + v4844) - 8 * v4844 - 8;
      v4909 = v4843 + 8 * v4844;
      while (v4908)
      {
        v4845 = (uint64_t *)(v4909 + 8);
        ++v4846;
        v4910 = *(_QWORD *)(v4909 + 8);
        v4908 -= 8;
        v4909 += 8;
        if (v4910 != -1)
          goto LABEL_2124;
      }
      goto LABEL_2120;
    }
    v4846 = 0;
LABEL_2124:
    v4847 = (uint64_t *)(v4843 + 8 * (v4844 + result));
    if (v4845 == v4847)
      goto LABEL_2120;
    v4848 = *v4845;
    v4849 = v4846;
    v4850 = *a3;
    if (!v2040)
    {
LABEL_2128:
      v4852 = *(_DWORD *)(v4850 + 4 * v4849);
      v4851 = *v4842;
      goto LABEL_2129;
    }
LABEL_2126:
    v4851 = *v4842;
    v4852 = *(_DWORD *)(v4850 + 4 * v4849);
    if (*v4842 >= v4852)
    {
LABEL_2129:
      v4898 = (_OWORD *)(*(_QWORD *)(a1 + 4336) + 8 * v4848);
      v4854 = *(unsigned int *)(a2 + 16);
      v4855 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4852 + (_DWORD)v4854 * v4851));
      v4899 = *(int64x2_t *)v4898;
      v4900 = *((int64x2_t *)v4898 + 2);
      v4871 = *((int64x2_t *)v4898 + 3);
      v4901 = *((int64x2_t *)v4898 + 4);
      v4902 = *((int64x2_t *)v4898 + 5);
      v4873 = *((int8x16_t *)v4898 + 6);
      v4874 = *((int8x16_t *)v4898 + 7);
      v4875 = *((int8x16_t *)v4898 + 8);
      v4879 = *((int8x16_t *)v4898 + 9);
      v4876 = vextq_s8(v4875, v4875, 8uLL).u64[0];
      v4877 = vextq_s8(v4874, v4874, 8uLL).u64[0];
      v4878 = vextq_s8(v4873, v4873, 8uLL).u64[0];
      v4880 = *((int8x16_t *)v4898 + 10);
      v4881 = *((int8x16_t *)v4898 + 11);
      v4883 = vextq_s8(v4881, v4881, 8uLL).u64[0];
      v4884 = vextq_s8(v4880, v4880, 8uLL).u64[0];
      v4882 = vextq_s8(v4879, v4879, 8uLL).u64[0];
      v4885 = *((int8x16_t *)v4898 + 12);
      v4886 = *((int8x16_t *)v4898 + 13);
      v4887 = *((int8x16_t *)v4898 + 14);
      v4891 = *((int8x16_t *)v4898 + 15);
      v4888 = vextq_s8(v4887, v4887, 8uLL).u64[0];
      v4889 = vextq_s8(v4886, v4886, 8uLL).u64[0];
      v4890 = vextq_s8(v4885, v4885, 8uLL).u64[0];
      v4892 = *((int8x16_t *)v4898 + 16);
      v4893 = *((int8x16_t *)v4898 + 17);
      v4895 = vextq_s8(v4893, v4893, 8uLL).u64[0];
      v4896 = vextq_s8(v4892, v4892, 8uLL).u64[0];
      v4894 = vextq_s8(v4891, v4891, 8uLL).u64[0];
      v4855[1] = *((int64x2_t *)v4898 + 1);
      v4855[2] = v4900;
      *v4855 = v4899;
      v4897 = (int64x2_t *)((char *)v4855 + 8 * v4854);
      v4897[1] = v4901;
      v4897[2] = v4902;
      goto LABEL_2130;
    }
    v4853 = *(_QWORD *)(a1 + 4336) + 8 * v4848;
    v4854 = *(unsigned int *)(a2 + 16);
    v4855 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4851 + (_DWORD)v4854 * v4852));
    v4856 = *(int64x2_t *)(v4853 + 16);
    v4857 = *(int64x2_t *)(v4853 + 64);
    v4858 = *(int64x2_t *)(v4853 + 80);
    v4860 = *(int64x2_t *)(v4853 + 32);
    v4859 = *(int64x2_t *)(v4853 + 48);
    v4861 = *(int64x2_t *)(v4853 + 96);
    v4862 = *(int64x2_t *)(v4853 + 112);
    v4863 = *(int64x2_t *)(v4853 + 128);
    v4864 = *(int64x2_t *)(v4853 + 192);
    v4865 = *(int64x2_t *)(v4853 + 208);
    v4866 = *(int64x2_t *)(v4853 + 224);
    v4867 = vzip1q_s64(*(int64x2_t *)v4853, v4859);
    v4868 = vzip1q_s64(v4861, *(int64x2_t *)(v4853 + 144));
    v4869 = vzip1q_s64(v4864, *(int64x2_t *)(v4853 + 240));
    v4870.i64[0] = vdupq_laneq_s64(v4861, 1).u64[0];
    v4870.i64[1] = *(_QWORD *)(v4853 + 152);
    v4871 = vzip2q_s64(*(int64x2_t *)v4853, v4859);
    v4872.i64[0] = vdupq_laneq_s64(v4864, 1).u64[0];
    v4872.i64[1] = *(_QWORD *)(v4853 + 248);
    v4873 = (int8x16_t)vzip1q_s64(v4856, v4857);
    v4874 = (int8x16_t)vzip1q_s64(v4862, *(int64x2_t *)(v4853 + 160));
    v4875 = (int8x16_t)vzip1q_s64(v4865, *(int64x2_t *)(v4853 + 256));
    v4876 = vextq_s8(v4875, v4875, 8uLL).u64[0];
    v4877 = vextq_s8(v4874, v4874, 8uLL).u64[0];
    v4878 = vextq_s8(v4873, v4873, 8uLL).u64[0];
    v4879 = (int8x16_t)vzip2q_s64(v4856, v4857);
    v4880.i64[0] = vdupq_laneq_s64(v4862, 1).u64[0];
    v4880.i64[1] = *(_QWORD *)(v4853 + 168);
    v4881.i64[0] = vdupq_laneq_s64(v4865, 1).u64[0];
    v4881.i64[1] = *(_QWORD *)(v4853 + 264);
    v4882 = vextq_s8(v4879, v4879, 8uLL).u64[0];
    v4883 = vextq_s8(v4881, v4881, 8uLL).u64[0];
    v4884 = vextq_s8(v4880, v4880, 8uLL).u64[0];
    v4885 = (int8x16_t)vzip1q_s64(v4860, v4858);
    v4886 = (int8x16_t)vzip1q_s64(v4863, *(int64x2_t *)(v4853 + 176));
    v4887 = (int8x16_t)vzip1q_s64(v4866, *(int64x2_t *)(v4853 + 272));
    v4888 = vextq_s8(v4887, v4887, 8uLL).u64[0];
    v4889 = vextq_s8(v4886, v4886, 8uLL).u64[0];
    v4890 = vextq_s8(v4885, v4885, 8uLL).u64[0];
    v4891 = (int8x16_t)vzip2q_s64(v4860, v4858);
    v4892.i64[0] = vdupq_laneq_s64(v4863, 1).u64[0];
    v4892.i64[1] = *(_QWORD *)(v4853 + 184);
    v4893.i64[0] = vdupq_laneq_s64(v4866, 1).u64[0];
    v4893.i64[1] = *(_QWORD *)(v4853 + 280);
    v4894 = vextq_s8(v4891, v4891, 8uLL).u64[0];
    v4895 = vextq_s8(v4893, v4893, 8uLL).u64[0];
    v4896 = vextq_s8(v4892, v4892, 8uLL).u64[0];
    v4855[1] = v4868;
    v4855[2] = v4869;
    *v4855 = v4867;
    v4897 = (int64x2_t *)((char *)v4855 + 8 * v4854);
    v4897[1] = v4870;
    v4897[2] = v4872;
LABEL_2130:
    *v4897 = v4871;
    v4873.i64[1] = v4878;
    v4874.i64[1] = v4877;
    v4903 = (int8x16_t *)&v4855[v4854];
    *v4903 = v4873;
    v4903[1] = v4874;
    v4875.i64[1] = v4876;
    v4903[2] = v4875;
    v4904 = (int8x16_t *)((char *)v4855 + 24 * v4854);
    v4881.i64[1] = v4883;
    v4880.i64[1] = v4884;
    v4879.i64[1] = v4882;
    v4904[1] = v4880;
    v4904[2] = v4881;
    *v4904 = v4879;
    result = &v4855[2 * v4854];
    v4887.i64[1] = v4888;
    v4886.i64[1] = v4889;
    v4885.i64[1] = v4890;
    result[1] = (int64x2_t)v4886;
    result[2] = (int64x2_t)v4887;
    *result = (int64x2_t)v4885;
    v4905 = (int8x16_t *)((char *)v4855 + 40 * v4854);
    v4893.i64[1] = v4895;
    v4892.i64[1] = v4896;
    v4905[1] = v4892;
    v4905[2] = v4893;
    v4891.i64[1] = v4894;
    v4906 = v4845 + 1;
    *v4905 = v4891;
    while (v4906 != v4847)
    {
      ++v4846;
      v4907 = *v4906++;
      v4848 = v4907;
      if (v4907 != -1)
      {
        v4845 = v4906 - 1;
        v4849 = v4846;
        v4850 = *a3;
        if (v2040)
          goto LABEL_2126;
        goto LABEL_2128;
      }
    }
    v4840 = *(_DWORD *)(a1 + 4332);
LABEL_2120:
    ++v4841;
    ++v4842;
    if (v4841 < v4840)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2140:
  v4911 = *(_DWORD *)(a1 + 5772);
  if (!v4911)
    goto LABEL_2163;
  v4912 = 0;
  v4913 = a4[12];
  while (2)
  {
    v4914 = *(_QWORD *)(a1 + 5848);
    v4915 = *(_DWORD *)(a1 + 5872) * v4912;
    v4916 = (uint64_t *)(v4914 + 8 * v4915);
    result = (int64x2_t *)*(unsigned int *)(a1 + 5768);
    if ((_DWORD)result && *v4916 == -1)
    {
      v4917 = 0;
      v4958 = 8 * (result + v4915) - 8 * v4915 - 8;
      v4959 = v4914 + 8 * v4915;
      while (v4958)
      {
        v4916 = (uint64_t *)(v4959 + 8);
        ++v4917;
        v4960 = *(_QWORD *)(v4959 + 8);
        v4958 -= 8;
        v4959 += 8;
        if (v4960 != -1)
          goto LABEL_2147;
      }
      goto LABEL_2143;
    }
    v4917 = 0;
LABEL_2147:
    v4918 = (uint64_t *)(v4914 + 8 * (v4915 + result));
    if (v4916 == v4918)
      goto LABEL_2143;
    v4919 = *v4916;
    v4920 = v4917;
    v4921 = *a3;
    if (!v2040)
    {
LABEL_2151:
      v4923 = *(_DWORD *)(v4921 + 4 * v4920);
      v4922 = *v4913;
      goto LABEL_2152;
    }
LABEL_2149:
    v4922 = *v4913;
    v4923 = *(_DWORD *)(v4921 + 4 * v4920);
    if (*v4913 >= v4923)
    {
LABEL_2152:
      v4942 = (__int128 *)(*(_QWORD *)(a1 + 5776) + 8 * v4919);
      v4943 = *(unsigned int *)(a2 + 16);
      v4944 = v4923 + v4943 * v4922;
      result = *(int64x2_t **)a2;
      v4945 = (_OWORD *)(*(_QWORD *)a2 + 8 * v4944);
      v4946 = *v4942;
      v4947 = v4942[2];
      v4948 = v4942[3];
      v4949 = v4942[4];
      v4950 = v4942[5];
      v4951 = v4942[6];
      v4952 = v4942[7];
      v4953 = v4942[8];
      v4945[1] = v4942[1];
      v4945[2] = v4947;
      *v4945 = v4946;
      v4954 = (_OWORD *)((char *)v4945 + 8 * v4943);
      v4954[1] = v4949;
      v4954[2] = v4950;
      *v4954 = v4948;
      v4955 = &v4945[v4943];
      v4955[1] = v4952;
      v4955[2] = v4953;
      *v4955 = v4951;
      goto LABEL_2153;
    }
    v4924 = *(_QWORD *)(a1 + 5776) + 8 * v4919;
    v4925 = *(unsigned int *)(a2 + 16);
    v4926 = *(_QWORD *)a2 + 8 * (v4922 + (_DWORD)v4925 * v4923);
    v4927 = *(int64x2_t *)(v4924 + 16);
    v4929 = *(int64x2_t *)(v4924 + 64);
    v4928 = *(int64x2_t *)(v4924 + 80);
    v4930 = *(int64x2_t *)(v4924 + 32);
    v4931 = *(int64x2_t *)(v4924 + 48);
    v4933 = *(_OWORD *)(v4924 + 112);
    v4932 = *(_OWORD *)(v4924 + 128);
    v4934 = *(_OWORD *)(v4924 + 96);
    v4935 = vzip1q_s64(*(int64x2_t *)v4924, v4931);
    v4936 = vzip2q_s64(*(int64x2_t *)v4924, v4931);
    *(_QWORD *)(v4926 + 16) = v4934;
    *(int64x2_t *)v4926 = v4935;
    v4937 = (int64x2_t *)(v4926 + 8 * v4925);
    *v4937 = v4936;
    v4937[1].i64[0] = *((_QWORD *)&v4934 + 1);
    v4938 = (int64x2_t *)(v4926 + 16 * v4925);
    v4938[1].i64[0] = v4933;
    *v4938 = vzip1q_s64(v4927, v4929);
    v4939 = (int64x2_t *)(v4926 + 24 * v4925);
    result = v4939 + 1;
    v4939[1].i64[0] = *((_QWORD *)&v4933 + 1);
    *v4939 = vzip2q_s64(v4927, v4929);
    v4940 = (int64x2_t *)(v4926 + 32 * v4925);
    v4940[1].i64[0] = v4932;
    *v4940 = vzip1q_s64(v4930, v4928);
    v4941 = (int64x2_t *)(v4926 + 40 * v4925);
    v4941[1].i64[0] = *((_QWORD *)&v4932 + 1);
    *v4941 = vzip2q_s64(v4930, v4928);
LABEL_2153:
    v4956 = v4916 + 1;
    while (v4956 != v4918)
    {
      ++v4917;
      v4957 = *v4956++;
      v4919 = v4957;
      if (v4957 != -1)
      {
        v4916 = v4956 - 1;
        v4920 = v4917;
        v4921 = *a3;
        if (v2040)
          goto LABEL_2149;
        goto LABEL_2151;
      }
    }
    v4911 = *(_DWORD *)(a1 + 5772);
LABEL_2143:
    ++v4912;
    ++v4913;
    if (v4912 < v4911)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2163:
  v4961 = *(_DWORD *)(a1 + 7212);
  if (!v4961)
    goto LABEL_2186;
  v4962 = 0;
  v4963 = a4[15];
  while (2)
  {
    v4964 = *(_QWORD *)(a1 + 7288);
    v4965 = *(_DWORD *)(a1 + 7312) * v4962;
    v4966 = (uint64_t *)(v4964 + 8 * v4965);
    result = (int64x2_t *)*(unsigned int *)(a1 + 7208);
    if ((_DWORD)result && *v4966 == -1)
    {
      v4967 = 0;
      v4988 = 8 * (result + v4965) - 8 * v4965 - 8;
      v4989 = v4964 + 8 * v4965;
      while (v4988)
      {
        v4966 = (uint64_t *)(v4989 + 8);
        ++v4967;
        v4990 = *(_QWORD *)(v4989 + 8);
        v4988 -= 8;
        v4989 += 8;
        if (v4990 != -1)
          goto LABEL_2170;
      }
      goto LABEL_2166;
    }
    v4967 = 0;
LABEL_2170:
    v4968 = (uint64_t *)(v4964 + 8 * (v4965 + result));
    if (v4966 == v4968)
      goto LABEL_2166;
    v4969 = *v4966;
    v4970 = v4967;
    v4971 = *a3;
    if (!v2040)
    {
LABEL_2174:
      v4973 = *(_DWORD *)(v4971 + 4 * v4970);
      v4972 = *v4963;
      goto LABEL_2175;
    }
LABEL_2172:
    v4972 = *v4963;
    v4973 = *(_DWORD *)(v4971 + 4 * v4970);
    if (*v4963 >= v4973)
    {
LABEL_2175:
      v4981 = (__int128 *)(*(_QWORD *)(a1 + 7216) + 8 * v4969);
      v4982 = v4973 + *(_DWORD *)(a2 + 16) * v4972;
      result = *(int64x2_t **)a2;
      v4983 = (_OWORD *)(*(_QWORD *)a2 + 8 * v4982);
      v4984 = v4981[2];
      v4985 = *v4981;
      v4983[1] = v4981[1];
      v4983[2] = v4984;
      *v4983 = v4985;
      goto LABEL_2176;
    }
    v4974 = *(_QWORD *)(a1 + 7216) + 8 * v4969;
    v4975 = *(unsigned int *)(a2 + 16);
    v4976 = v4972 + v4975 * v4973;
    result = *(int64x2_t **)a2;
    v4977 = (_QWORD *)(*(_QWORD *)a2 + 8 * v4976);
    v4979 = *(int8x16_t *)(v4974 + 16);
    v4978 = *(int8x16_t *)(v4974 + 32);
    v4980 = vextq_s8(*(int8x16_t *)v4974, *(int8x16_t *)v4974, 8uLL).u64[0];
    *v4977 = *(_QWORD *)v4974;
    v4977[v4975] = v4980;
    v4977[2 * v4975] = v4979.i64[0];
    v4977[3 * v4975] = vextq_s8(v4979, v4979, 8uLL).u64[0];
    v4977[4 * v4975] = v4978.i64[0];
    v4977[5 * v4975] = vextq_s8(v4978, v4978, 8uLL).u64[0];
LABEL_2176:
    v4986 = v4966 + 1;
    while (v4986 != v4968)
    {
      ++v4967;
      v4987 = *v4986++;
      v4969 = v4987;
      if (v4987 != -1)
      {
        v4966 = v4986 - 1;
        v4970 = v4967;
        v4971 = *a3;
        if (v2040)
          goto LABEL_2172;
        goto LABEL_2174;
      }
    }
    v4961 = *(_DWORD *)(a1 + 7212);
LABEL_2166:
    ++v4962;
    ++v4963;
    if (v4962 < v4961)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2186:
  v4991 = *(_DWORD *)(a1 + 8652);
  if (!v4991)
    goto LABEL_2209;
  v4992 = 0;
  v4993 = a4[18];
  while (2)
  {
    v4994 = *(_QWORD *)(a1 + 8728);
    v4995 = *(_DWORD *)(a1 + 8752) * v4992;
    v4996 = (uint64_t *)(v4994 + 8 * v4995);
    result = (int64x2_t *)*(unsigned int *)(a1 + 8648);
    if ((_DWORD)result && *v4996 == -1)
    {
      v4997 = 0;
      v5045 = 8 * (result + v4995) - 8 * v4995 - 8;
      v5046 = v4994 + 8 * v4995;
      while (v5045)
      {
        v4996 = (uint64_t *)(v5046 + 8);
        ++v4997;
        v5047 = *(_QWORD *)(v5046 + 8);
        v5045 -= 8;
        v5046 += 8;
        if (v5047 != -1)
          goto LABEL_2193;
      }
      goto LABEL_2189;
    }
    v4997 = 0;
LABEL_2193:
    v4998 = (uint64_t *)(v4994 + 8 * (v4995 + result));
    if (v4996 == v4998)
      goto LABEL_2189;
    v4999 = *v4996;
    v5000 = v4997;
    v5001 = *a3;
    if (!v2040)
    {
LABEL_2197:
      v5003 = *(_DWORD *)(v5001 + 4 * v5000);
      v5002 = *v4993;
      goto LABEL_2198;
    }
LABEL_2195:
    v5002 = *v4993;
    v5003 = *(_DWORD *)(v5001 + 4 * v5000);
    if (*v4993 >= v5003)
    {
LABEL_2198:
      v5025 = (__int128 *)(*(_QWORD *)(a1 + 8656) + 8 * v4999);
      v5026 = *(unsigned int *)(a2 + 16);
      v5027 = v5003 + v5026 * v5002;
      result = *(int64x2_t **)a2;
      v5028 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5027);
      v5029 = *v5025;
      v5030 = v5025[2];
      v5031 = v5025[3];
      v5032 = v5025[4];
      v5033 = v5025[5];
      v5034 = v5025[6];
      v5035 = v5025[7];
      v5036 = v5025[8];
      v5037 = v5025[9];
      v5038 = v5025[10];
      v5039 = v5025[11];
      v5028[1] = v5025[1];
      v5028[2] = v5030;
      *v5028 = v5029;
      v5040 = (_OWORD *)((char *)v5028 + 8 * v5026);
      v5040[1] = v5032;
      v5040[2] = v5033;
      *v5040 = v5031;
      v5041 = &v5028[v5026];
      v5041[1] = v5035;
      v5041[2] = v5036;
      *v5041 = v5034;
      v5042 = (_OWORD *)((char *)v5028 + 24 * v5026);
      v5042[1] = v5038;
      v5042[2] = v5039;
      *v5042 = v5037;
      goto LABEL_2199;
    }
    v5004 = *(_QWORD *)(a1 + 8656) + 8 * v4999;
    v5005 = *(unsigned int *)(a2 + 16);
    v5006 = v5002 + v5005 * v5003;
    result = *(int64x2_t **)a2;
    v5007 = (int64x2_t *)(*(_QWORD *)a2 + 8 * v5006);
    v5008 = *(int64x2_t *)(v5004 + 16);
    v5010 = *(int64x2_t *)(v5004 + 64);
    v5009 = *(int64x2_t *)(v5004 + 80);
    v5011 = *(int64x2_t *)(v5004 + 32);
    v5012 = *(int64x2_t *)(v5004 + 48);
    v5014 = *(int64x2_t *)(v5004 + 96);
    v5013 = *(int64x2_t *)(v5004 + 112);
    v5016 = *(int64x2_t *)(v5004 + 160);
    v5015 = *(int64x2_t *)(v5004 + 176);
    v5017 = *(int64x2_t *)(v5004 + 128);
    v5018 = *(int64x2_t *)(v5004 + 144);
    v5019 = vzip2q_s64(*(int64x2_t *)v5004, v5012);
    *v5007 = vzip1q_s64(*(int64x2_t *)v5004, v5012);
    v5007[1] = vzip1q_s64(v5014, v5018);
    v5020 = (int64x2_t *)((char *)v5007 + 8 * v5005);
    *v5020 = v5019;
    v5020[1] = vzip2q_s64(v5014, v5018);
    v5021 = &v5007[v5005];
    *v5021 = vzip1q_s64(v5008, v5010);
    v5021[1] = vzip1q_s64(v5013, v5016);
    v5022 = (int64x2_t *)((char *)v5007 + 24 * v5005);
    *v5022 = vzip2q_s64(v5008, v5010);
    v5022[1] = vzip2q_s64(v5013, v5016);
    v5023 = &v5007[2 * v5005];
    *v5023 = vzip1q_s64(v5011, v5009);
    v5023[1] = vzip1q_s64(v5017, v5015);
    v5024 = (int64x2_t *)((char *)v5007 + 40 * v5005);
    *v5024 = vzip2q_s64(v5011, v5009);
    v5024[1] = vzip2q_s64(v5017, v5015);
LABEL_2199:
    v5043 = v4996 + 1;
    while (v5043 != v4998)
    {
      ++v4997;
      v5044 = *v5043++;
      v4999 = v5044;
      if (v5044 != -1)
      {
        v4996 = v5043 - 1;
        v5000 = v4997;
        v5001 = *a3;
        if (v2040)
          goto LABEL_2195;
        goto LABEL_2197;
      }
    }
    v4991 = *(_DWORD *)(a1 + 8652);
LABEL_2189:
    ++v4992;
    ++v4993;
    if (v4992 < v4991)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2209:
  v5048 = *(_DWORD *)(a1 + 10092);
  if (!v5048)
    goto LABEL_2232;
  v5049 = 0;
  v5050 = a4[21];
  while (2)
  {
    v5051 = *(_QWORD *)(a1 + 10168);
    v5052 = *(_DWORD *)(a1 + 10192) * v5049;
    v5053 = (uint64_t *)(v5051 + 8 * v5052);
    result = (int64x2_t *)*(unsigned int *)(a1 + 10088);
    if ((_DWORD)result && *v5053 == -1)
    {
      v5054 = 0;
      v5102 = 8 * (result + v5052) - 8 * v5052 - 8;
      v5103 = v5051 + 8 * v5052;
      while (v5102)
      {
        v5053 = (uint64_t *)(v5103 + 8);
        ++v5054;
        v5104 = *(_QWORD *)(v5103 + 8);
        v5102 -= 8;
        v5103 += 8;
        if (v5104 != -1)
          goto LABEL_2216;
      }
      goto LABEL_2212;
    }
    v5054 = 0;
LABEL_2216:
    v5055 = (uint64_t *)(v5051 + 8 * (v5052 + result));
    if (v5053 == v5055)
      goto LABEL_2212;
    v5056 = *v5053;
    v5057 = v5054;
    v5058 = *a3;
    if (!v2040)
    {
LABEL_2220:
      v5060 = *(_DWORD *)(v5058 + 4 * v5057);
      v5059 = *v5050;
      goto LABEL_2221;
    }
LABEL_2218:
    v5059 = *v5050;
    v5060 = *(_DWORD *)(v5058 + 4 * v5057);
    if (*v5050 >= v5060)
    {
LABEL_2221:
      v5082 = (__int128 *)(*(_QWORD *)(a1 + 10096) + 8 * v5056);
      v5083 = *(unsigned int *)(a2 + 16);
      v5084 = v5060 + v5083 * v5059;
      result = *(int64x2_t **)a2;
      v5085 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5084);
      v5086 = *v5082;
      v5087 = v5082[2];
      v5088 = v5082[3];
      v5089 = v5082[4];
      v5090 = v5082[5];
      v5091 = v5082[6];
      v5092 = v5082[7];
      v5093 = v5082[8];
      v5094 = v5082[9];
      v5095 = v5082[10];
      v5096 = v5082[11];
      v5085[1] = v5082[1];
      v5085[2] = v5087;
      *v5085 = v5086;
      v5097 = (_OWORD *)((char *)v5085 + 8 * v5083);
      v5097[1] = v5089;
      v5097[2] = v5090;
      *v5097 = v5088;
      v5098 = &v5085[v5083];
      v5098[1] = v5092;
      v5098[2] = v5093;
      *v5098 = v5091;
      v5099 = (_OWORD *)((char *)v5085 + 24 * v5083);
      v5099[1] = v5095;
      v5099[2] = v5096;
      *v5099 = v5094;
      goto LABEL_2222;
    }
    v5061 = *(_QWORD *)(a1 + 10096) + 8 * v5056;
    v5062 = *(unsigned int *)(a2 + 16);
    v5063 = v5059 + v5062 * v5060;
    result = *(int64x2_t **)a2;
    v5064 = (int64x2_t *)(*(_QWORD *)a2 + 8 * v5063);
    v5065 = *(int64x2_t *)(v5061 + 16);
    v5067 = *(int64x2_t *)(v5061 + 64);
    v5066 = *(int64x2_t *)(v5061 + 80);
    v5068 = *(int64x2_t *)(v5061 + 32);
    v5069 = *(int64x2_t *)(v5061 + 48);
    v5071 = *(int64x2_t *)(v5061 + 96);
    v5070 = *(int64x2_t *)(v5061 + 112);
    v5073 = *(int64x2_t *)(v5061 + 160);
    v5072 = *(int64x2_t *)(v5061 + 176);
    v5074 = *(int64x2_t *)(v5061 + 128);
    v5075 = *(int64x2_t *)(v5061 + 144);
    v5076 = vzip2q_s64(*(int64x2_t *)v5061, v5069);
    *v5064 = vzip1q_s64(*(int64x2_t *)v5061, v5069);
    v5064[1] = vzip1q_s64(v5071, v5075);
    v5077 = (int64x2_t *)((char *)v5064 + 8 * v5062);
    *v5077 = v5076;
    v5077[1] = vzip2q_s64(v5071, v5075);
    v5078 = &v5064[v5062];
    *v5078 = vzip1q_s64(v5065, v5067);
    v5078[1] = vzip1q_s64(v5070, v5073);
    v5079 = (int64x2_t *)((char *)v5064 + 24 * v5062);
    *v5079 = vzip2q_s64(v5065, v5067);
    v5079[1] = vzip2q_s64(v5070, v5073);
    v5080 = &v5064[2 * v5062];
    *v5080 = vzip1q_s64(v5068, v5066);
    v5080[1] = vzip1q_s64(v5074, v5072);
    v5081 = (int64x2_t *)((char *)v5064 + 40 * v5062);
    *v5081 = vzip2q_s64(v5068, v5066);
    v5081[1] = vzip2q_s64(v5074, v5072);
LABEL_2222:
    v5100 = v5053 + 1;
    while (v5100 != v5055)
    {
      ++v5054;
      v5101 = *v5100++;
      v5056 = v5101;
      if (v5101 != -1)
      {
        v5053 = v5100 - 1;
        v5057 = v5054;
        v5058 = *a3;
        if (v2040)
          goto LABEL_2218;
        goto LABEL_2220;
      }
    }
    v5048 = *(_DWORD *)(a1 + 10092);
LABEL_2212:
    ++v5049;
    ++v5050;
    if (v5049 < v5048)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2232:
  v5105 = *(_DWORD *)(a1 + 11532);
  if (!v5105)
    goto LABEL_2255;
  v5106 = 0;
  v5107 = a4[24];
  while (2)
  {
    v5108 = *(_QWORD *)(a1 + 11608);
    v5109 = *(_DWORD *)(a1 + 11632) * v5106;
    v5110 = (uint64_t *)(v5108 + 8 * v5109);
    result = (int64x2_t *)*(unsigned int *)(a1 + 11528);
    if ((_DWORD)result && *v5110 == -1)
    {
      v5111 = 0;
      v5152 = 8 * (result + v5109) - 8 * v5109 - 8;
      v5153 = v5108 + 8 * v5109;
      while (v5152)
      {
        v5110 = (uint64_t *)(v5153 + 8);
        ++v5111;
        v5154 = *(_QWORD *)(v5153 + 8);
        v5152 -= 8;
        v5153 += 8;
        if (v5154 != -1)
          goto LABEL_2239;
      }
      goto LABEL_2235;
    }
    v5111 = 0;
LABEL_2239:
    v5112 = (uint64_t *)(v5108 + 8 * (v5109 + result));
    if (v5110 == v5112)
      goto LABEL_2235;
    v5113 = *v5110;
    v5114 = v5111;
    v5115 = *a3;
    if (!v2040)
    {
LABEL_2243:
      v5117 = *(_DWORD *)(v5115 + 4 * v5114);
      v5116 = *v5107;
      goto LABEL_2244;
    }
LABEL_2241:
    v5116 = *v5107;
    v5117 = *(_DWORD *)(v5115 + 4 * v5114);
    if (*v5107 >= v5117)
    {
LABEL_2244:
      v5136 = (__int128 *)(*(_QWORD *)(a1 + 11536) + 8 * v5113);
      v5137 = *(unsigned int *)(a2 + 16);
      v5138 = v5117 + v5137 * v5116;
      result = *(int64x2_t **)a2;
      v5139 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5138);
      v5140 = *v5136;
      v5141 = v5136[2];
      v5142 = v5136[3];
      v5143 = v5136[4];
      v5144 = v5136[5];
      v5145 = v5136[6];
      v5146 = v5136[7];
      v5147 = v5136[8];
      v5139[1] = v5136[1];
      v5139[2] = v5141;
      *v5139 = v5140;
      v5148 = (_OWORD *)((char *)v5139 + 8 * v5137);
      v5148[1] = v5143;
      v5148[2] = v5144;
      *v5148 = v5142;
      v5149 = &v5139[v5137];
      v5149[1] = v5146;
      v5149[2] = v5147;
      *v5149 = v5145;
      goto LABEL_2245;
    }
    v5118 = *(_QWORD *)(a1 + 11536) + 8 * v5113;
    v5119 = *(unsigned int *)(a2 + 16);
    v5120 = *(_QWORD *)a2 + 8 * (v5116 + (_DWORD)v5119 * v5117);
    v5121 = *(int64x2_t *)(v5118 + 16);
    v5123 = *(int64x2_t *)(v5118 + 64);
    v5122 = *(int64x2_t *)(v5118 + 80);
    v5124 = *(int64x2_t *)(v5118 + 32);
    v5125 = *(int64x2_t *)(v5118 + 48);
    v5127 = *(_OWORD *)(v5118 + 112);
    v5126 = *(_OWORD *)(v5118 + 128);
    v5128 = *(_OWORD *)(v5118 + 96);
    v5129 = vzip1q_s64(*(int64x2_t *)v5118, v5125);
    v5130 = vzip2q_s64(*(int64x2_t *)v5118, v5125);
    *(_QWORD *)(v5120 + 16) = v5128;
    *(int64x2_t *)v5120 = v5129;
    v5131 = (int64x2_t *)(v5120 + 8 * v5119);
    *v5131 = v5130;
    v5131[1].i64[0] = *((_QWORD *)&v5128 + 1);
    v5132 = (int64x2_t *)(v5120 + 16 * v5119);
    v5132[1].i64[0] = v5127;
    *v5132 = vzip1q_s64(v5121, v5123);
    v5133 = (int64x2_t *)(v5120 + 24 * v5119);
    result = v5133 + 1;
    v5133[1].i64[0] = *((_QWORD *)&v5127 + 1);
    *v5133 = vzip2q_s64(v5121, v5123);
    v5134 = (int64x2_t *)(v5120 + 32 * v5119);
    v5134[1].i64[0] = v5126;
    *v5134 = vzip1q_s64(v5124, v5122);
    v5135 = (int64x2_t *)(v5120 + 40 * v5119);
    v5135[1].i64[0] = *((_QWORD *)&v5126 + 1);
    *v5135 = vzip2q_s64(v5124, v5122);
LABEL_2245:
    v5150 = v5110 + 1;
    while (v5150 != v5112)
    {
      ++v5111;
      v5151 = *v5150++;
      v5113 = v5151;
      if (v5151 != -1)
      {
        v5110 = v5150 - 1;
        v5114 = v5111;
        v5115 = *a3;
        if (v2040)
          goto LABEL_2241;
        goto LABEL_2243;
      }
    }
    v5105 = *(_DWORD *)(a1 + 11532);
LABEL_2235:
    ++v5106;
    ++v5107;
    if (v5106 < v5105)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2255:
  v5155 = *(_DWORD *)(a1 + 12972);
  if (v5155)
  {
    v5156 = 0;
    for (i = a4[27]; ; ++i)
    {
      v5158 = *(_QWORD *)(a1 + 13048);
      v5159 = *(_DWORD *)(a1 + 13072) * v5156;
      v5160 = (uint64_t *)(v5158 + 8 * v5159);
      result = (int64x2_t *)*(unsigned int *)(a1 + 12968);
      if ((_DWORD)result && *v5160 == -1)
      {
        v5161 = 0;
        v5202 = 8 * (result + v5159) - 8 * v5159 - 8;
        v5203 = v5158 + 8 * v5159;
        while (v5202)
        {
          v5160 = (uint64_t *)(v5203 + 8);
          ++v5161;
          v5204 = *(_QWORD *)(v5203 + 8);
          v5202 -= 8;
          v5203 += 8;
          if (v5204 != -1)
            goto LABEL_2262;
        }
        goto LABEL_2258;
      }
      v5161 = 0;
LABEL_2262:
      v5162 = (uint64_t *)(v5158 + 8 * (v5159 + result));
      if (v5160 != v5162)
        break;
LABEL_2258:
      if (++v5156 >= v5155)
        return result;
    }
    v5163 = *v5160;
    v5164 = v5161;
    v5165 = *a3;
    if (v2040)
    {
LABEL_2264:
      v5166 = *i;
      v5167 = *(_DWORD *)(v5165 + 4 * v5164);
      if (*i < v5167)
      {
        v5168 = *(_QWORD *)(a1 + 12976) + 8 * v5163;
        v5169 = *(unsigned int *)(a2 + 16);
        v5170 = *(_QWORD *)a2 + 8 * (v5166 + (_DWORD)v5169 * v5167);
        v5171 = *(int64x2_t *)(v5168 + 16);
        v5173 = *(int64x2_t *)(v5168 + 64);
        v5172 = *(int64x2_t *)(v5168 + 80);
        v5174 = *(int64x2_t *)(v5168 + 32);
        v5175 = *(int64x2_t *)(v5168 + 48);
        v5177 = *(_OWORD *)(v5168 + 112);
        v5176 = *(_OWORD *)(v5168 + 128);
        v5178 = *(_OWORD *)(v5168 + 96);
        v5179 = vzip1q_s64(*(int64x2_t *)v5168, v5175);
        v5180 = vzip2q_s64(*(int64x2_t *)v5168, v5175);
        *(_QWORD *)(v5170 + 16) = v5178;
        *(int64x2_t *)v5170 = v5179;
        v5181 = (int64x2_t *)(v5170 + 8 * v5169);
        *v5181 = v5180;
        v5181[1].i64[0] = *((_QWORD *)&v5178 + 1);
        v5182 = (int64x2_t *)(v5170 + 16 * v5169);
        v5182[1].i64[0] = v5177;
        *v5182 = vzip1q_s64(v5171, v5173);
        v5183 = (int64x2_t *)(v5170 + 24 * v5169);
        result = v5183 + 1;
        v5183[1].i64[0] = *((_QWORD *)&v5177 + 1);
        *v5183 = vzip2q_s64(v5171, v5173);
        v5184 = (int64x2_t *)(v5170 + 32 * v5169);
        v5184[1].i64[0] = v5176;
        *v5184 = vzip1q_s64(v5174, v5172);
        v5185 = (int64x2_t *)(v5170 + 40 * v5169);
        v5185[1].i64[0] = *((_QWORD *)&v5176 + 1);
        *v5185 = vzip2q_s64(v5174, v5172);
        goto LABEL_2268;
      }
    }
    else
    {
LABEL_2266:
      v5167 = *(_DWORD *)(v5165 + 4 * v5164);
      v5166 = *i;
    }
    v5186 = (__int128 *)(*(_QWORD *)(a1 + 12976) + 8 * v5163);
    v5187 = *(unsigned int *)(a2 + 16);
    v5188 = v5167 + v5187 * v5166;
    result = *(int64x2_t **)a2;
    v5189 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5188);
    v5190 = *v5186;
    v5191 = v5186[2];
    v5192 = v5186[3];
    v5193 = v5186[4];
    v5194 = v5186[5];
    v5195 = v5186[6];
    v5196 = v5186[7];
    v5197 = v5186[8];
    v5189[1] = v5186[1];
    v5189[2] = v5191;
    *v5189 = v5190;
    v5198 = (_OWORD *)((char *)v5189 + 8 * v5187);
    v5198[1] = v5193;
    v5198[2] = v5194;
    *v5198 = v5192;
    v5199 = &v5189[v5187];
    v5199[1] = v5196;
    v5199[2] = v5197;
    *v5199 = v5195;
LABEL_2268:
    v5200 = v5160 + 1;
    while (v5200 != v5162)
    {
      ++v5161;
      v5201 = *v5200++;
      v5163 = v5201;
      if (v5201 != -1)
      {
        v5160 = v5200 - 1;
        v5164 = v5161;
        v5165 = *a3;
        if (v2040)
          goto LABEL_2264;
        goto LABEL_2266;
      }
    }
    v5155 = *(_DWORD *)(a1 + 12972);
    goto LABEL_2258;
  }
  return result;
}

uint64_t sub_20F9CA990(uint64_t result, uint64_t a2, _QWORD *a3, unsigned int *a4, char a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    v6 = 0;
    if ((a5 & 1) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(result + 88);
        v8 = *(_DWORD *)(result + 112) * v6;
        v9 = (uint64_t *)(v7 + 8 * v8);
        v10 = *(_DWORD *)(result + 8);
        if (v10 && *v9 == -1)
        {
          v11 = 0;
          v18 = 8 * (v10 + v8) - 8 * v8 - 8;
          v19 = v7 + 8 * v8;
          while (v18)
          {
            v9 = (uint64_t *)(v19 + 8);
            ++v11;
            v20 = *(_QWORD *)(v19 + 8);
            v18 -= 8;
            v19 += 8;
            if (v20 != -1)
              goto LABEL_9;
          }
        }
        else
        {
          v11 = 0;
LABEL_9:
          v12 = (uint64_t *)(v7 + 8 * (v8 + v10));
          if (v9 != v12)
          {
            v13 = *v9;
LABEL_11:
            v14 = *(_DWORD *)(*a3 + 4 * v11);
            if (*a4 <= v14)
              v15 = *(_DWORD *)(*a3 + 4 * v11);
            else
              v15 = *a4;
            if (*a4 < v14)
              v14 = *a4;
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v14 + *(_DWORD *)(a2 + 16) * v15)) = *(_QWORD *)(*(_QWORD *)(result + 16)
                                                                                              + 8 * v13);
            v16 = v9 + 1;
            while (v16 != v12)
            {
              ++v11;
              v17 = *v16++;
              v13 = v17;
              if (v17 != -1)
              {
                v9 = v16 - 1;
                goto LABEL_11;
              }
            }
            v5 = *(_DWORD *)(result + 12);
          }
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
    else
    {
      do
      {
        v21 = *(_QWORD *)(result + 88);
        v22 = *(_DWORD *)(result + 112) * v6;
        v23 = (uint64_t *)(v21 + 8 * v22);
        v24 = *(_DWORD *)(result + 8);
        if (v24 && *v23 == -1)
        {
          v25 = 0;
          v30 = 8 * (v24 + v22) - 8 * v22 - 8;
          v31 = v21 + 8 * v22;
          while (v30)
          {
            v23 = (uint64_t *)(v31 + 8);
            ++v25;
            v32 = *(_QWORD *)(v31 + 8);
            v30 -= 8;
            v31 += 8;
            if (v32 != -1)
              goto LABEL_29;
          }
        }
        else
        {
          v25 = 0;
LABEL_29:
          v26 = (uint64_t *)(v21 + 8 * (v22 + v24));
          if (v23 != v26)
          {
            v27 = *v23;
LABEL_31:
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(*a3 + 4 * v25) + *(_DWORD *)(a2 + 16) * *a4)) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v27);
            v28 = v23 + 1;
            while (v28 != v26)
            {
              ++v25;
              v29 = *v28++;
              v27 = v29;
              if (v29 != -1)
              {
                v23 = v28 - 1;
                goto LABEL_31;
              }
            }
            v5 = *(_DWORD *)(result + 12);
          }
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_20F9CAB5C(uint64_t result, uint64_t *a2, _QWORD *a3, unsigned int **a4, unsigned __int8 *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int8 *v33;
  int64x2_t *v34;
  __int8 *v35;
  int64x2_t *v36;
  __int8 *v37;
  int64x2_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t *v72;
  __int128 v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  __int8 *v89;
  int64x2_t *v90;
  __int8 *v91;
  int64x2_t *v92;
  __int8 *v93;
  int64x2_t *v94;
  __int8 *v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  uint64_t v109;
  __int128 v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t *v113;
  int64x2_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  int v126;
  unsigned int v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t v135;
  int64x2_t *v136;
  __int128 v137;
  uint64_t v138;
  int64x2_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  int64x2_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int8 *v147;
  int64x2_t *v148;
  __int8 *v149;
  int64x2_t *v150;
  __int8 *v151;
  int64x2_t *v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t *v163;
  int64x2_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t *v175;
  int v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64x2_t v185;
  int64x2_t *v186;
  __int128 v187;
  uint64_t v188;
  int64x2_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  int64x2_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  __int8 *v197;
  int64x2_t *v198;
  __int8 *v199;
  int64x2_t *v200;
  __int8 *v201;
  int64x2_t *v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t *v213;
  int64x2_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int *v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t *v225;
  int v226;
  unsigned int v227;
  uint64_t *v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int64x2_t *v236;
  int64x2_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  int8x16_t v241;
  unint64_t v242;
  __int8 *v243;
  int64x2_t *v244;
  int64x2_t v245;
  __int128 v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t *v261;
  int v262;
  unsigned int v263;
  uint64_t *v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int8x16_t v271;
  uint64_t v272;
  unint64_t v273;
  int8x16_t *v274;
  _QWORD *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int *v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t *v286;
  int v287;
  unsigned int v288;
  uint64_t *v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int64x2_t v296;
  int64x2_t *v297;
  __int128 v298;
  uint64_t v299;
  int64x2_t v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  __int8 *v304;
  int64x2_t *v305;
  __int8 *v306;
  int64x2_t *v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t *v315;
  int64x2_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int *v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t *v327;
  int v328;
  unsigned int v329;
  uint64_t *v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int64x2_t v337;
  int64x2_t *v338;
  __int128 v339;
  uint64_t v340;
  int64x2_t v341;
  uint64_t v342;
  __int128 v343;
  uint64_t v344;
  __int8 *v345;
  int64x2_t *v346;
  __int8 *v347;
  int64x2_t *v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t *v356;
  int64x2_t *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int *v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t *v368;
  int v369;
  unsigned int v370;
  uint64_t *v371;
  uint64_t v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int64x2_t *v379;
  int64x2_t v380;
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  int8x16_t v384;
  unint64_t v385;
  __int8 *v386;
  int64x2_t *v387;
  int64x2_t v388;
  __int128 v389;
  int64x2_t v390;
  int64x2_t v391;
  int64x2_t *v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int *v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t *v404;
  int v405;
  unsigned int v406;
  uint64_t *v407;
  uint64_t v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int64x2_t *v415;
  int64x2_t v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  int8x16_t v420;
  unint64_t v421;
  __int8 *v422;
  int64x2_t *v423;
  int64x2_t v424;
  __int128 v425;
  int64x2_t v426;
  int64x2_t v427;
  int64x2_t *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t *v440;
  int v441;
  unsigned int v442;
  uint64_t *v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int64x2_t v450;
  int64x2_t *v451;
  __int128 v452;
  uint64_t v453;
  int64x2_t v454;
  uint64_t v455;
  __int128 v456;
  uint64_t v457;
  int64x2_t v458;
  uint64_t v459;
  __int128 v460;
  uint64_t v461;
  __int8 *v462;
  int64x2_t *v463;
  __int8 *v464;
  int64x2_t *v465;
  __int8 *v466;
  int64x2_t *v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  int64x2_t v472;
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  int64x2_t *v478;
  int64x2_t *v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int *v487;
  uint64_t v488;
  unsigned int v489;
  uint64_t *v490;
  int v491;
  unsigned int v492;
  uint64_t *v493;
  uint64_t v494;
  unsigned int v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int64x2_t v500;
  int64x2_t *v501;
  __int128 v502;
  uint64_t v503;
  int64x2_t v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  int64x2_t v508;
  uint64_t v509;
  __int128 v510;
  uint64_t v511;
  int64x2_t v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  int64x2_t v516;
  uint64_t v517;
  __int8 *v518;
  int64x2_t *v519;
  __int8 *v520;
  int64x2_t *v521;
  __int8 *v522;
  int64x2_t *v523;
  __int8 *v524;
  int64x2_t *v525;
  int64x2_t v526;
  int64x2_t *v527;
  int64x2_t v528;
  int64x2_t v529;
  int64x2_t v530;
  int64x2_t v531;
  int64x2_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int64x2_t v537;
  uint64_t v538;
  __int128 v539;
  int64x2_t v540;
  int64x2_t v541;
  int64x2_t *v542;
  int64x2_t *v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int *v551;
  uint64_t v552;
  unsigned int v553;
  uint64_t *v554;
  int v555;
  unsigned int v556;
  uint64_t *v557;
  uint64_t v558;
  unsigned int v559;
  unsigned int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int64x2_t v564;
  int64x2_t *v565;
  __int128 v566;
  uint64_t v567;
  int64x2_t v568;
  uint64_t v569;
  __int128 v570;
  uint64_t v571;
  int64x2_t v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  __int8 *v576;
  int64x2_t *v577;
  __int8 *v578;
  int64x2_t *v579;
  __int8 *v580;
  int64x2_t *v581;
  int64x2_t v582;
  int64x2_t v583;
  int64x2_t v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t *v592;
  int64x2_t *v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int *v601;
  uint64_t v602;
  unsigned int v603;
  uint64_t *v604;
  int v605;
  unsigned int v606;
  uint64_t *v607;
  uint64_t v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int64x2_t v614;
  int64x2_t *v615;
  __int128 v616;
  uint64_t v617;
  int64x2_t v618;
  uint64_t v619;
  __int128 v620;
  uint64_t v621;
  int64x2_t v622;
  uint64_t v623;
  __int128 v624;
  uint64_t v625;
  __int8 *v626;
  int64x2_t *v627;
  __int8 *v628;
  int64x2_t *v629;
  __int8 *v630;
  int64x2_t *v631;
  int64x2_t v632;
  int64x2_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  int64x2_t v639;
  int64x2_t v640;
  int64x2_t v641;
  int64x2_t *v642;
  int64x2_t *v643;
  uint64_t *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int *v651;
  uint64_t v652;
  unsigned int v653;
  uint64_t *v654;
  int v655;
  unsigned int v656;
  uint64_t *v657;
  uint64_t v658;
  unsigned int v659;
  unsigned int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int64x2_t *v665;
  int64x2_t v666;
  __int128 v667;
  uint64_t v668;
  uint64_t v669;
  int8x16_t v670;
  unint64_t v671;
  __int8 *v672;
  int64x2_t *v673;
  int64x2_t v674;
  __int128 v675;
  int64x2_t v676;
  int64x2_t v677;
  int64x2_t *v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unsigned int v685;
  unsigned int v686;
  unsigned int *v687;
  uint64_t v688;
  unsigned int v689;
  uint64_t *v690;
  int v691;
  unsigned int v692;
  uint64_t *v693;
  uint64_t v694;
  unsigned int v695;
  unsigned int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int8x16_t v700;
  uint64_t v701;
  unint64_t v702;
  int8x16_t *v703;
  _QWORD *v704;
  uint64_t *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int *v712;
  uint64_t v713;
  unsigned int v714;
  uint64_t *v715;
  int v716;
  unsigned int v717;
  uint64_t *v718;
  uint64_t v719;
  unsigned int v720;
  unsigned int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int64x2_t v725;
  int64x2_t *v726;
  __int128 v727;
  uint64_t v728;
  int64x2_t v729;
  uint64_t v730;
  __int128 v731;
  uint64_t v732;
  __int8 *v733;
  int64x2_t *v734;
  __int8 *v735;
  int64x2_t *v736;
  int64x2_t v737;
  int64x2_t v738;
  int64x2_t v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  int64x2_t v743;
  int64x2_t *v744;
  int64x2_t *v745;
  uint64_t *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unsigned int v751;
  unsigned int v752;
  unsigned int *v753;
  uint64_t v754;
  unsigned int v755;
  uint64_t *v756;
  int v757;
  unsigned int v758;
  uint64_t *v759;
  uint64_t v760;
  unsigned int v761;
  unsigned int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  int64x2_t v766;
  int64x2_t *v767;
  __int128 v768;
  uint64_t v769;
  int64x2_t v770;
  uint64_t v771;
  __int128 v772;
  uint64_t v773;
  __int8 *v774;
  int64x2_t *v775;
  __int8 *v776;
  int64x2_t *v777;
  int64x2_t v778;
  int64x2_t v779;
  int64x2_t v780;
  int64x2_t v781;
  int64x2_t v782;
  int64x2_t v783;
  int64x2_t v784;
  int64x2_t *v785;
  int64x2_t *v786;
  uint64_t *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unsigned int v792;
  unsigned int v793;
  unsigned int *v794;
  uint64_t v795;
  unsigned int v796;
  uint64_t *v797;
  int v798;
  unsigned int v799;
  uint64_t *v800;
  uint64_t v801;
  unsigned int v802;
  unsigned int v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  int64x2_t *v808;
  int64x2_t v809;
  __int128 v810;
  uint64_t v811;
  uint64_t v812;
  int8x16_t v813;
  unint64_t v814;
  __int8 *v815;
  int64x2_t *v816;
  int64x2_t v817;
  __int128 v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t *v821;
  uint64_t v822;
  uint64_t *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned int v828;
  unsigned int v829;
  unsigned int *v830;
  uint64_t v831;
  unsigned int v832;
  uint64_t *v833;
  int v834;
  unsigned int v835;
  uint64_t *v836;
  uint64_t v837;
  unsigned int v838;
  unsigned int v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int64x2_t *v844;
  int64x2_t v845;
  __int128 v846;
  uint64_t v847;
  uint64_t v848;
  int8x16_t v849;
  unint64_t v850;
  __int8 *v851;
  int64x2_t *v852;
  int64x2_t v853;
  __int128 v854;
  int64x2_t v855;
  int64x2_t v856;
  int64x2_t *v857;
  uint64_t v858;
  uint64_t *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unsigned int v864;
  unsigned int v865;
  unsigned int *v866;
  uint64_t v867;
  unsigned int v868;
  uint64_t *v869;
  int v870;
  unsigned int v871;
  uint64_t *v872;
  uint64_t v873;
  unsigned int v874;
  unsigned int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  __int128 v879;
  _OWORD *v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  _OWORD *v891;
  _OWORD *v892;
  _OWORD *v893;
  _OWORD *v894;
  _OWORD *v895;
  int64x2_t *v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t v902;
  int64x2_t v903;
  int64x2_t v904;
  int64x2_t v905;
  int64x2_t v906;
  int64x2_t v907;
  int64x2_t v908;
  int64x2_t v909;
  int64x2_t v910;
  int64x2_t v911;
  int64x2_t *v912;
  int64x2_t *v913;
  int64x2_t *v914;
  uint64_t *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  unsigned int v920;
  unsigned int v921;
  unsigned int *v922;
  uint64_t v923;
  unsigned int v924;
  uint64_t *v925;
  int v926;
  unsigned int v927;
  uint64_t *v928;
  uint64_t v929;
  unsigned int v930;
  unsigned int v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  __int128 v935;
  _OWORD *v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  _OWORD *v953;
  _OWORD *v954;
  _OWORD *v955;
  _OWORD *v956;
  _OWORD *v957;
  _OWORD *v958;
  _OWORD *v959;
  _OWORD *v960;
  int64x2_t v961;
  int64x2_t *v962;
  int64x2_t v963;
  int64x2_t v964;
  int64x2_t v965;
  int64x2_t v966;
  int64x2_t v967;
  int64x2_t v968;
  int64x2_t v969;
  int64x2_t v970;
  __int128 v971;
  __int128 v972;
  int64x2_t v973;
  int64x2_t v974;
  int64x2_t v975;
  int64x2_t v976;
  int64x2_t v977;
  int64x2_t v978;
  int64x2_t v979;
  int64x2_t v980;
  int64x2_t v981;
  int64x2_t *v982;
  int64x2_t *v983;
  int64x2_t *v984;
  uint64_t *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unsigned int v990;
  unsigned int v991;
  unsigned int *v992;
  uint64_t v993;
  unsigned int v994;
  uint64_t *v995;
  int v996;
  unsigned int v997;
  uint64_t *v998;
  uint64_t v999;
  unsigned int v1000;
  unsigned int v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  __int128 v1005;
  _OWORD *v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  _OWORD *v1017;
  _OWORD *v1018;
  _OWORD *v1019;
  _OWORD *v1020;
  _OWORD *v1021;
  int64x2_t *v1022;
  int64x2_t v1023;
  int64x2_t v1024;
  int64x2_t v1025;
  int64x2_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  int64x2_t v1030;
  int64x2_t v1031;
  int64x2_t v1032;
  int64x2_t v1033;
  int64x2_t v1034;
  int64x2_t v1035;
  int64x2_t v1036;
  int64x2_t v1037;
  int64x2_t *v1038;
  int64x2_t *v1039;
  int64x2_t *v1040;
  uint64_t *v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  unsigned int v1046;
  unsigned int v1047;
  unsigned int *v1048;
  uint64_t v1049;
  unsigned int v1050;
  uint64_t *v1051;
  int v1052;
  unsigned int v1053;
  uint64_t *v1054;
  uint64_t v1055;
  unsigned int v1056;
  unsigned int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  __int128 v1061;
  _OWORD *v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  _OWORD *v1073;
  _OWORD *v1074;
  _OWORD *v1075;
  _OWORD *v1076;
  _OWORD *v1077;
  int64x2_t *v1078;
  int64x2_t v1079;
  int64x2_t v1080;
  int64x2_t v1081;
  int64x2_t v1082;
  int64x2_t v1083;
  int64x2_t v1084;
  int64x2_t v1085;
  int64x2_t v1086;
  int64x2_t v1087;
  int64x2_t v1088;
  int64x2_t v1089;
  int64x2_t v1090;
  int64x2_t v1091;
  int64x2_t v1092;
  int64x2_t v1093;
  int64x2_t *v1094;
  int64x2_t *v1095;
  int64x2_t *v1096;
  uint64_t *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unsigned int v1102;
  unsigned int v1103;
  unsigned int *v1104;
  uint64_t v1105;
  unsigned int v1106;
  uint64_t *v1107;
  int v1108;
  unsigned int v1109;
  uint64_t *v1110;
  uint64_t v1111;
  unsigned int v1112;
  unsigned int v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  __int128 v1117;
  _OWORD *v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  _OWORD *v1123;
  _OWORD *v1124;
  int64x2_t *v1125;
  int64x2_t v1126;
  int64x2_t v1127;
  int64x2_t v1128;
  __int128 v1129;
  __int128 v1130;
  int64x2_t v1131;
  int64x2_t v1132;
  int64x2_t *v1133;
  int64x2_t *v1134;
  int64x2_t *v1135;
  uint64_t *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unsigned int v1141;
  unsigned int v1142;
  unsigned int *v1143;
  uint64_t v1144;
  unsigned int v1145;
  uint64_t *v1146;
  int v1147;
  unsigned int v1148;
  uint64_t *v1149;
  uint64_t v1150;
  unsigned int v1151;
  unsigned int v1152;
  int8x16_t *v1153;
  uint64_t v1154;
  uint64_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t *v1158;
  _QWORD *v1159;
  uint64_t *v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  unsigned int v1165;
  unsigned int v1166;
  unsigned int *v1167;
  uint64_t v1168;
  unsigned int v1169;
  uint64_t *v1170;
  int v1171;
  unsigned int v1172;
  uint64_t *v1173;
  uint64_t v1174;
  unsigned int v1175;
  unsigned int v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  int64x2_t v1180;
  int64x2_t *v1181;
  __int128 v1182;
  __int128 v1183;
  int64x2_t v1184;
  int64x2_t v1185;
  int64x2_t v1186;
  int64x2_t v1187;
  __int8 *v1188;
  int64x2_t v1189;
  int64x2_t v1190;
  int64x2_t v1191;
  int64x2_t v1192;
  int64x2_t v1193;
  int64x2_t v1194;
  int64x2_t v1195;
  int64x2_t v1196;
  int64x2_t *v1197;
  int64x2_t *v1198;
  int64x2_t *v1199;
  uint64_t *v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unsigned int v1205;
  unsigned int v1206;
  unsigned int *v1207;
  uint64_t v1208;
  unsigned int v1209;
  uint64_t *v1210;
  int v1211;
  unsigned int v1212;
  uint64_t *v1213;
  uint64_t v1214;
  unsigned int v1215;
  unsigned int v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  int64x2_t v1220;
  int64x2_t *v1221;
  __int128 v1222;
  __int128 v1223;
  int64x2_t v1224;
  int64x2_t v1225;
  int64x2_t v1226;
  int64x2_t v1227;
  __int8 *v1228;
  int64x2_t v1229;
  int64x2_t v1230;
  int64x2_t v1231;
  int64x2_t v1232;
  int64x2_t v1233;
  int64x2_t v1234;
  int64x2_t v1235;
  int64x2_t v1236;
  int64x2_t *v1237;
  int64x2_t *v1238;
  int64x2_t *v1239;
  uint64_t *v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  unsigned int v1245;
  unsigned int v1246;
  unsigned int *v1247;
  uint64_t v1248;
  unsigned int v1249;
  uint64_t *v1250;
  int v1251;
  unsigned int v1252;
  uint64_t *v1253;
  uint64_t v1254;
  unsigned int v1255;
  unsigned int v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  __int128 v1260;
  _OWORD *v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  _OWORD *v1266;
  _OWORD *v1267;
  int64x2_t *v1268;
  int64x2_t v1269;
  int64x2_t v1270;
  int64x2_t v1271;
  __int128 v1272;
  __int128 v1273;
  int64x2_t v1274;
  int64x2_t v1275;
  int64x2_t *v1276;
  int64x2_t *v1277;
  int64x2_t *v1278;
  uint64_t *v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unsigned int v1284;
  unsigned int v1285;
  unsigned int *v1286;
  uint64_t v1287;
  unsigned int v1288;
  uint64_t *v1289;
  int v1290;
  unsigned int v1291;
  uint64_t *v1292;
  uint64_t v1293;
  unsigned int v1294;
  unsigned int v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  __int128 v1299;
  _OWORD *v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  _OWORD *v1305;
  _OWORD *v1306;
  int64x2_t *v1307;
  int64x2_t v1308;
  int64x2_t v1309;
  int64x2_t v1310;
  __int128 v1311;
  __int128 v1312;
  int64x2_t v1313;
  int64x2_t v1314;
  int64x2_t *v1315;
  int64x2_t *v1316;
  int64x2_t *v1317;
  uint64_t *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  unsigned int v1323;
  unsigned int v1324;
  unsigned int *v1325;
  uint64_t v1326;
  unsigned int v1327;
  uint64_t *v1328;
  int v1329;
  unsigned int v1330;
  uint64_t *v1331;
  uint64_t v1332;
  unsigned int v1333;
  unsigned int v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  __int128 v1338;
  _OWORD *v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  _OWORD *v1350;
  _OWORD *v1351;
  _OWORD *v1352;
  _OWORD *v1353;
  _OWORD *v1354;
  int64x2_t *v1355;
  int64x2_t v1356;
  int64x2_t v1357;
  int64x2_t v1358;
  int64x2_t v1359;
  int64x2_t v1360;
  int64x2_t v1361;
  int64x2_t v1362;
  int64x2_t v1363;
  int64x2_t v1364;
  int64x2_t v1365;
  int64x2_t v1366;
  int64x2_t v1367;
  int64x2_t v1368;
  int64x2_t v1369;
  int64x2_t v1370;
  int64x2_t *v1371;
  int64x2_t *v1372;
  int64x2_t *v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unsigned int v1379;
  unsigned int v1380;
  unsigned int *v1381;
  uint64_t v1382;
  unsigned int v1383;
  uint64_t *v1384;
  int v1385;
  unsigned int v1386;
  uint64_t *v1387;
  uint64_t v1388;
  unsigned int v1389;
  unsigned int v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  __int128 v1394;
  _OWORD *v1395;
  __int128 v1396;
  __int128 v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  __int128 v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  _OWORD *v1412;
  _OWORD *v1413;
  _OWORD *v1414;
  _OWORD *v1415;
  _OWORD *v1416;
  _OWORD *v1417;
  _OWORD *v1418;
  _OWORD *v1419;
  int64x2_t v1420;
  int64x2_t *v1421;
  int64x2_t v1422;
  int64x2_t v1423;
  int64x2_t v1424;
  int64x2_t v1425;
  int64x2_t v1426;
  int64x2_t v1427;
  int64x2_t v1428;
  int64x2_t v1429;
  __int128 v1430;
  __int128 v1431;
  int64x2_t v1432;
  int64x2_t v1433;
  int64x2_t v1434;
  int64x2_t v1435;
  int64x2_t v1436;
  int64x2_t v1437;
  int64x2_t v1438;
  int64x2_t v1439;
  int64x2_t v1440;
  int64x2_t *v1441;
  int64x2_t *v1442;
  int64x2_t *v1443;
  uint64_t *v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  unsigned int v1449;
  unsigned int v1450;
  unsigned int *v1451;
  uint64_t v1452;
  unsigned int v1453;
  uint64_t *v1454;
  int v1455;
  unsigned int v1456;
  uint64_t *v1457;
  uint64_t v1458;
  unsigned int v1459;
  unsigned int v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  __int128 v1464;
  _OWORD *v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  _OWORD *v1476;
  _OWORD *v1477;
  _OWORD *v1478;
  _OWORD *v1479;
  _OWORD *v1480;
  int64x2_t *v1481;
  int64x2_t v1482;
  int64x2_t v1483;
  int64x2_t v1484;
  int64x2_t v1485;
  int64x2_t v1486;
  int64x2_t v1487;
  int64x2_t v1488;
  int64x2_t v1489;
  int64x2_t v1490;
  int64x2_t v1491;
  int64x2_t v1492;
  int64x2_t v1493;
  int64x2_t v1494;
  int64x2_t v1495;
  int64x2_t v1496;
  int64x2_t *v1497;
  int64x2_t *v1498;
  int64x2_t *v1499;
  uint64_t *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unsigned int v1505;
  unsigned int v1506;
  unsigned int *v1507;
  uint64_t v1508;
  unsigned int v1509;
  uint64_t *v1510;
  int v1511;
  unsigned int v1512;
  uint64_t *v1513;
  uint64_t v1514;
  unsigned int v1515;
  unsigned int v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  __int128 v1520;
  _OWORD *v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  _OWORD *v1532;
  _OWORD *v1533;
  _OWORD *v1534;
  _OWORD *v1535;
  _OWORD *v1536;
  int64x2_t *v1537;
  int64x2_t v1538;
  int64x2_t v1539;
  int64x2_t v1540;
  int64x2_t v1541;
  int64x2_t v1542;
  int64x2_t v1543;
  int64x2_t v1544;
  int64x2_t v1545;
  int64x2_t v1546;
  int64x2_t v1547;
  int64x2_t v1548;
  int64x2_t v1549;
  int64x2_t v1550;
  int64x2_t v1551;
  int64x2_t v1552;
  int64x2_t *v1553;
  int64x2_t *v1554;
  int64x2_t *v1555;
  uint64_t *v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unsigned int v1561;
  unsigned int v1562;
  unsigned int *v1563;
  uint64_t v1564;
  unsigned int v1565;
  uint64_t *v1566;
  int v1567;
  unsigned int v1568;
  uint64_t *v1569;
  uint64_t v1570;
  unsigned int v1571;
  unsigned int v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  __int128 v1576;
  _OWORD *v1577;
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  _OWORD *v1582;
  _OWORD *v1583;
  int64x2_t *v1584;
  int64x2_t v1585;
  int64x2_t v1586;
  int64x2_t v1587;
  __int128 v1588;
  __int128 v1589;
  int64x2_t v1590;
  int64x2_t v1591;
  int64x2_t *v1592;
  int64x2_t *v1593;
  int64x2_t *v1594;
  uint64_t *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  unsigned int v1601;
  unsigned int *v1602;
  uint64_t v1603;
  unsigned int v1604;
  uint64_t *v1605;
  int v1606;
  unsigned int v1607;
  uint64_t *v1608;
  uint64_t v1609;
  unsigned int v1610;
  unsigned int v1611;
  int8x16_t *v1612;
  uint64_t v1613;
  uint64_t v1614;
  int8x16_t v1615;
  int8x16_t v1616;
  int8x16_t *v1617;
  _QWORD *v1618;
  uint64_t *v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  unsigned int v1624;
  unsigned int v1625;
  unsigned int *v1626;
  uint64_t v1627;
  unsigned int v1628;
  uint64_t *v1629;
  int v1630;
  unsigned int v1631;
  uint64_t *v1632;
  uint64_t v1633;
  unsigned int v1634;
  unsigned int v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  int64x2_t v1639;
  int64x2_t *v1640;
  __int128 v1641;
  __int128 v1642;
  int64x2_t v1643;
  int64x2_t v1644;
  int64x2_t v1645;
  int64x2_t v1646;
  __int8 *v1647;
  int64x2_t v1648;
  int64x2_t v1649;
  int64x2_t v1650;
  int64x2_t v1651;
  int64x2_t v1652;
  int64x2_t v1653;
  int64x2_t v1654;
  int64x2_t v1655;
  int64x2_t *v1656;
  int64x2_t *v1657;
  int64x2_t *v1658;
  uint64_t *v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  unsigned int v1664;
  unsigned int v1665;
  unsigned int *v1666;
  uint64_t v1667;
  unsigned int v1668;
  uint64_t *v1669;
  int v1670;
  unsigned int v1671;
  uint64_t *v1672;
  uint64_t v1673;
  unsigned int v1674;
  unsigned int v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  int64x2_t v1679;
  int64x2_t *v1680;
  __int128 v1681;
  __int128 v1682;
  int64x2_t v1683;
  int64x2_t v1684;
  int64x2_t v1685;
  int64x2_t v1686;
  __int8 *v1687;
  int64x2_t v1688;
  int64x2_t v1689;
  int64x2_t v1690;
  int64x2_t v1691;
  int64x2_t v1692;
  int64x2_t v1693;
  int64x2_t v1694;
  int64x2_t v1695;
  int64x2_t *v1696;
  int64x2_t *v1697;
  int64x2_t *v1698;
  uint64_t *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  unsigned int v1704;
  unsigned int v1705;
  unsigned int *v1706;
  uint64_t v1707;
  unsigned int v1708;
  uint64_t *v1709;
  int v1710;
  unsigned int v1711;
  uint64_t *v1712;
  uint64_t v1713;
  unsigned int v1714;
  unsigned int v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  __int128 v1719;
  _OWORD *v1720;
  __int128 v1721;
  __int128 v1722;
  __int128 v1723;
  __int128 v1724;
  _OWORD *v1725;
  _OWORD *v1726;
  int64x2_t *v1727;
  int64x2_t v1728;
  int64x2_t v1729;
  int64x2_t v1730;
  __int128 v1731;
  __int128 v1732;
  int64x2_t v1733;
  int64x2_t v1734;
  int64x2_t *v1735;
  int64x2_t *v1736;
  int64x2_t *v1737;
  uint64_t *v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  unsigned int v1743;
  unsigned int v1744;
  unsigned int *v1745;
  uint64_t v1746;
  unsigned int v1747;
  uint64_t *v1748;
  int v1749;
  unsigned int v1750;
  uint64_t *v1751;
  uint64_t v1752;
  unsigned int v1753;
  unsigned int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  __int128 v1758;
  _OWORD *v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  _OWORD *v1764;
  _OWORD *v1765;
  int64x2_t *v1766;
  int64x2_t v1767;
  int64x2_t v1768;
  int64x2_t v1769;
  __int128 v1770;
  __int128 v1771;
  int64x2_t v1772;
  int64x2_t v1773;
  int64x2_t *v1774;
  int64x2_t *v1775;
  int64x2_t *v1776;
  uint64_t *v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  unsigned int v1782;
  unsigned int v1783;
  unsigned int *v1784;
  uint64_t v1785;
  unsigned int v1786;
  uint64_t *v1787;
  int v1788;
  unsigned int v1789;
  uint64_t *v1790;
  uint64_t v1791;
  unsigned int v1792;
  unsigned int v1793;
  _QWORD *v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  _QWORD *v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  _OWORD *v1803;
  __int128 v1804;
  __int128 v1805;
  uint64_t *v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unsigned int v1811;
  unsigned int v1812;
  unsigned int *v1813;
  uint64_t v1814;
  unsigned int v1815;
  uint64_t *v1816;
  int v1817;
  unsigned int v1818;
  uint64_t *v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  _QWORD *v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  _QWORD *v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  uint64_t *v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  unsigned int v1845;
  unsigned int v1846;
  unsigned int *v1847;
  uint64_t v1848;
  unsigned int v1849;
  uint64_t *v1850;
  int v1851;
  unsigned int v1852;
  uint64_t *v1853;
  uint64_t v1854;
  unsigned int v1855;
  unsigned int v1856;
  _QWORD *v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  _QWORD *v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  _OWORD *v1866;
  __int128 v1867;
  __int128 v1868;
  uint64_t *v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  unsigned int v1874;
  unsigned int v1875;
  unsigned int *v1876;
  uint64_t v1877;
  unsigned int v1878;
  uint64_t *v1879;
  int v1880;
  unsigned int v1881;
  uint64_t *v1882;
  uint64_t v1883;
  unsigned int v1884;
  unsigned int v1885;
  _QWORD *v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  _QWORD *v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  _OWORD *v1895;
  __int128 v1896;
  __int128 v1897;
  uint64_t *v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  unsigned int v1903;
  unsigned int v1904;
  unsigned int *v1905;
  uint64_t v1906;
  unsigned int v1907;
  uint64_t *v1908;
  int v1909;
  unsigned int v1910;
  uint64_t *v1911;
  uint64_t v1912;
  unsigned int v1913;
  unsigned int v1914;
  _QWORD *v1915;
  uint64_t v1916;
  uint64_t v1917;
  _QWORD *v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  __int128 v1922;
  uint64_t *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  unsigned int v1928;
  unsigned int *v1929;
  unsigned int i;
  uint64_t v1931;
  unsigned int v1932;
  uint64_t *v1933;
  int v1934;
  unsigned int v1935;
  uint64_t *v1936;
  uint64_t v1937;
  unsigned int v1938;
  unsigned int v1939;
  unsigned int v1940;
  uint64_t *v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  unsigned int v1947;
  uint64_t *v1948;
  int v1949;
  unsigned int v1950;
  uint64_t *v1951;
  uint64_t v1952;
  uint64_t *v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  int v1958;
  unsigned int v1959;
  unsigned int v1960;
  unsigned int *v1961;
  uint64_t v1962;
  unsigned int v1963;
  uint64_t *v1964;
  int v1965;
  unsigned int v1966;
  uint64_t *v1967;
  uint64_t v1968;
  unsigned int v1969;
  unsigned int v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  _QWORD *v1975;
  uint64_t v1976;
  uint64_t v1977;
  _OWORD *v1978;
  __int128 v1979;
  uint64_t *v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  unsigned int v1985;
  unsigned int v1986;
  unsigned int *v1987;
  uint64_t v1988;
  unsigned int v1989;
  uint64_t *v1990;
  int v1991;
  unsigned int v1992;
  uint64_t *v1993;
  uint64_t v1994;
  unsigned int v1995;
  unsigned int v1996;
  _QWORD *v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  _QWORD *v2001;
  uint64_t v2002;
  uint64_t v2003;
  _OWORD *v2004;
  __int128 v2005;
  uint64_t *v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  unsigned int v2011;
  unsigned int v2012;
  unsigned int *v2013;
  uint64_t v2014;
  unsigned int v2015;
  uint64_t *v2016;
  int v2017;
  unsigned int v2018;
  uint64_t *v2019;
  uint64_t v2020;
  unsigned int v2021;
  unsigned int v2022;
  _QWORD *v2023;
  uint64_t v2024;
  uint64_t v2025;
  _QWORD *v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  __int128 v2030;
  uint64_t *v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  unsigned int v2036;
  unsigned int v2037;
  unsigned int *v2038;
  uint64_t v2039;
  unsigned int v2040;
  uint64_t *v2041;
  int v2042;
  unsigned int v2043;
  uint64_t *v2044;
  uint64_t v2045;
  unsigned int v2046;
  unsigned int v2047;
  _QWORD *v2048;
  uint64_t v2049;
  uint64_t v2050;
  _QWORD *v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  __int128 v2055;
  uint64_t *v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  unsigned int v2061;
  unsigned int v2062;
  unsigned int *v2063;
  uint64_t v2064;
  unsigned int v2065;
  uint64_t *v2066;
  int v2067;
  unsigned int v2068;
  uint64_t *v2069;
  uint64_t v2070;
  unsigned int v2071;
  unsigned int v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  int64x2_t v2076;
  int64x2_t *v2077;
  __int128 v2078;
  uint64_t v2079;
  int64x2_t v2080;
  uint64_t v2081;
  __int128 v2082;
  uint64_t v2083;
  int64x2_t v2084;
  uint64_t v2085;
  __int128 v2086;
  uint64_t v2087;
  __int8 *v2088;
  int64x2_t *v2089;
  __int8 *v2090;
  int64x2_t *v2091;
  __int8 *v2092;
  int64x2_t *v2093;
  int64x2_t v2094;
  int64x2_t v2095;
  int64x2_t v2096;
  int64x2_t v2097;
  int64x2_t v2098;
  int64x2_t v2099;
  int64x2_t v2100;
  int64x2_t v2101;
  int64x2_t v2102;
  int64x2_t v2103;
  int64x2_t *v2104;
  int64x2_t *v2105;
  uint64_t *v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  unsigned int v2111;
  unsigned int v2112;
  unsigned int *v2113;
  uint64_t v2114;
  unsigned int v2115;
  uint64_t *v2116;
  int v2117;
  unsigned int v2118;
  uint64_t *v2119;
  uint64_t v2120;
  unsigned int v2121;
  unsigned int v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  int64x2_t v2126;
  int64x2_t *v2127;
  __int128 v2128;
  uint64_t v2129;
  int64x2_t v2130;
  uint64_t v2131;
  __int128 v2132;
  uint64_t v2133;
  int64x2_t v2134;
  uint64_t v2135;
  __int128 v2136;
  uint64_t v2137;
  int64x2_t v2138;
  uint64_t v2139;
  __int128 v2140;
  uint64_t v2141;
  int64x2_t v2142;
  uint64_t v2143;
  __int8 *v2144;
  int64x2_t *v2145;
  __int8 *v2146;
  int64x2_t *v2147;
  __int8 *v2148;
  int64x2_t *v2149;
  __int8 *v2150;
  int64x2_t *v2151;
  int64x2_t v2152;
  int64x2_t *v2153;
  int64x2_t v2154;
  int64x2_t v2155;
  int64x2_t v2156;
  int64x2_t v2157;
  int64x2_t v2158;
  int64x2_t v2159;
  int64x2_t v2160;
  int64x2_t v2161;
  int64x2_t v2162;
  int64x2_t v2163;
  uint64_t v2164;
  __int128 v2165;
  int64x2_t v2166;
  int64x2_t v2167;
  int64x2_t *v2168;
  int64x2_t *v2169;
  uint64_t *v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  unsigned int v2175;
  unsigned int v2176;
  unsigned int *v2177;
  uint64_t v2178;
  unsigned int v2179;
  uint64_t *v2180;
  int v2181;
  unsigned int v2182;
  uint64_t *v2183;
  uint64_t v2184;
  unsigned int v2185;
  unsigned int v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  int64x2_t v2190;
  int64x2_t *v2191;
  __int128 v2192;
  uint64_t v2193;
  int64x2_t v2194;
  uint64_t v2195;
  __int128 v2196;
  uint64_t v2197;
  int64x2_t v2198;
  uint64_t v2199;
  __int128 v2200;
  uint64_t v2201;
  __int8 *v2202;
  int64x2_t *v2203;
  __int8 *v2204;
  int64x2_t *v2205;
  __int8 *v2206;
  int64x2_t *v2207;
  int64x2_t v2208;
  int64x2_t v2209;
  int64x2_t v2210;
  int64x2_t v2211;
  int64x2_t v2212;
  int64x2_t v2213;
  int64x2_t v2214;
  int64x2_t v2215;
  int64x2_t v2216;
  int64x2_t v2217;
  int64x2_t *v2218;
  int64x2_t *v2219;
  uint64_t *v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  unsigned int v2225;
  unsigned int v2226;
  unsigned int *v2227;
  uint64_t v2228;
  unsigned int v2229;
  uint64_t *v2230;
  int v2231;
  unsigned int v2232;
  uint64_t *v2233;
  uint64_t v2234;
  unsigned int v2235;
  unsigned int v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  int64x2_t v2240;
  int64x2_t *v2241;
  __int128 v2242;
  uint64_t v2243;
  int64x2_t v2244;
  uint64_t v2245;
  __int128 v2246;
  uint64_t v2247;
  int64x2_t v2248;
  uint64_t v2249;
  __int128 v2250;
  uint64_t v2251;
  __int8 *v2252;
  int64x2_t *v2253;
  __int8 *v2254;
  int64x2_t *v2255;
  __int8 *v2256;
  int64x2_t *v2257;
  int64x2_t v2258;
  int64x2_t v2259;
  int64x2_t v2260;
  int64x2_t v2261;
  int64x2_t v2262;
  int64x2_t v2263;
  int64x2_t v2264;
  int64x2_t v2265;
  int64x2_t v2266;
  int64x2_t v2267;
  int64x2_t *v2268;
  int64x2_t *v2269;
  uint64_t *v2270;
  uint64_t v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  unsigned int v2275;
  unsigned int v2276;
  unsigned int *v2277;
  uint64_t v2278;
  unsigned int v2279;
  uint64_t *v2280;
  int v2281;
  unsigned int v2282;
  uint64_t *v2283;
  uint64_t v2284;
  unsigned int v2285;
  unsigned int v2286;
  uint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  int64x2_t *v2291;
  int64x2_t v2292;
  __int128 v2293;
  uint64_t v2294;
  uint64_t v2295;
  int8x16_t v2296;
  unint64_t v2297;
  __int8 *v2298;
  int64x2_t *v2299;
  int64x2_t v2300;
  __int128 v2301;
  int64x2_t v2302;
  int64x2_t v2303;
  int64x2_t *v2304;
  uint64_t v2305;
  uint64_t *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  unsigned int v2311;
  unsigned int v2312;
  unsigned int *v2313;
  uint64_t v2314;
  unsigned int v2315;
  uint64_t *v2316;
  int v2317;
  unsigned int v2318;
  uint64_t *v2319;
  uint64_t v2320;
  unsigned int v2321;
  unsigned int v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  int8x16_t v2326;
  uint64_t v2327;
  unint64_t v2328;
  int8x16_t *v2329;
  _QWORD *v2330;
  uint64_t *v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  unsigned int v2336;
  unsigned int v2337;
  unsigned int *v2338;
  uint64_t v2339;
  unsigned int v2340;
  uint64_t *v2341;
  int v2342;
  unsigned int v2343;
  uint64_t *v2344;
  uint64_t v2345;
  unsigned int v2346;
  unsigned int v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  int64x2_t v2351;
  int64x2_t *v2352;
  __int128 v2353;
  uint64_t v2354;
  int64x2_t v2355;
  uint64_t v2356;
  __int128 v2357;
  uint64_t v2358;
  __int8 *v2359;
  int64x2_t *v2360;
  __int8 *v2361;
  int64x2_t *v2362;
  int64x2_t v2363;
  int64x2_t v2364;
  int64x2_t v2365;
  int64x2_t v2366;
  int64x2_t v2367;
  int64x2_t v2368;
  int64x2_t v2369;
  int64x2_t *v2370;
  int64x2_t *v2371;
  uint64_t *v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  unsigned int v2377;
  unsigned int v2378;
  unsigned int *v2379;
  uint64_t v2380;
  unsigned int v2381;
  uint64_t *v2382;
  int v2383;
  unsigned int v2384;
  uint64_t *v2385;
  uint64_t v2386;
  unsigned int v2387;
  unsigned int v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  int64x2_t v2392;
  int64x2_t *v2393;
  __int128 v2394;
  uint64_t v2395;
  int64x2_t v2396;
  uint64_t v2397;
  __int128 v2398;
  uint64_t v2399;
  __int8 *v2400;
  int64x2_t *v2401;
  __int8 *v2402;
  int64x2_t *v2403;
  int64x2_t v2404;
  int64x2_t v2405;
  int64x2_t v2406;
  int64x2_t v2407;
  int64x2_t v2408;
  int64x2_t v2409;
  int64x2_t v2410;
  int64x2_t *v2411;
  int64x2_t *v2412;
  uint64_t *v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  unsigned int v2418;
  unsigned int v2419;
  unsigned int *v2420;
  uint64_t v2421;
  unsigned int v2422;
  uint64_t *v2423;
  int v2424;
  unsigned int v2425;
  uint64_t *v2426;
  uint64_t v2427;
  unsigned int v2428;
  unsigned int v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  int64x2_t *v2434;
  int64x2_t v2435;
  __int128 v2436;
  uint64_t v2437;
  uint64_t v2438;
  int8x16_t v2439;
  unint64_t v2440;
  __int8 *v2441;
  int64x2_t *v2442;
  int64x2_t v2443;
  __int128 v2444;
  int64x2_t v2445;
  int64x2_t v2446;
  int64x2_t *v2447;
  uint64_t v2448;
  uint64_t *v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  unsigned int v2454;
  unsigned int v2455;
  unsigned int *v2456;
  uint64_t v2457;
  unsigned int v2458;
  uint64_t *v2459;
  int v2460;
  unsigned int v2461;
  uint64_t *v2462;
  uint64_t v2463;
  unsigned int v2464;
  unsigned int v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  int64x2_t *v2470;
  int64x2_t v2471;
  __int128 v2472;
  uint64_t v2473;
  uint64_t v2474;
  int8x16_t v2475;
  unint64_t v2476;
  __int8 *v2477;
  int64x2_t *v2478;
  int64x2_t v2479;
  __int128 v2480;
  int64x2_t v2481;
  int64x2_t v2482;
  int64x2_t *v2483;
  uint64_t v2484;
  uint64_t *v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  unsigned int v2490;
  unsigned int v2491;
  unsigned int *v2492;
  uint64_t v2493;
  unsigned int v2494;
  uint64_t *v2495;
  int v2496;
  unsigned int v2497;
  uint64_t *v2498;
  uint64_t v2499;
  unsigned int v2500;
  unsigned int v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  int64x2_t v2505;
  int64x2_t *v2506;
  int64x2_t v2507;
  int64x2_t v2508;
  int64x2_t v2509;
  int64x2_t v2510;
  int8x16_t v2511;
  int8x16_t v2512;
  int8x16_t v2513;
  int8x16_t v2514;
  unint64_t v2515;
  unint64_t v2516;
  unint64_t v2517;
  int8x16_t v2518;
  int8x16_t v2519;
  unint64_t v2520;
  unint64_t v2521;
  unint64_t v2522;
  int8x16_t v2523;
  int8x16_t v2524;
  int8x16_t v2525;
  int8x16_t v2526;
  unint64_t v2527;
  unint64_t v2528;
  unint64_t v2529;
  int8x16_t v2530;
  int8x16_t v2531;
  unint64_t v2532;
  unint64_t v2533;
  unint64_t v2534;
  int64x2_t *v2535;
  int64x2_t v2536;
  int64x2_t v2537;
  int64x2_t v2538;
  int64x2_t v2539;
  int64x2_t v2540;
  int64x2_t v2541;
  int64x2_t v2542;
  int64x2_t v2543;
  int64x2_t v2544;
  int64x2_t v2545;
  int64x2_t v2546;
  int64x2_t v2547;
  int64x2_t v2548;
  int64x2_t v2549;
  int64x2_t v2550;
  int64x2_t v2551;
  int8x16_t *v2552;
  int8x16_t *v2553;
  int8x16_t *v2554;
  int8x16_t *v2555;
  uint64_t *v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  unsigned int v2561;
  unsigned int v2562;
  unsigned int *v2563;
  uint64_t v2564;
  unsigned int v2565;
  uint64_t *v2566;
  int v2567;
  unsigned int v2568;
  uint64_t *v2569;
  uint64_t v2570;
  unsigned int v2571;
  unsigned int v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  int64x2_t v2576;
  int64x2_t *v2577;
  int64x2_t v2578;
  __int128 v2579;
  __int128 v2580;
  __int128 v2581;
  int64x2_t v2582;
  int64x2_t v2583;
  int64x2_t v2584;
  __int128 v2585;
  __int128 v2586;
  __int128 v2587;
  int64x2_t v2588;
  int64x2_t v2589;
  int64x2_t v2590;
  __int128 v2591;
  __int128 v2592;
  __int128 v2593;
  int64x2_t v2594;
  int64x2_t v2595;
  int64x2_t v2596;
  __int128 v2597;
  __int128 v2598;
  __int128 v2599;
  int64x2_t v2600;
  int64x2_t v2601;
  int64x2_t v2602;
  __int8 *v2603;
  int64x2_t *v2604;
  __int8 *v2605;
  int64x2_t *v2606;
  __int8 *v2607;
  int64x2_t *v2608;
  __int8 *v2609;
  int64x2_t *v2610;
  int64x2_t v2611;
  int64x2_t *v2612;
  int64x2_t v2613;
  int64x2_t v2614;
  int64x2_t v2615;
  int64x2_t v2616;
  int64x2_t v2617;
  int64x2_t v2618;
  int64x2_t v2619;
  int64x2_t v2620;
  int64x2_t v2621;
  int64x2_t v2622;
  int64x2_t v2623;
  int64x2_t v2624;
  int64x2_t v2625;
  int64x2_t v2626;
  int64x2_t v2627;
  int64x2_t v2628;
  int64x2_t v2629;
  int64x2_t v2630;
  int64x2_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int64x2_t v2634;
  __int128 v2635;
  __int128 v2636;
  __int128 v2637;
  int64x2_t v2638;
  int64x2_t v2639;
  int64x2_t *v2640;
  int64x2_t *v2641;
  int64x2_t *v2642;
  int64x2_t *v2643;
  int64x2_t *v2644;
  uint64_t *v2645;
  uint64_t v2646;
  uint64_t v2647;
  uint64_t v2648;
  uint64_t v2649;
  unsigned int v2650;
  unsigned int v2651;
  unsigned int *v2652;
  uint64_t v2653;
  unsigned int v2654;
  uint64_t *v2655;
  int v2656;
  unsigned int v2657;
  uint64_t *v2658;
  uint64_t v2659;
  unsigned int v2660;
  unsigned int v2661;
  uint64_t v2662;
  uint64_t v2663;
  uint64_t v2664;
  int64x2_t v2665;
  int64x2_t *v2666;
  int64x2_t v2667;
  int64x2_t v2668;
  int64x2_t v2669;
  int64x2_t v2670;
  int8x16_t v2671;
  int8x16_t v2672;
  int8x16_t v2673;
  int8x16_t v2674;
  unint64_t v2675;
  unint64_t v2676;
  unint64_t v2677;
  int8x16_t v2678;
  int8x16_t v2679;
  unint64_t v2680;
  unint64_t v2681;
  unint64_t v2682;
  int8x16_t v2683;
  int8x16_t v2684;
  int8x16_t v2685;
  int8x16_t v2686;
  unint64_t v2687;
  unint64_t v2688;
  unint64_t v2689;
  int8x16_t v2690;
  int8x16_t v2691;
  unint64_t v2692;
  unint64_t v2693;
  unint64_t v2694;
  int64x2_t *v2695;
  int64x2_t v2696;
  int64x2_t v2697;
  int64x2_t v2698;
  int64x2_t v2699;
  int64x2_t v2700;
  int64x2_t v2701;
  int64x2_t v2702;
  int64x2_t v2703;
  int64x2_t v2704;
  int64x2_t v2705;
  int64x2_t v2706;
  int64x2_t v2707;
  int64x2_t v2708;
  int64x2_t v2709;
  int64x2_t v2710;
  int64x2_t v2711;
  int8x16_t *v2712;
  int8x16_t *v2713;
  int8x16_t *v2714;
  int8x16_t *v2715;
  uint64_t *v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  unsigned int v2721;
  unsigned int v2722;
  unsigned int *v2723;
  uint64_t v2724;
  unsigned int v2725;
  uint64_t *v2726;
  int v2727;
  unsigned int v2728;
  uint64_t *v2729;
  uint64_t v2730;
  unsigned int v2731;
  unsigned int v2732;
  uint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  int64x2_t v2736;
  int64x2_t *v2737;
  int64x2_t v2738;
  int64x2_t v2739;
  int64x2_t v2740;
  int64x2_t v2741;
  int8x16_t v2742;
  int8x16_t v2743;
  int8x16_t v2744;
  int8x16_t v2745;
  unint64_t v2746;
  unint64_t v2747;
  unint64_t v2748;
  int8x16_t v2749;
  int8x16_t v2750;
  unint64_t v2751;
  unint64_t v2752;
  unint64_t v2753;
  int8x16_t v2754;
  int8x16_t v2755;
  int8x16_t v2756;
  int8x16_t v2757;
  unint64_t v2758;
  unint64_t v2759;
  unint64_t v2760;
  int8x16_t v2761;
  int8x16_t v2762;
  unint64_t v2763;
  unint64_t v2764;
  unint64_t v2765;
  int64x2_t *v2766;
  int64x2_t v2767;
  int64x2_t v2768;
  int64x2_t v2769;
  int64x2_t v2770;
  int64x2_t v2771;
  int64x2_t v2772;
  int64x2_t v2773;
  int64x2_t v2774;
  int64x2_t v2775;
  int64x2_t v2776;
  int64x2_t v2777;
  int64x2_t v2778;
  int64x2_t v2779;
  int64x2_t v2780;
  int64x2_t v2781;
  int64x2_t v2782;
  int8x16_t *v2783;
  int8x16_t *v2784;
  int8x16_t *v2785;
  int8x16_t *v2786;
  uint64_t *v2787;
  uint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  unsigned int v2792;
  unsigned int v2793;
  unsigned int *v2794;
  uint64_t v2795;
  unsigned int v2796;
  uint64_t *v2797;
  int v2798;
  unsigned int v2799;
  uint64_t *v2800;
  uint64_t v2801;
  unsigned int v2802;
  unsigned int v2803;
  uint64_t v2804;
  uint64_t v2805;
  uint64_t v2806;
  int64x2_t v2807;
  int64x2_t *v2808;
  int64x2_t v2809;
  __int128 v2810;
  __int128 v2811;
  __int128 v2812;
  int64x2_t v2813;
  int64x2_t v2814;
  int64x2_t v2815;
  __int8 *v2816;
  int64x2_t *v2817;
  int64x2_t v2818;
  int64x2_t *v2819;
  int64x2_t v2820;
  int64x2_t v2821;
  int64x2_t v2822;
  int64x2_t v2823;
  __int128 v2824;
  __int128 v2825;
  __int128 v2826;
  int64x2_t v2827;
  int64x2_t v2828;
  int64x2_t *v2829;
  int64x2_t *v2830;
  int64x2_t *v2831;
  int64x2_t *v2832;
  int64x2_t *v2833;
  uint64_t *v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  uint64_t v2838;
  unsigned int v2839;
  unsigned int v2840;
  unsigned int *v2841;
  uint64_t v2842;
  unsigned int v2843;
  uint64_t *v2844;
  int v2845;
  unsigned int v2846;
  uint64_t *v2847;
  uint64_t v2848;
  unsigned int v2849;
  unsigned int v2850;
  int8x16_t *v2851;
  uint64_t v2852;
  uint64_t v2853;
  int8x16_t v2854;
  int8x16_t v2855;
  int8x16_t v2856;
  unint64_t v2857;
  unint64_t v2858;
  unint64_t v2859;
  int8x16_t *v2860;
  _QWORD *v2861;
  uint64_t *v2862;
  uint64_t v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  unsigned int v2867;
  unsigned int v2868;
  unsigned int *v2869;
  uint64_t v2870;
  unsigned int v2871;
  uint64_t *v2872;
  int v2873;
  unsigned int v2874;
  uint64_t *v2875;
  uint64_t v2876;
  unsigned int v2877;
  unsigned int v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t v2881;
  int64x2_t v2882;
  int64x2_t *v2883;
  int64x2_t v2884;
  __int128 v2885;
  __int128 v2886;
  __int128 v2887;
  int64x2_t v2888;
  int64x2_t v2889;
  int64x2_t v2890;
  __int128 v2891;
  __int128 v2892;
  __int128 v2893;
  __int8 *v2894;
  int64x2_t *v2895;
  __int8 *v2896;
  int64x2_t v2897;
  int64x2_t *v2898;
  int64x2_t v2899;
  int64x2_t v2900;
  int64x2_t v2901;
  int64x2_t v2902;
  int64x2_t v2903;
  int64x2_t v2904;
  int64x2_t v2905;
  int64x2_t v2906;
  int64x2_t v2907;
  int64x2_t v2908;
  int64x2_t v2909;
  int64x2_t *v2910;
  int64x2_t *v2911;
  int64x2_t *v2912;
  int64x2_t *v2913;
  int64x2_t *v2914;
  uint64_t *v2915;
  uint64_t v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  unsigned int v2920;
  unsigned int v2921;
  unsigned int *v2922;
  uint64_t v2923;
  unsigned int v2924;
  uint64_t *v2925;
  int v2926;
  unsigned int v2927;
  uint64_t *v2928;
  uint64_t v2929;
  unsigned int v2930;
  unsigned int v2931;
  uint64_t v2932;
  uint64_t v2933;
  uint64_t v2934;
  int64x2_t v2935;
  int64x2_t *v2936;
  int64x2_t v2937;
  __int128 v2938;
  __int128 v2939;
  __int128 v2940;
  int64x2_t v2941;
  int64x2_t v2942;
  int64x2_t v2943;
  __int128 v2944;
  __int128 v2945;
  __int128 v2946;
  __int8 *v2947;
  int64x2_t *v2948;
  __int8 *v2949;
  int64x2_t v2950;
  int64x2_t *v2951;
  int64x2_t v2952;
  int64x2_t v2953;
  int64x2_t v2954;
  int64x2_t v2955;
  int64x2_t v2956;
  int64x2_t v2957;
  int64x2_t v2958;
  int64x2_t v2959;
  int64x2_t v2960;
  int64x2_t v2961;
  int64x2_t v2962;
  int64x2_t *v2963;
  int64x2_t *v2964;
  int64x2_t *v2965;
  int64x2_t *v2966;
  int64x2_t *v2967;
  uint64_t *v2968;
  uint64_t v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  unsigned int v2973;
  unsigned int v2974;
  unsigned int *v2975;
  uint64_t v2976;
  unsigned int v2977;
  uint64_t *v2978;
  int v2979;
  unsigned int v2980;
  uint64_t *v2981;
  uint64_t v2982;
  unsigned int v2983;
  unsigned int v2984;
  uint64_t v2985;
  uint64_t v2986;
  uint64_t v2987;
  int64x2_t v2988;
  int64x2_t *v2989;
  int64x2_t v2990;
  __int128 v2991;
  __int128 v2992;
  __int128 v2993;
  int64x2_t v2994;
  int64x2_t v2995;
  int64x2_t v2996;
  __int8 *v2997;
  int64x2_t *v2998;
  int64x2_t v2999;
  int64x2_t *v3000;
  int64x2_t v3001;
  int64x2_t v3002;
  int64x2_t v3003;
  int64x2_t v3004;
  __int128 v3005;
  __int128 v3006;
  __int128 v3007;
  int64x2_t v3008;
  int64x2_t v3009;
  int64x2_t *v3010;
  int64x2_t *v3011;
  int64x2_t *v3012;
  int64x2_t *v3013;
  int64x2_t *v3014;
  uint64_t *v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  unsigned int v3020;
  unsigned int v3021;
  unsigned int *v3022;
  uint64_t v3023;
  unsigned int v3024;
  uint64_t *v3025;
  int v3026;
  unsigned int v3027;
  uint64_t *v3028;
  uint64_t v3029;
  unsigned int v3030;
  unsigned int v3031;
  uint64_t v3032;
  uint64_t v3033;
  uint64_t v3034;
  int64x2_t v3035;
  int64x2_t *v3036;
  int64x2_t v3037;
  __int128 v3038;
  __int128 v3039;
  __int128 v3040;
  int64x2_t v3041;
  int64x2_t v3042;
  int64x2_t v3043;
  __int8 *v3044;
  int64x2_t *v3045;
  int64x2_t v3046;
  int64x2_t *v3047;
  int64x2_t v3048;
  int64x2_t v3049;
  int64x2_t v3050;
  int64x2_t v3051;
  __int128 v3052;
  __int128 v3053;
  __int128 v3054;
  int64x2_t v3055;
  int64x2_t v3056;
  int64x2_t *v3057;
  int64x2_t *v3058;
  int64x2_t *v3059;
  int64x2_t *v3060;
  int64x2_t *v3061;
  uint64_t *v3062;
  uint64_t v3063;
  uint64_t v3064;
  uint64_t v3065;
  uint64_t v3066;
  unsigned int v3067;
  unsigned int v3068;
  unsigned int *v3069;
  uint64_t v3070;
  unsigned int v3071;
  uint64_t *v3072;
  int v3073;
  unsigned int v3074;
  uint64_t *v3075;
  uint64_t v3076;
  unsigned int v3077;
  unsigned int v3078;
  uint64_t v3079;
  uint64_t v3080;
  uint64_t v3081;
  int64x2_t v3082;
  int64x2_t *v3083;
  int64x2_t v3084;
  int64x2_t v3085;
  int64x2_t v3086;
  int64x2_t v3087;
  int8x16_t v3088;
  int8x16_t v3089;
  int8x16_t v3090;
  int8x16_t v3091;
  unint64_t v3092;
  unint64_t v3093;
  unint64_t v3094;
  int8x16_t v3095;
  int8x16_t v3096;
  unint64_t v3097;
  unint64_t v3098;
  unint64_t v3099;
  int8x16_t v3100;
  int8x16_t v3101;
  int8x16_t v3102;
  int8x16_t v3103;
  unint64_t v3104;
  unint64_t v3105;
  unint64_t v3106;
  int8x16_t v3107;
  int8x16_t v3108;
  unint64_t v3109;
  unint64_t v3110;
  unint64_t v3111;
  int64x2_t *v3112;
  int64x2_t v3113;
  int64x2_t v3114;
  int64x2_t v3115;
  int64x2_t v3116;
  int64x2_t v3117;
  int64x2_t v3118;
  int64x2_t v3119;
  int64x2_t v3120;
  int64x2_t v3121;
  int64x2_t v3122;
  int64x2_t v3123;
  int64x2_t v3124;
  int64x2_t v3125;
  int64x2_t v3126;
  int64x2_t v3127;
  int64x2_t v3128;
  int8x16_t *v3129;
  int8x16_t *v3130;
  int8x16_t *v3131;
  int8x16_t *v3132;
  uint64_t *v3133;
  uint64_t v3134;
  uint64_t v3135;
  uint64_t v3136;
  uint64_t v3137;
  unsigned int v3138;
  unsigned int v3139;
  unsigned int *v3140;
  uint64_t v3141;
  unsigned int v3142;
  uint64_t *v3143;
  int v3144;
  unsigned int v3145;
  uint64_t *v3146;
  uint64_t v3147;
  unsigned int v3148;
  unsigned int v3149;
  uint64_t v3150;
  uint64_t v3151;
  uint64_t v3152;
  int64x2_t v3153;
  int64x2_t *v3154;
  int64x2_t v3155;
  __int128 v3156;
  __int128 v3157;
  __int128 v3158;
  int64x2_t v3159;
  int64x2_t v3160;
  int64x2_t v3161;
  __int128 v3162;
  __int128 v3163;
  __int128 v3164;
  int64x2_t v3165;
  int64x2_t v3166;
  int64x2_t v3167;
  __int128 v3168;
  __int128 v3169;
  __int128 v3170;
  int64x2_t v3171;
  int64x2_t v3172;
  int64x2_t v3173;
  __int128 v3174;
  __int128 v3175;
  __int128 v3176;
  int64x2_t v3177;
  int64x2_t v3178;
  int64x2_t v3179;
  __int8 *v3180;
  int64x2_t *v3181;
  __int8 *v3182;
  int64x2_t *v3183;
  __int8 *v3184;
  int64x2_t *v3185;
  __int8 *v3186;
  int64x2_t *v3187;
  int64x2_t v3188;
  int64x2_t *v3189;
  int64x2_t v3190;
  int64x2_t v3191;
  int64x2_t v3192;
  int64x2_t v3193;
  int64x2_t v3194;
  int64x2_t v3195;
  int64x2_t v3196;
  int64x2_t v3197;
  int64x2_t v3198;
  int64x2_t v3199;
  int64x2_t v3200;
  int64x2_t v3201;
  int64x2_t v3202;
  int64x2_t v3203;
  int64x2_t v3204;
  int64x2_t v3205;
  int64x2_t v3206;
  int64x2_t v3207;
  int64x2_t v3208;
  int64x2_t v3209;
  int64x2_t v3210;
  int64x2_t v3211;
  __int128 v3212;
  __int128 v3213;
  __int128 v3214;
  int64x2_t v3215;
  int64x2_t v3216;
  int64x2_t *v3217;
  int64x2_t *v3218;
  int64x2_t *v3219;
  int64x2_t *v3220;
  int64x2_t *v3221;
  uint64_t *v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  unsigned int v3227;
  unsigned int v3228;
  unsigned int *v3229;
  uint64_t v3230;
  unsigned int v3231;
  uint64_t *v3232;
  int v3233;
  unsigned int v3234;
  uint64_t *v3235;
  uint64_t v3236;
  unsigned int v3237;
  unsigned int v3238;
  uint64_t v3239;
  uint64_t v3240;
  uint64_t v3241;
  int64x2_t v3242;
  int64x2_t *v3243;
  int64x2_t v3244;
  int64x2_t v3245;
  int64x2_t v3246;
  int64x2_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  int8x16_t v3251;
  unint64_t v3252;
  unint64_t v3253;
  unint64_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  unint64_t v3257;
  unint64_t v3258;
  unint64_t v3259;
  int8x16_t v3260;
  int8x16_t v3261;
  int8x16_t v3262;
  int8x16_t v3263;
  unint64_t v3264;
  unint64_t v3265;
  unint64_t v3266;
  int8x16_t v3267;
  int8x16_t v3268;
  unint64_t v3269;
  unint64_t v3270;
  unint64_t v3271;
  int64x2_t *v3272;
  int64x2_t v3273;
  int64x2_t v3274;
  int64x2_t v3275;
  int64x2_t v3276;
  int64x2_t v3277;
  int64x2_t v3278;
  int64x2_t v3279;
  int64x2_t v3280;
  int64x2_t v3281;
  int64x2_t v3282;
  int64x2_t v3283;
  int64x2_t v3284;
  int64x2_t v3285;
  int64x2_t v3286;
  int64x2_t v3287;
  int64x2_t v3288;
  int8x16_t *v3289;
  int8x16_t *v3290;
  int8x16_t *v3291;
  int8x16_t *v3292;
  uint64_t *v3293;
  uint64_t v3294;
  uint64_t v3295;
  uint64_t v3296;
  uint64_t v3297;
  unsigned int v3298;
  unsigned int v3299;
  unsigned int *v3300;
  uint64_t v3301;
  unsigned int v3302;
  uint64_t *v3303;
  int v3304;
  unsigned int v3305;
  uint64_t *v3306;
  uint64_t v3307;
  unsigned int v3308;
  unsigned int v3309;
  uint64_t v3310;
  uint64_t v3311;
  uint64_t v3312;
  int64x2_t v3313;
  int64x2_t *v3314;
  int64x2_t v3315;
  int64x2_t v3316;
  int64x2_t v3317;
  int64x2_t v3318;
  int8x16_t v3319;
  int8x16_t v3320;
  int8x16_t v3321;
  int8x16_t v3322;
  unint64_t v3323;
  unint64_t v3324;
  unint64_t v3325;
  int8x16_t v3326;
  int8x16_t v3327;
  unint64_t v3328;
  unint64_t v3329;
  unint64_t v3330;
  int8x16_t v3331;
  int8x16_t v3332;
  int8x16_t v3333;
  int8x16_t v3334;
  unint64_t v3335;
  unint64_t v3336;
  unint64_t v3337;
  int8x16_t v3338;
  int8x16_t v3339;
  unint64_t v3340;
  unint64_t v3341;
  unint64_t v3342;
  int64x2_t *v3343;
  int64x2_t v3344;
  int64x2_t v3345;
  int64x2_t v3346;
  int64x2_t v3347;
  int64x2_t v3348;
  int64x2_t v3349;
  int64x2_t v3350;
  int64x2_t v3351;
  int64x2_t v3352;
  int64x2_t v3353;
  int64x2_t v3354;
  int64x2_t v3355;
  int64x2_t v3356;
  int64x2_t v3357;
  int64x2_t v3358;
  int64x2_t v3359;
  int8x16_t *v3360;
  int8x16_t *v3361;
  int8x16_t *v3362;
  int8x16_t *v3363;
  uint64_t *v3364;
  uint64_t v3365;
  uint64_t v3366;
  uint64_t v3367;
  uint64_t v3368;
  unsigned int v3369;
  unsigned int v3370;
  unsigned int *v3371;
  uint64_t v3372;
  unsigned int v3373;
  uint64_t *v3374;
  int v3375;
  unsigned int v3376;
  uint64_t *v3377;
  uint64_t v3378;
  unsigned int v3379;
  unsigned int v3380;
  uint64_t v3381;
  uint64_t v3382;
  uint64_t v3383;
  int64x2_t v3384;
  int64x2_t *v3385;
  int64x2_t v3386;
  __int128 v3387;
  __int128 v3388;
  __int128 v3389;
  int64x2_t v3390;
  int64x2_t v3391;
  int64x2_t v3392;
  __int8 *v3393;
  int64x2_t *v3394;
  int64x2_t v3395;
  int64x2_t *v3396;
  int64x2_t v3397;
  int64x2_t v3398;
  int64x2_t v3399;
  int64x2_t v3400;
  __int128 v3401;
  __int128 v3402;
  __int128 v3403;
  int64x2_t v3404;
  int64x2_t v3405;
  int64x2_t *v3406;
  int64x2_t *v3407;
  int64x2_t *v3408;
  int64x2_t *v3409;
  int64x2_t *v3410;
  uint64_t *v3411;
  uint64_t v3412;
  uint64_t v3413;
  uint64_t v3414;
  uint64_t v3415;
  unsigned int v3416;
  unsigned int v3417;
  unsigned int *v3418;
  uint64_t v3419;
  unsigned int v3420;
  uint64_t *v3421;
  int v3422;
  unsigned int v3423;
  uint64_t *v3424;
  uint64_t v3425;
  unsigned int v3426;
  unsigned int v3427;
  int8x16_t *v3428;
  uint64_t v3429;
  uint64_t v3430;
  int8x16_t v3431;
  int8x16_t v3432;
  int8x16_t v3433;
  unint64_t v3434;
  unint64_t v3435;
  unint64_t v3436;
  int8x16_t *v3437;
  _QWORD *v3438;
  uint64_t *v3439;
  uint64_t v3440;
  uint64_t v3441;
  uint64_t v3442;
  uint64_t v3443;
  unsigned int v3444;
  unsigned int v3445;
  unsigned int *v3446;
  uint64_t v3447;
  unsigned int v3448;
  uint64_t *v3449;
  int v3450;
  unsigned int v3451;
  uint64_t *v3452;
  uint64_t v3453;
  unsigned int v3454;
  unsigned int v3455;
  uint64_t v3456;
  uint64_t v3457;
  uint64_t v3458;
  int64x2_t v3459;
  int64x2_t *v3460;
  int64x2_t v3461;
  __int128 v3462;
  __int128 v3463;
  __int128 v3464;
  int64x2_t v3465;
  int64x2_t v3466;
  int64x2_t v3467;
  __int128 v3468;
  __int128 v3469;
  __int128 v3470;
  __int8 *v3471;
  int64x2_t *v3472;
  __int8 *v3473;
  int64x2_t v3474;
  int64x2_t *v3475;
  int64x2_t v3476;
  int64x2_t v3477;
  int64x2_t v3478;
  int64x2_t v3479;
  int64x2_t v3480;
  int64x2_t v3481;
  int64x2_t v3482;
  int64x2_t v3483;
  int64x2_t v3484;
  int64x2_t v3485;
  int64x2_t v3486;
  int64x2_t *v3487;
  int64x2_t *v3488;
  int64x2_t *v3489;
  int64x2_t *v3490;
  int64x2_t *v3491;
  uint64_t *v3492;
  uint64_t v3493;
  uint64_t v3494;
  uint64_t v3495;
  uint64_t v3496;
  unsigned int v3497;
  unsigned int v3498;
  unsigned int *v3499;
  uint64_t v3500;
  unsigned int v3501;
  uint64_t *v3502;
  int v3503;
  unsigned int v3504;
  uint64_t *v3505;
  uint64_t v3506;
  unsigned int v3507;
  unsigned int v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  int64x2_t v3512;
  int64x2_t *v3513;
  int64x2_t v3514;
  __int128 v3515;
  __int128 v3516;
  __int128 v3517;
  int64x2_t v3518;
  int64x2_t v3519;
  int64x2_t v3520;
  __int128 v3521;
  __int128 v3522;
  __int128 v3523;
  __int8 *v3524;
  int64x2_t *v3525;
  __int8 *v3526;
  int64x2_t v3527;
  int64x2_t *v3528;
  int64x2_t v3529;
  int64x2_t v3530;
  int64x2_t v3531;
  int64x2_t v3532;
  int64x2_t v3533;
  int64x2_t v3534;
  int64x2_t v3535;
  int64x2_t v3536;
  int64x2_t v3537;
  int64x2_t v3538;
  int64x2_t v3539;
  int64x2_t *v3540;
  int64x2_t *v3541;
  int64x2_t *v3542;
  int64x2_t *v3543;
  int64x2_t *v3544;
  uint64_t *v3545;
  uint64_t v3546;
  uint64_t v3547;
  uint64_t v3548;
  uint64_t v3549;
  unsigned int v3550;
  unsigned int v3551;
  unsigned int *v3552;
  uint64_t v3553;
  unsigned int v3554;
  uint64_t *v3555;
  int v3556;
  unsigned int v3557;
  uint64_t *v3558;
  uint64_t v3559;
  unsigned int v3560;
  unsigned int v3561;
  uint64_t v3562;
  uint64_t v3563;
  uint64_t v3564;
  int64x2_t v3565;
  int64x2_t *v3566;
  int64x2_t v3567;
  __int128 v3568;
  __int128 v3569;
  __int128 v3570;
  int64x2_t v3571;
  int64x2_t v3572;
  int64x2_t v3573;
  __int8 *v3574;
  int64x2_t *v3575;
  int64x2_t v3576;
  int64x2_t *v3577;
  int64x2_t v3578;
  int64x2_t v3579;
  int64x2_t v3580;
  int64x2_t v3581;
  __int128 v3582;
  __int128 v3583;
  __int128 v3584;
  int64x2_t v3585;
  int64x2_t v3586;
  int64x2_t *v3587;
  int64x2_t *v3588;
  int64x2_t *v3589;
  int64x2_t *v3590;
  int64x2_t *v3591;
  uint64_t *v3592;
  uint64_t v3593;
  uint64_t v3594;
  uint64_t v3595;
  uint64_t v3596;
  unsigned int v3597;
  unsigned int v3598;
  unsigned int *v3599;
  uint64_t v3600;
  unsigned int v3601;
  uint64_t *v3602;
  int v3603;
  unsigned int v3604;
  uint64_t *v3605;
  uint64_t v3606;
  unsigned int v3607;
  unsigned int v3608;
  uint64_t v3609;
  uint64_t v3610;
  uint64_t v3611;
  int64x2_t v3612;
  int64x2_t *v3613;
  int64x2_t v3614;
  __int128 v3615;
  __int128 v3616;
  __int128 v3617;
  int64x2_t v3618;
  int64x2_t v3619;
  int64x2_t v3620;
  __int8 *v3621;
  int64x2_t *v3622;
  int64x2_t v3623;
  int64x2_t *v3624;
  int64x2_t v3625;
  int64x2_t v3626;
  int64x2_t v3627;
  int64x2_t v3628;
  __int128 v3629;
  __int128 v3630;
  __int128 v3631;
  int64x2_t v3632;
  int64x2_t v3633;
  int64x2_t *v3634;
  int64x2_t *v3635;
  int64x2_t *v3636;
  int64x2_t *v3637;
  int64x2_t *v3638;
  uint64_t *v3639;
  uint64_t v3640;
  uint64_t v3641;
  uint64_t v3642;
  uint64_t v3643;
  unsigned int v3644;
  unsigned int v3645;
  unsigned int *v3646;
  uint64_t v3647;
  unsigned int v3648;
  uint64_t *v3649;
  int v3650;
  unsigned int v3651;
  uint64_t *v3652;
  uint64_t v3653;
  unsigned int v3654;
  unsigned int v3655;
  uint64_t v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  uint64_t v3660;
  __int128 v3661;
  int64x2_t v3662;
  __int128 v3663;
  __int128 v3664;
  __int128 v3665;
  __int128 v3666;
  __int128 v3667;
  uint64_t v3668;
  __int128 v3669;
  __int128 v3670;
  __int128 v3671;
  __int128 v3672;
  uint64_t v3673;
  __int128 v3674;
  __int128 v3675;
  __int128 v3676;
  __int128 v3677;
  uint64_t v3678;
  __int128 v3679;
  __int128 v3680;
  __int128 v3681;
  __int128 v3682;
  uint64_t v3683;
  __int128 v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  uint64_t v3688;
  uint64_t v3689;
  uint64_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  uint64_t v3693;
  int64x2_t v3694;
  int64x2_t *v3695;
  int64x2_t v3696;
  int64x2_t v3697;
  int64x2_t v3698;
  int64x2_t v3699;
  int64x2_t v3700;
  int64x2_t v3701;
  int64x2_t v3702;
  int64x2_t v3703;
  int64x2_t v3704;
  int64x2_t v3705;
  int64x2_t v3706;
  int64x2_t v3707;
  int64x2_t v3708;
  int64x2_t v3709;
  int64x2_t v3710;
  int64x2_t v3711;
  int64x2_t v3712;
  int64x2_t v3713;
  int64x2_t v3714;
  int64x2_t v3715;
  int64x2_t v3716;
  int64x2_t v3717;
  int64x2_t v3718;
  int64x2_t v3719;
  int64x2_t v3720;
  int64x2_t v3721;
  int64x2_t v3722;
  int64x2_t v3723;
  int64x2_t v3724;
  int64x2_t v3725;
  int64x2_t *v3726;
  int64x2_t *v3727;
  int64x2_t *v3728;
  int64x2_t *v3729;
  int64x2_t *v3730;
  int64x2_t *v3731;
  int64x2_t *v3732;
  int64x2_t *v3733;
  uint64_t *v3734;
  uint64_t v3735;
  uint64_t v3736;
  uint64_t v3737;
  uint64_t v3738;
  unsigned int v3739;
  unsigned int v3740;
  unsigned int *v3741;
  uint64_t v3742;
  unsigned int v3743;
  uint64_t *v3744;
  int v3745;
  unsigned int v3746;
  uint64_t *v3747;
  uint64_t v3748;
  unsigned int v3749;
  unsigned int v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  uint64_t v3754;
  __int128 v3755;
  __int128 v3756;
  uint64_t v3757;
  int8x16_t v3758;
  int8x16_t v3759;
  int8x16_t v3760;
  int8x16_t v3761;
  int8x16_t v3762;
  int8x16_t v3763;
  int8x16_t v3764;
  int8x16_t v3765;
  int8x16_t v3766;
  int8x16_t v3767;
  int8x16_t v3768;
  int8x16_t v3769;
  int8x16_t v3770;
  int8x16_t v3771;
  int8x16_t v3772;
  int8x16_t v3773;
  int8x16_t v3774;
  int8x16_t v3775;
  int8x16_t v3776;
  int8x16_t v3777;
  int8x16_t v3778;
  int8x16_t v3779;
  uint64_t v3780;
  unint64_t v3781;
  unint64_t v3782;
  unint64_t v3783;
  unint64_t v3784;
  unint64_t v3785;
  int64x2_t v3786;
  unint64_t v3787;
  uint64_t v3788;
  unint64_t v3789;
  int8x16_t v3790;
  unint64_t v3791;
  unint64_t v3792;
  uint64_t v3793;
  unint64_t v3794;
  int8x16_t v3795;
  unint64_t v3796;
  int8x16_t v3797;
  int8x16_t v3798;
  int8x16_t v3799;
  unint64_t v3800;
  unint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  unint64_t v3804;
  int64x2_t v3805;
  int64x2_t v3806;
  int64x2_t v3807;
  int64x2_t v3808;
  int64x2_t v3809;
  int64x2_t v3810;
  int64x2_t v3811;
  int64x2_t v3812;
  int64x2_t v3813;
  int64x2_t v3814;
  int64x2_t v3815;
  int64x2_t v3816;
  int64x2_t v3817;
  int64x2_t v3818;
  int64x2_t v3819;
  int64x2_t v3820;
  __int128 v3821;
  int64x2_t v3822;
  __int128 v3823;
  int8x16_t v3824;
  int8x16_t v3825;
  int8x16_t v3826;
  int8x16_t v3827;
  int8x16_t v3828;
  int8x16_t v3829;
  int8x16_t v3830;
  int8x16_t v3831;
  int8x16_t v3832;
  int8x16_t v3833;
  int8x16_t v3834;
  int8x16_t v3835;
  int8x16_t v3836;
  int8x16_t v3837;
  int8x16_t v3838;
  int64x2_t v3839;
  int8x16_t v3840;
  int8x16_t v3841;
  int8x16_t v3842;
  uint64_t v3843;
  __int128 v3844;
  __int128 v3845;
  __int128 v3846;
  __int128 v3847;
  __int128 v3848;
  __int128 v3849;
  __int128 v3850;
  __int128 v3851;
  __int128 v3852;
  __int128 v3853;
  __int128 v3854;
  __int128 v3855;
  __int128 v3856;
  __int128 v3857;
  __int128 v3858;
  __int128 v3859;
  __int128 v3860;
  __int128 v3861;
  __int128 v3862;
  __int128 v3863;
  __int128 v3864;
  __int128 v3865;
  uint64_t v3866;
  uint64_t v3867;
  uint64_t v3868;
  uint64_t v3869;
  uint64_t v3870;
  int8x16_t *v3871;
  uint64_t v3872;
  uint64_t *v3873;
  uint64_t v3874;
  uint64_t v3875;
  uint64_t v3876;
  uint64_t v3877;
  unsigned int v3878;
  unsigned int v3879;
  unsigned int *v3880;
  uint64_t v3881;
  unsigned int v3882;
  uint64_t *v3883;
  int v3884;
  unsigned int v3885;
  uint64_t *v3886;
  uint64_t v3887;
  unsigned int v3888;
  unsigned int v3889;
  uint64_t v3890;
  uint64_t v3891;
  uint64_t v3892;
  uint64_t v3893;
  uint64_t v3894;
  __int128 v3895;
  int64x2_t v3896;
  __int128 v3897;
  __int128 v3898;
  __int128 v3899;
  __int128 v3900;
  __int128 v3901;
  uint64_t v3902;
  __int128 v3903;
  __int128 v3904;
  __int128 v3905;
  __int128 v3906;
  uint64_t v3907;
  __int128 v3908;
  __int128 v3909;
  __int128 v3910;
  __int128 v3911;
  uint64_t v3912;
  __int128 v3913;
  __int128 v3914;
  __int128 v3915;
  __int128 v3916;
  uint64_t v3917;
  __int128 v3918;
  __int128 v3919;
  __int128 v3920;
  __int128 v3921;
  uint64_t v3922;
  uint64_t v3923;
  uint64_t v3924;
  uint64_t v3925;
  uint64_t v3926;
  uint64_t v3927;
  int64x2_t v3928;
  int64x2_t *v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int64x2_t v3934;
  int64x2_t v3935;
  int64x2_t v3936;
  int64x2_t v3937;
  int64x2_t v3938;
  int64x2_t v3939;
  int64x2_t v3940;
  int64x2_t v3941;
  int64x2_t v3942;
  int64x2_t v3943;
  int64x2_t v3944;
  int64x2_t v3945;
  int64x2_t v3946;
  int64x2_t v3947;
  int64x2_t v3948;
  int64x2_t v3949;
  int64x2_t v3950;
  int64x2_t v3951;
  int64x2_t v3952;
  int64x2_t v3953;
  int64x2_t v3954;
  int64x2_t v3955;
  int64x2_t v3956;
  int64x2_t v3957;
  int64x2_t v3958;
  int64x2_t v3959;
  int64x2_t *v3960;
  int64x2_t *v3961;
  int64x2_t *v3962;
  int64x2_t *v3963;
  int64x2_t *v3964;
  int64x2_t *v3965;
  int64x2_t *v3966;
  int64x2_t *v3967;
  uint64_t *v3968;
  uint64_t v3969;
  uint64_t v3970;
  uint64_t v3971;
  uint64_t v3972;
  unsigned int v3973;
  unsigned int v3974;
  unsigned int *v3975;
  uint64_t v3976;
  unsigned int v3977;
  uint64_t *v3978;
  int v3979;
  unsigned int v3980;
  uint64_t *v3981;
  uint64_t v3982;
  unsigned int v3983;
  unsigned int v3984;
  uint64_t v3985;
  uint64_t v3986;
  uint64_t v3987;
  uint64_t v3988;
  uint64_t v3989;
  __int128 v3990;
  int64x2_t v3991;
  __int128 v3992;
  __int128 v3993;
  __int128 v3994;
  __int128 v3995;
  __int128 v3996;
  uint64_t v3997;
  __int128 v3998;
  __int128 v3999;
  __int128 v4000;
  __int128 v4001;
  uint64_t v4002;
  __int128 v4003;
  __int128 v4004;
  __int128 v4005;
  __int128 v4006;
  uint64_t v4007;
  __int128 v4008;
  __int128 v4009;
  __int128 v4010;
  __int128 v4011;
  uint64_t v4012;
  __int128 v4013;
  __int128 v4014;
  __int128 v4015;
  __int128 v4016;
  uint64_t v4017;
  uint64_t v4018;
  uint64_t v4019;
  uint64_t v4020;
  uint64_t v4021;
  uint64_t v4022;
  int64x2_t v4023;
  int64x2_t *v4024;
  int64x2_t v4025;
  int64x2_t v4026;
  int64x2_t v4027;
  int64x2_t v4028;
  int64x2_t v4029;
  int64x2_t v4030;
  int64x2_t v4031;
  int64x2_t v4032;
  int64x2_t v4033;
  int64x2_t v4034;
  int64x2_t v4035;
  int64x2_t v4036;
  int64x2_t v4037;
  int64x2_t v4038;
  int64x2_t v4039;
  int64x2_t v4040;
  int64x2_t v4041;
  int64x2_t v4042;
  int64x2_t v4043;
  int64x2_t v4044;
  int64x2_t v4045;
  int64x2_t v4046;
  int64x2_t v4047;
  int64x2_t v4048;
  int64x2_t v4049;
  int64x2_t v4050;
  int64x2_t v4051;
  int64x2_t v4052;
  int64x2_t v4053;
  int64x2_t v4054;
  int64x2_t *v4055;
  int64x2_t *v4056;
  int64x2_t *v4057;
  int64x2_t *v4058;
  int64x2_t *v4059;
  int64x2_t *v4060;
  int64x2_t *v4061;
  int64x2_t *v4062;
  uint64_t *v4063;
  uint64_t v4064;
  uint64_t v4065;
  uint64_t v4066;
  uint64_t v4067;
  unsigned int v4068;
  unsigned int v4069;
  unsigned int *v4070;
  uint64_t v4071;
  unsigned int v4072;
  uint64_t *v4073;
  int v4074;
  unsigned int v4075;
  uint64_t *v4076;
  uint64_t v4077;
  unsigned int v4078;
  unsigned int v4079;
  uint64_t v4080;
  uint64_t v4081;
  uint64_t v4082;
  uint64_t v4083;
  uint64_t v4084;
  __int128 v4085;
  int64x2_t v4086;
  __int128 v4087;
  __int128 v4088;
  __int128 v4089;
  __int128 v4090;
  __int128 v4091;
  uint64_t v4092;
  __int128 v4093;
  __int128 v4094;
  __int128 v4095;
  __int128 v4096;
  uint64_t v4097;
  uint64_t v4098;
  uint64_t v4099;
  int64x2_t v4100;
  int64x2_t *v4101;
  int64x2_t v4102;
  int64x2_t v4103;
  int64x2_t v4104;
  int64x2_t v4105;
  int64x2_t v4106;
  int64x2_t v4107;
  int64x2_t v4108;
  uint64_t v4109;
  __int128 v4110;
  __int128 v4111;
  __int128 v4112;
  __int128 v4113;
  int64x2_t v4114;
  int64x2_t v4115;
  int64x2_t *v4116;
  int64x2_t *v4117;
  int64x2_t *v4118;
  int64x2_t *v4119;
  int64x2_t *v4120;
  int64x2_t *v4121;
  int64x2_t *v4122;
  int64x2_t *v4123;
  uint64_t *v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  unsigned int v4129;
  unsigned int v4130;
  unsigned int *v4131;
  uint64_t v4132;
  unsigned int v4133;
  uint64_t *v4134;
  int v4135;
  unsigned int v4136;
  uint64_t *v4137;
  uint64_t v4138;
  unsigned int v4139;
  unsigned int v4140;
  uint64_t v4141;
  uint64_t v4142;
  uint64_t v4143;
  int8x16_t v4144;
  int8x16_t v4145;
  int8x16_t v4146;
  int8x16_t v4147;
  uint64_t v4148;
  unint64_t v4149;
  unint64_t v4150;
  unint64_t v4151;
  unint64_t v4152;
  int8x16_t *v4153;
  _QWORD *v4154;
  uint64_t *v4155;
  uint64_t v4156;
  uint64_t v4157;
  uint64_t v4158;
  uint64_t v4159;
  unsigned int v4160;
  unsigned int v4161;
  unsigned int *v4162;
  uint64_t v4163;
  unsigned int v4164;
  uint64_t *v4165;
  int v4166;
  unsigned int v4167;
  uint64_t *v4168;
  uint64_t v4169;
  unsigned int v4170;
  unsigned int v4171;
  uint64_t v4172;
  uint64_t v4173;
  uint64_t v4174;
  uint64_t v4175;
  uint64_t v4176;
  __int128 v4177;
  int64x2_t v4178;
  __int128 v4179;
  __int128 v4180;
  __int128 v4181;
  __int128 v4182;
  __int128 v4183;
  uint64_t v4184;
  __int128 v4185;
  __int128 v4186;
  __int128 v4187;
  __int128 v4188;
  uint64_t v4189;
  __int128 v4190;
  __int128 v4191;
  __int128 v4192;
  __int128 v4193;
  uint64_t v4194;
  uint64_t v4195;
  uint64_t v4196;
  uint64_t v4197;
  int64x2_t v4198;
  int64x2_t *v4199;
  int64x2_t v4200;
  int64x2_t v4201;
  int64x2_t v4202;
  int64x2_t v4203;
  int64x2_t v4204;
  int64x2_t v4205;
  int64x2_t v4206;
  int64x2_t v4207;
  int64x2_t v4208;
  int64x2_t v4209;
  int64x2_t v4210;
  int64x2_t v4211;
  int64x2_t v4212;
  int64x2_t v4213;
  int64x2_t v4214;
  int64x2_t v4215;
  int64x2_t v4216;
  int64x2_t *v4217;
  int64x2_t *v4218;
  int64x2_t *v4219;
  int64x2_t *v4220;
  int64x2_t *v4221;
  int64x2_t *v4222;
  int64x2_t *v4223;
  int64x2_t *v4224;
  uint64_t *v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint64_t v4228;
  uint64_t v4229;
  unsigned int v4230;
  unsigned int v4231;
  unsigned int *v4232;
  uint64_t v4233;
  unsigned int v4234;
  uint64_t *v4235;
  int v4236;
  unsigned int v4237;
  uint64_t *v4238;
  uint64_t v4239;
  unsigned int v4240;
  unsigned int v4241;
  uint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  uint64_t v4245;
  uint64_t v4246;
  __int128 v4247;
  int64x2_t v4248;
  __int128 v4249;
  __int128 v4250;
  __int128 v4251;
  __int128 v4252;
  __int128 v4253;
  uint64_t v4254;
  __int128 v4255;
  __int128 v4256;
  __int128 v4257;
  __int128 v4258;
  uint64_t v4259;
  __int128 v4260;
  __int128 v4261;
  __int128 v4262;
  __int128 v4263;
  uint64_t v4264;
  uint64_t v4265;
  uint64_t v4266;
  uint64_t v4267;
  int64x2_t v4268;
  int64x2_t *v4269;
  int64x2_t v4270;
  int64x2_t v4271;
  int64x2_t v4272;
  int64x2_t v4273;
  int64x2_t v4274;
  int64x2_t v4275;
  int64x2_t v4276;
  int64x2_t v4277;
  int64x2_t v4278;
  int64x2_t v4279;
  int64x2_t v4280;
  int64x2_t v4281;
  int64x2_t v4282;
  int64x2_t v4283;
  int64x2_t v4284;
  int64x2_t v4285;
  int64x2_t v4286;
  int64x2_t *v4287;
  int64x2_t *v4288;
  int64x2_t *v4289;
  int64x2_t *v4290;
  int64x2_t *v4291;
  int64x2_t *v4292;
  int64x2_t *v4293;
  int64x2_t *v4294;
  uint64_t *v4295;
  uint64_t v4296;
  uint64_t v4297;
  uint64_t v4298;
  uint64_t v4299;
  unsigned int v4300;
  unsigned int v4301;
  unsigned int *v4302;
  uint64_t v4303;
  unsigned int v4304;
  uint64_t *v4305;
  int v4306;
  unsigned int v4307;
  uint64_t *v4308;
  uint64_t v4309;
  unsigned int v4310;
  unsigned int v4311;
  uint64_t v4312;
  uint64_t v4313;
  uint64_t v4314;
  uint64_t v4315;
  uint64_t v4316;
  __int128 v4317;
  int64x2_t v4318;
  __int128 v4319;
  __int128 v4320;
  __int128 v4321;
  __int128 v4322;
  __int128 v4323;
  uint64_t v4324;
  __int128 v4325;
  __int128 v4326;
  __int128 v4327;
  __int128 v4328;
  uint64_t v4329;
  uint64_t v4330;
  uint64_t v4331;
  int64x2_t v4332;
  int64x2_t *v4333;
  int64x2_t v4334;
  int64x2_t v4335;
  int64x2_t v4336;
  int64x2_t v4337;
  int64x2_t v4338;
  int64x2_t v4339;
  int64x2_t v4340;
  uint64_t v4341;
  __int128 v4342;
  __int128 v4343;
  __int128 v4344;
  __int128 v4345;
  int64x2_t v4346;
  int64x2_t v4347;
  int64x2_t *v4348;
  int64x2_t *v4349;
  int64x2_t *v4350;
  int64x2_t *v4351;
  int64x2_t *v4352;
  int64x2_t *v4353;
  int64x2_t *v4354;
  int64x2_t *v4355;
  uint64_t *v4356;
  uint64_t v4357;
  uint64_t v4358;
  uint64_t v4359;
  uint64_t v4360;
  unsigned int v4361;
  unsigned int v4362;
  unsigned int *v4363;
  uint64_t v4364;
  unsigned int v4365;
  uint64_t *v4366;
  int v4367;
  unsigned int v4368;
  uint64_t *v4369;
  uint64_t v4370;
  unsigned int v4371;
  unsigned int v4372;
  uint64_t v4373;
  uint64_t v4374;
  uint64_t v4375;
  uint64_t v4376;
  uint64_t v4377;
  __int128 v4378;
  int64x2_t v4379;
  __int128 v4380;
  __int128 v4381;
  __int128 v4382;
  __int128 v4383;
  __int128 v4384;
  uint64_t v4385;
  __int128 v4386;
  __int128 v4387;
  __int128 v4388;
  __int128 v4389;
  uint64_t v4390;
  uint64_t v4391;
  uint64_t v4392;
  int64x2_t v4393;
  int64x2_t *v4394;
  int64x2_t v4395;
  int64x2_t v4396;
  int64x2_t v4397;
  int64x2_t v4398;
  int64x2_t v4399;
  int64x2_t v4400;
  int64x2_t v4401;
  uint64_t v4402;
  __int128 v4403;
  __int128 v4404;
  __int128 v4405;
  __int128 v4406;
  int64x2_t v4407;
  int64x2_t v4408;
  int64x2_t *v4409;
  int64x2_t *v4410;
  int64x2_t *v4411;
  int64x2_t *v4412;
  int64x2_t *v4413;
  int64x2_t *v4414;
  int64x2_t *v4415;
  int64x2_t *v4416;
  uint64_t *v4417;
  uint64_t v4418;
  uint64_t v4419;
  uint64_t v4420;
  uint64_t v4421;
  unsigned int v4422;
  unsigned int v4423;
  unsigned int *v4424;
  uint64_t v4425;
  unsigned int v4426;
  uint64_t *v4427;
  int v4428;
  unsigned int v4429;
  uint64_t *v4430;
  uint64_t v4431;
  unsigned int v4432;
  unsigned int v4433;
  uint64_t v4434;
  uint64_t v4435;
  uint64_t v4436;
  int64x2_t v4437;
  int64x2_t *v4438;
  int64x2_t v4439;
  int64x2_t v4440;
  int64x2_t v4441;
  int64x2_t v4442;
  int8x16_t v4443;
  int8x16_t v4444;
  int8x16_t v4445;
  int8x16_t v4446;
  unint64_t v4447;
  unint64_t v4448;
  unint64_t v4449;
  int8x16_t v4450;
  int8x16_t v4451;
  unint64_t v4452;
  unint64_t v4453;
  unint64_t v4454;
  int8x16_t v4455;
  int8x16_t v4456;
  int8x16_t v4457;
  int8x16_t v4458;
  unint64_t v4459;
  unint64_t v4460;
  unint64_t v4461;
  int8x16_t v4462;
  int8x16_t v4463;
  unint64_t v4464;
  unint64_t v4465;
  unint64_t v4466;
  int64x2_t *v4467;
  int64x2_t v4468;
  int64x2_t v4469;
  int64x2_t v4470;
  int64x2_t v4471;
  int64x2_t v4472;
  int64x2_t v4473;
  int64x2_t v4474;
  int64x2_t v4475;
  int64x2_t v4476;
  int64x2_t v4477;
  int64x2_t v4478;
  int64x2_t v4479;
  int64x2_t v4480;
  int64x2_t v4481;
  int64x2_t v4482;
  int64x2_t v4483;
  int8x16_t *v4484;
  int8x16_t *v4485;
  int8x16_t *v4486;
  int8x16_t *v4487;
  uint64_t *v4488;
  uint64_t v4489;
  uint64_t v4490;
  uint64_t v4491;
  uint64_t v4492;
  unsigned int v4493;
  unsigned int v4494;
  unsigned int *v4495;
  uint64_t v4496;
  unsigned int v4497;
  uint64_t *v4498;
  int v4499;
  unsigned int v4500;
  uint64_t *v4501;
  uint64_t v4502;
  unsigned int v4503;
  unsigned int v4504;
  uint64_t v4505;
  uint64_t v4506;
  uint64_t v4507;
  int64x2_t v4508;
  int64x2_t *v4509;
  int64x2_t v4510;
  __int128 v4511;
  __int128 v4512;
  __int128 v4513;
  int64x2_t v4514;
  int64x2_t v4515;
  int64x2_t v4516;
  __int128 v4517;
  __int128 v4518;
  __int128 v4519;
  int64x2_t v4520;
  int64x2_t v4521;
  int64x2_t v4522;
  __int128 v4523;
  __int128 v4524;
  __int128 v4525;
  int64x2_t v4526;
  int64x2_t v4527;
  int64x2_t v4528;
  __int128 v4529;
  __int128 v4530;
  __int128 v4531;
  int64x2_t v4532;
  int64x2_t v4533;
  int64x2_t v4534;
  __int8 *v4535;
  int64x2_t *v4536;
  __int8 *v4537;
  int64x2_t *v4538;
  __int8 *v4539;
  int64x2_t *v4540;
  __int8 *v4541;
  int64x2_t *v4542;
  int64x2_t v4543;
  int64x2_t *v4544;
  int64x2_t v4545;
  int64x2_t v4546;
  int64x2_t v4547;
  int64x2_t v4548;
  int64x2_t v4549;
  int64x2_t v4550;
  int64x2_t v4551;
  int64x2_t v4552;
  int64x2_t v4553;
  int64x2_t v4554;
  int64x2_t v4555;
  int64x2_t v4556;
  int64x2_t v4557;
  int64x2_t v4558;
  int64x2_t v4559;
  int64x2_t v4560;
  int64x2_t v4561;
  int64x2_t v4562;
  int64x2_t v4563;
  int64x2_t v4564;
  int64x2_t v4565;
  int64x2_t v4566;
  __int128 v4567;
  __int128 v4568;
  __int128 v4569;
  int64x2_t v4570;
  int64x2_t v4571;
  int64x2_t *v4572;
  int64x2_t *v4573;
  int64x2_t *v4574;
  int64x2_t *v4575;
  int64x2_t *v4576;
  uint64_t *v4577;
  uint64_t v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  unsigned int v4582;
  unsigned int v4583;
  unsigned int *v4584;
  uint64_t v4585;
  unsigned int v4586;
  uint64_t *v4587;
  int v4588;
  unsigned int v4589;
  uint64_t *v4590;
  uint64_t v4591;
  unsigned int v4592;
  unsigned int v4593;
  uint64_t v4594;
  uint64_t v4595;
  uint64_t v4596;
  int64x2_t v4597;
  int64x2_t *v4598;
  int64x2_t v4599;
  int64x2_t v4600;
  int64x2_t v4601;
  int64x2_t v4602;
  int8x16_t v4603;
  int8x16_t v4604;
  int8x16_t v4605;
  int8x16_t v4606;
  unint64_t v4607;
  unint64_t v4608;
  unint64_t v4609;
  int8x16_t v4610;
  int8x16_t v4611;
  unint64_t v4612;
  unint64_t v4613;
  unint64_t v4614;
  int8x16_t v4615;
  int8x16_t v4616;
  int8x16_t v4617;
  int8x16_t v4618;
  unint64_t v4619;
  unint64_t v4620;
  unint64_t v4621;
  int8x16_t v4622;
  int8x16_t v4623;
  unint64_t v4624;
  unint64_t v4625;
  unint64_t v4626;
  int64x2_t *v4627;
  int64x2_t v4628;
  int64x2_t v4629;
  int64x2_t v4630;
  int64x2_t v4631;
  int64x2_t v4632;
  int64x2_t v4633;
  int64x2_t v4634;
  int64x2_t v4635;
  int64x2_t v4636;
  int64x2_t v4637;
  int64x2_t v4638;
  int64x2_t v4639;
  int64x2_t v4640;
  int64x2_t v4641;
  int64x2_t v4642;
  int64x2_t v4643;
  int8x16_t *v4644;
  int8x16_t *v4645;
  int8x16_t *v4646;
  int8x16_t *v4647;
  uint64_t *v4648;
  uint64_t v4649;
  uint64_t v4650;
  uint64_t v4651;
  uint64_t v4652;
  unsigned int v4653;
  unsigned int v4654;
  unsigned int *v4655;
  uint64_t v4656;
  unsigned int v4657;
  uint64_t *v4658;
  int v4659;
  unsigned int v4660;
  uint64_t *v4661;
  uint64_t v4662;
  unsigned int v4663;
  unsigned int v4664;
  uint64_t v4665;
  uint64_t v4666;
  uint64_t v4667;
  int64x2_t v4668;
  int64x2_t *v4669;
  int64x2_t v4670;
  int64x2_t v4671;
  int64x2_t v4672;
  int64x2_t v4673;
  int8x16_t v4674;
  int8x16_t v4675;
  int8x16_t v4676;
  int8x16_t v4677;
  unint64_t v4678;
  unint64_t v4679;
  unint64_t v4680;
  int8x16_t v4681;
  int8x16_t v4682;
  unint64_t v4683;
  unint64_t v4684;
  unint64_t v4685;
  int8x16_t v4686;
  int8x16_t v4687;
  int8x16_t v4688;
  int8x16_t v4689;
  unint64_t v4690;
  unint64_t v4691;
  unint64_t v4692;
  int8x16_t v4693;
  int8x16_t v4694;
  unint64_t v4695;
  unint64_t v4696;
  unint64_t v4697;
  int64x2_t *v4698;
  int64x2_t v4699;
  int64x2_t v4700;
  int64x2_t v4701;
  int64x2_t v4702;
  int64x2_t v4703;
  int64x2_t v4704;
  int64x2_t v4705;
  int64x2_t v4706;
  int64x2_t v4707;
  int64x2_t v4708;
  int64x2_t v4709;
  int64x2_t v4710;
  int64x2_t v4711;
  int64x2_t v4712;
  int64x2_t v4713;
  int64x2_t v4714;
  int8x16_t *v4715;
  int8x16_t *v4716;
  int8x16_t *v4717;
  int8x16_t *v4718;
  uint64_t *v4719;
  uint64_t v4720;
  uint64_t v4721;
  uint64_t v4722;
  uint64_t v4723;
  unsigned int v4724;
  unsigned int v4725;
  unsigned int *v4726;
  uint64_t v4727;
  unsigned int v4728;
  uint64_t *v4729;
  int v4730;
  unsigned int v4731;
  uint64_t *v4732;
  uint64_t v4733;
  unsigned int v4734;
  unsigned int v4735;
  uint64_t v4736;
  uint64_t v4737;
  uint64_t v4738;
  int64x2_t v4739;
  int64x2_t *v4740;
  int64x2_t v4741;
  __int128 v4742;
  __int128 v4743;
  __int128 v4744;
  int64x2_t v4745;
  int64x2_t v4746;
  int64x2_t v4747;
  __int8 *v4748;
  int64x2_t *v4749;
  int64x2_t v4750;
  int64x2_t *v4751;
  int64x2_t v4752;
  int64x2_t v4753;
  int64x2_t v4754;
  int64x2_t v4755;
  __int128 v4756;
  __int128 v4757;
  __int128 v4758;
  int64x2_t v4759;
  int64x2_t v4760;
  int64x2_t *v4761;
  int64x2_t *v4762;
  int64x2_t *v4763;
  int64x2_t *v4764;
  int64x2_t *v4765;
  uint64_t *v4766;
  uint64_t v4767;
  uint64_t v4768;
  uint64_t v4769;
  uint64_t v4770;
  unsigned int v4771;
  unsigned int v4772;
  unsigned int *v4773;
  uint64_t v4774;
  unsigned int v4775;
  uint64_t *v4776;
  int v4777;
  unsigned int v4778;
  uint64_t *v4779;
  uint64_t v4780;
  unsigned int v4781;
  unsigned int v4782;
  int8x16_t *v4783;
  uint64_t v4784;
  uint64_t v4785;
  int8x16_t v4786;
  int8x16_t v4787;
  int8x16_t v4788;
  unint64_t v4789;
  unint64_t v4790;
  unint64_t v4791;
  int8x16_t *v4792;
  _QWORD *v4793;
  uint64_t *v4794;
  uint64_t v4795;
  uint64_t v4796;
  uint64_t v4797;
  uint64_t v4798;
  unsigned int v4799;
  unsigned int v4800;
  unsigned int *v4801;
  uint64_t v4802;
  unsigned int v4803;
  uint64_t *v4804;
  int v4805;
  unsigned int v4806;
  uint64_t *v4807;
  uint64_t v4808;
  unsigned int v4809;
  unsigned int v4810;
  uint64_t v4811;
  uint64_t v4812;
  uint64_t v4813;
  int64x2_t v4814;
  int64x2_t *v4815;
  int64x2_t v4816;
  __int128 v4817;
  __int128 v4818;
  __int128 v4819;
  int64x2_t v4820;
  int64x2_t v4821;
  int64x2_t v4822;
  __int128 v4823;
  __int128 v4824;
  __int128 v4825;
  __int8 *v4826;
  int64x2_t *v4827;
  __int8 *v4828;
  int64x2_t v4829;
  int64x2_t *v4830;
  int64x2_t v4831;
  int64x2_t v4832;
  int64x2_t v4833;
  int64x2_t v4834;
  int64x2_t v4835;
  int64x2_t v4836;
  int64x2_t v4837;
  int64x2_t v4838;
  int64x2_t v4839;
  int64x2_t v4840;
  int64x2_t v4841;
  int64x2_t *v4842;
  int64x2_t *v4843;
  int64x2_t *v4844;
  int64x2_t *v4845;
  int64x2_t *v4846;
  uint64_t *v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  uint64_t v4851;
  unsigned int v4852;
  unsigned int v4853;
  unsigned int *v4854;
  uint64_t v4855;
  unsigned int v4856;
  uint64_t *v4857;
  int v4858;
  unsigned int v4859;
  uint64_t *v4860;
  uint64_t v4861;
  unsigned int v4862;
  unsigned int v4863;
  uint64_t v4864;
  uint64_t v4865;
  uint64_t v4866;
  int64x2_t v4867;
  int64x2_t *v4868;
  int64x2_t v4869;
  __int128 v4870;
  __int128 v4871;
  __int128 v4872;
  int64x2_t v4873;
  int64x2_t v4874;
  int64x2_t v4875;
  __int128 v4876;
  __int128 v4877;
  __int128 v4878;
  __int8 *v4879;
  int64x2_t *v4880;
  __int8 *v4881;
  int64x2_t v4882;
  int64x2_t *v4883;
  int64x2_t v4884;
  int64x2_t v4885;
  int64x2_t v4886;
  int64x2_t v4887;
  int64x2_t v4888;
  int64x2_t v4889;
  int64x2_t v4890;
  int64x2_t v4891;
  int64x2_t v4892;
  int64x2_t v4893;
  int64x2_t v4894;
  int64x2_t *v4895;
  int64x2_t *v4896;
  int64x2_t *v4897;
  int64x2_t *v4898;
  int64x2_t *v4899;
  uint64_t *v4900;
  uint64_t v4901;
  uint64_t v4902;
  uint64_t v4903;
  uint64_t v4904;
  unsigned int v4905;
  unsigned int v4906;
  unsigned int *v4907;
  uint64_t v4908;
  unsigned int v4909;
  uint64_t *v4910;
  int v4911;
  unsigned int v4912;
  uint64_t *v4913;
  uint64_t v4914;
  unsigned int v4915;
  unsigned int v4916;
  uint64_t v4917;
  uint64_t v4918;
  uint64_t v4919;
  int64x2_t v4920;
  int64x2_t *v4921;
  int64x2_t v4922;
  __int128 v4923;
  __int128 v4924;
  __int128 v4925;
  int64x2_t v4926;
  int64x2_t v4927;
  int64x2_t v4928;
  __int8 *v4929;
  int64x2_t *v4930;
  int64x2_t v4931;
  int64x2_t *v4932;
  int64x2_t v4933;
  int64x2_t v4934;
  int64x2_t v4935;
  int64x2_t v4936;
  __int128 v4937;
  __int128 v4938;
  __int128 v4939;
  int64x2_t v4940;
  int64x2_t v4941;
  int64x2_t *v4942;
  int64x2_t *v4943;
  int64x2_t *v4944;
  int64x2_t *v4945;
  int64x2_t *v4946;
  uint64_t *v4947;
  uint64_t v4948;
  uint64_t v4949;
  uint64_t v4950;
  uint64_t v4951;
  unsigned int v4952;
  unsigned int v4953;
  unsigned int *v4954;
  uint64_t v4955;
  unsigned int v4956;
  uint64_t *v4957;
  int v4958;
  unsigned int v4959;
  uint64_t *v4960;
  uint64_t v4961;
  unsigned int v4962;
  unsigned int v4963;
  uint64_t v4964;
  uint64_t v4965;
  uint64_t v4966;
  int64x2_t v4967;
  int64x2_t *v4968;
  int64x2_t v4969;
  __int128 v4970;
  __int128 v4971;
  __int128 v4972;
  int64x2_t v4973;
  int64x2_t v4974;
  int64x2_t v4975;
  __int8 *v4976;
  int64x2_t *v4977;
  int64x2_t v4978;
  int64x2_t *v4979;
  int64x2_t v4980;
  int64x2_t v4981;
  int64x2_t v4982;
  int64x2_t v4983;
  __int128 v4984;
  __int128 v4985;
  __int128 v4986;
  int64x2_t v4987;
  int64x2_t v4988;
  int64x2_t *v4989;
  int64x2_t *v4990;
  int64x2_t *v4991;
  int64x2_t *v4992;
  int64x2_t *v4993;
  uint64_t *v4994;
  uint64_t v4995;
  uint64_t v4996;
  uint64_t v4997;
  uint64_t v4998;
  unint64_t v4999;
  unint64_t v5000;
  unint64_t v5001;
  unint64_t v5002;
  unint64_t v5003;
  unint64_t v5004;
  unint64_t v5005;
  uint64_t v5006;
  uint64_t v5007;
  uint64_t v5008;
  uint64_t v5009;
  uint64_t v5010;
  uint64_t v5011;
  uint64_t v5012;
  uint64_t v5013;
  unint64_t v5014;
  uint64_t v5015;
  unint64_t v5016;
  uint64_t v5017;
  uint64_t v5018;
  unint64_t v5019;
  unint64_t v5020;
  uint64_t v5021;
  uint64_t v5022;
  uint64_t v5023;
  uint64_t v5024;
  int64x2_t v5025;
  uint64_t v5026;
  int64x2_t v5027;
  uint64_t v5028;
  int64x2_t v5029;
  uint64_t v5030;
  uint64_t v5031;
  uint64_t v5032;
  int64x2_t v5033;
  uint64_t v5034;
  uint64_t v5035;
  uint64_t v5036;
  __int128 v5037;
  uint64_t v5038;
  int64x2_t v5039;
  uint64_t v5040;
  int64x2_t v5041;
  __int128 v5042;
  uint64_t v5043;
  uint64_t v5044;
  uint64_t v5045;
  __int128 v5046;
  __int128 v5047;
  uint64_t v5048;
  int8x16_t v5049;

  v5 = *a5;
  v6 = *(_DWORD *)(result + 1308);
  if (v6)
  {
    v7 = 0;
    v8 = *a4;
    do
    {
      v9 = *(_QWORD *)(result + 1384);
      v10 = *(_DWORD *)(result + 1408) * v7;
      v11 = (uint64_t *)(v9 + 8 * v10);
      v12 = *(_DWORD *)(result + 1304);
      if (v12 && *v11 == -1)
      {
        v13 = 0;
        v53 = 8 * (v12 + v10) - 8 * v10 - 8;
        v54 = v9 + 8 * v10;
        while (v53)
        {
          v11 = (uint64_t *)(v54 + 8);
          ++v13;
          v55 = *(_QWORD *)(v54 + 8);
          v53 -= 8;
          v54 += 8;
          if (v55 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v13 = 0;
LABEL_8:
        v14 = (uint64_t *)(v9 + 8 * (v10 + v12));
        if (v11 != v14)
        {
          v15 = *v11;
LABEL_10:
          v16 = *v8;
          v17 = *(_DWORD *)(a3[27] + 4 * v13);
          v18 = *(_QWORD *)(result + 1312) + 8 * v15;
          v19 = *((unsigned int *)a2 + 4);
          v20 = *a2;
          if (v5 && v16 < v17)
          {
            v21 = *(int64x2_t *)v18;
            v22 = (int64x2_t *)(v20 + 8 * (v17 + (_DWORD)v19 * v16));
            v23 = *(_OWORD *)(v18 + 24);
            v24 = *(_QWORD *)(v18 + 40);
            v25 = *(int64x2_t *)(v18 + 48);
            v26 = *(_QWORD *)(v18 + 64);
            v27 = *(_OWORD *)(v18 + 72);
            v28 = *(_QWORD *)(v18 + 88);
            v29 = *(int64x2_t *)(v18 + 96);
            v30 = *(_QWORD *)(v18 + 112);
            v31 = *(_OWORD *)(v18 + 120);
            v32 = *(_QWORD *)(v18 + 136);
            v22[1].i64[0] = *(_QWORD *)(v18 + 16);
            *v22 = v21;
            v33 = &v22->i8[8 * v19];
            *((_QWORD *)v33 + 2) = v24;
            *(_OWORD *)v33 = v23;
            v34 = &v22[v19];
            v34[1].i64[0] = v26;
            *v34 = v25;
            v35 = &v22->i8[24 * v19];
            *((_QWORD *)v35 + 2) = v28;
            *(_OWORD *)v35 = v27;
            v36 = &v22[2 * v19];
            v36[1].i64[0] = v30;
            *v36 = v29;
            v37 = &v22->i8[40 * v19];
            *((_QWORD *)v37 + 2) = v32;
            *(_OWORD *)v37 = v31;
          }
          else
          {
            v38 = (int64x2_t *)(v20 + 8 * (v16 + (_DWORD)v19 * v17));
            v39.i64[0] = *(_QWORD *)(v18 + 16);
            v40 = *(int64x2_t *)(v18 + 24);
            v41.i64[0] = *(_QWORD *)(v18 + 64);
            v42 = *(int64x2_t *)(v18 + 48);
            v43 = *(int64x2_t *)(v18 + 72);
            v44.i64[0] = *(_QWORD *)(v18 + 112);
            v45 = *(int64x2_t *)(v18 + 96);
            v46 = *(int64x2_t *)(v18 + 120);
            v47 = vzip1q_s64(*(int64x2_t *)v18, v40);
            v48 = vzip2q_s64(*(int64x2_t *)v18, v40);
            v39.i64[1] = *(_QWORD *)(v18 + 40);
            v41.i64[1] = *(_QWORD *)(v18 + 88);
            v44.i64[1] = *(_QWORD *)(v18 + 136);
            v38[1] = vzip1q_s64(v42, v43);
            v38[2] = vzip1q_s64(v45, v46);
            *v38 = v47;
            v49 = (int64x2_t *)((char *)v38 + 8 * v19);
            v49[1] = vzip1q_s64(vdupq_laneq_s64(v42, 1), vdupq_laneq_s64(v43, 1));
            v49[2] = vzip2q_s64(v45, v46);
            *v49 = v48;
            v50 = &v38[v19];
            v50[1] = v41;
            v50[2] = v44;
            *v50 = v39;
          }
          v51 = v11 + 1;
          while (v51 != v14)
          {
            ++v13;
            v52 = *v51++;
            v15 = v52;
            if (v52 != -1)
            {
              v11 = v51 - 1;
              goto LABEL_10;
            }
          }
          v6 = *(_DWORD *)(result + 1308);
        }
      }
      ++v7;
      ++v8;
    }
    while (v7 < v6);
    v5 = *a5;
  }
  v56 = *(_DWORD *)(result + 2748);
  if (v56)
  {
    v57 = 0;
    v58 = a4[3];
    do
    {
      v59 = *(_QWORD *)(result + 2824);
      v60 = *(_DWORD *)(result + 2848) * v57;
      v61 = (uint64_t *)(v59 + 8 * v60);
      v62 = *(_DWORD *)(result + 2744);
      if (v62 && *v61 == -1)
      {
        v63 = 0;
        v117 = 8 * (v62 + v60) - 8 * v60 - 8;
        v118 = v59 + 8 * v60;
        while (v117)
        {
          v61 = (uint64_t *)(v118 + 8);
          ++v63;
          v119 = *(_QWORD *)(v118 + 8);
          v117 -= 8;
          v118 += 8;
          if (v119 != -1)
            goto LABEL_30;
        }
      }
      else
      {
        v63 = 0;
LABEL_30:
        v64 = (uint64_t *)(v59 + 8 * (v60 + v62));
        if (v61 != v64)
        {
          v65 = *v61;
LABEL_32:
          v66 = *v58;
          v67 = *(_DWORD *)(a3[27] + 4 * v63);
          v68 = *(_QWORD *)(result + 2752) + 8 * v65;
          v69 = *((unsigned int *)a2 + 4);
          v70 = *a2;
          if (v5 && v66 < v67)
          {
            v71 = *(int64x2_t *)v68;
            v72 = (int64x2_t *)(v70 + 8 * (v67 + (_DWORD)v69 * v66));
            v73 = *(_OWORD *)(v68 + 24);
            v74 = *(_QWORD *)(v68 + 40);
            v75 = *(int64x2_t *)(v68 + 48);
            v76 = *(_QWORD *)(v68 + 64);
            v77 = *(_OWORD *)(v68 + 72);
            v78 = *(_QWORD *)(v68 + 88);
            v79 = *(int64x2_t *)(v68 + 96);
            v80 = *(_QWORD *)(v68 + 112);
            v81 = *(_OWORD *)(v68 + 120);
            v82 = *(_QWORD *)(v68 + 136);
            v83 = *(int64x2_t *)(v68 + 144);
            v84 = *(_QWORD *)(v68 + 160);
            v85 = *(_OWORD *)(v68 + 168);
            v86 = *(_QWORD *)(v68 + 184);
            v87 = *(int64x2_t *)(v68 + 192);
            v88 = *(_QWORD *)(v68 + 208);
            v72[1].i64[0] = *(_QWORD *)(v68 + 16);
            *v72 = v71;
            v89 = &v72->i8[8 * v69];
            *((_QWORD *)v89 + 2) = v74;
            *(_OWORD *)v89 = v73;
            v90 = &v72[v69];
            v90[1].i64[0] = v76;
            *v90 = v75;
            v91 = &v72->i8[24 * v69];
            *((_QWORD *)v91 + 2) = v78;
            *(_OWORD *)v91 = v77;
            v92 = &v72[2 * v69];
            v92[1].i64[0] = v80;
            *v92 = v79;
            v93 = &v72->i8[40 * v69];
            *((_QWORD *)v93 + 2) = v82;
            *(_OWORD *)v93 = v81;
            v94 = &v72[3 * v69];
            v94[1].i64[0] = v84;
            *v94 = v83;
            v95 = &v72->i8[56 * v69];
            *((_QWORD *)v95 + 2) = v86;
            *(_OWORD *)v95 = v85;
            v96 = &v72[4 * v69];
            v96[1].i64[0] = v88;
            *v96 = v87;
          }
          else
          {
            v97.i64[0] = *(_QWORD *)(v68 + 16);
            v98 = (int64x2_t *)(v70 + 8 * (v66 + (_DWORD)v69 * v67));
            v99 = *(int64x2_t *)(v68 + 24);
            v100.i64[0] = *(_QWORD *)(v68 + 64);
            v101 = *(int64x2_t *)(v68 + 48);
            v102 = *(int64x2_t *)(v68 + 72);
            v103.i64[0] = *(_QWORD *)(v68 + 112);
            v104 = *(int64x2_t *)(v68 + 96);
            v105 = *(int64x2_t *)(v68 + 120);
            v106.i64[0] = *(_QWORD *)(v68 + 160);
            v107 = *(int64x2_t *)(v68 + 144);
            v108 = *(int64x2_t *)(v68 + 168);
            v109 = *(_QWORD *)(v68 + 208);
            v110 = *(_OWORD *)(v68 + 192);
            v111 = vzip1q_s64(*(int64x2_t *)v68, v99);
            v112 = vzip2q_s64(*(int64x2_t *)v68, v99);
            v97.i64[1] = *(_QWORD *)(v68 + 40);
            v100.i64[1] = *(_QWORD *)(v68 + 88);
            v103.i64[1] = *(_QWORD *)(v68 + 136);
            v106.i64[1] = *(_QWORD *)(v68 + 184);
            v98[2] = vzip1q_s64(v104, v105);
            v98[3] = vzip1q_s64(v107, v108);
            v98[4].i64[0] = v110;
            *v98 = v111;
            v98[1] = vzip1q_s64(v101, v102);
            v113 = (int64x2_t *)((char *)v98 + 8 * v69);
            v113[2] = vzip2q_s64(v104, v105);
            v113[3] = vzip2q_s64(v107, v108);
            *v113 = v112;
            v113[1] = vzip2q_s64(v101, v102);
            v113[4].i64[0] = *((_QWORD *)&v110 + 1);
            v114 = &v98[v69];
            v114[4].i64[0] = v109;
            v114[2] = v103;
            v114[3] = v106;
            *v114 = v97;
            v114[1] = v100;
          }
          v115 = v61 + 1;
          while (v115 != v64)
          {
            ++v63;
            v116 = *v115++;
            v65 = v116;
            if (v116 != -1)
            {
              v61 = v115 - 1;
              goto LABEL_32;
            }
          }
          v56 = *(_DWORD *)(result + 2748);
        }
      }
      ++v57;
      ++v58;
    }
    while (v57 < v56);
    v5 = *a5;
  }
  v120 = *(_DWORD *)(result + 4188);
  if (v120)
  {
    v121 = 0;
    v122 = a4[6];
    do
    {
      v123 = *(_QWORD *)(result + 4264);
      v124 = *(_DWORD *)(result + 4288) * v121;
      v125 = (uint64_t *)(v123 + 8 * v124);
      v126 = *(_DWORD *)(result + 4184);
      if (v126 && *v125 == -1)
      {
        v127 = 0;
        v167 = 8 * (v126 + v124) - 8 * v124 - 8;
        v168 = v123 + 8 * v124;
        while (v167)
        {
          v125 = (uint64_t *)(v168 + 8);
          ++v127;
          v169 = *(_QWORD *)(v168 + 8);
          v167 -= 8;
          v168 += 8;
          if (v169 != -1)
            goto LABEL_52;
        }
      }
      else
      {
        v127 = 0;
LABEL_52:
        v128 = (uint64_t *)(v123 + 8 * (v124 + v126));
        if (v125 != v128)
        {
          v129 = *v125;
LABEL_54:
          v130 = *v122;
          v131 = *(_DWORD *)(a3[27] + 4 * v127);
          v132 = *(_QWORD *)(result + 4192) + 8 * v129;
          v133 = *((unsigned int *)a2 + 4);
          v134 = *a2;
          if (v5 && v130 < v131)
          {
            v135 = *(int64x2_t *)v132;
            v136 = (int64x2_t *)(v134 + 8 * (v131 + (_DWORD)v133 * v130));
            v137 = *(_OWORD *)(v132 + 24);
            v138 = *(_QWORD *)(v132 + 40);
            v139 = *(int64x2_t *)(v132 + 48);
            v140 = *(_QWORD *)(v132 + 64);
            v141 = *(_OWORD *)(v132 + 72);
            v142 = *(_QWORD *)(v132 + 88);
            v143 = *(int64x2_t *)(v132 + 96);
            v144 = *(_QWORD *)(v132 + 112);
            v145 = *(_OWORD *)(v132 + 120);
            v146 = *(_QWORD *)(v132 + 136);
            v136[1].i64[0] = *(_QWORD *)(v132 + 16);
            *v136 = v135;
            v147 = &v136->i8[8 * v133];
            *((_QWORD *)v147 + 2) = v138;
            *(_OWORD *)v147 = v137;
            v148 = &v136[v133];
            v148[1].i64[0] = v140;
            *v148 = v139;
            v149 = &v136->i8[24 * v133];
            *((_QWORD *)v149 + 2) = v142;
            *(_OWORD *)v149 = v141;
            v150 = &v136[2 * v133];
            v150[1].i64[0] = v144;
            *v150 = v143;
            v151 = &v136->i8[40 * v133];
            *((_QWORD *)v151 + 2) = v146;
            *(_OWORD *)v151 = v145;
          }
          else
          {
            v152 = (int64x2_t *)(v134 + 8 * (v130 + (_DWORD)v133 * v131));
            v153.i64[0] = *(_QWORD *)(v132 + 16);
            v154 = *(int64x2_t *)(v132 + 24);
            v155.i64[0] = *(_QWORD *)(v132 + 64);
            v156 = *(int64x2_t *)(v132 + 48);
            v157 = *(int64x2_t *)(v132 + 72);
            v158.i64[0] = *(_QWORD *)(v132 + 112);
            v159 = *(int64x2_t *)(v132 + 96);
            v160 = *(int64x2_t *)(v132 + 120);
            v161 = vzip1q_s64(*(int64x2_t *)v132, v154);
            v162 = vzip2q_s64(*(int64x2_t *)v132, v154);
            v153.i64[1] = *(_QWORD *)(v132 + 40);
            v155.i64[1] = *(_QWORD *)(v132 + 88);
            v158.i64[1] = *(_QWORD *)(v132 + 136);
            v152[1] = vzip1q_s64(v156, v157);
            v152[2] = vzip1q_s64(v159, v160);
            *v152 = v161;
            v163 = (int64x2_t *)((char *)v152 + 8 * v133);
            v163[1] = vzip1q_s64(vdupq_laneq_s64(v156, 1), vdupq_laneq_s64(v157, 1));
            v163[2] = vzip2q_s64(v159, v160);
            *v163 = v162;
            v164 = &v152[v133];
            v164[1] = v155;
            v164[2] = v158;
            *v164 = v153;
          }
          v165 = v125 + 1;
          while (v165 != v128)
          {
            ++v127;
            v166 = *v165++;
            v129 = v166;
            if (v166 != -1)
            {
              v125 = v165 - 1;
              goto LABEL_54;
            }
          }
          v120 = *(_DWORD *)(result + 4188);
        }
      }
      ++v121;
      ++v122;
    }
    while (v121 < v120);
    v5 = *a5;
  }
  v170 = *(_DWORD *)(result + 5628);
  if (v170)
  {
    v171 = 0;
    v172 = a4[9];
    do
    {
      v173 = *(_QWORD *)(result + 5704);
      v174 = *(_DWORD *)(result + 5728) * v171;
      v175 = (uint64_t *)(v173 + 8 * v174);
      v176 = *(_DWORD *)(result + 5624);
      if (v176 && *v175 == -1)
      {
        v177 = 0;
        v217 = 8 * (v176 + v174) - 8 * v174 - 8;
        v218 = v173 + 8 * v174;
        while (v217)
        {
          v175 = (uint64_t *)(v218 + 8);
          ++v177;
          v219 = *(_QWORD *)(v218 + 8);
          v217 -= 8;
          v218 += 8;
          if (v219 != -1)
            goto LABEL_74;
        }
      }
      else
      {
        v177 = 0;
LABEL_74:
        v178 = (uint64_t *)(v173 + 8 * (v174 + v176));
        if (v175 != v178)
        {
          v179 = *v175;
LABEL_76:
          v180 = *v172;
          v181 = *(_DWORD *)(a3[27] + 4 * v177);
          v182 = *(_QWORD *)(result + 5632) + 8 * v179;
          v183 = *((unsigned int *)a2 + 4);
          v184 = *a2;
          if (v5 && v180 < v181)
          {
            v185 = *(int64x2_t *)v182;
            v186 = (int64x2_t *)(v184 + 8 * (v181 + (_DWORD)v183 * v180));
            v187 = *(_OWORD *)(v182 + 24);
            v188 = *(_QWORD *)(v182 + 40);
            v189 = *(int64x2_t *)(v182 + 48);
            v190 = *(_QWORD *)(v182 + 64);
            v191 = *(_OWORD *)(v182 + 72);
            v192 = *(_QWORD *)(v182 + 88);
            v193 = *(int64x2_t *)(v182 + 96);
            v194 = *(_QWORD *)(v182 + 112);
            v195 = *(_OWORD *)(v182 + 120);
            v196 = *(_QWORD *)(v182 + 136);
            v186[1].i64[0] = *(_QWORD *)(v182 + 16);
            *v186 = v185;
            v197 = &v186->i8[8 * v183];
            *((_QWORD *)v197 + 2) = v188;
            *(_OWORD *)v197 = v187;
            v198 = &v186[v183];
            v198[1].i64[0] = v190;
            *v198 = v189;
            v199 = &v186->i8[24 * v183];
            *((_QWORD *)v199 + 2) = v192;
            *(_OWORD *)v199 = v191;
            v200 = &v186[2 * v183];
            v200[1].i64[0] = v194;
            *v200 = v193;
            v201 = &v186->i8[40 * v183];
            *((_QWORD *)v201 + 2) = v196;
            *(_OWORD *)v201 = v195;
          }
          else
          {
            v202 = (int64x2_t *)(v184 + 8 * (v180 + (_DWORD)v183 * v181));
            v203.i64[0] = *(_QWORD *)(v182 + 16);
            v204 = *(int64x2_t *)(v182 + 24);
            v205.i64[0] = *(_QWORD *)(v182 + 64);
            v206 = *(int64x2_t *)(v182 + 48);
            v207 = *(int64x2_t *)(v182 + 72);
            v208.i64[0] = *(_QWORD *)(v182 + 112);
            v209 = *(int64x2_t *)(v182 + 96);
            v210 = *(int64x2_t *)(v182 + 120);
            v211 = vzip1q_s64(*(int64x2_t *)v182, v204);
            v212 = vzip2q_s64(*(int64x2_t *)v182, v204);
            v203.i64[1] = *(_QWORD *)(v182 + 40);
            v205.i64[1] = *(_QWORD *)(v182 + 88);
            v208.i64[1] = *(_QWORD *)(v182 + 136);
            v202[1] = vzip1q_s64(v206, v207);
            v202[2] = vzip1q_s64(v209, v210);
            *v202 = v211;
            v213 = (int64x2_t *)((char *)v202 + 8 * v183);
            v213[1] = vzip1q_s64(vdupq_laneq_s64(v206, 1), vdupq_laneq_s64(v207, 1));
            v213[2] = vzip2q_s64(v209, v210);
            *v213 = v212;
            v214 = &v202[v183];
            v214[1] = v205;
            v214[2] = v208;
            *v214 = v203;
          }
          v215 = v175 + 1;
          while (v215 != v178)
          {
            ++v177;
            v216 = *v215++;
            v179 = v216;
            if (v216 != -1)
            {
              v175 = v215 - 1;
              goto LABEL_76;
            }
          }
          v170 = *(_DWORD *)(result + 5628);
        }
      }
      ++v171;
      ++v172;
    }
    while (v171 < v170);
    v5 = *a5;
  }
  v220 = *(_DWORD *)(result + 7068);
  if (v220)
  {
    v221 = 0;
    v222 = a4[12];
    do
    {
      v223 = *(_QWORD *)(result + 7144);
      v224 = *(_DWORD *)(result + 7168) * v221;
      v225 = (uint64_t *)(v223 + 8 * v224);
      v226 = *(_DWORD *)(result + 7064);
      if (v226 && *v225 == -1)
      {
        v227 = 0;
        v253 = 8 * (v226 + v224) - 8 * v224 - 8;
        v254 = v223 + 8 * v224;
        while (v253)
        {
          v225 = (uint64_t *)(v254 + 8);
          ++v227;
          v255 = *(_QWORD *)(v254 + 8);
          v253 -= 8;
          v254 += 8;
          if (v255 != -1)
            goto LABEL_96;
        }
      }
      else
      {
        v227 = 0;
LABEL_96:
        v228 = (uint64_t *)(v223 + 8 * (v224 + v226));
        if (v225 != v228)
        {
          v229 = *v225;
LABEL_98:
          v230 = *v222;
          v231 = *(_DWORD *)(a3[27] + 4 * v227);
          v232 = *(_QWORD *)(result + 7072) + 8 * v229;
          v233 = *((unsigned int *)a2 + 4);
          v234 = *a2;
          if (v5 && v230 < v231)
          {
            v235 = v231 + (_DWORD)v233 * v230;
            v236 = (int64x2_t *)(v234 + 8 * v235);
            v237 = *(int64x2_t *)v232;
            v238 = *(_OWORD *)(v232 + 24);
            v239 = *(_QWORD *)(v232 + 40);
            v240 = *(_QWORD *)(v232 + 64);
            v241 = *(int8x16_t *)(v232 + 48);
            v242 = vextq_s8(v241, v241, 8uLL).u64[0];
            v236[1].i64[0] = *(_QWORD *)(v232 + 16);
            *v236 = v237;
            v243 = &v236->i8[8 * v233];
            *((_QWORD *)v243 + 2) = v239;
            *(_OWORD *)v243 = v238;
          }
          else
          {
            v235 = v230 + (_DWORD)v233 * v231;
            v244 = (int64x2_t *)(v234 + 8 * v235);
            v241.i64[0] = *(_QWORD *)(v232 + 16);
            v242 = *(_QWORD *)(v232 + 40);
            v245 = *(int64x2_t *)(v232 + 24);
            v240 = *(_QWORD *)(v232 + 64);
            v246 = *(_OWORD *)(v232 + 48);
            v247 = vzip1q_s64(*(int64x2_t *)v232, v245);
            v248 = vzip2q_s64(*(int64x2_t *)v232, v245);
            v244[1].i64[0] = v246;
            *v244 = v247;
            v249 = (int64x2_t *)((char *)v244 + 8 * v233);
            *v249 = v248;
            v249[1].i64[0] = *((_QWORD *)&v246 + 1);
          }
          v250 = v234 + 8 * v235 + 16 * v233;
          *(_QWORD *)(v250 + 16) = v240;
          v241.i64[1] = v242;
          *(int8x16_t *)v250 = v241;
          v251 = v225 + 1;
          while (v251 != v228)
          {
            ++v227;
            v252 = *v251++;
            v229 = v252;
            if (v252 != -1)
            {
              v225 = v251 - 1;
              goto LABEL_98;
            }
          }
          v220 = *(_DWORD *)(result + 7068);
        }
      }
      ++v221;
      ++v222;
    }
    while (v221 < v220);
    v5 = *a5;
  }
  v256 = *(_DWORD *)(result + 8508);
  if (v256)
  {
    v257 = 0;
    v258 = a4[15];
    do
    {
      v259 = *(_QWORD *)(result + 8584);
      v260 = *(_DWORD *)(result + 8608) * v257;
      v261 = (uint64_t *)(v259 + 8 * v260);
      v262 = *(_DWORD *)(result + 8504);
      if (v262 && *v261 == -1)
      {
        v263 = 0;
        v278 = 8 * (v262 + v260) - 8 * v260 - 8;
        v279 = v259 + 8 * v260;
        while (v278)
        {
          v261 = (uint64_t *)(v279 + 8);
          ++v263;
          v280 = *(_QWORD *)(v279 + 8);
          v278 -= 8;
          v279 += 8;
          if (v280 != -1)
            goto LABEL_118;
        }
      }
      else
      {
        v263 = 0;
LABEL_118:
        v264 = (uint64_t *)(v259 + 8 * (v260 + v262));
        if (v261 != v264)
        {
          v265 = *v261;
LABEL_120:
          v266 = *v258;
          v267 = *(_DWORD *)(a3[27] + 4 * v263);
          v268 = *(_QWORD *)(result + 8512) + 8 * v265;
          v269 = *((unsigned int *)a2 + 4);
          v270 = *a2;
          v271 = *(int8x16_t *)v268;
          v272 = *(_QWORD *)(v268 + 16);
          v273 = vextq_s8(v271, v271, 8uLL).u64[0];
          if (v5 && v266 < v267)
          {
            v274 = (int8x16_t *)(v270 + 8 * (v267 + (_DWORD)v269 * v266));
            v274[1].i64[0] = v272;
            v271.i64[1] = v273;
            *v274 = v271;
          }
          else
          {
            v275 = (_QWORD *)(v270 + 8 * (v266 + (_DWORD)v269 * v267));
            *v275 = v271.i64[0];
            v275[v269] = v273;
            v275[2 * v269] = v272;
          }
          v276 = v261 + 1;
          while (v276 != v264)
          {
            ++v263;
            v277 = *v276++;
            v265 = v277;
            if (v277 != -1)
            {
              v261 = v276 - 1;
              goto LABEL_120;
            }
          }
          v256 = *(_DWORD *)(result + 8508);
        }
      }
      ++v257;
      ++v258;
    }
    while (v257 < v256);
    v5 = *a5;
  }
  v281 = *(_DWORD *)(result + 9948);
  if (v281)
  {
    v282 = 0;
    v283 = a4[18];
    do
    {
      v284 = *(_QWORD *)(result + 10024);
      v285 = *(_DWORD *)(result + 10048) * v282;
      v286 = (uint64_t *)(v284 + 8 * v285);
      v287 = *(_DWORD *)(result + 9944);
      if (v287 && *v286 == -1)
      {
        v288 = 0;
        v319 = 8 * (v287 + v285) - 8 * v285 - 8;
        v320 = v284 + 8 * v285;
        while (v319)
        {
          v286 = (uint64_t *)(v320 + 8);
          ++v288;
          v321 = *(_QWORD *)(v320 + 8);
          v319 -= 8;
          v320 += 8;
          if (v321 != -1)
            goto LABEL_140;
        }
      }
      else
      {
        v288 = 0;
LABEL_140:
        v289 = (uint64_t *)(v284 + 8 * (v285 + v287));
        if (v286 != v289)
        {
          v290 = *v286;
LABEL_142:
          v291 = *v283;
          v292 = *(_DWORD *)(a3[27] + 4 * v288);
          v293 = *(_QWORD *)(result + 9952) + 8 * v290;
          v294 = *((unsigned int *)a2 + 4);
          v295 = *a2;
          if (v5 && v291 < v292)
          {
            v296 = *(int64x2_t *)v293;
            v297 = (int64x2_t *)(v295 + 8 * (v292 + (_DWORD)v294 * v291));
            v298 = *(_OWORD *)(v293 + 24);
            v299 = *(_QWORD *)(v293 + 40);
            v300 = *(int64x2_t *)(v293 + 48);
            v301 = *(_QWORD *)(v293 + 64);
            v302 = *(_OWORD *)(v293 + 72);
            v303 = *(_QWORD *)(v293 + 88);
            v297[1].i64[0] = *(_QWORD *)(v293 + 16);
            *v297 = v296;
            v304 = &v297->i8[8 * v294];
            *((_QWORD *)v304 + 2) = v299;
            *(_OWORD *)v304 = v298;
            v305 = &v297[v294];
            v305[1].i64[0] = v301;
            *v305 = v300;
            v306 = &v297->i8[24 * v294];
            *((_QWORD *)v306 + 2) = v303;
            *(_OWORD *)v306 = v302;
          }
          else
          {
            v307 = (int64x2_t *)(v295 + 8 * (v291 + (_DWORD)v294 * v292));
            v308.i64[0] = *(_QWORD *)(v293 + 16);
            v309 = *(int64x2_t *)(v293 + 24);
            v310.i64[0] = *(_QWORD *)(v293 + 64);
            v311 = *(int64x2_t *)(v293 + 48);
            v312 = vzip1q_s64(*(int64x2_t *)v293, v309);
            v313 = vzip1q_s64(v311, *(int64x2_t *)(v293 + 72));
            v314 = vzip2q_s64(*(int64x2_t *)v293, v309);
            v309.i64[0] = vdupq_laneq_s64(v311, 1).u64[0];
            v309.i64[1] = *(_QWORD *)(v293 + 80);
            v308.i64[1] = *(_QWORD *)(v293 + 40);
            v310.i64[1] = *(_QWORD *)(v293 + 88);
            *v307 = v312;
            v307[1] = v313;
            v315 = (int64x2_t *)((char *)v307 + 8 * v294);
            *v315 = v314;
            v315[1] = v309;
            v316 = &v307[v294];
            *v316 = v308;
            v316[1] = v310;
          }
          v317 = v286 + 1;
          while (v317 != v289)
          {
            ++v288;
            v318 = *v317++;
            v290 = v318;
            if (v318 != -1)
            {
              v286 = v317 - 1;
              goto LABEL_142;
            }
          }
          v281 = *(_DWORD *)(result + 9948);
        }
      }
      ++v282;
      ++v283;
    }
    while (v282 < v281);
    v5 = *a5;
  }
  v322 = *(_DWORD *)(result + 11388);
  if (v322)
  {
    v323 = 0;
    v324 = a4[21];
    do
    {
      v325 = *(_QWORD *)(result + 11464);
      v326 = *(_DWORD *)(result + 11488) * v323;
      v327 = (uint64_t *)(v325 + 8 * v326);
      v328 = *(_DWORD *)(result + 11384);
      if (v328 && *v327 == -1)
      {
        v329 = 0;
        v360 = 8 * (v328 + v326) - 8 * v326 - 8;
        v361 = v325 + 8 * v326;
        while (v360)
        {
          v327 = (uint64_t *)(v361 + 8);
          ++v329;
          v362 = *(_QWORD *)(v361 + 8);
          v360 -= 8;
          v361 += 8;
          if (v362 != -1)
            goto LABEL_162;
        }
      }
      else
      {
        v329 = 0;
LABEL_162:
        v330 = (uint64_t *)(v325 + 8 * (v326 + v328));
        if (v327 != v330)
        {
          v331 = *v327;
LABEL_164:
          v332 = *v324;
          v333 = *(_DWORD *)(a3[27] + 4 * v329);
          v334 = *(_QWORD *)(result + 11392) + 8 * v331;
          v335 = *((unsigned int *)a2 + 4);
          v336 = *a2;
          if (v5 && v332 < v333)
          {
            v337 = *(int64x2_t *)v334;
            v338 = (int64x2_t *)(v336 + 8 * (v333 + (_DWORD)v335 * v332));
            v339 = *(_OWORD *)(v334 + 24);
            v340 = *(_QWORD *)(v334 + 40);
            v341 = *(int64x2_t *)(v334 + 48);
            v342 = *(_QWORD *)(v334 + 64);
            v343 = *(_OWORD *)(v334 + 72);
            v344 = *(_QWORD *)(v334 + 88);
            v338[1].i64[0] = *(_QWORD *)(v334 + 16);
            *v338 = v337;
            v345 = &v338->i8[8 * v335];
            *((_QWORD *)v345 + 2) = v340;
            *(_OWORD *)v345 = v339;
            v346 = &v338[v335];
            v346[1].i64[0] = v342;
            *v346 = v341;
            v347 = &v338->i8[24 * v335];
            *((_QWORD *)v347 + 2) = v344;
            *(_OWORD *)v347 = v343;
          }
          else
          {
            v348 = (int64x2_t *)(v336 + 8 * (v332 + (_DWORD)v335 * v333));
            v349.i64[0] = *(_QWORD *)(v334 + 16);
            v350 = *(int64x2_t *)(v334 + 24);
            v351.i64[0] = *(_QWORD *)(v334 + 64);
            v352 = *(int64x2_t *)(v334 + 48);
            v353 = vzip1q_s64(*(int64x2_t *)v334, v350);
            v354 = vzip1q_s64(v352, *(int64x2_t *)(v334 + 72));
            v355 = vzip2q_s64(*(int64x2_t *)v334, v350);
            v350.i64[0] = vdupq_laneq_s64(v352, 1).u64[0];
            v350.i64[1] = *(_QWORD *)(v334 + 80);
            v349.i64[1] = *(_QWORD *)(v334 + 40);
            v351.i64[1] = *(_QWORD *)(v334 + 88);
            *v348 = v353;
            v348[1] = v354;
            v356 = (int64x2_t *)((char *)v348 + 8 * v335);
            *v356 = v355;
            v356[1] = v350;
            v357 = &v348[v335];
            *v357 = v349;
            v357[1] = v351;
          }
          v358 = v327 + 1;
          while (v358 != v330)
          {
            ++v329;
            v359 = *v358++;
            v331 = v359;
            if (v359 != -1)
            {
              v327 = v358 - 1;
              goto LABEL_164;
            }
          }
          v322 = *(_DWORD *)(result + 11388);
        }
      }
      ++v323;
      ++v324;
    }
    while (v323 < v322);
    v5 = *a5;
  }
  v363 = *(_DWORD *)(result + 12828);
  if (v363)
  {
    v364 = 0;
    v365 = a4[24];
    do
    {
      v366 = *(_QWORD *)(result + 12904);
      v367 = *(_DWORD *)(result + 12928) * v364;
      v368 = (uint64_t *)(v366 + 8 * v367);
      v369 = *(_DWORD *)(result + 12824);
      if (v369 && *v368 == -1)
      {
        v370 = 0;
        v396 = 8 * (v369 + v367) - 8 * v367 - 8;
        v397 = v366 + 8 * v367;
        while (v396)
        {
          v368 = (uint64_t *)(v397 + 8);
          ++v370;
          v398 = *(_QWORD *)(v397 + 8);
          v396 -= 8;
          v397 += 8;
          if (v398 != -1)
            goto LABEL_184;
        }
      }
      else
      {
        v370 = 0;
LABEL_184:
        v371 = (uint64_t *)(v366 + 8 * (v367 + v369));
        if (v368 != v371)
        {
          v372 = *v368;
LABEL_186:
          v373 = *v365;
          v374 = *(_DWORD *)(a3[27] + 4 * v370);
          v375 = *(_QWORD *)(result + 12832) + 8 * v372;
          v376 = *((unsigned int *)a2 + 4);
          v377 = *a2;
          if (v5 && v373 < v374)
          {
            v378 = v374 + (_DWORD)v376 * v373;
            v379 = (int64x2_t *)(v377 + 8 * v378);
            v380 = *(int64x2_t *)v375;
            v381 = *(_OWORD *)(v375 + 24);
            v382 = *(_QWORD *)(v375 + 40);
            v383 = *(_QWORD *)(v375 + 64);
            v384 = *(int8x16_t *)(v375 + 48);
            v385 = vextq_s8(v384, v384, 8uLL).u64[0];
            v379[1].i64[0] = *(_QWORD *)(v375 + 16);
            *v379 = v380;
            v386 = &v379->i8[8 * v376];
            *((_QWORD *)v386 + 2) = v382;
            *(_OWORD *)v386 = v381;
          }
          else
          {
            v378 = v373 + (_DWORD)v376 * v374;
            v387 = (int64x2_t *)(v377 + 8 * v378);
            v384.i64[0] = *(_QWORD *)(v375 + 16);
            v385 = *(_QWORD *)(v375 + 40);
            v388 = *(int64x2_t *)(v375 + 24);
            v383 = *(_QWORD *)(v375 + 64);
            v389 = *(_OWORD *)(v375 + 48);
            v390 = vzip1q_s64(*(int64x2_t *)v375, v388);
            v391 = vzip2q_s64(*(int64x2_t *)v375, v388);
            v387[1].i64[0] = v389;
            *v387 = v390;
            v392 = (int64x2_t *)((char *)v387 + 8 * v376);
            *v392 = v391;
            v392[1].i64[0] = *((_QWORD *)&v389 + 1);
          }
          v393 = v377 + 8 * v378 + 16 * v376;
          *(_QWORD *)(v393 + 16) = v383;
          v384.i64[1] = v385;
          *(int8x16_t *)v393 = v384;
          v394 = v368 + 1;
          while (v394 != v371)
          {
            ++v370;
            v395 = *v394++;
            v372 = v395;
            if (v395 != -1)
            {
              v368 = v394 - 1;
              goto LABEL_186;
            }
          }
          v363 = *(_DWORD *)(result + 12828);
        }
      }
      ++v364;
      ++v365;
    }
    while (v364 < v363);
    v5 = *a5;
  }
  v399 = *(_DWORD *)(result + 14268);
  if (v399)
  {
    v400 = 0;
    v401 = a4[27];
    do
    {
      v402 = *(_QWORD *)(result + 14344);
      v403 = *(_DWORD *)(result + 14368) * v400;
      v404 = (uint64_t *)(v402 + 8 * v403);
      v405 = *(_DWORD *)(result + 14264);
      if (v405 && *v404 == -1)
      {
        v406 = 0;
        v432 = 8 * (v405 + v403) - 8 * v403 - 8;
        v433 = v402 + 8 * v403;
        while (v432)
        {
          v404 = (uint64_t *)(v433 + 8);
          ++v406;
          v434 = *(_QWORD *)(v433 + 8);
          v432 -= 8;
          v433 += 8;
          if (v434 != -1)
            goto LABEL_206;
        }
      }
      else
      {
        v406 = 0;
LABEL_206:
        v407 = (uint64_t *)(v402 + 8 * (v403 + v405));
        if (v404 != v407)
        {
          v408 = *v404;
LABEL_208:
          v409 = *v401;
          v410 = *(_DWORD *)(a3[27] + 4 * v406);
          v411 = *(_QWORD *)(result + 14272) + 8 * v408;
          v412 = *((unsigned int *)a2 + 4);
          v413 = *a2;
          if (v5 && v409 < v410)
          {
            v414 = v410 + (_DWORD)v412 * v409;
            v415 = (int64x2_t *)(v413 + 8 * v414);
            v416 = *(int64x2_t *)v411;
            v417 = *(_OWORD *)(v411 + 24);
            v418 = *(_QWORD *)(v411 + 40);
            v419 = *(_QWORD *)(v411 + 64);
            v420 = *(int8x16_t *)(v411 + 48);
            v421 = vextq_s8(v420, v420, 8uLL).u64[0];
            v415[1].i64[0] = *(_QWORD *)(v411 + 16);
            *v415 = v416;
            v422 = &v415->i8[8 * v412];
            *((_QWORD *)v422 + 2) = v418;
            *(_OWORD *)v422 = v417;
          }
          else
          {
            v414 = v409 + (_DWORD)v412 * v410;
            v423 = (int64x2_t *)(v413 + 8 * v414);
            v420.i64[0] = *(_QWORD *)(v411 + 16);
            v421 = *(_QWORD *)(v411 + 40);
            v424 = *(int64x2_t *)(v411 + 24);
            v419 = *(_QWORD *)(v411 + 64);
            v425 = *(_OWORD *)(v411 + 48);
            v426 = vzip1q_s64(*(int64x2_t *)v411, v424);
            v427 = vzip2q_s64(*(int64x2_t *)v411, v424);
            v423[1].i64[0] = v425;
            *v423 = v426;
            v428 = (int64x2_t *)((char *)v423 + 8 * v412);
            *v428 = v427;
            v428[1].i64[0] = *((_QWORD *)&v425 + 1);
          }
          v429 = v413 + 8 * v414 + 16 * v412;
          *(_QWORD *)(v429 + 16) = v419;
          v420.i64[1] = v421;
          *(int8x16_t *)v429 = v420;
          v430 = v404 + 1;
          while (v430 != v407)
          {
            ++v406;
            v431 = *v430++;
            v408 = v431;
            if (v431 != -1)
            {
              v404 = v430 - 1;
              goto LABEL_208;
            }
          }
          v399 = *(_DWORD *)(result + 14268);
        }
      }
      ++v400;
      ++v401;
    }
    while (v400 < v399);
    v5 = *a5;
  }
  v435 = *(_DWORD *)(result + 1164);
  if (v435)
  {
    v436 = 0;
    v437 = *a4;
    do
    {
      v438 = *(_QWORD *)(result + 1240);
      v439 = *(_DWORD *)(result + 1264) * v436;
      v440 = (uint64_t *)(v438 + 8 * v439);
      v441 = *(_DWORD *)(result + 1160);
      if (v441 && *v440 == -1)
      {
        v442 = 0;
        v482 = 8 * (v441 + v439) - 8 * v439 - 8;
        v483 = v438 + 8 * v439;
        while (v482)
        {
          v440 = (uint64_t *)(v483 + 8);
          ++v442;
          v484 = *(_QWORD *)(v483 + 8);
          v482 -= 8;
          v483 += 8;
          if (v484 != -1)
            goto LABEL_228;
        }
      }
      else
      {
        v442 = 0;
LABEL_228:
        v443 = (uint64_t *)(v438 + 8 * (v439 + v441));
        if (v440 != v443)
        {
          v444 = *v440;
LABEL_230:
          v445 = *v437;
          v446 = *(_DWORD *)(a3[24] + 4 * v442);
          v447 = *(_QWORD *)(result + 1168) + 8 * v444;
          v448 = *((unsigned int *)a2 + 4);
          v449 = *a2;
          if (v5 && v445 < v446)
          {
            v450 = *(int64x2_t *)v447;
            v451 = (int64x2_t *)(v449 + 8 * (v446 + (_DWORD)v448 * v445));
            v452 = *(_OWORD *)(v447 + 24);
            v453 = *(_QWORD *)(v447 + 40);
            v454 = *(int64x2_t *)(v447 + 48);
            v455 = *(_QWORD *)(v447 + 64);
            v456 = *(_OWORD *)(v447 + 72);
            v457 = *(_QWORD *)(v447 + 88);
            v458 = *(int64x2_t *)(v447 + 96);
            v459 = *(_QWORD *)(v447 + 112);
            v460 = *(_OWORD *)(v447 + 120);
            v461 = *(_QWORD *)(v447 + 136);
            v451[1].i64[0] = *(_QWORD *)(v447 + 16);
            *v451 = v450;
            v462 = &v451->i8[8 * v448];
            *((_QWORD *)v462 + 2) = v453;
            *(_OWORD *)v462 = v452;
            v463 = &v451[v448];
            v463[1].i64[0] = v455;
            *v463 = v454;
            v464 = &v451->i8[24 * v448];
            *((_QWORD *)v464 + 2) = v457;
            *(_OWORD *)v464 = v456;
            v465 = &v451[2 * v448];
            v465[1].i64[0] = v459;
            *v465 = v458;
            v466 = &v451->i8[40 * v448];
            *((_QWORD *)v466 + 2) = v461;
            *(_OWORD *)v466 = v460;
          }
          else
          {
            v467 = (int64x2_t *)(v449 + 8 * (v445 + (_DWORD)v448 * v446));
            v468.i64[0] = *(_QWORD *)(v447 + 16);
            v469 = *(int64x2_t *)(v447 + 24);
            v470.i64[0] = *(_QWORD *)(v447 + 64);
            v471 = *(int64x2_t *)(v447 + 48);
            v472 = *(int64x2_t *)(v447 + 72);
            v473.i64[0] = *(_QWORD *)(v447 + 112);
            v474 = *(int64x2_t *)(v447 + 96);
            v475 = *(int64x2_t *)(v447 + 120);
            v476 = vzip1q_s64(*(int64x2_t *)v447, v469);
            v477 = vzip2q_s64(*(int64x2_t *)v447, v469);
            v468.i64[1] = *(_QWORD *)(v447 + 40);
            v470.i64[1] = *(_QWORD *)(v447 + 88);
            v473.i64[1] = *(_QWORD *)(v447 + 136);
            v467[1] = vzip1q_s64(v471, v472);
            v467[2] = vzip1q_s64(v474, v475);
            *v467 = v476;
            v478 = (int64x2_t *)((char *)v467 + 8 * v448);
            v478[1] = vzip1q_s64(vdupq_laneq_s64(v471, 1), vdupq_laneq_s64(v472, 1));
            v478[2] = vzip2q_s64(v474, v475);
            *v478 = v477;
            v479 = &v467[v448];
            v479[1] = v470;
            v479[2] = v473;
            *v479 = v468;
          }
          v480 = v440 + 1;
          while (v480 != v443)
          {
            ++v442;
            v481 = *v480++;
            v444 = v481;
            if (v481 != -1)
            {
              v440 = v480 - 1;
              goto LABEL_230;
            }
          }
          v435 = *(_DWORD *)(result + 1164);
        }
      }
      ++v436;
      ++v437;
    }
    while (v436 < v435);
    v5 = *a5;
  }
  v485 = *(_DWORD *)(result + 2604);
  if (v485)
  {
    v486 = 0;
    v487 = a4[3];
    do
    {
      v488 = *(_QWORD *)(result + 2680);
      v489 = *(_DWORD *)(result + 2704) * v486;
      v490 = (uint64_t *)(v488 + 8 * v489);
      v491 = *(_DWORD *)(result + 2600);
      if (v491 && *v490 == -1)
      {
        v492 = 0;
        v546 = 8 * (v491 + v489) - 8 * v489 - 8;
        v547 = v488 + 8 * v489;
        while (v546)
        {
          v490 = (uint64_t *)(v547 + 8);
          ++v492;
          v548 = *(_QWORD *)(v547 + 8);
          v546 -= 8;
          v547 += 8;
          if (v548 != -1)
            goto LABEL_250;
        }
      }
      else
      {
        v492 = 0;
LABEL_250:
        v493 = (uint64_t *)(v488 + 8 * (v489 + v491));
        if (v490 != v493)
        {
          v494 = *v490;
LABEL_252:
          v495 = *v487;
          v496 = *(_DWORD *)(a3[24] + 4 * v492);
          v497 = *(_QWORD *)(result + 2608) + 8 * v494;
          v498 = *((unsigned int *)a2 + 4);
          v499 = *a2;
          if (v5 && v495 < v496)
          {
            v500 = *(int64x2_t *)v497;
            v501 = (int64x2_t *)(v499 + 8 * (v496 + (_DWORD)v498 * v495));
            v502 = *(_OWORD *)(v497 + 24);
            v503 = *(_QWORD *)(v497 + 40);
            v504 = *(int64x2_t *)(v497 + 48);
            v505 = *(_QWORD *)(v497 + 64);
            v506 = *(_OWORD *)(v497 + 72);
            v507 = *(_QWORD *)(v497 + 88);
            v508 = *(int64x2_t *)(v497 + 96);
            v509 = *(_QWORD *)(v497 + 112);
            v510 = *(_OWORD *)(v497 + 120);
            v511 = *(_QWORD *)(v497 + 136);
            v512 = *(int64x2_t *)(v497 + 144);
            v513 = *(_QWORD *)(v497 + 160);
            v514 = *(_OWORD *)(v497 + 168);
            v515 = *(_QWORD *)(v497 + 184);
            v516 = *(int64x2_t *)(v497 + 192);
            v517 = *(_QWORD *)(v497 + 208);
            v501[1].i64[0] = *(_QWORD *)(v497 + 16);
            *v501 = v500;
            v518 = &v501->i8[8 * v498];
            *((_QWORD *)v518 + 2) = v503;
            *(_OWORD *)v518 = v502;
            v519 = &v501[v498];
            v519[1].i64[0] = v505;
            *v519 = v504;
            v520 = &v501->i8[24 * v498];
            *((_QWORD *)v520 + 2) = v507;
            *(_OWORD *)v520 = v506;
            v521 = &v501[2 * v498];
            v521[1].i64[0] = v509;
            *v521 = v508;
            v522 = &v501->i8[40 * v498];
            *((_QWORD *)v522 + 2) = v511;
            *(_OWORD *)v522 = v510;
            v523 = &v501[3 * v498];
            v523[1].i64[0] = v513;
            *v523 = v512;
            v524 = &v501->i8[56 * v498];
            *((_QWORD *)v524 + 2) = v515;
            *(_OWORD *)v524 = v514;
            v525 = &v501[4 * v498];
            v525[1].i64[0] = v517;
            *v525 = v516;
          }
          else
          {
            v526.i64[0] = *(_QWORD *)(v497 + 16);
            v527 = (int64x2_t *)(v499 + 8 * (v495 + (_DWORD)v498 * v496));
            v528 = *(int64x2_t *)(v497 + 24);
            v529.i64[0] = *(_QWORD *)(v497 + 64);
            v530 = *(int64x2_t *)(v497 + 48);
            v531 = *(int64x2_t *)(v497 + 72);
            v532.i64[0] = *(_QWORD *)(v497 + 112);
            v533 = *(int64x2_t *)(v497 + 96);
            v534 = *(int64x2_t *)(v497 + 120);
            v535.i64[0] = *(_QWORD *)(v497 + 160);
            v536 = *(int64x2_t *)(v497 + 144);
            v537 = *(int64x2_t *)(v497 + 168);
            v538 = *(_QWORD *)(v497 + 208);
            v539 = *(_OWORD *)(v497 + 192);
            v540 = vzip1q_s64(*(int64x2_t *)v497, v528);
            v541 = vzip2q_s64(*(int64x2_t *)v497, v528);
            v526.i64[1] = *(_QWORD *)(v497 + 40);
            v529.i64[1] = *(_QWORD *)(v497 + 88);
            v532.i64[1] = *(_QWORD *)(v497 + 136);
            v535.i64[1] = *(_QWORD *)(v497 + 184);
            v527[2] = vzip1q_s64(v533, v534);
            v527[3] = vzip1q_s64(v536, v537);
            v527[4].i64[0] = v539;
            *v527 = v540;
            v527[1] = vzip1q_s64(v530, v531);
            v542 = (int64x2_t *)((char *)v527 + 8 * v498);
            v542[2] = vzip2q_s64(v533, v534);
            v542[3] = vzip2q_s64(v536, v537);
            *v542 = v541;
            v542[1] = vzip2q_s64(v530, v531);
            v542[4].i64[0] = *((_QWORD *)&v539 + 1);
            v543 = &v527[v498];
            v543[4].i64[0] = v538;
            v543[2] = v532;
            v543[3] = v535;
            *v543 = v526;
            v543[1] = v529;
          }
          v544 = v490 + 1;
          while (v544 != v493)
          {
            ++v492;
            v545 = *v544++;
            v494 = v545;
            if (v545 != -1)
            {
              v490 = v544 - 1;
              goto LABEL_252;
            }
          }
          v485 = *(_DWORD *)(result + 2604);
        }
      }
      ++v486;
      ++v487;
    }
    while (v486 < v485);
    v5 = *a5;
  }
  v549 = *(_DWORD *)(result + 4044);
  if (v549)
  {
    v550 = 0;
    v551 = a4[6];
    do
    {
      v552 = *(_QWORD *)(result + 4120);
      v553 = *(_DWORD *)(result + 4144) * v550;
      v554 = (uint64_t *)(v552 + 8 * v553);
      v555 = *(_DWORD *)(result + 4040);
      if (v555 && *v554 == -1)
      {
        v556 = 0;
        v596 = 8 * (v555 + v553) - 8 * v553 - 8;
        v597 = v552 + 8 * v553;
        while (v596)
        {
          v554 = (uint64_t *)(v597 + 8);
          ++v556;
          v598 = *(_QWORD *)(v597 + 8);
          v596 -= 8;
          v597 += 8;
          if (v598 != -1)
            goto LABEL_272;
        }
      }
      else
      {
        v556 = 0;
LABEL_272:
        v557 = (uint64_t *)(v552 + 8 * (v553 + v555));
        if (v554 != v557)
        {
          v558 = *v554;
LABEL_274:
          v559 = *v551;
          v560 = *(_DWORD *)(a3[24] + 4 * v556);
          v561 = *(_QWORD *)(result + 4048) + 8 * v558;
          v562 = *((unsigned int *)a2 + 4);
          v563 = *a2;
          if (v5 && v559 < v560)
          {
            v564 = *(int64x2_t *)v561;
            v565 = (int64x2_t *)(v563 + 8 * (v560 + (_DWORD)v562 * v559));
            v566 = *(_OWORD *)(v561 + 24);
            v567 = *(_QWORD *)(v561 + 40);
            v568 = *(int64x2_t *)(v561 + 48);
            v569 = *(_QWORD *)(v561 + 64);
            v570 = *(_OWORD *)(v561 + 72);
            v571 = *(_QWORD *)(v561 + 88);
            v572 = *(int64x2_t *)(v561 + 96);
            v573 = *(_QWORD *)(v561 + 112);
            v574 = *(_OWORD *)(v561 + 120);
            v575 = *(_QWORD *)(v561 + 136);
            v565[1].i64[0] = *(_QWORD *)(v561 + 16);
            *v565 = v564;
            v576 = &v565->i8[8 * v562];
            *((_QWORD *)v576 + 2) = v567;
            *(_OWORD *)v576 = v566;
            v577 = &v565[v562];
            v577[1].i64[0] = v569;
            *v577 = v568;
            v578 = &v565->i8[24 * v562];
            *((_QWORD *)v578 + 2) = v571;
            *(_OWORD *)v578 = v570;
            v579 = &v565[2 * v562];
            v579[1].i64[0] = v573;
            *v579 = v572;
            v580 = &v565->i8[40 * v562];
            *((_QWORD *)v580 + 2) = v575;
            *(_OWORD *)v580 = v574;
          }
          else
          {
            v581 = (int64x2_t *)(v563 + 8 * (v559 + (_DWORD)v562 * v560));
            v582.i64[0] = *(_QWORD *)(v561 + 16);
            v583 = *(int64x2_t *)(v561 + 24);
            v584.i64[0] = *(_QWORD *)(v561 + 64);
            v585 = *(int64x2_t *)(v561 + 48);
            v586 = *(int64x2_t *)(v561 + 72);
            v587.i64[0] = *(_QWORD *)(v561 + 112);
            v588 = *(int64x2_t *)(v561 + 96);
            v589 = *(int64x2_t *)(v561 + 120);
            v590 = vzip1q_s64(*(int64x2_t *)v561, v583);
            v591 = vzip2q_s64(*(int64x2_t *)v561, v583);
            v582.i64[1] = *(_QWORD *)(v561 + 40);
            v584.i64[1] = *(_QWORD *)(v561 + 88);
            v587.i64[1] = *(_QWORD *)(v561 + 136);
            v581[1] = vzip1q_s64(v585, v586);
            v581[2] = vzip1q_s64(v588, v589);
            *v581 = v590;
            v592 = (int64x2_t *)((char *)v581 + 8 * v562);
            v592[1] = vzip1q_s64(vdupq_laneq_s64(v585, 1), vdupq_laneq_s64(v586, 1));
            v592[2] = vzip2q_s64(v588, v589);
            *v592 = v591;
            v593 = &v581[v562];
            v593[1] = v584;
            v593[2] = v587;
            *v593 = v582;
          }
          v594 = v554 + 1;
          while (v594 != v557)
          {
            ++v556;
            v595 = *v594++;
            v558 = v595;
            if (v595 != -1)
            {
              v554 = v594 - 1;
              goto LABEL_274;
            }
          }
          v549 = *(_DWORD *)(result + 4044);
        }
      }
      ++v550;
      ++v551;
    }
    while (v550 < v549);
    v5 = *a5;
  }
  v599 = *(_DWORD *)(result + 5484);
  if (v599)
  {
    v600 = 0;
    v601 = a4[9];
    do
    {
      v602 = *(_QWORD *)(result + 5560);
      v603 = *(_DWORD *)(result + 5584) * v600;
      v604 = (uint64_t *)(v602 + 8 * v603);
      v605 = *(_DWORD *)(result + 5480);
      if (v605 && *v604 == -1)
      {
        v606 = 0;
        v646 = 8 * (v605 + v603) - 8 * v603 - 8;
        v647 = v602 + 8 * v603;
        while (v646)
        {
          v604 = (uint64_t *)(v647 + 8);
          ++v606;
          v648 = *(_QWORD *)(v647 + 8);
          v646 -= 8;
          v647 += 8;
          if (v648 != -1)
            goto LABEL_294;
        }
      }
      else
      {
        v606 = 0;
LABEL_294:
        v607 = (uint64_t *)(v602 + 8 * (v603 + v605));
        if (v604 != v607)
        {
          v608 = *v604;
LABEL_296:
          v609 = *v601;
          v610 = *(_DWORD *)(a3[24] + 4 * v606);
          v611 = *(_QWORD *)(result + 5488) + 8 * v608;
          v612 = *((unsigned int *)a2 + 4);
          v613 = *a2;
          if (v5 && v609 < v610)
          {
            v614 = *(int64x2_t *)v611;
            v615 = (int64x2_t *)(v613 + 8 * (v610 + (_DWORD)v612 * v609));
            v616 = *(_OWORD *)(v611 + 24);
            v617 = *(_QWORD *)(v611 + 40);
            v618 = *(int64x2_t *)(v611 + 48);
            v619 = *(_QWORD *)(v611 + 64);
            v620 = *(_OWORD *)(v611 + 72);
            v621 = *(_QWORD *)(v611 + 88);
            v622 = *(int64x2_t *)(v611 + 96);
            v623 = *(_QWORD *)(v611 + 112);
            v624 = *(_OWORD *)(v611 + 120);
            v625 = *(_QWORD *)(v611 + 136);
            v615[1].i64[0] = *(_QWORD *)(v611 + 16);
            *v615 = v614;
            v626 = &v615->i8[8 * v612];
            *((_QWORD *)v626 + 2) = v617;
            *(_OWORD *)v626 = v616;
            v627 = &v615[v612];
            v627[1].i64[0] = v619;
            *v627 = v618;
            v628 = &v615->i8[24 * v612];
            *((_QWORD *)v628 + 2) = v621;
            *(_OWORD *)v628 = v620;
            v629 = &v615[2 * v612];
            v629[1].i64[0] = v623;
            *v629 = v622;
            v630 = &v615->i8[40 * v612];
            *((_QWORD *)v630 + 2) = v625;
            *(_OWORD *)v630 = v624;
          }
          else
          {
            v631 = (int64x2_t *)(v613 + 8 * (v609 + (_DWORD)v612 * v610));
            v632.i64[0] = *(_QWORD *)(v611 + 16);
            v633 = *(int64x2_t *)(v611 + 24);
            v634.i64[0] = *(_QWORD *)(v611 + 64);
            v635 = *(int64x2_t *)(v611 + 48);
            v636 = *(int64x2_t *)(v611 + 72);
            v637.i64[0] = *(_QWORD *)(v611 + 112);
            v638 = *(int64x2_t *)(v611 + 96);
            v639 = *(int64x2_t *)(v611 + 120);
            v640 = vzip1q_s64(*(int64x2_t *)v611, v633);
            v641 = vzip2q_s64(*(int64x2_t *)v611, v633);
            v632.i64[1] = *(_QWORD *)(v611 + 40);
            v634.i64[1] = *(_QWORD *)(v611 + 88);
            v637.i64[1] = *(_QWORD *)(v611 + 136);
            v631[1] = vzip1q_s64(v635, v636);
            v631[2] = vzip1q_s64(v638, v639);
            *v631 = v640;
            v642 = (int64x2_t *)((char *)v631 + 8 * v612);
            v642[1] = vzip1q_s64(vdupq_laneq_s64(v635, 1), vdupq_laneq_s64(v636, 1));
            v642[2] = vzip2q_s64(v638, v639);
            *v642 = v641;
            v643 = &v631[v612];
            v643[1] = v634;
            v643[2] = v637;
            *v643 = v632;
          }
          v644 = v604 + 1;
          while (v644 != v607)
          {
            ++v606;
            v645 = *v644++;
            v608 = v645;
            if (v645 != -1)
            {
              v604 = v644 - 1;
              goto LABEL_296;
            }
          }
          v599 = *(_DWORD *)(result + 5484);
        }
      }
      ++v600;
      ++v601;
    }
    while (v600 < v599);
    v5 = *a5;
  }
  v649 = *(_DWORD *)(result + 6924);
  if (v649)
  {
    v650 = 0;
    v651 = a4[12];
    do
    {
      v652 = *(_QWORD *)(result + 7000);
      v653 = *(_DWORD *)(result + 7024) * v650;
      v654 = (uint64_t *)(v652 + 8 * v653);
      v655 = *(_DWORD *)(result + 6920);
      if (v655 && *v654 == -1)
      {
        v656 = 0;
        v682 = 8 * (v655 + v653) - 8 * v653 - 8;
        v683 = v652 + 8 * v653;
        while (v682)
        {
          v654 = (uint64_t *)(v683 + 8);
          ++v656;
          v684 = *(_QWORD *)(v683 + 8);
          v682 -= 8;
          v683 += 8;
          if (v684 != -1)
            goto LABEL_316;
        }
      }
      else
      {
        v656 = 0;
LABEL_316:
        v657 = (uint64_t *)(v652 + 8 * (v653 + v655));
        if (v654 != v657)
        {
          v658 = *v654;
LABEL_318:
          v659 = *v651;
          v660 = *(_DWORD *)(a3[24] + 4 * v656);
          v661 = *(_QWORD *)(result + 6928) + 8 * v658;
          v662 = *((unsigned int *)a2 + 4);
          v663 = *a2;
          if (v5 && v659 < v660)
          {
            v664 = v660 + (_DWORD)v662 * v659;
            v665 = (int64x2_t *)(v663 + 8 * v664);
            v666 = *(int64x2_t *)v661;
            v667 = *(_OWORD *)(v661 + 24);
            v668 = *(_QWORD *)(v661 + 40);
            v669 = *(_QWORD *)(v661 + 64);
            v670 = *(int8x16_t *)(v661 + 48);
            v671 = vextq_s8(v670, v670, 8uLL).u64[0];
            v665[1].i64[0] = *(_QWORD *)(v661 + 16);
            *v665 = v666;
            v672 = &v665->i8[8 * v662];
            *((_QWORD *)v672 + 2) = v668;
            *(_OWORD *)v672 = v667;
          }
          else
          {
            v664 = v659 + (_DWORD)v662 * v660;
            v673 = (int64x2_t *)(v663 + 8 * v664);
            v670.i64[0] = *(_QWORD *)(v661 + 16);
            v671 = *(_QWORD *)(v661 + 40);
            v674 = *(int64x2_t *)(v661 + 24);
            v669 = *(_QWORD *)(v661 + 64);
            v675 = *(_OWORD *)(v661 + 48);
            v676 = vzip1q_s64(*(int64x2_t *)v661, v674);
            v677 = vzip2q_s64(*(int64x2_t *)v661, v674);
            v673[1].i64[0] = v675;
            *v673 = v676;
            v678 = (int64x2_t *)((char *)v673 + 8 * v662);
            *v678 = v677;
            v678[1].i64[0] = *((_QWORD *)&v675 + 1);
          }
          v679 = v663 + 8 * v664 + 16 * v662;
          *(_QWORD *)(v679 + 16) = v669;
          v670.i64[1] = v671;
          *(int8x16_t *)v679 = v670;
          v680 = v654 + 1;
          while (v680 != v657)
          {
            ++v656;
            v681 = *v680++;
            v658 = v681;
            if (v681 != -1)
            {
              v654 = v680 - 1;
              goto LABEL_318;
            }
          }
          v649 = *(_DWORD *)(result + 6924);
        }
      }
      ++v650;
      ++v651;
    }
    while (v650 < v649);
    v5 = *a5;
  }
  v685 = *(_DWORD *)(result + 8364);
  if (v685)
  {
    v686 = 0;
    v687 = a4[15];
    do
    {
      v688 = *(_QWORD *)(result + 8440);
      v689 = *(_DWORD *)(result + 8464) * v686;
      v690 = (uint64_t *)(v688 + 8 * v689);
      v691 = *(_DWORD *)(result + 8360);
      if (v691 && *v690 == -1)
      {
        v692 = 0;
        v707 = 8 * (v691 + v689) - 8 * v689 - 8;
        v708 = v688 + 8 * v689;
        while (v707)
        {
          v690 = (uint64_t *)(v708 + 8);
          ++v692;
          v709 = *(_QWORD *)(v708 + 8);
          v707 -= 8;
          v708 += 8;
          if (v709 != -1)
            goto LABEL_338;
        }
      }
      else
      {
        v692 = 0;
LABEL_338:
        v693 = (uint64_t *)(v688 + 8 * (v689 + v691));
        if (v690 != v693)
        {
          v694 = *v690;
LABEL_340:
          v695 = *v687;
          v696 = *(_DWORD *)(a3[24] + 4 * v692);
          v697 = *(_QWORD *)(result + 8368) + 8 * v694;
          v698 = *((unsigned int *)a2 + 4);
          v699 = *a2;
          v700 = *(int8x16_t *)v697;
          v701 = *(_QWORD *)(v697 + 16);
          v702 = vextq_s8(v700, v700, 8uLL).u64[0];
          if (v5 && v695 < v696)
          {
            v703 = (int8x16_t *)(v699 + 8 * (v696 + (_DWORD)v698 * v695));
            v703[1].i64[0] = v701;
            v700.i64[1] = v702;
            *v703 = v700;
          }
          else
          {
            v704 = (_QWORD *)(v699 + 8 * (v695 + (_DWORD)v698 * v696));
            *v704 = v700.i64[0];
            v704[v698] = v702;
            v704[2 * v698] = v701;
          }
          v705 = v690 + 1;
          while (v705 != v693)
          {
            ++v692;
            v706 = *v705++;
            v694 = v706;
            if (v706 != -1)
            {
              v690 = v705 - 1;
              goto LABEL_340;
            }
          }
          v685 = *(_DWORD *)(result + 8364);
        }
      }
      ++v686;
      ++v687;
    }
    while (v686 < v685);
    v5 = *a5;
  }
  v710 = *(_DWORD *)(result + 9804);
  if (v710)
  {
    v711 = 0;
    v712 = a4[18];
    do
    {
      v713 = *(_QWORD *)(result + 9880);
      v714 = *(_DWORD *)(result + 9904) * v711;
      v715 = (uint64_t *)(v713 + 8 * v714);
      v716 = *(_DWORD *)(result + 9800);
      if (v716 && *v715 == -1)
      {
        v717 = 0;
        v748 = 8 * (v716 + v714) - 8 * v714 - 8;
        v749 = v713 + 8 * v714;
        while (v748)
        {
          v715 = (uint64_t *)(v749 + 8);
          ++v717;
          v750 = *(_QWORD *)(v749 + 8);
          v748 -= 8;
          v749 += 8;
          if (v750 != -1)
            goto LABEL_360;
        }
      }
      else
      {
        v717 = 0;
LABEL_360:
        v718 = (uint64_t *)(v713 + 8 * (v714 + v716));
        if (v715 != v718)
        {
          v719 = *v715;
LABEL_362:
          v720 = *v712;
          v721 = *(_DWORD *)(a3[24] + 4 * v717);
          v722 = *(_QWORD *)(result + 9808) + 8 * v719;
          v723 = *((unsigned int *)a2 + 4);
          v724 = *a2;
          if (v5 && v720 < v721)
          {
            v725 = *(int64x2_t *)v722;
            v726 = (int64x2_t *)(v724 + 8 * (v721 + (_DWORD)v723 * v720));
            v727 = *(_OWORD *)(v722 + 24);
            v728 = *(_QWORD *)(v722 + 40);
            v729 = *(int64x2_t *)(v722 + 48);
            v730 = *(_QWORD *)(v722 + 64);
            v731 = *(_OWORD *)(v722 + 72);
            v732 = *(_QWORD *)(v722 + 88);
            v726[1].i64[0] = *(_QWORD *)(v722 + 16);
            *v726 = v725;
            v733 = &v726->i8[8 * v723];
            *((_QWORD *)v733 + 2) = v728;
            *(_OWORD *)v733 = v727;
            v734 = &v726[v723];
            v734[1].i64[0] = v730;
            *v734 = v729;
            v735 = &v726->i8[24 * v723];
            *((_QWORD *)v735 + 2) = v732;
            *(_OWORD *)v735 = v731;
          }
          else
          {
            v736 = (int64x2_t *)(v724 + 8 * (v720 + (_DWORD)v723 * v721));
            v737.i64[0] = *(_QWORD *)(v722 + 16);
            v738 = *(int64x2_t *)(v722 + 24);
            v739.i64[0] = *(_QWORD *)(v722 + 64);
            v740 = *(int64x2_t *)(v722 + 48);
            v741 = vzip1q_s64(*(int64x2_t *)v722, v738);
            v742 = vzip1q_s64(v740, *(int64x2_t *)(v722 + 72));
            v743 = vzip2q_s64(*(int64x2_t *)v722, v738);
            v738.i64[0] = vdupq_laneq_s64(v740, 1).u64[0];
            v738.i64[1] = *(_QWORD *)(v722 + 80);
            v737.i64[1] = *(_QWORD *)(v722 + 40);
            v739.i64[1] = *(_QWORD *)(v722 + 88);
            *v736 = v741;
            v736[1] = v742;
            v744 = (int64x2_t *)((char *)v736 + 8 * v723);
            *v744 = v743;
            v744[1] = v738;
            v745 = &v736[v723];
            *v745 = v737;
            v745[1] = v739;
          }
          v746 = v715 + 1;
          while (v746 != v718)
          {
            ++v717;
            v747 = *v746++;
            v719 = v747;
            if (v747 != -1)
            {
              v715 = v746 - 1;
              goto LABEL_362;
            }
          }
          v710 = *(_DWORD *)(result + 9804);
        }
      }
      ++v711;
      ++v712;
    }
    while (v711 < v710);
    v5 = *a5;
  }
  v751 = *(_DWORD *)(result + 11244);
  if (v751)
  {
    v752 = 0;
    v753 = a4[21];
    do
    {
      v754 = *(_QWORD *)(result + 11320);
      v755 = *(_DWORD *)(result + 11344) * v752;
      v756 = (uint64_t *)(v754 + 8 * v755);
      v757 = *(_DWORD *)(result + 11240);
      if (v757 && *v756 == -1)
      {
        v758 = 0;
        v789 = 8 * (v757 + v755) - 8 * v755 - 8;
        v790 = v754 + 8 * v755;
        while (v789)
        {
          v756 = (uint64_t *)(v790 + 8);
          ++v758;
          v791 = *(_QWORD *)(v790 + 8);
          v789 -= 8;
          v790 += 8;
          if (v791 != -1)
            goto LABEL_382;
        }
      }
      else
      {
        v758 = 0;
LABEL_382:
        v759 = (uint64_t *)(v754 + 8 * (v755 + v757));
        if (v756 != v759)
        {
          v760 = *v756;
LABEL_384:
          v761 = *v753;
          v762 = *(_DWORD *)(a3[24] + 4 * v758);
          v763 = *(_QWORD *)(result + 11248) + 8 * v760;
          v764 = *((unsigned int *)a2 + 4);
          v765 = *a2;
          if (v5 && v761 < v762)
          {
            v766 = *(int64x2_t *)v763;
            v767 = (int64x2_t *)(v765 + 8 * (v762 + (_DWORD)v764 * v761));
            v768 = *(_OWORD *)(v763 + 24);
            v769 = *(_QWORD *)(v763 + 40);
            v770 = *(int64x2_t *)(v763 + 48);
            v771 = *(_QWORD *)(v763 + 64);
            v772 = *(_OWORD *)(v763 + 72);
            v773 = *(_QWORD *)(v763 + 88);
            v767[1].i64[0] = *(_QWORD *)(v763 + 16);
            *v767 = v766;
            v774 = &v767->i8[8 * v764];
            *((_QWORD *)v774 + 2) = v769;
            *(_OWORD *)v774 = v768;
            v775 = &v767[v764];
            v775[1].i64[0] = v771;
            *v775 = v770;
            v776 = &v767->i8[24 * v764];
            *((_QWORD *)v776 + 2) = v773;
            *(_OWORD *)v776 = v772;
          }
          else
          {
            v777 = (int64x2_t *)(v765 + 8 * (v761 + (_DWORD)v764 * v762));
            v778.i64[0] = *(_QWORD *)(v763 + 16);
            v779 = *(int64x2_t *)(v763 + 24);
            v780.i64[0] = *(_QWORD *)(v763 + 64);
            v781 = *(int64x2_t *)(v763 + 48);
            v782 = vzip1q_s64(*(int64x2_t *)v763, v779);
            v783 = vzip1q_s64(v781, *(int64x2_t *)(v763 + 72));
            v784 = vzip2q_s64(*(int64x2_t *)v763, v779);
            v779.i64[0] = vdupq_laneq_s64(v781, 1).u64[0];
            v779.i64[1] = *(_QWORD *)(v763 + 80);
            v778.i64[1] = *(_QWORD *)(v763 + 40);
            v780.i64[1] = *(_QWORD *)(v763 + 88);
            *v777 = v782;
            v777[1] = v783;
            v785 = (int64x2_t *)((char *)v777 + 8 * v764);
            *v785 = v784;
            v785[1] = v779;
            v786 = &v777[v764];
            *v786 = v778;
            v786[1] = v780;
          }
          v787 = v756 + 1;
          while (v787 != v759)
          {
            ++v758;
            v788 = *v787++;
            v760 = v788;
            if (v788 != -1)
            {
              v756 = v787 - 1;
              goto LABEL_384;
            }
          }
          v751 = *(_DWORD *)(result + 11244);
        }
      }
      ++v752;
      ++v753;
    }
    while (v752 < v751);
    v5 = *a5;
  }
  v792 = *(_DWORD *)(result + 12684);
  if (v792)
  {
    v793 = 0;
    v794 = a4[24];
    do
    {
      v795 = *(_QWORD *)(result + 12760);
      v796 = *(_DWORD *)(result + 12784) * v793;
      v797 = (uint64_t *)(v795 + 8 * v796);
      v798 = *(_DWORD *)(result + 12680);
      if (v798 && *v797 == -1)
      {
        v799 = 0;
        v825 = 8 * (v798 + v796) - 8 * v796 - 8;
        v826 = v795 + 8 * v796;
        while (v825)
        {
          v797 = (uint64_t *)(v826 + 8);
          ++v799;
          v827 = *(_QWORD *)(v826 + 8);
          v825 -= 8;
          v826 += 8;
          if (v827 != -1)
            goto LABEL_404;
        }
      }
      else
      {
        v799 = 0;
LABEL_404:
        v800 = (uint64_t *)(v795 + 8 * (v796 + v798));
        if (v797 != v800)
        {
          v801 = *v797;
LABEL_406:
          v802 = *v794;
          v803 = *(_DWORD *)(a3[24] + 4 * v799);
          v804 = *(_QWORD *)(result + 12688) + 8 * v801;
          v805 = *((unsigned int *)a2 + 4);
          v806 = *a2;
          if (v5 && v802 < v803)
          {
            v807 = v803 + (_DWORD)v805 * v802;
            v808 = (int64x2_t *)(v806 + 8 * v807);
            v809 = *(int64x2_t *)v804;
            v810 = *(_OWORD *)(v804 + 24);
            v811 = *(_QWORD *)(v804 + 40);
            v812 = *(_QWORD *)(v804 + 64);
            v813 = *(int8x16_t *)(v804 + 48);
            v814 = vextq_s8(v813, v813, 8uLL).u64[0];
            v808[1].i64[0] = *(_QWORD *)(v804 + 16);
            *v808 = v809;
            v815 = &v808->i8[8 * v805];
            *((_QWORD *)v815 + 2) = v811;
            *(_OWORD *)v815 = v810;
          }
          else
          {
            v807 = v802 + (_DWORD)v805 * v803;
            v816 = (int64x2_t *)(v806 + 8 * v807);
            v813.i64[0] = *(_QWORD *)(v804 + 16);
            v814 = *(_QWORD *)(v804 + 40);
            v817 = *(int64x2_t *)(v804 + 24);
            v812 = *(_QWORD *)(v804 + 64);
            v818 = *(_OWORD *)(v804 + 48);
            v819 = vzip1q_s64(*(int64x2_t *)v804, v817);
            v820 = vzip2q_s64(*(int64x2_t *)v804, v817);
            v816[1].i64[0] = v818;
            *v816 = v819;
            v821 = (int64x2_t *)((char *)v816 + 8 * v805);
            *v821 = v820;
            v821[1].i64[0] = *((_QWORD *)&v818 + 1);
          }
          v822 = v806 + 8 * v807 + 16 * v805;
          *(_QWORD *)(v822 + 16) = v812;
          v813.i64[1] = v814;
          *(int8x16_t *)v822 = v813;
          v823 = v797 + 1;
          while (v823 != v800)
          {
            ++v799;
            v824 = *v823++;
            v801 = v824;
            if (v824 != -1)
            {
              v797 = v823 - 1;
              goto LABEL_406;
            }
          }
          v792 = *(_DWORD *)(result + 12684);
        }
      }
      ++v793;
      ++v794;
    }
    while (v793 < v792);
    v5 = *a5;
  }
  v828 = *(_DWORD *)(result + 14124);
  if (v828)
  {
    v829 = 0;
    v830 = a4[27];
    do
    {
      v831 = *(_QWORD *)(result + 14200);
      v832 = *(_DWORD *)(result + 14224) * v829;
      v833 = (uint64_t *)(v831 + 8 * v832);
      v834 = *(_DWORD *)(result + 14120);
      if (v834 && *v833 == -1)
      {
        v835 = 0;
        v861 = 8 * (v834 + v832) - 8 * v832 - 8;
        v862 = v831 + 8 * v832;
        while (v861)
        {
          v833 = (uint64_t *)(v862 + 8);
          ++v835;
          v863 = *(_QWORD *)(v862 + 8);
          v861 -= 8;
          v862 += 8;
          if (v863 != -1)
            goto LABEL_426;
        }
      }
      else
      {
        v835 = 0;
LABEL_426:
        v836 = (uint64_t *)(v831 + 8 * (v832 + v834));
        if (v833 != v836)
        {
          v837 = *v833;
LABEL_428:
          v838 = *v830;
          v839 = *(_DWORD *)(a3[24] + 4 * v835);
          v840 = *(_QWORD *)(result + 14128) + 8 * v837;
          v841 = *((unsigned int *)a2 + 4);
          v842 = *a2;
          if (v5 && v838 < v839)
          {
            v843 = v839 + (_DWORD)v841 * v838;
            v844 = (int64x2_t *)(v842 + 8 * v843);
            v845 = *(int64x2_t *)v840;
            v846 = *(_OWORD *)(v840 + 24);
            v847 = *(_QWORD *)(v840 + 40);
            v848 = *(_QWORD *)(v840 + 64);
            v849 = *(int8x16_t *)(v840 + 48);
            v850 = vextq_s8(v849, v849, 8uLL).u64[0];
            v844[1].i64[0] = *(_QWORD *)(v840 + 16);
            *v844 = v845;
            v851 = &v844->i8[8 * v841];
            *((_QWORD *)v851 + 2) = v847;
            *(_OWORD *)v851 = v846;
          }
          else
          {
            v843 = v838 + (_DWORD)v841 * v839;
            v852 = (int64x2_t *)(v842 + 8 * v843);
            v849.i64[0] = *(_QWORD *)(v840 + 16);
            v850 = *(_QWORD *)(v840 + 40);
            v853 = *(int64x2_t *)(v840 + 24);
            v848 = *(_QWORD *)(v840 + 64);
            v854 = *(_OWORD *)(v840 + 48);
            v855 = vzip1q_s64(*(int64x2_t *)v840, v853);
            v856 = vzip2q_s64(*(int64x2_t *)v840, v853);
            v852[1].i64[0] = v854;
            *v852 = v855;
            v857 = (int64x2_t *)((char *)v852 + 8 * v841);
            *v857 = v856;
            v857[1].i64[0] = *((_QWORD *)&v854 + 1);
          }
          v858 = v842 + 8 * v843 + 16 * v841;
          *(_QWORD *)(v858 + 16) = v848;
          v849.i64[1] = v850;
          *(int8x16_t *)v858 = v849;
          v859 = v833 + 1;
          while (v859 != v836)
          {
            ++v835;
            v860 = *v859++;
            v837 = v860;
            if (v860 != -1)
            {
              v833 = v859 - 1;
              goto LABEL_428;
            }
          }
          v828 = *(_DWORD *)(result + 14124);
        }
      }
      ++v829;
      ++v830;
    }
    while (v829 < v828);
    v5 = *a5;
  }
  v864 = *(_DWORD *)(result + 1020);
  if (v864)
  {
    v865 = 0;
    v866 = *a4;
    do
    {
      v867 = *(_QWORD *)(result + 1096);
      v868 = *(_DWORD *)(result + 1120) * v865;
      v869 = (uint64_t *)(v867 + 8 * v868);
      v870 = *(_DWORD *)(result + 1016);
      if (v870 && *v869 == -1)
      {
        v871 = 0;
        v917 = 8 * (v870 + v868) - 8 * v868 - 8;
        v918 = v867 + 8 * v868;
        while (v917)
        {
          v869 = (uint64_t *)(v918 + 8);
          ++v871;
          v919 = *(_QWORD *)(v918 + 8);
          v917 -= 8;
          v918 += 8;
          if (v919 != -1)
            goto LABEL_448;
        }
      }
      else
      {
        v871 = 0;
LABEL_448:
        v872 = (uint64_t *)(v867 + 8 * (v868 + v870));
        if (v869 != v872)
        {
          v873 = *v869;
LABEL_450:
          v874 = *v866;
          v875 = *(_DWORD *)(a3[21] + 4 * v871);
          v876 = *(_QWORD *)(result + 1024) + 8 * v873;
          v877 = *((unsigned int *)a2 + 4);
          v878 = *a2;
          if (v5 && v874 < v875)
          {
            v879 = *(_OWORD *)(v876 + 16);
            v880 = (_OWORD *)(v878 + 8 * (v875 + (_DWORD)v877 * v874));
            v881 = *(_OWORD *)(v876 + 32);
            v882 = *(_OWORD *)(v876 + 48);
            v883 = *(_OWORD *)(v876 + 64);
            v884 = *(_OWORD *)(v876 + 80);
            v885 = *(_OWORD *)(v876 + 96);
            v886 = *(_OWORD *)(v876 + 112);
            v887 = *(_OWORD *)(v876 + 128);
            v888 = *(_OWORD *)(v876 + 144);
            v889 = *(_OWORD *)(v876 + 160);
            v890 = *(_OWORD *)(v876 + 176);
            *v880 = *(_OWORD *)v876;
            v880[1] = v879;
            v891 = (_OWORD *)((char *)v880 + 8 * v877);
            *v891 = v881;
            v891[1] = v882;
            v892 = &v880[v877];
            *v892 = v883;
            v892[1] = v884;
            v893 = (_OWORD *)((char *)v880 + 24 * v877);
            *v893 = v885;
            v893[1] = v886;
            v894 = &v880[2 * v877];
            *v894 = v887;
            v894[1] = v888;
            v895 = (_OWORD *)((char *)v880 + 40 * v877);
            *v895 = v889;
            v895[1] = v890;
          }
          else
          {
            v896 = (int64x2_t *)(v878 + 8 * (v874 + (_DWORD)v877 * v875));
            v897 = *(int64x2_t *)(v876 + 16);
            v899 = *(int64x2_t *)(v876 + 32);
            v898 = *(int64x2_t *)(v876 + 48);
            v901 = *(int64x2_t *)(v876 + 64);
            v900 = *(int64x2_t *)(v876 + 80);
            v903 = *(int64x2_t *)(v876 + 128);
            v902 = *(int64x2_t *)(v876 + 144);
            v904 = vzip1q_s64(*(int64x2_t *)v876, v899);
            v905 = vzip1q_s64(v901, *(int64x2_t *)(v876 + 96));
            v906 = vzip1q_s64(v903, *(int64x2_t *)(v876 + 160));
            v901.i64[0] = vdupq_laneq_s64(v901, 1).u64[0];
            v901.i64[1] = *(_QWORD *)(v876 + 104);
            v907.i64[0] = vdupq_laneq_s64(v903, 1).u64[0];
            v908 = vzip2q_s64(*(int64x2_t *)v876, v899);
            v907.i64[1] = *(_QWORD *)(v876 + 168);
            v909 = vzip1q_s64(v900, *(int64x2_t *)(v876 + 112));
            v910 = vzip1q_s64(v902, *(int64x2_t *)(v876 + 176));
            v900.i64[0] = vdupq_laneq_s64(v900, 1).u64[0];
            v900.i64[1] = *(_QWORD *)(v876 + 120);
            v911.i64[0] = vdupq_laneq_s64(v902, 1).u64[0];
            v911.i64[1] = *(_QWORD *)(v876 + 184);
            v896[1] = v905;
            v896[2] = v906;
            *v896 = v904;
            v912 = (int64x2_t *)((char *)v896 + 8 * v877);
            v912[1] = v901;
            v912[2] = v907;
            *v912 = v908;
            v913 = &v896[v877];
            v913[1] = v909;
            v913[2] = v910;
            *v913 = vzip1q_s64(v897, v898);
            v914 = (int64x2_t *)((char *)v896 + 24 * v877);
            v914[1] = v900;
            v914[2] = v911;
            *v914 = vzip2q_s64(v897, v898);
          }
          v915 = v869 + 1;
          while (v915 != v872)
          {
            ++v871;
            v916 = *v915++;
            v873 = v916;
            if (v916 != -1)
            {
              v869 = v915 - 1;
              goto LABEL_450;
            }
          }
          v864 = *(_DWORD *)(result + 1020);
        }
      }
      ++v865;
      ++v866;
    }
    while (v865 < v864);
    v5 = *a5;
  }
  v920 = *(_DWORD *)(result + 2460);
  if (v920)
  {
    v921 = 0;
    v922 = a4[3];
    do
    {
      v923 = *(_QWORD *)(result + 2536);
      v924 = *(_DWORD *)(result + 2560) * v921;
      v925 = (uint64_t *)(v923 + 8 * v924);
      v926 = *(_DWORD *)(result + 2456);
      if (v926 && *v925 == -1)
      {
        v927 = 0;
        v987 = 8 * (v926 + v924) - 8 * v924 - 8;
        v988 = v923 + 8 * v924;
        while (v987)
        {
          v925 = (uint64_t *)(v988 + 8);
          ++v927;
          v989 = *(_QWORD *)(v988 + 8);
          v987 -= 8;
          v988 += 8;
          if (v989 != -1)
            goto LABEL_470;
        }
      }
      else
      {
        v927 = 0;
LABEL_470:
        v928 = (uint64_t *)(v923 + 8 * (v924 + v926));
        if (v925 != v928)
        {
          v929 = *v925;
LABEL_472:
          v930 = *v922;
          v931 = *(_DWORD *)(a3[21] + 4 * v927);
          v932 = *(_QWORD *)(result + 2464) + 8 * v929;
          v933 = *((unsigned int *)a2 + 4);
          v934 = *a2;
          if (v5 && v930 < v931)
          {
            v935 = *(_OWORD *)(v932 + 16);
            v936 = (_OWORD *)(v934 + 8 * (v931 + (_DWORD)v933 * v930));
            v937 = *(_OWORD *)(v932 + 32);
            v938 = *(_OWORD *)(v932 + 48);
            v939 = *(_OWORD *)(v932 + 64);
            v940 = *(_OWORD *)(v932 + 80);
            v941 = *(_OWORD *)(v932 + 96);
            v942 = *(_OWORD *)(v932 + 112);
            v943 = *(_OWORD *)(v932 + 128);
            v944 = *(_OWORD *)(v932 + 144);
            v945 = *(_OWORD *)(v932 + 160);
            v946 = *(_OWORD *)(v932 + 176);
            v947 = *(_OWORD *)(v932 + 192);
            v948 = *(_OWORD *)(v932 + 208);
            v949 = *(_OWORD *)(v932 + 224);
            v950 = *(_OWORD *)(v932 + 240);
            v951 = *(_OWORD *)(v932 + 256);
            v952 = *(_OWORD *)(v932 + 272);
            *v936 = *(_OWORD *)v932;
            v936[1] = v935;
            v953 = (_OWORD *)((char *)v936 + 8 * v933);
            *v953 = v937;
            v953[1] = v938;
            v954 = &v936[v933];
            *v954 = v939;
            v954[1] = v940;
            v955 = (_OWORD *)((char *)v936 + 24 * v933);
            *v955 = v941;
            v955[1] = v942;
            v956 = &v936[2 * v933];
            *v956 = v943;
            v956[1] = v944;
            v957 = (_OWORD *)((char *)v936 + 40 * v933);
            *v957 = v945;
            v957[1] = v946;
            v958 = &v936[3 * v933];
            *v958 = v947;
            v958[1] = v948;
            v959 = (_OWORD *)((char *)v936 + 56 * v933);
            *v959 = v949;
            v959[1] = v950;
            v960 = &v936[4 * v933];
            *v960 = v951;
            v960[1] = v952;
          }
          else
          {
            v961 = *(int64x2_t *)(v932 + 16);
            v962 = (int64x2_t *)(v934 + 8 * (v930 + (_DWORD)v933 * v931));
            v964 = *(int64x2_t *)(v932 + 32);
            v963 = *(int64x2_t *)(v932 + 48);
            v966 = *(int64x2_t *)(v932 + 64);
            v965 = *(int64x2_t *)(v932 + 80);
            v968 = *(int64x2_t *)(v932 + 128);
            v967 = *(int64x2_t *)(v932 + 144);
            v970 = *(int64x2_t *)(v932 + 192);
            v969 = *(int64x2_t *)(v932 + 208);
            v972 = *(_OWORD *)(v932 + 256);
            v971 = *(_OWORD *)(v932 + 272);
            v973 = vzip1q_s64(*(int64x2_t *)v932, v964);
            v974 = vzip1q_s64(v966, *(int64x2_t *)(v932 + 96));
            v975 = vzip1q_s64(v970, *(int64x2_t *)(v932 + 224));
            v976 = vzip2q_s64(*(int64x2_t *)v932, v964);
            v964.i64[0] = vdupq_laneq_s64(v966, 1).u64[0];
            v964.i64[1] = *(_QWORD *)(v932 + 104);
            v966.i64[0] = vdupq_laneq_s64(v968, 1).u64[0];
            v966.i64[1] = *(_QWORD *)(v932 + 168);
            v977.i64[0] = vdupq_laneq_s64(v970, 1).u64[0];
            v977.i64[1] = *(_QWORD *)(v932 + 232);
            v978 = vzip1q_s64(v965, *(int64x2_t *)(v932 + 112));
            v979 = vzip1q_s64(v967, *(int64x2_t *)(v932 + 176));
            v980 = vzip1q_s64(v969, *(int64x2_t *)(v932 + 240));
            v965.i64[0] = vdupq_laneq_s64(v965, 1).u64[0];
            v965.i64[1] = *(_QWORD *)(v932 + 120);
            v981.i64[0] = vdupq_laneq_s64(v967, 1).u64[0];
            v981.i64[1] = *(_QWORD *)(v932 + 184);
            v967.i64[0] = vdupq_laneq_s64(v969, 1).u64[0];
            v967.i64[1] = *(_QWORD *)(v932 + 248);
            v962[2] = vzip1q_s64(v968, *(int64x2_t *)(v932 + 160));
            v962[3] = v975;
            v962[4].i64[0] = v972;
            *v962 = v973;
            v962[1] = v974;
            v982 = (int64x2_t *)((char *)v962 + 8 * v933);
            v982[2] = v966;
            v982[3] = v977;
            *v982 = v976;
            v982[1] = v964;
            v982[4].i64[0] = *((_QWORD *)&v972 + 1);
            v983 = &v962[v933];
            v983[4].i64[0] = v971;
            v983[2] = v979;
            v983[3] = v980;
            *v983 = vzip1q_s64(v961, v963);
            v983[1] = v978;
            v984 = (int64x2_t *)((char *)v962 + 24 * v933);
            v984[4].i64[0] = *((_QWORD *)&v971 + 1);
            v984[2] = v981;
            v984[3] = v967;
            *v984 = vzip2q_s64(v961, v963);
            v984[1] = v965;
          }
          v985 = v925 + 1;
          while (v985 != v928)
          {
            ++v927;
            v986 = *v985++;
            v929 = v986;
            if (v986 != -1)
            {
              v925 = v985 - 1;
              goto LABEL_472;
            }
          }
          v920 = *(_DWORD *)(result + 2460);
        }
      }
      ++v921;
      ++v922;
    }
    while (v921 < v920);
    v5 = *a5;
  }
  v990 = *(_DWORD *)(result + 3900);
  if (v990)
  {
    v991 = 0;
    v992 = a4[6];
    do
    {
      v993 = *(_QWORD *)(result + 3976);
      v994 = *(_DWORD *)(result + 4000) * v991;
      v995 = (uint64_t *)(v993 + 8 * v994);
      v996 = *(_DWORD *)(result + 3896);
      if (v996 && *v995 == -1)
      {
        v997 = 0;
        v1043 = 8 * (v996 + v994) - 8 * v994 - 8;
        v1044 = v993 + 8 * v994;
        while (v1043)
        {
          v995 = (uint64_t *)(v1044 + 8);
          ++v997;
          v1045 = *(_QWORD *)(v1044 + 8);
          v1043 -= 8;
          v1044 += 8;
          if (v1045 != -1)
            goto LABEL_492;
        }
      }
      else
      {
        v997 = 0;
LABEL_492:
        v998 = (uint64_t *)(v993 + 8 * (v994 + v996));
        if (v995 != v998)
        {
          v999 = *v995;
LABEL_494:
          v1000 = *v992;
          v1001 = *(_DWORD *)(a3[21] + 4 * v997);
          v1002 = *(_QWORD *)(result + 3904) + 8 * v999;
          v1003 = *((unsigned int *)a2 + 4);
          v1004 = *a2;
          if (v5 && v1000 < v1001)
          {
            v1005 = *(_OWORD *)(v1002 + 16);
            v1006 = (_OWORD *)(v1004 + 8 * (v1001 + (_DWORD)v1003 * v1000));
            v1007 = *(_OWORD *)(v1002 + 32);
            v1008 = *(_OWORD *)(v1002 + 48);
            v1009 = *(_OWORD *)(v1002 + 64);
            v1010 = *(_OWORD *)(v1002 + 80);
            v1011 = *(_OWORD *)(v1002 + 96);
            v1012 = *(_OWORD *)(v1002 + 112);
            v1013 = *(_OWORD *)(v1002 + 128);
            v1014 = *(_OWORD *)(v1002 + 144);
            v1015 = *(_OWORD *)(v1002 + 160);
            v1016 = *(_OWORD *)(v1002 + 176);
            *v1006 = *(_OWORD *)v1002;
            v1006[1] = v1005;
            v1017 = (_OWORD *)((char *)v1006 + 8 * v1003);
            *v1017 = v1007;
            v1017[1] = v1008;
            v1018 = &v1006[v1003];
            *v1018 = v1009;
            v1018[1] = v1010;
            v1019 = (_OWORD *)((char *)v1006 + 24 * v1003);
            *v1019 = v1011;
            v1019[1] = v1012;
            v1020 = &v1006[2 * v1003];
            *v1020 = v1013;
            v1020[1] = v1014;
            v1021 = (_OWORD *)((char *)v1006 + 40 * v1003);
            *v1021 = v1015;
            v1021[1] = v1016;
          }
          else
          {
            v1022 = (int64x2_t *)(v1004 + 8 * (v1000 + (_DWORD)v1003 * v1001));
            v1023 = *(int64x2_t *)(v1002 + 16);
            v1025 = *(int64x2_t *)(v1002 + 32);
            v1024 = *(int64x2_t *)(v1002 + 48);
            v1027 = *(int64x2_t *)(v1002 + 64);
            v1026 = *(int64x2_t *)(v1002 + 80);
            v1029 = *(int64x2_t *)(v1002 + 128);
            v1028 = *(int64x2_t *)(v1002 + 144);
            v1030 = vzip1q_s64(*(int64x2_t *)v1002, v1025);
            v1031 = vzip1q_s64(v1027, *(int64x2_t *)(v1002 + 96));
            v1032 = vzip1q_s64(v1029, *(int64x2_t *)(v1002 + 160));
            v1027.i64[0] = vdupq_laneq_s64(v1027, 1).u64[0];
            v1027.i64[1] = *(_QWORD *)(v1002 + 104);
            v1033.i64[0] = vdupq_laneq_s64(v1029, 1).u64[0];
            v1034 = vzip2q_s64(*(int64x2_t *)v1002, v1025);
            v1033.i64[1] = *(_QWORD *)(v1002 + 168);
            v1035 = vzip1q_s64(v1026, *(int64x2_t *)(v1002 + 112));
            v1036 = vzip1q_s64(v1028, *(int64x2_t *)(v1002 + 176));
            v1026.i64[0] = vdupq_laneq_s64(v1026, 1).u64[0];
            v1026.i64[1] = *(_QWORD *)(v1002 + 120);
            v1037.i64[0] = vdupq_laneq_s64(v1028, 1).u64[0];
            v1037.i64[1] = *(_QWORD *)(v1002 + 184);
            v1022[1] = v1031;
            v1022[2] = v1032;
            *v1022 = v1030;
            v1038 = (int64x2_t *)((char *)v1022 + 8 * v1003);
            v1038[1] = v1027;
            v1038[2] = v1033;
            *v1038 = v1034;
            v1039 = &v1022[v1003];
            v1039[1] = v1035;
            v1039[2] = v1036;
            *v1039 = vzip1q_s64(v1023, v1024);
            v1040 = (int64x2_t *)((char *)v1022 + 24 * v1003);
            v1040[1] = v1026;
            v1040[2] = v1037;
            *v1040 = vzip2q_s64(v1023, v1024);
          }
          v1041 = v995 + 1;
          while (v1041 != v998)
          {
            ++v997;
            v1042 = *v1041++;
            v999 = v1042;
            if (v1042 != -1)
            {
              v995 = v1041 - 1;
              goto LABEL_494;
            }
          }
          v990 = *(_DWORD *)(result + 3900);
        }
      }
      ++v991;
      ++v992;
    }
    while (v991 < v990);
    v5 = *a5;
  }
  v1046 = *(_DWORD *)(result + 5340);
  if (v1046)
  {
    v1047 = 0;
    v1048 = a4[9];
    do
    {
      v1049 = *(_QWORD *)(result + 5416);
      v1050 = *(_DWORD *)(result + 5440) * v1047;
      v1051 = (uint64_t *)(v1049 + 8 * v1050);
      v1052 = *(_DWORD *)(result + 5336);
      if (v1052 && *v1051 == -1)
      {
        v1053 = 0;
        v1099 = 8 * (v1052 + v1050) - 8 * v1050 - 8;
        v1100 = v1049 + 8 * v1050;
        while (v1099)
        {
          v1051 = (uint64_t *)(v1100 + 8);
          ++v1053;
          v1101 = *(_QWORD *)(v1100 + 8);
          v1099 -= 8;
          v1100 += 8;
          if (v1101 != -1)
            goto LABEL_514;
        }
      }
      else
      {
        v1053 = 0;
LABEL_514:
        v1054 = (uint64_t *)(v1049 + 8 * (v1050 + v1052));
        if (v1051 != v1054)
        {
          v1055 = *v1051;
LABEL_516:
          v1056 = *v1048;
          v1057 = *(_DWORD *)(a3[21] + 4 * v1053);
          v1058 = *(_QWORD *)(result + 5344) + 8 * v1055;
          v1059 = *((unsigned int *)a2 + 4);
          v1060 = *a2;
          if (v5 && v1056 < v1057)
          {
            v1061 = *(_OWORD *)(v1058 + 16);
            v1062 = (_OWORD *)(v1060 + 8 * (v1057 + (_DWORD)v1059 * v1056));
            v1063 = *(_OWORD *)(v1058 + 32);
            v1064 = *(_OWORD *)(v1058 + 48);
            v1065 = *(_OWORD *)(v1058 + 64);
            v1066 = *(_OWORD *)(v1058 + 80);
            v1067 = *(_OWORD *)(v1058 + 96);
            v1068 = *(_OWORD *)(v1058 + 112);
            v1069 = *(_OWORD *)(v1058 + 128);
            v1070 = *(_OWORD *)(v1058 + 144);
            v1071 = *(_OWORD *)(v1058 + 160);
            v1072 = *(_OWORD *)(v1058 + 176);
            *v1062 = *(_OWORD *)v1058;
            v1062[1] = v1061;
            v1073 = (_OWORD *)((char *)v1062 + 8 * v1059);
            *v1073 = v1063;
            v1073[1] = v1064;
            v1074 = &v1062[v1059];
            *v1074 = v1065;
            v1074[1] = v1066;
            v1075 = (_OWORD *)((char *)v1062 + 24 * v1059);
            *v1075 = v1067;
            v1075[1] = v1068;
            v1076 = &v1062[2 * v1059];
            *v1076 = v1069;
            v1076[1] = v1070;
            v1077 = (_OWORD *)((char *)v1062 + 40 * v1059);
            *v1077 = v1071;
            v1077[1] = v1072;
          }
          else
          {
            v1078 = (int64x2_t *)(v1060 + 8 * (v1056 + (_DWORD)v1059 * v1057));
            v1079 = *(int64x2_t *)(v1058 + 16);
            v1081 = *(int64x2_t *)(v1058 + 32);
            v1080 = *(int64x2_t *)(v1058 + 48);
            v1083 = *(int64x2_t *)(v1058 + 64);
            v1082 = *(int64x2_t *)(v1058 + 80);
            v1085 = *(int64x2_t *)(v1058 + 128);
            v1084 = *(int64x2_t *)(v1058 + 144);
            v1086 = vzip1q_s64(*(int64x2_t *)v1058, v1081);
            v1087 = vzip1q_s64(v1083, *(int64x2_t *)(v1058 + 96));
            v1088 = vzip1q_s64(v1085, *(int64x2_t *)(v1058 + 160));
            v1083.i64[0] = vdupq_laneq_s64(v1083, 1).u64[0];
            v1083.i64[1] = *(_QWORD *)(v1058 + 104);
            v1089.i64[0] = vdupq_laneq_s64(v1085, 1).u64[0];
            v1090 = vzip2q_s64(*(int64x2_t *)v1058, v1081);
            v1089.i64[1] = *(_QWORD *)(v1058 + 168);
            v1091 = vzip1q_s64(v1082, *(int64x2_t *)(v1058 + 112));
            v1092 = vzip1q_s64(v1084, *(int64x2_t *)(v1058 + 176));
            v1082.i64[0] = vdupq_laneq_s64(v1082, 1).u64[0];
            v1082.i64[1] = *(_QWORD *)(v1058 + 120);
            v1093.i64[0] = vdupq_laneq_s64(v1084, 1).u64[0];
            v1093.i64[1] = *(_QWORD *)(v1058 + 184);
            v1078[1] = v1087;
            v1078[2] = v1088;
            *v1078 = v1086;
            v1094 = (int64x2_t *)((char *)v1078 + 8 * v1059);
            v1094[1] = v1083;
            v1094[2] = v1089;
            *v1094 = v1090;
            v1095 = &v1078[v1059];
            v1095[1] = v1091;
            v1095[2] = v1092;
            *v1095 = vzip1q_s64(v1079, v1080);
            v1096 = (int64x2_t *)((char *)v1078 + 24 * v1059);
            v1096[1] = v1082;
            v1096[2] = v1093;
            *v1096 = vzip2q_s64(v1079, v1080);
          }
          v1097 = v1051 + 1;
          while (v1097 != v1054)
          {
            ++v1053;
            v1098 = *v1097++;
            v1055 = v1098;
            if (v1098 != -1)
            {
              v1051 = v1097 - 1;
              goto LABEL_516;
            }
          }
          v1046 = *(_DWORD *)(result + 5340);
        }
      }
      ++v1047;
      ++v1048;
    }
    while (v1047 < v1046);
    v5 = *a5;
  }
  v1102 = *(_DWORD *)(result + 6780);
  if (v1102)
  {
    v1103 = 0;
    v1104 = a4[12];
    do
    {
      v1105 = *(_QWORD *)(result + 6856);
      v1106 = *(_DWORD *)(result + 6880) * v1103;
      v1107 = (uint64_t *)(v1105 + 8 * v1106);
      v1108 = *(_DWORD *)(result + 6776);
      if (v1108 && *v1107 == -1)
      {
        v1109 = 0;
        v1138 = 8 * (v1108 + v1106) - 8 * v1106 - 8;
        v1139 = v1105 + 8 * v1106;
        while (v1138)
        {
          v1107 = (uint64_t *)(v1139 + 8);
          ++v1109;
          v1140 = *(_QWORD *)(v1139 + 8);
          v1138 -= 8;
          v1139 += 8;
          if (v1140 != -1)
            goto LABEL_536;
        }
      }
      else
      {
        v1109 = 0;
LABEL_536:
        v1110 = (uint64_t *)(v1105 + 8 * (v1106 + v1108));
        if (v1107 != v1110)
        {
          v1111 = *v1107;
LABEL_538:
          v1112 = *v1104;
          v1113 = *(_DWORD *)(a3[21] + 4 * v1109);
          v1114 = *(_QWORD *)(result + 6784) + 8 * v1111;
          v1115 = *((unsigned int *)a2 + 4);
          v1116 = *a2;
          if (v5 && v1112 < v1113)
          {
            v1117 = *(_OWORD *)(v1114 + 16);
            v1118 = (_OWORD *)(v1116 + 8 * (v1113 + (_DWORD)v1115 * v1112));
            v1119 = *(_OWORD *)(v1114 + 32);
            v1120 = *(_OWORD *)(v1114 + 48);
            v1121 = *(_OWORD *)(v1114 + 64);
            v1122 = *(_OWORD *)(v1114 + 80);
            *v1118 = *(_OWORD *)v1114;
            v1118[1] = v1117;
            v1123 = (_OWORD *)((char *)v1118 + 8 * v1115);
            *v1123 = v1119;
            v1123[1] = v1120;
            v1124 = &v1118[v1115];
            *v1124 = v1121;
            v1124[1] = v1122;
          }
          else
          {
            v1125 = (int64x2_t *)(v1116 + 8 * (v1112 + (_DWORD)v1115 * v1113));
            v1126 = *(int64x2_t *)(v1114 + 16);
            v1128 = *(int64x2_t *)(v1114 + 32);
            v1127 = *(int64x2_t *)(v1114 + 48);
            v1130 = *(_OWORD *)(v1114 + 64);
            v1129 = *(_OWORD *)(v1114 + 80);
            v1131 = vzip1q_s64(*(int64x2_t *)v1114, v1128);
            v1132 = vzip2q_s64(*(int64x2_t *)v1114, v1128);
            v1125[1].i64[0] = v1130;
            *v1125 = v1131;
            v1133 = (int64x2_t *)((char *)v1125 + 8 * v1115);
            *v1133 = v1132;
            v1133[1].i64[0] = *((_QWORD *)&v1130 + 1);
            v1134 = &v1125[v1115];
            v1134[1].i64[0] = v1129;
            *v1134 = vzip1q_s64(v1126, v1127);
            v1135 = (int64x2_t *)((char *)v1125 + 24 * v1115);
            v1135[1].i64[0] = *((_QWORD *)&v1129 + 1);
            *v1135 = vzip2q_s64(v1126, v1127);
          }
          v1136 = v1107 + 1;
          while (v1136 != v1110)
          {
            ++v1109;
            v1137 = *v1136++;
            v1111 = v1137;
            if (v1137 != -1)
            {
              v1107 = v1136 - 1;
              goto LABEL_538;
            }
          }
          v1102 = *(_DWORD *)(result + 6780);
        }
      }
      ++v1103;
      ++v1104;
    }
    while (v1103 < v1102);
    v5 = *a5;
  }
  v1141 = *(_DWORD *)(result + 8220);
  if (v1141)
  {
    v1142 = 0;
    v1143 = a4[15];
    do
    {
      v1144 = *(_QWORD *)(result + 8296);
      v1145 = *(_DWORD *)(result + 8320) * v1142;
      v1146 = (uint64_t *)(v1144 + 8 * v1145);
      v1147 = *(_DWORD *)(result + 8216);
      if (v1147 && *v1146 == -1)
      {
        v1148 = 0;
        v1162 = 8 * (v1147 + v1145) - 8 * v1145 - 8;
        v1163 = v1144 + 8 * v1145;
        while (v1162)
        {
          v1146 = (uint64_t *)(v1163 + 8);
          ++v1148;
          v1164 = *(_QWORD *)(v1163 + 8);
          v1162 -= 8;
          v1163 += 8;
          if (v1164 != -1)
            goto LABEL_558;
        }
      }
      else
      {
        v1148 = 0;
LABEL_558:
        v1149 = (uint64_t *)(v1144 + 8 * (v1145 + v1147));
        if (v1146 != v1149)
        {
          v1150 = *v1146;
LABEL_560:
          v1151 = *v1143;
          v1152 = *(_DWORD *)(a3[21] + 4 * v1148);
          v1153 = (int8x16_t *)(*(_QWORD *)(result + 8224) + 8 * v1150);
          v1154 = *((unsigned int *)a2 + 4);
          v1155 = *a2;
          v1157 = *v1153;
          v1156 = v1153[1];
          if (v5 && v1151 < v1152)
          {
            v1158 = (int8x16_t *)(v1155 + 8 * (v1152 + (_DWORD)v1154 * v1151));
            *v1158 = v1157;
            v1158[1] = v1156;
          }
          else
          {
            v1159 = (_QWORD *)(v1155 + 8 * (v1151 + (_DWORD)v1154 * v1152));
            *v1159 = v1157.i64[0];
            v1159[v1154] = vextq_s8(v1157, v1157, 8uLL).u64[0];
            v1159[2 * v1154] = v1156.i64[0];
            v1159[3 * v1154] = vextq_s8(v1156, v1156, 8uLL).u64[0];
          }
          v1160 = v1146 + 1;
          while (v1160 != v1149)
          {
            ++v1148;
            v1161 = *v1160++;
            v1150 = v1161;
            if (v1161 != -1)
            {
              v1146 = v1160 - 1;
              goto LABEL_560;
            }
          }
          v1141 = *(_DWORD *)(result + 8220);
        }
      }
      ++v1142;
      ++v1143;
    }
    while (v1142 < v1141);
    v5 = *a5;
  }
  v1165 = *(_DWORD *)(result + 9660);
  if (v1165)
  {
    v1166 = 0;
    v1167 = a4[18];
    do
    {
      v1168 = *(_QWORD *)(result + 9736);
      v1169 = *(_DWORD *)(result + 9760) * v1166;
      v1170 = (uint64_t *)(v1168 + 8 * v1169);
      v1171 = *(_DWORD *)(result + 9656);
      if (v1171 && *v1170 == -1)
      {
        v1172 = 0;
        v1202 = 8 * (v1171 + v1169) - 8 * v1169 - 8;
        v1203 = v1168 + 8 * v1169;
        while (v1202)
        {
          v1170 = (uint64_t *)(v1203 + 8);
          ++v1172;
          v1204 = *(_QWORD *)(v1203 + 8);
          v1202 -= 8;
          v1203 += 8;
          if (v1204 != -1)
            goto LABEL_580;
        }
      }
      else
      {
        v1172 = 0;
LABEL_580:
        v1173 = (uint64_t *)(v1168 + 8 * (v1169 + v1171));
        if (v1170 != v1173)
        {
          v1174 = *v1170;
LABEL_582:
          v1175 = *v1167;
          v1176 = *(_DWORD *)(a3[21] + 4 * v1172);
          v1177 = *(_QWORD *)(result + 9664) + 8 * v1174;
          v1178 = *((unsigned int *)a2 + 4);
          v1179 = *a2;
          if (v5 && v1175 < v1176)
          {
            v1180 = *(int64x2_t *)(v1177 + 16);
            v1181 = (int64x2_t *)(v1179 + 8 * (v1176 + (_DWORD)v1178 * v1175));
            v1182 = *(_OWORD *)(v1177 + 32);
            v1183 = *(_OWORD *)(v1177 + 48);
            v1184 = *(int64x2_t *)(v1177 + 64);
            v1185 = *(int64x2_t *)(v1177 + 80);
            v1187 = *(int64x2_t *)(v1177 + 96);
            v1186 = *(int64x2_t *)(v1177 + 112);
            *v1181 = *(int64x2_t *)v1177;
            v1181[1] = v1180;
            v1188 = &v1181->i8[8 * v1178];
            *(_OWORD *)v1188 = v1182;
            *((_OWORD *)v1188 + 1) = v1183;
          }
          else
          {
            v1181 = (int64x2_t *)(v1179 + 8 * (v1175 + (_DWORD)v1178 * v1176));
            v1189 = *(int64x2_t *)(v1177 + 16);
            v1190 = *(int64x2_t *)(v1177 + 32);
            v1191 = *(int64x2_t *)(v1177 + 48);
            v1193 = *(int64x2_t *)(v1177 + 64);
            v1192 = *(int64x2_t *)(v1177 + 80);
            v1194 = vzip1q_s64(*(int64x2_t *)v1177, v1190);
            v1195 = vzip1q_s64(v1193, *(int64x2_t *)(v1177 + 96));
            v1196 = vzip2q_s64(*(int64x2_t *)v1177, v1190);
            v1193.i64[0] = vdupq_laneq_s64(v1193, 1).u64[0];
            v1193.i64[1] = *(_QWORD *)(v1177 + 104);
            v1184 = vzip1q_s64(v1189, v1191);
            v1185 = vzip1q_s64(v1192, *(int64x2_t *)(v1177 + 112));
            v1186.i64[0] = vdupq_laneq_s64(v1192, 1).u64[0];
            v1186.i64[1] = *(_QWORD *)(v1177 + 120);
            v1187 = vzip2q_s64(v1189, v1191);
            *v1181 = v1194;
            v1181[1] = v1195;
            v1197 = (int64x2_t *)((char *)v1181 + 8 * v1178);
            *v1197 = v1196;
            v1197[1] = v1193;
          }
          v1198 = &v1181[v1178];
          *v1198 = v1184;
          v1198[1] = v1185;
          v1199 = (int64x2_t *)((char *)v1181 + 24 * v1178);
          *v1199 = v1187;
          v1199[1] = v1186;
          v1200 = v1170 + 1;
          while (v1200 != v1173)
          {
            ++v1172;
            v1201 = *v1200++;
            v1174 = v1201;
            if (v1201 != -1)
            {
              v1170 = v1200 - 1;
              goto LABEL_582;
            }
          }
          v1165 = *(_DWORD *)(result + 9660);
        }
      }
      ++v1166;
      ++v1167;
    }
    while (v1166 < v1165);
    v5 = *a5;
  }
  v1205 = *(_DWORD *)(result + 11100);
  if (v1205)
  {
    v1206 = 0;
    v1207 = a4[21];
    do
    {
      v1208 = *(_QWORD *)(result + 11176);
      v1209 = *(_DWORD *)(result + 11200) * v1206;
      v1210 = (uint64_t *)(v1208 + 8 * v1209);
      v1211 = *(_DWORD *)(result + 11096);
      if (v1211 && *v1210 == -1)
      {
        v1212 = 0;
        v1242 = 8 * (v1211 + v1209) - 8 * v1209 - 8;
        v1243 = v1208 + 8 * v1209;
        while (v1242)
        {
          v1210 = (uint64_t *)(v1243 + 8);
          ++v1212;
          v1244 = *(_QWORD *)(v1243 + 8);
          v1242 -= 8;
          v1243 += 8;
          if (v1244 != -1)
            goto LABEL_602;
        }
      }
      else
      {
        v1212 = 0;
LABEL_602:
        v1213 = (uint64_t *)(v1208 + 8 * (v1209 + v1211));
        if (v1210 != v1213)
        {
          v1214 = *v1210;
LABEL_604:
          v1215 = *v1207;
          v1216 = *(_DWORD *)(a3[21] + 4 * v1212);
          v1217 = *(_QWORD *)(result + 11104) + 8 * v1214;
          v1218 = *((unsigned int *)a2 + 4);
          v1219 = *a2;
          if (v5 && v1215 < v1216)
          {
            v1220 = *(int64x2_t *)(v1217 + 16);
            v1221 = (int64x2_t *)(v1219 + 8 * (v1216 + (_DWORD)v1218 * v1215));
            v1222 = *(_OWORD *)(v1217 + 32);
            v1223 = *(_OWORD *)(v1217 + 48);
            v1224 = *(int64x2_t *)(v1217 + 64);
            v1225 = *(int64x2_t *)(v1217 + 80);
            v1227 = *(int64x2_t *)(v1217 + 96);
            v1226 = *(int64x2_t *)(v1217 + 112);
            *v1221 = *(int64x2_t *)v1217;
            v1221[1] = v1220;
            v1228 = &v1221->i8[8 * v1218];
            *(_OWORD *)v1228 = v1222;
            *((_OWORD *)v1228 + 1) = v1223;
          }
          else
          {
            v1221 = (int64x2_t *)(v1219 + 8 * (v1215 + (_DWORD)v1218 * v1216));
            v1229 = *(int64x2_t *)(v1217 + 16);
            v1230 = *(int64x2_t *)(v1217 + 32);
            v1231 = *(int64x2_t *)(v1217 + 48);
            v1233 = *(int64x2_t *)(v1217 + 64);
            v1232 = *(int64x2_t *)(v1217 + 80);
            v1234 = vzip1q_s64(*(int64x2_t *)v1217, v1230);
            v1235 = vzip1q_s64(v1233, *(int64x2_t *)(v1217 + 96));
            v1236 = vzip2q_s64(*(int64x2_t *)v1217, v1230);
            v1233.i64[0] = vdupq_laneq_s64(v1233, 1).u64[0];
            v1233.i64[1] = *(_QWORD *)(v1217 + 104);
            v1224 = vzip1q_s64(v1229, v1231);
            v1225 = vzip1q_s64(v1232, *(int64x2_t *)(v1217 + 112));
            v1226.i64[0] = vdupq_laneq_s64(v1232, 1).u64[0];
            v1226.i64[1] = *(_QWORD *)(v1217 + 120);
            v1227 = vzip2q_s64(v1229, v1231);
            *v1221 = v1234;
            v1221[1] = v1235;
            v1237 = (int64x2_t *)((char *)v1221 + 8 * v1218);
            *v1237 = v1236;
            v1237[1] = v1233;
          }
          v1238 = &v1221[v1218];
          *v1238 = v1224;
          v1238[1] = v1225;
          v1239 = (int64x2_t *)((char *)v1221 + 24 * v1218);
          *v1239 = v1227;
          v1239[1] = v1226;
          v1240 = v1210 + 1;
          while (v1240 != v1213)
          {
            ++v1212;
            v1241 = *v1240++;
            v1214 = v1241;
            if (v1241 != -1)
            {
              v1210 = v1240 - 1;
              goto LABEL_604;
            }
          }
          v1205 = *(_DWORD *)(result + 11100);
        }
      }
      ++v1206;
      ++v1207;
    }
    while (v1206 < v1205);
    v5 = *a5;
  }
  v1245 = *(_DWORD *)(result + 12540);
  if (v1245)
  {
    v1246 = 0;
    v1247 = a4[24];
    do
    {
      v1248 = *(_QWORD *)(result + 12616);
      v1249 = *(_DWORD *)(result + 12640) * v1246;
      v1250 = (uint64_t *)(v1248 + 8 * v1249);
      v1251 = *(_DWORD *)(result + 12536);
      if (v1251 && *v1250 == -1)
      {
        v1252 = 0;
        v1281 = 8 * (v1251 + v1249) - 8 * v1249 - 8;
        v1282 = v1248 + 8 * v1249;
        while (v1281)
        {
          v1250 = (uint64_t *)(v1282 + 8);
          ++v1252;
          v1283 = *(_QWORD *)(v1282 + 8);
          v1281 -= 8;
          v1282 += 8;
          if (v1283 != -1)
            goto LABEL_624;
        }
      }
      else
      {
        v1252 = 0;
LABEL_624:
        v1253 = (uint64_t *)(v1248 + 8 * (v1249 + v1251));
        if (v1250 != v1253)
        {
          v1254 = *v1250;
LABEL_626:
          v1255 = *v1247;
          v1256 = *(_DWORD *)(a3[21] + 4 * v1252);
          v1257 = *(_QWORD *)(result + 12544) + 8 * v1254;
          v1258 = *((unsigned int *)a2 + 4);
          v1259 = *a2;
          if (v5 && v1255 < v1256)
          {
            v1260 = *(_OWORD *)(v1257 + 16);
            v1261 = (_OWORD *)(v1259 + 8 * (v1256 + (_DWORD)v1258 * v1255));
            v1262 = *(_OWORD *)(v1257 + 32);
            v1263 = *(_OWORD *)(v1257 + 48);
            v1264 = *(_OWORD *)(v1257 + 64);
            v1265 = *(_OWORD *)(v1257 + 80);
            *v1261 = *(_OWORD *)v1257;
            v1261[1] = v1260;
            v1266 = (_OWORD *)((char *)v1261 + 8 * v1258);
            *v1266 = v1262;
            v1266[1] = v1263;
            v1267 = &v1261[v1258];
            *v1267 = v1264;
            v1267[1] = v1265;
          }
          else
          {
            v1268 = (int64x2_t *)(v1259 + 8 * (v1255 + (_DWORD)v1258 * v1256));
            v1269 = *(int64x2_t *)(v1257 + 16);
            v1271 = *(int64x2_t *)(v1257 + 32);
            v1270 = *(int64x2_t *)(v1257 + 48);
            v1273 = *(_OWORD *)(v1257 + 64);
            v1272 = *(_OWORD *)(v1257 + 80);
            v1274 = vzip1q_s64(*(int64x2_t *)v1257, v1271);
            v1275 = vzip2q_s64(*(int64x2_t *)v1257, v1271);
            v1268[1].i64[0] = v1273;
            *v1268 = v1274;
            v1276 = (int64x2_t *)((char *)v1268 + 8 * v1258);
            *v1276 = v1275;
            v1276[1].i64[0] = *((_QWORD *)&v1273 + 1);
            v1277 = &v1268[v1258];
            v1277[1].i64[0] = v1272;
            *v1277 = vzip1q_s64(v1269, v1270);
            v1278 = (int64x2_t *)((char *)v1268 + 24 * v1258);
            v1278[1].i64[0] = *((_QWORD *)&v1272 + 1);
            *v1278 = vzip2q_s64(v1269, v1270);
          }
          v1279 = v1250 + 1;
          while (v1279 != v1253)
          {
            ++v1252;
            v1280 = *v1279++;
            v1254 = v1280;
            if (v1280 != -1)
            {
              v1250 = v1279 - 1;
              goto LABEL_626;
            }
          }
          v1245 = *(_DWORD *)(result + 12540);
        }
      }
      ++v1246;
      ++v1247;
    }
    while (v1246 < v1245);
    v5 = *a5;
  }
  v1284 = *(_DWORD *)(result + 13980);
  if (v1284)
  {
    v1285 = 0;
    v1286 = a4[27];
    do
    {
      v1287 = *(_QWORD *)(result + 14056);
      v1288 = *(_DWORD *)(result + 14080) * v1285;
      v1289 = (uint64_t *)(v1287 + 8 * v1288);
      v1290 = *(_DWORD *)(result + 13976);
      if (v1290 && *v1289 == -1)
      {
        v1291 = 0;
        v1320 = 8 * (v1290 + v1288) - 8 * v1288 - 8;
        v1321 = v1287 + 8 * v1288;
        while (v1320)
        {
          v1289 = (uint64_t *)(v1321 + 8);
          ++v1291;
          v1322 = *(_QWORD *)(v1321 + 8);
          v1320 -= 8;
          v1321 += 8;
          if (v1322 != -1)
            goto LABEL_646;
        }
      }
      else
      {
        v1291 = 0;
LABEL_646:
        v1292 = (uint64_t *)(v1287 + 8 * (v1288 + v1290));
        if (v1289 != v1292)
        {
          v1293 = *v1289;
LABEL_648:
          v1294 = *v1286;
          v1295 = *(_DWORD *)(a3[21] + 4 * v1291);
          v1296 = *(_QWORD *)(result + 13984) + 8 * v1293;
          v1297 = *((unsigned int *)a2 + 4);
          v1298 = *a2;
          if (v5 && v1294 < v1295)
          {
            v1299 = *(_OWORD *)(v1296 + 16);
            v1300 = (_OWORD *)(v1298 + 8 * (v1295 + (_DWORD)v1297 * v1294));
            v1301 = *(_OWORD *)(v1296 + 32);
            v1302 = *(_OWORD *)(v1296 + 48);
            v1303 = *(_OWORD *)(v1296 + 64);
            v1304 = *(_OWORD *)(v1296 + 80);
            *v1300 = *(_OWORD *)v1296;
            v1300[1] = v1299;
            v1305 = (_OWORD *)((char *)v1300 + 8 * v1297);
            *v1305 = v1301;
            v1305[1] = v1302;
            v1306 = &v1300[v1297];
            *v1306 = v1303;
            v1306[1] = v1304;
          }
          else
          {
            v1307 = (int64x2_t *)(v1298 + 8 * (v1294 + (_DWORD)v1297 * v1295));
            v1308 = *(int64x2_t *)(v1296 + 16);
            v1310 = *(int64x2_t *)(v1296 + 32);
            v1309 = *(int64x2_t *)(v1296 + 48);
            v1312 = *(_OWORD *)(v1296 + 64);
            v1311 = *(_OWORD *)(v1296 + 80);
            v1313 = vzip1q_s64(*(int64x2_t *)v1296, v1310);
            v1314 = vzip2q_s64(*(int64x2_t *)v1296, v1310);
            v1307[1].i64[0] = v1312;
            *v1307 = v1313;
            v1315 = (int64x2_t *)((char *)v1307 + 8 * v1297);
            *v1315 = v1314;
            v1315[1].i64[0] = *((_QWORD *)&v1312 + 1);
            v1316 = &v1307[v1297];
            v1316[1].i64[0] = v1311;
            *v1316 = vzip1q_s64(v1308, v1309);
            v1317 = (int64x2_t *)((char *)v1307 + 24 * v1297);
            v1317[1].i64[0] = *((_QWORD *)&v1311 + 1);
            *v1317 = vzip2q_s64(v1308, v1309);
          }
          v1318 = v1289 + 1;
          while (v1318 != v1292)
          {
            ++v1291;
            v1319 = *v1318++;
            v1293 = v1319;
            if (v1319 != -1)
            {
              v1289 = v1318 - 1;
              goto LABEL_648;
            }
          }
          v1284 = *(_DWORD *)(result + 13980);
        }
      }
      ++v1285;
      ++v1286;
    }
    while (v1285 < v1284);
    v5 = *a5;
  }
  v1323 = *(_DWORD *)(result + 876);
  if (v1323)
  {
    v1324 = 0;
    v1325 = *a4;
    do
    {
      v1326 = *(_QWORD *)(result + 952);
      v1327 = *(_DWORD *)(result + 976) * v1324;
      v1328 = (uint64_t *)(v1326 + 8 * v1327);
      v1329 = *(_DWORD *)(result + 872);
      if (v1329 && *v1328 == -1)
      {
        v1330 = 0;
        v1376 = 8 * (v1329 + v1327) - 8 * v1327 - 8;
        v1377 = v1326 + 8 * v1327;
        while (v1376)
        {
          v1328 = (uint64_t *)(v1377 + 8);
          ++v1330;
          v1378 = *(_QWORD *)(v1377 + 8);
          v1376 -= 8;
          v1377 += 8;
          if (v1378 != -1)
            goto LABEL_668;
        }
      }
      else
      {
        v1330 = 0;
LABEL_668:
        v1331 = (uint64_t *)(v1326 + 8 * (v1327 + v1329));
        if (v1328 != v1331)
        {
          v1332 = *v1328;
LABEL_670:
          v1333 = *v1325;
          v1334 = *(_DWORD *)(a3[18] + 4 * v1330);
          v1335 = *(_QWORD *)(result + 880) + 8 * v1332;
          v1336 = *((unsigned int *)a2 + 4);
          v1337 = *a2;
          if (v5 && v1333 < v1334)
          {
            v1338 = *(_OWORD *)(v1335 + 16);
            v1339 = (_OWORD *)(v1337 + 8 * (v1334 + (_DWORD)v1336 * v1333));
            v1340 = *(_OWORD *)(v1335 + 32);
            v1341 = *(_OWORD *)(v1335 + 48);
            v1342 = *(_OWORD *)(v1335 + 64);
            v1343 = *(_OWORD *)(v1335 + 80);
            v1344 = *(_OWORD *)(v1335 + 96);
            v1345 = *(_OWORD *)(v1335 + 112);
            v1346 = *(_OWORD *)(v1335 + 128);
            v1347 = *(_OWORD *)(v1335 + 144);
            v1348 = *(_OWORD *)(v1335 + 160);
            v1349 = *(_OWORD *)(v1335 + 176);
            *v1339 = *(_OWORD *)v1335;
            v1339[1] = v1338;
            v1350 = (_OWORD *)((char *)v1339 + 8 * v1336);
            *v1350 = v1340;
            v1350[1] = v1341;
            v1351 = &v1339[v1336];
            *v1351 = v1342;
            v1351[1] = v1343;
            v1352 = (_OWORD *)((char *)v1339 + 24 * v1336);
            *v1352 = v1344;
            v1352[1] = v1345;
            v1353 = &v1339[2 * v1336];
            *v1353 = v1346;
            v1353[1] = v1347;
            v1354 = (_OWORD *)((char *)v1339 + 40 * v1336);
            *v1354 = v1348;
            v1354[1] = v1349;
          }
          else
          {
            v1355 = (int64x2_t *)(v1337 + 8 * (v1333 + (_DWORD)v1336 * v1334));
            v1356 = *(int64x2_t *)(v1335 + 16);
            v1358 = *(int64x2_t *)(v1335 + 32);
            v1357 = *(int64x2_t *)(v1335 + 48);
            v1360 = *(int64x2_t *)(v1335 + 64);
            v1359 = *(int64x2_t *)(v1335 + 80);
            v1362 = *(int64x2_t *)(v1335 + 128);
            v1361 = *(int64x2_t *)(v1335 + 144);
            v1363 = vzip1q_s64(*(int64x2_t *)v1335, v1358);
            v1364 = vzip1q_s64(v1360, *(int64x2_t *)(v1335 + 96));
            v1365 = vzip1q_s64(v1362, *(int64x2_t *)(v1335 + 160));
            v1360.i64[0] = vdupq_laneq_s64(v1360, 1).u64[0];
            v1360.i64[1] = *(_QWORD *)(v1335 + 104);
            v1366.i64[0] = vdupq_laneq_s64(v1362, 1).u64[0];
            v1367 = vzip2q_s64(*(int64x2_t *)v1335, v1358);
            v1366.i64[1] = *(_QWORD *)(v1335 + 168);
            v1368 = vzip1q_s64(v1359, *(int64x2_t *)(v1335 + 112));
            v1369 = vzip1q_s64(v1361, *(int64x2_t *)(v1335 + 176));
            v1359.i64[0] = vdupq_laneq_s64(v1359, 1).u64[0];
            v1359.i64[1] = *(_QWORD *)(v1335 + 120);
            v1370.i64[0] = vdupq_laneq_s64(v1361, 1).u64[0];
            v1370.i64[1] = *(_QWORD *)(v1335 + 184);
            v1355[1] = v1364;
            v1355[2] = v1365;
            *v1355 = v1363;
            v1371 = (int64x2_t *)((char *)v1355 + 8 * v1336);
            v1371[1] = v1360;
            v1371[2] = v1366;
            *v1371 = v1367;
            v1372 = &v1355[v1336];
            v1372[1] = v1368;
            v1372[2] = v1369;
            *v1372 = vzip1q_s64(v1356, v1357);
            v1373 = (int64x2_t *)((char *)v1355 + 24 * v1336);
            v1373[1] = v1359;
            v1373[2] = v1370;
            *v1373 = vzip2q_s64(v1356, v1357);
          }
          v1374 = v1328 + 1;
          while (v1374 != v1331)
          {
            ++v1330;
            v1375 = *v1374++;
            v1332 = v1375;
            if (v1375 != -1)
            {
              v1328 = v1374 - 1;
              goto LABEL_670;
            }
          }
          v1323 = *(_DWORD *)(result + 876);
        }
      }
      ++v1324;
      ++v1325;
    }
    while (v1324 < v1323);
    v5 = *a5;
  }
  v1379 = *(_DWORD *)(result + 2316);
  if (v1379)
  {
    v1380 = 0;
    v1381 = a4[3];
    do
    {
      v1382 = *(_QWORD *)(result + 2392);
      v1383 = *(_DWORD *)(result + 2416) * v1380;
      v1384 = (uint64_t *)(v1382 + 8 * v1383);
      v1385 = *(_DWORD *)(result + 2312);
      if (v1385 && *v1384 == -1)
      {
        v1386 = 0;
        v1446 = 8 * (v1385 + v1383) - 8 * v1383 - 8;
        v1447 = v1382 + 8 * v1383;
        while (v1446)
        {
          v1384 = (uint64_t *)(v1447 + 8);
          ++v1386;
          v1448 = *(_QWORD *)(v1447 + 8);
          v1446 -= 8;
          v1447 += 8;
          if (v1448 != -1)
            goto LABEL_690;
        }
      }
      else
      {
        v1386 = 0;
LABEL_690:
        v1387 = (uint64_t *)(v1382 + 8 * (v1383 + v1385));
        if (v1384 != v1387)
        {
          v1388 = *v1384;
LABEL_692:
          v1389 = *v1381;
          v1390 = *(_DWORD *)(a3[18] + 4 * v1386);
          v1391 = *(_QWORD *)(result + 2320) + 8 * v1388;
          v1392 = *((unsigned int *)a2 + 4);
          v1393 = *a2;
          if (v5 && v1389 < v1390)
          {
            v1394 = *(_OWORD *)(v1391 + 16);
            v1395 = (_OWORD *)(v1393 + 8 * (v1390 + (_DWORD)v1392 * v1389));
            v1396 = *(_OWORD *)(v1391 + 32);
            v1397 = *(_OWORD *)(v1391 + 48);
            v1398 = *(_OWORD *)(v1391 + 64);
            v1399 = *(_OWORD *)(v1391 + 80);
            v1400 = *(_OWORD *)(v1391 + 96);
            v1401 = *(_OWORD *)(v1391 + 112);
            v1402 = *(_OWORD *)(v1391 + 128);
            v1403 = *(_OWORD *)(v1391 + 144);
            v1404 = *(_OWORD *)(v1391 + 160);
            v1405 = *(_OWORD *)(v1391 + 176);
            v1406 = *(_OWORD *)(v1391 + 192);
            v1407 = *(_OWORD *)(v1391 + 208);
            v1408 = *(_OWORD *)(v1391 + 224);
            v1409 = *(_OWORD *)(v1391 + 240);
            v1410 = *(_OWORD *)(v1391 + 256);
            v1411 = *(_OWORD *)(v1391 + 272);
            *v1395 = *(_OWORD *)v1391;
            v1395[1] = v1394;
            v1412 = (_OWORD *)((char *)v1395 + 8 * v1392);
            *v1412 = v1396;
            v1412[1] = v1397;
            v1413 = &v1395[v1392];
            *v1413 = v1398;
            v1413[1] = v1399;
            v1414 = (_OWORD *)((char *)v1395 + 24 * v1392);
            *v1414 = v1400;
            v1414[1] = v1401;
            v1415 = &v1395[2 * v1392];
            *v1415 = v1402;
            v1415[1] = v1403;
            v1416 = (_OWORD *)((char *)v1395 + 40 * v1392);
            *v1416 = v1404;
            v1416[1] = v1405;
            v1417 = &v1395[3 * v1392];
            *v1417 = v1406;
            v1417[1] = v1407;
            v1418 = (_OWORD *)((char *)v1395 + 56 * v1392);
            *v1418 = v1408;
            v1418[1] = v1409;
            v1419 = &v1395[4 * v1392];
            *v1419 = v1410;
            v1419[1] = v1411;
          }
          else
          {
            v1420 = *(int64x2_t *)(v1391 + 16);
            v1421 = (int64x2_t *)(v1393 + 8 * (v1389 + (_DWORD)v1392 * v1390));
            v1423 = *(int64x2_t *)(v1391 + 32);
            v1422 = *(int64x2_t *)(v1391 + 48);
            v1425 = *(int64x2_t *)(v1391 + 64);
            v1424 = *(int64x2_t *)(v1391 + 80);
            v1427 = *(int64x2_t *)(v1391 + 128);
            v1426 = *(int64x2_t *)(v1391 + 144);
            v1429 = *(int64x2_t *)(v1391 + 192);
            v1428 = *(int64x2_t *)(v1391 + 208);
            v1431 = *(_OWORD *)(v1391 + 256);
            v1430 = *(_OWORD *)(v1391 + 272);
            v1432 = vzip1q_s64(*(int64x2_t *)v1391, v1423);
            v1433 = vzip1q_s64(v1425, *(int64x2_t *)(v1391 + 96));
            v1434 = vzip1q_s64(v1429, *(int64x2_t *)(v1391 + 224));
            v1435 = vzip2q_s64(*(int64x2_t *)v1391, v1423);
            v1423.i64[0] = vdupq_laneq_s64(v1425, 1).u64[0];
            v1423.i64[1] = *(_QWORD *)(v1391 + 104);
            v1425.i64[0] = vdupq_laneq_s64(v1427, 1).u64[0];
            v1425.i64[1] = *(_QWORD *)(v1391 + 168);
            v1436.i64[0] = vdupq_laneq_s64(v1429, 1).u64[0];
            v1436.i64[1] = *(_QWORD *)(v1391 + 232);
            v1437 = vzip1q_s64(v1424, *(int64x2_t *)(v1391 + 112));
            v1438 = vzip1q_s64(v1426, *(int64x2_t *)(v1391 + 176));
            v1439 = vzip1q_s64(v1428, *(int64x2_t *)(v1391 + 240));
            v1424.i64[0] = vdupq_laneq_s64(v1424, 1).u64[0];
            v1424.i64[1] = *(_QWORD *)(v1391 + 120);
            v1440.i64[0] = vdupq_laneq_s64(v1426, 1).u64[0];
            v1440.i64[1] = *(_QWORD *)(v1391 + 184);
            v1426.i64[0] = vdupq_laneq_s64(v1428, 1).u64[0];
            v1426.i64[1] = *(_QWORD *)(v1391 + 248);
            v1421[2] = vzip1q_s64(v1427, *(int64x2_t *)(v1391 + 160));
            v1421[3] = v1434;
            v1421[4].i64[0] = v1431;
            *v1421 = v1432;
            v1421[1] = v1433;
            v1441 = (int64x2_t *)((char *)v1421 + 8 * v1392);
            v1441[2] = v1425;
            v1441[3] = v1436;
            *v1441 = v1435;
            v1441[1] = v1423;
            v1441[4].i64[0] = *((_QWORD *)&v1431 + 1);
            v1442 = &v1421[v1392];
            v1442[4].i64[0] = v1430;
            v1442[2] = v1438;
            v1442[3] = v1439;
            *v1442 = vzip1q_s64(v1420, v1422);
            v1442[1] = v1437;
            v1443 = (int64x2_t *)((char *)v1421 + 24 * v1392);
            v1443[4].i64[0] = *((_QWORD *)&v1430 + 1);
            v1443[2] = v1440;
            v1443[3] = v1426;
            *v1443 = vzip2q_s64(v1420, v1422);
            v1443[1] = v1424;
          }
          v1444 = v1384 + 1;
          while (v1444 != v1387)
          {
            ++v1386;
            v1445 = *v1444++;
            v1388 = v1445;
            if (v1445 != -1)
            {
              v1384 = v1444 - 1;
              goto LABEL_692;
            }
          }
          v1379 = *(_DWORD *)(result + 2316);
        }
      }
      ++v1380;
      ++v1381;
    }
    while (v1380 < v1379);
    v5 = *a5;
  }
  v1449 = *(_DWORD *)(result + 3756);
  if (v1449)
  {
    v1450 = 0;
    v1451 = a4[6];
    do
    {
      v1452 = *(_QWORD *)(result + 3832);
      v1453 = *(_DWORD *)(result + 3856) * v1450;
      v1454 = (uint64_t *)(v1452 + 8 * v1453);
      v1455 = *(_DWORD *)(result + 3752);
      if (v1455 && *v1454 == -1)
      {
        v1456 = 0;
        v1502 = 8 * (v1455 + v1453) - 8 * v1453 - 8;
        v1503 = v1452 + 8 * v1453;
        while (v1502)
        {
          v1454 = (uint64_t *)(v1503 + 8);
          ++v1456;
          v1504 = *(_QWORD *)(v1503 + 8);
          v1502 -= 8;
          v1503 += 8;
          if (v1504 != -1)
            goto LABEL_712;
        }
      }
      else
      {
        v1456 = 0;
LABEL_712:
        v1457 = (uint64_t *)(v1452 + 8 * (v1453 + v1455));
        if (v1454 != v1457)
        {
          v1458 = *v1454;
LABEL_714:
          v1459 = *v1451;
          v1460 = *(_DWORD *)(a3[18] + 4 * v1456);
          v1461 = *(_QWORD *)(result + 3760) + 8 * v1458;
          v1462 = *((unsigned int *)a2 + 4);
          v1463 = *a2;
          if (v5 && v1459 < v1460)
          {
            v1464 = *(_OWORD *)(v1461 + 16);
            v1465 = (_OWORD *)(v1463 + 8 * (v1460 + (_DWORD)v1462 * v1459));
            v1466 = *(_OWORD *)(v1461 + 32);
            v1467 = *(_OWORD *)(v1461 + 48);
            v1468 = *(_OWORD *)(v1461 + 64);
            v1469 = *(_OWORD *)(v1461 + 80);
            v1470 = *(_OWORD *)(v1461 + 96);
            v1471 = *(_OWORD *)(v1461 + 112);
            v1472 = *(_OWORD *)(v1461 + 128);
            v1473 = *(_OWORD *)(v1461 + 144);
            v1474 = *(_OWORD *)(v1461 + 160);
            v1475 = *(_OWORD *)(v1461 + 176);
            *v1465 = *(_OWORD *)v1461;
            v1465[1] = v1464;
            v1476 = (_OWORD *)((char *)v1465 + 8 * v1462);
            *v1476 = v1466;
            v1476[1] = v1467;
            v1477 = &v1465[v1462];
            *v1477 = v1468;
            v1477[1] = v1469;
            v1478 = (_OWORD *)((char *)v1465 + 24 * v1462);
            *v1478 = v1470;
            v1478[1] = v1471;
            v1479 = &v1465[2 * v1462];
            *v1479 = v1472;
            v1479[1] = v1473;
            v1480 = (_OWORD *)((char *)v1465 + 40 * v1462);
            *v1480 = v1474;
            v1480[1] = v1475;
          }
          else
          {
            v1481 = (int64x2_t *)(v1463 + 8 * (v1459 + (_DWORD)v1462 * v1460));
            v1482 = *(int64x2_t *)(v1461 + 16);
            v1484 = *(int64x2_t *)(v1461 + 32);
            v1483 = *(int64x2_t *)(v1461 + 48);
            v1486 = *(int64x2_t *)(v1461 + 64);
            v1485 = *(int64x2_t *)(v1461 + 80);
            v1488 = *(int64x2_t *)(v1461 + 128);
            v1487 = *(int64x2_t *)(v1461 + 144);
            v1489 = vzip1q_s64(*(int64x2_t *)v1461, v1484);
            v1490 = vzip1q_s64(v1486, *(int64x2_t *)(v1461 + 96));
            v1491 = vzip1q_s64(v1488, *(int64x2_t *)(v1461 + 160));
            v1486.i64[0] = vdupq_laneq_s64(v1486, 1).u64[0];
            v1486.i64[1] = *(_QWORD *)(v1461 + 104);
            v1492.i64[0] = vdupq_laneq_s64(v1488, 1).u64[0];
            v1493 = vzip2q_s64(*(int64x2_t *)v1461, v1484);
            v1492.i64[1] = *(_QWORD *)(v1461 + 168);
            v1494 = vzip1q_s64(v1485, *(int64x2_t *)(v1461 + 112));
            v1495 = vzip1q_s64(v1487, *(int64x2_t *)(v1461 + 176));
            v1485.i64[0] = vdupq_laneq_s64(v1485, 1).u64[0];
            v1485.i64[1] = *(_QWORD *)(v1461 + 120);
            v1496.i64[0] = vdupq_laneq_s64(v1487, 1).u64[0];
            v1496.i64[1] = *(_QWORD *)(v1461 + 184);
            v1481[1] = v1490;
            v1481[2] = v1491;
            *v1481 = v1489;
            v1497 = (int64x2_t *)((char *)v1481 + 8 * v1462);
            v1497[1] = v1486;
            v1497[2] = v1492;
            *v1497 = v1493;
            v1498 = &v1481[v1462];
            v1498[1] = v1494;
            v1498[2] = v1495;
            *v1498 = vzip1q_s64(v1482, v1483);
            v1499 = (int64x2_t *)((char *)v1481 + 24 * v1462);
            v1499[1] = v1485;
            v1499[2] = v1496;
            *v1499 = vzip2q_s64(v1482, v1483);
          }
          v1500 = v1454 + 1;
          while (v1500 != v1457)
          {
            ++v1456;
            v1501 = *v1500++;
            v1458 = v1501;
            if (v1501 != -1)
            {
              v1454 = v1500 - 1;
              goto LABEL_714;
            }
          }
          v1449 = *(_DWORD *)(result + 3756);
        }
      }
      ++v1450;
      ++v1451;
    }
    while (v1450 < v1449);
    v5 = *a5;
  }
  v1505 = *(_DWORD *)(result + 5196);
  if (v1505)
  {
    v1506 = 0;
    v1507 = a4[9];
    do
    {
      v1508 = *(_QWORD *)(result + 5272);
      v1509 = *(_DWORD *)(result + 5296) * v1506;
      v1510 = (uint64_t *)(v1508 + 8 * v1509);
      v1511 = *(_DWORD *)(result + 5192);
      if (v1511 && *v1510 == -1)
      {
        v1512 = 0;
        v1558 = 8 * (v1511 + v1509) - 8 * v1509 - 8;
        v1559 = v1508 + 8 * v1509;
        while (v1558)
        {
          v1510 = (uint64_t *)(v1559 + 8);
          ++v1512;
          v1560 = *(_QWORD *)(v1559 + 8);
          v1558 -= 8;
          v1559 += 8;
          if (v1560 != -1)
            goto LABEL_734;
        }
      }
      else
      {
        v1512 = 0;
LABEL_734:
        v1513 = (uint64_t *)(v1508 + 8 * (v1509 + v1511));
        if (v1510 != v1513)
        {
          v1514 = *v1510;
LABEL_736:
          v1515 = *v1507;
          v1516 = *(_DWORD *)(a3[18] + 4 * v1512);
          v1517 = *(_QWORD *)(result + 5200) + 8 * v1514;
          v1518 = *((unsigned int *)a2 + 4);
          v1519 = *a2;
          if (v5 && v1515 < v1516)
          {
            v1520 = *(_OWORD *)(v1517 + 16);
            v1521 = (_OWORD *)(v1519 + 8 * (v1516 + (_DWORD)v1518 * v1515));
            v1522 = *(_OWORD *)(v1517 + 32);
            v1523 = *(_OWORD *)(v1517 + 48);
            v1524 = *(_OWORD *)(v1517 + 64);
            v1525 = *(_OWORD *)(v1517 + 80);
            v1526 = *(_OWORD *)(v1517 + 96);
            v1527 = *(_OWORD *)(v1517 + 112);
            v1528 = *(_OWORD *)(v1517 + 128);
            v1529 = *(_OWORD *)(v1517 + 144);
            v1530 = *(_OWORD *)(v1517 + 160);
            v1531 = *(_OWORD *)(v1517 + 176);
            *v1521 = *(_OWORD *)v1517;
            v1521[1] = v1520;
            v1532 = (_OWORD *)((char *)v1521 + 8 * v1518);
            *v1532 = v1522;
            v1532[1] = v1523;
            v1533 = &v1521[v1518];
            *v1533 = v1524;
            v1533[1] = v1525;
            v1534 = (_OWORD *)((char *)v1521 + 24 * v1518);
            *v1534 = v1526;
            v1534[1] = v1527;
            v1535 = &v1521[2 * v1518];
            *v1535 = v1528;
            v1535[1] = v1529;
            v1536 = (_OWORD *)((char *)v1521 + 40 * v1518);
            *v1536 = v1530;
            v1536[1] = v1531;
          }
          else
          {
            v1537 = (int64x2_t *)(v1519 + 8 * (v1515 + (_DWORD)v1518 * v1516));
            v1538 = *(int64x2_t *)(v1517 + 16);
            v1540 = *(int64x2_t *)(v1517 + 32);
            v1539 = *(int64x2_t *)(v1517 + 48);
            v1542 = *(int64x2_t *)(v1517 + 64);
            v1541 = *(int64x2_t *)(v1517 + 80);
            v1544 = *(int64x2_t *)(v1517 + 128);
            v1543 = *(int64x2_t *)(v1517 + 144);
            v1545 = vzip1q_s64(*(int64x2_t *)v1517, v1540);
            v1546 = vzip1q_s64(v1542, *(int64x2_t *)(v1517 + 96));
            v1547 = vzip1q_s64(v1544, *(int64x2_t *)(v1517 + 160));
            v1542.i64[0] = vdupq_laneq_s64(v1542, 1).u64[0];
            v1542.i64[1] = *(_QWORD *)(v1517 + 104);
            v1548.i64[0] = vdupq_laneq_s64(v1544, 1).u64[0];
            v1549 = vzip2q_s64(*(int64x2_t *)v1517, v1540);
            v1548.i64[1] = *(_QWORD *)(v1517 + 168);
            v1550 = vzip1q_s64(v1541, *(int64x2_t *)(v1517 + 112));
            v1551 = vzip1q_s64(v1543, *(int64x2_t *)(v1517 + 176));
            v1541.i64[0] = vdupq_laneq_s64(v1541, 1).u64[0];
            v1541.i64[1] = *(_QWORD *)(v1517 + 120);
            v1552.i64[0] = vdupq_laneq_s64(v1543, 1).u64[0];
            v1552.i64[1] = *(_QWORD *)(v1517 + 184);
            v1537[1] = v1546;
            v1537[2] = v1547;
            *v1537 = v1545;
            v1553 = (int64x2_t *)((char *)v1537 + 8 * v1518);
            v1553[1] = v1542;
            v1553[2] = v1548;
            *v1553 = v1549;
            v1554 = &v1537[v1518];
            v1554[1] = v1550;
            v1554[2] = v1551;
            *v1554 = vzip1q_s64(v1538, v1539);
            v1555 = (int64x2_t *)((char *)v1537 + 24 * v1518);
            v1555[1] = v1541;
            v1555[2] = v1552;
            *v1555 = vzip2q_s64(v1538, v1539);
          }
          v1556 = v1510 + 1;
          while (v1556 != v1513)
          {
            ++v1512;
            v1557 = *v1556++;
            v1514 = v1557;
            if (v1557 != -1)
            {
              v1510 = v1556 - 1;
              goto LABEL_736;
            }
          }
          v1505 = *(_DWORD *)(result + 5196);
        }
      }
      ++v1506;
      ++v1507;
    }
    while (v1506 < v1505);
    v5 = *a5;
  }
  v1561 = *(_DWORD *)(result + 6636);
  if (v1561)
  {
    v1562 = 0;
    v1563 = a4[12];
    do
    {
      v1564 = *(_QWORD *)(result + 6712);
      v1565 = *(_DWORD *)(result + 6736) * v1562;
      v1566 = (uint64_t *)(v1564 + 8 * v1565);
      v1567 = *(_DWORD *)(result + 6632);
      if (v1567 && *v1566 == -1)
      {
        v1568 = 0;
        v1597 = 8 * (v1567 + v1565) - 8 * v1565 - 8;
        v1598 = v1564 + 8 * v1565;
        while (v1597)
        {
          v1566 = (uint64_t *)(v1598 + 8);
          ++v1568;
          v1599 = *(_QWORD *)(v1598 + 8);
          v1597 -= 8;
          v1598 += 8;
          if (v1599 != -1)
            goto LABEL_756;
        }
      }
      else
      {
        v1568 = 0;
LABEL_756:
        v1569 = (uint64_t *)(v1564 + 8 * (v1565 + v1567));
        if (v1566 != v1569)
        {
          v1570 = *v1566;
LABEL_758:
          v1571 = *v1563;
          v1572 = *(_DWORD *)(a3[18] + 4 * v1568);
          v1573 = *(_QWORD *)(result + 6640) + 8 * v1570;
          v1574 = *((unsigned int *)a2 + 4);
          v1575 = *a2;
          if (v5 && v1571 < v1572)
          {
            v1576 = *(_OWORD *)(v1573 + 16);
            v1577 = (_OWORD *)(v1575 + 8 * (v1572 + (_DWORD)v1574 * v1571));
            v1578 = *(_OWORD *)(v1573 + 32);
            v1579 = *(_OWORD *)(v1573 + 48);
            v1580 = *(_OWORD *)(v1573 + 64);
            v1581 = *(_OWORD *)(v1573 + 80);
            *v1577 = *(_OWORD *)v1573;
            v1577[1] = v1576;
            v1582 = (_OWORD *)((char *)v1577 + 8 * v1574);
            *v1582 = v1578;
            v1582[1] = v1579;
            v1583 = &v1577[v1574];
            *v1583 = v1580;
            v1583[1] = v1581;
          }
          else
          {
            v1584 = (int64x2_t *)(v1575 + 8 * (v1571 + (_DWORD)v1574 * v1572));
            v1585 = *(int64x2_t *)(v1573 + 16);
            v1587 = *(int64x2_t *)(v1573 + 32);
            v1586 = *(int64x2_t *)(v1573 + 48);
            v1589 = *(_OWORD *)(v1573 + 64);
            v1588 = *(_OWORD *)(v1573 + 80);
            v1590 = vzip1q_s64(*(int64x2_t *)v1573, v1587);
            v1591 = vzip2q_s64(*(int64x2_t *)v1573, v1587);
            v1584[1].i64[0] = v1589;
            *v1584 = v1590;
            v1592 = (int64x2_t *)((char *)v1584 + 8 * v1574);
            *v1592 = v1591;
            v1592[1].i64[0] = *((_QWORD *)&v1589 + 1);
            v1593 = &v1584[v1574];
            v1593[1].i64[0] = v1588;
            *v1593 = vzip1q_s64(v1585, v1586);
            v1594 = (int64x2_t *)((char *)v1584 + 24 * v1574);
            v1594[1].i64[0] = *((_QWORD *)&v1588 + 1);
            *v1594 = vzip2q_s64(v1585, v1586);
          }
          v1595 = v1566 + 1;
          while (v1595 != v1569)
          {
            ++v1568;
            v1596 = *v1595++;
            v1570 = v1596;
            if (v1596 != -1)
            {
              v1566 = v1595 - 1;
              goto LABEL_758;
            }
          }
          v1561 = *(_DWORD *)(result + 6636);
        }
      }
      ++v1562;
      ++v1563;
    }
    while (v1562 < v1561);
    v5 = *a5;
  }
  v1600 = *(_DWORD *)(result + 8076);
  if (v1600)
  {
    v1601 = 0;
    v1602 = a4[15];
    do
    {
      v1603 = *(_QWORD *)(result + 8152);
      v1604 = *(_DWORD *)(result + 8176) * v1601;
      v1605 = (uint64_t *)(v1603 + 8 * v1604);
      v1606 = *(_DWORD *)(result + 8072);
      if (v1606 && *v1605 == -1)
      {
        v1607 = 0;
        v1621 = 8 * (v1606 + v1604) - 8 * v1604 - 8;
        v1622 = v1603 + 8 * v1604;
        while (v1621)
        {
          v1605 = (uint64_t *)(v1622 + 8);
          ++v1607;
          v1623 = *(_QWORD *)(v1622 + 8);
          v1621 -= 8;
          v1622 += 8;
          if (v1623 != -1)
            goto LABEL_778;
        }
      }
      else
      {
        v1607 = 0;
LABEL_778:
        v1608 = (uint64_t *)(v1603 + 8 * (v1604 + v1606));
        if (v1605 != v1608)
        {
          v1609 = *v1605;
LABEL_780:
          v1610 = *v1602;
          v1611 = *(_DWORD *)(a3[18] + 4 * v1607);
          v1612 = (int8x16_t *)(*(_QWORD *)(result + 8080) + 8 * v1609);
          v1613 = *((unsigned int *)a2 + 4);
          v1614 = *a2;
          v1616 = *v1612;
          v1615 = v1612[1];
          if (v5 && v1610 < v1611)
          {
            v1617 = (int8x16_t *)(v1614 + 8 * (v1611 + (_DWORD)v1613 * v1610));
            *v1617 = v1616;
            v1617[1] = v1615;
          }
          else
          {
            v1618 = (_QWORD *)(v1614 + 8 * (v1610 + (_DWORD)v1613 * v1611));
            *v1618 = v1616.i64[0];
            v1618[v1613] = vextq_s8(v1616, v1616, 8uLL).u64[0];
            v1618[2 * v1613] = v1615.i64[0];
            v1618[3 * v1613] = vextq_s8(v1615, v1615, 8uLL).u64[0];
          }
          v1619 = v1605 + 1;
          while (v1619 != v1608)
          {
            ++v1607;
            v1620 = *v1619++;
            v1609 = v1620;
            if (v1620 != -1)
            {
              v1605 = v1619 - 1;
              goto LABEL_780;
            }
          }
          v1600 = *(_DWORD *)(result + 8076);
        }
      }
      ++v1601;
      ++v1602;
    }
    while (v1601 < v1600);
    v5 = *a5;
  }
  v1624 = *(_DWORD *)(result + 9516);
  if (v1624)
  {
    v1625 = 0;
    v1626 = a4[18];
    do
    {
      v1627 = *(_QWORD *)(result + 9592);
      v1628 = *(_DWORD *)(result + 9616) * v1625;
      v1629 = (uint64_t *)(v1627 + 8 * v1628);
      v1630 = *(_DWORD *)(result + 9512);
      if (v1630 && *v1629 == -1)
      {
        v1631 = 0;
        v1661 = 8 * (v1630 + v1628) - 8 * v1628 - 8;
        v1662 = v1627 + 8 * v1628;
        while (v1661)
        {
          v1629 = (uint64_t *)(v1662 + 8);
          ++v1631;
          v1663 = *(_QWORD *)(v1662 + 8);
          v1661 -= 8;
          v1662 += 8;
          if (v1663 != -1)
            goto LABEL_800;
        }
      }
      else
      {
        v1631 = 0;
LABEL_800:
        v1632 = (uint64_t *)(v1627 + 8 * (v1628 + v1630));
        if (v1629 != v1632)
        {
          v1633 = *v1629;
LABEL_802:
          v1634 = *v1626;
          v1635 = *(_DWORD *)(a3[18] + 4 * v1631);
          v1636 = *(_QWORD *)(result + 9520) + 8 * v1633;
          v1637 = *((unsigned int *)a2 + 4);
          v1638 = *a2;
          if (v5 && v1634 < v1635)
          {
            v1639 = *(int64x2_t *)(v1636 + 16);
            v1640 = (int64x2_t *)(v1638 + 8 * (v1635 + (_DWORD)v1637 * v1634));
            v1641 = *(_OWORD *)(v1636 + 32);
            v1642 = *(_OWORD *)(v1636 + 48);
            v1643 = *(int64x2_t *)(v1636 + 64);
            v1644 = *(int64x2_t *)(v1636 + 80);
            v1646 = *(int64x2_t *)(v1636 + 96);
            v1645 = *(int64x2_t *)(v1636 + 112);
            *v1640 = *(int64x2_t *)v1636;
            v1640[1] = v1639;
            v1647 = &v1640->i8[8 * v1637];
            *(_OWORD *)v1647 = v1641;
            *((_OWORD *)v1647 + 1) = v1642;
          }
          else
          {
            v1640 = (int64x2_t *)(v1638 + 8 * (v1634 + (_DWORD)v1637 * v1635));
            v1648 = *(int64x2_t *)(v1636 + 16);
            v1649 = *(int64x2_t *)(v1636 + 32);
            v1650 = *(int64x2_t *)(v1636 + 48);
            v1652 = *(int64x2_t *)(v1636 + 64);
            v1651 = *(int64x2_t *)(v1636 + 80);
            v1653 = vzip1q_s64(*(int64x2_t *)v1636, v1649);
            v1654 = vzip1q_s64(v1652, *(int64x2_t *)(v1636 + 96));
            v1655 = vzip2q_s64(*(int64x2_t *)v1636, v1649);
            v1652.i64[0] = vdupq_laneq_s64(v1652, 1).u64[0];
            v1652.i64[1] = *(_QWORD *)(v1636 + 104);
            v1643 = vzip1q_s64(v1648, v1650);
            v1644 = vzip1q_s64(v1651, *(int64x2_t *)(v1636 + 112));
            v1645.i64[0] = vdupq_laneq_s64(v1651, 1).u64[0];
            v1645.i64[1] = *(_QWORD *)(v1636 + 120);
            v1646 = vzip2q_s64(v1648, v1650);
            *v1640 = v1653;
            v1640[1] = v1654;
            v1656 = (int64x2_t *)((char *)v1640 + 8 * v1637);
            *v1656 = v1655;
            v1656[1] = v1652;
          }
          v1657 = &v1640[v1637];
          *v1657 = v1643;
          v1657[1] = v1644;
          v1658 = (int64x2_t *)((char *)v1640 + 24 * v1637);
          *v1658 = v1646;
          v1658[1] = v1645;
          v1659 = v1629 + 1;
          while (v1659 != v1632)
          {
            ++v1631;
            v1660 = *v1659++;
            v1633 = v1660;
            if (v1660 != -1)
            {
              v1629 = v1659 - 1;
              goto LABEL_802;
            }
          }
          v1624 = *(_DWORD *)(result + 9516);
        }
      }
      ++v1625;
      ++v1626;
    }
    while (v1625 < v1624);
    v5 = *a5;
  }
  v1664 = *(_DWORD *)(result + 10956);
  if (v1664)
  {
    v1665 = 0;
    v1666 = a4[21];
    do
    {
      v1667 = *(_QWORD *)(result + 11032);
      v1668 = *(_DWORD *)(result + 11056) * v1665;
      v1669 = (uint64_t *)(v1667 + 8 * v1668);
      v1670 = *(_DWORD *)(result + 10952);
      if (v1670 && *v1669 == -1)
      {
        v1671 = 0;
        v1701 = 8 * (v1670 + v1668) - 8 * v1668 - 8;
        v1702 = v1667 + 8 * v1668;
        while (v1701)
        {
          v1669 = (uint64_t *)(v1702 + 8);
          ++v1671;
          v1703 = *(_QWORD *)(v1702 + 8);
          v1701 -= 8;
          v1702 += 8;
          if (v1703 != -1)
            goto LABEL_822;
        }
      }
      else
      {
        v1671 = 0;
LABEL_822:
        v1672 = (uint64_t *)(v1667 + 8 * (v1668 + v1670));
        if (v1669 != v1672)
        {
          v1673 = *v1669;
LABEL_824:
          v1674 = *v1666;
          v1675 = *(_DWORD *)(a3[18] + 4 * v1671);
          v1676 = *(_QWORD *)(result + 10960) + 8 * v1673;
          v1677 = *((unsigned int *)a2 + 4);
          v1678 = *a2;
          if (v5 && v1674 < v1675)
          {
            v1679 = *(int64x2_t *)(v1676 + 16);
            v1680 = (int64x2_t *)(v1678 + 8 * (v1675 + (_DWORD)v1677 * v1674));
            v1681 = *(_OWORD *)(v1676 + 32);
            v1682 = *(_OWORD *)(v1676 + 48);
            v1683 = *(int64x2_t *)(v1676 + 64);
            v1684 = *(int64x2_t *)(v1676 + 80);
            v1686 = *(int64x2_t *)(v1676 + 96);
            v1685 = *(int64x2_t *)(v1676 + 112);
            *v1680 = *(int64x2_t *)v1676;
            v1680[1] = v1679;
            v1687 = &v1680->i8[8 * v1677];
            *(_OWORD *)v1687 = v1681;
            *((_OWORD *)v1687 + 1) = v1682;
          }
          else
          {
            v1680 = (int64x2_t *)(v1678 + 8 * (v1674 + (_DWORD)v1677 * v1675));
            v1688 = *(int64x2_t *)(v1676 + 16);
            v1689 = *(int64x2_t *)(v1676 + 32);
            v1690 = *(int64x2_t *)(v1676 + 48);
            v1692 = *(int64x2_t *)(v1676 + 64);
            v1691 = *(int64x2_t *)(v1676 + 80);
            v1693 = vzip1q_s64(*(int64x2_t *)v1676, v1689);
            v1694 = vzip1q_s64(v1692, *(int64x2_t *)(v1676 + 96));
            v1695 = vzip2q_s64(*(int64x2_t *)v1676, v1689);
            v1692.i64[0] = vdupq_laneq_s64(v1692, 1).u64[0];
            v1692.i64[1] = *(_QWORD *)(v1676 + 104);
            v1683 = vzip1q_s64(v1688, v1690);
            v1684 = vzip1q_s64(v1691, *(int64x2_t *)(v1676 + 112));
            v1685.i64[0] = vdupq_laneq_s64(v1691, 1).u64[0];
            v1685.i64[1] = *(_QWORD *)(v1676 + 120);
            v1686 = vzip2q_s64(v1688, v1690);
            *v1680 = v1693;
            v1680[1] = v1694;
            v1696 = (int64x2_t *)((char *)v1680 + 8 * v1677);
            *v1696 = v1695;
            v1696[1] = v1692;
          }
          v1697 = &v1680[v1677];
          *v1697 = v1683;
          v1697[1] = v1684;
          v1698 = (int64x2_t *)((char *)v1680 + 24 * v1677);
          *v1698 = v1686;
          v1698[1] = v1685;
          v1699 = v1669 + 1;
          while (v1699 != v1672)
          {
            ++v1671;
            v1700 = *v1699++;
            v1673 = v1700;
            if (v1700 != -1)
            {
              v1669 = v1699 - 1;
              goto LABEL_824;
            }
          }
          v1664 = *(_DWORD *)(result + 10956);
        }
      }
      ++v1665;
      ++v1666;
    }
    while (v1665 < v1664);
    v5 = *a5;
  }
  v1704 = *(_DWORD *)(result + 12396);
  if (v1704)
  {
    v1705 = 0;
    v1706 = a4[24];
    do
    {
      v1707 = *(_QWORD *)(result + 12472);
      v1708 = *(_DWORD *)(result + 12496) * v1705;
      v1709 = (uint64_t *)(v1707 + 8 * v1708);
      v1710 = *(_DWORD *)(result + 12392);
      if (v1710 && *v1709 == -1)
      {
        v1711 = 0;
        v1740 = 8 * (v1710 + v1708) - 8 * v1708 - 8;
        v1741 = v1707 + 8 * v1708;
        while (v1740)
        {
          v1709 = (uint64_t *)(v1741 + 8);
          ++v1711;
          v1742 = *(_QWORD *)(v1741 + 8);
          v1740 -= 8;
          v1741 += 8;
          if (v1742 != -1)
            goto LABEL_844;
        }
      }
      else
      {
        v1711 = 0;
LABEL_844:
        v1712 = (uint64_t *)(v1707 + 8 * (v1708 + v1710));
        if (v1709 != v1712)
        {
          v1713 = *v1709;
LABEL_846:
          v1714 = *v1706;
          v1715 = *(_DWORD *)(a3[18] + 4 * v1711);
          v1716 = *(_QWORD *)(result + 12400) + 8 * v1713;
          v1717 = *((unsigned int *)a2 + 4);
          v1718 = *a2;
          if (v5 && v1714 < v1715)
          {
            v1719 = *(_OWORD *)(v1716 + 16);
            v1720 = (_OWORD *)(v1718 + 8 * (v1715 + (_DWORD)v1717 * v1714));
            v1721 = *(_OWORD *)(v1716 + 32);
            v1722 = *(_OWORD *)(v1716 + 48);
            v1723 = *(_OWORD *)(v1716 + 64);
            v1724 = *(_OWORD *)(v1716 + 80);
            *v1720 = *(_OWORD *)v1716;
            v1720[1] = v1719;
            v1725 = (_OWORD *)((char *)v1720 + 8 * v1717);
            *v1725 = v1721;
            v1725[1] = v1722;
            v1726 = &v1720[v1717];
            *v1726 = v1723;
            v1726[1] = v1724;
          }
          else
          {
            v1727 = (int64x2_t *)(v1718 + 8 * (v1714 + (_DWORD)v1717 * v1715));
            v1728 = *(int64x2_t *)(v1716 + 16);
            v1730 = *(int64x2_t *)(v1716 + 32);
            v1729 = *(int64x2_t *)(v1716 + 48);
            v1732 = *(_OWORD *)(v1716 + 64);
            v1731 = *(_OWORD *)(v1716 + 80);
            v1733 = vzip1q_s64(*(int64x2_t *)v1716, v1730);
            v1734 = vzip2q_s64(*(int64x2_t *)v1716, v1730);
            v1727[1].i64[0] = v1732;
            *v1727 = v1733;
            v1735 = (int64x2_t *)((char *)v1727 + 8 * v1717);
            *v1735 = v1734;
            v1735[1].i64[0] = *((_QWORD *)&v1732 + 1);
            v1736 = &v1727[v1717];
            v1736[1].i64[0] = v1731;
            *v1736 = vzip1q_s64(v1728, v1729);
            v1737 = (int64x2_t *)((char *)v1727 + 24 * v1717);
            v1737[1].i64[0] = *((_QWORD *)&v1731 + 1);
            *v1737 = vzip2q_s64(v1728, v1729);
          }
          v1738 = v1709 + 1;
          while (v1738 != v1712)
          {
            ++v1711;
            v1739 = *v1738++;
            v1713 = v1739;
            if (v1739 != -1)
            {
              v1709 = v1738 - 1;
              goto LABEL_846;
            }
          }
          v1704 = *(_DWORD *)(result + 12396);
        }
      }
      ++v1705;
      ++v1706;
    }
    while (v1705 < v1704);
    v5 = *a5;
  }
  v1743 = *(_DWORD *)(result + 13836);
  if (v1743)
  {
    v1744 = 0;
    v1745 = a4[27];
    do
    {
      v1746 = *(_QWORD *)(result + 13912);
      v1747 = *(_DWORD *)(result + 13936) * v1744;
      v1748 = (uint64_t *)(v1746 + 8 * v1747);
      v1749 = *(_DWORD *)(result + 13832);
      if (v1749 && *v1748 == -1)
      {
        v1750 = 0;
        v1779 = 8 * (v1749 + v1747) - 8 * v1747 - 8;
        v1780 = v1746 + 8 * v1747;
        while (v1779)
        {
          v1748 = (uint64_t *)(v1780 + 8);
          ++v1750;
          v1781 = *(_QWORD *)(v1780 + 8);
          v1779 -= 8;
          v1780 += 8;
          if (v1781 != -1)
            goto LABEL_866;
        }
      }
      else
      {
        v1750 = 0;
LABEL_866:
        v1751 = (uint64_t *)(v1746 + 8 * (v1747 + v1749));
        if (v1748 != v1751)
        {
          v1752 = *v1748;
LABEL_868:
          v1753 = *v1745;
          v1754 = *(_DWORD *)(a3[18] + 4 * v1750);
          v1755 = *(_QWORD *)(result + 13840) + 8 * v1752;
          v1756 = *((unsigned int *)a2 + 4);
          v1757 = *a2;
          if (v5 && v1753 < v1754)
          {
            v1758 = *(_OWORD *)(v1755 + 16);
            v1759 = (_OWORD *)(v1757 + 8 * (v1754 + (_DWORD)v1756 * v1753));
            v1760 = *(_OWORD *)(v1755 + 32);
            v1761 = *(_OWORD *)(v1755 + 48);
            v1762 = *(_OWORD *)(v1755 + 64);
            v1763 = *(_OWORD *)(v1755 + 80);
            *v1759 = *(_OWORD *)v1755;
            v1759[1] = v1758;
            v1764 = (_OWORD *)((char *)v1759 + 8 * v1756);
            *v1764 = v1760;
            v1764[1] = v1761;
            v1765 = &v1759[v1756];
            *v1765 = v1762;
            v1765[1] = v1763;
          }
          else
          {
            v1766 = (int64x2_t *)(v1757 + 8 * (v1753 + (_DWORD)v1756 * v1754));
            v1767 = *(int64x2_t *)(v1755 + 16);
            v1769 = *(int64x2_t *)(v1755 + 32);
            v1768 = *(int64x2_t *)(v1755 + 48);
            v1771 = *(_OWORD *)(v1755 + 64);
            v1770 = *(_OWORD *)(v1755 + 80);
            v1772 = vzip1q_s64(*(int64x2_t *)v1755, v1769);
            v1773 = vzip2q_s64(*(int64x2_t *)v1755, v1769);
            v1766[1].i64[0] = v1771;
            *v1766 = v1772;
            v1774 = (int64x2_t *)((char *)v1766 + 8 * v1756);
            *v1774 = v1773;
            v1774[1].i64[0] = *((_QWORD *)&v1771 + 1);
            v1775 = &v1766[v1756];
            v1775[1].i64[0] = v1770;
            *v1775 = vzip1q_s64(v1767, v1768);
            v1776 = (int64x2_t *)((char *)v1766 + 24 * v1756);
            v1776[1].i64[0] = *((_QWORD *)&v1770 + 1);
            *v1776 = vzip2q_s64(v1767, v1768);
          }
          v1777 = v1748 + 1;
          while (v1777 != v1751)
          {
            ++v1750;
            v1778 = *v1777++;
            v1752 = v1778;
            if (v1778 != -1)
            {
              v1748 = v1777 - 1;
              goto LABEL_868;
            }
          }
          v1743 = *(_DWORD *)(result + 13836);
        }
      }
      ++v1744;
      ++v1745;
    }
    while (v1744 < v1743);
    v5 = *a5;
  }
  v1782 = *(_DWORD *)(result + 732);
  if (v1782)
  {
    v1783 = 0;
    v1784 = *a4;
    do
    {
      v1785 = *(_QWORD *)(result + 808);
      v1786 = *(_DWORD *)(result + 832) * v1783;
      v1787 = (uint64_t *)(v1785 + 8 * v1786);
      v1788 = *(_DWORD *)(result + 728);
      if (v1788 && *v1787 == -1)
      {
        v1789 = 0;
        v1808 = 8 * (v1788 + v1786) - 8 * v1786 - 8;
        v1809 = v1785 + 8 * v1786;
        while (v1808)
        {
          v1787 = (uint64_t *)(v1809 + 8);
          ++v1789;
          v1810 = *(_QWORD *)(v1809 + 8);
          v1808 -= 8;
          v1809 += 8;
          if (v1810 != -1)
            goto LABEL_888;
        }
      }
      else
      {
        v1789 = 0;
LABEL_888:
        v1790 = (uint64_t *)(v1785 + 8 * (v1786 + v1788));
        if (v1787 != v1790)
        {
          v1791 = *v1787;
LABEL_890:
          v1792 = *(_DWORD *)(a3[15] + 4 * v1789);
          v1793 = *v1784;
          v1794 = (_QWORD *)(*(_QWORD *)(result + 736) + 8 * v1791);
          v1795 = *((unsigned int *)a2 + 4);
          v1796 = *a2;
          v1797 = v1794[3];
          if (v5 && v1793 < v1792)
          {
            v1798 = (_QWORD *)(v1796 + 8 * (v1792 + (_DWORD)v1795 * v1793));
            v1799 = v1794[1];
            v1800 = v1794[2];
            v1801 = v1794[4];
            v1802 = v1794[5];
            *v1798 = *v1794;
            v1798[v1795] = v1799;
            v1798[2 * v1795] = v1800;
            v1798[3 * v1795] = v1797;
            v1798[4 * v1795] = v1801;
            v1798[5 * v1795] = v1802;
          }
          else
          {
            v1803 = (_OWORD *)(v1796 + 8 * (v1793 + (_DWORD)v1795 * v1792));
            v1804 = *(_OWORD *)v1794;
            v1805 = *((_OWORD *)v1794 + 2);
            v1803[1] = *((_OWORD *)v1794 + 1);
            v1803[2] = v1805;
            *v1803 = v1804;
          }
          v1806 = v1787 + 1;
          while (v1806 != v1790)
          {
            ++v1789;
            v1807 = *v1806++;
            v1791 = v1807;
            if (v1807 != -1)
            {
              v1787 = v1806 - 1;
              goto LABEL_890;
            }
          }
          v1782 = *(_DWORD *)(result + 732);
        }
      }
      ++v1783;
      ++v1784;
    }
    while (v1783 < v1782);
    v5 = *a5;
  }
  v1811 = *(_DWORD *)(result + 2172);
  if (v1811)
  {
    v1812 = 0;
    v1813 = a4[3];
    do
    {
      v1814 = *(_QWORD *)(result + 2248);
      v1815 = *(_DWORD *)(result + 2272) * v1812;
      v1816 = (uint64_t *)(v1814 + 8 * v1815);
      v1817 = *(_DWORD *)(result + 2168);
      if (v1817 && *v1816 == -1)
      {
        v1818 = 0;
        v1842 = 8 * (v1817 + v1815) - 8 * v1815 - 8;
        v1843 = v1814 + 8 * v1815;
        while (v1842)
        {
          v1816 = (uint64_t *)(v1843 + 8);
          ++v1818;
          v1844 = *(_QWORD *)(v1843 + 8);
          v1842 -= 8;
          v1843 += 8;
          if (v1844 != -1)
            goto LABEL_910;
        }
      }
      else
      {
        v1818 = 0;
LABEL_910:
        v1819 = (uint64_t *)(v1814 + 8 * (v1815 + v1817));
        if (v1816 != v1819)
        {
          v1820 = *v1816;
LABEL_912:
          v1821 = *(_DWORD *)(a3[15] + 4 * v1818);
          v1822 = *v1813;
          v1823 = (_QWORD *)(*(_QWORD *)(result + 2176) + 8 * v1820);
          v1824 = *((unsigned int *)a2 + 4);
          v1825 = *a2;
          v1826 = v1823[3];
          if (v5 && v1822 < v1821)
          {
            v1827 = v1823[1];
            v1828 = (_QWORD *)(v1825 + 8 * (v1821 + (_DWORD)v1824 * v1822));
            v1829 = v1823[2];
            v1830 = v1823[4];
            v1831 = v1823[5];
            v1832 = v1823[6];
            v1833 = v1823[7];
            v1834 = v1823[8];
            *v1828 = *v1823;
            v1828[v1824] = v1827;
            v1828[2 * v1824] = v1829;
            v1828[3 * v1824] = v1826;
            v1828[4 * v1824] = v1830;
            v1828[5 * v1824] = v1831;
            v1828[6 * v1824] = v1832;
            v1828[7 * v1824] = v1833;
            v1828[8 * v1824] = v1834;
          }
          else
          {
            v1835 = v1825 + 8 * (v1822 + (_DWORD)v1824 * v1821);
            v1836 = *(_OWORD *)v1823;
            v1837 = *((_OWORD *)v1823 + 1);
            v1838 = *((_OWORD *)v1823 + 2);
            v1839 = *((_OWORD *)v1823 + 3);
            *(_QWORD *)(v1835 + 64) = v1823[8];
            *(_OWORD *)(v1835 + 32) = v1838;
            *(_OWORD *)(v1835 + 48) = v1839;
            *(_OWORD *)v1835 = v1836;
            *(_OWORD *)(v1835 + 16) = v1837;
          }
          v1840 = v1816 + 1;
          while (v1840 != v1819)
          {
            ++v1818;
            v1841 = *v1840++;
            v1820 = v1841;
            if (v1841 != -1)
            {
              v1816 = v1840 - 1;
              goto LABEL_912;
            }
          }
          v1811 = *(_DWORD *)(result + 2172);
        }
      }
      ++v1812;
      ++v1813;
    }
    while (v1812 < v1811);
    v5 = *a5;
  }
  v1845 = *(_DWORD *)(result + 3612);
  if (v1845)
  {
    v1846 = 0;
    v1847 = a4[6];
    do
    {
      v1848 = *(_QWORD *)(result + 3688);
      v1849 = *(_DWORD *)(result + 3712) * v1846;
      v1850 = (uint64_t *)(v1848 + 8 * v1849);
      v1851 = *(_DWORD *)(result + 3608);
      if (v1851 && *v1850 == -1)
      {
        v1852 = 0;
        v1871 = 8 * (v1851 + v1849) - 8 * v1849 - 8;
        v1872 = v1848 + 8 * v1849;
        while (v1871)
        {
          v1850 = (uint64_t *)(v1872 + 8);
          ++v1852;
          v1873 = *(_QWORD *)(v1872 + 8);
          v1871 -= 8;
          v1872 += 8;
          if (v1873 != -1)
            goto LABEL_932;
        }
      }
      else
      {
        v1852 = 0;
LABEL_932:
        v1853 = (uint64_t *)(v1848 + 8 * (v1849 + v1851));
        if (v1850 != v1853)
        {
          v1854 = *v1850;
LABEL_934:
          v1855 = *(_DWORD *)(a3[15] + 4 * v1852);
          v1856 = *v1847;
          v1857 = (_QWORD *)(*(_QWORD *)(result + 3616) + 8 * v1854);
          v1858 = *((unsigned int *)a2 + 4);
          v1859 = *a2;
          v1860 = v1857[3];
          if (v5 && v1856 < v1855)
          {
            v1861 = (_QWORD *)(v1859 + 8 * (v1855 + (_DWORD)v1858 * v1856));
            v1862 = v1857[1];
            v1863 = v1857[2];
            v1864 = v1857[4];
            v1865 = v1857[5];
            *v1861 = *v1857;
            v1861[v1858] = v1862;
            v1861[2 * v1858] = v1863;
            v1861[3 * v1858] = v1860;
            v1861[4 * v1858] = v1864;
            v1861[5 * v1858] = v1865;
          }
          else
          {
            v1866 = (_OWORD *)(v1859 + 8 * (v1856 + (_DWORD)v1858 * v1855));
            v1867 = *(_OWORD *)v1857;
            v1868 = *((_OWORD *)v1857 + 2);
            v1866[1] = *((_OWORD *)v1857 + 1);
            v1866[2] = v1868;
            *v1866 = v1867;
          }
          v1869 = v1850 + 1;
          while (v1869 != v1853)
          {
            ++v1852;
            v1870 = *v1869++;
            v1854 = v1870;
            if (v1870 != -1)
            {
              v1850 = v1869 - 1;
              goto LABEL_934;
            }
          }
          v1845 = *(_DWORD *)(result + 3612);
        }
      }
      ++v1846;
      ++v1847;
    }
    while (v1846 < v1845);
    v5 = *a5;
  }
  v1874 = *(_DWORD *)(result + 5052);
  if (v1874)
  {
    v1875 = 0;
    v1876 = a4[9];
    do
    {
      v1877 = *(_QWORD *)(result + 5128);
      v1878 = *(_DWORD *)(result + 5152) * v1875;
      v1879 = (uint64_t *)(v1877 + 8 * v1878);
      v1880 = *(_DWORD *)(result + 5048);
      if (v1880 && *v1879 == -1)
      {
        v1881 = 0;
        v1900 = 8 * (v1880 + v1878) - 8 * v1878 - 8;
        v1901 = v1877 + 8 * v1878;
        while (v1900)
        {
          v1879 = (uint64_t *)(v1901 + 8);
          ++v1881;
          v1902 = *(_QWORD *)(v1901 + 8);
          v1900 -= 8;
          v1901 += 8;
          if (v1902 != -1)
            goto LABEL_954;
        }
      }
      else
      {
        v1881 = 0;
LABEL_954:
        v1882 = (uint64_t *)(v1877 + 8 * (v1878 + v1880));
        if (v1879 != v1882)
        {
          v1883 = *v1879;
LABEL_956:
          v1884 = *(_DWORD *)(a3[15] + 4 * v1881);
          v1885 = *v1876;
          v1886 = (_QWORD *)(*(_QWORD *)(result + 5056) + 8 * v1883);
          v1887 = *((unsigned int *)a2 + 4);
          v1888 = *a2;
          v1889 = v1886[3];
          if (v5 && v1885 < v1884)
          {
            v1890 = (_QWORD *)(v1888 + 8 * (v1884 + (_DWORD)v1887 * v1885));
            v1891 = v1886[1];
            v1892 = v1886[2];
            v1893 = v1886[4];
            v1894 = v1886[5];
            *v1890 = *v1886;
            v1890[v1887] = v1891;
            v1890[2 * v1887] = v1892;
            v1890[3 * v1887] = v1889;
            v1890[4 * v1887] = v1893;
            v1890[5 * v1887] = v1894;
          }
          else
          {
            v1895 = (_OWORD *)(v1888 + 8 * (v1885 + (_DWORD)v1887 * v1884));
            v1896 = *(_OWORD *)v1886;
            v1897 = *((_OWORD *)v1886 + 2);
            v1895[1] = *((_OWORD *)v1886 + 1);
            v1895[2] = v1897;
            *v1895 = v1896;
          }
          v1898 = v1879 + 1;
          while (v1898 != v1882)
          {
            ++v1881;
            v1899 = *v1898++;
            v1883 = v1899;
            if (v1899 != -1)
            {
              v1879 = v1898 - 1;
              goto LABEL_956;
            }
          }
          v1874 = *(_DWORD *)(result + 5052);
        }
      }
      ++v1875;
      ++v1876;
    }
    while (v1875 < v1874);
    v5 = *a5;
  }
  v1903 = *(_DWORD *)(result + 6492);
  if (v1903)
  {
    v1904 = 0;
    v1905 = a4[12];
    do
    {
      v1906 = *(_QWORD *)(result + 6568);
      v1907 = *(_DWORD *)(result + 6592) * v1904;
      v1908 = (uint64_t *)(v1906 + 8 * v1907);
      v1909 = *(_DWORD *)(result + 6488);
      if (v1909 && *v1908 == -1)
      {
        v1910 = 0;
        v1925 = 8 * (v1909 + v1907) - 8 * v1907 - 8;
        v1926 = v1906 + 8 * v1907;
        while (v1925)
        {
          v1908 = (uint64_t *)(v1926 + 8);
          ++v1910;
          v1927 = *(_QWORD *)(v1926 + 8);
          v1925 -= 8;
          v1926 += 8;
          if (v1927 != -1)
            goto LABEL_976;
        }
      }
      else
      {
        v1910 = 0;
LABEL_976:
        v1911 = (uint64_t *)(v1906 + 8 * (v1907 + v1909));
        if (v1908 != v1911)
        {
          v1912 = *v1908;
LABEL_978:
          v1913 = *v1905;
          v1914 = *(_DWORD *)(a3[15] + 4 * v1910);
          v1915 = (_QWORD *)(*(_QWORD *)(result + 6496) + 8 * v1912);
          v1916 = *((unsigned int *)a2 + 4);
          v1917 = *a2;
          if (v5 && v1913 < v1914)
          {
            v1918 = (_QWORD *)(v1917 + 8 * (v1914 + (_DWORD)v1916 * v1913));
            v1919 = v1915[1];
            v1920 = v1915[2];
            *v1918 = *v1915;
            v1918[v1916] = v1919;
            v1918[2 * v1916] = v1920;
          }
          else
          {
            v1921 = v1917 + 8 * (v1913 + (_DWORD)v1916 * v1914);
            v1922 = *(_OWORD *)v1915;
            *(_QWORD *)(v1921 + 16) = v1915[2];
            *(_OWORD *)v1921 = v1922;
          }
          v1923 = v1908 + 1;
          while (v1923 != v1911)
          {
            ++v1910;
            v1924 = *v1923++;
            v1912 = v1924;
            if (v1924 != -1)
            {
              v1908 = v1923 - 1;
              goto LABEL_978;
            }
          }
          v1903 = *(_DWORD *)(result + 6492);
        }
      }
      ++v1904;
      ++v1905;
    }
    while (v1904 < v1903);
    v5 = *a5;
  }
  v1928 = *(_DWORD *)(result + 7932);
  if (v1928)
  {
    v1929 = a4[15];
    if (v5)
    {
      for (i = 0; i < v1928; ++i)
      {
        v1931 = *(_QWORD *)(result + 8008);
        v1932 = *(_DWORD *)(result + 8032) * i;
        v1933 = (uint64_t *)(v1931 + 8 * v1932);
        v1934 = *(_DWORD *)(result + 7928);
        if (v1934 && *v1933 == -1)
        {
          v1935 = 0;
          v1943 = 8 * (v1934 + v1932) - 8 * v1932 - 8;
          v1944 = v1931 + 8 * v1932;
          while (v1943)
          {
            v1933 = (uint64_t *)(v1944 + 8);
            ++v1935;
            v1945 = *(_QWORD *)(v1944 + 8);
            v1943 -= 8;
            v1944 += 8;
            if (v1945 != -1)
              goto LABEL_999;
          }
        }
        else
        {
          v1935 = 0;
LABEL_999:
          v1936 = (uint64_t *)(v1931 + 8 * (v1932 + v1934));
          if (v1933 != v1936)
          {
            v1937 = *v1933;
LABEL_1001:
            v1938 = *v1929;
            v1939 = *(_DWORD *)(a3[15] + 4 * v1935);
            if (*v1929 >= v1939)
              v1940 = *(_DWORD *)(a3[15] + 4 * v1935);
            else
              v1940 = *v1929;
            if (v1938 <= v1939)
              v1938 = *(_DWORD *)(a3[15] + 4 * v1935);
            *(_QWORD *)(*a2 + 8 * (v1938 + *((_DWORD *)a2 + 4) * v1940)) = *(_QWORD *)(*(_QWORD *)(result + 7936)
                                                                                       + 8 * v1937);
            v1941 = v1933 + 1;
            while (v1941 != v1936)
            {
              ++v1935;
              v1942 = *v1941++;
              v1937 = v1942;
              if (v1942 != -1)
              {
                v1933 = v1941 - 1;
                goto LABEL_1001;
              }
            }
            v1928 = *(_DWORD *)(result + 7932);
          }
        }
        ++v1929;
      }
    }
    else
    {
      do
      {
        v1946 = *(_QWORD *)(result + 8008);
        v1947 = *(_DWORD *)(result + 8032) * v5;
        v1948 = (uint64_t *)(v1946 + 8 * v1947);
        v1949 = *(_DWORD *)(result + 7928);
        if (v1949 && *v1948 == -1)
        {
          v1950 = 0;
          v1955 = 8 * (v1949 + v1947) - 8 * v1947 - 8;
          v1956 = v1946 + 8 * v1947;
          while (v1955)
          {
            v1948 = (uint64_t *)(v1956 + 8);
            ++v1950;
            v1957 = *(_QWORD *)(v1956 + 8);
            v1955 -= 8;
            v1956 += 8;
            if (v1957 != -1)
              goto LABEL_1019;
          }
        }
        else
        {
          v1950 = 0;
LABEL_1019:
          v1951 = (uint64_t *)(v1946 + 8 * (v1947 + v1949));
          if (v1948 != v1951)
          {
            v1952 = *v1948;
LABEL_1021:
            *(_QWORD *)(*a2 + 8 * (*v1929 + *((_DWORD *)a2 + 4) * *(_DWORD *)(a3[15] + 4 * v1950))) = *(_QWORD *)(*(_QWORD *)(result + 7936) + 8 * v1952);
            v1953 = v1948 + 1;
            while (v1953 != v1951)
            {
              ++v1950;
              v1954 = *v1953++;
              v1952 = v1954;
              if (v1954 != -1)
              {
                v1948 = v1953 - 1;
                goto LABEL_1021;
              }
            }
            v1928 = *(_DWORD *)(result + 7932);
          }
        }
        ++v5;
        ++v1929;
      }
      while (v5 < v1928);
    }
  }
  v1958 = *a5;
  v1959 = *(_DWORD *)(result + 9372);
  if (v1959)
  {
    v1960 = 0;
    v1961 = a4[18];
    do
    {
      v1962 = *(_QWORD *)(result + 9448);
      v1963 = *(_DWORD *)(result + 9472) * v1960;
      v1964 = (uint64_t *)(v1962 + 8 * v1963);
      v1965 = *(_DWORD *)(result + 9368);
      if (v1965 && *v1964 == -1)
      {
        v1966 = 0;
        v1982 = 8 * (v1965 + v1963) - 8 * v1963 - 8;
        v1983 = v1962 + 8 * v1963;
        while (v1982)
        {
          v1964 = (uint64_t *)(v1983 + 8);
          ++v1966;
          v1984 = *(_QWORD *)(v1983 + 8);
          v1982 -= 8;
          v1983 += 8;
          if (v1984 != -1)
            goto LABEL_1036;
        }
      }
      else
      {
        v1966 = 0;
LABEL_1036:
        v1967 = (uint64_t *)(v1962 + 8 * (v1963 + v1965));
        if (v1964 != v1967)
        {
          v1968 = *v1964;
LABEL_1038:
          v1969 = *(_DWORD *)(a3[15] + 4 * v1966);
          v1970 = *v1961;
          v1971 = (_QWORD *)(*(_QWORD *)(result + 9376) + 8 * v1968);
          v1972 = *((unsigned int *)a2 + 4);
          v1973 = *a2;
          v1974 = v1971[3];
          if (v1958 && v1970 < v1969)
          {
            v1975 = (_QWORD *)(v1973 + 8 * (v1969 + (_DWORD)v1972 * v1970));
            v1976 = v1971[1];
            v1977 = v1971[2];
            *v1975 = *v1971;
            v1975[v1972] = v1976;
            v1975[2 * v1972] = v1977;
            v1975[3 * v1972] = v1974;
          }
          else
          {
            v1978 = (_OWORD *)(v1973 + 8 * (v1970 + (_DWORD)v1972 * v1969));
            v1979 = *((_OWORD *)v1971 + 1);
            *v1978 = *(_OWORD *)v1971;
            v1978[1] = v1979;
          }
          v1980 = v1964 + 1;
          while (v1980 != v1967)
          {
            ++v1966;
            v1981 = *v1980++;
            v1968 = v1981;
            if (v1981 != -1)
            {
              v1964 = v1980 - 1;
              goto LABEL_1038;
            }
          }
          v1959 = *(_DWORD *)(result + 9372);
        }
      }
      ++v1960;
      ++v1961;
    }
    while (v1960 < v1959);
    v1958 = *a5;
  }
  v1985 = *(_DWORD *)(result + 10812);
  if (v1985)
  {
    v1986 = 0;
    v1987 = a4[21];
    do
    {
      v1988 = *(_QWORD *)(result + 10888);
      v1989 = *(_DWORD *)(result + 10912) * v1986;
      v1990 = (uint64_t *)(v1988 + 8 * v1989);
      v1991 = *(_DWORD *)(result + 10808);
      if (v1991 && *v1990 == -1)
      {
        v1992 = 0;
        v2008 = 8 * (v1991 + v1989) - 8 * v1989 - 8;
        v2009 = v1988 + 8 * v1989;
        while (v2008)
        {
          v1990 = (uint64_t *)(v2009 + 8);
          ++v1992;
          v2010 = *(_QWORD *)(v2009 + 8);
          v2008 -= 8;
          v2009 += 8;
          if (v2010 != -1)
            goto LABEL_1058;
        }
      }
      else
      {
        v1992 = 0;
LABEL_1058:
        v1993 = (uint64_t *)(v1988 + 8 * (v1989 + v1991));
        if (v1990 != v1993)
        {
          v1994 = *v1990;
LABEL_1060:
          v1995 = *(_DWORD *)(a3[15] + 4 * v1992);
          v1996 = *v1987;
          v1997 = (_QWORD *)(*(_QWORD *)(result + 10816) + 8 * v1994);
          v1998 = *((unsigned int *)a2 + 4);
          v1999 = *a2;
          v2000 = v1997[3];
          if (v1958 && v1996 < v1995)
          {
            v2001 = (_QWORD *)(v1999 + 8 * (v1995 + (_DWORD)v1998 * v1996));
            v2002 = v1997[1];
            v2003 = v1997[2];
            *v2001 = *v1997;
            v2001[v1998] = v2002;
            v2001[2 * v1998] = v2003;
            v2001[3 * v1998] = v2000;
          }
          else
          {
            v2004 = (_OWORD *)(v1999 + 8 * (v1996 + (_DWORD)v1998 * v1995));
            v2005 = *((_OWORD *)v1997 + 1);
            *v2004 = *(_OWORD *)v1997;
            v2004[1] = v2005;
          }
          v2006 = v1990 + 1;
          while (v2006 != v1993)
          {
            ++v1992;
            v2007 = *v2006++;
            v1994 = v2007;
            if (v2007 != -1)
            {
              v1990 = v2006 - 1;
              goto LABEL_1060;
            }
          }
          v1985 = *(_DWORD *)(result + 10812);
        }
      }
      ++v1986;
      ++v1987;
    }
    while (v1986 < v1985);
    v1958 = *a5;
  }
  v2011 = *(_DWORD *)(result + 12252);
  if (v2011)
  {
    v2012 = 0;
    v2013 = a4[24];
    do
    {
      v2014 = *(_QWORD *)(result + 12328);
      v2015 = *(_DWORD *)(result + 12352) * v2012;
      v2016 = (uint64_t *)(v2014 + 8 * v2015);
      v2017 = *(_DWORD *)(result + 12248);
      if (v2017 && *v2016 == -1)
      {
        v2018 = 0;
        v2033 = 8 * (v2017 + v2015) - 8 * v2015 - 8;
        v2034 = v2014 + 8 * v2015;
        while (v2033)
        {
          v2016 = (uint64_t *)(v2034 + 8);
          ++v2018;
          v2035 = *(_QWORD *)(v2034 + 8);
          v2033 -= 8;
          v2034 += 8;
          if (v2035 != -1)
            goto LABEL_1080;
        }
      }
      else
      {
        v2018 = 0;
LABEL_1080:
        v2019 = (uint64_t *)(v2014 + 8 * (v2015 + v2017));
        if (v2016 != v2019)
        {
          v2020 = *v2016;
LABEL_1082:
          v2021 = *v2013;
          v2022 = *(_DWORD *)(a3[15] + 4 * v2018);
          v2023 = (_QWORD *)(*(_QWORD *)(result + 12256) + 8 * v2020);
          v2024 = *((unsigned int *)a2 + 4);
          v2025 = *a2;
          if (v1958 && v2021 < v2022)
          {
            v2026 = (_QWORD *)(v2025 + 8 * (v2022 + (_DWORD)v2024 * v2021));
            v2027 = v2023[1];
            v2028 = v2023[2];
            *v2026 = *v2023;
            v2026[v2024] = v2027;
            v2026[2 * v2024] = v2028;
          }
          else
          {
            v2029 = v2025 + 8 * (v2021 + (_DWORD)v2024 * v2022);
            v2030 = *(_OWORD *)v2023;
            *(_QWORD *)(v2029 + 16) = v2023[2];
            *(_OWORD *)v2029 = v2030;
          }
          v2031 = v2016 + 1;
          while (v2031 != v2019)
          {
            ++v2018;
            v2032 = *v2031++;
            v2020 = v2032;
            if (v2032 != -1)
            {
              v2016 = v2031 - 1;
              goto LABEL_1082;
            }
          }
          v2011 = *(_DWORD *)(result + 12252);
        }
      }
      ++v2012;
      ++v2013;
    }
    while (v2012 < v2011);
    v1958 = *a5;
  }
  v2036 = *(_DWORD *)(result + 13692);
  if (v2036)
  {
    v2037 = 0;
    v2038 = a4[27];
    do
    {
      v2039 = *(_QWORD *)(result + 13768);
      v2040 = *(_DWORD *)(result + 13792) * v2037;
      v2041 = (uint64_t *)(v2039 + 8 * v2040);
      v2042 = *(_DWORD *)(result + 13688);
      if (v2042 && *v2041 == -1)
      {
        v2043 = 0;
        v2058 = 8 * (v2042 + v2040) - 8 * v2040 - 8;
        v2059 = v2039 + 8 * v2040;
        while (v2058)
        {
          v2041 = (uint64_t *)(v2059 + 8);
          ++v2043;
          v2060 = *(_QWORD *)(v2059 + 8);
          v2058 -= 8;
          v2059 += 8;
          if (v2060 != -1)
            goto LABEL_1102;
        }
      }
      else
      {
        v2043 = 0;
LABEL_1102:
        v2044 = (uint64_t *)(v2039 + 8 * (v2040 + v2042));
        if (v2041 != v2044)
        {
          v2045 = *v2041;
LABEL_1104:
          v2046 = *v2038;
          v2047 = *(_DWORD *)(a3[15] + 4 * v2043);
          v2048 = (_QWORD *)(*(_QWORD *)(result + 13696) + 8 * v2045);
          v2049 = *((unsigned int *)a2 + 4);
          v2050 = *a2;
          if (v1958 && v2046 < v2047)
          {
            v2051 = (_QWORD *)(v2050 + 8 * (v2047 + (_DWORD)v2049 * v2046));
            v2052 = v2048[1];
            v2053 = v2048[2];
            *v2051 = *v2048;
            v2051[v2049] = v2052;
            v2051[2 * v2049] = v2053;
          }
          else
          {
            v2054 = v2050 + 8 * (v2046 + (_DWORD)v2049 * v2047);
            v2055 = *(_OWORD *)v2048;
            *(_QWORD *)(v2054 + 16) = v2048[2];
            *(_OWORD *)v2054 = v2055;
          }
          v2056 = v2041 + 1;
          while (v2056 != v2044)
          {
            ++v2043;
            v2057 = *v2056++;
            v2045 = v2057;
            if (v2057 != -1)
            {
              v2041 = v2056 - 1;
              goto LABEL_1104;
            }
          }
          v2036 = *(_DWORD *)(result + 13692);
        }
      }
      ++v2037;
      ++v2038;
    }
    while (v2037 < v2036);
    v1958 = *a5;
  }
  v2061 = *(_DWORD *)(result + 588);
  if (v2061)
  {
    v2062 = 0;
    v2063 = *a4;
    do
    {
      v2064 = *(_QWORD *)(result + 664);
      v2065 = *(_DWORD *)(result + 688) * v2062;
      v2066 = (uint64_t *)(v2064 + 8 * v2065);
      v2067 = *(_DWORD *)(result + 584);
      if (v2067 && *v2066 == -1)
      {
        v2068 = 0;
        v2108 = 8 * (v2067 + v2065) - 8 * v2065 - 8;
        v2109 = v2064 + 8 * v2065;
        while (v2108)
        {
          v2066 = (uint64_t *)(v2109 + 8);
          ++v2068;
          v2110 = *(_QWORD *)(v2109 + 8);
          v2108 -= 8;
          v2109 += 8;
          if (v2110 != -1)
            goto LABEL_1124;
        }
      }
      else
      {
        v2068 = 0;
LABEL_1124:
        v2069 = (uint64_t *)(v2064 + 8 * (v2065 + v2067));
        if (v2066 != v2069)
        {
          v2070 = *v2066;
LABEL_1126:
          v2071 = *v2063;
          v2072 = *(_DWORD *)(a3[12] + 4 * v2068);
          v2073 = *(_QWORD *)(result + 592) + 8 * v2070;
          v2074 = *((unsigned int *)a2 + 4);
          v2075 = *a2;
          if (v1958 && v2071 < v2072)
          {
            v2076 = *(int64x2_t *)v2073;
            v2077 = (int64x2_t *)(v2075 + 8 * (v2072 + (_DWORD)v2074 * v2071));
            v2078 = *(_OWORD *)(v2073 + 24);
            v2079 = *(_QWORD *)(v2073 + 40);
            v2080 = *(int64x2_t *)(v2073 + 48);
            v2081 = *(_QWORD *)(v2073 + 64);
            v2082 = *(_OWORD *)(v2073 + 72);
            v2083 = *(_QWORD *)(v2073 + 88);
            v2084 = *(int64x2_t *)(v2073 + 96);
            v2085 = *(_QWORD *)(v2073 + 112);
            v2086 = *(_OWORD *)(v2073 + 120);
            v2087 = *(_QWORD *)(v2073 + 136);
            v2077[1].i64[0] = *(_QWORD *)(v2073 + 16);
            *v2077 = v2076;
            v2088 = &v2077->i8[8 * v2074];
            *((_QWORD *)v2088 + 2) = v2079;
            *(_OWORD *)v2088 = v2078;
            v2089 = &v2077[v2074];
            v2089[1].i64[0] = v2081;
            *v2089 = v2080;
            v2090 = &v2077->i8[24 * v2074];
            *((_QWORD *)v2090 + 2) = v2083;
            *(_OWORD *)v2090 = v2082;
            v2091 = &v2077[2 * v2074];
            v2091[1].i64[0] = v2085;
            *v2091 = v2084;
            v2092 = &v2077->i8[40 * v2074];
            *((_QWORD *)v2092 + 2) = v2087;
            *(_OWORD *)v2092 = v2086;
          }
          else
          {
            v2093 = (int64x2_t *)(v2075 + 8 * (v2071 + (_DWORD)v2074 * v2072));
            v2094.i64[0] = *(_QWORD *)(v2073 + 16);
            v2095 = *(int64x2_t *)(v2073 + 24);
            v2096.i64[0] = *(_QWORD *)(v2073 + 64);
            v2097 = *(int64x2_t *)(v2073 + 48);
            v2098 = *(int64x2_t *)(v2073 + 72);
            v2099.i64[0] = *(_QWORD *)(v2073 + 112);
            v2100 = *(int64x2_t *)(v2073 + 96);
            v2101 = *(int64x2_t *)(v2073 + 120);
            v2102 = vzip1q_s64(*(int64x2_t *)v2073, v2095);
            v2103 = vzip2q_s64(*(int64x2_t *)v2073, v2095);
            v2094.i64[1] = *(_QWORD *)(v2073 + 40);
            v2096.i64[1] = *(_QWORD *)(v2073 + 88);
            v2099.i64[1] = *(_QWORD *)(v2073 + 136);
            v2093[1] = vzip1q_s64(v2097, v2098);
            v2093[2] = vzip1q_s64(v2100, v2101);
            *v2093 = v2102;
            v2104 = (int64x2_t *)((char *)v2093 + 8 * v2074);
            v2104[1] = vzip1q_s64(vdupq_laneq_s64(v2097, 1), vdupq_laneq_s64(v2098, 1));
            v2104[2] = vzip2q_s64(v2100, v2101);
            *v2104 = v2103;
            v2105 = &v2093[v2074];
            v2105[1] = v2096;
            v2105[2] = v2099;
            *v2105 = v2094;
          }
          v2106 = v2066 + 1;
          while (v2106 != v2069)
          {
            ++v2068;
            v2107 = *v2106++;
            v2070 = v2107;
            if (v2107 != -1)
            {
              v2066 = v2106 - 1;
              goto LABEL_1126;
            }
          }
          v2061 = *(_DWORD *)(result + 588);
        }
      }
      ++v2062;
      ++v2063;
    }
    while (v2062 < v2061);
    v1958 = *a5;
  }
  v2111 = *(_DWORD *)(result + 2028);
  if (v2111)
  {
    v2112 = 0;
    v2113 = a4[3];
    do
    {
      v2114 = *(_QWORD *)(result + 2104);
      v2115 = *(_DWORD *)(result + 2128) * v2112;
      v2116 = (uint64_t *)(v2114 + 8 * v2115);
      v2117 = *(_DWORD *)(result + 2024);
      if (v2117 && *v2116 == -1)
      {
        v2118 = 0;
        v2172 = 8 * (v2117 + v2115) - 8 * v2115 - 8;
        v2173 = v2114 + 8 * v2115;
        while (v2172)
        {
          v2116 = (uint64_t *)(v2173 + 8);
          ++v2118;
          v2174 = *(_QWORD *)(v2173 + 8);
          v2172 -= 8;
          v2173 += 8;
          if (v2174 != -1)
            goto LABEL_1146;
        }
      }
      else
      {
        v2118 = 0;
LABEL_1146:
        v2119 = (uint64_t *)(v2114 + 8 * (v2115 + v2117));
        if (v2116 != v2119)
        {
          v2120 = *v2116;
LABEL_1148:
          v2121 = *v2113;
          v2122 = *(_DWORD *)(a3[12] + 4 * v2118);
          v2123 = *(_QWORD *)(result + 2032) + 8 * v2120;
          v2124 = *((unsigned int *)a2 + 4);
          v2125 = *a2;
          if (v1958 && v2121 < v2122)
          {
            v2126 = *(int64x2_t *)v2123;
            v2127 = (int64x2_t *)(v2125 + 8 * (v2122 + (_DWORD)v2124 * v2121));
            v2128 = *(_OWORD *)(v2123 + 24);
            v2129 = *(_QWORD *)(v2123 + 40);
            v2130 = *(int64x2_t *)(v2123 + 48);
            v2131 = *(_QWORD *)(v2123 + 64);
            v2132 = *(_OWORD *)(v2123 + 72);
            v2133 = *(_QWORD *)(v2123 + 88);
            v2134 = *(int64x2_t *)(v2123 + 96);
            v2135 = *(_QWORD *)(v2123 + 112);
            v2136 = *(_OWORD *)(v2123 + 120);
            v2137 = *(_QWORD *)(v2123 + 136);
            v2138 = *(int64x2_t *)(v2123 + 144);
            v2139 = *(_QWORD *)(v2123 + 160);
            v2140 = *(_OWORD *)(v2123 + 168);
            v2141 = *(_QWORD *)(v2123 + 184);
            v2142 = *(int64x2_t *)(v2123 + 192);
            v2143 = *(_QWORD *)(v2123 + 208);
            v2127[1].i64[0] = *(_QWORD *)(v2123 + 16);
            *v2127 = v2126;
            v2144 = &v2127->i8[8 * v2124];
            *((_QWORD *)v2144 + 2) = v2129;
            *(_OWORD *)v2144 = v2128;
            v2145 = &v2127[v2124];
            v2145[1].i64[0] = v2131;
            *v2145 = v2130;
            v2146 = &v2127->i8[24 * v2124];
            *((_QWORD *)v2146 + 2) = v2133;
            *(_OWORD *)v2146 = v2132;
            v2147 = &v2127[2 * v2124];
            v2147[1].i64[0] = v2135;
            *v2147 = v2134;
            v2148 = &v2127->i8[40 * v2124];
            *((_QWORD *)v2148 + 2) = v2137;
            *(_OWORD *)v2148 = v2136;
            v2149 = &v2127[3 * v2124];
            v2149[1].i64[0] = v2139;
            *v2149 = v2138;
            v2150 = &v2127->i8[56 * v2124];
            *((_QWORD *)v2150 + 2) = v2141;
            *(_OWORD *)v2150 = v2140;
            v2151 = &v2127[4 * v2124];
            v2151[1].i64[0] = v2143;
            *v2151 = v2142;
          }
          else
          {
            v2152.i64[0] = *(_QWORD *)(v2123 + 16);
            v2153 = (int64x2_t *)(v2125 + 8 * (v2121 + (_DWORD)v2124 * v2122));
            v2154 = *(int64x2_t *)(v2123 + 24);
            v2155.i64[0] = *(_QWORD *)(v2123 + 64);
            v2156 = *(int64x2_t *)(v2123 + 48);
            v2157 = *(int64x2_t *)(v2123 + 72);
            v2158.i64[0] = *(_QWORD *)(v2123 + 112);
            v2159 = *(int64x2_t *)(v2123 + 96);
            v2160 = *(int64x2_t *)(v2123 + 120);
            v2161.i64[0] = *(_QWORD *)(v2123 + 160);
            v2162 = *(int64x2_t *)(v2123 + 144);
            v2163 = *(int64x2_t *)(v2123 + 168);
            v2164 = *(_QWORD *)(v2123 + 208);
            v2165 = *(_OWORD *)(v2123 + 192);
            v2166 = vzip1q_s64(*(int64x2_t *)v2123, v2154);
            v2167 = vzip2q_s64(*(int64x2_t *)v2123, v2154);
            v2152.i64[1] = *(_QWORD *)(v2123 + 40);
            v2155.i64[1] = *(_QWORD *)(v2123 + 88);
            v2158.i64[1] = *(_QWORD *)(v2123 + 136);
            v2161.i64[1] = *(_QWORD *)(v2123 + 184);
            v2153[2] = vzip1q_s64(v2159, v2160);
            v2153[3] = vzip1q_s64(v2162, v2163);
            v2153[4].i64[0] = v2165;
            *v2153 = v2166;
            v2153[1] = vzip1q_s64(v2156, v2157);
            v2168 = (int64x2_t *)((char *)v2153 + 8 * v2124);
            v2168[2] = vzip2q_s64(v2159, v2160);
            v2168[3] = vzip2q_s64(v2162, v2163);
            *v2168 = v2167;
            v2168[1] = vzip2q_s64(v2156, v2157);
            v2168[4].i64[0] = *((_QWORD *)&v2165 + 1);
            v2169 = &v2153[v2124];
            v2169[4].i64[0] = v2164;
            v2169[2] = v2158;
            v2169[3] = v2161;
            *v2169 = v2152;
            v2169[1] = v2155;
          }
          v2170 = v2116 + 1;
          while (v2170 != v2119)
          {
            ++v2118;
            v2171 = *v2170++;
            v2120 = v2171;
            if (v2171 != -1)
            {
              v2116 = v2170 - 1;
              goto LABEL_1148;
            }
          }
          v2111 = *(_DWORD *)(result + 2028);
        }
      }
      ++v2112;
      ++v2113;
    }
    while (v2112 < v2111);
    v1958 = *a5;
  }
  v2175 = *(_DWORD *)(result + 3468);
  if (v2175)
  {
    v2176 = 0;
    v2177 = a4[6];
    do
    {
      v2178 = *(_QWORD *)(result + 3544);
      v2179 = *(_DWORD *)(result + 3568) * v2176;
      v2180 = (uint64_t *)(v2178 + 8 * v2179);
      v2181 = *(_DWORD *)(result + 3464);
      if (v2181 && *v2180 == -1)
      {
        v2182 = 0;
        v2222 = 8 * (v2181 + v2179) - 8 * v2179 - 8;
        v2223 = v2178 + 8 * v2179;
        while (v2222)
        {
          v2180 = (uint64_t *)(v2223 + 8);
          ++v2182;
          v2224 = *(_QWORD *)(v2223 + 8);
          v2222 -= 8;
          v2223 += 8;
          if (v2224 != -1)
            goto LABEL_1168;
        }
      }
      else
      {
        v2182 = 0;
LABEL_1168:
        v2183 = (uint64_t *)(v2178 + 8 * (v2179 + v2181));
        if (v2180 != v2183)
        {
          v2184 = *v2180;
LABEL_1170:
          v2185 = *v2177;
          v2186 = *(_DWORD *)(a3[12] + 4 * v2182);
          v2187 = *(_QWORD *)(result + 3472) + 8 * v2184;
          v2188 = *((unsigned int *)a2 + 4);
          v2189 = *a2;
          if (v1958 && v2185 < v2186)
          {
            v2190 = *(int64x2_t *)v2187;
            v2191 = (int64x2_t *)(v2189 + 8 * (v2186 + (_DWORD)v2188 * v2185));
            v2192 = *(_OWORD *)(v2187 + 24);
            v2193 = *(_QWORD *)(v2187 + 40);
            v2194 = *(int64x2_t *)(v2187 + 48);
            v2195 = *(_QWORD *)(v2187 + 64);
            v2196 = *(_OWORD *)(v2187 + 72);
            v2197 = *(_QWORD *)(v2187 + 88);
            v2198 = *(int64x2_t *)(v2187 + 96);
            v2199 = *(_QWORD *)(v2187 + 112);
            v2200 = *(_OWORD *)(v2187 + 120);
            v2201 = *(_QWORD *)(v2187 + 136);
            v2191[1].i64[0] = *(_QWORD *)(v2187 + 16);
            *v2191 = v2190;
            v2202 = &v2191->i8[8 * v2188];
            *((_QWORD *)v2202 + 2) = v2193;
            *(_OWORD *)v2202 = v2192;
            v2203 = &v2191[v2188];
            v2203[1].i64[0] = v2195;
            *v2203 = v2194;
            v2204 = &v2191->i8[24 * v2188];
            *((_QWORD *)v2204 + 2) = v2197;
            *(_OWORD *)v2204 = v2196;
            v2205 = &v2191[2 * v2188];
            v2205[1].i64[0] = v2199;
            *v2205 = v2198;
            v2206 = &v2191->i8[40 * v2188];
            *((_QWORD *)v2206 + 2) = v2201;
            *(_OWORD *)v2206 = v2200;
          }
          else
          {
            v2207 = (int64x2_t *)(v2189 + 8 * (v2185 + (_DWORD)v2188 * v2186));
            v2208.i64[0] = *(_QWORD *)(v2187 + 16);
            v2209 = *(int64x2_t *)(v2187 + 24);
            v2210.i64[0] = *(_QWORD *)(v2187 + 64);
            v2211 = *(int64x2_t *)(v2187 + 48);
            v2212 = *(int64x2_t *)(v2187 + 72);
            v2213.i64[0] = *(_QWORD *)(v2187 + 112);
            v2214 = *(int64x2_t *)(v2187 + 96);
            v2215 = *(int64x2_t *)(v2187 + 120);
            v2216 = vzip1q_s64(*(int64x2_t *)v2187, v2209);
            v2217 = vzip2q_s64(*(int64x2_t *)v2187, v2209);
            v2208.i64[1] = *(_QWORD *)(v2187 + 40);
            v2210.i64[1] = *(_QWORD *)(v2187 + 88);
            v2213.i64[1] = *(_QWORD *)(v2187 + 136);
            v2207[1] = vzip1q_s64(v2211, v2212);
            v2207[2] = vzip1q_s64(v2214, v2215);
            *v2207 = v2216;
            v2218 = (int64x2_t *)((char *)v2207 + 8 * v2188);
            v2218[1] = vzip1q_s64(vdupq_laneq_s64(v2211, 1), vdupq_laneq_s64(v2212, 1));
            v2218[2] = vzip2q_s64(v2214, v2215);
            *v2218 = v2217;
            v2219 = &v2207[v2188];
            v2219[1] = v2210;
            v2219[2] = v2213;
            *v2219 = v2208;
          }
          v2220 = v2180 + 1;
          while (v2220 != v2183)
          {
            ++v2182;
            v2221 = *v2220++;
            v2184 = v2221;
            if (v2221 != -1)
            {
              v2180 = v2220 - 1;
              goto LABEL_1170;
            }
          }
          v2175 = *(_DWORD *)(result + 3468);
        }
      }
      ++v2176;
      ++v2177;
    }
    while (v2176 < v2175);
    v1958 = *a5;
  }
  v2225 = *(_DWORD *)(result + 4908);
  if (v2225)
  {
    v2226 = 0;
    v2227 = a4[9];
    do
    {
      v2228 = *(_QWORD *)(result + 4984);
      v2229 = *(_DWORD *)(result + 5008) * v2226;
      v2230 = (uint64_t *)(v2228 + 8 * v2229);
      v2231 = *(_DWORD *)(result + 4904);
      if (v2231 && *v2230 == -1)
      {
        v2232 = 0;
        v2272 = 8 * (v2231 + v2229) - 8 * v2229 - 8;
        v2273 = v2228 + 8 * v2229;
        while (v2272)
        {
          v2230 = (uint64_t *)(v2273 + 8);
          ++v2232;
          v2274 = *(_QWORD *)(v2273 + 8);
          v2272 -= 8;
          v2273 += 8;
          if (v2274 != -1)
            goto LABEL_1190;
        }
      }
      else
      {
        v2232 = 0;
LABEL_1190:
        v2233 = (uint64_t *)(v2228 + 8 * (v2229 + v2231));
        if (v2230 != v2233)
        {
          v2234 = *v2230;
LABEL_1192:
          v2235 = *v2227;
          v2236 = *(_DWORD *)(a3[12] + 4 * v2232);
          v2237 = *(_QWORD *)(result + 4912) + 8 * v2234;
          v2238 = *((unsigned int *)a2 + 4);
          v2239 = *a2;
          if (v1958 && v2235 < v2236)
          {
            v2240 = *(int64x2_t *)v2237;
            v2241 = (int64x2_t *)(v2239 + 8 * (v2236 + (_DWORD)v2238 * v2235));
            v2242 = *(_OWORD *)(v2237 + 24);
            v2243 = *(_QWORD *)(v2237 + 40);
            v2244 = *(int64x2_t *)(v2237 + 48);
            v2245 = *(_QWORD *)(v2237 + 64);
            v2246 = *(_OWORD *)(v2237 + 72);
            v2247 = *(_QWORD *)(v2237 + 88);
            v2248 = *(int64x2_t *)(v2237 + 96);
            v2249 = *(_QWORD *)(v2237 + 112);
            v2250 = *(_OWORD *)(v2237 + 120);
            v2251 = *(_QWORD *)(v2237 + 136);
            v2241[1].i64[0] = *(_QWORD *)(v2237 + 16);
            *v2241 = v2240;
            v2252 = &v2241->i8[8 * v2238];
            *((_QWORD *)v2252 + 2) = v2243;
            *(_OWORD *)v2252 = v2242;
            v2253 = &v2241[v2238];
            v2253[1].i64[0] = v2245;
            *v2253 = v2244;
            v2254 = &v2241->i8[24 * v2238];
            *((_QWORD *)v2254 + 2) = v2247;
            *(_OWORD *)v2254 = v2246;
            v2255 = &v2241[2 * v2238];
            v2255[1].i64[0] = v2249;
            *v2255 = v2248;
            v2256 = &v2241->i8[40 * v2238];
            *((_QWORD *)v2256 + 2) = v2251;
            *(_OWORD *)v2256 = v2250;
          }
          else
          {
            v2257 = (int64x2_t *)(v2239 + 8 * (v2235 + (_DWORD)v2238 * v2236));
            v2258.i64[0] = *(_QWORD *)(v2237 + 16);
            v2259 = *(int64x2_t *)(v2237 + 24);
            v2260.i64[0] = *(_QWORD *)(v2237 + 64);
            v2261 = *(int64x2_t *)(v2237 + 48);
            v2262 = *(int64x2_t *)(v2237 + 72);
            v2263.i64[0] = *(_QWORD *)(v2237 + 112);
            v2264 = *(int64x2_t *)(v2237 + 96);
            v2265 = *(int64x2_t *)(v2237 + 120);
            v2266 = vzip1q_s64(*(int64x2_t *)v2237, v2259);
            v2267 = vzip2q_s64(*(int64x2_t *)v2237, v2259);
            v2258.i64[1] = *(_QWORD *)(v2237 + 40);
            v2260.i64[1] = *(_QWORD *)(v2237 + 88);
            v2263.i64[1] = *(_QWORD *)(v2237 + 136);
            v2257[1] = vzip1q_s64(v2261, v2262);
            v2257[2] = vzip1q_s64(v2264, v2265);
            *v2257 = v2266;
            v2268 = (int64x2_t *)((char *)v2257 + 8 * v2238);
            v2268[1] = vzip1q_s64(vdupq_laneq_s64(v2261, 1), vdupq_laneq_s64(v2262, 1));
            v2268[2] = vzip2q_s64(v2264, v2265);
            *v2268 = v2267;
            v2269 = &v2257[v2238];
            v2269[1] = v2260;
            v2269[2] = v2263;
            *v2269 = v2258;
          }
          v2270 = v2230 + 1;
          while (v2270 != v2233)
          {
            ++v2232;
            v2271 = *v2270++;
            v2234 = v2271;
            if (v2271 != -1)
            {
              v2230 = v2270 - 1;
              goto LABEL_1192;
            }
          }
          v2225 = *(_DWORD *)(result + 4908);
        }
      }
      ++v2226;
      ++v2227;
    }
    while (v2226 < v2225);
    v1958 = *a5;
  }
  v2275 = *(_DWORD *)(result + 6348);
  if (v2275)
  {
    v2276 = 0;
    v2277 = a4[12];
    do
    {
      v2278 = *(_QWORD *)(result + 6424);
      v2279 = *(_DWORD *)(result + 6448) * v2276;
      v2280 = (uint64_t *)(v2278 + 8 * v2279);
      v2281 = *(_DWORD *)(result + 6344);
      if (v2281 && *v2280 == -1)
      {
        v2282 = 0;
        v2308 = 8 * (v2281 + v2279) - 8 * v2279 - 8;
        v2309 = v2278 + 8 * v2279;
        while (v2308)
        {
          v2280 = (uint64_t *)(v2309 + 8);
          ++v2282;
          v2310 = *(_QWORD *)(v2309 + 8);
          v2308 -= 8;
          v2309 += 8;
          if (v2310 != -1)
            goto LABEL_1212;
        }
      }
      else
      {
        v2282 = 0;
LABEL_1212:
        v2283 = (uint64_t *)(v2278 + 8 * (v2279 + v2281));
        if (v2280 != v2283)
        {
          v2284 = *v2280;
LABEL_1214:
          v2285 = *v2277;
          v2286 = *(_DWORD *)(a3[12] + 4 * v2282);
          v2287 = *(_QWORD *)(result + 6352) + 8 * v2284;
          v2288 = *((unsigned int *)a2 + 4);
          v2289 = *a2;
          if (v1958 && v2285 < v2286)
          {
            v2290 = v2286 + (_DWORD)v2288 * v2285;
            v2291 = (int64x2_t *)(v2289 + 8 * v2290);
            v2292 = *(int64x2_t *)v2287;
            v2293 = *(_OWORD *)(v2287 + 24);
            v2294 = *(_QWORD *)(v2287 + 40);
            v2295 = *(_QWORD *)(v2287 + 64);
            v2296 = *(int8x16_t *)(v2287 + 48);
            v2297 = vextq_s8(v2296, v2296, 8uLL).u64[0];
            v2291[1].i64[0] = *(_QWORD *)(v2287 + 16);
            *v2291 = v2292;
            v2298 = &v2291->i8[8 * v2288];
            *((_QWORD *)v2298 + 2) = v2294;
            *(_OWORD *)v2298 = v2293;
          }
          else
          {
            v2290 = v2285 + (_DWORD)v2288 * v2286;
            v2299 = (int64x2_t *)(v2289 + 8 * v2290);
            v2296.i64[0] = *(_QWORD *)(v2287 + 16);
            v2297 = *(_QWORD *)(v2287 + 40);
            v2300 = *(int64x2_t *)(v2287 + 24);
            v2295 = *(_QWORD *)(v2287 + 64);
            v2301 = *(_OWORD *)(v2287 + 48);
            v2302 = vzip1q_s64(*(int64x2_t *)v2287, v2300);
            v2303 = vzip2q_s64(*(int64x2_t *)v2287, v2300);
            v2299[1].i64[0] = v2301;
            *v2299 = v2302;
            v2304 = (int64x2_t *)((char *)v2299 + 8 * v2288);
            *v2304 = v2303;
            v2304[1].i64[0] = *((_QWORD *)&v2301 + 1);
          }
          v2305 = v2289 + 8 * v2290 + 16 * v2288;
          *(_QWORD *)(v2305 + 16) = v2295;
          v2296.i64[1] = v2297;
          *(int8x16_t *)v2305 = v2296;
          v2306 = v2280 + 1;
          while (v2306 != v2283)
          {
            ++v2282;
            v2307 = *v2306++;
            v2284 = v2307;
            if (v2307 != -1)
            {
              v2280 = v2306 - 1;
              goto LABEL_1214;
            }
          }
          v2275 = *(_DWORD *)(result + 6348);
        }
      }
      ++v2276;
      ++v2277;
    }
    while (v2276 < v2275);
    v1958 = *a5;
  }
  v2311 = *(_DWORD *)(result + 7788);
  if (v2311)
  {
    v2312 = 0;
    v2313 = a4[15];
    do
    {
      v2314 = *(_QWORD *)(result + 7864);
      v2315 = *(_DWORD *)(result + 7888) * v2312;
      v2316 = (uint64_t *)(v2314 + 8 * v2315);
      v2317 = *(_DWORD *)(result + 7784);
      if (v2317 && *v2316 == -1)
      {
        v2318 = 0;
        v2333 = 8 * (v2317 + v2315) - 8 * v2315 - 8;
        v2334 = v2314 + 8 * v2315;
        while (v2333)
        {
          v2316 = (uint64_t *)(v2334 + 8);
          ++v2318;
          v2335 = *(_QWORD *)(v2334 + 8);
          v2333 -= 8;
          v2334 += 8;
          if (v2335 != -1)
            goto LABEL_1234;
        }
      }
      else
      {
        v2318 = 0;
LABEL_1234:
        v2319 = (uint64_t *)(v2314 + 8 * (v2315 + v2317));
        if (v2316 != v2319)
        {
          v2320 = *v2316;
LABEL_1236:
          v2321 = *v2313;
          v2322 = *(_DWORD *)(a3[12] + 4 * v2318);
          v2323 = *(_QWORD *)(result + 7792) + 8 * v2320;
          v2324 = *((unsigned int *)a2 + 4);
          v2325 = *a2;
          v2326 = *(int8x16_t *)v2323;
          v2327 = *(_QWORD *)(v2323 + 16);
          v2328 = vextq_s8(v2326, v2326, 8uLL).u64[0];
          if (v1958 && v2321 < v2322)
          {
            v2329 = (int8x16_t *)(v2325 + 8 * (v2322 + (_DWORD)v2324 * v2321));
            v2329[1].i64[0] = v2327;
            v2326.i64[1] = v2328;
            *v2329 = v2326;
          }
          else
          {
            v2330 = (_QWORD *)(v2325 + 8 * (v2321 + (_DWORD)v2324 * v2322));
            *v2330 = v2326.i64[0];
            v2330[v2324] = v2328;
            v2330[2 * v2324] = v2327;
          }
          v2331 = v2316 + 1;
          while (v2331 != v2319)
          {
            ++v2318;
            v2332 = *v2331++;
            v2320 = v2332;
            if (v2332 != -1)
            {
              v2316 = v2331 - 1;
              goto LABEL_1236;
            }
          }
          v2311 = *(_DWORD *)(result + 7788);
        }
      }
      ++v2312;
      ++v2313;
    }
    while (v2312 < v2311);
    v1958 = *a5;
  }
  v2336 = *(_DWORD *)(result + 9228);
  if (v2336)
  {
    v2337 = 0;
    v2338 = a4[18];
    do
    {
      v2339 = *(_QWORD *)(result + 9304);
      v2340 = *(_DWORD *)(result + 9328) * v2337;
      v2341 = (uint64_t *)(v2339 + 8 * v2340);
      v2342 = *(_DWORD *)(result + 9224);
      if (v2342 && *v2341 == -1)
      {
        v2343 = 0;
        v2374 = 8 * (v2342 + v2340) - 8 * v2340 - 8;
        v2375 = v2339 + 8 * v2340;
        while (v2374)
        {
          v2341 = (uint64_t *)(v2375 + 8);
          ++v2343;
          v2376 = *(_QWORD *)(v2375 + 8);
          v2374 -= 8;
          v2375 += 8;
          if (v2376 != -1)
            goto LABEL_1256;
        }
      }
      else
      {
        v2343 = 0;
LABEL_1256:
        v2344 = (uint64_t *)(v2339 + 8 * (v2340 + v2342));
        if (v2341 != v2344)
        {
          v2345 = *v2341;
LABEL_1258:
          v2346 = *v2338;
          v2347 = *(_DWORD *)(a3[12] + 4 * v2343);
          v2348 = *(_QWORD *)(result + 9232) + 8 * v2345;
          v2349 = *((unsigned int *)a2 + 4);
          v2350 = *a2;
          if (v1958 && v2346 < v2347)
          {
            v2351 = *(int64x2_t *)v2348;
            v2352 = (int64x2_t *)(v2350 + 8 * (v2347 + (_DWORD)v2349 * v2346));
            v2353 = *(_OWORD *)(v2348 + 24);
            v2354 = *(_QWORD *)(v2348 + 40);
            v2355 = *(int64x2_t *)(v2348 + 48);
            v2356 = *(_QWORD *)(v2348 + 64);
            v2357 = *(_OWORD *)(v2348 + 72);
            v2358 = *(_QWORD *)(v2348 + 88);
            v2352[1].i64[0] = *(_QWORD *)(v2348 + 16);
            *v2352 = v2351;
            v2359 = &v2352->i8[8 * v2349];
            *((_QWORD *)v2359 + 2) = v2354;
            *(_OWORD *)v2359 = v2353;
            v2360 = &v2352[v2349];
            v2360[1].i64[0] = v2356;
            *v2360 = v2355;
            v2361 = &v2352->i8[24 * v2349];
            *((_QWORD *)v2361 + 2) = v2358;
            *(_OWORD *)v2361 = v2357;
          }
          else
          {
            v2362 = (int64x2_t *)(v2350 + 8 * (v2346 + (_DWORD)v2349 * v2347));
            v2363.i64[0] = *(_QWORD *)(v2348 + 16);
            v2364 = *(int64x2_t *)(v2348 + 24);
            v2365.i64[0] = *(_QWORD *)(v2348 + 64);
            v2366 = *(int64x2_t *)(v2348 + 48);
            v2367 = vzip1q_s64(*(int64x2_t *)v2348, v2364);
            v2368 = vzip1q_s64(v2366, *(int64x2_t *)(v2348 + 72));
            v2369 = vzip2q_s64(*(int64x2_t *)v2348, v2364);
            v2364.i64[0] = vdupq_laneq_s64(v2366, 1).u64[0];
            v2364.i64[1] = *(_QWORD *)(v2348 + 80);
            v2363.i64[1] = *(_QWORD *)(v2348 + 40);
            v2365.i64[1] = *(_QWORD *)(v2348 + 88);
            *v2362 = v2367;
            v2362[1] = v2368;
            v2370 = (int64x2_t *)((char *)v2362 + 8 * v2349);
            *v2370 = v2369;
            v2370[1] = v2364;
            v2371 = &v2362[v2349];
            *v2371 = v2363;
            v2371[1] = v2365;
          }
          v2372 = v2341 + 1;
          while (v2372 != v2344)
          {
            ++v2343;
            v2373 = *v2372++;
            v2345 = v2373;
            if (v2373 != -1)
            {
              v2341 = v2372 - 1;
              goto LABEL_1258;
            }
          }
          v2336 = *(_DWORD *)(result + 9228);
        }
      }
      ++v2337;
      ++v2338;
    }
    while (v2337 < v2336);
    v1958 = *a5;
  }
  v2377 = *(_DWORD *)(result + 10668);
  if (v2377)
  {
    v2378 = 0;
    v2379 = a4[21];
    do
    {
      v2380 = *(_QWORD *)(result + 10744);
      v2381 = *(_DWORD *)(result + 10768) * v2378;
      v2382 = (uint64_t *)(v2380 + 8 * v2381);
      v2383 = *(_DWORD *)(result + 10664);
      if (v2383 && *v2382 == -1)
      {
        v2384 = 0;
        v2415 = 8 * (v2383 + v2381) - 8 * v2381 - 8;
        v2416 = v2380 + 8 * v2381;
        while (v2415)
        {
          v2382 = (uint64_t *)(v2416 + 8);
          ++v2384;
          v2417 = *(_QWORD *)(v2416 + 8);
          v2415 -= 8;
          v2416 += 8;
          if (v2417 != -1)
            goto LABEL_1278;
        }
      }
      else
      {
        v2384 = 0;
LABEL_1278:
        v2385 = (uint64_t *)(v2380 + 8 * (v2381 + v2383));
        if (v2382 != v2385)
        {
          v2386 = *v2382;
LABEL_1280:
          v2387 = *v2379;
          v2388 = *(_DWORD *)(a3[12] + 4 * v2384);
          v2389 = *(_QWORD *)(result + 10672) + 8 * v2386;
          v2390 = *((unsigned int *)a2 + 4);
          v2391 = *a2;
          if (v1958 && v2387 < v2388)
          {
            v2392 = *(int64x2_t *)v2389;
            v2393 = (int64x2_t *)(v2391 + 8 * (v2388 + (_DWORD)v2390 * v2387));
            v2394 = *(_OWORD *)(v2389 + 24);
            v2395 = *(_QWORD *)(v2389 + 40);
            v2396 = *(int64x2_t *)(v2389 + 48);
            v2397 = *(_QWORD *)(v2389 + 64);
            v2398 = *(_OWORD *)(v2389 + 72);
            v2399 = *(_QWORD *)(v2389 + 88);
            v2393[1].i64[0] = *(_QWORD *)(v2389 + 16);
            *v2393 = v2392;
            v2400 = &v2393->i8[8 * v2390];
            *((_QWORD *)v2400 + 2) = v2395;
            *(_OWORD *)v2400 = v2394;
            v2401 = &v2393[v2390];
            v2401[1].i64[0] = v2397;
            *v2401 = v2396;
            v2402 = &v2393->i8[24 * v2390];
            *((_QWORD *)v2402 + 2) = v2399;
            *(_OWORD *)v2402 = v2398;
          }
          else
          {
            v2403 = (int64x2_t *)(v2391 + 8 * (v2387 + (_DWORD)v2390 * v2388));
            v2404.i64[0] = *(_QWORD *)(v2389 + 16);
            v2405 = *(int64x2_t *)(v2389 + 24);
            v2406.i64[0] = *(_QWORD *)(v2389 + 64);
            v2407 = *(int64x2_t *)(v2389 + 48);
            v2408 = vzip1q_s64(*(int64x2_t *)v2389, v2405);
            v2409 = vzip1q_s64(v2407, *(int64x2_t *)(v2389 + 72));
            v2410 = vzip2q_s64(*(int64x2_t *)v2389, v2405);
            v2405.i64[0] = vdupq_laneq_s64(v2407, 1).u64[0];
            v2405.i64[1] = *(_QWORD *)(v2389 + 80);
            v2404.i64[1] = *(_QWORD *)(v2389 + 40);
            v2406.i64[1] = *(_QWORD *)(v2389 + 88);
            *v2403 = v2408;
            v2403[1] = v2409;
            v2411 = (int64x2_t *)((char *)v2403 + 8 * v2390);
            *v2411 = v2410;
            v2411[1] = v2405;
            v2412 = &v2403[v2390];
            *v2412 = v2404;
            v2412[1] = v2406;
          }
          v2413 = v2382 + 1;
          while (v2413 != v2385)
          {
            ++v2384;
            v2414 = *v2413++;
            v2386 = v2414;
            if (v2414 != -1)
            {
              v2382 = v2413 - 1;
              goto LABEL_1280;
            }
          }
          v2377 = *(_DWORD *)(result + 10668);
        }
      }
      ++v2378;
      ++v2379;
    }
    while (v2378 < v2377);
    v1958 = *a5;
  }
  v2418 = *(_DWORD *)(result + 12108);
  if (v2418)
  {
    v2419 = 0;
    v2420 = a4[24];
    do
    {
      v2421 = *(_QWORD *)(result + 12184);
      v2422 = *(_DWORD *)(result + 12208) * v2419;
      v2423 = (uint64_t *)(v2421 + 8 * v2422);
      v2424 = *(_DWORD *)(result + 12104);
      if (v2424 && *v2423 == -1)
      {
        v2425 = 0;
        v2451 = 8 * (v2424 + v2422) - 8 * v2422 - 8;
        v2452 = v2421 + 8 * v2422;
        while (v2451)
        {
          v2423 = (uint64_t *)(v2452 + 8);
          ++v2425;
          v2453 = *(_QWORD *)(v2452 + 8);
          v2451 -= 8;
          v2452 += 8;
          if (v2453 != -1)
            goto LABEL_1300;
        }
      }
      else
      {
        v2425 = 0;
LABEL_1300:
        v2426 = (uint64_t *)(v2421 + 8 * (v2422 + v2424));
        if (v2423 != v2426)
        {
          v2427 = *v2423;
LABEL_1302:
          v2428 = *v2420;
          v2429 = *(_DWORD *)(a3[12] + 4 * v2425);
          v2430 = *(_QWORD *)(result + 12112) + 8 * v2427;
          v2431 = *((unsigned int *)a2 + 4);
          v2432 = *a2;
          if (v1958 && v2428 < v2429)
          {
            v2433 = v2429 + (_DWORD)v2431 * v2428;
            v2434 = (int64x2_t *)(v2432 + 8 * v2433);
            v2435 = *(int64x2_t *)v2430;
            v2436 = *(_OWORD *)(v2430 + 24);
            v2437 = *(_QWORD *)(v2430 + 40);
            v2438 = *(_QWORD *)(v2430 + 64);
            v2439 = *(int8x16_t *)(v2430 + 48);
            v2440 = vextq_s8(v2439, v2439, 8uLL).u64[0];
            v2434[1].i64[0] = *(_QWORD *)(v2430 + 16);
            *v2434 = v2435;
            v2441 = &v2434->i8[8 * v2431];
            *((_QWORD *)v2441 + 2) = v2437;
            *(_OWORD *)v2441 = v2436;
          }
          else
          {
            v2433 = v2428 + (_DWORD)v2431 * v2429;
            v2442 = (int64x2_t *)(v2432 + 8 * v2433);
            v2439.i64[0] = *(_QWORD *)(v2430 + 16);
            v2440 = *(_QWORD *)(v2430 + 40);
            v2443 = *(int64x2_t *)(v2430 + 24);
            v2438 = *(_QWORD *)(v2430 + 64);
            v2444 = *(_OWORD *)(v2430 + 48);
            v2445 = vzip1q_s64(*(int64x2_t *)v2430, v2443);
            v2446 = vzip2q_s64(*(int64x2_t *)v2430, v2443);
            v2442[1].i64[0] = v2444;
            *v2442 = v2445;
            v2447 = (int64x2_t *)((char *)v2442 + 8 * v2431);
            *v2447 = v2446;
            v2447[1].i64[0] = *((_QWORD *)&v2444 + 1);
          }
          v2448 = v2432 + 8 * v2433 + 16 * v2431;
          *(_QWORD *)(v2448 + 16) = v2438;
          v2439.i64[1] = v2440;
          *(int8x16_t *)v2448 = v2439;
          v2449 = v2423 + 1;
          while (v2449 != v2426)
          {
            ++v2425;
            v2450 = *v2449++;
            v2427 = v2450;
            if (v2450 != -1)
            {
              v2423 = v2449 - 1;
              goto LABEL_1302;
            }
          }
          v2418 = *(_DWORD *)(result + 12108);
        }
      }
      ++v2419;
      ++v2420;
    }
    while (v2419 < v2418);
    v1958 = *a5;
  }
  v2454 = *(_DWORD *)(result + 13548);
  if (v2454)
  {
    v2455 = 0;
    v2456 = a4[27];
    do
    {
      v2457 = *(_QWORD *)(result + 13624);
      v2458 = *(_DWORD *)(result + 13648) * v2455;
      v2459 = (uint64_t *)(v2457 + 8 * v2458);
      v2460 = *(_DWORD *)(result + 13544);
      if (v2460 && *v2459 == -1)
      {
        v2461 = 0;
        v2487 = 8 * (v2460 + v2458) - 8 * v2458 - 8;
        v2488 = v2457 + 8 * v2458;
        while (v2487)
        {
          v2459 = (uint64_t *)(v2488 + 8);
          ++v2461;
          v2489 = *(_QWORD *)(v2488 + 8);
          v2487 -= 8;
          v2488 += 8;
          if (v2489 != -1)
            goto LABEL_1322;
        }
      }
      else
      {
        v2461 = 0;
LABEL_1322:
        v2462 = (uint64_t *)(v2457 + 8 * (v2458 + v2460));
        if (v2459 != v2462)
        {
          v2463 = *v2459;
LABEL_1324:
          v2464 = *v2456;
          v2465 = *(_DWORD *)(a3[12] + 4 * v2461);
          v2466 = *(_QWORD *)(result + 13552) + 8 * v2463;
          v2467 = *((unsigned int *)a2 + 4);
          v2468 = *a2;
          if (v1958 && v2464 < v2465)
          {
            v2469 = v2465 + (_DWORD)v2467 * v2464;
            v2470 = (int64x2_t *)(v2468 + 8 * v2469);
            v2471 = *(int64x2_t *)v2466;
            v2472 = *(_OWORD *)(v2466 + 24);
            v2473 = *(_QWORD *)(v2466 + 40);
            v2474 = *(_QWORD *)(v2466 + 64);
            v2475 = *(int8x16_t *)(v2466 + 48);
            v2476 = vextq_s8(v2475, v2475, 8uLL).u64[0];
            v2470[1].i64[0] = *(_QWORD *)(v2466 + 16);
            *v2470 = v2471;
            v2477 = &v2470->i8[8 * v2467];
            *((_QWORD *)v2477 + 2) = v2473;
            *(_OWORD *)v2477 = v2472;
          }
          else
          {
            v2469 = v2464 + (_DWORD)v2467 * v2465;
            v2478 = (int64x2_t *)(v2468 + 8 * v2469);
            v2475.i64[0] = *(_QWORD *)(v2466 + 16);
            v2476 = *(_QWORD *)(v2466 + 40);
            v2479 = *(int64x2_t *)(v2466 + 24);
            v2474 = *(_QWORD *)(v2466 + 64);
            v2480 = *(_OWORD *)(v2466 + 48);
            v2481 = vzip1q_s64(*(int64x2_t *)v2466, v2479);
            v2482 = vzip2q_s64(*(int64x2_t *)v2466, v2479);
            v2478[1].i64[0] = v2480;
            *v2478 = v2481;
            v2483 = (int64x2_t *)((char *)v2478 + 8 * v2467);
            *v2483 = v2482;
            v2483[1].i64[0] = *((_QWORD *)&v2480 + 1);
          }
          v2484 = v2468 + 8 * v2469 + 16 * v2467;
          *(_QWORD *)(v2484 + 16) = v2474;
          v2475.i64[1] = v2476;
          *(int8x16_t *)v2484 = v2475;
          v2485 = v2459 + 1;
          while (v2485 != v2462)
          {
            ++v2461;
            v2486 = *v2485++;
            v2463 = v2486;
            if (v2486 != -1)
            {
              v2459 = v2485 - 1;
              goto LABEL_1324;
            }
          }
          v2454 = *(_DWORD *)(result + 13548);
        }
      }
      ++v2455;
      ++v2456;
    }
    while (v2455 < v2454);
    v1958 = *a5;
  }
  v2490 = *(_DWORD *)(result + 444);
  if (v2490)
  {
    v2491 = 0;
    v2492 = *a4;
    do
    {
      v2493 = *(_QWORD *)(result + 520);
      v2494 = *(_DWORD *)(result + 544) * v2491;
      v2495 = (uint64_t *)(v2493 + 8 * v2494);
      v2496 = *(_DWORD *)(result + 440);
      if (v2496 && *v2495 == -1)
      {
        v2497 = 0;
        v2558 = 8 * (v2496 + v2494) - 8 * v2494 - 8;
        v2559 = v2493 + 8 * v2494;
        while (v2558)
        {
          v2495 = (uint64_t *)(v2559 + 8);
          ++v2497;
          v2560 = *(_QWORD *)(v2559 + 8);
          v2558 -= 8;
          v2559 += 8;
          if (v2560 != -1)
            goto LABEL_1344;
        }
      }
      else
      {
        v2497 = 0;
LABEL_1344:
        v2498 = (uint64_t *)(v2493 + 8 * (v2494 + v2496));
        if (v2495 != v2498)
        {
          v2499 = *v2495;
LABEL_1346:
          v2500 = *v2492;
          v2501 = *(_DWORD *)(a3[9] + 4 * v2497);
          v2502 = *(_QWORD *)(result + 448) + 8 * v2499;
          v2503 = *((unsigned int *)a2 + 4);
          v2504 = *a2;
          if (v1958 && v2500 < v2501)
          {
            v2505 = *(int64x2_t *)v2502;
            v2506 = (int64x2_t *)(v2504 + 8 * (v2501 + (_DWORD)v2503 * v2500));
            v2507 = *(int64x2_t *)(v2502 + 32);
            v2508 = *(int64x2_t *)(v2502 + 48);
            v2509 = *(int64x2_t *)(v2502 + 64);
            v2510 = *(int64x2_t *)(v2502 + 80);
            v2512 = *(int8x16_t *)(v2502 + 96);
            v2511 = *(int8x16_t *)(v2502 + 112);
            v2513 = *(int8x16_t *)(v2502 + 128);
            v2514 = *(int8x16_t *)(v2502 + 144);
            v2515 = vextq_s8(v2513, v2513, 8uLL).u64[0];
            v2516 = vextq_s8(v2511, v2511, 8uLL).u64[0];
            v2517 = vextq_s8(v2512, v2512, 8uLL).u64[0];
            v2518 = *(int8x16_t *)(v2502 + 160);
            v2519 = *(int8x16_t *)(v2502 + 176);
            v2520 = vextq_s8(v2519, v2519, 8uLL).u64[0];
            v2521 = vextq_s8(v2518, v2518, 8uLL).u64[0];
            v2522 = vextq_s8(v2514, v2514, 8uLL).u64[0];
            v2524 = *(int8x16_t *)(v2502 + 192);
            v2523 = *(int8x16_t *)(v2502 + 208);
            v2526 = *(int8x16_t *)(v2502 + 224);
            v2525 = *(int8x16_t *)(v2502 + 240);
            v2527 = vextq_s8(v2526, v2526, 8uLL).u64[0];
            v2528 = vextq_s8(v2523, v2523, 8uLL).u64[0];
            v2529 = vextq_s8(v2524, v2524, 8uLL).u64[0];
            v2530 = *(int8x16_t *)(v2502 + 256);
            v2531 = *(int8x16_t *)(v2502 + 272);
            v2532 = vextq_s8(v2531, v2531, 8uLL).u64[0];
            v2533 = vextq_s8(v2530, v2530, 8uLL).u64[0];
            v2534 = vextq_s8(v2525, v2525, 8uLL).u64[0];
            v2506[1] = *(int64x2_t *)(v2502 + 16);
            v2506[2] = v2507;
            *v2506 = v2505;
            v2535 = (int64x2_t *)((char *)v2506 + 8 * v2503);
            v2535[1] = v2509;
            v2535[2] = v2510;
          }
          else
          {
            v2506 = (int64x2_t *)(v2504 + 8 * (v2500 + (_DWORD)v2503 * v2501));
            v2536 = *(int64x2_t *)(v2502 + 16);
            v2537 = *(int64x2_t *)(v2502 + 64);
            v2538 = *(int64x2_t *)(v2502 + 80);
            v2540 = *(int64x2_t *)(v2502 + 32);
            v2539 = *(int64x2_t *)(v2502 + 48);
            v2541 = *(int64x2_t *)(v2502 + 96);
            v2542 = *(int64x2_t *)(v2502 + 112);
            v2543 = *(int64x2_t *)(v2502 + 128);
            v2544 = *(int64x2_t *)(v2502 + 192);
            v2545 = *(int64x2_t *)(v2502 + 208);
            v2546 = *(int64x2_t *)(v2502 + 224);
            v2547 = vzip1q_s64(*(int64x2_t *)v2502, v2539);
            v2548 = vzip1q_s64(v2541, *(int64x2_t *)(v2502 + 144));
            v2549 = vzip1q_s64(v2544, *(int64x2_t *)(v2502 + 240));
            v2550.i64[0] = vdupq_laneq_s64(v2541, 1).u64[0];
            v2550.i64[1] = *(_QWORD *)(v2502 + 152);
            v2508 = vzip2q_s64(*(int64x2_t *)v2502, v2539);
            v2551.i64[0] = vdupq_laneq_s64(v2544, 1).u64[0];
            v2551.i64[1] = *(_QWORD *)(v2502 + 248);
            v2512 = (int8x16_t)vzip1q_s64(v2536, v2537);
            v2511 = (int8x16_t)vzip1q_s64(v2542, *(int64x2_t *)(v2502 + 160));
            v2513 = (int8x16_t)vzip1q_s64(v2545, *(int64x2_t *)(v2502 + 256));
            v2515 = vextq_s8(v2513, v2513, 8uLL).u64[0];
            v2516 = vextq_s8(v2511, v2511, 8uLL).u64[0];
            v2517 = vextq_s8(v2512, v2512, 8uLL).u64[0];
            v2514 = (int8x16_t)vzip2q_s64(v2536, v2537);
            v2518.i64[0] = vdupq_laneq_s64(v2542, 1).u64[0];
            v2518.i64[1] = *(_QWORD *)(v2502 + 168);
            v2519.i64[0] = vdupq_laneq_s64(v2545, 1).u64[0];
            v2519.i64[1] = *(_QWORD *)(v2502 + 264);
            v2522 = vextq_s8(v2514, v2514, 8uLL).u64[0];
            v2520 = vextq_s8(v2519, v2519, 8uLL).u64[0];
            v2521 = vextq_s8(v2518, v2518, 8uLL).u64[0];
            v2524 = (int8x16_t)vzip1q_s64(v2540, v2538);
            v2523 = (int8x16_t)vzip1q_s64(v2543, *(int64x2_t *)(v2502 + 176));
            v2526 = (int8x16_t)vzip1q_s64(v2546, *(int64x2_t *)(v2502 + 272));
            v2527 = vextq_s8(v2526, v2526, 8uLL).u64[0];
            v2528 = vextq_s8(v2523, v2523, 8uLL).u64[0];
            v2529 = vextq_s8(v2524, v2524, 8uLL).u64[0];
            v2525 = (int8x16_t)vzip2q_s64(v2540, v2538);
            v2530.i64[0] = vdupq_laneq_s64(v2543, 1).u64[0];
            v2530.i64[1] = *(_QWORD *)(v2502 + 184);
            v2531.i64[0] = vdupq_laneq_s64(v2546, 1).u64[0];
            v2531.i64[1] = *(_QWORD *)(v2502 + 280);
            v2534 = vextq_s8(v2525, v2525, 8uLL).u64[0];
            v2532 = vextq_s8(v2531, v2531, 8uLL).u64[0];
            v2533 = vextq_s8(v2530, v2530, 8uLL).u64[0];
            v2506[1] = v2548;
            v2506[2] = v2549;
            *v2506 = v2547;
            v2535 = (int64x2_t *)((char *)v2506 + 8 * v2503);
            v2535[1] = v2550;
            v2535[2] = v2551;
          }
          *v2535 = v2508;
          v2512.i64[1] = v2517;
          v2511.i64[1] = v2516;
          v2552 = (int8x16_t *)&v2506[v2503];
          *v2552 = v2512;
          v2552[1] = v2511;
          v2513.i64[1] = v2515;
          v2552[2] = v2513;
          v2553 = (int8x16_t *)((char *)v2506 + 24 * v2503);
          v2519.i64[1] = v2520;
          v2518.i64[1] = v2521;
          v2514.i64[1] = v2522;
          v2553[1] = v2518;
          v2553[2] = v2519;
          *v2553 = v2514;
          v2554 = (int8x16_t *)&v2506[2 * v2503];
          v2526.i64[1] = v2527;
          v2523.i64[1] = v2528;
          v2524.i64[1] = v2529;
          v2554[1] = v2523;
          v2554[2] = v2526;
          *v2554 = v2524;
          v2555 = (int8x16_t *)((char *)v2506 + 40 * v2503);
          v2531.i64[1] = v2532;
          v2530.i64[1] = v2533;
          v2555[1] = v2530;
          v2555[2] = v2531;
          v2525.i64[1] = v2534;
          v2556 = v2495 + 1;
          *v2555 = v2525;
          while (v2556 != v2498)
          {
            ++v2497;
            v2557 = *v2556++;
            v2499 = v2557;
            if (v2557 != -1)
            {
              v2495 = v2556 - 1;
              goto LABEL_1346;
            }
          }
          v2490 = *(_DWORD *)(result + 444);
        }
      }
      ++v2491;
      ++v2492;
    }
    while (v2491 < v2490);
    v1958 = *a5;
  }
  v2561 = *(_DWORD *)(result + 1884);
  if (v2561)
  {
    v2562 = 0;
    v2563 = a4[3];
    do
    {
      v2564 = *(_QWORD *)(result + 1960);
      v2565 = *(_DWORD *)(result + 1984) * v2562;
      v2566 = (uint64_t *)(v2564 + 8 * v2565);
      v2567 = *(_DWORD *)(result + 1880);
      if (v2567 && *v2566 == -1)
      {
        v2568 = 0;
        v2647 = 8 * (v2567 + v2565) - 8 * v2565 - 8;
        v2648 = v2564 + 8 * v2565;
        while (v2647)
        {
          v2566 = (uint64_t *)(v2648 + 8);
          ++v2568;
          v2649 = *(_QWORD *)(v2648 + 8);
          v2647 -= 8;
          v2648 += 8;
          if (v2649 != -1)
            goto LABEL_1366;
        }
      }
      else
      {
        v2568 = 0;
LABEL_1366:
        v2569 = (uint64_t *)(v2564 + 8 * (v2565 + v2567));
        if (v2566 != v2569)
        {
          v2570 = *v2566;
LABEL_1368:
          v2571 = *v2563;
          v2572 = *(_DWORD *)(a3[9] + 4 * v2568);
          v2573 = *(_QWORD *)(result + 1888) + 8 * v2570;
          v2574 = *((unsigned int *)a2 + 4);
          v2575 = *a2;
          if (v1958 && v2571 < v2572)
          {
            v2576 = *(int64x2_t *)v2573;
            v2577 = (int64x2_t *)(v2575 + 8 * (v2572 + (_DWORD)v2574 * v2571));
            v2578 = *(int64x2_t *)(v2573 + 32);
            v2579 = *(_OWORD *)(v2573 + 48);
            v2580 = *(_OWORD *)(v2573 + 64);
            v2581 = *(_OWORD *)(v2573 + 80);
            v2582 = *(int64x2_t *)(v2573 + 96);
            v2583 = *(int64x2_t *)(v2573 + 112);
            v2584 = *(int64x2_t *)(v2573 + 128);
            v2585 = *(_OWORD *)(v2573 + 144);
            v2586 = *(_OWORD *)(v2573 + 160);
            v2587 = *(_OWORD *)(v2573 + 176);
            v2588 = *(int64x2_t *)(v2573 + 192);
            v2589 = *(int64x2_t *)(v2573 + 208);
            v2590 = *(int64x2_t *)(v2573 + 224);
            v2591 = *(_OWORD *)(v2573 + 240);
            v2592 = *(_OWORD *)(v2573 + 256);
            v2593 = *(_OWORD *)(v2573 + 272);
            v2594 = *(int64x2_t *)(v2573 + 288);
            v2595 = *(int64x2_t *)(v2573 + 304);
            v2596 = *(int64x2_t *)(v2573 + 320);
            v2597 = *(_OWORD *)(v2573 + 336);
            v2598 = *(_OWORD *)(v2573 + 352);
            v2599 = *(_OWORD *)(v2573 + 368);
            v2600 = *(int64x2_t *)(v2573 + 384);
            v2601 = *(int64x2_t *)(v2573 + 400);
            v2602 = *(int64x2_t *)(v2573 + 416);
            v2577[1] = *(int64x2_t *)(v2573 + 16);
            v2577[2] = v2578;
            *v2577 = v2576;
            v2603 = &v2577->i8[8 * v2574];
            *((_OWORD *)v2603 + 1) = v2580;
            *((_OWORD *)v2603 + 2) = v2581;
            *(_OWORD *)v2603 = v2579;
            v2604 = &v2577[v2574];
            v2604[1] = v2583;
            v2604[2] = v2584;
            *v2604 = v2582;
            v2605 = &v2577->i8[24 * v2574];
            *((_OWORD *)v2605 + 1) = v2586;
            *((_OWORD *)v2605 + 2) = v2587;
            *(_OWORD *)v2605 = v2585;
            v2606 = &v2577[2 * v2574];
            v2606[1] = v2589;
            v2606[2] = v2590;
            *v2606 = v2588;
            v2607 = &v2577->i8[40 * v2574];
            *((_OWORD *)v2607 + 1) = v2592;
            *((_OWORD *)v2607 + 2) = v2593;
            *(_OWORD *)v2607 = v2591;
            v2608 = &v2577[3 * v2574];
            v2608[1] = v2595;
            v2608[2] = v2596;
            *v2608 = v2594;
            v2609 = &v2577->i8[56 * v2574];
            *((_OWORD *)v2609 + 1) = v2598;
            *((_OWORD *)v2609 + 2) = v2599;
            *(_OWORD *)v2609 = v2597;
            v2610 = &v2577[4 * v2574];
            v2610[1] = v2601;
            v2610[2] = v2602;
            *v2610 = v2600;
          }
          else
          {
            v2611 = *(int64x2_t *)(v2573 + 16);
            v2612 = (int64x2_t *)(v2575 + 8 * (v2571 + (_DWORD)v2574 * v2572));
            v2614 = *(int64x2_t *)(v2573 + 64);
            v2613 = *(int64x2_t *)(v2573 + 80);
            v2615 = *(int64x2_t *)(v2573 + 32);
            v2616 = *(int64x2_t *)(v2573 + 48);
            v2618 = *(int64x2_t *)(v2573 + 96);
            v2617 = *(int64x2_t *)(v2573 + 112);
            v2620 = *(int64x2_t *)(v2573 + 160);
            v2619 = *(int64x2_t *)(v2573 + 176);
            v2621 = *(int64x2_t *)(v2573 + 128);
            v2622 = *(int64x2_t *)(v2573 + 144);
            v2624 = *(int64x2_t *)(v2573 + 192);
            v2623 = *(int64x2_t *)(v2573 + 208);
            v2626 = *(int64x2_t *)(v2573 + 256);
            v2625 = *(int64x2_t *)(v2573 + 272);
            v2627 = *(int64x2_t *)(v2573 + 224);
            v2628 = *(int64x2_t *)(v2573 + 240);
            v2630 = *(int64x2_t *)(v2573 + 288);
            v2629 = *(int64x2_t *)(v2573 + 304);
            v2632 = *(int64x2_t *)(v2573 + 352);
            v2631 = *(int64x2_t *)(v2573 + 368);
            v2634 = *(int64x2_t *)(v2573 + 320);
            v2633 = *(int64x2_t *)(v2573 + 336);
            v2636 = *(_OWORD *)(v2573 + 400);
            v2635 = *(_OWORD *)(v2573 + 416);
            v2637 = *(_OWORD *)(v2573 + 384);
            v2638 = vzip1q_s64(*(int64x2_t *)v2573, v2616);
            v2639 = vzip2q_s64(*(int64x2_t *)v2573, v2616);
            v2612[2] = vzip1q_s64(v2624, v2628);
            v2612[3] = vzip1q_s64(v2630, v2633);
            v2612[4].i64[0] = v2637;
            *v2612 = v2638;
            v2612[1] = vzip1q_s64(v2618, v2622);
            v2640 = (int64x2_t *)((char *)v2612 + 8 * v2574);
            v2640[2] = vzip2q_s64(v2624, v2628);
            v2640[3] = vzip2q_s64(v2630, v2633);
            *v2640 = v2639;
            v2640[1] = vzip2q_s64(v2618, v2622);
            v2640[4].i64[0] = *((_QWORD *)&v2637 + 1);
            v2641 = &v2612[v2574];
            v2641[4].i64[0] = v2636;
            v2641[2] = vzip1q_s64(v2623, v2626);
            v2641[3] = vzip1q_s64(v2629, v2632);
            *v2641 = vzip1q_s64(v2611, v2614);
            v2641[1] = vzip1q_s64(v2617, v2620);
            v2642 = (int64x2_t *)((char *)v2612 + 24 * v2574);
            v2642[4].i64[0] = *((_QWORD *)&v2636 + 1);
            v2642[2] = vzip2q_s64(v2623, v2626);
            v2642[3] = vzip2q_s64(v2629, v2632);
            *v2642 = vzip2q_s64(v2611, v2614);
            v2642[1] = vzip2q_s64(v2617, v2620);
            v2643 = &v2612[2 * v2574];
            v2643[4].i64[0] = v2635;
            v2643[2] = vzip1q_s64(v2627, v2625);
            v2643[3] = vzip1q_s64(v2634, v2631);
            *v2643 = vzip1q_s64(v2615, v2613);
            v2643[1] = vzip1q_s64(v2621, v2619);
            v2644 = (int64x2_t *)((char *)v2612 + 40 * v2574);
            v2644[4].i64[0] = *((_QWORD *)&v2635 + 1);
            v2644[2] = vzip2q_s64(v2627, v2625);
            v2644[3] = vzip2q_s64(v2634, v2631);
            *v2644 = vzip2q_s64(v2615, v2613);
            v2644[1] = vzip2q_s64(v2621, v2619);
          }
          v2645 = v2566 + 1;
          while (v2645 != v2569)
          {
            ++v2568;
            v2646 = *v2645++;
            v2570 = v2646;
            if (v2646 != -1)
            {
              v2566 = v2645 - 1;
              goto LABEL_1368;
            }
          }
          v2561 = *(_DWORD *)(result + 1884);
        }
      }
      ++v2562;
      ++v2563;
    }
    while (v2562 < v2561);
    v1958 = *a5;
  }
  v2650 = *(_DWORD *)(result + 3324);
  if (v2650)
  {
    v2651 = 0;
    v2652 = a4[6];
    do
    {
      v2653 = *(_QWORD *)(result + 3400);
      v2654 = *(_DWORD *)(result + 3424) * v2651;
      v2655 = (uint64_t *)(v2653 + 8 * v2654);
      v2656 = *(_DWORD *)(result + 3320);
      if (v2656 && *v2655 == -1)
      {
        v2657 = 0;
        v2718 = 8 * (v2656 + v2654) - 8 * v2654 - 8;
        v2719 = v2653 + 8 * v2654;
        while (v2718)
        {
          v2655 = (uint64_t *)(v2719 + 8);
          ++v2657;
          v2720 = *(_QWORD *)(v2719 + 8);
          v2718 -= 8;
          v2719 += 8;
          if (v2720 != -1)
            goto LABEL_1388;
        }
      }
      else
      {
        v2657 = 0;
LABEL_1388:
        v2658 = (uint64_t *)(v2653 + 8 * (v2654 + v2656));
        if (v2655 != v2658)
        {
          v2659 = *v2655;
LABEL_1390:
          v2660 = *v2652;
          v2661 = *(_DWORD *)(a3[9] + 4 * v2657);
          v2662 = *(_QWORD *)(result + 3328) + 8 * v2659;
          v2663 = *((unsigned int *)a2 + 4);
          v2664 = *a2;
          if (v1958 && v2660 < v2661)
          {
            v2665 = *(int64x2_t *)v2662;
            v2666 = (int64x2_t *)(v2664 + 8 * (v2661 + (_DWORD)v2663 * v2660));
            v2667 = *(int64x2_t *)(v2662 + 32);
            v2668 = *(int64x2_t *)(v2662 + 48);
            v2669 = *(int64x2_t *)(v2662 + 64);
            v2670 = *(int64x2_t *)(v2662 + 80);
            v2672 = *(int8x16_t *)(v2662 + 96);
            v2671 = *(int8x16_t *)(v2662 + 112);
            v2673 = *(int8x16_t *)(v2662 + 128);
            v2674 = *(int8x16_t *)(v2662 + 144);
            v2675 = vextq_s8(v2673, v2673, 8uLL).u64[0];
            v2676 = vextq_s8(v2671, v2671, 8uLL).u64[0];
            v2677 = vextq_s8(v2672, v2672, 8uLL).u64[0];
            v2678 = *(int8x16_t *)(v2662 + 160);
            v2679 = *(int8x16_t *)(v2662 + 176);
            v2680 = vextq_s8(v2679, v2679, 8uLL).u64[0];
            v2681 = vextq_s8(v2678, v2678, 8uLL).u64[0];
            v2682 = vextq_s8(v2674, v2674, 8uLL).u64[0];
            v2684 = *(int8x16_t *)(v2662 + 192);
            v2683 = *(int8x16_t *)(v2662 + 208);
            v2686 = *(int8x16_t *)(v2662 + 224);
            v2685 = *(int8x16_t *)(v2662 + 240);
            v2687 = vextq_s8(v2686, v2686, 8uLL).u64[0];
            v2688 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            v2689 = vextq_s8(v2684, v2684, 8uLL).u64[0];
            v2690 = *(int8x16_t *)(v2662 + 256);
            v2691 = *(int8x16_t *)(v2662 + 272);
            v2692 = vextq_s8(v2691, v2691, 8uLL).u64[0];
            v2693 = vextq_s8(v2690, v2690, 8uLL).u64[0];
            v2694 = vextq_s8(v2685, v2685, 8uLL).u64[0];
            v2666[1] = *(int64x2_t *)(v2662 + 16);
            v2666[2] = v2667;
            *v2666 = v2665;
            v2695 = (int64x2_t *)((char *)v2666 + 8 * v2663);
            v2695[1] = v2669;
            v2695[2] = v2670;
          }
          else
          {
            v2666 = (int64x2_t *)(v2664 + 8 * (v2660 + (_DWORD)v2663 * v2661));
            v2696 = *(int64x2_t *)(v2662 + 16);
            v2697 = *(int64x2_t *)(v2662 + 64);
            v2698 = *(int64x2_t *)(v2662 + 80);
            v2700 = *(int64x2_t *)(v2662 + 32);
            v2699 = *(int64x2_t *)(v2662 + 48);
            v2701 = *(int64x2_t *)(v2662 + 96);
            v2702 = *(int64x2_t *)(v2662 + 112);
            v2703 = *(int64x2_t *)(v2662 + 128);
            v2704 = *(int64x2_t *)(v2662 + 192);
            v2705 = *(int64x2_t *)(v2662 + 208);
            v2706 = *(int64x2_t *)(v2662 + 224);
            v2707 = vzip1q_s64(*(int64x2_t *)v2662, v2699);
            v2708 = vzip1q_s64(v2701, *(int64x2_t *)(v2662 + 144));
            v2709 = vzip1q_s64(v2704, *(int64x2_t *)(v2662 + 240));
            v2710.i64[0] = vdupq_laneq_s64(v2701, 1).u64[0];
            v2710.i64[1] = *(_QWORD *)(v2662 + 152);
            v2668 = vzip2q_s64(*(int64x2_t *)v2662, v2699);
            v2711.i64[0] = vdupq_laneq_s64(v2704, 1).u64[0];
            v2711.i64[1] = *(_QWORD *)(v2662 + 248);
            v2672 = (int8x16_t)vzip1q_s64(v2696, v2697);
            v2671 = (int8x16_t)vzip1q_s64(v2702, *(int64x2_t *)(v2662 + 160));
            v2673 = (int8x16_t)vzip1q_s64(v2705, *(int64x2_t *)(v2662 + 256));
            v2675 = vextq_s8(v2673, v2673, 8uLL).u64[0];
            v2676 = vextq_s8(v2671, v2671, 8uLL).u64[0];
            v2677 = vextq_s8(v2672, v2672, 8uLL).u64[0];
            v2674 = (int8x16_t)vzip2q_s64(v2696, v2697);
            v2678.i64[0] = vdupq_laneq_s64(v2702, 1).u64[0];
            v2678.i64[1] = *(_QWORD *)(v2662 + 168);
            v2679.i64[0] = vdupq_laneq_s64(v2705, 1).u64[0];
            v2679.i64[1] = *(_QWORD *)(v2662 + 264);
            v2682 = vextq_s8(v2674, v2674, 8uLL).u64[0];
            v2680 = vextq_s8(v2679, v2679, 8uLL).u64[0];
            v2681 = vextq_s8(v2678, v2678, 8uLL).u64[0];
            v2684 = (int8x16_t)vzip1q_s64(v2700, v2698);
            v2683 = (int8x16_t)vzip1q_s64(v2703, *(int64x2_t *)(v2662 + 176));
            v2686 = (int8x16_t)vzip1q_s64(v2706, *(int64x2_t *)(v2662 + 272));
            v2687 = vextq_s8(v2686, v2686, 8uLL).u64[0];
            v2688 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            v2689 = vextq_s8(v2684, v2684, 8uLL).u64[0];
            v2685 = (int8x16_t)vzip2q_s64(v2700, v2698);
            v2690.i64[0] = vdupq_laneq_s64(v2703, 1).u64[0];
            v2690.i64[1] = *(_QWORD *)(v2662 + 184);
            v2691.i64[0] = vdupq_laneq_s64(v2706, 1).u64[0];
            v2691.i64[1] = *(_QWORD *)(v2662 + 280);
            v2694 = vextq_s8(v2685, v2685, 8uLL).u64[0];
            v2692 = vextq_s8(v2691, v2691, 8uLL).u64[0];
            v2693 = vextq_s8(v2690, v2690, 8uLL).u64[0];
            v2666[1] = v2708;
            v2666[2] = v2709;
            *v2666 = v2707;
            v2695 = (int64x2_t *)((char *)v2666 + 8 * v2663);
            v2695[1] = v2710;
            v2695[2] = v2711;
          }
          *v2695 = v2668;
          v2672.i64[1] = v2677;
          v2671.i64[1] = v2676;
          v2712 = (int8x16_t *)&v2666[v2663];
          *v2712 = v2672;
          v2712[1] = v2671;
          v2673.i64[1] = v2675;
          v2712[2] = v2673;
          v2713 = (int8x16_t *)((char *)v2666 + 24 * v2663);
          v2679.i64[1] = v2680;
          v2678.i64[1] = v2681;
          v2674.i64[1] = v2682;
          v2713[1] = v2678;
          v2713[2] = v2679;
          *v2713 = v2674;
          v2714 = (int8x16_t *)&v2666[2 * v2663];
          v2686.i64[1] = v2687;
          v2683.i64[1] = v2688;
          v2684.i64[1] = v2689;
          v2714[1] = v2683;
          v2714[2] = v2686;
          *v2714 = v2684;
          v2715 = (int8x16_t *)((char *)v2666 + 40 * v2663);
          v2691.i64[1] = v2692;
          v2690.i64[1] = v2693;
          v2715[1] = v2690;
          v2715[2] = v2691;
          v2685.i64[1] = v2694;
          v2716 = v2655 + 1;
          *v2715 = v2685;
          while (v2716 != v2658)
          {
            ++v2657;
            v2717 = *v2716++;
            v2659 = v2717;
            if (v2717 != -1)
            {
              v2655 = v2716 - 1;
              goto LABEL_1390;
            }
          }
          v2650 = *(_DWORD *)(result + 3324);
        }
      }
      ++v2651;
      ++v2652;
    }
    while (v2651 < v2650);
    v1958 = *a5;
  }
  v2721 = *(_DWORD *)(result + 4764);
  if (v2721)
  {
    v2722 = 0;
    v2723 = a4[9];
    do
    {
      v2724 = *(_QWORD *)(result + 4840);
      v2725 = *(_DWORD *)(result + 4864) * v2722;
      v2726 = (uint64_t *)(v2724 + 8 * v2725);
      v2727 = *(_DWORD *)(result + 4760);
      if (v2727 && *v2726 == -1)
      {
        v2728 = 0;
        v2789 = 8 * (v2727 + v2725) - 8 * v2725 - 8;
        v2790 = v2724 + 8 * v2725;
        while (v2789)
        {
          v2726 = (uint64_t *)(v2790 + 8);
          ++v2728;
          v2791 = *(_QWORD *)(v2790 + 8);
          v2789 -= 8;
          v2790 += 8;
          if (v2791 != -1)
            goto LABEL_1410;
        }
      }
      else
      {
        v2728 = 0;
LABEL_1410:
        v2729 = (uint64_t *)(v2724 + 8 * (v2725 + v2727));
        if (v2726 != v2729)
        {
          v2730 = *v2726;
LABEL_1412:
          v2731 = *v2723;
          v2732 = *(_DWORD *)(a3[9] + 4 * v2728);
          v2733 = *(_QWORD *)(result + 4768) + 8 * v2730;
          v2734 = *((unsigned int *)a2 + 4);
          v2735 = *a2;
          if (v1958 && v2731 < v2732)
          {
            v2736 = *(int64x2_t *)v2733;
            v2737 = (int64x2_t *)(v2735 + 8 * (v2732 + (_DWORD)v2734 * v2731));
            v2738 = *(int64x2_t *)(v2733 + 32);
            v2739 = *(int64x2_t *)(v2733 + 48);
            v2740 = *(int64x2_t *)(v2733 + 64);
            v2741 = *(int64x2_t *)(v2733 + 80);
            v2743 = *(int8x16_t *)(v2733 + 96);
            v2742 = *(int8x16_t *)(v2733 + 112);
            v2744 = *(int8x16_t *)(v2733 + 128);
            v2745 = *(int8x16_t *)(v2733 + 144);
            v2746 = vextq_s8(v2744, v2744, 8uLL).u64[0];
            v2747 = vextq_s8(v2742, v2742, 8uLL).u64[0];
            v2748 = vextq_s8(v2743, v2743, 8uLL).u64[0];
            v2749 = *(int8x16_t *)(v2733 + 160);
            v2750 = *(int8x16_t *)(v2733 + 176);
            v2751 = vextq_s8(v2750, v2750, 8uLL).u64[0];
            v2752 = vextq_s8(v2749, v2749, 8uLL).u64[0];
            v2753 = vextq_s8(v2745, v2745, 8uLL).u64[0];
            v2755 = *(int8x16_t *)(v2733 + 192);
            v2754 = *(int8x16_t *)(v2733 + 208);
            v2757 = *(int8x16_t *)(v2733 + 224);
            v2756 = *(int8x16_t *)(v2733 + 240);
            v2758 = vextq_s8(v2757, v2757, 8uLL).u64[0];
            v2759 = vextq_s8(v2754, v2754, 8uLL).u64[0];
            v2760 = vextq_s8(v2755, v2755, 8uLL).u64[0];
            v2761 = *(int8x16_t *)(v2733 + 256);
            v2762 = *(int8x16_t *)(v2733 + 272);
            v2763 = vextq_s8(v2762, v2762, 8uLL).u64[0];
            v2764 = vextq_s8(v2761, v2761, 8uLL).u64[0];
            v2765 = vextq_s8(v2756, v2756, 8uLL).u64[0];
            v2737[1] = *(int64x2_t *)(v2733 + 16);
            v2737[2] = v2738;
            *v2737 = v2736;
            v2766 = (int64x2_t *)((char *)v2737 + 8 * v2734);
            v2766[1] = v2740;
            v2766[2] = v2741;
          }
          else
          {
            v2737 = (int64x2_t *)(v2735 + 8 * (v2731 + (_DWORD)v2734 * v2732));
            v2767 = *(int64x2_t *)(v2733 + 16);
            v2768 = *(int64x2_t *)(v2733 + 64);
            v2769 = *(int64x2_t *)(v2733 + 80);
            v2771 = *(int64x2_t *)(v2733 + 32);
            v2770 = *(int64x2_t *)(v2733 + 48);
            v2772 = *(int64x2_t *)(v2733 + 96);
            v2773 = *(int64x2_t *)(v2733 + 112);
            v2774 = *(int64x2_t *)(v2733 + 128);
            v2775 = *(int64x2_t *)(v2733 + 192);
            v2776 = *(int64x2_t *)(v2733 + 208);
            v2777 = *(int64x2_t *)(v2733 + 224);
            v2778 = vzip1q_s64(*(int64x2_t *)v2733, v2770);
            v2779 = vzip1q_s64(v2772, *(int64x2_t *)(v2733 + 144));
            v2780 = vzip1q_s64(v2775, *(int64x2_t *)(v2733 + 240));
            v2781.i64[0] = vdupq_laneq_s64(v2772, 1).u64[0];
            v2781.i64[1] = *(_QWORD *)(v2733 + 152);
            v2739 = vzip2q_s64(*(int64x2_t *)v2733, v2770);
            v2782.i64[0] = vdupq_laneq_s64(v2775, 1).u64[0];
            v2782.i64[1] = *(_QWORD *)(v2733 + 248);
            v2743 = (int8x16_t)vzip1q_s64(v2767, v2768);
            v2742 = (int8x16_t)vzip1q_s64(v2773, *(int64x2_t *)(v2733 + 160));
            v2744 = (int8x16_t)vzip1q_s64(v2776, *(int64x2_t *)(v2733 + 256));
            v2746 = vextq_s8(v2744, v2744, 8uLL).u64[0];
            v2747 = vextq_s8(v2742, v2742, 8uLL).u64[0];
            v2748 = vextq_s8(v2743, v2743, 8uLL).u64[0];
            v2745 = (int8x16_t)vzip2q_s64(v2767, v2768);
            v2749.i64[0] = vdupq_laneq_s64(v2773, 1).u64[0];
            v2749.i64[1] = *(_QWORD *)(v2733 + 168);
            v2750.i64[0] = vdupq_laneq_s64(v2776, 1).u64[0];
            v2750.i64[1] = *(_QWORD *)(v2733 + 264);
            v2753 = vextq_s8(v2745, v2745, 8uLL).u64[0];
            v2751 = vextq_s8(v2750, v2750, 8uLL).u64[0];
            v2752 = vextq_s8(v2749, v2749, 8uLL).u64[0];
            v2755 = (int8x16_t)vzip1q_s64(v2771, v2769);
            v2754 = (int8x16_t)vzip1q_s64(v2774, *(int64x2_t *)(v2733 + 176));
            v2757 = (int8x16_t)vzip1q_s64(v2777, *(int64x2_t *)(v2733 + 272));
            v2758 = vextq_s8(v2757, v2757, 8uLL).u64[0];
            v2759 = vextq_s8(v2754, v2754, 8uLL).u64[0];
            v2760 = vextq_s8(v2755, v2755, 8uLL).u64[0];
            v2756 = (int8x16_t)vzip2q_s64(v2771, v2769);
            v2761.i64[0] = vdupq_laneq_s64(v2774, 1).u64[0];
            v2761.i64[1] = *(_QWORD *)(v2733 + 184);
            v2762.i64[0] = vdupq_laneq_s64(v2777, 1).u64[0];
            v2762.i64[1] = *(_QWORD *)(v2733 + 280);
            v2765 = vextq_s8(v2756, v2756, 8uLL).u64[0];
            v2763 = vextq_s8(v2762, v2762, 8uLL).u64[0];
            v2764 = vextq_s8(v2761, v2761, 8uLL).u64[0];
            v2737[1] = v2779;
            v2737[2] = v2780;
            *v2737 = v2778;
            v2766 = (int64x2_t *)((char *)v2737 + 8 * v2734);
            v2766[1] = v2781;
            v2766[2] = v2782;
          }
          *v2766 = v2739;
          v2743.i64[1] = v2748;
          v2742.i64[1] = v2747;
          v2783 = (int8x16_t *)&v2737[v2734];
          *v2783 = v2743;
          v2783[1] = v2742;
          v2744.i64[1] = v2746;
          v2783[2] = v2744;
          v2784 = (int8x16_t *)((char *)v2737 + 24 * v2734);
          v2750.i64[1] = v2751;
          v2749.i64[1] = v2752;
          v2745.i64[1] = v2753;
          v2784[1] = v2749;
          v2784[2] = v2750;
          *v2784 = v2745;
          v2785 = (int8x16_t *)&v2737[2 * v2734];
          v2757.i64[1] = v2758;
          v2754.i64[1] = v2759;
          v2755.i64[1] = v2760;
          v2785[1] = v2754;
          v2785[2] = v2757;
          *v2785 = v2755;
          v2786 = (int8x16_t *)((char *)v2737 + 40 * v2734);
          v2762.i64[1] = v2763;
          v2761.i64[1] = v2764;
          v2786[1] = v2761;
          v2786[2] = v2762;
          v2756.i64[1] = v2765;
          v2787 = v2726 + 1;
          *v2786 = v2756;
          while (v2787 != v2729)
          {
            ++v2728;
            v2788 = *v2787++;
            v2730 = v2788;
            if (v2788 != -1)
            {
              v2726 = v2787 - 1;
              goto LABEL_1412;
            }
          }
          v2721 = *(_DWORD *)(result + 4764);
        }
      }
      ++v2722;
      ++v2723;
    }
    while (v2722 < v2721);
    v1958 = *a5;
  }
  v2792 = *(_DWORD *)(result + 6204);
  if (v2792)
  {
    v2793 = 0;
    v2794 = a4[12];
    do
    {
      v2795 = *(_QWORD *)(result + 6280);
      v2796 = *(_DWORD *)(result + 6304) * v2793;
      v2797 = (uint64_t *)(v2795 + 8 * v2796);
      v2798 = *(_DWORD *)(result + 6200);
      if (v2798 && *v2797 == -1)
      {
        v2799 = 0;
        v2836 = 8 * (v2798 + v2796) - 8 * v2796 - 8;
        v2837 = v2795 + 8 * v2796;
        while (v2836)
        {
          v2797 = (uint64_t *)(v2837 + 8);
          ++v2799;
          v2838 = *(_QWORD *)(v2837 + 8);
          v2836 -= 8;
          v2837 += 8;
          if (v2838 != -1)
            goto LABEL_1432;
        }
      }
      else
      {
        v2799 = 0;
LABEL_1432:
        v2800 = (uint64_t *)(v2795 + 8 * (v2796 + v2798));
        if (v2797 != v2800)
        {
          v2801 = *v2797;
LABEL_1434:
          v2802 = *v2794;
          v2803 = *(_DWORD *)(a3[9] + 4 * v2799);
          v2804 = *(_QWORD *)(result + 6208) + 8 * v2801;
          v2805 = *((unsigned int *)a2 + 4);
          v2806 = *a2;
          if (v1958 && v2802 < v2803)
          {
            v2807 = *(int64x2_t *)v2804;
            v2808 = (int64x2_t *)(v2806 + 8 * (v2803 + (_DWORD)v2805 * v2802));
            v2809 = *(int64x2_t *)(v2804 + 32);
            v2810 = *(_OWORD *)(v2804 + 48);
            v2811 = *(_OWORD *)(v2804 + 64);
            v2812 = *(_OWORD *)(v2804 + 80);
            v2813 = *(int64x2_t *)(v2804 + 96);
            v2814 = *(int64x2_t *)(v2804 + 112);
            v2815 = *(int64x2_t *)(v2804 + 128);
            v2808[1] = *(int64x2_t *)(v2804 + 16);
            v2808[2] = v2809;
            *v2808 = v2807;
            v2816 = &v2808->i8[8 * v2805];
            *((_OWORD *)v2816 + 1) = v2811;
            *((_OWORD *)v2816 + 2) = v2812;
            *(_OWORD *)v2816 = v2810;
            v2817 = &v2808[v2805];
            v2817[1] = v2814;
            v2817[2] = v2815;
            *v2817 = v2813;
          }
          else
          {
            v2818 = *(int64x2_t *)(v2804 + 16);
            v2819 = (int64x2_t *)(v2806 + 8 * (v2802 + (_DWORD)v2805 * v2803));
            v2821 = *(int64x2_t *)(v2804 + 64);
            v2820 = *(int64x2_t *)(v2804 + 80);
            v2822 = *(int64x2_t *)(v2804 + 32);
            v2823 = *(int64x2_t *)(v2804 + 48);
            v2825 = *(_OWORD *)(v2804 + 112);
            v2824 = *(_OWORD *)(v2804 + 128);
            v2826 = *(_OWORD *)(v2804 + 96);
            v2827 = vzip1q_s64(*(int64x2_t *)v2804, v2823);
            v2828 = vzip2q_s64(*(int64x2_t *)v2804, v2823);
            v2819[1].i64[0] = v2826;
            *v2819 = v2827;
            v2829 = (int64x2_t *)((char *)v2819 + 8 * v2805);
            *v2829 = v2828;
            v2829[1].i64[0] = *((_QWORD *)&v2826 + 1);
            v2830 = &v2819[v2805];
            v2830[1].i64[0] = v2825;
            *v2830 = vzip1q_s64(v2818, v2821);
            v2831 = (int64x2_t *)((char *)v2819 + 24 * v2805);
            v2831[1].i64[0] = *((_QWORD *)&v2825 + 1);
            *v2831 = vzip2q_s64(v2818, v2821);
            v2832 = &v2819[2 * v2805];
            v2832[1].i64[0] = v2824;
            *v2832 = vzip1q_s64(v2822, v2820);
            v2833 = (int64x2_t *)((char *)v2819 + 40 * v2805);
            v2833[1].i64[0] = *((_QWORD *)&v2824 + 1);
            *v2833 = vzip2q_s64(v2822, v2820);
          }
          v2834 = v2797 + 1;
          while (v2834 != v2800)
          {
            ++v2799;
            v2835 = *v2834++;
            v2801 = v2835;
            if (v2835 != -1)
            {
              v2797 = v2834 - 1;
              goto LABEL_1434;
            }
          }
          v2792 = *(_DWORD *)(result + 6204);
        }
      }
      ++v2793;
      ++v2794;
    }
    while (v2793 < v2792);
    v1958 = *a5;
  }
  v2839 = *(_DWORD *)(result + 7644);
  if (v2839)
  {
    v2840 = 0;
    v2841 = a4[15];
    do
    {
      v2842 = *(_QWORD *)(result + 7720);
      v2843 = *(_DWORD *)(result + 7744) * v2840;
      v2844 = (uint64_t *)(v2842 + 8 * v2843);
      v2845 = *(_DWORD *)(result + 7640);
      if (v2845 && *v2844 == -1)
      {
        v2846 = 0;
        v2864 = 8 * (v2845 + v2843) - 8 * v2843 - 8;
        v2865 = v2842 + 8 * v2843;
        while (v2864)
        {
          v2844 = (uint64_t *)(v2865 + 8);
          ++v2846;
          v2866 = *(_QWORD *)(v2865 + 8);
          v2864 -= 8;
          v2865 += 8;
          if (v2866 != -1)
            goto LABEL_1454;
        }
      }
      else
      {
        v2846 = 0;
LABEL_1454:
        v2847 = (uint64_t *)(v2842 + 8 * (v2843 + v2845));
        if (v2844 != v2847)
        {
          v2848 = *v2844;
LABEL_1456:
          v2849 = *v2841;
          v2850 = *(_DWORD *)(a3[9] + 4 * v2846);
          v2851 = (int8x16_t *)(*(_QWORD *)(result + 7648) + 8 * v2848);
          v2852 = *((unsigned int *)a2 + 4);
          v2853 = *a2;
          v2855 = v2851[1];
          v2854 = v2851[2];
          v2856 = *v2851;
          v2857 = vextq_s8(v2854, v2854, 8uLL).u64[0];
          v2858 = vextq_s8(v2855, v2855, 8uLL).u64[0];
          v2859 = vextq_s8(v2856, v2856, 8uLL).u64[0];
          if (v1958 && v2849 < v2850)
          {
            v2856.i64[1] = v2859;
            v2855.i64[1] = v2858;
            v2860 = (int8x16_t *)(v2853 + 8 * (v2850 + (_DWORD)v2852 * v2849));
            *v2860 = v2856;
            v2860[1] = v2855;
            v2854.i64[1] = v2857;
            v2860[2] = v2854;
          }
          else
          {
            v2861 = (_QWORD *)(v2853 + 8 * (v2849 + (_DWORD)v2852 * v2850));
            *v2861 = v2856.i64[0];
            v2861[v2852] = v2859;
            v2861[2 * v2852] = v2855.i64[0];
            v2861[3 * v2852] = v2858;
            v2861[4 * v2852] = v2854.i64[0];
            v2861[5 * v2852] = v2857;
          }
          v2862 = v2844 + 1;
          while (v2862 != v2847)
          {
            ++v2846;
            v2863 = *v2862++;
            v2848 = v2863;
            if (v2863 != -1)
            {
              v2844 = v2862 - 1;
              goto LABEL_1456;
            }
          }
          v2839 = *(_DWORD *)(result + 7644);
        }
      }
      ++v2840;
      ++v2841;
    }
    while (v2840 < v2839);
    v1958 = *a5;
  }
  v2867 = *(_DWORD *)(result + 9084);
  if (v2867)
  {
    v2868 = 0;
    v2869 = a4[18];
    do
    {
      v2870 = *(_QWORD *)(result + 9160);
      v2871 = *(_DWORD *)(result + 9184) * v2868;
      v2872 = (uint64_t *)(v2870 + 8 * v2871);
      v2873 = *(_DWORD *)(result + 9080);
      if (v2873 && *v2872 == -1)
      {
        v2874 = 0;
        v2917 = 8 * (v2873 + v2871) - 8 * v2871 - 8;
        v2918 = v2870 + 8 * v2871;
        while (v2917)
        {
          v2872 = (uint64_t *)(v2918 + 8);
          ++v2874;
          v2919 = *(_QWORD *)(v2918 + 8);
          v2917 -= 8;
          v2918 += 8;
          if (v2919 != -1)
            goto LABEL_1476;
        }
      }
      else
      {
        v2874 = 0;
LABEL_1476:
        v2875 = (uint64_t *)(v2870 + 8 * (v2871 + v2873));
        if (v2872 != v2875)
        {
          v2876 = *v2872;
LABEL_1478:
          v2877 = *v2869;
          v2878 = *(_DWORD *)(a3[9] + 4 * v2874);
          v2879 = *(_QWORD *)(result + 9088) + 8 * v2876;
          v2880 = *((unsigned int *)a2 + 4);
          v2881 = *a2;
          if (v1958 && v2877 < v2878)
          {
            v2882 = *(int64x2_t *)v2879;
            v2883 = (int64x2_t *)(v2881 + 8 * (v2878 + (_DWORD)v2880 * v2877));
            v2884 = *(int64x2_t *)(v2879 + 32);
            v2885 = *(_OWORD *)(v2879 + 48);
            v2886 = *(_OWORD *)(v2879 + 64);
            v2887 = *(_OWORD *)(v2879 + 80);
            v2888 = *(int64x2_t *)(v2879 + 96);
            v2889 = *(int64x2_t *)(v2879 + 112);
            v2890 = *(int64x2_t *)(v2879 + 128);
            v2891 = *(_OWORD *)(v2879 + 144);
            v2892 = *(_OWORD *)(v2879 + 160);
            v2893 = *(_OWORD *)(v2879 + 176);
            v2883[1] = *(int64x2_t *)(v2879 + 16);
            v2883[2] = v2884;
            *v2883 = v2882;
            v2894 = &v2883->i8[8 * v2880];
            *((_OWORD *)v2894 + 1) = v2886;
            *((_OWORD *)v2894 + 2) = v2887;
            *(_OWORD *)v2894 = v2885;
            v2895 = &v2883[v2880];
            v2895[1] = v2889;
            v2895[2] = v2890;
            *v2895 = v2888;
            v2896 = &v2883->i8[24 * v2880];
            *((_OWORD *)v2896 + 1) = v2892;
            *((_OWORD *)v2896 + 2) = v2893;
            *(_OWORD *)v2896 = v2891;
          }
          else
          {
            v2897 = *(int64x2_t *)(v2879 + 16);
            v2898 = (int64x2_t *)(v2881 + 8 * (v2877 + (_DWORD)v2880 * v2878));
            v2900 = *(int64x2_t *)(v2879 + 64);
            v2899 = *(int64x2_t *)(v2879 + 80);
            v2901 = *(int64x2_t *)(v2879 + 32);
            v2902 = *(int64x2_t *)(v2879 + 48);
            v2904 = *(int64x2_t *)(v2879 + 96);
            v2903 = *(int64x2_t *)(v2879 + 112);
            v2906 = *(int64x2_t *)(v2879 + 160);
            v2905 = *(int64x2_t *)(v2879 + 176);
            v2907 = *(int64x2_t *)(v2879 + 128);
            v2908 = *(int64x2_t *)(v2879 + 144);
            v2909 = vzip2q_s64(*(int64x2_t *)v2879, v2902);
            *v2898 = vzip1q_s64(*(int64x2_t *)v2879, v2902);
            v2898[1] = vzip1q_s64(v2904, v2908);
            v2910 = (int64x2_t *)((char *)v2898 + 8 * v2880);
            *v2910 = v2909;
            v2910[1] = vzip2q_s64(v2904, v2908);
            v2911 = &v2898[v2880];
            *v2911 = vzip1q_s64(v2897, v2900);
            v2911[1] = vzip1q_s64(v2903, v2906);
            v2912 = (int64x2_t *)((char *)v2898 + 24 * v2880);
            *v2912 = vzip2q_s64(v2897, v2900);
            v2912[1] = vzip2q_s64(v2903, v2906);
            v2913 = &v2898[2 * v2880];
            *v2913 = vzip1q_s64(v2901, v2899);
            v2913[1] = vzip1q_s64(v2907, v2905);
            v2914 = (int64x2_t *)((char *)v2898 + 40 * v2880);
            *v2914 = vzip2q_s64(v2901, v2899);
            v2914[1] = vzip2q_s64(v2907, v2905);
          }
          v2915 = v2872 + 1;
          while (v2915 != v2875)
          {
            ++v2874;
            v2916 = *v2915++;
            v2876 = v2916;
            if (v2916 != -1)
            {
              v2872 = v2915 - 1;
              goto LABEL_1478;
            }
          }
          v2867 = *(_DWORD *)(result + 9084);
        }
      }
      ++v2868;
      ++v2869;
    }
    while (v2868 < v2867);
    v1958 = *a5;
  }
  v2920 = *(_DWORD *)(result + 10524);
  if (v2920)
  {
    v2921 = 0;
    v2922 = a4[21];
    do
    {
      v2923 = *(_QWORD *)(result + 10600);
      v2924 = *(_DWORD *)(result + 10624) * v2921;
      v2925 = (uint64_t *)(v2923 + 8 * v2924);
      v2926 = *(_DWORD *)(result + 10520);
      if (v2926 && *v2925 == -1)
      {
        v2927 = 0;
        v2970 = 8 * (v2926 + v2924) - 8 * v2924 - 8;
        v2971 = v2923 + 8 * v2924;
        while (v2970)
        {
          v2925 = (uint64_t *)(v2971 + 8);
          ++v2927;
          v2972 = *(_QWORD *)(v2971 + 8);
          v2970 -= 8;
          v2971 += 8;
          if (v2972 != -1)
            goto LABEL_1498;
        }
      }
      else
      {
        v2927 = 0;
LABEL_1498:
        v2928 = (uint64_t *)(v2923 + 8 * (v2924 + v2926));
        if (v2925 != v2928)
        {
          v2929 = *v2925;
LABEL_1500:
          v2930 = *v2922;
          v2931 = *(_DWORD *)(a3[9] + 4 * v2927);
          v2932 = *(_QWORD *)(result + 10528) + 8 * v2929;
          v2933 = *((unsigned int *)a2 + 4);
          v2934 = *a2;
          if (v1958 && v2930 < v2931)
          {
            v2935 = *(int64x2_t *)v2932;
            v2936 = (int64x2_t *)(v2934 + 8 * (v2931 + (_DWORD)v2933 * v2930));
            v2937 = *(int64x2_t *)(v2932 + 32);
            v2938 = *(_OWORD *)(v2932 + 48);
            v2939 = *(_OWORD *)(v2932 + 64);
            v2940 = *(_OWORD *)(v2932 + 80);
            v2941 = *(int64x2_t *)(v2932 + 96);
            v2942 = *(int64x2_t *)(v2932 + 112);
            v2943 = *(int64x2_t *)(v2932 + 128);
            v2944 = *(_OWORD *)(v2932 + 144);
            v2945 = *(_OWORD *)(v2932 + 160);
            v2946 = *(_OWORD *)(v2932 + 176);
            v2936[1] = *(int64x2_t *)(v2932 + 16);
            v2936[2] = v2937;
            *v2936 = v2935;
            v2947 = &v2936->i8[8 * v2933];
            *((_OWORD *)v2947 + 1) = v2939;
            *((_OWORD *)v2947 + 2) = v2940;
            *(_OWORD *)v2947 = v2938;
            v2948 = &v2936[v2933];
            v2948[1] = v2942;
            v2948[2] = v2943;
            *v2948 = v2941;
            v2949 = &v2936->i8[24 * v2933];
            *((_OWORD *)v2949 + 1) = v2945;
            *((_OWORD *)v2949 + 2) = v2946;
            *(_OWORD *)v2949 = v2944;
          }
          else
          {
            v2950 = *(int64x2_t *)(v2932 + 16);
            v2951 = (int64x2_t *)(v2934 + 8 * (v2930 + (_DWORD)v2933 * v2931));
            v2953 = *(int64x2_t *)(v2932 + 64);
            v2952 = *(int64x2_t *)(v2932 + 80);
            v2954 = *(int64x2_t *)(v2932 + 32);
            v2955 = *(int64x2_t *)(v2932 + 48);
            v2957 = *(int64x2_t *)(v2932 + 96);
            v2956 = *(int64x2_t *)(v2932 + 112);
            v2959 = *(int64x2_t *)(v2932 + 160);
            v2958 = *(int64x2_t *)(v2932 + 176);
            v2960 = *(int64x2_t *)(v2932 + 128);
            v2961 = *(int64x2_t *)(v2932 + 144);
            v2962 = vzip2q_s64(*(int64x2_t *)v2932, v2955);
            *v2951 = vzip1q_s64(*(int64x2_t *)v2932, v2955);
            v2951[1] = vzip1q_s64(v2957, v2961);
            v2963 = (int64x2_t *)((char *)v2951 + 8 * v2933);
            *v2963 = v2962;
            v2963[1] = vzip2q_s64(v2957, v2961);
            v2964 = &v2951[v2933];
            *v2964 = vzip1q_s64(v2950, v2953);
            v2964[1] = vzip1q_s64(v2956, v2959);
            v2965 = (int64x2_t *)((char *)v2951 + 24 * v2933);
            *v2965 = vzip2q_s64(v2950, v2953);
            v2965[1] = vzip2q_s64(v2956, v2959);
            v2966 = &v2951[2 * v2933];
            *v2966 = vzip1q_s64(v2954, v2952);
            v2966[1] = vzip1q_s64(v2960, v2958);
            v2967 = (int64x2_t *)((char *)v2951 + 40 * v2933);
            *v2967 = vzip2q_s64(v2954, v2952);
            v2967[1] = vzip2q_s64(v2960, v2958);
          }
          v2968 = v2925 + 1;
          while (v2968 != v2928)
          {
            ++v2927;
            v2969 = *v2968++;
            v2929 = v2969;
            if (v2969 != -1)
            {
              v2925 = v2968 - 1;
              goto LABEL_1500;
            }
          }
          v2920 = *(_DWORD *)(result + 10524);
        }
      }
      ++v2921;
      ++v2922;
    }
    while (v2921 < v2920);
    v1958 = *a5;
  }
  v2973 = *(_DWORD *)(result + 11964);
  if (v2973)
  {
    v2974 = 0;
    v2975 = a4[24];
    do
    {
      v2976 = *(_QWORD *)(result + 12040);
      v2977 = *(_DWORD *)(result + 12064) * v2974;
      v2978 = (uint64_t *)(v2976 + 8 * v2977);
      v2979 = *(_DWORD *)(result + 11960);
      if (v2979 && *v2978 == -1)
      {
        v2980 = 0;
        v3017 = 8 * (v2979 + v2977) - 8 * v2977 - 8;
        v3018 = v2976 + 8 * v2977;
        while (v3017)
        {
          v2978 = (uint64_t *)(v3018 + 8);
          ++v2980;
          v3019 = *(_QWORD *)(v3018 + 8);
          v3017 -= 8;
          v3018 += 8;
          if (v3019 != -1)
            goto LABEL_1520;
        }
      }
      else
      {
        v2980 = 0;
LABEL_1520:
        v2981 = (uint64_t *)(v2976 + 8 * (v2977 + v2979));
        if (v2978 != v2981)
        {
          v2982 = *v2978;
LABEL_1522:
          v2983 = *v2975;
          v2984 = *(_DWORD *)(a3[9] + 4 * v2980);
          v2985 = *(_QWORD *)(result + 11968) + 8 * v2982;
          v2986 = *((unsigned int *)a2 + 4);
          v2987 = *a2;
          if (v1958 && v2983 < v2984)
          {
            v2988 = *(int64x2_t *)v2985;
            v2989 = (int64x2_t *)(v2987 + 8 * (v2984 + (_DWORD)v2986 * v2983));
            v2990 = *(int64x2_t *)(v2985 + 32);
            v2991 = *(_OWORD *)(v2985 + 48);
            v2992 = *(_OWORD *)(v2985 + 64);
            v2993 = *(_OWORD *)(v2985 + 80);
            v2994 = *(int64x2_t *)(v2985 + 96);
            v2995 = *(int64x2_t *)(v2985 + 112);
            v2996 = *(int64x2_t *)(v2985 + 128);
            v2989[1] = *(int64x2_t *)(v2985 + 16);
            v2989[2] = v2990;
            *v2989 = v2988;
            v2997 = &v2989->i8[8 * v2986];
            *((_OWORD *)v2997 + 1) = v2992;
            *((_OWORD *)v2997 + 2) = v2993;
            *(_OWORD *)v2997 = v2991;
            v2998 = &v2989[v2986];
            v2998[1] = v2995;
            v2998[2] = v2996;
            *v2998 = v2994;
          }
          else
          {
            v2999 = *(int64x2_t *)(v2985 + 16);
            v3000 = (int64x2_t *)(v2987 + 8 * (v2983 + (_DWORD)v2986 * v2984));
            v3002 = *(int64x2_t *)(v2985 + 64);
            v3001 = *(int64x2_t *)(v2985 + 80);
            v3003 = *(int64x2_t *)(v2985 + 32);
            v3004 = *(int64x2_t *)(v2985 + 48);
            v3006 = *(_OWORD *)(v2985 + 112);
            v3005 = *(_OWORD *)(v2985 + 128);
            v3007 = *(_OWORD *)(v2985 + 96);
            v3008 = vzip1q_s64(*(int64x2_t *)v2985, v3004);
            v3009 = vzip2q_s64(*(int64x2_t *)v2985, v3004);
            v3000[1].i64[0] = v3007;
            *v3000 = v3008;
            v3010 = (int64x2_t *)((char *)v3000 + 8 * v2986);
            *v3010 = v3009;
            v3010[1].i64[0] = *((_QWORD *)&v3007 + 1);
            v3011 = &v3000[v2986];
            v3011[1].i64[0] = v3006;
            *v3011 = vzip1q_s64(v2999, v3002);
            v3012 = (int64x2_t *)((char *)v3000 + 24 * v2986);
            v3012[1].i64[0] = *((_QWORD *)&v3006 + 1);
            *v3012 = vzip2q_s64(v2999, v3002);
            v3013 = &v3000[2 * v2986];
            v3013[1].i64[0] = v3005;
            *v3013 = vzip1q_s64(v3003, v3001);
            v3014 = (int64x2_t *)((char *)v3000 + 40 * v2986);
            v3014[1].i64[0] = *((_QWORD *)&v3005 + 1);
            *v3014 = vzip2q_s64(v3003, v3001);
          }
          v3015 = v2978 + 1;
          while (v3015 != v2981)
          {
            ++v2980;
            v3016 = *v3015++;
            v2982 = v3016;
            if (v3016 != -1)
            {
              v2978 = v3015 - 1;
              goto LABEL_1522;
            }
          }
          v2973 = *(_DWORD *)(result + 11964);
        }
      }
      ++v2974;
      ++v2975;
    }
    while (v2974 < v2973);
    v1958 = *a5;
  }
  v3020 = *(_DWORD *)(result + 13404);
  if (v3020)
  {
    v3021 = 0;
    v3022 = a4[27];
    do
    {
      v3023 = *(_QWORD *)(result + 13480);
      v3024 = *(_DWORD *)(result + 13504) * v3021;
      v3025 = (uint64_t *)(v3023 + 8 * v3024);
      v3026 = *(_DWORD *)(result + 13400);
      if (v3026 && *v3025 == -1)
      {
        v3027 = 0;
        v3064 = 8 * (v3026 + v3024) - 8 * v3024 - 8;
        v3065 = v3023 + 8 * v3024;
        while (v3064)
        {
          v3025 = (uint64_t *)(v3065 + 8);
          ++v3027;
          v3066 = *(_QWORD *)(v3065 + 8);
          v3064 -= 8;
          v3065 += 8;
          if (v3066 != -1)
            goto LABEL_1542;
        }
      }
      else
      {
        v3027 = 0;
LABEL_1542:
        v3028 = (uint64_t *)(v3023 + 8 * (v3024 + v3026));
        if (v3025 != v3028)
        {
          v3029 = *v3025;
LABEL_1544:
          v3030 = *v3022;
          v3031 = *(_DWORD *)(a3[9] + 4 * v3027);
          v3032 = *(_QWORD *)(result + 13408) + 8 * v3029;
          v3033 = *((unsigned int *)a2 + 4);
          v3034 = *a2;
          if (v1958 && v3030 < v3031)
          {
            v3035 = *(int64x2_t *)v3032;
            v3036 = (int64x2_t *)(v3034 + 8 * (v3031 + (_DWORD)v3033 * v3030));
            v3037 = *(int64x2_t *)(v3032 + 32);
            v3038 = *(_OWORD *)(v3032 + 48);
            v3039 = *(_OWORD *)(v3032 + 64);
            v3040 = *(_OWORD *)(v3032 + 80);
            v3041 = *(int64x2_t *)(v3032 + 96);
            v3042 = *(int64x2_t *)(v3032 + 112);
            v3043 = *(int64x2_t *)(v3032 + 128);
            v3036[1] = *(int64x2_t *)(v3032 + 16);
            v3036[2] = v3037;
            *v3036 = v3035;
            v3044 = &v3036->i8[8 * v3033];
            *((_OWORD *)v3044 + 1) = v3039;
            *((_OWORD *)v3044 + 2) = v3040;
            *(_OWORD *)v3044 = v3038;
            v3045 = &v3036[v3033];
            v3045[1] = v3042;
            v3045[2] = v3043;
            *v3045 = v3041;
          }
          else
          {
            v3046 = *(int64x2_t *)(v3032 + 16);
            v3047 = (int64x2_t *)(v3034 + 8 * (v3030 + (_DWORD)v3033 * v3031));
            v3049 = *(int64x2_t *)(v3032 + 64);
            v3048 = *(int64x2_t *)(v3032 + 80);
            v3050 = *(int64x2_t *)(v3032 + 32);
            v3051 = *(int64x2_t *)(v3032 + 48);
            v3053 = *(_OWORD *)(v3032 + 112);
            v3052 = *(_OWORD *)(v3032 + 128);
            v3054 = *(_OWORD *)(v3032 + 96);
            v3055 = vzip1q_s64(*(int64x2_t *)v3032, v3051);
            v3056 = vzip2q_s64(*(int64x2_t *)v3032, v3051);
            v3047[1].i64[0] = v3054;
            *v3047 = v3055;
            v3057 = (int64x2_t *)((char *)v3047 + 8 * v3033);
            *v3057 = v3056;
            v3057[1].i64[0] = *((_QWORD *)&v3054 + 1);
            v3058 = &v3047[v3033];
            v3058[1].i64[0] = v3053;
            *v3058 = vzip1q_s64(v3046, v3049);
            v3059 = (int64x2_t *)((char *)v3047 + 24 * v3033);
            v3059[1].i64[0] = *((_QWORD *)&v3053 + 1);
            *v3059 = vzip2q_s64(v3046, v3049);
            v3060 = &v3047[2 * v3033];
            v3060[1].i64[0] = v3052;
            *v3060 = vzip1q_s64(v3050, v3048);
            v3061 = (int64x2_t *)((char *)v3047 + 40 * v3033);
            v3061[1].i64[0] = *((_QWORD *)&v3052 + 1);
            *v3061 = vzip2q_s64(v3050, v3048);
          }
          v3062 = v3025 + 1;
          while (v3062 != v3028)
          {
            ++v3027;
            v3063 = *v3062++;
            v3029 = v3063;
            if (v3063 != -1)
            {
              v3025 = v3062 - 1;
              goto LABEL_1544;
            }
          }
          v3020 = *(_DWORD *)(result + 13404);
        }
      }
      ++v3021;
      ++v3022;
    }
    while (v3021 < v3020);
    v1958 = *a5;
  }
  v3067 = *(_DWORD *)(result + 300);
  if (v3067)
  {
    v3068 = 0;
    v3069 = *a4;
    do
    {
      v3070 = *(_QWORD *)(result + 376);
      v3071 = *(_DWORD *)(result + 400) * v3068;
      v3072 = (uint64_t *)(v3070 + 8 * v3071);
      v3073 = *(_DWORD *)(result + 296);
      if (v3073 && *v3072 == -1)
      {
        v3074 = 0;
        v3135 = 8 * (v3073 + v3071) - 8 * v3071 - 8;
        v3136 = v3070 + 8 * v3071;
        while (v3135)
        {
          v3072 = (uint64_t *)(v3136 + 8);
          ++v3074;
          v3137 = *(_QWORD *)(v3136 + 8);
          v3135 -= 8;
          v3136 += 8;
          if (v3137 != -1)
            goto LABEL_1564;
        }
      }
      else
      {
        v3074 = 0;
LABEL_1564:
        v3075 = (uint64_t *)(v3070 + 8 * (v3071 + v3073));
        if (v3072 != v3075)
        {
          v3076 = *v3072;
LABEL_1566:
          v3077 = *v3069;
          v3078 = *(_DWORD *)(a3[6] + 4 * v3074);
          v3079 = *(_QWORD *)(result + 304) + 8 * v3076;
          v3080 = *((unsigned int *)a2 + 4);
          v3081 = *a2;
          if (v1958 && v3077 < v3078)
          {
            v3082 = *(int64x2_t *)v3079;
            v3083 = (int64x2_t *)(v3081 + 8 * (v3078 + (_DWORD)v3080 * v3077));
            v3084 = *(int64x2_t *)(v3079 + 32);
            v3085 = *(int64x2_t *)(v3079 + 48);
            v3086 = *(int64x2_t *)(v3079 + 64);
            v3087 = *(int64x2_t *)(v3079 + 80);
            v3089 = *(int8x16_t *)(v3079 + 96);
            v3088 = *(int8x16_t *)(v3079 + 112);
            v3090 = *(int8x16_t *)(v3079 + 128);
            v3091 = *(int8x16_t *)(v3079 + 144);
            v3092 = vextq_s8(v3090, v3090, 8uLL).u64[0];
            v3093 = vextq_s8(v3088, v3088, 8uLL).u64[0];
            v3094 = vextq_s8(v3089, v3089, 8uLL).u64[0];
            v3095 = *(int8x16_t *)(v3079 + 160);
            v3096 = *(int8x16_t *)(v3079 + 176);
            v3097 = vextq_s8(v3096, v3096, 8uLL).u64[0];
            v3098 = vextq_s8(v3095, v3095, 8uLL).u64[0];
            v3099 = vextq_s8(v3091, v3091, 8uLL).u64[0];
            v3101 = *(int8x16_t *)(v3079 + 192);
            v3100 = *(int8x16_t *)(v3079 + 208);
            v3103 = *(int8x16_t *)(v3079 + 224);
            v3102 = *(int8x16_t *)(v3079 + 240);
            v3104 = vextq_s8(v3103, v3103, 8uLL).u64[0];
            v3105 = vextq_s8(v3100, v3100, 8uLL).u64[0];
            v3106 = vextq_s8(v3101, v3101, 8uLL).u64[0];
            v3107 = *(int8x16_t *)(v3079 + 256);
            v3108 = *(int8x16_t *)(v3079 + 272);
            v3109 = vextq_s8(v3108, v3108, 8uLL).u64[0];
            v3110 = vextq_s8(v3107, v3107, 8uLL).u64[0];
            v3111 = vextq_s8(v3102, v3102, 8uLL).u64[0];
            v3083[1] = *(int64x2_t *)(v3079 + 16);
            v3083[2] = v3084;
            *v3083 = v3082;
            v3112 = (int64x2_t *)((char *)v3083 + 8 * v3080);
            v3112[1] = v3086;
            v3112[2] = v3087;
          }
          else
          {
            v3083 = (int64x2_t *)(v3081 + 8 * (v3077 + (_DWORD)v3080 * v3078));
            v3113 = *(int64x2_t *)(v3079 + 16);
            v3114 = *(int64x2_t *)(v3079 + 64);
            v3115 = *(int64x2_t *)(v3079 + 80);
            v3117 = *(int64x2_t *)(v3079 + 32);
            v3116 = *(int64x2_t *)(v3079 + 48);
            v3118 = *(int64x2_t *)(v3079 + 96);
            v3119 = *(int64x2_t *)(v3079 + 112);
            v3120 = *(int64x2_t *)(v3079 + 128);
            v3121 = *(int64x2_t *)(v3079 + 192);
            v3122 = *(int64x2_t *)(v3079 + 208);
            v3123 = *(int64x2_t *)(v3079 + 224);
            v3124 = vzip1q_s64(*(int64x2_t *)v3079, v3116);
            v3125 = vzip1q_s64(v3118, *(int64x2_t *)(v3079 + 144));
            v3126 = vzip1q_s64(v3121, *(int64x2_t *)(v3079 + 240));
            v3127.i64[0] = vdupq_laneq_s64(v3118, 1).u64[0];
            v3127.i64[1] = *(_QWORD *)(v3079 + 152);
            v3085 = vzip2q_s64(*(int64x2_t *)v3079, v3116);
            v3128.i64[0] = vdupq_laneq_s64(v3121, 1).u64[0];
            v3128.i64[1] = *(_QWORD *)(v3079 + 248);
            v3089 = (int8x16_t)vzip1q_s64(v3113, v3114);
            v3088 = (int8x16_t)vzip1q_s64(v3119, *(int64x2_t *)(v3079 + 160));
            v3090 = (int8x16_t)vzip1q_s64(v3122, *(int64x2_t *)(v3079 + 256));
            v3092 = vextq_s8(v3090, v3090, 8uLL).u64[0];
            v3093 = vextq_s8(v3088, v3088, 8uLL).u64[0];
            v3094 = vextq_s8(v3089, v3089, 8uLL).u64[0];
            v3091 = (int8x16_t)vzip2q_s64(v3113, v3114);
            v3095.i64[0] = vdupq_laneq_s64(v3119, 1).u64[0];
            v3095.i64[1] = *(_QWORD *)(v3079 + 168);
            v3096.i64[0] = vdupq_laneq_s64(v3122, 1).u64[0];
            v3096.i64[1] = *(_QWORD *)(v3079 + 264);
            v3099 = vextq_s8(v3091, v3091, 8uLL).u64[0];
            v3097 = vextq_s8(v3096, v3096, 8uLL).u64[0];
            v3098 = vextq_s8(v3095, v3095, 8uLL).u64[0];
            v3101 = (int8x16_t)vzip1q_s64(v3117, v3115);
            v3100 = (int8x16_t)vzip1q_s64(v3120, *(int64x2_t *)(v3079 + 176));
            v3103 = (int8x16_t)vzip1q_s64(v3123, *(int64x2_t *)(v3079 + 272));
            v3104 = vextq_s8(v3103, v3103, 8uLL).u64[0];
            v3105 = vextq_s8(v3100, v3100, 8uLL).u64[0];
            v3106 = vextq_s8(v3101, v3101, 8uLL).u64[0];
            v3102 = (int8x16_t)vzip2q_s64(v3117, v3115);
            v3107.i64[0] = vdupq_laneq_s64(v3120, 1).u64[0];
            v3107.i64[1] = *(_QWORD *)(v3079 + 184);
            v3108.i64[0] = vdupq_laneq_s64(v3123, 1).u64[0];
            v3108.i64[1] = *(_QWORD *)(v3079 + 280);
            v3111 = vextq_s8(v3102, v3102, 8uLL).u64[0];
            v3109 = vextq_s8(v3108, v3108, 8uLL).u64[0];
            v3110 = vextq_s8(v3107, v3107, 8uLL).u64[0];
            v3083[1] = v3125;
            v3083[2] = v3126;
            *v3083 = v3124;
            v3112 = (int64x2_t *)((char *)v3083 + 8 * v3080);
            v3112[1] = v3127;
            v3112[2] = v3128;
          }
          *v3112 = v3085;
          v3089.i64[1] = v3094;
          v3088.i64[1] = v3093;
          v3129 = (int8x16_t *)&v3083[v3080];
          *v3129 = v3089;
          v3129[1] = v3088;
          v3090.i64[1] = v3092;
          v3129[2] = v3090;
          v3130 = (int8x16_t *)((char *)v3083 + 24 * v3080);
          v3096.i64[1] = v3097;
          v3095.i64[1] = v3098;
          v3091.i64[1] = v3099;
          v3130[1] = v3095;
          v3130[2] = v3096;
          *v3130 = v3091;
          v3131 = (int8x16_t *)&v3083[2 * v3080];
          v3103.i64[1] = v3104;
          v3100.i64[1] = v3105;
          v3101.i64[1] = v3106;
          v3131[1] = v3100;
          v3131[2] = v3103;
          *v3131 = v3101;
          v3132 = (int8x16_t *)((char *)v3083 + 40 * v3080);
          v3108.i64[1] = v3109;
          v3107.i64[1] = v3110;
          v3132[1] = v3107;
          v3132[2] = v3108;
          v3102.i64[1] = v3111;
          v3133 = v3072 + 1;
          *v3132 = v3102;
          while (v3133 != v3075)
          {
            ++v3074;
            v3134 = *v3133++;
            v3076 = v3134;
            if (v3134 != -1)
            {
              v3072 = v3133 - 1;
              goto LABEL_1566;
            }
          }
          v3067 = *(_DWORD *)(result + 300);
        }
      }
      ++v3068;
      ++v3069;
    }
    while (v3068 < v3067);
    v1958 = *a5;
  }
  v3138 = *(_DWORD *)(result + 1740);
  if (v3138)
  {
    v3139 = 0;
    v3140 = a4[3];
    do
    {
      v3141 = *(_QWORD *)(result + 1816);
      v3142 = *(_DWORD *)(result + 1840) * v3139;
      v3143 = (uint64_t *)(v3141 + 8 * v3142);
      v3144 = *(_DWORD *)(result + 1736);
      if (v3144 && *v3143 == -1)
      {
        v3145 = 0;
        v3224 = 8 * (v3144 + v3142) - 8 * v3142 - 8;
        v3225 = v3141 + 8 * v3142;
        while (v3224)
        {
          v3143 = (uint64_t *)(v3225 + 8);
          ++v3145;
          v3226 = *(_QWORD *)(v3225 + 8);
          v3224 -= 8;
          v3225 += 8;
          if (v3226 != -1)
            goto LABEL_1586;
        }
      }
      else
      {
        v3145 = 0;
LABEL_1586:
        v3146 = (uint64_t *)(v3141 + 8 * (v3142 + v3144));
        if (v3143 != v3146)
        {
          v3147 = *v3143;
LABEL_1588:
          v3148 = *v3140;
          v3149 = *(_DWORD *)(a3[6] + 4 * v3145);
          v3150 = *(_QWORD *)(result + 1744) + 8 * v3147;
          v3151 = *((unsigned int *)a2 + 4);
          v3152 = *a2;
          if (v1958 && v3148 < v3149)
          {
            v3153 = *(int64x2_t *)v3150;
            v3154 = (int64x2_t *)(v3152 + 8 * (v3149 + (_DWORD)v3151 * v3148));
            v3155 = *(int64x2_t *)(v3150 + 32);
            v3156 = *(_OWORD *)(v3150 + 48);
            v3157 = *(_OWORD *)(v3150 + 64);
            v3158 = *(_OWORD *)(v3150 + 80);
            v3159 = *(int64x2_t *)(v3150 + 96);
            v3160 = *(int64x2_t *)(v3150 + 112);
            v3161 = *(int64x2_t *)(v3150 + 128);
            v3162 = *(_OWORD *)(v3150 + 144);
            v3163 = *(_OWORD *)(v3150 + 160);
            v3164 = *(_OWORD *)(v3150 + 176);
            v3165 = *(int64x2_t *)(v3150 + 192);
            v3166 = *(int64x2_t *)(v3150 + 208);
            v3167 = *(int64x2_t *)(v3150 + 224);
            v3168 = *(_OWORD *)(v3150 + 240);
            v3169 = *(_OWORD *)(v3150 + 256);
            v3170 = *(_OWORD *)(v3150 + 272);
            v3171 = *(int64x2_t *)(v3150 + 288);
            v3172 = *(int64x2_t *)(v3150 + 304);
            v3173 = *(int64x2_t *)(v3150 + 320);
            v3174 = *(_OWORD *)(v3150 + 336);
            v3175 = *(_OWORD *)(v3150 + 352);
            v3176 = *(_OWORD *)(v3150 + 368);
            v3177 = *(int64x2_t *)(v3150 + 384);
            v3178 = *(int64x2_t *)(v3150 + 400);
            v3179 = *(int64x2_t *)(v3150 + 416);
            v3154[1] = *(int64x2_t *)(v3150 + 16);
            v3154[2] = v3155;
            *v3154 = v3153;
            v3180 = &v3154->i8[8 * v3151];
            *((_OWORD *)v3180 + 1) = v3157;
            *((_OWORD *)v3180 + 2) = v3158;
            *(_OWORD *)v3180 = v3156;
            v3181 = &v3154[v3151];
            v3181[1] = v3160;
            v3181[2] = v3161;
            *v3181 = v3159;
            v3182 = &v3154->i8[24 * v3151];
            *((_OWORD *)v3182 + 1) = v3163;
            *((_OWORD *)v3182 + 2) = v3164;
            *(_OWORD *)v3182 = v3162;
            v3183 = &v3154[2 * v3151];
            v3183[1] = v3166;
            v3183[2] = v3167;
            *v3183 = v3165;
            v3184 = &v3154->i8[40 * v3151];
            *((_OWORD *)v3184 + 1) = v3169;
            *((_OWORD *)v3184 + 2) = v3170;
            *(_OWORD *)v3184 = v3168;
            v3185 = &v3154[3 * v3151];
            v3185[1] = v3172;
            v3185[2] = v3173;
            *v3185 = v3171;
            v3186 = &v3154->i8[56 * v3151];
            *((_OWORD *)v3186 + 1) = v3175;
            *((_OWORD *)v3186 + 2) = v3176;
            *(_OWORD *)v3186 = v3174;
            v3187 = &v3154[4 * v3151];
            v3187[1] = v3178;
            v3187[2] = v3179;
            *v3187 = v3177;
          }
          else
          {
            v3188 = *(int64x2_t *)(v3150 + 16);
            v3189 = (int64x2_t *)(v3152 + 8 * (v3148 + (_DWORD)v3151 * v3149));
            v3191 = *(int64x2_t *)(v3150 + 64);
            v3190 = *(int64x2_t *)(v3150 + 80);
            v3192 = *(int64x2_t *)(v3150 + 32);
            v3193 = *(int64x2_t *)(v3150 + 48);
            v3195 = *(int64x2_t *)(v3150 + 96);
            v3194 = *(int64x2_t *)(v3150 + 112);
            v3197 = *(int64x2_t *)(v3150 + 160);
            v3196 = *(int64x2_t *)(v3150 + 176);
            v3198 = *(int64x2_t *)(v3150 + 128);
            v3199 = *(int64x2_t *)(v3150 + 144);
            v3201 = *(int64x2_t *)(v3150 + 192);
            v3200 = *(int64x2_t *)(v3150 + 208);
            v3203 = *(int64x2_t *)(v3150 + 256);
            v3202 = *(int64x2_t *)(v3150 + 272);
            v3204 = *(int64x2_t *)(v3150 + 224);
            v3205 = *(int64x2_t *)(v3150 + 240);
            v3207 = *(int64x2_t *)(v3150 + 288);
            v3206 = *(int64x2_t *)(v3150 + 304);
            v3209 = *(int64x2_t *)(v3150 + 352);
            v3208 = *(int64x2_t *)(v3150 + 368);
            v3211 = *(int64x2_t *)(v3150 + 320);
            v3210 = *(int64x2_t *)(v3150 + 336);
            v3213 = *(_OWORD *)(v3150 + 400);
            v3212 = *(_OWORD *)(v3150 + 416);
            v3214 = *(_OWORD *)(v3150 + 384);
            v3215 = vzip1q_s64(*(int64x2_t *)v3150, v3193);
            v3216 = vzip2q_s64(*(int64x2_t *)v3150, v3193);
            v3189[2] = vzip1q_s64(v3201, v3205);
            v3189[3] = vzip1q_s64(v3207, v3210);
            v3189[4].i64[0] = v3214;
            *v3189 = v3215;
            v3189[1] = vzip1q_s64(v3195, v3199);
            v3217 = (int64x2_t *)((char *)v3189 + 8 * v3151);
            v3217[2] = vzip2q_s64(v3201, v3205);
            v3217[3] = vzip2q_s64(v3207, v3210);
            *v3217 = v3216;
            v3217[1] = vzip2q_s64(v3195, v3199);
            v3217[4].i64[0] = *((_QWORD *)&v3214 + 1);
            v3218 = &v3189[v3151];
            v3218[4].i64[0] = v3213;
            v3218[2] = vzip1q_s64(v3200, v3203);
            v3218[3] = vzip1q_s64(v3206, v3209);
            *v3218 = vzip1q_s64(v3188, v3191);
            v3218[1] = vzip1q_s64(v3194, v3197);
            v3219 = (int64x2_t *)((char *)v3189 + 24 * v3151);
            v3219[4].i64[0] = *((_QWORD *)&v3213 + 1);
            v3219[2] = vzip2q_s64(v3200, v3203);
            v3219[3] = vzip2q_s64(v3206, v3209);
            *v3219 = vzip2q_s64(v3188, v3191);
            v3219[1] = vzip2q_s64(v3194, v3197);
            v3220 = &v3189[2 * v3151];
            v3220[4].i64[0] = v3212;
            v3220[2] = vzip1q_s64(v3204, v3202);
            v3220[3] = vzip1q_s64(v3211, v3208);
            *v3220 = vzip1q_s64(v3192, v3190);
            v3220[1] = vzip1q_s64(v3198, v3196);
            v3221 = (int64x2_t *)((char *)v3189 + 40 * v3151);
            v3221[4].i64[0] = *((_QWORD *)&v3212 + 1);
            v3221[2] = vzip2q_s64(v3204, v3202);
            v3221[3] = vzip2q_s64(v3211, v3208);
            *v3221 = vzip2q_s64(v3192, v3190);
            v3221[1] = vzip2q_s64(v3198, v3196);
          }
          v3222 = v3143 + 1;
          while (v3222 != v3146)
          {
            ++v3145;
            v3223 = *v3222++;
            v3147 = v3223;
            if (v3223 != -1)
            {
              v3143 = v3222 - 1;
              goto LABEL_1588;
            }
          }
          v3138 = *(_DWORD *)(result + 1740);
        }
      }
      ++v3139;
      ++v3140;
    }
    while (v3139 < v3138);
    v1958 = *a5;
  }
  v3227 = *(_DWORD *)(result + 3180);
  if (v3227)
  {
    v3228 = 0;
    v3229 = a4[6];
    do
    {
      v3230 = *(_QWORD *)(result + 3256);
      v3231 = *(_DWORD *)(result + 3280) * v3228;
      v3232 = (uint64_t *)(v3230 + 8 * v3231);
      v3233 = *(_DWORD *)(result + 3176);
      if (v3233 && *v3232 == -1)
      {
        v3234 = 0;
        v3295 = 8 * (v3233 + v3231) - 8 * v3231 - 8;
        v3296 = v3230 + 8 * v3231;
        while (v3295)
        {
          v3232 = (uint64_t *)(v3296 + 8);
          ++v3234;
          v3297 = *(_QWORD *)(v3296 + 8);
          v3295 -= 8;
          v3296 += 8;
          if (v3297 != -1)
            goto LABEL_1608;
        }
      }
      else
      {
        v3234 = 0;
LABEL_1608:
        v3235 = (uint64_t *)(v3230 + 8 * (v3231 + v3233));
        if (v3232 != v3235)
        {
          v3236 = *v3232;
LABEL_1610:
          v3237 = *v3229;
          v3238 = *(_DWORD *)(a3[6] + 4 * v3234);
          v3239 = *(_QWORD *)(result + 3184) + 8 * v3236;
          v3240 = *((unsigned int *)a2 + 4);
          v3241 = *a2;
          if (v1958 && v3237 < v3238)
          {
            v3242 = *(int64x2_t *)v3239;
            v3243 = (int64x2_t *)(v3241 + 8 * (v3238 + (_DWORD)v3240 * v3237));
            v3244 = *(int64x2_t *)(v3239 + 32);
            v3245 = *(int64x2_t *)(v3239 + 48);
            v3246 = *(int64x2_t *)(v3239 + 64);
            v3247 = *(int64x2_t *)(v3239 + 80);
            v3249 = *(int8x16_t *)(v3239 + 96);
            v3248 = *(int8x16_t *)(v3239 + 112);
            v3250 = *(int8x16_t *)(v3239 + 128);
            v3251 = *(int8x16_t *)(v3239 + 144);
            v3252 = vextq_s8(v3250, v3250, 8uLL).u64[0];
            v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
            v3254 = vextq_s8(v3249, v3249, 8uLL).u64[0];
            v3255 = *(int8x16_t *)(v3239 + 160);
            v3256 = *(int8x16_t *)(v3239 + 176);
            v3257 = vextq_s8(v3256, v3256, 8uLL).u64[0];
            v3258 = vextq_s8(v3255, v3255, 8uLL).u64[0];
            v3259 = vextq_s8(v3251, v3251, 8uLL).u64[0];
            v3261 = *(int8x16_t *)(v3239 + 192);
            v3260 = *(int8x16_t *)(v3239 + 208);
            v3263 = *(int8x16_t *)(v3239 + 224);
            v3262 = *(int8x16_t *)(v3239 + 240);
            v3264 = vextq_s8(v3263, v3263, 8uLL).u64[0];
            v3265 = vextq_s8(v3260, v3260, 8uLL).u64[0];
            v3266 = vextq_s8(v3261, v3261, 8uLL).u64[0];
            v3267 = *(int8x16_t *)(v3239 + 256);
            v3268 = *(int8x16_t *)(v3239 + 272);
            v3269 = vextq_s8(v3268, v3268, 8uLL).u64[0];
            v3270 = vextq_s8(v3267, v3267, 8uLL).u64[0];
            v3271 = vextq_s8(v3262, v3262, 8uLL).u64[0];
            v3243[1] = *(int64x2_t *)(v3239 + 16);
            v3243[2] = v3244;
            *v3243 = v3242;
            v3272 = (int64x2_t *)((char *)v3243 + 8 * v3240);
            v3272[1] = v3246;
            v3272[2] = v3247;
          }
          else
          {
            v3243 = (int64x2_t *)(v3241 + 8 * (v3237 + (_DWORD)v3240 * v3238));
            v3273 = *(int64x2_t *)(v3239 + 16);
            v3274 = *(int64x2_t *)(v3239 + 64);
            v3275 = *(int64x2_t *)(v3239 + 80);
            v3277 = *(int64x2_t *)(v3239 + 32);
            v3276 = *(int64x2_t *)(v3239 + 48);
            v3278 = *(int64x2_t *)(v3239 + 96);
            v3279 = *(int64x2_t *)(v3239 + 112);
            v3280 = *(int64x2_t *)(v3239 + 128);
            v3281 = *(int64x2_t *)(v3239 + 192);
            v3282 = *(int64x2_t *)(v3239 + 208);
            v3283 = *(int64x2_t *)(v3239 + 224);
            v3284 = vzip1q_s64(*(int64x2_t *)v3239, v3276);
            v3285 = vzip1q_s64(v3278, *(int64x2_t *)(v3239 + 144));
            v3286 = vzip1q_s64(v3281, *(int64x2_t *)(v3239 + 240));
            v3287.i64[0] = vdupq_laneq_s64(v3278, 1).u64[0];
            v3287.i64[1] = *(_QWORD *)(v3239 + 152);
            v3245 = vzip2q_s64(*(int64x2_t *)v3239, v3276);
            v3288.i64[0] = vdupq_laneq_s64(v3281, 1).u64[0];
            v3288.i64[1] = *(_QWORD *)(v3239 + 248);
            v3249 = (int8x16_t)vzip1q_s64(v3273, v3274);
            v3248 = (int8x16_t)vzip1q_s64(v3279, *(int64x2_t *)(v3239 + 160));
            v3250 = (int8x16_t)vzip1q_s64(v3282, *(int64x2_t *)(v3239 + 256));
            v3252 = vextq_s8(v3250, v3250, 8uLL).u64[0];
            v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
            v3254 = vextq_s8(v3249, v3249, 8uLL).u64[0];
            v3251 = (int8x16_t)vzip2q_s64(v3273, v3274);
            v3255.i64[0] = vdupq_laneq_s64(v3279, 1).u64[0];
            v3255.i64[1] = *(_QWORD *)(v3239 + 168);
            v3256.i64[0] = vdupq_laneq_s64(v3282, 1).u64[0];
            v3256.i64[1] = *(_QWORD *)(v3239 + 264);
            v3259 = vextq_s8(v3251, v3251, 8uLL).u64[0];
            v3257 = vextq_s8(v3256, v3256, 8uLL).u64[0];
            v3258 = vextq_s8(v3255, v3255, 8uLL).u64[0];
            v3261 = (int8x16_t)vzip1q_s64(v3277, v3275);
            v3260 = (int8x16_t)vzip1q_s64(v3280, *(int64x2_t *)(v3239 + 176));
            v3263 = (int8x16_t)vzip1q_s64(v3283, *(int64x2_t *)(v3239 + 272));
            v3264 = vextq_s8(v3263, v3263, 8uLL).u64[0];
            v3265 = vextq_s8(v3260, v3260, 8uLL).u64[0];
            v3266 = vextq_s8(v3261, v3261, 8uLL).u64[0];
            v3262 = (int8x16_t)vzip2q_s64(v3277, v3275);
            v3267.i64[0] = vdupq_laneq_s64(v3280, 1).u64[0];
            v3267.i64[1] = *(_QWORD *)(v3239 + 184);
            v3268.i64[0] = vdupq_laneq_s64(v3283, 1).u64[0];
            v3268.i64[1] = *(_QWORD *)(v3239 + 280);
            v3271 = vextq_s8(v3262, v3262, 8uLL).u64[0];
            v3269 = vextq_s8(v3268, v3268, 8uLL).u64[0];
            v3270 = vextq_s8(v3267, v3267, 8uLL).u64[0];
            v3243[1] = v3285;
            v3243[2] = v3286;
            *v3243 = v3284;
            v3272 = (int64x2_t *)((char *)v3243 + 8 * v3240);
            v3272[1] = v3287;
            v3272[2] = v3288;
          }
          *v3272 = v3245;
          v3249.i64[1] = v3254;
          v3248.i64[1] = v3253;
          v3289 = (int8x16_t *)&v3243[v3240];
          *v3289 = v3249;
          v3289[1] = v3248;
          v3250.i64[1] = v3252;
          v3289[2] = v3250;
          v3290 = (int8x16_t *)((char *)v3243 + 24 * v3240);
          v3256.i64[1] = v3257;
          v3255.i64[1] = v3258;
          v3251.i64[1] = v3259;
          v3290[1] = v3255;
          v3290[2] = v3256;
          *v3290 = v3251;
          v3291 = (int8x16_t *)&v3243[2 * v3240];
          v3263.i64[1] = v3264;
          v3260.i64[1] = v3265;
          v3261.i64[1] = v3266;
          v3291[1] = v3260;
          v3291[2] = v3263;
          *v3291 = v3261;
          v3292 = (int8x16_t *)((char *)v3243 + 40 * v3240);
          v3268.i64[1] = v3269;
          v3267.i64[1] = v3270;
          v3292[1] = v3267;
          v3292[2] = v3268;
          v3262.i64[1] = v3271;
          v3293 = v3232 + 1;
          *v3292 = v3262;
          while (v3293 != v3235)
          {
            ++v3234;
            v3294 = *v3293++;
            v3236 = v3294;
            if (v3294 != -1)
            {
              v3232 = v3293 - 1;
              goto LABEL_1610;
            }
          }
          v3227 = *(_DWORD *)(result + 3180);
        }
      }
      ++v3228;
      ++v3229;
    }
    while (v3228 < v3227);
    v1958 = *a5;
  }
  v3298 = *(_DWORD *)(result + 4620);
  if (v3298)
  {
    v3299 = 0;
    v3300 = a4[9];
    do
    {
      v3301 = *(_QWORD *)(result + 4696);
      v3302 = *(_DWORD *)(result + 4720) * v3299;
      v3303 = (uint64_t *)(v3301 + 8 * v3302);
      v3304 = *(_DWORD *)(result + 4616);
      if (v3304 && *v3303 == -1)
      {
        v3305 = 0;
        v3366 = 8 * (v3304 + v3302) - 8 * v3302 - 8;
        v3367 = v3301 + 8 * v3302;
        while (v3366)
        {
          v3303 = (uint64_t *)(v3367 + 8);
          ++v3305;
          v3368 = *(_QWORD *)(v3367 + 8);
          v3366 -= 8;
          v3367 += 8;
          if (v3368 != -1)
            goto LABEL_1630;
        }
      }
      else
      {
        v3305 = 0;
LABEL_1630:
        v3306 = (uint64_t *)(v3301 + 8 * (v3302 + v3304));
        if (v3303 != v3306)
        {
          v3307 = *v3303;
LABEL_1632:
          v3308 = *v3300;
          v3309 = *(_DWORD *)(a3[6] + 4 * v3305);
          v3310 = *(_QWORD *)(result + 4624) + 8 * v3307;
          v3311 = *((unsigned int *)a2 + 4);
          v3312 = *a2;
          if (v1958 && v3308 < v3309)
          {
            v3313 = *(int64x2_t *)v3310;
            v3314 = (int64x2_t *)(v3312 + 8 * (v3309 + (_DWORD)v3311 * v3308));
            v3315 = *(int64x2_t *)(v3310 + 32);
            v3316 = *(int64x2_t *)(v3310 + 48);
            v3317 = *(int64x2_t *)(v3310 + 64);
            v3318 = *(int64x2_t *)(v3310 + 80);
            v3320 = *(int8x16_t *)(v3310 + 96);
            v3319 = *(int8x16_t *)(v3310 + 112);
            v3321 = *(int8x16_t *)(v3310 + 128);
            v3322 = *(int8x16_t *)(v3310 + 144);
            v3323 = vextq_s8(v3321, v3321, 8uLL).u64[0];
            v3324 = vextq_s8(v3319, v3319, 8uLL).u64[0];
            v3325 = vextq_s8(v3320, v3320, 8uLL).u64[0];
            v3326 = *(int8x16_t *)(v3310 + 160);
            v3327 = *(int8x16_t *)(v3310 + 176);
            v3328 = vextq_s8(v3327, v3327, 8uLL).u64[0];
            v3329 = vextq_s8(v3326, v3326, 8uLL).u64[0];
            v3330 = vextq_s8(v3322, v3322, 8uLL).u64[0];
            v3332 = *(int8x16_t *)(v3310 + 192);
            v3331 = *(int8x16_t *)(v3310 + 208);
            v3334 = *(int8x16_t *)(v3310 + 224);
            v3333 = *(int8x16_t *)(v3310 + 240);
            v3335 = vextq_s8(v3334, v3334, 8uLL).u64[0];
            v3336 = vextq_s8(v3331, v3331, 8uLL).u64[0];
            v3337 = vextq_s8(v3332, v3332, 8uLL).u64[0];
            v3338 = *(int8x16_t *)(v3310 + 256);
            v3339 = *(int8x16_t *)(v3310 + 272);
            v3340 = vextq_s8(v3339, v3339, 8uLL).u64[0];
            v3341 = vextq_s8(v3338, v3338, 8uLL).u64[0];
            v3342 = vextq_s8(v3333, v3333, 8uLL).u64[0];
            v3314[1] = *(int64x2_t *)(v3310 + 16);
            v3314[2] = v3315;
            *v3314 = v3313;
            v3343 = (int64x2_t *)((char *)v3314 + 8 * v3311);
            v3343[1] = v3317;
            v3343[2] = v3318;
          }
          else
          {
            v3314 = (int64x2_t *)(v3312 + 8 * (v3308 + (_DWORD)v3311 * v3309));
            v3344 = *(int64x2_t *)(v3310 + 16);
            v3345 = *(int64x2_t *)(v3310 + 64);
            v3346 = *(int64x2_t *)(v3310 + 80);
            v3348 = *(int64x2_t *)(v3310 + 32);
            v3347 = *(int64x2_t *)(v3310 + 48);
            v3349 = *(int64x2_t *)(v3310 + 96);
            v3350 = *(int64x2_t *)(v3310 + 112);
            v3351 = *(int64x2_t *)(v3310 + 128);
            v3352 = *(int64x2_t *)(v3310 + 192);
            v3353 = *(int64x2_t *)(v3310 + 208);
            v3354 = *(int64x2_t *)(v3310 + 224);
            v3355 = vzip1q_s64(*(int64x2_t *)v3310, v3347);
            v3356 = vzip1q_s64(v3349, *(int64x2_t *)(v3310 + 144));
            v3357 = vzip1q_s64(v3352, *(int64x2_t *)(v3310 + 240));
            v3358.i64[0] = vdupq_laneq_s64(v3349, 1).u64[0];
            v3358.i64[1] = *(_QWORD *)(v3310 + 152);
            v3316 = vzip2q_s64(*(int64x2_t *)v3310, v3347);
            v3359.i64[0] = vdupq_laneq_s64(v3352, 1).u64[0];
            v3359.i64[1] = *(_QWORD *)(v3310 + 248);
            v3320 = (int8x16_t)vzip1q_s64(v3344, v3345);
            v3319 = (int8x16_t)vzip1q_s64(v3350, *(int64x2_t *)(v3310 + 160));
            v3321 = (int8x16_t)vzip1q_s64(v3353, *(int64x2_t *)(v3310 + 256));
            v3323 = vextq_s8(v3321, v3321, 8uLL).u64[0];
            v3324 = vextq_s8(v3319, v3319, 8uLL).u64[0];
            v3325 = vextq_s8(v3320, v3320, 8uLL).u64[0];
            v3322 = (int8x16_t)vzip2q_s64(v3344, v3345);
            v3326.i64[0] = vdupq_laneq_s64(v3350, 1).u64[0];
            v3326.i64[1] = *(_QWORD *)(v3310 + 168);
            v3327.i64[0] = vdupq_laneq_s64(v3353, 1).u64[0];
            v3327.i64[1] = *(_QWORD *)(v3310 + 264);
            v3330 = vextq_s8(v3322, v3322, 8uLL).u64[0];
            v3328 = vextq_s8(v3327, v3327, 8uLL).u64[0];
            v3329 = vextq_s8(v3326, v3326, 8uLL).u64[0];
            v3332 = (int8x16_t)vzip1q_s64(v3348, v3346);
            v3331 = (int8x16_t)vzip1q_s64(v3351, *(int64x2_t *)(v3310 + 176));
            v3334 = (int8x16_t)vzip1q_s64(v3354, *(int64x2_t *)(v3310 + 272));
            v3335 = vextq_s8(v3334, v3334, 8uLL).u64[0];
            v3336 = vextq_s8(v3331, v3331, 8uLL).u64[0];
            v3337 = vextq_s8(v3332, v3332, 8uLL).u64[0];
            v3333 = (int8x16_t)vzip2q_s64(v3348, v3346);
            v3338.i64[0] = vdupq_laneq_s64(v3351, 1).u64[0];
            v3338.i64[1] = *(_QWORD *)(v3310 + 184);
            v3339.i64[0] = vdupq_laneq_s64(v3354, 1).u64[0];
            v3339.i64[1] = *(_QWORD *)(v3310 + 280);
            v3342 = vextq_s8(v3333, v3333, 8uLL).u64[0];
            v3340 = vextq_s8(v3339, v3339, 8uLL).u64[0];
            v3341 = vextq_s8(v3338, v3338, 8uLL).u64[0];
            v3314[1] = v3356;
            v3314[2] = v3357;
            *v3314 = v3355;
            v3343 = (int64x2_t *)((char *)v3314 + 8 * v3311);
            v3343[1] = v3358;
            v3343[2] = v3359;
          }
          *v3343 = v3316;
          v3320.i64[1] = v3325;
          v3319.i64[1] = v3324;
          v3360 = (int8x16_t *)&v3314[v3311];
          *v3360 = v3320;
          v3360[1] = v3319;
          v3321.i64[1] = v3323;
          v3360[2] = v3321;
          v3361 = (int8x16_t *)((char *)v3314 + 24 * v3311);
          v3327.i64[1] = v3328;
          v3326.i64[1] = v3329;
          v3322.i64[1] = v3330;
          v3361[1] = v3326;
          v3361[2] = v3327;
          *v3361 = v3322;
          v3362 = (int8x16_t *)&v3314[2 * v3311];
          v3334.i64[1] = v3335;
          v3331.i64[1] = v3336;
          v3332.i64[1] = v3337;
          v3362[1] = v3331;
          v3362[2] = v3334;
          *v3362 = v3332;
          v3363 = (int8x16_t *)((char *)v3314 + 40 * v3311);
          v3339.i64[1] = v3340;
          v3338.i64[1] = v3341;
          v3363[1] = v3338;
          v3363[2] = v3339;
          v3333.i64[1] = v3342;
          v3364 = v3303 + 1;
          *v3363 = v3333;
          while (v3364 != v3306)
          {
            ++v3305;
            v3365 = *v3364++;
            v3307 = v3365;
            if (v3365 != -1)
            {
              v3303 = v3364 - 1;
              goto LABEL_1632;
            }
          }
          v3298 = *(_DWORD *)(result + 4620);
        }
      }
      ++v3299;
      ++v3300;
    }
    while (v3299 < v3298);
    v1958 = *a5;
  }
  v3369 = *(_DWORD *)(result + 6060);
  if (v3369)
  {
    v3370 = 0;
    v3371 = a4[12];
    do
    {
      v3372 = *(_QWORD *)(result + 6136);
      v3373 = *(_DWORD *)(result + 6160) * v3370;
      v3374 = (uint64_t *)(v3372 + 8 * v3373);
      v3375 = *(_DWORD *)(result + 6056);
      if (v3375 && *v3374 == -1)
      {
        v3376 = 0;
        v3413 = 8 * (v3375 + v3373) - 8 * v3373 - 8;
        v3414 = v3372 + 8 * v3373;
        while (v3413)
        {
          v3374 = (uint64_t *)(v3414 + 8);
          ++v3376;
          v3415 = *(_QWORD *)(v3414 + 8);
          v3413 -= 8;
          v3414 += 8;
          if (v3415 != -1)
            goto LABEL_1652;
        }
      }
      else
      {
        v3376 = 0;
LABEL_1652:
        v3377 = (uint64_t *)(v3372 + 8 * (v3373 + v3375));
        if (v3374 != v3377)
        {
          v3378 = *v3374;
LABEL_1654:
          v3379 = *v3371;
          v3380 = *(_DWORD *)(a3[6] + 4 * v3376);
          v3381 = *(_QWORD *)(result + 6064) + 8 * v3378;
          v3382 = *((unsigned int *)a2 + 4);
          v3383 = *a2;
          if (v1958 && v3379 < v3380)
          {
            v3384 = *(int64x2_t *)v3381;
            v3385 = (int64x2_t *)(v3383 + 8 * (v3380 + (_DWORD)v3382 * v3379));
            v3386 = *(int64x2_t *)(v3381 + 32);
            v3387 = *(_OWORD *)(v3381 + 48);
            v3388 = *(_OWORD *)(v3381 + 64);
            v3389 = *(_OWORD *)(v3381 + 80);
            v3390 = *(int64x2_t *)(v3381 + 96);
            v3391 = *(int64x2_t *)(v3381 + 112);
            v3392 = *(int64x2_t *)(v3381 + 128);
            v3385[1] = *(int64x2_t *)(v3381 + 16);
            v3385[2] = v3386;
            *v3385 = v3384;
            v3393 = &v3385->i8[8 * v3382];
            *((_OWORD *)v3393 + 1) = v3388;
            *((_OWORD *)v3393 + 2) = v3389;
            *(_OWORD *)v3393 = v3387;
            v3394 = &v3385[v3382];
            v3394[1] = v3391;
            v3394[2] = v3392;
            *v3394 = v3390;
          }
          else
          {
            v3395 = *(int64x2_t *)(v3381 + 16);
            v3396 = (int64x2_t *)(v3383 + 8 * (v3379 + (_DWORD)v3382 * v3380));
            v3398 = *(int64x2_t *)(v3381 + 64);
            v3397 = *(int64x2_t *)(v3381 + 80);
            v3399 = *(int64x2_t *)(v3381 + 32);
            v3400 = *(int64x2_t *)(v3381 + 48);
            v3402 = *(_OWORD *)(v3381 + 112);
            v3401 = *(_OWORD *)(v3381 + 128);
            v3403 = *(_OWORD *)(v3381 + 96);
            v3404 = vzip1q_s64(*(int64x2_t *)v3381, v3400);
            v3405 = vzip2q_s64(*(int64x2_t *)v3381, v3400);
            v3396[1].i64[0] = v3403;
            *v3396 = v3404;
            v3406 = (int64x2_t *)((char *)v3396 + 8 * v3382);
            *v3406 = v3405;
            v3406[1].i64[0] = *((_QWORD *)&v3403 + 1);
            v3407 = &v3396[v3382];
            v3407[1].i64[0] = v3402;
            *v3407 = vzip1q_s64(v3395, v3398);
            v3408 = (int64x2_t *)((char *)v3396 + 24 * v3382);
            v3408[1].i64[0] = *((_QWORD *)&v3402 + 1);
            *v3408 = vzip2q_s64(v3395, v3398);
            v3409 = &v3396[2 * v3382];
            v3409[1].i64[0] = v3401;
            *v3409 = vzip1q_s64(v3399, v3397);
            v3410 = (int64x2_t *)((char *)v3396 + 40 * v3382);
            v3410[1].i64[0] = *((_QWORD *)&v3401 + 1);
            *v3410 = vzip2q_s64(v3399, v3397);
          }
          v3411 = v3374 + 1;
          while (v3411 != v3377)
          {
            ++v3376;
            v3412 = *v3411++;
            v3378 = v3412;
            if (v3412 != -1)
            {
              v3374 = v3411 - 1;
              goto LABEL_1654;
            }
          }
          v3369 = *(_DWORD *)(result + 6060);
        }
      }
      ++v3370;
      ++v3371;
    }
    while (v3370 < v3369);
    v1958 = *a5;
  }
  v3416 = *(_DWORD *)(result + 7500);
  if (v3416)
  {
    v3417 = 0;
    v3418 = a4[15];
    do
    {
      v3419 = *(_QWORD *)(result + 7576);
      v3420 = *(_DWORD *)(result + 7600) * v3417;
      v3421 = (uint64_t *)(v3419 + 8 * v3420);
      v3422 = *(_DWORD *)(result + 7496);
      if (v3422 && *v3421 == -1)
      {
        v3423 = 0;
        v3441 = 8 * (v3422 + v3420) - 8 * v3420 - 8;
        v3442 = v3419 + 8 * v3420;
        while (v3441)
        {
          v3421 = (uint64_t *)(v3442 + 8);
          ++v3423;
          v3443 = *(_QWORD *)(v3442 + 8);
          v3441 -= 8;
          v3442 += 8;
          if (v3443 != -1)
            goto LABEL_1674;
        }
      }
      else
      {
        v3423 = 0;
LABEL_1674:
        v3424 = (uint64_t *)(v3419 + 8 * (v3420 + v3422));
        if (v3421 != v3424)
        {
          v3425 = *v3421;
LABEL_1676:
          v3426 = *v3418;
          v3427 = *(_DWORD *)(a3[6] + 4 * v3423);
          v3428 = (int8x16_t *)(*(_QWORD *)(result + 7504) + 8 * v3425);
          v3429 = *((unsigned int *)a2 + 4);
          v3430 = *a2;
          v3432 = v3428[1];
          v3431 = v3428[2];
          v3433 = *v3428;
          v3434 = vextq_s8(v3431, v3431, 8uLL).u64[0];
          v3435 = vextq_s8(v3432, v3432, 8uLL).u64[0];
          v3436 = vextq_s8(v3433, v3433, 8uLL).u64[0];
          if (v1958 && v3426 < v3427)
          {
            v3433.i64[1] = v3436;
            v3432.i64[1] = v3435;
            v3437 = (int8x16_t *)(v3430 + 8 * (v3427 + (_DWORD)v3429 * v3426));
            *v3437 = v3433;
            v3437[1] = v3432;
            v3431.i64[1] = v3434;
            v3437[2] = v3431;
          }
          else
          {
            v3438 = (_QWORD *)(v3430 + 8 * (v3426 + (_DWORD)v3429 * v3427));
            *v3438 = v3433.i64[0];
            v3438[v3429] = v3436;
            v3438[2 * v3429] = v3432.i64[0];
            v3438[3 * v3429] = v3435;
            v3438[4 * v3429] = v3431.i64[0];
            v3438[5 * v3429] = v3434;
          }
          v3439 = v3421 + 1;
          while (v3439 != v3424)
          {
            ++v3423;
            v3440 = *v3439++;
            v3425 = v3440;
            if (v3440 != -1)
            {
              v3421 = v3439 - 1;
              goto LABEL_1676;
            }
          }
          v3416 = *(_DWORD *)(result + 7500);
        }
      }
      ++v3417;
      ++v3418;
    }
    while (v3417 < v3416);
    v1958 = *a5;
  }
  v3444 = *(_DWORD *)(result + 8940);
  if (v3444)
  {
    v3445 = 0;
    v3446 = a4[18];
    do
    {
      v3447 = *(_QWORD *)(result + 9016);
      v3448 = *(_DWORD *)(result + 9040) * v3445;
      v3449 = (uint64_t *)(v3447 + 8 * v3448);
      v3450 = *(_DWORD *)(result + 8936);
      if (v3450 && *v3449 == -1)
      {
        v3451 = 0;
        v3494 = 8 * (v3450 + v3448) - 8 * v3448 - 8;
        v3495 = v3447 + 8 * v3448;
        while (v3494)
        {
          v3449 = (uint64_t *)(v3495 + 8);
          ++v3451;
          v3496 = *(_QWORD *)(v3495 + 8);
          v3494 -= 8;
          v3495 += 8;
          if (v3496 != -1)
            goto LABEL_1696;
        }
      }
      else
      {
        v3451 = 0;
LABEL_1696:
        v3452 = (uint64_t *)(v3447 + 8 * (v3448 + v3450));
        if (v3449 != v3452)
        {
          v3453 = *v3449;
LABEL_1698:
          v3454 = *v3446;
          v3455 = *(_DWORD *)(a3[6] + 4 * v3451);
          v3456 = *(_QWORD *)(result + 8944) + 8 * v3453;
          v3457 = *((unsigned int *)a2 + 4);
          v3458 = *a2;
          if (v1958 && v3454 < v3455)
          {
            v3459 = *(int64x2_t *)v3456;
            v3460 = (int64x2_t *)(v3458 + 8 * (v3455 + (_DWORD)v3457 * v3454));
            v3461 = *(int64x2_t *)(v3456 + 32);
            v3462 = *(_OWORD *)(v3456 + 48);
            v3463 = *(_OWORD *)(v3456 + 64);
            v3464 = *(_OWORD *)(v3456 + 80);
            v3465 = *(int64x2_t *)(v3456 + 96);
            v3466 = *(int64x2_t *)(v3456 + 112);
            v3467 = *(int64x2_t *)(v3456 + 128);
            v3468 = *(_OWORD *)(v3456 + 144);
            v3469 = *(_OWORD *)(v3456 + 160);
            v3470 = *(_OWORD *)(v3456 + 176);
            v3460[1] = *(int64x2_t *)(v3456 + 16);
            v3460[2] = v3461;
            *v3460 = v3459;
            v3471 = &v3460->i8[8 * v3457];
            *((_OWORD *)v3471 + 1) = v3463;
            *((_OWORD *)v3471 + 2) = v3464;
            *(_OWORD *)v3471 = v3462;
            v3472 = &v3460[v3457];
            v3472[1] = v3466;
            v3472[2] = v3467;
            *v3472 = v3465;
            v3473 = &v3460->i8[24 * v3457];
            *((_OWORD *)v3473 + 1) = v3469;
            *((_OWORD *)v3473 + 2) = v3470;
            *(_OWORD *)v3473 = v3468;
          }
          else
          {
            v3474 = *(int64x2_t *)(v3456 + 16);
            v3475 = (int64x2_t *)(v3458 + 8 * (v3454 + (_DWORD)v3457 * v3455));
            v3477 = *(int64x2_t *)(v3456 + 64);
            v3476 = *(int64x2_t *)(v3456 + 80);
            v3478 = *(int64x2_t *)(v3456 + 32);
            v3479 = *(int64x2_t *)(v3456 + 48);
            v3481 = *(int64x2_t *)(v3456 + 96);
            v3480 = *(int64x2_t *)(v3456 + 112);
            v3483 = *(int64x2_t *)(v3456 + 160);
            v3482 = *(int64x2_t *)(v3456 + 176);
            v3484 = *(int64x2_t *)(v3456 + 128);
            v3485 = *(int64x2_t *)(v3456 + 144);
            v3486 = vzip2q_s64(*(int64x2_t *)v3456, v3479);
            *v3475 = vzip1q_s64(*(int64x2_t *)v3456, v3479);
            v3475[1] = vzip1q_s64(v3481, v3485);
            v3487 = (int64x2_t *)((char *)v3475 + 8 * v3457);
            *v3487 = v3486;
            v3487[1] = vzip2q_s64(v3481, v3485);
            v3488 = &v3475[v3457];
            *v3488 = vzip1q_s64(v3474, v3477);
            v3488[1] = vzip1q_s64(v3480, v3483);
            v3489 = (int64x2_t *)((char *)v3475 + 24 * v3457);
            *v3489 = vzip2q_s64(v3474, v3477);
            v3489[1] = vzip2q_s64(v3480, v3483);
            v3490 = &v3475[2 * v3457];
            *v3490 = vzip1q_s64(v3478, v3476);
            v3490[1] = vzip1q_s64(v3484, v3482);
            v3491 = (int64x2_t *)((char *)v3475 + 40 * v3457);
            *v3491 = vzip2q_s64(v3478, v3476);
            v3491[1] = vzip2q_s64(v3484, v3482);
          }
          v3492 = v3449 + 1;
          while (v3492 != v3452)
          {
            ++v3451;
            v3493 = *v3492++;
            v3453 = v3493;
            if (v3493 != -1)
            {
              v3449 = v3492 - 1;
              goto LABEL_1698;
            }
          }
          v3444 = *(_DWORD *)(result + 8940);
        }
      }
      ++v3445;
      ++v3446;
    }
    while (v3445 < v3444);
    v1958 = *a5;
  }
  v3497 = *(_DWORD *)(result + 10380);
  if (v3497)
  {
    v3498 = 0;
    v3499 = a4[21];
    do
    {
      v3500 = *(_QWORD *)(result + 10456);
      v3501 = *(_DWORD *)(result + 10480) * v3498;
      v3502 = (uint64_t *)(v3500 + 8 * v3501);
      v3503 = *(_DWORD *)(result + 10376);
      if (v3503 && *v3502 == -1)
      {
        v3504 = 0;
        v3547 = 8 * (v3503 + v3501) - 8 * v3501 - 8;
        v3548 = v3500 + 8 * v3501;
        while (v3547)
        {
          v3502 = (uint64_t *)(v3548 + 8);
          ++v3504;
          v3549 = *(_QWORD *)(v3548 + 8);
          v3547 -= 8;
          v3548 += 8;
          if (v3549 != -1)
            goto LABEL_1718;
        }
      }
      else
      {
        v3504 = 0;
LABEL_1718:
        v3505 = (uint64_t *)(v3500 + 8 * (v3501 + v3503));
        if (v3502 != v3505)
        {
          v3506 = *v3502;
LABEL_1720:
          v3507 = *v3499;
          v3508 = *(_DWORD *)(a3[6] + 4 * v3504);
          v3509 = *(_QWORD *)(result + 10384) + 8 * v3506;
          v3510 = *((unsigned int *)a2 + 4);
          v3511 = *a2;
          if (v1958 && v3507 < v3508)
          {
            v3512 = *(int64x2_t *)v3509;
            v3513 = (int64x2_t *)(v3511 + 8 * (v3508 + (_DWORD)v3510 * v3507));
            v3514 = *(int64x2_t *)(v3509 + 32);
            v3515 = *(_OWORD *)(v3509 + 48);
            v3516 = *(_OWORD *)(v3509 + 64);
            v3517 = *(_OWORD *)(v3509 + 80);
            v3518 = *(int64x2_t *)(v3509 + 96);
            v3519 = *(int64x2_t *)(v3509 + 112);
            v3520 = *(int64x2_t *)(v3509 + 128);
            v3521 = *(_OWORD *)(v3509 + 144);
            v3522 = *(_OWORD *)(v3509 + 160);
            v3523 = *(_OWORD *)(v3509 + 176);
            v3513[1] = *(int64x2_t *)(v3509 + 16);
            v3513[2] = v3514;
            *v3513 = v3512;
            v3524 = &v3513->i8[8 * v3510];
            *((_OWORD *)v3524 + 1) = v3516;
            *((_OWORD *)v3524 + 2) = v3517;
            *(_OWORD *)v3524 = v3515;
            v3525 = &v3513[v3510];
            v3525[1] = v3519;
            v3525[2] = v3520;
            *v3525 = v3518;
            v3526 = &v3513->i8[24 * v3510];
            *((_OWORD *)v3526 + 1) = v3522;
            *((_OWORD *)v3526 + 2) = v3523;
            *(_OWORD *)v3526 = v3521;
          }
          else
          {
            v3527 = *(int64x2_t *)(v3509 + 16);
            v3528 = (int64x2_t *)(v3511 + 8 * (v3507 + (_DWORD)v3510 * v3508));
            v3530 = *(int64x2_t *)(v3509 + 64);
            v3529 = *(int64x2_t *)(v3509 + 80);
            v3531 = *(int64x2_t *)(v3509 + 32);
            v3532 = *(int64x2_t *)(v3509 + 48);
            v3534 = *(int64x2_t *)(v3509 + 96);
            v3533 = *(int64x2_t *)(v3509 + 112);
            v3536 = *(int64x2_t *)(v3509 + 160);
            v3535 = *(int64x2_t *)(v3509 + 176);
            v3537 = *(int64x2_t *)(v3509 + 128);
            v3538 = *(int64x2_t *)(v3509 + 144);
            v3539 = vzip2q_s64(*(int64x2_t *)v3509, v3532);
            *v3528 = vzip1q_s64(*(int64x2_t *)v3509, v3532);
            v3528[1] = vzip1q_s64(v3534, v3538);
            v3540 = (int64x2_t *)((char *)v3528 + 8 * v3510);
            *v3540 = v3539;
            v3540[1] = vzip2q_s64(v3534, v3538);
            v3541 = &v3528[v3510];
            *v3541 = vzip1q_s64(v3527, v3530);
            v3541[1] = vzip1q_s64(v3533, v3536);
            v3542 = (int64x2_t *)((char *)v3528 + 24 * v3510);
            *v3542 = vzip2q_s64(v3527, v3530);
            v3542[1] = vzip2q_s64(v3533, v3536);
            v3543 = &v3528[2 * v3510];
            *v3543 = vzip1q_s64(v3531, v3529);
            v3543[1] = vzip1q_s64(v3537, v3535);
            v3544 = (int64x2_t *)((char *)v3528 + 40 * v3510);
            *v3544 = vzip2q_s64(v3531, v3529);
            v3544[1] = vzip2q_s64(v3537, v3535);
          }
          v3545 = v3502 + 1;
          while (v3545 != v3505)
          {
            ++v3504;
            v3546 = *v3545++;
            v3506 = v3546;
            if (v3546 != -1)
            {
              v3502 = v3545 - 1;
              goto LABEL_1720;
            }
          }
          v3497 = *(_DWORD *)(result + 10380);
        }
      }
      ++v3498;
      ++v3499;
    }
    while (v3498 < v3497);
    v1958 = *a5;
  }
  v3550 = *(_DWORD *)(result + 11820);
  if (v3550)
  {
    v3551 = 0;
    v3552 = a4[24];
    do
    {
      v3553 = *(_QWORD *)(result + 11896);
      v3554 = *(_DWORD *)(result + 11920) * v3551;
      v3555 = (uint64_t *)(v3553 + 8 * v3554);
      v3556 = *(_DWORD *)(result + 11816);
      if (v3556 && *v3555 == -1)
      {
        v3557 = 0;
        v3594 = 8 * (v3556 + v3554) - 8 * v3554 - 8;
        v3595 = v3553 + 8 * v3554;
        while (v3594)
        {
          v3555 = (uint64_t *)(v3595 + 8);
          ++v3557;
          v3596 = *(_QWORD *)(v3595 + 8);
          v3594 -= 8;
          v3595 += 8;
          if (v3596 != -1)
            goto LABEL_1740;
        }
      }
      else
      {
        v3557 = 0;
LABEL_1740:
        v3558 = (uint64_t *)(v3553 + 8 * (v3554 + v3556));
        if (v3555 != v3558)
        {
          v3559 = *v3555;
LABEL_1742:
          v3560 = *v3552;
          v3561 = *(_DWORD *)(a3[6] + 4 * v3557);
          v3562 = *(_QWORD *)(result + 11824) + 8 * v3559;
          v3563 = *((unsigned int *)a2 + 4);
          v3564 = *a2;
          if (v1958 && v3560 < v3561)
          {
            v3565 = *(int64x2_t *)v3562;
            v3566 = (int64x2_t *)(v3564 + 8 * (v3561 + (_DWORD)v3563 * v3560));
            v3567 = *(int64x2_t *)(v3562 + 32);
            v3568 = *(_OWORD *)(v3562 + 48);
            v3569 = *(_OWORD *)(v3562 + 64);
            v3570 = *(_OWORD *)(v3562 + 80);
            v3571 = *(int64x2_t *)(v3562 + 96);
            v3572 = *(int64x2_t *)(v3562 + 112);
            v3573 = *(int64x2_t *)(v3562 + 128);
            v3566[1] = *(int64x2_t *)(v3562 + 16);
            v3566[2] = v3567;
            *v3566 = v3565;
            v3574 = &v3566->i8[8 * v3563];
            *((_OWORD *)v3574 + 1) = v3569;
            *((_OWORD *)v3574 + 2) = v3570;
            *(_OWORD *)v3574 = v3568;
            v3575 = &v3566[v3563];
            v3575[1] = v3572;
            v3575[2] = v3573;
            *v3575 = v3571;
          }
          else
          {
            v3576 = *(int64x2_t *)(v3562 + 16);
            v3577 = (int64x2_t *)(v3564 + 8 * (v3560 + (_DWORD)v3563 * v3561));
            v3579 = *(int64x2_t *)(v3562 + 64);
            v3578 = *(int64x2_t *)(v3562 + 80);
            v3580 = *(int64x2_t *)(v3562 + 32);
            v3581 = *(int64x2_t *)(v3562 + 48);
            v3583 = *(_OWORD *)(v3562 + 112);
            v3582 = *(_OWORD *)(v3562 + 128);
            v3584 = *(_OWORD *)(v3562 + 96);
            v3585 = vzip1q_s64(*(int64x2_t *)v3562, v3581);
            v3586 = vzip2q_s64(*(int64x2_t *)v3562, v3581);
            v3577[1].i64[0] = v3584;
            *v3577 = v3585;
            v3587 = (int64x2_t *)((char *)v3577 + 8 * v3563);
            *v3587 = v3586;
            v3587[1].i64[0] = *((_QWORD *)&v3584 + 1);
            v3588 = &v3577[v3563];
            v3588[1].i64[0] = v3583;
            *v3588 = vzip1q_s64(v3576, v3579);
            v3589 = (int64x2_t *)((char *)v3577 + 24 * v3563);
            v3589[1].i64[0] = *((_QWORD *)&v3583 + 1);
            *v3589 = vzip2q_s64(v3576, v3579);
            v3590 = &v3577[2 * v3563];
            v3590[1].i64[0] = v3582;
            *v3590 = vzip1q_s64(v3580, v3578);
            v3591 = (int64x2_t *)((char *)v3577 + 40 * v3563);
            v3591[1].i64[0] = *((_QWORD *)&v3582 + 1);
            *v3591 = vzip2q_s64(v3580, v3578);
          }
          v3592 = v3555 + 1;
          while (v3592 != v3558)
          {
            ++v3557;
            v3593 = *v3592++;
            v3559 = v3593;
            if (v3593 != -1)
            {
              v3555 = v3592 - 1;
              goto LABEL_1742;
            }
          }
          v3550 = *(_DWORD *)(result + 11820);
        }
      }
      ++v3551;
      ++v3552;
    }
    while (v3551 < v3550);
    v1958 = *a5;
  }
  v3597 = *(_DWORD *)(result + 13260);
  if (v3597)
  {
    v3598 = 0;
    v3599 = a4[27];
    do
    {
      v3600 = *(_QWORD *)(result + 13336);
      v3601 = *(_DWORD *)(result + 13360) * v3598;
      v3602 = (uint64_t *)(v3600 + 8 * v3601);
      v3603 = *(_DWORD *)(result + 13256);
      if (v3603 && *v3602 == -1)
      {
        v3604 = 0;
        v3641 = 8 * (v3603 + v3601) - 8 * v3601 - 8;
        v3642 = v3600 + 8 * v3601;
        while (v3641)
        {
          v3602 = (uint64_t *)(v3642 + 8);
          ++v3604;
          v3643 = *(_QWORD *)(v3642 + 8);
          v3641 -= 8;
          v3642 += 8;
          if (v3643 != -1)
            goto LABEL_1762;
        }
      }
      else
      {
        v3604 = 0;
LABEL_1762:
        v3605 = (uint64_t *)(v3600 + 8 * (v3601 + v3603));
        if (v3602 != v3605)
        {
          v3606 = *v3602;
LABEL_1764:
          v3607 = *v3599;
          v3608 = *(_DWORD *)(a3[6] + 4 * v3604);
          v3609 = *(_QWORD *)(result + 13264) + 8 * v3606;
          v3610 = *((unsigned int *)a2 + 4);
          v3611 = *a2;
          if (v1958 && v3607 < v3608)
          {
            v3612 = *(int64x2_t *)v3609;
            v3613 = (int64x2_t *)(v3611 + 8 * (v3608 + (_DWORD)v3610 * v3607));
            v3614 = *(int64x2_t *)(v3609 + 32);
            v3615 = *(_OWORD *)(v3609 + 48);
            v3616 = *(_OWORD *)(v3609 + 64);
            v3617 = *(_OWORD *)(v3609 + 80);
            v3618 = *(int64x2_t *)(v3609 + 96);
            v3619 = *(int64x2_t *)(v3609 + 112);
            v3620 = *(int64x2_t *)(v3609 + 128);
            v3613[1] = *(int64x2_t *)(v3609 + 16);
            v3613[2] = v3614;
            *v3613 = v3612;
            v3621 = &v3613->i8[8 * v3610];
            *((_OWORD *)v3621 + 1) = v3616;
            *((_OWORD *)v3621 + 2) = v3617;
            *(_OWORD *)v3621 = v3615;
            v3622 = &v3613[v3610];
            v3622[1] = v3619;
            v3622[2] = v3620;
            *v3622 = v3618;
          }
          else
          {
            v3623 = *(int64x2_t *)(v3609 + 16);
            v3624 = (int64x2_t *)(v3611 + 8 * (v3607 + (_DWORD)v3610 * v3608));
            v3626 = *(int64x2_t *)(v3609 + 64);
            v3625 = *(int64x2_t *)(v3609 + 80);
            v3627 = *(int64x2_t *)(v3609 + 32);
            v3628 = *(int64x2_t *)(v3609 + 48);
            v3630 = *(_OWORD *)(v3609 + 112);
            v3629 = *(_OWORD *)(v3609 + 128);
            v3631 = *(_OWORD *)(v3609 + 96);
            v3632 = vzip1q_s64(*(int64x2_t *)v3609, v3628);
            v3633 = vzip2q_s64(*(int64x2_t *)v3609, v3628);
            v3624[1].i64[0] = v3631;
            *v3624 = v3632;
            v3634 = (int64x2_t *)((char *)v3624 + 8 * v3610);
            *v3634 = v3633;
            v3634[1].i64[0] = *((_QWORD *)&v3631 + 1);
            v3635 = &v3624[v3610];
            v3635[1].i64[0] = v3630;
            *v3635 = vzip1q_s64(v3623, v3626);
            v3636 = (int64x2_t *)((char *)v3624 + 24 * v3610);
            v3636[1].i64[0] = *((_QWORD *)&v3630 + 1);
            *v3636 = vzip2q_s64(v3623, v3626);
            v3637 = &v3624[2 * v3610];
            v3637[1].i64[0] = v3629;
            *v3637 = vzip1q_s64(v3627, v3625);
            v3638 = (int64x2_t *)((char *)v3624 + 40 * v3610);
            v3638[1].i64[0] = *((_QWORD *)&v3629 + 1);
            *v3638 = vzip2q_s64(v3627, v3625);
          }
          v3639 = v3602 + 1;
          while (v3639 != v3605)
          {
            ++v3604;
            v3640 = *v3639++;
            v3606 = v3640;
            if (v3640 != -1)
            {
              v3602 = v3639 - 1;
              goto LABEL_1764;
            }
          }
          v3597 = *(_DWORD *)(result + 13260);
        }
      }
      ++v3598;
      ++v3599;
    }
    while (v3598 < v3597);
    v1958 = *a5;
  }
  v3644 = *(_DWORD *)(result + 156);
  if (v3644)
  {
    v3645 = 0;
    v3646 = *a4;
    do
    {
      v3647 = *(_QWORD *)(result + 232);
      v3648 = *(_DWORD *)(result + 256) * v3645;
      v3649 = (uint64_t *)(v3647 + 8 * v3648);
      v3650 = *(_DWORD *)(result + 152);
      if (v3650 && *v3649 == -1)
      {
        v3651 = 0;
        v3736 = 8 * (v3650 + v3648) - 8 * v3648 - 8;
        v3737 = v3647 + 8 * v3648;
        while (v3736)
        {
          v3649 = (uint64_t *)(v3737 + 8);
          ++v3651;
          v3738 = *(_QWORD *)(v3737 + 8);
          v3736 -= 8;
          v3737 += 8;
          if (v3738 != -1)
            goto LABEL_1784;
        }
      }
      else
      {
        v3651 = 0;
LABEL_1784:
        v3652 = (uint64_t *)(v3647 + 8 * (v3648 + v3650));
        if (v3649 != v3652)
        {
          v3653 = *v3649;
LABEL_1786:
          v3654 = *v3646;
          v3655 = *(_DWORD *)(a3[3] + 4 * v3651);
          v3656 = *(_QWORD *)(result + 160) + 8 * v3653;
          v3657 = *((unsigned int *)a2 + 4);
          v3658 = *a2;
          if (v1958 && v3654 < v3655)
          {
            v3659 = *(_QWORD *)(v3656 + 64);
            v3660 = v3658 + 8 * (v3655 + (_DWORD)v3657 * v3654);
            v3661 = *(_OWORD *)(v3656 + 48);
            v3662 = *(int64x2_t *)v3656;
            v3663 = *(_OWORD *)(v3656 + 16);
            v3664 = *(_OWORD *)(v3656 + 72);
            v3665 = *(_OWORD *)(v3656 + 88);
            v3666 = *(_OWORD *)(v3656 + 104);
            v3667 = *(_OWORD *)(v3656 + 120);
            v3668 = *(_QWORD *)(v3656 + 136);
            v3669 = *(_OWORD *)(v3656 + 144);
            v3670 = *(_OWORD *)(v3656 + 160);
            v3671 = *(_OWORD *)(v3656 + 176);
            v3672 = *(_OWORD *)(v3656 + 192);
            v3673 = *(_QWORD *)(v3656 + 208);
            v3674 = *(_OWORD *)(v3656 + 232);
            v3675 = *(_OWORD *)(v3656 + 248);
            v3676 = *(_OWORD *)(v3656 + 216);
            v3677 = *(_OWORD *)(v3656 + 264);
            v3678 = *(_QWORD *)(v3656 + 280);
            v3679 = *(_OWORD *)(v3656 + 288);
            v3680 = *(_OWORD *)(v3656 + 304);
            v3681 = *(_OWORD *)(v3656 + 320);
            v3682 = *(_OWORD *)(v3656 + 336);
            v3683 = *(_QWORD *)(v3656 + 352);
            v3684 = *(_OWORD *)(v3656 + 360);
            v3685 = *(_OWORD *)(v3656 + 376);
            v3686 = *(_OWORD *)(v3656 + 392);
            v3687 = *(_OWORD *)(v3656 + 408);
            v3688 = *(_QWORD *)(v3656 + 424);
            *(_OWORD *)(v3660 + 32) = *(_OWORD *)(v3656 + 32);
            *(_OWORD *)(v3660 + 48) = v3661;
            *(_QWORD *)(v3660 + 64) = v3659;
            *(int64x2_t *)v3660 = v3662;
            *(_OWORD *)(v3660 + 16) = v3663;
            v3689 = v3660 + 8 * v3657;
            *(_QWORD *)(v3689 + 64) = v3668;
            *(_OWORD *)(v3689 + 32) = v3666;
            *(_OWORD *)(v3689 + 48) = v3667;
            *(_OWORD *)v3689 = v3664;
            *(_OWORD *)(v3689 + 16) = v3665;
            v3690 = v3660 + 16 * v3657;
            *(_QWORD *)(v3690 + 64) = v3673;
            *(_OWORD *)(v3690 + 32) = v3671;
            *(_OWORD *)(v3690 + 48) = v3672;
            *(_OWORD *)v3690 = v3669;
            *(_OWORD *)(v3690 + 16) = v3670;
            v3691 = v3660 + 24 * v3657;
            *(_QWORD *)(v3691 + 64) = v3678;
            *(_OWORD *)(v3691 + 32) = v3675;
            *(_OWORD *)(v3691 + 48) = v3677;
            *(_OWORD *)v3691 = v3676;
            *(_OWORD *)(v3691 + 16) = v3674;
            v3692 = v3660 + 32 * v3657;
            *(_QWORD *)(v3692 + 64) = v3683;
            *(_OWORD *)(v3692 + 32) = v3681;
            *(_OWORD *)(v3692 + 48) = v3682;
            *(_OWORD *)v3692 = v3679;
            *(_OWORD *)(v3692 + 16) = v3680;
            v3693 = v3660 + 40 * v3657;
            *(_QWORD *)(v3693 + 64) = v3688;
            *(_OWORD *)(v3693 + 32) = v3686;
            *(_OWORD *)(v3693 + 48) = v3687;
            *(_OWORD *)v3693 = v3684;
            *(_OWORD *)(v3693 + 16) = v3685;
          }
          else
          {
            v3694.i64[0] = *(_QWORD *)(v3656 + 64);
            v3695 = (int64x2_t *)(v3658 + 8 * (v3654 + (_DWORD)v3657 * v3655));
            v3697 = *(int64x2_t *)(v3656 + 32);
            v3696 = *(int64x2_t *)(v3656 + 48);
            v3698 = *(int64x2_t *)(v3656 + 16);
            v3699 = *(int64x2_t *)(v3656 + 120);
            v3700 = *(int64x2_t *)(v3656 + 104);
            v3701 = *(int64x2_t *)(v3656 + 88);
            v3702 = *(int64x2_t *)(v3656 + 72);
            v3703.i64[0] = *(_QWORD *)(v3656 + 208);
            v3705 = *(int64x2_t *)(v3656 + 176);
            v3704 = *(int64x2_t *)(v3656 + 192);
            v3707 = *(int64x2_t *)(v3656 + 144);
            v3706 = *(int64x2_t *)(v3656 + 160);
            v3708 = *(int64x2_t *)(v3656 + 216);
            v3709 = *(int64x2_t *)(v3656 + 264);
            v3710 = *(int64x2_t *)(v3656 + 248);
            v3711 = *(int64x2_t *)(v3656 + 232);
            v3712.i64[0] = *(_QWORD *)(v3656 + 352);
            v3714 = *(int64x2_t *)(v3656 + 320);
            v3713 = *(int64x2_t *)(v3656 + 336);
            v3716 = *(int64x2_t *)(v3656 + 288);
            v3715 = *(int64x2_t *)(v3656 + 304);
            v3717 = *(int64x2_t *)(v3656 + 392);
            v3718 = *(int64x2_t *)(v3656 + 408);
            v3719 = *(int64x2_t *)(v3656 + 376);
            v3720 = vzip1q_s64(*(int64x2_t *)v3656, v3702);
            v3721 = vzip1q_s64(v3716, *(int64x2_t *)(v3656 + 360));
            v3722 = vzip1q_s64(v3707, v3708);
            v3723 = vzip2q_s64(*(int64x2_t *)v3656, v3702);
            v3724 = vzip2q_s64(v3707, v3708);
            v3725 = vzip2q_s64(v3716, *(int64x2_t *)(v3656 + 360));
            v3694.i64[1] = *(_QWORD *)(v3656 + 136);
            v3703.i64[1] = *(_QWORD *)(v3656 + 280);
            v3712.i64[1] = *(_QWORD *)(v3656 + 424);
            v3695[1] = v3722;
            v3695[2] = v3721;
            *v3695 = v3720;
            v3726 = (int64x2_t *)((char *)v3695 + 8 * v3657);
            v3726[1] = v3724;
            v3726[2] = v3725;
            *v3726 = v3723;
            v3727 = &v3695[v3657];
            v3727[1] = vzip1q_s64(v3706, v3711);
            v3727[2] = vzip1q_s64(v3715, v3719);
            *v3727 = vzip1q_s64(v3698, v3701);
            v3728 = (int64x2_t *)((char *)v3695 + 24 * v3657);
            v3728[1] = vzip2q_s64(v3706, v3711);
            v3728[2] = vzip2q_s64(v3715, v3719);
            *v3728 = vzip2q_s64(v3698, v3701);
            v3729 = &v3695[2 * v3657];
            v3729[1] = vzip1q_s64(v3705, v3710);
            v3729[2] = vzip1q_s64(v3714, v3717);
            *v3729 = vzip1q_s64(v3697, v3700);
            v3730 = (int64x2_t *)((char *)v3695 + 40 * v3657);
            v3730[1] = vzip2q_s64(v3705, v3710);
            v3730[2] = vzip2q_s64(v3714, v3717);
            *v3730 = vzip2q_s64(v3697, v3700);
            v3731 = &v3695[3 * v3657];
            v3731[1] = vzip1q_s64(v3704, v3709);
            v3731[2] = vzip1q_s64(v3713, v3718);
            *v3731 = vzip1q_s64(v3696, v3699);
            v3732 = (int64x2_t *)((char *)v3695 + 56 * v3657);
            v3732[1] = vzip2q_s64(v3704, v3709);
            v3732[2] = vzip2q_s64(v3713, v3718);
            *v3732 = vzip2q_s64(v3696, v3699);
            v3733 = &v3695[4 * v3657];
            v3733[1] = v3703;
            v3733[2] = v3712;
            *v3733 = v3694;
          }
          v3734 = v3649 + 1;
          while (v3734 != v3652)
          {
            ++v3651;
            v3735 = *v3734++;
            v3653 = v3735;
            if (v3735 != -1)
            {
              v3649 = v3734 - 1;
              goto LABEL_1786;
            }
          }
          v3644 = *(_DWORD *)(result + 156);
        }
      }
      ++v3645;
      ++v3646;
    }
    while (v3645 < v3644);
    v1958 = *a5;
  }
  v3739 = *(_DWORD *)(result + 1596);
  if (v3739)
  {
    v3740 = 0;
    v3741 = a4[3];
    do
    {
      v3742 = *(_QWORD *)(result + 1672);
      v3743 = *(_DWORD *)(result + 1696) * v3740;
      v3744 = (uint64_t *)(v3742 + 8 * v3743);
      v3745 = *(_DWORD *)(result + 1592);
      if (v3745 && *v3744 == -1)
      {
        v3746 = 0;
        v3875 = 8 * (v3745 + v3743) - 8 * v3743 - 8;
        v3876 = v3742 + 8 * v3743;
        while (v3875)
        {
          v3744 = (uint64_t *)(v3876 + 8);
          ++v3746;
          v3877 = *(_QWORD *)(v3876 + 8);
          v3875 -= 8;
          v3876 += 8;
          if (v3877 != -1)
            goto LABEL_1806;
        }
      }
      else
      {
        v3746 = 0;
LABEL_1806:
        v3747 = (uint64_t *)(v3742 + 8 * (v3743 + v3745));
        if (v3744 != v3747)
        {
          v3748 = *v3744;
LABEL_1808:
          v3749 = *v3741;
          v3750 = *(_DWORD *)(a3[3] + 4 * v3746);
          v3751 = *(_QWORD *)(result + 1600) + 8 * v3748;
          v3752 = *((unsigned int *)a2 + 4);
          v3753 = *a2;
          if (v1958 && v3749 < v3750)
          {
            v5044 = *(_QWORD *)(v3751 + 64);
            v3754 = v3753 + 8 * (v3750 + (_DWORD)v3752 * v3749);
            v3755 = *(_OWORD *)(v3751 + 32);
            v5037 = *(_OWORD *)(v3751 + 48);
            v5039 = *(int64x2_t *)v3751;
            v5047 = *(_OWORD *)(v3751 + 88);
            v5049 = *(int8x16_t *)(v3751 + 72);
            v5042 = *(_OWORD *)(v3751 + 104);
            v3756 = *(_OWORD *)(v3751 + 120);
            v3757 = *(_QWORD *)(v3751 + 136);
            v5028 = *(_QWORD *)(v3751 + 208);
            v3758 = *(int8x16_t *)(v3751 + 176);
            v3759 = *(int8x16_t *)(v3751 + 192);
            v3761 = *(int8x16_t *)(v3751 + 144);
            v3760 = *(int8x16_t *)(v3751 + 160);
            v5020 = *(_QWORD *)(v3751 + 280);
            v3762 = *(int8x16_t *)(v3751 + 248);
            v3763 = *(int8x16_t *)(v3751 + 232);
            v3764 = *(int8x16_t *)(v3751 + 216);
            v3765 = *(int8x16_t *)(v3751 + 264);
            v5022 = *(_QWORD *)(v3751 + 352);
            v3790 = *(int8x16_t *)(v3751 + 320);
            v3786 = *(int64x2_t *)(v3751 + 336);
            v3766 = *(int8x16_t *)(v3751 + 288);
            v3767 = *(int8x16_t *)(v3751 + 304);
            v5019 = *(_QWORD *)(v3751 + 424);
            v3768 = *(int8x16_t *)(v3751 + 392);
            v3795 = *(int8x16_t *)(v3751 + 408);
            v3769 = *(int8x16_t *)(v3751 + 360);
            v3770 = *(int8x16_t *)(v3751 + 376);
            v5024 = *(_QWORD *)(v3751 + 496);
            v3771 = *(int8x16_t *)(v3751 + 464);
            v3772 = *(int8x16_t *)(v3751 + 480);
            v3774 = *(int8x16_t *)(v3751 + 432);
            v3773 = *(int8x16_t *)(v3751 + 448);
            v5018 = *(_QWORD *)(v3751 + 568);
            v3799 = *(int8x16_t *)(v3751 + 536);
            v3775 = *(int8x16_t *)(v3751 + 552);
            v3776 = *(int8x16_t *)(v3751 + 504);
            v3797 = *(int8x16_t *)(v3751 + 520);
            v5030 = *(_QWORD *)(v3751 + 640);
            v3798 = *(int8x16_t *)(v3751 + 608);
            v3777 = *(int8x16_t *)(v3751 + 624);
            v3779 = *(int8x16_t *)(v3751 + 576);
            v3778 = *(int8x16_t *)(v3751 + 592);
            *(_OWORD *)(v3754 + 16) = *(_OWORD *)(v3751 + 16);
            *(_OWORD *)(v3754 + 32) = v3755;
            *(_OWORD *)(v3754 + 48) = v5037;
            *(_QWORD *)(v3754 + 64) = v5044;
            *(int64x2_t *)v3754 = v5039;
            v3780 = v3754 + 8 * v3752;
            *(_QWORD *)(v3780 + 64) = v3757;
            *(_OWORD *)(v3780 + 32) = v5042;
            *(_OWORD *)(v3780 + 48) = v3756;
            *(_OWORD *)(v3780 + 16) = v5047;
            *(int8x16_t *)v3780 = v5049;
            v5048 = v3759.i64[0];
            v5049.i64[0] = v3760.i64[0];
            v3781 = vextq_s8(v3759, v3759, 8uLL).u64[0];
            v5023 = v3758.i64[0];
            v3782 = vextq_s8(v3758, v3758, 8uLL).u64[0];
            v5000 = vextq_s8(v3760, v3760, 8uLL).u64[0];
            v5009 = v3761.i64[0];
            *(_QWORD *)&v3756 = vextq_s8(v3761, v3761, 8uLL).u64[0];
            v5043 = v3762.i64[0];
            v5045 = v3764.i64[0];
            v3783 = vextq_s8(v3762, v3762, 8uLL).u64[0];
            v5038 = v3763.i64[0];
            v5040 = v3767.i64[0];
            v3784 = vextq_s8(v3763, v3763, 8uLL).u64[0];
            v3760.i64[0] = vextq_s8(v3764, v3764, 8uLL).u64[0];
            v5021 = v3765.i64[0];
            v3764.i64[0] = vextq_s8(v3765, v3765, 8uLL).u64[0];
            v5012 = v3786.i64[0];
            v5013 = v3766.i64[0];
            v3785 = vextq_s8((int8x16_t)v3786, (int8x16_t)v3786, 8uLL).u64[0];
            v3786.i64[0] = v3790.i64[0];
            v3787 = vextq_s8(v3790, v3790, 8uLL).u64[0];
            v3788 = vextq_s8(v3767, v3767, 8uLL).u64[0];
            v3789 = vextq_s8(v3766, v3766, 8uLL).u64[0];
            v5026 = v3795.i64[0];
            v3766.i64[0] = vextq_s8(v3795, v3795, 8uLL).u64[0];
            v3790.i64[0] = v3768.i64[0];
            v3791 = vextq_s8(v3768, v3768, 8uLL).u64[0];
            v5010 = v3770.i64[0];
            v5011 = v3774.i64[0];
            v3792 = vextq_s8(v3770, v3770, 8uLL).u64[0];
            v5031 = v3777.i64[0];
            v5032 = v3769.i64[0];
            v3770.i64[0] = vextq_s8(v3769, v3769, 8uLL).u64[0];
            v5007 = v3771.i64[0];
            v5008 = v3772.i64[0];
            v3769.i64[0] = vextq_s8(v3772, v3772, 8uLL).u64[0];
            v3793 = v3760.i64[0];
            v5004 = vextq_s8(v3771, v3771, 8uLL).u64[0];
            v5005 = v3769.i64[0];
            v5006 = v3773.i64[0];
            v5003 = vextq_s8(v3773, v3773, 8uLL).u64[0];
            v5002 = vextq_s8(v3775, v3775, 8uLL).u64[0];
            v3794 = vextq_s8(v3799, v3799, 8uLL).u64[0];
            v3795.i64[0] = v3797.i64[0];
            v3796 = vextq_s8(v3797, v3797, 8uLL).u64[0];
            v3797.i64[0] = v3776.i64[0];
            v5001 = vextq_s8(v3776, v3776, 8uLL).u64[0];
            v5014 = vextq_s8(v3777, v3777, 8uLL).u64[0];
            v5034 = v3798.i64[0];
            v5035 = v3779.i64[0];
            v3760.i64[0] = vextq_s8(v3798, v3798, 8uLL).u64[0];
            v3798.i64[0] = v3799.i64[0];
            v3799.i64[0] = v3775.i64[0];
            v5015 = v3760.i64[0];
            v3800 = v3756;
            v3801 = v3764.i64[0];
            v5036 = v3778.i64[0];
            v5016 = vextq_s8(v3778, v3778, 8uLL).u64[0];
            v3778.i64[0] = vextq_s8(v3779, v3779, 8uLL).u64[0];
            v3802 = v3770.i64[0];
            v3803 = v3766.i64[0];
            v3804 = vextq_s8(v3774, v3774, 8uLL).u64[0];
            v5017 = v3778.i64[0];
          }
          else
          {
            v3805 = *(int64x2_t *)(v3751 + 32);
            v3806 = *(int64x2_t *)(v3751 + 48);
            v3807 = *(int64x2_t *)(v3751 + 16);
            v3808 = *(int64x2_t *)(v3751 + 120);
            v3809 = *(int64x2_t *)(v3751 + 104);
            v3810 = *(int64x2_t *)(v3751 + 88);
            v3811 = *(int64x2_t *)(v3751 + 72);
            v3813 = *(int64x2_t *)(v3751 + 176);
            v3812 = *(int64x2_t *)(v3751 + 192);
            v3814 = *(int64x2_t *)(v3751 + 144);
            v3815 = *(int64x2_t *)(v3751 + 160);
            v3817 = *(int64x2_t *)(v3751 + 320);
            v3816 = *(int64x2_t *)(v3751 + 336);
            v3819 = *(int64x2_t *)(v3751 + 288);
            v3818 = *(int64x2_t *)(v3751 + 304);
            v3820 = *(int64x2_t *)(v3751 + 448);
            v3786 = *(int64x2_t *)(v3751 + 464);
            *(_QWORD *)&v3821 = vdupq_laneq_s64(v3814, 1).u64[0];
            *((_QWORD *)&v3821 + 1) = *(_QWORD *)(v3751 + 224);
            v5046 = v3821;
            v3822 = *(int64x2_t *)(v3751 + 432);
            v5033 = vzip1q_s64(v3814, *(int64x2_t *)(v3751 + 216));
            *(_QWORD *)&v3821 = vdupq_laneq_s64(v3819, 1).u64[0];
            *((_QWORD *)&v3821 + 1) = *(_QWORD *)(v3751 + 368);
            v5025 = vzip1q_s64(v3822, *(int64x2_t *)(v3751 + 504));
            v5027 = vzip1q_s64(v3819, *(int64x2_t *)(v3751 + 360));
            *(_QWORD *)&v3823 = vdupq_laneq_s64(v3822, 1).u64[0];
            *((_QWORD *)&v3823 + 1) = *(_QWORD *)(v3751 + 512);
            v5029 = vzip1q_s64(*(int64x2_t *)v3751, v3811);
            v5041 = vzip2q_s64(*(int64x2_t *)v3751, v3811);
            v5049 = (int8x16_t)vzip1q_s64(v3815, *(int64x2_t *)(v3751 + 232));
            v3822.i64[0] = vdupq_laneq_s64(v3815, 1).u64[0];
            v3822.i64[1] = *(_QWORD *)(v3751 + 240);
            v3824 = (int8x16_t)vzip1q_s64(v3818, *(int64x2_t *)(v3751 + 376));
            v3825.i64[0] = vdupq_laneq_s64(v3818, 1).u64[0];
            v3825.i64[1] = *(_QWORD *)(v3751 + 384);
            v3826 = (int8x16_t)vzip1q_s64(v3807, v3810);
            v3827 = (int8x16_t)vzip2q_s64(v3807, v3810);
            v3828 = (int8x16_t)vzip1q_s64(v3820, *(int64x2_t *)(v3751 + 520));
            v3829.i64[0] = vdupq_laneq_s64(v3820, 1).u64[0];
            v3829.i64[1] = *(_QWORD *)(v3751 + 528);
            v3830 = (int8x16_t)vzip1q_s64(v3813, *(int64x2_t *)(v3751 + 248));
            v3814.i64[0] = vdupq_laneq_s64(v3813, 1).u64[0];
            v3814.i64[1] = *(_QWORD *)(v3751 + 256);
            v3831 = (int8x16_t)vzip1q_s64(v3805, v3809);
            v3790 = (int8x16_t)vzip2q_s64(v3805, v3809);
            v3832 = (int8x16_t)vzip1q_s64(v3817, *(int64x2_t *)(v3751 + 392));
            v3817.i64[0] = vdupq_laneq_s64(v3817, 1).u64[0];
            v3817.i64[1] = *(_QWORD *)(v3751 + 400);
            v3833 = (int8x16_t)vzip1q_s64(v3786, *(int64x2_t *)(v3751 + 536));
            v3834.i64[0] = vdupq_laneq_s64(v3786, 1).u64[0];
            v3834.i64[1] = *(_QWORD *)(v3751 + 544);
            v3835 = (int8x16_t)vzip1q_s64(v3806, v3808);
            v3836 = (int8x16_t)vzip2q_s64(v3806, v3808);
            v3837 = (int8x16_t)vzip1q_s64(v3812, *(int64x2_t *)(v3751 + 264));
            v3812.i64[0] = vdupq_laneq_s64(v3812, 1).u64[0];
            v3812.i64[1] = *(_QWORD *)(v3751 + 272);
            v3838 = (int8x16_t)vzip1q_s64(v3816, *(int64x2_t *)(v3751 + 408));
            v3798.i64[0] = vdupq_laneq_s64(v3816, 1).u64[0];
            v3798.i64[1] = *(_QWORD *)(v3751 + 416);
            v3839 = *(int64x2_t *)(v3751 + 480);
            v3840 = (int8x16_t)vzip1q_s64(v3839, *(int64x2_t *)(v3751 + 552));
            v3799.i64[0] = vdupq_laneq_s64(v3839, 1).u64[0];
            v3799.i64[1] = *(_QWORD *)(v3751 + 560);
            v3754 = v3753 + 8 * (v3749 + (_DWORD)v3752 * v3750);
            v5035 = *(_QWORD *)(v3751 + 64);
            v5017 = *(_QWORD *)(v3751 + 136);
            v5036 = *(_QWORD *)(v3751 + 208);
            v5016 = *(_QWORD *)(v3751 + 280);
            v5034 = *(_QWORD *)(v3751 + 352);
            v5015 = *(_QWORD *)(v3751 + 424);
            v5031 = *(_QWORD *)(v3751 + 496);
            v5014 = *(_QWORD *)(v3751 + 568);
            v5030 = *(_QWORD *)(v3751 + 640);
            v3795 = *(int8x16_t *)(v3751 + 608);
            v3841 = *(int8x16_t *)(v3751 + 624);
            v3797 = *(int8x16_t *)(v3751 + 576);
            v3842 = *(int8x16_t *)(v3751 + 592);
            *(int64x2_t *)(v3754 + 32) = v5027;
            *(int64x2_t *)(v3754 + 48) = v5025;
            *(int64x2_t *)v3754 = v5029;
            *(int64x2_t *)(v3754 + 16) = v5033;
            v3843 = v3754 + 8 * v3752;
            *(_QWORD *)(v3754 + 64) = v3797.i64[0];
            *(_QWORD *)(v3843 + 64) = v3797.i64[1];
            *(_OWORD *)(v3843 + 32) = v3821;
            *(_OWORD *)(v3843 + 48) = v3823;
            *(_OWORD *)(v3843 + 16) = v5046;
            *(int64x2_t *)v3843 = v5041;
            v5000 = vextq_s8(v5049, v5049, 8uLL).u64[0];
            v5009 = v3826.i64[0];
            v4999 = vextq_s8(v3826, v3826, 8uLL).u64[0];
            v5045 = v3827.i64[0];
            v5048 = v3828.i64[0];
            *(_QWORD *)&v3823 = vextq_s8(v3828, v3828, 8uLL).u64[0];
            v5023 = v3824.i64[0];
            v3828.i64[0] = vextq_s8(v3824, v3824, 8uLL).u64[0];
            *(_QWORD *)&v3821 = vextq_s8(v3827, v3827, 8uLL).u64[0];
            v3801 = vextq_s8(v3829, v3829, 8uLL).u64[0];
            v5040 = v3830.i64[0];
            v5043 = v3825.i64[0];
            v3826.i64[0] = vextq_s8(v3825, v3825, 8uLL).u64[0];
            v5038 = v3822.i64[0];
            v3784 = vextq_s8((int8x16_t)v3822, (int8x16_t)v3822, 8uLL).u64[0];
            v5026 = v3834.i64[0];
            v5028 = v3842.i64[0];
            v5020 = vextq_s8(v3842, v3842, 8uLL).u64[0];
            v5021 = v3829.i64[0];
            v3829.i64[0] = vextq_s8(v3830, v3830, 8uLL).u64[0];
            v5012 = v3833.i64[0];
            v5013 = v3831.i64[0];
            v3797.i64[0] = vextq_s8(v3831, v3831, 8uLL).u64[0];
            v3785 = vextq_s8(v3833, v3833, 8uLL).u64[0];
            v3786.i64[0] = v3832.i64[0];
            v5032 = v3790.i64[0];
            v3813.i64[0] = vextq_s8(v3790, v3790, 8uLL).u64[0];
            v3831.i64[0] = vextq_s8(v3834, v3834, 8uLL).u64[0];
            v3789 = v3797.i64[0];
            v3790.i64[0] = v3817.i64[0];
            v3791 = vextq_s8((int8x16_t)v3817, (int8x16_t)v3817, 8uLL).u64[0];
            v3803 = v3831.i64[0];
            v5010 = v3814.i64[0];
            v5011 = v3835.i64[0];
            v3831.i64[0] = vextq_s8((int8x16_t)v3814, (int8x16_t)v3814, 8uLL).u64[0];
            v3783 = v3826.i64[0];
            v5022 = v3795.i64[0];
            v5019 = vextq_s8(v3795, v3795, 8uLL).u64[0];
            v3804 = vextq_s8(v3835, v3835, 8uLL).u64[0];
            v3787 = vextq_s8(v3832, v3832, 8uLL).u64[0];
            v5007 = v3838.i64[0];
            v5008 = v3840.i64[0];
            v5005 = vextq_s8(v3840, v3840, 8uLL).u64[0];
            v5006 = v3837.i64[0];
            v3802 = v3813.i64[0];
            v5004 = vextq_s8(v3838, v3838, 8uLL).u64[0];
            v3792 = v3831.i64[0];
            v3781 = v3823;
            v3782 = v3828.i64[0];
            v5003 = vextq_s8(v3837, v3837, 8uLL).u64[0];
            v3788 = v3829.i64[0];
            v3797.i64[0] = v3836.i64[0];
            v5001 = vextq_s8(v3836, v3836, 8uLL).u64[0];
            v5002 = vextq_s8(v3799, v3799, 8uLL).u64[0];
            v3794 = vextq_s8(v3798, v3798, 8uLL).u64[0];
            v3796 = vextq_s8((int8x16_t)v3812, (int8x16_t)v3812, 8uLL).u64[0];
            v5024 = v3841.i64[0];
            v3832.i64[0] = vextq_s8(v3841, v3841, 8uLL).u64[0];
            v3793 = v3821;
            v5018 = v3832.i64[0];
            v3800 = v4999;
            v3795.i64[0] = v3812.i64[0];
          }
          *(_QWORD *)&v3844 = v5009;
          *((_QWORD *)&v3844 + 1) = v3800;
          *(_QWORD *)&v3845 = v5049.i64[0];
          *((_QWORD *)&v3845 + 1) = v5000;
          *(_QWORD *)&v3846 = v5023;
          *((_QWORD *)&v3846 + 1) = v3782;
          *(_QWORD *)&v3847 = v5045;
          *(_QWORD *)&v3848 = v5048;
          *((_QWORD *)&v3848 + 1) = v3781;
          *(_QWORD *)&v3849 = v5021;
          *((_QWORD *)&v3849 + 1) = v3801;
          *(_QWORD *)&v3850 = v5040;
          *(_QWORD *)&v3851 = v5043;
          *((_QWORD *)&v3851 + 1) = v3783;
          *(_QWORD *)&v3852 = v5038;
          *((_QWORD *)&v3852 + 1) = v3784;
          *((_QWORD *)&v3847 + 1) = v3793;
          *(_QWORD *)&v3854 = v5012;
          *(_QWORD *)&v3853 = v5013;
          *((_QWORD *)&v3854 + 1) = v3785;
          v3786.i64[1] = v3787;
          *((_QWORD *)&v3850 + 1) = v3788;
          *((_QWORD *)&v3853 + 1) = v3789;
          *(_QWORD *)&v3855 = v5026;
          *((_QWORD *)&v3855 + 1) = v3803;
          v3790.i64[1] = v3791;
          *(_QWORD *)&v3856 = v5010;
          *(_QWORD *)&v3857 = v5011;
          *((_QWORD *)&v3856 + 1) = v3792;
          *(_QWORD *)&v3858 = v5032;
          *((_QWORD *)&v3858 + 1) = v3802;
          *(_QWORD *)&v3859 = v5007;
          *(_QWORD *)&v3860 = v5008;
          *(_QWORD *)&v3861 = v5006;
          *((_QWORD *)&v3860 + 1) = v5005;
          *((_QWORD *)&v3859 + 1) = v5004;
          *((_QWORD *)&v3861 + 1) = v5003;
          *((_QWORD *)&v3857 + 1) = v3804;
          v3799.i64[1] = v5002;
          v3798.i64[1] = v3794;
          v3795.i64[1] = v3796;
          v3797.i64[1] = v5001;
          *(_QWORD *)&v3862 = v5031;
          *((_QWORD *)&v3862 + 1) = v5014;
          *(_QWORD *)&v3863 = v5034;
          *((_QWORD *)&v3863 + 1) = v5015;
          *(_QWORD *)&v3864 = v5036;
          *((_QWORD *)&v3864 + 1) = v5016;
          *(_QWORD *)&v3865 = v5035;
          *((_QWORD *)&v3865 + 1) = v5017;
          v3866 = v3754 + 16 * v3752;
          *(_OWORD *)v3866 = v3844;
          *(_OWORD *)(v3866 + 16) = v3845;
          *(_OWORD *)(v3866 + 32) = v3846;
          *(_OWORD *)(v3866 + 48) = v3848;
          *(_QWORD *)(v3866 + 64) = v5028;
          v3867 = v3754 + 24 * v3752;
          *(_QWORD *)(v3867 + 64) = v5020;
          *(_OWORD *)(v3867 + 32) = v3851;
          *(_OWORD *)(v3867 + 48) = v3849;
          *(_OWORD *)v3867 = v3847;
          *(_OWORD *)(v3867 + 16) = v3852;
          v3868 = v3754 + 32 * v3752;
          *(_QWORD *)(v3868 + 64) = v5022;
          *(int64x2_t *)(v3868 + 32) = v3786;
          *(_OWORD *)(v3868 + 48) = v3854;
          *(_OWORD *)v3868 = v3853;
          *(_OWORD *)(v3868 + 16) = v3850;
          v3869 = v3754 + 40 * v3752;
          *(_QWORD *)(v3869 + 64) = v5019;
          *(int8x16_t *)(v3869 + 32) = v3790;
          *(_OWORD *)(v3869 + 48) = v3855;
          *(_OWORD *)v3869 = v3858;
          *(_OWORD *)(v3869 + 16) = v3856;
          v3870 = v3754 + 48 * v3752;
          *(_QWORD *)(v3870 + 64) = v5024;
          *(_OWORD *)(v3870 + 32) = v3859;
          *(_OWORD *)(v3870 + 48) = v3860;
          *(_OWORD *)v3870 = v3857;
          *(_OWORD *)(v3870 + 16) = v3861;
          v3871 = (int8x16_t *)(v3754 + 56 * v3752);
          v3871[4].i64[0] = v5018;
          v3871[2] = v3798;
          v3871[3] = v3799;
          *v3871 = v3797;
          v3871[1] = v3795;
          v3872 = v3754 + (v3752 << 6);
          *(_QWORD *)(v3872 + 64) = v5030;
          *(_OWORD *)(v3872 + 32) = v3863;
          *(_OWORD *)(v3872 + 48) = v3862;
          v3873 = v3744 + 1;
          *(_OWORD *)v3872 = v3865;
          *(_OWORD *)(v3872 + 16) = v3864;
          while (v3873 != v3747)
          {
            ++v3746;
            v3874 = *v3873++;
            v3748 = v3874;
            if (v3874 != -1)
            {
              v3744 = v3873 - 1;
              goto LABEL_1808;
            }
          }
          v3739 = *(_DWORD *)(result + 1596);
        }
      }
      ++v3740;
      ++v3741;
    }
    while (v3740 < v3739);
    v1958 = *a5;
  }
  v3878 = *(_DWORD *)(result + 3036);
  if (v3878)
  {
    v3879 = 0;
    v3880 = a4[6];
    do
    {
      v3881 = *(_QWORD *)(result + 3112);
      v3882 = *(_DWORD *)(result + 3136) * v3879;
      v3883 = (uint64_t *)(v3881 + 8 * v3882);
      v3884 = *(_DWORD *)(result + 3032);
      if (v3884 && *v3883 == -1)
      {
        v3885 = 0;
        v3970 = 8 * (v3884 + v3882) - 8 * v3882 - 8;
        v3971 = v3881 + 8 * v3882;
        while (v3970)
        {
          v3883 = (uint64_t *)(v3971 + 8);
          ++v3885;
          v3972 = *(_QWORD *)(v3971 + 8);
          v3970 -= 8;
          v3971 += 8;
          if (v3972 != -1)
            goto LABEL_1828;
        }
      }
      else
      {
        v3885 = 0;
LABEL_1828:
        v3886 = (uint64_t *)(v3881 + 8 * (v3882 + v3884));
        if (v3883 != v3886)
        {
          v3887 = *v3883;
LABEL_1830:
          v3888 = *v3880;
          v3889 = *(_DWORD *)(a3[3] + 4 * v3885);
          v3890 = *(_QWORD *)(result + 3040) + 8 * v3887;
          v3891 = *((unsigned int *)a2 + 4);
          v3892 = *a2;
          if (v1958 && v3888 < v3889)
          {
            v3893 = *(_QWORD *)(v3890 + 64);
            v3894 = v3892 + 8 * (v3889 + (_DWORD)v3891 * v3888);
            v3895 = *(_OWORD *)(v3890 + 48);
            v3896 = *(int64x2_t *)v3890;
            v3897 = *(_OWORD *)(v3890 + 16);
            v3898 = *(_OWORD *)(v3890 + 72);
            v3899 = *(_OWORD *)(v3890 + 88);
            v3900 = *(_OWORD *)(v3890 + 104);
            v3901 = *(_OWORD *)(v3890 + 120);
            v3902 = *(_QWORD *)(v3890 + 136);
            v3903 = *(_OWORD *)(v3890 + 144);
            v3904 = *(_OWORD *)(v3890 + 160);
            v3905 = *(_OWORD *)(v3890 + 176);
            v3906 = *(_OWORD *)(v3890 + 192);
            v3907 = *(_QWORD *)(v3890 + 208);
            v3908 = *(_OWORD *)(v3890 + 232);
            v3909 = *(_OWORD *)(v3890 + 248);
            v3910 = *(_OWORD *)(v3890 + 216);
            v3911 = *(_OWORD *)(v3890 + 264);
            v3912 = *(_QWORD *)(v3890 + 280);
            v3913 = *(_OWORD *)(v3890 + 288);
            v3914 = *(_OWORD *)(v3890 + 304);
            v3915 = *(_OWORD *)(v3890 + 320);
            v3916 = *(_OWORD *)(v3890 + 336);
            v3917 = *(_QWORD *)(v3890 + 352);
            v3918 = *(_OWORD *)(v3890 + 360);
            v3919 = *(_OWORD *)(v3890 + 376);
            v3920 = *(_OWORD *)(v3890 + 392);
            v3921 = *(_OWORD *)(v3890 + 408);
            v3922 = *(_QWORD *)(v3890 + 424);
            *(_OWORD *)(v3894 + 32) = *(_OWORD *)(v3890 + 32);
            *(_OWORD *)(v3894 + 48) = v3895;
            *(_QWORD *)(v3894 + 64) = v3893;
            *(int64x2_t *)v3894 = v3896;
            *(_OWORD *)(v3894 + 16) = v3897;
            v3923 = v3894 + 8 * v3891;
            *(_QWORD *)(v3923 + 64) = v3902;
            *(_OWORD *)(v3923 + 32) = v3900;
            *(_OWORD *)(v3923 + 48) = v3901;
            *(_OWORD *)v3923 = v3898;
            *(_OWORD *)(v3923 + 16) = v3899;
            v3924 = v3894 + 16 * v3891;
            *(_QWORD *)(v3924 + 64) = v3907;
            *(_OWORD *)(v3924 + 32) = v3905;
            *(_OWORD *)(v3924 + 48) = v3906;
            *(_OWORD *)v3924 = v3903;
            *(_OWORD *)(v3924 + 16) = v3904;
            v3925 = v3894 + 24 * v3891;
            *(_QWORD *)(v3925 + 64) = v3912;
            *(_OWORD *)(v3925 + 32) = v3909;
            *(_OWORD *)(v3925 + 48) = v3911;
            *(_OWORD *)v3925 = v3910;
            *(_OWORD *)(v3925 + 16) = v3908;
            v3926 = v3894 + 32 * v3891;
            *(_QWORD *)(v3926 + 64) = v3917;
            *(_OWORD *)(v3926 + 32) = v3915;
            *(_OWORD *)(v3926 + 48) = v3916;
            *(_OWORD *)v3926 = v3913;
            *(_OWORD *)(v3926 + 16) = v3914;
            v3927 = v3894 + 40 * v3891;
            *(_QWORD *)(v3927 + 64) = v3922;
            *(_OWORD *)(v3927 + 32) = v3920;
            *(_OWORD *)(v3927 + 48) = v3921;
            *(_OWORD *)v3927 = v3918;
            *(_OWORD *)(v3927 + 16) = v3919;
          }
          else
          {
            v3928.i64[0] = *(_QWORD *)(v3890 + 64);
            v3929 = (int64x2_t *)(v3892 + 8 * (v3888 + (_DWORD)v3891 * v3889));
            v3931 = *(int64x2_t *)(v3890 + 32);
            v3930 = *(int64x2_t *)(v3890 + 48);
            v3932 = *(int64x2_t *)(v3890 + 16);
            v3933 = *(int64x2_t *)(v3890 + 120);
            v3934 = *(int64x2_t *)(v3890 + 104);
            v3935 = *(int64x2_t *)(v3890 + 88);
            v3936 = *(int64x2_t *)(v3890 + 72);
            v3937.i64[0] = *(_QWORD *)(v3890 + 208);
            v3939 = *(int64x2_t *)(v3890 + 176);
            v3938 = *(int64x2_t *)(v3890 + 192);
            v3941 = *(int64x2_t *)(v3890 + 144);
            v3940 = *(int64x2_t *)(v3890 + 160);
            v3942 = *(int64x2_t *)(v3890 + 216);
            v3943 = *(int64x2_t *)(v3890 + 264);
            v3944 = *(int64x2_t *)(v3890 + 248);
            v3945 = *(int64x2_t *)(v3890 + 232);
            v3946.i64[0] = *(_QWORD *)(v3890 + 352);
            v3948 = *(int64x2_t *)(v3890 + 320);
            v3947 = *(int64x2_t *)(v3890 + 336);
            v3950 = *(int64x2_t *)(v3890 + 288);
            v3949 = *(int64x2_t *)(v3890 + 304);
            v3951 = *(int64x2_t *)(v3890 + 392);
            v3952 = *(int64x2_t *)(v3890 + 408);
            v3953 = *(int64x2_t *)(v3890 + 376);
            v3954 = vzip1q_s64(*(int64x2_t *)v3890, v3936);
            v3955 = vzip1q_s64(v3950, *(int64x2_t *)(v3890 + 360));
            v3956 = vzip1q_s64(v3941, v3942);
            v3957 = vzip2q_s64(*(int64x2_t *)v3890, v3936);
            v3958 = vzip2q_s64(v3941, v3942);
            v3959 = vzip2q_s64(v3950, *(int64x2_t *)(v3890 + 360));
            v3928.i64[1] = *(_QWORD *)(v3890 + 136);
            v3937.i64[1] = *(_QWORD *)(v3890 + 280);
            v3946.i64[1] = *(_QWORD *)(v3890 + 424);
            v3929[1] = v3956;
            v3929[2] = v3955;
            *v3929 = v3954;
            v3960 = (int64x2_t *)((char *)v3929 + 8 * v3891);
            v3960[1] = v3958;
            v3960[2] = v3959;
            *v3960 = v3957;
            v3961 = &v3929[v3891];
            v3961[1] = vzip1q_s64(v3940, v3945);
            v3961[2] = vzip1q_s64(v3949, v3953);
            *v3961 = vzip1q_s64(v3932, v3935);
            v3962 = (int64x2_t *)((char *)v3929 + 24 * v3891);
            v3962[1] = vzip2q_s64(v3940, v3945);
            v3962[2] = vzip2q_s64(v3949, v3953);
            *v3962 = vzip2q_s64(v3932, v3935);
            v3963 = &v3929[2 * v3891];
            v3963[1] = vzip1q_s64(v3939, v3944);
            v3963[2] = vzip1q_s64(v3948, v3951);
            *v3963 = vzip1q_s64(v3931, v3934);
            v3964 = (int64x2_t *)((char *)v3929 + 40 * v3891);
            v3964[1] = vzip2q_s64(v3939, v3944);
            v3964[2] = vzip2q_s64(v3948, v3951);
            *v3964 = vzip2q_s64(v3931, v3934);
            v3965 = &v3929[3 * v3891];
            v3965[1] = vzip1q_s64(v3938, v3943);
            v3965[2] = vzip1q_s64(v3947, v3952);
            *v3965 = vzip1q_s64(v3930, v3933);
            v3966 = (int64x2_t *)((char *)v3929 + 56 * v3891);
            v3966[1] = vzip2q_s64(v3938, v3943);
            v3966[2] = vzip2q_s64(v3947, v3952);
            *v3966 = vzip2q_s64(v3930, v3933);
            v3967 = &v3929[4 * v3891];
            v3967[1] = v3937;
            v3967[2] = v3946;
            *v3967 = v3928;
          }
          v3968 = v3883 + 1;
          while (v3968 != v3886)
          {
            ++v3885;
            v3969 = *v3968++;
            v3887 = v3969;
            if (v3969 != -1)
            {
              v3883 = v3968 - 1;
              goto LABEL_1830;
            }
          }
          v3878 = *(_DWORD *)(result + 3036);
        }
      }
      ++v3879;
      ++v3880;
    }
    while (v3879 < v3878);
    v1958 = *a5;
  }
  v3973 = *(_DWORD *)(result + 4476);
  if (v3973)
  {
    v3974 = 0;
    v3975 = a4[9];
    do
    {
      v3976 = *(_QWORD *)(result + 4552);
      v3977 = *(_DWORD *)(result + 4576) * v3974;
      v3978 = (uint64_t *)(v3976 + 8 * v3977);
      v3979 = *(_DWORD *)(result + 4472);
      if (v3979 && *v3978 == -1)
      {
        v3980 = 0;
        v4065 = 8 * (v3979 + v3977) - 8 * v3977 - 8;
        v4066 = v3976 + 8 * v3977;
        while (v4065)
        {
          v3978 = (uint64_t *)(v4066 + 8);
          ++v3980;
          v4067 = *(_QWORD *)(v4066 + 8);
          v4065 -= 8;
          v4066 += 8;
          if (v4067 != -1)
            goto LABEL_1850;
        }
      }
      else
      {
        v3980 = 0;
LABEL_1850:
        v3981 = (uint64_t *)(v3976 + 8 * (v3977 + v3979));
        if (v3978 != v3981)
        {
          v3982 = *v3978;
LABEL_1852:
          v3983 = *v3975;
          v3984 = *(_DWORD *)(a3[3] + 4 * v3980);
          v3985 = *(_QWORD *)(result + 4480) + 8 * v3982;
          v3986 = *((unsigned int *)a2 + 4);
          v3987 = *a2;
          if (v1958 && v3983 < v3984)
          {
            v3988 = *(_QWORD *)(v3985 + 64);
            v3989 = v3987 + 8 * (v3984 + (_DWORD)v3986 * v3983);
            v3990 = *(_OWORD *)(v3985 + 48);
            v3991 = *(int64x2_t *)v3985;
            v3992 = *(_OWORD *)(v3985 + 16);
            v3993 = *(_OWORD *)(v3985 + 72);
            v3994 = *(_OWORD *)(v3985 + 88);
            v3995 = *(_OWORD *)(v3985 + 104);
            v3996 = *(_OWORD *)(v3985 + 120);
            v3997 = *(_QWORD *)(v3985 + 136);
            v3998 = *(_OWORD *)(v3985 + 144);
            v3999 = *(_OWORD *)(v3985 + 160);
            v4000 = *(_OWORD *)(v3985 + 176);
            v4001 = *(_OWORD *)(v3985 + 192);
            v4002 = *(_QWORD *)(v3985 + 208);
            v4003 = *(_OWORD *)(v3985 + 232);
            v4004 = *(_OWORD *)(v3985 + 248);
            v4005 = *(_OWORD *)(v3985 + 216);
            v4006 = *(_OWORD *)(v3985 + 264);
            v4007 = *(_QWORD *)(v3985 + 280);
            v4008 = *(_OWORD *)(v3985 + 288);
            v4009 = *(_OWORD *)(v3985 + 304);
            v4010 = *(_OWORD *)(v3985 + 320);
            v4011 = *(_OWORD *)(v3985 + 336);
            v4012 = *(_QWORD *)(v3985 + 352);
            v4013 = *(_OWORD *)(v3985 + 360);
            v4014 = *(_OWORD *)(v3985 + 376);
            v4015 = *(_OWORD *)(v3985 + 392);
            v4016 = *(_OWORD *)(v3985 + 408);
            v4017 = *(_QWORD *)(v3985 + 424);
            *(_OWORD *)(v3989 + 32) = *(_OWORD *)(v3985 + 32);
            *(_OWORD *)(v3989 + 48) = v3990;
            *(_QWORD *)(v3989 + 64) = v3988;
            *(int64x2_t *)v3989 = v3991;
            *(_OWORD *)(v3989 + 16) = v3992;
            v4018 = v3989 + 8 * v3986;
            *(_QWORD *)(v4018 + 64) = v3997;
            *(_OWORD *)(v4018 + 32) = v3995;
            *(_OWORD *)(v4018 + 48) = v3996;
            *(_OWORD *)v4018 = v3993;
            *(_OWORD *)(v4018 + 16) = v3994;
            v4019 = v3989 + 16 * v3986;
            *(_QWORD *)(v4019 + 64) = v4002;
            *(_OWORD *)(v4019 + 32) = v4000;
            *(_OWORD *)(v4019 + 48) = v4001;
            *(_OWORD *)v4019 = v3998;
            *(_OWORD *)(v4019 + 16) = v3999;
            v4020 = v3989 + 24 * v3986;
            *(_QWORD *)(v4020 + 64) = v4007;
            *(_OWORD *)(v4020 + 32) = v4004;
            *(_OWORD *)(v4020 + 48) = v4006;
            *(_OWORD *)v4020 = v4005;
            *(_OWORD *)(v4020 + 16) = v4003;
            v4021 = v3989 + 32 * v3986;
            *(_QWORD *)(v4021 + 64) = v4012;
            *(_OWORD *)(v4021 + 32) = v4010;
            *(_OWORD *)(v4021 + 48) = v4011;
            *(_OWORD *)v4021 = v4008;
            *(_OWORD *)(v4021 + 16) = v4009;
            v4022 = v3989 + 40 * v3986;
            *(_QWORD *)(v4022 + 64) = v4017;
            *(_OWORD *)(v4022 + 32) = v4015;
            *(_OWORD *)(v4022 + 48) = v4016;
            *(_OWORD *)v4022 = v4013;
            *(_OWORD *)(v4022 + 16) = v4014;
          }
          else
          {
            v4023.i64[0] = *(_QWORD *)(v3985 + 64);
            v4024 = (int64x2_t *)(v3987 + 8 * (v3983 + (_DWORD)v3986 * v3984));
            v4026 = *(int64x2_t *)(v3985 + 32);
            v4025 = *(int64x2_t *)(v3985 + 48);
            v4027 = *(int64x2_t *)(v3985 + 16);
            v4028 = *(int64x2_t *)(v3985 + 120);
            v4029 = *(int64x2_t *)(v3985 + 104);
            v4030 = *(int64x2_t *)(v3985 + 88);
            v4031 = *(int64x2_t *)(v3985 + 72);
            v4032.i64[0] = *(_QWORD *)(v3985 + 208);
            v4034 = *(int64x2_t *)(v3985 + 176);
            v4033 = *(int64x2_t *)(v3985 + 192);
            v4036 = *(int64x2_t *)(v3985 + 144);
            v4035 = *(int64x2_t *)(v3985 + 160);
            v4037 = *(int64x2_t *)(v3985 + 216);
            v4038 = *(int64x2_t *)(v3985 + 264);
            v4039 = *(int64x2_t *)(v3985 + 248);
            v4040 = *(int64x2_t *)(v3985 + 232);
            v4041.i64[0] = *(_QWORD *)(v3985 + 352);
            v4043 = *(int64x2_t *)(v3985 + 320);
            v4042 = *(int64x2_t *)(v3985 + 336);
            v4045 = *(int64x2_t *)(v3985 + 288);
            v4044 = *(int64x2_t *)(v3985 + 304);
            v4046 = *(int64x2_t *)(v3985 + 392);
            v4047 = *(int64x2_t *)(v3985 + 408);
            v4048 = *(int64x2_t *)(v3985 + 376);
            v4049 = vzip1q_s64(*(int64x2_t *)v3985, v4031);
            v4050 = vzip1q_s64(v4045, *(int64x2_t *)(v3985 + 360));
            v4051 = vzip1q_s64(v4036, v4037);
            v4052 = vzip2q_s64(*(int64x2_t *)v3985, v4031);
            v4053 = vzip2q_s64(v4036, v4037);
            v4054 = vzip2q_s64(v4045, *(int64x2_t *)(v3985 + 360));
            v4023.i64[1] = *(_QWORD *)(v3985 + 136);
            v4032.i64[1] = *(_QWORD *)(v3985 + 280);
            v4041.i64[1] = *(_QWORD *)(v3985 + 424);
            v4024[1] = v4051;
            v4024[2] = v4050;
            *v4024 = v4049;
            v4055 = (int64x2_t *)((char *)v4024 + 8 * v3986);
            v4055[1] = v4053;
            v4055[2] = v4054;
            *v4055 = v4052;
            v4056 = &v4024[v3986];
            v4056[1] = vzip1q_s64(v4035, v4040);
            v4056[2] = vzip1q_s64(v4044, v4048);
            *v4056 = vzip1q_s64(v4027, v4030);
            v4057 = (int64x2_t *)((char *)v4024 + 24 * v3986);
            v4057[1] = vzip2q_s64(v4035, v4040);
            v4057[2] = vzip2q_s64(v4044, v4048);
            *v4057 = vzip2q_s64(v4027, v4030);
            v4058 = &v4024[2 * v3986];
            v4058[1] = vzip1q_s64(v4034, v4039);
            v4058[2] = vzip1q_s64(v4043, v4046);
            *v4058 = vzip1q_s64(v4026, v4029);
            v4059 = (int64x2_t *)((char *)v4024 + 40 * v3986);
            v4059[1] = vzip2q_s64(v4034, v4039);
            v4059[2] = vzip2q_s64(v4043, v4046);
            *v4059 = vzip2q_s64(v4026, v4029);
            v4060 = &v4024[3 * v3986];
            v4060[1] = vzip1q_s64(v4033, v4038);
            v4060[2] = vzip1q_s64(v4042, v4047);
            *v4060 = vzip1q_s64(v4025, v4028);
            v4061 = (int64x2_t *)((char *)v4024 + 56 * v3986);
            v4061[1] = vzip2q_s64(v4033, v4038);
            v4061[2] = vzip2q_s64(v4042, v4047);
            *v4061 = vzip2q_s64(v4025, v4028);
            v4062 = &v4024[4 * v3986];
            v4062[1] = v4032;
            v4062[2] = v4041;
            *v4062 = v4023;
          }
          v4063 = v3978 + 1;
          while (v4063 != v3981)
          {
            ++v3980;
            v4064 = *v4063++;
            v3982 = v4064;
            if (v4064 != -1)
            {
              v3978 = v4063 - 1;
              goto LABEL_1852;
            }
          }
          v3973 = *(_DWORD *)(result + 4476);
        }
      }
      ++v3974;
      ++v3975;
    }
    while (v3974 < v3973);
    v1958 = *a5;
  }
  v4068 = *(_DWORD *)(result + 5916);
  if (v4068)
  {
    v4069 = 0;
    v4070 = a4[12];
    do
    {
      v4071 = *(_QWORD *)(result + 5992);
      v4072 = *(_DWORD *)(result + 6016) * v4069;
      v4073 = (uint64_t *)(v4071 + 8 * v4072);
      v4074 = *(_DWORD *)(result + 5912);
      if (v4074 && *v4073 == -1)
      {
        v4075 = 0;
        v4126 = 8 * (v4074 + v4072) - 8 * v4072 - 8;
        v4127 = v4071 + 8 * v4072;
        while (v4126)
        {
          v4073 = (uint64_t *)(v4127 + 8);
          ++v4075;
          v4128 = *(_QWORD *)(v4127 + 8);
          v4126 -= 8;
          v4127 += 8;
          if (v4128 != -1)
            goto LABEL_1872;
        }
      }
      else
      {
        v4075 = 0;
LABEL_1872:
        v4076 = (uint64_t *)(v4071 + 8 * (v4072 + v4074));
        if (v4073 != v4076)
        {
          v4077 = *v4073;
LABEL_1874:
          v4078 = *v4070;
          v4079 = *(_DWORD *)(a3[3] + 4 * v4075);
          v4080 = *(_QWORD *)(result + 5920) + 8 * v4077;
          v4081 = *((unsigned int *)a2 + 4);
          v4082 = *a2;
          if (v1958 && v4078 < v4079)
          {
            v4083 = *(_QWORD *)(v4080 + 64);
            v4084 = v4082 + 8 * (v4079 + (_DWORD)v4081 * v4078);
            v4085 = *(_OWORD *)(v4080 + 48);
            v4086 = *(int64x2_t *)v4080;
            v4087 = *(_OWORD *)(v4080 + 16);
            v4088 = *(_OWORD *)(v4080 + 72);
            v4089 = *(_OWORD *)(v4080 + 88);
            v4090 = *(_OWORD *)(v4080 + 104);
            v4091 = *(_OWORD *)(v4080 + 120);
            v4092 = *(_QWORD *)(v4080 + 136);
            v4093 = *(_OWORD *)(v4080 + 144);
            v4094 = *(_OWORD *)(v4080 + 160);
            v4095 = *(_OWORD *)(v4080 + 176);
            v4096 = *(_OWORD *)(v4080 + 192);
            v4097 = *(_QWORD *)(v4080 + 208);
            *(_OWORD *)(v4084 + 32) = *(_OWORD *)(v4080 + 32);
            *(_OWORD *)(v4084 + 48) = v4085;
            *(_QWORD *)(v4084 + 64) = v4083;
            *(int64x2_t *)v4084 = v4086;
            *(_OWORD *)(v4084 + 16) = v4087;
            v4098 = v4084 + 8 * v4081;
            *(_QWORD *)(v4098 + 64) = v4092;
            *(_OWORD *)(v4098 + 32) = v4090;
            *(_OWORD *)(v4098 + 48) = v4091;
            *(_OWORD *)v4098 = v4088;
            *(_OWORD *)(v4098 + 16) = v4089;
            v4099 = v4084 + 16 * v4081;
            *(_QWORD *)(v4099 + 64) = v4097;
            *(_OWORD *)(v4099 + 32) = v4095;
            *(_OWORD *)(v4099 + 48) = v4096;
            *(_OWORD *)v4099 = v4093;
            *(_OWORD *)(v4099 + 16) = v4094;
          }
          else
          {
            v4100.i64[0] = *(_QWORD *)(v4080 + 64);
            v4101 = (int64x2_t *)(v4082 + 8 * (v4078 + (_DWORD)v4081 * v4079));
            v4103 = *(int64x2_t *)(v4080 + 32);
            v4102 = *(int64x2_t *)(v4080 + 48);
            v4104 = *(int64x2_t *)(v4080 + 16);
            v4105 = *(int64x2_t *)(v4080 + 120);
            v4106 = *(int64x2_t *)(v4080 + 104);
            v4107 = *(int64x2_t *)(v4080 + 88);
            v4108 = *(int64x2_t *)(v4080 + 72);
            v4109 = *(_QWORD *)(v4080 + 208);
            v4111 = *(_OWORD *)(v4080 + 176);
            v4110 = *(_OWORD *)(v4080 + 192);
            v4113 = *(_OWORD *)(v4080 + 144);
            v4112 = *(_OWORD *)(v4080 + 160);
            v4114 = vzip1q_s64(*(int64x2_t *)v4080, v4108);
            v4115 = vzip2q_s64(*(int64x2_t *)v4080, v4108);
            v4100.i64[1] = *(_QWORD *)(v4080 + 136);
            v4101[1].i64[0] = v4113;
            *v4101 = v4114;
            v4116 = (int64x2_t *)((char *)v4101 + 8 * v4081);
            *v4116 = v4115;
            v4116[1].i64[0] = *((_QWORD *)&v4113 + 1);
            v4117 = &v4101[v4081];
            v4117[1].i64[0] = v4112;
            *v4117 = vzip1q_s64(v4104, v4107);
            v4118 = (int64x2_t *)((char *)v4101 + 24 * v4081);
            v4118[1].i64[0] = *((_QWORD *)&v4112 + 1);
            *v4118 = vzip2q_s64(v4104, v4107);
            v4119 = &v4101[2 * v4081];
            v4119[1].i64[0] = v4111;
            *v4119 = vzip1q_s64(v4103, v4106);
            v4120 = (int64x2_t *)((char *)v4101 + 40 * v4081);
            v4120[1].i64[0] = *((_QWORD *)&v4111 + 1);
            *v4120 = vzip2q_s64(v4103, v4106);
            v4121 = &v4101[3 * v4081];
            v4121[1].i64[0] = v4110;
            *v4121 = vzip1q_s64(v4102, v4105);
            v4122 = (int64x2_t *)((char *)v4101 + 56 * v4081);
            v4122[1].i64[0] = *((_QWORD *)&v4110 + 1);
            *v4122 = vzip2q_s64(v4102, v4105);
            v4123 = &v4101[4 * v4081];
            v4123[1].i64[0] = v4109;
            *v4123 = v4100;
          }
          v4124 = v4073 + 1;
          while (v4124 != v4076)
          {
            ++v4075;
            v4125 = *v4124++;
            v4077 = v4125;
            if (v4125 != -1)
            {
              v4073 = v4124 - 1;
              goto LABEL_1874;
            }
          }
          v4068 = *(_DWORD *)(result + 5916);
        }
      }
      ++v4069;
      ++v4070;
    }
    while (v4069 < v4068);
    v1958 = *a5;
  }
  v4129 = *(_DWORD *)(result + 7356);
  if (v4129)
  {
    v4130 = 0;
    v4131 = a4[15];
    do
    {
      v4132 = *(_QWORD *)(result + 7432);
      v4133 = *(_DWORD *)(result + 7456) * v4130;
      v4134 = (uint64_t *)(v4132 + 8 * v4133);
      v4135 = *(_DWORD *)(result + 7352);
      if (v4135 && *v4134 == -1)
      {
        v4136 = 0;
        v4157 = 8 * (v4135 + v4133) - 8 * v4133 - 8;
        v4158 = v4132 + 8 * v4133;
        while (v4157)
        {
          v4134 = (uint64_t *)(v4158 + 8);
          ++v4136;
          v4159 = *(_QWORD *)(v4158 + 8);
          v4157 -= 8;
          v4158 += 8;
          if (v4159 != -1)
            goto LABEL_1894;
        }
      }
      else
      {
        v4136 = 0;
LABEL_1894:
        v4137 = (uint64_t *)(v4132 + 8 * (v4133 + v4135));
        if (v4134 != v4137)
        {
          v4138 = *v4134;
LABEL_1896:
          v4139 = *v4131;
          v4140 = *(_DWORD *)(a3[3] + 4 * v4136);
          v4141 = *(_QWORD *)(result + 7360) + 8 * v4138;
          v4142 = *((unsigned int *)a2 + 4);
          v4143 = *a2;
          v4145 = *(int8x16_t *)(v4141 + 32);
          v4144 = *(int8x16_t *)(v4141 + 48);
          v4147 = *(int8x16_t *)v4141;
          v4146 = *(int8x16_t *)(v4141 + 16);
          v4148 = *(_QWORD *)(v4141 + 64);
          v4149 = vextq_s8(v4144, v4144, 8uLL).u64[0];
          v4150 = vextq_s8(v4145, v4145, 8uLL).u64[0];
          v4151 = vextq_s8(v4146, v4146, 8uLL).u64[0];
          v4152 = vextq_s8(v4147, v4147, 8uLL).u64[0];
          if (v1958 && v4139 < v4140)
          {
            v4147.i64[1] = v4152;
            v4153 = (int8x16_t *)(v4143 + 8 * (v4140 + (_DWORD)v4142 * v4139));
            v4146.i64[1] = v4151;
            v4145.i64[1] = v4150;
            *v4153 = v4147;
            v4153[1] = v4146;
            v4153[4].i64[0] = v4148;
            v4144.i64[1] = v4149;
            v4153[2] = v4145;
            v4153[3] = v4144;
          }
          else
          {
            v4154 = (_QWORD *)(v4143 + 8 * (v4139 + (_DWORD)v4142 * v4140));
            *v4154 = v4147.i64[0];
            v4154[v4142] = v4152;
            v4154[2 * v4142] = v4146.i64[0];
            v4154[3 * v4142] = v4151;
            v4154[4 * v4142] = v4145.i64[0];
            v4154[5 * v4142] = v4150;
            v4154[6 * v4142] = v4144.i64[0];
            v4154[7 * v4142] = v4149;
            v4154[8 * v4142] = v4148;
          }
          v4155 = v4134 + 1;
          while (v4155 != v4137)
          {
            ++v4136;
            v4156 = *v4155++;
            v4138 = v4156;
            if (v4156 != -1)
            {
              v4134 = v4155 - 1;
              goto LABEL_1896;
            }
          }
          v4129 = *(_DWORD *)(result + 7356);
        }
      }
      ++v4130;
      ++v4131;
    }
    while (v4130 < v4129);
    v1958 = *a5;
  }
  v4160 = *(_DWORD *)(result + 8796);
  if (v4160)
  {
    v4161 = 0;
    v4162 = a4[18];
    do
    {
      v4163 = *(_QWORD *)(result + 8872);
      v4164 = *(_DWORD *)(result + 8896) * v4161;
      v4165 = (uint64_t *)(v4163 + 8 * v4164);
      v4166 = *(_DWORD *)(result + 8792);
      if (v4166 && *v4165 == -1)
      {
        v4167 = 0;
        v4227 = 8 * (v4166 + v4164) - 8 * v4164 - 8;
        v4228 = v4163 + 8 * v4164;
        while (v4227)
        {
          v4165 = (uint64_t *)(v4228 + 8);
          ++v4167;
          v4229 = *(_QWORD *)(v4228 + 8);
          v4227 -= 8;
          v4228 += 8;
          if (v4229 != -1)
            goto LABEL_1916;
        }
      }
      else
      {
        v4167 = 0;
LABEL_1916:
        v4168 = (uint64_t *)(v4163 + 8 * (v4164 + v4166));
        if (v4165 != v4168)
        {
          v4169 = *v4165;
LABEL_1918:
          v4170 = *v4162;
          v4171 = *(_DWORD *)(a3[3] + 4 * v4167);
          v4172 = *(_QWORD *)(result + 8800) + 8 * v4169;
          v4173 = *((unsigned int *)a2 + 4);
          v4174 = *a2;
          if (v1958 && v4170 < v4171)
          {
            v4175 = *(_QWORD *)(v4172 + 64);
            v4176 = v4174 + 8 * (v4171 + (_DWORD)v4173 * v4170);
            v4177 = *(_OWORD *)(v4172 + 48);
            v4178 = *(int64x2_t *)v4172;
            v4179 = *(_OWORD *)(v4172 + 16);
            v4180 = *(_OWORD *)(v4172 + 72);
            v4181 = *(_OWORD *)(v4172 + 88);
            v4182 = *(_OWORD *)(v4172 + 104);
            v4183 = *(_OWORD *)(v4172 + 120);
            v4184 = *(_QWORD *)(v4172 + 136);
            v4185 = *(_OWORD *)(v4172 + 144);
            v4186 = *(_OWORD *)(v4172 + 160);
            v4187 = *(_OWORD *)(v4172 + 176);
            v4188 = *(_OWORD *)(v4172 + 192);
            v4189 = *(_QWORD *)(v4172 + 208);
            v4190 = *(_OWORD *)(v4172 + 232);
            v4191 = *(_OWORD *)(v4172 + 248);
            v4192 = *(_OWORD *)(v4172 + 216);
            v4193 = *(_OWORD *)(v4172 + 264);
            v4194 = *(_QWORD *)(v4172 + 280);
            *(_OWORD *)(v4176 + 32) = *(_OWORD *)(v4172 + 32);
            *(_OWORD *)(v4176 + 48) = v4177;
            *(_QWORD *)(v4176 + 64) = v4175;
            *(int64x2_t *)v4176 = v4178;
            *(_OWORD *)(v4176 + 16) = v4179;
            v4195 = v4176 + 8 * v4173;
            *(_QWORD *)(v4195 + 64) = v4184;
            *(_OWORD *)(v4195 + 32) = v4182;
            *(_OWORD *)(v4195 + 48) = v4183;
            *(_OWORD *)v4195 = v4180;
            *(_OWORD *)(v4195 + 16) = v4181;
            v4196 = v4176 + 16 * v4173;
            *(_QWORD *)(v4196 + 64) = v4189;
            *(_OWORD *)(v4196 + 32) = v4187;
            *(_OWORD *)(v4196 + 48) = v4188;
            *(_OWORD *)v4196 = v4185;
            *(_OWORD *)(v4196 + 16) = v4186;
            v4197 = v4176 + 24 * v4173;
            *(_QWORD *)(v4197 + 64) = v4194;
            *(_OWORD *)(v4197 + 32) = v4191;
            *(_OWORD *)(v4197 + 48) = v4193;
            *(_OWORD *)v4197 = v4192;
            *(_OWORD *)(v4197 + 16) = v4190;
          }
          else
          {
            v4198.i64[0] = *(_QWORD *)(v4172 + 64);
            v4199 = (int64x2_t *)(v4174 + 8 * (v4170 + (_DWORD)v4173 * v4171));
            v4201 = *(int64x2_t *)(v4172 + 32);
            v4200 = *(int64x2_t *)(v4172 + 48);
            v4202 = *(int64x2_t *)(v4172 + 16);
            v4203 = *(int64x2_t *)(v4172 + 120);
            v4204 = *(int64x2_t *)(v4172 + 104);
            v4205 = *(int64x2_t *)(v4172 + 88);
            v4206 = *(int64x2_t *)(v4172 + 72);
            v4207.i64[0] = *(_QWORD *)(v4172 + 208);
            v4209 = *(int64x2_t *)(v4172 + 176);
            v4208 = *(int64x2_t *)(v4172 + 192);
            v4211 = *(int64x2_t *)(v4172 + 144);
            v4210 = *(int64x2_t *)(v4172 + 160);
            v4212 = *(int64x2_t *)(v4172 + 216);
            v4213 = *(int64x2_t *)(v4172 + 264);
            v4214 = *(int64x2_t *)(v4172 + 248);
            v4215 = *(int64x2_t *)(v4172 + 232);
            v4216 = vzip2q_s64(*(int64x2_t *)v4172, v4206);
            v4198.i64[1] = *(_QWORD *)(v4172 + 136);
            v4207.i64[1] = *(_QWORD *)(v4172 + 280);
            *v4199 = vzip1q_s64(*(int64x2_t *)v4172, v4206);
            v4199[1] = vzip1q_s64(v4211, v4212);
            v4217 = (int64x2_t *)((char *)v4199 + 8 * v4173);
            *v4217 = v4216;
            v4217[1] = vzip2q_s64(v4211, v4212);
            v4218 = &v4199[v4173];
            *v4218 = vzip1q_s64(v4202, v4205);
            v4218[1] = vzip1q_s64(v4210, v4215);
            v4219 = (int64x2_t *)((char *)v4199 + 24 * v4173);
            *v4219 = vzip2q_s64(v4202, v4205);
            v4219[1] = vzip2q_s64(v4210, v4215);
            v4220 = &v4199[2 * v4173];
            *v4220 = vzip1q_s64(v4201, v4204);
            v4220[1] = vzip1q_s64(v4209, v4214);
            v4221 = (int64x2_t *)((char *)v4199 + 40 * v4173);
            *v4221 = vzip2q_s64(v4201, v4204);
            v4221[1] = vzip2q_s64(v4209, v4214);
            v4222 = &v4199[3 * v4173];
            *v4222 = vzip1q_s64(v4200, v4203);
            v4222[1] = vzip1q_s64(v4208, v4213);
            v4223 = (int64x2_t *)((char *)v4199 + 56 * v4173);
            *v4223 = vzip2q_s64(v4200, v4203);
            v4223[1] = vzip2q_s64(v4208, v4213);
            v4224 = &v4199[4 * v4173];
            *v4224 = v4198;
            v4224[1] = v4207;
          }
          v4225 = v4165 + 1;
          while (v4225 != v4168)
          {
            ++v4167;
            v4226 = *v4225++;
            v4169 = v4226;
            if (v4226 != -1)
            {
              v4165 = v4225 - 1;
              goto LABEL_1918;
            }
          }
          v4160 = *(_DWORD *)(result + 8796);
        }
      }
      ++v4161;
      ++v4162;
    }
    while (v4161 < v4160);
    v1958 = *a5;
  }
  v4230 = *(_DWORD *)(result + 10236);
  if (v4230)
  {
    v4231 = 0;
    v4232 = a4[21];
    do
    {
      v4233 = *(_QWORD *)(result + 10312);
      v4234 = *(_DWORD *)(result + 10336) * v4231;
      v4235 = (uint64_t *)(v4233 + 8 * v4234);
      v4236 = *(_DWORD *)(result + 10232);
      if (v4236 && *v4235 == -1)
      {
        v4237 = 0;
        v4297 = 8 * (v4236 + v4234) - 8 * v4234 - 8;
        v4298 = v4233 + 8 * v4234;
        while (v4297)
        {
          v4235 = (uint64_t *)(v4298 + 8);
          ++v4237;
          v4299 = *(_QWORD *)(v4298 + 8);
          v4297 -= 8;
          v4298 += 8;
          if (v4299 != -1)
            goto LABEL_1938;
        }
      }
      else
      {
        v4237 = 0;
LABEL_1938:
        v4238 = (uint64_t *)(v4233 + 8 * (v4234 + v4236));
        if (v4235 != v4238)
        {
          v4239 = *v4235;
LABEL_1940:
          v4240 = *v4232;
          v4241 = *(_DWORD *)(a3[3] + 4 * v4237);
          v4242 = *(_QWORD *)(result + 10240) + 8 * v4239;
          v4243 = *((unsigned int *)a2 + 4);
          v4244 = *a2;
          if (v1958 && v4240 < v4241)
          {
            v4245 = *(_QWORD *)(v4242 + 64);
            v4246 = v4244 + 8 * (v4241 + (_DWORD)v4243 * v4240);
            v4247 = *(_OWORD *)(v4242 + 48);
            v4248 = *(int64x2_t *)v4242;
            v4249 = *(_OWORD *)(v4242 + 16);
            v4250 = *(_OWORD *)(v4242 + 72);
            v4251 = *(_OWORD *)(v4242 + 88);
            v4252 = *(_OWORD *)(v4242 + 104);
            v4253 = *(_OWORD *)(v4242 + 120);
            v4254 = *(_QWORD *)(v4242 + 136);
            v4255 = *(_OWORD *)(v4242 + 144);
            v4256 = *(_OWORD *)(v4242 + 160);
            v4257 = *(_OWORD *)(v4242 + 176);
            v4258 = *(_OWORD *)(v4242 + 192);
            v4259 = *(_QWORD *)(v4242 + 208);
            v4260 = *(_OWORD *)(v4242 + 232);
            v4261 = *(_OWORD *)(v4242 + 248);
            v4262 = *(_OWORD *)(v4242 + 216);
            v4263 = *(_OWORD *)(v4242 + 264);
            v4264 = *(_QWORD *)(v4242 + 280);
            *(_OWORD *)(v4246 + 32) = *(_OWORD *)(v4242 + 32);
            *(_OWORD *)(v4246 + 48) = v4247;
            *(_QWORD *)(v4246 + 64) = v4245;
            *(int64x2_t *)v4246 = v4248;
            *(_OWORD *)(v4246 + 16) = v4249;
            v4265 = v4246 + 8 * v4243;
            *(_QWORD *)(v4265 + 64) = v4254;
            *(_OWORD *)(v4265 + 32) = v4252;
            *(_OWORD *)(v4265 + 48) = v4253;
            *(_OWORD *)v4265 = v4250;
            *(_OWORD *)(v4265 + 16) = v4251;
            v4266 = v4246 + 16 * v4243;
            *(_QWORD *)(v4266 + 64) = v4259;
            *(_OWORD *)(v4266 + 32) = v4257;
            *(_OWORD *)(v4266 + 48) = v4258;
            *(_OWORD *)v4266 = v4255;
            *(_OWORD *)(v4266 + 16) = v4256;
            v4267 = v4246 + 24 * v4243;
            *(_QWORD *)(v4267 + 64) = v4264;
            *(_OWORD *)(v4267 + 32) = v4261;
            *(_OWORD *)(v4267 + 48) = v4263;
            *(_OWORD *)v4267 = v4262;
            *(_OWORD *)(v4267 + 16) = v4260;
          }
          else
          {
            v4268.i64[0] = *(_QWORD *)(v4242 + 64);
            v4269 = (int64x2_t *)(v4244 + 8 * (v4240 + (_DWORD)v4243 * v4241));
            v4271 = *(int64x2_t *)(v4242 + 32);
            v4270 = *(int64x2_t *)(v4242 + 48);
            v4272 = *(int64x2_t *)(v4242 + 16);
            v4273 = *(int64x2_t *)(v4242 + 120);
            v4274 = *(int64x2_t *)(v4242 + 104);
            v4275 = *(int64x2_t *)(v4242 + 88);
            v4276 = *(int64x2_t *)(v4242 + 72);
            v4277.i64[0] = *(_QWORD *)(v4242 + 208);
            v4279 = *(int64x2_t *)(v4242 + 176);
            v4278 = *(int64x2_t *)(v4242 + 192);
            v4281 = *(int64x2_t *)(v4242 + 144);
            v4280 = *(int64x2_t *)(v4242 + 160);
            v4282 = *(int64x2_t *)(v4242 + 216);
            v4283 = *(int64x2_t *)(v4242 + 264);
            v4284 = *(int64x2_t *)(v4242 + 248);
            v4285 = *(int64x2_t *)(v4242 + 232);
            v4286 = vzip2q_s64(*(int64x2_t *)v4242, v4276);
            v4268.i64[1] = *(_QWORD *)(v4242 + 136);
            v4277.i64[1] = *(_QWORD *)(v4242 + 280);
            *v4269 = vzip1q_s64(*(int64x2_t *)v4242, v4276);
            v4269[1] = vzip1q_s64(v4281, v4282);
            v4287 = (int64x2_t *)((char *)v4269 + 8 * v4243);
            *v4287 = v4286;
            v4287[1] = vzip2q_s64(v4281, v4282);
            v4288 = &v4269[v4243];
            *v4288 = vzip1q_s64(v4272, v4275);
            v4288[1] = vzip1q_s64(v4280, v4285);
            v4289 = (int64x2_t *)((char *)v4269 + 24 * v4243);
            *v4289 = vzip2q_s64(v4272, v4275);
            v4289[1] = vzip2q_s64(v4280, v4285);
            v4290 = &v4269[2 * v4243];
            *v4290 = vzip1q_s64(v4271, v4274);
            v4290[1] = vzip1q_s64(v4279, v4284);
            v4291 = (int64x2_t *)((char *)v4269 + 40 * v4243);
            *v4291 = vzip2q_s64(v4271, v4274);
            v4291[1] = vzip2q_s64(v4279, v4284);
            v4292 = &v4269[3 * v4243];
            *v4292 = vzip1q_s64(v4270, v4273);
            v4292[1] = vzip1q_s64(v4278, v4283);
            v4293 = (int64x2_t *)((char *)v4269 + 56 * v4243);
            *v4293 = vzip2q_s64(v4270, v4273);
            v4293[1] = vzip2q_s64(v4278, v4283);
            v4294 = &v4269[4 * v4243];
            *v4294 = v4268;
            v4294[1] = v4277;
          }
          v4295 = v4235 + 1;
          while (v4295 != v4238)
          {
            ++v4237;
            v4296 = *v4295++;
            v4239 = v4296;
            if (v4296 != -1)
            {
              v4235 = v4295 - 1;
              goto LABEL_1940;
            }
          }
          v4230 = *(_DWORD *)(result + 10236);
        }
      }
      ++v4231;
      ++v4232;
    }
    while (v4231 < v4230);
    v1958 = *a5;
  }
  v4300 = *(_DWORD *)(result + 11676);
  if (v4300)
  {
    v4301 = 0;
    v4302 = a4[24];
    do
    {
      v4303 = *(_QWORD *)(result + 11752);
      v4304 = *(_DWORD *)(result + 11776) * v4301;
      v4305 = (uint64_t *)(v4303 + 8 * v4304);
      v4306 = *(_DWORD *)(result + 11672);
      if (v4306 && *v4305 == -1)
      {
        v4307 = 0;
        v4358 = 8 * (v4306 + v4304) - 8 * v4304 - 8;
        v4359 = v4303 + 8 * v4304;
        while (v4358)
        {
          v4305 = (uint64_t *)(v4359 + 8);
          ++v4307;
          v4360 = *(_QWORD *)(v4359 + 8);
          v4358 -= 8;
          v4359 += 8;
          if (v4360 != -1)
            goto LABEL_1960;
        }
      }
      else
      {
        v4307 = 0;
LABEL_1960:
        v4308 = (uint64_t *)(v4303 + 8 * (v4304 + v4306));
        if (v4305 != v4308)
        {
          v4309 = *v4305;
LABEL_1962:
          v4310 = *v4302;
          v4311 = *(_DWORD *)(a3[3] + 4 * v4307);
          v4312 = *(_QWORD *)(result + 11680) + 8 * v4309;
          v4313 = *((unsigned int *)a2 + 4);
          v4314 = *a2;
          if (v1958 && v4310 < v4311)
          {
            v4315 = *(_QWORD *)(v4312 + 64);
            v4316 = v4314 + 8 * (v4311 + (_DWORD)v4313 * v4310);
            v4317 = *(_OWORD *)(v4312 + 48);
            v4318 = *(int64x2_t *)v4312;
            v4319 = *(_OWORD *)(v4312 + 16);
            v4320 = *(_OWORD *)(v4312 + 72);
            v4321 = *(_OWORD *)(v4312 + 88);
            v4322 = *(_OWORD *)(v4312 + 104);
            v4323 = *(_OWORD *)(v4312 + 120);
            v4324 = *(_QWORD *)(v4312 + 136);
            v4325 = *(_OWORD *)(v4312 + 144);
            v4326 = *(_OWORD *)(v4312 + 160);
            v4327 = *(_OWORD *)(v4312 + 176);
            v4328 = *(_OWORD *)(v4312 + 192);
            v4329 = *(_QWORD *)(v4312 + 208);
            *(_OWORD *)(v4316 + 32) = *(_OWORD *)(v4312 + 32);
            *(_OWORD *)(v4316 + 48) = v4317;
            *(_QWORD *)(v4316 + 64) = v4315;
            *(int64x2_t *)v4316 = v4318;
            *(_OWORD *)(v4316 + 16) = v4319;
            v4330 = v4316 + 8 * v4313;
            *(_QWORD *)(v4330 + 64) = v4324;
            *(_OWORD *)(v4330 + 32) = v4322;
            *(_OWORD *)(v4330 + 48) = v4323;
            *(_OWORD *)v4330 = v4320;
            *(_OWORD *)(v4330 + 16) = v4321;
            v4331 = v4316 + 16 * v4313;
            *(_QWORD *)(v4331 + 64) = v4329;
            *(_OWORD *)(v4331 + 32) = v4327;
            *(_OWORD *)(v4331 + 48) = v4328;
            *(_OWORD *)v4331 = v4325;
            *(_OWORD *)(v4331 + 16) = v4326;
          }
          else
          {
            v4332.i64[0] = *(_QWORD *)(v4312 + 64);
            v4333 = (int64x2_t *)(v4314 + 8 * (v4310 + (_DWORD)v4313 * v4311));
            v4335 = *(int64x2_t *)(v4312 + 32);
            v4334 = *(int64x2_t *)(v4312 + 48);
            v4336 = *(int64x2_t *)(v4312 + 16);
            v4337 = *(int64x2_t *)(v4312 + 120);
            v4338 = *(int64x2_t *)(v4312 + 104);
            v4339 = *(int64x2_t *)(v4312 + 88);
            v4340 = *(int64x2_t *)(v4312 + 72);
            v4341 = *(_QWORD *)(v4312 + 208);
            v4343 = *(_OWORD *)(v4312 + 176);
            v4342 = *(_OWORD *)(v4312 + 192);
            v4345 = *(_OWORD *)(v4312 + 144);
            v4344 = *(_OWORD *)(v4312 + 160);
            v4346 = vzip1q_s64(*(int64x2_t *)v4312, v4340);
            v4347 = vzip2q_s64(*(int64x2_t *)v4312, v4340);
            v4332.i64[1] = *(_QWORD *)(v4312 + 136);
            v4333[1].i64[0] = v4345;
            *v4333 = v4346;
            v4348 = (int64x2_t *)((char *)v4333 + 8 * v4313);
            *v4348 = v4347;
            v4348[1].i64[0] = *((_QWORD *)&v4345 + 1);
            v4349 = &v4333[v4313];
            v4349[1].i64[0] = v4344;
            *v4349 = vzip1q_s64(v4336, v4339);
            v4350 = (int64x2_t *)((char *)v4333 + 24 * v4313);
            v4350[1].i64[0] = *((_QWORD *)&v4344 + 1);
            *v4350 = vzip2q_s64(v4336, v4339);
            v4351 = &v4333[2 * v4313];
            v4351[1].i64[0] = v4343;
            *v4351 = vzip1q_s64(v4335, v4338);
            v4352 = (int64x2_t *)((char *)v4333 + 40 * v4313);
            v4352[1].i64[0] = *((_QWORD *)&v4343 + 1);
            *v4352 = vzip2q_s64(v4335, v4338);
            v4353 = &v4333[3 * v4313];
            v4353[1].i64[0] = v4342;
            *v4353 = vzip1q_s64(v4334, v4337);
            v4354 = (int64x2_t *)((char *)v4333 + 56 * v4313);
            v4354[1].i64[0] = *((_QWORD *)&v4342 + 1);
            *v4354 = vzip2q_s64(v4334, v4337);
            v4355 = &v4333[4 * v4313];
            v4355[1].i64[0] = v4341;
            *v4355 = v4332;
          }
          v4356 = v4305 + 1;
          while (v4356 != v4308)
          {
            ++v4307;
            v4357 = *v4356++;
            v4309 = v4357;
            if (v4357 != -1)
            {
              v4305 = v4356 - 1;
              goto LABEL_1962;
            }
          }
          v4300 = *(_DWORD *)(result + 11676);
        }
      }
      ++v4301;
      ++v4302;
    }
    while (v4301 < v4300);
    v1958 = *a5;
  }
  v4361 = *(_DWORD *)(result + 13116);
  if (v4361)
  {
    v4362 = 0;
    v4363 = a4[27];
    do
    {
      v4364 = *(_QWORD *)(result + 13192);
      v4365 = *(_DWORD *)(result + 13216) * v4362;
      v4366 = (uint64_t *)(v4364 + 8 * v4365);
      v4367 = *(_DWORD *)(result + 13112);
      if (v4367 && *v4366 == -1)
      {
        v4368 = 0;
        v4419 = 8 * (v4367 + v4365) - 8 * v4365 - 8;
        v4420 = v4364 + 8 * v4365;
        while (v4419)
        {
          v4366 = (uint64_t *)(v4420 + 8);
          ++v4368;
          v4421 = *(_QWORD *)(v4420 + 8);
          v4419 -= 8;
          v4420 += 8;
          if (v4421 != -1)
            goto LABEL_1982;
        }
      }
      else
      {
        v4368 = 0;
LABEL_1982:
        v4369 = (uint64_t *)(v4364 + 8 * (v4365 + v4367));
        if (v4366 != v4369)
        {
          v4370 = *v4366;
LABEL_1984:
          v4371 = *v4363;
          v4372 = *(_DWORD *)(a3[3] + 4 * v4368);
          v4373 = *(_QWORD *)(result + 13120) + 8 * v4370;
          v4374 = *((unsigned int *)a2 + 4);
          v4375 = *a2;
          if (v1958 && v4371 < v4372)
          {
            v4376 = *(_QWORD *)(v4373 + 64);
            v4377 = v4375 + 8 * (v4372 + (_DWORD)v4374 * v4371);
            v4378 = *(_OWORD *)(v4373 + 48);
            v4379 = *(int64x2_t *)v4373;
            v4380 = *(_OWORD *)(v4373 + 16);
            v4381 = *(_OWORD *)(v4373 + 72);
            v4382 = *(_OWORD *)(v4373 + 88);
            v4383 = *(_OWORD *)(v4373 + 104);
            v4384 = *(_OWORD *)(v4373 + 120);
            v4385 = *(_QWORD *)(v4373 + 136);
            v4386 = *(_OWORD *)(v4373 + 144);
            v4387 = *(_OWORD *)(v4373 + 160);
            v4388 = *(_OWORD *)(v4373 + 176);
            v4389 = *(_OWORD *)(v4373 + 192);
            v4390 = *(_QWORD *)(v4373 + 208);
            *(_OWORD *)(v4377 + 32) = *(_OWORD *)(v4373 + 32);
            *(_OWORD *)(v4377 + 48) = v4378;
            *(_QWORD *)(v4377 + 64) = v4376;
            *(int64x2_t *)v4377 = v4379;
            *(_OWORD *)(v4377 + 16) = v4380;
            v4391 = v4377 + 8 * v4374;
            *(_QWORD *)(v4391 + 64) = v4385;
            *(_OWORD *)(v4391 + 32) = v4383;
            *(_OWORD *)(v4391 + 48) = v4384;
            *(_OWORD *)v4391 = v4381;
            *(_OWORD *)(v4391 + 16) = v4382;
            v4392 = v4377 + 16 * v4374;
            *(_QWORD *)(v4392 + 64) = v4390;
            *(_OWORD *)(v4392 + 32) = v4388;
            *(_OWORD *)(v4392 + 48) = v4389;
            *(_OWORD *)v4392 = v4386;
            *(_OWORD *)(v4392 + 16) = v4387;
          }
          else
          {
            v4393.i64[0] = *(_QWORD *)(v4373 + 64);
            v4394 = (int64x2_t *)(v4375 + 8 * (v4371 + (_DWORD)v4374 * v4372));
            v4396 = *(int64x2_t *)(v4373 + 32);
            v4395 = *(int64x2_t *)(v4373 + 48);
            v4397 = *(int64x2_t *)(v4373 + 16);
            v4398 = *(int64x2_t *)(v4373 + 120);
            v4399 = *(int64x2_t *)(v4373 + 104);
            v4400 = *(int64x2_t *)(v4373 + 88);
            v4401 = *(int64x2_t *)(v4373 + 72);
            v4402 = *(_QWORD *)(v4373 + 208);
            v4404 = *(_OWORD *)(v4373 + 176);
            v4403 = *(_OWORD *)(v4373 + 192);
            v4406 = *(_OWORD *)(v4373 + 144);
            v4405 = *(_OWORD *)(v4373 + 160);
            v4407 = vzip1q_s64(*(int64x2_t *)v4373, v4401);
            v4408 = vzip2q_s64(*(int64x2_t *)v4373, v4401);
            v4393.i64[1] = *(_QWORD *)(v4373 + 136);
            v4394[1].i64[0] = v4406;
            *v4394 = v4407;
            v4409 = (int64x2_t *)((char *)v4394 + 8 * v4374);
            *v4409 = v4408;
            v4409[1].i64[0] = *((_QWORD *)&v4406 + 1);
            v4410 = &v4394[v4374];
            v4410[1].i64[0] = v4405;
            *v4410 = vzip1q_s64(v4397, v4400);
            v4411 = (int64x2_t *)((char *)v4394 + 24 * v4374);
            v4411[1].i64[0] = *((_QWORD *)&v4405 + 1);
            *v4411 = vzip2q_s64(v4397, v4400);
            v4412 = &v4394[2 * v4374];
            v4412[1].i64[0] = v4404;
            *v4412 = vzip1q_s64(v4396, v4399);
            v4413 = (int64x2_t *)((char *)v4394 + 40 * v4374);
            v4413[1].i64[0] = *((_QWORD *)&v4404 + 1);
            *v4413 = vzip2q_s64(v4396, v4399);
            v4414 = &v4394[3 * v4374];
            v4414[1].i64[0] = v4403;
            *v4414 = vzip1q_s64(v4395, v4398);
            v4415 = (int64x2_t *)((char *)v4394 + 56 * v4374);
            v4415[1].i64[0] = *((_QWORD *)&v4403 + 1);
            *v4415 = vzip2q_s64(v4395, v4398);
            v4416 = &v4394[4 * v4374];
            v4416[1].i64[0] = v4402;
            *v4416 = v4393;
          }
          v4417 = v4366 + 1;
          while (v4417 != v4369)
          {
            ++v4368;
            v4418 = *v4417++;
            v4370 = v4418;
            if (v4418 != -1)
            {
              v4366 = v4417 - 1;
              goto LABEL_1984;
            }
          }
          v4361 = *(_DWORD *)(result + 13116);
        }
      }
      ++v4362;
      ++v4363;
    }
    while (v4362 < v4361);
    v1958 = *a5;
  }
  v4422 = *(_DWORD *)(result + 12);
  if (v4422)
  {
    v4423 = 0;
    v4424 = *a4;
    do
    {
      v4425 = *(_QWORD *)(result + 88);
      v4426 = *(_DWORD *)(result + 112) * v4423;
      v4427 = (uint64_t *)(v4425 + 8 * v4426);
      v4428 = *(_DWORD *)(result + 8);
      if (v4428 && *v4427 == -1)
      {
        v4429 = 0;
        v4490 = 8 * (v4428 + v4426) - 8 * v4426 - 8;
        v4491 = v4425 + 8 * v4426;
        while (v4490)
        {
          v4427 = (uint64_t *)(v4491 + 8);
          ++v4429;
          v4492 = *(_QWORD *)(v4491 + 8);
          v4490 -= 8;
          v4491 += 8;
          if (v4492 != -1)
            goto LABEL_2004;
        }
      }
      else
      {
        v4429 = 0;
LABEL_2004:
        v4430 = (uint64_t *)(v4425 + 8 * (v4426 + v4428));
        if (v4427 != v4430)
        {
          v4431 = *v4427;
LABEL_2006:
          v4432 = *v4424;
          v4433 = *(_DWORD *)(*a3 + 4 * v4429);
          v4434 = *(_QWORD *)(result + 16) + 8 * v4431;
          v4435 = *((unsigned int *)a2 + 4);
          v4436 = *a2;
          if (v1958 && v4432 < v4433)
          {
            v4437 = *(int64x2_t *)v4434;
            v4438 = (int64x2_t *)(v4436 + 8 * (v4433 + (_DWORD)v4435 * v4432));
            v4439 = *(int64x2_t *)(v4434 + 32);
            v4440 = *(int64x2_t *)(v4434 + 48);
            v4441 = *(int64x2_t *)(v4434 + 64);
            v4442 = *(int64x2_t *)(v4434 + 80);
            v4444 = *(int8x16_t *)(v4434 + 96);
            v4443 = *(int8x16_t *)(v4434 + 112);
            v4445 = *(int8x16_t *)(v4434 + 128);
            v4446 = *(int8x16_t *)(v4434 + 144);
            v4447 = vextq_s8(v4445, v4445, 8uLL).u64[0];
            v4448 = vextq_s8(v4443, v4443, 8uLL).u64[0];
            v4449 = vextq_s8(v4444, v4444, 8uLL).u64[0];
            v4450 = *(int8x16_t *)(v4434 + 160);
            v4451 = *(int8x16_t *)(v4434 + 176);
            v4452 = vextq_s8(v4451, v4451, 8uLL).u64[0];
            v4453 = vextq_s8(v4450, v4450, 8uLL).u64[0];
            v4454 = vextq_s8(v4446, v4446, 8uLL).u64[0];
            v4456 = *(int8x16_t *)(v4434 + 192);
            v4455 = *(int8x16_t *)(v4434 + 208);
            v4458 = *(int8x16_t *)(v4434 + 224);
            v4457 = *(int8x16_t *)(v4434 + 240);
            v4459 = vextq_s8(v4458, v4458, 8uLL).u64[0];
            v4460 = vextq_s8(v4455, v4455, 8uLL).u64[0];
            v4461 = vextq_s8(v4456, v4456, 8uLL).u64[0];
            v4462 = *(int8x16_t *)(v4434 + 256);
            v4463 = *(int8x16_t *)(v4434 + 272);
            v4464 = vextq_s8(v4463, v4463, 8uLL).u64[0];
            v4465 = vextq_s8(v4462, v4462, 8uLL).u64[0];
            v4466 = vextq_s8(v4457, v4457, 8uLL).u64[0];
            v4438[1] = *(int64x2_t *)(v4434 + 16);
            v4438[2] = v4439;
            *v4438 = v4437;
            v4467 = (int64x2_t *)((char *)v4438 + 8 * v4435);
            v4467[1] = v4441;
            v4467[2] = v4442;
          }
          else
          {
            v4438 = (int64x2_t *)(v4436 + 8 * (v4432 + (_DWORD)v4435 * v4433));
            v4468 = *(int64x2_t *)(v4434 + 16);
            v4469 = *(int64x2_t *)(v4434 + 64);
            v4470 = *(int64x2_t *)(v4434 + 80);
            v4472 = *(int64x2_t *)(v4434 + 32);
            v4471 = *(int64x2_t *)(v4434 + 48);
            v4473 = *(int64x2_t *)(v4434 + 96);
            v4474 = *(int64x2_t *)(v4434 + 112);
            v4475 = *(int64x2_t *)(v4434 + 128);
            v4476 = *(int64x2_t *)(v4434 + 192);
            v4477 = *(int64x2_t *)(v4434 + 208);
            v4478 = *(int64x2_t *)(v4434 + 224);
            v4479 = vzip1q_s64(*(int64x2_t *)v4434, v4471);
            v4480 = vzip1q_s64(v4473, *(int64x2_t *)(v4434 + 144));
            v4481 = vzip1q_s64(v4476, *(int64x2_t *)(v4434 + 240));
            v4482.i64[0] = vdupq_laneq_s64(v4473, 1).u64[0];
            v4482.i64[1] = *(_QWORD *)(v4434 + 152);
            v4440 = vzip2q_s64(*(int64x2_t *)v4434, v4471);
            v4483.i64[0] = vdupq_laneq_s64(v4476, 1).u64[0];
            v4483.i64[1] = *(_QWORD *)(v4434 + 248);
            v4444 = (int8x16_t)vzip1q_s64(v4468, v4469);
            v4443 = (int8x16_t)vzip1q_s64(v4474, *(int64x2_t *)(v4434 + 160));
            v4445 = (int8x16_t)vzip1q_s64(v4477, *(int64x2_t *)(v4434 + 256));
            v4447 = vextq_s8(v4445, v4445, 8uLL).u64[0];
            v4448 = vextq_s8(v4443, v4443, 8uLL).u64[0];
            v4449 = vextq_s8(v4444, v4444, 8uLL).u64[0];
            v4446 = (int8x16_t)vzip2q_s64(v4468, v4469);
            v4450.i64[0] = vdupq_laneq_s64(v4474, 1).u64[0];
            v4450.i64[1] = *(_QWORD *)(v4434 + 168);
            v4451.i64[0] = vdupq_laneq_s64(v4477, 1).u64[0];
            v4451.i64[1] = *(_QWORD *)(v4434 + 264);
            v4454 = vextq_s8(v4446, v4446, 8uLL).u64[0];
            v4452 = vextq_s8(v4451, v4451, 8uLL).u64[0];
            v4453 = vextq_s8(v4450, v4450, 8uLL).u64[0];
            v4456 = (int8x16_t)vzip1q_s64(v4472, v4470);
            v4455 = (int8x16_t)vzip1q_s64(v4475, *(int64x2_t *)(v4434 + 176));
            v4458 = (int8x16_t)vzip1q_s64(v4478, *(int64x2_t *)(v4434 + 272));
            v4459 = vextq_s8(v4458, v4458, 8uLL).u64[0];
            v4460 = vextq_s8(v4455, v4455, 8uLL).u64[0];
            v4461 = vextq_s8(v4456, v4456, 8uLL).u64[0];
            v4457 = (int8x16_t)vzip2q_s64(v4472, v4470);
            v4462.i64[0] = vdupq_laneq_s64(v4475, 1).u64[0];
            v4462.i64[1] = *(_QWORD *)(v4434 + 184);
            v4463.i64[0] = vdupq_laneq_s64(v4478, 1).u64[0];
            v4463.i64[1] = *(_QWORD *)(v4434 + 280);
            v4466 = vextq_s8(v4457, v4457, 8uLL).u64[0];
            v4464 = vextq_s8(v4463, v4463, 8uLL).u64[0];
            v4465 = vextq_s8(v4462, v4462, 8uLL).u64[0];
            v4438[1] = v4480;
            v4438[2] = v4481;
            *v4438 = v4479;
            v4467 = (int64x2_t *)((char *)v4438 + 8 * v4435);
            v4467[1] = v4482;
            v4467[2] = v4483;
          }
          *v4467 = v4440;
          v4444.i64[1] = v4449;
          v4443.i64[1] = v4448;
          v4484 = (int8x16_t *)&v4438[v4435];
          *v4484 = v4444;
          v4484[1] = v4443;
          v4445.i64[1] = v4447;
          v4484[2] = v4445;
          v4485 = (int8x16_t *)((char *)v4438 + 24 * v4435);
          v4451.i64[1] = v4452;
          v4450.i64[1] = v4453;
          v4446.i64[1] = v4454;
          v4485[1] = v4450;
          v4485[2] = v4451;
          *v4485 = v4446;
          v4486 = (int8x16_t *)&v4438[2 * v4435];
          v4458.i64[1] = v4459;
          v4455.i64[1] = v4460;
          v4456.i64[1] = v4461;
          v4486[1] = v4455;
          v4486[2] = v4458;
          *v4486 = v4456;
          v4487 = (int8x16_t *)((char *)v4438 + 40 * v4435);
          v4463.i64[1] = v4464;
          v4462.i64[1] = v4465;
          v4487[1] = v4462;
          v4487[2] = v4463;
          v4457.i64[1] = v4466;
          v4488 = v4427 + 1;
          *v4487 = v4457;
          while (v4488 != v4430)
          {
            ++v4429;
            v4489 = *v4488++;
            v4431 = v4489;
            if (v4489 != -1)
            {
              v4427 = v4488 - 1;
              goto LABEL_2006;
            }
          }
          v4422 = *(_DWORD *)(result + 12);
        }
      }
      ++v4423;
      ++v4424;
    }
    while (v4423 < v4422);
    v1958 = *a5;
  }
  v4493 = *(_DWORD *)(result + 1452);
  if (v4493)
  {
    v4494 = 0;
    v4495 = a4[3];
    do
    {
      v4496 = *(_QWORD *)(result + 1528);
      v4497 = *(_DWORD *)(result + 1552) * v4494;
      v4498 = (uint64_t *)(v4496 + 8 * v4497);
      v4499 = *(_DWORD *)(result + 1448);
      if (v4499 && *v4498 == -1)
      {
        v4500 = 0;
        v4579 = 8 * (v4499 + v4497) - 8 * v4497 - 8;
        v4580 = v4496 + 8 * v4497;
        while (v4579)
        {
          v4498 = (uint64_t *)(v4580 + 8);
          ++v4500;
          v4581 = *(_QWORD *)(v4580 + 8);
          v4579 -= 8;
          v4580 += 8;
          if (v4581 != -1)
            goto LABEL_2026;
        }
      }
      else
      {
        v4500 = 0;
LABEL_2026:
        v4501 = (uint64_t *)(v4496 + 8 * (v4497 + v4499));
        if (v4498 != v4501)
        {
          v4502 = *v4498;
LABEL_2028:
          v4503 = *v4495;
          v4504 = *(_DWORD *)(*a3 + 4 * v4500);
          v4505 = *(_QWORD *)(result + 1456) + 8 * v4502;
          v4506 = *((unsigned int *)a2 + 4);
          v4507 = *a2;
          if (v1958 && v4503 < v4504)
          {
            v4508 = *(int64x2_t *)v4505;
            v4509 = (int64x2_t *)(v4507 + 8 * (v4504 + (_DWORD)v4506 * v4503));
            v4510 = *(int64x2_t *)(v4505 + 32);
            v4511 = *(_OWORD *)(v4505 + 48);
            v4512 = *(_OWORD *)(v4505 + 64);
            v4513 = *(_OWORD *)(v4505 + 80);
            v4514 = *(int64x2_t *)(v4505 + 96);
            v4515 = *(int64x2_t *)(v4505 + 112);
            v4516 = *(int64x2_t *)(v4505 + 128);
            v4517 = *(_OWORD *)(v4505 + 144);
            v4518 = *(_OWORD *)(v4505 + 160);
            v4519 = *(_OWORD *)(v4505 + 176);
            v4520 = *(int64x2_t *)(v4505 + 192);
            v4521 = *(int64x2_t *)(v4505 + 208);
            v4522 = *(int64x2_t *)(v4505 + 224);
            v4523 = *(_OWORD *)(v4505 + 240);
            v4524 = *(_OWORD *)(v4505 + 256);
            v4525 = *(_OWORD *)(v4505 + 272);
            v4526 = *(int64x2_t *)(v4505 + 288);
            v4527 = *(int64x2_t *)(v4505 + 304);
            v4528 = *(int64x2_t *)(v4505 + 320);
            v4529 = *(_OWORD *)(v4505 + 336);
            v4530 = *(_OWORD *)(v4505 + 352);
            v4531 = *(_OWORD *)(v4505 + 368);
            v4532 = *(int64x2_t *)(v4505 + 384);
            v4533 = *(int64x2_t *)(v4505 + 400);
            v4534 = *(int64x2_t *)(v4505 + 416);
            v4509[1] = *(int64x2_t *)(v4505 + 16);
            v4509[2] = v4510;
            *v4509 = v4508;
            v4535 = &v4509->i8[8 * v4506];
            *((_OWORD *)v4535 + 1) = v4512;
            *((_OWORD *)v4535 + 2) = v4513;
            *(_OWORD *)v4535 = v4511;
            v4536 = &v4509[v4506];
            v4536[1] = v4515;
            v4536[2] = v4516;
            *v4536 = v4514;
            v4537 = &v4509->i8[24 * v4506];
            *((_OWORD *)v4537 + 1) = v4518;
            *((_OWORD *)v4537 + 2) = v4519;
            *(_OWORD *)v4537 = v4517;
            v4538 = &v4509[2 * v4506];
            v4538[1] = v4521;
            v4538[2] = v4522;
            *v4538 = v4520;
            v4539 = &v4509->i8[40 * v4506];
            *((_OWORD *)v4539 + 1) = v4524;
            *((_OWORD *)v4539 + 2) = v4525;
            *(_OWORD *)v4539 = v4523;
            v4540 = &v4509[3 * v4506];
            v4540[1] = v4527;
            v4540[2] = v4528;
            *v4540 = v4526;
            v4541 = &v4509->i8[56 * v4506];
            *((_OWORD *)v4541 + 1) = v4530;
            *((_OWORD *)v4541 + 2) = v4531;
            *(_OWORD *)v4541 = v4529;
            v4542 = &v4509[4 * v4506];
            v4542[1] = v4533;
            v4542[2] = v4534;
            *v4542 = v4532;
          }
          else
          {
            v4543 = *(int64x2_t *)(v4505 + 16);
            v4544 = (int64x2_t *)(v4507 + 8 * (v4503 + (_DWORD)v4506 * v4504));
            v4546 = *(int64x2_t *)(v4505 + 64);
            v4545 = *(int64x2_t *)(v4505 + 80);
            v4547 = *(int64x2_t *)(v4505 + 32);
            v4548 = *(int64x2_t *)(v4505 + 48);
            v4550 = *(int64x2_t *)(v4505 + 96);
            v4549 = *(int64x2_t *)(v4505 + 112);
            v4552 = *(int64x2_t *)(v4505 + 160);
            v4551 = *(int64x2_t *)(v4505 + 176);
            v4553 = *(int64x2_t *)(v4505 + 128);
            v4554 = *(int64x2_t *)(v4505 + 144);
            v4556 = *(int64x2_t *)(v4505 + 192);
            v4555 = *(int64x2_t *)(v4505 + 208);
            v4558 = *(int64x2_t *)(v4505 + 256);
            v4557 = *(int64x2_t *)(v4505 + 272);
            v4559 = *(int64x2_t *)(v4505 + 224);
            v4560 = *(int64x2_t *)(v4505 + 240);
            v4562 = *(int64x2_t *)(v4505 + 288);
            v4561 = *(int64x2_t *)(v4505 + 304);
            v4564 = *(int64x2_t *)(v4505 + 352);
            v4563 = *(int64x2_t *)(v4505 + 368);
            v4566 = *(int64x2_t *)(v4505 + 320);
            v4565 = *(int64x2_t *)(v4505 + 336);
            v4568 = *(_OWORD *)(v4505 + 400);
            v4567 = *(_OWORD *)(v4505 + 416);
            v4569 = *(_OWORD *)(v4505 + 384);
            v4570 = vzip1q_s64(*(int64x2_t *)v4505, v4548);
            v4571 = vzip2q_s64(*(int64x2_t *)v4505, v4548);
            v4544[2] = vzip1q_s64(v4556, v4560);
            v4544[3] = vzip1q_s64(v4562, v4565);
            v4544[4].i64[0] = v4569;
            *v4544 = v4570;
            v4544[1] = vzip1q_s64(v4550, v4554);
            v4572 = (int64x2_t *)((char *)v4544 + 8 * v4506);
            v4572[2] = vzip2q_s64(v4556, v4560);
            v4572[3] = vzip2q_s64(v4562, v4565);
            *v4572 = v4571;
            v4572[1] = vzip2q_s64(v4550, v4554);
            v4572[4].i64[0] = *((_QWORD *)&v4569 + 1);
            v4573 = &v4544[v4506];
            v4573[4].i64[0] = v4568;
            v4573[2] = vzip1q_s64(v4555, v4558);
            v4573[3] = vzip1q_s64(v4561, v4564);
            *v4573 = vzip1q_s64(v4543, v4546);
            v4573[1] = vzip1q_s64(v4549, v4552);
            v4574 = (int64x2_t *)((char *)v4544 + 24 * v4506);
            v4574[4].i64[0] = *((_QWORD *)&v4568 + 1);
            v4574[2] = vzip2q_s64(v4555, v4558);
            v4574[3] = vzip2q_s64(v4561, v4564);
            *v4574 = vzip2q_s64(v4543, v4546);
            v4574[1] = vzip2q_s64(v4549, v4552);
            v4575 = &v4544[2 * v4506];
            v4575[4].i64[0] = v4567;
            v4575[2] = vzip1q_s64(v4559, v4557);
            v4575[3] = vzip1q_s64(v4566, v4563);
            *v4575 = vzip1q_s64(v4547, v4545);
            v4575[1] = vzip1q_s64(v4553, v4551);
            v4576 = (int64x2_t *)((char *)v4544 + 40 * v4506);
            v4576[4].i64[0] = *((_QWORD *)&v4567 + 1);
            v4576[2] = vzip2q_s64(v4559, v4557);
            v4576[3] = vzip2q_s64(v4566, v4563);
            *v4576 = vzip2q_s64(v4547, v4545);
            v4576[1] = vzip2q_s64(v4553, v4551);
          }
          v4577 = v4498 + 1;
          while (v4577 != v4501)
          {
            ++v4500;
            v4578 = *v4577++;
            v4502 = v4578;
            if (v4578 != -1)
            {
              v4498 = v4577 - 1;
              goto LABEL_2028;
            }
          }
          v4493 = *(_DWORD *)(result + 1452);
        }
      }
      ++v4494;
      ++v4495;
    }
    while (v4494 < v4493);
    v1958 = *a5;
  }
  v4582 = *(_DWORD *)(result + 2892);
  if (v4582)
  {
    v4583 = 0;
    v4584 = a4[6];
    do
    {
      v4585 = *(_QWORD *)(result + 2968);
      v4586 = *(_DWORD *)(result + 2992) * v4583;
      v4587 = (uint64_t *)(v4585 + 8 * v4586);
      v4588 = *(_DWORD *)(result + 2888);
      if (v4588 && *v4587 == -1)
      {
        v4589 = 0;
        v4650 = 8 * (v4588 + v4586) - 8 * v4586 - 8;
        v4651 = v4585 + 8 * v4586;
        while (v4650)
        {
          v4587 = (uint64_t *)(v4651 + 8);
          ++v4589;
          v4652 = *(_QWORD *)(v4651 + 8);
          v4650 -= 8;
          v4651 += 8;
          if (v4652 != -1)
            goto LABEL_2048;
        }
      }
      else
      {
        v4589 = 0;
LABEL_2048:
        v4590 = (uint64_t *)(v4585 + 8 * (v4586 + v4588));
        if (v4587 != v4590)
        {
          v4591 = *v4587;
LABEL_2050:
          v4592 = *v4584;
          v4593 = *(_DWORD *)(*a3 + 4 * v4589);
          v4594 = *(_QWORD *)(result + 2896) + 8 * v4591;
          v4595 = *((unsigned int *)a2 + 4);
          v4596 = *a2;
          if (v1958 && v4592 < v4593)
          {
            v4597 = *(int64x2_t *)v4594;
            v4598 = (int64x2_t *)(v4596 + 8 * (v4593 + (_DWORD)v4595 * v4592));
            v4599 = *(int64x2_t *)(v4594 + 32);
            v4600 = *(int64x2_t *)(v4594 + 48);
            v4601 = *(int64x2_t *)(v4594 + 64);
            v4602 = *(int64x2_t *)(v4594 + 80);
            v4604 = *(int8x16_t *)(v4594 + 96);
            v4603 = *(int8x16_t *)(v4594 + 112);
            v4605 = *(int8x16_t *)(v4594 + 128);
            v4606 = *(int8x16_t *)(v4594 + 144);
            v4607 = vextq_s8(v4605, v4605, 8uLL).u64[0];
            v4608 = vextq_s8(v4603, v4603, 8uLL).u64[0];
            v4609 = vextq_s8(v4604, v4604, 8uLL).u64[0];
            v4610 = *(int8x16_t *)(v4594 + 160);
            v4611 = *(int8x16_t *)(v4594 + 176);
            v4612 = vextq_s8(v4611, v4611, 8uLL).u64[0];
            v4613 = vextq_s8(v4610, v4610, 8uLL).u64[0];
            v4614 = vextq_s8(v4606, v4606, 8uLL).u64[0];
            v4616 = *(int8x16_t *)(v4594 + 192);
            v4615 = *(int8x16_t *)(v4594 + 208);
            v4618 = *(int8x16_t *)(v4594 + 224);
            v4617 = *(int8x16_t *)(v4594 + 240);
            v4619 = vextq_s8(v4618, v4618, 8uLL).u64[0];
            v4620 = vextq_s8(v4615, v4615, 8uLL).u64[0];
            v4621 = vextq_s8(v4616, v4616, 8uLL).u64[0];
            v4622 = *(int8x16_t *)(v4594 + 256);
            v4623 = *(int8x16_t *)(v4594 + 272);
            v4624 = vextq_s8(v4623, v4623, 8uLL).u64[0];
            v4625 = vextq_s8(v4622, v4622, 8uLL).u64[0];
            v4626 = vextq_s8(v4617, v4617, 8uLL).u64[0];
            v4598[1] = *(int64x2_t *)(v4594 + 16);
            v4598[2] = v4599;
            *v4598 = v4597;
            v4627 = (int64x2_t *)((char *)v4598 + 8 * v4595);
            v4627[1] = v4601;
            v4627[2] = v4602;
          }
          else
          {
            v4598 = (int64x2_t *)(v4596 + 8 * (v4592 + (_DWORD)v4595 * v4593));
            v4628 = *(int64x2_t *)(v4594 + 16);
            v4629 = *(int64x2_t *)(v4594 + 64);
            v4630 = *(int64x2_t *)(v4594 + 80);
            v4632 = *(int64x2_t *)(v4594 + 32);
            v4631 = *(int64x2_t *)(v4594 + 48);
            v4633 = *(int64x2_t *)(v4594 + 96);
            v4634 = *(int64x2_t *)(v4594 + 112);
            v4635 = *(int64x2_t *)(v4594 + 128);
            v4636 = *(int64x2_t *)(v4594 + 192);
            v4637 = *(int64x2_t *)(v4594 + 208);
            v4638 = *(int64x2_t *)(v4594 + 224);
            v4639 = vzip1q_s64(*(int64x2_t *)v4594, v4631);
            v4640 = vzip1q_s64(v4633, *(int64x2_t *)(v4594 + 144));
            v4641 = vzip1q_s64(v4636, *(int64x2_t *)(v4594 + 240));
            v4642.i64[0] = vdupq_laneq_s64(v4633, 1).u64[0];
            v4642.i64[1] = *(_QWORD *)(v4594 + 152);
            v4600 = vzip2q_s64(*(int64x2_t *)v4594, v4631);
            v4643.i64[0] = vdupq_laneq_s64(v4636, 1).u64[0];
            v4643.i64[1] = *(_QWORD *)(v4594 + 248);
            v4604 = (int8x16_t)vzip1q_s64(v4628, v4629);
            v4603 = (int8x16_t)vzip1q_s64(v4634, *(int64x2_t *)(v4594 + 160));
            v4605 = (int8x16_t)vzip1q_s64(v4637, *(int64x2_t *)(v4594 + 256));
            v4607 = vextq_s8(v4605, v4605, 8uLL).u64[0];
            v4608 = vextq_s8(v4603, v4603, 8uLL).u64[0];
            v4609 = vextq_s8(v4604, v4604, 8uLL).u64[0];
            v4606 = (int8x16_t)vzip2q_s64(v4628, v4629);
            v4610.i64[0] = vdupq_laneq_s64(v4634, 1).u64[0];
            v4610.i64[1] = *(_QWORD *)(v4594 + 168);
            v4611.i64[0] = vdupq_laneq_s64(v4637, 1).u64[0];
            v4611.i64[1] = *(_QWORD *)(v4594 + 264);
            v4614 = vextq_s8(v4606, v4606, 8uLL).u64[0];
            v4612 = vextq_s8(v4611, v4611, 8uLL).u64[0];
            v4613 = vextq_s8(v4610, v4610, 8uLL).u64[0];
            v4616 = (int8x16_t)vzip1q_s64(v4632, v4630);
            v4615 = (int8x16_t)vzip1q_s64(v4635, *(int64x2_t *)(v4594 + 176));
            v4618 = (int8x16_t)vzip1q_s64(v4638, *(int64x2_t *)(v4594 + 272));
            v4619 = vextq_s8(v4618, v4618, 8uLL).u64[0];
            v4620 = vextq_s8(v4615, v4615, 8uLL).u64[0];
            v4621 = vextq_s8(v4616, v4616, 8uLL).u64[0];
            v4617 = (int8x16_t)vzip2q_s64(v4632, v4630);
            v4622.i64[0] = vdupq_laneq_s64(v4635, 1).u64[0];
            v4622.i64[1] = *(_QWORD *)(v4594 + 184);
            v4623.i64[0] = vdupq_laneq_s64(v4638, 1).u64[0];
            v4623.i64[1] = *(_QWORD *)(v4594 + 280);
            v4626 = vextq_s8(v4617, v4617, 8uLL).u64[0];
            v4624 = vextq_s8(v4623, v4623, 8uLL).u64[0];
            v4625 = vextq_s8(v4622, v4622, 8uLL).u64[0];
            v4598[1] = v4640;
            v4598[2] = v4641;
            *v4598 = v4639;
            v4627 = (int64x2_t *)((char *)v4598 + 8 * v4595);
            v4627[1] = v4642;
            v4627[2] = v4643;
          }
          *v4627 = v4600;
          v4604.i64[1] = v4609;
          v4603.i64[1] = v4608;
          v4644 = (int8x16_t *)&v4598[v4595];
          *v4644 = v4604;
          v4644[1] = v4603;
          v4605.i64[1] = v4607;
          v4644[2] = v4605;
          v4645 = (int8x16_t *)((char *)v4598 + 24 * v4595);
          v4611.i64[1] = v4612;
          v4610.i64[1] = v4613;
          v4606.i64[1] = v4614;
          v4645[1] = v4610;
          v4645[2] = v4611;
          *v4645 = v4606;
          v4646 = (int8x16_t *)&v4598[2 * v4595];
          v4618.i64[1] = v4619;
          v4615.i64[1] = v4620;
          v4616.i64[1] = v4621;
          v4646[1] = v4615;
          v4646[2] = v4618;
          *v4646 = v4616;
          v4647 = (int8x16_t *)((char *)v4598 + 40 * v4595);
          v4623.i64[1] = v4624;
          v4622.i64[1] = v4625;
          v4647[1] = v4622;
          v4647[2] = v4623;
          v4617.i64[1] = v4626;
          v4648 = v4587 + 1;
          *v4647 = v4617;
          while (v4648 != v4590)
          {
            ++v4589;
            v4649 = *v4648++;
            v4591 = v4649;
            if (v4649 != -1)
            {
              v4587 = v4648 - 1;
              goto LABEL_2050;
            }
          }
          v4582 = *(_DWORD *)(result + 2892);
        }
      }
      ++v4583;
      ++v4584;
    }
    while (v4583 < v4582);
    v1958 = *a5;
  }
  v4653 = *(_DWORD *)(result + 4332);
  if (v4653)
  {
    v4654 = 0;
    v4655 = a4[9];
    do
    {
      v4656 = *(_QWORD *)(result + 4408);
      v4657 = *(_DWORD *)(result + 4432) * v4654;
      v4658 = (uint64_t *)(v4656 + 8 * v4657);
      v4659 = *(_DWORD *)(result + 4328);
      if (v4659 && *v4658 == -1)
      {
        v4660 = 0;
        v4721 = 8 * (v4659 + v4657) - 8 * v4657 - 8;
        v4722 = v4656 + 8 * v4657;
        while (v4721)
        {
          v4658 = (uint64_t *)(v4722 + 8);
          ++v4660;
          v4723 = *(_QWORD *)(v4722 + 8);
          v4721 -= 8;
          v4722 += 8;
          if (v4723 != -1)
            goto LABEL_2070;
        }
      }
      else
      {
        v4660 = 0;
LABEL_2070:
        v4661 = (uint64_t *)(v4656 + 8 * (v4657 + v4659));
        if (v4658 != v4661)
        {
          v4662 = *v4658;
LABEL_2072:
          v4663 = *v4655;
          v4664 = *(_DWORD *)(*a3 + 4 * v4660);
          v4665 = *(_QWORD *)(result + 4336) + 8 * v4662;
          v4666 = *((unsigned int *)a2 + 4);
          v4667 = *a2;
          if (v1958 && v4663 < v4664)
          {
            v4668 = *(int64x2_t *)v4665;
            v4669 = (int64x2_t *)(v4667 + 8 * (v4664 + (_DWORD)v4666 * v4663));
            v4670 = *(int64x2_t *)(v4665 + 32);
            v4671 = *(int64x2_t *)(v4665 + 48);
            v4672 = *(int64x2_t *)(v4665 + 64);
            v4673 = *(int64x2_t *)(v4665 + 80);
            v4675 = *(int8x16_t *)(v4665 + 96);
            v4674 = *(int8x16_t *)(v4665 + 112);
            v4676 = *(int8x16_t *)(v4665 + 128);
            v4677 = *(int8x16_t *)(v4665 + 144);
            v4678 = vextq_s8(v4676, v4676, 8uLL).u64[0];
            v4679 = vextq_s8(v4674, v4674, 8uLL).u64[0];
            v4680 = vextq_s8(v4675, v4675, 8uLL).u64[0];
            v4681 = *(int8x16_t *)(v4665 + 160);
            v4682 = *(int8x16_t *)(v4665 + 176);
            v4683 = vextq_s8(v4682, v4682, 8uLL).u64[0];
            v4684 = vextq_s8(v4681, v4681, 8uLL).u64[0];
            v4685 = vextq_s8(v4677, v4677, 8uLL).u64[0];
            v4687 = *(int8x16_t *)(v4665 + 192);
            v4686 = *(int8x16_t *)(v4665 + 208);
            v4689 = *(int8x16_t *)(v4665 + 224);
            v4688 = *(int8x16_t *)(v4665 + 240);
            v4690 = vextq_s8(v4689, v4689, 8uLL).u64[0];
            v4691 = vextq_s8(v4686, v4686, 8uLL).u64[0];
            v4692 = vextq_s8(v4687, v4687, 8uLL).u64[0];
            v4693 = *(int8x16_t *)(v4665 + 256);
            v4694 = *(int8x16_t *)(v4665 + 272);
            v4695 = vextq_s8(v4694, v4694, 8uLL).u64[0];
            v4696 = vextq_s8(v4693, v4693, 8uLL).u64[0];
            v4697 = vextq_s8(v4688, v4688, 8uLL).u64[0];
            v4669[1] = *(int64x2_t *)(v4665 + 16);
            v4669[2] = v4670;
            *v4669 = v4668;
            v4698 = (int64x2_t *)((char *)v4669 + 8 * v4666);
            v4698[1] = v4672;
            v4698[2] = v4673;
          }
          else
          {
            v4669 = (int64x2_t *)(v4667 + 8 * (v4663 + (_DWORD)v4666 * v4664));
            v4699 = *(int64x2_t *)(v4665 + 16);
            v4700 = *(int64x2_t *)(v4665 + 64);
            v4701 = *(int64x2_t *)(v4665 + 80);
            v4703 = *(int64x2_t *)(v4665 + 32);
            v4702 = *(int64x2_t *)(v4665 + 48);
            v4704 = *(int64x2_t *)(v4665 + 96);
            v4705 = *(int64x2_t *)(v4665 + 112);
            v4706 = *(int64x2_t *)(v4665 + 128);
            v4707 = *(int64x2_t *)(v4665 + 192);
            v4708 = *(int64x2_t *)(v4665 + 208);
            v4709 = *(int64x2_t *)(v4665 + 224);
            v4710 = vzip1q_s64(*(int64x2_t *)v4665, v4702);
            v4711 = vzip1q_s64(v4704, *(int64x2_t *)(v4665 + 144));
            v4712 = vzip1q_s64(v4707, *(int64x2_t *)(v4665 + 240));
            v4713.i64[0] = vdupq_laneq_s64(v4704, 1).u64[0];
            v4713.i64[1] = *(_QWORD *)(v4665 + 152);
            v4671 = vzip2q_s64(*(int64x2_t *)v4665, v4702);
            v4714.i64[0] = vdupq_laneq_s64(v4707, 1).u64[0];
            v4714.i64[1] = *(_QWORD *)(v4665 + 248);
            v4675 = (int8x16_t)vzip1q_s64(v4699, v4700);
            v4674 = (int8x16_t)vzip1q_s64(v4705, *(int64x2_t *)(v4665 + 160));
            v4676 = (int8x16_t)vzip1q_s64(v4708, *(int64x2_t *)(v4665 + 256));
            v4678 = vextq_s8(v4676, v4676, 8uLL).u64[0];
            v4679 = vextq_s8(v4674, v4674, 8uLL).u64[0];
            v4680 = vextq_s8(v4675, v4675, 8uLL).u64[0];
            v4677 = (int8x16_t)vzip2q_s64(v4699, v4700);
            v4681.i64[0] = vdupq_laneq_s64(v4705, 1).u64[0];
            v4681.i64[1] = *(_QWORD *)(v4665 + 168);
            v4682.i64[0] = vdupq_laneq_s64(v4708, 1).u64[0];
            v4682.i64[1] = *(_QWORD *)(v4665 + 264);
            v4685 = vextq_s8(v4677, v4677, 8uLL).u64[0];
            v4683 = vextq_s8(v4682, v4682, 8uLL).u64[0];
            v4684 = vextq_s8(v4681, v4681, 8uLL).u64[0];
            v4687 = (int8x16_t)vzip1q_s64(v4703, v4701);
            v4686 = (int8x16_t)vzip1q_s64(v4706, *(int64x2_t *)(v4665 + 176));
            v4689 = (int8x16_t)vzip1q_s64(v4709, *(int64x2_t *)(v4665 + 272));
            v4690 = vextq_s8(v4689, v4689, 8uLL).u64[0];
            v4691 = vextq_s8(v4686, v4686, 8uLL).u64[0];
            v4692 = vextq_s8(v4687, v4687, 8uLL).u64[0];
            v4688 = (int8x16_t)vzip2q_s64(v4703, v4701);
            v4693.i64[0] = vdupq_laneq_s64(v4706, 1).u64[0];
            v4693.i64[1] = *(_QWORD *)(v4665 + 184);
            v4694.i64[0] = vdupq_laneq_s64(v4709, 1).u64[0];
            v4694.i64[1] = *(_QWORD *)(v4665 + 280);
            v4697 = vextq_s8(v4688, v4688, 8uLL).u64[0];
            v4695 = vextq_s8(v4694, v4694, 8uLL).u64[0];
            v4696 = vextq_s8(v4693, v4693, 8uLL).u64[0];
            v4669[1] = v4711;
            v4669[2] = v4712;
            *v4669 = v4710;
            v4698 = (int64x2_t *)((char *)v4669 + 8 * v4666);
            v4698[1] = v4713;
            v4698[2] = v4714;
          }
          *v4698 = v4671;
          v4675.i64[1] = v4680;
          v4674.i64[1] = v4679;
          v4715 = (int8x16_t *)&v4669[v4666];
          *v4715 = v4675;
          v4715[1] = v4674;
          v4676.i64[1] = v4678;
          v4715[2] = v4676;
          v4716 = (int8x16_t *)((char *)v4669 + 24 * v4666);
          v4682.i64[1] = v4683;
          v4681.i64[1] = v4684;
          v4677.i64[1] = v4685;
          v4716[1] = v4681;
          v4716[2] = v4682;
          *v4716 = v4677;
          v4717 = (int8x16_t *)&v4669[2 * v4666];
          v4689.i64[1] = v4690;
          v4686.i64[1] = v4691;
          v4687.i64[1] = v4692;
          v4717[1] = v4686;
          v4717[2] = v4689;
          *v4717 = v4687;
          v4718 = (int8x16_t *)((char *)v4669 + 40 * v4666);
          v4694.i64[1] = v4695;
          v4693.i64[1] = v4696;
          v4718[1] = v4693;
          v4718[2] = v4694;
          v4688.i64[1] = v4697;
          v4719 = v4658 + 1;
          *v4718 = v4688;
          while (v4719 != v4661)
          {
            ++v4660;
            v4720 = *v4719++;
            v4662 = v4720;
            if (v4720 != -1)
            {
              v4658 = v4719 - 1;
              goto LABEL_2072;
            }
          }
          v4653 = *(_DWORD *)(result + 4332);
        }
      }
      ++v4654;
      ++v4655;
    }
    while (v4654 < v4653);
    v1958 = *a5;
  }
  v4724 = *(_DWORD *)(result + 5772);
  if (v4724)
  {
    v4725 = 0;
    v4726 = a4[12];
    do
    {
      v4727 = *(_QWORD *)(result + 5848);
      v4728 = *(_DWORD *)(result + 5872) * v4725;
      v4729 = (uint64_t *)(v4727 + 8 * v4728);
      v4730 = *(_DWORD *)(result + 5768);
      if (v4730 && *v4729 == -1)
      {
        v4731 = 0;
        v4768 = 8 * (v4730 + v4728) - 8 * v4728 - 8;
        v4769 = v4727 + 8 * v4728;
        while (v4768)
        {
          v4729 = (uint64_t *)(v4769 + 8);
          ++v4731;
          v4770 = *(_QWORD *)(v4769 + 8);
          v4768 -= 8;
          v4769 += 8;
          if (v4770 != -1)
            goto LABEL_2092;
        }
      }
      else
      {
        v4731 = 0;
LABEL_2092:
        v4732 = (uint64_t *)(v4727 + 8 * (v4728 + v4730));
        if (v4729 != v4732)
        {
          v4733 = *v4729;
LABEL_2094:
          v4734 = *v4726;
          v4735 = *(_DWORD *)(*a3 + 4 * v4731);
          v4736 = *(_QWORD *)(result + 5776) + 8 * v4733;
          v4737 = *((unsigned int *)a2 + 4);
          v4738 = *a2;
          if (v1958 && v4734 < v4735)
          {
            v4739 = *(int64x2_t *)v4736;
            v4740 = (int64x2_t *)(v4738 + 8 * (v4735 + (_DWORD)v4737 * v4734));
            v4741 = *(int64x2_t *)(v4736 + 32);
            v4742 = *(_OWORD *)(v4736 + 48);
            v4743 = *(_OWORD *)(v4736 + 64);
            v4744 = *(_OWORD *)(v4736 + 80);
            v4745 = *(int64x2_t *)(v4736 + 96);
            v4746 = *(int64x2_t *)(v4736 + 112);
            v4747 = *(int64x2_t *)(v4736 + 128);
            v4740[1] = *(int64x2_t *)(v4736 + 16);
            v4740[2] = v4741;
            *v4740 = v4739;
            v4748 = &v4740->i8[8 * v4737];
            *((_OWORD *)v4748 + 1) = v4743;
            *((_OWORD *)v4748 + 2) = v4744;
            *(_OWORD *)v4748 = v4742;
            v4749 = &v4740[v4737];
            v4749[1] = v4746;
            v4749[2] = v4747;
            *v4749 = v4745;
          }
          else
          {
            v4750 = *(int64x2_t *)(v4736 + 16);
            v4751 = (int64x2_t *)(v4738 + 8 * (v4734 + (_DWORD)v4737 * v4735));
            v4753 = *(int64x2_t *)(v4736 + 64);
            v4752 = *(int64x2_t *)(v4736 + 80);
            v4754 = *(int64x2_t *)(v4736 + 32);
            v4755 = *(int64x2_t *)(v4736 + 48);
            v4757 = *(_OWORD *)(v4736 + 112);
            v4756 = *(_OWORD *)(v4736 + 128);
            v4758 = *(_OWORD *)(v4736 + 96);
            v4759 = vzip1q_s64(*(int64x2_t *)v4736, v4755);
            v4760 = vzip2q_s64(*(int64x2_t *)v4736, v4755);
            v4751[1].i64[0] = v4758;
            *v4751 = v4759;
            v4761 = (int64x2_t *)((char *)v4751 + 8 * v4737);
            *v4761 = v4760;
            v4761[1].i64[0] = *((_QWORD *)&v4758 + 1);
            v4762 = &v4751[v4737];
            v4762[1].i64[0] = v4757;
            *v4762 = vzip1q_s64(v4750, v4753);
            v4763 = (int64x2_t *)((char *)v4751 + 24 * v4737);
            v4763[1].i64[0] = *((_QWORD *)&v4757 + 1);
            *v4763 = vzip2q_s64(v4750, v4753);
            v4764 = &v4751[2 * v4737];
            v4764[1].i64[0] = v4756;
            *v4764 = vzip1q_s64(v4754, v4752);
            v4765 = (int64x2_t *)((char *)v4751 + 40 * v4737);
            v4765[1].i64[0] = *((_QWORD *)&v4756 + 1);
            *v4765 = vzip2q_s64(v4754, v4752);
          }
          v4766 = v4729 + 1;
          while (v4766 != v4732)
          {
            ++v4731;
            v4767 = *v4766++;
            v4733 = v4767;
            if (v4767 != -1)
            {
              v4729 = v4766 - 1;
              goto LABEL_2094;
            }
          }
          v4724 = *(_DWORD *)(result + 5772);
        }
      }
      ++v4725;
      ++v4726;
    }
    while (v4725 < v4724);
    v1958 = *a5;
  }
  v4771 = *(_DWORD *)(result + 7212);
  if (v4771)
  {
    v4772 = 0;
    v4773 = a4[15];
    do
    {
      v4774 = *(_QWORD *)(result + 7288);
      v4775 = *(_DWORD *)(result + 7312) * v4772;
      v4776 = (uint64_t *)(v4774 + 8 * v4775);
      v4777 = *(_DWORD *)(result + 7208);
      if (v4777 && *v4776 == -1)
      {
        v4778 = 0;
        v4796 = 8 * (v4777 + v4775) - 8 * v4775 - 8;
        v4797 = v4774 + 8 * v4775;
        while (v4796)
        {
          v4776 = (uint64_t *)(v4797 + 8);
          ++v4778;
          v4798 = *(_QWORD *)(v4797 + 8);
          v4796 -= 8;
          v4797 += 8;
          if (v4798 != -1)
            goto LABEL_2114;
        }
      }
      else
      {
        v4778 = 0;
LABEL_2114:
        v4779 = (uint64_t *)(v4774 + 8 * (v4775 + v4777));
        if (v4776 != v4779)
        {
          v4780 = *v4776;
LABEL_2116:
          v4781 = *v4773;
          v4782 = *(_DWORD *)(*a3 + 4 * v4778);
          v4783 = (int8x16_t *)(*(_QWORD *)(result + 7216) + 8 * v4780);
          v4784 = *((unsigned int *)a2 + 4);
          v4785 = *a2;
          v4787 = v4783[1];
          v4786 = v4783[2];
          v4788 = *v4783;
          v4789 = vextq_s8(v4786, v4786, 8uLL).u64[0];
          v4790 = vextq_s8(v4787, v4787, 8uLL).u64[0];
          v4791 = vextq_s8(v4788, v4788, 8uLL).u64[0];
          if (v1958 && v4781 < v4782)
          {
            v4788.i64[1] = v4791;
            v4787.i64[1] = v4790;
            v4792 = (int8x16_t *)(v4785 + 8 * (v4782 + (_DWORD)v4784 * v4781));
            *v4792 = v4788;
            v4792[1] = v4787;
            v4786.i64[1] = v4789;
            v4792[2] = v4786;
          }
          else
          {
            v4793 = (_QWORD *)(v4785 + 8 * (v4781 + (_DWORD)v4784 * v4782));
            *v4793 = v4788.i64[0];
            v4793[v4784] = v4791;
            v4793[2 * v4784] = v4787.i64[0];
            v4793[3 * v4784] = v4790;
            v4793[4 * v4784] = v4786.i64[0];
            v4793[5 * v4784] = v4789;
          }
          v4794 = v4776 + 1;
          while (v4794 != v4779)
          {
            ++v4778;
            v4795 = *v4794++;
            v4780 = v4795;
            if (v4795 != -1)
            {
              v4776 = v4794 - 1;
              goto LABEL_2116;
            }
          }
          v4771 = *(_DWORD *)(result + 7212);
        }
      }
      ++v4772;
      ++v4773;
    }
    while (v4772 < v4771);
    v1958 = *a5;
  }
  v4799 = *(_DWORD *)(result + 8652);
  if (v4799)
  {
    v4800 = 0;
    v4801 = a4[18];
    do
    {
      v4802 = *(_QWORD *)(result + 8728);
      v4803 = *(_DWORD *)(result + 8752) * v4800;
      v4804 = (uint64_t *)(v4802 + 8 * v4803);
      v4805 = *(_DWORD *)(result + 8648);
      if (v4805 && *v4804 == -1)
      {
        v4806 = 0;
        v4849 = 8 * (v4805 + v4803) - 8 * v4803 - 8;
        v4850 = v4802 + 8 * v4803;
        while (v4849)
        {
          v4804 = (uint64_t *)(v4850 + 8);
          ++v4806;
          v4851 = *(_QWORD *)(v4850 + 8);
          v4849 -= 8;
          v4850 += 8;
          if (v4851 != -1)
            goto LABEL_2136;
        }
      }
      else
      {
        v4806 = 0;
LABEL_2136:
        v4807 = (uint64_t *)(v4802 + 8 * (v4803 + v4805));
        if (v4804 != v4807)
        {
          v4808 = *v4804;
LABEL_2138:
          v4809 = *v4801;
          v4810 = *(_DWORD *)(*a3 + 4 * v4806);
          v4811 = *(_QWORD *)(result + 8656) + 8 * v4808;
          v4812 = *((unsigned int *)a2 + 4);
          v4813 = *a2;
          if (v1958 && v4809 < v4810)
          {
            v4814 = *(int64x2_t *)v4811;
            v4815 = (int64x2_t *)(v4813 + 8 * (v4810 + (_DWORD)v4812 * v4809));
            v4816 = *(int64x2_t *)(v4811 + 32);
            v4817 = *(_OWORD *)(v4811 + 48);
            v4818 = *(_OWORD *)(v4811 + 64);
            v4819 = *(_OWORD *)(v4811 + 80);
            v4820 = *(int64x2_t *)(v4811 + 96);
            v4821 = *(int64x2_t *)(v4811 + 112);
            v4822 = *(int64x2_t *)(v4811 + 128);
            v4823 = *(_OWORD *)(v4811 + 144);
            v4824 = *(_OWORD *)(v4811 + 160);
            v4825 = *(_OWORD *)(v4811 + 176);
            v4815[1] = *(int64x2_t *)(v4811 + 16);
            v4815[2] = v4816;
            *v4815 = v4814;
            v4826 = &v4815->i8[8 * v4812];
            *((_OWORD *)v4826 + 1) = v4818;
            *((_OWORD *)v4826 + 2) = v4819;
            *(_OWORD *)v4826 = v4817;
            v4827 = &v4815[v4812];
            v4827[1] = v4821;
            v4827[2] = v4822;
            *v4827 = v4820;
            v4828 = &v4815->i8[24 * v4812];
            *((_OWORD *)v4828 + 1) = v4824;
            *((_OWORD *)v4828 + 2) = v4825;
            *(_OWORD *)v4828 = v4823;
          }
          else
          {
            v4829 = *(int64x2_t *)(v4811 + 16);
            v4830 = (int64x2_t *)(v4813 + 8 * (v4809 + (_DWORD)v4812 * v4810));
            v4832 = *(int64x2_t *)(v4811 + 64);
            v4831 = *(int64x2_t *)(v4811 + 80);
            v4833 = *(int64x2_t *)(v4811 + 32);
            v4834 = *(int64x2_t *)(v4811 + 48);
            v4836 = *(int64x2_t *)(v4811 + 96);
            v4835 = *(int64x2_t *)(v4811 + 112);
            v4838 = *(int64x2_t *)(v4811 + 160);
            v4837 = *(int64x2_t *)(v4811 + 176);
            v4839 = *(int64x2_t *)(v4811 + 128);
            v4840 = *(int64x2_t *)(v4811 + 144);
            v4841 = vzip2q_s64(*(int64x2_t *)v4811, v4834);
            *v4830 = vzip1q_s64(*(int64x2_t *)v4811, v4834);
            v4830[1] = vzip1q_s64(v4836, v4840);
            v4842 = (int64x2_t *)((char *)v4830 + 8 * v4812);
            *v4842 = v4841;
            v4842[1] = vzip2q_s64(v4836, v4840);
            v4843 = &v4830[v4812];
            *v4843 = vzip1q_s64(v4829, v4832);
            v4843[1] = vzip1q_s64(v4835, v4838);
            v4844 = (int64x2_t *)((char *)v4830 + 24 * v4812);
            *v4844 = vzip2q_s64(v4829, v4832);
            v4844[1] = vzip2q_s64(v4835, v4838);
            v4845 = &v4830[2 * v4812];
            *v4845 = vzip1q_s64(v4833, v4831);
            v4845[1] = vzip1q_s64(v4839, v4837);
            v4846 = (int64x2_t *)((char *)v4830 + 40 * v4812);
            *v4846 = vzip2q_s64(v4833, v4831);
            v4846[1] = vzip2q_s64(v4839, v4837);
          }
          v4847 = v4804 + 1;
          while (v4847 != v4807)
          {
            ++v4806;
            v4848 = *v4847++;
            v4808 = v4848;
            if (v4848 != -1)
            {
              v4804 = v4847 - 1;
              goto LABEL_2138;
            }
          }
          v4799 = *(_DWORD *)(result + 8652);
        }
      }
      ++v4800;
      ++v4801;
    }
    while (v4800 < v4799);
    v1958 = *a5;
  }
  v4852 = *(_DWORD *)(result + 10092);
  if (v4852)
  {
    v4853 = 0;
    v4854 = a4[21];
    do
    {
      v4855 = *(_QWORD *)(result + 10168);
      v4856 = *(_DWORD *)(result + 10192) * v4853;
      v4857 = (uint64_t *)(v4855 + 8 * v4856);
      v4858 = *(_DWORD *)(result + 10088);
      if (v4858 && *v4857 == -1)
      {
        v4859 = 0;
        v4902 = 8 * (v4858 + v4856) - 8 * v4856 - 8;
        v4903 = v4855 + 8 * v4856;
        while (v4902)
        {
          v4857 = (uint64_t *)(v4903 + 8);
          ++v4859;
          v4904 = *(_QWORD *)(v4903 + 8);
          v4902 -= 8;
          v4903 += 8;
          if (v4904 != -1)
            goto LABEL_2158;
        }
      }
      else
      {
        v4859 = 0;
LABEL_2158:
        v4860 = (uint64_t *)(v4855 + 8 * (v4856 + v4858));
        if (v4857 != v4860)
        {
          v4861 = *v4857;
LABEL_2160:
          v4862 = *v4854;
          v4863 = *(_DWORD *)(*a3 + 4 * v4859);
          v4864 = *(_QWORD *)(result + 10096) + 8 * v4861;
          v4865 = *((unsigned int *)a2 + 4);
          v4866 = *a2;
          if (v1958 && v4862 < v4863)
          {
            v4867 = *(int64x2_t *)v4864;
            v4868 = (int64x2_t *)(v4866 + 8 * (v4863 + (_DWORD)v4865 * v4862));
            v4869 = *(int64x2_t *)(v4864 + 32);
            v4870 = *(_OWORD *)(v4864 + 48);
            v4871 = *(_OWORD *)(v4864 + 64);
            v4872 = *(_OWORD *)(v4864 + 80);
            v4873 = *(int64x2_t *)(v4864 + 96);
            v4874 = *(int64x2_t *)(v4864 + 112);
            v4875 = *(int64x2_t *)(v4864 + 128);
            v4876 = *(_OWORD *)(v4864 + 144);
            v4877 = *(_OWORD *)(v4864 + 160);
            v4878 = *(_OWORD *)(v4864 + 176);
            v4868[1] = *(int64x2_t *)(v4864 + 16);
            v4868[2] = v4869;
            *v4868 = v4867;
            v4879 = &v4868->i8[8 * v4865];
            *((_OWORD *)v4879 + 1) = v4871;
            *((_OWORD *)v4879 + 2) = v4872;
            *(_OWORD *)v4879 = v4870;
            v4880 = &v4868[v4865];
            v4880[1] = v4874;
            v4880[2] = v4875;
            *v4880 = v4873;
            v4881 = &v4868->i8[24 * v4865];
            *((_OWORD *)v4881 + 1) = v4877;
            *((_OWORD *)v4881 + 2) = v4878;
            *(_OWORD *)v4881 = v4876;
          }
          else
          {
            v4882 = *(int64x2_t *)(v4864 + 16);
            v4883 = (int64x2_t *)(v4866 + 8 * (v4862 + (_DWORD)v4865 * v4863));
            v4885 = *(int64x2_t *)(v4864 + 64);
            v4884 = *(int64x2_t *)(v4864 + 80);
            v4886 = *(int64x2_t *)(v4864 + 32);
            v4887 = *(int64x2_t *)(v4864 + 48);
            v4889 = *(int64x2_t *)(v4864 + 96);
            v4888 = *(int64x2_t *)(v4864 + 112);
            v4891 = *(int64x2_t *)(v4864 + 160);
            v4890 = *(int64x2_t *)(v4864 + 176);
            v4892 = *(int64x2_t *)(v4864 + 128);
            v4893 = *(int64x2_t *)(v4864 + 144);
            v4894 = vzip2q_s64(*(int64x2_t *)v4864, v4887);
            *v4883 = vzip1q_s64(*(int64x2_t *)v4864, v4887);
            v4883[1] = vzip1q_s64(v4889, v4893);
            v4895 = (int64x2_t *)((char *)v4883 + 8 * v4865);
            *v4895 = v4894;
            v4895[1] = vzip2q_s64(v4889, v4893);
            v4896 = &v4883[v4865];
            *v4896 = vzip1q_s64(v4882, v4885);
            v4896[1] = vzip1q_s64(v4888, v4891);
            v4897 = (int64x2_t *)((char *)v4883 + 24 * v4865);
            *v4897 = vzip2q_s64(v4882, v4885);
            v4897[1] = vzip2q_s64(v4888, v4891);
            v4898 = &v4883[2 * v4865];
            *v4898 = vzip1q_s64(v4886, v4884);
            v4898[1] = vzip1q_s64(v4892, v4890);
            v4899 = (int64x2_t *)((char *)v4883 + 40 * v4865);
            *v4899 = vzip2q_s64(v4886, v4884);
            v4899[1] = vzip2q_s64(v4892, v4890);
          }
          v4900 = v4857 + 1;
          while (v4900 != v4860)
          {
            ++v4859;
            v4901 = *v4900++;
            v4861 = v4901;
            if (v4901 != -1)
            {
              v4857 = v4900 - 1;
              goto LABEL_2160;
            }
          }
          v4852 = *(_DWORD *)(result + 10092);
        }
      }
      ++v4853;
      ++v4854;
    }
    while (v4853 < v4852);
    v1958 = *a5;
  }
  v4905 = *(_DWORD *)(result + 11532);
  if (v4905)
  {
    v4906 = 0;
    v4907 = a4[24];
    do
    {
      v4908 = *(_QWORD *)(result + 11608);
      v4909 = *(_DWORD *)(result + 11632) * v4906;
      v4910 = (uint64_t *)(v4908 + 8 * v4909);
      v4911 = *(_DWORD *)(result + 11528);
      if (v4911 && *v4910 == -1)
      {
        v4912 = 0;
        v4949 = 8 * (v4911 + v4909) - 8 * v4909 - 8;
        v4950 = v4908 + 8 * v4909;
        while (v4949)
        {
          v4910 = (uint64_t *)(v4950 + 8);
          ++v4912;
          v4951 = *(_QWORD *)(v4950 + 8);
          v4949 -= 8;
          v4950 += 8;
          if (v4951 != -1)
            goto LABEL_2180;
        }
      }
      else
      {
        v4912 = 0;
LABEL_2180:
        v4913 = (uint64_t *)(v4908 + 8 * (v4909 + v4911));
        if (v4910 != v4913)
        {
          v4914 = *v4910;
LABEL_2182:
          v4915 = *v4907;
          v4916 = *(_DWORD *)(*a3 + 4 * v4912);
          v4917 = *(_QWORD *)(result + 11536) + 8 * v4914;
          v4918 = *((unsigned int *)a2 + 4);
          v4919 = *a2;
          if (v1958 && v4915 < v4916)
          {
            v4920 = *(int64x2_t *)v4917;
            v4921 = (int64x2_t *)(v4919 + 8 * (v4916 + (_DWORD)v4918 * v4915));
            v4922 = *(int64x2_t *)(v4917 + 32);
            v4923 = *(_OWORD *)(v4917 + 48);
            v4924 = *(_OWORD *)(v4917 + 64);
            v4925 = *(_OWORD *)(v4917 + 80);
            v4926 = *(int64x2_t *)(v4917 + 96);
            v4927 = *(int64x2_t *)(v4917 + 112);
            v4928 = *(int64x2_t *)(v4917 + 128);
            v4921[1] = *(int64x2_t *)(v4917 + 16);
            v4921[2] = v4922;
            *v4921 = v4920;
            v4929 = &v4921->i8[8 * v4918];
            *((_OWORD *)v4929 + 1) = v4924;
            *((_OWORD *)v4929 + 2) = v4925;
            *(_OWORD *)v4929 = v4923;
            v4930 = &v4921[v4918];
            v4930[1] = v4927;
            v4930[2] = v4928;
            *v4930 = v4926;
          }
          else
          {
            v4931 = *(int64x2_t *)(v4917 + 16);
            v4932 = (int64x2_t *)(v4919 + 8 * (v4915 + (_DWORD)v4918 * v4916));
            v4934 = *(int64x2_t *)(v4917 + 64);
            v4933 = *(int64x2_t *)(v4917 + 80);
            v4935 = *(int64x2_t *)(v4917 + 32);
            v4936 = *(int64x2_t *)(v4917 + 48);
            v4938 = *(_OWORD *)(v4917 + 112);
            v4937 = *(_OWORD *)(v4917 + 128);
            v4939 = *(_OWORD *)(v4917 + 96);
            v4940 = vzip1q_s64(*(int64x2_t *)v4917, v4936);
            v4941 = vzip2q_s64(*(int64x2_t *)v4917, v4936);
            v4932[1].i64[0] = v4939;
            *v4932 = v4940;
            v4942 = (int64x2_t *)((char *)v4932 + 8 * v4918);
            *v4942 = v4941;
            v4942[1].i64[0] = *((_QWORD *)&v4939 + 1);
            v4943 = &v4932[v4918];
            v4943[1].i64[0] = v4938;
            *v4943 = vzip1q_s64(v4931, v4934);
            v4944 = (int64x2_t *)((char *)v4932 + 24 * v4918);
            v4944[1].i64[0] = *((_QWORD *)&v4938 + 1);
            *v4944 = vzip2q_s64(v4931, v4934);
            v4945 = &v4932[2 * v4918];
            v4945[1].i64[0] = v4937;
            *v4945 = vzip1q_s64(v4935, v4933);
            v4946 = (int64x2_t *)((char *)v4932 + 40 * v4918);
            v4946[1].i64[0] = *((_QWORD *)&v4937 + 1);
            *v4946 = vzip2q_s64(v4935, v4933);
          }
          v4947 = v4910 + 1;
          while (v4947 != v4913)
          {
            ++v4912;
            v4948 = *v4947++;
            v4914 = v4948;
            if (v4948 != -1)
            {
              v4910 = v4947 - 1;
              goto LABEL_2182;
            }
          }
          v4905 = *(_DWORD *)(result + 11532);
        }
      }
      ++v4906;
      ++v4907;
    }
    while (v4906 < v4905);
    v1958 = *a5;
  }
  v4952 = *(_DWORD *)(result + 12972);
  if (v4952)
  {
    v4953 = 0;
    v4954 = a4[27];
    do
    {
      v4955 = *(_QWORD *)(result + 13048);
      v4956 = *(_DWORD *)(result + 13072) * v4953;
      v4957 = (uint64_t *)(v4955 + 8 * v4956);
      v4958 = *(_DWORD *)(result + 12968);
      if (v4958 && *v4957 == -1)
      {
        v4959 = 0;
        v4996 = 8 * (v4958 + v4956) - 8 * v4956 - 8;
        v4997 = v4955 + 8 * v4956;
        while (v4996)
        {
          v4957 = (uint64_t *)(v4997 + 8);
          ++v4959;
          v4998 = *(_QWORD *)(v4997 + 8);
          v4996 -= 8;
          v4997 += 8;
          if (v4998 != -1)
            goto LABEL_2202;
        }
      }
      else
      {
        v4959 = 0;
LABEL_2202:
        v4960 = (uint64_t *)(v4955 + 8 * (v4956 + v4958));
        if (v4957 != v4960)
        {
          v4961 = *v4957;
LABEL_2204:
          v4962 = *v4954;
          v4963 = *(_DWORD *)(*a3 + 4 * v4959);
          v4964 = *(_QWORD *)(result + 12976) + 8 * v4961;
          v4965 = *((unsigned int *)a2 + 4);
          v4966 = *a2;
          if (v1958 && v4962 < v4963)
          {
            v4967 = *(int64x2_t *)v4964;
            v4968 = (int64x2_t *)(v4966 + 8 * (v4963 + (_DWORD)v4965 * v4962));
            v4969 = *(int64x2_t *)(v4964 + 32);
            v4970 = *(_OWORD *)(v4964 + 48);
            v4971 = *(_OWORD *)(v4964 + 64);
            v4972 = *(_OWORD *)(v4964 + 80);
            v4973 = *(int64x2_t *)(v4964 + 96);
            v4974 = *(int64x2_t *)(v4964 + 112);
            v4975 = *(int64x2_t *)(v4964 + 128);
            v4968[1] = *(int64x2_t *)(v4964 + 16);
            v4968[2] = v4969;
            *v4968 = v4967;
            v4976 = &v4968->i8[8 * v4965];
            *((_OWORD *)v4976 + 1) = v4971;
            *((_OWORD *)v4976 + 2) = v4972;
            *(_OWORD *)v4976 = v4970;
            v4977 = &v4968[v4965];
            v4977[1] = v4974;
            v4977[2] = v4975;
            *v4977 = v4973;
          }
          else
          {
            v4978 = *(int64x2_t *)(v4964 + 16);
            v4979 = (int64x2_t *)(v4966 + 8 * (v4962 + (_DWORD)v4965 * v4963));
            v4981 = *(int64x2_t *)(v4964 + 64);
            v4980 = *(int64x2_t *)(v4964 + 80);
            v4982 = *(int64x2_t *)(v4964 + 32);
            v4983 = *(int64x2_t *)(v4964 + 48);
            v4985 = *(_OWORD *)(v4964 + 112);
            v4984 = *(_OWORD *)(v4964 + 128);
            v4986 = *(_OWORD *)(v4964 + 96);
            v4987 = vzip1q_s64(*(int64x2_t *)v4964, v4983);
            v4988 = vzip2q_s64(*(int64x2_t *)v4964, v4983);
            v4979[1].i64[0] = v4986;
            *v4979 = v4987;
            v4989 = (int64x2_t *)((char *)v4979 + 8 * v4965);
            *v4989 = v4988;
            v4989[1].i64[0] = *((_QWORD *)&v4986 + 1);
            v4990 = &v4979[v4965];
            v4990[1].i64[0] = v4985;
            *v4990 = vzip1q_s64(v4978, v4981);
            v4991 = (int64x2_t *)((char *)v4979 + 24 * v4965);
            v4991[1].i64[0] = *((_QWORD *)&v4985 + 1);
            *v4991 = vzip2q_s64(v4978, v4981);
            v4992 = &v4979[2 * v4965];
            v4992[1].i64[0] = v4984;
            *v4992 = vzip1q_s64(v4982, v4980);
            v4993 = (int64x2_t *)((char *)v4979 + 40 * v4965);
            v4993[1].i64[0] = *((_QWORD *)&v4984 + 1);
            *v4993 = vzip2q_s64(v4982, v4980);
          }
          v4994 = v4957 + 1;
          while (v4994 != v4960)
          {
            ++v4959;
            v4995 = *v4994++;
            v4961 = v4995;
            if (v4995 != -1)
            {
              v4957 = v4994 - 1;
              goto LABEL_2204;
            }
          }
          v4952 = *(_DWORD *)(result + 12972);
        }
      }
      ++v4953;
      ++v4954;
    }
    while (v4953 < v4952);
  }
  return result;
}

uint64_t sub_20F9D681C(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  int32x4_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int32x4_t v54;
  int32x4_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int64x2_t *v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t *v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t *v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v129;
  int v130;
  unsigned int v131;
  unint64_t v132;
  int32x4_t v133;
  int32x4_t v134;
  unsigned int v135;
  unint64_t v136;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  BOOL v145;
  int v146;
  int v147;
  unsigned int v148;
  int32x4_t v149;
  int32x4_t v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  int64x2_t v160;
  int64x2_t v161;
  uint64_t v162;
  int64x2_t v163;

  v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *((unsigned int *)a2 + 5);
    v6 = *((_DWORD *)a2 + 5) & 7;
    v153 = v5 & 0xFFFFFFF8;
    v154 = *((_DWORD *)a2 + 4);
    v159 = 2 * v6;
    v158 = -2 * v6;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    v8 = v154;
    while (1)
    {
      v9 = v8 <= 1 ? 1 : v8;
      v155 = v4 + 8;
      v156 = v8;
      v157 = v3;
      if (v4 + 8 <= v2 || v2 - v4 == 8)
        break;
      if ((_DWORD)v5)
      {
        v10 = 0;
        v11 = *(unsigned int *)(result + 16);
        v12 = *(_QWORD *)(result + 8) - 8 * v11;
        v162 = *a2;
        v13 = *((_DWORD *)a2 + 4);
        while (1)
        {
          v14 = v10 + 8;
          v15 = v10 + 8 <= v5 ? 8 : v5 - v10;
          if (v15)
            break;
LABEL_11:
          v10 = v14;
          if (v14 >= v5)
            goto LABEL_3;
        }
        v16 = 0;
        v17 = 0;
        v18 = v162 + 8 * (v4 + v13 * v10);
        v19 = v11 + v10;
        if (v15 >= 0)
          v20 = v15;
        else
          v20 = -v15;
        v21 = 2 * v15;
        v22 = -2 * v15;
        while (1)
        {
          v26 = HIDWORD(v17);
          if (v20 >> 4 >= 0x271)
          {
            v29 = v15 + v17 + v15 * HIDWORD(v17);
            v30 = (v29 / v15);
            v31 = (v29 % v15);
            v32 = v31 | (v30 << 32);
            v28 = (v31 + v15) | ((unint64_t)(v30 - 1) << 32);
            if ((int)v31 >= 0)
              v28 = v32;
            goto LABEL_44;
          }
          v27 = (v15 + v17);
          if (v15 + (int)v17 >= 0)
          {
            v28 = v17 & 0xFFFFFFFF00000000 | v27;
            if ((int)v27 >= v15)
              goto LABEL_41;
            goto LABEL_44;
          }
          v33 = v22 + ((v21 + v17) & ~((v21 + (int)v17) >> 31));
          v34 = v33 == (_DWORD)v17 ? 1 : 2;
          v35 = v34 + (v33 - (v33 != (_DWORD)v17) - v17) / v15;
          if (v35 < 8)
            break;
          LODWORD(v27) = v27 + (v35 & 0xFFFFFFF8) * v15;
          v37 = 0uLL;
          v38 = (int32x4_t)HIDWORD(v17);
          v39 = v35 & 0xFFFFFFF8;
          do
          {
            v38 = vaddq_s32(v38, v7);
            v37 = vaddq_s32(v37, v7);
            v39 -= 8;
          }
          while (v39);
          v36 = vaddvq_s32(vaddq_s32(v37, v38));
          if (v35 != (v35 & 0xFFFFFFF8))
            goto LABEL_39;
LABEL_40:
          v28 = v27 | (v36 << 32);
          if ((int)v27 >= v15)
          {
LABEL_41:
            v40 = HIDWORD(v28);
            do
            {
              v27 = (v27 - v15);
              v40 = (v40 + 1);
            }
            while ((int)v27 >= v15);
            v28 = v27 | (v40 << 32);
          }
LABEL_44:
          if ((_DWORD)v17 != (_DWORD)v28 || HIDWORD(v17) != HIDWORD(v28))
          {
            v42 = (_QWORD *)(v12 + 8 * (v19 + 196 * (v4 + v16)));
            LODWORD(v43) = v17;
            v44 = v17;
            do
            {
              *v42++ = *(_QWORD *)(v18 + 8 * (HIDWORD(v44) + v43 * v13));
              v45 = (v43 + 1);
              v46 = v44 & 0xFFFFFFFF00000000;
              v47 = v46 | v45;
              v48 = v46 + 0x100000000;
              if (v15 <= (int)v45)
                v43 = v48;
              else
                v43 = v47;
              v49 = (_DWORD)v43 == (_DWORD)v28 && HIDWORD(v43) == HIDWORD(v28);
              v44 = v43;
            }
            while (!v49);
          }
          if (v20 >> 4 >= 0x271)
          {
            v23 = v15 + v17 + v15 * HIDWORD(v17);
            v24 = (v23 / v15);
            v25 = (v23 % v15);
            if ((v25 & 0x80000000) != 0)
            {
              v25 = (v25 + v15);
              v24 = (v24 - 1);
            }
            v17 = v25 | (v24 << 32);
            goto LABEL_23;
          }
          v50 = (v15 + v17);
          if (v15 + (int)v17 < 0)
          {
            v51 = v22 + ((v21 + v17) & ~((v21 + (int)v17) >> 31));
            if (v51 == (_DWORD)v17)
              v52 = 1;
            else
              v52 = 2;
            v53 = v52 + (v51 - (v51 != (_DWORD)v17) - v17) / v15;
            if (v53 < 8)
              goto LABEL_129;
            LODWORD(v50) = v50 + (v53 & 0xFFFFFFF8) * v15;
            v54 = 0uLL;
            v55 = (int32x4_t)HIDWORD(v17);
            v56 = v53 & 0xFFFFFFF8;
            do
            {
              v55 = vaddq_s32(v55, v7);
              v54 = vaddq_s32(v54, v7);
              v56 -= 8;
            }
            while (v56);
            v26 = vaddvq_s32(vaddq_s32(v54, v55));
            if (v53 != (v53 & 0xFFFFFFF8))
            {
LABEL_129:
              do
              {
                LODWORD(v50) = v50 + v15;
                v26 = (v26 - 1);
              }
              while ((v50 & 0x80000000) != 0);
            }
            v17 = v50 | (v26 << 32);
            if ((int)v50 < v15)
              goto LABEL_23;
LABEL_70:
            v57 = HIDWORD(v17);
            do
            {
              v50 = (v50 - v15);
              v57 = (v57 + 1);
            }
            while ((int)v50 >= v15);
            v17 = v50 | (v57 << 32);
            goto LABEL_23;
          }
          v17 = v17 & 0xFFFFFFFF00000000 | v50;
          if ((int)v50 >= v15)
            goto LABEL_70;
LABEL_23:
          if (++v16 == v9)
            goto LABEL_11;
        }
        v36 = HIDWORD(v17);
        do
        {
LABEL_39:
          LODWORD(v27) = v27 + v15;
          v36 = (v36 - 1);
        }
        while ((v27 & 0x80000000) != 0);
        goto LABEL_40;
      }
LABEL_3:
      v8 = v156 - 8;
      v3 = v157 + 1568;
      v2 = v154;
      v4 += 8;
      if (v155 >= v154)
        return result;
    }
    if (v5 >= 8)
    {
      v58 = 0;
      do
      {
        v59 = *((unsigned int *)a2 + 4);
        v60 = (int64x2_t *)(*a2 + 8 * (v4 + v59 * v58));
        v61 = v60[2];
        v161 = v60[3];
        v63 = *v60;
        v62 = v60[1];
        v64 = (int64x2_t *)((char *)v60 + 8 * v59);
        v66 = v64[2];
        v65 = v64[3];
        v68 = *v64;
        v67 = v64[1];
        v69 = &v60[v59];
        v71 = v69[2];
        v70 = v69[3];
        v73 = *v69;
        v72 = v69[1];
        v74 = (int64x2_t *)((char *)v60 + 24 * v59);
        v76 = v74[2];
        v75 = v74[3];
        v78 = *v74;
        v77 = v74[1];
        v79 = &v60[2 * v59];
        v81 = v79[2];
        v80 = v79[3];
        v83 = *v79;
        v82 = v79[1];
        v84 = (int64x2_t *)((char *)v60 + 40 * v59);
        v86 = v84[2];
        v85 = v84[3];
        v87 = *v84;
        v88 = v84[1];
        v89 = &v60[3 * v59];
        v91 = v89[2];
        v90 = v89[3];
        v92 = v89[1];
        v93 = (int64x2_t *)((char *)v60 + 56 * v59);
        v163 = vzip1q_s64(v63, v68);
        v160 = vzip2q_s64(v63, v68);
        v94 = vzip1q_s64(v73, v78);
        v73.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
        v73.i64[1] = v78.i64[1];
        v78.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v95 = vzip1q_s64(v83, v87);
        v78.i64[1] = v87.i64[1];
        v96 = vzip1q_s64(*v89, *v93);
        v97.i64[0] = vdupq_laneq_s64(*v89, 1).u64[0];
        v97.i64[1] = v93->i64[1];
        v98.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
        v98.i64[1] = v77.i64[1];
        v99 = vzip1q_s64(v72, v77);
        v100 = vzip1q_s64(v82, v88);
        v82.i64[0] = vdupq_laneq_s64(v82, 1).u64[0];
        v82.i64[1] = v88.i64[1];
        v101 = vzip1q_s64(v92, v93[1]);
        v92.i64[0] = vdupq_laneq_s64(v92, 1).u64[0];
        v92.i64[1] = v93[1].i64[1];
        v102 = vzip1q_s64(v62, v67);
        v103 = vzip2q_s64(v62, v67);
        v104 = vzip1q_s64(v71, v76);
        v71.i64[0] = vdupq_laneq_s64(v71, 1).u64[0];
        v71.i64[1] = v76.i64[1];
        v105 = vzip1q_s64(v81, v86);
        v81.i64[0] = vdupq_laneq_s64(v81, 1).u64[0];
        v81.i64[1] = v86.i64[1];
        v106 = vzip1q_s64(v61, v66);
        v107 = vzip2q_s64(v61, v66);
        v108 = vzip1q_s64(v91, v93[2]);
        v91.i64[0] = vdupq_laneq_s64(v91, 1).u64[0];
        v91.i64[1] = v93[2].i64[1];
        v109 = vzip1q_s64(v70, v75);
        v70.i64[0] = vdupq_laneq_s64(v70, 1).u64[0];
        v70.i64[1] = v75.i64[1];
        v110 = vzip1q_s64(v161, v65);
        v111 = vzip2q_s64(v161, v65);
        v112 = vzip1q_s64(v80, v85);
        v80.i64[0] = vdupq_laneq_s64(v80, 1).u64[0];
        v80.i64[1] = v85.i64[1];
        v113 = vzip1q_s64(v90, v93[3]);
        v90.i64[0] = vdupq_laneq_s64(v90, 1).u64[0];
        v90.i64[1] = v93[3].i64[1];
        v114 = (int64x2_t *)(*(_QWORD *)(result + 8)
                           - 8 * *(unsigned int *)(result + 16)
                           + 8 * (v3 + v58 + *(_DWORD *)(result + 16)));
        v114[2] = v95;
        v114[3] = v96;
        *v114 = v163;
        v114[1] = v94;
        v114[98] = v160;
        v114[101] = v97;
        v114[100] = v78;
        v114[99] = v73;
        v114[199] = v101;
        v114[198] = v100;
        v114[197] = v99;
        v114[196] = v102;
        v114[294] = v103;
        v114[297] = v92;
        v114[296] = v82;
        v114[295] = v98;
        v114[395] = v108;
        v114[394] = v105;
        v114[393] = v104;
        v114[392] = v106;
        v114[490] = v107;
        v114[493] = v91;
        v114[492] = v81;
        v114[491] = v71;
        v114[591] = v113;
        v114[590] = v112;
        v114[589] = v109;
        v114[588] = v110;
        v114[686] = v111;
        v114[689] = v90;
        v114[688] = v80;
        v114[687] = v70;
        LODWORD(v114) = v58 + 16;
        v58 += 8;
      }
      while (v114 <= v5);
    }
    if (!v6)
      goto LABEL_3;
    v115 = 0;
    v116 = 0;
    v117 = *(unsigned int *)(result + 16);
    v118 = *(_QWORD *)(result + 8) - 8 * v117;
    v119 = *((_DWORD *)a2 + 4);
    v120 = *a2 + 8 * (v4 + v119 * v153);
    v121 = v117 + v153;
    while (1)
    {
      v122 = HIDWORD(v116);
      v123 = (v6 + v116);
      v124 = v116 & 0xFFFFFFFF00000000 | v123;
      v125 = v124;
      LODWORD(v126) = v6 + v116;
      if (v6 + (int)v116 >= 0)
      {
        if ((int)v126 < v6)
          goto LABEL_81;
        goto LABEL_97;
      }
      v129 = v158 + ((v159 + v116) & ~((v159 + (int)v116) >> 31));
      v130 = v129 == (_DWORD)v116 ? 1 : 2;
      v131 = v130 + (v129 - (v129 != (_DWORD)v116) - v116) / v6;
      if (v131 < 8)
        break;
      LODWORD(v126) = v123 + (v131 & 0xFFFFFFF8) * v6;
      v133 = 0uLL;
      v134 = (int32x4_t)HIDWORD(v116);
      v135 = v131 & 0xFFFFFFF8;
      do
      {
        v134 = vaddq_s32(v134, v7);
        v133 = vaddq_s32(v133, v7);
        v135 -= 8;
      }
      while (v135);
      v132 = vaddvq_s32(vaddq_s32(v133, v134));
      if (v131 != (v131 & 0xFFFFFFF8))
        goto LABEL_95;
LABEL_96:
      v125 = v126 | (v132 << 32);
      if ((int)v126 < v6)
      {
LABEL_81:
        v127 = HIDWORD(v125);
        if ((_DWORD)v116 == (_DWORD)v125 && HIDWORD(v116) == HIDWORD(v125))
          goto LABEL_112;
        goto LABEL_103;
      }
LABEL_97:
      v136 = HIDWORD(v125);
      do
      {
        v126 = (v126 - v6);
        v136 = (v136 + 1);
      }
      while ((int)v126 >= v6);
      v125 = v126 | (v136 << 32);
      v127 = HIDWORD(v125);
      if ((_DWORD)v116 == (_DWORD)v125 && HIDWORD(v116) == HIDWORD(v125))
        goto LABEL_112;
LABEL_103:
      v138 = (_QWORD *)(v118 + 8 * (v121 + 196 * (v4 + v115)));
      LODWORD(v139) = v116;
      v140 = v116;
      do
      {
        *v138++ = *(_QWORD *)(v120 + 8 * (HIDWORD(v140) + v139 * v119));
        v141 = (v139 + 1);
        v142 = v140 & 0xFFFFFFFF00000000;
        v143 = v142 | v141;
        v144 = v142 + 0x100000000;
        if (v6 <= (int)v141)
          v139 = v144;
        else
          v139 = v143;
        v145 = (_DWORD)v139 == (_DWORD)v125 && HIDWORD(v139) == (_DWORD)v127;
        v140 = v139;
      }
      while (!v145);
LABEL_112:
      if ((v123 & 0x80000000) != 0)
      {
        v146 = v158 + ((v159 + v116) & ~((v159 + (int)v116) >> 31));
        if (v146 == (_DWORD)v116)
          v147 = 1;
        else
          v147 = 2;
        v148 = v147 + (v146 - (v146 != (_DWORD)v116) - v116) / v6;
        if (v148 < 8)
          goto LABEL_130;
        LODWORD(v123) = v123 + (v148 & 0xFFFFFFF8) * v6;
        v149 = 0uLL;
        v150 = (int32x4_t)HIDWORD(v116);
        v151 = v148 & 0xFFFFFFF8;
        do
        {
          v150 = vaddq_s32(v150, v7);
          v149 = vaddq_s32(v149, v7);
          v151 -= 8;
        }
        while (v151);
        v122 = vaddvq_s32(vaddq_s32(v149, v150));
        if (v148 != (v148 & 0xFFFFFFF8))
        {
LABEL_130:
          do
          {
            LODWORD(v123) = v123 + v6;
            v122 = (v122 - 1);
          }
          while ((v123 & 0x80000000) != 0);
        }
        v124 = v123 | (v122 << 32);
        if ((int)v123 < v6)
          goto LABEL_78;
LABEL_124:
        v152 = HIDWORD(v124);
        do
        {
          v123 = (v123 - v6);
          v152 = (v152 + 1);
        }
        while ((int)v123 >= v6);
        v124 = v123 | (v152 << 32);
        goto LABEL_78;
      }
      if ((int)v123 >= v6)
        goto LABEL_124;
LABEL_78:
      ++v115;
      v116 = v124;
      if (v115 == 8)
        goto LABEL_3;
    }
    v132 = HIDWORD(v116);
    LODWORD(v126) = v6 + v116;
    do
    {
LABEL_95:
      LODWORD(v126) = v126 + v6;
      v132 = (v132 - 1);
    }
    while ((v126 & 0x80000000) != 0);
    goto LABEL_96;
  }
  return result;
}

double sub_20F9D7008(uint64_t a1, double **a2)
{
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double i;
  float64x2_t *v23;
  _BOOL4 v24;
  uint64_t v25;
  __int128 v26;
  float64x2_t v27;
  double *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const double *v45;
  uint64_t v46;
  double v47;
  double v49;
  double v50;
  double v51;
  float64x2_t v52;
  double v55;
  float64x2_t v56;
  double v59;
  float64x2_t v60;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64_t v69;
  float64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  double v74;
  double v75;
  _QWORD *v76;
  _QWORD *v77;
  const double *v78;
  uint64_t v79;
  double v80;
  double v82;
  double v83;
  double v84;
  float64x2_t v85;
  double v88;
  float64x2_t v89;
  double v92;
  float64x2_t v93;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64_t v102;
  float64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  const double *v109;
  uint64_t v110;
  double v111;
  double v113;
  double v114;
  double v115;
  float64x2_t v116;
  double v119;
  float64x2_t v120;
  double v123;
  float64x2_t v124;
  float64x2_t *v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  float64x2_t *v132;
  float64_t v133;
  float64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  float64x2_t *v140;
  int8x16_t *v141;
  float64x2_t *v142;
  float64x2_t v143;
  float64x2_t v144;
  int8x16_t v145;
  uint64_t v146;
  float64_t v147;
  float64_t v148;
  uint64_t v149;
  uint64_t v150;
  float64x2_t *v151;
  int v152;
  uint64_t v155;
  __int128 v157;
  __int128 v158;
  uint64_t v169;
  double v170;
  double v171;
  __int128 v173;
  __int128 v174;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  double v192;
  float64x2_t v194;
  float64x2_t v195;
  int8x16_t v196;
  float64x2_t v197;
  int64x2_t v201;
  int64x2_t v202;
  double v203;
  float64x2_t v205;
  float64x2_t v206;
  int8x16_t v207;
  double v208;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t *v213;
  float64x2_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float64x2_t *v224;
  float64x2_t v225;
  float64x2_t *v226;
  uint64_t v227;
  float64_t v228;
  float64_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  float64x2_t v236;
  float64x2_t *v237;
  float64x2_t v238;
  uint64_t v239;
  float64_t v240;
  float64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  double v249;
  float64x2_t *v250;
  _BOOL4 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  float64_t v256;
  uint64_t v257;
  uint64_t v258;
  double v259;
  double v260;
  float64x2_t *v261;
  float64x2_t *v262;
  uint64_t v263;
  double v264;
  uint64_t v265;
  uint64_t v266;
  float64x2_t *v267;
  float64x2_t *v268;
  uint64_t v269;
  double v270;
  uint64_t v271;
  uint64_t v272;
  double v273;
  double v274;
  uint64_t v275;
  double v279;
  double v280;
  double v281;
  double cosval;
  double v283;
  __double2 v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  float64x2_t v306;
  double v307;
  float64x2_t v308;
  double v309;
  float64x2_t v310;
  int8x16_t *v311;
  float64x2_t v312;
  uint64_t v313;
  float64x2_t v314;
  int8x16_t v315;
  uint64_t v316;
  float64_t v317;
  float64_t v318;
  uint64_t v319;
  uint64_t v320;
  int8x16_t *v321;
  float64x2_t *v322;
  float64x2_t v323;
  int8x16_t v324;
  uint64_t v325;
  float64_t v326;
  float64_t v327;
  double v328;
  uint64_t v329;
  uint64_t v330;
  double v331;
  double v332;
  int v333;
  uint64_t v334;
  double v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  double v342;
  uint64_t v343;
  uint64_t v344;
  double v345;
  int v346;
  uint64_t v347;
  double v348;
  __int128 *v349;
  __int128 *v350;
  __int128 v351;
  __int128 v354;
  double v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  __int128 v374;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  unint64_t v385;
  double v386;
  uint64_t v387;
  __int128 v388;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  __int128 v400;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  double v410;
  unint64_t v411;
  double v412;
  unint64_t v413;
  uint64_t v414;
  double *v415;
  uint64_t v416;
  double v420;
  uint64_t v422;
  uint64_t v423;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  double v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v448;
  double v449;
  unint64_t v450;
  double v451;
  uint64_t v452;
  double v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  double *v478;
  uint64_t v479;
  double v483;
  uint64_t v484;
  uint64_t v485;
  double v486;
  unint64_t v487;
  double v488;
  unint64_t v489;
  uint64_t v490;
  double *v491;
  uint64_t v492;
  double v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  double v508;
  unint64_t v509;
  double v510;
  uint64_t v511;
  double v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  double *v523;
  uint64_t v524;
  double v525;
  double v526;
  double v527;
  double v528;
  uint64_t v529;
  uint64_t v530;
  double v531;
  unint64_t v532;
  double v533;
  unint64_t v534;
  uint64_t v535;
  double *v536;
  uint64_t v537;
  double v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  double *v548;
  uint64_t v549;
  double v554;
  uint64_t v555;
  uint64_t v556;
  double v557;
  unint64_t v558;
  double v559;
  unint64_t v560;
  uint64_t v561;
  double *v562;
  uint64_t v563;
  double v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  double *v573;
  uint64_t v574;
  double v578;
  uint64_t v579;
  uint64_t v580;
  double v581;
  unint64_t v582;
  double v583;
  unint64_t v584;
  uint64_t v585;
  double *v586;
  uint64_t v587;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  unint64_t v594;
  uint64_t v595;
  double *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  double *v603;
  uint64_t v604;
  double v605;
  double v609;
  double v610;
  double v611;
  double v612;
  double v613;
  double v614;
  double v615;
  double v616;
  double v617;
  double v618;
  double v620;
  double v621;
  double v622;
  double v623;
  double v624;
  double v625;
  double v626;
  double v627;
  double v628;
  double v629;
  double v630;
  double v631;
  float64x2_t v632;
  __int128 v633;
  float64x2_t v634;
  __int128 v635;
  float64x2_t v636;
  __int128 v637;
  float64x2_t v638;
  float64_t v639;
  uint64_t v640;
  float64x2_t v641;
  _OWORD v642[2];
  float64x2_t v643;
  float64x2_t v644;
  __int128 v645;
  float64x2_t v646;
  uint64_t v647;
  uint64_t v648;
  float64x2_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  float64x2_t *v657;
  int v658;
  float64x2_t *v659;
  int v660;
  float64x2_t *v661;
  int v662;
  float64x2_t *v663;
  int v664;
  float64x2_t *v665;
  int v666;
  float64x2_t *v667;
  int v668;
  float64x2x3_t v669;
  float64x2x3_t v670;
  float64x2x3_t v671;

  kdebug_trace();
  v12 = (char *)a2[1] - (char *)*a2;
  if (v12 > 0x97)
  {
    if (v12 != 152)
      a2[1] = *a2 + 19;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a2, 19 - (v12 >> 3));
  }
  if (*(_BYTE *)(a1 + 2972))
  {
    v13 = *(_QWORD *)(a1 + 1376);
    v14 = *(__int128 **)(a1 + 1384);
    v15 = 0.0;
    v16 = 0.0;
    if ((__int128 *)v13 == v14)
      goto LABEL_170;
    if (*(_BYTE *)(a1 + 2971))
    {
      v17 = (unint64_t)v14 - v13 - 504;
      if (v17 < 0x1F8)
      {
        v18 = *(_QWORD *)(a1 + 1376);
        do
        {
LABEL_169:
          v16 = v16 + *(double *)(v18 + 464);
          v18 += 504;
        }
        while ((__int128 *)v18 != v14);
        goto LABEL_170;
      }
      v368 = v17 / 0x1F8 + 1;
      v18 = v13 + 504 * (v368 & 0x1FFFFFFFFFFFFFELL);
      v369 = v368 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v16 = v16 + *(double *)(v13 + 464) + *(double *)(v13 + 968);
        v13 += 1008;
        v369 -= 2;
      }
      while (v369);
      if (v368 != (v368 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_169;
    }
    else
    {
      v349 = (__int128 *)(v13 + 344);
      do
      {
        if (*((_BYTE *)v349 + 128))
        {
          *((_QWORD *)v349 + 14) = *((_QWORD *)v349 - 1);
          v351 = *(__int128 *)((char *)v349 - 24);
          _Q5 = *(__int128 *)((char *)v349 - 56);
          v349[5] = *(__int128 *)((char *)v349 - 40);
          v349[6] = v351;
          _Q4 = *(__int128 *)((char *)v349 - 88);
          v349[3] = *(__int128 *)((char *)v349 - 72);
          v349[4] = _Q5;
          v354 = *(__int128 *)((char *)v349 - 120);
          v349[1] = *(__int128 *)((char *)v349 - 104);
          v349[2] = _Q4;
          *v349 = v354;
          _Q17 = *v349;
          _D19 = *((_QWORD *)v349 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v349 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v349 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v349 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v349 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v349 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v349 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v367 = *(double *)(a1 + 16) * (_D18 + *((double *)v349 + 14) * *((double *)v349 + 14));
          *((double *)v349 + 15) = v367;
          v16 = v16 + v367;
        }
        v350 = v349 + 10;
        v349 = (__int128 *)((char *)v349 + 504);
      }
      while (v350 != v14);
    }
LABEL_170:
    v40 = *a2;
    **a2 = v16 * 0.5;
    v370 = *(_QWORD *)(a1 + 1400);
    v371 = *(_QWORD *)(a1 + 1408);
    if (v370 == v371)
      goto LABEL_183;
    if (*(_BYTE *)(a1 + 2971))
    {
      v372 = v371 - v370 - 280;
      v15 = 0.0;
      if (v372 < 0x118)
      {
        v373 = *(_QWORD *)(a1 + 1400);
        do
        {
LABEL_182:
          v15 = v15 + *(double *)(v373 + 240);
          v373 += 280;
        }
        while (v373 != v371);
        goto LABEL_183;
      }
      v380 = v372 / 0x118 + 1;
      v373 = v370 + 280 * (v380 & 0x1FFFFFFFFFFFFFELL);
      v381 = v380 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(double *)(v370 + 240) + *(double *)(v370 + 520);
        v370 += 560;
        v381 -= 2;
      }
      while (v381);
      if (v380 != (v380 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_182;
    }
    else
    {
      v15 = 0.0;
      do
      {
        if (*(_BYTE *)(v370 + 248))
        {
          v374 = *(_OWORD *)(v370 + 160);
          *(_OWORD *)(v370 + 192) = *(_OWORD *)(v370 + 144);
          *(_OWORD *)(v370 + 208) = v374;
          _Q3 = *(_OWORD *)(v370 + 192);
          *(_OWORD *)(v370 + 224) = *(_OWORD *)(v370 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v370 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v370 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v374 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v370 + 240) = v374;
          v15 = v15 + *(double *)&v374;
        }
        v370 += 280;
      }
      while (v370 != v371);
      v40 = *a2;
    }
LABEL_183:
    v40[1] = v15 * 0.5;
    v382 = *(_QWORD *)(a1 + 1424);
    v383 = *(_QWORD *)(a1 + 1432);
    v384 = 0.0;
    if (v382 == v383)
    {
      v386 = 0.0;
      goto LABEL_197;
    }
    if (*(_BYTE *)(a1 + 2971))
    {
      v385 = v383 - v382 - 280;
      v386 = 0.0;
      if (v385 < 0x118)
      {
        v387 = *(_QWORD *)(a1 + 1424);
        do
        {
LABEL_196:
          v386 = v386 + *(double *)(v387 + 240);
          v387 += 280;
        }
        while (v387 != v383);
        goto LABEL_197;
      }
      v394 = v385 / 0x118 + 1;
      v387 = v382 + 280 * (v394 & 0x1FFFFFFFFFFFFFELL);
      v395 = v394 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v386 = v386 + *(double *)(v382 + 240) + *(double *)(v382 + 520);
        v382 += 560;
        v395 -= 2;
      }
      while (v395);
      if (v394 != (v394 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_196;
    }
    else
    {
      v386 = 0.0;
      do
      {
        if (*(_BYTE *)(v382 + 248))
        {
          v388 = *(_OWORD *)(v382 + 160);
          *(_OWORD *)(v382 + 192) = *(_OWORD *)(v382 + 144);
          *(_OWORD *)(v382 + 208) = v388;
          _Q3 = *(_OWORD *)(v382 + 192);
          *(_OWORD *)(v382 + 224) = *(_OWORD *)(v382 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v382 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v382 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v388 = *(double *)(a1 + 48) * _D5;
          *(_QWORD *)(v382 + 240) = v388;
          v386 = v386 + *(double *)&v388;
        }
        v382 += 280;
      }
      while (v382 != v383);
      v40 = *a2;
    }
LABEL_197:
    v40[2] = v386 * 0.5;
    v396 = *(_QWORD *)(a1 + 1448);
    v397 = *(_QWORD *)(a1 + 1456);
    if (v396 == v397)
      goto LABEL_210;
    if (*(_BYTE *)(a1 + 2971))
    {
      v398 = v397 - v396 - 280;
      v384 = 0.0;
      if (v398 < 0x118)
      {
        v399 = *(_QWORD *)(a1 + 1448);
        do
        {
LABEL_209:
          v384 = v384 + *(double *)(v399 + 240);
          v399 += 280;
        }
        while (v399 != v397);
        goto LABEL_210;
      }
      v406 = v398 / 0x118 + 1;
      v399 = v396 + 280 * (v406 & 0x1FFFFFFFFFFFFFELL);
      v407 = v406 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v384 = v384 + *(double *)(v396 + 240) + *(double *)(v396 + 520);
        v396 += 560;
        v407 -= 2;
      }
      while (v407);
      if (v406 != (v406 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_209;
    }
    else
    {
      v384 = 0.0;
      do
      {
        if (*(_BYTE *)(v396 + 248))
        {
          v400 = *(_OWORD *)(v396 + 160);
          *(_OWORD *)(v396 + 192) = *(_OWORD *)(v396 + 144);
          *(_OWORD *)(v396 + 208) = v400;
          _Q3 = *(_OWORD *)(v396 + 192);
          *(_OWORD *)(v396 + 224) = *(_OWORD *)(v396 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v396 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v396 + 232);
          __asm { FMLA            D5, D3, V2.D[1] }
          *(double *)&v400 = *(double *)(a1 + 64) * _D5;
          *(_QWORD *)(v396 + 240) = v400;
          v384 = v384 + *(double *)&v400;
        }
        v396 += 280;
      }
      while (v396 != v397);
      v40 = *a2;
    }
LABEL_210:
    v40[3] = v384 * 0.5;
    v408 = *(_QWORD *)(a1 + 1472);
    v409 = *(_QWORD *)(a1 + 1480);
    v410 = 0.0;
    if (v408 == v409)
    {
      v412 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 2971))
    {
      v411 = v409 - v408 - 160;
      v412 = 0.0;
      if (v411 < 0xA0)
        goto LABEL_414;
      v413 = v411 / 0xA0 + 1;
      v414 = v408 + 160 * (v413 & 0x3FFFFFFFFFFFFFELL);
      v415 = (double *)(v408 + 280);
      v416 = v413 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v412 = v412 + *(v415 - 20) + *v415;
        v415 += 40;
        v416 -= 2;
      }
      while (v416);
      v408 = v414;
      if (v413 != (v413 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_414:
        do
        {
          v412 = v412 + *(double *)(v408 + 120);
          v408 += 160;
        }
        while (v408 != v409);
      }
    }
    else
    {
      v412 = 0.0;
      do
      {
        if (*(_BYTE *)(v408 + 128))
        {
          *(_QWORD *)(v408 + 112) = *(_QWORD *)(v408 + 88);
          *(_OWORD *)(v408 + 96) = *(_OWORD *)(v408 + 72);
          _Q3 = *(_OWORD *)(v408 + 96);
          _D5 = *(_QWORD *)(v408 + 104);
          __asm { FMLA            D4, D5, V3.D[1] }
          v420 = *(double *)(a1 + 80) * (_D4 + *(double *)(v408 + 112) * *(double *)(v408 + 112));
          *(double *)(v408 + 120) = v420;
          v412 = v412 + v420;
        }
        v408 += 160;
      }
      while (v408 != v409);
      v40 = *a2;
    }
    v40[4] = v412 * 0.5;
    _X10 = *(_QWORD *)(a1 + 1496);
    v422 = *(_QWORD *)(a1 + 1504);
    if (_X10 != v422)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v410 = 0.0;
        if ((unint64_t)(v422 - _X10 - 8016) >> 4 < 0x1F5)
        {
          v423 = *(_QWORD *)(a1 + 1496);
          do
          {
LABEL_236:
            v410 = v410 + *(double *)(v423 + 7976);
            v423 += 8016;
          }
          while (v423 != v422);
          goto LABEL_237;
        }
        v445 = (v422 - _X10 - 8016) / 0x1F50uLL + 1;
        v423 = _X10 + 8016 * (v445 & 0x1FFFFFFFFFFFFELL);
        v446 = v445 & 0x1FFFFFFFFFFFFELL;
        do
        {
          v410 = v410 + *(double *)(_X10 + 7976) + *(double *)(_X10 + 15992);
          _X10 += 16032;
          v446 -= 2;
        }
        while (v446);
        if (v445 != (v445 & 0x1FFFFFFFFFFFFELL))
          goto LABEL_236;
      }
      else
      {
        v410 = 0.0;
        do
        {
          __asm { PRFM            #0, [X10,#0x7D20] }
          if (*(_BYTE *)(_X10 + 7984))
          {
            _X14 = _X10 + 31904;
            *(_QWORD *)(_X10 + 7968) = *(_QWORD *)(_X10 + 7848);
            v426 = *(_OWORD *)(_X10 + 7816);
            *(_OWORD *)(_X10 + 7920) = *(_OWORD *)(_X10 + 7800);
            *(_OWORD *)(_X10 + 7936) = v426;
            *(_OWORD *)(_X10 + 7952) = *(_OWORD *)(_X10 + 7832);
            v427 = *(_OWORD *)(_X10 + 7752);
            *(_OWORD *)(_X10 + 7856) = *(_OWORD *)(_X10 + 7736);
            *(_OWORD *)(_X10 + 7872) = v427;
            v428 = *(_OWORD *)(_X10 + 7784);
            *(_OWORD *)(_X10 + 7888) = *(_OWORD *)(_X10 + 7768);
            *(_OWORD *)(_X10 + 7904) = v428;
            __asm { PRFM            #0, [X14] }
            _Q17 = *(_OWORD *)(_X10 + 7856);
            _D19 = *(_QWORD *)(_X10 + 7864);
            __asm { FMLA            D18, D19, V17.D[1] }
            *(_QWORD *)&_Q17 = *(_QWORD *)(_X10 + 7880);
            __asm { FMLA            D18, D17, V16.D[1] }
            _D16 = *(_QWORD *)(_X10 + 7896);
            __asm { FMLA            D18, D16, V7.D[1] }
            _D7 = *(_QWORD *)(_X10 + 7912);
            __asm { FMLA            D18, D7, V6.D[1] }
            _D6 = *(_QWORD *)(_X10 + 7928);
            __asm { FMLA            D18, D6, V5.D[1] }
            _D5 = *(_QWORD *)(_X10 + 7944);
            __asm { FMLA            D18, D5, V4.D[1] }
            _D4 = *(_QWORD *)(_X10 + 7960);
            __asm { FMLA            D18, D4, V3.D[1] }
            v444 = *(double *)(a1 + 96) * (_D18 + *(double *)(_X10 + 7968) * *(double *)(_X10 + 7968));
            *(double *)(_X10 + 7976) = v444;
            v410 = v410 + v444;
          }
          _X10 += 8016;
        }
        while (_X10 != v422);
        v40 = *a2;
      }
    }
LABEL_237:
    v40[5] = v410 * 0.5;
    _X10 = *(_QWORD *)(a1 + 1520);
    v448 = *(_QWORD *)(a1 + 1528);
    v449 = 0.0;
    if (_X10 == v448)
    {
      v451 = 0.0;
      goto LABEL_251;
    }
    if (*(_BYTE *)(a1 + 2971))
    {
      v450 = v448 - _X10 - 5336;
      v451 = 0.0;
      if (v450 >> 3 < 0x29B)
      {
        v452 = *(_QWORD *)(a1 + 1520);
        do
        {
LABEL_250:
          v451 = v451 + *(double *)(v452 + 5296);
          v452 += 5336;
        }
        while (v452 != v448);
        goto LABEL_251;
      }
      v471 = v450 / 0x14D8 + 1;
      v452 = _X10 + 5336 * (v471 & 0x1FFFFFFFFFFFFELL);
      v472 = v471 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v451 = v451 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v472 -= 2;
      }
      while (v472);
      if (v471 != (v471 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_250;
    }
    else
    {
      v451 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v470 = *(double *)(a1 + 112) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v470;
          v451 = v451 + v470;
        }
        _X10 += 5336;
      }
      while (_X10 != v448);
      v40 = *a2;
    }
LABEL_251:
    v40[6] = v451 * 0.5;
    v473 = *(_QWORD *)(a1 + 1544);
    v474 = *(_QWORD *)(a1 + 1552);
    if (v473 != v474)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v475 = v474 - v473 - 144;
        v449 = 0.0;
        if (v475 < 0x90)
          goto LABEL_415;
        v476 = v475 / 0x90 + 1;
        v477 = v473 + 144 * (v476 & 0x3FFFFFFFFFFFFFELL);
        v478 = (double *)(v473 + 248);
        v479 = v476 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v449 = v449 + *(v478 - 18) + *v478;
          v478 += 36;
          v479 -= 2;
        }
        while (v479);
        v473 = v477;
        if (v476 != (v476 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_415:
          do
          {
            v449 = v449 + *(double *)(v473 + 104);
            v473 += 144;
          }
          while (v473 != v474);
        }
      }
      else
      {
        v449 = 0.0;
        do
        {
          if (*(_BYTE *)(v473 + 112))
          {
            *(_QWORD *)(v473 + 96) = *(_QWORD *)(v473 + 72);
            *(_OWORD *)(v473 + 80) = *(_OWORD *)(v473 + 56);
            _Q3 = *(_OWORD *)(v473 + 80);
            _D5 = *(_QWORD *)(v473 + 88);
            __asm { FMLA            D4, D5, V3.D[1] }
            v483 = *(double *)(a1 + 128) * (_D4 + *(double *)(v473 + 96) * *(double *)(v473 + 96));
            *(double *)(v473 + 104) = v483;
            v449 = v449 + v483;
          }
          v473 += 144;
        }
        while (v473 != v474);
        v40 = *a2;
      }
    }
    v40[7] = v449 * 0.5;
    v484 = *(_QWORD *)(a1 + 1568);
    v485 = *(_QWORD *)(a1 + 1576);
    v486 = 0.0;
    if (v484 == v485)
    {
      v488 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 2971))
    {
      v487 = v485 - v484 - 152;
      v488 = 0.0;
      if (v487 < 0x98)
        goto LABEL_416;
      v489 = v487 / 0x98 + 1;
      v490 = v484 + 152 * (v489 & 0x3FFFFFFFFFFFFFELL);
      v491 = (double *)(v484 + 264);
      v492 = v489 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v488 = v488 + *(v491 - 19) + *v491;
        v491 += 38;
        v492 -= 2;
      }
      while (v492);
      v484 = v490;
      if (v489 != (v489 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_416:
        do
        {
          v488 = v488 + *(double *)(v484 + 112);
          v484 += 152;
        }
        while (v484 != v485);
      }
    }
    else
    {
      v488 = 0.0;
      do
      {
        if (*(_BYTE *)(v484 + 120))
        {
          *(_QWORD *)(v484 + 104) = *(_QWORD *)(v484 + 80);
          *(_OWORD *)(v484 + 88) = *(_OWORD *)(v484 + 64);
          _Q3 = *(_OWORD *)(v484 + 88);
          _D5 = *(_QWORD *)(v484 + 96);
          __asm { FMLA            D4, D5, V3.D[1] }
          v496 = *(double *)(a1 + 144) * (_D4 + *(double *)(v484 + 104) * *(double *)(v484 + 104));
          *(double *)(v484 + 112) = v496;
          v488 = v488 + v496;
        }
        v484 += 152;
      }
      while (v484 != v485);
      v40 = *a2;
    }
    v40[8] = v488 * 0.5;
    v497 = *(_QWORD *)(a1 + 1592);
    v498 = *(_QWORD *)(a1 + 1600);
    if (v497 != v498)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v499 = v498 - v497 - 304;
        v486 = 0.0;
        if (v499 < 0x130)
        {
          v500 = *(_QWORD *)(a1 + 1592);
          do
          {
LABEL_290:
            v486 = v486 + *(double *)(v500 + 264);
            v500 += 304;
          }
          while (v500 != v498);
          goto LABEL_291;
        }
        v504 = v499 / 0x130 + 1;
        v500 = v497 + 304 * (v504 & 0x1FFFFFFFFFFFFFELL);
        v505 = v504 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v486 = v486 + *(double *)(v497 + 264) + *(double *)(v497 + 568);
          v497 += 608;
          v505 -= 2;
        }
        while (v505);
        if (v504 != (v504 & 0x1FFFFFFFFFFFFFELL))
          goto LABEL_290;
      }
      else
      {
        v486 = 0.0;
        do
        {
          if (*(_BYTE *)(v497 + 272))
          {
            *(_OWORD *)(v497 + 248) = *(_OWORD *)(v497 + 232);
            _Q2 = *(_OWORD *)(v497 + 248);
            _D4 = *(_QWORD *)(v497 + 256);
            __asm { FMLA            D3, D4, V2.D[1] }
            *(double *)&_Q2 = *(double *)(a1 + 160) * _D3;
            *(_QWORD *)(v497 + 264) = _Q2;
            v486 = v486 + *(double *)&_Q2;
          }
          v497 += 304;
        }
        while (v497 != v498);
        v40 = *a2;
      }
    }
LABEL_291:
    v40[9] = v486 * 0.5;
    v506 = *(_QWORD *)(a1 + 1616);
    v507 = *(_QWORD *)(a1 + 1624);
    v508 = 0.0;
    if (v506 == v507)
    {
      v510 = 0.0;
      goto LABEL_305;
    }
    if (*(_BYTE *)(a1 + 2971))
    {
      v509 = v507 - v506 - 360;
      v510 = 0.0;
      if (v509 < 0x168)
      {
        v511 = *(_QWORD *)(a1 + 1616);
        do
        {
LABEL_304:
          v510 = v510 + *(double *)(v511 + 320);
          v511 += 360;
        }
        while (v511 != v507);
        goto LABEL_305;
      }
      v516 = v509 / 0x168 + 1;
      v511 = v506 + 360 * (v516 & 0x1FFFFFFFFFFFFFELL);
      v517 = v516 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v510 = v510 + *(double *)(v506 + 320) + *(double *)(v506 + 680);
        v506 += 720;
        v517 -= 2;
      }
      while (v517);
      if (v516 != (v516 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_304;
    }
    else
    {
      v510 = 0.0;
      do
      {
        if (*(_BYTE *)(v506 + 328))
        {
          *(_QWORD *)(v506 + 312) = *(_QWORD *)(v506 + 288);
          *(_OWORD *)(v506 + 296) = *(_OWORD *)(v506 + 272);
          _Q3 = *(_OWORD *)(v506 + 296);
          _D5 = *(_QWORD *)(v506 + 304);
          __asm { FMLA            D4, D5, V3.D[1] }
          v515 = *(double *)(a1 + 176) * (_D4 + *(double *)(v506 + 312) * *(double *)(v506 + 312));
          *(double *)(v506 + 320) = v515;
          v510 = v510 + v515;
        }
        v506 += 360;
      }
      while (v506 != v507);
      v40 = *a2;
    }
LABEL_305:
    v40[10] = v510 * 0.5;
    v518 = *(_QWORD *)(a1 + 1640);
    v519 = *(_QWORD *)(a1 + 1648);
    if (v518 != v519)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v520 = v519 - v518 - 112;
        v508 = 0.0;
        if (v520 < 0x70)
          goto LABEL_417;
        v521 = (((v520 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
        v522 = v518 + 112 * (v521 & 0x7FFFFFFFFFFFFFELL);
        v523 = (double *)(v518 + 184);
        v524 = v521 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v525 = *(v523 - 14);
          v526 = *v523;
          v523 += 28;
          v508 = v508 + v525 + v526;
          v524 -= 2;
        }
        while (v524);
        v518 = v522;
        if (v521 != (v521 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_417:
          do
          {
            v508 = v508 + *(double *)(v518 + 72);
            v518 += 112;
          }
          while (v518 != v519);
        }
      }
      else
      {
        v508 = 0.0;
        do
        {
          if (*(_BYTE *)(v518 + 80))
          {
            v527 = *(double *)(v518 + 56);
            *(double *)(v518 + 64) = v527;
            v528 = *(double *)(a1 + 192) * (v527 * v527);
            *(double *)(v518 + 72) = v528;
            v508 = v508 + v528;
          }
          v518 += 112;
        }
        while (v518 != v519);
        v40 = *a2;
      }
    }
    v40[11] = v508 * 0.5;
    v529 = *(_QWORD *)(a1 + 1664);
    v530 = *(_QWORD *)(a1 + 1672);
    v531 = 0.0;
    if (v529 == v530)
    {
      v533 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 2971))
    {
      v532 = v530 - v529 - 208;
      v533 = 0.0;
      if (v532 < 0xD0)
        goto LABEL_418;
      v534 = v532 / 0xD0 + 1;
      v535 = v529 + 208 * (v534 & 0x3FFFFFFFFFFFFFELL);
      v536 = (double *)(v529 + 376);
      v537 = v534 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v533 = v533 + *(v536 - 26) + *v536;
        v536 += 52;
        v537 -= 2;
      }
      while (v537);
      v529 = v535;
      if (v534 != (v534 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_418:
        do
        {
          v533 = v533 + *(double *)(v529 + 168);
          v529 += 208;
        }
        while (v529 != v530);
      }
    }
    else
    {
      v533 = 0.0;
      do
      {
        if (*(_BYTE *)(v529 + 176))
        {
          *(_OWORD *)(v529 + 152) = *(_OWORD *)(v529 + 120);
          *(_OWORD *)(v529 + 136) = *(_OWORD *)(v529 + 104);
          _Q3 = *(_OWORD *)(v529 + 136);
          _D5 = *(_QWORD *)(v529 + 144);
          __asm { FMLA            D4, D5, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v529 + 160);
          __asm { FMLA            D4, D3, V1.D[1] }
          v542 = *(double *)(a1 + 208) * _D4;
          *(double *)(v529 + 168) = v542;
          v533 = v533 + v542;
        }
        v529 += 208;
      }
      while (v529 != v530);
      v40 = *a2;
    }
    v40[12] = v533 * 0.5;
    v543 = *(_QWORD *)(a1 + 1688);
    v544 = *(_QWORD *)(a1 + 1696);
    if (v543 != v544)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v545 = v544 - v543 - 208;
        v531 = 0.0;
        if (v545 < 0xD0)
          goto LABEL_419;
        v546 = v545 / 0xD0 + 1;
        v547 = v543 + 208 * (v546 & 0x3FFFFFFFFFFFFFELL);
        v548 = (double *)(v543 + 376);
        v549 = v546 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v531 = v531 + *(v548 - 26) + *v548;
          v548 += 52;
          v549 -= 2;
        }
        while (v549);
        v543 = v547;
        if (v546 != (v546 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_419:
          do
          {
            v531 = v531 + *(double *)(v543 + 168);
            v543 += 208;
          }
          while (v543 != v544);
        }
      }
      else
      {
        v531 = 0.0;
        do
        {
          if (*(_BYTE *)(v543 + 176))
          {
            *(_OWORD *)(v543 + 152) = *(_OWORD *)(v543 + 120);
            *(_OWORD *)(v543 + 136) = *(_OWORD *)(v543 + 104);
            _Q3 = *(_OWORD *)(v543 + 136);
            _D5 = *(_QWORD *)(v543 + 144);
            __asm { FMLA            D4, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v543 + 160);
            __asm { FMLA            D4, D3, V2.D[1] }
            v554 = *(double *)(a1 + 224) * _D4;
            *(double *)(v543 + 168) = v554;
            v531 = v531 + v554;
          }
          v543 += 208;
        }
        while (v543 != v544);
        v40 = *a2;
      }
    }
    v40[13] = v531 * 0.5;
    v555 = *(_QWORD *)(a1 + 1712);
    v556 = *(_QWORD *)(a1 + 1720);
    v557 = 0.0;
    if (v555 == v556)
    {
      v559 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 2971))
    {
      v558 = v556 - v555 - 176;
      v559 = 0.0;
      if (v558 < 0xB0)
        goto LABEL_420;
      v560 = v558 / 0xB0 + 1;
      v561 = v555 + 176 * (v560 & 0x3FFFFFFFFFFFFFELL);
      v562 = (double *)(v555 + 312);
      v563 = v560 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v559 = v559 + *(v562 - 22) + *v562;
        v562 += 44;
        v563 -= 2;
      }
      while (v563);
      v555 = v561;
      if (v560 != (v560 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_420:
        do
        {
          v559 = v559 + *(double *)(v555 + 136);
          v555 += 176;
        }
        while (v555 != v556);
      }
    }
    else
    {
      v559 = 0.0;
      do
      {
        if (*(_BYTE *)(v555 + 144))
        {
          *(_QWORD *)(v555 + 128) = *(_QWORD *)(v555 + 104);
          *(_OWORD *)(v555 + 112) = *(_OWORD *)(v555 + 88);
          _Q3 = *(_OWORD *)(v555 + 112);
          _D5 = *(_QWORD *)(v555 + 120);
          __asm { FMLA            D4, D5, V3.D[1] }
          v567 = *(double *)(a1 + 240) * (_D4 + *(double *)(v555 + 128) * *(double *)(v555 + 128));
          *(double *)(v555 + 136) = v567;
          v559 = v559 + v567;
        }
        v555 += 176;
      }
      while (v555 != v556);
      v40 = *a2;
    }
    v40[14] = v559 * 0.5;
    v568 = *(_QWORD *)(a1 + 1736);
    v569 = *(_QWORD *)(a1 + 1744);
    if (v568 != v569)
    {
      if (*(_BYTE *)(a1 + 2971))
      {
        v570 = v569 - v568 - 176;
        v557 = 0.0;
        if (v570 < 0xB0)
          goto LABEL_421;
        v571 = v570 / 0xB0 + 1;
        v572 = v568 + 176 * (v571 & 0x3FFFFFFFFFFFFFELL);
        v573 = (double *)(v568 + 312);
        v574 = v571 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v557 = v557 + *(v573 - 22) + *v573;
          v573 += 44;
          v574 -= 2;
        }
        while (v574);
        v568 = v572;
        if (v571 != (v571 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_421:
          do
          {
            v557 = v557 + *(double *)(v568 + 136);
            v568 += 176;
          }
          while (v568 != v569);
        }
      }
      else
      {
        v557 = 0.0;
        do
        {
          if (*(_BYTE *)(v568 + 144))
          {
            *(_QWORD *)(v568 + 128) = *(_QWORD *)(v568 + 104);
            *(_OWORD *)(v568 + 112) = *(_OWORD *)(v568 + 88);
            _Q3 = *(_OWORD *)(v568 + 112);
            _D5 = *(_QWORD *)(v568 + 120);
            __asm { FMLA            D4, D5, V3.D[1] }
            v578 = *(double *)(a1 + 256) * (_D4 + *(double *)(v568 + 128) * *(double *)(v568 + 128));
            *(double *)(v568 + 136) = v578;
            v557 = v557 + v578;
          }
          v568 += 176;
        }
        while (v568 != v569);
        v40 = *a2;
      }
    }
    v40[15] = v557 * 0.5;
    v579 = *(_QWORD *)(a1 + 1760);
    v580 = *(_QWORD *)(a1 + 1768);
    v581 = 0.0;
    if (v579 == v580)
    {
      v583 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 2971))
    {
      v582 = v580 - v579 - 216;
      v583 = 0.0;
      if (v582 < 0xD8)
        goto LABEL_422;
      v584 = v582 / 0xD8 + 1;
      v585 = v579 + 216 * (v584 & 0x3FFFFFFFFFFFFFELL);
      v586 = (double *)(v579 + 392);
      v587 = v584 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v583 = v583 + *(v586 - 27) + *v586;
        v586 += 54;
        v587 -= 2;
      }
      while (v587);
      v579 = v585;
      if (v584 != (v584 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_422:
        do
        {
          v583 = v583 + *(double *)(v579 + 176);
          v579 += 216;
        }
        while (v579 != v580);
      }
    }
    else
    {
      v583 = 0.0;
      do
      {
        if (*(_BYTE *)(v579 + 184))
        {
          *(_OWORD *)(v579 + 160) = *(_OWORD *)(v579 + 144);
          _Q1 = *(_OWORD *)(v579 + 160);
          _D4 = *(_QWORD *)(v579 + 168);
          __asm { FMLA            D3, D4, V1.D[1] }
          *(double *)&_Q1 = *(double *)(a1 + 272) * _D3;
          *(_QWORD *)(v579 + 176) = _Q1;
          v583 = v583 + *(double *)&_Q1;
        }
        v579 += 216;
      }
      while (v579 != v580);
      v40 = *a2;
    }
    v40[16] = v583 * 0.5;
    v591 = *(_QWORD *)(a1 + 1784);
    v592 = *(_QWORD *)(a1 + 1792);
    if (v591 != v592)
    {
      if (!*(_BYTE *)(a1 + 2971))
      {
        v605 = 0.0;
        do
        {
          if (*(_BYTE *)(v591 + 152))
          {
            *(_OWORD *)(v591 + 128) = *(_OWORD *)(v591 + 112);
            _Q2 = *(_OWORD *)(v591 + 128);
            _D4 = *(_QWORD *)(v591 + 136);
            __asm { FMLA            D3, D4, V2.D[1] }
            *(double *)&_Q2 = *(double *)(a1 + 288) * _D3;
            *(_QWORD *)(v591 + 144) = _Q2;
            v605 = v605 + *(double *)&_Q2;
          }
          v591 += 184;
        }
        while (v591 != v592);
        v40 = *a2;
        (*a2)[17] = v605 * 0.5;
        v598 = *(_QWORD *)(a1 + 1808);
        v599 = *(_QWORD *)(a1 + 1816);
        if (v598 != v599)
          goto LABEL_394;
        goto LABEL_410;
      }
      v593 = v592 - v591 - 184;
      v581 = 0.0;
      if (v593 < 0xB8)
        goto LABEL_423;
      v594 = v593 / 0xB8 + 1;
      v595 = v591 + 184 * (v594 & 0x3FFFFFFFFFFFFFELL);
      v596 = (double *)(v591 + 328);
      v597 = v594 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v581 = v581 + *(v596 - 23) + *v596;
        v596 += 46;
        v597 -= 2;
      }
      while (v597);
      v591 = v595;
      if (v594 != (v594 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_423:
        do
        {
          v581 = v581 + *(double *)(v591 + 144);
          v591 += 184;
        }
        while (v591 != v592);
      }
    }
    v40[17] = v581 * 0.5;
    v598 = *(_QWORD *)(a1 + 1808);
    v599 = *(_QWORD *)(a1 + 1816);
    if (v598 != v599)
    {
LABEL_394:
      if (*(_BYTE *)(a1 + 2971))
      {
        v600 = v599 - v598 - 208;
        v345 = 0.0;
        if (v600 < 0xD0)
          goto LABEL_424;
        v601 = v600 / 0xD0 + 1;
        v602 = v598 + 208 * (v601 & 0x3FFFFFFFFFFFFFELL);
        v603 = (double *)(v598 + 376);
        v604 = v601 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v345 = v345 + *(v603 - 26) + *v603;
          v603 += 52;
          v604 -= 2;
        }
        while (v604);
        v598 = v602;
        if (v601 != (v601 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_424:
          do
          {
            v345 = v345 + *(double *)(v598 + 168);
            v598 += 208;
          }
          while (v598 != v599);
        }
        goto LABEL_411;
      }
      v345 = 0.0;
      do
      {
        if (*(_BYTE *)(v598 + 176))
        {
          v609 = *(double *)(v598 + 152);
          *(double *)(v598 + 160) = v609;
          v610 = *(double *)(a1 + 304) * (v609 * v609);
          *(double *)(v598 + 168) = v610;
          v345 = v345 + v610;
        }
        v598 += 208;
      }
      while (v598 != v599);
LABEL_161:
      v40 = *a2;
      goto LABEL_411;
    }
LABEL_410:
    v345 = 0.0;
    goto LABEL_411;
  }
  v19 = *(_QWORD *)(a1 + 1376);
  v20 = *(_QWORD *)(a1 + 1384);
  v21 = 0.0;
  for (i = 0.0; v19 != v20; v19 += 504)
  {
    while (1)
    {
      v23 = (float64x2_t *)(v19 + 344);
      v24 = sub_20F4AFF88((char *)(v19 + 8), (float64x2_t **)(v19 + 208), v19 + 344);
      *(_BYTE *)(v19 + 472) = v24;
      if (v24)
        break;
      *(_QWORD *)(v19 + 464) = 0;
      v19 += 504;
      if (v19 == v20)
        goto LABEL_17;
    }
    v25 = *(_QWORD *)(v19 + 480);
    if (v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v19 + 344);
    _Q1 = *(float64x2_t *)(v19 + 408);
    v26 = *(_OWORD *)(v19 + 424);
    _Q3 = *(float64x2_t *)(v19 + 392);
    *(float64x2_t *)(v19 + 288) = _Q1;
    *(_OWORD *)(v19 + 304) = v26;
    _Q2 = *(float64x2_t *)(v19 + 424);
    *(_OWORD *)(v19 + 320) = *(_OWORD *)(v19 + 440);
    *(_QWORD *)(v19 + 336) = *(_QWORD *)(v19 + 456);
    v27 = *(float64x2_t *)(v19 + 360);
    _Q5 = *v23;
    _Q7 = v27;
    *(float64x2_t *)(v19 + 224) = *v23;
    *(float64x2_t *)(v19 + 240) = v27;
    _Q4 = *(float64x2_t *)(v19 + 376);
    _Q0 = *(float64x2_t *)(v19 + 392);
    *(float64x2_t *)(v19 + 256) = _Q4;
    *(float64x2_t *)(v19 + 272) = _Q0;
    _Q6 = *(float64x2_t *)(v19 + 440);
    _D17 = _Q5.f64[1];
    __asm { FMLA            D16, D17, V5.D[1] }
    _Q5.f64[0] = _Q7.f64[1];
    __asm { FMLA            D16, D5, V7.D[1] }
    _Q5.f64[0] = _Q4.f64[1];
    __asm { FMLA            D16, D5, V4.D[1] }
    _Q4.f64[0] = _Q3.f64[1];
    __asm { FMLA            D16, D4, V3.D[1] }
    _Q3.f64[0] = _Q1.f64[1];
    __asm { FMLA            D16, D3, V1.D[1] }
    _Q1.f64[0] = _Q2.f64[1];
    __asm { FMLA            D16, D1, V2.D[1] }
    _Q1.f64[0] = _Q6.f64[1];
    __asm { FMLA            D16, D1, V6.D[1] }
    _Q1.f64[0] = *(float64_t *)(a1 + 16);
    _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(v19 + 456) * *(double *)(v19 + 456));
    *(float64_t *)(v19 + 464) = _Q0.f64[0];
    i = i + _Q0.f64[0];
  }
LABEL_17:
  v40 = *a2;
  **a2 = i * 0.5;
  v41 = *(_QWORD **)(a1 + 1400);
  v42 = *(_QWORD **)(a1 + 1408);
  if (v41 != v42)
  {
    v43 = v41 + 32;
    v21 = 0.0;
    do
    {
      while (!*(v43 - 17))
      {
        *((_BYTE *)v43 - 8) = 0;
        *(v43 - 2) = 0;
        v44 = v43 + 3;
        v43 += 35;
        if (v44 == v42)
          goto LABEL_24;
      }
      v45 = (const double *)(v43 - 29);
      v669 = vld3q_f64(v45);
      v46 = *(v43 - 15);
      v47 = *((double *)v43 - 21);
      _Q4 = *(_OWORD *)(v43 - 23);
      v49 = *(double *)(v46 + 48);
      v50 = *(double *)(v46 + 72);
      v51 = *(double *)(v46 + 96);
      v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v669.val[0], *(double *)(v46 + 32)), v669.val[1], *(float64x2_t *)(v46 + 32), 1), v669.val[2], v49);
      _D6 = *(_QWORD *)(v46 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v55 = _D20 + v47 * v49;
      v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v669.val[0], *(double *)(v46 + 56)), v669.val[1], *(float64x2_t *)(v46 + 56), 1), v669.val[2], v50);
      _D16 = *(_QWORD *)(v46 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v59 = _D20 + v47 * v50;
      v60 = vmlaq_laneq_f64(vmulq_n_f64(v669.val[0], *(double *)(v46 + 80)), v669.val[1], *(float64x2_t *)(v46 + 80), 1);
      _D18 = *(_QWORD *)(v46 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v642 = v55;
      v641 = v52;
      *((double *)&v642[1] + 1) = v59;
      *(float64x2_t *)((char *)v642 + 8) = v56;
      v644.f64[0] = _D20 + v47 * v51;
      v643 = vmlaq_n_f64(v60, v669.val[2], v51);
      *(_QWORD *)&v633 = 0;
      v632 = 0uLL;
      sub_20E9733B8(&v641, v632.f64);
      v63 = (float64x2_t *)(v43 - 8);
      v64 = v632;
      *(v43 - 6) = v633;
      *((float64x2_t *)v43 - 4) = v64;
      v64.f64[0] = *(float64_t *)(v46 + 120);
      v65.f64[0] = *(float64_t *)(v43 - 18);
      *(float64x2_t *)(v43 - 5) = vsubq_f64(*(float64x2_t *)(v46 + 104), *((float64x2_t *)v43 - 10));
      *(v43 - 3) = *(_OWORD *)&vsubq_f64(v64, v65);
      v66 = (float64x2_t *)*(v43 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v43 - 2), v66[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v43 - 3), v66[2]);
      v67 = vmulq_f64(*((float64x2_t *)v43 - 4), v66[1]);
      *((float64x2_t *)v43 - 4) = v67;
      *((float64x2_t *)v43 - 3) = _Q1;
      *((float64x2_t *)v43 - 2) = _Q0;
      *((_BYTE *)v43 - 8) = 1;
      if (*v43)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v43 + 24))(*v43, v43 - 8);
        _Q1 = *((float64x2_t *)v43 - 3);
        _Q0 = *((float64x2_t *)v43 - 2);
        v67 = *v63;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL);
      v68 = (float64x2_t *)(v43 - 14);
      _Q7 = *((float64x2_t *)v43 - 3);
      *v68 = *v63;
      v68[1] = _Q7;
      _Q6 = *((float64x2_t *)v43 - 2);
      v68[2] = _Q6;
      v67.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v67, v67);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v69 = _Q2.f64[0]
          + _Q1.f64[0] * _Q1.f64[0]
          + _Q4.f64[0] * _Q4.f64[0]
          + _Q0.f64[0] * _Q0.f64[0]
          + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 32);
      v70 = _Q1.f64[0] * v69;
      *((float64_t *)v43 - 2) = v70;
      v21 = v21 + v70;
      v71 = v43 + 3;
      v43 += 35;
    }
    while (v71 != v42);
LABEL_24:
    v40 = *a2;
  }
  v40[1] = v21 * 0.5;
  v72 = *(_QWORD **)(a1 + 1424);
  v73 = *(_QWORD **)(a1 + 1432);
  v74 = 0.0;
  v75 = 0.0;
  if (v72 != v73)
  {
    v76 = v72 + 32;
    do
    {
      while (!*(v76 - 17))
      {
        *((_BYTE *)v76 - 8) = 0;
        *(v76 - 2) = 0;
        v77 = v76 + 3;
        v76 += 35;
        if (v77 == v73)
          goto LABEL_32;
      }
      v78 = (const double *)(v76 - 29);
      v670 = vld3q_f64(v78);
      v79 = *(v76 - 15);
      v80 = *((double *)v76 - 21);
      _Q4 = *(_OWORD *)(v76 - 23);
      v82 = *(double *)(v79 + 48);
      v83 = *(double *)(v79 + 72);
      v84 = *(double *)(v79 + 96);
      v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v670.val[0], *(double *)(v79 + 32)), v670.val[1], *(float64x2_t *)(v79 + 32), 1), v670.val[2], v82);
      _D6 = *(_QWORD *)(v79 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v88 = _D20 + v80 * v82;
      v89 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v670.val[0], *(double *)(v79 + 56)), v670.val[1], *(float64x2_t *)(v79 + 56), 1), v670.val[2], v83);
      _D16 = *(_QWORD *)(v79 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v92 = _D20 + v80 * v83;
      v93 = vmlaq_laneq_f64(vmulq_n_f64(v670.val[0], *(double *)(v79 + 80)), v670.val[1], *(float64x2_t *)(v79 + 80), 1);
      _D18 = *(_QWORD *)(v79 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v642 = v88;
      v641 = v85;
      *((double *)&v642[1] + 1) = v92;
      *(float64x2_t *)((char *)v642 + 8) = v89;
      v644.f64[0] = _D20 + v80 * v84;
      v643 = vmlaq_n_f64(v93, v670.val[2], v84);
      *(_QWORD *)&v633 = 0;
      v632 = 0uLL;
      sub_20E9733B8(&v641, v632.f64);
      v96 = (float64x2_t *)(v76 - 8);
      v97 = v632;
      *(v76 - 6) = v633;
      *((float64x2_t *)v76 - 4) = v97;
      v97.f64[0] = *(float64_t *)(v79 + 120);
      v98.f64[0] = *(float64_t *)(v76 - 18);
      *(float64x2_t *)(v76 - 5) = vsubq_f64(*(float64x2_t *)(v79 + 104), *((float64x2_t *)v76 - 10));
      *(v76 - 3) = *(_OWORD *)&vsubq_f64(v97, v98);
      v99 = (float64x2_t *)*(v76 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v76 - 2), v99[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v76 - 3), v99[2]);
      v100 = vmulq_f64(*((float64x2_t *)v76 - 4), v99[1]);
      *((float64x2_t *)v76 - 4) = v100;
      *((float64x2_t *)v76 - 3) = _Q1;
      *((float64x2_t *)v76 - 2) = _Q0;
      *((_BYTE *)v76 - 8) = 1;
      if (*v76)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v76 + 24))(*v76, v76 - 8);
        _Q1 = *((float64x2_t *)v76 - 3);
        _Q0 = *((float64x2_t *)v76 - 2);
        v100 = *v96;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL);
      v101 = (float64x2_t *)(v76 - 14);
      _Q7 = *((float64x2_t *)v76 - 3);
      *v101 = *v96;
      v101[1] = _Q7;
      _Q6 = *((float64x2_t *)v76 - 2);
      v101[2] = _Q6;
      v100.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v100, v100);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v102 = _Q2.f64[0]
           + _Q1.f64[0] * _Q1.f64[0]
           + _Q4.f64[0] * _Q4.f64[0]
           + _Q0.f64[0] * _Q0.f64[0]
           + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 48);
      v103 = _Q1.f64[0] * v102;
      *((float64_t *)v76 - 2) = v103;
      v75 = v75 + v103;
      v104 = v76 + 3;
      v76 += 35;
    }
    while (v104 != v73);
LABEL_32:
    v40 = *a2;
  }
  v40[2] = v75 * 0.5;
  v105 = *(_QWORD **)(a1 + 1448);
  v106 = *(_QWORD **)(a1 + 1456);
  if (v105 != v106)
  {
    v107 = v105 + 32;
    v74 = 0.0;
    do
    {
      while (!*(v107 - 17))
      {
        *((_BYTE *)v107 - 8) = 0;
        *(v107 - 2) = 0;
        v108 = v107 + 3;
        v107 += 35;
        if (v108 == v106)
          goto LABEL_40;
      }
      v109 = (const double *)(v107 - 29);
      v671 = vld3q_f64(v109);
      v110 = *(v107 - 15);
      v111 = *((double *)v107 - 21);
      _Q4 = *(_OWORD *)(v107 - 23);
      v113 = *(double *)(v110 + 48);
      v114 = *(double *)(v110 + 72);
      v115 = *(double *)(v110 + 96);
      v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671.val[0], *(double *)(v110 + 32)), v671.val[1], *(float64x2_t *)(v110 + 32), 1), v671.val[2], v113);
      _D6 = *(_QWORD *)(v110 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v119 = _D20 + v111 * v113;
      v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671.val[0], *(double *)(v110 + 56)), v671.val[1], *(float64x2_t *)(v110 + 56), 1), v671.val[2], v114);
      _D16 = *(_QWORD *)(v110 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v123 = _D20 + v111 * v114;
      v124 = vmlaq_laneq_f64(vmulq_n_f64(v671.val[0], *(double *)(v110 + 80)), v671.val[1], *(float64x2_t *)(v110 + 80), 1);
      _D18 = *(_QWORD *)(v110 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v642 = v119;
      v641 = v116;
      *((double *)&v642[1] + 1) = v123;
      *(float64x2_t *)((char *)v642 + 8) = v120;
      v644.f64[0] = _D20 + v111 * v115;
      v643 = vmlaq_n_f64(v124, v671.val[2], v115);
      *(_QWORD *)&v633 = 0;
      v632 = 0uLL;
      sub_20E9733B8(&v641, v632.f64);
      v127 = (float64x2_t *)(v107 - 8);
      v128 = v632;
      *(v107 - 6) = v633;
      *((float64x2_t *)v107 - 4) = v128;
      v128.f64[0] = *(float64_t *)(v110 + 120);
      v129.f64[0] = *(float64_t *)(v107 - 18);
      *(float64x2_t *)(v107 - 5) = vsubq_f64(*(float64x2_t *)(v110 + 104), *((float64x2_t *)v107 - 10));
      *(v107 - 3) = *(_OWORD *)&vsubq_f64(v128, v129);
      v130 = (float64x2_t *)*(v107 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v107 - 2), v130[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v107 - 3), v130[2]);
      v131 = vmulq_f64(*((float64x2_t *)v107 - 4), v130[1]);
      *((float64x2_t *)v107 - 4) = v131;
      *((float64x2_t *)v107 - 3) = _Q1;
      *((float64x2_t *)v107 - 2) = _Q0;
      *((_BYTE *)v107 - 8) = 1;
      if (*v107)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v107 + 24))(*v107, v107 - 8);
        _Q1 = *((float64x2_t *)v107 - 3);
        _Q0 = *((float64x2_t *)v107 - 2);
        v131 = *v127;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL);
      v132 = (float64x2_t *)(v107 - 14);
      _Q7 = *((float64x2_t *)v107 - 3);
      *v132 = *v127;
      v132[1] = _Q7;
      _Q6 = *((float64x2_t *)v107 - 2);
      v132[2] = _Q6;
      v131.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v131, v131);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v133 = _Q2.f64[0]
           + _Q1.f64[0] * _Q1.f64[0]
           + _Q4.f64[0] * _Q4.f64[0]
           + _Q0.f64[0] * _Q0.f64[0]
           + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 64);
      v134 = _Q1.f64[0] * v133;
      *((float64_t *)v107 - 2) = v134;
      v74 = v74 + v134;
      v135 = v107 + 3;
      v107 += 35;
    }
    while (v135 != v106);
LABEL_40:
    v40 = *a2;
  }
  v40[3] = v74 * 0.5;
  v136 = *(_QWORD *)(a1 + 1472);
  v137 = *(_QWORD *)(a1 + 1480);
  v138 = 0.0;
  v139 = 0.0;
  if (v136 != v137)
  {
    do
    {
      while (1)
      {
        v140 = *(float64x2_t **)(v136 + 48);
        if (v140)
          break;
        *(_BYTE *)(v136 + 128) = 0;
        *(_QWORD *)(v136 + 120) = 0;
        v136 += 160;
        if (v136 == v137)
          goto LABEL_48;
      }
      v141 = (int8x16_t *)(v136 + 96);
      v142 = *(float64x2_t **)(v136 + 64);
      _Q0.f64[0] = v142[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v136 + 40);
      v143 = vsubq_f64(_Q0, _Q2);
      v144 = vsubq_f64(v142[2], *(float64x2_t *)(v136 + 24));
      *(float64x2_t *)(v136 + 96) = v144;
      *(float64_t *)(v136 + 112) = v143.f64[0];
      _Q2.f64[0] = v140[2].f64[0];
      _Q0 = vmulq_f64(v143, _Q2);
      v145 = (int8x16_t)vmulq_f64(v144, v140[1]);
      *(int8x16_t *)(v136 + 96) = v145;
      *(float64_t *)(v136 + 112) = _Q0.f64[0];
      *(_BYTE *)(v136 + 128) = 1;
      v146 = *(_QWORD *)(v136 + 136);
      if (v146)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 24))(v146, v136 + 96);
        _Q0.f64[0] = *(float64_t *)(v136 + 112);
        v145 = *v141;
      }
      _Q2 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
      _Q3 = *(float64x2_t *)v141;
      *(int8x16_t *)(v136 + 72) = *v141;
      *(_QWORD *)(v136 + 88) = *(_QWORD *)(v136 + 112);
      _Q1.f64[1] = _Q2.f64[0];
      v147 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 80);
      v148 = _Q1.f64[0] * v147;
      *(float64_t *)(v136 + 120) = v148;
      v139 = v139 + v148;
      v136 += 160;
    }
    while (v136 != v137);
LABEL_48:
    v40 = *a2;
  }
  v40[4] = v139 * 0.5;
  v149 = *(_QWORD *)(a1 + 1496);
  v150 = *(_QWORD *)(a1 + 1504);
  if (v149 != v150)
  {
    v138 = 0.0;
    do
    {
      while (1)
      {
        v151 = (float64x2_t *)(v149 + 7856);
        v152 = sub_20F4B0BC8();
        *(_BYTE *)(v149 + 7984) = v152;
        if (v152)
          break;
        *(_QWORD *)(v149 + 7976) = 0;
        v149 += 8016;
        if (v149 == v150)
          goto LABEL_56;
      }
      _X8 = v149 + 32040;
      __asm { PRFM            #0, [X8] }
      v155 = *(_QWORD *)(v149 + 7992);
      if (v155)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 24))(v155, v149 + 7856);
      _X8 = v149 + 31904;
      v157 = *(_OWORD *)(v149 + 7936);
      *(_OWORD *)(v149 + 7800) = *(_OWORD *)(v149 + 7920);
      *(_OWORD *)(v149 + 7816) = v157;
      _Q2 = *(float64x2_t *)(v149 + 7936);
      *(_OWORD *)(v149 + 7832) = *(_OWORD *)(v149 + 7952);
      *(_QWORD *)(v149 + 7848) = *(_QWORD *)(v149 + 7968);
      v158 = *(_OWORD *)(v149 + 7872);
      *(float64x2_t *)(v149 + 7736) = *v151;
      *(_OWORD *)(v149 + 7752) = v158;
      _Q0 = *(float64x2_t *)(v149 + 7888);
      _Q1 = *(float64x2_t *)(v149 + 7904);
      *(float64x2_t *)(v149 + 7768) = _Q0;
      *(float64x2_t *)(v149 + 7784) = _Q1;
      __asm { PRFM            #0, [X8] }
      _Q4 = *(float64x2_t *)(v149 + 7904);
      _Q6 = *(float64x2_t *)(v149 + 7872);
      _Q5 = *(float64x2_t *)(v149 + 7888);
      _Q7 = *v151;
      _D17 = *(_QWORD *)(v149 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      _Q7.f64[0] = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D16, D6, V5.D[1] }
      _Q5.f64[0] = _Q4.f64[1];
      __asm { FMLA            D16, D5, V4.D[1] }
      _Q4.f64[0] = *(float64_t *)(v149 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v149 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 96);
      _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(v149 + 7968) * *(double *)(v149 + 7968));
      *(float64_t *)(v149 + 7976) = _Q0.f64[0];
      v138 = v138 + _Q0.f64[0];
      v149 += 8016;
    }
    while (v149 != v150);
LABEL_56:
    v40 = *a2;
  }
  v40[5] = v138 * 0.5;
  _X22 = *(_QWORD *)(a1 + 1520);
  v169 = *(_QWORD *)(a1 + 1528);
  v170 = 0.0;
  v171 = 0.0;
  if (_X22 != v169)
  {
    do
    {
      __asm { PRFM            #0, [X22,#0x2878] }
      v185 = *(_QWORD *)(_X22 + 5024);
      v186 = *(_QWORD *)(_X22 + 5032);
      v187 = *(_QWORD *)(_X22 + 5040);
      v188 = *(_QWORD *)(_X22 + 5048);
      v667 = (float64x2_t *)(v186 + 56);
      v668 = 3;
      v665 = (float64x2_t *)(v186 + 80);
      v666 = 6;
      v663 = (float64x2_t *)(v188 + 56);
      v664 = 3;
      v661 = (float64x2_t *)(v188 + 80);
      v662 = 6;
      v659 = (float64x2_t *)(v186 + 32);
      v660 = 0;
      v657 = (float64x2_t *)(v188 + 32);
      v658 = 0;
      v189.f64[0] = *(float64_t *)(v185 + 48);
      v190 = *(int64x2_t *)(v185 + 32);
      v191 = *(int64x2_t *)(v185 + 56);
      v192 = *(double *)(v185 + 96);
      _Q4 = *(int64x2_t *)(v185 + 80);
      v194 = (float64x2_t)vzip1q_s64(v190, v191);
      v195 = (float64x2_t)vzip2q_s64(v190, v191);
      v189.f64[1] = *(float64_t *)(v185 + 72);
      v196 = vextq_s8((int8x16_t)v195, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      _Q6.f64[0] = *(float64_t *)(v185 + 120);
      v197 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v194, *(double *)(v185 + 104)), v195, *(float64x2_t *)(v185 + 104), 1), v189, _Q6.f64[0]);
      _D7 = *(_QWORD *)(v185 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q6.f64[0] = _D17 + v192 * _Q6.f64[0];
      _Q7 = vnegq_f64(v197);
      v197.f64[0] = *(float64_t *)(v185 + 80);
      *(_QWORD *)&v195.f64[1] = v196.i64[0];
      v644 = v189;
      v645 = *(unint64_t *)&v192;
      v641 = v194;
      v642[0] = *(unint64_t *)&v197.f64[0];
      v642[1] = v195;
      v643 = (float64x2_t)v196.u64[1];
      v646 = _Q7;
      v647 = *(_OWORD *)&vnegq_f64(_Q6);
      v648 = 0x3FF0000000000000;
      v189.f64[0] = *(float64_t *)(v187 + 48);
      v201 = *(int64x2_t *)(v187 + 32);
      v202 = *(int64x2_t *)(v187 + 56);
      v203 = *(double *)(v187 + 96);
      _Q4 = *(int64x2_t *)(v187 + 80);
      v205 = (float64x2_t)vzip1q_s64(v201, v202);
      v206 = (float64x2_t)vzip2q_s64(v201, v202);
      v189.f64[1] = *(float64_t *)(v187 + 72);
      v207 = vextq_s8((int8x16_t)v206, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v208 = *(double *)(v187 + 120);
      _Q7.f64[0] = *(float64_t *)(v187 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q7.f64[0] = *(float64_t *)(v187 + 80);
      v210 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, *(double *)(v187 + 104)), v206, *(float64x2_t *)(v187 + 104), 1), v189, v208));
      *(_QWORD *)&v197.f64[0] = v207.i64[1];
      *(_QWORD *)&v206.f64[1] = v207.i64[0];
      v211 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v203 * v208));
      v636 = v189;
      v637 = *(unint64_t *)&v203;
      v632 = v205;
      v633 = *(unint64_t *)&_Q7.f64[0];
      v634 = v206;
      v635 = *(unint64_t *)&v197.f64[0];
      v638 = v210;
      v639 = v211.f64[0];
      v640 = 0x3FF0000000000000;
      sub_20F4D7C54(_X22 + 1840, (uint64_t)&v641, (uint64_t)&v632, &v659, &v657, &v667, &v663, &v665, (uint64_t)&v649, (float64x2_t)0, v211, (__n128)*(unint64_t *)&_Q7.f64[0], &v661, 0, 0, 0, 0);
      _X8 = _X22 + 10648;
      v213 = (float64x2_t *)(_X22 + 5176);
      v214 = v649;
      v215 = v650;
      v216 = v652;
      *(_OWORD *)(_X22 + 5208) = v651;
      *(_OWORD *)(_X22 + 5224) = v216;
      *(float64x2_t *)(_X22 + 5176) = v214;
      *(_OWORD *)(_X22 + 5192) = v215;
      v217 = v653;
      v218 = v654;
      v219 = v655;
      *(_QWORD *)(_X22 + 5288) = v656;
      *(_OWORD *)(_X22 + 5256) = v218;
      *(_OWORD *)(_X22 + 5272) = v219;
      *(_OWORD *)(_X22 + 5240) = v217;
      *(_BYTE *)(_X22 + 5304) = 1;
      __asm { PRFM            #0, [X8] }
      v221 = *(_QWORD *)(_X22 + 5312);
      if (v221)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v221 + 24))(v221, _X22 + 5176);
      _X8 = _X22 + 10512;
      v173 = *(_OWORD *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5120) = *(_OWORD *)(_X22 + 5240);
      *(_OWORD *)(_X22 + 5136) = v173;
      _Q2 = *(float64x2_t *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5152) = *(_OWORD *)(_X22 + 5272);
      *(_QWORD *)(_X22 + 5168) = *(_QWORD *)(_X22 + 5288);
      v174 = *(_OWORD *)(_X22 + 5192);
      *(float64x2_t *)(_X22 + 5056) = *v213;
      *(_OWORD *)(_X22 + 5072) = v174;
      _Q0 = *(float64x2_t *)(_X22 + 5208);
      _Q1 = *(float64x2_t *)(_X22 + 5224);
      *(float64x2_t *)(_X22 + 5088) = _Q0;
      *(float64x2_t *)(_X22 + 5104) = _Q1;
      __asm { PRFM            #0, [X8] }
      _Q4 = *(float64x2_t *)(_X22 + 5224);
      _Q6 = *(float64x2_t *)(_X22 + 5192);
      _Q5 = *(float64x2_t *)(_X22 + 5208);
      _Q7 = *v213;
      _D17 = *(_QWORD *)(_X22 + 5184);
      __asm { FMLA            D16, D17, V7.D[1] }
      _Q7.f64[0] = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D16, D6, V5.D[1] }
      _Q5.f64[0] = _Q4.f64[1];
      __asm { FMLA            D16, D5, V4.D[1] }
      _Q4.f64[0] = *(float64_t *)(_X22 + 5248);
      __asm { FMLA            D16, D4, V3.D[1] }
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(_X22 + 5280);
      __asm { FMLA            D16, D2, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 112);
      _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(_X22 + 5288) * *(double *)(_X22 + 5288));
      *(float64_t *)(_X22 + 5296) = _Q0.f64[0];
      v171 = v171 + _Q0.f64[0];
      _X22 += 5336;
    }
    while (_X22 != v169);
    v40 = *a2;
  }
  v40[6] = v171 * 0.5;
  v222 = *(_QWORD *)(a1 + 1544);
  v223 = *(_QWORD *)(a1 + 1552);
  if (v222 != v223)
  {
    v170 = 0.0;
    do
    {
      while (1)
      {
        v224 = *(float64x2_t **)(v222 + 48);
        _Q0.f64[0] = v224[3].f64[0];
        v225 = v224[2];
        *(float64x2_t *)(v222 + 80) = v225;
        v226 = (float64x2_t *)(v222 + 80);
        *(float64_t *)(v222 + 96) = _Q0.f64[0];
        _Q2.f64[0] = *(float64_t *)(*(_QWORD *)(v222 + 24) + 16);
        _Q0 = vmulq_f64(_Q0, _Q2);
        _Q1 = vmulq_n_f64(v225, _Q2.f64[0]);
        *(float64x2_t *)(v222 + 80) = _Q1;
        *(float64_t *)(v222 + 96) = _Q0.f64[0];
        LODWORD(v224) = *(unsigned __int8 *)(v222 + 40);
        *(_BYTE *)(v222 + 112) = (_BYTE)v224;
        if ((_DWORD)v224)
          break;
        *(_QWORD *)(v222 + 104) = 0;
        v222 += 144;
        if (v222 == v223)
          goto LABEL_70;
      }
      v227 = *(_QWORD *)(v222 + 120);
      if (v227)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v227 + 24))(v227, v222 + 80);
        _Q0.f64[0] = *(float64_t *)(v222 + 96);
        _Q1 = *v226;
      }
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q3 = *v226;
      *(float64x2_t *)(v222 + 56) = *v226;
      *(_QWORD *)(v222 + 72) = *(_QWORD *)(v222 + 96);
      _Q1.f64[1] = _Q2.f64[0];
      v228 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 128);
      v229 = _Q1.f64[0] * v228;
      *(float64_t *)(v222 + 104) = v229;
      v170 = v170 + v229;
      v222 += 144;
    }
    while (v222 != v223);
LABEL_70:
    v40 = *a2;
  }
  v40[7] = v170 * 0.5;
  v230 = *(_QWORD *)(a1 + 1568);
  v231 = *(_QWORD *)(a1 + 1576);
  v232 = 0.0;
  v233 = 0.0;
  if (v230 != v231)
  {
    do
    {
      while (1)
      {
        v234 = *(_QWORD *)(v230 + 48);
        v235 = *(_QWORD *)(v230 + 56);
        _Q0.f64[0] = *(float64_t *)(v235 + 120);
        _Q2.f64[0] = *(float64_t *)(v234 + 120);
        _Q3 = *(float64x2_t *)(v234 + 104);
        v236 = vsubq_f64(*(float64x2_t *)(v235 + 104), _Q3);
        *(float64x2_t *)(v230 + 88) = v236;
        v237 = (float64x2_t *)(v230 + 88);
        v238 = vsubq_f64(_Q0, _Q2);
        *(float64_t *)(v230 + 104) = v238.f64[0];
        _Q2.f64[0] = *(float64_t *)(*(_QWORD *)(v230 + 24) + 16);
        _Q0 = vmulq_f64(v238, _Q2);
        _Q1 = vmulq_n_f64(v236, _Q2.f64[0]);
        *(float64x2_t *)(v230 + 88) = _Q1;
        *(float64_t *)(v230 + 104) = _Q0.f64[0];
        LODWORD(v234) = *(unsigned __int8 *)(v230 + 40);
        *(_BYTE *)(v230 + 120) = v234;
        if ((_DWORD)v234)
          break;
        *(_QWORD *)(v230 + 112) = 0;
        v230 += 152;
        if (v230 == v231)
          goto LABEL_78;
      }
      v239 = *(_QWORD *)(v230 + 128);
      if (v239)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 24))(v239, v230 + 88);
        _Q0.f64[0] = *(float64_t *)(v230 + 104);
        _Q1 = *v237;
      }
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q3 = *v237;
      *(float64x2_t *)(v230 + 64) = *v237;
      *(_QWORD *)(v230 + 80) = *(_QWORD *)(v230 + 104);
      _Q1.f64[1] = _Q2.f64[0];
      v240 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 144);
      v241 = _Q1.f64[0] * v240;
      *(float64_t *)(v230 + 112) = v241;
      v233 = v233 + v241;
      v230 += 152;
    }
    while (v230 != v231);
LABEL_78:
    v40 = *a2;
  }
  v40[8] = v233 * 0.5;
  v242 = *(_QWORD *)(a1 + 1592);
  v243 = *(_QWORD *)(a1 + 1600);
  if (v242 != v243)
  {
    v232 = 0.0;
    do
    {
      while (1)
      {
        v244 = sub_20FC80984(v242 + 8, (uint64_t *)(v242 + 200), v242 + 248, (double **)(a1 + 1872));
        *(_BYTE *)(v242 + 272) = v244;
        if (v244)
          break;
        *(_QWORD *)(v242 + 264) = 0;
        v242 += 304;
        if (v242 == v243)
          goto LABEL_86;
      }
      v245 = *(_QWORD *)(v242 + 280);
      if (v245)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v245 + 24))(v245, v242 + 248);
      *(_OWORD *)(v242 + 232) = *(_OWORD *)(v242 + 248);
      _Q0 = *(float64x2_t *)(v242 + 248);
      _Q2.f64[0] = *(float64_t *)(v242 + 256);
      __asm { FMLA            D1, D2, V0.D[1] }
      _Q0.f64[0] = *(double *)(a1 + 160) * _Q1.f64[0];
      *(float64_t *)(v242 + 264) = _Q0.f64[0];
      v232 = v232 + _Q0.f64[0];
      v242 += 304;
    }
    while (v242 != v243);
LABEL_86:
    v40 = *a2;
  }
  _Q0.f64[0] = v232 * 0.5;
  v40[9] = v232 * 0.5;
  v246 = *(_QWORD *)(a1 + 1616);
  v247 = *(_QWORD *)(a1 + 1624);
  v248 = 0.0;
  v249 = 0.0;
  if (v246 != v247)
  {
    do
    {
      while (1)
      {
        v250 = (float64x2_t *)(v246 + 296);
        v251 = sub_20F9B6D14(v246 + 8, (int64x2_t **)(v246 + 224), (float64x2_t *)(v246 + 296), _Q0.f64[0], _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4.f64[0], _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v246 + 328) = v251;
        if (v251)
          break;
        *(_QWORD *)(v246 + 320) = 0;
        v246 += 360;
        if (v246 == v247)
          goto LABEL_94;
      }
      v252 = *(_QWORD *)(v246 + 336);
      if (v252)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v252 + 24))(v252, v246 + 296);
      _Q0 = *v250;
      *(float64x2_t *)(v246 + 272) = *v250;
      *(_QWORD *)(v246 + 288) = *(_QWORD *)(v246 + 312);
      _Q1 = *v250;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = *(float64_t *)(v246 + 304);
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 176);
      _Q0.f64[0] = _Q1.f64[0] * (_Q2.f64[0] + *(double *)(v246 + 312) * *(double *)(v246 + 312));
      *(float64_t *)(v246 + 320) = _Q0.f64[0];
      v249 = v249 + _Q0.f64[0];
      v246 += 360;
    }
    while (v246 != v247);
LABEL_94:
    v40 = *a2;
  }
  v40[10] = v249 * 0.5;
  v253 = *(_QWORD *)(a1 + 1640);
  v254 = *(_QWORD *)(a1 + 1648);
  if (v253 != v254)
  {
    v248 = 0.0;
    do
    {
      while (!*(_BYTE *)(v253 + 40))
      {
        *(_BYTE *)(v253 + 80) = 0;
        *(_QWORD *)(v253 + 72) = 0;
        v253 += 112;
        if (v253 == v254)
          goto LABEL_102;
      }
      _Q2.f64[0] = *(float64_t *)(v253 + 32);
      _Q0.f64[0] = _Q2.f64[0] * (*(double *)(*(_QWORD *)(v253 + 48) + 32) - *(double *)(v253 + 24));
      *(float64_t *)(v253 + 64) = _Q0.f64[0];
      *(_BYTE *)(v253 + 80) = 1;
      v255 = *(_QWORD *)(v253 + 88);
      if (v255)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v255 + 24))(v255, v253 + 64);
        _Q0.f64[0] = *(float64_t *)(v253 + 64);
      }
      *(float64_t *)(v253 + 56) = _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 192);
      v256 = _Q1.f64[0] * (_Q0.f64[0] * _Q0.f64[0]);
      *(float64_t *)(v253 + 72) = v256;
      v248 = v248 + v256;
      v253 += 112;
    }
    while (v253 != v254);
LABEL_102:
    v40 = *a2;
  }
  v40[11] = v248 * 0.5;
  v257 = *(_QWORD *)(a1 + 1664);
  v258 = *(_QWORD *)(a1 + 1672);
  v259 = 0.0;
  v260 = 0.0;
  if (v257 != v258)
  {
    do
    {
      while (!*(_BYTE *)(v257 + 88))
      {
        *(_BYTE *)(v257 + 176) = 0;
        *(_QWORD *)(v257 + 168) = 0;
        v257 += 208;
        if (v257 == v258)
          goto LABEL_110;
      }
      v261 = (float64x2_t *)(v257 + 136);
      v262 = *(float64x2_t **)(v257 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v262[2], *(float64x2_t *)(v257 + 24)), *(float64x2_t *)(v257 + 56));
      _Q0 = vmulq_f64(vsubq_f64(v262[3], *(float64x2_t *)(v257 + 40)), *(float64x2_t *)(v257 + 72));
      *(float64x2_t *)(v257 + 152) = _Q0;
      *(float64x2_t *)(v257 + 136) = _Q1;
      *(_BYTE *)(v257 + 176) = 1;
      v263 = *(_QWORD *)(v257 + 184);
      if (v263)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v263 + 24))(v263, v257 + 136);
        _Q1 = *v261;
        _Q0 = *(float64x2_t *)(v257 + 152);
      }
      _Q3 = *(float64x2_t *)(v257 + 152);
      *(float64x2_t *)(v257 + 104) = *v261;
      *(float64x2_t *)(v257 + 120) = _Q3;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = _Q0.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v264 = *(double *)(a1 + 208) * _Q2.f64[0];
      *(double *)(v257 + 168) = v264;
      v260 = v260 + v264;
      v257 += 208;
    }
    while (v257 != v258);
LABEL_110:
    v40 = *a2;
  }
  v40[12] = v260 * 0.5;
  v265 = *(_QWORD *)(a1 + 1688);
  v266 = *(_QWORD *)(a1 + 1696);
  if (v265 != v266)
  {
    v259 = 0.0;
    do
    {
      while (!*(_BYTE *)(v265 + 88))
      {
        *(_BYTE *)(v265 + 176) = 0;
        *(_QWORD *)(v265 + 168) = 0;
        v265 += 208;
        if (v265 == v266)
          goto LABEL_118;
      }
      v267 = (float64x2_t *)(v265 + 136);
      v268 = *(float64x2_t **)(v265 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v268[2], *(float64x2_t *)(v265 + 24)), *(float64x2_t *)(v265 + 56));
      _Q0 = vmulq_f64(vsubq_f64(v268[3], *(float64x2_t *)(v265 + 40)), *(float64x2_t *)(v265 + 72));
      *(float64x2_t *)(v265 + 152) = _Q0;
      *(float64x2_t *)(v265 + 136) = _Q1;
      *(_BYTE *)(v265 + 176) = 1;
      v269 = *(_QWORD *)(v265 + 184);
      if (v269)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 24))(v269, v265 + 136);
        _Q1 = *v267;
        _Q0 = *(float64x2_t *)(v265 + 152);
      }
      _Q3 = *(float64x2_t *)(v265 + 152);
      *(float64x2_t *)(v265 + 104) = *v267;
      *(float64x2_t *)(v265 + 120) = _Q3;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = _Q0.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v270 = *(double *)(a1 + 224) * _Q2.f64[0];
      *(double *)(v265 + 168) = v270;
      v259 = v259 + v270;
      v265 += 208;
    }
    while (v265 != v266);
LABEL_118:
    v40 = *a2;
  }
  v40[13] = v259 * 0.5;
  v271 = *(_QWORD *)(a1 + 1712);
  v272 = *(_QWORD *)(a1 + 1720);
  v273 = 0.0;
  v274 = 0.0;
  if (v271 != v272)
  {
    do
    {
      while (!*(_BYTE *)(v271 + 72))
      {
        *(_BYTE *)(v271 + 144) = 0;
        *(_QWORD *)(v271 + 136) = 0;
        v271 += 176;
        if (v271 == v272)
          goto LABEL_129;
      }
      v275 = *(_QWORD *)(v271 + 80);
      _Q1 = *(_OWORD *)(v271 + 24);
      _D3 = *(_QWORD *)(v271 + 32);
      __asm { FMLA            D2, D3, V1.D[1] }
      v279 = _D2 + *(double *)(v271 + 40) * *(double *)(v271 + 40);
      if (v279 >= 0.0000002635)
      {
        v283 = sqrt(v279);
        v284 = __sincos_stret(v283);
        cosval = v284.__cosval;
        v281 = v284.__sinval / v283;
        v280 = 1.0 / v279 * (1.0 - v284.__cosval);
      }
      else
      {
        v280 = 0.5 - v279 * (v279 / -720.0 + 0.0416666667);
        v281 = 1.0 - v279 * (0.166666667 - v279 * (v279 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v279 * v280;
      }
      v285 = *(double *)(v271 + 24);
      v286 = *(double *)(v271 + 32);
      v287 = v280 * v285;
      v288 = v280 * v286;
      v289 = *(double *)(v271 + 40);
      v290 = cosval + v285 * (v280 * v285);
      v291 = cosval + v286 * (v280 * v286);
      v292 = cosval + v289 * (v280 * v289);
      v293 = v280 * v285 * v286;
      v294 = v287 * v289;
      v295 = v288 * v289;
      v296 = v281 * v285;
      v297 = v281 * v286;
      v298 = v281 * v289;
      v299 = v293 - v298;
      v300 = v297 + v294;
      v301 = v293 + v298;
      v302 = v295 - v296;
      v303 = v294 - v297;
      v304 = v296 + v295;
      v305 = *(double *)(v275 + 48);
      v306 = *(float64x2_t *)(v275 + 32);
      v307 = *(double *)(v275 + 72);
      v308 = *(float64x2_t *)(v275 + 56);
      v309 = *(double *)(v275 + 96);
      v310 = *(float64x2_t *)(v275 + 80);
      *(double *)v642 = v305 * v290 + v307 * v299 + v309 * v300;
      v641 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v306, v290), v308, v299), v310, v300);
      *((double *)&v642[1] + 1) = v305 * v301 + v307 * v291 + v309 * v302;
      *(float64x2_t *)((char *)v642 + 8) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v306, v301), v308, v291), v310, v302);
      v644.f64[0] = v305 * v303 + v307 * v304 + v309 * v292;
      v643 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v306, v303), v308, v304), v310, v292);
      v632 = 0uLL;
      *(_QWORD *)&v633 = 0;
      sub_20E9733B8(&v641, v632.f64);
      v311 = (int8x16_t *)(v271 + 112);
      v312.f64[1] = v632.f64[1];
      v649 = v632;
      v313 = v633;
      *(_QWORD *)&v650 = v633;
      *(float64x2_t *)(v271 + 112) = v632;
      *(_QWORD *)(v271 + 128) = v313;
      v312.f64[0] = *(float64_t *)(v271 + 128);
      v314.f64[0] = *(float64_t *)(v271 + 64);
      _Q0 = vmulq_f64(v312, v314);
      v315 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v271 + 112), *(float64x2_t *)(v271 + 48));
      *(int8x16_t *)(v271 + 112) = v315;
      *(float64_t *)(v271 + 128) = _Q0.f64[0];
      *(_BYTE *)(v271 + 144) = 1;
      v316 = *(_QWORD *)(v271 + 152);
      if (v316)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v316 + 24))(v316, v271 + 112);
        _Q0.f64[0] = *(float64_t *)(v271 + 128);
        v315 = *v311;
      }
      _Q2 = (float64x2_t)vextq_s8(v315, v315, 8uLL);
      _Q3 = *(float64x2_t *)v311;
      *(int8x16_t *)(v271 + 88) = *v311;
      *(_QWORD *)(v271 + 104) = *(_QWORD *)(v271 + 128);
      _Q1.f64[1] = _Q2.f64[0];
      v317 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 240);
      v318 = _Q1.f64[0] * v317;
      *(float64_t *)(v271 + 136) = v318;
      v274 = v274 + v318;
      v271 += 176;
    }
    while (v271 != v272);
LABEL_129:
    v40 = *a2;
  }
  v40[14] = v274 * 0.5;
  v319 = *(_QWORD *)(a1 + 1736);
  v320 = *(_QWORD *)(a1 + 1744);
  if (v319 != v320)
  {
    v273 = 0.0;
    do
    {
      while (!*(_BYTE *)(v319 + 72))
      {
        *(_BYTE *)(v319 + 144) = 0;
        *(_QWORD *)(v319 + 136) = 0;
        v319 += 176;
        if (v319 == v320)
          goto LABEL_137;
      }
      v321 = (int8x16_t *)(v319 + 112);
      v322 = *(float64x2_t **)(v319 + 80);
      _Q0.f64[0] = v322[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v319 + 40);
      v323 = vsubq_f64(_Q0, _Q2);
      _Q2.f64[0] = *(float64_t *)(v319 + 64);
      _Q0 = vmulq_f64(v323, _Q2);
      v324 = (int8x16_t)vmulq_f64(vsubq_f64(v322[2], *(float64x2_t *)(v319 + 24)), *(float64x2_t *)(v319 + 48));
      *(int8x16_t *)(v319 + 112) = v324;
      *(float64_t *)(v319 + 128) = _Q0.f64[0];
      *(_BYTE *)(v319 + 144) = 1;
      v325 = *(_QWORD *)(v319 + 152);
      if (v325)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 24))(v325, v319 + 112);
        _Q0.f64[0] = *(float64_t *)(v319 + 128);
        v324 = *v321;
      }
      _Q2 = (float64x2_t)vextq_s8(v324, v324, 8uLL);
      _Q3 = *(float64x2_t *)v321;
      *(int8x16_t *)(v319 + 88) = *v321;
      *(_QWORD *)(v319 + 104) = *(_QWORD *)(v319 + 128);
      _Q1.f64[1] = _Q2.f64[0];
      v326 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 256);
      v327 = _Q1.f64[0] * v326;
      *(float64_t *)(v319 + 136) = v327;
      v273 = v273 + v327;
      v319 += 176;
    }
    while (v319 != v320);
LABEL_137:
    v40 = *a2;
  }
  v328 = v273 * 0.5;
  v40[15] = v273 * 0.5;
  v329 = *(_QWORD *)(a1 + 1760);
  v330 = *(_QWORD *)(a1 + 1768);
  v331 = 0.0;
  v332 = 0.0;
  if (v329 != v330)
  {
    do
    {
      while (1)
      {
        v333 = sub_20FC7133C(v329 + 8, (uint64_t *)(v329 + 56), v329 + 160, v328, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v329 + 184) = v333;
        if (v333)
          break;
        *(_QWORD *)(v329 + 176) = 0;
        v329 += 216;
        if (v329 == v330)
          goto LABEL_145;
      }
      v334 = *(_QWORD *)(v329 + 192);
      if (v334)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v334 + 24))(v334, v329 + 160);
      *(_OWORD *)(v329 + 144) = *(_OWORD *)(v329 + 160);
      _Q0 = *(_OWORD *)(v329 + 160);
      _Q2.f64[0] = *(float64_t *)(v329 + 168);
      __asm { FMLA            D1, D2, V0.D[1] }
      v328 = *(double *)(a1 + 272) * _Q1.f64[0];
      *(double *)(v329 + 176) = v328;
      v332 = v332 + v328;
      v329 += 216;
    }
    while (v329 != v330);
LABEL_145:
    v40 = *a2;
  }
  v336 = v332 * 0.5;
  v40[16] = v332 * 0.5;
  v337 = *(_QWORD *)(a1 + 1784);
  v338 = *(_QWORD *)(a1 + 1792);
  if (v337 != v338)
  {
    v331 = 0.0;
    do
    {
      while (1)
      {
        v339 = sub_20FC77D28(v337 + 8, (uint64_t *)(v337 + 64), v337 + 128, v336, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4.f64[0], _Q5, _Q6.f64[0], _Q7);
        *(_BYTE *)(v337 + 152) = v339;
        if (v339)
          break;
        *(_QWORD *)(v337 + 144) = 0;
        v337 += 184;
        if (v337 == v338)
          goto LABEL_153;
      }
      v340 = *(_QWORD *)(v337 + 160);
      if (v340)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v340 + 24))(v340, v337 + 128);
      *(_OWORD *)(v337 + 112) = *(_OWORD *)(v337 + 128);
      _Q0 = *(_OWORD *)(v337 + 128);
      _Q2.f64[0] = *(float64_t *)(v337 + 136);
      __asm { FMLA            D1, D2, V0.D[1] }
      v336 = *(double *)(a1 + 288) * _Q1.f64[0];
      *(double *)(v337 + 144) = v336;
      v331 = v331 + v336;
      v337 += 184;
    }
    while (v337 != v338);
LABEL_153:
    v40 = *a2;
  }
  v342 = v331 * 0.5;
  v40[17] = v331 * 0.5;
  v343 = *(_QWORD *)(a1 + 1808);
  v344 = *(_QWORD *)(a1 + 1816);
  v345 = 0.0;
  if (v343 != v344)
  {
    do
    {
      while (1)
      {
        v346 = sub_20FC7D7A0(v343 + 8, (uint64_t *)(v343 + 64), (double *)(v343 + 160), v342, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v343 + 176) = v346;
        if (v346)
          break;
        *(_QWORD *)(v343 + 168) = 0;
        v343 += 208;
        if (v343 == v344)
          goto LABEL_161;
      }
      v347 = *(_QWORD *)(v343 + 184);
      if (v347)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v347 + 24))(v347, v343 + 160);
      v348 = *(double *)(v343 + 160);
      *(double *)(v343 + 152) = v348;
      _Q1.f64[0] = *(float64_t *)(a1 + 304);
      v342 = _Q1.f64[0] * (v348 * v348);
      *(double *)(v343 + 168) = v342;
      v345 = v345 + v342;
      v343 += 208;
    }
    while (v343 != v344);
    goto LABEL_161;
  }
LABEL_411:
  v40[18] = v345 * 0.5;
  *(_WORD *)(a1 + 2971) = 257;
  v631 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v611 = **a2;
  v612 = (*a2)[1];
  v613 = (*a2)[2];
  v614 = (*a2)[3];
  v615 = (*a2)[4];
  v616 = (*a2)[5];
  v618 = (*a2)[6];
  v617 = (*a2)[7];
  v629 = (*a2)[9];
  v630 = (*a2)[8];
  v627 = (*a2)[11];
  v628 = (*a2)[10];
  v625 = (*a2)[13];
  v626 = (*a2)[12];
  v623 = (*a2)[15];
  v624 = (*a2)[14];
  v621 = (*a2)[17];
  v622 = (*a2)[16];
  v620 = (*a2)[18];
  kdebug_trace();
  return v631
       + v611
       + v612
       + v613
       + v614
       + v615
       + v616
       + v618
       + v617
       + v630
       + v629
       + v628
       + v627
       + v626
       + v625
       + v624
       + v623
       + v622
       + v621
       + v620;
}

void sub_20F9D9E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F9D9FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB42B8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

#error "20F9D9FCC: too big function (funcsize=0)"

void sub_20FA152B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA152CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA152E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA152F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15308(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA1531C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15330(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15344(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15358(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA1536C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA15394(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA153A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

void sub_20FA153BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 560));
  _Unwind_Resume(a1);
}

uint64_t sub_20FA153D4(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  _BOOL4 v23;
  std::string::size_type v24;
  int v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  unsigned int v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  unsigned int v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned int *v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  size_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  size_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  double *v117;
  unint64_t v118;
  double *v119;
  size_t v120;
  uint64_t v121;
  unint64_t v122;
  double *v123;
  size_t v124;
  size_t v125;
  float64x2_t *v126;
  unint64_t v127;
  double *v128;
  double *v129;
  unint64_t v130;
  uint64_t v131;
  float64x2_t *v132;
  float64x2_t *v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  int **v137;
  unsigned int v138;
  _DWORD *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  signed int v148;
  size_t v149;
  size_t v150;
  float64x2_t *v151;
  unint64_t v152;
  double *v153;
  double *v154;
  unint64_t v155;
  uint64_t v156;
  float64x2_t *v157;
  float64x2_t *v158;
  uint64_t v159;
  float64x2_t v160;
  double v161;
  unint64_t v162;
  uint64_t v163;
  double *v164;
  float64x2_t *v165;
  float64x2_t *v166;
  uint64_t v167;
  float64x2_t v168;
  double v169;
  const void *v170;
  unint64_t v171;
  void *v172;
  size_t v173;
  size_t v174;
  size_t v175;
  void *v176;
  void *v177;
  size_t v178;
  size_t v179;
  void *v180;
  void *v181;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  std::string::size_type size;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::string *p_s1;
  std::string::size_type v198;
  BOOL v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  BOOL v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string *v217;
  std::string::size_type v218;
  std::string *v219;
  __int128 v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unsigned int v229;
  int *v230;
  int *v231;
  unsigned int v232;
  int v233;
  int *v234;
  int *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  BOOL v242;
  std::string *v243;
  __int128 v244;
  std::string *v245;
  __int128 v246;
  std::string *v247;
  std::string::size_type v248;
  std::string *v249;
  __int128 v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  std::string::size_type v259;
  std::string *v260;
  __int128 v261;
  uint64_t v262;
  unint64_t v263;
  std::string *v264;
  __int128 v265;
  std::string *v266;
  __int128 v267;
  std::string *v268;
  std::string::size_type v269;
  std::string *v270;
  __int128 v271;
  uint64_t v272;
  std::string *v273;
  __int128 v274;
  std::string *v275;
  __int128 v276;
  std::string *v277;
  std::string::size_type v278;
  std::string *v279;
  __int128 v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  std::string *p_dst;
  std::string::size_type v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  std::string::size_type v348;
  void *v349;
  unint64_t v350;
  const void **v351;
  const void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  std::string::size_type v356;
  _OWORD *v357;
  uint64_t v358;
  unsigned int v359[2];
  void *v360;
  uint64_t v361;
  unsigned int *v364;
  unsigned int *v366;
  _DWORD *v368;
  unsigned int *v369;
  uint64_t v370;
  void *__p[2];
  std::string::size_type v372;
  void *v373[2];
  std::string::size_type v374;
  void *v375[2];
  std::string::size_type v376;
  unsigned int v377[6];
  _DWORD *v378;
  std::string v379;
  std::string v380;
  std::string __s1;
  unsigned int v382;
  std::string v383;
  std::string v384;
  std::string v385;
  std::string v386;
  std::string v387;
  std::string v388;
  uint64_t v389;
  _QWORD v390[3];
  uint64_t v391;
  unint64_t v392;
  void *v393;
  char v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  std::string __dst;

  v8 = a1 + 57912;
  *(_WORD *)(a1 + 58053) = 256;
  bzero((void *)(*(_QWORD *)(a1 + 57912) + 43616), 0x2C0uLL);
  kdebug_trace();
  kdebug_trace();
  v9 = *(unsigned int **)v8;
  v378 = 0;
  if (*(_BYTE *)(v8 + 140))
  {
    v10 = operator new(0x20BD00uLL, (std::align_val_t)0x40uLL);
    sub_20F901CC0((uint64_t)v10, (uint64_t)v9);
    v378 = v10;
  }
  else
  {
    v10 = 0;
  }
  if ((v9[90956] != -1163005939
     || v9[90957] != -1163005939
     || v9[90958] != -1163005939
     || v9[90959] != -1163005939
     || v9[90960] != -1163005939
     || v9[90961] != -1163005939
     || v9[90962] != -1163005939
     || v9[90963] != -1163005939
     || v9[90964] != -1163005939
     || v9[90965] != -1163005939
     || v9[90966] != -1163005939
     || v9[90967] != -1163005939
     || v9[90968] != -1163005939
     || v9[90969] != -1163005939
     || v9[90970] != -1163005939
     || v9[90971] != -1163005939)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 2327, (uint64_t)"fullData.checkForOverwrites()", 29, (uint64_t)"LPS guard bytes overwritten before full kernel.", 47, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F9042D0(v377, *(_QWORD *)(a1 + 57904), (uint64_t)v9);
  v364 = v9 + 536368;
  v369 = v9 + 7762;
  v370 = a1 + 57168;
  v368 = v10;
  v360 = a6;
  v361 = a1;
  v366 = v9 + 90955;
  if (*(_BYTE *)(v8 + 137))
  {
    LOBYTE(v11) = 0;
LABEL_23:
    v12 = 0;
    goto LABEL_64;
  }
  v13 = *(_QWORD *)(a1 + 57904);
  if (*(_BYTE *)(v13 + 40))
    *(_BYTE *)(v13 + 40) = 0;
  v14 = *(_DWORD *)(v13 + 68);
  if (v14 != 3)
  {
    if (v14)
      abort();
    LOBYTE(v11) = sub_20FC8D1B4((uint64_t)v9);
    v15 = 1;
    if (!*(_BYTE *)(v13 + 72))
      goto LABEL_59;
LABEL_58:
    sub_2100F5CD4(v13, (uint64_t)"FlatWorld_linearizeAndSolve_tackyMarginalize_DMA]", 48, v15);
    goto LABEL_59;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_254A6B830);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B830))
  {
    sub_20FA18A3C(&qword_254A6B8E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A6B8E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6B830);
  }
  v357 = (_OWORD *)(v13 + 16);
  v388.__r_.__value_.__r.__words[0] = lacc_hardware::LaccHardware::operator lacc::CallInterface &();
  v388.__r_.__value_.__l.__size_ = v13 + 16;
  lacc_hardware::LaccHardware::operator lacc::CallInterface &();
  v17 = byte_254A6B8FF;
  v18 = (const char *)qword_254A6B8E8;
  lacc::LaccABI::LaccABI();
  if (v17 >= 0)
    v18 = (const char *)&qword_254A6B8E8;
  kdebug_trace();
  lacc::LaccABI::insert((lacc::LaccABI *)&__s1, v9);
  lacc::LaccABI::insert((lacc::LaccABI *)&__s1, v377);
  if (a3)
  {
    lacc::LaccABI::insert((lacc::LaccABI *)&__s1, a3);
    v19 = a4;
    if (a4)
      goto LABEL_35;
  }
  else
  {
    v19 = a4;
    if (a4)
    {
LABEL_35:
      lacc::LaccABI::insert((lacc::LaccABI *)&__s1, v19);
      v20 = a5;
      if (a5)
        goto LABEL_36;
      goto LABEL_40;
    }
  }
  v20 = a5;
  if (a5)
  {
LABEL_36:
    lacc::LaccABI::insert((lacc::LaccABI *)&__s1, v20);
    v21 = v360;
    if (!v360)
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_40:
  v21 = v360;
  if (v360)
LABEL_37:
    lacc::LaccABI::insert((lacc::LaccABI *)&__s1, v21);
LABEL_41:
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  lacc::LaccABI::reserve();
  lacc::LaccABI::reserve((lacc::LaccABI *)&__s1);
  kdebug_trace();
  lacc::LaccABI::allocate_stack((lacc::LaccABI *)&__s1);
  kdebug_trace();
  lacc::LaccABI::write_stack_items((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  lacc::LaccABI::push();
  lacc::LaccABI::push((lacc::LaccABI *)&__s1);
  kdebug_trace();
  v22 = lacc::LaccABI::call((lacc::LaccABI *)&__s1, v18);
  if (v22)
  {
    kdebug_trace();
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop();
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::pop((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release();
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    lacc::LaccABI::release((lacc::LaccABI *)&__s1);
    if (v360)
      lacc::LaccABI::extract((lacc::LaccABI *)&__s1, v360);
    if (a5)
      lacc::LaccABI::extract((lacc::LaccABI *)&__s1, a5);
    if (a4)
      lacc::LaccABI::extract((lacc::LaccABI *)&__s1, a4);
    if (a3)
      lacc::LaccABI::extract((lacc::LaccABI *)&__s1, a3);
    lacc::LaccABI::extract((lacc::LaccABI *)&__s1, v377);
    lacc::LaccABI::extract((lacc::LaccABI *)&__s1, v9);
    v23 = lacc::LaccABI::get_return_u32((lacc::LaccABI *)&__s1) != 0;
    kdebug_trace();
  }
  else
  {
    v23 = 0;
  }
  lacc::LaccABI::~LaccABI((lacc::LaccABI *)&__s1);
  lacc::Counts::read_from();
  v24 = __s1.__r_.__value_.__r.__words[2];
  *v357 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
  *(_QWORD *)(v13 + 32) = v24;
  *(_BYTE *)(v13 + 40) = 1;
  v25 = *(_DWORD *)(v13 + 16);
  if (v25)
    *(_DWORD *)v357 = v25 - 2;
  if (v22)
    v11 = v23 | 0x100;
  else
    v11 = 0;
  v15 = v11 >> 8;
  if (*(_BYTE *)(v13 + 72))
    goto LABEL_58;
LABEL_59:
  if (!*(_BYTE *)(v8 + 137))
  {
    if (v15)
      goto LABEL_63;
    sub_2100F5F00(*(_QWORD **)(a1 + 57904), (unsigned __int8 *)&v385);
    v183 = std::string::insert(&v385, 0, "Failed to linearize, solve and tacky marginalize: ", 0x32uLL);
    v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    v386.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    v185 = std::string::append(&v386, ", cp: ", 6uLL);
    v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
    v387.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v387.__r_.__value_.__l.__data_ = v186;
    v185->__r_.__value_.__l.__size_ = 0;
    v185->__r_.__value_.__r.__words[2] = 0;
    v185->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F1460(&v384, *v364);
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v187 = &v384;
    else
      v187 = (std::string *)v384.__r_.__value_.__r.__words[0];
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v384.__r_.__value_.__r.__words[2]);
    else
      size = v384.__r_.__value_.__l.__size_;
    v189 = std::string::append(&v387, (const std::string::value_type *)v187, size);
    v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    v191 = std::string::append(&__dst, ", ov: ", 6uLL);
    v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    v388.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F162C(&v383, v9[7824]);
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v193 = &v383;
    else
      v193 = (std::string *)v383.__r_.__value_.__r.__words[0];
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
    else
      v194 = v383.__r_.__value_.__l.__size_;
    v195 = std::string::append(&v388, (const std::string::value_type *)v193, v194);
    v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v196;
    v195->__r_.__value_.__l.__size_ = 0;
    v195->__r_.__value_.__r.__words[2] = 0;
    v195->__r_.__value_.__r.__words[0] = 0;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s1 = &__s1;
    else
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v198 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v198 = __s1.__r_.__value_.__l.__size_;
    v199 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 2344, (uint64_t)"(m_skipHWCalls || ok)", 21, (uint64_t)p_s1, v198, (void (*)(void **))sub_21023DDB0);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_316:
        if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_317;
        goto LABEL_442;
      }
    }
    else if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_316;
    }
    operator delete(v383.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_317:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_318;
      goto LABEL_443;
    }
LABEL_442:
    operator delete(v388.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_318:
      if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_319;
      goto LABEL_444;
    }
LABEL_443:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_319:
      if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_320;
      goto LABEL_445;
    }
LABEL_444:
    operator delete(v384.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_320:
      if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_321;
      goto LABEL_446;
    }
LABEL_445:
    operator delete(v387.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_321:
      if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_322;
      goto LABEL_447;
    }
LABEL_446:
    operator delete(v386.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_322:
      if (v199)
        goto LABEL_448;
      goto LABEL_23;
    }
LABEL_447:
    operator delete(v385.__r_.__value_.__l.__data_);
    if (v199)
      goto LABEL_448;
    goto LABEL_23;
  }
  if (!v15)
    goto LABEL_23;
LABEL_63:
  v12 = 1;
LABEL_64:
  kdebug_trace();
  if (!v12)
    goto LABEL_83;
  v26 = *(_QWORD *)(a1 + 57904);
  if (*(_DWORD *)(v26 + 68) == 3 && *(_BYTE *)(v26 + 40))
    *(_QWORD *)(v8 + 120) += *(unsigned int *)(v26 + 16);
  if (!(_BYTE)v11)
  {
    std::to_string(&v387, 0);
    v52 = std::string::insert(&v387, 0, "error: LACC full kernel returned ", 0x21uLL);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&__dst, ", ", 2uLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v388.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = *(_QWORD *)(a1 + 57904);
    if (*(_DWORD *)(v56 + 68) == 3 && *(_BYTE *)(v56 + 40))
      v57 = *(_DWORD *)(v56 + 16);
    else
      v57 = 0;
    std::to_string(&v386, v57);
    if ((v386.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v386;
    else
      v58 = (std::string *)v386.__r_.__value_.__r.__words[0];
    if ((v386.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v386.__r_.__value_.__r.__words[2]);
    else
      v59 = v386.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v388, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&__s1, " packets", 8uLL);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v376 = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)v375 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = *(_QWORD *)(a1 + 57376);
    if (v64)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v64 + 48))(v64, v375);
    if (SHIBYTE(v376) < 0)
    {
      operator delete(v375[0]);
      if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_129:
        if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_130;
        goto LABEL_249;
      }
    }
    else if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_129;
    }
    operator delete(__s1.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_250;
    }
LABEL_249:
    operator delete(v386.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_131:
      v65 = (_BYTE *)(a1 + 40304);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_132;
      goto LABEL_251;
    }
LABEL_250:
    operator delete(v388.__r_.__value_.__l.__data_);
    v65 = (_BYTE *)(a1 + 40304);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_132:
      if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_133;
      goto LABEL_252;
    }
LABEL_251:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_133:
      if (!*v65)
        goto LABEL_69;
LABEL_253:
      if (!*(_QWORD *)(a1 + 57376))
        goto LABEL_69;
      v137 = (int **)(a1 + 41568);
      v358 = *(_QWORD *)(a1 + 41592);
      *(_QWORD *)v359 = *(_QWORD *)(a1 + 41600);
      v138 = *v369;
      v139 = v9 + 11088;
      if (!*v369)
      {
LABEL_264:
        v147 = 0;
        v148 = *v369;
        goto LABEL_360;
      }
      LODWORD(v140) = 0;
      v141 = 0;
      while (1)
      {
        v142 = 0;
        if (v140 >= HIDWORD(v141))
          v142 = *(_QWORD *)&v139[2 * (196 - ((v138 + 3) & 0xFFFFFFFC)) + 2 * (v141 + 196 * HIDWORD(v141))];
        if ((v142 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v143 = (v140 + 1);
        v144 = v141 & 0xFFFFFFFF00000000;
        v145 = v144 | v143;
        v146 = v144 + 0x100000000;
        if ((int)v138 <= (int)v143)
          v140 = v146;
        else
          v140 = v145;
        v141 = v140;
        if (!(_DWORD)v140)
        {
          v141 = v140;
          if (v138 == HIDWORD(v140))
            goto LABEL_264;
        }
      }
      sub_20F8D5014(a1, "error: RCS has FP specials.");
      LODWORD(v200) = 0;
      v201 = 0;
      do
      {
        v202 = (v200 + 1);
        v203 = v201 & 0xFFFFFFFF00000000;
        v204 = v203 | v202;
        v205 = v203 + 0x100000000;
        if ((int)v138 <= (int)v202)
          v200 = v205;
        else
          v200 = v204;
        if ((_DWORD)v200)
          v206 = 0;
        else
          v206 = v138 == HIDWORD(v200);
        v201 = v200;
      }
      while (!v206);
      v147 = 1;
      v148 = *v369;
      if (*v369 == v138)
      {
LABEL_360:
        if (v148)
        {
          LODWORD(v222) = 0;
          v223 = 0;
          while (1)
          {
            v224 = 0;
            if (v222 <= HIDWORD(v223))
              v224 = *(_QWORD *)&v139[2 * (v223 + 196 * HIDWORD(v223))];
            if ((v224 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              break;
            v225 = (v222 + 1);
            v226 = v223 & 0xFFFFFFFF00000000;
            v227 = v226 | v225;
            v228 = v226 + 0x100000000;
            if (v148 <= (int)v225)
              v222 = v228;
            else
              v222 = v227;
            v223 = v222;
            if (!(_DWORD)v222)
            {
              v223 = v222;
              if (v148 == HIDWORD(v222))
                goto LABEL_370;
            }
          }
          sub_20F8D5014(v361, "error: rcsReorderOrig has FP specials (less interesting, as this was already partially factorized by now).");
          LODWORD(v236) = 0;
          v237 = 0;
          do
          {
            v238 = (v236 + 1);
            v239 = v237 & 0xFFFFFFFF00000000;
            v240 = v239 | v238;
            v241 = v239 + 0x100000000;
            if (v148 <= (int)v238)
              v236 = v241;
            else
              v236 = v240;
            if ((_DWORD)v236)
              v242 = 0;
            else
              v242 = v148 == HIDWORD(v236);
            v237 = v236;
          }
          while (!v242);
          v147 = 1;
          v229 = v9[10902];
          if (v229 != v138)
          {
LABEL_386:
            std::to_string(&__dst, v229);
            v243 = std::string::insert(&__dst, 0, "error: unexpected permVec size: ", 0x20uLL);
            v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
            v388.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v244;
            v243->__r_.__value_.__l.__size_ = 0;
            v243->__r_.__value_.__r.__words[2] = 0;
            v243->__r_.__value_.__r.__words[0] = 0;
            v245 = std::string::append(&v388, " != ", 4uLL);
            v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v246;
            v245->__r_.__value_.__l.__size_ = 0;
            v245->__r_.__value_.__r.__words[2] = 0;
            v245->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v385, v138);
            if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v247 = &v385;
            else
              v247 = (std::string *)v385.__r_.__value_.__r.__words[0];
            if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v248 = HIBYTE(v385.__r_.__value_.__r.__words[2]);
            else
              v248 = v385.__r_.__value_.__l.__size_;
            v249 = std::string::append(&__s1, (const std::string::value_type *)v247, v248);
            v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
            v386.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v250;
            v249->__r_.__value_.__l.__size_ = 0;
            v249->__r_.__value_.__r.__words[2] = 0;
            v249->__r_.__value_.__r.__words[0] = 0;
            v251 = *(_QWORD *)(v370 + 208);
            if (v251)
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v251 + 48))(v251, &v386);
            if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v386.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_396:
                if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_397;
                goto LABEL_502;
              }
            }
            else if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_396;
            }
            operator delete(v385.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_397:
              if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_398;
              goto LABEL_503;
            }
LABEL_502:
            operator delete(__s1.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_398:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_399;
              goto LABEL_504;
            }
LABEL_503:
            operator delete(v388.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_399:
              v147 = 1;
              v230 = *v137;
              v231 = v137[1];
              v382 = 0;
              if (v230 == v231)
                goto LABEL_400;
              goto LABEL_372;
            }
LABEL_504:
            operator delete(__dst.__r_.__value_.__l.__data_);
            v147 = 1;
            v230 = *v137;
            v231 = v137[1];
            v382 = 0;
            if (v230 == v231)
            {
LABEL_400:
              v232 = 0;
              v234 = v137[3];
              v235 = v137[4];
              if (v234 == v235)
                goto LABEL_402;
              goto LABEL_401;
            }
LABEL_372:
            v232 = 0;
            do
            {
              v233 = *v230++;
              *((_DWORD *)&__s1.__r_.__value_.__l.__data_ + v232) = v233;
              v232 = ++v382;
            }
            while (v230 != v231);
            v234 = v137[3];
            v235 = v137[4];
            if (v234 == v235)
            {
LABEL_402:
              v253 = v138;
              if (v232 == v138)
              {
LABEL_417:
                v263 = (unint64_t)(*(_QWORD *)v359 - v358) >> 2;
                if (v253 == v9[10902] && !memcmp(&__s1, v9 + 10707, 4 * v253))
                {
                  if (v138 > v263)
                  {
                    if ((v147 & 1) == 0)
                      sub_20F8D5014(v361, "debug: no structural issues found in marginalization.");
                    goto LABEL_473;
                  }
LABEL_460:
                  std::to_string(&v380, v138);
                  v273 = std::string::insert(&v380, 0, "error: Hessian size: ", 0x15uLL);
                  v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
                  __dst.__r_.__value_.__r.__words[2] = v273->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v274;
                  v273->__r_.__value_.__l.__size_ = 0;
                  v273->__r_.__value_.__r.__words[2] = 0;
                  v273->__r_.__value_.__r.__words[0] = 0;
                  v275 = std::string::append(&__dst, " is too small for reducedDoF: ", 0x1EuLL);
                  v276 = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
                  v388.__r_.__value_.__r.__words[2] = v275->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v276;
                  v275->__r_.__value_.__l.__size_ = 0;
                  v275->__r_.__value_.__r.__words[2] = 0;
                  v275->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v379, v263);
                  if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v277 = &v379;
                  else
                    v277 = (std::string *)v379.__r_.__value_.__r.__words[0];
                  if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v278 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
                  else
                    v278 = v379.__r_.__value_.__l.__size_;
                  v279 = std::string::append(&v388, (const std::string::value_type *)v277, v278);
                  v280 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
                  v383.__r_.__value_.__r.__words[2] = v279->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v280;
                  v279->__r_.__value_.__l.__size_ = 0;
                  v279->__r_.__value_.__r.__words[2] = 0;
                  v279->__r_.__value_.__r.__words[0] = 0;
                  v281 = *(_QWORD *)(v370 + 208);
                  if (v281)
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v281 + 48))(v281, &v383);
                  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v383.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_470:
                      if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_471;
                      goto LABEL_513;
                    }
                  }
                  else if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_470;
                  }
                  operator delete(v379.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_471:
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_472;
LABEL_514:
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_515;
LABEL_473:
                    if (!*(_QWORD *)(v370 + 208))
                      goto LABEL_69;
                    goto LABEL_474;
                  }
LABEL_513:
                  operator delete(v388.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_472:
                    if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_473;
LABEL_515:
                    operator delete(v380.__r_.__value_.__l.__data_);
                    if (!*(_QWORD *)(v370 + 208))
                      goto LABEL_69;
LABEL_474:
                    sub_20E863438((uint64_t)&v388);
                    sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"debug: hot data:\n", 17);
                    v282 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"debug: hot data:\n", 17);
                    sub_20E86A980(v282, (uint64_t)"sz: ", 4);
                    v283 = (_QWORD *)std::ostream::operator<<();
                    v284 = sub_20E86A980(v283, (uint64_t)"\n", 1);
                    sub_20E86A980(v284, (uint64_t)"nt: ", 4);
                    v285 = (_QWORD *)std::ostream::operator<<();
                    v286 = sub_20E86A980(v285, (uint64_t)"\n", 1);
                    sub_20E86A980(v286, (uint64_t)"nlt: ", 5);
                    v287 = (_QWORD *)std::ostream::operator<<();
                    v288 = sub_20E86A980(v287, (uint64_t)"\n", 1);
                    sub_20E86A980(v288, (uint64_t)"numExtrinsics: ", 15);
                    v289 = (_QWORD *)std::ostream::operator<<();
                    v290 = sub_20E86A980(v289, (uint64_t)"\n", 1);
                    sub_20E86A980(v290, (uint64_t)"updateExtrinsics: ", 18);
                    v291 = (_QWORD *)std::ostream::operator<<();
                    v292 = sub_20E86A980(v291, (uint64_t)"\n", 1);
                    sub_20E86A980(v292, (uint64_t)"updateExtrinsicsPosition: ", 26);
                    v293 = (_QWORD *)std::ostream::operator<<();
                    v294 = sub_20E86A980(v293, (uint64_t)"\n", 1);
                    sub_20E86A980(v294, (uint64_t)"numIntrinsics: ", 15);
                    v295 = (_QWORD *)std::ostream::operator<<();
                    v296 = sub_20E86A980(v295, (uint64_t)"\n", 1);
                    sub_20E86A980(v296, (uint64_t)"updateIntrinsics: ", 18);
                    v297 = (_QWORD *)std::ostream::operator<<();
                    v298 = sub_20E86A980(v297, (uint64_t)"\n", 1);
                    sub_20E86A980(v298, (uint64_t)"updateIMUIntrinsics: ", 21);
                    v299 = (_QWORD *)std::ostream::operator<<();
                    v300 = sub_20E86A980(v299, (uint64_t)"\n", 1);
                    sub_20E86A980(v300, (uint64_t)"haveVelocityAndBiases: ", 23);
                    v301 = (_QWORD *)std::ostream::operator<<();
                    v302 = sub_20E86A980(v301, (uint64_t)"\n", 1);
                    sub_20E86A980(v302, (uint64_t)"LPlinearizeConditioner: ", 24);
                    v303 = (_QWORD *)std::ostream::operator<<();
                    v304 = sub_20E86A980(v303, (uint64_t)"\n", 1);
                    sub_20E86A980(v304, (uint64_t)"haveInjectedCosts: ", 19);
                    v305 = (_QWORD *)std::ostream::operator<<();
                    v306 = sub_20E86A980(v305, (uint64_t)"\n", 1);
                    sub_20E86A980(v306, (uint64_t)"haveInjectedHessian: ", 21);
                    v307 = (_QWORD *)std::ostream::operator<<();
                    v308 = sub_20E86A980(v307, (uint64_t)"\n", 1);
                    sub_20E86A980(v308, (uint64_t)"landmarkFactorNum: ", 19);
                    v309 = (_QWORD *)std::ostream::operator<<();
                    v310 = sub_20E86A980(v309, (uint64_t)"\n", 1);
                    sub_20E86A980(v310, (uint64_t)"mapFactorNum: ", 14);
                    v311 = (_QWORD *)std::ostream::operator<<();
                    v312 = sub_20E86A980(v311, (uint64_t)"\n", 1);
                    sub_20E86A980(v312, (uint64_t)"IMUFactorNum: ", 14);
                    v313 = (_QWORD *)std::ostream::operator<<();
                    v314 = sub_20E86A980(v313, (uint64_t)"\n", 1);
                    sub_20E86A980(v314, (uint64_t)"preIMUFactorNum: ", 17);
                    v315 = (_QWORD *)std::ostream::operator<<();
                    v316 = sub_20E86A980(v315, (uint64_t)"\n", 1);
                    sub_20E86A980(v316, (uint64_t)"invalidateIMUCache: ", 20);
                    v317 = (_QWORD *)std::ostream::operator<<();
                    v318 = sub_20E86A980(v317, (uint64_t)"\n", 1);
                    sub_20E86A980(v318, (uint64_t)"bundleUpdated: ", 15);
                    v319 = (_QWORD *)std::ostream::operator<<();
                    v320 = sub_20E86A980(v319, (uint64_t)"\n", 1);
                    sub_20E86A980(v320, (uint64_t)"maxTimeOffsetDelta: ", 20);
                    v321 = (_QWORD *)std::ostream::operator<<();
                    v322 = sub_20E86A980(v321, (uint64_t)"\n", 1);
                    v323 = sub_20E86A980(v322, (uint64_t)"overlay: ", 9);
                    sub_20F8F162C(&__dst, v9[7824]);
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      p_dst = &__dst;
                    else
                      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v325 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    else
                      v325 = __dst.__r_.__value_.__l.__size_;
                    v326 = sub_20E86A980(v323, (uint64_t)p_dst, v325);
                    sub_20E86A980(v326, (uint64_t)"\n", 1);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    v327 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"stateRotationLeadingColumn: ", 28);
                    v328 = sub_20FA18D50(v327, v9 + 7769);
                    sub_20E86A980(v328, (uint64_t)"\n", 1);
                    v329 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"statePositionLeadingColumn: ", 28);
                    v330 = sub_20FA18D50(v329, v9 + 7779);
                    sub_20E86A980(v330, (uint64_t)"\n", 1);
                    v331 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"stateVelocityBiasLeadingColumn: ", 32);
                    v332 = sub_20FA18D50(v331, v9 + 7789);
                    sub_20E86A980(v332, (uint64_t)"\n", 1);
                    v333 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"calibRotationLeadingColumn: ", 28);
                    v334 = sub_20FA19050(v333, v9 + 7799);
                    sub_20E86A980(v334, (uint64_t)"\n", 1);
                    v335 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"calibPositionLeadingColumn: ", 28);
                    v336 = sub_20FA19050(v335, v9 + 7803);
                    sub_20E86A980(v336, (uint64_t)"\n", 1);
                    v337 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"calibIntrinsicsLeadingColumn: ", 30);
                    v338 = sub_20FA19050(v337, v9 + 7807);
                    sub_20E86A980(v338, (uint64_t)"\n", 1);
                    v339 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"calibIMUIntrinsicsLeadingColumn: ", 33);
                    v340 = v339;
                    if (v9[7811] == -1)
                    {
                      sub_20E86A980(v339, (uint64_t)"{kNPos", 6);
                    }
                    else
                    {
                      sub_20E86A980(v339, (uint64_t)"{", 1);
                      std::ostream::operator<<();
                    }
                    v341 = sub_20E86A980(v340, (uint64_t)"}", 1);
                    sub_20E86A980(v341, (uint64_t)"\n", 1);
                    v342 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"timeOffsetLeadingColumn: ", 25);
                    v343 = v342;
                    if (v9[7812] == -1)
                    {
                      sub_20E86A980(v342, (uint64_t)"{kNPos", 6);
                    }
                    else
                    {
                      sub_20E86A980(v342, (uint64_t)"{", 1);
                      std::ostream::operator<<();
                    }
                    if (v9[7813] == -1)
                    {
                      sub_20E86A980(v343, (uint64_t)", kNPos", 7);
                    }
                    else
                    {
                      sub_20E86A980(v343, (uint64_t)", ", 2);
                      std::ostream::operator<<();
                    }
                    v344 = sub_20E86A980(v343, (uint64_t)"}", 1);
                    sub_20E86A980(v344, (uint64_t)"\n", 1);
                    v345 = sub_20E86A980(&v388.__r_.__value_.__r.__words[2], (uint64_t)"imuIntrinsicIDAtIndex: ", 23);
                    v346 = v345;
                    if (v9[7814] == -1)
                    {
                      sub_20E86A980(v345, (uint64_t)"{kNPos", 6);
                    }
                    else
                    {
                      sub_20E86A980(v345, (uint64_t)"{", 1);
                      std::ostream::operator<<();
                    }
                    v347 = sub_20E86A980(v346, (uint64_t)"}", 1);
                    sub_20E86A980(v347, (uint64_t)"\n", 1);
                    if ((v396 & 0x10) != 0)
                    {
                      v350 = v395;
                      if (v395 < v392)
                      {
                        v395 = v392;
                        v350 = v392;
                      }
                      v351 = (const void **)&v391;
                    }
                    else
                    {
                      if ((v396 & 8) == 0)
                      {
                        v348 = 0;
                        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                        v349 = &__dst;
                        goto LABEL_526;
                      }
                      v351 = (const void **)v390;
                      v350 = v390[2];
                    }
                    v352 = *v351;
                    v348 = v350 - (_QWORD)*v351;
                    if (v348 >= 0x7FFFFFFFFFFFFFF8)
                      sub_20E860B7C();
                    if (v348 >= 0x17)
                    {
                      v353 = (v348 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v348 | 7) != 0x17)
                        v353 = v348 | 7;
                      v354 = v353 + 1;
                      v349 = operator new(v353 + 1);
                      __dst.__r_.__value_.__l.__size_ = v348;
                      __dst.__r_.__value_.__r.__words[2] = v354 | 0x8000000000000000;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v349;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v350 - *(_BYTE *)v351;
                      v349 = &__dst;
                      if (!v348)
                        goto LABEL_526;
                    }
                    memmove(v349, v352, v348);
LABEL_526:
                    *((_BYTE *)v349 + v348) = 0;
                    v355 = *(_QWORD *)(v370 + 208);
                    if (v355)
                      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v355 + 48))(v355, &__dst);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    v388.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                    v356 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(std::string::size_type *)((char *)v388.__r_.__value_.__r.__words
                                              + *(_QWORD *)(v388.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v388.__r_.__value_.__r.__words[2] = v356;
                    v389 = MEMORY[0x24BEDB848] + 16;
                    if (v394 < 0)
                      operator delete(v393);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v397);
                    goto LABEL_69;
                  }
                  goto LABEL_514;
                }
                sub_20FA18AAC((char *)&v383, (uint64_t)(v9 + 10707));
                v264 = std::string::insert(&v383, 0, "error: stored permVec:\n", 0x17uLL);
                v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
                __dst.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v265;
                v264->__r_.__value_.__l.__size_ = 0;
                v264->__r_.__value_.__r.__words[2] = 0;
                v264->__r_.__value_.__r.__words[0] = 0;
                v266 = std::string::append(&__dst, "\ndoes not match the reconstructed one:\n", 0x27uLL);
                v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
                v388.__r_.__value_.__r.__words[2] = v266->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v267;
                v266->__r_.__value_.__l.__size_ = 0;
                v266->__r_.__value_.__r.__words[2] = 0;
                v266->__r_.__value_.__r.__words[0] = 0;
                sub_20FA18AAC((char *)&v380, (uint64_t)&__s1);
                if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v268 = &v380;
                else
                  v268 = (std::string *)v380.__r_.__value_.__r.__words[0];
                if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v269 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
                else
                  v269 = v380.__r_.__value_.__l.__size_;
                v270 = std::string::append(&v388, (const std::string::value_type *)v268, v269);
                v271 = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
                v384.__r_.__value_.__r.__words[2] = v270->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v271;
                v270->__r_.__value_.__l.__size_ = 0;
                v270->__r_.__value_.__r.__words[2] = 0;
                v270->__r_.__value_.__r.__words[0] = 0;
                v272 = *(_QWORD *)(v370 + 208);
                if (v272)
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v272 + 48))(v272, &v384);
                if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v384.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_429:
                    if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_430;
                    goto LABEL_436;
                  }
                }
                else if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_429;
                }
                operator delete(v380.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_430:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_431;
                  goto LABEL_437;
                }
LABEL_436:
                operator delete(v388.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_431:
                  if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_432;
LABEL_438:
                  operator delete(v383.__r_.__value_.__l.__data_);
                  if (v138 > v263)
                    goto LABEL_473;
                  goto LABEL_460;
                }
LABEL_437:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_432:
                  if (v138 > v263)
                    goto LABEL_473;
                  goto LABEL_460;
                }
                goto LABEL_438;
              }
              std::to_string(&v384, v232);
              v254 = std::string::insert(&v384, 0, "error: unexpected reconstructed permVec size: ", 0x2EuLL);
              v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v255;
              v254->__r_.__value_.__l.__size_ = 0;
              v254->__r_.__value_.__r.__words[2] = 0;
              v254->__r_.__value_.__r.__words[0] = 0;
              v256 = std::string::append(&__dst, " != ", 4uLL);
              v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
              v388.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v257;
              v256->__r_.__value_.__l.__size_ = 0;
              v256->__r_.__value_.__r.__words[2] = 0;
              v256->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v383, v138);
              if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v258 = &v383;
              else
                v258 = (std::string *)v383.__r_.__value_.__r.__words[0];
              if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v259 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
              else
                v259 = v383.__r_.__value_.__l.__size_;
              v260 = std::string::append(&v388, (const std::string::value_type *)v258, v259);
              v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
              v385.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v261;
              v260->__r_.__value_.__l.__size_ = 0;
              v260->__r_.__value_.__r.__words[2] = 0;
              v260->__r_.__value_.__r.__words[0] = 0;
              v262 = *(_QWORD *)(v370 + 208);
              if (v262)
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v262 + 48))(v262, &v385);
              if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v385.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_413:
                  if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_414;
                  goto LABEL_508;
                }
              }
              else if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_413;
              }
              operator delete(v383.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_414:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_415;
                goto LABEL_509;
              }
LABEL_508:
              operator delete(v388.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_415:
                if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_416:
                  v147 = 1;
                  v253 = v382;
                  goto LABEL_417;
                }
LABEL_510:
                operator delete(v384.__r_.__value_.__l.__data_);
                goto LABEL_416;
              }
LABEL_509:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_416;
              goto LABEL_510;
            }
            do
            {
LABEL_401:
              v252 = *v234++;
              *((_DWORD *)&__s1.__r_.__value_.__l.__data_ + v232) = v252;
              v232 = ++v382;
            }
            while (v234 != v235);
            goto LABEL_402;
          }
        }
        else
        {
LABEL_370:
          v229 = v9[10902];
          if (v229 != v138)
            goto LABEL_386;
        }
        v230 = *v137;
        v231 = v137[1];
        v382 = 0;
        if (v230 == v231)
          goto LABEL_400;
        goto LABEL_372;
      }
      std::to_string(&v385, v148);
      v207 = std::string::insert(&v385, 0, "error: unexpected RCS reorder size: ", 0x24uLL);
      v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
      v386.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v208;
      v207->__r_.__value_.__l.__size_ = 0;
      v207->__r_.__value_.__r.__words[2] = 0;
      v207->__r_.__value_.__r.__words[0] = 0;
      v209 = std::string::append(&v386, " x ", 3uLL);
      v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v210;
      v209->__r_.__value_.__l.__size_ = 0;
      v209->__r_.__value_.__r.__words[2] = 0;
      v209->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v384, v148);
      if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v211 = &v384;
      else
        v211 = (std::string *)v384.__r_.__value_.__r.__words[0];
      if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v212 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
      else
        v212 = v384.__r_.__value_.__l.__size_;
      v213 = std::string::append(&__dst, (const std::string::value_type *)v211, v212);
      v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
      v388.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v214;
      v213->__r_.__value_.__l.__size_ = 0;
      v213->__r_.__value_.__r.__words[2] = 0;
      v213->__r_.__value_.__r.__words[0] = 0;
      v215 = std::string::append(&v388, " != ", 4uLL);
      v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v216;
      v215->__r_.__value_.__l.__size_ = 0;
      v215->__r_.__value_.__r.__words[2] = 0;
      v215->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v383, v138);
      if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v217 = &v383;
      else
        v217 = (std::string *)v383.__r_.__value_.__r.__words[0];
      if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v218 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
      else
        v218 = v383.__r_.__value_.__l.__size_;
      v219 = std::string::append(&__s1, (const std::string::value_type *)v217, v218);
      v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
      v387.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v387.__r_.__value_.__l.__data_ = v220;
      v219->__r_.__value_.__l.__size_ = 0;
      v219->__r_.__value_.__r.__words[2] = 0;
      v219->__r_.__value_.__r.__words[0] = 0;
      v221 = *(_QWORD *)(v370 + 208);
      if (v221)
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v221 + 48))(v221, &v387);
      if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v387.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_353:
          if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_354;
          goto LABEL_451;
        }
      }
      else if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_353;
      }
      operator delete(v383.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_354:
        if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_355;
        goto LABEL_452;
      }
LABEL_451:
      operator delete(__s1.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_355:
        if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_356;
        goto LABEL_453;
      }
LABEL_452:
      operator delete(v388.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_356:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_357;
        goto LABEL_454;
      }
LABEL_453:
      operator delete(v384.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_357:
        if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_358;
        goto LABEL_455;
      }
LABEL_454:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_358:
        if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_359:
          v147 = 1;
          goto LABEL_360;
        }
LABEL_456:
        operator delete(v385.__r_.__value_.__l.__data_);
        goto LABEL_359;
      }
LABEL_455:
      operator delete(v386.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_359;
      goto LABEL_456;
    }
LABEL_252:
    operator delete(v387.__r_.__value_.__l.__data_);
    if (!*v65)
      goto LABEL_69;
    goto LABEL_253;
  }
LABEL_69:
  if (!*v366)
    goto LABEL_83;
  sub_20F8F17F4(&__dst, *v366);
  v27 = std::string::insert(&__dst, 0, "error: LACC full kernel failed: ", 0x20uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v388.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v388, " != ", 4uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __s1.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  sub_20F8F17F4(&v387, 0);
  if ((v387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v387;
  else
    v31 = (std::string *)v387.__r_.__value_.__r.__words[0];
  if ((v387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v387.__r_.__value_.__r.__words[2]);
  else
    v32 = v387.__r_.__value_.__l.__size_;
  v33 = std::string::append(&__s1, (const std::string::value_type *)v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v374 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)v373 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = *(_QWORD *)(v370 + 208);
  if (v35)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 48))(v35, v373);
  if (SHIBYTE(v374) < 0)
  {
    operator delete(v373[0]);
    if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_80:
      if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_137;
    }
  }
  else if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v387.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_138;
  }
LABEL_137:
  operator delete(__s1.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_139;
  }
LABEL_138:
  operator delete(v388.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    v36 = *v364;
    if (*v364 == 1038)
      goto LABEL_140;
LABEL_84:
    sub_20F8F1460(&v386, v36);
    v37 = std::string::insert(&v386, 0, "error: LACC full kernel not executed completely: ", 0x31uLL);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v387.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v387.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v387, " < ", 3uLL);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F1460(&v385, 0x40Eu);
    if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v385;
    else
      v41 = (std::string *)v385.__r_.__value_.__r.__words[0];
    if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v385.__r_.__value_.__r.__words[2]);
    else
      v42 = v385.__r_.__value_.__l.__size_;
    v43 = std::string::append(&__dst, (const std::string::value_type *)v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v388.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v388, ", last in ", 0xAuLL);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F162C(&v384, v9[7824]);
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v384;
    else
      v47 = (std::string *)v384.__r_.__value_.__r.__words[0];
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
    else
      v48 = v384.__r_.__value_.__l.__size_;
    v49 = std::string::append(&__s1, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v372 = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = *(_QWORD *)(v370 + 208);
    if (v51)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 48))(v51, __p);
    if (SHIBYTE(v372) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_100:
        if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_101;
        goto LABEL_112;
      }
    }
    else if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_100;
    }
    operator delete(v384.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_101:
      if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_102;
      goto LABEL_113;
    }
LABEL_112:
    operator delete(__s1.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_114;
    }
LABEL_113:
    operator delete(v388.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v385.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_104;
      goto LABEL_115;
    }
LABEL_114:
    operator delete(v385.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_116;
    }
LABEL_115:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_140;
LABEL_117:
      operator delete(v386.__r_.__value_.__l.__data_);
      goto LABEL_140;
    }
LABEL_116:
    operator delete(v387.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v386.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_140;
    goto LABEL_117;
  }
LABEL_139:
  operator delete(__dst.__r_.__value_.__l.__data_);
  v36 = *v364;
  if (*v364 != 1038)
    goto LABEL_84;
LABEL_140:
  if ((v9[90956] != -1163005939
     || v9[90957] != -1163005939
     || v9[90958] != -1163005939
     || v9[90959] != -1163005939
     || v9[90960] != -1163005939
     || v9[90961] != -1163005939
     || v9[90962] != -1163005939
     || v9[90963] != -1163005939
     || v9[90964] != -1163005939
     || v9[90965] != -1163005939
     || v9[90966] != -1163005939
     || v9[90967] != -1163005939
     || v9[90968] != -1163005939
     || v9[90969] != -1163005939
     || v9[90970] != -1163005939
     || v9[90971] != -1163005939)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 2382, (uint64_t)"fullData.checkForOverwrites()", 29, (uint64_t)"LPS guard bytes overwritten after full kernel.", 46, (void (*)(void **))sub_21023DDB0))
  {
LABEL_448:
    abort();
  }
  if (!*(_BYTE *)(v8 + 140))
    goto LABEL_180;
  v66 = sub_20F8F19BC((uint64_t)v9, (uint64_t)v368);
  v67 = *(_QWORD *)(v370 + 736);
  v68 = *(_DWORD *)(v67 + 68);
  *(_DWORD *)(v67 + 68) = 0;
  if (!*(_BYTE *)(v8 + 137))
  {
    if (*(_BYTE *)(v67 + 40))
      *(_BYTE *)(v67 + 40) = 0;
    v66 = sub_20FC8D1B4((uint64_t)v9);
    v69 = v66;
    if (*(_BYTE *)(v67 + 72))
      v66 = (uint64_t)sub_2100F5CD4(v67, (uint64_t)"FlatWorld_linearizeAndSolve_tackyMarginalize_DMA]", 48, 1);
    v70 = *(_BYTE *)(v8 + 137) ? 1 : v69;
    if ((v70 & 1) == 0)
    {
      std::to_string(&v388, 0);
      v71 = std::string::insert(&v388, 0, "Failed to linearize, solve and tacky marginalize: ", 0x32uLL);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &__s1;
      else
        v73 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v74 = __s1.__r_.__value_.__l.__size_;
      v66 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 2401, (uint64_t)"(m_skipHWCalls || (ok2 && *ok2))", 32, (uint64_t)v73, v74, (void (*)(void **))sub_21023DDB0);
      v75 = v66;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_175:
          if (!v75)
            goto LABEL_176;
LABEL_326:
          abort();
        }
      }
      else if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_175;
      }
      operator delete(v388.__r_.__value_.__l.__data_);
      if (!v75)
        goto LABEL_176;
      goto LABEL_326;
    }
  }
LABEL_176:
  if ((v68 - 1) >= 2)
  {
    v76 = *(_QWORD *)(v370 + 736);
    if (v68 != 3 || lacc_hardware::LaccHardware::supported((lacc_hardware::LaccHardware *)v66))
      *(_DWORD *)(v76 + 68) = v68;
  }
LABEL_180:
  if ((_BYTE)v11)
    v77 = v12;
  else
    v77 = 0;
  if (*(_BYTE *)(v8 + 137))
    v78 = 1;
  else
    v78 = v77;
  v378 = 0;
  if (v368)
  {
    v79 = sub_20F903EA8(v368);
    MEMORY[0x212BC638C](v79, 64);
  }
  kdebug_trace();
  if ((_DWORD)v78)
  {
    v80 = *(unsigned int **)v8;
    if (!*(_BYTE *)(*(_QWORD *)v8 + 42824))
      goto LABEL_225;
    v81 = *(_DWORD *)(*(_QWORD *)v8 + 43612);
    v82 = v80 + 11088;
    v83 = (uint64_t)&v80[394 * (v80[7762] - v81) + 11088];
    if (v81 == *(_DWORD *)(v370 + 16) && v81 == *(_DWORD *)(v370 + 20))
    {
      v84 = *(_QWORD **)v370;
    }
    else
    {
      v84 = *(_QWORD **)v370;
      if (v82 == *(_QWORD **)v370)
      {
        v104 = (v81 * v81);
        v105 = (8 * v104 + 31) & 0xFFFFFFFE0;
        v106 = v105 >> 3;
        v107 = operator new(v105, (std::align_val_t)0x20uLL);
        if ((_DWORD)v104)
        {
          v108 = 0;
          v109 = 8 * v104;
          v110 = v107;
          do
          {
            v114 = 0;
            if (v108 <= HIDWORD(v108))
              v114 = *(_QWORD *)(v83 + 8 * (v108 + 196 * HIDWORD(v108)));
            *v110++ = v114;
            v111 = (v108 + 1);
            v112 = v108 & 0xFFFFFFFF00000000;
            v113 = v112 | v111;
            v108 = v112 + 0x100000000;
            if (v81 > (int)v111)
              v108 = v113;
            v109 -= 8;
          }
          while (v109);
        }
        *(_QWORD *)v370 = v107;
        *(_QWORD *)(v370 + 8) = v106;
        *(_DWORD *)(v370 + 16) = v81;
        *(_DWORD *)(v370 + 20) = v81;
        goto LABEL_222;
      }
      *(_DWORD *)(v370 + 16) = v81;
      *(_DWORD *)(v370 + 20) = v81;
      v85 = v81 * (unint64_t)v81;
      if (*(_QWORD *)(v370 + 8) < v85)
      {
        if (v84)
          MEMORY[0x212BC6368](v84, 0x1000C8000313F17);
        v86 = (8 * v85 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)v370 = 0;
        *(_QWORD *)(v370 + 8) = v86 >> 3;
        v84 = operator new(v86, (std::align_val_t)0x20uLL);
        *(_QWORD *)v370 = v84;
        v87 = (*(_DWORD *)(v370 + 20) * *(_DWORD *)(v370 + 16));
        if (v82 != v84)
          goto LABEL_206;
LABEL_198:
        v88 = 8 * v87;
        v89 = (8 * v87 + 31) & 0xFFFFFFFE0;
        v90 = v89 >> 3;
        v91 = operator new(v89, (std::align_val_t)0x20uLL);
        if ((_DWORD)v87)
        {
          v92 = 0;
          v93 = v91;
          do
          {
            v97 = 0;
            if (v92 <= HIDWORD(v92))
              v97 = *(_QWORD *)(v83 + 8 * (v92 + 196 * HIDWORD(v92)));
            *v93++ = v97;
            v94 = (v92 + 1);
            v95 = v92 & 0xFFFFFFFF00000000;
            v96 = v95 | v94;
            v92 = v95 + 0x100000000;
            if (v81 > (int)v94)
              v92 = v96;
            v88 -= 8;
          }
          while (v88);
        }
        *(_QWORD *)v370 = v91;
        *(_QWORD *)(v370 + 8) = v90;
LABEL_222:
        MEMORY[0x212BC6368](v80 + 11088, 0x1000C8000313F17);
LABEL_223:
        v115 = (unsigned int *)(*(_QWORD *)v8 + 44352);
        if (v115 != v80 + 458544)
          memcpy(v115, v80 + 458544, 0x4B080uLL);
LABEL_225:
        if (a5 && a2)
        {
          ++*(_DWORD *)(v8 + 100);
        }
        else if (!a2)
        {
          return v78;
        }
        v116 = *(unsigned int **)v8;
        v117 = (double *)(*(_QWORD *)v8 + 357328);
        v118 = *(unsigned int *)(*(_QWORD *)v8 + 31048);
        v119 = *(double **)(v8 + 40);
        if ((_DWORD)v118 != *(_DWORD *)(v8 + 56))
        {
          if (v117 == v119)
          {
            v149 = (8 * v118 + 31) & 0xFFFFFFFE0;
            v150 = v149 >> 3;
            v151 = (float64x2_t *)operator new(v149, (std::align_val_t)0x20uLL);
            if ((_DWORD)v118)
            {
              v152 = (v118 - 1) & 0x1FFFFFFFFFFFFFFFLL;
              v153 = (double *)v151;
              v154 = v117;
              if (v152 < 5)
                goto LABEL_540;
              v153 = (double *)v151;
              v154 = v117;
              if ((unint64_t)((char *)v151 - (char *)(v116 + 89332)) < 0x20)
                goto LABEL_540;
              v155 = v152 + 1;
              v156 = v155 & 0x3FFFFFFFFFFFFFFCLL;
              v153 = &v151->f64[v156];
              v154 = &v117[v156];
              v157 = (float64x2_t *)(v117 + 2);
              v158 = v151 + 1;
              v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v160 = vnegq_f64(*v157);
                v158[-1] = vnegq_f64(v157[-1]);
                *v158 = v160;
                v157 += 2;
                v158 += 2;
                v159 -= 4;
              }
              while (v159);
              if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_540:
                do
                {
                  v161 = *v154++;
                  *v153++ = -v161;
                }
                while (v153 != &v151->f64[v118]);
              }
            }
            *(_QWORD *)(v8 + 40) = v151;
            *(_QWORD *)(v8 + 48) = v150;
            *(_DWORD *)(v8 + 56) = v118;
            goto LABEL_273;
          }
          *(_DWORD *)(v8 + 56) = v118;
          if (*(_QWORD *)(v8 + 48) < v118)
          {
            if (v119)
              MEMORY[0x212BC6368](v119, 0x1000C8000313F17);
            v120 = (8 * v118 + 31) & 0xFFFFFFFE0;
            *(_QWORD *)(v8 + 40) = 0;
            *(_QWORD *)(v8 + 48) = v120 >> 3;
            v119 = (double *)operator new(v120, (std::align_val_t)0x20uLL);
            *(_QWORD *)(v8 + 40) = v119;
            LODWORD(v118) = *(_DWORD *)(v8 + 56);
          }
        }
        v121 = v118;
        if (v117 != v119)
        {
          if (!(_DWORD)v118)
            goto LABEL_279;
          v122 = (v118 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v122 >= 5)
          {
            v123 = v119;
            if ((unint64_t)((char *)(v119 - 44666) - (char *)v116) >= 0x20)
            {
              v162 = v122 + 1;
              v163 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              v123 = &v119[v163];
              v164 = &v117[v163];
              v165 = (float64x2_t *)(v117 + 2);
              v166 = (float64x2_t *)(v119 + 2);
              v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v168 = vnegq_f64(*v165);
                v166[-1] = vnegq_f64(v165[-1]);
                *v166 = v168;
                v165 += 2;
                v166 += 2;
                v167 -= 4;
              }
              while (v167);
              v117 = v164;
              if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_279:
                v170 = (const void *)(*(_QWORD *)v8 + 359016);
                v171 = *(unsigned int *)(*(_QWORD *)v8 + 31052);
                v172 = *(void **)(v8 + 64);
                if ((_DWORD)v171 != *(_DWORD *)(v8 + 80))
                {
                  if (v170 == v172)
                  {
                    v178 = (8 * v171 + 31) & 0xFFFFFFFE0;
                    v179 = v178 >> 3;
                    v180 = operator new(v178, (std::align_val_t)0x20uLL);
                    v181 = v180;
                    if ((_DWORD)v171)
                      memmove(v180, v170, 8 * v171);
                    *(_QWORD *)(v8 + 64) = v181;
                    *(_QWORD *)(v8 + 72) = v179;
                    *(_DWORD *)(v8 + 80) = v171;
                    goto LABEL_294;
                  }
                  *(_DWORD *)(v8 + 80) = v171;
                  if (*(_QWORD *)(v8 + 72) < v171)
                  {
                    if (v172)
                      MEMORY[0x212BC6368](v172, 0x1000C8000313F17);
                    v173 = (8 * v171 + 31) & 0xFFFFFFFE0;
                    *(_QWORD *)(v8 + 64) = 0;
                    *(_QWORD *)(v8 + 72) = v173 >> 3;
                    v172 = operator new(v173, (std::align_val_t)0x20uLL);
                    *(_QWORD *)(v8 + 64) = v172;
                  }
                }
                if (v170 != v172)
                {
                  if ((_DWORD)v171)
                    memmove(v172, v170, 8 * v171);
                  return v78;
                }
                v174 = (8 * *(unsigned int *)(v8 + 80) + 31) & 0xFFFFFFFE0;
                v175 = v174 >> 3;
                v176 = operator new(v174, (std::align_val_t)0x20uLL);
                v177 = v176;
                if ((_DWORD)v171)
                  memmove(v176, v170, 8 * v171);
                *(_QWORD *)(v8 + 64) = v177;
                *(_QWORD *)(v8 + 72) = v175;
LABEL_294:
                MEMORY[0x212BC6368](v170, 0x1000C8000313F17);
                return v78;
              }
            }
          }
          else
          {
            v123 = v119;
          }
          do
          {
            v169 = *v117++;
            *v123++ = -v169;
          }
          while (v123 != &v119[v118]);
          goto LABEL_279;
        }
        v124 = (8 * v118 + 31) & 0xFFFFFFFE0;
        v125 = v124 >> 3;
        v126 = (float64x2_t *)operator new(v124, (std::align_val_t)0x20uLL);
        if ((_DWORD)v121)
        {
          v127 = (v121 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v128 = (double *)v126;
          v129 = v117;
          if (v127 < 5)
            goto LABEL_541;
          v128 = (double *)v126;
          v129 = v117;
          if ((unint64_t)((char *)v126 - (char *)(v116 + 89332)) < 0x20)
            goto LABEL_541;
          v130 = v127 + 1;
          v131 = v130 & 0x3FFFFFFFFFFFFFFCLL;
          v128 = &v126->f64[v131];
          v129 = &v117[v131];
          v132 = (float64x2_t *)(v117 + 2);
          v133 = v126 + 1;
          v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v135 = vnegq_f64(*v132);
            v133[-1] = vnegq_f64(v132[-1]);
            *v133 = v135;
            v132 += 2;
            v133 += 2;
            v134 -= 4;
          }
          while (v134);
          if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_541:
            do
            {
              v136 = *v129++;
              *v128++ = -v136;
            }
            while (v128 != &v126->f64[v121]);
          }
        }
        *(_QWORD *)(v8 + 40) = v126;
        *(_QWORD *)(v8 + 48) = v125;
LABEL_273:
        MEMORY[0x212BC6368](v117, 0x1000C8000313F17);
        goto LABEL_279;
      }
    }
    v87 = (v81 * v81);
    if (v82 != v84)
    {
LABEL_206:
      if ((_DWORD)v87)
      {
        v98 = 0;
        v99 = 8 * v87;
        do
        {
          v103 = 0;
          if (v98 <= HIDWORD(v98))
            v103 = *(_QWORD *)(v83 + 8 * (v98 + 196 * HIDWORD(v98)));
          *v84++ = v103;
          v100 = (v98 + 1);
          v101 = v98 & 0xFFFFFFFF00000000;
          v102 = v101 | v100;
          v98 = v101 + 0x100000000;
          if (v81 > (int)v100)
            v98 = v102;
          v99 -= 8;
        }
        while (v99);
      }
      goto LABEL_223;
    }
    goto LABEL_198;
  }
  return v78;
}

void sub_20FA17FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_DWORD *a38)
{
  __cxa_guard_abort(&qword_254A6B830);
  sub_20F8F28D0(&a38);
  sub_20FA191A0();
  _Unwind_Resume(a1);
}

void sub_20FA17FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_DWORD *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (SLOBYTE(STACK[0x447]) < 0)
  {
    operator delete((void *)STACK[0x430]);
    if (a44 < 0)
    {
LABEL_5:
      operator delete(a39);
      if (SLOBYTE(STACK[0x4E7]) < 0)
      {
LABEL_8:
        operator delete((void *)STACK[0x4D0]);
        if ((*(char *)(v50 - 105) & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((*(char *)(v50 - 105) & 0x80000000) == 0)
      {
LABEL_9:
        if ((a50 & 0x80000000) == 0)
        {
LABEL_14:
          sub_20F8F28D0(&a38);
          sub_20FA191A0();
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a45);
        sub_20F8F28D0(&a38);
        sub_20FA191A0();
        _Unwind_Resume(a1);
      }
LABEL_12:
      operator delete(*(void **)(v50 - 128));
      if ((a50 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a44 < 0)
  {
    goto LABEL_5;
  }
  if (SLOBYTE(STACK[0x4E7]) < 0)
    goto LABEL_8;
  goto LABEL_11;
}

uint64_t sub_20FA18A3C(_BYTE *a1)
{
  size_t v2;
  const char *v4[2];

  v4[0] = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v4[1] = (const char *)strlen(v4[0]);
  v2 = strlen((const char *)((unint64_t)"FbRN3cva17flat_world_detail3HotERKN4lacc3dma12MappedBufferEbPNSt3__15arra"
                                               "yIdLm11EEEPdSB_SC_dbE" & 0x7FFFFFFFFFFFFFFFLL));
  return sub_20F9045A8(a1, off_24CA03FE8, (uint64_t *)v4, (unint64_t)"FbRN3cva17flat_world_detail3HotERKN4lacc3dma12MappedBufferEbPNSt3__15arrayIdLm11EEEPdSB_SC_dbE" & 0x7FFFFFFFFFFFFFFFLL, v2);
}

uint64_t sub_20FA18AAC(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *p_p;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[3];
  const void *v19;
  uint64_t v20;
  const void *v21;
  unint64_t v22;
  void *v23;
  char v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  sub_20E863438((uint64_t)v17);
  v4 = *(unsigned int *)(a2 + 780);
  if (!(_DWORD)v4)
  {
    a1[23] = 2;
    strcpy(a1, "{}");
    goto LABEL_21;
  }
  sub_20E86A980(v18, (uint64_t)"{", 1);
  std::ostream::operator<<();
  if ((_DWORD)v4 != 1)
  {
    v5 = a2 + 4;
    v6 = 4 * v4 - 4;
    do
    {
      sub_20E86A980(v18, (uint64_t)", ", 2);
      std::ostream::operator<<();
      v5 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  if ((v26 & 0x10) != 0)
  {
    v9 = v25;
    if (v25 < v22)
    {
      v25 = v22;
      v9 = v22;
    }
    v10 = v21;
    v7 = v9 - (_QWORD)v21;
    if (v9 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v7 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      p_p = &__p;
      goto LABEL_19;
    }
    v10 = v19;
    v7 = v20 - (_QWORD)v19;
    if ((unint64_t)(v20 - (_QWORD)v19) >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_p = (std::string *)operator new(v11 + 1);
    __p.__r_.__value_.__l.__size_ = v7;
    __p.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_18;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v7;
  p_p = &__p;
  if (v7)
LABEL_18:
    memmove(p_p, v10, v7);
LABEL_19:
  p_p->__r_.__value_.__s.__data_[v7] = 0;
  v13 = std::string::append(&__p, "}", 1uLL);
  *(std::string *)a1 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_21:
  v17[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v24 < 0)
    operator delete(v23);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v27);
}

void sub_20FA18CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FA18D50(_QWORD *a1, _DWORD *a2)
{
  if (*a2 == -1)
  {
    sub_20E86A980(a1, (uint64_t)"{kNPos", 6);
    if (a2[1] != -1)
    {
LABEL_3:
      sub_20E86A980(a1, (uint64_t)", ", 2);
      std::ostream::operator<<();
      if (a2[2] != -1)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    sub_20E86A980(a1, (uint64_t)"{", 1);
    std::ostream::operator<<();
    if (a2[1] != -1)
      goto LABEL_3;
  }
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[2] != -1)
  {
LABEL_4:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[3] != -1)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[3] != -1)
  {
LABEL_5:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[4] != -1)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[4] != -1)
  {
LABEL_6:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[5] != -1)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[5] != -1)
  {
LABEL_7:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[6] != -1)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[6] != -1)
  {
LABEL_8:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[7] != -1)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[7] != -1)
  {
LABEL_9:
    sub_20E86A980(a1, (uint64_t)", ", 2);
    std::ostream::operator<<();
    if (a2[8] != -1)
      goto LABEL_10;
LABEL_20:
    sub_20E86A980(a1, (uint64_t)", kNPos", 7);
    if (a2[9] != -1)
      goto LABEL_11;
LABEL_21:
    sub_20E86A980(a1, (uint64_t)", kNPos", 7);
    return sub_20E86A980(a1, (uint64_t)"}", 1);
  }
LABEL_19:
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[8] == -1)
    goto LABEL_20;
LABEL_10:
  sub_20E86A980(a1, (uint64_t)", ", 2);
  std::ostream::operator<<();
  if (a2[9] == -1)
    goto LABEL_21;
LABEL_11:
  sub_20E86A980(a1, (uint64_t)", ", 2);
  std::ostream::operator<<();
  return sub_20E86A980(a1, (uint64_t)"}", 1);
}

_QWORD *sub_20FA19050(_QWORD *a1, _DWORD *a2)
{
  if (*a2 == -1)
  {
    sub_20E86A980(a1, (uint64_t)"{kNPos", 6);
    if (a2[1] != -1)
    {
LABEL_3:
      sub_20E86A980(a1, (uint64_t)", ", 2);
      std::ostream::operator<<();
      if (a2[2] != -1)
        goto LABEL_4;
LABEL_8:
      sub_20E86A980(a1, (uint64_t)", kNPos", 7);
      if (a2[3] != -1)
        goto LABEL_5;
LABEL_9:
      sub_20E86A980(a1, (uint64_t)", kNPos", 7);
      return sub_20E86A980(a1, (uint64_t)"}", 1);
    }
  }
  else
  {
    sub_20E86A980(a1, (uint64_t)"{", 1);
    std::ostream::operator<<();
    if (a2[1] != -1)
      goto LABEL_3;
  }
  sub_20E86A980(a1, (uint64_t)", kNPos", 7);
  if (a2[2] == -1)
    goto LABEL_8;
LABEL_4:
  sub_20E86A980(a1, (uint64_t)", ", 2);
  std::ostream::operator<<();
  if (a2[3] == -1)
    goto LABEL_9;
LABEL_5:
  sub_20E86A980(a1, (uint64_t)", ", 2);
  std::ostream::operator<<();
  return sub_20E86A980(a1, (uint64_t)"}", 1);
}

uint64_t sub_20FA191A0()
{
  return kdebug_trace();
}

void sub_20FA191D0(uint64_t a1, _DWORD *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t *v24;
  int v25;
  int64x2_t *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v41;
  int v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = a2 + 4584;
  *(_QWORD *)a1 = a2;
  v5 = a2[4584];
  v6 = *(unsigned int *)(a1 + 168);
  LODWORD(v7) = v5;
  if (v6 < v5)
  {
    bzero((void *)(a1 + 4 * v6 + 8), 4 * (v5 - v6));
    LODWORD(v7) = *v4;
  }
  *(_DWORD *)(a1 + 168) = v5;
  v8 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v9 = a2 + 1522;
    v10 = (_DWORD *)(a1 + 8);
    do
    {
      *v10++ = v8;
      v8 += *v9;
      v9 += 1020;
      --v7;
    }
    while (v7);
  }
  v48 = a1 + 8;
  *(_DWORD *)(a1 + 172) = v8;
  v11 = a2[420];
  v44 = v8;
  v12 = v11 * v8;
  v13 = *(unsigned int *)(a1 + 3064);
  if (v13 < v12)
  {
    bzero((void *)(a1 + 72 * v13 + 184), 72 * (v12 - v13));
    v11 = a2[420];
  }
  *(_DWORD *)(a1 + 3064) = v12;
  if (!v11)
    return;
  v14 = *v4;
  if (!(_DWORD)v14)
    return;
  v15 = a1 + 184;
  v45 = v11;
  v46 = 0;
  v52 = a1 + 184;
  v53 = a2 + 504;
  v43 = a2 + 4652;
  v47 = a2 + 4586;
LABEL_12:
  v16 = 0;
  v49 = v44 * v46;
  v50 = &v43[66 * v46];
  v51 = v14;
  do
  {
    v17 = v53[1020 * v16 + 1018];
    if (!(_DWORD)v17)
      goto LABEL_13;
    v18 = *(_DWORD *)(v48 + 4 * v16);
    v19 = (uint64_t)&v53[1020 * v16 + 2];
    v56 = v16;
    v54 = v19;
    v55 = v53[1020 * v16 + 1018];
    if (v4[728])
    {
      v20 = (float64x2_t *)&v50[16 * v16];
      v22 = *v20;
      v21 = v20[1];
      v23 = v16 << 6;
      v24 = (float64x2_t *)&v47[16 * v16];
      if (!v4[66])
        goto LABEL_18;
LABEL_17:
      v21 = vaddq_f64(v21, v24[1]);
      v22 = vaddq_f64(v22, *v24);
      goto LABEL_18;
    }
    v42 = v53[1020 * v16 + 144];
    if (v42 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_50;
      }
      v19 = v54;
      v17 = v55;
      v42 = *(_DWORD *)(v54 + 568);
      v16 = v56;
    }
    if (!v42)
    {
LABEL_49:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_50:
      abort();
    }
    v21 = *(float64x2_t *)(v19 + 112);
    v21.f64[1] = *(float64_t *)(v19 + 136);
    v22 = (float64x2_t)vzip1q_s64(*(int64x2_t *)(v19 + 96), *(int64x2_t *)(v19 + 128));
    v23 = v16 << 6;
    v24 = (float64x2_t *)&v47[16 * v16];
    if (v4[66])
      goto LABEL_17;
LABEL_18:
    v25 = v18 + v49;
    v26 = (int64x2_t *)(v15 + 72 * (v18 + v49));
    v26->i64[0] = *(_QWORD *)&v22.f64[0];
    v26->i64[1] = 0;
    v26[1].i64[0] = *(_QWORD *)&v21.f64[0];
    v26[1].i64[1] = 0;
    v26[2] = vzip2q_s64((int64x2_t)v22, (int64x2_t)v21);
    v26[3].i64[0] = 0;
    v26[3].i64[1] = 0;
    v26[4].i64[0] = 0x3FF0000000000000;
    if ((_DWORD)v17 != 1)
    {
      v27 = (float64x2_t *)((char *)v50 + v23 + 32);
      v28 = v24 + 2;
      v29 = 1;
      while (!v4[728])
      {
        v33 = v19 + 1016 * v29;
        v34 = v33 + 96;
        v35 = *(_DWORD *)(v33 + 568);
        if (v35 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v36 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v37 = qword_254A6DE40;
            v38 = qword_254A6DE48;
            while (v37 != v38)
            {
              v40 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v37;
              v39 = *(_QWORD *)(v37 + 8);
              v37 += 16;
              v40(v39, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            }
          }
          v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v41 & 1) == 0)
          {
            if (__cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
          }
          v15 = v52;
          if (!byte_254A6DE68)
            goto LABEL_50;
          qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
          v35 = *(_DWORD *)(v34 + 472);
          v16 = v56;
          v19 = v54;
          v17 = v55;
        }
        if (!v35)
          goto LABEL_49;
        v30 = *(float64x2_t *)(v34 + 16);
        v30.f64[1] = *(float64_t *)(v34 + 40);
        v31 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v34, *(int64x2_t *)(v34 + 32));
        if (v4[66])
          goto LABEL_20;
LABEL_21:
        v32 = (int64x2_t *)(v15 + 72 * ++v25);
        v32->i64[0] = *(_QWORD *)&v31.f64[0];
        v32->i64[1] = 0;
        v32[1].i64[0] = *(_QWORD *)&v30.f64[0];
        v32[1].i64[1] = 0;
        v32[2] = vzip2q_s64((int64x2_t)v31, (int64x2_t)v30);
        v32[3].i64[0] = 0;
        v32[3].i64[1] = 0;
        v32[4].i64[0] = 0x3FF0000000000000;
        if (++v29 == v17)
          goto LABEL_13;
      }
      v31 = *v27;
      v30 = v27[1];
      if (!v4[66])
        goto LABEL_21;
LABEL_20:
      v30 = vaddq_f64(v30, v28[1]);
      v31 = vaddq_f64(v31, *v28);
      goto LABEL_21;
    }
LABEL_13:
    ++v16;
  }
  while (v16 != v51);
  while (++v46 != v45)
  {
    v14 = *v4;
    if (*v4)
      goto LABEL_12;
  }
}

uint64_t sub_20FA196E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  float64x2_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  __int128 v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v48;
  __int128 v49;
  __int128 v50;
  int8x16_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  __int128 *v61;
  double v62;
  double v64;
  double v66;
  float64x2_t v69;
  float64x2_t v70;
  double v76;
  float64x2_t v77;
  double v79;
  float64x2_t v80;
  float64_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v123;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  float64x2_t v178;
  float64x2_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int8x16_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  float64x2_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  int8x16_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  int v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  char *v308;
  float64x2_t v309;
  float64x2_t v310;
  int v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  char *v317;
  float64x2_t v318;
  int v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  char *v325;
  unsigned __int8 v326;
  uint64_t v327;
  const char *v328;
  float64_t v329;
  int v330;
  unsigned __int8 v331;
  uint64_t v332;
  const char *v333;
  float64_t v334;
  int v335;
  unsigned __int8 v336;
  uint64_t v337;
  const char *v338;
  float64_t v339;
  int v340;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  int8x16_t v348;
  double v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  double v353;
  int8x16_t v354;
  double v355;
  double v356;
  double v357;
  float64x2_t v358;
  double v359;
  int8x16_t v360;
  double v361;
  double v362;
  double v363;
  float64x2_t v364;
  float64x2_t v365;
  int64x2_t v366;
  float64x2_t v367;
  float64_t v368;
  double v369;
  float64x2_t v370;
  int8x16_t v371;
  double v372;
  float64x2_t v373;
  double v374;
  double v375;
  double v376;
  double v377;
  int8x16_t v378;
  double v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  double v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  double v428;
  float64x2_t v429;
  float64x2_t v430;
  double v431;
  float64_t v432;
  float64x2_t v433;
  double v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  double v439;
  float64x2_t v440;
  float64x2_t v441;
  double v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  double v466;
  double v467;
  float64x2_t v468;
  double v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  int64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  double v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  int8x16_t v488;
  double v489;
  float64x2_t v490;
  int8x16_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  int8x16_t v495;
  float64x2_t v496;
  int8x16_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  int8x16_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  int8x16_t v505;
  float64x2_t v506;
  int8x16_t v507;
  float64x2_t v508;
  int8x16_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  int8x16_t v513;
  float64x2_t v514;
  int8x16_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  int8x16_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  int8x16_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  int8x16_t v527;
  float64x2_t v528;
  int8x16_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  int8x16_t v544;
  float64x2_t v545;
  int8x16_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  int8x16_t v552;
  float64x2_t v553;
  double v554;
  uint64_t *v555;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v557;
  int v558;
  const char *v559;
  int v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  float64x2_t v565;
  uint64_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  uint64_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  float64_t v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  float64_t v695;
  float64x2_t v696;
  uint64_t v697;
  float64x2_t v698;
  uint64_t v699;
  float64x2_t v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  float64x2_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  _BYTE v736[128];
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744[23];
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752[8];
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760[23];
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768[8];
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64_t v776;
  int64x2_t v777;
  _BYTE v778[32];
  float64x2_t v779;
  _BYTE v780[104];
  float64x2_t v781[112];
  char *category;
  uint64_t v783;
  const char *v784;
  uint64_t v785;
  float64x2_t v786;
  float64x2_t *v787;
  uint64_t v788;
  _QWORD v789[7];

  v14 = MEMORY[0x24BDAC7A8](a1);
  v17 = v16;
  v18 = v13;
  v19 = v12;
  v20 = v11;
  v22 = v21;
  v24 = v23;
  v789[4] = *MEMORY[0x24BDAC8D0];
  v25 = 0.0;
  if (v10 != 0xFFFFFFFFLL)
    v25 = *(double *)(*v9 + 8 * v10 + 1992);
  v554 = v25 + v14;
  v26 = v25 + v15;
  if (*(_DWORD *)(v12 + 768) && *(double *)(v12 + 776 + 56 * (*(_DWORD *)(v12 + 56776) - 1)) >= v26)
  {
    v27 = *(double *)(v12 + 776) > v554;
    if (*(unsigned __int8 *)v13 != v11)
      goto LABEL_15;
LABEL_8:
    if (v13[1] == v554 && v13[2] == v26)
    {
      v29 = 1;
      if (v27 || !*((_BYTE *)v13 + 1))
        return v29;
    }
    goto LABEL_15;
  }
  v27 = 1;
  if (*(unsigned __int8 *)v13 == v11)
    goto LABEL_8;
LABEL_15:
  v30 = *v9;
  bzero(v781, 0x708uLL);
  v31.n128_f64[0] = v554;
  if (!sub_20FA1BE38(v19, a9, v31, v26, v32, v33, v34, v35, v36))
    return 0;
  v18[1] = NAN;
  v37 = *(_DWORD *)(a9 + 5600);
  if (*(double *)(a9 + 56) - *(double *)a9 < 0.0001)
  {
    if (v37 == 2)
    {
      v37 = 1;
    }
    else
    {
      v38 = a9 + 88;
      v39 = 56 * v37 - 112;
      do
      {
        *(_QWORD *)(v38 - 32) = *(_QWORD *)(v38 + 24);
        *(_OWORD *)(v38 - 24) = *(_OWORD *)(v38 + 32);
        *(_QWORD *)(v38 - 8) = *(_QWORD *)(v38 + 48);
        *(_OWORD *)v38 = *(_OWORD *)(v38 + 56);
        *(_QWORD *)(v38 + 16) = *(_QWORD *)(v38 + 72);
        v38 += 56;
        v39 -= 56;
      }
      while (v39);
      v37 = *(_DWORD *)(a9 + 5600) - 1;
    }
    *(_DWORD *)(a9 + 5600) = v37;
  }
  if (v37 >= 3 && *(double *)(a9 + 56 * (v37 - 1)) - *(double *)(a9 + 56 * (v37 - 2)) < 0.0001)
  {
    v40 = a9 + 56 * v37;
    *(_QWORD *)(v40 - 112) = *(_QWORD *)(v40 - 56);
    v41 = a9 + 56 * (v37 - 2);
    *(_QWORD *)(v41 + 24) = *(_QWORD *)(v40 - 32);
    *(_OWORD *)(v41 + 8) = *(_OWORD *)(v40 - 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v40 - 24);
    *(_QWORD *)(v41 + 48) = *(_QWORD *)(v40 - 8);
    v37 = *(_DWORD *)(a9 + 5600) - 1;
    *(_DWORD *)(a9 + 5600) = v37;
  }
  if (*(double *)a9 != v554)
    return 0;
  if (*(double *)(a9 + 56 * (v37 - 1)) != v26)
    return 0;
  *(_QWORD *)&v780[96] = 0;
  v42 = v30 + 168 * v24;
  *(_OWORD *)&v780[80] = 0u;
  *(_OWORD *)&v780[64] = 0u;
  *(_OWORD *)&v780[48] = 0u;
  *(_OWORD *)&v780[32] = 0u;
  *(_OWORD *)&v780[16] = 0u;
  *(_OWORD *)v780 = 0u;
  v779 = 0u;
  *(_OWORD *)&v778[16] = 0u;
  *(_OWORD *)v778 = 0u;
  v777 = 0u;
  v43 = *(int64x2_t *)v42;
  v44 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)&v778[16] = *(_OWORD *)(v42 + 32);
  *(_OWORD *)v778 = v44;
  v777 = v43;
  v45 = *(float64x2_t *)(v42 + 48);
  v46 = *(_OWORD *)(v42 + 64);
  v47 = *(_OWORD *)(v42 + 80);
  *(_OWORD *)&v780[32] = *(_OWORD *)(v42 + 96);
  *(_OWORD *)&v780[16] = v47;
  *(_OWORD *)v780 = v46;
  v779 = v45;
  v48 = *(float64x2_t *)(v42 + 112);
  v49 = *(_OWORD *)(v42 + 128);
  v50 = *(_OWORD *)(v42 + 144);
  *(_QWORD *)&v780[96] = *(_QWORD *)(v42 + 160);
  *(_OWORD *)&v780[80] = v50;
  *(_OWORD *)&v780[64] = v49;
  *(float64x2_t *)&v780[48] = v48;
  v476 = v777;
  v480 = *(double *)&v778[24];
  v474 = *(float64x2_t *)&v778[8];
  v48.f64[1] = v779.f64[1];
  v482 = v779;
  v484 = *(double *)v780;
  v48.f64[0] = *(float64_t *)&v780[24];
  v548 = v48;
  v486 = *(float64x2_t *)&v780[8];
  v48.f64[1] = *(float64_t *)&v780[40];
  v488 = *(int8x16_t *)&v780[32];
  v489 = *(double *)&v780[48];
  v48.f64[0] = *((float64_t *)&v49 + 1);
  v477 = v48;
  v472 = *(float64x2_t *)&v780[56];
  sub_20FA1C400((uint64_t)&v777);
  v375 = *(double *)(v17 + 64);
  v369 = *(double *)(v17 + 72);
  v356 = *(double *)(v17 + 96);
  v357 = *(double *)(v17 + 104);
  v359 = *(double *)(v17 + 88);
  v355 = *(double *)(v17 + 80);
  v363 = *(double *)(v17 + 176);
  v362 = *(double *)(v17 + 200);
  v350 = *(float64x2_t *)(v17 + 160);
  v351 = *(float64x2_t *)(v17 + 184);
  v361 = *(double *)(v17 + 224);
  v377 = *(double *)(v17 + 248);
  v371 = *(int8x16_t *)(v17 + 232);
  v376 = *(double *)(v17 + 272);
  v360 = *(int8x16_t *)(v17 + 256);
  v374 = *(double *)(v17 + 296);
  v51 = *(int8x16_t *)(v17 + 280);
  v352 = *(float64x2_t *)(v17 + 208);
  v354 = v51;
  v347 = *(double *)(v17 + 112);
  v346 = *(double *)(v17 + 120);
  v342 = *(double *)(v17 + 144);
  v344 = *(double *)(v17 + 152);
  v345 = *(double *)(v17 + 136);
  v343 = *(double *)(v17 + 128);
  v51.i64[0] = *(_QWORD *)(v17 + 48);
  v490 = (float64x2_t)v51;
  v552 = *(int8x16_t *)(v17 + 32);
  v52 = a9 + 56 * *(unsigned int *)(a9 + 5600);
  v383 = *(double *)(a9 + 24);
  v379 = *(double *)(a9 + 48);
  v380 = *(int8x16_t *)(a9 + 8);
  v378 = *(int8x16_t *)(a9 + 32);
  v51.i64[1] = *(_QWORD *)(a9 + 40);
  v51.i64[0] = *(_QWORD *)(v52 - 32);
  v381 = *(int8x16_t *)(v52 - 48);
  v382 = v51;
  v348 = *(int8x16_t *)(v52 - 24);
  v349 = *(double *)(v52 - 8);
  *(_BYTE *)v18 = v20;
  v51.i64[0] = *(_QWORD *)&v780[24];
  v470 = (float64x2_t)v51;
  v544 = *(int8x16_t *)&v780[8];
  v51.i64[1] = *(_QWORD *)&v780[16];
  v51.i64[0] = *(_QWORD *)&v780[72];
  v373 = (float64x2_t)v51;
  v366 = v777;
  v367 = *(float64x2_t *)&v780[56];
  v368 = *(double *)&v778[24];
  v372 = *(double *)v780;
  v370 = v779;
  v51.i64[1] = *(_QWORD *)&v779.f64[1];
  v51.i64[0] = *(_QWORD *)&v780[48];
  v471 = (float64x2_t)v51;
  v546 = *(int8x16_t *)&v780[32];
  v364 = *(float64x2_t *)&v778[8];
  v365 = v729;
  v395 = v735;
  v397 = *(double *)&v736[120];
  v393 = v734;
  v394 = *(float64x2_t *)&v736[104];
  v391 = v733;
  v392 = *(float64x2_t *)&v736[88];
  v389 = v732;
  v390 = *(float64x2_t *)&v736[72];
  v387 = v731;
  v388 = *(float64x2_t *)&v736[56];
  v385 = v730;
  v386 = *(float64x2_t *)&v736[40];
  v384 = *(float64x2_t *)&v736[24];
  v358 = *(float64x2_t *)&v736[8];
  v402 = v742;
  v403 = v743;
  v400 = v740;
  v401 = v741;
  v398 = v738;
  v399 = v739;
  v396 = v737;
  v507 = *(int8x16_t *)((char *)&v744[6] + 8);
  v505 = *(int8x16_t *)((char *)&v744[5] + 8);
  v501 = *(int8x16_t *)((char *)&v744[4] + 8);
  v495 = *(int8x16_t *)((char *)&v744[3] + 8);
  v491 = *(int8x16_t *)((char *)&v744[2] + 8);
  v423 = *(float64x2_t *)((char *)&v744[1] + 8);
  v418 = *(float64x2_t *)((char *)v744 + 8);
  v503 = v744[14];
  v499 = v744[13];
  v493 = v744[12];
  v427 = v744[11];
  v422 = v744[10];
  v417 = v744[9];
  v413 = v744[8];
  v497 = *(int8x16_t *)((char *)&v744[21] + 8);
  v430 = *(float64x2_t *)((char *)&v744[20] + 8);
  v426 = *(float64x2_t *)((char *)&v744[19] + 8);
  v421 = *(float64x2_t *)((char *)&v744[18] + 8);
  v416 = *(float64x2_t *)((char *)&v744[17] + 8);
  v412 = *(float64x2_t *)((char *)&v744[16] + 8);
  v409 = *(float64x2_t *)((char *)&v744[15] + 8);
  v429 = v751;
  v425 = v750;
  v420 = v749;
  v415 = v748;
  v411 = v747;
  v408 = v746;
  v406 = v745;
  v432 = v752[7].f64[1];
  v424 = *(float64x2_t *)((char *)&v752[6] + 8);
  v419 = *(float64x2_t *)((char *)&v752[5] + 8);
  v414 = *(float64x2_t *)((char *)&v752[4] + 8);
  v410 = *(float64x2_t *)((char *)&v752[3] + 8);
  v407 = *(float64x2_t *)((char *)&v752[2] + 8);
  v405 = *(float64x2_t *)((char *)&v752[1] + 8);
  v404 = *(float64x2_t *)((char *)v752 + 8);
  v442 = v760[0].f64[0];
  v441 = v759;
  v440 = v758;
  v438 = v757;
  v437 = v756;
  v436 = v755;
  v435 = v754;
  v433 = v753;
  v439 = v760[7].f64[1];
  v529 = *(int8x16_t *)((char *)&v760[6] + 8);
  v527 = *(int8x16_t *)((char *)&v760[5] + 8);
  v523 = *(int8x16_t *)((char *)&v760[4] + 8);
  v519 = *(int8x16_t *)((char *)&v760[3] + 8);
  v513 = *(int8x16_t *)((char *)&v760[2] + 8);
  v509 = *(int8x16_t *)((char *)&v760[1] + 8);
  v455 = *(float64x2_t *)((char *)v760 + 8);
  v434 = v760[15].f64[0];
  v525 = v760[14];
  v521 = v760[13];
  v517 = v760[12];
  v511 = v760[11];
  v458 = v760[10];
  v452 = v760[9];
  v448 = v760[8];
  v428 = v760[22].f64[1];
  v468 = *(float64x2_t *)((char *)&v760[21] + 8);
  v515 = *(int8x16_t *)((char *)&v760[20] + 8);
  v462 = *(float64x2_t *)((char *)&v760[19] + 8);
  v456 = *(float64x2_t *)((char *)&v760[18] + 8);
  v450 = *(float64x2_t *)((char *)&v760[17] + 8);
  v447 = *(float64x2_t *)((char *)&v760[16] + 8);
  v445 = *(float64x2_t *)((char *)&v760[15] + 8);
  v466 = v768[0].f64[0];
  v464 = v767;
  v460 = v766;
  v453 = v765;
  v449 = v764;
  v446 = v763;
  v444 = v762;
  v443 = v761;
  v467 = v768[7].f64[1];
  v465 = *(float64x2_t *)((char *)&v768[6] + 8);
  v463 = *(float64x2_t *)((char *)&v768[5] + 8);
  v461 = *(float64x2_t *)((char *)&v768[4] + 8);
  v459 = *(float64x2_t *)((char *)&v768[3] + 8);
  v457 = *(float64x2_t *)((char *)&v768[2] + 8);
  v454 = *(float64x2_t *)((char *)&v768[1] + 8);
  v451 = *(float64x2_t *)((char *)v768 + 8);
  v469 = v776;
  v542 = v775;
  v540 = v774;
  v538 = v773;
  v536 = v772;
  v534 = v771;
  v532 = v770;
  v531 = v769;
  bzero(&v714.f64[1], 0x6F8uLL);
  v714.f64[0] = 1.0;
  v715 = 0x3FF0000000000000;
  v716 = 0x3FF0000000000000;
  v717 = 0x3FF0000000000000;
  v718 = 0x3FF0000000000000;
  v719 = 0x3FF0000000000000;
  v720 = 0x3FF0000000000000;
  v721 = 0x3FF0000000000000;
  v722 = 0x3FF0000000000000;
  v723 = 0x3FF0000000000000;
  v724 = 0x3FF0000000000000;
  v725 = 0x3FF0000000000000;
  v726 = 0x3FF0000000000000;
  v727 = 0x3FF0000000000000;
  v728 = 0x3FF0000000000000;
  if (!sub_20F4C04B8(&v714, v781, 0, 0, v53, v54, v55, v56, v57, v58, v59, v60))
    return 0;
  v61 = (__int128 *)(v30 + 168 * v22);
  v62 = *((double *)v61 + 2);
  _Q1 = *v61;
  v64 = *((double *)v61 + 5);
  _Q3 = *(float64x2_t *)((char *)v61 + 24);
  v66 = *((double *)v61 + 8);
  _Q5 = (float64x2_t)v61[3];
  _Q6.f64[0] = *(float64_t *)v778;
  v69 = (float64x2_t)vzip1q_s64(v777, *(int64x2_t *)&v778[8]);
  v70 = (float64x2_t)vzip2q_s64(v777, *(int64x2_t *)&v778[8]);
  _Q6.f64[1] = *(float64_t *)&v778[24];
  *(float64x2_t *)(v18 + 3) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)v61), v70, *(float64x2_t *)v61, 1), _Q6, v62);
  _V18.D[1] = v779.f64[1];
  *(_QWORD *)&_Q1 = *((_QWORD *)&_Q1 + 1);
  __asm { FMLA            D19, D1, V18.D[1] }
  v76 = _D19 + *(double *)v780 * v62;
  v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q3.f64[0]), v70, _Q3, 1), _Q6, v64);
  _Q3.f64[0] = _Q3.f64[1];
  __asm { FMLA            D19, D3, V18.D[1] }
  v79 = _D19 + *(double *)v780 * v64;
  v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q5.f64[0]), v70, _Q5, 1), _Q6, v66);
  _Q5.f64[0] = _Q5.f64[1];
  __asm { FMLA            D6, D5, V18.D[1] }
  v81 = _Q6.f64[0] + *(double *)v780 * v66;
  *((float64x2_t *)v18 + 3) = v77;
  v18[5] = v76;
  v18[8] = v79;
  *(float64x2_t *)(v18 + 9) = v80;
  v18[11] = v81;
  sub_20F9AF804(&v786, v18 + 3);
  v82 = v351;
  v83 = v352;
  *(_QWORD *)&v83.f64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
  *(_QWORD *)&v82.f64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
  v84 = v350;
  *(_QWORD *)&v84.f64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
  v85 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v84, v345), v82, v346), (float64x2_t)0, v83);
  v86 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v84, v347), (float64x2_t)0, v82), (float64x2_t)0, v83);
  v87 = *(double *)vextq_s8(v354, v354, 8uLL).i64;
  v88 = vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v354.i64), v85, v87);
  v89 = *(double *)vextq_s8(v360, v360, 8uLL).i64;
  v90 = vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v360.i64), v85, v89);
  v91 = *(double *)vextq_s8(v371, v371, 8uLL).i64;
  v92 = vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v371.i64), v85, v91);
  _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v84, v342), v82, v344), v83, v343);
  v94 = v363 * v342 + v362 * v344 + v361 * v343;
  v95 = v363 * v345 + v362 * v346 + v361 * 0.0;
  v96 = v363 * v347 + v362 * 0.0 + v361 * 0.0;
  v353 = v96 * *(double *)v354.i64 + v95 * v87;
  v97 = v96 * *(double *)v360.i64 + v95 * v89;
  v98 = v96 * *(double *)v371.i64 + v95 * v91;
  v99 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v84, v356), v82, v357), v83, v355);
  v100 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v84, v359), v82, v369), (float64x2_t)0, v83);
  v101 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v84, v375), (float64x2_t)0, v82), (float64x2_t)0, v83);
  v102 = vmlaq_n_f64(vmulq_n_f64(v101, *(double *)v354.i64), v100, v87);
  v103 = vmlaq_n_f64(vmulq_n_f64(v101, *(double *)v360.i64), v100, v89);
  v104 = vmlaq_n_f64(vmulq_n_f64(v101, *(double *)v371.i64), v100, v91);
  v100.f64[0] = v363 * v356 + v362 * v357 + v361 * v355;
  v105 = v363 * v359 + v362 * v369 + v361 * 0.0;
  v106 = v363 * v375 + v362 * 0.0 + v361 * 0.0;
  v107 = v106 * *(double *)v354.i64 + v105 * v87;
  v108 = v106 * *(double *)v360.i64 + v105 * v89;
  v109 = v106 * *(double *)v371.i64 + v105 * v91;
  v110 = vmlaq_n_f64(v88, _Q17, v374);
  v111 = vmlaq_n_f64(v90, _Q17, v376);
  v112 = vmlaq_n_f64(v92, _Q17, v377);
  v113 = v353 + v94 * v374;
  _Q17.f64[0] = v97 + v94 * v376;
  v114 = v98 + v94 * v377;
  v115 = vmlaq_n_f64(v102, v99, v374);
  v116 = vmlaq_n_f64(v103, v99, v376);
  v117 = vmlaq_n_f64(v104, v99, v377);
  v118 = v107 + v100.f64[0] * v374;
  v83.f64[0] = v108 + v100.f64[0] * v376;
  v119 = v109 + v100.f64[0] * v377;
  v120 = v472;
  *(_QWORD *)&v120.f64[1] = vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL).u64[0];
  v121 = v474;
  *(_QWORD *)&v121.f64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
  _Q0 = (float64x2_t)v476;
  *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v123 = (float64x2_t)vextq_s8(v378, v378, 8uLL);
  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v117, *(double *)v378.i64), v116, v123.f64[0]), v115, v379);
  _Q24 = vsubq_f64(_Q4, v120);
  v126 = vmlaq_laneq_f64(vmulq_n_f64(_Q0, _Q24.f64[0]), v121, _Q24, 1);
  _Q0.f64[0] = v480;
  __asm { FMLA            D4, D0, V24.D[1] }
  v127 = v482;
  *(_QWORD *)&v127.f64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
  v123.f64[0] = v119 * *(double *)v378.i64 + v83.f64[0] * v123.f64[0] + v118 * v379;
  *(_QWORD *)&v123.f64[0] = *(_OWORD *)&vsubq_f64(v123, v477);
  v478 = vmlaq_n_f64(v126, v127, v123.f64[0]);
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v484, v123.f64[0]);
  v481 = _Q4;
  _Q24.f64[0] = *(double *)vextq_s8(v380, v380, 8uLL).i64;
  v128 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v380.i64), v111, _Q24.f64[0]);
  v100.f64[0] = *(double *)vextq_s8(v381, v381, 8uLL).i64;
  v129 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v381.i64), v111, v100.f64[0]);
  v111.f64[0] = v114 * *(double *)v381.i64 + _Q17.f64[0] * v100.f64[0];
  v130 = vmlaq_n_f64(v128, v110, v383);
  _Q17.f64[0] = v114 * *(double *)v380.i64 + _Q17.f64[0] * _Q24.f64[0] + v113 * v383;
  *(_QWORD *)&v127.f64[1] = v382.i64[1];
  v485 = vmlaq_n_f64(v129, v110, *(double *)v382.i64);
  v127.f64[0] = v111.f64[0] + v113 * *(double *)v382.i64;
  v483 = v127;
  v131 = vmulq_n_f64(v117, *(double *)v348.i64);
  v117.f64[0] = *(double *)vextq_s8(v348, v348, 8uLL).i64;
  _Q5 = vmlaq_n_f64(vmlaq_n_f64(v131, v116, v117.f64[0]), v115, v349);
  v116.f64[0] = v119 * *(double *)v348.i64 + v83.f64[0] * v117.f64[0] + v118 * v349;
  v133 = v486;
  *(_QWORD *)&v133.f64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
  v134 = v370;
  *(_QWORD *)&v134.f64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
  _Q28 = (float64x2_t)v366;
  v135 = v367;
  *(_QWORD *)&v135.f64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
  v137 = v364;
  *(_QWORD *)&v137.f64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
  *(_QWORD *)&_Q28.f64[1] = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL).u64[0];
  _Q0 = v395;
  *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v140 = v393;
  _Q1 = v394;
  *(_QWORD *)&v140.f64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
  v142 = v391;
  v141 = v392;
  *(_QWORD *)&v142.f64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
  v144 = v389;
  v143 = v390;
  *(_QWORD *)&v144.f64[1] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
  v146 = v387;
  v145 = v388;
  *(_QWORD *)&v146.f64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
  v148 = v385;
  v147 = v386;
  *(_QWORD *)&v148.f64[1] = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u64[0];
  v149 = v365;
  *(_QWORD *)&v149.f64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
  *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
  *(_QWORD *)&v141.f64[1] = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u64[0];
  *(_QWORD *)&v143.f64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
  *(_QWORD *)&v145.f64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
  *(_QWORD *)&v147.f64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
  v150 = v384;
  *(_QWORD *)&v150.f64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
  _Q19 = vsubq_f64(_Q5, v135);
  v152 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, _Q19.f64[0]), v137, _Q19, 1);
  _Q5.f64[0] = v368;
  __asm { FMLA            D28, D5, V19.D[1] }
  v153 = v358;
  *(_QWORD *)&v153.f64[1] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
  *(_QWORD *)&v116.f64[0] = *(_OWORD *)&vsubq_f64(v116, v373);
  v479 = vmlaq_n_f64(v152, v134, v116.f64[0]);
  _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], v372, v116.f64[0]);
  v487 = _Q28;
  _Q18 = vsubq_f64(v130, v133);
  v155 = vmlaq_laneq_f64(vmulq_n_f64(v149, _Q18.f64[0]), v153, _Q18, 1);
  v156 = vmlaq_laneq_f64(vmulq_n_f64(v148, _Q18.f64[0]), v150, _Q18, 1);
  v157 = vmlaq_laneq_f64(vmulq_n_f64(v146, _Q18.f64[0]), v147, _Q18, 1);
  v158 = vmlaq_laneq_f64(vmulq_n_f64(v142, _Q18.f64[0]), v143, _Q18, 1);
  v159 = vmlaq_laneq_f64(vmulq_n_f64(v140, _Q18.f64[0]), v141, _Q18, 1);
  v160 = vmlaq_laneq_f64(vmulq_n_f64(_Q0, _Q18.f64[0]), _Q1, _Q18, 1);
  v161 = v396;
  _Q0.f64[0] = v397;
  v162 = v398;
  __asm { FMLA            D1, D0, V18.D[1] }
  v164 = v402;
  v163 = v403;
  *(_QWORD *)&v163.f64[1] = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
  *(_QWORD *)&v164.f64[1] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
  v166 = v400;
  v165 = v401;
  *(_QWORD *)&v165.f64[1] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
  *(_QWORD *)&v166.f64[1] = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
  v167 = v399;
  *(_QWORD *)&v167.f64[1] = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
  *(_QWORD *)&v162.f64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
  *(_QWORD *)&v161.f64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
  *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(_Q17, v548);
  v549 = vmlaq_n_f64(v155, v161, _Q17.f64[0]);
  v473 = vmlaq_n_f64(v156, v162, _Q17.f64[0]);
  v475 = vmlaq_n_f64(v157, v167, _Q17.f64[0]);
  v168 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v144, _Q18.f64[0]), v145, _Q18, 1), v166, _Q17.f64[0]);
  v169 = vmlaq_n_f64(v158, v165, _Q17.f64[0]);
  v170 = vmlaq_n_f64(v159, v164, _Q17.f64[0]);
  v171 = vmlaq_n_f64(v160, v163, _Q17.f64[0]);
  v172 = v552;
  v172.i64[1] = vextq_s8(v172, v172, 8uLL).u64[0];
  v553 = (float64x2_t)v172;
  v173 = v507;
  v173.i64[1] = vextq_s8(v173, v173, 8uLL).u64[0];
  v508 = (float64x2_t)v173;
  v174 = v505;
  v174.i64[1] = vextq_s8(v174, v174, 8uLL).u64[0];
  v506 = (float64x2_t)v174;
  v175 = v501;
  v175.i64[1] = vextq_s8(v175, v175, 8uLL).u64[0];
  v502 = (float64x2_t)v175;
  v176 = v495;
  v176.i64[1] = vextq_s8(v176, v176, 8uLL).u64[0];
  v496 = (float64x2_t)v176;
  v177 = v491;
  v177.i64[1] = vextq_s8(v177, v177, 8uLL).u64[0];
  v492 = (float64x2_t)v177;
  v178 = v423;
  *(_QWORD *)&v178.f64[1] = vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u64[0];
  v179 = v418;
  *(_QWORD *)&v179.f64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
  v180 = (int8x16_t)v503;
  v180.i64[1] = vextq_s8(v180, v180, 8uLL).u64[0];
  v504 = (float64x2_t)v180;
  v181 = (int8x16_t)v499;
  v181.i64[1] = vextq_s8(v181, v181, 8uLL).u64[0];
  v500 = (float64x2_t)v181;
  v182 = (int8x16_t)v493;
  v182.i64[1] = vextq_s8(v182, v182, 8uLL).u64[0];
  v494 = (float64x2_t)v182;
  v183 = v427;
  *(_QWORD *)&v183.f64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u64[0];
  v184 = v422;
  *(_QWORD *)&v184.f64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u64[0];
  v185 = v417;
  *(_QWORD *)&v185.f64[1] = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
  v186 = v413;
  *(_QWORD *)&v186.f64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
  v187 = v497;
  v187.i64[1] = vextq_s8(v187, v187, 8uLL).u64[0];
  v498 = (float64x2_t)v187;
  v188 = v430;
  *(_QWORD *)&v188.f64[1] = vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL).u64[0];
  v189 = v426;
  *(_QWORD *)&v189.f64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
  v190 = v421;
  *(_QWORD *)&v190.f64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
  v191 = v416;
  *(_QWORD *)&v191.f64[1] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
  v192 = v412;
  *(_QWORD *)&v192.f64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u64[0];
  v193 = v409;
  *(_QWORD *)&v193.f64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
  v194 = v429;
  *(_QWORD *)&v194.f64[1] = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u64[0];
  v195 = v425;
  *(_QWORD *)&v195.f64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
  v196 = v420;
  *(_QWORD *)&v196.f64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u64[0];
  v197 = v415;
  *(_QWORD *)&v197.f64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u64[0];
  v198 = v411;
  *(_QWORD *)&v198.f64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u64[0];
  v199 = v408;
  *(_QWORD *)&v199.f64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u64[0];
  v200 = v406;
  *(_QWORD *)&v200.f64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
  v201 = v424;
  *(_QWORD *)&v201.f64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
  v431 = v26;
  v202 = v419;
  *(_QWORD *)&v202.f64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
  v203 = v414;
  *(_QWORD *)&v203.f64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u64[0];
  v204 = v410;
  *(_QWORD *)&v204.f64[1] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
  v205 = v407;
  *(_QWORD *)&v205.f64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
  v206 = v405;
  *(_QWORD *)&v206.f64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
  v207 = v404;
  *(_QWORD *)&v207.f64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
  _Q0 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v549, (float64x2_t)0, v179), (float64x2_t)0, v186), (float64x2_t)0, v193);
  _Q7 = vsubq_f64(v478, v553);
  v550 = vmlaq_laneq_f64(vmlaq_n_f64(_Q0, v200, _Q7.f64[0]), v207, _Q7, 1);
  v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v473, (float64x2_t)0, v178), (float64x2_t)0, v185), (float64x2_t)0, v192), v199, _Q7.f64[0]), v206, _Q7, 1);
  v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v475, (float64x2_t)0, v492), (float64x2_t)0, v184), (float64x2_t)0, v191), v198, _Q7.f64[0]), v205, _Q7, 1);
  v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v168, (float64x2_t)0, v496), (float64x2_t)0, v183), (float64x2_t)0, v190), v197, _Q7.f64[0]), v204, _Q7, 1);
  v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v169, (float64x2_t)0, v502), (float64x2_t)0, v494), (float64x2_t)0, v189), v196, _Q7.f64[0]), v203, _Q7, 1);
  _Q0.f64[0] = v432;
  __asm { FMLA            D17, D0, V7.D[1] }
  v214 = v441;
  *(_QWORD *)&v214.f64[1] = vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u64[0];
  v215 = v440;
  *(_QWORD *)&v215.f64[1] = vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
  v216 = v438;
  *(_QWORD *)&v216.f64[1] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
  v217 = v437;
  *(_QWORD *)&v217.f64[1] = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
  v218 = v436;
  *(_QWORD *)&v218.f64[1] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
  v219 = v435;
  *(_QWORD *)&v219.f64[1] = vextq_s8((int8x16_t)v219, (int8x16_t)v219, 8uLL).u64[0];
  v220 = v433;
  *(_QWORD *)&v220.f64[1] = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
  *(_QWORD *)&v200.f64[0] = *(_OWORD *)&vsubq_f64(v481, v490);
  v551 = vmlaq_n_f64(v550, v220, v200.f64[0]);
  v221 = vmlaq_n_f64(v210, v219, v200.f64[0]);
  v222 = vmlaq_n_f64(v211, v218, v200.f64[0]);
  v223 = vmlaq_n_f64(v212, v217, v200.f64[0]);
  v224 = vmlaq_n_f64(v213, v216, v200.f64[0]);
  v225 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v170, (float64x2_t)0, v506), (float64x2_t)0, v500), (float64x2_t)0, v188), v195, _Q7.f64[0]), v202, _Q7, 1), v215, v200.f64[0]);
  v226 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v171, (float64x2_t)0, v508), (float64x2_t)0, v504), (float64x2_t)0, v498), v194, _Q7.f64[0]), v201, _Q7, 1), v214, v200.f64[0]);
  v508.f64[0] = vmlad_n_f64(_Q17.f64[0], v442, v200.f64[0]) + v439 * 0.0 + v434 * 0.0 + v428 * 0.0;
  v227 = v546;
  v227.i64[1] = vextq_s8(v227, v227, 8uLL).u64[0];
  v547 = (float64x2_t)v227;
  v228 = v544;
  v228.i64[1] = vextq_s8(v228, v228, 8uLL).u64[0];
  v545 = (float64x2_t)v228;
  v229 = v529;
  v229.i64[1] = vextq_s8(v229, v229, 8uLL).u64[0];
  v530 = (float64x2_t)v229;
  v230 = v527;
  v230.i64[1] = vextq_s8(v230, v230, 8uLL).u64[0];
  v528 = (float64x2_t)v230;
  v231 = v523;
  v231.i64[1] = vextq_s8(v231, v231, 8uLL).u64[0];
  v524 = (float64x2_t)v231;
  v232 = v519;
  v232.i64[1] = vextq_s8(v232, v232, 8uLL).u64[0];
  v520 = (float64x2_t)v232;
  v233 = v513;
  v233.i64[1] = vextq_s8(v233, v233, 8uLL).u64[0];
  v514 = (float64x2_t)v233;
  v234 = v509;
  v234.i64[1] = vextq_s8(v234, v234, 8uLL).u64[0];
  v510 = (float64x2_t)v234;
  v235 = v455;
  *(_QWORD *)&v235.f64[1] = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
  v236 = (int8x16_t)v525;
  v236.i64[1] = vextq_s8(v236, v236, 8uLL).u64[0];
  v526 = (float64x2_t)v236;
  v237 = (int8x16_t)v521;
  v237.i64[1] = vextq_s8(v237, v237, 8uLL).u64[0];
  v522 = (float64x2_t)v237;
  v238 = (int8x16_t)v517;
  v238.i64[1] = vextq_s8(v238, v238, 8uLL).u64[0];
  v518 = (float64x2_t)v238;
  v239 = (int8x16_t)v511;
  v239.i64[1] = vextq_s8(v239, v239, 8uLL).u64[0];
  v512 = (float64x2_t)v239;
  v240 = v458;
  *(_QWORD *)&v240.f64[1] = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
  v241 = v452;
  *(_QWORD *)&v241.f64[1] = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u64[0];
  v242 = v448;
  *(_QWORD *)&v242.f64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u64[0];
  v243 = v468;
  *(_QWORD *)&v243.f64[1] = vextq_s8((int8x16_t)v243, (int8x16_t)v243, 8uLL).u64[0];
  v244 = v515;
  v244.i64[1] = vextq_s8(v244, v244, 8uLL).u64[0];
  v516 = (float64x2_t)v244;
  v245 = v462;
  *(_QWORD *)&v245.f64[1] = vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u64[0];
  v246 = v456;
  *(_QWORD *)&v246.f64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u64[0];
  v247 = v450;
  *(_QWORD *)&v247.f64[1] = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u64[0];
  v248 = v447;
  *(_QWORD *)&v248.f64[1] = vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL).u64[0];
  v249 = v445;
  *(_QWORD *)&v249.f64[1] = vextq_s8((int8x16_t)v249, (int8x16_t)v249, 8uLL).u64[0];
  v250 = v464;
  *(_QWORD *)&v250.f64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u64[0];
  v251 = v460;
  *(_QWORD *)&v251.f64[1] = vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL).u64[0];
  v252 = v453;
  *(_QWORD *)&v252.f64[1] = vextq_s8((int8x16_t)v252, (int8x16_t)v252, 8uLL).u64[0];
  v253 = v449;
  *(_QWORD *)&v253.f64[1] = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u64[0];
  v254 = v446;
  *(_QWORD *)&v254.f64[1] = vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u64[0];
  v255 = v444;
  *(_QWORD *)&v255.f64[1] = vextq_s8((int8x16_t)v255, (int8x16_t)v255, 8uLL).u64[0];
  v256 = v443;
  *(_QWORD *)&v256.f64[1] = vextq_s8((int8x16_t)v256, (int8x16_t)v256, 8uLL).u64[0];
  v257 = v465;
  *(_QWORD *)&v257.f64[1] = vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL).u64[0];
  v258 = v463;
  *(_QWORD *)&v258.f64[1] = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
  v259 = v461;
  *(_QWORD *)&v259.f64[1] = vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL).u64[0];
  v260 = v459;
  *(_QWORD *)&v260.f64[1] = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
  v261 = v457;
  *(_QWORD *)&v261.f64[1] = vextq_s8((int8x16_t)v261, (int8x16_t)v261, 8uLL).u64[0];
  v262 = v454;
  *(_QWORD *)&v262.f64[1] = vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL).u64[0];
  v263 = v451;
  *(_QWORD *)&v263.f64[1] = vextq_s8((int8x16_t)v263, (int8x16_t)v263, 8uLL).u64[0];
  v264 = (int8x16_t)v542;
  v264.i64[1] = vextq_s8(v264, v264, 8uLL).u64[0];
  v543 = (float64x2_t)v264;
  v265 = (int8x16_t)v540;
  v265.i64[1] = vextq_s8(v265, v265, 8uLL).u64[0];
  v541 = (float64x2_t)v265;
  v266 = (int8x16_t)v538;
  v266.i64[1] = vextq_s8(v266, v266, 8uLL).u64[0];
  v539 = (float64x2_t)v266;
  v267 = (int8x16_t)v536;
  v267.i64[1] = vextq_s8(v267, v267, 8uLL).u64[0];
  v537 = (float64x2_t)v267;
  v268 = (int8x16_t)v534;
  v268.i64[1] = vextq_s8(v268, v268, 8uLL).u64[0];
  v535 = (float64x2_t)v268;
  v269 = (int8x16_t)v532;
  v269.i64[1] = vextq_s8(v269, v269, 8uLL).u64[0];
  v533 = (float64x2_t)v269;
  v270 = v531;
  *(_QWORD *)&v270.f64[1] = vextq_s8((int8x16_t)v270, (int8x16_t)v270, 8uLL).u64[0];
  v271 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v551, (float64x2_t)0, v235), (float64x2_t)0, v242), (float64x2_t)0, v249), v256, *(double *)v488.i64);
  v256.f64[1] = v526.f64[1];
  v200.f64[0] = *(double *)vextq_s8(v488, v488, 8uLL).i64;
  v272 = vmlaq_n_f64(v271, v263, v200.f64[0]);
  v273 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v221, (float64x2_t)0, v510), (float64x2_t)0, v241), (float64x2_t)0, v248), v255, *(double *)v488.i64), v262, v200.f64[0]);
  v274 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v222, (float64x2_t)0, v514), (float64x2_t)0, v240), (float64x2_t)0, v247), v254, *(double *)v488.i64), v261, v200.f64[0]);
  v275 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v223, (float64x2_t)0, v520), (float64x2_t)0, v512), (float64x2_t)0, v246), v253, *(double *)v488.i64), v260, v200.f64[0]);
  v276 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v224, (float64x2_t)0, v524), (float64x2_t)0, v518), (float64x2_t)0, v245), v252, *(double *)v488.i64), v259, v200.f64[0]);
  v277 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v225, (float64x2_t)0, v528), (float64x2_t)0, v522), (float64x2_t)0, v516), v251, *(double *)v488.i64), v258, v200.f64[0]);
  v278 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v226, (float64x2_t)0, v530), (float64x2_t)0, v526), (float64x2_t)0, v243), v250, *(double *)v488.i64), v257, v200.f64[0]);
  v256.f64[0] = v508.f64[0] + v466 * *(double *)v488.i64 + v467 * v200.f64[0];
  __asm { FMOV            V7.2D, #-2.0 }
  v280 = vmulq_f64(v786, _Q7);
  v565 = v280;
  *(_QWORD *)&v280.f64[0] = v787;
  v566 = *(_OWORD *)&vmulq_f64(v280, _Q7);
  v281 = *(float64x2_t *)((char *)v61 + 136);
  v282 = *(float64x2_t *)((char *)v61 + 120);
  v283 = *(float64x2_t *)((char *)v61 + 104);
  v256.f64[0] = v256.f64[0] + v469 * v489;
  v284 = *(float64x2_t *)((char *)v61 + 88);
  v285 = *(float64x2_t *)((char *)v61 + 72);
  v572 = vsubq_f64(*(float64x2_t *)&v780[88], *(float64x2_t *)((char *)v61 + 152));
  v571 = vsubq_f64(*(float64x2_t *)&v780[72], v281);
  v570 = vsubq_f64(*(float64x2_t *)&v780[56], v282);
  v569 = vsubq_f64(*(float64x2_t *)&v780[40], v283);
  v568 = vsubq_f64(*(float64x2_t *)&v780[24], v284);
  v567 = vsubq_f64(*(float64x2_t *)&v780[8], v285);
  v286 = (int8x16_t)vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v483, v470), vmlaq_n_f64(v273, v533, v489));
  v286.i64[1] = vextq_s8(v286, v286, 8uLL).u64[0];
  v574 = v286;
  v287 = (int8x16_t)vsubq_f64(vsubq_f64(v485, v545), vmlaq_n_f64(v272, v270, v489));
  v287.i64[1] = vextq_s8(v287, v287, 8uLL).u64[0];
  v573 = v287;
  v288 = (int8x16_t)vsubq_f64((float64x2_t)0, vmlaq_n_f64(v274, v535, v489));
  v288.i64[1] = vextq_s8(v288, v288, 8uLL).u64[0];
  v575 = v288;
  v289 = (int8x16_t)vsubq_f64(vsubq_f64(v479, v553), vmlaq_n_f64(v275, v537, v489));
  v289.i64[1] = vextq_s8(v289, v289, 8uLL).u64[0];
  v576 = v289;
  v290 = (int8x16_t)vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v487, v490), vmlaq_n_f64(v276, v539, v489));
  v290.i64[1] = vextq_s8(v290, v290, 8uLL).u64[0];
  v577 = v290;
  v291 = (int8x16_t)vsubq_f64((float64x2_t)0, vmlaq_n_f64(v277, v541, v489));
  v291.i64[1] = vextq_s8(v291, v291, 8uLL).u64[0];
  v578 = v291;
  v580 = *(_OWORD *)&vsubq_f64(v471, v256);
  v292 = (int8x16_t)vsubq_f64(v547, vmlaq_n_f64(v278, v543, v489));
  v292.i64[1] = vextq_s8(v292, v292, 8uLL).u64[0];
  v579 = v292;
  v603 = v744[0].f64[0];
  v602 = v743;
  v601 = v742;
  v600 = v741;
  v599 = v740;
  v598 = v739;
  v597 = v738;
  v596 = v737;
  v595 = *(_OWORD *)&v736[112];
  v594 = *(_OWORD *)&v736[96];
  v593 = *(_OWORD *)&v736[80];
  v592 = *(_OWORD *)&v736[64];
  v591 = *(_OWORD *)&v736[48];
  v590 = *(_OWORD *)&v736[32];
  v589 = *(_OWORD *)&v736[16];
  v588 = *(_OWORD *)v736;
  v587 = v735;
  v586 = v734;
  v585 = v733;
  v584 = v732;
  v583 = v731;
  v582 = v730;
  v581 = v729;
  v626 = v776;
  v624 = v774;
  v625 = v775;
  v622 = v772;
  v623 = v773;
  v620 = v770;
  v621 = v771;
  v618 = v768[7];
  v619 = v769;
  v616 = v768[5];
  v617 = v768[6];
  v614 = v768[3];
  v615 = v768[4];
  v612 = v768[1];
  v613 = v768[2];
  v610 = v767;
  v611 = v768[0];
  v608 = v765;
  v609 = v766;
  v606 = v763;
  v607 = v764;
  v604 = v761;
  v605 = v762;
  v649 = v760[0].f64[0];
  v647 = v758;
  v648 = v759;
  v645 = v756;
  v646 = v757;
  v643 = v754;
  v644 = v755;
  v641 = v752[7];
  v642 = v753;
  v639 = v752[5];
  v640 = v752[6];
  v637 = v752[3];
  v638 = v752[4];
  v635 = v752[1];
  v636 = v752[2];
  v633 = v751;
  v634 = v752[0];
  v631 = v749;
  v632 = v750;
  v629 = v747;
  v630 = v748;
  v627 = v745;
  v628 = v746;
  v672 = v744[22].f64[1];
  v670 = *(__int128 *)((char *)&v744[20] + 8);
  v671 = *(__int128 *)((char *)&v744[21] + 8);
  v668 = *(__int128 *)((char *)&v744[18] + 8);
  v669 = *(__int128 *)((char *)&v744[19] + 8);
  v666 = *(__int128 *)((char *)&v744[16] + 8);
  v667 = *(__int128 *)((char *)&v744[17] + 8);
  v664 = *(__int128 *)((char *)&v744[14] + 8);
  v665 = *(__int128 *)((char *)&v744[15] + 8);
  v662 = *(__int128 *)((char *)&v744[12] + 8);
  v663 = *(__int128 *)((char *)&v744[13] + 8);
  v660 = *(__int128 *)((char *)&v744[10] + 8);
  v661 = *(__int128 *)((char *)&v744[11] + 8);
  v658 = *(__int128 *)((char *)&v744[8] + 8);
  v659 = *(__int128 *)((char *)&v744[9] + 8);
  v656 = *(__int128 *)((char *)&v744[6] + 8);
  v657 = *(__int128 *)((char *)&v744[7] + 8);
  v654 = *(__int128 *)((char *)&v744[4] + 8);
  v655 = *(__int128 *)((char *)&v744[5] + 8);
  v652 = *(__int128 *)((char *)&v744[2] + 8);
  v653 = *(__int128 *)((char *)&v744[3] + 8);
  v650 = *(__int128 *)((char *)v744 + 8);
  v651 = *(__int128 *)((char *)&v744[1] + 8);
  v695 = v760[22].f64[1];
  v694 = *(__int128 *)((char *)&v760[21] + 8);
  v693 = *(__int128 *)((char *)&v760[20] + 8);
  v691 = *(__int128 *)((char *)&v760[18] + 8);
  v692 = *(__int128 *)((char *)&v760[19] + 8);
  v689 = *(__int128 *)((char *)&v760[16] + 8);
  v690 = *(__int128 *)((char *)&v760[17] + 8);
  v687 = *(__int128 *)((char *)&v760[14] + 8);
  v688 = *(__int128 *)((char *)&v760[15] + 8);
  v685 = *(__int128 *)((char *)&v760[12] + 8);
  v686 = *(__int128 *)((char *)&v760[13] + 8);
  v683 = *(__int128 *)((char *)&v760[10] + 8);
  v684 = *(__int128 *)((char *)&v760[11] + 8);
  v681 = *(__int128 *)((char *)&v760[8] + 8);
  v682 = *(__int128 *)((char *)&v760[9] + 8);
  v679 = *(__int128 *)((char *)&v760[6] + 8);
  v680 = *(__int128 *)((char *)&v760[7] + 8);
  v677 = *(__int128 *)((char *)&v760[4] + 8);
  v678 = *(__int128 *)((char *)&v760[5] + 8);
  v675 = *(__int128 *)((char *)&v760[2] + 8);
  v676 = *(__int128 *)((char *)&v760[3] + 8);
  v673 = *(__int128 *)((char *)v760 + 8);
  v674 = *(__int128 *)((char *)&v760[1] + 8);
  bzero(&v696, 0x708uLL);
  v293.f64[0] = v18[5];
  v294.f64[0] = v18[8];
  v295.f64[0] = v18[11];
  v296 = vnegq_f64(*(float64x2_t *)(v18 + 6));
  v297 = vnegq_f64(*(float64x2_t *)(v18 + 9));
  v696 = vnegq_f64(*(float64x2_t *)(v18 + 3));
  v697 = *(_OWORD *)&vnegq_f64(v293);
  v698 = v296;
  v699 = *(_OWORD *)&vnegq_f64(v294);
  v700 = v297;
  v701 = *(_OWORD *)&vnegq_f64(v295);
  v702 = 0xBFF0000000000000;
  v703 = 0xBFF0000000000000;
  v704 = 0xBFF0000000000000;
  v705 = 0xBFF0000000000000;
  v706 = 0xBFF0000000000000;
  v707 = 0xBFF0000000000000;
  v708 = 0xBFF0000000000000;
  v709 = 0xBFF0000000000000;
  v710 = 0xBFF0000000000000;
  v711 = 0xBFF0000000000000;
  v712 = 0xBFF0000000000000;
  v713 = 0xBFF0000000000000;
  v555 = (uint64_t *)&v714;
  *(_QWORD *)&v786.f64[1] = &v555;
  v787 = &v565;
  v788 = 0x3FF0000000000000;
  sub_20FA1CF9C(v18 + 12, (uint64_t)&v786);
  v298 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v730), vabsq_f64(v758)), vmaxnmq_f64(vabsq_f64(v744[11]), vabsq_f64(v768[0]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v739), vabsq_f64(v760[14])), vabsq_f64(v749))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[32]), vabsq_f64(v760[6])), vmaxnmq_f64(vabsq_f64(v744[19]), vabsq_f64(v769))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[3]), vabsq_f64(v760[22])), vabsq_f64(v752[5])))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v734), vabsq_f64(v760[2])), vmaxnmq_f64(vabsq_f64(v744[15]), vabsq_f64(v768[4]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v743), vabsq_f64(v760[18])), vabsq_f64(v752[1]))), vmaxnmq_f64(
                 vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[96]), vabsq_f64(v760[10])), vmaxnmq_f64(vabsq_f64(v745), vabsq_f64(v773))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[7]), vabsq_f64(v764)), vabsq_f64(v754))))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v732), vabsq_f64(v760[0])), vmaxnmq_f64(vabsq_f64(v744[13]), vabsq_f64(v768[2]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v741), vabsq_f64(v760[16])), vabsq_f64(v751))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[64]), vabsq_f64(v760[8])), vmaxnmq_f64(vabsq_f64(v744[21]), vabsq_f64(v771))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[5]), vabsq_f64(v762)), vabsq_f64(v752[7])))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)v736), vabsq_f64(v760[4])),
                   vmaxnmq_f64(vabsq_f64(v744[17]), vabsq_f64(v768[6]))),
                 vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[1]), vabsq_f64(v760[20])), vabsq_f64(v752[3]))),
               vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v737), vabsq_f64(v760[12])), vmaxnmq_f64(vabsq_f64(v747), vabsq_f64(v775))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[9]), vabsq_f64(v766)), vabsq_f64(v756))))));
  v299 = vmaxnmq_f64(vabsq_f64(v729), vabsq_f64(v757));
  v300 = vmaxnmq_f64(v299, vmaxnmq_f64(vabsq_f64(v744[10]), vabsq_f64(v767)));
  v299.f64[0] = v776;
  *(_QWORD *)&v299.f64[0] = *(_OWORD *)&vabsq_f64(v299);
  v299.f64[1] = NAN;
  v301 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v300, vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v738), vabsq_f64(v760[13])), vmaxnmq_f64(vabsq_f64(v748), v299))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[16]), vabsq_f64(v760[5])), vmaxnmq_f64(vabsq_f64(v744[18]), vabsq_f64(v768[7]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[2]), vabsq_f64(v760[21])), vabsq_f64(v752[4])))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v733), vabsq_f64(v760[1])), vmaxnmq_f64(vabsq_f64(v744[14]), vabsq_f64(v768[3]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v742), vabsq_f64(v760[17])), vabsq_f64(v752[0]))), vmaxnmq_f64(vmaxnmq_f64(
                     vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[80]), vabsq_f64(v760[9])),
                     vmaxnmq_f64(vabsq_f64(v744[22]), vabsq_f64(v772))),
                   vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[6]), vabsq_f64(v763)), vabsq_f64(v753))))),
             vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v731), vabsq_f64(v759)), vmaxnmq_f64(vabsq_f64(v744[12]), vabsq_f64(v768[1]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v740), vabsq_f64(v760[15])), vabsq_f64(v750))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[48]), vabsq_f64(v760[7])), vmaxnmq_f64(vabsq_f64(v744[20]), vabsq_f64(v770))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[4]), vabsq_f64(v761)), vabsq_f64(v752[6])))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v735), vabsq_f64(v760[3])), vmaxnmq_f64(vabsq_f64(v744[16]), vabsq_f64(v768[5]))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[0]), vabsq_f64(v760[19])), vabsq_f64(v752[2]))), vmaxnmq_f64(vmaxnmq_f64(
                     vmaxnmq_f64(vabsq_f64(*(float64x2_t *)&v736[112]), vabsq_f64(v760[11])),
                     vmaxnmq_f64(vabsq_f64(v746), vabsq_f64(v774))),
                   vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v744[8]), vabsq_f64(v765)), vabsq_f64(v755)))))),
           v298);
  if (vmaxnmvq_f64(v301) >= INFINITY)
  {
    sub_20F82FD50(&v564);
    if (**(int **)(v564 + 56) > 5)
      return 0;
    v302 = *(unsigned __int8 *)(v564 + 72);
    v303 = sub_20E8C31DC(v564, "OSLogSurrogateAppender", 1, 0);
    v304 = v303 ? v303 + 16 : 0;
    if (!v302 && !v303)
      return 0;
    v555 = &v564;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v557 = std::chrono::system_clock::now().__d_.__rep_;
    v558 = 5;
    v559 = "unknown file";
    v560 = 1370;
    v563 = 0;
    v561 = "unknown function";
    v562 = 0;
    v305 = *v555;
    v306 = (uint64_t *)(*v555 + 16);
    if (*(char *)(*v555 + 39) < 0)
    {
      v308 = *(char **)(v305 + 16);
      v307 = *(_QWORD *)(v305 + 24);
    }
    else
    {
      v307 = *(unsigned __int8 *)(*v555 + 39);
      v308 = (char *)(*v555 + 16);
    }
    category = v308;
    v783 = v307;
    v326 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v786);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v786);
      if ((_BYTE)v788 && SHIBYTE(v787) < 0)
        operator delete(*(void **)&v786.f64[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v327 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v328 = byte_254A4A4F8;
    }
    else
    {
      v327 = *(_QWORD *)&byte_254A4A4F8[8];
      v328 = *(const char **)byte_254A4A4F8;
    }
    v784 = v328;
    v785 = v327;
    *(_QWORD *)&v786.f64[0] = os_log_create(v328, category);
    sub_20E86E5A8(&v786.f64[1], (uint64_t)&v784);
    sub_20E86E5A8(v789, (uint64_t)&category);
    v329 = v786.f64[0];
    v330 = sub_20E86E44C((uint64_t)&v786);
    sub_20FA1D038(v330, v304, v306, *(os_log_t *)&v329, OS_LOG_TYPE_ERROR);
    if (v302)
    {
      sub_20E8C003C((uint64_t)&v555, "IMU state factor contains NaNs.");
      sub_20E863570((uint64_t)&v555);
    }
LABEL_79:
    sub_20E863714((uint64_t)&v555);
    return 0;
  }
  v301.f64[0] = v18[11];
  *(_QWORD *)&v309.f64[0] = *(_OWORD *)&vabsq_f64(v301);
  v309.f64[1] = NAN;
  v310 = vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 5)), vabsq_f64(*(float64x2_t *)(v18 + 9)));
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 3)), v309), vabsq_f64(*(float64x2_t *)(v18 + 7))), v310)) >= INFINITY)
  {
    sub_20F82FD50(&v564);
    if (**(int **)(v564 + 56) > 5)
      return 0;
    v311 = *(unsigned __int8 *)(v564 + 72);
    v312 = sub_20E8C31DC(v564, "OSLogSurrogateAppender", 1, 0);
    v313 = v312 ? v312 + 16 : 0;
    if (!v311 && !v312)
      return 0;
    v555 = &v564;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v557 = std::chrono::system_clock::now().__d_.__rep_;
    v558 = 5;
    v559 = "unknown file";
    v560 = 1374;
    v563 = 0;
    v561 = "unknown function";
    v562 = 0;
    v314 = *v555;
    v315 = (uint64_t *)(*v555 + 16);
    if (*(char *)(*v555 + 39) < 0)
    {
      v317 = *(char **)(v314 + 16);
      v316 = *(_QWORD *)(v314 + 24);
    }
    else
    {
      v316 = *(unsigned __int8 *)(*v555 + 39);
      v317 = (char *)(*v555 + 16);
    }
    category = v317;
    v783 = v316;
    v331 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v331 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v786);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v786);
      if ((_BYTE)v788 && SHIBYTE(v787) < 0)
        operator delete(*(void **)&v786.f64[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v332 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v333 = byte_254A4A4F8;
    }
    else
    {
      v332 = *(_QWORD *)&byte_254A4A4F8[8];
      v333 = *(const char **)byte_254A4A4F8;
    }
    v784 = v333;
    v785 = v332;
    *(_QWORD *)&v786.f64[0] = os_log_create(v333, category);
    sub_20E86E5A8(&v786.f64[1], (uint64_t)&v784);
    sub_20E86E5A8(v789, (uint64_t)&category);
    v334 = v786.f64[0];
    v335 = sub_20E86E44C((uint64_t)&v786);
    sub_20FA1D428(v335, v313, v315, *(os_log_t *)&v334, OS_LOG_TYPE_ERROR);
    if (v311)
    {
      sub_20E8C003C((uint64_t)&v555, "IMU R factor contains NaNs.");
      sub_20E863570((uint64_t)&v555);
    }
    goto LABEL_79;
  }
  if (*(_BYTE *)v18)
  {
    v310.f64[0] = v18[41];
    *(_QWORD *)&v318.f64[0] = *(_OWORD *)&vabsq_f64(v310);
    v318.f64[1] = NAN;
    if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 27)), vabsq_f64(*(float64x2_t *)(v18 + 35))), vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 31)), vabsq_f64(*(float64x2_t *)(v18 + 39)))), vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 29)), vabsq_f64(*(float64x2_t *)(v18 + 37))), vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v18 + 33)), v318)))) >= INFINITY)
    {
      sub_20F82FD50(&v564);
      if (**(int **)(v564 + 56) > 5)
        return 0;
      v319 = *(unsigned __int8 *)(v564 + 72);
      v320 = sub_20E8C31DC(v564, "OSLogSurrogateAppender", 1, 0);
      v321 = v320 ? v320 + 16 : 0;
      if (!v319 && !v320)
        return 0;
      v555 = &v564;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v557 = std::chrono::system_clock::now().__d_.__rep_;
      v558 = 5;
      v559 = "unknown file";
      v560 = 1379;
      v563 = 0;
      v561 = "unknown function";
      v562 = 0;
      v322 = *v555;
      v323 = (uint64_t *)(*v555 + 16);
      if (*(char *)(*v555 + 39) < 0)
      {
        v325 = *(char **)(v322 + 16);
        v324 = *(_QWORD *)(v322 + 24);
      }
      else
      {
        v324 = *(unsigned __int8 *)(*v555 + 39);
        v325 = (char *)(*v555 + 16);
      }
      category = v325;
      v783 = v324;
      v336 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v336 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v786);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v786);
        if ((_BYTE)v788 && SHIBYTE(v787) < 0)
          operator delete(*(void **)&v786.f64[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v337 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v338 = byte_254A4A4F8;
      }
      else
      {
        v337 = *(_QWORD *)&byte_254A4A4F8[8];
        v338 = *(const char **)byte_254A4A4F8;
      }
      v784 = v338;
      v785 = v337;
      *(_QWORD *)&v786.f64[0] = os_log_create(v338, category);
      sub_20E86E5A8(&v786.f64[1], (uint64_t)&v784);
      sub_20E86E5A8(v789, (uint64_t)&category);
      v339 = v786.f64[0];
      v340 = sub_20E86E44C((uint64_t)&v786);
      sub_20FA1D818(v340, v321, v323, *(os_log_t *)&v339, OS_LOG_TYPE_ERROR);
      if (v319)
      {
        sub_20E8C003C((uint64_t)&v555, "IMU dt factor contains NaNs.");
        sub_20E863570((uint64_t)&v555);
      }
      goto LABEL_79;
    }
  }
  v18[1] = v554;
  v18[2] = v431;
  v29 = 1;
  *((_BYTE *)v18 + 1) = v27;
  return v29;
}

void sub_20FA1BCB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x3078]))
  {
    if (SLOBYTE(STACK[0x3077]) < 0)
      operator delete(*(void **)(v1 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xB30]);
  _Unwind_Resume(a1);
}

void sub_20FA1BD14(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xB30]);
  _Unwind_Resume(a1);
}

void sub_20FA1BE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20FA1BE38(uint64_t a1, uint64_t a2, __n128 a3, double a4, __n128 a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  unsigned int v9;
  double v12;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  double *v27;
  double v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double *v48;
  double *v49;
  double v50;
  uint64_t v51;
  uint64_t v53;
  __int128 v54;
  uint64_t v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;

  *(_DWORD *)(a2 + 5600) = 0;
  v9 = *(_DWORD *)(a1 + 768);
  if (!v9)
    return 1;
  v12 = a3.n128_f64[0];
  v14 = (unsigned int *)(a1 + 56776);
  v15 = a1 + 776;
  v16 = *(_DWORD *)(a1 + 56776);
  if (v16)
  {
    v17 = v15 + 56 * v16 - 56;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LPFGContainers.h", 1740, (uint64_t)"!imu_samples_buffer_.empty()", 28, (uint64_t)"The IMU sample buffer cannoty be empty!", 39, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_70;
    }
    v16 = *v14;
    v9 = *(_DWORD *)(a1 + 768);
    v17 = v15 + 56 * *v14 - 56;
    if (!v9)
    {
      v18 = 0;
      if (v16)
        goto LABEL_17;
      goto LABEL_20;
    }
  }
  v18 = v9;
  v19 = (double *)(a1 + 16);
  v20 = 24 * v9;
  while (*(v19 - 1) < v12)
  {
    v19 += 3;
    v20 -= 24;
    if (!v20)
      goto LABEL_16;
  }
  v21 = *((_DWORD *)v19 + 1);
  v22 = v21 - *(_DWORD *)v19 + 1;
  v17 = v15 + 56 * v21;
  if (v21 != v22)
  {
    v23 = v15 + 56 * v22;
    v24 = 0x6DB6DB6DB6DB6DB7 * ((v17 - v23) >> 3);
    v17 = v23;
    do
    {
      v25 = v24 >> 1;
      v26 = (double *)(v17 + 56 * (v24 >> 1));
      v28 = *v26;
      v27 = v26 + 7;
      v24 += ~(v24 >> 1);
      if (v28 < v12)
        v17 = (uint64_t)v27;
      else
        v24 = v25;
    }
    while (v24);
  }
LABEL_16:
  if (v16)
  {
LABEL_17:
    v29 = v15 + 56 * v16 - 56;
    if (!v9)
      goto LABEL_25;
    goto LABEL_22;
  }
LABEL_20:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LPFGContainers.h", 1740, (uint64_t)"!imu_samples_buffer_.empty()", 28, (uint64_t)"The IMU sample buffer cannoty be empty!", 39, (void (*)(void **))sub_21023DDB0))
  {
LABEL_70:
    abort();
  }
  v16 = *v14;
  v18 = *(unsigned int *)(a1 + 768);
  v29 = v15 + 56 * *v14 - 56;
  if (!*(_DWORD *)(a1 + 768))
  {
LABEL_25:
    v32 = v29;
    goto LABEL_26;
  }
LABEL_22:
  v30 = (double *)(a1 + 16);
  v31 = 24 * v18;
  while (*(v30 - 1) < a4)
  {
    v30 += 3;
    v31 -= 24;
    if (!v31)
      goto LABEL_25;
  }
  v43 = *((_DWORD *)v30 + 1);
  v44 = v43 - *(_DWORD *)v30 + 1;
  v32 = v15 + 56 * v43;
  if (v43 != v44)
  {
    v45 = v15 + 56 * v44;
    v46 = 0x6DB6DB6DB6DB6DB7 * ((v32 - v45) >> 3);
    v32 = v45;
    do
    {
      v47 = v46 >> 1;
      v48 = (double *)(v32 + 56 * (v46 >> 1));
      v50 = *v48;
      v49 = v48 + 7;
      v46 += ~(v46 >> 1);
      if (v50 < a4)
        v32 = (uint64_t)v49;
      else
        v46 = v47;
    }
    while (v46);
  }
LABEL_26:
  v33 = (__n128 *)(a1 + 784);
  a3.n128_u64[0] = *(_QWORD *)v17;
  if (*(double *)v17 <= v12)
  {
    v38 = *(_DWORD *)(a2 + 5600);
    if (*(double *)v32 > v12)
      goto LABEL_44;
    v39 = *(_QWORD *)(v32 + 24);
    a3 = *(__n128 *)(v32 + 8);
    v40 = *(_OWORD *)(v32 + 32);
    v41 = *(_QWORD *)(v32 + 48);
    v42 = a2 + 56 * v38;
    *(double *)v42 = v12;
    *(__n128 *)(v42 + 8) = a3;
    *(_QWORD *)(v42 + 24) = v39;
    *(_OWORD *)(v42 + 32) = v40;
    *(_QWORD *)(v42 + 48) = v41;
  }
  else
  {
    if (v17 == v15)
    {
      a6.f64[0] = *(float64_t *)(a1 + 800);
      a5 = *v33;
      v35 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      v36 = *(_QWORD *)(a1 + 824);
      a3 = *(__n128 *)(a1 + 808);
      v37 = vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
    }
    else if (v17 == v29 && a3.n128_f64[0] <= v12)
    {
      v34 = v15 + 56 * (v16 - 1);
      a5 = *(__n128 *)(v34 + 8);
      a6.f64[0] = *(float64_t *)(v34 + 24);
      v35 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      a3 = *(__n128 *)(v34 + 32);
      v36 = *(_QWORD *)(v34 + 48);
      v37 = vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
    }
    else
    {
      a5.n128_f64[0] = (v12 - *(double *)(v17 - 56)) / (a3.n128_f64[0] - *(double *)(v17 - 56));
      a3.n128_u64[0] = *(_QWORD *)(v17 + 48);
      a6.f64[0] = *(float64_t *)(v17 - 8);
      v36 = *(_OWORD *)&vaddq_f64(a6, vmulq_f64(vsubq_f64((float64x2_t)a3, a6), (float64x2_t)a5));
      a3 = (__n128)vaddq_f64(*(float64x2_t *)(v17 - 24), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v17 + 32), *(float64x2_t *)(v17 - 24)), a5.n128_f64[0]));
      v37 = vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
      a6.f64[0] = *(float64_t *)(v17 + 24);
      a9.f64[0] = *(float64_t *)(v17 - 32);
      a6 = vaddq_f64(a9, vmulq_f64((float64x2_t)a5, vsubq_f64(a6, a9)));
      a5 = (__n128)vaddq_f64(*(float64x2_t *)(v17 - 48), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v17 + 8), *(float64x2_t *)(v17 - 48)), a5.n128_f64[0]));
      v35 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    }
    v38 = *(_DWORD *)(a2 + 5600);
    v51 = a2 + 56 * v38;
    *(double *)v51 = v12;
    *(float64_t *)(v51 + 24) = a6.f64[0];
    a5.n128_u64[1] = v35;
    *(__n128 *)(v51 + 8) = a5;
    *(_QWORD *)(v51 + 48) = v36;
    a3.n128_u64[1] = v37;
    *(__n128 *)(v51 + 32) = a3;
  }
  *(_DWORD *)(a2 + 5600) = ++v38;
LABEL_44:
  if (v38 - 1227133513 * ((unint64_t)(v32 - v17) >> 3) > 0x64)
    return 0;
  for (; v17 != v32; v17 += 56)
  {
    v53 = a2 + 56 * v38;
    *(_QWORD *)v53 = *(_QWORD *)v17;
    v54 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)(v53 + 24) = *(_QWORD *)(v17 + 24);
    *(_OWORD *)(v53 + 8) = v54;
    a3 = *(__n128 *)(v17 + 32);
    *(_QWORD *)(v53 + 48) = *(_QWORD *)(v17 + 48);
    *(__n128 *)(v53 + 32) = a3;
    *(_DWORD *)(a2 + 5600) = ++v38;
  }
  a3.n128_u64[0] = *(_QWORD *)v32;
  if (*(double *)v32 <= a4)
  {
    if (*(double *)v32 < a4 && a3.n128_f64[0] > v12)
    {
      if (v38 == 100)
        return 0;
      v62 = *(_QWORD *)(v32 + 24);
      v73 = *(_OWORD *)(v32 + 8);
      v63 = *(_OWORD *)(v32 + 32);
      v64 = *(_QWORD *)(v32 + 48);
      v65 = a2 + 56 * v38;
      *(_QWORD *)v65 = a3.n128_u64[0];
      *(_OWORD *)(v65 + 8) = v73;
      *(_QWORD *)(v65 + 24) = v62;
      *(_OWORD *)(v65 + 32) = v63;
      *(_QWORD *)(v65 + 48) = v64;
      *(_DWORD *)(a2 + 5600) = ++v38;
    }
    v72 = *(_QWORD *)(v32 + 24);
    v71 = *(_OWORD *)(v32 + 8);
    if (v38 == 100)
      return 0;
    v66 = *(_OWORD *)(v32 + 32);
    v70 = *(_QWORD *)(v32 + 48);
    v67 = a2 + 56 * v38;
    *(double *)v67 = a4;
    *(_OWORD *)(v67 + 8) = v71;
    *(_QWORD *)(v67 + 24) = v72;
    *(_OWORD *)(v67 + 32) = v66;
    *(_QWORD *)(v67 + 48) = v70;
    goto LABEL_68;
  }
  if (v38 == 100)
    return 0;
  if (v32 == v15)
  {
    a6.f64[0] = *(float64_t *)(a1 + 800);
    v59 = *(int8x16_t *)v33;
    v60 = vextq_s8(v59, v59, 8uLL).u64[0];
    v56 = *(_QWORD *)(a1 + 824);
    v57 = *(int8x16_t *)(a1 + 808);
LABEL_66:
    v58 = vextq_s8(v57, v57, 8uLL).u64[0];
    goto LABEL_67;
  }
  if (a3.n128_f64[0] <= a4 && v32 == v15 + 56 * *v14 - 56)
  {
    v68 = v15 + 56 * (*v14 - 1);
    v59 = *(int8x16_t *)(v68 + 8);
    a6.f64[0] = *(float64_t *)(v68 + 24);
    v60 = vextq_s8(v59, v59, 8uLL).u64[0];
    v57 = *(int8x16_t *)(v68 + 32);
    v56 = *(_QWORD *)(v68 + 48);
    goto LABEL_66;
  }
  a5.n128_f64[0] = (a4 - *(double *)(v32 - 56)) / (a3.n128_f64[0] - *(double *)(v32 - 56));
  a3.n128_u64[0] = *(_QWORD *)(v32 + 48);
  a6.f64[0] = *(float64_t *)(v32 - 8);
  v56 = *(_OWORD *)&vaddq_f64(a6, vmulq_f64(vsubq_f64((float64x2_t)a3, a6), (float64x2_t)a5));
  v57 = (int8x16_t)vaddq_f64(*(float64x2_t *)(v32 - 24), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v32 + 32), *(float64x2_t *)(v32 - 24)), a5.n128_f64[0]));
  v58 = vextq_s8(v57, v57, 8uLL).u64[0];
  a6.f64[0] = *(float64_t *)(v32 + 24);
  a9.f64[0] = *(float64_t *)(v32 - 32);
  *(_QWORD *)&a6.f64[0] = *(_OWORD *)&vaddq_f64(a9, vmulq_f64((float64x2_t)a5, vsubq_f64(a6, a9)));
  v59 = (int8x16_t)vaddq_f64(*(float64x2_t *)(v32 - 48), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v32 + 8), *(float64x2_t *)(v32 - 48)), a5.n128_f64[0]));
  v60 = vextq_s8(v59, v59, 8uLL).u64[0];
LABEL_67:
  v69 = a2 + 56 * v38;
  *(double *)v69 = a4;
  *(float64_t *)(v69 + 24) = a6.f64[0];
  v59.i64[1] = v60;
  *(int8x16_t *)(v69 + 8) = v59;
  *(_QWORD *)(v69 + 48) = v56;
  v57.i64[1] = v58;
  *(int8x16_t *)(v69 + 32) = v57;
LABEL_68:
  *(_DWORD *)(a2 + 5600) = v38 + 1;
  return 1;
}

double sub_20FA1C400(uint64_t a1)
{
  float64x2_t v3;
  uint64_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  float64x2_t *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v24;
  double v26;
  double v28;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v43;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  double v55;
  uint64_t *v59;
  double v60;
  float64x2_t v62;
  float64x2_t v70;
  float64x2_t *v73;
  double v74;
  double v75;
  double v76;
  _BYTE *v77;
  _BYTE *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v91;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v99;
  double v102;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v115;
  float64x2_t v117;
  float64x2_t v121;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  double v134;
  double result;
  float64x2_t v136;
  float64x2_t v137;
  float64_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  uint64_t *v155;
  uint64_t v156;
  double v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  uint64_t v167;
  float64_t v168;
  double v169;
  float64_t v170;
  double v171;
  float64x2_t v172;
  uint64_t v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  float64_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  float64x2_t v181;
  double v182;
  _BYTE v183[936];
  float64x2_t v184;
  float64x2_t v185;
  float64_t v186;
  float64x2_t v187;
  double v188;
  float64x2_t v189;
  float64_t v190;
  float64x2_t v191;
  float64_t v192;
  float64x2_t v193;
  float64_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64_t v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64_t v201;
  float64x2_t v202;
  float64_t v203;
  float64x2_t v204;
  float64_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64_t v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  float64_t v217;
  float64x2_t v218;
  float64_t v219;
  float64x2_t v220;
  float64_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64_t v226;
  double v227;
  double v228;
  _BYTE __src[1800];
  float64x2_t v230[2];
  __int128 v231;
  uint64_t v232;
  float64x2_t v233;
  double v234;
  float64x2_t v235;
  double v236;
  float64x2_t v237;
  double v238;
  float64x2_t v239;
  double v240;
  float64x2_t v241;
  double v242;
  float64x2_t v243;
  double v244;
  float64x2_t v245;
  float64_t v246;
  float64x2_t v247;
  float64_t v248;
  float64x2_t v249;
  float64_t v250;
  float64x2_t v251;
  float64_t v252;
  float64x2_t v253;
  float64_t v254;
  float64x2_t v255;
  float64_t v256;
  float64x2_t v257;
  float64x2_t v258[2];
  float64x2_t v259;
  float64_t v260;
  float64x2_t v261;
  float64_t v262;
  float64x2_t v263;
  float64_t v264;
  float64x2_t v265;
  float64_t v266;
  float64x2_t v267;
  float64_t v268;
  float64x2_t v269;
  float64_t v270;
  float64x2_t v271;
  float64_t v272;
  float64x2_t v273;
  float64x2_t v274[2];
  float64x2_t v275;
  float64_t v276;
  double v277;
  double v278;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v5;
  v8 = v7;
  v167 = v9;
  v11 = *(double *)(v10 + 64);
  v12 = *(double *)(v10 + 72);
  v13 = v5 + 18;
  v15 = *(double *)(v10 + 96);
  v14 = *(double *)(v10 + 104);
  v17 = *(double *)(v10 + 80);
  v16 = *(double *)(v10 + 88);
  v18 = *(double *)(v10 + 176);
  v19 = *(float64x2_t *)(v10 + 160);
  v20 = *(double *)(v10 + 200);
  v21 = *(float64x2_t *)(v10 + 184);
  v22 = *(double *)(v10 + 224);
  v23 = *(float64x2_t *)(v10 + 208);
  v24 = *(double *)(v10 + 248);
  _Q5 = *(float64x2_t *)(v10 + 232);
  v26 = *(double *)(v10 + 272);
  _Q3 = *(float64x2_t *)(v10 + 256);
  v28 = *(double *)(v10 + 296);
  _Q1 = *(float64x2_t *)(v10 + 280);
  v31 = *(double *)(v10 + 112);
  v30 = *(double *)(v10 + 120);
  v33 = *(double *)(v10 + 144);
  v32 = *(double *)(v10 + 152);
  v34 = *(double *)(v10 + 128);
  v35 = *(double *)(v10 + 136);
  v36 = *(float64x2_t *)(v10 + 16);
  v231 = *(_OWORD *)(v10 + 32);
  v232 = *(_QWORD *)(v10 + 48);
  v230[0] = *(float64x2_t *)v10;
  v230[1] = v36;
  v37 = *((unsigned int *)v4 + 1400);
  if ((_DWORD)v37 != 1)
  {
    v38 = 0;
    v39 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v19, v11), (float64x2_t)0, v21), (float64x2_t)0, v23);
    v40 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v19, v16), v21, v12), (float64x2_t)0, v23);
    _D31 = v18 * v16 + v20 * v12 + v22 * 0.0;
    _Q8 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v15), v21, v14), v23, v17);
    v43 = v18 * v15 + v20 * v14 + v22 * v17;
    v166 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q5.f64[0]), v40, _Q5, 1), _Q8, v24);
    __asm { FMLA            D29, D31, V5.D[1] }
    v165 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q3.f64[0]), v40, _Q3, 1), _Q8, v26);
    __asm { FMLA            D29, D31, V3.D[1] }
    v164 = _D29 + v43 * v26;
    v163 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q1.f64[0]), v40, _Q1, 1), _Q8, v28);
    __asm { FMLA            D29, D31, V1.D[1] }
    v162 = _D29 + v43 * v28;
    v51 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v19, v31), (float64x2_t)0, v21), (float64x2_t)0, v23);
    v52 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v19, v35), v21, v30), (float64x2_t)0, v23);
    _D23 = v18 * v35 + v20 * v30 + v22 * 0.0;
    v54 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v33), v21, v32), v23, v34);
    v55 = v18 * v33 + v20 * v32 + v22 * v34;
    v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q5.f64[0]), v52, _Q5, 1), v54, v24);
    __asm { FMLA            D7, D23, V5.D[1] }
    v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q3.f64[0]), v52, _Q3, 1), v54, v26);
    __asm { FMLA            D4, D23, V3.D[1] }
    v159 = _D4 + v55 * v26;
    v158 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q1.f64[0]), v52, _Q1, 1), v54, v28);
    __asm { FMLA            D2, D23, V1.D[1] }
    v157 = _D2 + v55 * v28;
    v155 = v4;
    v156 = ((v37 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v59 = v4;
    do
    {
      v178 = *(double *)v59;
      v60 = *((double *)v59 + 6);
      v173 = v59[7];
      _Q0 = *(float64x2_t *)(v59 + 1);
      v62 = vmlaq_laneq_f64(vmulq_n_f64(v161, _Q0.f64[0]), v160, _Q0, 1);
      _D21 = v159;
      __asm { FMLA            D3, D21, V0.D[1] }
      *(_QWORD *)&_Q0.f64[0] = v59[3];
      v179 = vmlaq_n_f64(v62, v158, _Q0.f64[0]);
      v180 = _D3 + v157 * _Q0.f64[0];
      _Q0 = *((float64x2_t *)v59 + 2);
      _D7 = v164;
      __asm { FMLA            D3, D7, V0.D[1] }
      v181 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, _Q0.f64[0]), v165, _Q0, 1), v163, v60);
      v182 = _D3 + v162 * v60;
      *(_QWORD *)&_Q0.f64[0] = v59[10];
      _Q1 = *((float64x2_t *)v59 + 4);
      __asm { FMLA            D3, D21, V1.D[1] }
      v174 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v161, _Q1.f64[0]), v160, _Q1, 1), v158, _Q0.f64[0]);
      v175 = _D3 + v157 * _Q0.f64[0];
      *(_QWORD *)&_Q0.f64[0] = v59[13];
      _Q1 = *(float64x2_t *)(v59 + 11);
      v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, _Q1.f64[0]), v165, _Q1, 1), v163, _Q0.f64[0]);
      __asm { FMLA            D3, D7, V1.D[1] }
      _Q0.f64[0] = _D3 + v162 * _Q0.f64[0];
      v176 = v70;
      v177 = _Q0.f64[0];
      if (v38)
        v73 = &v184;
      else
        v73 = &v233;
      sub_20F4BB8D4(v167, v73, (uint64_t)v183, (uint64_t)&v231, v230, (uint64_t)&v178, (uint64_t)&v173, _Q0, _Q1.f64[0], v70);
      if ((v38 & 1) != 0)
        v77 = v8;
      else
        v77 = __src;
      if ((v38 & 1) != 0)
        v78 = __src;
      else
        v78 = v8;
      sub_20F4BD84C((uint64_t)v77, (uint64_t)v78, (uint64_t)v73, (uint64_t)v183, v74, v75, v76);
      if (v38)
      {
        _Q1.f64[1] = v239.f64[1];
        v88.f64[1] = v212.f64[1];
        _Q8.f64[0] = v213;
        __asm { FMLA            D0, D8, V1.D[1] }
        v85.f64[0] = _D0 + v215 * v240;
        _V18.D[1] = v241.f64[1];
        v91.f64[1] = v211.f64[1];
        __asm { FMLA            D0, D8, V18.D[1] }
        _Q10.f64[0] = _D0 + v215 * v242;
        _V28.D[1] = v243.f64[1];
        v91.f64[0] = v228;
        __asm { FMLA            D0, D8, V28.D[1] }
        v79.f64[0] = _D0 + v215 * v244;
        v86.f64[0] = v256;
        v83.f64[0] = v252;
        v88.f64[0] = v250;
        v81.f64[0] = v254;
        v80.f64[0] = v277;
        v82.f64[0] = v217;
        v84.f64[0] = v268;
        *(_QWORD *)&v95 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(v85, v91, v83), vaddq_f64(v82, v84), v80);
        v96.f64[1] = v267.f64[1];
        v97 = vaddq_f64(v216, v267);
        _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v239.f64[0]), v212, v239, 1), v214, v240), v251, v228), v97, v277);
        v97.f64[0] = v219;
        v96.f64[0] = v270;
        v99 = vmlaq_f64(vmlaq_f64(_Q10, v91, v81), vaddq_f64(v97, v96), v80);
        v96.f64[1] = v269.f64[1];
        _Q20 = vaddq_f64(v218, v269);
        _Q25 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v241.f64[0]), v212, v241, 1), v214, v242), v253, v228), _Q20, v277);
        _Q20.f64[0] = v221;
        v96.f64[0] = v272;
        *(_QWORD *)&v102 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(v79, v91, v86), vaddq_f64(_Q20, v96), v80);
        v96.f64[1] = v271.f64[1];
        _Q11 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v243.f64[0]), v212, v243, 1), v214, v244), v255, v228), vaddq_f64(v220, v271), v277);
        v96.f64[0] = v201;
        _Q20.f64[0] = v197;
        v104.f64[1] = v239.f64[1];
        v168 = v197;
        __asm { FMLA            D31, D20, V1.D[1] }
        _Q1.f64[0] = _D31 + v199 * v240;
        *(_QWORD *)&v169 = *(_OWORD *)&vmlaq_f64(_Q1, v80, vaddq_f64(v83, v96));
        v106.f64[1] = v196.f64[1];
        v107.f64[1] = v239.f64[1];
        _Q1 = vaddq_f64(v253, v202);
        v171 = v242;
        v109 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v241.f64[0]), v196, v241, 1), v198, v242), _Q1, v277);
        v267 = _Q5;
        _Q1.f64[0] = v205;
        __asm { FMLA            D5, D20, V28.D[1] }
        v104.f64[0] = _Q5.f64[0] + v199 * v244;
        *(_QWORD *)&v104.f64[0] = *(_OWORD *)&vmlaq_f64(v104, v80, vaddq_f64(v86, _Q1));
        v268 = v95;
        v269 = _Q25;
        _Q25.f64[0] = v186;
        __asm { FMLA            D1, D25, V28.D[1] }
        v96.f64[0] = v190;
        v170 = v239.f64[1];
        _Q1.f64[0] = _Q1.f64[0] + v188 * v244;
        v270 = v99.f64[0];
        v271 = _Q11;
        v272 = v102;
        v110.f64[1] = v189.f64[1];
        v99.f64[0] = v203;
        v110.f64[0] = v227;
        _Q19 = vaddq_f64(v81, v99);
        v172 = _Q19;
        __asm { FMLA            D19, D25, V18.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v188 * v242;
        _Q10.f64[0] = v192;
        _Q11.f64[0] = v194;
        _Q19 = vmlaq_f64(_Q19, v80, _Q10);
        v251 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v239.f64[0]), v196, v239, 1), v198, v240), vaddq_f64(v251, v200), v277);
        v253 = v109;
        v255 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v243.f64[0]), v196, v243, 1), v198, v244), vaddq_f64(v255, v204), v277);
        v256 = v104.f64[0];
        _Q1 = vmlaq_f64(_Q1, v80, _Q11);
        v239 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v239.f64[0]), v185, v239, 1), v187, v240), v189, v277);
        v241 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v241.f64[0]), v185, v241, 1), v187, v242), v191, v277);
        v243 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v243.f64[0]), v185, v243, 1), v187, v244), v193, v277);
        _Q10.f64[1] = v233.f64[1];
        _Q11.f64[1] = v235.f64[1];
        _V9.D[1] = v237.f64[1];
        v242 = _Q19.f64[0];
        v244 = _Q1.f64[0];
        __asm
        {
          FMLA            D1, D8, V10.D[1]
          FMLA            D19, D8, V11.D[1]
          FMLA            D14, D8, V9.D[1]
        }
        _Q1.f64[0] = _Q1.f64[0] + v215 * v234;
        _Q19.f64[0] = _Q19.f64[0] + v215 * v236;
        _Q8.f64[0] = _Q14.f64[0] + v215 * v238;
        _Q14.f64[0] = v246;
        v3.f64[0] = v248;
        v107.f64[0] = v262;
        v115.f64[1] = v261.f64[1];
        v115.f64[0] = v264;
        _Q19 = vmlaq_f64(vmlaq_f64(_Q19, v91, v3), v115, v110);
        v117.f64[1] = v263.f64[1];
        v117.f64[0] = v266;
        _Q8 = vmlaq_f64(vmlaq_f64(_Q8, v91, v88), v117, v110);
        v261 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v233.f64[0]), v212, v233, 1), v214, v234), v245, v228), v261, v227);
        *(_QWORD *)&v262 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(_Q1, v91, _Q14), v107, v110);
        v263 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v235.f64[0]), v212, v235, 1), v214, v236), v247, v228), v263, v227);
        v264 = _Q19.f64[0];
        v265 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v211, v237.f64[0]), v212, v237, 1), v214, v238), v249, v228), v265, v227);
        v266 = _Q8.f64[0];
        _Q8.f64[0] = v197;
        __asm { FMLA            D4, D8, V10.D[1] }
        v106.f64[0] = _D4 + v199 * v234;
        _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v233.f64[0]), v196, v233, 1), v198, v234), v245, v227);
        __asm { FMLA            D19, D8, V11.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v199 * v236;
        _Q19 = vmlaq_f64(_Q19, v3, v110);
        v245 = _Q1;
        v247 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v235.f64[0]), v196, v235, 1), v198, v236), v247, v227);
        *(_QWORD *)&v246 = *(_OWORD *)&vmlaq_f64(v106, _Q14, v110);
        v248 = _Q19.f64[0];
        __asm { FMLA            D1, D8, V9.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v199 * v238;
        v121 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v237.f64[0]), v196, v237, 1), v198, v238), v249, v227);
        v249 = v121;
        v252 = v169;
        *(_QWORD *)&v250 = *(_OWORD *)&vmlaq_f64(_Q1, v88, v110);
        v233 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v233.f64[0]), v185, v233, 1), v187, v234);
        v235 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v235.f64[0]), v185, v235, 1), v187, v236);
        __asm
        {
          FMLA            D1, D25, V10.D[1]
          FMLA            D2, D25, V11.D[1]
        }
        v234 = _Q1.f64[0] + v188 * v234;
        v236 = _D2 + v188 * v236;
        _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v237.f64[0]), v185, v237, 1), v187, v238);
        v237 = _Q0;
        _Q1.f64[1] = v170;
        __asm { FMLA            D0, D25, V1.D[1] }
        _Q0.f64[0] = _Q0.f64[0] + v188 * v240;
        v124 = vmlaq_f64(_Q0, v80, v96);
        __asm { FMLA            D1, D25, V9.D[1] }
        v240 = v124.f64[0];
        v238 = _Q1.f64[0] + v188 * v238;
        v124.f64[0] = v226;
        v121.f64[0] = v276;
        v125 = vaddq_f64(v124, v121);
        v121.f64[1] = v275.f64[1];
        v121.f64[0] = v260;
        __asm { FMLA            D19, D8, V18.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v199 * v171;
        v126 = vaddq_f64(vmulq_f64(v91, v121), vmulq_f64(v80, v125));
        v274[1] = vaddq_f64(vmulq_n_f64(v258[1], v228), vmulq_n_f64(vaddq_f64(v224, v274[1]), v277));
        v275 = vaddq_f64(vmulq_n_f64(v259, v228), vmulq_n_f64(vaddq_f64(v225, v275), v277));
        v273 = vaddq_f64(vmulq_n_f64(v257, v228), vmulq_n_f64(vaddq_f64(v222, v273), v277));
        v274[0] = vaddq_f64(vmulq_n_f64(v258[0], v228), vmulq_n_f64(vaddq_f64(v223, v274[0]), v277));
        v276 = v126.f64[0];
        v126.f64[0] = v210;
        v259 = vmulq_n_f64(vaddq_f64(v259, v209), v277);
        v258[1] = vmulq_n_f64(vaddq_f64(v258[1], v208), v277);
        v258[0] = vmulq_n_f64(vaddq_f64(v258[0], v207), v277);
        v257 = vmulq_n_f64(vaddq_f64(v257, v206), v277);
        *(_QWORD *)&v260 = *(_OWORD *)&vmulq_f64(v80, vaddq_f64(v121, v126));
        v278 = v277 * (v228 + v278);
        *(_QWORD *)&v254 = *(_OWORD *)&vmlaq_f64(_Q19, v80, v172);
        v277 = v277 * v227;
      }
      ++v38;
      v59 += 7;
    }
    while (v156 != v38);
    if ((v155[700] & 1) == 0)
      memcpy(v8, __src, 0x708uLL);
  }
  bzero(v6, 0x700uLL);
  v127 = v233;
  v128 = v235;
  v129 = v236;
  v130 = v237;
  v6[1].f64[0] = v234;
  *v6 = v127;
  v6[8].f64[1] = v129;
  *(float64x2_t *)((char *)v6 + 120) = v128;
  v128.f64[0] = v240;
  v6[16].f64[0] = v238;
  v6[15] = v130;
  v131 = v239;
  v132 = v241;
  v133 = v243;
  v130.f64[0] = v242;
  v134 = v244;
  v13[5].f64[1] = v128.f64[0];
  *(float64x2_t *)((char *)v13 + 72) = v131;
  v13[13].f64[0] = v130.f64[0];
  v13[12] = v132;
  v13[20].f64[1] = v134;
  *(float64x2_t *)((char *)v13 + 312) = v133;
  result = v277;
  v128.f64[0] = v254;
  v6[24].f64[0] = v277;
  v6[32].f64[0] = result;
  v6[40].f64[0] = result;
  v136 = v245;
  v137 = v247;
  v138 = v248;
  v139 = v249;
  v6[4].f64[0] = v246;
  v6[3] = v136;
  v6[11].f64[1] = v138;
  *(float64x2_t *)((char *)v6 + 168) = v137;
  *v13 = v139;
  v137.f64[0] = v252;
  v13[1].f64[0] = v250;
  v140 = v251;
  v141 = v253;
  v142 = v255;
  v139.f64[0] = v256;
  v13[8].f64[1] = v137.f64[0];
  *(float64x2_t *)((char *)v13 + 120) = v140;
  v13[16].f64[0] = v128.f64[0];
  v13[15] = v141;
  v13[23].f64[1] = v139.f64[0];
  *(float64x2_t *)((char *)v13 + 360) = v142;
  v6[48].f64[0] = result;
  v6[56].f64[0] = result;
  v6[64].f64[0] = result;
  v143 = v257;
  v144 = *(float64x2_t *)((char *)v258 + 8);
  v141.f64[0] = v258[1].f64[1];
  v145 = v259;
  v139.f64[0] = v260;
  v13[53].f64[1] = v258[0].f64[0];
  *(float64x2_t *)((char *)v13 + 840) = v143;
  v13[61].f64[0] = v141.f64[0];
  v13[60] = v144;
  v13[68].f64[1] = v139.f64[0];
  *(float64x2_t *)((char *)v13 + 1080) = v145;
  v6[72].f64[0] = result;
  v6[80].f64[0] = result;
  v6[88].f64[0] = result;
  v146 = v261;
  v147 = v263;
  v141.f64[0] = v264;
  v148 = v265;
  v139.f64[0] = v266;
  v6[7].f64[0] = v262;
  v6[6] = v146;
  v6[14].f64[1] = v141.f64[0];
  *(float64x2_t *)((char *)v6 + 216) = v147;
  v13[4].f64[0] = v139.f64[0];
  v13[3] = v148;
  v149 = v267;
  v150 = v269;
  v141.f64[0] = v270;
  v151 = v271;
  v139.f64[0] = v272;
  v13[11].f64[1] = v268;
  *(float64x2_t *)((char *)v13 + 168) = v149;
  v13[19].f64[0] = v141.f64[0];
  v13[18] = v150;
  v13[26].f64[1] = v139.f64[0];
  *(float64x2_t *)((char *)v13 + 408) = v151;
  v149.f64[0] = v278;
  v6[51].f64[0] = v278;
  v6[59].f64[0] = v149.f64[0];
  v6[67].f64[0] = v149.f64[0];
  v152 = v273;
  v153 = *(float64x2_t *)((char *)v274 + 8);
  v141.f64[0] = v274[1].f64[1];
  v154 = v275;
  v139.f64[0] = v276;
  v13[56].f64[1] = v274[0].f64[0];
  *(float64x2_t *)((char *)v13 + 888) = v152;
  v13[64].f64[0] = v141.f64[0];
  v13[63] = v153;
  v13[71].f64[1] = v139.f64[0];
  *(float64x2_t *)((char *)v13 + 1128) = v154;
  v6[96].f64[0] = result;
  v6[104].f64[0] = result;
  v6[112].f64[0] = result;
  return result;
}

void sub_20FA1CF9C(void *a1, uint64_t a2)
{
  const double *v3;
  double *v4;
  _BYTE __src[3840];

  v3 = **(const double ***)(a2 + 8);
  if (v3 == a1 || (v4 = *(double **)(a2 + 16), v4 == a1))
  {
    sub_20FA1CF9C(__src);
    memcpy(a1, __src, 0xF00uLL);
  }
  else
  {
    sub_20E8BE654(1, 0, 15, 32, 15, v3, 15, v4, *(double *)(a2 + 24), 0.0, 15, (double *)a1, 15);
  }
}

uint64_t sub_20FA1D038(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20FA1D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1D3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1D404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA1D428(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20FA1D7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1D7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA1D818(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20FA1DBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FA1DBE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA1DC08(uint64_t a1, uint64_t a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  simd_double2 v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  simd_double2x2 v64;
  simd_double2x2 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *(float64x2_t **)a1;
  v2 = *(float64x2_t **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    if (*(_DWORD *)(a2 + 212))
    {
      v8 = *(float64x2_t *)(a2 + 192);
      v9 = vaddq_f64(v8, v8);
      v10 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
      v11 = 20;
      v12 = *v2;
      do
      {
        v13 = vmulq_f64(v12, v12);
        v14 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13);
        v13.f64[0] = vaddvq_f64(v13);
        v15 = *(double *)(a2 + 168) * v13.f64[0]
            + 1.0
            + v13.f64[0] * (*(double *)(a2 + 176) * v13.f64[0])
            + v13.f64[0] * (v13.f64[0] * (*(double *)(a2 + 184) * v13.f64[0]));
        v16 = vmulq_n_f64(v9, v12.f64[0]);
        v17 = vaddq_f64(v12, v12);
        if (v15 == 0.0)
          v15 = 1.0;
        v12 = vdivq_f64(vsubq_f64(*v2, vaddq_f64(vmulq_laneq_f64(v16, v12, 1), vmulq_f64(v10, vaddq_f64(vmulq_f64(v12, v17), (float64x2_t)vdupq_lane_s64(v14, 0))))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0));
        --v11;
      }
      while (v11);
      *v3 = v12;
      v3[1].f64[0] = 1.0;
      if (!v4)
        goto LABEL_34;
    }
    else
    {
      v37 = *(double *)(a2 + 168);
      v38 = *(double *)(a2 + 176);
      if (*(_DWORD *)(a2 + 208) > 2u)
      {
        v59 = 20;
        v60 = v2->f64[1];
        v61 = v2->f64[0];
        do
        {
          v62 = v60 * v60 + v61 * v61;
          v63 = v37 * v62 + 1.0 + v62 * (v38 * v62) + v62 * (v62 * (*(double *)(a2 + 184) * v62));
          if (v63 == 0.0)
            v63 = 1.0;
          v61 = v2->f64[0] / v63;
          v60 = v2->f64[1] / v63;
          --v59;
        }
        while (v59);
        v3->f64[0] = v61;
        v3->f64[1] = v60;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
      else
      {
        v39 = 20;
        v40 = v2->f64[1];
        v41 = v2->f64[0];
        do
        {
          v42 = v37 * (v40 * v40 + v41 * v41) + 1.0 + (v40 * v40 + v41 * v41) * (v38 * (v40 * v40 + v41 * v41));
          if (v42 == 0.0)
            v42 = 1.0;
          v41 = v2->f64[0] / v42;
          v40 = v2->f64[1] / v42;
          --v39;
        }
        while (v39);
        v3->f64[0] = v41;
        v3->f64[1] = v40;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
    }
    goto LABEL_33;
  }
  if (*(_DWORD *)(a2 + 212))
  {
    if (!sub_20EB28490(*(float64x2_t **)a1, v65.columns, v2, (double *)(a2 + 168), (float64x2_t *)(a2 + 192), 20))
      return 0;
  }
  else
  {
    v18 = *(double *)(a2 + 168);
    v19 = *(double *)(a2 + 176);
    if (*(_DWORD *)(a2 + 208) > 2u)
    {
      v43 = 20;
      v44 = v2->f64[1];
      v45 = v2->f64[0];
      do
      {
        v46 = v44 * v44 + v45 * v45;
        v47 = v18 * v46 + 1.0 + v46 * (v19 * v46) + v46 * (v46 * (*(double *)(a2 + 184) * v46));
        if (v47 == 0.0)
          v47 = 1.0;
        v45 = v2->f64[0] / v47;
        v44 = v2->f64[1] / v47;
        --v43;
      }
      while (v43);
      v3->f64[0] = v45;
      v3->f64[1] = v44;
      v48 = *(double *)(a2 + 168);
      v49 = *(double *)(a2 + 176);
      v50 = *(double *)(a2 + 184);
      _Q3 = *v3;
      _D5 = v3->f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v54 = v48 * _D4 + 1.0 + _D4 * _D4 * (v49 + v50 * _D4);
      v55 = vmulq_n_f64(*v3, v48 + v48 + _D4 * (v49 * 4.0 + v50 * 6.0 * _D4));
      v56 = vmulq_n_f64(v55, v3->f64[0]);
      v57 = vmulq_laneq_f64(v55, *v3, 1);
      v64.columns[1].f64[0] = v57.f64[0];
      v56.f64[0] = v54 + v56.f64[0];
      v64.columns[0] = (simd_double2)v56;
      v64.columns[1].f64[1] = v54 + v57.f64[1];
      if (sub_20E8BE318((double *)&v64) == 0.0)
        return 0;
    }
    else
    {
      v20 = 20;
      v21 = v2->f64[1];
      v22 = v2->f64[0];
      do
      {
        v23 = v18 * (v21 * v21 + v22 * v22) + 1.0 + (v21 * v21 + v22 * v22) * (v19 * (v21 * v21 + v22 * v22));
        if (v23 == 0.0)
          v23 = 1.0;
        v22 = v2->f64[0] / v23;
        v21 = v2->f64[1] / v23;
        --v20;
      }
      while (v20);
      v3->f64[0] = v22;
      v3->f64[1] = v21;
      v24 = *(double *)(a2 + 168);
      v25 = *(double *)(a2 + 176);
      _Q2 = *v3;
      _D4 = v3->f64[1];
      __asm { FMLA            D3, D4, V2.D[1] }
      v33 = v24 * _D3 + 1.0 + _D3 * _D3 * (v25 + _D3 * 0.0);
      v34 = vmulq_n_f64(*v3, v24 + v24 + _D3 * (v25 * 4.0 + _D3 * 0.0));
      v35 = vmulq_n_f64(v34, v3->f64[0]);
      v36 = vmulq_laneq_f64(v34, *v3, 1);
      v64.columns[1].f64[0] = v36.f64[0];
      v35.f64[0] = v33 + v35.f64[0];
      v64.columns[0] = (simd_double2)v35;
      v64.columns[1].f64[1] = v33 + v36.f64[1];
      if (sub_20E8BE318((double *)&v64) == 0.0)
        return 0;
    }
    sub_20E8BE3B0(&v64, &v65);
  }
  v58 = v65.columns[1];
  *(simd_double2 *)v5 = v65.columns[0];
  *(simd_double2 *)(v5 + 16) = v58;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v3[1].f64[0] = 1.0;
  if (v4)
  {
LABEL_33:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
LABEL_34:
  if (v6)
  {
    *(_QWORD *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  return 1;
}

BOOL sub_20FA1E060(float64x2_t *a1, uint64_t a2, float64x2_t *a3, double *a4, float64x2_t *a5)
{
  double v5;
  double v7;
  double v8;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;

  v5 = a3[1].f64[0];
  if (v5 >= 0.00000001)
  {
    _Q2 = vmulq_n_f64(*a3, 1.0 / v5);
    v7 = a4[1];
    v8 = a4[2];
    _D5 = vmuld_lane_f64(1.0 / v5, *a3, 1);
    __asm { FMLA            D17, D5, V2.D[1] }
    v15 = *a4 * *(double *)&_D17 + 1.0 + *(double *)&_D17 * *(double *)&_D17 * (v7 + v8 * *(double *)&_D17);
    v16 = *a4 + *a4 + *(double *)&_D17 * (v7 * 4.0 + *(double *)&_D17 * (v8 * 6.0));
    v17 = *a5;
    v18 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D17, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
    v19 = vaddq_f64(v17, v17);
    v20 = vmulq_n_f64(v19, _Q2.f64[0]);
    *a1 = vmlaq_n_f64(vaddq_f64(v18, vmulq_laneq_f64(v20, _Q2, 1)), _Q2, v15);
    v21 = vmulq_n_f64(_Q2, v16);
    v22 = vmulq_n_f64(v21, _Q2.f64[0]);
    v23 = vmulq_n_f64(v21, _D5);
    v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20.f64[0], 0);
    v24.f64[0] = vmuld_lane_f64(6.0, v17, 1) * _Q2.f64[0];
    v25 = vaddq_f64(v24, vmulq_laneq_f64(v19, _Q2, 1));
    v22.f64[0] = v15 + v22.f64[0];
    v26 = vaddq_f64(v25, v22);
    *(_QWORD *)&v25.f64[0] = vdupq_laneq_s64((int64x2_t)v25, 1).u64[0];
    v25.f64[1] = vmuld_lane_f64(6.0 * v17.f64[0], _Q2, 1) + v20.f64[1];
    v23.f64[1] = v15 + v23.f64[1];
    v27 = vmulq_n_f64(vaddq_f64(v25, v23), 1.0 / v5);
    v28 = vmulq_n_f64(v26, 1.0 / v5);
    *(float64x2_t *)a2 = v28;
    *(double *)(a2 + 16) = -(vmuld_n_f64(v28.f64[0], _Q2.f64[0]) + v28.f64[1] * _Q2.f64[1]);
    *(float64x2_t *)(a2 + 24) = v27;
    *(double *)(a2 + 40) = -(vmuld_n_f64(v27.f64[0], _Q2.f64[0]) + v27.f64[1] * _Q2.f64[1]);
  }
  return v5 >= 0.00000001;
}

unint64_t sub_20FA1E1A4(unint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5, int a6)
{
  unint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  unint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  int64x2_t v26;
  int8x16_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int64x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  size_t v70;
  uint64_t *v71;
  char *v72;
  BOOL v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  const double *v92;
  uint64_t v93;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  unint64_t v97;
  int8x16_t *v98;
  uint64_t v99;
  int8x16_t v100;
  unint64_t v101;
  int8x16_t *v102;
  int8x16_t *v103;
  unint64_t v106;
  unint64_t v107;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = a6;
    v8 = a3;
    v10 = result;
    result = 0;
    v11 = (unint64_t *)(v10 + 16);
    while (1)
    {
      v13 = *(unsigned int *)(v10 + 8);
      v12 = result + 1;
      v14 = (a5 & (result + 1 < v13)) != 0 ? v12 : v13;
      if ((_DWORD)v14)
        break;
LABEL_4:
      result = v12;
      if (v12 >= v6)
        return result;
    }
    v106 = result + 1;
    v15 = 0;
    v16 = *(_DWORD *)(*a4 + 4 * result);
    v17 = *(_QWORD *)(v10 + 88) + 8 * (*(_DWORD *)(v10 + 112) * result);
    v114 = v14;
    v115 = result;
    v113 = v16;
    v112 = v17;
    while (1)
    {
      v30 = *(_DWORD *)(*v8 + 4 * v15);
      v31 = *(int8x16_t **)a2;
      v32 = *(unsigned int *)(a2 + 16);
      v33 = *(_QWORD *)(v17 + 8 * v15);
      if (v7 && v30 > v16)
      {
        if (v33 == -1)
        {
          v34 = *(_QWORD *)(v10 + 80);
          if (v34)
          {
            v36 = *(_QWORD *)(v10 + 48);
            v35 = *(_QWORD *)(v10 + 56);
            v37 = ((v35 - v36) << 6) - 1;
            v38 = *(_QWORD *)(v10 + 72);
            if (v35 == v36)
              v37 = 0;
            v18 = *(_QWORD *)(v10 + 16)
                + 8
                * *(_QWORD *)(*(_QWORD *)(v36 + (((unint64_t)(v38 + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v38 + v34 - 1) & 0x1FF));
            *(_QWORD *)(v10 + 80) = v34 - 1;
            if ((unint64_t)(v37 - (v34 + v38) + 1) >= 0x400)
            {
              operator delete(*(void **)(v35 - 8));
              v17 = v112;
              v16 = v113;
              v14 = v114;
              result = v115;
              *(_QWORD *)(v10 + 56) -= 8;
            }
          }
          else
          {
            v44 = *(void **)(v10 + 24);
            v116 = 0;
            sub_20F1C5A3C(v11, v44, 9uLL, &v116);
            v17 = v112;
            v16 = v113;
            v14 = v114;
            result = v115;
            v18 = *(_QWORD *)(v10 + 24) - 72;
          }
          *(_QWORD *)(v17 + 8 * v15) = (v18 - *(_QWORD *)(v10 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
        }
        else
        {
          v18 = *v11 + 8 * v33;
        }
        v19 = (int64x2_t *)((char *)v31 + 8 * v16 + 8 * (_DWORD)v32 * v30);
        v20.i64[0] = v19[1].i64[0];
        v21 = *v19;
        v22 = (int64x2_t *)((char *)v19 + 8 * v32);
        v23 = v22[1].u64[0];
        v24 = (int8x16_t *)&v19[v32];
        v25 = v24[1].i64[0];
        v26 = vzip1q_s64(v21, *v22);
        v27 = (int8x16_t)vzip2q_s64(v21, *v22);
        v28 = vextq_s8(*v24, *v24, 8uLL).u64[0];
        v29 = vextq_s8(v27, v27, 8uLL).u64[0];
        *(_QWORD *)(v18 + 16) = v24->i64[0];
        *(int64x2_t *)v18 = v26;
        goto LABEL_12;
      }
      if (v33 != -1)
      {
        v18 = *v11 + 8 * v33;
        goto LABEL_90;
      }
      v39 = *(_QWORD *)(v10 + 80);
      if (v39)
      {
        v41 = *(_QWORD *)(v10 + 48);
        v40 = *(_QWORD *)(v10 + 56);
        v42 = ((v40 - v41) << 6) - 1;
        v43 = *(_QWORD *)(v10 + 72);
        if (v40 == v41)
          v42 = 0;
        v18 = *(_QWORD *)(v10 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v41 + (((unint64_t)(v43 + v39 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v43 + v39 - 1) & 0x1FF));
        *(_QWORD *)(v10 + 80) = v39 - 1;
        if ((unint64_t)(v42 - (v39 + v43) + 1) >= 0x400)
        {
          operator delete(*(void **)(v40 - 8));
          v17 = v112;
          v16 = v113;
          v14 = v114;
          result = v115;
          *(_QWORD *)(v10 + 56) -= 8;
        }
        goto LABEL_89;
      }
      v116 = 0;
      v46 = *(_QWORD *)(v10 + 16);
      v45 = *(int64x2_t **)(v10 + 24);
      v47 = (uint64_t)((uint64_t)v45->i64 - v46) >> 3;
      v110 = (unint64_t)v45 - v46;
      v48 = (uint64_t *)(v46 + (((unint64_t)v45 - v46) & 0xFFFFFFFFFFFFFFF8));
      v49 = *(_QWORD *)(v10 + 32);
      if ((unint64_t)(v49 - (_QWORD)v45) < 0x48)
      {
        v50 = v47 + 9;
        if ((unint64_t)(v47 + 9) >> 61)
          sub_20E867F44();
        v51 = v49 - v46;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        v107 = v50;
        if (v50)
        {
          if (v50 >> 61)
            sub_20E877A38();
          v52 = operator new(8 * v50);
          v47 = (uint64_t)((uint64_t)v45->i64 - v46) >> 3;
        }
        else
        {
          v52 = 0;
        }
        v59 = &v52[8 * v47];
        *((_QWORD *)v59 + 8) = 0;
        *((_OWORD *)v59 + 2) = 0u;
        *((_OWORD *)v59 + 3) = 0u;
        *(_OWORD *)v59 = 0u;
        *((_OWORD *)v59 + 1) = 0u;
        if ((int64x2_t *)v46 == v45)
        {
          v61 = &v52[8 * v47];
        }
        else
        {
          if (v110 - 8 < 0x68)
          {
            v60 = (char *)(v46 + (((unint64_t)v45 - v46) & 0xFFFFFFFFFFFFFFF8));
            v61 = &v52[8 * v47];
            goto LABEL_52;
          }
          v60 = (char *)(v46 + (((unint64_t)v45 - v46) & 0xFFFFFFFFFFFFFFF8));
          v61 = &v52[8 * v47];
          if (v46 + (v110 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v52[v110 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_98;
          v62 = ((v110 - 8) >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = (char *)&v48[v63 / 0xFFFFFFFFFFFFFFF8];
          v61 = &v59[-v63];
          v64 = &v52[8 * v47 - 16];
          v65 = (__int128 *)(v46 + 8 * v47 - 16);
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *v65;
            *(v64 - 1) = *(v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 2;
            v66 -= 4;
          }
          while (v66);
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_52:
              v68 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v61 - 1) = v68;
              v61 -= 8;
            }
            while (v60 != (char *)v46);
          }
        }
        v69 = v59 + 72;
        v70 = (char *)v45 - (char *)v48;
        if (v70)
        {
          v111 = v52;
          v71 = v48;
          v72 = v59 + 72;
          memmove(v59 + 72, v71, v70);
          v69 = v72;
          v52 = v111;
        }
        *(_QWORD *)(v10 + 16) = v61;
        *(_QWORD *)(v10 + 24) = &v69[v70];
        *(_QWORD *)(v10 + 32) = &v52[8 * v107];
        v14 = v114;
        result = v115;
        v16 = v113;
        v17 = v112;
        if (v46)
        {
          operator delete((void *)v46);
          v17 = v112;
          v16 = v113;
          v14 = v114;
          result = v115;
        }
        goto LABEL_88;
      }
      v53 = (char *)v45 - (char *)v48;
      if ((unint64_t)((char *)v45 - (char *)v48) > 0x47)
      {
        v55 = *(uint64_t **)(v10 + 24);
        v54 = 9;
        goto LABEL_64;
      }
      v54 = v53 >> 3;
      v55 = &v45->i64[9 - (v53 >> 3)];
      v56 = v53 & 0xFFFFFFFFFFFFFFF8;
      v57 = 64 - v56;
      if (64 - v56 < 0x68)
        break;
      v73 = &v116 < (uint64_t *)((char *)&v45[4].i64[1] - v56);
      if (v45 < (int64x2_t *)&v117)
      {
        v58 = *(uint64_t **)(v10 + 24);
        if (v73)
          goto LABEL_62;
      }
      v74 = (v57 >> 3) + 1;
      v58 = &v45->i64[v74 & 0x3FFFFFFFFFFFFFFCLL];
      v75 = vdupq_lane_s64(v116, 0);
      v76 = v45 + 1;
      v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76[-1] = v75;
        *v76 = v75;
        v76 += 2;
        v77 -= 4;
      }
      while (v77);
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_62;
LABEL_63:
      *(_QWORD *)(v10 + 24) = v55;
      if (v45 == (int64x2_t *)v48)
        goto LABEL_88;
LABEL_64:
      v78 = (char *)v55 - (char *)(v48 + 9);
      v79 = v78 >> 3;
      v80 = (int64x2_t *)(v55 - 9);
      v81 = (char *)v55;
      if (v55 - 9 < (uint64_t *)v45)
      {
        v82 = (v110 & 0xFFFFFFFFFFFFFFF8) + v78;
        v83 = v46 + v82 + 8;
        if ((unint64_t)v45 > v83)
          v83 = (unint64_t)v45;
        v84 = v83 + ~v46 - v82;
        if (v84 >= 0x58)
        {
          v85 = (v84 >> 3) + 1;
          v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          v80 = (int64x2_t *)((char *)v80 + v86 * 8);
          v81 = (char *)&v55[v86];
          v87 = v55 + 2;
          v88 = (__int128 *)(v46 + 8 * v79 + 8 * v47 + 16);
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *(v87 - 1) = *(v88 - 1);
            *v87 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_73;
        }
        else
        {
          v81 = (char *)v55;
        }
        do
        {
          v91 = v80->i64[0];
          v80 = (int64x2_t *)((char *)v80 + 8);
          *(_QWORD *)v81 = v91;
          v81 += 8;
        }
        while (v80 < v45);
      }
LABEL_73:
      *(_QWORD *)(v10 + 24) = v81;
      if (v55 != v48 + 9)
      {
        memmove(&v55[-v79], (const void *)(v46 + (((unint64_t)v45 - v46) & 0xFFFFFFFFFFFFFFF8)), v78);
        v47 = (uint64_t)((uint64_t)v45->i64 - v46) >> 3;
        v17 = v112;
        v16 = v113;
        v14 = v114;
        result = v115;
      }
      v92 = (const double *)&v116;
      if (v48 <= &v116)
      {
        v93 = 72;
        if (*(_QWORD *)(v10 + 24) <= (unint64_t)&v116)
          v93 = 0;
        v92 = (const double *)((char *)&v116 + v93);
      }
      if (v54 >= 0xA)
      {
        if (v48 >= (uint64_t *)v92 + 1 || (unint64_t)v92 >= v46 + (v110 & 0xFFFFFFFFFFFFFFF8) + 8 * v54)
        {
          v48 += v54 & 0xFFFFFFFFFFFFFFFCLL;
          v94 = v54 & 3;
          v95 = vld1q_dup_f64(v92);
          v96 = (float64x2_t *)(v46 + 8 * v47 + 16);
          v97 = v54 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v96[-1] = v95;
            *v96 = v95;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_88;
        }
        else
        {
          v94 = v54;
        }
      }
      else
      {
        v94 = v54;
      }
      do
      {
        *v48++ = *(_QWORD *)v92;
        --v94;
      }
      while (v94);
LABEL_88:
      v18 = *(_QWORD *)(v10 + 24) - 72;
      v7 = a6;
      v8 = a3;
      v11 = (unint64_t *)(v10 + 16);
LABEL_89:
      *(_QWORD *)(v17 + 8 * v15) = (v18 - *(_QWORD *)(v10 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
LABEL_90:
      v98 = (int8x16_t *)((char *)v31 + 8 * v30 + 8 * (_DWORD)v32 * v16);
      v99 = v98[1].i64[0];
      v100 = *v98;
      v101 = vextq_s8(v100, v100, 8uLL).u64[0];
      v102 = (int8x16_t *)((char *)v98 + 8 * v32);
      v27 = *v102;
      v28 = v102[1].u64[0];
      v29 = vextq_s8(v27, v27, 8uLL).u64[0];
      v103 = &v98[v32];
      v20 = *v103;
      v25 = v103[1].i64[0];
      v23 = vextq_s8(v20, v20, 8uLL).u64[0];
      if (v31 == (int8x16_t *)v18)
      {
        v31[1].i64[0] = v99;
        v100.i64[1] = v101;
        *v31 = v100;
        v18 = (uint64_t)v31;
      }
      else
      {
        *(_QWORD *)(v18 + 16) = v99;
        v100.i64[1] = v101;
        *(int8x16_t *)v18 = v100;
      }
LABEL_12:
      *(_QWORD *)(v18 + 40) = v28;
      v27.i64[1] = v29;
      *(int8x16_t *)(v18 + 24) = v27;
      *(_QWORD *)(v18 + 64) = v25;
      v20.i64[1] = v23;
      *(int8x16_t *)(v18 + 48) = v20;
      if (++v15 == v14)
      {
        v6 = *(unsigned int *)(v10 + 12);
        v12 = v106;
        goto LABEL_4;
      }
    }
    v58 = *(uint64_t **)(v10 + 24);
    do
LABEL_62:
      *v58++ = v116;
    while (v58 != v55);
    goto LABEL_63;
  }
  return result;
}

uint64_t sub_20FA1E940(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t *v33;
  int64x2_t *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64x2_t *v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  size_t v60;
  uint64_t *v61;
  _QWORD *v62;
  BOOL v63;
  uint64_t v64;
  int64x2_t v65;
  int64x2_t *v66;
  uint64_t v67;
  int64x2_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  const double *v73;
  uint64_t v74;
  unint64_t v75;
  float64x2_t v76;
  float64x2_t *v77;
  unint64_t v78;
  int8x16_t *v79;
  uint64_t v80;
  int8x16_t v81;
  unint64_t v82;
  unint64_t v85;
  unint64_t v86;
  int64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      result += 16;
      v96 = 0;
      while (1)
      {
        v10 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v10)
          break;
LABEL_5:
        if (++v96 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v96);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v96);
      v94 = v13;
      v95 = *(unsigned int *)(v6 + 8);
      while (1)
      {
        while (1)
        {
          v17 = *(_DWORD *)(*v8 + 4 * v11);
          v18 = *(int8x16_t **)a2;
          v19 = *(unsigned int *)(a2 + 16);
          v20 = *(_QWORD *)(v13 + 8 * v11);
          if (!v7 || v17 <= v12)
            break;
          if (v20 == -1)
          {
            v21 = *(_QWORD *)(v6 + 80);
            if (v21)
            {
              v23 = *(_QWORD *)(v6 + 48);
              v22 = *(_QWORD *)(v6 + 56);
              v24 = ((v22 - v23) << 6) - 1;
              v25 = *(_QWORD *)(v6 + 72);
              if (v22 == v23)
                v24 = 0;
              v14 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v25 + v21 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v21 - 1;
              if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
              {
                operator delete(*(void **)(v22 - 8));
                v13 = v94;
                v10 = v95;
                result = v6 + 16;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v32 = *(void **)(v6 + 24);
              v97 = 0;
              sub_20F1C5A3C((unint64_t *)(v6 + 16), v32, 3uLL, &v97);
              v13 = v94;
              v10 = v95;
              result = v6 + 16;
              v14 = *(_QWORD *)(v6 + 24) - 24;
            }
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v96);
          }
          else
          {
            v14 = *(_QWORD *)result + 8 * v20;
          }
          v15 = &v18->i64[v12 + (_DWORD)v19 * v17];
          *(_QWORD *)&v16 = *v15;
          *((_QWORD *)&v16 + 1) = v15[v19];
          *(_QWORD *)(v14 + 16) = v15[2 * v19];
          *(_OWORD *)v14 = v16;
          if (++v11 == v10)
          {
LABEL_4:
            v5 = *(unsigned int *)(v6 + 12);
            goto LABEL_5;
          }
        }
        if (v20 == -1)
          break;
        v26 = *(_QWORD *)result + 8 * v20;
LABEL_80:
        v79 = (int8x16_t *)((char *)v18 + 8 * v17 + 8 * (_DWORD)v19 * v12);
        v80 = v79[1].i64[0];
        v81 = *v79;
        v82 = vextq_s8(v81, v81, 8uLL).u64[0];
        if (v18 == (int8x16_t *)v26)
        {
          v18[1].i64[0] = v80;
          v81.i64[1] = v82;
          *v18 = v81;
          if (++v11 == v10)
            goto LABEL_4;
        }
        else
        {
          *(_QWORD *)(v26 + 16) = v80;
          v81.i64[1] = v82;
          *(int8x16_t *)v26 = v81;
          if (++v11 == v10)
            goto LABEL_4;
        }
      }
      v27 = *(_QWORD *)(v6 + 80);
      if (v27)
      {
        v29 = *(_QWORD *)(v6 + 48);
        v28 = *(_QWORD *)(v6 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(v6 + 72);
        if (v28 == v29)
          v30 = 0;
        v26 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v31 + v27 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          v13 = v94;
          v10 = v95;
          result = v6 + 16;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_79;
      }
      v97 = 0;
      v33 = *(uint64_t **)(v6 + 16);
      v34 = *(int64x2_t **)(v6 + 24);
      v35 = (char *)v34 - (char *)v33;
      v36 = ((char *)v34 - (char *)v33) >> 3;
      v37 = (uint64_t *)((char *)v33 + (((char *)v34 - (char *)v33) & 0xFFFFFFFFFFFFFFF8));
      v38 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v38 - (_QWORD)v34) < 0x18)
      {
        v39 = v36 + 3;
        if ((unint64_t)(v36 + 3) >> 61)
          sub_20E867F44();
        v40 = v38 - (_QWORD)v33;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v85 = v39;
        if (v39)
        {
          v88 = (char *)v34 - (char *)v33;
          v91 = ((char *)v34 - (char *)v33) >> 3;
          if (v39 >> 61)
            sub_20E877A38();
          v41 = *(int64x2_t **)(v6 + 16);
          v42 = operator new(8 * v39);
          v33 = (uint64_t *)v41;
          v35 = v88;
          v36 = v91;
          v43 = &v42[8 * v91];
          *v43 = 0;
          v43[1] = 0;
          v43[2] = 0;
          if (v41 != v34)
            goto LABEL_36;
        }
        else
        {
          v42 = 0;
          v43 = (_QWORD *)(8 * v36);
          *v43 = 0;
          v43[1] = 0;
          v43[2] = 0;
          if (v33 != (uint64_t *)v34)
          {
LABEL_36:
            if ((unint64_t)(v35 - 8) >= 0x68)
            {
              v44 = v37;
              v45 = v43;
              if ((unint64_t)((char *)v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - &v42[v35 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
              {
                v52 = ((unint64_t)(v35 - 8) >> 3) + 1;
                v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
                v44 = &v37[v53 / 0xFFFFFFFFFFFFFFF8];
                v45 = &v43[v53 / 0xFFFFFFFFFFFFFFF8];
                v54 = &v42[8 * v36 - 16];
                v55 = &v33[v36 - 2];
                v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v57 = *(_OWORD *)v55;
                  *(v54 - 1) = *((_OWORD *)v55 - 1);
                  *v54 = v57;
                  v54 -= 2;
                  v55 -= 4;
                  v56 -= 4;
                }
                while (v56);
                if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_49;
              }
            }
            else
            {
              v44 = v37;
              v45 = v43;
            }
            do
            {
              v58 = *--v44;
              *--v45 = v58;
            }
            while (v44 != v33);
LABEL_49:
            v59 = v43 + 3;
            v60 = (char *)v34 - (char *)v37;
            if (v60)
            {
              v89 = v42;
              v92 = v33;
              v61 = v37;
              v62 = v43 + 3;
              memmove(v43 + 3, v61, v60);
              v59 = v62;
              v42 = v89;
              v33 = v92;
            }
            *(_QWORD *)(v6 + 16) = v45;
            *(_QWORD *)(v6 + 24) = (char *)v59 + v60;
            *(_QWORD *)(v6 + 32) = &v42[8 * v85];
            v7 = a5;
            v10 = v95;
            result = v6 + 16;
            v13 = v94;
            if (v33)
            {
              operator delete(v33);
              v13 = v94;
              v10 = v95;
              result = v6 + 16;
            }
            goto LABEL_78;
          }
        }
        v45 = v43;
        goto LABEL_49;
      }
      v46 = (char *)v34 - (char *)v37;
      if ((unint64_t)((char *)v34 - (char *)v37) > 0x17)
      {
        v48 = *(uint64_t **)(v6 + 24);
        v47 = 3;
LABEL_60:
        v68 = (int64x2_t *)(v48 - 3);
        v69 = v48;
        if (v48 - 3 < (uint64_t *)v34)
        {
          v69 = v48;
          do
          {
            v70 = v68->i64[0];
            v68 = (int64x2_t *)((char *)v68 + 8);
            *v69++ = v70;
          }
          while (v68 < v34);
        }
        v93 = v33;
        *(_QWORD *)(v6 + 24) = v69;
        if (v48 != v37 + 3)
        {
          v71 = (char *)v33 + (((char *)v34 - (char *)v33) & 0xFFFFFFFFFFFFFFF8);
          v72 = ((char *)v34 - (char *)v33) >> 3;
          v90 = v35;
          v86 = v47;
          memmove(&v48[-(v48 - (v37 + 3))], v71, (char *)v48 - (char *)(v37 + 3));
          v47 = v86;
          v35 = v90;
          v36 = v72;
          v13 = v94;
          v10 = v95;
          result = v6 + 16;
        }
        v73 = (const double *)&v97;
        if (v37 <= &v97)
        {
          v74 = 24;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v97)
            v74 = 0;
          v73 = (const double *)((char *)&v97 + v74);
        }
        if (v47 >= 0xA)
        {
          if (v37 >= (uint64_t *)v73 + 1 || v73 >= (const double *)((char *)&v93[v47] + (v35 & 0xFFFFFFFFFFFFFFF8)))
          {
            v37 += v47 & 0xFFFFFFFFFFFFFFFCLL;
            v75 = v47 & 3;
            v76 = vld1q_dup_f64(v73);
            v77 = (float64x2_t *)&v93[v36 + 2];
            v78 = v47 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v77[-1] = v76;
              *v77 = v76;
              v77 += 2;
              v78 -= 4;
            }
            while (v78);
            if (v47 == (v47 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_78;
          }
          else
          {
            v75 = v47;
          }
        }
        else
        {
          v75 = v47;
        }
        do
        {
          *v37++ = *(_QWORD *)v73;
          --v75;
        }
        while (v75);
LABEL_78:
        v26 = *(_QWORD *)(v6 + 24) - 24;
        v8 = a3;
LABEL_79:
        *(_QWORD *)(v13 + 8 * v11) = (v26 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v96);
        goto LABEL_80;
      }
      v47 = v46 >> 3;
      v48 = &v34->i64[3 - (v46 >> 3)];
      v49 = v46 & 0xFFFFFFFFFFFFFFF8;
      v50 = 16 - v49;
      if (16 - v49 >= 0x68)
      {
        v63 = &v97 < (uint64_t *)((char *)&v34[1].i64[1] - v49);
        if (v34 >= (int64x2_t *)&v98 || (v51 = *(uint64_t **)(v6 + 24), !v63))
        {
          v64 = (v50 >> 3) + 1;
          v51 = &v34->i64[v64 & 0x3FFFFFFFFFFFFFFCLL];
          v65 = vdupq_lane_s64(v97, 0);
          v66 = v34 + 1;
          v67 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66[-1] = v65;
            *v66 = v65;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_59:
            *(_QWORD *)(v6 + 24) = v48;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_78;
            goto LABEL_60;
          }
        }
      }
      else
      {
        v51 = *(uint64_t **)(v6 + 24);
      }
      do
        *v51++ = v97;
      while (v51 != v48);
      goto LABEL_59;
    }
  }
  return result;
}

uint64_t sub_20FA1F084(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  __int8 *v17;
  __int128 v18;
  int8x16_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int64x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  _OWORD *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _OWORD *v67;
  size_t v68;
  uint64_t *v69;
  _OWORD *v70;
  BOOL v71;
  uint64_t v72;
  int64x2_t v73;
  int64x2_t *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  int64x2_t *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  const double *v90;
  uint64_t v91;
  unint64_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  unint64_t v95;
  int8x16_t *v96;
  uint64_t v97;
  unint64_t v98;
  int8x16_t *v99;
  int8x16_t *v100;
  int8x16_t *v101;
  unint64_t v103;
  unint64_t *v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v112 = 0;
      v10 = (unint64_t *)(result + 16);
      v106 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v112 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v112);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v112);
      v111 = *(unsigned int *)(v6 + 8);
      v110 = v12;
      v109 = v13;
      while (1)
      {
        v28 = *(_DWORD *)(*v8 + 4 * v11);
        v29 = *(int8x16_t **)a2;
        v30 = *(unsigned int *)(a2 + 16);
        v31 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v28 > v12)
        {
          if (v31 == -1)
          {
            v32 = *(_QWORD *)(v6 + 80);
            if (v32)
            {
              v34 = *(_QWORD *)(v6 + 48);
              v33 = *(_QWORD *)(v6 + 56);
              v35 = ((v33 - v34) << 6) - 1;
              v36 = *(_QWORD *)(v6 + 72);
              if (v33 == v34)
                v35 = 0;
              v14 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v34 + (((unint64_t)(v36 + v32 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v36 + v32 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v32 - 1;
              if ((unint64_t)(v35 - (v32 + v36) + 1) >= 0x400)
              {
                operator delete(*(void **)(v33 - 8));
                v13 = v109;
                v12 = v110;
                result = v111;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v42 = *(void **)(v6 + 24);
              v113 = 0;
              sub_20F1C5A3C(v10, v42, 0xCuLL, &v113);
              v13 = v109;
              v12 = v110;
              result = v111;
              v14 = *(_QWORD *)(v6 + 24) - 96;
            }
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v112);
          }
          else
          {
            v14 = *v10 + 8 * v31;
          }
          v15 = (int8x16_t *)((char *)v29 + 8 * v12 + 8 * (_DWORD)v30 * v28);
          v22 = *v15;
          v16 = v15[1];
          v17 = &v15->i8[8 * v30];
          v18 = *((_OWORD *)v17 + 1);
          v19 = &v15[v30];
          v20 = (int8x16_t)vzip1q_s64((int64x2_t)v22, *(int64x2_t *)v17);
          v21 = v19[1];
          v22.i64[0] = v22.i64[1];
          v23 = *((_QWORD *)v17 + 1);
          v24 = v19->i64[1];
          v25.i64[0] = v16.i64[1];
          v26 = *((_QWORD *)v17 + 3);
          v27 = v19[1].i64[1];
          *(_QWORD *)(v14 + 16) = v19->i64[0];
          goto LABEL_10;
        }
        if (v31 == -1)
          break;
        v14 = *v10 + 8 * v31;
LABEL_89:
        v96 = (int8x16_t *)((char *)v29 + 8 * v28 + 8 * (_DWORD)v30 * v12);
        v97 = v96[1].i64[0];
        v20 = *v96;
        v98 = vextq_s8(v20, v20, 8uLL).u64[0];
        v99 = (int8x16_t *)((char *)v96 + 8 * v30);
        v22 = *v99;
        v24 = v99[1].i64[0];
        v23 = vextq_s8(v22, v22, 8uLL).u64[0];
        v100 = &v96[v30];
        v16 = *v100;
        v21.i64[0] = v100[1].i64[0];
        *(_QWORD *)&v18 = vextq_s8(v16, v16, 8uLL).u64[0];
        v101 = (int8x16_t *)((char *)v96 + 24 * v30);
        v25 = *v101;
        v27 = v101[1].i64[0];
        v26 = vextq_s8(v25, v25, 8uLL).u64[0];
        if (v29 == (int8x16_t *)v14)
        {
          v29[1].i64[0] = v97;
          v20.i64[1] = v98;
          *v29 = v20;
          v14 = (uint64_t)v29;
          goto LABEL_11;
        }
        *(_QWORD *)(v14 + 16) = v97;
        v20.i64[1] = v98;
LABEL_10:
        *(int8x16_t *)v14 = v20;
LABEL_11:
        v22.i64[1] = v23;
        *(_QWORD *)(v14 + 40) = v24;
        *(int8x16_t *)(v14 + 24) = v22;
        *(_QWORD *)(v14 + 64) = v21.i64[0];
        v16.i64[1] = v18;
        *(int8x16_t *)(v14 + 48) = v16;
        *(_QWORD *)(v14 + 88) = v27;
        v25.i64[1] = v26;
        *(int8x16_t *)(v14 + 72) = v25;
        if (++v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v37 = *(_QWORD *)(v6 + 80);
      if (v37)
      {
        v39 = *(_QWORD *)(v6 + 48);
        v38 = *(_QWORD *)(v6 + 56);
        v40 = ((v38 - v39) << 6) - 1;
        v41 = *(_QWORD *)(v6 + 72);
        if (v38 == v39)
          v40 = 0;
        v14 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v39 + (((unint64_t)(v41 + v37 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v41 + v37 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v37 - 1;
        if ((unint64_t)(v40 - (v37 + v41) + 1) >= 0x400)
        {
          operator delete(*(void **)(v38 - 8));
          v13 = v109;
          v12 = v110;
          result = v111;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_88;
      }
      v113 = 0;
      v44 = *(_QWORD *)(v6 + 16);
      v43 = *(int64x2_t **)(v6 + 24);
      v45 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
      v107 = (unint64_t)v43 - v44;
      v46 = (uint64_t *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
      v47 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v47 - (_QWORD)v43) < 0x60)
      {
        v48 = v45 + 12;
        if ((unint64_t)(v45 + 12) >> 61)
          sub_20E867F44();
        v49 = v47 - v44;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        v103 = v48;
        if (v48)
        {
          if (v48 >> 61)
            sub_20E877A38();
          v50 = operator new(8 * v48);
          v45 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
        }
        else
        {
          v50 = 0;
        }
        v57 = &v50[8 * v45];
        v57[4] = 0u;
        v57[5] = 0u;
        v57[2] = 0u;
        v57[3] = 0u;
        *v57 = 0u;
        v57[1] = 0u;
        if ((int64x2_t *)v44 == v43)
        {
          v59 = &v50[8 * v45];
        }
        else
        {
          if (v107 - 8 >= 0x68)
          {
            v58 = (char *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
            v59 = &v50[8 * v45];
            if (v44 + (v107 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v50[v107 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v60 = ((v107 - 8) >> 3) + 1;
              v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
              v58 = (char *)&v46[v61 / 0xFFFFFFFFFFFFFFF8];
              v59 = (char *)v57 - v61;
              v62 = &v50[8 * v45 - 16];
              v63 = (__int128 *)(v44 + 8 * v45 - 16);
              v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v65 = *v63;
                *(v62 - 1) = *(v63 - 1);
                *v62 = v65;
                v62 -= 2;
                v63 -= 2;
                v64 -= 4;
              }
              while (v64);
              if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_52;
            }
          }
          else
          {
            v58 = (char *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
            v59 = &v50[8 * v45];
          }
          do
          {
            v66 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *((_QWORD *)v59 - 1) = v66;
            v59 -= 8;
          }
          while (v58 != (char *)v44);
        }
LABEL_52:
        v67 = v57 + 6;
        v68 = (char *)v43 - (char *)v46;
        if (v68)
        {
          v108 = v50;
          v69 = v46;
          v70 = v57 + 6;
          memmove(v57 + 6, v69, v68);
          v67 = v70;
          v50 = v108;
        }
        *(_QWORD *)(v6 + 16) = v59;
        *(_QWORD *)(v6 + 24) = (char *)v67 + v68;
        *(_QWORD *)(v6 + 32) = &v50[8 * v103];
        result = v111;
        v12 = v110;
        v13 = v109;
        if (v44)
        {
          operator delete((void *)v44);
          v13 = v109;
          v12 = v110;
          result = v111;
        }
        goto LABEL_87;
      }
      v51 = (char *)v43 - (char *)v46;
      if ((unint64_t)((char *)v43 - (char *)v46) > 0x5F)
      {
        v53 = *(uint64_t **)(v6 + 24);
        v52 = 12;
        goto LABEL_63;
      }
      v52 = v51 >> 3;
      v53 = &v43->i64[12 - (v51 >> 3)];
      v54 = v51 & 0xFFFFFFFFFFFFFFF8;
      v55 = 88 - v54;
      if (88 - v54 >= 0x68)
      {
        v71 = &v113 < (uint64_t *)((char *)v43[6].i64 - v54);
        if (v43 >= (int64x2_t *)&v114 || (v56 = *(uint64_t **)(v6 + 24), !v71))
        {
          v72 = (v55 >> 3) + 1;
          v56 = &v43->i64[v72 & 0x3FFFFFFFFFFFFFFCLL];
          v73 = vdupq_lane_s64(v113, 0);
          v74 = v43 + 1;
          v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74[-1] = v73;
            *v74 = v73;
            v74 += 2;
            v75 -= 4;
          }
          while (v75);
          if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_62:
            *(_QWORD *)(v6 + 24) = v53;
            if (v43 == (int64x2_t *)v46)
              goto LABEL_87;
LABEL_63:
            v76 = (char *)v53 - (char *)(v46 + 12);
            v77 = v76 >> 3;
            v78 = (int64x2_t *)(v53 - 12);
            v79 = (char *)v53;
            if (v53 - 12 < (uint64_t *)v43)
            {
              v80 = (v107 & 0xFFFFFFFFFFFFFFF8) + v76;
              v81 = v44 + v80 + 8;
              if ((unint64_t)v43 > v81)
                v81 = (unint64_t)v43;
              v82 = v81 + ~v44 - v80;
              if (v82 >= 0x58)
              {
                v83 = (v82 >> 3) + 1;
                v84 = v83 & 0x3FFFFFFFFFFFFFFCLL;
                v78 = (int64x2_t *)((char *)v78 + v84 * 8);
                v79 = (char *)&v53[v84];
                v85 = v53 + 2;
                v86 = (__int128 *)(v44 + 8 * v77 + 8 * v45 + 16);
                v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v88 = *v86;
                  *(v85 - 1) = *(v86 - 1);
                  *v85 = v88;
                  v85 += 2;
                  v86 += 2;
                  v87 -= 4;
                }
                while (v87);
                if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_72;
              }
              else
              {
                v79 = (char *)v53;
              }
              do
              {
                v89 = v78->i64[0];
                v78 = (int64x2_t *)((char *)v78 + 8);
                *(_QWORD *)v79 = v89;
                v79 += 8;
              }
              while (v78 < v43);
            }
LABEL_72:
            *(_QWORD *)(v6 + 24) = v79;
            if (v53 != v46 + 12)
            {
              memmove(&v53[-v77], (const void *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8)), v76);
              v45 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
              v13 = v109;
              v12 = v110;
              result = v111;
            }
            v90 = (const double *)&v113;
            if (v46 <= &v113)
            {
              v91 = 96;
              if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v113)
                v91 = 0;
              v90 = (const double *)((char *)&v113 + v91);
            }
            if (v52 >= 0xA)
            {
              if (v46 >= (uint64_t *)v90 + 1 || (unint64_t)v90 >= v44 + (v107 & 0xFFFFFFFFFFFFFFF8) + 8 * v52)
              {
                v46 += v52 & 0xFFFFFFFFFFFFFFFCLL;
                v92 = v52 & 3;
                v93 = vld1q_dup_f64(v90);
                v94 = (float64x2_t *)(v44 + 8 * v45 + 16);
                v95 = v52 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v94[-1] = v93;
                  *v94 = v93;
                  v94 += 2;
                  v95 -= 4;
                }
                while (v95);
                if (v52 == (v52 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_87;
              }
              else
              {
                v92 = v52;
              }
            }
            else
            {
              v92 = v52;
            }
            do
            {
              *v46++ = *(_QWORD *)v90;
              --v92;
            }
            while (v92);
LABEL_87:
            v14 = *(_QWORD *)(v6 + 24) - 96;
            v7 = a5;
            v8 = a3;
            v10 = v106;
LABEL_88:
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v112);
            goto LABEL_89;
          }
        }
      }
      else
      {
        v56 = *(uint64_t **)(v6 + 24);
      }
      do
        *v56++ = v113;
      while (v56 != v53);
      goto LABEL_62;
    }
  }
  return result;
}

uint64_t sub_20FA1F834(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t *v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  unsigned int v28;
  int64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int64x2_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  _OWORD *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  size_t v69;
  uint64_t *v70;
  _OWORD *v71;
  BOOL v72;
  uint64_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  int64x2_t *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  const double *v91;
  uint64_t v92;
  unint64_t v93;
  float64x2_t v94;
  float64x2_t *v95;
  unint64_t v96;
  int64x2_t *v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t *v100;
  int64x2_t *v101;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v107;
  _BYTE *v108;
  char *v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v113 = 0;
      v10 = (unint64_t *)(result + 16);
      v107 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v113 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v113);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v113);
      v112 = *(unsigned int *)(v6 + 8);
      v111 = v12;
      v110 = v13;
      while (1)
      {
        v28 = *(_DWORD *)(*v8 + 4 * v11);
        v29 = *(int64x2_t **)a2;
        v30 = *(unsigned int *)(a2 + 16);
        v31 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v28 > v12)
        {
          if (v31 == -1)
          {
            v32 = *(_QWORD *)(v6 + 80);
            if (v32)
            {
              v34 = *(_QWORD *)(v6 + 48);
              v33 = *(_QWORD *)(v6 + 56);
              v35 = ((v33 - v34) << 6) - 1;
              v36 = *(_QWORD *)(v6 + 72);
              if (v33 == v34)
                v35 = 0;
              v14 = (int64x2_t *)(*(_QWORD *)(v6 + 16)
                                + 8
                                * *(_QWORD *)(*(_QWORD *)(v34
                                                        + (((unint64_t)(v36 + v32 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                            + 8 * ((v36 + v32 - 1) & 0x1FF)));
              *(_QWORD *)(v6 + 80) = v32 - 1;
              if ((unint64_t)(v35 - (v32 + v36) + 1) >= 0x400)
              {
                operator delete(*(void **)(v33 - 8));
                v13 = v110;
                v12 = v111;
                result = v112;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v42 = *(void **)(v6 + 24);
              v114 = 0;
              sub_20F1C5A3C(v10, v42, 0xCuLL, &v114);
              v13 = v110;
              v12 = v111;
              result = v112;
              v14 = (int64x2_t *)(*(_QWORD *)(v6 + 24) - 96);
            }
            *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14->i64 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v113);
          }
          else
          {
            v14 = (int64x2_t *)(*v10 + 8 * v31);
          }
          v15 = (int64x2_t *)((char *)v29 + 8 * v12 + 8 * (_DWORD)v30 * v28);
          v26.i64[0] = v15[1].i64[0];
          v16 = *v15;
          v17 = (int64x2_t *)((char *)v15 + 8 * v30);
          v18 = v17 + 1;
          v19 = *v17;
          v20 = &v15[v30];
          v27.i64[0] = v20[1].i64[0];
          v21 = (int64x2_t *)((char *)v15 + 24 * v30);
          v22 = vzip1q_s64(v16, v19);
          v23 = vzip1q_s64(*v20, *v21);
          v24 = vzip2q_s64(v16, v19);
          v25.i64[0] = vdupq_laneq_s64(*v20, 1).u64[0];
          v25.i64[1] = v21->i64[1];
          v26.i64[1] = v18->i64[0];
          v27.i64[1] = v21[1].i64[0];
          *v14 = v22;
          v14[1] = v23;
          goto LABEL_10;
        }
        if (v31 != -1)
        {
          v14 = (int64x2_t *)(*v10 + 8 * v31);
          goto LABEL_88;
        }
        v37 = *(_QWORD *)(v6 + 80);
        if (v37)
        {
          v39 = *(_QWORD *)(v6 + 48);
          v38 = *(_QWORD *)(v6 + 56);
          v40 = ((v38 - v39) << 6) - 1;
          v41 = *(_QWORD *)(v6 + 72);
          if (v38 == v39)
            v40 = 0;
          v14 = (int64x2_t *)(*(_QWORD *)(v6 + 16)
                            + 8
                            * *(_QWORD *)(*(_QWORD *)(v39
                                                    + (((unint64_t)(v41 + v37 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v41 + v37 - 1) & 0x1FF)));
          *(_QWORD *)(v6 + 80) = v37 - 1;
          if ((unint64_t)(v40 - (v37 + v41) + 1) >= 0x400)
          {
            operator delete(*(void **)(v38 - 8));
            v13 = v110;
            v12 = v111;
            result = v112;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_87;
        }
        v114 = 0;
        v44 = *(_QWORD *)(v6 + 16);
        v43 = *(int64x2_t **)(v6 + 24);
        v45 = (unint64_t)v43 - v44;
        v46 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
        v47 = (uint64_t *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
        v48 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v48 - (_QWORD)v43) < 0x60)
        {
          v49 = v46 + 12;
          if ((unint64_t)(v46 + 12) >> 61)
            sub_20E867F44();
          v50 = v48 - v44;
          if (v50 >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          v104 = v49;
          if (v49)
          {
            if (v49 >> 61)
              sub_20E877A38();
            v51 = operator new(8 * v49);
            v46 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
            v45 = (unint64_t)v43 - v44;
          }
          else
          {
            v51 = 0;
          }
          v58 = &v51[8 * v46];
          v58[4] = 0u;
          v58[5] = 0u;
          v58[2] = 0u;
          v58[3] = 0u;
          *v58 = 0u;
          v58[1] = 0u;
          if ((int64x2_t *)v44 == v43)
          {
            v60 = &v51[8 * v46];
          }
          else
          {
            if (v45 - 8 < 0x68)
            {
              v59 = (char *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
              v60 = &v51[8 * v46];
              goto LABEL_50;
            }
            v59 = (char *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8));
            v60 = &v51[8 * v46];
            if (v44 + (v45 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v51[v45 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_96;
            v61 = ((v45 - 8) >> 3) + 1;
            v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = (char *)&v47[v62 / 0xFFFFFFFFFFFFFFF8];
            v60 = (char *)v58 - v62;
            v63 = &v51[8 * v46 - 16];
            v64 = (__int128 *)(v44 + 8 * v46 - 16);
            v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v66 = *v64;
              *(v63 - 1) = *(v64 - 1);
              *v63 = v66;
              v63 -= 2;
              v64 -= 2;
              v65 -= 4;
            }
            while (v65);
            if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_96:
              do
              {
LABEL_50:
                v67 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v60 - 1) = v67;
                v60 -= 8;
              }
              while (v59 != (char *)v44);
            }
          }
          v68 = v58 + 6;
          v69 = (char *)v43 - (char *)v47;
          if (v69)
          {
            v108 = v51;
            v70 = v47;
            v71 = v58 + 6;
            memmove(v58 + 6, v70, v69);
            v68 = v71;
            v51 = v108;
          }
          *(_QWORD *)(v6 + 16) = v60;
          *(_QWORD *)(v6 + 24) = (char *)v68 + v69;
          *(_QWORD *)(v6 + 32) = &v51[8 * v104];
          v7 = a5;
          result = v112;
          v12 = v111;
          v13 = v110;
          if (v44)
          {
            operator delete((void *)v44);
            v13 = v110;
            v12 = v111;
            result = v112;
          }
          goto LABEL_86;
        }
        v52 = (char *)v43 - (char *)v47;
        if ((unint64_t)((char *)v43 - (char *)v47) > 0x5F)
        {
          v54 = *(uint64_t **)(v6 + 24);
          v53 = 12;
          goto LABEL_62;
        }
        v53 = v52 >> 3;
        v54 = &v43->i64[12 - (v52 >> 3)];
        v55 = v52 & 0xFFFFFFFFFFFFFFF8;
        v56 = 88 - v55;
        if (88 - v55 < 0x68)
          break;
        v72 = &v114 < (uint64_t *)((char *)v43[6].i64 - v55);
        if (v43 < (int64x2_t *)&v115)
        {
          v57 = *(uint64_t **)(v6 + 24);
          if (v72)
            goto LABEL_60;
        }
        v73 = (v56 >> 3) + 1;
        v57 = &v43->i64[v73 & 0x3FFFFFFFFFFFFFFCLL];
        v74 = vdupq_lane_s64(v114, 0);
        v75 = v43 + 1;
        v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75[-1] = v74;
          *v75 = v74;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_60;
LABEL_61:
        *(_QWORD *)(v6 + 24) = v54;
        if (v43 == (int64x2_t *)v47)
          goto LABEL_86;
LABEL_62:
        v77 = (char *)v54 - (char *)(v47 + 12);
        v78 = v77 >> 3;
        v79 = (int64x2_t *)(v54 - 12);
        v80 = (char *)v54;
        if (v54 - 12 < (uint64_t *)v43)
        {
          v81 = (v45 & 0xFFFFFFFFFFFFFFF8) + v77;
          v82 = v44 + v81 + 8;
          if ((unint64_t)v43 > v82)
            v82 = (unint64_t)v43;
          v83 = v82 + ~v44 - v81;
          if (v83 >= 0x58)
          {
            v84 = (v83 >> 3) + 1;
            v85 = v84 & 0x3FFFFFFFFFFFFFFCLL;
            v79 = (int64x2_t *)((char *)v79 + v85 * 8);
            v80 = (char *)&v54[v85];
            v86 = v54 + 2;
            v87 = (__int128 *)(v44 + 8 * v78 + 8 * v46 + 16);
            v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v89 = *v87;
              *(v86 - 1) = *(v87 - 1);
              *v86 = v89;
              v86 += 2;
              v87 += 2;
              v88 -= 4;
            }
            while (v88);
            v45 = (unint64_t)v43 - v44;
            if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_71;
          }
          else
          {
            v80 = (char *)v54;
          }
          do
          {
            v90 = v79->i64[0];
            v79 = (int64x2_t *)((char *)v79 + 8);
            *(_QWORD *)v80 = v90;
            v80 += 8;
          }
          while (v79 < v43);
        }
LABEL_71:
        *(_QWORD *)(v6 + 24) = v80;
        if (v54 != v47 + 12)
        {
          v109 = (char *)v45;
          v105 = v53;
          memmove(&v54[-v78], (const void *)(v44 + (((unint64_t)v43 - v44) & 0xFFFFFFFFFFFFFFF8)), v77);
          v53 = v105;
          v45 = (unint64_t)v109;
          v13 = v110;
          v46 = (uint64_t)((uint64_t)v43->i64 - v44) >> 3;
          v12 = v111;
          result = v112;
        }
        v91 = (const double *)&v114;
        if (v47 <= &v114)
        {
          v92 = 96;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v114)
            v92 = 0;
          v91 = (const double *)((char *)&v114 + v92);
        }
        if (v53 >= 0xA)
        {
          if (v47 >= (uint64_t *)v91 + 1 || (unint64_t)v91 >= v44 + (v45 & 0xFFFFFFFFFFFFFFF8) + 8 * v53)
          {
            v47 += v53 & 0xFFFFFFFFFFFFFFFCLL;
            v93 = v53 & 3;
            v94 = vld1q_dup_f64(v91);
            v95 = (float64x2_t *)(v44 + 8 * v46 + 16);
            v96 = v53 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v95[-1] = v94;
              *v95 = v94;
              v95 += 2;
              v96 -= 4;
            }
            while (v96);
            if (v53 == (v53 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_86;
          }
          else
          {
            v93 = v53;
          }
        }
        else
        {
          v93 = v53;
        }
        do
        {
          *v47++ = *(_QWORD *)v91;
          --v93;
        }
        while (v93);
LABEL_86:
        v14 = (int64x2_t *)(*(_QWORD *)(v6 + 24) - 96);
        v8 = a3;
        v10 = v107;
LABEL_87:
        *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14->i64 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v113);
LABEL_88:
        v97 = (int64x2_t *)((char *)v29 + 8 * v28 + 8 * (_DWORD)v30 * v12);
        v99 = *v97;
        v98 = v97[1];
        v100 = (int64x2_t *)((char *)v97 + 8 * v30);
        v24 = *v100;
        v25 = v100[1];
        v101 = &v97[v30];
        v26 = *v101;
        v27 = v101[1];
        if (v29 == v14)
        {
          *v29 = v99;
          v29[1] = v98;
          v14 = v29;
        }
        else
        {
          *v14 = v99;
          v14[1] = v98;
        }
LABEL_10:
        v14[2] = v24;
        v14[3] = v25;
        v14[4] = v26;
        v14[5] = v27;
        if (++v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v57 = *(uint64_t **)(v6 + 24);
      do
LABEL_60:
        *v57++ = v114;
      while (v57 != v54);
      goto LABEL_61;
    }
  }
  return result;
}

unint64_t sub_20FA1FFA8(unint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5, int a6)
{
  unint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int64x2_t *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  unsigned int v36;
  int64x2_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int64x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _OWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _OWORD *v75;
  size_t v76;
  uint64_t *v77;
  _OWORD *v78;
  BOOL v79;
  uint64_t v80;
  int64x2_t v81;
  int64x2_t *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  int64x2_t *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  unint64_t v102;
  int64x2_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t *v106;
  int64x2_t *v107;
  int64x2_t *v108;
  unint64_t v111;
  unint64_t v112;
  unint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = a6;
    v8 = a3;
    v10 = result;
    result = 0;
    v11 = (unint64_t *)(v10 + 16);
    while (1)
    {
      v13 = *(unsigned int *)(v10 + 8);
      v12 = result + 1;
      v14 = (a5 & (result + 1 < v13)) != 0 ? v12 : v13;
      if ((_DWORD)v14)
        break;
LABEL_4:
      result = v12;
      if (v12 >= v6)
        return result;
    }
    v111 = result + 1;
    v15 = 0;
    v16 = *(_DWORD *)(*a4 + 4 * result);
    v17 = *(_QWORD *)(v10 + 88) + 8 * (*(_DWORD *)(v10 + 112) * result);
    v119 = v14;
    v120 = result;
    v118 = v16;
    v117 = v17;
    while (1)
    {
      v36 = *(_DWORD *)(*v8 + 4 * v15);
      v37 = *(int64x2_t **)a2;
      v38 = *(unsigned int *)(a2 + 16);
      v39 = *(_QWORD *)(v17 + 8 * v15);
      if (v7 && v36 > v16)
      {
        if (v39 == -1)
        {
          v40 = *(_QWORD *)(v10 + 80);
          if (v40)
          {
            v42 = *(_QWORD *)(v10 + 48);
            v41 = *(_QWORD *)(v10 + 56);
            v43 = ((v41 - v42) << 6) - 1;
            v44 = *(_QWORD *)(v10 + 72);
            if (v41 == v42)
              v43 = 0;
            v18 = (int64x2_t *)(*(_QWORD *)(v10 + 16)
                              + 8
                              * *(_QWORD *)(*(_QWORD *)(v42
                                                      + (((unint64_t)(v44 + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((v44 + v40 - 1) & 0x1FF)));
            *(_QWORD *)(v10 + 80) = v40 - 1;
            if ((unint64_t)(v43 - (v40 + v44) + 1) >= 0x400)
            {
              operator delete(*(void **)(v41 - 8));
              v17 = v117;
              v16 = v118;
              v14 = v119;
              result = v120;
              *(_QWORD *)(v10 + 56) -= 8;
            }
          }
          else
          {
            v50 = *(void **)(v10 + 24);
            v121 = 0;
            sub_20F1C5A3C(v11, v50, 0x10uLL, &v121);
            v17 = v117;
            v16 = v118;
            v14 = v119;
            result = v120;
            v18 = (int64x2_t *)(*(_QWORD *)(v10 + 24) - 128);
          }
          *(_QWORD *)(v17 + 8 * v15) = ((uint64_t)v18->i64 - *(_QWORD *)(v10 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
        }
        else
        {
          v18 = (int64x2_t *)(*v11 + 8 * v39);
        }
        v19 = (int64x2_t *)((char *)v37 + 8 * v16 + 8 * (_DWORD)v38 * v36);
        v20 = *v19;
        v21 = v19[1];
        v22 = (int64x2_t *)((char *)v19 + 8 * v38);
        v23 = *v22;
        v24 = v22[1];
        v25 = &v19[v38];
        v26 = v25[1];
        v27 = (int64x2_t *)((char *)v19 + 24 * v38);
        v28 = vzip1q_s64(v20, v23);
        v29 = vzip1q_s64(*v25, *v27);
        v31.i64[0] = vdupq_laneq_s64(*v25, 1).u64[0];
        v30 = vzip2q_s64(v20, v23);
        v31.i64[1] = v27->i64[1];
        v32 = vzip1q_s64(v21, v24);
        v33 = vzip1q_s64(v26, v27[1]);
        v34 = vzip2q_s64(v21, v24);
        v35.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
        v35.i64[1] = v27[1].i64[1];
        *v18 = v28;
        v18[1] = v29;
        goto LABEL_12;
      }
      if (v39 != -1)
      {
        v18 = (int64x2_t *)(*v11 + 8 * v39);
        goto LABEL_88;
      }
      v45 = *(_QWORD *)(v10 + 80);
      if (v45)
      {
        v47 = *(_QWORD *)(v10 + 48);
        v46 = *(_QWORD *)(v10 + 56);
        v48 = ((v46 - v47) << 6) - 1;
        v49 = *(_QWORD *)(v10 + 72);
        if (v46 == v47)
          v48 = 0;
        v18 = (int64x2_t *)(*(_QWORD *)(v10 + 16)
                          + 8
                          * *(_QWORD *)(*(_QWORD *)(v47
                                                  + (((unint64_t)(v49 + v45 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v49 + v45 - 1) & 0x1FF)));
        *(_QWORD *)(v10 + 80) = v45 - 1;
        if ((unint64_t)(v48 - (v45 + v49) + 1) >= 0x400)
        {
          operator delete(*(void **)(v46 - 8));
          v17 = v117;
          v16 = v118;
          v14 = v119;
          result = v120;
          *(_QWORD *)(v10 + 56) -= 8;
        }
        goto LABEL_87;
      }
      v121 = 0;
      v52 = *(_QWORD *)(v10 + 16);
      v51 = *(int64x2_t **)(v10 + 24);
      v53 = (uint64_t)((uint64_t)v51->i64 - v52) >> 3;
      v115 = (unint64_t)v51 - v52;
      v54 = (uint64_t *)(v52 + (((unint64_t)v51 - v52) & 0xFFFFFFFFFFFFFFF8));
      v55 = *(_QWORD *)(v10 + 32);
      if ((unint64_t)(v55 - (_QWORD)v51) < 0x80)
      {
        v56 = v53 + 16;
        if ((unint64_t)(v53 + 16) >> 61)
          sub_20E867F44();
        v57 = v55 - v52;
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        v112 = v56;
        if (v56)
        {
          if (v56 >> 61)
            sub_20E877A38();
          v58 = operator new(8 * v56);
          v53 = (uint64_t)((uint64_t)v51->i64 - v52) >> 3;
        }
        else
        {
          v58 = 0;
        }
        v65 = &v58[8 * v53];
        v65[6] = 0u;
        v65[7] = 0u;
        v65[4] = 0u;
        v65[5] = 0u;
        v65[2] = 0u;
        v65[3] = 0u;
        *v65 = 0u;
        v65[1] = 0u;
        if ((int64x2_t *)v52 == v51)
        {
          v67 = &v58[8 * v53];
        }
        else
        {
          if (v115 - 8 < 0x68)
          {
            v66 = (char *)(v52 + (((unint64_t)v51 - v52) & 0xFFFFFFFFFFFFFFF8));
            v67 = &v58[8 * v53];
            goto LABEL_52;
          }
          v66 = (char *)(v52 + (((unint64_t)v51 - v52) & 0xFFFFFFFFFFFFFFF8));
          v67 = &v58[8 * v53];
          if (v52 + (v115 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v58[v115 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_96;
          v68 = ((v115 - 8) >> 3) + 1;
          v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
          v66 = (char *)&v54[v69 / 0xFFFFFFFFFFFFFFF8];
          v67 = (char *)v65 - v69;
          v70 = &v58[8 * v53 - 16];
          v71 = (__int128 *)(v52 + 8 * v53 - 16);
          v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v73 = *v71;
            *(v70 - 1) = *(v71 - 1);
            *v70 = v73;
            v70 -= 2;
            v71 -= 2;
            v72 -= 4;
          }
          while (v72);
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_96:
            do
            {
LABEL_52:
              v74 = *((_QWORD *)v66 - 1);
              v66 -= 8;
              *((_QWORD *)v67 - 1) = v74;
              v67 -= 8;
            }
            while (v66 != (char *)v52);
          }
        }
        v75 = v65 + 8;
        v76 = (char *)v51 - (char *)v54;
        if (v76)
        {
          v116 = v58;
          v77 = v54;
          v78 = v65 + 8;
          memmove(v65 + 8, v77, v76);
          v75 = v78;
          v58 = v116;
        }
        *(_QWORD *)(v10 + 16) = v67;
        *(_QWORD *)(v10 + 24) = (char *)v75 + v76;
        *(_QWORD *)(v10 + 32) = &v58[8 * v112];
        v14 = v119;
        result = v120;
        v16 = v118;
        v17 = v117;
        if (v52)
        {
          operator delete((void *)v52);
          v17 = v117;
          v16 = v118;
          v14 = v119;
          result = v120;
        }
        goto LABEL_86;
      }
      v59 = (char *)v51 - (char *)v54;
      if ((unint64_t)((char *)v51 - (char *)v54) > 0x7F)
      {
        v61 = *(uint64_t **)(v10 + 24);
        v60 = 16;
        goto LABEL_64;
      }
      v60 = v59 >> 3;
      v61 = &v51->i64[16 - (v59 >> 3)];
      v62 = v59 & 0xFFFFFFFFFFFFFFF8;
      v63 = 120 - v62;
      if (120 - v62 < 0x68)
        break;
      v79 = &v121 < (uint64_t *)((char *)v51[8].i64 - v62);
      if (v51 < (int64x2_t *)&v122)
      {
        v64 = *(uint64_t **)(v10 + 24);
        if (v79)
          goto LABEL_62;
      }
      v80 = (v63 >> 3) + 1;
      v64 = &v51->i64[v80 & 0x3FFFFFFFFFFFFFFCLL];
      v81 = vdupq_lane_s64(v121, 0);
      v82 = v51 + 1;
      v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v82[-1] = v81;
        *v82 = v81;
        v82 += 2;
        v83 -= 4;
      }
      while (v83);
      if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_62;
LABEL_63:
      *(_QWORD *)(v10 + 24) = v61;
      if (v51 == (int64x2_t *)v54)
        goto LABEL_86;
LABEL_64:
      v84 = (char *)v61 - (char *)(v54 + 16);
      v85 = v84 >> 3;
      v86 = (int64x2_t *)(v61 - 16);
      v87 = (char *)v61;
      if (v61 - 16 < (uint64_t *)v51)
      {
        v88 = (v115 & 0xFFFFFFFFFFFFFFF8) + v84;
        v89 = v52 + v88 + 8;
        if ((unint64_t)v51 > v89)
          v89 = (unint64_t)v51;
        v90 = v89 + ~v52 - v88;
        if (v90 >= 0x58)
        {
          v91 = (v90 >> 3) + 1;
          v92 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          v86 = (int64x2_t *)((char *)v86 + v92 * 8);
          v87 = (char *)&v61[v92];
          v93 = v61 + 2;
          v94 = (__int128 *)(v52 + 8 * v85 + 8 * v53 + 16);
          v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v96 = *v94;
            *(v93 - 1) = *(v94 - 1);
            *v93 = v96;
            v93 += 2;
            v94 += 2;
            v95 -= 4;
          }
          while (v95);
          if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_73;
        }
        else
        {
          v87 = (char *)v61;
        }
        do
        {
          v97 = v86->i64[0];
          v86 = (int64x2_t *)((char *)v86 + 8);
          *(_QWORD *)v87 = v97;
          v87 += 8;
        }
        while (v86 < v51);
      }
LABEL_73:
      *(_QWORD *)(v10 + 24) = v87;
      if (v61 != v54 + 16)
      {
        memmove(&v61[-v85], (const void *)(v52 + (((unint64_t)v51 - v52) & 0xFFFFFFFFFFFFFFF8)), v84);
        v53 = (uint64_t)((uint64_t)v51->i64 - v52) >> 3;
        v17 = v117;
        v16 = v118;
        v14 = v119;
        result = v120;
      }
      v98 = &v121;
      if (v54 <= &v121)
        v98 = &v121 + 16 * (unint64_t)(*(_QWORD *)(v10 + 24) > (unint64_t)&v121);
      if (v60 >= 0xA)
      {
        if (v54 >= v98 + 1 || (unint64_t)v98 >= v52 + (v115 & 0xFFFFFFFFFFFFFFF8) + 8 * v60)
        {
          v54 += v60 & 0xFFFFFFFFFFFFFFFCLL;
          v99 = v60 & 3;
          v100 = vld1q_dup_f64((const double *)v98);
          v101 = (float64x2_t *)(v52 + 8 * v53 + 16);
          v102 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v101[-1] = v100;
            *v101 = v100;
            v101 += 2;
            v102 -= 4;
          }
          while (v102);
          if (v60 == (v60 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_86;
        }
        else
        {
          v99 = v60;
        }
      }
      else
      {
        v99 = v60;
      }
      do
      {
        *v54++ = *v98;
        --v99;
      }
      while (v99);
LABEL_86:
      v18 = (int64x2_t *)(*(_QWORD *)(v10 + 24) - 128);
      v7 = a6;
      v8 = a3;
      v11 = (unint64_t *)(v10 + 16);
LABEL_87:
      *(_QWORD *)(v17 + 8 * v15) = ((uint64_t)v18->i64 - *(_QWORD *)(v10 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
LABEL_88:
      v103 = (int64x2_t *)((char *)v37 + 8 * v36 + 8 * (_DWORD)v38 * v16);
      v105 = *v103;
      v104 = v103[1];
      v106 = (int64x2_t *)((char *)v103 + 8 * v38);
      v30 = *v106;
      v31 = v106[1];
      v107 = &v103[v38];
      v32 = *v107;
      v33 = v107[1];
      v108 = (int64x2_t *)((char *)v103 + 24 * v38);
      v34 = *v108;
      v35 = v108[1];
      if (v37 == v18)
      {
        *v37 = v105;
        v37[1] = v104;
        v18 = v37;
      }
      else
      {
        *v18 = v105;
        v18[1] = v104;
      }
LABEL_12:
      v18[2] = v30;
      v18[3] = v31;
      v18[4] = v32;
      v18[5] = v33;
      ++v15;
      v18[6] = v34;
      v18[7] = v35;
      if (v15 == v14)
      {
        v6 = *(unsigned int *)(v10 + 12);
        v12 = v111;
        goto LABEL_4;
      }
    }
    v64 = *(uint64_t **)(v10 + 24);
    do
LABEL_62:
      *v64++ = v121;
    while (v64 != v61);
    goto LABEL_63;
  }
  return result;
}

uint64_t sub_20FA20744(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int8x16_t *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t *v33;
  int64x2_t *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64x2_t *v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  size_t v60;
  uint64_t *v61;
  _QWORD *v62;
  BOOL v63;
  uint64_t v64;
  int64x2_t v65;
  int64x2_t *v66;
  uint64_t v67;
  int64x2_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  const double *v73;
  uint64_t v74;
  unint64_t v75;
  float64x2_t v76;
  float64x2_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v83;
  unint64_t v84;
  int64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      result += 16;
      v94 = 0;
      while (1)
      {
        v10 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v10)
          break;
LABEL_5:
        if (++v94 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v94);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v94);
      v92 = v13;
      v93 = *(unsigned int *)(v6 + 8);
      while (1)
      {
        v18 = *(_DWORD *)(*v8 + 4 * v11);
        v19 = *(_QWORD **)a2;
        v20 = *(unsigned int *)(a2 + 16);
        v21 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v18 > v12)
        {
          if (v21 == -1)
          {
            v22 = *(_QWORD *)(v6 + 80);
            if (v22)
            {
              v24 = *(_QWORD *)(v6 + 48);
              v23 = *(_QWORD *)(v6 + 56);
              v25 = ((v23 - v24) << 6) - 1;
              v26 = *(_QWORD *)(v6 + 72);
              if (v23 == v24)
                v25 = 0;
              v14 = (_QWORD *)(*(_QWORD *)(v6 + 16)
                             + 8
                             * *(_QWORD *)(*(_QWORD *)(v24
                                                     + (((unint64_t)(v26 + v22 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                         + 8 * ((v26 + v22 - 1) & 0x1FF)));
              *(_QWORD *)(v6 + 80) = v22 - 1;
              if ((unint64_t)(v25 - (v22 + v26) + 1) >= 0x400)
              {
                operator delete(*(void **)(v23 - 8));
                v13 = v92;
                v10 = v93;
                result = v6 + 16;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v32 = *(void **)(v6 + 24);
              v95 = 0;
              sub_20F1C5A3C((unint64_t *)(v6 + 16), v32, 3uLL, &v95);
              v13 = v92;
              v10 = v93;
              result = v6 + 16;
              v14 = (_QWORD *)(*(_QWORD *)(v6 + 24) - 24);
            }
            *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v94);
          }
          else
          {
            v14 = (_QWORD *)(*(_QWORD *)result + 8 * v21);
          }
          v15 = (int8x16_t *)&v19[v12 + (_DWORD)v20 * v18];
          v16 = v15[1].i64[0];
          v17 = vextq_s8(*v15, *v15, 8uLL).u64[0];
          *v14 = v15->i64[0];
          goto LABEL_10;
        }
        if (v21 != -1)
        {
          v14 = (_QWORD *)(*(_QWORD *)result + 8 * v21);
          goto LABEL_81;
        }
        v27 = *(_QWORD *)(v6 + 80);
        if (v27)
        {
          v29 = *(_QWORD *)(v6 + 48);
          v28 = *(_QWORD *)(v6 + 56);
          v30 = ((v28 - v29) << 6) - 1;
          v31 = *(_QWORD *)(v6 + 72);
          if (v28 == v29)
            v30 = 0;
          v14 = (_QWORD *)(*(_QWORD *)(v6 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
          *(_QWORD *)(v6 + 80) = v27 - 1;
          if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
          {
            operator delete(*(void **)(v28 - 8));
            v13 = v92;
            v10 = v93;
            result = v6 + 16;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_80;
        }
        v95 = 0;
        v33 = *(uint64_t **)(v6 + 16);
        v34 = *(int64x2_t **)(v6 + 24);
        v35 = (char *)v34 - (char *)v33;
        v36 = ((char *)v34 - (char *)v33) >> 3;
        v37 = (uint64_t *)((char *)v33 + (((char *)v34 - (char *)v33) & 0xFFFFFFFFFFFFFFF8));
        v38 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v38 - (_QWORD)v34) < 0x18)
        {
          v39 = v36 + 3;
          if ((unint64_t)(v36 + 3) >> 61)
            sub_20E867F44();
          v40 = v38 - (_QWORD)v33;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          v83 = v39;
          if (v39)
          {
            v86 = (char *)v34 - (char *)v33;
            v89 = ((char *)v34 - (char *)v33) >> 3;
            if (v39 >> 61)
              sub_20E877A38();
            v41 = *(int64x2_t **)(v6 + 16);
            v42 = operator new(8 * v39);
            v33 = (uint64_t *)v41;
            v35 = v86;
            v36 = v89;
            v43 = &v42[8 * v89];
            *v43 = 0;
            v43[1] = 0;
            v43[2] = 0;
            if (v41 != v34)
            {
LABEL_37:
              if ((unint64_t)(v35 - 8) < 0x68)
              {
                v44 = v37;
                v45 = v43;
                goto LABEL_49;
              }
              v44 = v37;
              v45 = v43;
              if ((unint64_t)((char *)v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - &v42[v35 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                goto LABEL_89;
              v52 = ((unint64_t)(v35 - 8) >> 3) + 1;
              v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v37[v53 / 0xFFFFFFFFFFFFFFF8];
              v45 = &v43[v53 / 0xFFFFFFFFFFFFFFF8];
              v54 = &v42[8 * v36 - 16];
              v55 = &v33[v36 - 2];
              v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v57 = *(_OWORD *)v55;
                *(v54 - 1) = *((_OWORD *)v55 - 1);
                *v54 = v57;
                v54 -= 2;
                v55 -= 4;
                v56 -= 4;
              }
              while (v56);
              if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
LABEL_49:
                  v58 = *--v44;
                  *--v45 = v58;
                }
                while (v44 != v33);
              }
LABEL_50:
              v59 = v43 + 3;
              v60 = (char *)v34 - (char *)v37;
              if (v60)
              {
                v87 = v42;
                v90 = v33;
                v61 = v37;
                v62 = v43 + 3;
                memmove(v43 + 3, v61, v60);
                v59 = v62;
                v42 = v87;
                v33 = v90;
              }
              *(_QWORD *)(v6 + 16) = v45;
              *(_QWORD *)(v6 + 24) = (char *)v59 + v60;
              *(_QWORD *)(v6 + 32) = &v42[8 * v83];
              v7 = a5;
              v10 = v93;
              result = v6 + 16;
              v13 = v92;
              if (v33)
              {
                operator delete(v33);
                v13 = v92;
                v10 = v93;
                result = v6 + 16;
              }
              goto LABEL_79;
            }
          }
          else
          {
            v42 = 0;
            v43 = (_QWORD *)(8 * v36);
            *v43 = 0;
            v43[1] = 0;
            v43[2] = 0;
            if (v33 != (uint64_t *)v34)
              goto LABEL_37;
          }
          v45 = v43;
          goto LABEL_50;
        }
        v46 = (char *)v34 - (char *)v37;
        if ((unint64_t)((char *)v34 - (char *)v37) <= 0x17)
          break;
        v48 = *(uint64_t **)(v6 + 24);
        v47 = 3;
LABEL_61:
        v68 = (int64x2_t *)(v48 - 3);
        v69 = v48;
        if (v48 - 3 < (uint64_t *)v34)
        {
          v69 = v48;
          do
          {
            v70 = v68->i64[0];
            v68 = (int64x2_t *)((char *)v68 + 8);
            *v69++ = v70;
          }
          while (v68 < v34);
        }
        v91 = v33;
        *(_QWORD *)(v6 + 24) = v69;
        if (v48 != v37 + 3)
        {
          v71 = (char *)v33 + (((char *)v34 - (char *)v33) & 0xFFFFFFFFFFFFFFF8);
          v72 = ((char *)v34 - (char *)v33) >> 3;
          v88 = v35;
          v84 = v47;
          memmove(&v48[-(v48 - (v37 + 3))], v71, (char *)v48 - (char *)(v37 + 3));
          v47 = v84;
          v35 = v88;
          v36 = v72;
          v13 = v92;
          v10 = v93;
          result = v6 + 16;
        }
        v73 = (const double *)&v95;
        if (v37 <= &v95)
        {
          v74 = 24;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v95)
            v74 = 0;
          v73 = (const double *)((char *)&v95 + v74);
        }
        if (v47 >= 0xA)
        {
          if (v37 >= (uint64_t *)v73 + 1 || v73 >= (const double *)((char *)&v91[v47] + (v35 & 0xFFFFFFFFFFFFFFF8)))
          {
            v37 += v47 & 0xFFFFFFFFFFFFFFFCLL;
            v75 = v47 & 3;
            v76 = vld1q_dup_f64(v73);
            v77 = (float64x2_t *)&v91[v36 + 2];
            v78 = v47 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v77[-1] = v76;
              *v77 = v76;
              v77 += 2;
              v78 -= 4;
            }
            while (v78);
            if (v47 == (v47 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_79;
          }
          else
          {
            v75 = v47;
          }
        }
        else
        {
          v75 = v47;
        }
        do
        {
          *v37++ = *(_QWORD *)v73;
          --v75;
        }
        while (v75);
LABEL_79:
        v14 = (_QWORD *)(*(_QWORD *)(v6 + 24) - 24);
        v8 = a3;
LABEL_80:
        *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v94);
LABEL_81:
        v79 = &v19[v18 + (_DWORD)v20 * v12];
        v80 = *v79;
        v17 = v79[v20];
        v16 = v79[2 * v20];
        if (v19 == v14)
        {
          *v19 = v80;
          v14 = v19;
        }
        else
        {
          *v14 = v80;
        }
LABEL_10:
        v14[1] = v17;
        v14[2] = v16;
        if (++v11 == v10)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v47 = v46 >> 3;
      v48 = &v34->i64[3 - (v46 >> 3)];
      v49 = v46 & 0xFFFFFFFFFFFFFFF8;
      v50 = 16 - v49;
      if (16 - v49 >= 0x68)
      {
        v63 = &v95 < (uint64_t *)((char *)&v34[1].i64[1] - v49);
        if (v34 >= (int64x2_t *)&v96 || (v51 = *(uint64_t **)(v6 + 24), !v63))
        {
          v64 = (v50 >> 3) + 1;
          v51 = &v34->i64[v64 & 0x3FFFFFFFFFFFFFFCLL];
          v65 = vdupq_lane_s64(v95, 0);
          v66 = v34 + 1;
          v67 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66[-1] = v65;
            *v66 = v65;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_60:
            *(_QWORD *)(v6 + 24) = v48;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_79;
            goto LABEL_61;
          }
        }
      }
      else
      {
        v51 = *(uint64_t **)(v6 + 24);
      }
      do
        *v51++ = v95;
      while (v51 != v48);
      goto LABEL_60;
    }
  }
  return result;
}

uint64_t sub_20FA20E60(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int8x16_t *v15;
  int8x16_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  int64x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64x2_t *v42;
  _BYTE *v43;
  _OWORD *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _OWORD *v60;
  size_t v61;
  uint64_t *v62;
  _OWORD *v63;
  BOOL v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t *v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64x2_t *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v94;
  unint64_t v95;
  __int8 *v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      result += 16;
      v105 = 0;
      while (1)
      {
        v10 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v10)
          break;
LABEL_5:
        if (++v105 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v105);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v105);
      v103 = v13;
      v104 = *(unsigned int *)(v6 + 8);
      while (1)
      {
        v19 = *(_DWORD *)(*v8 + 4 * v11);
        v20 = *(_QWORD **)a2;
        v21 = *(unsigned int *)(a2 + 16);
        v22 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v19 > v12)
        {
          if (v22 == -1)
          {
            v23 = *(_QWORD *)(v6 + 80);
            if (v23)
            {
              v25 = *(_QWORD *)(v6 + 48);
              v24 = *(_QWORD *)(v6 + 56);
              v26 = ((v24 - v25) << 6) - 1;
              v27 = *(_QWORD *)(v6 + 72);
              if (v24 == v25)
                v26 = 0;
              v14 = (_QWORD *)(*(_QWORD *)(v6 + 16)
                             + 8
                             * *(_QWORD *)(*(_QWORD *)(v25
                                                     + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                         + 8 * ((v27 + v23 - 1) & 0x1FF)));
              *(_QWORD *)(v6 + 80) = v23 - 1;
              if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
              {
                operator delete(*(void **)(v24 - 8));
                v13 = v103;
                v10 = v104;
                result = v6 + 16;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v33 = *(void **)(v6 + 24);
              v106 = 0;
              sub_20F1C5A3C((unint64_t *)(v6 + 16), v33, 4uLL, &v106);
              v13 = v103;
              v10 = v104;
              result = v6 + 16;
              v14 = (_QWORD *)(*(_QWORD *)(v6 + 24) - 32);
            }
            *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v105);
          }
          else
          {
            v14 = (_QWORD *)(*(_QWORD *)result + 8 * v22);
          }
          v15 = (int8x16_t *)&v20[v12 + (_DWORD)v21 * v19];
          v16 = v15[1];
          v17 = vextq_s8(*v15, *v15, 8uLL).u64[0];
          v18 = vextq_s8(v16, v16, 8uLL).u64[0];
          *v14 = v15->i64[0];
          goto LABEL_10;
        }
        if (v22 != -1)
        {
          v14 = (_QWORD *)(*(_QWORD *)result + 8 * v22);
          goto LABEL_85;
        }
        v28 = *(_QWORD *)(v6 + 80);
        if (v28)
        {
          v30 = *(_QWORD *)(v6 + 48);
          v29 = *(_QWORD *)(v6 + 56);
          v31 = ((v29 - v30) << 6) - 1;
          v32 = *(_QWORD *)(v6 + 72);
          if (v29 == v30)
            v31 = 0;
          v14 = (_QWORD *)(*(_QWORD *)(v6 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v32 + v28 - 1) & 0x1FF)));
          *(_QWORD *)(v6 + 80) = v28 - 1;
          if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
          {
            operator delete(*(void **)(v29 - 8));
            v13 = v103;
            v10 = v104;
            result = v6 + 16;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_84;
        }
        v106 = 0;
        v34 = *(_QWORD *)(v6 + 16);
        v35 = *(int64x2_t **)(v6 + 24);
        v36 = (unint64_t)v35 - v34;
        v37 = (uint64_t)((uint64_t)v35->i64 - v34) >> 3;
        v38 = (uint64_t *)(v34 + (((unint64_t)v35 - v34) & 0xFFFFFFFFFFFFFFF8));
        v39 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v39 - (_QWORD)v35) < 0x20)
        {
          v40 = v37 + 4;
          if ((unint64_t)(v37 + 4) >> 61)
            sub_20E867F44();
          v41 = v39 - v34;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          v94 = v40;
          if (v40)
          {
            v97 = &v35->i8[-v34];
            v100 = (uint64_t)((uint64_t)v35->i64 - v34) >> 3;
            if (v40 >> 61)
              sub_20E877A38();
            v42 = *(int64x2_t **)(v6 + 16);
            v43 = operator new(8 * v40);
            v34 = (unint64_t)v42;
            v36 = (unint64_t)v97;
            v37 = v100;
            v44 = &v43[8 * v100];
            *v44 = 0u;
            v44[1] = 0u;
            if (v42 != v35)
            {
LABEL_37:
              if (v36 - 8 < 0x68)
              {
                v45 = v38;
                v46 = (char *)v44;
                goto LABEL_49;
              }
              v45 = v38;
              v46 = (char *)v44;
              if (v34 + (v36 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v43[v36 & 0xFFFFFFFFFFFFFFF8] < 0x20)
                goto LABEL_93;
              v53 = ((v36 - 8) >> 3) + 1;
              v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v38[v54 / 0xFFFFFFFFFFFFFFF8];
              v46 = (char *)v44 - v54;
              v55 = &v43[8 * v37 - 16];
              v56 = (__int128 *)(v34 + 8 * v37 - 16);
              v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v58 = *v56;
                *(v55 - 1) = *(v56 - 1);
                *v55 = v58;
                v55 -= 2;
                v56 -= 2;
                v57 -= 4;
              }
              while (v57);
              if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_93:
                do
                {
LABEL_49:
                  v59 = *--v45;
                  *((_QWORD *)v46 - 1) = v59;
                  v46 -= 8;
                }
                while (v45 != (uint64_t *)v34);
              }
LABEL_50:
              v60 = v44 + 2;
              v61 = (char *)v35 - (char *)v38;
              if (v61)
              {
                v98 = v43;
                v101 = v34;
                v62 = v38;
                v63 = v44 + 2;
                memmove(v44 + 2, v62, v61);
                v60 = v63;
                v43 = v98;
                v34 = v101;
              }
              *(_QWORD *)(v6 + 16) = v46;
              *(_QWORD *)(v6 + 24) = (char *)v60 + v61;
              *(_QWORD *)(v6 + 32) = &v43[8 * v94];
              v7 = a5;
              v10 = v104;
              result = v6 + 16;
              v13 = v103;
              if (v34)
              {
                operator delete((void *)v34);
                v13 = v103;
                v10 = v104;
                result = v6 + 16;
              }
              goto LABEL_83;
            }
          }
          else
          {
            v43 = 0;
            v44 = (_OWORD *)(8 * v37);
            *v44 = 0u;
            v44[1] = 0u;
            if ((int64x2_t *)v34 != v35)
              goto LABEL_37;
          }
          v46 = (char *)v44;
          goto LABEL_50;
        }
        v47 = (char *)v35 - (char *)v38;
        if ((unint64_t)((char *)v35 - (char *)v38) > 0x1F)
        {
          v49 = *(uint64_t **)(v6 + 24);
          v48 = 4;
          goto LABEL_61;
        }
        v48 = v47 >> 3;
        v49 = &v35->i64[4 - (v47 >> 3)];
        v50 = v47 & 0xFFFFFFFFFFFFFFF8;
        v51 = 24 - v50;
        if (24 - v50 < 0x68)
          break;
        v64 = &v106 < (uint64_t *)((char *)v35[2].i64 - v50);
        if (v35 < (int64x2_t *)&v107)
        {
          v52 = *(uint64_t **)(v6 + 24);
          if (v64)
            goto LABEL_59;
        }
        v65 = (v51 >> 3) + 1;
        v52 = &v35->i64[v65 & 0x3FFFFFFFFFFFFFFCLL];
        v66 = vdupq_lane_s64(v106, 0);
        v67 = v35 + 1;
        v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67[-1] = v66;
          *v67 = v66;
          v67 += 2;
          v68 -= 4;
        }
        while (v68);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_59;
LABEL_60:
        *(_QWORD *)(v6 + 24) = v49;
        if (v35 == (int64x2_t *)v38)
          goto LABEL_83;
LABEL_61:
        v69 = (char *)v49 - (char *)(v38 + 4);
        v70 = v69 >> 3;
        v71 = (int64x2_t *)(v49 - 4);
        v72 = (char *)v49;
        if (v49 - 4 < (uint64_t *)v35)
        {
          v73 = (v36 & 0xFFFFFFFFFFFFFFF8) + v69;
          v74 = v34 + v73 + 8;
          if ((unint64_t)v35 > v74)
            v74 = (unint64_t)v35;
          v75 = v74 + ~v34 - v73;
          if (v75 >= 0x58)
          {
            v76 = (v75 >> 3) + 1;
            v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            v71 = (int64x2_t *)((char *)v71 + v77 * 8);
            v72 = (char *)&v49[v77];
            v78 = v49 + 2;
            v79 = (__int128 *)(v34 + 8 * v70 + 8 * v37 + 16);
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *v79;
              *(v78 - 1) = *(v79 - 1);
              *v78 = v81;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            v36 = (unint64_t)v35 - v34;
            if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_70;
          }
          else
          {
            v72 = (char *)v49;
          }
          do
          {
            v82 = v71->i64[0];
            v71 = (int64x2_t *)((char *)v71 + 8);
            *(_QWORD *)v72 = v82;
            v72 += 8;
          }
          while (v71 < v35);
        }
LABEL_70:
        v102 = v34;
        *(_QWORD *)(v6 + 24) = v72;
        if (v49 != v38 + 4)
        {
          v83 = (char *)(v34 + (((unint64_t)v35 - v34) & 0xFFFFFFFFFFFFFFF8));
          v84 = (uint64_t)((uint64_t)v35->i64 - v34) >> 3;
          v99 = (char *)v36;
          v95 = v48;
          memmove(&v49[-v70], v83, v69);
          v48 = v95;
          v36 = (unint64_t)v99;
          v37 = v84;
          v13 = v103;
          v10 = v104;
          result = v6 + 16;
        }
        v85 = &v106;
        if (v38 <= &v106)
          v85 = &v106 + 4 * (*(_QWORD *)(v6 + 24) > (unint64_t)&v106);
        if (v48 >= 0xA)
        {
          if (v38 >= v85 + 1 || (unint64_t)v85 >= v102 + (v36 & 0xFFFFFFFFFFFFFFF8) + 8 * v48)
          {
            v38 += v48 & 0xFFFFFFFFFFFFFFFCLL;
            v86 = v48 & 3;
            v87 = vld1q_dup_f64((const double *)v85);
            v88 = (float64x2_t *)(v102 + 8 * v37 + 16);
            v89 = v48 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v88[-1] = v87;
              *v88 = v87;
              v88 += 2;
              v89 -= 4;
            }
            while (v89);
            if (v48 == (v48 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_83;
          }
          else
          {
            v86 = v48;
          }
        }
        else
        {
          v86 = v48;
        }
        do
        {
          *v38++ = *v85;
          --v86;
        }
        while (v86);
LABEL_83:
        v14 = (_QWORD *)(*(_QWORD *)(v6 + 24) - 32);
        v8 = a3;
LABEL_84:
        *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v105);
LABEL_85:
        v90 = &v20[v19 + (_DWORD)v21 * v12];
        v91 = *v90;
        v17 = v90[v21];
        v16.i64[0] = v90[2 * v21];
        v18 = v90[3 * v21];
        if (v20 == v14)
        {
          *v20 = v91;
          v14 = v20;
        }
        else
        {
          *v14 = v91;
        }
LABEL_10:
        v14[1] = v17;
        v14[2] = v16.i64[0];
        v14[3] = v18;
        if (++v11 == v10)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v52 = *(uint64_t **)(v6 + 24);
      do
LABEL_59:
        *v52++ = v106;
      while (v52 != v49);
      goto LABEL_60;
    }
  }
  return result;
}

unint64_t sub_20FA21588(unint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5, int a6)
{
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  int8x16_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  int8x16_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  int64x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  _OWORD *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _OWORD *v112;
  size_t v113;
  BOOL v114;
  uint64_t v115;
  int64x2_t v116;
  int64x2_t *v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  int64x2_t *v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  float64x2_t v136;
  float64x2_t *v137;
  unint64_t v138;
  int8x16_t *v139;
  int8x16_t v140;
  unint64_t v141;
  int8x16_t *v142;
  int8x16_t *v143;
  int8x16_t *v144;
  int8x16_t *v145;
  int8x16_t *v146;
  int8x16_t v147;
  int8x16_t v148;
  unint64_t v152;
  uint64_t v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int64x2_t v170;
  uint64_t v171[2];

  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = a6;
    v8 = a3;
    v9 = a2;
    v10 = result;
    result = 0;
    v11 = (unint64_t *)(v10 + 16);
    while (1)
    {
      v13 = *(unsigned int *)(v10 + 8);
      v12 = result + 1;
      v14 = (a5 & (result + 1 < v13)) != 0 ? v12 : v13;
      if ((_DWORD)v14)
        break;
LABEL_4:
      result = v12;
      if (v12 >= v6)
        return result;
    }
    v152 = result + 1;
    v15 = 0;
    v16 = *(_DWORD *)(*a4 + 4 * result);
    v17 = *(_QWORD *)(v10 + 88) + 8 * (*(_DWORD *)(v10 + 112) * result);
    v157 = v14;
    v158 = result;
    v156 = v16;
    v155 = v17;
    while (1)
    {
      v72 = *(_DWORD *)(*v8 + 4 * v15);
      v73 = *(int8x16_t **)v9;
      v74 = *(unsigned int *)(v9 + 16);
      v75 = *(_QWORD *)(v17 + 8 * v15);
      if (v7 && v72 > v16)
      {
        if (v75 == -1)
        {
          v76 = *(_QWORD *)(v10 + 80);
          if (v76)
          {
            v78 = *(_QWORD *)(v10 + 48);
            v77 = *(_QWORD *)(v10 + 56);
            v79 = ((v77 - v78) << 6) - 1;
            v80 = *(_QWORD *)(v10 + 72);
            if (v77 == v78)
              v79 = 0;
            v18 = (int8x16_t *)(*(_QWORD *)(v10 + 16)
                              + 8
                              * *(_QWORD *)(*(_QWORD *)(v78
                                                      + (((unint64_t)(v80 + v76 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((v80 + v76 - 1) & 0x1FF)));
            *(_QWORD *)(v10 + 80) = v76 - 1;
            if ((unint64_t)(v79 - (v76 + v80) + 1) >= 0x400)
            {
              operator delete(*(void **)(v77 - 8));
              v17 = v155;
              v16 = v156;
              v14 = v157;
              result = v158;
              *(_QWORD *)(v10 + 56) -= 8;
            }
          }
          else
          {
            v86 = *(void **)(v10 + 24);
            v170.i64[0] = 0;
            sub_20F1C5A3C(v11, v86, 0x24uLL, v170.i64);
            v17 = v155;
            v16 = v156;
            v14 = v157;
            result = v158;
            v18 = (int8x16_t *)(*(_QWORD *)(v10 + 24) - 288);
          }
          *(_QWORD *)(v17 + 8 * v15) = ((uint64_t)v18->i64 - *(_QWORD *)(v10 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
        }
        else
        {
          v18 = (int8x16_t *)(*v11 + 8 * v75);
        }
        v19 = (int64x2_t *)((char *)v73 + 8 * v16 + 8 * (_DWORD)v74 * v72);
        v21 = v19[1];
        v20 = v19[2];
        v22 = *v19;
        v23 = (int64x2_t *)((char *)v19 + 8 * v74);
        v25 = v23[1];
        v24 = v23[2];
        v26 = *v23;
        v27 = &v19[v74];
        v29 = v27[1];
        v28 = v27[2];
        v30 = *v27;
        v31 = (int64x2_t *)((char *)v19 + 24 * v74);
        v32 = v31[1];
        v33 = v31[2];
        v34 = *v31;
        v35 = &v19[2 * v74];
        v37 = v35[1];
        v36 = v35[2];
        v38 = (int64x2_t *)((char *)v19 + 40 * v74);
        v39 = vzip1q_s64(v22, v26);
        v40 = vzip1q_s64(v30, v34);
        v41 = vzip1q_s64(*v35, *v38);
        v42 = (int8x16_t)vzip2q_s64(v22, v26);
        v43.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
        v43.i64[1] = v34.i64[1];
        v44.i64[0] = vdupq_laneq_s64(*v35, 1).u64[0];
        v44.i64[1] = v38->i64[1];
        v45 = vextq_s8(v44, v44, 8uLL).u64[0];
        v46 = vextq_s8(v43, v43, 8uLL).u64[0];
        v47 = vextq_s8(v42, v42, 8uLL).u64[0];
        v48 = (int8x16_t)vzip1q_s64(v21, v25);
        v49 = (int8x16_t)vzip1q_s64(v29, v32);
        v50 = (int8x16_t)vzip1q_s64(v37, v38[1]);
        v51 = vextq_s8(v50, v50, 8uLL).u64[0];
        v52 = vextq_s8(v49, v49, 8uLL).u64[0];
        v53 = vextq_s8(v48, v48, 8uLL).u64[0];
        v54 = (int8x16_t)vzip2q_s64(v21, v25);
        v55.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
        v55.i64[1] = v32.i64[1];
        v56.i64[0] = vdupq_laneq_s64(v37, 1).u64[0];
        v56.i64[1] = v38[1].i64[1];
        v57 = vextq_s8(v56, v56, 8uLL).u64[0];
        v58 = vextq_s8(v55, v55, 8uLL).u64[0];
        v59 = vextq_s8(v54, v54, 8uLL).u64[0];
        v60 = (int8x16_t)vzip1q_s64(v20, v24);
        v61 = (int8x16_t)vzip1q_s64(v28, v33);
        v62 = (int8x16_t)vzip1q_s64(v36, v38[2]);
        v63 = (int8x16_t)vzip2q_s64(v20, v24);
        v64 = vextq_s8(v62, v62, 8uLL).u64[0];
        v65.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
        v65.i64[1] = v33.i64[1];
        v66 = vextq_s8(v61, v61, 8uLL).u64[0];
        v67.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
        v67.i64[1] = v38[2].i64[1];
        v68 = vextq_s8(v60, v60, 8uLL).u64[0];
        *v18 = (int8x16_t)v39;
        v18[1] = (int8x16_t)v40;
        v69 = vextq_s8(v67, v67, 8uLL).u64[0];
        v70 = vextq_s8(v65, v65, 8uLL).u64[0];
        v18[2] = (int8x16_t)v41;
        v71 = vextq_s8(v63, v63, 8uLL).u64[0];
        goto LABEL_12;
      }
      if (v75 == -1)
        break;
      v18 = (int8x16_t *)(*v11 + 8 * v75);
LABEL_90:
      v139 = (int8x16_t *)((char *)v73 + 8 * v72 + 8 * (_DWORD)v74 * v16);
      v148 = v139[1];
      v140 = v139[2];
      v147 = *v139;
      v141 = vextq_s8(v140, v140, 8uLL).u64[0];
      v142 = (int8x16_t *)((char *)v139 + 8 * v74);
      v43 = v142[1];
      v44 = v142[2];
      v42 = *v142;
      v167 = vextq_s8(v43, v43, 8uLL).u64[0];
      v169 = vextq_s8(v44, v44, 8uLL).u64[0];
      v164 = vextq_s8(v42, v42, 8uLL).u64[0];
      v143 = &v139[v74];
      v49 = v143[1];
      v50 = v143[2];
      v48 = *v143;
      v165 = vextq_s8(v50, v50, 8uLL).u64[0];
      v163 = vextq_s8(v49, v49, 8uLL).u64[0];
      v162 = vextq_s8(v48, v48, 8uLL).u64[0];
      v144 = (int8x16_t *)((char *)v139 + 24 * v74);
      v55 = v144[1];
      v56 = v144[2];
      v54 = *v144;
      v57 = vextq_s8(v56, v56, 8uLL).u64[0];
      v58 = vextq_s8(v55, v55, 8uLL).u64[0];
      v145 = &v139[2 * v74];
      v61 = v145[1];
      v62 = v145[2];
      v60 = *v145;
      v160 = vextq_s8(v54, v54, 8uLL).u64[0];
      v161 = vextq_s8(v62, v62, 8uLL).u64[0];
      v159 = vextq_s8(v61, v61, 8uLL).u64[0];
      v68 = vextq_s8(v60, v60, 8uLL).u64[0];
      v146 = (int8x16_t *)((char *)v139 + 40 * v74);
      v65 = v146[1];
      v67 = v146[2];
      v63 = *v146;
      v69 = vextq_s8(v67, v67, 8uLL).u64[0];
      v70 = vextq_s8(v65, v65, 8uLL).u64[0];
      v71 = vextq_s8(v63, v63, 8uLL).u64[0];
      v147.i64[1] = vextq_s8(v147, v147, 8uLL).u64[0];
      v148.i64[1] = vextq_s8(v148, v148, 8uLL).u64[0];
      if (v73 == v18)
      {
        *v73 = v147;
        v73[1] = v148;
        v140.i64[1] = v141;
        v73[2] = v140;
        v18 = v73;
      }
      else
      {
        *v18 = v147;
        v18[1] = v148;
        v140.i64[1] = v141;
        v18[2] = v140;
      }
      v46 = v167;
      v45 = v169;
      v47 = v164;
      v51 = v165;
      v53 = v162;
      v52 = v163;
      v59 = v160;
      v64 = v161;
      v66 = v159;
LABEL_12:
      v42.i64[1] = v47;
      v43.i64[1] = v46;
      v18[3] = v42;
      v18[4] = v43;
      v44.i64[1] = v45;
      v48.i64[1] = v53;
      v18[5] = v44;
      v18[6] = v48;
      v49.i64[1] = v52;
      v50.i64[1] = v51;
      v18[7] = v49;
      v18[8] = v50;
      v54.i64[1] = v59;
      v55.i64[1] = v58;
      v18[9] = v54;
      v18[10] = v55;
      v56.i64[1] = v57;
      v60.i64[1] = v68;
      v18[11] = v56;
      v18[12] = v60;
      v61.i64[1] = v66;
      v62.i64[1] = v64;
      v18[13] = v61;
      v18[14] = v62;
      v63.i64[1] = v71;
      v65.i64[1] = v70;
      v18[15] = v63;
      v18[16] = v65;
      v67.i64[1] = v69;
      ++v15;
      v18[17] = v67;
      if (v15 == v14)
      {
        v6 = *(unsigned int *)(v10 + 12);
        v12 = v152;
        goto LABEL_4;
      }
    }
    v81 = *(_QWORD *)(v10 + 80);
    if (v81)
    {
      v83 = *(_QWORD *)(v10 + 48);
      v82 = *(_QWORD *)(v10 + 56);
      v84 = ((v82 - v83) << 6) - 1;
      v85 = *(_QWORD *)(v10 + 72);
      if (v82 == v83)
        v84 = 0;
      v18 = (int8x16_t *)(*(_QWORD *)(v10 + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v83 + (((unint64_t)(v85 + v81 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v85 + v81 - 1) & 0x1FF)));
      *(_QWORD *)(v10 + 80) = v81 - 1;
      if ((unint64_t)(v84 - (v81 + v85) + 1) >= 0x400)
      {
        operator delete(*(void **)(v82 - 8));
        v17 = v155;
        v16 = v156;
        v14 = v157;
        result = v158;
        *(_QWORD *)(v10 + 56) -= 8;
      }
      goto LABEL_89;
    }
    v170.i64[0] = 0;
    v88 = *(_QWORD *)(v10 + 16);
    v87 = *(int64x2_t **)(v10 + 24);
    v89 = (uint64_t)v87->i64 - v88;
    v90 = (uint64_t)((uint64_t)v87->i64 - v88) >> 3;
    v91 = (uint64_t *)(v88 + (((unint64_t)v87 - v88) & 0xFFFFFFFFFFFFFFF8));
    v92 = *(_QWORD *)(v10 + 32);
    if ((unint64_t)(v92 - (_QWORD)v87) < 0x120)
    {
      v93 = v90 + 36;
      if ((unint64_t)(v90 + 36) >> 61)
        sub_20E867F44();
      v94 = v92 - v88;
      if (v94 >> 2 > v93)
        v93 = v94 >> 2;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      v168 = v93;
      if (v93)
      {
        if (v93 >> 61)
          sub_20E877A38();
        v95 = operator new(8 * v93);
        v90 = (uint64_t)((uint64_t)v87->i64 - v88) >> 3;
      }
      else
      {
        v95 = 0;
      }
      v102 = &v95[8 * v90];
      v102[16] = 0u;
      v102[17] = 0u;
      v102[14] = 0u;
      v102[15] = 0u;
      v102[12] = 0u;
      v102[13] = 0u;
      v102[10] = 0u;
      v102[11] = 0u;
      v102[8] = 0u;
      v102[9] = 0u;
      v102[6] = 0u;
      v102[7] = 0u;
      v102[4] = 0u;
      v102[5] = 0u;
      v102[2] = 0u;
      v102[3] = 0u;
      *v102 = 0u;
      v102[1] = 0u;
      if ((int64x2_t *)v88 == v87)
      {
        v104 = &v95[8 * v90];
      }
      else
      {
        if ((unint64_t)(v89 - 8) >= 0x68)
        {
          v103 = (char *)(v88 + (((unint64_t)v87 - v88) & 0xFFFFFFFFFFFFFFF8));
          v104 = &v95[8 * v90];
          if (v88 + (v89 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v95[v89 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v105 = ((unint64_t)(v89 - 8) >> 3) + 1;
            v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
            v103 = (char *)&v91[v106 / 0xFFFFFFFFFFFFFFF8];
            v104 = (char *)v102 - v106;
            v107 = &v95[8 * v90 - 16];
            v108 = (__int128 *)(v88 + 8 * v90 - 16);
            v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v110 = *v108;
              *(v107 - 1) = *(v108 - 1);
              *v107 = v110;
              v107 -= 2;
              v108 -= 2;
              v109 -= 4;
            }
            while (v109);
            if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_53;
          }
        }
        else
        {
          v103 = (char *)(v88 + (((unint64_t)v87 - v88) & 0xFFFFFFFFFFFFFFF8));
          v104 = &v95[8 * v90];
        }
        do
        {
          v111 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *((_QWORD *)v104 - 1) = v111;
          v104 -= 8;
        }
        while (v103 != (char *)v88);
      }
LABEL_53:
      v112 = v102 + 18;
      v113 = (char *)v87 - (char *)v91;
      if (v113)
      {
        v166 = v95;
        memmove(v102 + 18, v91, v113);
        v95 = v166;
      }
      *(_QWORD *)(v10 + 16) = v104;
      *(_QWORD *)(v10 + 24) = (char *)v112 + v113;
      *(_QWORD *)(v10 + 32) = &v95[8 * v168];
      v7 = a6;
      v14 = v157;
      result = v158;
      v16 = v156;
      v17 = v155;
      if (v88)
      {
        operator delete((void *)v88);
        v17 = v155;
        v16 = v156;
        v14 = v157;
        result = v158;
      }
      goto LABEL_88;
    }
    v96 = (char *)v87 - (char *)v91;
    if ((unint64_t)((char *)v87 - (char *)v91) > 0x11F)
    {
      v98 = *(uint64_t **)(v10 + 24);
      v97 = 36;
      goto LABEL_64;
    }
    v97 = v96 >> 3;
    v98 = &v87->i64[36 - (v96 >> 3)];
    v99 = v96 & 0xFFFFFFFFFFFFFFF8;
    v100 = 280 - v99;
    if (280 - v99 >= 0x68)
    {
      v114 = &v170 < (int64x2_t *)((char *)&v87[18] - v99);
      if (v87 >= (int64x2_t *)v171 || (v101 = *(uint64_t **)(v10 + 24), !v114))
      {
        v115 = (v100 >> 3) + 1;
        v101 = &v87->i64[v115 & 0x3FFFFFFFFFFFFFFCLL];
        v116 = vdupq_lane_s64(v170.i64[0], 0);
        v117 = v87 + 1;
        v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v117[-1] = v116;
          *v117 = v116;
          v117 += 2;
          v118 -= 4;
        }
        while (v118);
        if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_63:
          *(_QWORD *)(v10 + 24) = v98;
          if (v87 == (int64x2_t *)v91)
            goto LABEL_88;
LABEL_64:
          v119 = (char *)v98 - (char *)(v91 + 36);
          v120 = v119 >> 3;
          v121 = (int64x2_t *)(v98 - 36);
          v122 = v98;
          if (v98 - 36 < (uint64_t *)v87)
          {
            v123 = (v89 & 0xFFFFFFFFFFFFFFF8) + v119;
            v124 = v88 + v123 + 8;
            if ((unint64_t)v87 > v124)
              v124 = (unint64_t)v87;
            v125 = v124 + ~v88 - v123;
            if (v125 >= 0x58)
            {
              v126 = (v125 >> 3) + 1;
              v127 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              v121 = (int64x2_t *)((char *)v121 + v127 * 8);
              v122 = &v98[v127];
              v128 = v98 + 2;
              v129 = (__int128 *)(v88 + 8 * v120 + 8 * v90 + 16);
              v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v131 = *v129;
                *(v128 - 1) = *(v129 - 1);
                *v128 = v131;
                v128 += 2;
                v129 += 2;
                v130 -= 4;
              }
              while (v130);
              if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_73;
            }
            else
            {
              v122 = v98;
            }
            do
            {
              v132 = v121->i64[0];
              v121 = (int64x2_t *)((char *)v121 + 8);
              *v122++ = v132;
            }
            while (v121 < v87);
          }
LABEL_73:
          *(_QWORD *)(v10 + 24) = v122;
          if (v98 != v91 + 36)
          {
            memmove(&v98[-v120], (const void *)(v88 + (((unint64_t)v87 - v88) & 0xFFFFFFFFFFFFFFF8)), v119);
            v90 = (uint64_t)((uint64_t)v87->i64 - v88) >> 3;
            v17 = v155;
            v16 = v156;
            v14 = v157;
            result = v158;
          }
          v133 = (uint64_t *)&v170;
          if (v91 <= (uint64_t *)&v170)
          {
            v134 = 36;
            if (*(_QWORD *)(v10 + 24) <= (unint64_t)&v170)
              v134 = 0;
            v133 = &v170.i64[v134];
          }
          if (v97 >= 0xA)
          {
            if (v91 >= v133 + 1
              || (unint64_t)v133 >= v88 + (((unint64_t)v87 - v88) & 0xFFFFFFFFFFFFFFF8) + 8 * v97)
            {
              v91 += v97 & 0xFFFFFFFFFFFFFFFCLL;
              v135 = v97 & 3;
              v136 = vld1q_dup_f64((const double *)v133);
              v137 = (float64x2_t *)(v88 + 8 * v90 + 16);
              v138 = v97 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v137[-1] = v136;
                *v137 = v136;
                v137 += 2;
                v138 -= 4;
              }
              while (v138);
              if (v97 == (v97 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_88;
            }
            else
            {
              v135 = v97;
            }
          }
          else
          {
            v135 = v97;
          }
          do
          {
            *v91++ = *v133;
            --v135;
          }
          while (v135);
LABEL_88:
          v18 = (int8x16_t *)(*(_QWORD *)(v10 + 24) - 288);
          v9 = a2;
          v8 = a3;
          v11 = (unint64_t *)(v10 + 16);
LABEL_89:
          *(_QWORD *)(v17 + 8 * v15) = ((uint64_t)v18->i64 - *(_QWORD *)(v10 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v10 + 120) + 8 * result);
          goto LABEL_90;
        }
      }
    }
    else
    {
      v101 = *(uint64_t **)(v10 + 24);
    }
    do
      *v101++ = v170.i64[0];
    while (v101 != v98);
    goto LABEL_63;
  }
  return result;
}

