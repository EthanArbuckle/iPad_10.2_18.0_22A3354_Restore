BOOL sub_20E889934(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaTrackingRecovered *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaTrackingRecovered);
        if (!PBReaderPlaceMark() || (sub_20E8891A4(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E88A3DC(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int v224;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (2)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
      {
        v15 = 0;
        goto LABEL_12;
      }
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        break;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
        break;
      }
      v44 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v44 & 0x7F) << 7;
      if (v44 < 0)
      {
        v45 = *v4;
        v46 = *(_QWORD *)(a2 + v45);
        v47 = v46 + 1;
        if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v7))
          goto LABEL_10;
        v48 = *(char *)(*(_QWORD *)(a2 + *v11) + v46);
        *(_QWORD *)(a2 + v45) = v47;
        v15 |= (unint64_t)(v48 & 0x7F) << 14;
        if (v48 < 0)
        {
          v49 = *v4;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v7))
            goto LABEL_10;
          v52 = *(char *)(*(_QWORD *)(a2 + *v11) + v50);
          *(_QWORD *)(a2 + v49) = v51;
          v15 |= (unint64_t)(v52 & 0x7F) << 21;
          if (v52 < 0)
          {
            v53 = *v4;
            v54 = *(_QWORD *)(a2 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v7))
              goto LABEL_10;
            v56 = *(char *)(*(_QWORD *)(a2 + *v11) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v15 |= (unint64_t)(v56 & 0x7F) << 28;
            if (v56 < 0)
            {
              v57 = *v4;
              v58 = *(_QWORD *)(a2 + v57);
              v59 = v58 + 1;
              if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v7))
                goto LABEL_10;
              v60 = *(char *)(*(_QWORD *)(a2 + *v11) + v58);
              *(_QWORD *)(a2 + v57) = v59;
              if (v60 < 0)
              {
                v61 = *v4;
                v62 = *(_QWORD *)(a2 + v61);
                v63 = v62 + 1;
                if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v7))
                  goto LABEL_10;
                v64 = *(char *)(*(_QWORD *)(a2 + *v11) + v62);
                *(_QWORD *)(a2 + v61) = v63;
                if (v64 < 0)
                {
                  v65 = *v4;
                  v66 = *(_QWORD *)(a2 + v65);
                  v67 = v66 + 1;
                  if (v66 == -1 || v67 > *(_QWORD *)(a2 + *v7))
                    goto LABEL_10;
                  v68 = *(char *)(*(_QWORD *)(a2 + *v11) + v66);
                  *(_QWORD *)(a2 + v65) = v67;
                  if (v68 < 0)
                  {
                    v69 = *v4;
                    v70 = *(_QWORD *)(a2 + v69);
                    v71 = v70 + 1;
                    if (v70 == -1 || v71 > *(_QWORD *)(a2 + *v7))
                      goto LABEL_10;
                    v72 = *(char *)(*(_QWORD *)(a2 + *v11) + v70);
                    *(_QWORD *)(a2 + v69) = v71;
                    if (v72 < 0)
                    {
                      v73 = *v4;
                      v74 = *(_QWORD *)(a2 + v73);
                      v75 = v74 + 1;
                      if (v74 == -1 || v75 > *(_QWORD *)(a2 + *v7))
                        goto LABEL_10;
                      v76 = *(char *)(*(_QWORD *)(a2 + *v11) + v74);
                      *(_QWORD *)(a2 + v73) = v75;
                      if (v76 < 0)
                      {
                        v15 = 0;
                        v19 = *v9;
                        if (*(_BYTE *)(a2 + v19))
                          return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
                        v21 = (_BYTE *)(a2 + v19);
                        switch((v15 >> 3))
                        {
                          case 1u:
                            v22 = *v4;
                            v23 = *(_QWORD *)(a2 + v22);
                            v24 = v23 + 1;
                            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v7))
                            {
                              v25 = 0;
LABEL_21:
                              *v21 = 1;
                              goto LABEL_22;
                            }
                            v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v23);
                            v25 = v89 & 0x7F;
                            *(_QWORD *)(a2 + v22) = v24;
                            if ((v89 & 0x80) == 0)
                              goto LABEL_22;
                            v90 = *v4;
                            v91 = *(_QWORD *)(a2 + v90);
                            v92 = v91 + 1;
                            if (v91 == -1 || v92 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v192 = *(char *)(*(_QWORD *)(a2 + *v11) + v91);
                            *(_QWORD *)(a2 + v90) = v92;
                            v25 |= (unint64_t)(v192 & 0x7F) << 7;
                            if ((v192 & 0x80000000) == 0)
                              goto LABEL_22;
                            v193 = *v4;
                            v194 = *(_QWORD *)(a2 + v193);
                            v195 = v194 + 1;
                            if (v194 == -1 || v195 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v196 = *(char *)(*(_QWORD *)(a2 + *v11) + v194);
                            *(_QWORD *)(a2 + v193) = v195;
                            v25 |= (unint64_t)(v196 & 0x7F) << 14;
                            if ((v196 & 0x80000000) == 0)
                              goto LABEL_22;
                            v197 = *v4;
                            v198 = *(_QWORD *)(a2 + v197);
                            v199 = v198 + 1;
                            if (v198 == -1 || v199 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v200 = *(char *)(*(_QWORD *)(a2 + *v11) + v198);
                            *(_QWORD *)(a2 + v197) = v199;
                            v25 |= (unint64_t)(v200 & 0x7F) << 21;
                            if ((v200 & 0x80000000) == 0)
                              goto LABEL_22;
                            v201 = *v4;
                            v202 = *(_QWORD *)(a2 + v201);
                            v203 = v202 + 1;
                            if (v202 == -1 || v203 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v204 = *(char *)(*(_QWORD *)(a2 + *v11) + v202);
                            *(_QWORD *)(a2 + v201) = v203;
                            v25 |= (unint64_t)(v204 & 0x7F) << 28;
                            if ((v204 & 0x80000000) == 0)
                              goto LABEL_22;
                            v205 = *v4;
                            v206 = *(_QWORD *)(a2 + v205);
                            v207 = v206 + 1;
                            if (v206 == -1 || v207 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v208 = *(char *)(*(_QWORD *)(a2 + *v11) + v206);
                            *(_QWORD *)(a2 + v205) = v207;
                            if ((v208 & 0x80000000) == 0)
                              goto LABEL_22;
                            v209 = *v4;
                            v210 = *(_QWORD *)(a2 + v209);
                            v211 = v210 + 1;
                            if (v210 == -1 || v211 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v212 = *(char *)(*(_QWORD *)(a2 + *v11) + v210);
                            *(_QWORD *)(a2 + v209) = v211;
                            if ((v212 & 0x80000000) == 0)
                              goto LABEL_22;
                            v213 = *v4;
                            v214 = *(_QWORD *)(a2 + v213);
                            v215 = v214 + 1;
                            if (v214 == -1 || v215 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v216 = *(char *)(*(_QWORD *)(a2 + *v11) + v214);
                            *(_QWORD *)(a2 + v213) = v215;
                            if ((v216 & 0x80000000) == 0)
                              goto LABEL_22;
                            v217 = *v4;
                            v218 = *(_QWORD *)(a2 + v217);
                            v219 = v218 + 1;
                            if (v218 == -1 || v219 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_95;
                            v220 = *(char *)(*(_QWORD *)(a2 + *v11) + v218);
                            *(_QWORD *)(a2 + v217) = v219;
                            if (v220 < 0)
                            {
                              v221 = *v4;
                              v222 = *(_QWORD *)(a2 + v221);
                              v223 = v222 + 1;
                              if (v222 == -1 || v223 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_95:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_21;
                              }
                              v224 = *(char *)(*(_QWORD *)(a2 + *v11) + v222);
                              *(_QWORD *)(a2 + v221) = v223;
                              if (v224 < 0)
                              {
                                v26 = 0;
LABEL_25:
                                objc_msgSend(a1, "setMode:", v26);
                                goto LABEL_4;
                              }
                            }
LABEL_22:
                            if (*(_BYTE *)(a2 + *v9))
                              v26 = 0;
                            else
                              v26 = v25;
                            goto LABEL_25;
                          case 2u:
                            v42 = *v4;
                            v43 = *(_QWORD *)(a2 + v42);
                            if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + *v7))
                            {
                              LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v43);
                              *(_QWORD *)(a2 + v42) = v43 + 4;
                            }
                            else
                            {
                              *v21 = 1;
                              LODWORD(a3) = 0;
                            }
                            objc_msgSend(a1, "setHealth:", a3);
                            goto LABEL_4;
                          case 3u:
                            v32 = *v4;
                            v33 = *(_QWORD *)(a2 + v32);
                            v34 = v33 + 1;
                            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v7))
                            {
                              v35 = 0;
LABEL_37:
                              *v21 = 1;
                              goto LABEL_38;
                            }
                            v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v33);
                            v35 = v81 & 0x7F;
                            *(_QWORD *)(a2 + v32) = v34;
                            if (v81 < 0)
                            {
                              v82 = *v4;
                              v83 = *(_QWORD *)(a2 + v82);
                              v84 = v83 + 1;
                              if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_87:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_37;
                              }
                              v126 = *(char *)(*(_QWORD *)(a2 + *v11) + v83);
                              *(_QWORD *)(a2 + v82) = v84;
                              v35 |= (unint64_t)(v126 & 0x7F) << 7;
                              if (v126 < 0)
                              {
                                v127 = *v4;
                                v128 = *(_QWORD *)(a2 + v127);
                                v129 = v128 + 1;
                                if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v7))
                                  goto LABEL_87;
                                v130 = *(char *)(*(_QWORD *)(a2 + *v11) + v128);
                                *(_QWORD *)(a2 + v127) = v129;
                                v35 |= (unint64_t)(v130 & 0x7F) << 14;
                                if (v130 < 0)
                                {
                                  v131 = *v4;
                                  v132 = *(_QWORD *)(a2 + v131);
                                  v133 = v132 + 1;
                                  if (v132 == -1 || v133 > *(_QWORD *)(a2 + *v7))
                                    goto LABEL_87;
                                  v134 = *(char *)(*(_QWORD *)(a2 + *v11) + v132);
                                  *(_QWORD *)(a2 + v131) = v133;
                                  v35 |= (unint64_t)(v134 & 0x7F) << 21;
                                  if (v134 < 0)
                                  {
                                    v135 = *v4;
                                    v136 = *(_QWORD *)(a2 + v135);
                                    v137 = v136 + 1;
                                    if (v136 == -1 || v137 > *(_QWORD *)(a2 + *v7))
                                      goto LABEL_87;
                                    v138 = *(char *)(*(_QWORD *)(a2 + *v11) + v136);
                                    *(_QWORD *)(a2 + v135) = v137;
                                    v35 |= (unint64_t)(v138 & 0x7F) << 28;
                                    if (v138 < 0)
                                    {
                                      v139 = *v4;
                                      v140 = *(_QWORD *)(a2 + v139);
                                      v141 = v140 + 1;
                                      if (v140 == -1 || v141 > *(_QWORD *)(a2 + *v7))
                                        goto LABEL_87;
                                      v142 = *(char *)(*(_QWORD *)(a2 + *v11) + v140);
                                      *(_QWORD *)(a2 + v139) = v141;
                                      if (v142 < 0)
                                      {
                                        v143 = *v4;
                                        v144 = *(_QWORD *)(a2 + v143);
                                        v145 = v144 + 1;
                                        if (v144 == -1 || v145 > *(_QWORD *)(a2 + *v7))
                                          goto LABEL_87;
                                        v146 = *(char *)(*(_QWORD *)(a2 + *v11) + v144);
                                        *(_QWORD *)(a2 + v143) = v145;
                                        if (v146 < 0)
                                        {
                                          v147 = *v4;
                                          v148 = *(_QWORD *)(a2 + v147);
                                          v149 = v148 + 1;
                                          if (v148 == -1 || v149 > *(_QWORD *)(a2 + *v7))
                                            goto LABEL_87;
                                          v150 = *(char *)(*(_QWORD *)(a2 + *v11) + v148);
                                          *(_QWORD *)(a2 + v147) = v149;
                                          if (v150 < 0)
                                          {
                                            v151 = *v4;
                                            v152 = *(_QWORD *)(a2 + v151);
                                            v153 = v152 + 1;
                                            if (v152 == -1 || v153 > *(_QWORD *)(a2 + *v7))
                                              goto LABEL_87;
                                            v154 = *(char *)(*(_QWORD *)(a2 + *v11) + v152);
                                            *(_QWORD *)(a2 + v151) = v153;
                                            if (v154 < 0)
                                            {
                                              v155 = *v4;
                                              v156 = *(_QWORD *)(a2 + v155);
                                              v157 = v156 + 1;
                                              if (v156 == -1 || v157 > *(_QWORD *)(a2 + *v7))
                                                goto LABEL_87;
                                              v158 = *(char *)(*(_QWORD *)(a2 + *v11) + v156);
                                              *(_QWORD *)(a2 + v155) = v157;
                                              if (v158 < 0)
                                              {
                                                v36 = 0;
                                                goto LABEL_41;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_38:
                            if (*(_BYTE *)(a2 + *v9))
                              v36 = 0;
                            else
                              v36 = v35;
LABEL_41:
                            objc_msgSend(a1, "setNumberInlierPoints:", v36);
LABEL_4:
                            v5 = *v4;
                            v6 = *(_QWORD *)(a2 + v5);
                            v8 = *(_QWORD *)(a2 + *v7);
                            if (v6 >= v8)
                              return *(_BYTE *)(a2 + *v9) == 0;
                            continue;
                          case 4u:
                            v37 = *v4;
                            v38 = *(_QWORD *)(a2 + v37);
                            v39 = v38 + 1;
                            if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v7))
                            {
                              v40 = 0;
LABEL_45:
                              *v21 = 1;
                              goto LABEL_46;
                            }
                            v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v38);
                            v40 = v85 & 0x7F;
                            *(_QWORD *)(a2 + v37) = v39;
                            if (v85 < 0)
                            {
                              v86 = *v4;
                              v87 = *(_QWORD *)(a2 + v86);
                              v88 = v87 + 1;
                              if (v87 == -1 || v88 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_91:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_45;
                              }
                              v159 = *(char *)(*(_QWORD *)(a2 + *v11) + v87);
                              *(_QWORD *)(a2 + v86) = v88;
                              v40 |= (unint64_t)(v159 & 0x7F) << 7;
                              if (v159 < 0)
                              {
                                v160 = *v4;
                                v161 = *(_QWORD *)(a2 + v160);
                                v162 = v161 + 1;
                                if (v161 == -1 || v162 > *(_QWORD *)(a2 + *v7))
                                  goto LABEL_91;
                                v163 = *(char *)(*(_QWORD *)(a2 + *v11) + v161);
                                *(_QWORD *)(a2 + v160) = v162;
                                v40 |= (unint64_t)(v163 & 0x7F) << 14;
                                if (v163 < 0)
                                {
                                  v164 = *v4;
                                  v165 = *(_QWORD *)(a2 + v164);
                                  v166 = v165 + 1;
                                  if (v165 == -1 || v166 > *(_QWORD *)(a2 + *v7))
                                    goto LABEL_91;
                                  v167 = *(char *)(*(_QWORD *)(a2 + *v11) + v165);
                                  *(_QWORD *)(a2 + v164) = v166;
                                  v40 |= (unint64_t)(v167 & 0x7F) << 21;
                                  if (v167 < 0)
                                  {
                                    v168 = *v4;
                                    v169 = *(_QWORD *)(a2 + v168);
                                    v170 = v169 + 1;
                                    if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v7))
                                      goto LABEL_91;
                                    v171 = *(char *)(*(_QWORD *)(a2 + *v11) + v169);
                                    *(_QWORD *)(a2 + v168) = v170;
                                    v40 |= (unint64_t)(v171 & 0x7F) << 28;
                                    if (v171 < 0)
                                    {
                                      v172 = *v4;
                                      v173 = *(_QWORD *)(a2 + v172);
                                      v174 = v173 + 1;
                                      if (v173 == -1 || v174 > *(_QWORD *)(a2 + *v7))
                                        goto LABEL_91;
                                      v175 = *(char *)(*(_QWORD *)(a2 + *v11) + v173);
                                      *(_QWORD *)(a2 + v172) = v174;
                                      if (v175 < 0)
                                      {
                                        v176 = *v4;
                                        v177 = *(_QWORD *)(a2 + v176);
                                        v178 = v177 + 1;
                                        if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v7))
                                          goto LABEL_91;
                                        v179 = *(char *)(*(_QWORD *)(a2 + *v11) + v177);
                                        *(_QWORD *)(a2 + v176) = v178;
                                        if (v179 < 0)
                                        {
                                          v180 = *v4;
                                          v181 = *(_QWORD *)(a2 + v180);
                                          v182 = v181 + 1;
                                          if (v181 == -1 || v182 > *(_QWORD *)(a2 + *v7))
                                            goto LABEL_91;
                                          v183 = *(char *)(*(_QWORD *)(a2 + *v11) + v181);
                                          *(_QWORD *)(a2 + v180) = v182;
                                          if (v183 < 0)
                                          {
                                            v184 = *v4;
                                            v185 = *(_QWORD *)(a2 + v184);
                                            v186 = v185 + 1;
                                            if (v185 == -1 || v186 > *(_QWORD *)(a2 + *v7))
                                              goto LABEL_91;
                                            v187 = *(char *)(*(_QWORD *)(a2 + *v11) + v185);
                                            *(_QWORD *)(a2 + v184) = v186;
                                            if (v187 < 0)
                                            {
                                              v188 = *v4;
                                              v189 = *(_QWORD *)(a2 + v188);
                                              v190 = v189 + 1;
                                              if (v189 == -1 || v190 > *(_QWORD *)(a2 + *v7))
                                                goto LABEL_91;
                                              v191 = *(char *)(*(_QWORD *)(a2 + *v11) + v189);
                                              *(_QWORD *)(a2 + v188) = v190;
                                              if (v191 < 0)
                                              {
                                                v41 = 0;
                                                goto LABEL_49;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_46:
                            if (*(_BYTE *)(a2 + *v9))
                              v41 = 0;
                            else
                              v41 = v40;
LABEL_49:
                            objc_msgSend(a1, "setNumberOfRegularKeyframes:", v41);
                            goto LABEL_4;
                          case 5u:
                            v27 = *v4;
                            v28 = *(_QWORD *)(a2 + v27);
                            v29 = v28 + 1;
                            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v7))
                            {
                              v30 = 0;
LABEL_29:
                              *v21 = 1;
                              goto LABEL_30;
                            }
                            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v28);
                            v30 = v77 & 0x7F;
                            *(_QWORD *)(a2 + v27) = v29;
                            if (v77 < 0)
                            {
                              v78 = *v4;
                              v79 = *(_QWORD *)(a2 + v78);
                              v80 = v79 + 1;
                              if (v79 == -1 || v80 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_83:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_29;
                              }
                              v93 = *(char *)(*(_QWORD *)(a2 + *v11) + v79);
                              *(_QWORD *)(a2 + v78) = v80;
                              v30 |= (unint64_t)(v93 & 0x7F) << 7;
                              if (v93 < 0)
                              {
                                v94 = *v4;
                                v95 = *(_QWORD *)(a2 + v94);
                                v96 = v95 + 1;
                                if (v95 == -1 || v96 > *(_QWORD *)(a2 + *v7))
                                  goto LABEL_83;
                                v97 = *(char *)(*(_QWORD *)(a2 + *v11) + v95);
                                *(_QWORD *)(a2 + v94) = v96;
                                v30 |= (unint64_t)(v97 & 0x7F) << 14;
                                if (v97 < 0)
                                {
                                  v98 = *v4;
                                  v99 = *(_QWORD *)(a2 + v98);
                                  v100 = v99 + 1;
                                  if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v7))
                                    goto LABEL_83;
                                  v101 = *(char *)(*(_QWORD *)(a2 + *v11) + v99);
                                  *(_QWORD *)(a2 + v98) = v100;
                                  v30 |= (unint64_t)(v101 & 0x7F) << 21;
                                  if (v101 < 0)
                                  {
                                    v102 = *v4;
                                    v103 = *(_QWORD *)(a2 + v102);
                                    v104 = v103 + 1;
                                    if (v103 == -1 || v104 > *(_QWORD *)(a2 + *v7))
                                      goto LABEL_83;
                                    v105 = *(char *)(*(_QWORD *)(a2 + *v11) + v103);
                                    *(_QWORD *)(a2 + v102) = v104;
                                    v30 |= (unint64_t)(v105 & 0x7F) << 28;
                                    if (v105 < 0)
                                    {
                                      v106 = *v4;
                                      v107 = *(_QWORD *)(a2 + v106);
                                      v108 = v107 + 1;
                                      if (v107 == -1 || v108 > *(_QWORD *)(a2 + *v7))
                                        goto LABEL_83;
                                      v109 = *(char *)(*(_QWORD *)(a2 + *v11) + v107);
                                      *(_QWORD *)(a2 + v106) = v108;
                                      if (v109 < 0)
                                      {
                                        v110 = *v4;
                                        v111 = *(_QWORD *)(a2 + v110);
                                        v112 = v111 + 1;
                                        if (v111 == -1 || v112 > *(_QWORD *)(a2 + *v7))
                                          goto LABEL_83;
                                        v113 = *(char *)(*(_QWORD *)(a2 + *v11) + v111);
                                        *(_QWORD *)(a2 + v110) = v112;
                                        if (v113 < 0)
                                        {
                                          v114 = *v4;
                                          v115 = *(_QWORD *)(a2 + v114);
                                          v116 = v115 + 1;
                                          if (v115 == -1 || v116 > *(_QWORD *)(a2 + *v7))
                                            goto LABEL_83;
                                          v117 = *(char *)(*(_QWORD *)(a2 + *v11) + v115);
                                          *(_QWORD *)(a2 + v114) = v116;
                                          if (v117 < 0)
                                          {
                                            v118 = *v4;
                                            v119 = *(_QWORD *)(a2 + v118);
                                            v120 = v119 + 1;
                                            if (v119 == -1 || v120 > *(_QWORD *)(a2 + *v7))
                                              goto LABEL_83;
                                            v121 = *(char *)(*(_QWORD *)(a2 + *v11) + v119);
                                            *(_QWORD *)(a2 + v118) = v120;
                                            if (v121 < 0)
                                            {
                                              v122 = *v4;
                                              v123 = *(_QWORD *)(a2 + v122);
                                              v124 = v123 + 1;
                                              if (v123 == -1 || v124 > *(_QWORD *)(a2 + *v7))
                                                goto LABEL_83;
                                              v125 = *(char *)(*(_QWORD *)(a2 + *v11) + v123);
                                              *(_QWORD *)(a2 + v122) = v124;
                                              if (v125 < 0)
                                              {
                                                v31 = 0;
                                                goto LABEL_33;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_30:
                            if (*(_BYTE *)(a2 + *v9))
                              v31 = 0;
                            else
                              v31 = v30;
LABEL_33:
                            objc_msgSend(a1, "setThreeDoFStateCode:", v31);
                            goto LABEL_4;
                          default:
                            result = PBReaderSkipValueWithTag();
                            if ((_DWORD)result)
                              goto LABEL_4;
                            return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
    v19 = *v9;
    if (*(_BYTE *)(a2 + v19))
    {
      v15 = 0;
      v20 = 1;
    }
    else
    {
      v20 = (v15 & 7) == 4;
    }
    if (v20)
      return *(_BYTE *)(a2 + *v9) == 0;
    goto LABEL_17;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

BOOL sub_20E88B91C(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaTrackingState *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaTrackingState);
        if (!PBReaderPlaceMark() || (sub_20E88A3DC(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E88C420(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  void *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 >= v7)
    return *(_BYTE *)(a2 + *v8) == 0;
  v10 = (int *)MEMORY[0x24BE7AF30];
  while (2)
  {
    v12 = (_BYTE *)(a2 + *v8);
    if (*v12)
      return *(_BYTE *)(a2 + *v8) == 0;
    if (v5 >= v7)
    {
      v14 = 0;
LABEL_39:
      *v12 = 1;
      goto LABEL_40;
    }
    v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
    *(_QWORD *)(a2 + (int)v4) = v5 + 1;
    v14 = v13 & 0x7F;
    if ((v13 & 0x80) == 0)
      goto LABEL_40;
    v15 = *v3;
    v16 = *(_QWORD *)(a2 + v15);
    if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v17 = v16 + 1;
    v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
    *(_QWORD *)(a2 + v15) = v17;
    v14 |= (unint64_t)(v18 & 0x7F) << 7;
    if ((v18 & 0x80000000) == 0)
      goto LABEL_40;
    v19 = *v3;
    v20 = *(_QWORD *)(a2 + v19);
    if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v21 = v20 + 1;
    v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
    *(_QWORD *)(a2 + v19) = v21;
    v14 |= (unint64_t)(v22 & 0x7F) << 14;
    if ((v22 & 0x80000000) == 0)
      goto LABEL_40;
    v23 = *v3;
    v24 = *(_QWORD *)(a2 + v23);
    if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v25 = v24 + 1;
    v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
    *(_QWORD *)(a2 + v23) = v25;
    v14 |= (unint64_t)(v26 & 0x7F) << 21;
    if ((v26 & 0x80000000) == 0)
      goto LABEL_40;
    v27 = *v3;
    v28 = *(_QWORD *)(a2 + v27);
    if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v29 = v28 + 1;
    v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
    *(_QWORD *)(a2 + v27) = v29;
    v14 |= (unint64_t)(v30 & 0x7F) << 28;
    if ((v30 & 0x80000000) == 0)
      goto LABEL_40;
    v31 = *v3;
    v32 = *(_QWORD *)(a2 + v31);
    if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v33 = v32 + 1;
    v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
    *(_QWORD *)(a2 + v31) = v33;
    if ((v34 & 0x80000000) == 0)
      goto LABEL_40;
    v35 = *v3;
    v36 = *(_QWORD *)(a2 + v35);
    if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v37 = v36 + 1;
    v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
    *(_QWORD *)(a2 + v35) = v37;
    if ((v38 & 0x80000000) == 0)
      goto LABEL_40;
    v39 = *v3;
    v40 = *(_QWORD *)(a2 + v39);
    if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v41 = v40 + 1;
    v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
    *(_QWORD *)(a2 + v39) = v41;
    if ((v42 & 0x80000000) == 0)
      goto LABEL_40;
    v43 = *v3;
    v44 = *(_QWORD *)(a2 + v43);
    if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v45 = v44 + 1;
    v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
    *(_QWORD *)(a2 + v43) = v45;
    if ((v46 & 0x80000000) == 0)
      goto LABEL_40;
    v47 = *v3;
    v48 = *(_QWORD *)(a2 + v47);
    if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
    {
LABEL_38:
      v12 = (_BYTE *)(a2 + *v8);
      goto LABEL_39;
    }
    v49 = v48 + 1;
    v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
    *(_QWORD *)(a2 + v47) = v49;
    if (v50 < 0)
    {
      v14 = 0;
      v51 = *v8;
      v52 = *(unsigned __int8 *)(a2 + v51);
      goto LABEL_42;
    }
LABEL_40:
    v51 = *v8;
    v52 = *(unsigned __int8 *)(a2 + v51);
    if (*(_BYTE *)(a2 + v51))
      v14 = 0;
LABEL_42:
    if (v52)
      v53 = 1;
    else
      v53 = (v14 & 7) == 4;
    if (!v53)
    {
      switch((v14 >> 3))
      {
        case 1u:
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v6))
          {
            v57 = 0;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 1;
            v57 = v56 & 0x7F;
            if ((v56 & 0x80) == 0)
              goto LABEL_84;
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 != -1 && v59 < *(_QWORD *)(a2 + *v6))
            {
              v60 = v59 + 1;
              v61 = *(char *)(*(_QWORD *)(a2 + *v10) + v59);
              *(_QWORD *)(a2 + v58) = v60;
              v57 |= (unint64_t)(v61 & 0x7F) << 7;
              if ((v61 & 0x80000000) == 0)
                goto LABEL_84;
              v62 = *v3;
              v63 = *(_QWORD *)(a2 + v62);
              if (v63 != -1 && v63 < *(_QWORD *)(a2 + *v6))
              {
                v64 = v63 + 1;
                v65 = *(char *)(*(_QWORD *)(a2 + *v10) + v63);
                *(_QWORD *)(a2 + v62) = v64;
                v57 |= (unint64_t)(v65 & 0x7F) << 14;
                if ((v65 & 0x80000000) == 0)
                  goto LABEL_84;
                v66 = *v3;
                v67 = *(_QWORD *)(a2 + v66);
                if (v67 != -1 && v67 < *(_QWORD *)(a2 + *v6))
                {
                  v68 = v67 + 1;
                  v69 = *(char *)(*(_QWORD *)(a2 + *v10) + v67);
                  *(_QWORD *)(a2 + v66) = v68;
                  v57 |= (unint64_t)(v69 & 0x7F) << 21;
                  if ((v69 & 0x80000000) == 0)
                    goto LABEL_84;
                  v70 = *v3;
                  v71 = *(_QWORD *)(a2 + v70);
                  if (v71 != -1 && v71 < *(_QWORD *)(a2 + *v6))
                  {
                    v72 = v71 + 1;
                    v73 = *(char *)(*(_QWORD *)(a2 + *v10) + v71);
                    *(_QWORD *)(a2 + v70) = v72;
                    v57 |= (unint64_t)(v73 & 0x7F) << 28;
                    if ((v73 & 0x80000000) == 0)
                      goto LABEL_84;
                    v74 = *v3;
                    v75 = *(_QWORD *)(a2 + v74);
                    if (v75 != -1 && v75 < *(_QWORD *)(a2 + *v6))
                    {
                      v76 = v75 + 1;
                      v77 = *(char *)(*(_QWORD *)(a2 + *v10) + v75);
                      *(_QWORD *)(a2 + v74) = v76;
                      v57 |= (unint64_t)(v77 & 0x7F) << 35;
                      if ((v77 & 0x80000000) == 0)
                        goto LABEL_84;
                      v78 = *v3;
                      v79 = *(_QWORD *)(a2 + v78);
                      if (v79 != -1 && v79 < *(_QWORD *)(a2 + *v6))
                      {
                        v80 = v79 + 1;
                        v81 = *(char *)(*(_QWORD *)(a2 + *v10) + v79);
                        *(_QWORD *)(a2 + v78) = v80;
                        v57 |= (unint64_t)(v81 & 0x7F) << 42;
                        if ((v81 & 0x80000000) == 0)
                          goto LABEL_84;
                        v82 = *v3;
                        v83 = *(_QWORD *)(a2 + v82);
                        if (v83 != -1 && v83 < *(_QWORD *)(a2 + *v6))
                        {
                          v84 = v83 + 1;
                          v85 = *(char *)(*(_QWORD *)(a2 + *v10) + v83);
                          *(_QWORD *)(a2 + v82) = v84;
                          v57 |= (unint64_t)(v85 & 0x7F) << 49;
                          if ((v85 & 0x80000000) == 0)
                            goto LABEL_84;
                          v86 = *v3;
                          v87 = *(_QWORD *)(a2 + v86);
                          if (v87 != -1 && v87 < *(_QWORD *)(a2 + *v6))
                          {
                            v88 = v87 + 1;
                            v89 = *(char *)(*(_QWORD *)(a2 + *v10) + v87);
                            *(_QWORD *)(a2 + v86) = v88;
                            v57 |= (unint64_t)(v89 & 0x7F) << 56;
                            if ((v89 & 0x80000000) == 0)
                              goto LABEL_84;
                            v90 = *v3;
                            v91 = *(_QWORD *)(a2 + v90);
                            if (v91 != -1 && v91 < *(_QWORD *)(a2 + *v6))
                            {
                              v92 = v91 + 1;
                              v93 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v91);
                              *(_QWORD *)(a2 + v90) = v92;
                              if ((v93 & 0x80) != 0)
                              {
                                v57 = 0;
LABEL_86:
                                objc_msgSend(a1, "setIsInternal:", v57 != 0);
                                goto LABEL_5;
                              }
                              v57 |= v93 << 63;
LABEL_84:
                              if (*(_BYTE *)(a2 + *v8))
                                v57 = 0;
                              goto LABEL_86;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v51 = *v8;
          }
          *(_BYTE *)(a2 + v51) = 1;
          goto LABEL_84;
        case 2u:
          PBReaderReadString();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSystemBuild:", v11);
          goto LABEL_4;
        case 3u:
          PBReaderReadString();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setDeviceType:", v11);
          goto LABEL_4;
        case 4u:
          PBReaderReadString();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setDeviceId:", v11);
LABEL_4:

          goto LABEL_5;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
LABEL_5:
          v4 = *v3;
          v5 = *(_QWORD *)(a2 + v4);
          v7 = *(_QWORD *)(a2 + *v6);
          if (v5 < v7)
            continue;
          return *(_BYTE *)(a2 + *v8) == 0;
      }
    }
    return *(_BYTE *)(a2 + *v8) == 0;
  }
}

uint64_t sub_20E88D328(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t result;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_39;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v17 = v16 + 1;
      v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_39;
      v19 = *v3;
      v20 = *(_QWORD *)(a2 + v19);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v21 = v20 + 1;
      v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
      *(_QWORD *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      v23 = *v3;
      v24 = *(_QWORD *)(a2 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v25 = v24 + 1;
      v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
      *(_QWORD *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_39;
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v29 = v28 + 1;
      v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
      *(_QWORD *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_39;
      v31 = *v3;
      v32 = *(_QWORD *)(a2 + v31);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v33 = v32 + 1;
      v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
      *(_QWORD *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_39;
      v35 = *v3;
      v36 = *(_QWORD *)(a2 + v35);
      if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v37 = v36 + 1;
      v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
      *(_QWORD *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0)
        goto LABEL_39;
      v39 = *v3;
      v40 = *(_QWORD *)(a2 + v39);
      if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v41 = v40 + 1;
      v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
      *(_QWORD *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_39;
      v43 = *v3;
      v44 = *(_QWORD *)(a2 + v43);
      if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v45 = v44 + 1;
      v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
      *(_QWORD *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_39;
      v47 = *v3;
      v48 = *(_QWORD *)(a2 + v47);
      if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_37:
        v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }
      v49 = v48 + 1;
      v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
      *(_QWORD *)(a2 + v47) = v49;
      if ((v50 & 0x80000000) == 0)
        goto LABEL_39;
      v14 = 0;
      v51 = *v8;
      v52 = *(unsigned __int8 *)(a2 + v51);
LABEL_41:
      if (v52)
        v53 = 1;
      else
        v53 = (v14 & 7) == 4;
      if (v53)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v14 >> 3) == 1)
      {
        v54 = *v3;
        v55 = *(_QWORD *)(a2 + v54);
        if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v6))
        {
          v57 = 0;
LABEL_78:
          *(_BYTE *)(a2 + v51) = 1;
LABEL_79:
          if (*(_BYTE *)(a2 + *v8))
            v94 = 0;
          else
            v94 = v57;
          goto LABEL_82;
        }
        v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v55);
        *(_QWORD *)(a2 + v54) = v55 + 1;
        v57 = v56 & 0x7F;
        if ((v56 & 0x80) == 0)
          goto LABEL_79;
        v58 = *v3;
        v59 = *(_QWORD *)(a2 + v58);
        if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v60 = v59 + 1;
        v61 = *(char *)(*(_QWORD *)(a2 + *v10) + v59);
        *(_QWORD *)(a2 + v58) = v60;
        v57 |= (unint64_t)(v61 & 0x7F) << 7;
        if ((v61 & 0x80000000) == 0)
          goto LABEL_79;
        v62 = *v3;
        v63 = *(_QWORD *)(a2 + v62);
        if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v64 = v63 + 1;
        v65 = *(char *)(*(_QWORD *)(a2 + *v10) + v63);
        *(_QWORD *)(a2 + v62) = v64;
        v57 |= (unint64_t)(v65 & 0x7F) << 14;
        if ((v65 & 0x80000000) == 0)
          goto LABEL_79;
        v66 = *v3;
        v67 = *(_QWORD *)(a2 + v66);
        if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v68 = v67 + 1;
        v69 = *(char *)(*(_QWORD *)(a2 + *v10) + v67);
        *(_QWORD *)(a2 + v66) = v68;
        v57 |= (unint64_t)(v69 & 0x7F) << 21;
        if ((v69 & 0x80000000) == 0)
          goto LABEL_79;
        v70 = *v3;
        v71 = *(_QWORD *)(a2 + v70);
        if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v72 = v71 + 1;
        v73 = *(char *)(*(_QWORD *)(a2 + *v10) + v71);
        *(_QWORD *)(a2 + v70) = v72;
        v57 |= (unint64_t)(v73 & 0x7F) << 28;
        if ((v73 & 0x80000000) == 0)
          goto LABEL_79;
        v74 = *v3;
        v75 = *(_QWORD *)(a2 + v74);
        if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v76 = v75 + 1;
        v77 = *(char *)(*(_QWORD *)(a2 + *v10) + v75);
        *(_QWORD *)(a2 + v74) = v76;
        if ((v77 & 0x80000000) == 0)
          goto LABEL_79;
        v78 = *v3;
        v79 = *(_QWORD *)(a2 + v78);
        if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v80 = v79 + 1;
        v81 = *(char *)(*(_QWORD *)(a2 + *v10) + v79);
        *(_QWORD *)(a2 + v78) = v80;
        if ((v81 & 0x80000000) == 0)
          goto LABEL_79;
        v82 = *v3;
        v83 = *(_QWORD *)(a2 + v82);
        if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v84 = v83 + 1;
        v85 = *(char *)(*(_QWORD *)(a2 + *v10) + v83);
        *(_QWORD *)(a2 + v82) = v84;
        if ((v85 & 0x80000000) == 0)
          goto LABEL_79;
        v86 = *v3;
        v87 = *(_QWORD *)(a2 + v86);
        if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_84;
        v88 = v87 + 1;
        v89 = *(char *)(*(_QWORD *)(a2 + *v10) + v87);
        *(_QWORD *)(a2 + v86) = v88;
        if ((v89 & 0x80000000) == 0)
          goto LABEL_79;
        v90 = *v3;
        v91 = *(_QWORD *)(a2 + v90);
        if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v6))
        {
LABEL_84:
          v51 = *v8;
          goto LABEL_78;
        }
        v92 = v91 + 1;
        v93 = *(char *)(*(_QWORD *)(a2 + *v10) + v91);
        *(_QWORD *)(a2 + v90) = v92;
        if ((v93 & 0x80000000) == 0)
          goto LABEL_79;
        v94 = 0;
LABEL_82:
        objc_msgSend(a1, "setSignal:", v94);
        v4 = *v3;
        v5 = *(_QWORD *)(a2 + v4);
        v7 = *(_QWORD *)(a2 + *v6);
        if (v5 >= v7)
          return *(_BYTE *)(a2 + *v8) == 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        v4 = *v3;
        v5 = *(_QWORD *)(a2 + v4);
        v7 = *(_QWORD *)(a2 + *v6);
        if (v5 >= v7)
          return *(_BYTE *)(a2 + *v8) == 0;
      }
    }
    v14 = 0;
LABEL_38:
    *v12 = 1;
LABEL_39:
    v51 = *v8;
    v52 = *(unsigned __int8 *)(a2 + v51);
    if (*(_BYTE *)(a2 + v51))
      v14 = 0;
    goto LABEL_41;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E88DC9C(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  AppleCommonSchemaDeviceWorn *v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_40;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v16 = v15 + 1;
      v17 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << 7;
      if ((v17 & 0x80000000) == 0)
        goto LABEL_40;
      v18 = *v3;
      v19 = *(_QWORD *)(a2 + v18);
      if (v19 == -1 || v19 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v20 = v19 + 1;
      v21 = *(char *)(*(_QWORD *)(a2 + *v10) + v19);
      *(_QWORD *)(a2 + v18) = v20;
      v13 |= (unint64_t)(v21 & 0x7F) << 14;
      if ((v21 & 0x80000000) == 0)
        goto LABEL_40;
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v24 = v23 + 1;
      v25 = *(char *)(*(_QWORD *)(a2 + *v10) + v23);
      *(_QWORD *)(a2 + v22) = v24;
      v13 |= (unint64_t)(v25 & 0x7F) << 21;
      if ((v25 & 0x80000000) == 0)
        goto LABEL_40;
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v28 = v27 + 1;
      v29 = *(char *)(*(_QWORD *)(a2 + *v10) + v27);
      *(_QWORD *)(a2 + v26) = v28;
      v13 |= (unint64_t)(v29 & 0x7F) << 28;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_40;
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v32 = v31 + 1;
      v33 = *(char *)(*(_QWORD *)(a2 + *v10) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_40;
      v34 = *v3;
      v35 = *(_QWORD *)(a2 + v34);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v36 = v35 + 1;
      v37 = *(char *)(*(_QWORD *)(a2 + *v10) + v35);
      *(_QWORD *)(a2 + v34) = v36;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_40;
      v38 = *v3;
      v39 = *(_QWORD *)(a2 + v38);
      if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v40 = v39 + 1;
      v41 = *(char *)(*(_QWORD *)(a2 + *v10) + v39);
      *(_QWORD *)(a2 + v38) = v40;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_40;
      v42 = *v3;
      v43 = *(_QWORD *)(a2 + v42);
      if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v44 = v43 + 1;
      v45 = *(char *)(*(_QWORD *)(a2 + *v10) + v43);
      *(_QWORD *)(a2 + v42) = v44;
      if ((v45 & 0x80000000) == 0)
        goto LABEL_40;
      v46 = *v3;
      v47 = *(_QWORD *)(a2 + v46);
      if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v11 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v48 = v47 + 1;
      v49 = *(char *)(*(_QWORD *)(a2 + *v10) + v47);
      *(_QWORD *)(a2 + v46) = v48;
      if (v49 < 0)
      {
        v13 = 0;
        v50 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v13 = 0;
LABEL_42:
      if (v50)
        v51 = 1;
      else
        v51 = (v13 & 7) == 4;
      if (v51)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v13 >> 3) == 2)
      {
        v52 = objc_alloc_init(AppleCommonSchemaDeviceWorn);
        if (!PBReaderPlaceMark() || (sub_20E88D328(v52, a2) & 1) == 0)
        {
LABEL_58:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v52, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v52 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v52, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v52, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
LABEL_39:
    *v11 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E88E0B4(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t result;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  AppleCommonSchemaUUID128 *v94;
  uint64_t v95;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_39;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v17 = v16 + 1;
      v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_39;
      v19 = *v3;
      v20 = *(_QWORD *)(a2 + v19);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v21 = v20 + 1;
      v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
      *(_QWORD *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      v23 = *v3;
      v24 = *(_QWORD *)(a2 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v25 = v24 + 1;
      v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
      *(_QWORD *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_39;
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v29 = v28 + 1;
      v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
      *(_QWORD *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_39;
      v31 = *v3;
      v32 = *(_QWORD *)(a2 + v31);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v33 = v32 + 1;
      v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
      *(_QWORD *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_39;
      v35 = *v3;
      v36 = *(_QWORD *)(a2 + v35);
      if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v37 = v36 + 1;
      v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
      *(_QWORD *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0)
        goto LABEL_39;
      v39 = *v3;
      v40 = *(_QWORD *)(a2 + v39);
      if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v41 = v40 + 1;
      v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
      *(_QWORD *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_39;
      v43 = *v3;
      v44 = *(_QWORD *)(a2 + v43);
      if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v45 = v44 + 1;
      v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
      *(_QWORD *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_39;
      v47 = *v3;
      v48 = *(_QWORD *)(a2 + v47);
      if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_37:
        v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }
      v49 = v48 + 1;
      v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
      *(_QWORD *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        v14 = 0;
        v51 = *v8;
        v52 = *(unsigned __int8 *)(a2 + v51);
        goto LABEL_41;
      }
LABEL_39:
      v51 = *v8;
      v52 = *(unsigned __int8 *)(a2 + v51);
      if (*(_BYTE *)(a2 + v51))
        v14 = 0;
LABEL_41:
      if (v52)
        v53 = 1;
      else
        v53 = (v14 & 7) == 4;
      if (v53)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v14 >> 3) != 1)
      {
        if ((v14 >> 3) != 2)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_4;
        }
        v54 = *v3;
        v55 = *(_QWORD *)(a2 + v54);
        if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v6))
        {
          v57 = 0;
        }
        else
        {
          v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v55);
          *(_QWORD *)(a2 + v54) = v55 + 1;
          v57 = v56 & 0x7F;
          if ((v56 & 0x80) == 0)
            goto LABEL_83;
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v60 = v59 + 1;
          v61 = *(char *)(*(_QWORD *)(a2 + *v10) + v59);
          *(_QWORD *)(a2 + v58) = v60;
          v57 |= (unint64_t)(v61 & 0x7F) << 7;
          if ((v61 & 0x80000000) == 0)
            goto LABEL_83;
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v64 = v63 + 1;
          v65 = *(char *)(*(_QWORD *)(a2 + *v10) + v63);
          *(_QWORD *)(a2 + v62) = v64;
          v57 |= (unint64_t)(v65 & 0x7F) << 14;
          if ((v65 & 0x80000000) == 0)
            goto LABEL_83;
          v66 = *v3;
          v67 = *(_QWORD *)(a2 + v66);
          if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v68 = v67 + 1;
          v69 = *(char *)(*(_QWORD *)(a2 + *v10) + v67);
          *(_QWORD *)(a2 + v66) = v68;
          v57 |= (unint64_t)(v69 & 0x7F) << 21;
          if ((v69 & 0x80000000) == 0)
            goto LABEL_83;
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v72 = v71 + 1;
          v73 = *(char *)(*(_QWORD *)(a2 + *v10) + v71);
          *(_QWORD *)(a2 + v70) = v72;
          v57 |= (unint64_t)(v73 & 0x7F) << 28;
          if ((v73 & 0x80000000) == 0)
            goto LABEL_83;
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v76 = v75 + 1;
          v77 = *(char *)(*(_QWORD *)(a2 + *v10) + v75);
          *(_QWORD *)(a2 + v74) = v76;
          v57 |= (unint64_t)(v77 & 0x7F) << 35;
          if ((v77 & 0x80000000) == 0)
            goto LABEL_83;
          v78 = *v3;
          v79 = *(_QWORD *)(a2 + v78);
          if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v80 = v79 + 1;
          v81 = *(char *)(*(_QWORD *)(a2 + *v10) + v79);
          *(_QWORD *)(a2 + v78) = v80;
          v57 |= (unint64_t)(v81 & 0x7F) << 42;
          if ((v81 & 0x80000000) == 0)
            goto LABEL_83;
          v82 = *v3;
          v83 = *(_QWORD *)(a2 + v82);
          if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v84 = v83 + 1;
          v85 = *(char *)(*(_QWORD *)(a2 + *v10) + v83);
          *(_QWORD *)(a2 + v82) = v84;
          v57 |= (unint64_t)(v85 & 0x7F) << 49;
          if ((v85 & 0x80000000) == 0)
            goto LABEL_83;
          v86 = *v3;
          v87 = *(_QWORD *)(a2 + v86);
          if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_87;
          v88 = v87 + 1;
          v89 = *(char *)(*(_QWORD *)(a2 + *v10) + v87);
          *(_QWORD *)(a2 + v86) = v88;
          v57 |= (unint64_t)(v89 & 0x7F) << 56;
          if ((v89 & 0x80000000) == 0)
          {
LABEL_83:
            if (*(_BYTE *)(a2 + *v8))
              v95 = 0;
            else
              v95 = v57;
            goto LABEL_86;
          }
          v90 = *v3;
          v91 = *(_QWORD *)(a2 + v90);
          if (v91 != -1 && v91 < *(_QWORD *)(a2 + *v6))
          {
            v92 = v91 + 1;
            v93 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v91);
            *(_QWORD *)(a2 + v90) = v92;
            if ((v93 & 0x80) == 0)
            {
              v57 |= v93 << 63;
              goto LABEL_83;
            }
            v95 = 0;
LABEL_86:
            objc_msgSend(a1, "setTimestampSinceBootInNanosecond:", v95);
            goto LABEL_4;
          }
LABEL_87:
          v51 = *v8;
        }
        *(_BYTE *)(a2 + v51) = 1;
        goto LABEL_83;
      }
      v94 = objc_alloc_init(AppleCommonSchemaUUID128);
      if (!PBReaderPlaceMark() || (sub_20E8900A8(v94, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
      objc_msgSend(a1, "setBootSessionId:", v94, 0, 0);

LABEL_4:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
LABEL_38:
    *v12 = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E88EDBC(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  AppleCommonSchemaRegionInfo *v53;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_40;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v16 = v15 + 1;
      v17 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << 7;
      if ((v17 & 0x80000000) == 0)
        goto LABEL_40;
      v18 = *v3;
      v19 = *(_QWORD *)(a2 + v18);
      if (v19 == -1 || v19 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v20 = v19 + 1;
      v21 = *(char *)(*(_QWORD *)(a2 + *v10) + v19);
      *(_QWORD *)(a2 + v18) = v20;
      v13 |= (unint64_t)(v21 & 0x7F) << 14;
      if ((v21 & 0x80000000) == 0)
        goto LABEL_40;
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v24 = v23 + 1;
      v25 = *(char *)(*(_QWORD *)(a2 + *v10) + v23);
      *(_QWORD *)(a2 + v22) = v24;
      v13 |= (unint64_t)(v25 & 0x7F) << 21;
      if ((v25 & 0x80000000) == 0)
        goto LABEL_40;
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v28 = v27 + 1;
      v29 = *(char *)(*(_QWORD *)(a2 + *v10) + v27);
      *(_QWORD *)(a2 + v26) = v28;
      v13 |= (unint64_t)(v29 & 0x7F) << 28;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_40;
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v32 = v31 + 1;
      v33 = *(char *)(*(_QWORD *)(a2 + *v10) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_40;
      v34 = *v3;
      v35 = *(_QWORD *)(a2 + v34);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v36 = v35 + 1;
      v37 = *(char *)(*(_QWORD *)(a2 + *v10) + v35);
      *(_QWORD *)(a2 + v34) = v36;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_40;
      v38 = *v3;
      v39 = *(_QWORD *)(a2 + v38);
      if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v40 = v39 + 1;
      v41 = *(char *)(*(_QWORD *)(a2 + *v10) + v39);
      *(_QWORD *)(a2 + v38) = v40;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_40;
      v42 = *v3;
      v43 = *(_QWORD *)(a2 + v42);
      if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v44 = v43 + 1;
      v45 = *(char *)(*(_QWORD *)(a2 + *v10) + v43);
      *(_QWORD *)(a2 + v42) = v44;
      if ((v45 & 0x80000000) == 0)
        goto LABEL_40;
      v46 = *v3;
      v47 = *(_QWORD *)(a2 + v46);
      if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v11 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v48 = v47 + 1;
      v49 = *(char *)(*(_QWORD *)(a2 + *v10) + v47);
      *(_QWORD *)(a2 + v46) = v48;
      if (v49 < 0)
      {
        v13 = 0;
        v50 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v13 = 0;
LABEL_42:
      if (v50)
        v51 = 1;
      else
        v51 = (v13 & 7) == 4;
      if (v51)
        return *(_BYTE *)(a2 + *v8) == 0;
      v52 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v53 = objc_alloc_init(AppleCommonSchemaRegionInfo);
        if (!PBReaderPlaceMark() || (sub_20E88F22C(v53, a2) & 1) == 0)
        {
LABEL_62:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRegionInfo:", v53, 0, 0);
        goto LABEL_4;
      }
      if ((_DWORD)v52 == 2)
      {
        v53 = objc_alloc_init(AppleCommonSchemaDeviceInfo);
        if (!PBReaderPlaceMark() || (sub_20E88C420(v53, a2) & 1) == 0)
          goto LABEL_62;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDeviceInfo:", v53, 0, 0);
        goto LABEL_4;
      }
      if ((_DWORD)v52 == 1)
      {
        v53 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v53, a2) & 1) == 0)
          goto LABEL_62;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v53, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
LABEL_39:
    *v11 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E88F22C(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  void *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_40;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v17 = v16 + 1;
      v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_40;
      v19 = *v3;
      v20 = *(_QWORD *)(a2 + v19);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v21 = v20 + 1;
      v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
      *(_QWORD *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_40;
      v23 = *v3;
      v24 = *(_QWORD *)(a2 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v25 = v24 + 1;
      v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
      *(_QWORD *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_40;
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v29 = v28 + 1;
      v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
      *(_QWORD *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_40;
      v31 = *v3;
      v32 = *(_QWORD *)(a2 + v31);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v33 = v32 + 1;
      v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
      *(_QWORD *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_40;
      v35 = *v3;
      v36 = *(_QWORD *)(a2 + v35);
      if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v37 = v36 + 1;
      v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
      *(_QWORD *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0)
        goto LABEL_40;
      v39 = *v3;
      v40 = *(_QWORD *)(a2 + v39);
      if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v41 = v40 + 1;
      v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
      *(_QWORD *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_40;
      v43 = *v3;
      v44 = *(_QWORD *)(a2 + v43);
      if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v45 = v44 + 1;
      v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
      *(_QWORD *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_40;
      v47 = *v3;
      v48 = *(_QWORD *)(a2 + v47);
      if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v49 = v48 + 1;
      v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
      *(_QWORD *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        v14 = 0;
        v51 = *v8;
        v52 = *(unsigned __int8 *)(a2 + v51);
        goto LABEL_42;
      }
LABEL_40:
      v51 = *v8;
      v52 = *(unsigned __int8 *)(a2 + v51);
      if (*(_BYTE *)(a2 + v51))
        v14 = 0;
LABEL_42:
      if (v52)
        v53 = 1;
      else
        v53 = (v14 & 7) == 4;
      if (v53)
        return *(_BYTE *)(a2 + *v8) == 0;
      v54 = v14 >> 3;
      if ((v14 >> 3) == 3)
      {
        PBReaderReadString();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDate:", v11);
        goto LABEL_4;
      }
      if ((_DWORD)v54 == 2)
      {
        PBReaderReadString();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTimezone:", v11);
LABEL_4:

        goto LABEL_5;
      }
      if ((_DWORD)v54 == 1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v6))
        {
          v58 = 0;
        }
        else
        {
          v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v56);
          *(_QWORD *)(a2 + v55) = v56 + 1;
          v58 = v57 & 0x7F;
          if ((v57 & 0x80) == 0)
            goto LABEL_85;
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 != -1 && v60 < *(_QWORD *)(a2 + *v6))
          {
            v61 = v60 + 1;
            v62 = *(char *)(*(_QWORD *)(a2 + *v10) + v60);
            *(_QWORD *)(a2 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << 7;
            if ((v62 & 0x80000000) == 0)
              goto LABEL_85;
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 != -1 && v64 < *(_QWORD *)(a2 + *v6))
            {
              v65 = v64 + 1;
              v66 = *(char *)(*(_QWORD *)(a2 + *v10) + v64);
              *(_QWORD *)(a2 + v63) = v65;
              v58 |= (unint64_t)(v66 & 0x7F) << 14;
              if ((v66 & 0x80000000) == 0)
                goto LABEL_85;
              v67 = *v3;
              v68 = *(_QWORD *)(a2 + v67);
              if (v68 != -1 && v68 < *(_QWORD *)(a2 + *v6))
              {
                v69 = v68 + 1;
                v70 = *(char *)(*(_QWORD *)(a2 + *v10) + v68);
                *(_QWORD *)(a2 + v67) = v69;
                v58 |= (unint64_t)(v70 & 0x7F) << 21;
                if ((v70 & 0x80000000) == 0)
                  goto LABEL_85;
                v71 = *v3;
                v72 = *(_QWORD *)(a2 + v71);
                if (v72 != -1 && v72 < *(_QWORD *)(a2 + *v6))
                {
                  v73 = v72 + 1;
                  v74 = *(char *)(*(_QWORD *)(a2 + *v10) + v72);
                  *(_QWORD *)(a2 + v71) = v73;
                  v58 |= (unint64_t)(v74 & 0x7F) << 28;
                  if ((v74 & 0x80000000) == 0)
                    goto LABEL_85;
                  v75 = *v3;
                  v76 = *(_QWORD *)(a2 + v75);
                  if (v76 != -1 && v76 < *(_QWORD *)(a2 + *v6))
                  {
                    v77 = v76 + 1;
                    v78 = *(char *)(*(_QWORD *)(a2 + *v10) + v76);
                    *(_QWORD *)(a2 + v75) = v77;
                    if ((v78 & 0x80000000) == 0)
                      goto LABEL_85;
                    v79 = *v3;
                    v80 = *(_QWORD *)(a2 + v79);
                    if (v80 != -1 && v80 < *(_QWORD *)(a2 + *v6))
                    {
                      v81 = v80 + 1;
                      v82 = *(char *)(*(_QWORD *)(a2 + *v10) + v80);
                      *(_QWORD *)(a2 + v79) = v81;
                      if ((v82 & 0x80000000) == 0)
                        goto LABEL_85;
                      v83 = *v3;
                      v84 = *(_QWORD *)(a2 + v83);
                      if (v84 != -1 && v84 < *(_QWORD *)(a2 + *v6))
                      {
                        v85 = v84 + 1;
                        v86 = *(char *)(*(_QWORD *)(a2 + *v10) + v84);
                        *(_QWORD *)(a2 + v83) = v85;
                        if ((v86 & 0x80000000) == 0)
                          goto LABEL_85;
                        v87 = *v3;
                        v88 = *(_QWORD *)(a2 + v87);
                        if (v88 != -1 && v88 < *(_QWORD *)(a2 + *v6))
                        {
                          v89 = v88 + 1;
                          v90 = *(char *)(*(_QWORD *)(a2 + *v10) + v88);
                          *(_QWORD *)(a2 + v87) = v89;
                          if ((v90 & 0x80000000) == 0)
                            goto LABEL_85;
                          v91 = *v3;
                          v92 = *(_QWORD *)(a2 + v91);
                          if (v92 != -1 && v92 < *(_QWORD *)(a2 + *v6))
                          {
                            v93 = v92 + 1;
                            v94 = *(char *)(*(_QWORD *)(a2 + *v10) + v92);
                            *(_QWORD *)(a2 + v91) = v93;
                            if (v94 < 0)
                            {
                              v95 = 0;
LABEL_88:
                              objc_msgSend(a1, "setCountryCode:", v95);
                              goto LABEL_5;
                            }
LABEL_85:
                            if (*(_BYTE *)(a2 + *v8))
                              v95 = 0;
                            else
                              v95 = v58;
                            goto LABEL_88;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v51 = *v8;
        }
        *(_BYTE *)(a2 + v51) = 1;
        goto LABEL_85;
      }
      result = PBReaderSkipValueWithTag();
      if (!(_DWORD)result)
        return result;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
LABEL_39:
    *v12 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E8900A8(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  void *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_39;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v17 = v16 + 1;
      v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_39;
      v19 = *v3;
      v20 = *(_QWORD *)(a2 + v19);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v21 = v20 + 1;
      v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
      *(_QWORD *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      v23 = *v3;
      v24 = *(_QWORD *)(a2 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v25 = v24 + 1;
      v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
      *(_QWORD *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_39;
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v29 = v28 + 1;
      v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
      *(_QWORD *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_39;
      v31 = *v3;
      v32 = *(_QWORD *)(a2 + v31);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v33 = v32 + 1;
      v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
      *(_QWORD *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_39;
      v35 = *v3;
      v36 = *(_QWORD *)(a2 + v35);
      if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v37 = v36 + 1;
      v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
      *(_QWORD *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0)
        goto LABEL_39;
      v39 = *v3;
      v40 = *(_QWORD *)(a2 + v39);
      if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v41 = v40 + 1;
      v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
      *(_QWORD *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_39;
      v43 = *v3;
      v44 = *(_QWORD *)(a2 + v43);
      if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v45 = v44 + 1;
      v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
      *(_QWORD *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_39;
      v47 = *v3;
      v48 = *(_QWORD *)(a2 + v47);
      if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_37:
        v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }
      v49 = v48 + 1;
      v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
      *(_QWORD *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        v14 = 0;
        v51 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_41;
      }
LABEL_39:
      v51 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v14 = 0;
LABEL_41:
      if (v51)
        v52 = 1;
      else
        v52 = (v14 & 7) == 4;
      if (v52)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v14 >> 3) == 1)
      {
        PBReaderReadData();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setValue:", v11);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
LABEL_38:
    *v12 = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

__uint64_t sub_20E89155C()
{
  return clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
}

AppleCommonSchemaUUID128 *sub_20E891564(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  AppleCommonSchemaUUID128 *v5;
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_254A5A6A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A6A8))
  {
    v9[0] = sub_20E8916DC(a1);
    v9[1] = v8;
    sub_2102325E0((unsigned __int8 *)v9, (uint64_t)&qword_254A5A6D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A6D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A6A8);
  }
  if (byte_254A5A6E7 >= 0)
    v2 = &qword_254A5A6D0;
  else
    v2 = (uint64_t *)qword_254A5A6D0;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_alloc_init(AppleCommonSchemaUUID128);
  -[AppleCommonSchemaUUID128 setValue:](v5, "setValue:", v4);

  return v5;
}

void sub_20E89168C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A6A8);
  _Unwind_Resume(a1);
}

void sub_20E8916A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_20E8916DC(uint64_t *a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v12[0] = *a1;
  sub_20E893368(&v2, v12);
  v12[0] = (v2 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v6 << 56);
  v12[1] = (v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v11 << 56);
  sub_210232F00((uint64_t)v12, 4);
  sub_210232F10((uint64_t)v12, 0x80u);
  return v12[0];
}

uint64_t sub_20E8917B4()
{
  char *v0;
  _QWORD *v1;

  v0 = sub_20E9E600C();
  v1 = v0 + 96;
  if (v0[119] < 0)
    v1 = (_QWORD *)*v1;
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
}

id sub_20E8917EC()
{
  char *v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  char *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  __int128 *v21;
  void *v22;
  std::string __dst;
  std::string v25;
  std::string v26;
  __int128 v27;
  int64_t v28;

  v0 = sub_20E9E600C();
  v1 = v0[47];
  if (v1 >= 0)
    v2 = v0[47];
  else
    v2 = *((_QWORD *)v0 + 4);
  v3 = v2 + 1;
  if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v4 = v0;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v2 + 1;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2 + 1;
    if (!v2)
      goto LABEL_15;
  }
  if (v1 >= 0)
    v8 = v4 + 24;
  else
    v8 = (const void *)*((_QWORD *)v4 + 3);
  memmove(p_dst, v8, v2);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v2) = 32;
  v9 = std::string::append(&__dst, "(", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v13 = (const std::string::value_type *)*((_QWORD *)v4 + 6);
  v12 = v4 + 48;
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  v17 = std::string::append(&v25, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v26, ")", 1uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v28 = v19->__r_.__value_.__r.__words[2];
  v27 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_31:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_32;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_23:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_32:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  if (v28 >= 0)
    v21 = &v27;
  else
    v21 = (__int128 *)v27;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  return v22;
}

void sub_20E8919D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

__CFString *sub_20E891A5C()
{
  _BOOL4 v0;
  char *v1;
  _QWORD *v2;
  uint64_t (**v4)();

  v4 = &off_24C9B6C08;
  v0 = sub_20E9E629C((uint64_t)&v4);
  nullsub_163(&v4);
  if (!v0)
    return &stru_24CA220C8;
  v1 = sub_20E9E600C();
  v2 = v1 + 72;
  if (v1[95] < 0)
    v2 = (_QWORD *)*v2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_20E891AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_163(va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E891AF8()
{
  unsigned __int8 v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  NSObject *v18;
  _BYTE *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  os_log_type_t v32;
  NSObject *v33;
  NSObject *v34;
  size_t v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  size_t v38;
  size_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  const char *__src;
  char *__s;
  uint64_t *v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  _QWORD v105[4];
  __int128 v106;
  std::__shared_weak_count *v107;
  char *v108;
  std::__shared_weak_count *v109;
  _QWORD *v110;
  __int128 v111;
  _BYTE v112[24];
  __int128 v113;
  void *v114[2];
  unint64_t v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A5A6B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A6B8))
  {
    qword_254A5A6B0 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", CFSTR("UNKNOWN"), CFSTR("AF"), CFSTR("AX"), CFSTR("AL"), CFSTR("DZ"), CFSTR("AS"), CFSTR("AD"), CFSTR("AO"), CFSTR("AI"), CFSTR("AQ"), CFSTR("AG"), CFSTR("AR"), CFSTR("AM"), CFSTR("AW"), CFSTR("AU"), CFSTR("AT"), CFSTR("AZ"),
                        CFSTR("BS"),
                        CFSTR("BH"),
                        CFSTR("BD"),
                        CFSTR("BB"),
                        CFSTR("BY"),
                        CFSTR("BE"),
                        CFSTR("BZ"),
                        CFSTR("BJ"),
                        CFSTR("BM"),
                        CFSTR("BT"),
                        CFSTR("BO"),
                        CFSTR("BQ"),
                        CFSTR("BA"),
                        CFSTR("BW"),
                        CFSTR("BV"),
                        CFSTR("BR"),
                        CFSTR("IO"),
                        CFSTR("BN"),
                        CFSTR("BG"),
                        CFSTR("BF"),
                        CFSTR("BI"),
                        CFSTR("CV"),
                        CFSTR("KH"),
                        CFSTR("CM"),
                        CFSTR("CA"),
                        CFSTR("KY"),
                        CFSTR("CF"),
                        CFSTR("TD"),
                        CFSTR("CL"),
                        CFSTR("CN"),
                        CFSTR("CX"),
                        CFSTR("CC"),
                        CFSTR("CO"),
                        CFSTR("KM"),
                        CFSTR("CD"),
                        CFSTR("CG"),
                        CFSTR("CK"),
                        CFSTR("CR"),
                        CFSTR("CI"),
                        CFSTR("HR"),
                        CFSTR("CU"),
                        CFSTR("CW"),
                        CFSTR("CY"),
                        CFSTR("CZ"));
    __cxa_guard_release(&qword_254A5A6B8);
  }
  v1 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "countryCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%@"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = atomic_load((unsigned __int8 *)&qword_254A5A6C8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A6C8))
  {
    sub_21021D3D8(v97);
    sub_20E8610C0(v112, "cv3d.vio.oasis_analytics");
    sub_20E8C4068(v97, (uint64_t)v112, &qword_254A5A6C0);
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    __cxa_guard_release(&qword_254A5A6C8);
  }
  v104 = qword_254A5A6C0;
  if (**(int **)(qword_254A5A6C0 + 56) <= 2)
  {
    v6 = *(unsigned __int8 *)(qword_254A5A6C0 + 72);
    v7 = sub_21021D818(&v104);
    v8 = v7;
    if (v6 || v7)
    {
      v97[0] = &v104;
      v97[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v97[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v98 = 2;
      v99 = "unknown file";
      v100 = 97;
      v103 = 0;
      v101 = "unknown function";
      v102 = 0;
      v9 = objc_retainAutorelease(v4);
      __s = (char *)objc_msgSend(v9, "UTF8String");
      v10 = *v97[0];
      v11 = *v97[0] + 16;
      v94 = *v97[0];
      if (*(char *)(*v97[0] + 39) < 0)
      {
        v13 = *(const char **)(v10 + 16);
        v12 = *(_QWORD *)(v10 + 24);
        v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v15 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v12 = *(unsigned __int8 *)(*v97[0] + 39);
        v13 = (const char *)(*v97[0] + 16);
        v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v14 & 1) != 0)
          goto LABEL_10;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v112);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v112);
        if ((_BYTE)v113 && (v112[23] & 0x80000000) != 0)
          operator delete(*(void **)v112);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_10:
      if (byte_254A4A50F >= 0)
        v16 = (const char *)&xmmword_254A4A4F8;
      else
        v16 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v17 = byte_254A4A50F;
      else
        v17 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      __src = v13;
      v18 = os_log_create(v16, v13);
      *(_QWORD *)v112 = v18;

      v19 = &v112[8];
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v17 >= 0x17)
      {
        v20 = v4;
        v21 = v8;
        v22 = v11;
        v23 = v9;
        v24 = v6;
        v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v25 = v17 | 7;
        v26 = v25 + 1;
        v19 = operator new(v25 + 1);
        *(_QWORD *)&v112[16] = v17;
        *(_QWORD *)&v113 = v26 | 0x8000000000000000;
        *(_QWORD *)&v112[8] = v19;
        v6 = v24;
        v9 = v23;
        v11 = v22;
        v8 = v21;
        v4 = v20;
      }
      else
      {
        BYTE7(v113) = v17;
        if (!v17)
        {
LABEL_24:
          v19[v17] = 0;
          BYTE8(v113) = 1;
          v27 = v114;
          if (v12 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v12 >= 0x17)
          {
            v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17)
              v28 = v12 | 7;
            v29 = v28 + 1;
            v27 = (void **)operator new(v28 + 1);
            v114[1] = (void *)v12;
            v115 = v29 | 0x8000000000000000;
            v114[0] = v27;
          }
          else
          {
            HIBYTE(v115) = v12;
            if (!v12)
              goto LABEL_32;
          }
          memmove(v27, __src, v12);
LABEL_32:
          *((_BYTE *)v27 + v12) = 0;
          v116 = 1;
          v30 = objc_retainAutorelease(*(id *)v112);
          if (v116 && SHIBYTE(v115) < 0)
            operator delete(v114[0]);
          if (BYTE8(v113) && SBYTE7(v113) < 0)
            operator delete(*(void **)&v112[8]);

          v31 = &v110;
          v32 = sub_21021D650(2u);
          v33 = v30;
          v34 = v33;
          if (!v8 || !*(_QWORD *)(v8 + 8))
          {
            os_log_type_enabled(v33, v32);
            *(_DWORD *)v112 = 136315138;
            *(_QWORD *)&v112[4] = __s;
            LODWORD(v92) = 12;
            v91 = v112;
            v40 = (void *)_os_log_send_and_compose_impl();
            if (v40)
              free(v40);
            goto LABEL_112;
          }
          v35 = _os_log_pack_size();
          v36 = (std::__shared_weak_count_vtbl *)operator new(v35, (std::align_val_t)8uLL);
          v37 = (std::__shared_weak_count *)operator new();
          v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v37->__shared_owners_ = 0;
          v37->__shared_weak_owners_ = 0;
          v37[1].__vftable = v36;
          *(_QWORD *)&v106 = v36;
          *((_QWORD *)&v106 + 1) = v36;
          v108 = 0;
          v109 = 0;
          v107 = v37;
          v38 = strlen(__s);
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v39 = v38;
          v93 = v9;
          if (v38 >= 0x17)
          {
            v41 = v6;
            v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v42 = v38 | 7;
            v43 = v42 + 1;
            v31 = operator new(v42 + 1);
            *(_QWORD *)&v111 = v39;
            *((_QWORD *)&v111 + 1) = v43 | 0x8000000000000000;
            v110 = v31;
            v6 = v41;
          }
          else
          {
            HIBYTE(v111) = v38;
            if (!v38)
            {
LABEL_50:
              *((_BYTE *)v31 + v39) = 0;
              v105[2] = v111;
              *(_QWORD *)((char *)&v105[2] + 7) = *(_QWORD *)((char *)&v111 + 7);
              v105[0] = off_24C9ABC20;
              v105[1] = v110;
              HIBYTE(v105[3]) = HIBYTE(v111);
              v44 = operator new(0x38uLL);
              v44[1] = 0;
              v44[2] = 0;
              *v44 = &off_24C9ABBD0;
              v44[3] = off_24C9ABC20;
              *((_OWORD *)v44 + 2) = *(_OWORD *)&v105[1];
              v44[6] = v105[3];
              memset(&v105[1], 0, 24);
              v45 = v109;
              v108 = (char *)(v44 + 3);
              v109 = (std::__shared_weak_count *)v44;
              if (v45)
              {
                p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(p_shared_owners);
                while (__stlxr(v47 - 1, p_shared_owners));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              if (SHIBYTE(v105[3]) < 0)
                operator delete((void *)v105[1]);
              nullsub_1(v105);
              *(_OWORD *)v112 = v106;
              v48 = v108;
              *(_QWORD *)&v112[16] = v107;
              if (v107)
              {
                v49 = (unint64_t *)&v107->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v51 = v109;
              *(_QWORD *)&v113 = v48;
              *((_QWORD *)&v113 + 1) = v109;
              if (v109)
              {
                v52 = (unint64_t *)&v109->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
                v114[0] = v48;
                do
                  v54 = __ldaxr(v52);
                while (__stlxr(v54 - 1, v52));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              else
              {
                v114[0] = v48;
              }
              v55 = v107;
              if (v107)
              {
                v56 = (unint64_t *)&v107->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v58 = *(_QWORD *)v112;
              if (*((char *)v114[0] + 31) >= 0)
                v59 = (char *)v114[0] + 8;
              else
                v59 = (char *)*((_QWORD *)v114[0] + 1);
              v60 = _os_log_pack_fill();
              *(_DWORD *)v60 = 136315138;
              *(_QWORD *)(v60 + 4) = v59;
              v61 = operator new();
              v62 = *(unsigned __int8 *)(v94 + 39);
              v63 = *(_QWORD *)(v94 + 16);
              v64 = *(_QWORD *)(v94 + 24);
              v65 = v113;
              *(_OWORD *)(v61 + 8) = *(_OWORD *)&v112[8];
              if ((v62 & 0x80u) != 0)
                v62 = v64;
              else
                v63 = v11;
              *(_QWORD *)v61 = v58;
              *(_QWORD *)&v112[8] = 0;
              *(_QWORD *)&v112[16] = 0;
              *(_OWORD *)(v61 + 24) = v65;
              v113 = 0uLL;
              *(_QWORD *)(v61 + 40) = v63;
              *(_QWORD *)(v61 + 48) = v62;
              *(_BYTE *)(v61 + 56) = v32;
              v105[0] = 0;
              *(_QWORD *)&v106 = v61;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 8) + 40))(*(_QWORD *)(v8 + 8), &v106);
              v66 = v106;
              *(_QWORD *)&v106 = 0;
              if (v66)
              {
                v67 = *(std::__shared_weak_count **)(v66 + 32);
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                v70 = *(std::__shared_weak_count **)(v66 + 16);
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                MEMORY[0x212BC6398](v66, 0x10F0C40B62ED6C6);
                v73 = v105[0];
                v105[0] = 0;
                if (v73)
                {
                  v74 = *(std::__shared_weak_count **)(v73 + 32);
                  if (v74)
                  {
                    v75 = (unint64_t *)&v74->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  v77 = *(std::__shared_weak_count **)(v73 + 16);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
              v9 = v93;
              if (*((_QWORD *)&v113 + 1))
              {
                v81 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v83 = *(std::__shared_weak_count **)&v112[16];
              if (*(_QWORD *)&v112[16])
              {
                v84 = (unint64_t *)(*(_QWORD *)&v112[16] + 8);
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
LABEL_112:

              if (v6)
              {
                sub_20E8C003C((uint64_t)v97, "country code = %s", (const char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
                sub_20E863570((uint64_t)v97);
              }
              sub_20E863570((uint64_t)v97);
              v86 = v103;
              if (v103)
              {
                v87 = (unint64_t *)&v103->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              goto LABEL_119;
            }
          }
          memcpy(v31, __s, v39);
          goto LABEL_50;
        }
      }
      memmove(v19, v16, v17);
      goto LABEL_24;
    }
  }
LABEL_119:
  v89 = objc_msgSend((id)qword_254A5A6B0, "indexOfObject:", v4, v91, v92);

  return v89;
}

void sub_20E8930C4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 - 152))
  {
    if (*(char *)(v2 - 153) < 0)
      operator delete(*(void **)(v2 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x800]);

  _Unwind_Resume(a1);
}

id sub_20E893254()
{
  void *v0;
  uint64_t v1;
  const __CFString *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x24BDBCF38], "localTimeZone");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "secondsFromGMT");

  v2 = CFSTR("+");
  if (v1 >= -3599)
    v3 = v1 / 3600;
  else
    v3 = v1 / -3600;
  if (v1 < -3599)
    v2 = CFSTR("-");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%02zd:00"), v2, v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_20E8932F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_20E893300()
{
  tm *v0;
  std::chrono::system_clock::time_point __t;

  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  __t.__d_.__rep_ = std::chrono::system_clock::to_time_t(&__t);
  v0 = localtime(&__t.__d_.__rep_);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%04d-%02d-%02d"), (v0->tm_year + 1900), (v0->tm_mon + 1), v0->tm_mday);
  return (id)objc_claimAutoreleasedReturnValue();
}

unsigned int *sub_20E893368(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 2496);
  v4 = (v3 + 1) % 0x270uLL;
  v5 = 4 * v4;
  v6 = *(_DWORD *)(*a2 + 4 * ((v3 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(*a2 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(*a2 + 4 * v3) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*a2 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(*a2 + 4 * v3) = v6;
  v7 = ((v6 ^ (v6 >> 11)) << 7) & 0x9D2C5680 ^ v6 ^ (v6 >> 11);
  *result = (v7 << 15) & 0xEFC60000 ^ v7 ^ (((v7 << 15) & 0xEFC60000 ^ v7) >> 18);
  if (v4 == 623)
    v8 = 0;
  else
    v8 = v4 + 1;
  if (v4 >= 0xE3)
    v9 = -227;
  else
    v9 = 397;
  v10 = *(_DWORD *)(v2 + 4 * (v4 + v9)) ^ ((*(_DWORD *)(v2 + 4 * v8) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v4) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + v5) = v10;
  v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
  result[1] = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
  v12 = (v8 + 1) % 0x270;
  v13 = *(_DWORD *)(v2 + 4 * ((v8 + 397) % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v12) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v12) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v8) = v13;
  v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
  result[2] = (v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18);
  if (v12 == 623)
    v15 = 0;
  else
    v15 = v12 + 1;
  if (v12 >= 0xE3)
    v16 = -227;
  else
    v16 = 397;
  v17 = *(_DWORD *)(v2 + 4 * (v12 + v16)) ^ ((*(_DWORD *)(v2 + 4 * v15) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v12) = v17;
  v18 = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
  result[3] = (v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18);
  *(_QWORD *)(v2 + 2496) = v15;
  return result;
}

uint64_t sub_20E893558(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;

  *(_QWORD *)a1 = &off_24C9AC6C0;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v2 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = operator new(0x28uLL);
  *v2 = v3;
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)v3 + 4) = 0;
  *(_QWORD *)(a1 + 32) = (char *)v3 + 40;
  *(_QWORD *)(a1 + 40) = (char *)v3 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_210218D3C((_QWORD *)(a1 + 72), "OasisAnalytics", 2u, 0, 0);
  return a1;
}

void sub_20E8935E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893608(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9AC6C0;
  sub_210218DE4(a1 + 9);
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E893648(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9AC6C0;
  sub_210218DE4(a1 + 9);
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E893698(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_24C9AC798;
  v3[1] = a1;
  v4 = v3;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_20E893734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893770(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_24C9AC828;
  v3[1] = a1;
  v4 = v3;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_20E89380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893848(uint64_t a1, _BYTE *a2)
{
  __uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  LOBYTE(a2) = *a2;
  v5 = operator new(0x20uLL);
  *v5 = &off_24C9AC8A8;
  v5[1] = a1;
  v5[2] = v4;
  *((_BYTE *)v5 + 24) = (_BYTE)a2;
  v9 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E893914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E89394C(uint64_t a1, int *a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v5[0] = &off_24C9AC928;
  v5[1] = a1;
  v6 = v2;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v5);
  result = v7;
  if (v7 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20E8939F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893A2C(uint64_t a1, int *a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v5[0] = &off_24C9AC9A8;
  v5[1] = a1;
  v6 = v2;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v5);
  result = v7;
  if (v7 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20E893AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893B0C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v5[0] = &off_24C9ACA28;
  v5[1] = a1;
  v5[2] = v2;
  v6 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20E893BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20E89155C();
  v7 = operator new(0x28uLL);
  *v7 = &off_24C9ACAA8;
  v7[1] = a1;
  v7[2] = v6;
  *((_BYTE *)v7 + 28) = BYTE4(a2);
  *((_DWORD *)v7 + 6) = a2;
  *((_BYTE *)v7 + 36) = BYTE4(a3);
  *((_DWORD *)v7 + 8) = a3;
  v11 = v7;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20E893CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893D00(uint64_t a1, _OWORD *a2)
{
  __uint64_t v4;
  char *v5;
  __int128 v6;
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  v5 = (char *)operator new(0x38uLL);
  *(_QWORD *)v5 = &off_24C9ACB28;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = v4;
  v6 = a2[1];
  *(_OWORD *)(v5 + 24) = *a2;
  *(_OWORD *)(v5 + 40) = v6;
  v10 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v9);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_20E893DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893E08(uint64_t a1, uint64_t a2)
{
  __uint64_t v4;
  char *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  v5 = (char *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24C9ACBA8;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a2 + 16);
  v9 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E893EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E893F14(uint64_t a1, uint64_t a2)
{
  __uint64_t v4;
  char *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  v5 = (char *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24C9ACC28;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a2 + 16);
  v9 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E893FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20E894020(uint64_t a1, __int128 *a2)
{
  char *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 __p;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = sub_20E89155C();
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v9, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
  }
  v11 = v8;
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(&__p, (void *)v9, *((unint64_t *)&v9 + 1));
  }
  else
  {
    __p = v9;
    v13 = v10;
  }
  v15 = 0;
  v4 = (char *)operator new(0x30uLL);
  *(_QWORD *)v4 = off_24C9ACCA8;
  *(_OWORD *)(v4 + 8) = v11;
  v5 = v4 + 24;
  if (SHIBYTE(v13) < 0)
  {
    sub_20E860C04(v5, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)v5 = __p;
    *((_QWORD *)v4 + 5) = v13;
  }
  v15 = v4;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v14);
  v6 = v15;
  if (v15 == v14)
  {
    v7 = 4;
    v6 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete((void *)v9);
    return;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v10) < 0)
    goto LABEL_19;
}

void sub_20E8941C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  operator delete(v25);
  if (a25 < 0)
  {
    operator delete(a20);
    if (a17 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

void sub_20E89426C(uint64_t a1, __int128 *a2)
{
  char *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 __p;
  uint64_t v14;
  _QWORD v15[2];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = sub_20E89155C();
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v9, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
  }
  v11[0] = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)v11 + 6) = *(_QWORD *)((char *)a2 + 30);
  v12 = v8;
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(&__p, (void *)v9, *((unint64_t *)&v9 + 1));
  }
  else
  {
    __p = v9;
    v14 = v10;
  }
  v15[0] = v11[0];
  *(_QWORD *)((char *)v15 + 6) = *(_QWORD *)((char *)v11 + 6);
  v17 = 0;
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = off_24C9ACD28;
  *(_OWORD *)(v4 + 8) = v12;
  v5 = v4 + 24;
  if (SHIBYTE(v14) < 0)
  {
    sub_20E860C04(v5, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)v5 = __p;
    *((_QWORD *)v4 + 5) = v14;
  }
  *((_QWORD *)v4 + 6) = v15[0];
  *(_QWORD *)(v4 + 54) = *(_QWORD *)((char *)v15 + 6);
  v17 = v4;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete((void *)v9);
    return;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v10) < 0)
    goto LABEL_19;
}

void sub_20E894444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a27 < 0)
  {
    operator delete(a22);
    if (a17 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8944F0(uint64_t a1, _DWORD *a2)
{
  __uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  LODWORD(a2) = *a2;
  v5 = operator new(0x20uLL);
  *v5 = &off_24C9ACDA8;
  v5[1] = a1;
  v5[2] = v4;
  *((_DWORD *)v5 + 6) = (_DWORD)a2;
  v9 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E8945BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E8945F4(uint64_t a1, _DWORD *a2)
{
  __uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E89155C();
  LODWORD(a2) = *a2;
  v5 = operator new(0x20uLL);
  *v5 = &off_24C9ACE28;
  v5[1] = a1;
  v5[2] = v4;
  *((_DWORD *)v5 + 6) = (_DWORD)a2;
  v9 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E8946C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20E8946F8(uint64_t a1, __int128 *a2)
{
  char *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 __p;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = sub_20E89155C();
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v9, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
  }
  v11 = *((_QWORD *)a2 + 3);
  v12 = *((_DWORD *)a2 + 8);
  v13 = v8;
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(&__p, (void *)v9, *((unint64_t *)&v9 + 1));
  }
  else
  {
    __p = v9;
    v15 = v10;
  }
  v16 = v11;
  v17 = v12;
  v19 = 0;
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = off_24C9ACEA8;
  *(_OWORD *)(v4 + 8) = v13;
  v5 = v4 + 24;
  if (SHIBYTE(v15) < 0)
  {
    sub_20E860C04(v5, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)v5 = __p;
    *((_QWORD *)v4 + 5) = v15;
  }
  *((_QWORD *)v4 + 6) = v16;
  *((_DWORD *)v4 + 14) = v17;
  v19 = v4;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v18);
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete((void *)v9);
    return;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v10) < 0)
    goto LABEL_19;
}

void sub_20E8948D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a27 < 0)
  {
    operator delete(a22);
    if (a17 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

void sub_20E89497C(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  os_log_type_t v24;
  NSObject *v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  size_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  const char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  os_log_type_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  const char *__src;
  uint64_t *v82;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  _QWORD v91[4];
  _QWORD v92[2];
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  uint64_t __dst;
  _BYTE v97[15];
  char v98;
  _BYTE v99[24];
  __int128 v100;
  void *v101[2];
  unint64_t v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  sub_20E8953BC(&v90);
  if (**(int **)(v90 + 56) > 2)
    goto LABEL_108;
  v6 = *(unsigned __int8 *)(v90 + 72);
  v7 = sub_21021D818(&v90);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_108;
  v83[0] = &v90;
  v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v83[2] = std::chrono::system_clock::now().__d_.__rep_;
  v84 = 2;
  v85 = "unknown file";
  v86 = 259;
  v88 = 0;
  v89 = 0;
  v87 = "unknown function";
  v10 = "true";
  v79 = *a3;
  if (!*a3)
    v10 = "false";
  __src = v10;
  v11 = *(_QWORD *)v83[0];
  if (*(char *)(*(_QWORD *)v83[0] + 39) < 0)
  {
    v13 = *(const char **)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v83[0] + 39);
    v13 = (const char *)(*(_QWORD *)v83[0] + 16);
  }
  v77 = *(_QWORD *)v83[0];
  v78 = *(_QWORD *)v83[0] + 16;
  v80 = v6;
  v82 = a2;
  v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v99);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v99);
    if ((_BYTE)v100 && (v99[23] & 0x80000000) != 0)
      operator delete(*(void **)v99);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v15 = (const char *)&xmmword_254A4A4F8;
  else
    v15 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v16 = byte_254A4A50F;
  else
    v16 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v99 = os_log_create(v15, v13);
  v17 = &v99[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    *(_QWORD *)&v99[16] = v16;
    *(_QWORD *)&v100 = v19 | 0x8000000000000000;
    *(_QWORD *)&v99[8] = v17;
    goto LABEL_25;
  }
  BYTE7(v100) = v16;
  if (v16)
LABEL_25:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  BYTE8(v100) = 1;
  v20 = v101;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v21 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v21 = v12 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    v101[1] = (void *)v12;
    v102 = v22 | 0x8000000000000000;
    v101[0] = v20;
    goto LABEL_33;
  }
  HIBYTE(v102) = v12;
  if (v12)
LABEL_33:
    memmove(v20, v13, v12);
  *((_BYTE *)v20 + v12) = 0;
  v103 = 1;
  a2 = v82;
  v23 = objc_retainAutorelease(*(id *)v99);
  if (v103 && SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  if (BYTE8(v100) && SBYTE7(v100) < 0)
    operator delete(*(void **)&v99[8]);

  v24 = sub_21021D650(2u);
  v25 = v23;
  v26 = v25;
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    v76 = v25;
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v75 = v24;
    v29 = (std::__shared_weak_count *)operator new();
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    v92[0] = v28;
    v92[1] = v28;
    v94 = 0;
    v95 = 0;
    v93 = v29;
    if (v79)
      v31 = 4;
    else
      v31 = 5;
    v98 = v31;
    memcpy(&__dst, __src, v31);
    *(_BYTE *)((unint64_t)&__dst | v31) = 0;
    v91[1] = __dst;
    v91[2] = *(_QWORD *)v97;
    *(_QWORD *)((char *)&v91[2] + 7) = *(_QWORD *)&v97[7];
    v91[0] = off_24C9ABC20;
    HIBYTE(v91[3]) = v98;
    v32 = (std::__shared_weak_count *)operator new(0x38uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__shared_weak_owners_ = 0;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
    *(_OWORD *)&v32[1].__shared_owners_ = *(_OWORD *)&v91[1];
    v32[2].__vftable = (std::__shared_weak_count_vtbl *)v91[3];
    memset(&v91[1], 0, 24);
    v94 = v32 + 1;
    v95 = v32;
    nullsub_1(v91);
    *(_QWORD *)v99 = v28;
    *(_QWORD *)&v99[8] = v28;
    *(_QWORD *)&v99[16] = v29;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    *(_QWORD *)&v100 = v32 + 1;
    *((_QWORD *)&v100 + 1) = v32;
    do
      v35 = __ldxr(v33);
    while (__stxr(v35 + 1, v33));
    v101[0] = &v32[1];
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    a2 = v82;
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    v37 = v93;
    if (v93)
    {
      v38 = (unint64_t *)&v93->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = *(_QWORD *)v99;
    if (*((char *)v101[0] + 31) >= 0)
      v41 = (char *)v101[0] + 8;
    else
      v41 = (char *)*((_QWORD *)v101[0] + 1);
    v42 = _os_log_pack_fill();
    *(_DWORD *)v42 = 136315138;
    *(_QWORD *)(v42 + 4) = v41;
    v43 = operator new();
    v44 = *(unsigned __int8 *)(v77 + 39);
    v45 = *(_QWORD *)(v77 + 16);
    v46 = *(_QWORD *)(v77 + 24);
    v47 = v100;
    *(_OWORD *)(v43 + 8) = *(_OWORD *)&v99[8];
    if ((v44 & 0x80u) != 0)
      v44 = v46;
    else
      v45 = v78;
    *(_QWORD *)v43 = v40;
    *(_QWORD *)&v99[8] = 0;
    *(_QWORD *)&v99[16] = 0;
    *(_OWORD *)(v43 + 24) = v47;
    v100 = 0uLL;
    *(_QWORD *)(v43 + 40) = v45;
    *(_QWORD *)(v43 + 48) = v44;
    *(_BYTE *)(v43 + 56) = v75;
    v91[0] = 0;
    v92[0] = v43;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v8 + 8) + 40))(*(_QWORD *)(v8 + 8), v92);
    v6 = v80;
    v48 = v92[0];
    v92[0] = 0;
    v26 = v76;
    if (v48)
    {
      v49 = *(std::__shared_weak_count **)(v48 + 32);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = *(std::__shared_weak_count **)(v48 + 16);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
      v55 = v91[0];
      v91[0] = 0;
      if (v55)
      {
        v56 = *(std::__shared_weak_count **)(v55 + 32);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)(v55 + 16);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
      }
    }
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = *(std::__shared_weak_count **)&v99[16];
    if (*(_QWORD *)&v99[16])
    {
      v66 = (unint64_t *)(*(_QWORD *)&v99[16] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else
  {
    os_log_type_enabled(v25, v24);
    *(_DWORD *)v99 = 136315138;
    *(_QWORD *)&v99[4] = __src;
    v68 = (void *)_os_log_send_and_compose_impl();
    if (v68)
      free(v68);
  }

  if (v6)
  {
    v69 = "true";
    if (!*a3)
      v69 = "false";
    sub_20E8C003C((uint64_t)v83, "emitting a don_or_doff=%s event...", v69);
    sub_20E863570((uint64_t)v83);
  }
  sub_20E863570((uint64_t)v83);
  v70 = v89;
  if (v89)
  {
    v71 = (unint64_t *)&v89->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_108:
  sub_20E8954B0(a2, (uint64_t)a3, (void (*)(uint64_t))sub_20E87CA48);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v73, "data");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)a1 + 136))(a1, v74, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.common.DeviceWornEvent"));

}

void sub_20E895280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  if (*(_BYTE *)(v11 - 152))
  {
    if (*(char *)(v11 - 153) < 0)
      operator delete(*(void **)(v11 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8952C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_20E86E8C4(&a33);
  sub_20E86E8C4(&a29);
  sub_20E86E658(v33 - 176);

  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20E895394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20E8953BC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A6F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A6F8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.oasis_analytics");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5A6F0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5A6F8);
  }
  *a1 = qword_254A5A6F0;
}

void sub_20E895458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5A6F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5A6F8);
  _Unwind_Resume(a1);
}

AppleCommonSchemaDeviceWornEvent *sub_20E8954B0(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCommonSchemaDeviceWornEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCommonSchemaDeviceWornEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCommonSchemaDeviceWornEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDeviceWornEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCommonSchemaDeviceWornEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDeviceWornEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E8955D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8955E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8955F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E895628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89563C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E89564C(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  size_t v8;
  void **v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  NSObject *v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  os_log_type_t v31;
  NSObject *v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  size_t v37;
  size_t v38;
  _QWORD *v39;
  void *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  AppleCommonSchemaDimensionInfoEvent *v90;
  AppleCommonSchemaMetadata *v91;
  AppleCommonSchemaDeviceInfo *v92;
  AppleCommonSchemaRegionInfo *v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  _BOOL8 v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  const char *v118;
  int v119;
  char *__s;
  uint64_t v121;
  std::__shared_weak_count *v122;
  _QWORD v123[3];
  int v124;
  const char *v125;
  int v126;
  const char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *__dst[2];
  int64_t v131;
  _QWORD v132[2];
  _QWORD v133[3];
  const void *v134;
  uint64_t v135;
  const void *v136;
  unint64_t v137;
  void *v138;
  char v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[4];
  __int128 v145;
  std::__shared_weak_count *v146;
  char *v147;
  std::__shared_weak_count *v148;
  _QWORD *v149;
  __int128 v150;
  _BYTE v151[24];
  __int128 v152;
  void *v153[2];
  unint64_t v154;
  char v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  sub_20E8953BC(&v143);
  if (**(int **)(v143 + 56) > 3)
    goto LABEL_142;
  v4 = *(unsigned __int8 *)(v143 + 72);
  v5 = sub_21021D818(&v143);
  v6 = v5;
  if (!v4 && v5 == 0)
    goto LABEL_142;
  sub_20E863438((uint64_t)v132);
  sub_20E86A980(v133, (uint64_t)"emitting a dimension info event...", 34);
  v119 = v4;
  if ((v141 & 0x10) != 0)
  {
    v10 = v140;
    if (v140 < v137)
    {
      v140 = v137;
      v10 = v137;
    }
    v11 = v136;
    v8 = v10 - (_QWORD)v136;
    if (v10 - (unint64_t)v136 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v141 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v131) = 0;
      v9 = __dst;
      goto LABEL_19;
    }
    v11 = v134;
    v8 = v135 - (_QWORD)v134;
    if ((unint64_t)(v135 - (_QWORD)v134) > 0x7FFFFFFFFFFFFFF7)
LABEL_62:
      sub_20E860B7C();
  }
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v9 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v8;
    v131 = v13 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_18;
  }
  HIBYTE(v131) = v8;
  v9 = __dst;
  if (v8)
LABEL_18:
    memmove(v9, v11, v8);
LABEL_19:
  *((_BYTE *)v9 + v8) = 0;
  v123[0] = &v143;
  v123[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v123[2] = std::chrono::system_clock::now().__d_.__rep_;
  v124 = 3;
  v125 = "unknown file";
  v126 = 270;
  v128 = 0;
  v129 = 0;
  v127 = "unknown function";
  v14 = __dst;
  if (v131 < 0)
    v14 = (void **)__dst[0];
  __s = (char *)v14;
  v15 = *(_QWORD *)v123[0];
  v16 = (const char *)(*(_QWORD *)v123[0] + 16);
  v118 = v16;
  if (*(char *)(*(_QWORD *)v123[0] + 39) < 0)
  {
    v16 = *(const char **)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v19 & 1) != 0)
      goto LABEL_25;
  }
  else
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)v123[0] + 39);
    v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v18 & 1) != 0)
      goto LABEL_25;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v151);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v151);
    if ((_BYTE)v152 && (v151[23] & 0x80000000) != 0)
      operator delete(*(void **)v151);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_25:
  if (byte_254A4A50F >= 0)
    v20 = (const char *)&xmmword_254A4A4F8;
  else
    v20 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v21 = byte_254A4A50F;
  else
    v21 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  v22 = os_log_create(v20, v16);
  *(_QWORD *)v151 = v22;

  v23 = &v151[8];
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v21 >= 0x17)
  {
    v24 = a2;
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v23 = operator new(v25 + 1);
    *(_QWORD *)&v151[16] = v21;
    *(_QWORD *)&v152 = v26 | 0x8000000000000000;
    *(_QWORD *)&v151[8] = v23;
    a2 = v24;
    goto LABEL_38;
  }
  BYTE7(v152) = v21;
  if (v21)
LABEL_38:
    memmove(v23, v20, v21);
  v23[v21] = 0;
  BYTE8(v152) = 1;
  v27 = v153;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v28 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v28 = v17 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v153[1] = (void *)v17;
    v154 = v29 | 0x8000000000000000;
    v153[0] = v27;
  }
  else
  {
    HIBYTE(v154) = v17;
    if (!v17)
      goto LABEL_47;
  }
  memmove(v27, v16, v17);
LABEL_47:
  *((_BYTE *)v27 + v17) = 0;
  v155 = 1;
  v30 = objc_retainAutorelease(*(id *)v151);
  if (v155 && SHIBYTE(v154) < 0)
    operator delete(v153[0]);
  if (BYTE8(v152) && SBYTE7(v152) < 0)
    operator delete(*(void **)&v151[8]);

  v31 = sub_21021D650(3u);
  v32 = v30;
  v33 = v32;
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    os_log_type_enabled(v32, v31);
    *(_DWORD *)v151 = 136315138;
    *(_QWORD *)&v151[4] = __s;
    LODWORD(v117) = 12;
    v116 = v151;
    v40 = (void *)_os_log_send_and_compose_impl();
    v41 = v119;
    if (v40)
      free(v40);
    goto LABEL_128;
  }
  v34 = _os_log_pack_size();
  v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
  v36 = (std::__shared_weak_count *)operator new();
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = v35;
  *(_QWORD *)&v145 = v35;
  *((_QWORD *)&v145 + 1) = v35;
  v147 = 0;
  v148 = 0;
  v146 = v36;
  v37 = strlen(__s);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v42 = a2;
    v43 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v43 = v37 | 7;
    v44 = v43 + 1;
    v39 = operator new(v43 + 1);
    *(_QWORD *)&v150 = v38;
    *((_QWORD *)&v150 + 1) = v44 | 0x8000000000000000;
    v149 = v39;
    a2 = v42;
    goto LABEL_66;
  }
  HIBYTE(v150) = v37;
  v39 = &v149;
  if (v37)
LABEL_66:
    memcpy(v39, __s, v38);
  *((_BYTE *)v39 + v38) = 0;
  v144[1] = v149;
  v144[2] = v150;
  *(_QWORD *)((char *)&v144[2] + 7) = *(_QWORD *)((char *)&v150 + 7);
  v144[0] = off_24C9ABC20;
  HIBYTE(v144[3]) = HIBYTE(v150);
  v45 = operator new(0x38uLL);
  v45[1] = 0;
  v45[2] = 0;
  *v45 = &off_24C9ABBD0;
  v45[3] = off_24C9ABC20;
  *((_OWORD *)v45 + 2) = *(_OWORD *)&v144[1];
  v45[6] = v144[3];
  memset(&v144[1], 0, 24);
  v46 = v148;
  v147 = (char *)(v45 + 3);
  v148 = (std::__shared_weak_count *)v45;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (SHIBYTE(v144[3]) < 0)
    operator delete((void *)v144[1]);
  nullsub_1(v144);
  *(_OWORD *)v151 = v145;
  v49 = v147;
  *(_QWORD *)&v151[16] = v146;
  if (v146)
  {
    v50 = (unint64_t *)&v146->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = v148;
  *(_QWORD *)&v152 = v49;
  *((_QWORD *)&v152 + 1) = v148;
  if (v148)
  {
    v53 = (unint64_t *)&v148->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    v153[0] = v49;
    do
      v55 = __ldaxr(v53);
    while (__stlxr(v55 - 1, v53));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  else
  {
    v153[0] = v49;
  }
  v56 = v146;
  if (v146)
  {
    v57 = (unint64_t *)&v146->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *(_QWORD *)v151;
  if (*((char *)v153[0] + 31) >= 0)
    v60 = (char *)v153[0] + 8;
  else
    v60 = (char *)*((_QWORD *)v153[0] + 1);
  v61 = _os_log_pack_fill();
  *(_DWORD *)v61 = 136315138;
  *(_QWORD *)(v61 + 4) = v60;
  v62 = operator new();
  v63 = *(unsigned __int8 *)(v15 + 39);
  v64 = v118;
  if ((v63 & 0x80u) != 0)
  {
    v64 = *(const char **)(v15 + 16);
    v63 = *(_QWORD *)(v15 + 24);
  }
  *(_QWORD *)v62 = v59;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)&v151[8];
  *(_QWORD *)&v151[8] = 0;
  *(_QWORD *)&v151[16] = 0;
  *(_OWORD *)(v62 + 24) = v152;
  v152 = 0uLL;
  *(_QWORD *)(v62 + 40) = v64;
  *(_QWORD *)(v62 + 48) = v63;
  *(_BYTE *)(v62 + 56) = v31;
  v144[0] = 0;
  *(_QWORD *)&v145 = v62;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 8) + 40))(*(_QWORD *)(v6 + 8), &v145);
  v65 = v145;
  *(_QWORD *)&v145 = 0;
  v41 = v119;
  if (v65)
  {
    v66 = *(std::__shared_weak_count **)(v65 + 32);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = *(std::__shared_weak_count **)(v65 + 16);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
    v72 = v144[0];
    v144[0] = 0;
    if (v72)
    {
      v73 = *(std::__shared_weak_count **)(v72 + 32);
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = *(std::__shared_weak_count **)(v72 + 16);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v151[16];
  if (*(_QWORD *)&v151[16])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v151[16] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_128:

  if (v41)
  {
    v85 = (const char *)__dst;
    if (v131 < 0)
      v85 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v123, "%s", v85);
    sub_20E863570((uint64_t)v123);
  }
  sub_20E863570((uint64_t)v123);
  v86 = v129;
  if (v129)
  {
    v87 = (unint64_t *)&v129->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(__dst[0]);
  v132[0] = *MEMORY[0x24BEDB7F0];
  v89 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v132 + *(_QWORD *)(v132[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v133[0] = v89;
  v133[1] = MEMORY[0x24BEDB848] + 16;
  if (v139 < 0)
    operator delete(v138);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v142);
LABEL_142:
  v90 = objc_alloc_init(AppleCommonSchemaDimensionInfoEvent);
  v91 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCommonSchemaDimensionInfoEvent setMetadata:](v90, "setMetadata:", v91);

  v92 = objc_alloc_init(AppleCommonSchemaDeviceInfo);
  -[AppleCommonSchemaDimensionInfoEvent setDeviceInfo:](v90, "setDeviceInfo:", v92);

  v93 = objc_alloc_init(AppleCommonSchemaRegionInfo);
  -[AppleCommonSchemaDimensionInfoEvent setRegionInfo:](v90, "setRegionInfo:", v93);

  sub_20E8965F4();
  sub_20E891564(&v121);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent metadata](v90, "metadata");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setBootSessionId:", v94);

  v96 = v122;
  if (v122)
  {
    v97 = (unint64_t *)&v122->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = *a2;
  -[AppleCommonSchemaDimensionInfoEvent metadata](v90, "metadata", v116, v117);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "setTimestampSinceBootInNanosecond:", v99);

  v132[0] = &off_24C9B6C08;
  v101 = sub_20E9E629C((uint64_t)v132);
  -[AppleCommonSchemaDimensionInfoEvent deviceInfo](v90, "deviceInfo");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "setIsInternal:", v101);

  nullsub_163(v132);
  sub_20E8917B4();
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent deviceInfo](v90, "deviceInfo");
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "setSystemBuild:", v103);

  sub_20E8917EC();
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent deviceInfo](v90, "deviceInfo");
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "setDeviceType:", v105);

  sub_20E891A5C();
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent deviceInfo](v90, "deviceInfo");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "setDeviceId:", v107);

  v109 = sub_20E891AF8();
  -[AppleCommonSchemaDimensionInfoEvent regionInfo](v90, "regionInfo");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "setCountryCode:", v109);

  sub_20E893254();
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent regionInfo](v90, "regionInfo");
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v112, "setTimezone:", v111);

  sub_20E893300();
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCommonSchemaDimensionInfoEvent regionInfo](v90, "regionInfo");
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v114, "setDate:", v113);

  -[AppleCommonSchemaDimensionInfoEvent data](v90, "data");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)a1 + 136))(a1, v115, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.common.DimensionInfoEvent"));

}

void sub_20E896390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 152) && *(char *)(v32 - 153) < 0)
    operator delete(*(void **)(v32 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  if (a31 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_20E8964D8()
{
  void *v0;
  void *v1;

  JUMPOUT(0x20E8965ECLL);
}

void sub_20E8965E8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20E8965F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t i;
  char *v3;
  std::random_device v4;
  _BYTE __token[2504];
  uint64_t v6;
  __int128 v7;
  _BYTE __dst[2496];
  _BYTE v9[2496];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  __token[23] = 12;
  strcpy(__token, "/dev/urandom");
  std::random_device::random_device(&v4, (const std::string *)__token);
  if ((__token[23] & 0x80000000) != 0)
    operator delete(*(void **)__token);
  for (i = 0; i != 2496; i += 4)
    *(_DWORD *)&v9[i] = MEMORY[0x212BC5D5C](&v4);
  memcpy(__dst, v9, sizeof(__dst));
  sub_20E89CF9C(__dst, (uint64_t)__token);
  v3 = (char *)operator new(0x9F8uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_24C9ACF28;
  memcpy(v3 + 24, __token, 0x9C8uLL);
  *((_QWORD *)v3 + 316) = &off_24CA1F4F8;
  *(_OWORD *)(v3 + 2536) = v7;
  v7 = 0uLL;
  *v1 = v3 + 24;
  v1[1] = v3;
  sub_210231620((uint64_t)&v6);
  std::random_device::~random_device(&v4);
}

void sub_20E896734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12, int a13, char a14)
{
  sub_210231620((uint64_t)&STACK[0x9D8]);
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_20E896754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_20E896768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E896784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20E896798(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E896804(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A6E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A6E8))
  {
    v6 = operator new();
    sub_20E893558(v6);
    sub_20E896910(&qword_254A5A700, v6);
    __cxa_atexit((void (*)(void *))sub_20E896984, &qword_254A5A700, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A6E8);
  }
  v3 = *(_QWORD *)algn_254A5A708;
  *a1 = qword_254A5A700;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_20E8968C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C4061F7518FLL);
  __cxa_guard_abort(&qword_254A5A6E8);
  _Unwind_Resume(a1);
}

void sub_20E8968F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A6E8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E896910(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9ACF78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20E896964(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E896984(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E8969F0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E896A04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9AC798;
  result[1] = v3;
  return result;
}

uint64_t sub_20E896A38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9AC798;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E896A54(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 8) = 1;
  return result;
}

uint64_t sub_20E896A64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics6EnableEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics6EnableEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics6EnableEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics6EnableEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E896AD0()
{
  return &unk_24C9AC808;
}

void sub_20E896AE0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E896AF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9AC828;
  result[1] = v3;
  return result;
}

uint64_t sub_20E896B28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9AC828;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E896B44(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 8) = 0;
  return result;
}

uint64_t sub_20E896B50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics7DisableEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics7DisableEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics7DisableEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics7DisableEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E896BBC()
{
  return &unk_24C9AC888;
}

void sub_20E896BCC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E896BE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9AC8A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20E896C20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9AC8A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E896C48(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (void *)MEMORY[0x212BC6CE0]();
  if (!*(_BYTE *)(v2 + 10))
  {
    v4 = (_BYTE *)(a1 + 24);
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_9;
LABEL_8:
    sub_20E89497C(v2, (uint64_t *)(a1 + 16), v4);
    sub_20E89564C(v2, (_QWORD *)(a1 + 16));
    goto LABEL_9;
  }
  v4 = (_BYTE *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 9))
  {
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 24))
    sub_20E89497C(v2, (uint64_t *)(a1 + 16), v4);
LABEL_9:
  *(_WORD *)(v2 + 9) = *(unsigned __int8 *)(a1 + 24) | 0x100;
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_20E896CFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics16UpdateDeviceWornERKbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics16UpdateDeviceWornERKbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics16UpdateDeviceWornERKbE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics16UpdateDeviceWornERKbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E896D68()
{
  return &unk_24C9AC908;
}

void sub_20E896D78()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E896D8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9AC928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E896DC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9AC928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E896DE4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD **)(result + 8);
  v2 = v1[3];
  v3 = v1[4];
  v5 = v1[7];
  v4 = v1[8];
  *(_DWORD *)(v2 + 4 * v5) = *(_DWORD *)(result + 16);
  v6 = (v3 - v2) >> 2;
  v7 = v5 + 1;
  if (v5 + 1 >= v6)
    v8 = v6;
  else
    v8 = 0;
  v1[7] = v7 - v8;
  if (v4 == v6)
  {
    v9 = v1[6] + 1;
    if (v9 < v6)
      v6 = 0;
    v1[6] = v9 - v6;
  }
  else
  {
    v1[8] = v4 + 1;
  }
  return result;
}

uint64_t sub_20E896E44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics18UpdatePrewittLevelERKfE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics18UpdatePrewittLevelERKfE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics18UpdatePrewittLevelERKfE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics18UpdatePrewittLevelERKfE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E896EB0()
{
  return &unk_24C9AC988;
}

void sub_20E896EC0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E896ED4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9AC9A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E896F0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9AC9A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_20E896F2C(uint64_t a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(float *)(a1 + 16);
  *(float *)(v1 + 12) = result;
  *(_BYTE *)(v1 + 16) = 1;
  return result;
}

uint64_t sub_20E896F44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateIMUMeasurementsERKfE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateIMUMeasurementsERKfE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateIMUMeasurementsERKfE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateIMUMeasurementsERKfE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E896FB0()
{
  return &unk_24C9ACA08;
}

void sub_20E896FC0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E896FD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9ACA28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E89700C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9ACA28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E89702C(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 8) + 20) = *(unsigned __int8 *)(result + 16) | 0x100;
  return result;
}

uint64_t sub_20E897040(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateEnvironmentTypeERKhE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateEnvironmentTypeERKhE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateEnvironmentTypeERKhE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics21UpdateEnvironmentTypeERKhE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8970AC()
{
  return &unk_24C9ACA88;
}

void sub_20E8970BC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E8970D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9ACAA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20E897110(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9ACAA8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E897138(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  NSObject *v81;
  unint64_t v82;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *__dst[2];
  int64_t v91;
  uint64_t v92;
  char v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  const void *v99;
  char v100;
  char v101;
  uint64_t v102;
  const void *v103;
  unint64_t v104;
  void *__p;
  char v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  __int128 v112;
  _BYTE v113[32];
  char v114;
  void *v115[2];
  unint64_t v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v110);
  if (**(int **)(v110 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v110 + 72);
  v3 = sub_21021D818(&v110);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)&v92);
  sub_20E86A980(&v95, (uint64_t)"emitting a context snapshot event...", 36);
  if ((v108 & 0x10) != 0)
  {
    v9 = v107;
    if (v107 < v104)
    {
      v107 = v104;
      v9 = v104;
    }
    v10 = v103;
    v7 = v9 - (_QWORD)v103;
    if (v9 - (unint64_t)v103 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v108 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v91) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v99;
    v7 = v102 - (_QWORD)v99;
    if ((unint64_t)(v102 - (_QWORD)v99) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v91 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v91) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v83[0] = &v110;
  v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v83[2] = std::chrono::system_clock::now().__d_.__rep_;
  v84 = 2;
  v85 = "unknown file";
  v86 = 105;
  v88 = 0;
  v89 = 0;
  v87 = "unknown function";
  if (v91 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v110 + 16);
  v78 = v110 + 16;
  v79 = v110;
  if (*(char *)(v110 + 39) < 0)
  {
    v14 = *(const char **)(v110 + 16);
    v15 = *(_QWORD *)(v110 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v110 + 39);
  }
  v80 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v113);
    if (v113[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v113;
      unk_254A4A508 = *(_QWORD *)&v113[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v113 = os_log_create(v17, v14);
  v19 = &v113[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v82 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v113[16] = v18;
    *(_QWORD *)&v113[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v113[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v113[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v114 = 1;
  v23 = v115;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v115[1] = (void *)v15;
    v116 = v26 | 0x8000000000000000;
    v115[0] = v23;
    v24 = (const char *)v80;
  }
  else
  {
    HIBYTE(v116) = v15;
    v24 = (const char *)v80;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v117 = 1;
  v27 = objc_retainAutorelease(*(id *)v113);
  if (v117 && SHIBYTE(v116) < 0)
    operator delete(v115[0]);
  if (v114 && (v113[31] & 0x80000000) != 0)
    operator delete(*(void **)&v113[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v113 = 136315138;
    *(_QWORD *)&v113[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v81 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v77 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v112 = v36;
    *((_QWORD *)&v112 + 1) = v40 | 0x8000000000000000;
    v111 = v37;
    goto LABEL_67;
  }
  HIBYTE(v112) = v35;
  v37 = &v111;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v113[8] = v111;
  *(_QWORD *)&v113[16] = v112;
  *(_QWORD *)&v113[23] = *(_QWORD *)((char *)&v112 + 7);
  *(_QWORD *)v113 = off_24C9ABC20;
  v113[31] = HIBYTE(v112);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v113[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v113[24];
  memset(&v113[8], 0, 24);
  nullsub_1(v113);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v79 + 39);
  v51 = v78;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v79 + 16);
    v50 = *(_QWORD *)(v79 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v113 = v49;
  v30 = v81;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v82 + 8) + 40))(*(_QWORD *)(v82 + 8), v113);
  v52 = *(_QWORD *)v113;
  *(_QWORD *)v113 = 0;
  v4 = v77;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v91 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v83, "%s", v59);
    sub_20E863570((uint64_t)v83);
  }
  sub_20E863570((uint64_t)v83);
  v60 = v89;
  if (v89)
  {
    v61 = (unint64_t *)&v89->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v91) < 0)
    operator delete(__dst[0]);
  v92 = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&v92 + *(_QWORD *)(v92 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v95 = v63;
  v96 = MEMORY[0x24BEDB848] + 16;
  if (v106 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v109);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  v98 = 0;
  LOBYTE(v99) = 0;
  BYTE4(v99) = 0;
  v100 = 0;
  v101 = 0;
  LOBYTE(v102) = 0;
  HIDWORD(v92) = *(_DWORD *)(a1 + 24);
  v93 = *(_BYTE *)(a1 + 28);
  v94 = *(_DWORD *)(a1 + 32);
  LOBYTE(v95) = *(_BYTE *)(a1 + 36);
  v65 = *(_QWORD *)(v2 + 64);
  if (v65)
  {
    v66 = *(_QWORD *)(v2 + 24);
    v67 = (*(_QWORD *)(v2 + 32) - v66) >> 2;
    if (v65 == 1)
    {
      v68 = 0;
      v69 = 0.0;
    }
    else
    {
      v68 = v65 & 0xFFFFFFFFFFFFFFFELL;
      v69 = 0.0;
      v70 = v65 & 0xFFFFFFFFFFFFFFFELL;
      v71 = *(_QWORD *)(v2 + 48);
      do
      {
        v69 = (float)(v69 + *(float *)(v66 + 4 * (v71 % v67))) + *(float *)(v66 + 4 * ((v71 + 1) % v67));
        v71 += 2;
        v70 -= 2;
      }
      while (v70);
      if (v65 == v68)
        goto LABEL_115;
    }
    v72 = v65 - v68;
    v73 = v68 + *(_QWORD *)(v2 + 48);
    do
    {
      v69 = v69 + *(float *)(v66 + 4 * (v73 % v67));
      ++v73;
      --v72;
    }
    while (v72);
LABEL_115:
    v65 = COERCE_UNSIGNED_INT(v69 / (float)(unint64_t)v65) | 0x100000000;
  }
  HIDWORD(v95) = v65;
  LOBYTE(v96) = BYTE4(v65);
  v74 = *(_DWORD *)(v2 + 12);
  v97 = *(_BYTE *)(v2 + 16);
  HIDWORD(v96) = v74;
  LOWORD(v92) = *(_WORD *)(v2 + 20);
  sub_20E897D84((uint64_t *)(a1 + 16), (uint64_t)&v92, (void (*)(uint64_t))sub_20E87CA9C);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "data");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v76, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.ContextSnapshotEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E897BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E897D0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics31ConstructContextSnapshotAndEmitENSt3__18optionalIfEES5_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics31ConstructContextSnapshotAndEmitENSt3__"
                                "18optionalIfEES5_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics31ConstructContextSnapshotAndEmitENSt3__18optionalIfEES5_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics31ConstructContextSnapshotAndEmitENSt3__18optionalIfEES5_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E897D78()
{
  return &unk_24C9ACB08;
}

AppleCV3DSchemaContextSnapshotEvent *sub_20E897D84(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaContextSnapshotEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaContextSnapshotEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaContextSnapshotEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaContextSnapshotEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaContextSnapshotEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaContextSnapshotEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E897EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E897EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E897ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E897EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E897F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E897F24()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E897F38(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24C9ACB28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_20E897F80(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9ACB28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E897FB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (void *)MEMORY[0x212BC6CE0]();
  sub_20E8980B8((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CB7C);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "data");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v5, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.SubmapLoadedEvent"));

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_20E898040(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12SubmapLoadedEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12SubmapLoadedEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12SubmapLoadedEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12SubmapLoadedEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8980AC()
{
  return &unk_24C9ACB88;
}

AppleCV3DSchemaSubmapLoadedEvent *sub_20E8980B8(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaSubmapLoadedEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaSubmapLoadedEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaSubmapLoadedEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapLoadedEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaSubmapLoadedEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapLoadedEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E8981D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8981EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E898230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E898258()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E89826C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9ACBA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20E8982B4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9ACBA8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E8982E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (void *)MEMORY[0x212BC6CE0]();
  sub_20E8983EC((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CC04);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "data");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v5, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.SubmapCreatedEvent"));

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_20E898374(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapCreatedEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapCreatedEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapCreatedEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapCreatedEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8983E0()
{
  return &unk_24C9ACC08;
}

AppleCV3DSchemaSubmapCreatedEvent *sub_20E8983EC(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaSubmapCreatedEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaSubmapCreatedEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaSubmapCreatedEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapCreatedEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaSubmapCreatedEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapCreatedEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E89850C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E898564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E89858C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E8985A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9ACC28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20E8985E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9ACC28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E898618(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (void *)MEMORY[0x212BC6CE0]();
  sub_20E898720((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CC64);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "data");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v5, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.SubmapUpdatedEvent"));

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_20E8986A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapUpdatedEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapUpdatedEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapUpdatedEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13SubmapUpdatedEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E898714()
{
  return &unk_24C9ACC88;
}

AppleCV3DSchemaSubmapUpdatedEvent *sub_20E898720(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaSubmapUpdatedEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaSubmapUpdatedEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaSubmapUpdatedEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapUpdatedEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaSubmapUpdatedEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaSubmapUpdatedEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E898840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E898868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E898898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8988AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_20E8988BC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9ACCA8;
  if (*(char *)(result + 47) < 0)
  {
    operator delete(*(void **)(result + 24));
    return v1;
  }
  return result;
}

void sub_20E898908(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9ACCA8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x212BC6398);
}

char *sub_20E898954(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_24C9ACCA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_20E8989CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20E8989E0(char *result, uint64_t a2)
{
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)a2 = off_24C9ACCA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = (_BYTE *)(a2 + 24);
  if (result[47] < 0)
    return (char *)sub_20E860C04(v2, *((void **)result + 3), *((_QWORD *)result + 4));
  v3 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
  *(_OWORD *)v2 = v3;
  return result;
}

void sub_20E898A24(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20E898A38(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    __p = v1;
  }
  operator delete(__p);
}

void sub_20E898A78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__dst[2];
  int64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  const void *v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  void *__p;
  char v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  _BYTE v96[32];
  char v97;
  void *v98[2];
  unint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v93);
  if (**(int **)(v93 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v93 + 72);
  v3 = sub_21021D818(&v93);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)v82);
  sub_20E86A980(v83, (uint64_t)"emitting a tracking lost event...", 33);
  if ((v91 & 0x10) != 0)
  {
    v9 = v90;
    if (v90 < v87)
    {
      v90 = v87;
      v9 = v87;
    }
    v10 = v86;
    v7 = v9 - (_QWORD)v86;
    if (v9 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v81) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v84;
    v7 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v81 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v81) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v73[0] = &v93;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 2;
  v75 = "unknown file";
  v76 = 176;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  if (v81 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v93 + 16);
  v68 = v93 + 16;
  v69 = v93;
  if (*(char *)(v93 + 39) < 0)
  {
    v14 = *(const char **)(v93 + 16);
    v15 = *(_QWORD *)(v93 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v93 + 39);
  }
  v70 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v96);
    if (v96[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v96;
      unk_254A4A508 = *(_QWORD *)&v96[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v96 = os_log_create(v17, v14);
  v19 = &v96[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v72 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v96[16] = v18;
    *(_QWORD *)&v96[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v96[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v96[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v97 = 1;
  v23 = v98;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v98[1] = (void *)v15;
    v99 = v26 | 0x8000000000000000;
    v98[0] = v23;
    v24 = (const char *)v70;
  }
  else
  {
    HIBYTE(v99) = v15;
    v24 = (const char *)v70;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v100 = 1;
  v27 = objc_retainAutorelease(*(id *)v96);
  if (v100 && SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v97 && (v96[31] & 0x80000000) != 0)
    operator delete(*(void **)&v96[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v96 = 136315138;
    *(_QWORD *)&v96[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v71 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v67 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v95 = v36;
    *((_QWORD *)&v95 + 1) = v40 | 0x8000000000000000;
    v94 = v37;
    goto LABEL_67;
  }
  HIBYTE(v95) = v35;
  v37 = &v94;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v96[8] = v94;
  *(_QWORD *)&v96[16] = v95;
  *(_QWORD *)&v96[23] = *(_QWORD *)((char *)&v95 + 7);
  *(_QWORD *)v96 = off_24C9ABC20;
  v96[31] = HIBYTE(v95);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v96[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v96[24];
  memset(&v96[8], 0, 24);
  nullsub_1(v96);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v69 + 39);
  v51 = v68;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v69 + 16);
    v50 = *(_QWORD *)(v69 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v96 = v49;
  v30 = v71;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v72 + 8) + 40))(*(_QWORD *)(v72 + 8), v96);
  v52 = *(_QWORD *)v96;
  *(_QWORD *)v96 = 0;
  v4 = v67;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v81 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v73, "%s", v59);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v60 = v79;
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0]);
  v82[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v83[0] = v63;
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v89 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v92);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  sub_20E8995B8((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CCC4);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "data");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v66, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.TrackingLostEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E8993E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E899540(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12TrackingLostEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12TrackingLostEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12TrackingLostEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_12TrackingLostEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8995AC()
{
  return &unk_24C9ACD08;
}

AppleCV3DSchemaTrackingLostEvent *sub_20E8995B8(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaTrackingLostEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaTrackingLostEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaTrackingLostEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingLostEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaTrackingLostEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingLostEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E8996D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8996EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E899700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E899730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E899744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_20E899754(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9ACD28;
  if (*(char *)(result + 47) < 0)
  {
    operator delete(*(void **)(result + 24));
    return v1;
  }
  return result;
}

void sub_20E8997A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9ACD28;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x212BC6398);
}

char *sub_20E8997EC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24C9ACD28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 54) = *(_QWORD *)(a1 + 54);
  return v2;
}

void sub_20E899868(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E89987C(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a2 = off_24C9ACD28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)result = v5;
  }
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a1 + 54);
  *(_QWORD *)(a2 + 48) = v6;
  return result;
}

void sub_20E8998EC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20E899900(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    __p = v1;
  }
  operator delete(__p);
}

void sub_20E899940(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__dst[2];
  int64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  const void *v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  void *__p;
  char v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  _BYTE v96[32];
  char v97;
  void *v98[2];
  unint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v93);
  if (**(int **)(v93 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v93 + 72);
  v3 = sub_21021D818(&v93);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)v82);
  sub_20E86A980(v83, (uint64_t)"emitting a tracking state event...", 34);
  if ((v91 & 0x10) != 0)
  {
    v9 = v90;
    if (v90 < v87)
    {
      v90 = v87;
      v9 = v87;
    }
    v10 = v86;
    v7 = v9 - (_QWORD)v86;
    if (v9 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v81) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v84;
    v7 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v81 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v81) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v73[0] = &v93;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 2;
  v75 = "unknown file";
  v76 = 193;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  if (v81 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v93 + 16);
  v68 = v93 + 16;
  v69 = v93;
  if (*(char *)(v93 + 39) < 0)
  {
    v14 = *(const char **)(v93 + 16);
    v15 = *(_QWORD *)(v93 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v93 + 39);
  }
  v70 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v96);
    if (v96[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v96;
      unk_254A4A508 = *(_QWORD *)&v96[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v96 = os_log_create(v17, v14);
  v19 = &v96[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v72 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v96[16] = v18;
    *(_QWORD *)&v96[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v96[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v96[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v97 = 1;
  v23 = v98;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v98[1] = (void *)v15;
    v99 = v26 | 0x8000000000000000;
    v98[0] = v23;
    v24 = (const char *)v70;
  }
  else
  {
    HIBYTE(v99) = v15;
    v24 = (const char *)v70;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v100 = 1;
  v27 = objc_retainAutorelease(*(id *)v96);
  if (v100 && SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v97 && (v96[31] & 0x80000000) != 0)
    operator delete(*(void **)&v96[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v96 = 136315138;
    *(_QWORD *)&v96[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v71 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v67 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v95 = v36;
    *((_QWORD *)&v95 + 1) = v40 | 0x8000000000000000;
    v94 = v37;
    goto LABEL_67;
  }
  HIBYTE(v95) = v35;
  v37 = &v94;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v96[8] = v94;
  *(_QWORD *)&v96[16] = v95;
  *(_QWORD *)&v96[23] = *(_QWORD *)((char *)&v95 + 7);
  *(_QWORD *)v96 = off_24C9ABC20;
  v96[31] = HIBYTE(v95);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v96[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v96[24];
  memset(&v96[8], 0, 24);
  nullsub_1(v96);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v69 + 39);
  v51 = v68;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v69 + 16);
    v50 = *(_QWORD *)(v69 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v96 = v49;
  v30 = v71;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v72 + 8) + 40))(*(_QWORD *)(v72 + 8), v96);
  v52 = *(_QWORD *)v96;
  *(_QWORD *)v96 = 0;
  v4 = v67;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v81 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v73, "%s", v59);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v60 = v79;
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0]);
  v82[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v83[0] = v63;
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v89 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v92);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  sub_20E89A480((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CD6C);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "data");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v66, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.TrackingStateEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E89A2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E89A408(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13TrackingStateEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13TrackingStateEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13TrackingStateEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_13TrackingStateEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E89A474()
{
  return &unk_24C9ACD88;
}

AppleCV3DSchemaTrackingStateEvent *sub_20E89A480(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaTrackingStateEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaTrackingStateEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaTrackingStateEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingStateEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaTrackingStateEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingStateEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E89A5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89A5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89A5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89A5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89A60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E89A620()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E89A634(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9ACDA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20E89A674(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9ACDA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E89A69C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__dst[2];
  int64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  const void *v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  void *__p;
  char v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  _BYTE v96[32];
  char v97;
  void *v98[2];
  unint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v93);
  if (**(int **)(v93 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v93 + 72);
  v3 = sub_21021D818(&v93);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)v82);
  sub_20E86A980(v83, (uint64_t)"emitting a tracking recovered event...", 38);
  if ((v91 & 0x10) != 0)
  {
    v9 = v90;
    if (v90 < v87)
    {
      v90 = v87;
      v9 = v87;
    }
    v10 = v86;
    v7 = v9 - (_QWORD)v86;
    if (v9 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v81) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v84;
    v7 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v81 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v81) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v73[0] = &v93;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 2;
  v75 = "unknown file";
  v76 = 210;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  if (v81 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v93 + 16);
  v68 = v93 + 16;
  v69 = v93;
  if (*(char *)(v93 + 39) < 0)
  {
    v14 = *(const char **)(v93 + 16);
    v15 = *(_QWORD *)(v93 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v93 + 39);
  }
  v70 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v96);
    if (v96[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v96;
      unk_254A4A508 = *(_QWORD *)&v96[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v96 = os_log_create(v17, v14);
  v19 = &v96[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v72 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v96[16] = v18;
    *(_QWORD *)&v96[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v96[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v96[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v97 = 1;
  v23 = v98;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v98[1] = (void *)v15;
    v99 = v26 | 0x8000000000000000;
    v98[0] = v23;
    v24 = (const char *)v70;
  }
  else
  {
    HIBYTE(v99) = v15;
    v24 = (const char *)v70;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v100 = 1;
  v27 = objc_retainAutorelease(*(id *)v96);
  if (v100 && SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v97 && (v96[31] & 0x80000000) != 0)
    operator delete(*(void **)&v96[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v96 = 136315138;
    *(_QWORD *)&v96[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v71 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v67 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v95 = v36;
    *((_QWORD *)&v95 + 1) = v40 | 0x8000000000000000;
    v94 = v37;
    goto LABEL_67;
  }
  HIBYTE(v95) = v35;
  v37 = &v94;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v96[8] = v94;
  *(_QWORD *)&v96[16] = v95;
  *(_QWORD *)&v96[23] = *(_QWORD *)((char *)&v95 + 7);
  *(_QWORD *)v96 = off_24C9ABC20;
  v96[31] = HIBYTE(v95);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v96[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v96[24];
  memset(&v96[8], 0, 24);
  nullsub_1(v96);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v69 + 39);
  v51 = v68;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v69 + 16);
    v50 = *(_QWORD *)(v69 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v96 = v49;
  v30 = v71;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v72 + 8) + 40))(*(_QWORD *)(v72 + 8), v96);
  v52 = *(_QWORD *)v96;
  *(_QWORD *)v96 = 0;
  v4 = v67;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v81 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v73, "%s", v59);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v60 = v79;
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0]);
  v82[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v83[0] = v63;
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v89 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v92);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  sub_20E89B1DC((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CE9C);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "data");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v66, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.TrackingRecoveredEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E89B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E89B164(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_17TrackingRecoveredEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_17TrackingRecoveredEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_17TrackingRecoveredEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_17TrackingRecoveredEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E89B1D0()
{
  return &unk_24C9ACE08;
}

AppleCV3DSchemaTrackingRecoveredEvent *sub_20E89B1DC(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaTrackingRecoveredEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaTrackingRecoveredEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaTrackingRecoveredEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingRecoveredEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaTrackingRecoveredEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingRecoveredEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E89B2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89B310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89B324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89B354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89B368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E89B37C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E89B390(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9ACE28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20E89B3D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9ACE28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E89B3F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__dst[2];
  int64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  const void *v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  void *__p;
  char v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  _BYTE v96[32];
  char v97;
  void *v98[2];
  unint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v93);
  if (**(int **)(v93 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v93 + 72);
  v3 = sub_21021D818(&v93);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)v82);
  sub_20E86A980(v83, (uint64_t)"emitting a tracking initialized event...", 40);
  if ((v91 & 0x10) != 0)
  {
    v9 = v90;
    if (v90 < v87)
    {
      v90 = v87;
      v9 = v87;
    }
    v10 = v86;
    v7 = v9 - (_QWORD)v86;
    if (v9 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v81) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v84;
    v7 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v81 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v81) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v73[0] = &v93;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 2;
  v75 = "unknown file";
  v76 = 227;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  if (v81 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v93 + 16);
  v68 = v93 + 16;
  v69 = v93;
  if (*(char *)(v93 + 39) < 0)
  {
    v14 = *(const char **)(v93 + 16);
    v15 = *(_QWORD *)(v93 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v93 + 39);
  }
  v70 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v96);
    if (v96[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v96;
      unk_254A4A508 = *(_QWORD *)&v96[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v96 = os_log_create(v17, v14);
  v19 = &v96[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v72 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v96[16] = v18;
    *(_QWORD *)&v96[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v96[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v96[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v97 = 1;
  v23 = v98;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v98[1] = (void *)v15;
    v99 = v26 | 0x8000000000000000;
    v98[0] = v23;
    v24 = (const char *)v70;
  }
  else
  {
    HIBYTE(v99) = v15;
    v24 = (const char *)v70;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v100 = 1;
  v27 = objc_retainAutorelease(*(id *)v96);
  if (v100 && SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v97 && (v96[31] & 0x80000000) != 0)
    operator delete(*(void **)&v96[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v96 = 136315138;
    *(_QWORD *)&v96[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v71 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v67 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v95 = v36;
    *((_QWORD *)&v95 + 1) = v40 | 0x8000000000000000;
    v94 = v37;
    goto LABEL_67;
  }
  HIBYTE(v95) = v35;
  v37 = &v94;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v96[8] = v94;
  *(_QWORD *)&v96[16] = v95;
  *(_QWORD *)&v96[23] = *(_QWORD *)((char *)&v95 + 7);
  *(_QWORD *)v96 = off_24C9ABC20;
  v96[31] = HIBYTE(v95);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v96[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v96[24];
  memset(&v96[8], 0, 24);
  nullsub_1(v96);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v69 + 39);
  v51 = v68;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v69 + 16);
    v50 = *(_QWORD *)(v69 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v96 = v49;
  v30 = v71;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v72 + 8) + 40))(*(_QWORD *)(v72 + 8), v96);
  v52 = *(_QWORD *)v96;
  *(_QWORD *)v96 = 0;
  v4 = v67;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v81 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v73, "%s", v59);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v60 = v79;
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0]);
  v82[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v83[0] = v63;
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v89 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v92);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  sub_20E89BF38((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CEE4);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "data");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v66, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.TrackingInitializedEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E89BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E89BEC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_19TrackingInitializedEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_19TrackingInitializedEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_19TrackingInitializedEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_19TrackingInitializedEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E89BF2C()
{
  return &unk_24C9ACE88;
}

AppleCV3DSchemaTrackingInitializedEvent *sub_20E89BF38(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaTrackingInitializedEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaTrackingInitializedEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaTrackingInitializedEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingInitializedEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaTrackingInitializedEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingInitializedEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E89C058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89C06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89C080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89C0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89C0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_20E89C0D4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9ACEA8;
  if (*(char *)(result + 47) < 0)
  {
    operator delete(*(void **)(result + 24));
    return v1;
  }
  return result;
}

void sub_20E89C120(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9ACEA8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x212BC6398);
}

char *sub_20E89C16C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24C9ACEA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  return v2;
}

void sub_20E89C1E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E89C1FC(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a2 = off_24C9ACEA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)result = v5;
  }
  v6 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = v6;
  return result;
}

void sub_20E89C26C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20E89C280(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    __p = v1;
  }
  operator delete(__p);
}

void sub_20E89C2C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  size_t v7;
  void **v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__dst[2];
  int64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  const void *v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  void *__p;
  char v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  _BYTE v96[32];
  char v97;
  void *v98[2];
  unint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_20E8953BC(&v93);
  if (**(int **)(v93 + 56) > 2)
    goto LABEL_107;
  v4 = *(unsigned __int8 *)(v93 + 72);
  v3 = sub_21021D818(&v93);
  v5 = v3;
  if (!v4 && v3 == 0)
    goto LABEL_107;
  sub_20E863438((uint64_t)v82);
  sub_20E86A980(v83, (uint64_t)"emitting a relocalization succeeded event...", 44);
  if ((v91 & 0x10) != 0)
  {
    v9 = v90;
    if (v90 < v87)
    {
      v90 = v87;
      v9 = v87;
    }
    v10 = v86;
    v7 = v9 - (_QWORD)v86;
    if (v9 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v91 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v81) = 0;
      v8 = __dst;
      goto LABEL_19;
    }
    v10 = v84;
    v7 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v8 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v7;
    v81 = v12 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v81) = v7;
  v8 = __dst;
  if (v7)
LABEL_18:
    memmove(v8, v10, v7);
LABEL_19:
  *((_BYTE *)v8 + v7) = 0;
  v73[0] = &v93;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 2;
  v75 = "unknown file";
  v76 = 244;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  if (v81 >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  v14 = (const char *)(v93 + 16);
  v68 = v93 + 16;
  v69 = v93;
  if (*(char *)(v93 + 39) < 0)
  {
    v14 = *(const char **)(v93 + 16);
    v15 = *(_QWORD *)(v93 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v93 + 39);
  }
  v70 = v13;
  v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v96);
    if (v96[24])
    {
      xmmword_254A4A4F8 = *(_OWORD *)v96;
      unk_254A4A508 = *(_QWORD *)&v96[16];
    }
    else
    {
      byte_254A4A50F = 14;
      strcpy((char *)&xmmword_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v17 = (const char *)&xmmword_254A4A4F8;
  else
    v17 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v18 = byte_254A4A50F;
  else
    v18 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)v96 = os_log_create(v17, v14);
  v19 = &v96[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v72 = v5;
  if (v18 >= 0x17)
  {
    v20 = v4;
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&v96[16] = v18;
    *(_QWORD *)&v96[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v96[8] = v19;
    v4 = v20;
    goto LABEL_39;
  }
  v96[31] = v18;
  if (v18)
LABEL_39:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v97 = 1;
  v23 = v98;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v98[1] = (void *)v15;
    v99 = v26 | 0x8000000000000000;
    v98[0] = v23;
    v24 = (const char *)v70;
  }
  else
  {
    HIBYTE(v99) = v15;
    v24 = (const char *)v70;
    if (!v15)
      goto LABEL_48;
  }
  memmove(v23, v14, v15);
LABEL_48:
  *((_BYTE *)v23 + v15) = 0;
  v100 = 1;
  v27 = objc_retainAutorelease(*(id *)v96);
  if (v100 && SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v97 && (v96[31] & 0x80000000) != 0)
    operator delete(*(void **)&v96[8]);

  v28 = sub_21021D650(2u);
  v29 = v27;
  v30 = v29;
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    os_log_type_enabled(v29, v28);
    *(_DWORD *)v96 = 136315138;
    *(_QWORD *)&v96[4] = v24;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
    goto LABEL_93;
  }
  v31 = _os_log_pack_size();
  v71 = v30;
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v67 = v4;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  v35 = strlen(v24);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = operator new(v39 + 1);
    *(_QWORD *)&v95 = v36;
    *((_QWORD *)&v95 + 1) = v40 | 0x8000000000000000;
    v94 = v37;
    goto LABEL_67;
  }
  HIBYTE(v95) = v35;
  v37 = &v94;
  if (v35)
LABEL_67:
    memcpy(v37, v24, v36);
  *((_BYTE *)v37 + v36) = 0;
  *(_QWORD *)&v96[8] = v94;
  *(_QWORD *)&v96[16] = v95;
  *(_QWORD *)&v96[23] = *(_QWORD *)((char *)&v95 + 7);
  *(_QWORD *)v96 = off_24C9ABC20;
  v96[31] = HIBYTE(v95);
  v41 = (std::__shared_weak_count *)operator new(0x38uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
  shared_owners = (char *)&v41[1].__shared_owners_;
  *(_OWORD *)&v41[1].__shared_owners_ = *(_OWORD *)&v96[8];
  v41[2].__vftable = *(std::__shared_weak_count_vtbl **)&v96[24];
  memset(&v96[8], 0, 24);
  nullsub_1(v96);
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
  do
    v45 = __ldxr(v42);
  while (__stxr(v45 + 1, v42));
  do
    v46 = __ldaxr(v42);
  while (__stlxr(v46 - 1, v42));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (SHIBYTE(v41[2].__vftable) < 0)
    shared_owners = (char *)v41[1].__shared_owners_;
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = shared_owners;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v69 + 39);
  v51 = v68;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(_QWORD *)(v69 + 16);
    v50 = *(_QWORD *)(v69 + 24);
  }
  *(_QWORD *)v49 = v32;
  *(_QWORD *)(v49 + 8) = v32;
  *(_QWORD *)(v49 + 16) = v33;
  *(_QWORD *)(v49 + 24) = v41 + 1;
  *(_QWORD *)(v49 + 32) = v41;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = v28;
  *(_QWORD *)v96 = v49;
  v30 = v71;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v72 + 8) + 40))(*(_QWORD *)(v72 + 8), v96);
  v52 = *(_QWORD *)v96;
  *(_QWORD *)v96 = 0;
  v4 = v67;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
  }
LABEL_93:

  if (v4)
  {
    v59 = (const char *)__dst;
    if (v81 < 0)
      v59 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v73, "%s", v59);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v60 = v79;
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0]);
  v82[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v83[0] = v63;
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v89 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  v3 = MEMORY[0x212BC6290](&v92);
LABEL_107:
  v64 = (void *)MEMORY[0x212BC6CE0](v3);
  sub_20E89CE00((uint64_t *)(a1 + 16), a1 + 24, (void (*)(uint64_t))sub_20E87CF2C);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "data");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, const __CFString *, const __CFString *))(*(_QWORD *)v2 + 136))(v2, v66, CFSTR("com.apple.applecv3d"), CFSTR("com.apple.cv3d.RelocalizationSucceededEvent"));

  objc_autoreleasePoolPop(v64);
}

void sub_20E89CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E89CD88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_23RelocalizationSucceededEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_23RelocalizationSucceededEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_23RelocalizationSucceededEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15oasis_analytics18RealOasisAnalytics9EmitEventERKNS1_23RelocalizationSucceededEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E89CDF4()
{
  return &unk_24C9ACF08;
}

AppleCV3DSchemaRelocalizationSucceededEvent *sub_20E89CE00(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  AppleCV3DSchemaRelocalizationSucceededEvent *v6;
  AppleCommonSchemaMetadata *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = objc_alloc_init(AppleCV3DSchemaRelocalizationSucceededEvent);
  v7 = objc_alloc_init(AppleCommonSchemaMetadata);
  -[AppleCV3DSchemaRelocalizationSucceededEvent setMetadata:](v6, "setMetadata:", v7);

  sub_20E8965F4();
  sub_20E891564(&v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaRelocalizationSucceededEvent metadata](v6, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setBootSessionId:", v8);

  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *a1;
  -[AppleCV3DSchemaRelocalizationSucceededEvent metadata](v6, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTimestampSinceBootInNanosecond:", v13);

  a3(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaRelocalizationSucceededEvent setPayload:](v6, "setPayload:", v15);

  return v6;
}

void sub_20E89CF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89CF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89CF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89CF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E89CF8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_20E89CF9C@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *__p;
  void *v14;
  char *v15;

  v4 = (char *)operator new(0x9C0uLL);
  v5 = v4 + 2496;
  __p = v4;
  v15 = v4 + 2496;
  memcpy(v4, a1, 0x9C0uLL);
  v14 = v5;
  sub_210231510((int **)&__p, &v11);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v9 = &off_24CA1F4F8;
  v10 = v12;
  if (*((_QWORD *)&v12 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20E89D0A8((_QWORD *)a2, (uint64_t)&v9);
  *(_QWORD *)(a2 + 2504) = &off_24CA1F4F8;
  *(_OWORD *)(a2 + 2512) = v10;
  v10 = 0uLL;
  sub_210231620((uint64_t)&v9);
  return sub_210231620((uint64_t)&v11);
}

void sub_20E89D070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_210231620((uint64_t)va);
  sub_210231620((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20E89D08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20E89D0A8(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  void *result;
  uint64_t v6;
  std::runtime_error *exception;
  _DWORD __src[624];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not a seed sequence");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_20E89D1AC(v3, __src, &v9);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v6 = 4;
    while (!*(_DWORD *)((char *)a1 + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

void sub_20E89D194(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20E89D1AC(unint64_t result, _DWORD *__b, _BYTE *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;

  if (__b == (_DWORD *)a3)
    return result;
  v4 = (int **)result;
  v5 = a3 - (_BYTE *)__b;
  if (a3 - (_BYTE *)__b >= 1)
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = v5 >> 2;
  v8 = *v4;
  v7 = v4[1];
  v9 = (char *)v7 - (char *)*v4;
  v10 = v9 >> 2;
  v11 = 11;
  v12 = 7;
  v13 = 5;
  v14 = 3;
  v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18)
    v14 = v15 >> 1;
  if ((unint64_t)v5 <= 0x98)
    v13 = v14;
  if ((unint64_t)v5 <= 0x10C)
    v12 = v13;
  if ((unint64_t)v5 <= 0x9B8)
    v11 = v12;
  v16 = (unint64_t)v9 >> 2;
  v17 = (v6 - v11) >> 1;
  v18 = v17 + v11;
  v19 = v10 + 1;
  if (v10 + 1 > v6)
    v20 = v10 + 1;
  else
    v20 = v5 >> 2;
  v21 = __b[v17];
  v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  v24 = v17 % v6;
  result = v18 / v6;
  v25 = v18 % v6;
  if (v7 == v8)
  {
    v26 = 0;
    if (v19 >= v6)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = 2;
    if (v19 > 2)
      v27 = v10 + 1;
    result = v27 - 1;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      v28 = __b[v24];
      v29 = __b[v26] ^ __b[v15] ^ v28;
      v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      v32 = *v8++;
      v31 = v32;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6)
      goto LABEL_49;
  }
  v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6)
      v26 = 0;
    else
      ++v26;
    if (v15 + 1 == v6)
      v15 = 0;
    else
      ++v15;
    if (v24 + 1 == v6)
      v24 = 0;
    else
      ++v24;
    v35 = __b[v24];
    if (v25 + 1 == v6)
      v25 = 0;
    else
      ++v25;
    v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    v37 = v36 + v26;
    result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v39 = __b[v24];
      v40 = v39 + __b[v26] + __b[v15];
      v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      v42 = v41 - v26;
      result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

void sub_20E89D498(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ACF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E89D4A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ACF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E89D4D8(uint64_t a1)
{
  return sub_210231620(a1 + 2528);
}

void sub_20E89D4E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E89D50C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E89D524(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3vio15oasis_analytics15IOasisAnalyticsEE27__shared_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3vio15oasis_analytics15IOasisAnalyticsEE27__shared_ptr_default"
                                "_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3vio15oasis_analytics15IOasisAnalyticsEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3vio15oasis_analytics15IOasisAnalyticsEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E89D594()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_20E89D5A4()
{
  JUMPOUT(0x212BC6398);
}

void sub_20E89D5BC(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_20E89D5CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_20E89D5E4()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_20E89D5EC()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

_QWORD *sub_20E89D600(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;

  *a1 = &off_24C9ACFC8;
  v6 = operator new();
  sub_20E8A0C4C(v6, a2, a3);
  a1[1] = v6;
  a1[2] = sub_20E8A26A4;
  return a1;
}

void sub_20E89D670(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10E0C404461EDD8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E89D694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint32x2_t *v16;
  float32x4_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int16 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  __int128 v79;
  uint64_t (**v80)();
  __int128 v81;
  _BYTE v82[24];
  _OWORD v83[2];
  uint64_t (**v84)();
  __int128 v85;
  _QWORD v86[3];
  _QWORD v87[3];
  unint64_t v88[35];
  std::__shared_weak_count *v89;
  char v90;
  _QWORD v91[2];
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t (**v97)();
  _BYTE v98[72];
  float v99;
  uint32x2_t v100;
  uint64_t (**v101)();
  _BYTE v102[56];
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106[35];
  std::__shared_weak_count *v107;
  char v108;
  uint64_t (**v109)();
  __int128 v110;
  _BYTE v111[32];
  __int128 v112;
  float v113;

  if (*(_BYTE *)(a2 + 184))
  {
    v6 = *(double *)(a2 + 40);
    v7 = *(double *)(a2 + 56);
    v8 = *(double *)(a2 + 72);
    v9 = *(double *)(a2 + 80);
    v10 = sub_20EA8F258(*(_QWORD *)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2736));
    sub_20E89E038((uint64_t)v106, (uint64_t)v10);
    v11 = v106[1];
    v12 = *(double *)(*(_QWORD *)(a1 + 8) + 2768);
    *(float *)&v13 = v6 * v12;
    *(float *)&v12 = v8 * v12;
    *(float *)&v14 = v7;
    *(float *)&v15 = v9;
    v109 = (uint64_t (**)())__PAIR64__(LODWORD(v12), v13);
    *(_QWORD *)&v110 = __PAIR64__(v15, v14);
    sub_20E89E6D4(&v97, (int *)&v109);
    *(_OWORD *)&v102[8] = *(_OWORD *)v98;
    *(_OWORD *)&v102[24] = *(_OWORD *)&v98[16];
    *(_OWORD *)&v102[40] = *(_OWORD *)&v98[32];
    v103 = *(_OWORD *)&v98[48];
    v104 = *(_DWORD *)&v98[64];
    v105 = v11;
    *(_QWORD *)v102 = &off_24C9AD020;
    v101 = &off_24C9AD150;
    nullsub_1(&v97);
    v16 = *(uint32x2_t **)(a1 + 8);
    *(float32x2_t *)v17.f32 = vdiv_f32(vcvt_f32_u32(v16[343]), vcvt_f32_u32((uint32x2_t)v105));
    v17.i64[1] = v17.i64[0];
    *(float32x4_t *)v82 = vmulq_f32(v17, *(float32x4_t *)&v102[8]);
    v18 = sub_20E89E6D4(&v109, (int *)v82);
    *(_QWORD *)v98 = &off_24C9AD020;
    *(_OWORD *)&v98[8] = v110;
    *(_OWORD *)&v98[24] = *(_OWORD *)v111;
    *(_OWORD *)&v98[40] = *(_OWORD *)&v111[16];
    *(_OWORD *)&v98[56] = v112;
    v99 = v113;
    v100 = v16[343];
    nullsub_1(v18);
    v97 = &off_24C9AD150;
    v19 = *(_QWORD *)(a1 + 8);
    *(float64x2_t *)(v19 + 2664) = vcvtq_f64_f32(*(float32x2_t *)&v98[40]);
    *(float64x2_t *)(v19 + 2680) = vcvtq_f64_f32(*(float32x2_t *)&v98[48]);
    *(float64x2_t *)(v19 + 2696) = vcvtq_f64_f32(*(float32x2_t *)&v98[56]);
    *(float64x2_t *)(v19 + 2712) = vcvtq_f64_f32(*(float32x2_t *)&v98[64]);
    *(double *)(v19 + 2728) = v99;
    sub_20E8A62F8((uint64_t)&v97, (uint64_t)&v95);
    sub_20E8A6958(v19 + 2432, &v95);
    v20 = v96;
    if (v96)
    {
      p_shared_owners = (unint64_t *)&v96->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v97 = &off_24C9AD1C0;
    nullsub_1(v98);
    nullsub_1(&v97);
    v101 = &off_24C9AD1C0;
    nullsub_1(v102);
    nullsub_1(&v101);
    sub_20E86A6B8(v106);
  }
  sub_20E8A6820(*(_QWORD *)(a1 + 8) + 2432, (double *)(a2 + 192), (float64x2_t *)(a2 + 264), (uint64_t)v106, *(double *)(a2 + 24));
  v23 = *(_QWORD *)(a1 + 8);
  sub_20E8A049C(v88, v106);
  v88[34] = v106[34];
  v89 = v107;
  if (v107)
  {
    v24 = (unint64_t *)&v107->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v90 = v108;
  sub_20E8A4DF4(v23 + 2448, v88, v91);
  v26 = v89;
  if (v89)
  {
    v27 = (unint64_t *)&v89->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_20E86177C(v88);
  v87[0] = &off_24CA1A9A0;
  v87[1] = v91[1];
  v87[2] = v92;
  if (v92)
  {
    v29 = (unint64_t *)(v92 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v86[0] = &off_24CA1A9A0;
  v86[1] = v93[1];
  v86[2] = v94;
  if (v94)
  {
    v31 = (unint64_t *)(v94 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  sub_21015D600((uint64_t)v87, v82);
  v84 = &off_24CA1A9A0;
  v85 = *(_OWORD *)&v82[8];
  *(_QWORD *)&v82[8] = 0;
  *(_QWORD *)&v82[16] = 0;
  sub_210148DBC((uint64_t)&v84, (uint64_t)&v101);
  v109 = &off_24C9AD200;
  v110 = *(_OWORD *)v102;
  *(_QWORD *)&v102[8] = 0;
  *(_OWORD *)v111 = *(_OWORD *)&v102[16];
  *(_OWORD *)&v111[14] = *(_OWORD *)&v102[30];
  *(_QWORD *)v102 = 0;
  v101 = &off_24C9AD200;
  nullsub_1(&v102[16]);
  v33 = *(std::__shared_weak_count **)&v102[8];
  if (*(_QWORD *)&v102[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&v102[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  nullsub_1(&v101);
  v97 = &off_24C9AD270;
  sub_20E8A2714((uint64_t)&v109, (uint64_t)v98);
  v109 = &off_24C9AD200;
  nullsub_1(v111);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  nullsub_1(&v109);
  sub_21015D41C(&v84);
  sub_21015CC7C(v82);
  sub_21015D600((uint64_t)v86, &v78);
  v81 = v79;
  v79 = 0uLL;
  v80 = &off_24CA1A9A0;
  sub_210148DBC((uint64_t)&v80, (uint64_t)&v101);
  *(_QWORD *)v82 = &off_24C9AD200;
  *(_OWORD *)&v82[8] = *(_OWORD *)v102;
  *(_QWORD *)&v102[8] = 0;
  v83[0] = *(_OWORD *)&v102[16];
  *(_OWORD *)((char *)v83 + 14) = *(_OWORD *)&v102[30];
  *(_QWORD *)v102 = 0;
  v101 = &off_24C9AD200;
  nullsub_1(&v102[16]);
  v39 = *(std::__shared_weak_count **)&v102[8];
  if (*(_QWORD *)&v102[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v102[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  nullsub_1(&v101);
  v109 = &off_24C9AD270;
  sub_20E8A2714((uint64_t)v82, (uint64_t)&v110);
  *(_QWORD *)v82 = &off_24C9AD200;
  nullsub_1(v83);
  v42 = *(std::__shared_weak_count **)&v82[16];
  if (*(_QWORD *)&v82[16])
  {
    v43 = (unint64_t *)(*(_QWORD *)&v82[16] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  nullsub_1(v82);
  sub_21015D41C(&v80);
  sub_21015CC7C(&v78);
  *(_QWORD *)a3 = &off_24C9AD270;
  v45 = *(_QWORD *)v98;
  v46 = *(std::__shared_weak_count **)&v98[8];
  if (*(_QWORD *)&v98[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v49 = *(_WORD *)&v98[40];
    do
      v50 = __ldxr(v47);
    while (__stxr(v50 + 1, v47));
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v98[16];
    *(_QWORD *)(a3 + 40) = *(_QWORD *)&v98[32];
    do
      v51 = __ldxr(v47);
    while (__stxr(v51 + 1, v47));
    *(_QWORD *)(a3 + 8) = v45;
    *(_QWORD *)(a3 + 16) = v46;
    *(_WORD *)(a3 + 48) = v49;
    do
      v52 = __ldaxr(v47);
    while (__stlxr(v52 - 1, v47));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    do
      v53 = __ldaxr(v47);
    while (__stlxr(v53 - 1, v47));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    *(_QWORD *)(a3 + 56) = &off_24C9AD270;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    v54 = v110;
    if (*((_QWORD *)&v110 + 1))
      goto LABEL_57;
LABEL_71:
    v64 = *(_WORD *)&v111[24];
    *(_QWORD *)(a3 + 64) = v54;
    *(_QWORD *)(a3 + 72) = 0;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)v111;
    *(_QWORD *)(a3 + 96) = *(_QWORD *)&v111[16];
    *(_WORD *)(a3 + 104) = v64;
    goto LABEL_72;
  }
  v63 = *(_WORD *)&v98[40];
  *(_QWORD *)(a3 + 8) = *(_QWORD *)v98;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v98[16];
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v98[32];
  *(_WORD *)(a3 + 48) = v63;
  *(_QWORD *)(a3 + 56) = &off_24C9AD270;
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  v54 = v110;
  if (!*((_QWORD *)&v110 + 1))
    goto LABEL_71;
LABEL_57:
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
  v58 = *(_WORD *)&v111[24];
  do
    v59 = __ldxr(v56);
  while (__stxr(v59 + 1, v56));
  *(_OWORD *)(a3 + 80) = *(_OWORD *)v111;
  *(_QWORD *)(a3 + 96) = *(_QWORD *)&v111[16];
  do
    v60 = __ldxr(v56);
  while (__stxr(v60 + 1, v56));
  *(_QWORD *)(a3 + 64) = v54;
  *(_QWORD *)(a3 + 72) = v55;
  *(_WORD *)(a3 + 104) = v58;
  do
    v61 = __ldaxr(v56);
  while (__stlxr(v61 - 1, v56));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  do
    v62 = __ldaxr(v56);
  while (__stlxr(v62 - 1, v56));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_72:
  v65 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a3 + 176) = *(_QWORD *)(v65 + 2728);
  v66 = *(_OWORD *)(v65 + 2712);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v65 + 2696);
  *(_OWORD *)(a3 + 160) = v66;
  v67 = *(_OWORD *)(v65 + 2680);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(v65 + 2664);
  *(_OWORD *)(a3 + 128) = v67;
  v109 = &off_24C9AD270;
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  nullsub_1(&v109);
  v97 = &off_24C9AD270;
  v71 = *(std::__shared_weak_count **)&v98[8];
  if (*(_QWORD *)&v98[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  nullsub_1(&v97);
  sub_21015D41C(v86);
  sub_21015D41C(v87);
  sub_21015D41C(v93);
  sub_21015D41C(v91);
  v74 = v107;
  if (v107)
  {
    v75 = (unint64_t *)&v107->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return sub_20E86177C(v106);
}

void sub_20E89DEEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E86665C((uint64_t)&STACK[0x208]);
  STACK[0x220] = (unint64_t)&off_24C9AD1C0;
  nullsub_1(v2);
  nullsub_1(&STACK[0x220]);
  STACK[0x280] = (unint64_t)&off_24C9AD1C0;
  nullsub_1(v1);
  nullsub_1(&STACK[0x280]);
  sub_20E86A6B8(&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_20E89DF50(_Unwind_Exception *a1)
{
  sub_20E86A6B8(&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_20E89DF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  _QWORD *v68;
  uint64_t v69;

  nullsub_1(v69 - 208);
  sub_20E89E1C8(&a15);
  sub_21015D41C(&a12);
  sub_21015CC7C(&a9);
  sub_20E89E240(&STACK[0x220]);
  sub_21015D41C(&a25);
  sub_21015D41C(&a28);
  sub_21015D41C(v68);
  sub_21015D41C(&a68);
  sub_20E861714(&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_20E89E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20E861714(&a31);
  sub_20E861714(&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_20E89E024(_Unwind_Exception *a1)
{
  sub_20E861714(&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89E038(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a2 + 8);
  v5 = (_OWORD *)sub_20E89E538(a1 + 8, (uint64_t *)(a2 + 8));
  v6 = v4[19];
  v5[18] = v4[18];
  v5[19] = v6;
  v7 = v4[20];
  v8 = v4[21];
  v9 = v4[23];
  v5[22] = v4[22];
  v5[23] = v9;
  v5[20] = v7;
  v5[21] = v8;
  v10 = v4[24];
  v11 = v4[25];
  v12 = v4[27];
  v5[26] = v4[26];
  v5[27] = v12;
  v5[24] = v10;
  v5[25] = v11;
  v13 = v4[28];
  v14 = v4[29];
  v15 = v4[30];
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  v5[29] = v14;
  v5[30] = v15;
  v5[28] = v13;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  v16 = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 520) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  v19 = (_OWORD *)sub_20E89E538(a1 + 536, (uint64_t *)(a2 + 536));
  v20 = *(_OWORD *)(a2 + 840);
  v19[18] = *(_OWORD *)(a2 + 824);
  v19[19] = v20;
  v21 = *(_OWORD *)(a2 + 856);
  v22 = *(_OWORD *)(a2 + 872);
  v23 = *(_OWORD *)(a2 + 904);
  v19[22] = *(_OWORD *)(a2 + 888);
  v19[23] = v23;
  v19[20] = v21;
  v19[21] = v22;
  v24 = *(_OWORD *)(a2 + 920);
  v25 = *(_OWORD *)(a2 + 936);
  v26 = *(_OWORD *)(a2 + 968);
  v19[26] = *(_OWORD *)(a2 + 952);
  v19[27] = v26;
  v19[24] = v24;
  v19[25] = v25;
  v27 = *(_OWORD *)(a2 + 984);
  v28 = *(_OWORD *)(a2 + 1000);
  v29 = *(_OWORD *)(a2 + 1016);
  *(_DWORD *)(a1 + 1032) = *(_DWORD *)(a2 + 1032);
  v19[29] = v28;
  v19[30] = v29;
  v19[28] = v27;
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  v30 = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a1 + 1048) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1065) = *(_OWORD *)(a2 + 1065);
  *(_OWORD *)(a1 + 1056) = v33;
  return a1;
}

void sub_20E89E178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[65];
  if (v3)
    sub_21023E1F4(v3);
  sub_21023E198(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89E198(_QWORD *a1)
{
  *a1 = &off_24C9AD1C0;
  nullsub_1(a1 + 1);
  return nullsub_1(a1);
}

uint64_t sub_20E89E1C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9AD200;
  nullsub_1(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_1(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_1(a1);
}

uint64_t sub_20E89E240(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9AD270;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_1(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_1(a1);
}

void sub_20E89E2B4(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[35];
  std::__shared_weak_count *v20;
  char v21;
  char v22;
  float64x2_t v23;
  double v24;
  double v25[9];

  if (*(_BYTE *)(a2 + 376))
  {
    v3 = *(float *)(a2 + 316);
    v4 = *(float *)(a2 + 320);
    v5 = *(float *)(a2 + 332);
    v6 = *(float *)(a2 + 336);
    v7 = *(float *)(a2 + 344);
    v8 = *(float *)(a2 + 348);
    v9 = *(float *)(a2 + 352);
    v10 = *(float *)(a2 + 368);
    v11 = *(float *)(a2 + 328);
    v25[0] = *(float *)(a2 + 312);
    v25[1] = v11;
    v25[2] = v7;
    v25[3] = v3;
    v25[4] = v5;
    v25[5] = v8;
    v25[6] = v4;
    v25[7] = v6;
    v25[8] = v9;
    v23 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 360));
    v24 = v10;
    LOBYTE(v19[0]) = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 304))
    {
      sub_20E8A049C(v19, (uint64_t *)(a2 + 8));
      v13 = *(std::__shared_weak_count **)(a2 + 288);
      v19[34] = *(_QWORD *)(a2 + 280);
      v20 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v21 = *(_BYTE *)(a2 + 296);
      v22 = 1;
      sub_20E8A66E4(*(_QWORD *)(a1 + 8) + 2432, (uint64_t)v19, v25, &v23, *(double *)a2);
      if (v22)
      {
        v16 = v20;
        if (v20)
        {
          v17 = (unint64_t *)&v20->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        sub_20E86177C(v19);
      }
    }
  }
}

void sub_20E89E410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89E440((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E89E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a46)
    sub_21023E23C(&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E89E440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 296))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 280);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E86177C((_QWORD *)a1);
  }
  return a1;
}

uint64_t sub_20E89E4A8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9ACFC8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_20E89E4E8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9ACFC8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E89E538(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_BYTE *)a2[2];
  v5 = (_BYTE *)a2[3];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 24) = v9;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = (_BYTE *)a2[5];
  v10 = (_BYTE *)a2[6];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 48) = v14;
  }
  v15 = *((_OWORD *)a2 + 4);
  v16 = *((_OWORD *)a2 + 5);
  v17 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  v18 = *((_OWORD *)a2 + 8);
  v19 = *((_OWORD *)a2 + 9);
  v20 = *((_OWORD *)a2 + 10);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v20;
  *(_OWORD *)(a1 + 128) = v18;
  v21 = a2[24];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v24;
  v25 = *(_OWORD *)(a2 + 29);
  v26 = *(_OWORD *)(a2 + 31);
  v27 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v27;
  *(_OWORD *)(a1 + 248) = v26;
  *(_OWORD *)(a1 + 232) = v25;
  return a1;
}

void sub_20E89E69C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E89E6D4(_QWORD *a1, int *a2)
{
  float *v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  std::logic_error *exception;

  *a1 = &off_24C9AD020;
  a1[1] = *(_QWORD *)a2;
  v3 = (float *)(a1 + 1);
  *((_QWORD *)v3 + 1) = *((_QWORD *)a2 + 1);
  v4 = *a2;
  v5 = *((float *)a2 + 1);
  v6 = 1.0 / *(float *)a2;
  v7 = *((float *)a2 + 2);
  v8 = *((float *)a2 + 3);
  v3[4] = v6;
  v3[5] = 1.0 / v5;
  v3[6] = -(float)(v7 * v6);
  v3[7] = -(float)(v8 * (float)(1.0 / v5));
  *((_DWORD *)v3 + 8) = v4;
  *((_QWORD *)v3 + 5) = 0;
  v3[9] = 0.0;
  v3[12] = v5;
  v3[13] = 0.0;
  v3[14] = v7;
  v3[15] = v8;
  v3[16] = 1.0;
  if (!sub_20E89E7D8(v3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PinholeModel parameters invalid");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_20E89E7A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_20E89E7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20E89E7D8(float *a1)
{
  int v1;
  _BYTE v3[16];
  void *__p;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;

  sub_20E89E8DC(a1, (uint64_t)v3);
  v1 = v13;
  if (v13)
  {
    sub_20E89EDB0((uint64_t)v3);
    if (v13)
      return v1 != 0;
  }
  if (!v12)
    return v1 != 0;
  if (v11)
  {
    if ((v10 & 0x80000000) == 0)
    {
      if ((v8 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_12:
      operator delete(v7);
      if (!v6)
        return v1 != 0;
      goto LABEL_9;
    }
    operator delete(v9);
    if (v8 < 0)
      goto LABEL_12;
  }
LABEL_8:
  if (!v6)
    return v1 != 0;
LABEL_9:
  if ((v5 & 0x80000000) == 0)
    return v1 != 0;
  operator delete(__p);
  return v1 != 0;
}

void sub_20E89E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89ED1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E89E8A8(uint64_t a1)
{
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E89E8CC()
{
  return 1;
}

uint64_t sub_20E89E8D4()
{
  return 11;
}

void sub_20E89E8DC(float *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  char v11;
  void *__dst[2];
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;

  v4 = ((_DWORD)a1[2] & 0x7FFFFFFFu) < 0x7F800000 && ((_DWORD)a1[3] & 0x7FFFFFFFu) < 0x7F800000;
  v5 = ((_DWORD)a1[1] & 0x7FFFFFFFu) < 0x7F800000 && (*(_DWORD *)a1 & 0x7FFFFFFFu) < 0x7F800000;
  if (!v5 || !v4)
  {
    sub_20E89F6D4(&v21, "focal length and principal point must be finite");
    v29 = 1;
    sub_20E89F2F8(0x16u, &v21, (uint64_t)&v30);
    *(_OWORD *)a2 = v30;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!v40)
    {
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_43;
    }
    *(_BYTE *)(a2 + 40) = 0;
    if (v33)
    {
      *(_OWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 32) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!v39)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (!v33)
        goto LABEL_43;
      goto LABEL_41;
    }
    v8 = v36;
    *(_QWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 48) = v34;
    v35 = 0;
    v34 = 0uLL;
    *(_QWORD *)(a2 + 72) = v8;
    *(_OWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 96) = v38;
    v38 = 0;
    v37 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_32:
        if (!v33)
          goto LABEL_43;
        goto LABEL_41;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete((void *)v34);
    if (!v33)
      goto LABEL_43;
LABEL_41:
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
LABEL_43:
    if (!v29)
      return;
    if (v28)
    {
      if ((v27 & 0x80000000) == 0)
      {
        if ((v25 & 0x80000000) == 0)
          goto LABEL_47;
LABEL_51:
        operator delete(v24);
        if (!v23)
          return;
        goto LABEL_48;
      }
      operator delete(v26);
      if (v25 < 0)
        goto LABEL_51;
    }
LABEL_47:
    if (!v23)
      return;
LABEL_48:
    if (v22 < 0)
      operator delete((void *)v21);
    return;
  }
  if (*a1 >= 0.000001 && a1[1] >= 0.000001)
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v9 = 897988541;
  sub_20E89F4B8("focal length must be positive (>= ", (float *)&v9, (uint64_t)")");
  sub_21023491C(__dst, &v10);
  v20 = 1;
  sub_20E89F2F8(0x16u, (__int128 *)__dst, (uint64_t)&v30);
  *(_OWORD *)a2 = v30;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v40)
  {
    *(_BYTE *)(a2 + 40) = 0;
    if (v33)
    {
      *(_OWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 32) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!v39)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (!v33)
        goto LABEL_59;
      goto LABEL_57;
    }
    v7 = v36;
    *(_QWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 48) = v34;
    v35 = 0;
    v34 = 0uLL;
    *(_QWORD *)(a2 + 72) = v7;
    *(_OWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 96) = v38;
    v38 = 0;
    v37 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_24:
        if (!v33)
          goto LABEL_59;
LABEL_57:
        if (SHIBYTE(v32) < 0)
          operator delete((void *)v31);
        goto LABEL_59;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete((void *)v34);
    if (v33)
      goto LABEL_57;
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
LABEL_59:
  if (v20)
  {
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    if (v14 && v13 < 0)
      operator delete(__dst[0]);
  }
  if (v11 < 0)
    operator delete((void *)v10);
}

void sub_20E89ECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_20E89F09C((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E89ED1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20E89EDB0(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20E89EFE4(v4, v1 + 1);
    sub_20E89EE70((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD088, (void (*)(void *))sub_20E89EEC0);
  }
  return result;
}

void sub_20E89EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89EF58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E89EE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20E89EF58((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20E89EE5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89EE70(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_24C9AD0B0;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_20E89EFE4((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_20E89EEAC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E89EEC0(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C9AD0B0;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

uint64_t sub_20E89EF58(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_BYTE *sub_20E89EFE4(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_20E89F128(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_20E89F06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_20E89F09C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89F09C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

char *sub_20E89F128(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_20E860C04(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_20E89F1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_20E89F1F8(v1);
    _Unwind_Resume(a1);
  }
  sub_20E89F1F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89F1F8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20E89F258(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C9AD0B0;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[6].__vftable))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
LABEL_10:
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

void sub_20E89F2F8(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  char v24;
  char v25;

  sub_20E89EFE4(v6, a2);
  sub_20E89F600((uint64_t)&v15, a1, (__int128 *)v6);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
    goto LABEL_15;
  *(_BYTE *)(a3 + 40) = 0;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    v16 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v24)
  {
    *(_BYTE *)(a3 + 112) = 1;
    if (!v18)
      goto LABEL_15;
    goto LABEL_13;
  }
  v5 = v21;
  *(_QWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 48) = v19;
  v19 = 0uLL;
  *(_QWORD *)(a3 + 72) = v5;
  *(_OWORD *)(a3 + 80) = __p;
  *(_QWORD *)(a3 + 96) = v23;
  v23 = 0;
  v20 = 0;
  __p = 0uLL;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_7:
      if (!v18)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)v19);
  if (!v18)
    goto LABEL_15;
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
LABEL_15:
  if (!v14)
    return;
  if (!v13)
    goto LABEL_19;
  if (v12 < 0)
  {
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_24;
LABEL_19:
    if (!v8)
      return;
    goto LABEL_20;
  }
  if ((v10 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_24:
  operator delete(v9);
  if (!v8)
    return;
LABEL_20:
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_20E89F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89F09C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89F4B8(char *__s, float *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_20E89FAA8(v7, __s);
  sub_20E89F7C4((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_20E877AB8();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AD110[v8])(&v10, v7);
  if (v8 == -1)
    sub_20E877AB8();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9AD128[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9AD0C8[v8])(v9, v7);
  return result;
}

void sub_20E89F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89F5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89F5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E89F5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E89F600(uint64_t a1, unsigned int a2, __int128 *a3)
{
  const std::error_category *v6;
  void *__p[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;

  v6 = std::generic_category();
  sub_20E89EFE4(__p, a3);
  sub_210235058(a1, a2, (uint64_t)v6, (__int128 *)__p);
  if (!v16)
    return a1;
  if (!v15)
    goto LABEL_5;
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v10)
        return a1;
      goto LABEL_6;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v11);
  if (!v10)
    return a1;
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20E89F6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89F09C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E89F6D4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_21023491C(a1, &__dst);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_20E89F7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E89F7C4(uint64_t a1, uint64_t a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_20E877AB8();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtof((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))off_24C9AD0E0[v10])(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_20E877AB8();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24C9AD0F8[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_20E89FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20E89FAA8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AD0C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void **sub_20E89FB98(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20E89FC08@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_20E860B7C();
    }
LABEL_20:
    sub_20E89FD0C();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

void sub_20E89FD0C()
{
  sub_20E89FD20("basic_string");
}

void sub_20E89FD20(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20E89FD70(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
}

void sub_20E89FD5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20E89FD70(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_DWORD *sub_20E89FD94(_DWORD ***a1)
{
  return sub_20E89FDB0(**a1, (char *)(*a1)[1]);
}

void sub_20E89FDA0(uint64_t a1, uint64_t a2)
{
  sub_20E89FEA0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E89FDB0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AD0C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E89FEA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9AD0C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E8A0054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E8A0098(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E8A0190((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E8A0188(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E8A0190(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E8A03A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A03BC(_QWORD *a1)
{
  *a1 = &off_24C9AD1C0;
  nullsub_1(a1 + 1);
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A0400()
{
  return 0;
}

uint64_t sub_20E8A0408()
{
  return 1;
}

uint64_t sub_20E8A0410()
{
  return 11;
}

uint64_t sub_20E8A0418(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_20E8A0420(_QWORD *a1)
{
  *a1 = &off_24C9AD1C0;
  nullsub_1(a1 + 1);
  return nullsub_1(a1);
}

void sub_20E8A0450(_QWORD *a1)
{
  *a1 = &off_24C9AD1C0;
  nullsub_1(a1 + 1);
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A0494()
{
  return 0;
}

_QWORD *sub_20E8A049C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  size_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  _BYTE *v46;
  int64_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  _BYTE *v51;
  int64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  char *v58;
  char *v59;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    v9 = &v8[16 * (v7 >> 4)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    a1[4] = v13;
    a1[5] = v13;
    v14 = &v13[16 * (v12 >> 4)];
    a1[6] = v14;
    memcpy(v13, v11, v12);
    a1[5] = v14;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  v16 = (_BYTE *)a2[7];
  v15 = (_BYTE *)a2[8];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    v19 = &v18[16 * (v17 >> 4)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  v21 = (_BYTE *)a2[10];
  v20 = (_BYTE *)a2[11];
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v23 = (char *)operator new(v20 - v21);
    a1[10] = v23;
    a1[11] = v23;
    v24 = &v23[v22];
    a1[12] = &v23[v22];
    memcpy(v23, v21, v22);
    a1[11] = v24;
  }
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v26 = (_BYTE *)a2[13];
  v25 = (_BYTE *)a2[14];
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if ((v27 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v28 = (char *)operator new(v25 - v26);
    a1[13] = v28;
    a1[14] = v28;
    v29 = &v28[v27];
    a1[15] = &v28[v27];
    memcpy(v28, v26, v27);
    a1[14] = v29;
  }
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  v31 = (_BYTE *)a2[16];
  v30 = (_BYTE *)a2[17];
  v32 = v30 - v31;
  if (v30 != v31)
  {
    if ((v32 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v33 = (char *)operator new(v30 - v31);
    a1[16] = v33;
    a1[17] = v33;
    v34 = &v33[v32];
    a1[18] = &v33[v32];
    memcpy(v33, v31, v32);
    a1[17] = v34;
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  v36 = (_BYTE *)a2[19];
  v35 = (_BYTE *)a2[20];
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0)
      sub_20E867F44();
    v38 = (char *)operator new(v35 - v36);
    a1[19] = v38;
    a1[20] = v38;
    v39 = &v38[4 * (v37 >> 2)];
    a1[21] = v39;
    memcpy(v38, v36, v37);
    a1[20] = v39;
  }
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  v41 = (_BYTE *)a2[22];
  v40 = (_BYTE *)a2[23];
  v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0)
      sub_20E867F44();
    v43 = (char *)operator new(v40 - v41);
    a1[22] = v43;
    a1[23] = v43;
    v44 = &v43[4 * (v42 >> 2)];
    a1[24] = v44;
    memcpy(v43, v41, v42);
    a1[23] = v44;
  }
  a1[25] = 0;
  a1[26] = 0;
  a1[27] = 0;
  v46 = (_BYTE *)a2[25];
  v45 = (_BYTE *)a2[26];
  v47 = v45 - v46;
  if (v45 != v46)
  {
    if (v47 < 0)
      sub_20E867F44();
    v48 = (char *)operator new(v45 - v46);
    a1[25] = v48;
    a1[26] = v48;
    v49 = &v48[4 * (v47 >> 2)];
    a1[27] = v49;
    memcpy(v48, v46, v47);
    a1[26] = v49;
  }
  a1[28] = 0;
  a1[29] = 0;
  a1[30] = 0;
  v51 = (_BYTE *)a2[28];
  v50 = (_BYTE *)a2[29];
  v52 = v50 - v51;
  if (v50 != v51)
  {
    if (v52 < 0)
      sub_20E867F44();
    v53 = (char *)operator new(v50 - v51);
    a1[28] = v53;
    a1[29] = v53;
    v54 = &v53[4 * (v52 >> 2)];
    a1[30] = v54;
    memcpy(v53, v51, v52);
    a1[29] = v54;
  }
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = 0;
  v56 = (_BYTE *)a2[31];
  v55 = (_BYTE *)a2[32];
  v57 = v55 - v56;
  if (v55 != v56)
  {
    if (v57 < 0)
      sub_20E867F44();
    v58 = (char *)operator new(v55 - v56);
    a1[31] = v58;
    a1[32] = v58;
    v59 = &v58[4 * (v57 >> 2)];
    a1[33] = v59;
    memcpy(v58, v56, v57);
    a1[32] = v59;
  }
  return a1;
}

void sub_20E8A0868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  void **v14;
  void **v15;
  void **v16;
  _QWORD *v17;
  void **v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v22 = *v14;
  if (*v14)
  {
    v17[32] = v22;
    operator delete(v22);
    v23 = *v16;
    if (!*v16)
    {
LABEL_3:
      v24 = *v15;
      if (!*v15)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else
  {
    v23 = *v16;
    if (!*v16)
      goto LABEL_3;
  }
  v17[29] = v23;
  operator delete(v23);
  v24 = *v15;
  if (!*v15)
  {
LABEL_4:
    v25 = *v20;
    if (!*v20)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  v17[26] = v24;
  operator delete(v24);
  v25 = *v20;
  if (!*v20)
  {
LABEL_5:
    v26 = *v19;
    if (!*v19)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  v17[23] = v25;
  operator delete(v25);
  v26 = *v19;
  if (!*v19)
  {
LABEL_6:
    v27 = *v18;
    if (!*v18)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  v17[20] = v26;
  operator delete(v26);
  v27 = *v18;
  if (!*v18)
  {
LABEL_7:
    v28 = *a10;
    if (!*a10)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_23:
  v17[17] = v27;
  operator delete(v27);
  v28 = *a10;
  if (!*a10)
  {
LABEL_9:
    v29 = *a11;
    if (*a11)
    {
      v17[11] = v29;
      operator delete(v29);
    }
    v30 = *a12;
    if (*a12)
    {
      v17[8] = v30;
      operator delete(v30);
    }
    v31 = *a13;
    if (*a13)
    {
      v17[5] = v31;
      operator delete(v31);
    }
    v32 = *a14;
    if (*a14)
    {
      v17[2] = v32;
      operator delete(v32);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v17[14] = v28;
  operator delete(v28);
  goto LABEL_9;
}

void sub_20E8A09C0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E8A08B0);
  JUMPOUT(0x20E8A08A8);
}

void sub_20E8A09D0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E8A08C4);
  JUMPOUT(0x20E8A08BCLL);
}

void sub_20E8A09E0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E8A08D8);
  JUMPOUT(0x20E8A08D0);
}

void sub_20E8A09F0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E8A08ECLL);
  JUMPOUT(0x20E8A08E4);
}

void sub_20E8A0A00()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E8A0900);
  JUMPOUT(0x20E8A08F8);
}

void sub_20E8A0A10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9AD200;
  nullsub_1(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A0A8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20E8A0A94(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20E8A0A9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20E8A0AB0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20E8A0B2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9AD270;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A0BA4()
{
  return 4;
}

uint64_t sub_20E8A0BAC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20E8A0BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2101F6670(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_20E8A0BD0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20E8A0C4C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  std::mutex **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  float64x2_t v11;
  uint32x2_t v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  float32x4_t v17;
  float32x4_t v18;
  float64x2_t v19;
  float64x2_t v20;
  std::mutex *v21;
  std::mutex *v22;
  uint64_t v23;
  void *v24;
  std::mutex *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::mutex *v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t (**v42)();
  uint64_t (**v43)(_QWORD);
  float32x4_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float v48;
  uint64_t v49;
  uint64_t (**v50)();
  uint64_t (**v51)(_QWORD);
  float32x4_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float v56;
  uint32x2_t v57;
  float64x2_t v58;
  double v59;
  double v60[9];
  char v61[16];
  void *v62;
  void *v63;
  void *__p;
  void *v65;
  std::__shared_weak_count *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  char v79;
  _QWORD v80[136];
  float32x4_t v81[2];

  v5 = sub_20E8A1408(a1, a2);
  v6 = (std::mutex **)(v5 + 2432);
  *(_OWORD *)(v5 + 2432) = 0u;
  v7 = v5 + 2448;
  sub_20E8A1798(v5 + 2448);
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_QWORD *)(a1 + 2720) = 0;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_QWORD *)(a1 + 2664) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2696) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2728) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2736) = 0;
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 2776) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 2744) = v8;
  *(_OWORD *)(a1 + 2760) = v9;
  v10 = sub_20EA8F258(a1, 0);
  sub_20E89E038((uint64_t)v80, (uint64_t)v10);
  sub_20E8A2514((uint64_t)v61, a1 + 728);
  if (!v79
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DenseDepthModel.mm", 71, (uint64_t)"op_depth_calib.has_value()", 26, (uint64_t)"Jasper calibration not found in hardware parameters. Unable to construct dense depth model.", 91, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11.f64[0] = v67 * v70 + v71 * v74 + v75 * v78;
  v60[0] = v67;
  v60[1] = v71;
  v60[2] = v75;
  v60[3] = v68;
  v60[4] = v72;
  v60[5] = v76;
  v60[6] = v69;
  v60[7] = v73;
  v60[8] = v77;
  v11.f64[1] = v68 * v70 + v72 * v74 + v76 * v78;
  v58 = vnegq_f64(v11);
  v59 = -(v69 * v70 + v73 * v74 + v77 * v78);
  v12 = (uint32x2_t)v80[1];
  v13 = *(double *)(a1 + 2768);
  *(float *)&v14 = v13 * *(double *)&v80[15];
  *(float *)&v13 = v13 * *(double *)&v80[19];
  *(float *)&v15 = *(double *)&v80[17];
  *(float *)&v16 = *(double *)&v80[20];
  v42 = (uint64_t (**)())__PAIR64__(LODWORD(v13), v14);
  v43 = (uint64_t (**)(_QWORD))__PAIR64__(v16, v15);
  sub_20E89E6D4(&v34, (int *)&v42);
  v17 = v35;
  v52 = v35;
  v53 = v36;
  v54 = v37;
  v55 = v38;
  v56 = v39;
  v57 = v12;
  v50 = &off_24C9AD150;
  v51 = &off_24C9AD020;
  nullsub_1(&v34);
  *(float32x2_t *)v18.f32 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 2744)), vcvt_f32_u32(v12));
  v18.i64[1] = v18.i64[0];
  v81[0] = vmulq_f32(v18, v17);
  sub_20E89E6D4(&v34, (int *)v81);
  v43 = &off_24C9AD020;
  v44 = v35;
  v45 = v36;
  v46 = v37;
  v47 = v38;
  v48 = v39;
  v49 = *(_QWORD *)(a1 + 2744);
  nullsub_1(&v34);
  v42 = &off_24C9AD150;
  v19 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v46 + 8));
  *(float64x2_t *)(a1 + 2664) = vcvtq_f64_f32(*(float32x2_t *)&v46);
  *(float64x2_t *)(a1 + 2680) = v19;
  v20 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v47 + 8));
  *(float64x2_t *)(a1 + 2696) = vcvtq_f64_f32(*(float32x2_t *)&v47);
  *(float64x2_t *)(a1 + 2712) = v20;
  *(double *)(a1 + 2728) = v48;
  sub_20E8A62F8((uint64_t)&v42, (uint64_t)&v40);
  sub_20E8A66E0((uint64_t *)&v34, v60, v58.f64, &v40, *(unsigned int *)(a1 + 2752), *(double *)(a1 + 2760));
  v21 = v34;
  v34 = 0;
  v22 = *v6;
  *v6 = v21;
  if (v22)
  {
    std::mutex::~mutex(v22);
    MEMORY[0x212BC6398]();
  }
  v23 = v35.i64[0];
  v35.i64[0] = 0;
  v24 = *(void **)(a1 + 2440);
  *(_QWORD *)(a1 + 2440) = v23;

  v25 = v34;
  v34 = 0;
  if (v25)
  {
    std::mutex::~mutex(v25);
    MEMORY[0x212BC6398](v26);
  }
  v27 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_20E8A4DF0((uint64_t)&v34, v49, HIDWORD(v49), (_QWORD *)a3 + 4);
  sub_20E8A11B4(v7, (uint64_t)&v34);
  sub_20E8A259C((uint64_t)&v34);
  v42 = &off_24C9AD1C0;
  nullsub_1(&v43);
  nullsub_1(&v42);
  v50 = &off_24C9AD1C0;
  nullsub_1(&v51);
  nullsub_1(&v50);
  if (v79)
  {
    v30 = v66;
    if (v66)
    {
      v31 = (unint64_t *)&v66->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
  }
  sub_20E86A6B8(v80);
  return a1;
}

void sub_20E8A10A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20E8A1388((uint64_t)&STACK[0x210]);
  sub_20E86A6B8(&STACK[0x3B0]);
  sub_20E8A259C(v3);
  sub_20E8A1168(v2);
  sub_20E86A810(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A1168(uint64_t a1)
{
  std::mutex *v2;

  v2 = *(std::mutex **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x212BC6398]();
  }
  return a1;
}

uint64_t sub_20E8A11B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(v5 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x212BC6398](v5, 0xA0C40BD48D6D6);
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    MEMORY[0x212BC6398](v10, 0xA0C40BD48D6D6);
  }
  v14 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_OWORD *)(a2 + 72);
  v20 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v20;
  *(_OWORD *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 56) = v18;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  v21 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v22 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(_OWORD *)(a2 + 144);
  v26 = *(_OWORD *)(a2 + 160);
  v27 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v26;
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 144) = v25;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t sub_20E8A1388(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 408))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 192);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(void **)(a1 + 40);
    if (v5)
    {
      *(_QWORD *)(a1 + 48) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

uint64_t sub_20E8A1408(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20E8A1614(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6));
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x220uLL);
  v4 = *(_OWORD *)(a2 + 568);
  v5 = *(_OWORD *)(a2 + 584);
  v6 = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 584) = v5;
  *(_OWORD *)(a1 + 600) = v6;
  *(_OWORD *)(a1 + 568) = v4;
  v7 = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v7;
  v8 = *(_QWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 664) = v8;
  v9 = *(_QWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 688) = v9;
  v10 = *(_QWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 712) = v10;
  *(_WORD *)(a1 + 720) = *(_WORD *)(a2 + 720);
  sub_20E8A2514(a1 + 728, a2 + 728);
  *(_BYTE *)(a1 + 1144) = 0;
  *(_BYTE *)(a1 + 2232) = 0;
  if (*(_BYTE *)(a2 + 2232))
  {
    sub_20E89E038(a1 + 1144, a2 + 1144);
    *(_BYTE *)(a1 + 2232) = 1;
  }
  v11 = *(_OWORD *)(a2 + 2240);
  v12 = *(_OWORD *)(a2 + 2256);
  v13 = *(_OWORD *)(a2 + 2272);
  *(_QWORD *)(a1 + 2285) = *(_QWORD *)(a2 + 2285);
  *(_OWORD *)(a1 + 2272) = v13;
  *(_OWORD *)(a1 + 2256) = v12;
  *(_OWORD *)(a1 + 2240) = v11;
  *(_BYTE *)(a1 + 2296) = 0;
  *(_BYTE *)(a1 + 2424) = 0;
  if (*(_BYTE *)(a2 + 2424))
  {
    v14 = *(_OWORD *)(a2 + 2296);
    v15 = *(_OWORD *)(a2 + 2312);
    v16 = *(_OWORD *)(a2 + 2344);
    *(_OWORD *)(a1 + 2328) = *(_OWORD *)(a2 + 2328);
    *(_OWORD *)(a1 + 2344) = v16;
    *(_OWORD *)(a1 + 2296) = v14;
    *(_OWORD *)(a1 + 2312) = v15;
    v17 = *(_OWORD *)(a2 + 2360);
    v18 = *(_OWORD *)(a2 + 2376);
    v19 = *(_OWORD *)(a2 + 2408);
    *(_OWORD *)(a1 + 2392) = *(_OWORD *)(a2 + 2392);
    *(_OWORD *)(a1 + 2408) = v19;
    *(_OWORD *)(a1 + 2360) = v17;
    *(_OWORD *)(a1 + 2376) = v18;
    *(_BYTE *)(a1 + 2424) = 1;
  }
  return a1;
}

void sub_20E8A157C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (*(_BYTE *)(v1 + 2232))
    sub_20E86A6B8(v3);
  sub_20E8A1388(v2);
  sub_20E8A15BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20E8A15A8(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E8A15BC(v1);
  _Unwind_Resume(a1);
}

void **sub_20E8A15BC(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20E86A6B8(v3 - 136);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20E8A1614(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x3C3C3C3C3C3C3DLL)
      sub_20E867F44();
    result = (uint64_t)operator new(1088 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 1088 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20E89E038(v8 + v9, a2 + v9);
        v9 += 1088;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E8A16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8A1714(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A16E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 1088)
    sub_20E86A6B8((_QWORD *)(v10 - 1088 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E8A1714(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E8A1714(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          v4 = sub_20E86A6B8(v4 - 136);
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E8A1798(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = &off_24C9AD388;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20E8A1900((_WORD *)(a1 + 40));
  *(_QWORD *)(a1 + 120) = &off_24C9AD388;
  sub_20E8A1900((_WORD *)(a1 + 128));
  *(_BYTE *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 212) = 1061997773;
  return a1;
}

void sub_20E8A1810(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  nullsub_1(v5);
  sub_20E86665C(v6);
  nullsub_1(v3);
  sub_20E8A187C((uint64_t *)(v2 + 24));
  sub_20E8A187C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A1854(uint64_t a1)
{
  sub_20E86665C(a1 + 8);
  return nullsub_1(a1);
}

uint64_t *sub_20E8A187C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0xA0C40BD48D6D6);
  }
  return a1;
}

uint64_t sub_20E8A1900@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_20E8A1B4C(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD560;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_2101BA1FC((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[36] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_2101A53BC(result);
    return MEMORY[0x212BC6398](v11, 0x1091C406A8758A4);
  }
  return result;
}

void sub_20E8A1A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8A1A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20E86665C(v2);
  sub_20E86665C((uint64_t)va1);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8A1A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8A1A68(uint64_t a1)
{
  sub_20E86665C(a1 + 8);
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A1AA4()
{
  return 4;
}

uint64_t sub_20E8A1AAC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20E8A1AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2101F6670(a2, 2, a1 + 64, 2, a1 + 72, 4);
}

uint64_t sub_20E8A1AD0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20E8A1B4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_24C9AD480;
  sub_2101B8244((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24C9AD4C8;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_210207FC0((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_2101A53BC((uint64_t)v4);
}

void sub_20E8A1BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_1(v2);
  MEMORY[0x212BC6398](v4, 0x1091C406A8758A4);
  sub_2101A53BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A1C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101A53BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8A1C30(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2101A53BC(v2);
    MEMORY[0x212BC6398](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_20E8A1C78()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A1C8C()
{
  return 4;
}

void sub_20E8A1C9C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_20E8A1CA4()
{
  return 0;
}

__int128 *sub_20E8A1CAC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B130);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B130))
  {
    v2 = sub_20E8A1D84();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(&xmmword_254A4B118, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A4B128 = *((_QWORD *)v2 + 2);
      xmmword_254A4B118 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4B118, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4B130);
  }
  if (byte_254A4B12F >= 0)
    return &xmmword_254A4B118;
  else
    return (__int128 *)xmmword_254A4B118;
}

void sub_20E8A1D6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B130);
  _Unwind_Resume(a1);
}

__int128 *sub_20E8A1D84()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B150);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B150))
    return &xmmword_254A4B138;
  v2 = sub_20E8A1E60();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A4B138, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A4B148 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A4B138 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4B138, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B150);
  return &xmmword_254A4B138;
}

void sub_20E8A1E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B150);
  _Unwind_Resume(a1);
}

std::string *sub_20E8A1E60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B170);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B170))
    return &stru_254A4B158;
  sub_20E8A2078((uint64_t)__p);
  sub_20E8A1F50((char *)__p, &stru_254A4B158);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A4B158, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B170);
  return &stru_254A4B158;
}

void sub_20E8A1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A4B170);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A4B170);
  _Unwind_Resume(a1);
}

void sub_20E8A1F50(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E8A225C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20E8A204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8A2078(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A4B1B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B1B0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_254A4B198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A4B198, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4B1B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A4B1D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B1D0))
  {
    v5 = sub_20E8A2354(qword_254A4B198, "<", 0);
    sub_20E89FC08(qword_254A4B198, 0, v5, qword_254A4B1B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A4B1B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4B1D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A4B1F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B1F0))
  {
    sub_21023CD84((uint64_t)qword_254A4B1B8, (uint64_t)&xmmword_254A4B1D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4B1D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4B1F0);
  }
  if (byte_254A4B1EF < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A4B1D8, *((unint64_t *)&xmmword_254A4B1D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A4B1D8;
    *(_QWORD *)(a1 + 16) = unk_254A4B1E8;
  }
}

void sub_20E8A2214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B1F0);
  _Unwind_Resume(a1);
}

void sub_20E8A222C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B1D0);
  _Unwind_Resume(a1);
}

void sub_20E8A2244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B1B0);
  _Unwind_Resume(a1);
}

std::string *sub_20E8A225C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B190);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B190))
    return &stru_254A4B178;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A4B178);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A4B178, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B190);
  return &stru_254A4B178;
}

void sub_20E8A2314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A4B190);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A4B190);
  _Unwind_Resume(a1);
}

unint64_t sub_20E8A2354(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

void sub_20E8A244C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A2470(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_2101A53BC(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20E8A24A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E8A2514(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 408) = 0;
  if (*(_BYTE *)(a2 + 408))
  {
    sub_20E89E538(a1, (uint64_t *)a2);
    v4 = *(_OWORD *)(a2 + 288);
    v5 = *(_OWORD *)(a2 + 304);
    v6 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v6;
    *(_OWORD *)(a1 + 288) = v4;
    *(_OWORD *)(a1 + 304) = v5;
    v7 = *(_OWORD *)(a2 + 352);
    v8 = *(_OWORD *)(a2 + 368);
    v9 = *(_OWORD *)(a2 + 384);
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_OWORD *)(a1 + 368) = v8;
    *(_OWORD *)(a1 + 384) = v9;
    *(_OWORD *)(a1 + 352) = v7;
    *(_BYTE *)(a1 + 408) = 1;
  }
  return a1;
}

void sub_20E8A2580(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 408))
    sub_21023E27C((_QWORD *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8A259C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a1 + 120;
  sub_20E86665C(a1 + 128);
  nullsub_1(v2);
  sub_20E86665C(a1 + 40);
  nullsub_1(a1 + 32);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x212BC6398](v3, 0xA0C40BD48D6D6);
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x212BC6398](v7, 0xA0C40BD48D6D6);
  }
  return a1;
}

uint64_t sub_20E8A26A4(uint64_t result)
{
  uint64_t v1;
  std::mutex *v2;

  if (result)
  {
    v1 = result;
    sub_20E8A259C(result + 2448);

    v2 = *(std::mutex **)(v1 + 2432);
    *(_QWORD *)(v1 + 2432) = 0;
    if (v2)
    {
      std::mutex::~mutex(v2);
      MEMORY[0x212BC6398]();
    }
    sub_20E86A810(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20E8A2714(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8A2994(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20E8A2948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A2994(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20E8A3F40();
  v3 = sub_20E8A43F8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_20E8A2A0C(char *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_20E8A2D64(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AD5A0[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AD5B8[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AD5A0[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AD5D0[v13])(&v19, v12);
  sub_20E8A2C70((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_20E877AB8();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9AD128[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9AD0C8[v13])(&v14, v12);
  return result;
}

void sub_20E8A2BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8A2C70(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_2102384C0(v9);
  v5 = (_QWORD *)sub_210238554(v9);
  sub_21018C208(v5, a3);
  sub_210238560(v9, __p);
  sub_20FD0DE48(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_20E877AB8();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24C9AD0F8[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20E8A2D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20E8A2D64(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AD0C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t **sub_20E8A2E54(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24C9AD0C8[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_20E860C04((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_20E8A2EF0(uint64_t a1, uint64_t a2)
{
  sub_20E8A2F98((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20E8A2EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E8A311C((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_20E860C04(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_20E8A2F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20E8A2F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_20E860C04(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C9AD0C8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_20E8A30D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20E8A311C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_20E8A32DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E8A32F0(_DWORD ***a1)
{
  return sub_20E8A330C(**a1, (char *)(*a1)[1]);
}

void sub_20E8A32FC(uint64_t a1, uint64_t a2)
{
  sub_20E8A33FC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E8A330C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AD0C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E8A33FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9AD0C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E8A35B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E8A35F4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E8A36EC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E8A36E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E8A36EC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E8A3904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E8A3918(_DWORD ***a1)
{
  return sub_20E8A3934(**a1, (char *)(*a1)[1]);
}

void sub_20E8A3924(uint64_t a1, uint64_t a2)
{
  sub_20E8A3A24((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E8A3934(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AD0C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E8A3A24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9AD0C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E8A3BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E8A3C1C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E8A3D14((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E8A3D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E8A3D14(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E8A3F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_20E8A3F40()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A4B210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B210))
  {
    sub_20E8610C0(v7, "SharedImage");
    v2 = sub_20E8A225C();
    sub_20E8A4144((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20E8A4144((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A4B1F8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A4B1F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4B210);
          return &stru_254A4B1F8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A4B1F8;
}

void sub_20E8A4090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A4B210);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A4B210);
  _Unwind_Resume(a1);
}

void sub_20E8A4144(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20E8A41E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20E8A41FC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B230);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B230))
    return &xmmword_254A4B218;
  v2 = (char *)sub_20E8A42D8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A4B218, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A4B228 = *((_QWORD *)v2 + 2);
    xmmword_254A4B218 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4B218, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B230);
  return &xmmword_254A4B218;
}

void sub_20E8A42C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B230);
  _Unwind_Resume(a1);
}

void *sub_20E8A42D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B250);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B250))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_254A4B238);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A4B238, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4B250);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A4B270);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B270))
    return &unk_254A4B258;
  sub_21023CD84((uint64_t)qword_254A4B238, (uint64_t)&unk_254A4B258);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A4B258, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B270);
  return &unk_254A4B258;
}

void sub_20E8A43C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B270);
  _Unwind_Resume(a1);
}

void sub_20E8A43E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A4B250);
  _Unwind_Resume(a1);
}

std::string *sub_20E8A43F8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A4B290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A4B290))
  {
    sub_20E8610C0(v7, "SharedImage");
    v2 = sub_20E8A46B4();
    sub_20E8A45FC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20E8A45FC((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A4B278, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A4B278, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4B290);
          return &stru_254A4B278;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A4B278;
}

void sub_20E8A4548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A4B290);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A4B290);
  _Unwind_Resume(a1);
}

void sub_20E8A45FC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20E8A4698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20E8A46B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A4B2B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A4B2B0))
    return &stru_254A4B298;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A4B298);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A4B298, &dword_20E81F000);
  __cxa_guard_release(&qword_254A4B2B0);
  return &stru_254A4B298;
}

void sub_20E8A476C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A4B2B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A4B2B0);
  _Unwind_Resume(a1);
}

void sub_20E8A47AC(void *__p)
{
  operator delete(__p);
}

void sub_20E8A47B4()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x212BC6CE0]());
}

uint64_t sub_20E8A47C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v6;
  std::__shared_weak_count_vtbl ***v7;
  std::__shared_weak_count_vtbl ***v8;
  std::__shared_weak_count_vtbl **v9;
  std::__shared_weak_count_vtbl **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl **v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  int32x2_t v37;
  std::__shared_weak_count_vtbl **v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int16 v44;
  unsigned int v45;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v6 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (std::__shared_weak_count_vtbl ***)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (std::__shared_weak_count_vtbl ***)(a1 + 24);
  *(_QWORD *)(a1 + 32) = &off_24C9AD388;
  sub_20E8A1900((_WORD *)(a1 + 40));
  *(_QWORD *)(a1 + 120) = &off_24C9AD388;
  sub_20E8A1900((_WORD *)(a1 + 128));
  *(_QWORD *)(a1 + 208) = *a4;
  v37.i32[0] = 16;
  v45 = 1717855600;
  sub_20E8A4C80(&v38, (uint64_t *)a1, v6, (unsigned int *)&v37, &v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm:38");
  v9 = v38;
  v38 = 0;
  v10 = *v7;
  *v7 = v9;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    MEMORY[0x212BC6398](v10, 0xA0C40BD48D6D6);
    v14 = v38;
    v38 = 0;
    if (v14)
    {
      v15 = (std::__shared_weak_count *)v14[1];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      MEMORY[0x212BC6398](v14, 0xA0C40BD48D6D6);
    }
    v9 = *v7;
  }
  if (!v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm", 39, (uint64_t)"depth32_img_pool_", 17, (uint64_t)"failed to create frame pool for 32-bit depth", 44, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_44;
  }
  v37.i32[0] = 16;
  v45 = 1717855600;
  sub_20E8A4C80(&v38, (uint64_t *)a1, v6, (unsigned int *)&v37, &v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm:43");
  v18 = v38;
  v38 = 0;
  v19 = *v8;
  *v8 = v18;
  if (v19)
  {
    v20 = (std::__shared_weak_count *)v19[1];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    MEMORY[0x212BC6398](v19, 0xA0C40BD48D6D6);
    v23 = v38;
    v38 = 0;
    if (v23)
    {
      v24 = (std::__shared_weak_count *)v23[1];
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      MEMORY[0x212BC6398](v23, 0xA0C40BD48D6D6);
    }
    v18 = *v8;
  }
  if (!v18
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm", 44, (uint64_t)"confidence32_img_pool_", 22, (uint64_t)"failed to create frame pool for 32-bit confidence", 49, (void (*)(void **))sub_21023DDB0))
  {
LABEL_44:
    abort();
  }
  v37 = vmovn_s64(*(int64x2_t *)a1);
  v45 = 0;
  v38 = (std::__shared_weak_count_vtbl **)&off_24C9AD388;
  sub_20E8A5D1C(&v37, &v45, &v39);
  v27 = v39;
  v39 = 0uLL;
  v28 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v27;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_OWORD *)(a1 + 56) = v40;
  *(_OWORD *)(a1 + 72) = v41;
  *(_OWORD *)(a1 + 88) = v42;
  *(_QWORD *)(a1 + 104) = v43;
  *(_WORD *)(a1 + 112) = v44;
  sub_20E86665C((uint64_t)&v39);
  nullsub_1(&v38);
  v37 = vmovn_s64(*(int64x2_t *)a1);
  v45 = 0;
  v38 = (std::__shared_weak_count_vtbl **)&off_24C9AD388;
  sub_20E8A5D1C(&v37, &v45, &v39);
  v31 = v39;
  v39 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v41;
  *(_OWORD *)(a1 + 144) = v40;
  *(_OWORD *)(a1 + 160) = v35;
  *(_OWORD *)(a1 + 176) = v42;
  *(_QWORD *)(a1 + 192) = v43;
  *(_WORD *)(a1 + 200) = v44;
  sub_20E86665C((uint64_t)&v39);
  nullsub_1(&v38);
  return a1;
}

void sub_20E8A4C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a5);
  nullsub_1(va);
  sub_20E86665C(a3);
  nullsub_1(v8);
  sub_20E86665C(v7);
  nullsub_1(a4);
  sub_20E8A187C(v6);
  sub_20E8A187C(v5);
  _Unwind_Resume(a1);
}

void sub_20E8A4C80(std::__shared_weak_count_vtbl ***a1, uint64_t *a2, uint64_t *a3, unsigned int *a4, unsigned int *a5, const char *a6)
{
  std::__shared_weak_count_vtbl **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;

  v12 = (std::__shared_weak_count_vtbl **)operator new();
  v13 = *a2;
  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  v17 = strlen(a6);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = (void **)operator new(v20 + 1);
    __dst[1] = v18;
    v23 = v21 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_8;
  }
  HIBYTE(v23) = v17;
  v19 = __dst;
  if (v17)
LABEL_8:
    memcpy(v19, a6, (size_t)v18);
  *((_BYTE *)v18 + (_QWORD)v19) = 0;
  sub_2101058CC(v12, v13, v14, v15, v16, (uint64_t *)__dst);
  *a1 = v12;
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20E8A4DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x212BC6398](v15, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20E8A4DF4(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  float32x2_t v24;
  float *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  float *v56;
  int v57;
  int v58;
  float *v59;
  float *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  float *v85;
  int v86;
  int v87;
  float v88;
  int v89;
  float *v90;
  float *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD v115[3];
  uint64_t v116[2];
  unsigned int v117;
  unsigned int v118;
  float *v119;
  unsigned int v120;
  unsigned int v121;
  void *__p;
  void *v123;
  float *v124;
  uint64_t (**v125)();
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t (**v128)();
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  _QWORD v133[3];
  uint64_t v134;
  std::__shared_weak_count *v135;
  char v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD v139[3];
  uint64_t v140;
  std::__shared_weak_count *v141;
  char v142;

  sub_210105DE0(*(CVPixelBufferPoolRef **)(a1 + 16), (uint64_t)&v140);
  v5 = v140;
  if (v142)
    v6 = v140 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm", 55, (uint64_t)"(depth32_img_owner && *depth32_img_owner)", 41, (uint64_t)"error allocating depth frame for densification", 46, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = v140;
  }
  v137 = v5;
  v138 = v141;
  if (v141)
  {
    p_shared_owners = (unint64_t *)&v141->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_210106E84(&v137, v139);
  v9 = v138;
  if (v138)
  {
    v10 = (unint64_t *)&v138->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_210105DE0(*(CVPixelBufferPoolRef **)(a1 + 24), (uint64_t)&v134);
  if (!v136 || (v12 = v134) == 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DenseDepthNodeGroup/src/DepthDensifier.mm", 59, (uint64_t)"(confidence32_img_owner && *confidence32_img_owner)", 51, (uint64_t)"error allocating confidence frame for densification", 51, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v12 = v134;
  }
  v131 = v12;
  v132 = v135;
  if (v135)
  {
    v13 = (unint64_t *)&v135->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_210106E84(&v131, v133);
  v15 = v132;
  if (v132)
  {
    v16 = (unint64_t *)&v132->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v128 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 32, &v129);
  v125 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 120, &v126);
  v18 = *a2;
  __p = 0;
  v123 = 0;
  v124 = 0;
  if (v18)
  {
    if (v18 > 0x1555555555555555)
      sub_20E867F44();
    v19 = (float *)operator new(12 * v18);
    v20 = 0;
    __p = v19;
    v123 = v19;
    v124 = &v19[3 * v18];
    do
    {
      v22 = *(float *)(a2[1] + 16 * v20 + 8);
      if (v22 < 0.0)
        goto LABEL_33;
      if (*(float *)(a2[19] + 4 * v20) < *(float *)(a1 + 212)
        || *(_BYTE *)(a2[10] + v20) != 0)
      {
        goto LABEL_33;
      }
      v24 = vcvt_f32_f64(*(float64x2_t *)(a2[4] + 16 * v20));
      if (v19 < v124)
      {
        *(float32x2_t *)v19 = v24;
        v19[2] = v22;
        v21 = v19 + 3;
      }
      else
      {
        v25 = (float *)__p;
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (_BYTE *)__p) >> 2);
        v27 = v26 + 1;
        if (v26 + 1 > 0x1555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * (((char *)v124 - (_BYTE *)__p) >> 2) > v27)
          v27 = 0x5555555555555556 * (((char *)v124 - (_BYTE *)__p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v28 = 0x1555555555555555;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 > 0x1555555555555555)
            sub_20E877A38();
          v29 = (char *)operator new(12 * v28);
          v30 = (uint64_t)&v29[4 * (((char *)v19 - (_BYTE *)__p) >> 2)];
          *(float32x2_t *)v30 = v24;
          *(float *)(v30 + 8) = v22;
          v31 = (uint64_t)&v29[12 * v26];
          if (v19 != v25)
          {
            do
            {
LABEL_54:
              v32 = *(_QWORD *)(v19 - 3);
              v19 -= 3;
              v33 = *((_DWORD *)v19 + 2);
              *(_QWORD *)(v31 - 12) = v32;
              v31 -= 12;
              *(_DWORD *)(v31 + 8) = v33;
            }
            while (v19 != v25);
            v19 = (float *)__p;
            v21 = (float *)(v30 + 12);
            __p = (void *)v31;
            v123 = (void *)(v30 + 12);
            v124 = (float *)&v29[12 * v28];
            if (!v19)
              goto LABEL_32;
LABEL_51:
            operator delete(v19);
            goto LABEL_32;
          }
        }
        else
        {
          v29 = 0;
          v30 = 4 * (((char *)v19 - (_BYTE *)__p) >> 2);
          *(float32x2_t *)v30 = v24;
          *(float *)(v30 + 8) = v22;
          v31 = 12 * v26;
          if (v19 != v25)
            goto LABEL_54;
        }
        v21 = (float *)(v30 + 12);
        __p = (void *)v31;
        v123 = (void *)(v30 + 12);
        v124 = (float *)&v29[12 * v28];
        if (v19)
          goto LABEL_51;
      }
LABEL_32:
      v123 = v21;
      v19 = v21;
LABEL_33:
      ++v20;
    }
    while (v20 != v18);
  }
  sub_20F423BD0((float **)&__p, (uint64_t)&v128, (uint64_t)&v125);
  sub_20E8A59B0(*(unsigned __int8 *)(a1 + 208), (uint64_t)&v128, (uint64_t)&v125);
  sub_21015D60C((uint64_t)v139, v116);
  sub_21015C40C((uint64_t)v116, (uint64_t *)&v119);
  sub_21015CFA4(v116);
  sub_21015D60C((uint64_t)v133, v115);
  sub_21015C40C((uint64_t)v115, v116);
  sub_21015CFA4(v115);
  v34 = *(_QWORD *)(a1 + 40);
  v35 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v35)
  {
    if (!v34)
    {
LABEL_76:
      v115[0] = 0;
      v43 = *(_DWORD *)(a1 + 96);
      if (!v43)
        goto LABEL_98;
LABEL_77:
      v44 = *(_DWORD *)(a1 + 100);
      if (!v44)
        goto LABEL_98;
      v45 = *(unsigned int *)(a1 + 104);
      v46 = *(unsigned int *)(a1 + 108);
      v47 = v120;
      v48 = v121;
      v49 = *(float **)(a1 + 88);
      if (*(_BYTE *)(a1 + 112) && v49)
      {
        v50 = *(_QWORD *)(a1 + 40);
        v51 = *(std::__shared_weak_count **)(a1 + 48);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          do
            v54 = __ldaxr(v52);
          while (__stlxr(v54 - 1, v52));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v50 + 88))(v50, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
        v49 = *(float **)(a1 + 88);
      }
      v55 = v43 - 1;
      v56 = v119;
      v57 = v44 - 1;
      if (v44 != 1)
      {
        if (v43 == 1)
        {
          do
          {
            *v56 = *v49 / 1000.0;
            v49 += v46;
            v56 += v48;
            --v57;
          }
          while (v57);
LABEL_97:
          *v56 = *v49 / 1000.0;
          goto LABEL_98;
        }
        v58 = 0;
        do
        {
          v59 = v56;
          v60 = v49;
          v61 = v43 - 1;
          do
          {
            *v59 = *v60 / 1000.0;
            v60 += v45;
            v59 += v47;
            --v61;
          }
          while (v61);
          *v59 = *v60 / 1000.0;
          v49 += v46;
          v56 += v48;
          ++v58;
        }
        while (v58 != v57);
      }
      if (v43 != 1)
      {
        do
        {
          *v56 = *v49 / 1000.0;
          v49 += v45;
          v56 += v47;
          --v55;
        }
        while (v55);
      }
      goto LABEL_97;
    }
    goto LABEL_72;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (v38)
  {
    if (!v34)
      goto LABEL_76;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!v34)
      goto LABEL_76;
  }
  v34 = *(_QWORD *)(a1 + 40);
  v39 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v39)
    goto LABEL_72;
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (v42)
  {
LABEL_72:
    if (!*(_BYTE *)(a1 + 113))
      goto LABEL_76;
    goto LABEL_73;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (!*(_BYTE *)(a1 + 113))
    goto LABEL_76;
LABEL_73:
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v34 + 96))(v115, v34, 0);
  v43 = *(_DWORD *)(a1 + 96);
  if (v43)
    goto LABEL_77;
LABEL_98:
  v62 = v115[0];
  v115[0] = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *(_QWORD *)(a1 + 128);
  v64 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v64)
  {
    if (!v63)
    {
LABEL_119:
      v115[0] = 0;
      v72 = *(_DWORD *)(a1 + 184);
      if (!v72)
        goto LABEL_142;
LABEL_120:
      v73 = *(_DWORD *)(a1 + 188);
      if (!v73)
        goto LABEL_142;
      v74 = *(unsigned int *)(a1 + 192);
      v75 = *(unsigned int *)(a1 + 196);
      v76 = v117;
      v77 = v118;
      v78 = *(float **)(a1 + 176);
      if (*(_BYTE *)(a1 + 200) && v78)
      {
        v79 = *(_QWORD *)(a1 + 128);
        v80 = *(std::__shared_weak_count **)(a1 + 136);
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
          do
            v83 = __ldaxr(v81);
          while (__stlxr(v83 - 1, v81));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v79 + 88))(v79, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
        v78 = *(float **)(a1 + 176);
      }
      v84 = v72 - 1;
      v85 = (float *)v116[0];
      v86 = *(unsigned __int8 *)(a1 + 208);
      v87 = v73 - 1;
      if (v73 == 1)
      {
        v88 = (float)(v86 + 1);
        if (v72 == 1)
        {
LABEL_141:
          *v85 = *v78 / v88;
          goto LABEL_142;
        }
      }
      else
      {
        v88 = (float)(v86 + 1);
        if (v72 == 1)
        {
          do
          {
            *v85 = *v78 / v88;
            v78 += v75;
            v85 += v77;
            --v87;
          }
          while (v87);
          goto LABEL_141;
        }
        v89 = 0;
        do
        {
          v90 = v85;
          v91 = v78;
          v92 = v72 - 1;
          do
          {
            *v90 = *v91 / v88;
            v91 += v74;
            v90 += v76;
            --v92;
          }
          while (v92);
          *v90 = *v91 / v88;
          v78 += v75;
          v85 += v77;
          ++v89;
        }
        while (v89 != v87);
      }
      do
      {
        *v85 = *v78 / v88;
        v78 += v74;
        v85 += v76;
        --v84;
      }
      while (v84);
      goto LABEL_141;
    }
    goto LABEL_115;
  }
  v65 = (unint64_t *)&v64->__shared_owners_;
  do
    v66 = __ldxr(v65);
  while (__stxr(v66 + 1, v65));
  do
    v67 = __ldaxr(v65);
  while (__stlxr(v67 - 1, v65));
  if (v67)
  {
    if (!v63)
      goto LABEL_119;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    if (!v63)
      goto LABEL_119;
  }
  v63 = *(_QWORD *)(a1 + 128);
  v68 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v68)
    goto LABEL_115;
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldxr(v69);
  while (__stxr(v70 + 1, v69));
  do
    v71 = __ldaxr(v69);
  while (__stlxr(v71 - 1, v69));
  if (v71)
  {
LABEL_115:
    if (!*(_BYTE *)(a1 + 201))
      goto LABEL_119;
    goto LABEL_116;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  if (!*(_BYTE *)(a1 + 201))
    goto LABEL_119;
LABEL_116:
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v63 + 96))(v115, v63, 0);
  v72 = *(_DWORD *)(a1 + 184);
  if (v72)
    goto LABEL_120;
LABEL_142:
  v93 = v115[0];
  v115[0] = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v95 = v139[1];
  v94 = v139[2];
  *a3 = &off_24CA1A9A0;
  a3[1] = v95;
  a3[2] = v94;
  if (v94)
  {
    v96 = (unint64_t *)(v94 + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v99 = v133[1];
  v98 = v133[2];
  a3[3] = &off_24CA1A9A0;
  a3[4] = v99;
  a3[5] = v98;
  if (v98)
  {
    v100 = (unint64_t *)(v98 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  if (__p)
  {
    v123 = __p;
    operator delete(__p);
  }
  v102 = v127;
  if (v127)
  {
    v103 = (unint64_t *)&v127->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  nullsub_1(&v125);
  v105 = v130;
  if (v130)
  {
    v106 = (unint64_t *)&v130->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  nullsub_1(&v128);
  sub_21015D41C(v133);
  if (v136)
  {
    v108 = v135;
    if (v135)
    {
      v109 = (unint64_t *)&v135->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  sub_21015D41C(v139);
  if (v142)
  {
    v111 = v141;
    if (v141)
    {
      v112 = (unint64_t *)&v141->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }
}

void sub_20E8A5880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  sub_20E8A5B30((uint64_t)&a22);
  sub_20E8A5B30((uint64_t)&a29);
  sub_21015D41C((_QWORD *)(v36 - 216));
  sub_20E869AA8(v36 - 192);
  sub_21015D41C((_QWORD *)(v36 - 152));
  sub_20E869AA8(v36 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A59B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __int128 v26;
  __int16 v27;

  sub_20F423D9C(a1, a2);
  v22 = &off_24C9AD5F8;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_WORD *)(a2 + 48);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = *(_QWORD *)(a2 + 24);
    v26 = *(_OWORD *)(a2 + 32);
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v23 = v6;
    v24 = v7;
    v25 = v12;
    v27 = v10;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v16 = *(_WORD *)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 24);
    v23 = *(_QWORD *)(a2 + 8);
    v24 = 0;
    v25 = v17;
    v26 = *(_OWORD *)(a2 + 32);
    v27 = v16;
  }
  sub_20F42505C(a1, (uint64_t)&v22, a3);
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return nullsub_1(&v22);
}

void sub_20E8A5B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8A5B98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A5B30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_1(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_1(a1);
}

uint64_t sub_20E8A5B98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_1(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_1(a1);
}

void sub_20E8A5C00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A5C6C()
{
  return 4;
}

uint64_t sub_20E8A5C74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20E8A5C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2101F6670(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_20E8A5C98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20E8A5D1C@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20E8A5E84(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD560;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_2101BA1FC((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[36] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_2101A53BC(result);
    return MEMORY[0x212BC6398](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_20E8A5E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8A5E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20E86665C(v2);
  sub_20E86665C((uint64_t)va1);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8A5E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8A1C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A5E84@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _OWORD v7[2];
  _QWORD v8[6];

  v8[5] = &off_24C9AD480;
  sub_2101B82D4(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C9AD4C8;
  *(_OWORD *)(v4 + 8) = v7[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v7 + 12);
  sub_210207FC0((__n128 *)(v4 + 40), (__n128 *)v8);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v8[3];
  *a3 = v4;
  return sub_2101A53BC((uint64_t)v6);
}

void sub_20E8A5F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_1(v2);
  MEMORY[0x212BC6398](v4, 0x1091C406A8758A4);
  sub_2101A53BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A5F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101A53BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A5F70(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_20E8A6194(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20E8A605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E8A6078(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8A60E4()
{
  return 4;
}

uint64_t sub_20E8A60EC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20E8A60F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2101F6670(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_20E8A6110(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_20E8A6194(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 4);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x212BC6398]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_20E8A62E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A62F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t (**v12)(_QWORD);
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  int v16;

  v5 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 16);
  v14 = v5;
  v6 = *(_OWORD *)(a1 + 64);
  v15[0] = *(_OWORD *)(a1 + 48);
  LODWORD(v3) = *(_DWORD *)(a1 + 88);
  LODWORD(v2) = *(_DWORD *)(a1 + 92);
  v12 = &off_24C9AD020;
  v15[1] = v6;
  v16 = *(_DWORD *)(a1 + 80);
  v7 = sub_20E9F7D60((uint64_t)v15);
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE05F68]), "initWithIntrinsics:cameraToPlatformTransform:pixelSize:forReferenceDimensions:withDistortionModel:", 0, v7, v8, v9, COERCE_DOUBLE(1065353216), unk_2102D8D30, 0.0, unk_2102D8D50, 0.000899999985, (double)v3, (double)v2);
  sub_20E8A7A58(v10, a2);

  return nullsub_1(&v12);
}

void sub_20E8A63D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  nullsub_1(va);
  _Unwind_Resume(a1);
}

void sub_20E8A63E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  nullsub_1(va);
  _Unwind_Resume(a1);
}

void sub_20E8A63FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  nullsub_1(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8A6410(uint64_t *a1, double *a2, double *a3, uint64_t *a4, uint64_t a5, double a6)
{
  uint64_t v12;
  std::mutex *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  double v24;
  float v25;
  double v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  void *v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char v47;

  *a1 = 0;
  a1[1] = 0;
  v12 = operator new();
  *(_QWORD *)v12 = 850045863;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  v13 = (std::mutex *)*a1;
  *a1 = v12;
  if (v13)
  {
    std::mutex::~mutex(v13);
    MEMORY[0x212BC6398]();
  }
  v14 = (std::__shared_weak_count *)a4[1];
  v45 = *a4;
  v46 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v47 = *((_BYTE *)a4 + 16);
  sub_20E8A7B78((uint64_t)&v45);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v46;
  if (v46)
  {
    v19 = (unint64_t *)&v46->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (void *)objc_opt_new();
  objc_msgSend(v21, "setAggregationSize:", a5);
  objc_msgSend(v21, "setMaxPointCloudAge:", a6);
  *(float *)&v22 = *a2;
  *(float *)&v23 = a2[3];
  v24 = COERCE_DOUBLE(__PAIR64__(v23, v22));
  v25 = a2[1];
  *(float *)&v26 = v25;
  v27 = a2[4];
  *((float *)&v26 + 1) = v27;
  *(float *)&v28 = a2[2];
  *(float *)&v29 = a2[5];
  v30 = COERCE_DOUBLE(__PAIR64__(v29, v28));
  *(float *)&v31 = *a3;
  *(float *)&v32 = a3[1];
  __asm { FMOV            V3.4S, #1.0 }
  objc_msgSend(MEMORY[0x24BE05F88], "transformMetersToMillimiters:", v24, v26, v30, COERCE_DOUBLE(__PAIR64__(v32, v31)));
  v42 = objc_msgSend(objc_alloc(MEMORY[0x24BE05F88]), "initWithAggregationParameters:jasperToColorTransform:colorCamera:", v21, v17, v38, v39, v40, v41);
  v43 = (void *)a1[1];
  a1[1] = v42;

  return a1;
}

void sub_20E8A662C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  sub_20E8A669C((std::mutex **)v1);
  _Unwind_Resume(a1);
}

std::mutex **sub_20E8A669C(std::mutex **a1)
{
  std::mutex *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x212BC6398]();
  }
  return a1;
}

void sub_20E8A66E4(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4, double a5)
{
  unsigned int v8;
  unsigned int v9;
  double v10;
  float v11;
  double v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  std::mutex *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;

  *(float *)&v8 = *a3;
  *(float *)&v9 = a3[3];
  v10 = COERCE_DOUBLE(__PAIR64__(v9, v8));
  v11 = a3[1];
  *(float *)&v12 = v11;
  v13 = a3[4];
  *((float *)&v12 + 1) = v13;
  *(float *)&v14 = a3[2];
  *(float *)&v15 = a3[5];
  objc_msgSend(MEMORY[0x24BE05F88], "transformMetersToMillimiters:", v10, v12, COERCE_DOUBLE(__PAIR64__(v15, v14)), COERCE_DOUBLE(vcvt_f32_f64(*a4)));
  v24 = v17;
  v25 = v16;
  v22 = v19;
  v23 = v18;
  v20 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  sub_20E8A7A0C(a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 8), "pushPointCloud:timestamp:worldToCameraTransform:", v21, a5, v25, v24, v23, v22);

  std::mutex::unlock(v20);
}

void sub_20E8A67F4(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20E8A680C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8A6820(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unsigned int v8;
  unsigned int v9;
  double v10;
  float v11;
  double v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  std::mutex *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;

  *(float *)&v8 = *a2;
  *(float *)&v9 = a2[3];
  v10 = COERCE_DOUBLE(__PAIR64__(v9, v8));
  v11 = a2[1];
  *(float *)&v12 = v11;
  v13 = a2[4];
  *((float *)&v12 + 1) = v13;
  *(float *)&v14 = a2[2];
  *(float *)&v15 = a2[5];
  objc_msgSend(MEMORY[0x24BE05F88], "transformMetersToMillimiters:", v10, v12, COERCE_DOUBLE(__PAIR64__(v15, v14)), COERCE_DOUBLE(vcvt_f32_f64(*a3)));
  v24 = v17;
  v25 = v16;
  v22 = v19;
  v23 = v18;
  v20 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  objc_msgSend(*(id *)(a1 + 8), "aggregateForTime:worldToCameraTransform:", a5, v25, v24, v23, v22);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E8A6A28(v21, a4);

  std::mutex::unlock(v20);
}

void sub_20E8A692C(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20E8A6944(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8A6958(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = *((_BYTE *)a2 + 16);
  sub_20E8A7B78((uint64_t)&v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  objc_msgSend(*(id *)(a1 + 8), "setColorCameraCalibration:", v6);

}

void sub_20E8A6A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E8A6A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A6A28(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  uint64_t v39[34];

  v3 = a1;
  if (v3)
  {
    sub_20E8A6CB0((uint64_t)v39, v3);
    v4 = (std::__shared_weak_count_vtbl *)v3;
    v37 = v4;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD7E8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v4;
    v38 = v5;
    sub_20E8A049C(&v14, v39);
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 48) = v18;
    *(_QWORD *)(a2 + 72) = v20;
    *(_QWORD *)(a2 + 96) = v22;
    *(_QWORD *)(a2 + 120) = v24;
    v8 = v28;
    *(_QWORD *)(a2 + 144) = v26;
    *(_QWORD *)(a2 + 168) = v8;
    v9 = v32;
    *(_QWORD *)(a2 + 192) = v30;
    *(_QWORD *)(a2 + 216) = v9;
    v10 = v36;
    *(_QWORD *)(a2 + 240) = v34;
    *(_OWORD *)(a2 + 8) = v15;
    v15 = 0uLL;
    *(_OWORD *)(a2 + 32) = v17;
    v16 = 0;
    v17 = 0uLL;
    v18 = 0;
    *(_OWORD *)(a2 + 56) = v19;
    v19 = 0uLL;
    *(_OWORD *)(a2 + 80) = v21;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)(a2 + 104) = v23;
    v23 = 0uLL;
    *(_OWORD *)(a2 + 128) = v25;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0;
    *(_OWORD *)(a2 + 152) = v27;
    v27 = 0uLL;
    *(_OWORD *)(a2 + 176) = v29;
    v28 = 0;
    v29 = 0uLL;
    v30 = 0;
    *(_OWORD *)(a2 + 200) = v31;
    v31 = 0uLL;
    *(_OWORD *)(a2 + 224) = v33;
    v32 = 0;
    v33 = 0uLL;
    v34 = 0;
    *(_OWORD *)(a2 + 248) = v35;
    v35 = 0uLL;
    v36 = 0;
    *(_QWORD *)(a2 + 264) = v10;
    *(_QWORD *)(a2 + 272) = v4;
    *(_QWORD *)(a2 + 280) = v5;
    v11 = v38;
    sub_20E86177C(&v14);
    *(_BYTE *)(a2 + 288) = 1;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_20E86177C(v39);
  }
  else
  {
    *(_QWORD *)(a2 + 288) = 0;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

}

void sub_20E8A6C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void *v45;

  sub_20E86665C((uint64_t)&a43);
  sub_20E86177C(&a45);

  _Unwind_Resume(a1);
}

void sub_20E8A6CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E8A6CB0(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;
  char *v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  char *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  char *v27;
  char *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  const void *v32;
  char *v33;
  char *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  const void *v38;
  char *v39;
  char *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  const void *v44;
  size_t v45;
  char *v46;
  char *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  const void *v51;
  char *v52;
  char *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  const void *v57;
  char *v58;
  char *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  const void *v63;
  char *v64;
  char *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  const void *v69;
  char *v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  id v74;

  v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v74 = v3;
  v4 = objc_msgSend(v3, "length");
  v5 = v4;
  *(_QWORD *)a1 = v4;
  if (!objc_msgSend(v74, "points")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 49, (uint64_t)"cloud.points", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_124:
    abort();
  }
  v6 = objc_msgSend(v74, "points");
  v7 = (const void *)v6;
  if (!v4 || v6)
  {
    v8 = 16 * v4;
    if (!v4)
    {
      v10 = 0;
      v9 = 0;
      v12 = (_QWORD *)(a1 + 8);
      v11 = *(void **)(a1 + 8);
      if (!v11)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = 16 * v4;
  }
  if (v4 < 0)
    sub_20E867F44();
  v9 = (char *)operator new(v8);
  v10 = &v9[16 * v4];
  memcpy(v9, v7, v8);
  v12 = (_QWORD *)(a1 + 8);
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
LABEL_10:
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
LABEL_11:
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v10;
  if (!objc_msgSend(v74, "undistortedCameraPixels")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 51, (uint64_t)"cloud.undistortedCameraPixels", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v13 = objc_msgSend(v74, "undistortedCameraPixels");
  v14 = (const void *)v13;
  if (!v4 || v13)
  {
    if (!v4)
    {
      v16 = 0;
      v15 = 0;
      v18 = (_QWORD *)(a1 + 32);
      v17 = *(void **)(a1 + 32);
      if (!v17)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = (char *)operator new(v8);
  v16 = &v15[16 * v4];
  memcpy(v15, v14, v8);
  v18 = (_QWORD *)(a1 + 32);
  v17 = *(void **)(a1 + 32);
  if (v17)
  {
LABEL_19:
    *(_QWORD *)(a1 + 40) = v17;
    operator delete(v17);
    *v18 = 0;
    v18[1] = 0;
    v18[2] = 0;
  }
LABEL_20:
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v16;
  if (!objc_msgSend(v74, "cameraPixels")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 54, (uint64_t)"cloud.cameraPixels", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v19 = objc_msgSend(v74, "cameraPixels");
  v20 = (const void *)v19;
  if (!v4 || v19)
  {
    if (!v4)
    {
      v22 = 0;
      v21 = 0;
      v24 = (_QWORD *)(a1 + 56);
      v23 = *(void **)(a1 + 56);
      if (!v23)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v21 = (char *)operator new(v8);
  v22 = &v21[16 * v4];
  memcpy(v21, v20, v8);
  v24 = (_QWORD *)(a1 + 56);
  v23 = *(void **)(a1 + 56);
  if (v23)
  {
LABEL_28:
    *(_QWORD *)(a1 + 64) = v23;
    operator delete(v23);
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
  }
LABEL_29:
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v22;
  if (!objc_msgSend(v74, "echoIds")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 56, (uint64_t)"cloud.echoIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v25 = objc_msgSend(v74, "echoIds");
  v26 = (const void *)v25;
  if (!v4 || v25)
  {
    if (!v4)
    {
      v28 = 0;
      v27 = 0;
      v30 = (_QWORD *)(a1 + 80);
      v29 = *(void **)(a1 + 80);
      if (!v29)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v27 = (char *)operator new(v4);
  v28 = &v27[v4];
  memcpy(v27, v26, v4);
  v30 = (_QWORD *)(a1 + 80);
  v29 = *(void **)(a1 + 80);
  if (v29)
  {
LABEL_37:
    *(_QWORD *)(a1 + 88) = v29;
    operator delete(v29);
    *v30 = 0;
    v30[1] = 0;
    v30[2] = 0;
  }
LABEL_38:
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v28;
  if (!objc_msgSend(v74, "bankIds")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 58, (uint64_t)"cloud.bankIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v31 = objc_msgSend(v74, "bankIds");
  v32 = (const void *)v31;
  if (!v4 || v31)
  {
    if (!v4)
    {
      v34 = 0;
      v33 = 0;
      v36 = (_QWORD *)(a1 + 104);
      v35 = *(void **)(a1 + 104);
      if (!v35)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v33 = (char *)operator new(v4);
  v34 = &v33[v4];
  memcpy(v33, v32, v4);
  v36 = (_QWORD *)(a1 + 104);
  v35 = *(void **)(a1 + 104);
  if (v35)
  {
LABEL_46:
    *(_QWORD *)(a1 + 112) = v35;
    operator delete(v35);
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
  }
LABEL_47:
  *(_QWORD *)(a1 + 104) = v33;
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v34;
  if (!objc_msgSend(v74, "spotIds")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 60, (uint64_t)"cloud.spotIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v37 = objc_msgSend(v74, "spotIds");
  v38 = (const void *)v37;
  if (!v4 || v37)
  {
    if (!v4)
    {
      v40 = 0;
      v39 = 0;
      v42 = (_QWORD *)(a1 + 128);
      v41 = *(void **)(a1 + 128);
      if (!v41)
        goto LABEL_56;
      goto LABEL_55;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v39 = (char *)operator new(v4);
  v40 = &v39[v4];
  memcpy(v39, v38, v4);
  v42 = (_QWORD *)(a1 + 128);
  v41 = *(void **)(a1 + 128);
  if (v41)
  {
LABEL_55:
    *(_QWORD *)(a1 + 136) = v41;
    operator delete(v41);
    *v42 = 0;
    v42[1] = 0;
    v42[2] = 0;
  }
LABEL_56:
  *(_QWORD *)(a1 + 128) = v39;
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)(a1 + 144) = v40;
  if (!objc_msgSend(v74, "confidences")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 62, (uint64_t)"cloud.confidences", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v43 = objc_msgSend(v74, "confidences");
  v44 = (const void *)v43;
  if (!v4 || v43)
  {
    if (!v4)
    {
      v47 = 0;
      v46 = 0;
      v45 = 0;
      v49 = (_QWORD *)(a1 + 152);
      v48 = *(void **)(a1 + 152);
      if (!v48)
        goto LABEL_65;
      goto LABEL_64;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v45 = 4 * v4;
  v46 = (char *)operator new(v45);
  v47 = &v46[v45];
  memcpy(v46, v44, v45);
  v49 = (_QWORD *)(a1 + 152);
  v48 = *(void **)(a1 + 152);
  if (v48)
  {
LABEL_64:
    *(_QWORD *)(a1 + 160) = v48;
    operator delete(v48);
    *v49 = 0;
    v49[1] = 0;
    v49[2] = 0;
  }
LABEL_65:
  *(_QWORD *)(a1 + 152) = v46;
  *(_QWORD *)(a1 + 160) = v47;
  *(_QWORD *)(a1 + 168) = v47;
  if (!objc_msgSend(v74, "signalToNoiseRatios")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 64, (uint64_t)"cloud.signalToNoiseRatios", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v50 = objc_msgSend(v74, "signalToNoiseRatios");
  v51 = (const void *)v50;
  if (!v4 || v50)
  {
    if (!v4)
    {
      v53 = 0;
      v52 = 0;
      v55 = (_QWORD *)(a1 + 176);
      v54 = *(void **)(a1 + 176);
      if (!v54)
        goto LABEL_74;
      goto LABEL_73;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = (char *)operator new(v45);
  v53 = &v52[4 * v4];
  memcpy(v52, v51, v45);
  v55 = (_QWORD *)(a1 + 176);
  v54 = *(void **)(a1 + 176);
  if (v54)
  {
LABEL_73:
    *(_QWORD *)(a1 + 184) = v54;
    operator delete(v54);
    *v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
  }
LABEL_74:
  *(_QWORD *)(a1 + 176) = v52;
  *(_QWORD *)(a1 + 184) = v53;
  *(_QWORD *)(a1 + 192) = v53;
  if (!objc_msgSend(v74, "intensities")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 66, (uint64_t)"cloud.intensities", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v56 = objc_msgSend(v74, "intensities");
  v57 = (const void *)v56;
  if (!v4 || v56)
  {
    if (!v4)
    {
      v59 = 0;
      v58 = 0;
      v61 = (_QWORD *)(a1 + 200);
      v60 = *(void **)(a1 + 200);
      if (!v60)
        goto LABEL_83;
      goto LABEL_82;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v58 = (char *)operator new(v45);
  v59 = &v58[4 * v4];
  memcpy(v58, v57, v45);
  v61 = (_QWORD *)(a1 + 200);
  v60 = *(void **)(a1 + 200);
  if (v60)
  {
LABEL_82:
    *(_QWORD *)(a1 + 208) = v60;
    operator delete(v60);
    *v61 = 0;
    v61[1] = 0;
    v61[2] = 0;
  }
LABEL_83:
  *(_QWORD *)(a1 + 200) = v58;
  *(_QWORD *)(a1 + 208) = v59;
  *(_QWORD *)(a1 + 216) = v59;
  if (!objc_msgSend(v74, "euclideanDistances")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 68, (uint64_t)"cloud.euclideanDistances", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v62 = objc_msgSend(v74, "euclideanDistances");
  v63 = (const void *)v62;
  if (!v4 || v62)
  {
    if (!v4)
    {
      v65 = 0;
      v64 = 0;
      v67 = (_QWORD *)(a1 + 224);
      v66 = *(void **)(a1 + 224);
      if (!v66)
        goto LABEL_92;
      goto LABEL_91;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v64 = (char *)operator new(v45);
  v65 = &v64[4 * v4];
  memcpy(v64, v63, v45);
  v67 = (_QWORD *)(a1 + 224);
  v66 = *(void **)(a1 + 224);
  if (v66)
  {
LABEL_91:
    *(_QWORD *)(a1 + 232) = v66;
    operator delete(v66);
    *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
  }
LABEL_92:
  *(_QWORD *)(a1 + 224) = v64;
  *(_QWORD *)(a1 + 232) = v65;
  *(_QWORD *)(a1 + 240) = v65;
  if (!objc_msgSend(v74, "flags")
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 70, (uint64_t)"cloud.flags", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_124;
  }
  v68 = objc_msgSend(v74, "flags");
  v69 = (const void *)v68;
  if (!v4 || v68)
  {
    if (!v4)
    {
      v71 = 0;
      v70 = 0;
      v73 = (_QWORD *)(a1 + 248);
      v72 = *(void **)(a1 + 248);
      if (!v72)
        goto LABEL_101;
      goto LABEL_100;
    }
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v70 = (char *)operator new(v45);
  v71 = &v70[4 * v5];
  memcpy(v70, v69, v45);
  v73 = (_QWORD *)(a1 + 248);
  v72 = *(void **)(a1 + 248);
  if (v72)
  {
LABEL_100:
    *(_QWORD *)(a1 + 256) = v72;
    operator delete(v72);
    *v73 = 0;
    v73[1] = 0;
    v73[2] = 0;
  }
LABEL_101:
  *(_QWORD *)(a1 + 248) = v70;
  *(_QWORD *)(a1 + 256) = v71;
  *(_QWORD *)(a1 + 264) = v71;

}

void sub_20E8A7798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11)
{
  _QWORD *v11;

  sub_20E86177C(v11);

  _Unwind_Resume(a1);
}

void sub_20E8A7834(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30[34];

  v3 = a1;
  if (v3)
  {
    sub_20E8A6CB0((uint64_t)v30, v3);
    sub_20E8A049C(&v7, v30);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 72) = v13;
    *(_QWORD *)(a2 + 96) = v15;
    *(_QWORD *)(a2 + 120) = v17;
    v4 = v21;
    *(_QWORD *)(a2 + 144) = v19;
    *(_QWORD *)(a2 + 168) = v4;
    v5 = v25;
    *(_QWORD *)(a2 + 192) = v23;
    *(_QWORD *)(a2 + 216) = v5;
    v6 = v29;
    *(_QWORD *)(a2 + 240) = v27;
    *(_OWORD *)(a2 + 8) = v8;
    v8 = 0uLL;
    *(_OWORD *)(a2 + 32) = v10;
    v9 = 0;
    v10 = 0uLL;
    v11 = 0;
    *(_OWORD *)(a2 + 56) = v12;
    v12 = 0uLL;
    *(_OWORD *)(a2 + 80) = v14;
    v13 = 0;
    v14 = 0uLL;
    v15 = 0;
    *(_OWORD *)(a2 + 104) = v16;
    v16 = 0uLL;
    *(_OWORD *)(a2 + 128) = v18;
    v17 = 0;
    v18 = 0uLL;
    v19 = 0;
    *(_OWORD *)(a2 + 152) = v20;
    v20 = 0uLL;
    *(_OWORD *)(a2 + 176) = v22;
    v21 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_OWORD *)(a2 + 200) = v24;
    v24 = 0uLL;
    *(_OWORD *)(a2 + 224) = v26;
    v25 = 0;
    v26 = 0uLL;
    v27 = 0;
    *(_OWORD *)(a2 + 248) = v28;
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 264) = v6;
    sub_20E86177C(&v7);
    *(_BYTE *)(a2 + 288) = 0;
    sub_20E86177C(v30);

  }
  else
  {
    *(_QWORD *)(a2 + 288) = 0;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;

  }
}

void sub_20E8A79E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;

  sub_20E86177C(&a43);

  _Unwind_Resume(a1);
}

void sub_20E8A79FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_20E8A7A0C(uint64_t a1)
{
  void *v1;
  BOOL v2;

  v1 = *(void **)(a1 + 272);
  if (*(_BYTE *)(a1 + 288))
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  CFRetain(*(CFTypeRef *)(a1 + 272));
  return v1;
}

void sub_20E8A7A58(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v3 = a1;
  if (!v3)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
LABEL_7:

    return;
  }
  v10 = v3;
  v4 = (std::__shared_weak_count_vtbl *)v3;
  v5 = (std::__shared_weak_count *)operator new();
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD838;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = v10;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    goto LABEL_7;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);

}

void sub_20E8A7B4C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8A7B60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

id sub_20E8A7B78(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;

  v2 = *(void **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (*(_BYTE *)(a1 + 16))
      v8 = v2 == 0;
    else
      v8 = 1;
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_20:
    if (*(_BYTE *)(a1 + 16))
      v7 = v2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
LABEL_17:
      CFRetain(v2);
      return v2;
    }
  }
  return 0;
}

void sub_20E8A7C2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8A7C50(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

uint64_t sub_20E8A7C6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8A7CE0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8A7D04(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

uint64_t sub_20E8A7D20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11apple_depth24MakeCameraCalibrationRefEPK19ADCameraCalibrationE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11apple_depth24MakeCameraCalibrationRefEPK19ADCameraCalibrationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11apple_depth24MakeCameraCalibrationRefEPK19ADCameraCalibrationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11apple_depth24MakeCameraCalibrationRefEPK19ADCameraCalibrationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8A7D90(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  sub_20E8A7DC4(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x24BE2CA98]);
}

void sub_20E8A7DB8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X8>)
{
  sub_20E8A8034(a1, a2, a3, a4, a5, MEMORY[0x24BE2CA90], a6);
}

void sub_20E8A7DC4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(void *, void *, void *, id, uint64_t, uint64_t, void *, void *, id *))
{
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  uint64_t *v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  void *context;
  id v33;
  __int128 v34;

  context = (void *)MEMORY[0x212BC6CE0]();
  if (*(_BYTE *)(a4 + 16))
    v19 = *(void **)a4;
  else
    v19 = 0;
  v20 = v19;
  if ((a7 & 0xFF00000000) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a8 & 0xFF00000000) != 0)
    {
LABEL_6:
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a8);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
  }
  else
  {
    v21 = 0;
    if ((a8 & 0xFF00000000) != 0)
      goto LABEL_6;
  }
  v22 = 0;
LABEL_9:
  if (*((char *)a1 + 23) >= 0)
    v23 = a1;
  else
    v23 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v25 = a2;
  else
    v25 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v27 = a3;
  else
    v27 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  a10(v24, v26, v28, v20, a5, a6, v21, v22, &v33);
  v29 = v33;

  v30 = v29;
  v31 = v30;
  if (v30)
  {
    sub_20E8A8370((std::__shared_weak_count_vtbl **)&v34, (std::__shared_weak_count_vtbl *)v30, 0);
    *(_OWORD *)a9 = v34;
    *(_BYTE *)(a9 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 16) = 0;
  }

  objc_autoreleasePoolPop(context);
}

void sub_20E8A7FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20E8A7FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E8A7FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20E8A7FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_20E8A801C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20E8A8034(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, void (*a6)(void *, void *, void *, id, void *, id *)@<X5>, uint64_t a7@<X8>)
{
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count_vtbl *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t *v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  uint64_t *v25;
  void *v26;
  id v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count_vtbl *v29;
  void *context;
  id v34;
  id v35;
  id v36;
  __int128 v37;

  context = (void *)MEMORY[0x212BC6CE0]();
  if (*(_BYTE *)(a4 + 16))
    v11 = *(void **)a4;
  else
    v11 = 0;
  v34 = v11;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *a5;
  v14 = a5[1];
  if (*a5 == v14)
  {
LABEL_9:
    if (*((char *)a1 + 23) >= 0)
      v21 = a1;
    else
      v21 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)a2 + 23) >= 0)
      v23 = a2;
    else
      v23 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)a3 + 23) >= 0)
      v25 = a3;
    else
      v25 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0;
    a6(v22, v24, v26, v34, v12, &v35);
    v27 = v35;

    v28 = (std::__shared_weak_count_vtbl *)v27;
    v16 = v28;
    if (v28)
    {
      v16 = v28;
      sub_20E8A8370((std::__shared_weak_count_vtbl **)&v37, v16, 0);
      *(_OWORD *)a7 = v37;
      *(_BYTE *)(a7 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 16) = 0;
    }
    v29 = v16;
  }
  else
  {
    while (1)
    {
      v15 = v13;
      if (*((char *)v13 + 23) < 0)
        v15 = (uint64_t *)*v13;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v15);
      v16 = (std::__shared_weak_count_vtbl *)objc_claimAutoreleasedReturnValue();
      v17 = objc_alloc(MEMORY[0x24BE2CAA0]);
      v18 = *((unsigned __int8 *)v13 + 24);
      v36 = 0;
      v19 = (void *)objc_msgSend(v17, "initWithPath:transferOwnership:errorOut:", v16, v18, &v36);
      v20 = v36;
      if (v20)
        break;
      objc_msgSend(v12, "addObject:", v19);

      v13 += 4;
      if (v13 == v14)
        goto LABEL_9;
    }
    v29 = (std::__shared_weak_count_vtbl *)v20;
    sub_20E8A8370((std::__shared_weak_count_vtbl **)&v37, v29, 0);
    *(_OWORD *)a7 = v37;
    *(_BYTE *)(a7 + 16) = 1;

  }
  objc_autoreleasePoolPop(context);
}

void sub_20E8A8290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_20E8A833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20E8A8370(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E8A8478(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20E8A844C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8A8464(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8A8478(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AD888;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8A84D8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8A84F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8A8508(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8A852C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_20E8A854C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E8A85BC()
{
  uint64_t v0;
  std::__shared_weak_count_vtbl *v1;
  std::__shared_weak_count *v2;
  CFTypeRef v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  CFTypeID v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  const void *ValueAtIndex;
  CFIndex v12;
  CFTypeID v13;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  BOOL v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef cf;
  std::__shared_weak_count *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::string __p;
  char v36;

  v0 = (uint64_t)SecTaskCreateFromSelf(0);
  sub_20E8A8894(&v33, (std::__shared_weak_count_vtbl *)v0, 0);
  if (!v0)
    goto LABEL_39;
  v1 = (std::__shared_weak_count_vtbl *)SecTaskCopyValueForEntitlement((SecTaskRef)v0, CFSTR("com.apple.security.application-groups"), 0);
  sub_20E8A8894((std::__shared_weak_count_vtbl **)&cf, v1, 0);
  v3 = cf;
  v2 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v3)
        goto LABEL_8;
LABEL_33:
      v21 = v32;
      if (v32)
      {
        v22 = (unint64_t *)&v32->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v0 = 0;
LABEL_39:
      v24 = v34;
      if (!v34)
        return v0;
      goto LABEL_40;
    }
  }
  if (!v3)
    goto LABEL_33;
LABEL_8:
  v7 = CFGetTypeID(cf);
  if (v7 != CFArrayGetTypeID())
    goto LABEL_33;
  v8 = (const __CFArray *)cf;
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (!Count)
    goto LABEL_33;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, v10);
    v12 = (CFIndex)ValueAtIndex;
    if (ValueAtIndex)
    {
      v13 = CFGetTypeID(ValueAtIndex);
      if (v13 == CFStringGetTypeID())
      {
        sub_20EA5E5C4(v12, &__p);
        if (v36)
          break;
      }
    }
LABEL_13:
    if (Count == ++v10)
      goto LABEL_33;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size != 24
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_p = &__p)
      : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        (v16 = p_p->__r_.__value_.__r.__words[0],
         v17 = p_p->__r_.__value_.__l.__size_,
         v18 = p_p->__r_.__value_.__r.__words[2],
         v16 == 0x6F632E70756F7267)
      ? (v19 = v17 == 0x2E656C7070612E6DLL)
      : (v19 = 0),
        v19 ? (v20 = v18 == 0x6E67642E64337663) : (v20 = 0),
        !v20))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = v32;
  if (v32)
  {
    v29 = (unint64_t *)&v32->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v0 = 1;
  v24 = v34;
  if (v34)
  {
LABEL_40:
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v0;
}

void sub_20E8A8860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20E8A8894(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E8A9534(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD8D8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20E8A8970(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8A8988(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8A899C(std::string *a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;
  CFStringRef v5;
  std::string::size_type size;
  std::string *p_p;
  uint64_t (***v8)();
  uint64_t (***v9)();
  std::string __p;
  char v11;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "containerURLForSecurityApplicationGroupIdentifier:", CFSTR("group.com.apple.cv3d.dgn"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = v3;
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/ServerClient.mm", 96, (uint64_t)"file_url", 8, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v5 = CFURLCopyFileSystemPath((CFURLRef)v3, kCFURLPOSIXPathStyle);
  sub_20EA5E5C4((CFIndex)v5, &__p);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  sub_20E8A9678(a1, p_p, (std::string *)((char *)p_p + size));
  v8 = sub_21022700C();
  if (sub_210224F4C((uint64_t)a1, (uint64_t)v8))
  {
    v9 = sub_21022700C();
    sub_210224F34((uint64_t)a1, (uint64_t)v9);
  }
  CFRelease(v5);
  if (v11 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_20E8A8ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_20E8A8AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_20E8A8AFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20E8A8A8CLL);
}

uint64_t sub_20E8A8B40(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 23) < 0)
  {
    operator delete(*(void **)result);
    return v1;
  }
  return result;
}

char *sub_20E8A8B84()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A710);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A710))
    return byte_254A5A720;
  sub_20E8A8C18();
  __cxa_atexit((void (*)(void *))sub_20E8A8B40, byte_254A5A720, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A710);
  return byte_254A5A720;
}

void sub_20E8A8C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A710);
  _Unwind_Resume(a1);
}

void sub_20E8A8C18()
{
  if (sub_20E8A85BC())
    sub_20E8A899C((std::string *)&xmmword_254A5A720);
  else
    std::__fs::filesystem::__temp_directory_path((std::__fs::filesystem::path *)&xmmword_254A5A720, 0);
}

void sub_20E8A8C44(_QWORD *(*a1)(std::string *__return_ptr)@<X0>, int *(*a2)()@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  unsigned __int8 v6;
  int *(*v7)();
  uint64_t v8;
  unsigned __int8 v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  void *v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  int v17;
  std::string v18;
  std::string __dst;
  std::string v20;
  std::string __s;
  std::string v22;
  std::string __p;
  char v24;
  std::string v25;
  char v26;
  _QWORD v27[2];
  std::__fs::filesystem::path v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    sub_20E9E4320(sub_20E8A8C44, &__p);
    if (v24)
    {
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
      v26 = 1;
      goto LABEL_3;
    }
    v25.__r_.__value_.__s.__data_[0] = 0;
    v26 = 0;
LABEL_8:
    v7 = sub_20E87C634;
    if (a2)
      v7 = a2;
    v8 = ((uint64_t (*)(_QWORD *))v7)(v5);
    v9 = atomic_load((unsigned __int8 *)&qword_254A5A710);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A710))
    {
      sub_20E8A8C18();
      __cxa_atexit((void (*)(void *))sub_20E8A8B40, byte_254A5A720, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5A710);
    }
    sub_20E8A9280((int *)v8);
    if (*(_BYTE *)(v8 + 32))
    {
      if (*(char *)(v8 + 31) < 0)
        sub_20E860C04(&__dst, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      else
        __dst = *(std::string *)(v8 + 8);
    }
    else
    {
      __dst = v18;
      *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
      v18.__r_.__value_.__r.__words[0] = 0;
    }
    sub_210236E50(&__dst, ".", 1, "_", 1uLL, 0, 0, (uint64_t)&v20);
    v14 = std::string::insert(&v20, 0, "process_diagnostics_", 0x14uLL);
    v15 = v14->__r_.__value_.__r.__words[0];
    v27[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v28.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v27 + 7);
    v28.__pn_.__r_.__value_.__r.__words[0] = v15;
    v28.__pn_.__r_.__value_.__l.__size_ = v27[0];
    *((_BYTE *)&v28.__pn_.__r_.__value_.__s + 23) = v16;
    if (byte_254A5A720[23] < 0)
      sub_20E860C04(&v22, *(void **)byte_254A5A720, *(unint64_t *)&byte_254A5A720[8]);
    else
      v22 = *(std::string *)byte_254A5A720;
    sub_20E8A944C((uint64_t)&v22, &v28);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::string *)a3 = v22;
      memset(&__p, 0, sizeof(__p));
      if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
LABEL_39:
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_34:
        operator delete(v20.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_35;
        goto LABEL_41;
      }
LABEL_40:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_35:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_44;
LABEL_42:
        v13 = (void *)v18.__r_.__value_.__r.__words[0];
        goto LABEL_43;
      }
LABEL_41:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_42;
    }
    sub_20E860C04(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    v17 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
    *(std::string *)a3 = __p;
    memset(&__p, 0, sizeof(__p));
    if (v17 < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_33:
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_34;
    goto LABEL_40;
  }
  v5 = a1(&v25);
  if (!v26)
    goto LABEL_8;
LABEL_3:
  v6 = atomic_load((unsigned __int8 *)&qword_254A5A710);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A710))
  {
    sub_20E8A8C18();
    __cxa_atexit((void (*)(void *))sub_20E8A8B40, byte_254A5A720, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A710);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__s, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    __s = v25;
  sub_210236E50(&__s, ".", 1, "_", 1uLL, 0, 0, (uint64_t)&v22);
  v10 = std::string::insert(&v22, 0, "bundle_diagnostics_", 0x13uLL);
  v11 = v10->__r_.__value_.__r.__words[0];
  v28.__pn_.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v28.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v28.__pn_.__r_.__value_.__r.__words + 7);
  __p.__r_.__value_.__r.__words[0] = v11;
  __p.__r_.__value_.__l.__size_ = v28.__pn_.__r_.__value_.__r.__words[0];
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v12;
  if (byte_254A5A720[23] < 0)
  {
    sub_20E860C04((_BYTE *)a3, *(void **)byte_254A5A720, *(unint64_t *)&byte_254A5A720[8]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)byte_254A5A720;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&byte_254A5A720[16];
  }
  sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_23:
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
LABEL_20:
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_24:
  v13 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_43:
  operator delete(v13);
LABEL_44:
  if (v26)
  {
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_20E8A90E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  __cxa_guard_abort(&qword_254A5A710);
  if (*(_BYTE *)(v47 - 104))
  {
    if (*(char *)(v47 - 105) < 0)
    {
      operator delete(*(void **)(v47 - 128));
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A9280(int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9AD948[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9AD930[v3])(v5, v2);
  return result;
}

void sub_20E8A936C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8A9384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *sub_20E8A93A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A718))
    return &unk_254A5A738;
  sub_20E8A8C44(0, 0, (uint64_t)&unk_254A5A738);
  __cxa_atexit((void (*)(void *))sub_20E8A8B40, &unk_254A5A738, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A718);
  return &unk_254A5A738;
}

void sub_20E8A9434(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A718);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A944C(uint64_t a1, std::__fs::filesystem::path *this)
{
  char v4;
  __int128 v5;
  int v7;
  std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  std::__fs::filesystem::path *v10;
  size_t size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if ((std::__fs::filesystem::path *)a1 == this)
      return a1;
    v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*(char *)(a1 + 23) < 0)
    {
      if (v4 >= 0)
        v10 = this;
      else
        v10 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      if (v4 >= 0)
        size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      else
        size = this->__pn_.__r_.__value_.__l.__size_;
      sub_20E867CBC((void **)a1, v10, size);
      return a1;
    }
    else
    {
      if ((*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&this->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v5;
        return a1;
      }
      sub_20E867BF8((_QWORD *)a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      return a1;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1).__size_)
      std::string::push_back((std::string *)a1, 47);
    v7 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v7 >= 0)
      v8 = this;
    else
      v8 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v9 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      v9 = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a1, (const std::string::value_type *)v8, v9);
    return a1;
  }
}

_QWORD *sub_20E8A9534(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AD8D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8A9594(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8A95AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8A95C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8A95E8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_20E8A9608(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::string *sub_20E8A9678(std::string *this, std::string *__src, std::string *a3)
{
  int v6;
  size_t v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  std::string *v15;
  void *v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  std::string::size_type *v27;
  unint64_t v28;
  __int128 v29;
  std::string::value_type v30;
  std::string::size_type v31;
  void **__dst;
  size_t v34;
  int64_t v35;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v11 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size >= v7)
      {
        v17 = this;
        if ((v10 & 0x80) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9)
        sub_20E860B7C();
      v15 = this;
      if (v6 < 0)
      {
        v15 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_16:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_18:
            if (v9 != 22)
              operator delete(v15);
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
LABEL_22:
            v17 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_23:
            v18 = (char *)v17 + size;
            if (a3 != __src)
            {
              if (v7 >= 0x20)
              {
                if ((unint64_t)((char *)v17 + size - (char *)__src) >= 0x20)
                {
                  v19 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
                  v18 += v7 & 0xFFFFFFFFFFFFFFE0;
                  v26 = (_OWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + size);
                  v27 = &__src->__r_.__value_.__r.__words[2];
                  v28 = v7 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v29 = *(_OWORD *)v27;
                    *(v26 - 1) = *((_OWORD *)v27 - 1);
                    *v26 = v29;
                    v26 += 2;
                    v27 += 4;
                    v28 -= 32;
                  }
                  while (v28);
                  if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
                    goto LABEL_54;
                }
                else
                {
                  v19 = __src;
                }
              }
              else
              {
                v19 = __src;
              }
              do
              {
                v30 = v19->__r_.__value_.__s.__data_[0];
                v19 = (std::string *)((char *)v19 + 1);
                *v18++ = v30;
              }
              while (v19 != a3);
            }
LABEL_54:
            *v18 = 0;
            v31 = v7 + size;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
              this->__r_.__value_.__l.__size_ = v31;
            else
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            return this;
          }
LABEL_17:
          memmove(v16, v15, size);
          goto LABEL_18;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_16;
      }
      v24 = 2 * v9;
      if (v7 + size > 2 * v9)
        v24 = v7 + size;
      v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v25 = v24 | 7;
      if (v24 >= 0x17)
        v14 = v25 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!size)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v7 > 0x16)
  {
    v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v20 = v7 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v7;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_30;
    goto LABEL_29;
  }
  HIBYTE(v35) = (_BYTE)a3 - (_BYTE)__src;
  p_dst = (void **)&__dst;
  if (a3 != __src)
  {
LABEL_29:
    memcpy(p_dst, __src, v7);
    p_dst = (void **)((char *)p_dst + v7);
  }
LABEL_30:
  *(_BYTE *)p_dst = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35);
  else
    v23 = v34;
  std::string::append(this, v22, v23);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  return this;
}

void sub_20E8A9964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8A9980(int a1, int a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v7;
  uint64_t v8;

  v4 = atomic_load((unsigned __int8 *)&qword_254A5A750);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A750))
  {
    qword_254A5A770 = (uint64_t)sub_20E8AA07C(5, 13, 16, 8);
    qword_254A5A778 = v7;
    __cxa_guard_release(&qword_254A5A750);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254A5A758);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A758))
  {
    qword_254A5A780 = (uint64_t)sub_20E8A9F28(13, 10, 5, 11, 4);
    qword_254A5A788 = v8;
    __cxa_guard_release(&qword_254A5A758);
  }
  return sub_20E8A9D04(a1, a2, qword_254A5A770, qword_254A5A778, 5, 13, 16, 8, qword_254A5A780, qword_254A5A788, 5, 13, 10, 11, 4);
}

void sub_20E8A9A90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A758);
  _Unwind_Resume(a1);
}

void sub_20E8A9AA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A750);
  _Unwind_Resume(a1);
}

double sub_20E8A9AC0(double a1)
{
  unsigned __int8 v2;
  uint64_t v4;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A760);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A760))
  {
    qword_254A5A790 = (uint64_t)sub_20E8AA3B8(6, 13, 13, 7);
    qword_254A5A798 = v4;
    __cxa_guard_release(&qword_254A5A760);
  }
  return sub_20E8AA2BC(qword_254A5A790, qword_254A5A798, 6, 13, 13, 7, a1);
}

void sub_20E8A9B4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A760);
  _Unwind_Resume(a1);
}

double sub_20E8A9B64(uint64_t a1, double a2)
{
  double result;

  if (a2 == 0.0)
    return 0.0;
  *(_QWORD *)&result = (-1 << (53 - a1)) & COERCE_UNSIGNED_INT64(COERCE_DOUBLE((*(_QWORD *)&a2 - (a1 << 52)) & 0xFFF0000000000000)+ a2);
  return result;
}

void sub_20E8A9BB0(double a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A768);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A768))
  {
    qword_254A5A7A0 = (uint64_t)sub_20E8AA07C(7, 16, 17, 9);
    qword_254A5A7A8 = v3;
    __cxa_guard_release(&qword_254A5A768);
  }
  sub_20E8A9F98(qword_254A5A7A0, qword_254A5A7A8, 7, 16, 17, 9, fabs(a1));
}

void sub_20E8A9C4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A768);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8A9C64(uint64_t a1, uint64_t a2, int a3, int a4, char a5, char a6, int a7, int a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;

  if (1 << (a4 - 1) <= a3)
    return (1 << (a5 - 1));
  v8 = a4 - 1 - a6;
  v9 = (a3 >> v8) & ~(1 << a6);
  v10 = a3 - (a3 >> v8 << v8) + (-1 << (v8 - 1));
  v11 = 4 * v9;
  v12 = *(_DWORD *)(a1 + v11);
  v13 = *(_DWORD *)(a2 + v11);
  v14 = a8 + a4;
  v15 = a8 + a4 - (a7 + 2);
  v16 = a7 + 2 - (a8 + a4);
  if (a7 + 2 > a8 + a4)
    v15 = 0;
  if (a7 + 2 <= v14)
    v16 = 0;
  v17 = v14 + ~a5;
  if (a7 + 2 > a8 + a4)
    v17 = a7 - a5 + 1;
  return ((((((v13 * v10) << v16) + (v12 << v15)) >> (v17 - 1)) + 1) >> 1);
}

uint64_t sub_20E8A9D04(int a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, int a14, int a15)
{
  uint64_t v15;
  unsigned int v18;
  unsigned int v19;
  int v20;
  double v21;
  int v22;
  double v23;
  long double v24;
  uint64_t v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  char v31;
  double v33;
  double v34;
  double v35;
  BOOL v38;
  char v39;
  char v40;
  long double v41;

  if (a2 >= 0)
    v18 = a2;
  else
    v18 = -a2;
  if (a1 >= 0)
    v19 = a1;
  else
    v19 = -a1;
  if (v18 >= v19)
    v20 = v19;
  else
    v20 = v18;
  v21 = (double)v20;
  if (v18 <= v19)
    v22 = v19;
  else
    v22 = v18;
  v23 = sub_20E8A9F98(a3, a4, a5, a6, a7, a8, COERCE_DOUBLE((-1 << (53 - a6)) & COERCE_UNSIGNED_INT64((double)v22)))* COERCE_DOUBLE(v15 & *(_QWORD *)&v21);
  v24 = ldexp(1.0, a12 - 1);
  v25 = sub_20E8A9C64(a9, a10, (int)(v23 * v24 + 0.5), a12, a13, a11, a14, a15);
  if (((a2 | a1) & 0x80000000) == 0 && v18 >= v19)
    return v25;
  v26 = v18 >= v19;
  if (((a2 | a1) & 0x80000000) == 0 && v18 < v19)
  {
    v27 = ldexp(1.0, a13 + 1);
    v28 = 0.5;
LABEL_18:
    v29 = v27 * v28;
    return ((int)v29 - v25);
  }
  v30 = a1 >= 0 && a2 < 0;
  v31 = !v30;
  if (v30 && v18 < v19)
  {
    v34 = ldexp(1.0, a13 + 1);
    v35 = 0.5;
LABEL_38:
    v33 = v34 * v35;
    return (v25 + (int)v33);
  }
  if (v18 < v19)
    v31 = 1;
  if ((v31 & 1) == 0)
  {
    v29 = ldexp(1.0, a13 + 1);
    return ((int)v29 - v25);
  }
  if ((a2 & a1) < 0 != __OFSUB__(v18, v19) && v18 >= v19)
  {
    v33 = ldexp(1.0, a13 + 1);
    return (v25 + (int)v33);
  }
  if ((a2 & a1) < 0 && v18 < v19)
  {
    v27 = ldexp(1.0, a13 + 1);
    v28 = 1.5;
    goto LABEL_18;
  }
  v38 = a1 >= 0 || a2 < 0;
  v39 = v38;
  if (v38)
    v26 = 1;
  if (!v26)
  {
    v34 = ldexp(1.0, a13 + 1);
    v35 = 1.5;
    goto LABEL_38;
  }
  if (v18 < v19)
    v40 = 1;
  else
    v40 = v39;
  if ((v40 & 1) == 0)
  {
    v41 = ldexp(1.0, a13 + 1);
    v29 = v41 + v41;
    return ((int)v29 - v25);
  }
  return v25;
}

void *sub_20E8A9F28(int a1, int a2, int a3, int a4, int a5)
{
  BOOL v9;

  if (a1 == 10 && a2 == 7 && a3 == 3 && a4 == 7 && a5 == 3)
    return &unk_254A4B2B8;
  v9 = a1 == 13 && a2 == 10 && a3 == 5 && a4 == 11;
  if (v9 && a5 == 4)
    return &unk_254A4B2F8;
  else
    return 0;
}

double sub_20E8A9F98(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, double a7)
{
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  char v20;
  BOOL v21;
  char v22;
  int v23;
  unint64_t v24;

  v13 = sub_20E8AA574(a4, a7);
  v14 = ~a3 + a4;
  v15 = 4 * (int)((v13 >> v14) & ~(1 << a3));
  v16 = *(int *)(a1 + v15);
  v17 = (1 << (v14 - 1)) - v13 + (v13 >> v14 << v14);
  v18 = *(_DWORD *)(a2 + v15);
  v19 = a4 + a6 - 1;
  LODWORD(v15) = a4 + a6 - 2;
  v20 = a5 - v15;
  v21 = __OFSUB__((_DWORD)v15, a5);
  v23 = v15 - a5;
  v22 = (v23 < 0) ^ v21;
  if (v22)
    LOBYTE(v23) = 0;
  else
    v20 = 0;
  if (v22)
    v19 = a5 + 1;
  v24 = sub_20E8AA664(((v16 << v23) + (1 << (v19 - a4 - 2)) + ((v18 * (uint64_t)v17) << v20)) >> (v19 - a4 - 1), ~((v13 >> 16) >> 16), a4);
  return sub_20E8AA624(v24);
}

void *sub_20E8AA07C(int a1, int a2, int a3, int a4)
{
  BOOL v5;
  char v6;

  if (a1 == 3 && a2 == 9 && a3 == 10 && a4 == 6)
    return &unk_254A4C3F8;
  if (a4 == 7 && a1 == 5 && a2 == 11 && a3 == 13)
    return &unk_254A4C438;
  if (a4 == 7 && a1 == 5 && a2 == 12 && a3 == 12)
    return &unk_254A4C538;
  if (a1 == 5 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A4C638;
  if (a4 == 8 && a1 == 6 && a2 == 14 && a3 == 14)
    return &unk_254A4C738;
  if (a1 == 6 && a2 == 15 && a3 == 17 && a4 == 10)
    return &unk_254A4C938;
  if (a1 == 7 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A4CB38;
  if (a4 == 10 && a1 == 7 && a2 == 14 && a3 == 19)
    return &unk_254A4CF38;
  v5 = a1 == 7 && a2 == 16;
  v6 = v5;
  if (v5 && a3 == 17 && a4 == 9)
    return &unk_254A4D338;
  if (a3 != 20 || a4 != 11)
    v6 = 0;
  if ((v6 & 1) != 0)
    return &unk_254A4D738;
  if (a3 == 20 && a1 == 7 && a2 == 17 && a4 == 13)
    return &unk_254A4DB38;
  if (a1 != 9 || a2 != 21 || a3 != 26 || a4 != 15)
    abort();
  return &unk_254A4B3F8;
}

double sub_20E8AA2BC(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, double a7)
{
  unint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  char v24;
  int v25;
  unint64_t v26;

  v13 = sub_20E8AA574(a4, a7);
  v14 = v13 >> (a4 - a3);
  v15 = 1 << (a3 - 1);
  v16 = v14 & ~v15;
  if (((v13 >> 16) & 0x10000) == 0)
    v15 = 0;
  v17 = 4 * (v15 | v16);
  v18 = *(_DWORD *)(a1 + v17);
  v19 = *(_DWORD *)(a2 + v17);
  v20 = a6 + a4;
  v21 = a6 + a4 - 1 - a5;
  if (a6 + a4 - 1 < a5)
    v21 = 0;
  v22 = v18 << v21;
  v23 = ((1 << (a4 - a3 - 1)) - v13 + (v14 << (a4 - a3))) * v19;
  if (v20 - 1 >= a5)
    v24 = 0;
  else
    v24 = a5 - (a6 + a4 - 1);
  v25 = v23 << v24;
  if (v20 - 1 < a5)
    LOBYTE(v20) = a5 + 1;
  v26 = sub_20E8AA664((uint64_t)(v22 + (1 << (v20 - a4 - 2)) + v25) >> (v20 - a4 - 1), ~(unsigned __int16)((int)(((int)(v13 >> 16) >> 16) - (((v13 >> 16) & 0x10000) >> 16)) / 2), a4);
  return sub_20E8AA624(v26);
}

void *sub_20E8AA3B8(int a1, int a2, int a3, int a4)
{
  BOOL v5;
  char v6;
  char v7;

  if (a3 == 12 && a1 == 5 && a2 == 11 && a4 == 5)
    return &unk_254A4E338;
  if (a1 == 5 && a2 == 12 && a3 == 12 && a4 == 7)
    return &unk_254A4E438;
  if (a4 == 7 && a2 == 13 && a1 == 6 && a3 == 13)
    return &unk_254A4E538;
  if (a3 == 17 && a1 == 7 && a2 == 13 && a4 == 12)
    return &unk_254A4E738;
  v5 = a1 == 7 && a2 == 14;
  v6 = v5;
  if (v5 && a3 == 18 && a4 == 10)
    return &unk_254A4EB38;
  v7 = v6 ^ 1;
  if (a3 != 19)
    v7 = 1;
  if ((v7 & 1) == 0 && a4 == 9)
    return &unk_254A4EF38;
  if (a3 == 18 && a1 == 7 && a2 == 15 && a4 == 8)
    return &unk_254A4F338;
  if (a1 == 7 && a2 == 16 && a3 == 17 && a4 == 9)
    return &unk_254A4F738;
  if (a2 != 15 || a1 != 8 || a3 != 21 || a4 != 11)
    abort();
  return &unk_254A4FB38;
}

unint64_t sub_20E8AA574(char a1, double a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;

  if (a2 == 0.0)
    return 0;
  v3 = ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000uLL) >> (52 - a1)) + 1;
  v4 = v3 >> 1;
  v5 = v3 >> 1 >> a1;
  v6 = v3 >> 2;
  if (v5 == 1)
  {
    v7 = -1022;
  }
  else
  {
    LODWORD(v6) = v4;
    v7 = -1023;
  }
  return ((unint64_t)(a1 & 0x1F) << 49) | (*(_QWORD *)&a2 >> 15) & 0xFFFF000000000000 | v6 | ((unint64_t)(unsigned __int16)(v7 + ((*(_QWORD *)&a2 >> 52) & 0x7FF)) << 32);
}

double sub_20E8AA624(uint64_t a1)
{
  double result;
  char v2;

  result = 0.0;
  v2 = __clz(a1);
  if ((_DWORD)a1)
    *(_QWORD *)&result = ((a1 << 20) + 0x3FF0000000000000) & 0x7FF0000000000000 | ((unint64_t)BYTE6(a1) << 63) | ((unint64_t)a1 << (v2 + 21)) & 0xFFFFFFFFFFFFELL;
  return result;
}

unint64_t sub_20E8AA664(unsigned int a1, unsigned __int16 a2, int a3)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = (unint64_t)(a3 & 0x1F) << 49;
  if (!a1)
    return v3 & 0xFFFFFFFFFFFFFFLL;
  v4 = (__clz(a1) | 0xFFFFFFE0) + a3;
  if (v4)
  {
    v5 = (unint64_t)(a3 & 0x1F) << 49;
    v6 = (unsigned __int16)(a2 - v4);
    if (v4 < 0)
      v3 = v5 | (a1 >> -(char)v4) | (v6 << 32);
    else
      v3 = v5 | (a1 << v4) | (v6 << 32);
    return v3 & 0xFFFFFFFFFFFFFFLL;
  }
  return v3 & 0xFF000000000000 | a1 | ((unint64_t)a2 << 32) & 0xFFFFFFFFFFFFFFLL;
}

_QWORD *sub_20E8AA704@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 30) > 6)
    v2 = "unknown command line syntax error for '%s'";
  else
    v2 = off_24C9ADDB8[a1 - 30];
  return sub_20E8610C0(a2, v2);
}

_QWORD *sub_20E8AA730(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[6] = 0;
  a1[10] = 0;
  sub_20E8AA7A4((uint64_t)a1, a2);
  return a1;
}

void sub_20E8AA77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t *v3;
  va_list va;

  va_start(va, a2);
  sub_20E8AECBC(v3);
  sub_20E8AEC6C(v2);
  sub_20E8AD020((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20E8AA7A4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    sub_20E8AD1B8(a1, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_DWORD *)(a1 + 24) = 1015;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t sub_20E8AA7FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_20E8AA804(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_20E8AA80C(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) != 0)
    return 1;
  if ((~v1 & 6) != 0)
    v2 = 8 * ((~v1 & 0xA) == 0);
  else
    v2 = 4;
  if ((v1 & 0x1000) != 0)
    return 4096;
  else
    return v2;
}

void sub_20E8AA84C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v4)();
  char *v5;
  uint64_t (*v6)();
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  __int128 *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  __int128 *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v66;
  unint64_t v67;
  uint64_t v68;
  __int128 *v69;
  unint64_t v70;
  uint64_t v71;
  char *v73;
  void *v74;
  _BYTE *v75;
  unint64_t v76;
  int v77;
  _DWORD *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  std::string *v83;
  const std::string *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  char *v89;
  unint64_t v90;
  char v91;
  void *__p[3];
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int16 v97;
  std::logic_error v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  std::logic_error *v103;

  v100 = 0;
  v101 = 0;
  v102 = 0;
  if (*(_QWORD *)(a1 + 80))
    v4 = nullsub_36;
  else
    v4 = 0;
  if (v4)
  {
    v5 = (char *)sub_20E8AD494((uint64_t *)&v100, (uint64_t *)(a1 + 80));
    v101 = v5;
  }
  else
  {
    v5 = 0;
  }
  if (*(_QWORD *)(a1 + 48))
    v6 = nullsub_37;
  else
    v6 = 0;
  if (v6)
  {
    __p[2] = 0;
    v93 = a1;
    __p[0] = (char *)off_24C9ADB30 + 1;
    __p[1] = sub_20E8AB394;
    if ((unint64_t)v5 >= v102)
    {
      v7 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v5 = 0;
      sub_20E8AD860((uint64_t)v5, (uint64_t *)__p);
      v7 = (uint64_t)(v5 + 32);
    }
    v101 = (char *)v7;
    sub_20E8AECBC((uint64_t *)__p);
  }
  v8 = *(_DWORD *)(a1 + 24);
  if ((v8 & 1) != 0)
  {
    __p[2] = 0;
    v93 = a1;
    __p[0] = (char *)off_24C9ADB30 + 1;
    __p[1] = sub_20E8AB598;
    v9 = (uint64_t)v101;
    if ((unint64_t)v101 >= v102)
    {
      v10 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v101 = 0;
      sub_20E8AD860(v9, (uint64_t *)__p);
      v10 = v9 + 32;
    }
    v101 = (char *)v10;
    sub_20E8AECBC((uint64_t *)__p);
    v8 = *(_DWORD *)(a1 + 24);
  }
  if ((v8 & 0x1000) != 0)
  {
    __p[2] = 0;
    v93 = a1;
    __p[0] = (char *)off_24C9ADB30 + 1;
    __p[1] = sub_20E8AB9B8;
    v11 = (uint64_t)v101;
    if ((unint64_t)v101 >= v102)
    {
      v12 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v101 = 0;
      sub_20E8AD860(v11, (uint64_t *)__p);
      v12 = v11 + 32;
    }
    v101 = (char *)v12;
    sub_20E8AECBC((uint64_t *)__p);
    v8 = *(_DWORD *)(a1 + 24);
  }
  if ((~v8 & 6) == 0)
  {
    __p[2] = 0;
    v93 = a1;
    __p[0] = (char *)off_24C9ADB30 + 1;
    __p[1] = sub_20E8ABBEC;
    v13 = (uint64_t)v101;
    if ((unint64_t)v101 >= v102)
    {
      v14 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v101 = 0;
      sub_20E8AD860(v13, (uint64_t *)__p);
      v14 = v13 + 32;
    }
    v101 = (char *)v14;
    sub_20E8AECBC((uint64_t *)__p);
    v8 = *(_DWORD *)(a1 + 24);
  }
  if ((~v8 & 0xA) == 0)
  {
    __p[2] = 0;
    v93 = a1;
    __p[0] = (char *)off_24C9ADB30 + 1;
    __p[1] = sub_20E8AC234;
    v15 = (uint64_t)v101;
    if ((unint64_t)v101 >= v102)
    {
      v16 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v101 = 0;
      sub_20E8AD860(v15, (uint64_t *)__p);
      v16 = v15 + 32;
    }
    v101 = (char *)v16;
    sub_20E8AECBC((uint64_t *)__p);
  }
  __p[2] = 0;
  v93 = a1;
  __p[0] = (char *)off_24C9ADB30 + 1;
  __p[1] = sub_20E8AC54C;
  v17 = (uint64_t)v101;
  if ((unint64_t)v101 >= v102)
  {
    v18 = sub_20E8AD778((uint64_t *)&v100, (uint64_t *)__p);
  }
  else
  {
    *(_QWORD *)v101 = 0;
    sub_20E8AD860(v17, (uint64_t *)__p);
    v18 = v17 + 32;
  }
  v101 = (char *)v18;
  sub_20E8AECBC((uint64_t *)__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v19 = *(__int128 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v73 = 0;
    v47 = 0;
    v51 = 0;
    v48 = 0uLL;
  }
  else
  {
    do
    {
      v20 = (uint64_t)v100;
      if (v101 == v100)
      {
LABEL_55:
        memset(__p, 0, sizeof(__p));
        LODWORD(v93) = -1;
        v94 = 0u;
        v95 = 0u;
        v96 = 0u;
        v97 = 0;
        v36 = sub_20E8ADE68((uint64_t *)&v94, v19);
        v37 = *(__int128 **)a1;
        v38 = (__int128 *)v96;
        *((_QWORD *)&v94 + 1) = v36;
        if ((unint64_t)v96 >= *((_QWORD *)&v96 + 1))
        {
          v40 = sub_20E8ADE68((uint64_t *)&v95 + 1, v37);
        }
        else
        {
          if (*((char *)v37 + 23) < 0)
          {
            sub_20E860C04((_BYTE *)v96, *(void **)v37, *((_QWORD *)v37 + 1));
          }
          else
          {
            v39 = *v37;
            *(_QWORD *)(v96 + 16) = *((_QWORD *)v37 + 2);
            *v38 = v39;
          }
          v40 = (uint64_t)v38 + 24;
        }
        *(_QWORD *)&v96 = v40;
        v41 = a2[1];
        if (v41 >= a2[2])
        {
          v42 = sub_20E8AD91C(a2, (__int128 *)__p);
        }
        else
        {
          sub_20E8ADA38((_BYTE *)a2[1], (__int128 *)__p);
          v42 = v41 + 88;
          a2[1] = v41 + 88;
        }
        a2[1] = v42;
        sub_20E8AE198((uint64_t)&v98, (__int128 *)(*(_QWORD *)a1 + 24), *(__int128 **)(a1 + 8), *(_QWORD *)a1);
        v44 = v43;
        for (i = *(_QWORD *)(a1 + 8); i != v44; i -= 24)
        {
          if (*(char *)(i - 1) < 0)
            operator delete(*(void **)(i - 24));
        }
        *(_QWORD *)(a1 + 8) = v44;
        v98.__vftable = (std::logic_error_vtbl *)((char *)&v95 + 8);
        sub_20E8AD020((void ***)&v98);
        v98.__vftable = (std::logic_error_vtbl *)&v94;
        sub_20E8AD020((void ***)&v98);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *(_QWORD *)a1;
          v24 = *(_QWORD *)(a1 + 8);
          sub_20E8AC758((_QWORD *)(v20 + 32 * v21));
          v25 = __p[0];
          v26 = __p[1];
          if (__p[0] != __p[1])
          {
            v98.__vftable = 0;
            v98.__imp_.__imp_ = 0;
            v99 = 0;
            if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)88)
            {
              v27 = 0;
              v28 = 1;
              do
              {
                sub_20E8AC7CC(a1, (uint64_t)v25 + 88 * v27, (std::string **)&v98, &v100);
                v27 = v28;
                v25 = __p[0];
                v26 = __p[1];
                v29 = 0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 3) - 1 > (unint64_t)v28++;
              }
              while (v29);
            }
            sub_20E8AC7CC(a1, (uint64_t)v26 - 88, (std::string **)a1, &v100);
            v30 = (char *)__p[0];
            if (__p[1] != __p[0])
            {
              v31 = 0;
              v32 = (_BYTE *)a2[1];
              v33 = 1;
              do
              {
                v34 = (__int128 *)&v30[88 * v31];
                if ((unint64_t)v32 >= a2[2])
                {
                  v32 = (_BYTE *)sub_20E8AD91C(a2, v34);
                }
                else
                {
                  sub_20E8ADA38(v32, v34);
                  v32 += 88;
                  a2[1] = (uint64_t)v32;
                }
                a2[1] = (uint64_t)v32;
                v31 = v33;
                v30 = (char *)__p[0];
                v29 = 0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 3) > (unint64_t)v33++;
              }
              while (v29);
            }
            v103 = &v98;
            sub_20E8AD020((void ***)&v103);
          }
          v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
          v98.__vftable = (std::logic_error_vtbl *)__p;
          sub_20E8ADD9C((void ***)&v98);
          if (v35 != -1431655765 * ((v24 - v23) >> 3))
            break;
          v20 = (uint64_t)v100;
          v21 = ++v22;
          if (v22 >= (unint64_t)((v101 - v100) >> 5))
          {
            v19 = *(__int128 **)a1;
            goto LABEL_55;
          }
        }
      }
      v19 = *(__int128 **)a1;
    }
    while (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8));
    v47 = (char *)*a2;
    v46 = (char *)a2[1];
    v48 = 0uLL;
    memset(__p, 0, sizeof(__p));
    if (v46 != v47)
    {
      v49 = 0;
      v50 = 0;
      v51 = v47;
      while (1)
      {
        v52 = (__int128 *)&v51[88 * v49];
        v53 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          v54 = (char *)sub_20E8AD91C((uint64_t *)__p, v52);
        }
        else
        {
          sub_20E8ADA38((_BYTE *)__p[1], v52);
          v54 = v53 + 88;
        }
        __p[1] = v54;
        if (*(v54 - 65) < 0)
        {
          if (*((_QWORD *)v54 - 10))
          {
LABEL_81:
            v55 = sub_20E8B35E8(*(_QWORD *)(a1 + 32), (uint64_t)(v54 - 88), (*(_DWORD *)(a1 + 24) & 0x200) != 0, (*(_DWORD *)(a1 + 24) >> 10) & 1, (*(_DWORD *)(a1 + 24) >> 11) & 1);
            v56 = v55;
            if (v55)
            {
              sub_20E8B2E60(v55, &v98);
              v57 = (*((uint64_t (**)(std::logic_error_vtbl *))v98.~logic_error + 1))(v98.__vftable);
              sub_20E8AE5E0((unsigned int **)&v98.__imp_);
              sub_20E8B2E60(v56, &v98);
              v58 = (*((uint64_t (**)(std::logic_error_vtbl *))v98.~logic_error + 2))(v98.__vftable);
              sub_20E8AE5E0((unsigned int **)&v98.__imp_);
              if (v57 < v58)
              {
                v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v54 - 6) - *((_QWORD *)v54 - 7)) >> 3);
                if (v59 < v58 && v58 != (_DWORD)v59)
                {
                  v60 = v59 - v58;
                  do
                  {
                    v61 = v50 + 1;
                    v62 = *a2;
                    if (0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3) <= v61)
                      break;
                    v63 = v62 + 88 * v61;
                    v64 = *(char *)(v63 + 23) < 0 ? *(_QWORD *)(v63 + 8) : *(unsigned __int8 *)(v63 + 23);
                    if (v64 || *(_DWORD *)(v62 + 88 * v61 + 24) == 0x7FFFFFFF)
                      break;
                    v66 = *(__int128 **)(v62 + 88 * v61 + 32);
                    v67 = *((_QWORD *)v54 - 6);
                    if (v67 >= *((_QWORD *)v54 - 5))
                    {
                      v68 = sub_20E8ADE68((uint64_t *)v54 - 7, v66);
                    }
                    else
                    {
                      sub_20E8ADE0C((_QWORD *)v54 - 7, v66);
                      v68 = v67 + 24;
                    }
                    *((_QWORD *)v54 - 6) = v68;
                    v69 = *(__int128 **)(v62 + 88 * v61 + 56);
                    v70 = *((_QWORD *)v54 - 3);
                    if (v70 >= *((_QWORD *)v54 - 2))
                    {
                      v71 = sub_20E8ADE68((uint64_t *)v54 - 4, v69);
                    }
                    else
                    {
                      sub_20E8ADE0C((_QWORD *)v54 - 4, v69);
                      v71 = v70 + 24;
                    }
                    *((_QWORD *)v54 - 3) = v71;
                    v50 = v61;
                  }
                  while (!__CFADD__(v60++, 1));
                }
              }
            }
          }
        }
        else if (*(v54 - 65))
        {
          goto LABEL_81;
        }
        v51 = (char *)*a2;
        v47 = (char *)a2[1];
        v49 = ++v50;
        if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v47[-*a2] >> 3) <= (unint64_t)v50)
        {
          v73 = (char *)__p[0];
          v48 = *(_OWORD *)&__p[1];
          goto LABEL_106;
        }
      }
    }
    v73 = 0;
    v51 = v47;
  }
LABEL_106:
  *a2 = (uint64_t)v73;
  __p[0] = v51;
  __p[1] = v47;
  v74 = (void *)a2[2];
  *(_OWORD *)(a2 + 1) = v48;
  __p[2] = v74;
  v75 = (_BYTE *)v48;
  v76 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v48 - (_QWORD)v73) >> 3);
  if ((char *)v48 != v73)
  {
    v77 = 0;
    v78 = v73 + 24;
    v79 = 1;
    while ((*((char *)v78 - 1) & 0x80000000) == 0)
    {
      if (!*((_BYTE *)v78 - 1))
        goto LABEL_110;
LABEL_111:
      v78 += 22;
      v29 = v76 > v79++;
      if (!v29)
        goto LABEL_115;
    }
    if (*((_QWORD *)v78 - 2))
      goto LABEL_111;
LABEL_110:
    *v78 = v77++;
    goto LABEL_111;
  }
LABEL_115:
  if (*(_QWORD *)(a1 + 40))
  {
    v73 = (char *)*a2;
    v75 = (_BYTE *)a2[1];
    if (v75 == (_BYTE *)*a2)
      goto LABEL_135;
    v80 = 0;
    v81 = 0;
    v82 = 1;
    do
    {
      v83 = (std::string *)&v73[88 * v80];
      if (LODWORD(v83[1].__r_.__value_.__l.__data_) != -1)
      {
        if (v81 >= sub_20E8BBEC4(*(_QWORD *)(a1 + 40)))
        {
          sub_20E8AE65C(&v98);
          sub_20E8ACE70(&v98);
        }
        v84 = (const std::string *)sub_20E8BBF00(*(_QWORD **)(a1 + 40), v81);
        std::string::operator=(v83, v84);
        ++v81;
        v73 = (char *)*a2;
        v75 = (_BYTE *)a2[1];
      }
      v80 = v82;
      v76 = 0x2E8BA2E8BA2E8BA3 * ((v75 - v73) >> 3);
      v29 = v76 > v82++;
    }
    while (v29);
  }
  if (v75 != v73)
  {
    v85 = *(_DWORD *)(a1 + 24);
    v86 = 1;
    while (v73[23] < 0)
    {
      v90 = *((_QWORD *)v73 + 1);
      if (v90 > 2)
        goto LABEL_133;
      if (v90 == 2)
      {
        v89 = *(char **)v73;
LABEL_131:
        if (*v89 != 45)
        {
LABEL_133:
          v91 = 10;
          goto LABEL_134;
        }
      }
LABEL_132:
      v91 = 11;
LABEL_134:
      v73[81] = (v85 >> v91) & 1;
      v73 += 88;
      v29 = v76 > v86++;
      if (!v29)
        goto LABEL_135;
    }
    v87 = v73[23];
    v88 = v87 == 2;
    if (v87 > 2)
      goto LABEL_133;
    v89 = v73;
    if (!v88)
      goto LABEL_132;
    goto LABEL_131;
  }
LABEL_135:
  v98.__vftable = (std::logic_error_vtbl *)__p;
  sub_20E8ADD9C((void ***)&v98);
  __p[0] = &v100;
  sub_20E8AE700((void ***)__p);
}

void sub_20E8AB1D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::logic_error a23)
{
  __break(1u);
}

void sub_20E8AB300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void ***a23)
{
  uint64_t v23;

  __cxa_end_catch();
  a23 = &a12;
  sub_20E8ADD9C((void ***)&a23);
  sub_20E8ADD9C(&a12);
  a12 = (void **)(v23 - 120);
  sub_20E8AE700(&a12);
  _Unwind_Resume(a1);
}

void sub_20E8AB314()
{
  JUMPOUT(0x20E8AB360);
}

void sub_20E8AB330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 96) = &a23;
  sub_20E8AD020((void ***)(v23 - 96));
  JUMPOUT(0x20E8AB360);
}

void sub_20E8AB394(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  std::string __p;
  int v16;
  _OWORD v17[3];
  __int16 v18;
  std::string __str;
  __int128 __src;
  uint64_t v21;
  void **v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20E8ACF6C((_QWORD *)(a1 + 48));
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(&__p, 0, sizeof(__p));
    v16 = -1;
    memset(v17, 0, sizeof(v17));
    v18 = 0;
    std::string::operator=(&__p, &__str);
    v6 = HIBYTE(v21);
    if (v21 < 0)
      v6 = *((_QWORD *)&__src + 1);
    if (v6)
    {
      v7 = (__int128 *)*((_QWORD *)&v17[0] + 1);
      if (*((_QWORD *)&v17[0] + 1) >= *(_QWORD *)&v17[1])
      {
        v9 = sub_20E8ADE68((uint64_t *)v17, &__src);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          sub_20E860C04(*((_BYTE **)&v17[0] + 1), (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v8 = __src;
          *(_QWORD *)(*((_QWORD *)&v17[0] + 1) + 16) = v21;
          *v7 = v8;
        }
        v9 = (uint64_t)v7 + 24;
      }
      *((_QWORD *)&v17[0] + 1) = v9;
    }
    v10 = a3[1];
    if (v10 >= a3[2])
    {
      v11 = sub_20E8AD91C(a3, (__int128 *)&__p);
    }
    else
    {
      sub_20E8ADA38((_BYTE *)a3[1], (__int128 *)&__p);
      v11 = v10 + 88;
      a3[1] = v10 + 88;
    }
    a3[1] = v11;
    sub_20E8AE198((uint64_t)&v22, (__int128 *)(*a2 + 24), (__int128 *)a2[1], *a2);
    v13 = v12;
    for (i = a2[1]; i != v13; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    a2[1] = v13;
    v22 = (void **)&v17[1] + 1;
    sub_20E8AD020(&v22);
    v22 = (void **)v17;
    sub_20E8AD020(&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__src);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20E8AB54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20E8ACE18((uint64_t)&a9);
  sub_20E8ACFE0((uint64_t)&a20);
  sub_20E8ADD9C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8AB598(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v6;
  int v7;
  __int128 *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type size;
  int v12;
  int v13;
  std::string::size_type v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *i;
  std::string v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  std::string __p;
  std::string __str;
  void **v34;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (std::string *)*a2;
  if (*((char *)*a2 + 23) < 0)
  {
    if (v6->__r_.__value_.__l.__size_ <= 2)
      return;
    v8 = (__int128 *)v6->__r_.__value_.__r.__words[0];
    v7 = *(unsigned __int8 *)v6->__r_.__value_.__l.__data_;
  }
  else
  {
    if (*((unsigned __int8 *)*a2 + 23) < 3u)
      return;
    v7 = v6->__r_.__value_.__s.__data_[0];
    v8 = *a2;
  }
  if (v7 == 45 && *((_BYTE *)v8 + 1) == 45)
  {
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    v9 = std::string::find(v6, 61, 0);
    if (v9 == -1)
    {
      std::string::basic_string(&v26, v6, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v26;
    }
    else
    {
      v10 = v9;
      std::string::basic_string(&v26, v6, 2uLL, v9 - 2, (std::allocator<char> *)&v34);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v26;
      std::string::basic_string(&v26, v6, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v26;
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v26.__r_.__value_.__l.__size_;
      if (!size)
      {
        v12 = *(_DWORD *)(a1 + 24);
        if ((v12 & 1) != 0)
        {
          v13 = 1;
        }
        else if ((v12 & 0x1000) != 0)
        {
          v13 = 4096;
        }
        else if ((~v12 & 6) != 0)
        {
          v13 = 8 * ((~v12 & 0xA) == 0);
        }
        else
        {
          v13 = 4;
        }
        sub_20E8AE9C8((uint64_t)&v26, 33, &__str, &__str, v13);
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C9ADA90;
        sub_20E8ACF18((uint64_t)&v26);
      }
    }
    memset(&v26, 0, sizeof(v26));
    v27 = -1;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    std::string::operator=(&v26, &__str);
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = __p.__r_.__value_.__l.__size_;
    if (v14)
    {
      v15 = (_OWORD *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1) >= (unint64_t)v29)
      {
        v17 = sub_20E8ADE68((uint64_t *)&v28, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04(*((_BYTE **)&v28 + 1), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(*((_QWORD *)&v28 + 1) + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *v15 = v16;
        }
        v17 = (uint64_t)v15 + 24;
      }
      *((_QWORD *)&v28 + 1) = v17;
    }
    v18 = (_OWORD *)v30;
    if ((unint64_t)v30 >= *((_QWORD *)&v30 + 1))
    {
      v20 = sub_20E8ADE68((uint64_t *)&v29 + 1, (__int128 *)v6);
    }
    else
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20E860C04((_BYTE *)v30, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        v19 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)&v6->__r_.__value_.__l + 2);
        *v18 = v19;
      }
      v20 = (uint64_t)v18 + 24;
    }
    *(_QWORD *)&v30 = v20;
    v21 = a3[1];
    if (v21 >= a3[2])
    {
      v22 = sub_20E8AD91C(a3, (__int128 *)&v26);
    }
    else
    {
      sub_20E8ADA38((_BYTE *)a3[1], (__int128 *)&v26);
      v22 = v21 + 88;
      a3[1] = v21 + 88;
    }
    a3[1] = v22;
    sub_20E8AE198((uint64_t)&v34, (__int128 *)((char *)*a2 + 24), a2[1], (uint64_t)*a2);
    v24 = v23;
    for (i = a2[1]; i != v24; i = (__int128 *)((char *)i - 24))
    {
      if (*((char *)i - 1) < 0)
        operator delete(*((void **)i - 3));
    }
    a2[1] = v24;
    v34 = (void **)&v29 + 1;
    sub_20E8AD020(&v34);
    v34 = (void **)&v28;
    sub_20E8AD020(&v34);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20E8AB92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  sub_20E8ACE18((uint64_t)&a9);
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  sub_20E8ADD9C((void ***)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8AB9B8(uint64_t a1@<X0>, const std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  const std::string *v6;
  unsigned int v7;
  int v8;
  const std::string *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  const std::string *v14;
  std::string __p;
  char v16;

  v6 = *a2;
  v7 = SHIBYTE((*a2)->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80000000) != 0)
  {
    if (v6->__r_.__value_.__l.__size_ <= 1)
      goto LABEL_25;
    v9 = (const std::string *)v6->__r_.__value_.__r.__words[0];
    if (*v6->__r_.__value_.__l.__data_ != 45)
    {
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        goto LABEL_25;
      goto LABEL_15;
    }
    v8 = v6->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v7 < 2)
      goto LABEL_25;
    v8 = v6->__r_.__value_.__s.__data_[0];
    if (v8 != 45)
    {
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        goto LABEL_25;
      goto LABEL_16;
    }
    v9 = *a2;
  }
  if (v9->__r_.__value_.__s.__data_[1] != 45)
    goto LABEL_17;
  if ((*(_BYTE *)(a1 + 24) & 8) == 0)
    goto LABEL_25;
  if ((v7 & 0x80000000) != 0)
  {
    v9 = (const std::string *)v6->__r_.__value_.__r.__words[0];
LABEL_15:
    v8 = v9->__r_.__value_.__s.__data_[0];
  }
LABEL_16:
  if (v8 != 47)
    goto LABEL_25;
LABEL_17:
  v10 = *(_QWORD *)(a1 + 32);
  v11 = std::string::find(*a2, 61, 0);
  std::string::basic_string(&__p, v6, 1uLL, v11 - 1, (std::allocator<char> *)&v16);
  v12 = sub_20E8B35E8(v10, (uint64_t)&__p, (*(_DWORD *)(a1 + 24) & 0x200) != 0, (*(_DWORD *)(a1 + 24) >> 10) & 1, (*(_DWORD *)(a1 + 24) >> 11) & 1);
  v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_19;
LABEL_25:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (!v12)
    goto LABEL_25;
LABEL_19:
  std::string::insert((std::string *)*a2, 0, "-", 1uLL);
  v14 = *a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    v14 = (const std::string *)v14->__r_.__value_.__r.__words[0];
  if (v14->__r_.__value_.__s.__data_[1] == 47)
    v14->__r_.__value_.__s.__data_[1] = 45;
  sub_20E8AB598(a1, (__int128 **)a2, a3);
}

void sub_20E8ABB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  const std::string *v14;
  uint64_t v15;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;

  if (a14 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v18 = __cxa_begin_catch(exception_object);
    v19 = (uint64_t)v18;
    v20 = *(_DWORD *)(v15 + 24);
    if ((~v20 & 6) != 0)
      v21 = 8 * ((~v20 & 0xA) == 0);
    else
      v21 = 4;
    if ((v20 & 0x1000) != 0)
      v22 = 4096;
    else
      v22 = v21;
    if ((v20 & 1) != 0)
      v23 = 1;
    else
      v23 = v22;
    (*(void (**)(void *, const std::string *))(*(_QWORD *)v18 + 24))(v18, v14);
    sub_20E8AE208(v19, v14);
    *(_DWORD *)(v19 + 16) = v23;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20E8ABBEC(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  std::string::size_type size;
  unint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *i;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  std::string::size_type v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *j;
  std::string v32;
  std::string v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  std::string v39;
  std::string __str;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v6 = (std::string *)*a2;
  if (*((char *)*a2 + 23) < 0)
  {
    if (v6->__r_.__value_.__l.__size_ > 1)
    {
      v8 = (__int128 *)v6->__r_.__value_.__r.__words[0];
      v7 = *(unsigned __int8 *)v6->__r_.__value_.__l.__data_;
      goto LABEL_6;
    }
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (*((unsigned __int8 *)*a2 + 23) < 2u)
    goto LABEL_8;
  v7 = v6->__r_.__value_.__s.__data_[0];
  v8 = *a2;
LABEL_6:
  if (v7 != 45 || *((_BYTE *)v8 + 1) == 45)
    goto LABEL_8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::basic_string(&__str, v6, 0, 2uLL, (std::allocator<char> *)&v39);
  std::string::basic_string(&v39, v6, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
  while (1)
  {
    v9 = sub_20E8B35E8(*(_QWORD *)(a1 + 32), (uint64_t)&__str, 0, 0, (*(_DWORD *)(a1 + 24) >> 11) & 1);
    if (!v9 || (*(_BYTE *)(a1 + 25) & 1) == 0)
      break;
    sub_20E8B2E60(v9, &v33);
    if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v33.__r_.__value_.__l.__data_ + 16))(v33.__r_.__value_.__r.__words[0]))
    {
      sub_20E8AE5E0((unsigned int **)&v33.__r_.__value_.__l.__size_);
      break;
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    sub_20E8AE5E0((unsigned int **)&v33.__r_.__value_.__l.__size_);
    if (!size)
      break;
    memset(&v33, 0, sizeof(v33));
    v34 = -1;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
    std::string::operator=(&v33, &__str);
    v11 = a3[1];
    if (v11 >= a3[2])
    {
      v12 = sub_20E8AD91C(a3, (__int128 *)&v33);
    }
    else
    {
      sub_20E8ADA38((_BYTE *)a3[1], (__int128 *)&v33);
      v12 = v11 + 88;
      a3[1] = v11 + 88;
    }
    a3[1] = v12;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v13 = v39.__r_.__value_.__l.__size_;
    if (v13)
    {
      sub_20E8610C0(&v32, "-");
      v14 = &v39;
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v39.__r_.__value_.__r.__words[0];
      std::string::push_back(&v32, v14->__r_.__value_.__s.__data_[0]);
      v41[0] = v32.__r_.__value_.__l.__size_;
      v15 = v32.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      memset(&v32, 0, sizeof(v32));
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v15;
        __str.__r_.__value_.__l.__size_ = v41[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v41 + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v16;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = v15;
        __str.__r_.__value_.__l.__size_ = v41[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v41 + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v16;
      }
      std::string::erase(&v39, 0, 1uLL);
    }
    else
    {
      sub_20E8AE198((uint64_t)&v32, (__int128 *)((char *)*a2 + 24), a2[1], (uint64_t)*a2);
      v18 = v17;
      for (i = a2[1]; i != v18; i = (__int128 *)((char *)i - 24))
      {
        if (*((char *)i - 1) < 0)
          operator delete(*((void **)i - 3));
      }
      a2[1] = v18;
    }
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36 + 8;
    sub_20E8AD020((void ***)&v32);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    sub_20E8AD020((void ***)&v32);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (!v13)
        goto LABEL_70;
    }
    else if (!v13)
    {
      goto LABEL_70;
    }
  }
  memset(&v33, 0, sizeof(v33));
  v34 = -1;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  std::string::operator=(&v33, &__str);
  v20 = (_OWORD *)v37;
  if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
  {
    v22 = sub_20E8ADE68((uint64_t *)&v36 + 1, (__int128 *)v6);
  }
  else
  {
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04((_BYTE *)v37, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v21 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)(v37 + 16) = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      *v20 = v21;
    }
    v22 = (uint64_t)v20 + 24;
  }
  *(_QWORD *)&v37 = v22;
  v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = v39.__r_.__value_.__l.__size_;
  if (v23)
  {
    v24 = (_OWORD *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1) >= (unint64_t)v36)
    {
      v26 = sub_20E8ADE68((uint64_t *)&v35, (__int128 *)&v39);
    }
    else
    {
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20E860C04(*((_BYTE **)&v35 + 1), v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
      }
      else
      {
        v25 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
        *(_QWORD *)(*((_QWORD *)&v35 + 1) + 16) = *((_QWORD *)&v39.__r_.__value_.__l + 2);
        *v24 = v25;
      }
      v26 = (uint64_t)v24 + 24;
    }
    *((_QWORD *)&v35 + 1) = v26;
  }
  v27 = a3[1];
  if (v27 >= a3[2])
  {
    v28 = sub_20E8AD91C(a3, (__int128 *)&v33);
  }
  else
  {
    sub_20E8ADA38((_BYTE *)a3[1], (__int128 *)&v33);
    v28 = v27 + 88;
    a3[1] = v27 + 88;
  }
  a3[1] = v28;
  sub_20E8AE198((uint64_t)&v32, (__int128 *)((char *)*a2 + 24), a2[1], (uint64_t)*a2);
  v30 = v29;
  for (j = a2[1]; j != v30; j = (__int128 *)((char *)j - 24))
  {
    if (*((char *)j - 1) < 0)
      operator delete(*((void **)j - 3));
  }
  a2[1] = v30;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36 + 8;
  sub_20E8AD020((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  sub_20E8AD020((void ***)&v32);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_70:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20E8AC0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  sub_20E8ACE18((uint64_t)&a19);
  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 113) < 0)
    operator delete(*(void **)(v35 - 136));
  sub_20E8ADD9C((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_20E8AC234(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  std::string::size_type size;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  std::string __p;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  std::string v26;
  std::string __str;
  void **v28;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(std::string **)a1;
  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
  {
    if (v4->__r_.__value_.__l.__size_ <= 1)
      return;
    v5 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    v5 = *(std::string **)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + 23) <= 1u)
      return;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 47)
  {
    std::string::basic_string(&__p, *(const std::string **)a1, 1uLL, 1uLL, (std::allocator<char> *)&v26);
    v6 = std::string::insert(&__p, 0, "-", 1uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string(&v26, v4, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v28);
    memset(&__p, 0, sizeof(__p));
    v21 = -1;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    std::string::operator=(&__p, &__str);
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v26.__r_.__value_.__l.__size_;
    if (size)
    {
      v9 = (_OWORD *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1) >= (unint64_t)v23)
      {
        v11 = sub_20E8ADE68((uint64_t *)&v22, (__int128 *)&v26);
      }
      else
      {
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04(*((_BYTE **)&v22 + 1), v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        }
        else
        {
          v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          *(_QWORD *)(*((_QWORD *)&v22 + 1) + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
          *v9 = v10;
        }
        v11 = (uint64_t)v9 + 24;
      }
      *((_QWORD *)&v22 + 1) = v11;
    }
    v12 = (_OWORD *)v24;
    if ((unint64_t)v24 >= *((_QWORD *)&v24 + 1))
    {
      v14 = sub_20E8ADE68((uint64_t *)&v23 + 1, (__int128 *)v4);
    }
    else
    {
      if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20E860C04((_BYTE *)v24, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
      }
      else
      {
        v13 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
        *v12 = v13;
      }
      v14 = (uint64_t)v12 + 24;
    }
    *(_QWORD *)&v24 = v14;
    v15 = a2[1];
    if (v15 >= a2[2])
    {
      v16 = sub_20E8AD91C(a2, (__int128 *)&__p);
    }
    else
    {
      sub_20E8ADA38((_BYTE *)a2[1], (__int128 *)&__p);
      v16 = v15 + 88;
      a2[1] = v15 + 88;
    }
    a2[1] = v16;
    sub_20E8AE198((uint64_t)&v28, (__int128 *)(*(_QWORD *)a1 + 24), *(__int128 **)(a1 + 8), *(_QWORD *)a1);
    v18 = v17;
    for (i = *(_QWORD *)(a1 + 8); i != v18; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 8) = v18;
    v28 = (void **)&v23 + 1;
    sub_20E8AD020(&v28);
    v28 = (void **)&v22;
    sub_20E8AD020(&v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20E8AC4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_20E8ACE18((uint64_t)&a9);
  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  sub_20E8ADD9C((void ***)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8AC54C(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  _WORD *v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 __p;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  void **v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (uint64_t *)*a1;
  v4 = *(unsigned __int8 *)(*a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(*a1 + 8);
  if (v4 == 2)
  {
    v6 = (_WORD *)(v5 >= 0 ? *a1 : *v3);
    if (*v6 == 11565)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v3) >> 3) >= 2)
      {
        v8 = 2;
        v9 = 1;
        do
        {
          __p = 0uLL;
          v20 = 0;
          v21 = -1;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0;
          v10 = sub_20E8ADE68((uint64_t *)&v22, (__int128 *)&v3[3 * v9]);
          v11 = (__int128 *)v24;
          v12 = *a1;
          *((_QWORD *)&v22 + 1) = v10;
          v13 = v12 + 24 * v9;
          if ((unint64_t)v24 >= *((_QWORD *)&v24 + 1))
          {
            v15 = sub_20E8ADE68((uint64_t *)&v23 + 1, (__int128 *)v13);
          }
          else
          {
            if (*(char *)(v13 + 23) < 0)
            {
              sub_20E860C04((_BYTE *)v24, *(void **)v13, *(_QWORD *)(v13 + 8));
            }
            else
            {
              v14 = *(_OWORD *)v13;
              *(_QWORD *)(v24 + 16) = *(_QWORD *)(v13 + 16);
              *v11 = v14;
            }
            v15 = (uint64_t)v11 + 24;
          }
          *(_QWORD *)&v24 = v15;
          v21 = 0x7FFFFFFF;
          v16 = a2[1];
          if (v16 >= a2[2])
          {
            v17 = sub_20E8AD91C(a2, &__p);
          }
          else
          {
            sub_20E8ADA38((_BYTE *)a2[1], &__p);
            v17 = v16 + 88;
            a2[1] = v16 + 88;
          }
          a2[1] = v17;
          v26 = (void **)&v23 + 1;
          sub_20E8AD020(&v26);
          v26 = (void **)&v22;
          sub_20E8AD020(&v26);
          if (SHIBYTE(v20) < 0)
            operator delete((void *)__p);
          v9 = v8;
          v3 = (uint64_t *)*a1;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v8++);
      }
      sub_20E8AD060(a1);
    }
  }
}

void sub_20E8AC720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8ACE18((uint64_t)&a9);
  sub_20E8ADD9C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AC758(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
    sub_20E86DD10(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_20E8AC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8AC7CC(uint64_t a1, uint64_t a2, std::string **a3, _QWORD *a4)
{
  unint64_t v8;
  const std::string *v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  BOOL v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  std::string *v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  unint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string *v32;
  std::string *i;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  unsigned __int128 v38;
  std::string::size_type v39;
  std::string v40;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      return;
    sub_20E860C04(&__dst, *(void **)a2, v8);
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      return;
    __dst = *(std::string *)a2;
  }
  v9 = *(const std::string **)(a2 + 56);
  if (*(const std::string **)(a2 + 64) != v9)
    std::string::operator=(&__dst, v9);
  v10 = sub_20E8B35E8(*(_QWORD *)(a1 + 32), a2, (*(_DWORD *)(a1 + 24) & 0x200) != 0, (*(_DWORD *)(a1 + 24) >> 10) & 1, (*(_DWORD *)(a1 + 24) >> 11) & 1);
  v11 = v10;
  if (v10)
  {
    v34 = a1;
    v12 = (const std::string *)sub_20E8B287C(v10, a2);
    std::string::operator=((std::string *)a2, v12);
    sub_20E8B2E60(v11, &v38);
    v13 = (*(uint64_t (**)(std::logic_error_vtbl *))(*(_QWORD *)v38 + 8))((std::logic_error_vtbl *)v38);
    sub_20E8AE5E0((unsigned int **)&v38 + 1);
    sub_20E8B2E60(v11, &v38);
    v14 = (*(uint64_t (**)(std::logic_error_vtbl *))(*(_QWORD *)v38 + 16))((std::logic_error_vtbl *)v38);
    sub_20E8AE5E0((unsigned int **)&v38 + 1);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
    v18 = *a3;
    v19 = a3[1];
    if (v13 > v17 - 1431655765 * ((unint64_t)((char *)v19 - (char *)*a3) >> 3))
    {
      sub_20E8610C0(&v40, "");
      sub_20E8610C0(&v37, "");
      sub_20E8AE9C8((uint64_t)&v38, 34, &v40, &v37, 0);
      *(_QWORD *)&v38 = &unk_24C9ADA90;
      sub_20E8ACF18((uint64_t)&v38);
    }
    if (v15 != v16 && !v14)
    {
      sub_20E8610C0(&v40, "");
      sub_20E8610C0(&v37, "");
      sub_20E8AE9C8((uint64_t)&v38, 35, &v40, &v37, 0);
      *(_QWORD *)&v38 = &unk_24C9ADA90;
      sub_20E8ACF18((uint64_t)&v38);
    }
    if (v18 != v19)
    {
      v20 = v17 > v13;
      v21 = v13 - v17;
      if (v20)
        v22 = 0;
      else
        v22 = v21;
      do
      {
        if (!v22)
          break;
        memset(&v40, 0, sizeof(v40));
        sub_20E8AEB44(&v37, 1uLL, (__int128 *)v18);
        if (v40.__r_.__value_.__r.__words[0] == v40.__r_.__value_.__l.__size_)
        {
          v23 = 0;
          while (1)
          {
            v24 = v23;
            if (v23 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 5))
              break;
            sub_20E8AC758((_QWORD *)(*a4 + 32 * v23));
            sub_20E8AEC08((void **)&v40.__r_.__value_.__l.__data_);
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v38;
            v40.__r_.__value_.__r.__words[2] = v39;
            v39 = 0;
            v38 = 0uLL;
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
            sub_20E8ADD9C((void ***)&v36);
            v23 = v24 + 1;
            if (v40.__r_.__value_.__r.__words[0] != v40.__r_.__value_.__l.__size_)
              goto LABEL_21;
          }
        }
        else
        {
LABEL_21:
          std::string::operator=(&__dst, *a3);
          if (sub_20E8B35E8(*(_QWORD *)(v34 + 32), (uint64_t)*a3, (*(_DWORD *)(v34 + 24) & 0x200) != 0, (*(_DWORD *)(v34 + 24) >> 10) & 1, (*(_DWORD *)(v34 + 24) >> 11) & 1))
          {
            sub_20E8610C0(&v36, "");
            sub_20E8610C0(&v35, "");
            sub_20E8AE9C8((uint64_t)&v38, 34, &v36, &v35, 0);
            *(_QWORD *)&v38 = &unk_24C9ADA90;
            sub_20E8ACF18((uint64_t)&v38);
          }
        }
        v25 = *a3;
        v26 = *(_QWORD *)(a2 + 40);
        if (v26 >= *(_QWORD *)(a2 + 48))
        {
          v27 = sub_20E8ADE68((uint64_t *)(a2 + 32), (__int128 *)v25);
        }
        else
        {
          sub_20E8ADE0C((_QWORD *)(a2 + 32), (__int128 *)v25);
          v27 = v26 + 24;
        }
        *(_QWORD *)(a2 + 40) = v27;
        v28 = *a3;
        v29 = *(_QWORD *)(a2 + 64);
        if (v29 >= *(_QWORD *)(a2 + 72))
        {
          v30 = sub_20E8ADE68((uint64_t *)(a2 + 56), (__int128 *)v28);
        }
        else
        {
          sub_20E8ADE0C((_QWORD *)(a2 + 56), (__int128 *)v28);
          v30 = v29 + 24;
        }
        *(_QWORD *)(a2 + 64) = v30;
        sub_20E8AE198((uint64_t)&v36, (__int128 *)&(*a3)[1], (__int128 *)a3[1], (uint64_t)*a3);
        v32 = v31;
        for (i = a3[1]; i != v32; --i)
        {
          if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(i[-1].__r_.__value_.__l.__data_);
        }
        --v22;
        a3[1] = v32;
        *(_QWORD *)&v38 = &v37;
        sub_20E8AD020((void ***)&v38);
        *(_QWORD *)&v38 = &v40;
        sub_20E8ADD9C((void ***)&v38);
        v18 = *a3;
      }
      while (*a3 != a3[1]);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 28))
    {
      sub_20E8610C0(&v40, "");
      sub_20E8AE770((std::logic_error *)&v38, &v40);
      sub_20E8ACEC4((uint64_t)&v38);
    }
    *(_BYTE *)(a2 + 80) = 1;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20E8ACC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;

  sub_20E8AE8C4((uint64_t)&a28);
  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 137) < 0)
    operator delete(*(void **)(v29 - 160));
  if (a2 == 1)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (uint64_t)v32;
    v34 = *(_DWORD *)(a9 + 24);
    if ((~v34 & 6) != 0)
      v35 = 8 * ((~v34 & 0xA) == 0);
    else
      v35 = 4;
    if ((v34 & 0x1000) != 0)
      v36 = 4096;
    else
      v36 = v35;
    if ((v34 & 1) != 0)
      v37 = 1;
    else
      v37 = v36;
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v32 + 24))(v32, v28);
    sub_20E8AE208(v33, (const std::string *)(v29 - 128));
    *(_DWORD *)(v33 + 16) = v37;
    __cxa_rethrow();
  }
  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  _Unwind_Resume(a1);
}

void sub_20E8ACDF4()
{
  __cxa_end_catch();
  JUMPOUT(0x20E8ACDFCLL);
}

uint64_t sub_20E8ACE18(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_20E8AD020(&v3);
  v3 = (void **)(a1 + 32);
  sub_20E8AD020(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8ACE70(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8AEE0C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADB50, (void (*)(void *))sub_20E8AEE68);
}

void sub_20E8ACEAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8ACEC4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8AF1EC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADC10, (void (*)(void *))sub_20E8AF248);
}

void sub_20E8ACF00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8ACF18(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8AFE00((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADCE0, (void (*)(void *))sub_20E8AFE68);
}

void sub_20E8ACF54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8ACF6C(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
    sub_20E86DD10(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_20E8ACFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8ACFE0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8AD020(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20E8AD060((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20E8AD060(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

char *sub_20E8AD0AC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_20E867F44();
  result = (char *)sub_20E8AD0FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_20E8AD0FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_20E877A38();
  return operator new(24 * a2);
}

uint64_t sub_20E8AD140(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20E8AD174(a1);
  return a1;
}

void sub_20E8AD174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void sub_20E8AD1B8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20E8AD32C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20E8AD0AC((_QWORD *)a1, v11);
    v12 = sub_20E8AD364(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_20E8AD420(__str, v13, v9);
    v12 = sub_20E8AD364(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20E8AD420(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20E8AD31C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20E8AD324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20E8AD32C(uint64_t *a1)
{
  if (*a1)
  {
    sub_20E8AD060(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_20E8AD364(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20E860C04(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20E8AD140((uint64_t)v9);
  return v4;
}

void sub_20E8AD40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8AD140((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_20E8AD420(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_20E8AD480(std::logic_error *a1)
{
  void *v1;

  std::logic_error::~logic_error(a1);
  operator delete(v1);
}

uint64_t sub_20E8AD494(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20E867F44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20E8AD620(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_QWORD *)v11 = 0;
  v12 = *a2;
  if (*a2)
  {
    *(_QWORD *)v11 = v12;
    if ((v12 & 1) != 0)
    {
      v13 = *(_OWORD *)(a2 + 1);
      *((_QWORD *)v11 + 3) = a2[3];
      *(_OWORD *)(v11 + 8) = v13;
    }
    else
    {
      (*(void (**)(uint64_t *, char *, _QWORD))(v12 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, v11 + 8, 0);
      v11 = v17;
    }
  }
  v17 = v11 + 32;
  sub_20E8AD5AC(a1, v16);
  v14 = a1[1];
  sub_20E8AD72C((uint64_t)v16);
  return v14;
}

void sub_20E8AD598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8AD72C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AD5AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20E8AD654((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20E8AD620(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_20E877A38();
  return operator new(32 * a2);
}

uint64_t sub_20E8AD654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(a7 + v11 - 32) = 0;
      v12 = *(_QWORD *)(a3 + v11 - 32);
      if (v12)
      {
        *(_QWORD *)(a7 + v11 - 32) = v12;
        if ((v12 & 1) != 0)
        {
          v13 = a7 + v11;
          v14 = *(_OWORD *)(a3 + v11 - 24);
          *(_QWORD *)(v13 - 8) = *(_QWORD *)(a3 + v11 - 8);
          *(_OWORD *)(v13 - 24) = v14;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v12 & 0xFFFFFFFFFFFFFFFELL))(a3 + v11 - 24, a7 + v11 - 24, 0);
        }
      }
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20E8AD70C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    sub_20E8AECBC((uint64_t *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8AD72C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20E8AECBC((uint64_t *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8AD778(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20E867F44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20E8AD620(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[32 * v4];
  v15 = v14;
  v16 = &v10[32 * v9];
  *(_QWORD *)v14 = 0;
  sub_20E8AD860((uint64_t)&v10[32 * v4], a2);
  v15 += 32;
  sub_20E8AD5AC(a1, &v13);
  v11 = a1[1];
  sub_20E8AD72C((uint64_t)&v13);
  return v11;
}

void sub_20E8AD84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8AD72C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AD860(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_20E8AD8F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20E8AD908(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AD91C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20E867F44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20E8ADC18(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  sub_20E8ADA38(v14, a2);
  v15 = v14 + 88;
  sub_20E8ADBA4(a1, &v13);
  v11 = a1[1];
  sub_20E8ADD50((uint64_t)&v13);
  return v11;
}

void sub_20E8ADA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8ADD50((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E8ADA38(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  *((_QWORD *)__dst + 4) = 0;
  *((_DWORD *)__dst + 6) = v5;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 6) = 0;
  sub_20E8ADB20(__dst + 32, *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  *((_QWORD *)__dst + 9) = 0;
  sub_20E8ADB20(__dst + 56, *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *((_WORD *)__dst + 40) = *((_WORD *)a2 + 40);
  return __dst;
}

void sub_20E8ADAF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20E8AD020((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

char *sub_20E8ADB20(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20E8AD0AC(result, a4);
    result = sub_20E8AD364((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20E8ADB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20E8AD020(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8ADBA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20E8ADC60((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_20E8ADC18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_20E877A38();
  return operator new(88 * a2);
}

__n128 sub_20E8ADC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v8 - 72) = *(_QWORD *)(a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v10;
      *(_QWORD *)(v9 - 80) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      *(_DWORD *)(v8 - 64) = *(_DWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_WORD *)(v8 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_20E8ADCFC(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  sub_20E8AD020(&v2);
  v2 = (void **)(a1 + 32);
  sub_20E8AD020(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20E8ADD50(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_20E8ADCFC(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8ADD9C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_20E8ADCFC(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20E8ADE0C(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20E860C04((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_20E8ADE60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20E8ADE68(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20E8AD0FC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_20E8ADF88(a1, v15);
  v13 = a1[1];
  sub_20E8AE110((uint64_t)v15);
  return v13;
}

void sub_20E8ADF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8AE110((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8ADF88(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20E8ADFFC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20E8ADFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_20E8AE098((uint64_t)v12);
  return a6;
}

uint64_t sub_20E8AE098(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20E8AE0CC(a1);
  return a1;
}

void sub_20E8AE0CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_20E8AE110(uint64_t a1)
{
  sub_20E8AE144(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8AE144(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

__int128 *sub_20E8AE198(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_20E8AE208(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  void *__p[2];
  char v6;
  void **v7;

  sub_20E8610C0(__p, "original_token");
  v7 = __p;
  v4 = sub_20E8AE2A4((uint64_t **)(a1 + 24), __p, (uint64_t)&unk_2102DB95C, (__int128 **)&v7);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20E8AE288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E8AE2A4(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20E8AE34C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20E8AE3DC((uint64_t)a1, a4, (uint64_t)v10);
    sub_20E8AE470(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20E8AE558((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20E8AE34C(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((sub_20E8AE4C4(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((sub_20E8AE4C4(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_BYTE *sub_20E8AE3DC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20E860C04(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8AE458(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE558(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8AE470(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_20E868578(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_20E8AE4C4(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_20E8AE4FC(a1, v2, v5, v6);
}

uint64_t sub_20E8AE4FC(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void sub_20E8AE558(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20E8AE59C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20E8AE59C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned int **sub_20E8AE5E0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

std::logic_error *sub_20E8AE65C(std::logic_error *a1)
{
  std::string v3;

  sub_20E8610C0(&v3, "too many positional options have been specified on the command line");
  std::logic_error::logic_error(a1, &v3);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AD988;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AD9B0;
  return a1;
}

void sub_20E8AE6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8AE6EC(std::logic_error *a1)
{
  void *v1;

  std::logic_error::~logic_error(a1);
  operator delete(v1);
}

void sub_20E8AE700(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20E8AECBC(v4 - 4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::logic_error *sub_20E8AE770(std::logic_error *a1, const std::string *a2)
{
  void *__p[2];
  char v6;

  sub_20E8610C0(__p, "unrecognised option '%canonical_option%'");
  sub_20E8AE7F8(a1, (__int128 *)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AD9F0;
  return a1;
}

void sub_20E8AE7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::logic_error *sub_20E8AE7F8(std::logic_error *a1, __int128 *a2, const std::string *a3)
{
  std::string __p;

  sub_20E8610C0(&__p, "");
  sub_20E8B8AD8(a1, a2, &__p, a3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9ADA58;
  return a1;
}

void sub_20E8AE878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8AE894(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8AE8B0(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8AE8C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9AE570;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  sub_20E8AE92C(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_20E866B68(a1 + 24, *(_QWORD *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_20E8AE92C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E8AE92C(a1, *a2);
    sub_20E8AE92C(a1, a2[1]);
    sub_20E8AE974((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20E8AE974(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20E8AE9C8(uint64_t a1, int a2, const std::string *a3, const std::string *a4, int a5)
{
  void *__p[2];
  char v12;

  *(_QWORD *)a1 = &unk_24C9ADB00;
  sub_20E8AA704(a2, __p);
  sub_20E8B8AD8((std::logic_error *)a1, (__int128 *)__p, a3, a4, a5);
  if (v12 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_24C9ADB00;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_20E8AEA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8AEA78(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8AEA8C(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  void *__p[2];
  char v6;
  void **v7;

  sub_20E8610C0(__p, "option");
  v7 = __p;
  v4 = sub_20E8AE2A4((uint64_t **)(a1 + 24), __p, (uint64_t)&unk_2102DB95C, (__int128 **)&v7);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20E8AEB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8AEB30(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

_QWORD *sub_20E8AEB44(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20E8AD0AC(a1, a2);
    v6 = a1[1];
    v7 = 3 * a2;
    v8 = v6 + 24 * a2;
    v9 = 8 * v7;
    do
    {
      if (*((char *)a3 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)v6, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v10 = *a3;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v6 = v10;
      }
      v6 += 24;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20E8AEBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8AD020(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8AEC08(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_20E8ADCFC(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_20E8AEC6C(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_20E8AECBC(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_20E8AED0C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t sub_20E8AED54(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &unk_24C9ADB40;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tINSt3__16vectorINS_15program_options12basic_optionIcEENS2_9all"
                                        "ocatorIS6_EEEENS_4_mfi3mf1IS9_NS4_6detail7cmdlineERNS3_INS2_12basic_stringIcNS2_"
                                        "11char_traitsIcEENS7_IcEEEENS7_ISI_EEEEEENS0_5list2INS0_5valueIPSD_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost3_bi6bind_tINSt3__16vectorINS_15program_options12basic_optionIcEENS2_9allocatorIS6_EEEENS_4_mfi3mf1IS9_NS4_6detail7cmdlineERNS3_INS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS7_ISI_EEEEEENS0_5list2INS0_5valueIPSD_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t sub_20E8AEDF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(_QWORD *))a1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_20E8AEE0C(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24C9ADBA8;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADBD8;
  *(_QWORD *)(a1 + 24) = &unk_24C9ADC00;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20E8AEE68(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

char *sub_20E8AEEA8(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_24C9AD9B0;
  *((_QWORD *)v2 + 3) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_24C9ADBA8;
  *((_QWORD *)v2 + 1) = &unk_24C9ADBD8;
  *((_QWORD *)v2 + 3) = &unk_24C9ADC00;
  sub_20E86E24C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_20E8AEF70(_Unwind_Exception *a1)
{
  void *v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8AEFA4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8AF12C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADB50, (void (*)(void *))sub_20E8AEE68);
}

void sub_20E8AEFE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8AEFF4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_20E8AF034(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_20E8AF06C(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  operator delete(v2);
}

void sub_20E8AF0B0(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_20E8AF0E8(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 3;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  operator delete(v2);
}

uint64_t sub_20E8AF12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_24C9AD9B0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24C9ADBA8;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADBD8;
  *(_QWORD *)(a1 + 24) = &unk_24C9ADC00;
  return a1;
}

void sub_20E8AF1D8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AF1EC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  *(_QWORD *)a1 = &unk_24C9ADC68;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADC98;
  *(_QWORD *)(a1 + 128) = &unk_24C9ADCD0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

uint64_t sub_20E8AF248(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

_QWORD *sub_20E8AF288(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0xA8uLL);
  *v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 1), a1 + 8);
  v2[16] = &unk_24C9ABB60;
  v2[1] = &unk_24C9AD9F0;
  v3 = *(_QWORD *)(a1 + 136);
  v2[17] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  *v2 = &unk_24C9ADC68;
  v2[1] = &unk_24C9ADC98;
  v2[16] = &unk_24C9ADCD0;
  sub_20E86E24C((uint64_t)(v2 + 16), a1 + 128);
  return v2;
}

void sub_20E8AF350(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8AF38C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8AFD40((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADC10, (void (*)(void *))sub_20E8AF248);
}

void sub_20E8AF3C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8AF3DC(uint64_t *a1)
{
  a1[16] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 17);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8AF41C(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
}

void sub_20E8AF454(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8AF498(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
}

void sub_20E8AF4D0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 16;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
  operator delete(v2);
}

uint64_t sub_20E8AF514(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)off_24C9AE570;
  LODWORD(v4[1].__vftable) = *(_DWORD *)(a2 + 16);
  sub_20E8AF634((uint64_t *)&v4[1].__imp_, a2 + 24);
  sub_20E8AFA20((uint64_t *)(a1 + 48), a2 + 48);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 72), *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v5;
  }
  v6 = (_BYTE *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20E860C04(v6, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_20E8AF5E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  sub_20E8AE92C(v3, *(_QWORD **)(v1 + 56));
  sub_20E866B68(v2, *(_QWORD *)(v1 + 32));
  std::logic_error::~logic_error((std::logic_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8AF634(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20E8AF688(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_20E8AF670(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E866B68(v1, *(_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8AF688(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = sub_20E8AF70C(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20E8AF70C(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = sub_20E8AF7A0(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20E8AF924((uint64_t)a1, a4, (uint64_t)v10);
    sub_20E8AE470(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20E8AE558((uint64_t)v10, 0);
  }
  return v7;
}

void **sub_20E8AF7A0(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (sub_20E8AE4C4(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((sub_20E8AE4C4(v12 + 4, a5) & 0x80) == 0)
        return (void **)sub_20E8AE34C((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_20E8AE4C4((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((sub_20E8AE4C4(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)sub_20E8AE34C((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

char *sub_20E8AF924@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20E8AF98C(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8AF974(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE558(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20E8AF98C(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20E8AFA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E8AFA20(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20E8AFA74(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_20E8AFA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE92C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8AFA74(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = sub_20E8AFAF8(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20E8AFAF8(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = sub_20E8AF7A0(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20E8AFB8C((uint64_t)a1, a4, (uint64_t)v10);
    sub_20E8AE470(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20E8AFCFC((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20E8AFB8C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20E8AFBF4(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8AFBDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AFCFC(v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E8AFBF4(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20E8AFC68(__dst + 24, (__int128 *)((char *)a2 + 24));
  return __dst;
}

void sub_20E8AFC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20E8AFC68(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20E8AFCE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20E8AFCFC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20E8AE974((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20E8AFD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = &unk_24C9AD9F0;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 136) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  *(_QWORD *)a1 = &unk_24C9ADC68;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADC98;
  *(_QWORD *)(a1 + 128) = &unk_24C9ADCD0;
  return a1;
}

void sub_20E8AFDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8AFE00(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24C9ADD38;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADD68;
  *(_QWORD *)(a1 + 136) = &unk_24C9ADDA8;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_20E8AFE68(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 144));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

char *sub_20E8AFEA8(uint64_t a1)
{
  char *v2;
  int v3;
  uint64_t v4;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 8), a1 + 8);
  v3 = *(_DWORD *)(a1 + 128);
  *((_QWORD *)v2 + 17) = &unk_24C9ABB60;
  *((_DWORD *)v2 + 32) = v3;
  *((_QWORD *)v2 + 1) = &unk_24C9ADA90;
  v4 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)v2 + 18) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_DWORD *)v2 + 42) = *(_DWORD *)(a1 + 168);
  *(_QWORD *)v2 = &unk_24C9ADD38;
  *((_QWORD *)v2 + 1) = &unk_24C9ADD68;
  *((_QWORD *)v2 + 17) = &unk_24C9ADDA8;
  sub_20E86E24C((uint64_t)(v2 + 136), a1 + 136);
  return v2;
}

void sub_20E8AFF78(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8AFFB4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8B013C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADCE0, (void (*)(void *))sub_20E8AFE68);
}

void sub_20E8AFFF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B0004(uint64_t *a1)
{
  a1[17] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 18);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8B0044(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
}

void sub_20E8B007C(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8B00C0(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
}

void sub_20E8B00F8(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 17;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
  operator delete(v2);
}

uint64_t sub_20E8B013C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 8) = &unk_24C9ADA90;
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 144) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)a1 = &unk_24C9ADD38;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADD68;
  *(_QWORD *)(a1 + 136) = &unk_24C9ADDA8;
  return a1;
}

void sub_20E8B01F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B0204(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_24C9ADE00;
  *(_WORD *)(a1 + 96) = 0;
  sub_20E8B13D0((uint64_t *)(a1 + 104), (uint64_t)a2);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = a3;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v9 = (char *)(v7 + 4);
      if (*((char *)v7 + 55) < 0)
        v9 = *(char **)v9;
      sub_20E8B0348(a1, v9);
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v6);
  }
  return a1;
}

void sub_20E8B0304(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8B0744(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B0348(uint64_t a1, char *a2)
{
  std::string *v4;
  int64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  char v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int64_t v23;
  char **v24;
  int v25;
  char *v26;
  int64_t v27;
  char **v28;
  char **v29;
  BOOL v30;
  int v32;
  void *v33;
  int64_t v34;
  char **v35;
  int v36;
  void *v37;
  uint64_t v38;
  char *v39;
  const std::string::value_type *v40;
  const std::string::value_type *v41;
  const std::string::value_type *v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::logic_error v53;
  char **v54;
  int64_t v55;
  unsigned __int8 v56;

  v4 = (std::string *)sub_20E8610C0(&v54, a2);
  if (((char)v56 & 0x80000000) == 0)
  {
    v5 = v56;
    if (*((_BYTE *)&v54 + v56 - 1) != 42)
      return;
LABEL_5:
    std::string::resize(v4, v5 - 1, 0);
    v8 = *(_QWORD **)(a1 + 136);
    v6 = (uint64_t *)(a1 + 136);
    v7 = v8;
    v9 = (uint64_t **)(v6 - 1);
    if (!v8)
      goto LABEL_16;
    v10 = v6;
    do
    {
      v11 = sub_20E8AE4C4(v7 + 4, (void **)&v54);
      if (v11 >= 0)
        v12 = v7;
      else
        v12 = v7 + 1;
      if (v11 >= 0)
        v10 = v7;
      v7 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v10 == v6)
    {
LABEL_16:
      v15 = 0;
      v10 = v6;
    }
    else
    {
      if (*((char *)v10 + 55) < 0)
      {
        v13 = (char *)v10[4];
        v14 = v10[5];
      }
      else
      {
        v13 = (char *)(v10 + 4);
        v14 = *((unsigned __int8 *)v10 + 55);
      }
      if ((v56 & 0x80u) == 0)
        v16 = (char **)&v54;
      else
        v16 = v54;
      if ((v56 & 0x80u) == 0)
        v17 = v56;
      else
        v17 = v55;
      if (v17)
      {
        v18 = &v13[v14];
        if (v14 >= v17)
        {
          v36 = *(char *)v16;
          v37 = v13;
          do
          {
            v38 = v14 - v17;
            if (v38 == -1)
              break;
            v39 = (char *)memchr(v37, v36, v38 + 1);
            if (!v39)
              break;
            v19 = v39;
            if (!memcmp(v39, v16, v17))
              goto LABEL_27;
            v37 = v19 + 1;
            v14 = v18 - (v19 + 1);
          }
          while (v14 >= v17);
        }
        v19 = v18;
LABEL_27:
        v20 = v19 - v13;
        if (v19 == v18)
          v20 = -1;
      }
      else
      {
        v20 = 0;
      }
      v15 = v20 == 0;
    }
    if (v10 == *v9)
    {
      if (!v15)
        goto LABEL_61;
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        do
        {
          v10 = (uint64_t *)v21;
          v21 = *(_QWORD *)(v21 + 8);
        }
        while (v21);
      }
      else
      {
        v22 = v10;
        do
        {
          v10 = (uint64_t *)v22[2];
          v30 = *v10 == (_QWORD)v22;
          v22 = v10;
        }
        while (v30);
      }
      v23 = v56;
      if ((v56 & 0x80u) == 0)
        v24 = (char **)&v54;
      else
        v24 = v54;
      v25 = *((char *)v10 + 55);
      if (v25 >= 0)
        v26 = (char *)(v10 + 4);
      else
        v26 = (char *)v10[4];
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)v10 + 55);
      else
        v27 = v10[5];
      if (v27)
      {
        if ((v56 & 0x80u) != 0)
          v23 = v55;
        v28 = (char **)((char *)v24 + v23);
        if (v23 >= v27)
        {
          v32 = *v26;
          v33 = v24;
          do
          {
            v34 = v23 - v27;
            if (v34 == -1)
              break;
            v35 = (char **)memchr(v33, v32, v34 + 1);
            if (!v35)
              break;
            v29 = v35;
            if (!memcmp(v35, v26, v27))
              goto LABEL_54;
            v33 = (char *)v29 + 1;
            v23 = (char *)v28 - ((char *)v29 + 1);
          }
          while (v23 >= v27);
        }
        v29 = v28;
LABEL_54:
        v30 = v29 != v28 && v29 == v24;
        if (!v30 && !v15)
        {
LABEL_61:
          sub_20E8B19F0(v9, (void **)&v54, (uint64_t)&v54);
          if (((char)v56 & 0x80000000) == 0)
            return;
          goto LABEL_62;
        }
      }
    }
    sub_20E8610C0(&v48, a2);
    sub_20E8B0848("options '", &v48, &v49);
    sub_20E8B07EC("' and '", &v49, &v50);
    v42 = (const std::string::value_type *)v10[4];
    v41 = (const std::string::value_type *)(v10 + 4);
    v40 = v42;
    v43 = v41[23];
    if (v43 >= 0)
      v44 = v41;
    else
      v44 = v40;
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)v41 + 23);
    else
      v45 = *((_QWORD *)v41 + 1);
    v46 = std::string::append(&v50, v44, v45);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    sub_20E8B07EC("*' will both match the same arguments from the configuration file", &v51, &v52);
    std::logic_error::logic_error(&v53, &v52);
    v53.__vftable = (std::logic_error_vtbl *)&unk_24C9AD988;
    sub_20E8B079C(&v53);
  }
  v5 = v55;
  if (*((_BYTE *)v54 + v55 - 1) == 42)
    goto LABEL_5;
LABEL_62:
  operator delete(v54);
}

void sub_20E8B0698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,std::logic_error a40)
{
  uint64_t v40;

  std::logic_error::~logic_error(&a40);
  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B0744(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  sub_20E8AD020(&v3);
  v3 = (void **)(a1 + 40);
  sub_20E8AD020(&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E8B079C(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8B1610((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADED8, (void (*)(void *))sub_20E8B166C);
}

void sub_20E8B07D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20E8B07EC@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_20E8B0848@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_20E8B08A4(uint64_t a1)
{
  std::string *v2;
  size_t size;
  std::string *v4;
  _BYTE *v5;
  std::string::size_type v6;
  size_t v8;
  std::string *p_str;
  uint64_t v10;
  std::string *v11;
  _BYTE *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  BOOL v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  char v31;
  std::string __str;
  char v33;

  memset(&__str, 0, sizeof(__str));
  v2 = (std::string *)(a1 + 152);
  do
  {
    while (1)
    {
      if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 16))(a1, &__str))
      {
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_74;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        v4 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__str
           : (std::string *)__str.__r_.__value_.__r.__words[0];
        v5 = memchr(v4, 35, size);
        v6 = v5 - (_BYTE *)v4;
        if (v5 && v6 != -1)
        {
          std::string::basic_string(&v28, &__str, 0, v6, (std::allocator<char> *)&v30);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = v28;
        }
      }
      sub_20E8B0DD4(&__str, &v28);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v28;
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      v8 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (*__str.__r_.__value_.__l.__data_ != 91
          || *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_ - 1) != 93)
        {
          goto LABEL_36;
        }
LABEL_27:
        std::string::basic_string(&v28, &__str, 1uLL, v8 - 2, (std::allocator<char> *)&v30);
        if (*(char *)(a1 + 175) < 0)
          operator delete(v2->__r_.__value_.__l.__data_);
        *v2 = v28;
        if (*(char *)(a1 + 175) < 0)
        {
          v11 = *(std::string **)(a1 + 152);
          v10 = *(_QWORD *)(a1 + 160);
        }
        else
        {
          v10 = *(unsigned __int8 *)(a1 + 175);
          v11 = v2;
        }
        if (v11->__r_.__value_.__s.__data_[v10 - 1] != 46)
          std::string::push_back(v2, 46);
      }
    }
    v8 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  while (!*((_BYTE *)&v28.__r_.__value_.__s + 23));
  if (__str.__r_.__value_.__s.__data_[0] == 91 && *(&v31 + HIBYTE(v28.__r_.__value_.__r.__words[2])) == 93)
    goto LABEL_27;
  p_str = &__str;
LABEL_36:
  v12 = memchr(p_str, 61, v8);
  if (!v12 || (v13 = v12 - (_BYTE *)p_str, v13 == -1))
  {
    sub_20E8B1094((uint64_t)&v28, &__str, 36);
    sub_20E8B1020((uint64_t)&v28);
  }
  std::string::basic_string(&v29, &__str, 0, v13, (std::allocator<char> *)&v33);
  sub_20E8B0DD4(&v29, &v28);
  v14 = *(char *)(a1 + 175);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)v2;
  else
    v15 = *(const std::string::value_type **)(a1 + 152);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a1 + 175);
  else
    v16 = *(_QWORD *)(a1 + 160);
  v17 = std::string::insert(&v28, 0, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::string::basic_string(&v28, &__str, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v33);
  sub_20E8B0DD4(&v28, &v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v19 = sub_20E8B0EB8(a1, (void **)&v30.__r_.__value_.__l.__data_);
  if (!v19 && !*(_BYTE *)(a1 + 176))
  {
    sub_20E8AE770((std::logic_error *)&v28, &v30);
    sub_20E8ACEC4((uint64_t)&v28);
  }
  std::string::operator=((std::string *)(a1 + 16), &v30);
  sub_20E8AD060((uint64_t *)(a1 + 48));
  v20 = *(_QWORD *)(a1 + 56);
  if (v20 >= *(_QWORD *)(a1 + 64))
  {
    v22 = sub_20E8ADE68((uint64_t *)(a1 + 48), (__int128 *)&v29);
  }
  else
  {
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(*(_BYTE **)(a1 + 56), v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else
    {
      v21 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      *(_QWORD *)(v20 + 16) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
      *(_OWORD *)v20 = v21;
    }
    v22 = v20 + 24;
    *(_QWORD *)(a1 + 56) = v20 + 24;
  }
  *(_QWORD *)(a1 + 56) = v22;
  *(_BYTE *)(a1 + 96) = !v19;
  sub_20E8AD060((uint64_t *)(a1 + 72));
  v23 = *(_QWORD *)(a1 + 80);
  if (v23 >= *(_QWORD *)(a1 + 88))
  {
    v25 = sub_20E8ADE68((uint64_t *)(a1 + 72), (__int128 *)&v30);
  }
  else
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(*(_BYTE **)(a1 + 80), v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else
    {
      v24 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)&v30.__r_.__value_.__l + 2);
      *(_OWORD *)v23 = v24;
    }
    v25 = v23 + 24;
    *(_QWORD *)(a1 + 80) = v25;
  }
  *(_QWORD *)(a1 + 80) = v25;
  if (v25 >= *(_QWORD *)(a1 + 88))
  {
    v27 = sub_20E8ADE68((uint64_t *)(a1 + 72), (__int128 *)&v29);
  }
  else
  {
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04((_BYTE *)v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else
    {
      v26 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
      *(_OWORD *)v25 = v26;
    }
    v27 = v25 + 24;
    *(_QWORD *)(a1 + 80) = v25 + 24;
  }
  *(_QWORD *)(a1 + 80) = v27;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
LABEL_74:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20E8B0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v34 + 80) = v35;
  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  _Unwind_Resume(exception_object);
}

std::string *sub_20E8B0DD4@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v3;
  std::string *v4;
  uint64_t size;
  const std::string *v6;
  std::string::size_type v7;
  char *v8;
  char v10;

  v3 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    v4 = result;
  else
    v4 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  else
    size = result->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_17;
  v6 = result;
  v7 = 0;
  while (1)
  {
    result = (std::string *)memchr(" \t\r\n", v4->__r_.__value_.__s.__data_[v7], 4uLL);
    if (!result)
      break;
    if (size == ++v7)
      goto LABEL_17;
  }
  if (v7 == -1)
  {
LABEL_17:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v8 = (char *)&v4[-1].__r_.__value_.__r.__words[2] + 7;
    while (size)
    {
      if (!memchr(" \t\r\n", v8[size--], 4uLL))
        return std::string::basic_string(a2, v6, v7, size - v7 + 1, (std::allocator<char> *)&v10);
    }
    size = -1;
    return std::string::basic_string(a2, v6, v7, size - v7 + 1, (std::allocator<char> *)&v10);
  }
  return result;
}

BOOL sub_20E8B0EB8(uint64_t a1, void **a2)
{
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  if ((void **)(a1 + 112) != sub_20E8B1354(a1 + 104, a2))
    return 1;
  v5 = (_QWORD *)(a1 + 136);
  v6 = *(_QWORD **)(a1 + 136);
  if (v6)
  {
    do
    {
      v7 = sub_20E8AE4C4(v6 + 4, a2);
      if (v7 >= 0)
        v8 = v6;
      else
        v8 = v6 + 1;
      if (v7 >= 0)
        v5 = v6;
      v6 = (_QWORD *)*v8;
    }
    while (*v8);
  }
  if (v5 != *(_QWORD **)(a1 + 128))
  {
    v9 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v5[2];
        v11 = *v10 == (_QWORD)v5;
        v5 = v10;
      }
      while (v11);
    }
    v12 = *((_BYTE *)a2 + 23);
    if (v12 >= 0)
      v13 = (char *)a2;
    else
      v13 = (char *)*a2;
    v16 = (char *)v10[4];
    v14 = (char *)(v10 + 4);
    v15 = v16;
    v17 = v14[23];
    if (v17 >= 0)
      v18 = v14;
    else
      v18 = v15;
    if (v17 >= 0)
      v19 = v14[23];
    else
      v19 = *((_QWORD *)v14 + 1);
    if (!v19)
      return 1;
    if (v12 >= 0)
      v20 = *((unsigned __int8 *)a2 + 23);
    else
      v20 = (int64_t)a2[1];
    if (v20 >= v19)
    {
      v21 = &v13[v20];
      v22 = *v18;
      v23 = v13;
      do
      {
        v24 = v20 - v19;
        if (v24 == -1)
          break;
        v25 = (char *)memchr(v23, v22, v24 + 1);
        if (!v25)
          break;
        v26 = v25;
        if (!memcmp(v25, v18, v19))
          return v26 != v21 && v26 == v13;
        v23 = v26 + 1;
        v20 = v21 - (v26 + 1);
      }
      while (v20 >= v19);
    }
  }
  return 0;
}

void sub_20E8B1020(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8B1A6C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADF98, (void (*)(void *))sub_20E8B1AD4);
}

void sub_20E8B105C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B1078(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20E8B1E70(a1);
  operator delete(v1);
}

uint64_t sub_20E8B108C()
{
  return 0;
}

uint64_t sub_20E8B1094(uint64_t a1, const std::string *a2, int a3)
{
  _OWORD *v6;
  std::string __p;
  std::string v9;

  sub_20E8610C0(&v9, "");
  sub_20E8610C0(&__p, "");
  sub_20E8AE9C8(a1, a3, &v9, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24C9ADE90;
  sub_20E8610C0(&v9, "invalid_line");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  v6 = sub_20E8B1290((uint64_t **)(a1 + 24), (void **)&v9.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, &__p);
  std::string::operator=((std::string *)((char *)v6 + 56), a2);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20E8B1184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20E8AE8C4(v21);
  _Unwind_Resume(a1);
}

void sub_20E8B11E0(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8B11F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  __int128 v5;
  void *__p[2];
  char v7;

  v3 = a1 + 24;
  sub_20E8610C0(__p, "invalid_line");
  v4 = sub_20E8B1354(v3, __p);
  if (*((char *)v4 + 79) < 0)
  {
    sub_20E860C04((_BYTE *)a2, v4[7], (unint64_t)v4[8]);
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 7);
    *(_QWORD *)(a2 + 16) = v4[9];
    *(_OWORD *)a2 = v5;
  }
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20E8B1274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20E8B1290(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_20E8AE34C((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    sub_20E8AE470(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_20E8AE558((uint64_t)v12, 0);
  }
  return v7;
}

void **sub_20E8B1354(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = sub_20E8AE4C4(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_20E8AE4C4(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t *sub_20E8B13D0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20E8B1424(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_20E8B140C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E866BE0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8B1424(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = sub_20E8B14A8(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20E8B14A8(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)sub_20E8AF7A0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20E8B1528((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20E8AE470(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20E8B1528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20E860C04(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8B15A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20E8B15C4(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20E8B15C4(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20E8B1610(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24C9ADF30;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADF60;
  *(_QWORD *)(a1 + 24) = &unk_24C9ADF88;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20E8B166C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

char *sub_20E8B16AC(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_24C9AD988;
  *((_QWORD *)v2 + 3) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_24C9ADF30;
  *((_QWORD *)v2 + 1) = &unk_24C9ADF60;
  *((_QWORD *)v2 + 3) = &unk_24C9ADF88;
  sub_20E86E24C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_20E8B1774(_Unwind_Exception *a1)
{
  void *v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B17A8(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8B1930((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADED8, (void (*)(void *))sub_20E8B166C);
}

void sub_20E8B17E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B17F8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_20E8B1838(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_20E8B1870(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  operator delete(v2);
}

void sub_20E8B18B4(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_20E8B18EC(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 3;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  operator delete(v2);
}

uint64_t sub_20E8B1930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_24C9AD988;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24C9ADF30;
  *(_QWORD *)(a1 + 8) = &unk_24C9ADF60;
  *(_QWORD *)(a1 + 24) = &unk_24C9ADF88;
  return a1;
}

void sub_20E8B19DC(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8B19F0(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_20E8AE34C((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_20E8B1528((uint64_t)a1, a3, (uint64_t)&v7);
    sub_20E8AE470(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t sub_20E8B1A6C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24C9ADFF0;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE020;
  *(_QWORD *)(a1 + 136) = &unk_24C9AE060;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_20E8B1AD4(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 144));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

char *sub_20E8B1B14(uint64_t a1)
{
  char *v2;
  int v3;
  uint64_t v4;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 8), a1 + 8);
  v3 = *(_DWORD *)(a1 + 128);
  *((_QWORD *)v2 + 17) = &unk_24C9ABB60;
  *((_DWORD *)v2 + 32) = v3;
  *((_QWORD *)v2 + 1) = &unk_24C9ADE90;
  v4 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)v2 + 18) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_DWORD *)v2 + 42) = *(_DWORD *)(a1 + 168);
  *(_QWORD *)v2 = &unk_24C9ADFF0;
  *((_QWORD *)v2 + 1) = &unk_24C9AE020;
  *((_QWORD *)v2 + 17) = &unk_24C9AE060;
  sub_20E86E24C((uint64_t)(v2 + 136), a1 + 136);
  return v2;
}

void sub_20E8B1BE4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B1C20(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8B1DA8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ADF98, (void (*)(void *))sub_20E8B1AD4);
}

void sub_20E8B1C5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B1C70(uint64_t *a1)
{
  a1[17] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 18);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8B1CB0(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
}

void sub_20E8B1CE8(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8B1D2C(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
}

void sub_20E8B1D64(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 17;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
  operator delete(v2);
}

uint64_t sub_20E8B1DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 8) = &unk_24C9ADE90;
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 144) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)a1 = &unk_24C9ADFF0;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE020;
  *(_QWORD *)(a1 + 136) = &unk_24C9AE060;
  return a1;
}

void sub_20E8B1E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B1E70(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C9ADE00;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  sub_20E866BE0(a1 + 128, *(char **)(a1 + 136));
  sub_20E866BE0(a1 + 104, *(char **)(a1 + 112));
  v3 = (void **)(a1 + 72);
  sub_20E8AD020(&v3);
  v3 = (void **)(a1 + 48);
  sub_20E8AD020(&v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20E8B1EFC(uint64_t a1, char *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[12];
  char v20;
  uint64_t v21;

  v4 = (uint64_t *)(a1 + 32);
  sub_20E8AD060((uint64_t *)(a1 + 32));
  sub_20E8610C0(__p, a2);
  sub_20E8B2AE8(v19, (__int128 *)__p, 8);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  while (1)
  {
    v5 = sub_20E8B2BCC(v19, (uint64_t)__p, 0x2Cu);
    v6 = *(_QWORD *)(a1 + 40);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    if (v6 >= *(_QWORD *)(a1 + 48))
    {
      v8 = sub_20E8ADE68(v4, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v18) < 0)
      {
        sub_20E860C04(*(_BYTE **)(a1 + 40), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 16) = v18;
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      *(_QWORD *)(a1 + 40) = v6 + 24;
    }
    *(_QWORD *)(a1 + 40) = v8;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 3) >= 2)
  {
    v9 = *(char *)(v6 - 1) < 0 ? *(_QWORD *)(v6 - 16) : *(unsigned __int8 *)(v6 - 1);
    if (v9 == 1)
    {
      sub_20E8B2D50(45, (const void **)(v6 - 24), (uint64_t)&v15);
      v10 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v10);
      *(_OWORD *)v10 = v15;
      *(_QWORD *)(a1 + 24) = v16;
      v11 = *(_QWORD *)(a1 + 40);
      v12 = (void **)(v11 - 24);
      if (*(char *)(v11 - 1) < 0)
        operator delete(*v12);
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *(_QWORD *)(a1 + 32);
      if ((void **)((char *)v12 - v13) == (void **)24)
      {
        if ((*(char *)(v13 + 23) & 0x80000000) == 0)
        {
          if (*(_BYTE *)(v13 + 23))
            goto LABEL_25;
          goto LABEL_24;
        }
        if (!*(_QWORD *)(v13 + 8))
LABEL_24:
          sub_20E8AD060(v4);
      }
    }
  }
LABEL_25:
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v19[2] = MEMORY[0x24BEDB848] + 16;
  if (v20 < 0)
    operator delete((void *)v19[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v21);
  return a1;
}

void sub_20E8B212C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_20E8B2DDC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B2178(uint64_t a1, char *a2, uint64_t a3, char *__s)
{
  *(_QWORD *)a1 = off_24C9AE080;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_20E8610C0((_QWORD *)(a1 + 56), __s);
  sub_20E8B44D8((uint64_t *)(a1 + 80), a3);
  sub_20E8B1EFC(a1, a2);
  return a1;
}

void sub_20E8B2200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  sub_20E8AE5E0((unsigned int **)(v10 + 88));
  if (*(char *)(v10 + 79) < 0)
    operator delete(*v11);
  a10 = (void **)(v10 + 32);
  sub_20E8AD020(&a10);
  if (*(char *)(v10 + 31) < 0)
    operator delete(*v12);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B2254(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C9AE080;
  sub_20E8AE5E0((unsigned int **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v3 = (void **)(a1 + 32);
  sub_20E8AD020(&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E8B22C0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20E8B2254(a1);
  operator delete(v1);
}

uint64_t sub_20E8B22D4(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  int64_t v10;
  int v11;
  int64_t v12;
  std::string::size_type v13;
  int64_t v14;
  std::string *v15;
  int v16;
  void *v17;
  std::string *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int64_t v23;
  int v24;
  int64_t v25;
  std::string *v26;
  std::string *v27;
  BOOL v28;
  std::string *v29;
  int v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  int v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  int v38;
  std::string *v39;
  int64_t v40;
  char *v41;
  std::string *v42;
  std::string::size_type size;
  std::string::size_type v44;
  std::string *p_p;
  std::string *p_str;
  uint64_t v47;
  void *v48;
  int v50;
  uint64_t v51;
  std::string v54;
  std::string __str;
  std::string __p;
  char v57;

  if (a4)
  {
    sub_20E8B27C8((std::string *)a2, &__p);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __p = *(std::string *)a2;
  }
  v7 = *(__int128 **)(a1 + 32);
  if (v7 == *(__int128 **)(a1 + 40))
  {
    v8 = 0;
LABEL_103:
    v42 = (std::string *)(a1 + 8);
    if (a5)
    {
      sub_20E8B27C8(v42, &__str);
    }
    else if (*(char *)(a1 + 31) < 0)
    {
      sub_20E860C04(&__str, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = __p.__r_.__value_.__l.__size_;
    if (size == v44)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v48 = (void *)__str.__r_.__value_.__r.__words[0];
        if (!memcmp(__str.__r_.__value_.__l.__data_, p_p, __str.__r_.__value_.__l.__size_))
          v8 = 1;
        else
          v8 = v8;
LABEL_129:
        operator delete(v48);
        goto LABEL_130;
      }
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
      {
LABEL_125:
        v8 = 1;
        goto LABEL_130;
      }
      p_str = &__str;
      v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      while (p_str->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
      {
        p_str = (std::string *)((char *)p_str + 1);
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v47)
        {
          v8 = 1;
          break;
        }
      }
    }
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_130;
    v48 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_129;
  }
  v50 = a5;
  v8 = 0;
  v51 = a1;
  do
  {
    if (a4)
    {
      sub_20E8B27C8((std::string *)v7, &__str);
    }
    else if (*((char *)v7 + 23) < 0)
    {
      sub_20E860C04(&__str, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v9 = *v7;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    }
    v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v12 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v13 = __str.__r_.__value_.__l.__size_;
    if (!v13)
    {
LABEL_65:
      v28 = 1;
      if ((v11 & 0x80) != 0)
        goto LABEL_96;
      goto LABEL_98;
    }
    if (!(_DWORD)v8)
    {
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_ - 1) == 42)
          goto LABEL_22;
      }
      else if (*((_BYTE *)&v54.__r_.__value_.__r.__words[2] + HIBYTE(__str.__r_.__value_.__r.__words[2]) + 7) == 42)
      {
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_22:
        std::string::basic_string(&v54, &__str, 0, v12 - 1, (std::allocator<char> *)&v57);
        v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &__p;
        else
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v16 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        v17 = (void *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v54;
        else
          v18 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          v19 = v54.__r_.__value_.__l.__size_;
        if (v19)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = __p.__r_.__value_.__l.__size_;
          v20 = (char *)v15 + v14;
          if (v14 >= v19)
          {
            v38 = v18->__r_.__value_.__s.__data_[0];
            v39 = v15;
            do
            {
              v40 = v14 - v19;
              if (v40 == -1)
                break;
              v41 = (char *)memchr(v39, v38, v40 + 1);
              if (!v41)
                break;
              v21 = v41;
              if (!memcmp(v41, v18, v19))
                goto LABEL_36;
              v39 = (std::string *)(v21 + 1);
              v14 = v20 - (v21 + 1);
            }
            while (v14 >= v19);
          }
          v21 = v20;
LABEL_36:
          if (v21 == v20)
            v22 = -1;
          else
            v22 = v21 - (char *)v15;
          a1 = v51;
          if ((v16 & 0x80000000) == 0)
            goto LABEL_41;
        }
        else
        {
          v22 = 0;
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
        }
        operator delete(v17);
LABEL_41:
        v8 = 2 * (v22 == 0);
        v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v12 = __str.__r_.__value_.__l.__size_;
        v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_43;
      }
      v8 = 0;
    }
LABEL_43:
    if ((v11 & 0x80u) == 0)
      v23 = v10;
    else
      v23 = v12;
    v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v25 = __p.__r_.__value_.__l.__size_;
    if (v23 == v25)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v11 & 0x80) != 0)
      {
        v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v30 = memcmp(__str.__r_.__value_.__l.__data_, v26, v12);
        v28 = v30 != 0;
        if (v30)
          v31 = v8;
        else
          v31 = 1;
        if (!v30 || (a3 & 1) == 0)
          goto LABEL_97;
        goto LABEL_72;
      }
      if (!v11)
        goto LABEL_125;
      v27 = &__str;
      while (v27->__r_.__value_.__s.__data_[0] == v26->__r_.__value_.__s.__data_[0])
      {
        v27 = (std::string *)((char *)v27 + 1);
        v26 = (std::string *)((char *)v26 + 1);
        if (!--v10)
        {
          v28 = 0;
          v8 = 1;
          if ((v11 & 0x80) == 0)
            goto LABEL_98;
          goto LABEL_96;
        }
      }
    }
    if ((a3 & 1) == 0)
      goto LABEL_65;
    if ((v11 & 0x80u) == 0)
      v29 = &__str;
    else
      v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v12 = v23;
LABEL_72:
    if (v24 >= 0)
      v32 = &__p;
    else
      v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v25)
    {
      if (v12 >= v25)
      {
        v33 = (std::string *)((char *)v29 + v12);
        v34 = v32->__r_.__value_.__s.__data_[0];
        v35 = v29;
        while (v12 - v25 != -1)
        {
          v36 = (std::string *)memchr(v35, v34, v12 - v25 + 1);
          if (!v36)
            break;
          v37 = v36;
          if (!memcmp(v36, v32, v25))
          {
            if (v37 == v33 || v37 != v29)
              break;
            goto LABEL_93;
          }
          v35 = (std::string *)((char *)&v37->__r_.__value_.__l.__data_ + 1);
          v12 = (char *)v33 - ((char *)&v37->__r_.__value_.__l.__data_ + 1);
          v28 = 1;
          if (v12 < v25)
            goto LABEL_95;
        }
      }
    }
    else
    {
LABEL_93:
      v8 = 2;
    }
    v28 = 1;
LABEL_95:
    a1 = v51;
    if ((v11 & 0x80) != 0)
    {
LABEL_96:
      v31 = v8;
LABEL_97:
      operator delete(__str.__r_.__value_.__l.__data_);
      v8 = v31;
    }
LABEL_98:
    if (!v28)
      break;
    v7 = (__int128 *)((char *)v7 + 24);
  }
  while (v7 != *(__int128 **)(a1 + 40));
  a5 = v50;
  if ((_DWORD)v8 != 1)
    goto LABEL_103;
LABEL_130:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_20E8B2790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20E8B27C8@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  BOOL v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::value_type v8;
  std::string::size_type v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = (result->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = result->__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = result;
    v6 = 0;
    do
    {
      if (v3)
        v7 = (std::string *)v5->__r_.__value_.__r.__words[0];
      else
        v7 = v5;
      v8 = __tolower(v7->__r_.__value_.__s.__data_[v6]);
      result = std::string::append(a2, 1uLL, v8);
      ++v6;
      v3 = (v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v9 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
      if ((v9 & 0x80u) != 0)
        v9 = v5->__r_.__value_.__l.__size_;
    }
    while (v6 < v9);
  }
  return result;
}

void sub_20E8B2860(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8B287C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 == *(_QWORD *)(a1 + 40))
    return a1 + 8;
  if (std::string::find(*(const std::string **)(a1 + 32), 42, 0) == -1)
    return v2;
  return a2;
}

void sub_20E8B28C4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  std::string::size_type v11;
  std::string v12;

  v6 = *(__int128 **)(a1 + 32);
  v7 = *(__int128 **)(a1 + 40);
  if (v6 != v7 && (a2 == 4096 || a2 == 1))
  {
    std::operator+<char>();
    return;
  }
  if (*(char *)(a1 + 31) < 0)
    v8 = *(_QWORD *)(a1 + 16);
  else
    v8 = *(unsigned __int8 *)(a1 + 31);
  v9 = (uint64_t *)(a1 + 8);
  if (v8 == 2)
  {
    if (a2 == 4)
    {
      sub_20E8610C0(&v12, "-");
      if (*(char *)(a1 + 31) < 0)
        v9 = (uint64_t *)*v9;
      goto LABEL_21;
    }
    if (a2 == 8)
    {
      sub_20E8610C0(&v12, "/");
      if (*(char *)(a1 + 31) < 0)
        v9 = (uint64_t *)*v9;
LABEL_21:
      std::string::push_back(&v12, *((_BYTE *)v9 + 1));
      *(_OWORD *)a3 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
      v11 = v12.__r_.__value_.__r.__words[2];
      goto LABEL_22;
    }
  }
  if (v6 == v7)
  {
    if ((*(_BYTE *)(a1 + 31) & 0x80) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v9;
      v11 = *(_QWORD *)(a1 + 24);
LABEL_22:
      *(_QWORD *)(a3 + 16) = v11;
      return;
    }
    sub_20E860C04((_BYTE *)a3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a3, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v10 = *v6;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v6 + 2);
    *(_OWORD *)a3 = v10;
  }
}

void sub_20E8B2A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20E8B2A5C(uint64_t a1)
{
  unsigned __int8 v1;
  int v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254A5A7C8);
  if ((v1 & 1) == 0)
  {
    v4 = a1;
    v3 = __cxa_guard_acquire(&qword_254A5A7C8);
    a1 = v4;
    if (v3)
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A5A7B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5A7C8);
      a1 = v4;
    }
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40))
    return &unk_254A5A7B0;
  else
    return *(void **)(a1 + 32);
}

_QWORD *sub_20E8B2AE8(_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  sub_20E8B460C(v8, a2, a3 | 8);
  return a1;
}

void sub_20E8B2BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B2BCC(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x212BC5BB8](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20E8B2CF8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20E8B2CC4);
  }
  __cxa_rethrow();
}

void sub_20E8B2D3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B2D50@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = sub_20E8B39F0(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a1;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

uint64_t sub_20E8B2DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](a1 + 120);
  return a1;
}

uint64_t sub_20E8B2E60@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 88);
  *a2 = *(_QWORD *)(result + 80);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20E8B2E84(uint64_t *a1, char *a2, char *a3)
{
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  char v14;

  v6 = operator new(0x60uLL);
  v7 = operator new(0x10uLL);
  *(_QWORD *)v7 = &unk_24C9AE638;
  v7[8] = 1;
  sub_20E8B2178((uint64_t)v6, a2, (uint64_t)v7, a3);
  sub_20E8B47AC((uint64_t *)&v13, (uint64_t)v6);
  v8 = *a1;
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unsigned int *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20E8B3124((_QWORD *)(v8 + 32), &v12);
  v14 = 0;
  sub_20E8B324C(v8 + 56, &v14);
  sub_20E8AE5E0((unsigned int **)&v12 + 1);
  sub_20E8AE5E0((unsigned int **)&v13 + 1);
  return a1;
}

void sub_20E8B2F70(_Unwind_Exception *a1)
{
  unsigned int **v1;
  unsigned int **v2;

  sub_20E8AE5E0(v2);
  sub_20E8AE5E0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8B2F9C(uint64_t *a1, char *a2, uint64_t a3, char *a4)
{
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v13;
  __int128 v14;
  char v15;

  v8 = operator new(0x60uLL);
  sub_20E8B2178((uint64_t)v8, a2, a3, a4);
  sub_20E8B47AC((uint64_t *)&v14, (uint64_t)v8);
  v9 = *a1;
  v13 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unsigned int *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_20E8B3124((_QWORD *)(v9 + 32), &v13);
  v15 = 0;
  sub_20E8B324C(v9 + 56, &v15);
  sub_20E8AE5E0((unsigned int **)&v13 + 1);
  sub_20E8AE5E0((unsigned int **)&v14 + 1);
  return a1;
}

void sub_20E8B3068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_20E8B3094(uint64_t a1, int a2, int a3)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

_QWORD *sub_20E8B30B4(_QWORD *__dst, __int128 *a2, int a3, int a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  *((_DWORD *)__dst + 6) = a3;
  *((_DWORD *)__dst + 7) = a4;
  *((_OWORD *)__dst + 2) = 0u;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  __dst[12] = 0;
  return __dst;
}

uint64_t sub_20E8B3124(_QWORD *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20E867F44();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_20E8B3AD8(result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    sub_20E8B3A74(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = sub_20E8B3B0C((uint64_t)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = v7 + 2;
  }
  a1[1] = v11;
  return result;
}

void sub_20E8B3238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8B3B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8B324C(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      sub_20E867F44();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20E8B3B5C((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

_QWORD *sub_20E8B32F0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = operator new(0x68uLL);
  sub_20E8B3E8C(v4, (__int128 *)a2);
  sub_20E8B48CC((uint64_t *)&v12, (uint64_t)v4);
  sub_20E8B3444(a1 + 10, &v12);
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_OWORD *)(v5 + 16 * v6);
      v11 = v7;
      if (*((_QWORD *)&v7 + 1))
      {
        v8 = (unsigned int *)(*((_QWORD *)&v7 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      sub_20E8B3124(a1 + 4, &v11);
      v13 = 0;
      sub_20E8B324C((uint64_t)(a1 + 7), &v13);
      sub_20E8AE5E0((unsigned int **)&v11 + 1);
      *(_QWORD *)(a1[7] + (((unint64_t)(a1[8] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*((_BYTE *)a1 + 64) - 1);
      ++v6;
      v5 = *(_QWORD *)(a2 + 32);
    }
    while (v6 < (*(_QWORD *)(a2 + 40) - v5) >> 4);
  }
  sub_20E8AE5E0((unsigned int **)&v12 + 1);
  return a1;
}

void sub_20E8B340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8AE5E0((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B3444(_QWORD *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20E867F44();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_20E8B3AD8(result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    sub_20E8B3A74(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = sub_20E8B3B0C((uint64_t)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = v7 + 2;
  }
  a1[1] = v11;
  return result;
}

void sub_20E8B3558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8B3B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B356C(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t result;
  std::string v6;
  std::logic_error v7[7];

  result = sub_20E8B35E8(a1, a2, a3, a4, a5);
  if (!result)
  {
    sub_20E8610C0(&v6, "");
    sub_20E8AE770(v7, &v6);
    sub_20E8ACEC4((uint64_t)v7);
  }
  return result;
}

void sub_20E8B35BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20E8AE8C4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B35E8(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v39[9];
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  char *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;

  v46 = 0uLL;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == v5)
    goto LABEL_40;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = sub_20E8B22D4(*(_QWORD *)(v5 + 16 * v11), a2, a3, a4, a5);
    if (!v14)
      goto LABEL_37;
    if (v14 == 1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
      v16 = *(_QWORD *)(v15 + 32);
      if (v16 == *(_QWORD *)(v15 + 40))
      {
        v17 = v15 + 8;
      }
      else if (std::string::find(*(const std::string **)(v15 + 32), 42, 0) == -1)
      {
        v17 = v16;
      }
      else
      {
        v17 = a2;
      }
      v21 = v41;
      if ((unint64_t)v41 >= v42)
      {
        v23 = (__int128 *)sub_20E8ADE68((uint64_t *)&v40, (__int128 *)v17);
      }
      else
      {
        if (*(char *)(v17 + 23) < 0)
        {
          sub_20E860C04(v41, *(void **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v17;
          *((_QWORD *)v41 + 2) = *(_QWORD *)(v17 + 16);
          *v21 = v22;
        }
        v23 = (__int128 *)((char *)v21 + 24);
      }
      v41 = v23;
      v27 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11 + 8);
      if (v28)
      {
        v29 = (unsigned int *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v46;
      v46 = v27;
      v39[0] = v31;
      sub_20E8AE5E0((unsigned int **)v39 + 1);
LABEL_32:
      v13 = 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
    v19 = *(_QWORD *)(v18 + 32);
    if (v19 == *(_QWORD *)(v18 + 40))
    {
      v20 = v18 + 8;
    }
    else if (std::string::find(*(const std::string **)(v18 + 32), 42, 0) == -1)
    {
      v20 = v19;
    }
    else
    {
      v20 = a2;
    }
    v24 = v44;
    if ((unint64_t)v44 >= v45)
    {
      v26 = (__int128 *)sub_20E8ADE68((uint64_t *)&v43, (__int128 *)v20);
    }
    else
    {
      if (*(char *)(v20 + 23) < 0)
      {
        sub_20E860C04(v44, *(void **)v20, *(_QWORD *)(v20 + 8));
      }
      else
      {
        v25 = *(_OWORD *)v20;
        *((_QWORD *)v44 + 2) = *(_QWORD *)(v20 + 16);
        *v24 = v25;
      }
      v26 = (__int128 *)((char *)v24 + 24);
    }
    v44 = v26;
    if ((v13 & 1) != 0)
      goto LABEL_32;
    v32 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11 + 8);
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = v46;
    v46 = v32;
    v39[0] = v36;
    sub_20E8AE5E0((unsigned int **)v39 + 1);
    v13 = 0;
LABEL_37:
    v5 = *(_QWORD *)(a1 + 32);
    v11 = ++v12;
  }
  while (v12 < (unint64_t)((*(_QWORD *)(a1 + 40) - v5) >> 4));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3) > 1)
  {
    sub_20E8B42F0((uint64_t)v39, &v40);
    sub_20E8B3954((uint64_t)v39);
  }
  if (v40 == v41)
  {
LABEL_40:
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v44 - v43) >> 3) >= 2)
    {
      sub_20E8B42F0((uint64_t)v39, (__int128 **)&v43);
      sub_20E8B3954((uint64_t)v39);
    }
  }
  v37 = v46;
  *(_QWORD *)&v39[0] = &v40;
  sub_20E8AD020((void ***)v39);
  *(_QWORD *)&v39[0] = &v43;
  sub_20E8AD020((void ***)v39);
  sub_20E8AE5E0((unsigned int **)&v46 + 1);
  return v37;
}

void sub_20E8B38E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E8B39A4((uint64_t)&a9);
  a9 = (void **)&a27;
  sub_20E8AD020(&a9);
  a9 = (void **)(v27 - 136);
  sub_20E8AD020(&a9);
  sub_20E8AE5E0((unsigned int **)((v27 - 112) | 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B394C(uint64_t a1)
{
  return a1 + 32;
}

void sub_20E8B3954(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xC0uLL);
  sub_20E8B4AA0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE1D0, (void (*)(void *))sub_20E8B4AA4);
}

void sub_20E8B3990(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B39A4(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C9AE5C0;
  v2 = (void **)(a1 + 120);
  sub_20E8AD020(&v2);
  sub_20E8AE8C4(a1);
}

uint64_t sub_20E8B39F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *sub_20E8B3A74(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 8) = 0;
    v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    v2[1] = 0;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *v2 = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20E8B3AD8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_20E877A38();
  return operator new(16 * a2);
}

uint64_t sub_20E8B3B0C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_20E8AE5E0((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8B3B5C(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v10 = 0;
    v11 = 0uLL;
    sub_20E8B3C18(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_20E8B3C5C(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_20E8B3C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20E8B3C18(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_20E867F44();
  result = sub_20E8B3CFC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_20E8B3C5C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_20E8B3D30(&v16, &v14, &v12, (uint64_t)&v11);
}

void *sub_20E8B3CFC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_20E877A38();
  return operator new(8 * a2);
}

void sub_20E8B3D30(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_20E8B3DBC((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_20E8B3DBC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

_BYTE *sub_20E8B3E8C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 3) = v5;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 6) = 0;
  sub_20E8B3F80(__dst + 32, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  sub_20E8B40D4((_QWORD *)__dst + 7, (uint64_t)a2 + 56);
  *((_QWORD *)__dst + 10) = 0;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  sub_20E8B4250(__dst + 80, *((_QWORD **)a2 + 10), *((_QWORD **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 4);
  return __dst;
}

void sub_20E8B3F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*v3)
    operator delete(*v3);
  sub_20E8B4060((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

char *sub_20E8B3F80(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a4)
  {
    v6 = result;
    result = sub_20E8B4020(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20E8B400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8B4060(&a9);
  _Unwind_Resume(a1);
}

char *sub_20E8B4020(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_20E867F44();
  result = (char *)sub_20E8B3AD8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_20E8B4060(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;
  unsigned int **v6;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        sub_20E8AE5E0(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20E8B40D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    sub_20E8B3C18(a1, v4);
    sub_20E8B412C(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void sub_20E8B412C(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  sub_20E8B41A8(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_20E8B41A8(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

char *sub_20E8B4250(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a4)
  {
    v6 = result;
    result = sub_20E8B4020(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20E8B42DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8B4060(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B42F0(uint64_t a1, __int128 **a2)
{
  std::string __p;
  void *v6[2];
  char v7;

  sub_20E8610C0(v6, "option '%canonical_option%' is ambiguous");
  sub_20E8610C0(&__p, "");
  sub_20E8AE7F8((std::logic_error *)a1, (__int128 *)v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  *(_QWORD *)a1 = off_24C9AE5C0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20E8ADB20((char *)(a1 + 120), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_20E8B43A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_20E8AE8C4(v20);
  _Unwind_Resume(a1);
}

std::string *sub_20E8B43E8(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_20E8B44A4(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_20E8B43E8(a1, __s, v4);
}

uint64_t *sub_20E8B44D8(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  sub_20E8B4540(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  sub_20E8AE5E0(&v5);
  return a1;
}

void sub_20E8B452C(_Unwind_Exception *a1)
{
  unsigned int **v1;

  sub_20E8AE5E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B4540(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &off_24C9AE0B0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_20E8B458C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  __cxa_rethrow();
}

void sub_20E8B45AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B45C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t sub_20E8B45E0(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8B45F4()
{
  return 0;
}

uint64_t sub_20E8B45FC()
{
  return 0;
}

uint64_t sub_20E8B4604()
{
  return 0;
}

uint64_t sub_20E8B460C(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  v7 = *a2;
  *(_QWORD *)(v6 + 80) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v6 + 64) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = a3;
  sub_20E8B469C(v6);
  return a1;
}

void sub_20E8B4678(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20E8B469C(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t *sub_20E8B47AC(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  sub_20E8B4814(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  sub_20E8AE5E0(&v5);
  return a1;
}

void sub_20E8B4800(_Unwind_Exception *a1)
{
  unsigned int **v1;

  sub_20E8AE5E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B4814(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &off_24C9AE120;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_20E8B4860(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_20E8B4880(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B489C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8B48B4()
{
  return 0;
}

uint64_t sub_20E8B48BC()
{
  return 0;
}

uint64_t sub_20E8B48C4()
{
  return 0;
}

uint64_t *sub_20E8B48CC(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  sub_20E8B4934(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  sub_20E8AE5E0(&v5);
  return a1;
}

void sub_20E8B4920(_Unwind_Exception *a1)
{
  unsigned int **v1;

  sub_20E8AE5E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B4934(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &off_24C9AE180;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_20E8B4980(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  sub_20E8B49A8(v1);
  __cxa_rethrow();
}

void sub_20E8B4994(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8B49A8(uint64_t a1)
{
  void *v2;
  void **v3;

  if (a1)
  {
    v3 = (void **)(a1 + 80);
    sub_20E8B4060(&v3);
    v2 = *(void **)(a1 + 56);
    if (v2)
      operator delete(v2);
    v3 = (void **)(a1 + 32);
    sub_20E8B4060(&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    operator delete((void *)a1);
  }
}

void sub_20E8B4A1C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = (void **)(v1 + 80);
    sub_20E8B4060(&v3);
    v2 = *(void **)(v1 + 56);
    if (v2)
      operator delete(v2);
    v3 = (void **)(v1 + 32);
    sub_20E8B4060(&v3);
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

uint64_t sub_20E8B4A88()
{
  return 0;
}

uint64_t sub_20E8B4A90()
{
  return 0;
}

uint64_t sub_20E8B4A98()
{
  return 0;
}

uint64_t sub_20E8B4AA4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 152) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 160));
  *(_QWORD *)(a1 + 8) = off_24C9AE5C0;
  v3 = (void **)(a1 + 128);
  sub_20E8AD020(&v3);
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

uint64_t sub_20E8B4B10(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_QWORD *)(a1 + 8) = off_24C9AE5C0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20E8ADB20((char *)(a1 + 128), *(__int128 **)(a2 + 120), *(__int128 **)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_QWORD *)a1 = &unk_24C9AE228;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE258;
  *(_QWORD *)(a1 + 152) = &unk_24C9AE290;
  *(_QWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_20E8B4BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

char *sub_20E8B4BCC(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 8), a1 + 8);
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 1) = off_24C9AE5C0;
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 18) = 0;
  sub_20E8ADB20(v2 + 128, *(__int128 **)(a1 + 128), *(__int128 **)(a1 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3));
  v3 = *(_QWORD *)(a1 + 160);
  *((_QWORD *)v2 + 19) = &unk_24C9ABB60;
  *((_QWORD *)v2 + 20) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *((_DWORD *)v2 + 46) = *(_DWORD *)(a1 + 184);
  *(_QWORD *)v2 = &unk_24C9AE228;
  *((_QWORD *)v2 + 1) = &unk_24C9AE258;
  *((_QWORD *)v2 + 19) = &unk_24C9AE290;
  sub_20E86E24C((uint64_t)(v2 + 152), a1 + 152);
  return v2;
}

void sub_20E8B4CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  *v3 = v4 + 16;
  sub_20E8AD020((void ***)va);
  sub_20E8AE8C4((uint64_t)v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_20E8B4D24(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xC0uLL);
  sub_20E8B4F84((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE1D0, (void (*)(void *))sub_20E8B4AA4);
}

void sub_20E8B4D60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B4D74(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 152) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 160));
  *(_QWORD *)(a1 + 8) = off_24C9AE5C0;
  v2 = (void **)(a1 + 128);
  sub_20E8AD020(&v2);
  sub_20E8AE8C4(a1 + 8);
  operator delete((void *)a1);
}

void sub_20E8B4DE4(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 144) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 152));
  *(_QWORD *)a1 = off_24C9AE5C0;
  v2 = (void **)(a1 + 120);
  sub_20E8AD020(&v2);
  sub_20E8AE8C4(a1);
}

void sub_20E8B4E48(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 144) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 152));
  *(_QWORD *)a1 = off_24C9AE5C0;
  v3 = (void **)(a1 + 120);
  sub_20E8AD020(&v3);
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8B4EB8(_QWORD *a1)
{
  uint64_t v1;
  void **v2;

  v1 = (uint64_t)a1;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  *(_QWORD *)(v1 - 144) = off_24C9AE5C0;
  v1 -= 144;
  v2 = (void **)(v1 + 120);
  sub_20E8AD020(&v2);
  sub_20E8AE8C4(v1);
}

void sub_20E8B4F18(_QWORD *a1)
{
  uint64_t v1;
  void **v2;

  v1 = (uint64_t)a1;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  *(_QWORD *)(v1 - 144) = off_24C9AE5C0;
  v1 -= 144;
  v2 = (void **)(v1 + 120);
  sub_20E8AD020(&v2);
  sub_20E8AE8C4(v1);
  operator delete((void *)(v1 - 8));
}

uint64_t sub_20E8B4F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = off_24C9AE5C0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20E8ADB20((char *)(a1 + 128), *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  v4 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 160) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v5;
  *(_QWORD *)a1 = &unk_24C9AE228;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE258;
  *(_QWORD *)(a1 + 152) = &unk_24C9AE290;
  return a1;
}

void sub_20E8B506C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *v2 = v3 + 16;
  sub_20E8AD020((void ***)va);
  sub_20E8AE8C4((uint64_t)v2);
  _Unwind_Resume(a1);
}

void sub_20E8B509C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  std::logic_error *v16;
  uint64_t (**v17)();
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD v29[7];
  unsigned int *v30;
  _QWORD v31[24];
  unsigned int *v32;
  std::string v33;
  uint64_t v34;
  int v35;
  std::logic_error v36;
  char **v37;
  char *v38[2];

  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  v8 = (uint64_t *)sub_20E8B394C(a2);
  v9 = *v8;
  if (v8[1] != *v8)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = *(_QWORD *)(v9 + 16 * v10);
      v13 = sub_20E8B2A5C(v12);
      v14 = *((unsigned __int8 *)v13 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = v13[1];
      if (!v14)
      {
        sub_20E8610C0(&v33, "abbreviated option names are not permitted in options configuration files");
        v16 = std::logic_error::logic_error(&v36, &v33);
        v36.__vftable = (std::logic_error_vtbl *)&unk_24C9AD988;
        sub_20E8B079C(v16);
      }
      v15 = (void **)sub_20E8B2A5C(v12);
      sub_20E8B19F0((uint64_t **)&v37, v15, (uint64_t)v15);
      v10 = v11;
      v9 = *v8;
      ++v11;
    }
    while (v10 < (v8[1] - *v8) >> 4);
  }
  memset(&v33, 0, sizeof(v33));
  v34 = a2;
  v35 = 0;
  sub_20E8B6794((uint64_t)v31, a1, &v37, a3);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = -1;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v27 = v28;
  v28[0] = 0;
  memset(v29, 0, 40);
  v28[1] = 0;
  v28[2] = v29;
  v17 = off_24C9AE2B0;
  v29[6] = 0;
  v30 = 0;
  v18 = 1;
  sub_20E8B5344((uint64_t)v31, (uint64_t)&v17, (uint64_t *)&v33);
  v17 = off_24C9AE2B0;
  sub_20E8AE5E0(&v30);
  sub_20E8B1E70((uint64_t)&v17);
  v31[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v32);
  sub_20E8B1E70((uint64_t)v31);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_20E8B6554((_QWORD *)a4, (uint64_t)v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  *(_QWORD *)(a4 + 24) = v34;
  *(_DWORD *)(a4 + 32) = v35;
  v36.__vftable = (std::logic_error_vtbl *)&v33;
  sub_20E8ADD9C((void ***)&v36);
  sub_20E866BE0((uint64_t)&v37, v38[0]);
}

void sub_20E8B52B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_20E8AE5E0((unsigned int **)(v35 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = v34;
  sub_20E8AE5E0((unsigned int **)(v36 + 192));
  sub_20E8B1E70((uint64_t)&a34);
  *(_QWORD *)(v37 - 104) = v37 - 144;
  sub_20E8ADD9C((void ***)(v37 - 104));
  sub_20E866BE0(v37 - 88, *(char **)(v37 - 80));
  _Unwind_Resume(a1);
}

unsigned int *sub_20E8B5344(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v5;
  _QWORD v7[24];
  unsigned int *v8;
  _QWORD v9[24];
  unsigned int *v10;
  _QWORD v11[24];
  unsigned int *v12[2];

  sub_20E8B641C((uint64_t)v9, a1);
  sub_20E8B641C((uint64_t)v7, a2);
  sub_20E8B558C((uint64_t)v9, (uint64_t)v7, a3, (uint64_t)v11);
  v5 = v12[1];
  v11[0] = off_24C9AE2B0;
  sub_20E8AE5E0(v12);
  sub_20E8B1E70((uint64_t)v11);
  v7[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v8);
  sub_20E8B1E70((uint64_t)v7);
  v9[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v10);
  sub_20E8B1E70((uint64_t)v9);
  return v5;
}

void sub_20E8B5400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)(),uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unsigned int *a58)
{
  uint64_t v58;

  a9 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v58 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = off_24C9AE2B0;
  sub_20E8AE5E0(&a58);
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5450(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(a1 + 192));
  return sub_20E8B1E70(a1);
}

_QWORD *sub_20E8B5480(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x212BC5B40](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20E8B5554(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BC6290](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B558C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v8[24];
  unsigned int *v9;
  _QWORD v10[24];
  unsigned int *v11;

  sub_20E8B60AC((uint64_t)v10, a1);
  sub_20E8B60AC((uint64_t)v8, a2);
  sub_20E8B567C((uint64_t)v10, (uint64_t)v8, a3, a4);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  sub_20E8B1E70((uint64_t)v8);
  v10[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v11);
  return sub_20E8B1E70((uint64_t)v10);
}

void sub_20E8B562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)(),uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unsigned int *a58)
{
  uint64_t v58;

  a9 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v58 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = off_24C9AE2B0;
  sub_20E8AE5E0(&a58);
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B567C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v8[24];
  unsigned int *v9;
  _QWORD v10[24];
  unsigned int *v11;

  sub_20E8B60AC((uint64_t)v10, a1);
  sub_20E8B60AC((uint64_t)v8, a2);
  sub_20E8B576C((uint64_t)v10, (uint64_t)v8, a3, a4);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  sub_20E8B1E70((uint64_t)v8);
  v10[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v11);
  return sub_20E8B1E70((uint64_t)v10);
}

void sub_20E8B571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)(),uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unsigned int *a58)
{
  uint64_t v58;

  a9 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v58 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = off_24C9AE2B0;
  sub_20E8AE5E0(&a58);
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B576C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  _QWORD v10[24];
  unsigned int *v11;
  _QWORD v12[24];
  unsigned int *v13;
  _QWORD v14[24];
  unsigned int *v15;
  _QWORD v16[24];
  unsigned int *v17;
  _QWORD v18[24];
  unsigned int *v19;
  _QWORD v20[24];
  unsigned int *v21[2];
  _QWORD v22[24];
  unsigned int *v23;
  _QWORD v24[24];
  unsigned int *v25;
  _QWORD v26[24];
  unsigned int *v27;
  _QWORD v28[24];
  unsigned int *v29;

  sub_20E8B641C((uint64_t)v24, a1);
  sub_20E8B60AC((uint64_t)v22, a2);
  sub_20E8B5A58((uint64_t)v24, (uint64_t)v22, (uint64_t)v26);
  v22[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v23);
  sub_20E8B1E70((uint64_t)v22);
  v24[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v25);
  sub_20E8B1E70((uint64_t)v24);
  sub_20E8B60AC((uint64_t)v18, (uint64_t)v26);
  sub_20E8B60AC((uint64_t)v16, (uint64_t)v28);
  sub_20E8B5B38((uint64_t)v18, (uint64_t)v16, a3, (uint64_t)v20);
  v16[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v17);
  sub_20E8B1E70((uint64_t)v16);
  v18[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v19);
  sub_20E8B1E70((uint64_t)v18);
  sub_20E8B60AC((uint64_t)v12, a1);
  sub_20E8B60AC((uint64_t)v10, (uint64_t)v20);
  sub_20E8B5BC4((uint64_t)v12, (uint64_t)v10, (uint64_t)v14);
  v8 = v21[1];
  sub_20E8B60AC(a4, (uint64_t)v14);
  *(_QWORD *)(a4 + 200) = v8;
  v14[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v15);
  sub_20E8B1E70((uint64_t)v14);
  v10[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v11);
  sub_20E8B1E70((uint64_t)v10);
  v12[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v13);
  sub_20E8B1E70((uint64_t)v12);
  v20[0] = off_24C9AE2B0;
  sub_20E8AE5E0(v21);
  sub_20E8B1E70((uint64_t)v20);
  v28[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v29);
  sub_20E8B1E70((uint64_t)v28);
  v26[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v27);
  return sub_20E8B1E70((uint64_t)v26);
}

void sub_20E8B5944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34,unint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,unsigned int *a59,uint64_t a60)
{
  uint64_t v60;
  unint64_t v61;

  sub_20E8AE5E0((unsigned int **)(v60 + 192));
  sub_20E8B1E70((uint64_t)&a60);
  a10 = v61;
  sub_20E8AE5E0(&a34);
  sub_20E8B1E70((uint64_t)&a10);
  a35 = v61;
  sub_20E8AE5E0(&a59);
  sub_20E8B1E70((uint64_t)&a35);
  STACK[0x3F0] = v61;
  sub_20E8AE5E0((unsigned int **)&STACK[0x4B0]);
  sub_20E8B1E70((uint64_t)&STACK[0x3F0]);
  sub_20E8B5CA4((uint64_t)&STACK[0x650]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[24];
  unsigned int *v7;
  _QWORD v8[24];
  unsigned int *v9;

  sub_20E8B60AC((uint64_t)v8, a1);
  sub_20E8B60AC((uint64_t)v6, a2);
  sub_20E8B5CF8((uint64_t)v8, (uint64_t)v6, a3);
  v6[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v7);
  sub_20E8B1E70((uint64_t)v6);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  return sub_20E8B1E70((uint64_t)v8);
}

void sub_20E8B5AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)(),uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unsigned int *a58)
{
  uint64_t v58;

  a9 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v58 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = off_24C9AE2B0;
  sub_20E8AE5E0(&a58);
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5B38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  BOOL v6;
  BOOL v8;
  uint64_t result;
  uint64_t *v10;

  v10 = a3;
  if (*(_BYTE *)(a1 + 8))
    v6 = *(_BYTE *)(a2 + 8) == 0;
  else
    v6 = 1;
  if (v6)
  {
    do
    {
      sub_20E8B5EFC(&v10, (__int128 *)(a1 + 16));
      sub_20E8B08A4(a1);
      if (*(_BYTE *)(a1 + 8))
        v8 = *(_BYTE *)(a2 + 8) == 0;
      else
        v8 = 1;
    }
    while (v8);
  }
  result = sub_20E8B60AC(a4, a1);
  *(_QWORD *)(a4 + 200) = v10;
  return result;
}

uint64_t sub_20E8B5BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[24];
  unsigned int *v7;
  _QWORD v8[24];
  unsigned int *v9;

  sub_20E8B60AC((uint64_t)v8, a1);
  sub_20E8B60AC((uint64_t)v6, a2);
  sub_20E8B5F5C((uint64_t)v8, (uint64_t)v6, a3);
  v6[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v7);
  sub_20E8B1E70((uint64_t)v6);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  return sub_20E8B1E70((uint64_t)v8);
}

void sub_20E8B5C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)(),uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unsigned int *a58)
{
  uint64_t v58;

  a9 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v58 + 192));
  sub_20E8B1E70((uint64_t)&a9);
  a34 = off_24C9AE2B0;
  sub_20E8AE5E0(&a58);
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5CA4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 200) = off_24C9AE2B0;
  v2 = a1 + 200;
  sub_20E8AE5E0((unsigned int **)(a1 + 392));
  sub_20E8B1E70(v2);
  *(_QWORD *)a1 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(a1 + 192));
  return sub_20E8B1E70(a1);
}

uint64_t sub_20E8B5CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[24];
  unsigned int *v7;
  _QWORD v8[24];
  unsigned int *v9;
  _QWORD v10[24];
  unsigned int *v11;
  _QWORD v12[24];
  unsigned int *v13;
  _QWORD v14[24];
  unsigned int *v15;

  sub_20E8B60AC((uint64_t)v10, a1);
  sub_20E8B641C((uint64_t)v14, (uint64_t)v10);
  sub_20E8B60AC((uint64_t)v12, (uint64_t)v14);
  v14[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v15);
  sub_20E8B1E70((uint64_t)v14);
  sub_20E8B60AC((uint64_t)v6, a2);
  sub_20E8B641C((uint64_t)v14, (uint64_t)v6);
  sub_20E8B60AC((uint64_t)v8, (uint64_t)v14);
  v14[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v15);
  sub_20E8B1E70((uint64_t)v14);
  sub_20E8B5EA0(a3, (uint64_t)v12, (uint64_t)v8);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  sub_20E8B1E70((uint64_t)v8);
  v6[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v7);
  sub_20E8B1E70((uint64_t)v6);
  v12[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v13);
  sub_20E8B1E70((uint64_t)v12);
  v10[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v11);
  return sub_20E8B1E70((uint64_t)v10);
}

void sub_20E8B5E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,unint64_t a60)
{
  unint64_t v60;
  uint64_t v61;

  sub_20E8AE5E0((unsigned int **)(v61 + 192));
  sub_20E8B1E70((uint64_t)&a35);
  a10 = v60;
  sub_20E8AE5E0(&a34);
  sub_20E8B1E70((uint64_t)&a10);
  STACK[0x260] = v60;
  sub_20E8AE5E0((unsigned int **)&STACK[0x320]);
  sub_20E8B1E70((uint64_t)&STACK[0x260]);
  a60 = v60;
  sub_20E8AE5E0((unsigned int **)&STACK[0x258]);
  sub_20E8B1E70((uint64_t)&a60);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_20E8B60AC(a1, a2);
  sub_20E8B60AC(v5 + 200, a3);
  return a1;
}

void sub_20E8B5ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v1 + 192));
  sub_20E8B1E70(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20E8B5EFC(uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = sub_20E8AD91C(*a1, a2);
  }
  else
  {
    sub_20E8ADA38((_BYTE *)(*a1)[1], a2);
    v5 = v4 + 88;
    v3[1] = v4 + 88;
  }
  v3[1] = v5;
  return a1;
}

void sub_20E8B5F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B5F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[24];
  unsigned int *v7;
  _QWORD v8[24];
  unsigned int *v9;

  sub_20E8B60AC((uint64_t)v8, a1);
  sub_20E8B60AC((uint64_t)v6, a2);
  sub_20E8B601C((uint64_t)v8, (uint64_t)v6, a3);
  v6[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v7);
  sub_20E8B1E70((uint64_t)v6);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  return sub_20E8B1E70((uint64_t)v8);
}

void sub_20E8B5FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t (**a34)())
{
  uint64_t v34;

  a34 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(v34 + 192));
  sub_20E8B1E70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B601C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[24];
  unsigned int *v7;
  _QWORD v8[24];
  unsigned int *v9;

  sub_20E8B60AC((uint64_t)v8, a1);
  sub_20E8B60AC((uint64_t)v6, a2);
  sub_20E8B60AC(a3, (uint64_t)v6);
  v6[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v7);
  sub_20E8B1E70((uint64_t)v6);
  v8[0] = off_24C9AE2B0;
  sub_20E8AE5E0(&v9);
  return sub_20E8B1E70((uint64_t)v8);
}

uint64_t sub_20E8B60AC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;

  sub_20E8B631C(a1 + 8, a2 + 8);
  *(_QWORD *)a1 = off_24C9ADE00;
  sub_20E8B13D0((uint64_t *)(a1 + 104), a2 + 104);
  sub_20E8B13D0((uint64_t *)(a1 + 128), a2 + 128);
  v4 = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
  {
    sub_20E860C04(v4, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v4 = v5;
  }
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)a1 = off_24C9AE2B0;
  *(_QWORD *)(a1 + 192) = 0;
  v6 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a1 + 184) = v6;
  *(_QWORD *)(a2 + 184) = 0;
  return a1;
}

void sub_20E8B616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_20E866BE0(v12, *(char **)(v10 + 136));
  sub_20E866BE0(v11, *(char **)(v10 + 112));
  a10 = (void **)(v10 + 72);
  sub_20E8AD020(&a10);
  a10 = (void **)(v10 + 48);
  sub_20E8AD020(&a10);
  if (*(char *)(v10 + 39) < 0)
    operator delete(*(void **)(v10 + 16));
  _Unwind_Resume(a1);
}

void sub_20E8B61D0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C9AE2B0;
  sub_20E8AE5E0((unsigned int **)(a1 + 192));
  v2 = (void *)sub_20E8B1E70(a1);
  operator delete(v2);
}

BOOL sub_20E8B6204(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v3 = *(_QWORD **)(a1 + 184);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v9, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v9);
  v6 = sub_20E8B2BCC(v3, (uint64_t)__p, v5);
  v7 = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5;
  if (!v7)
  {
    sub_20E8BC6F4((char *)__p, (uint64_t)&v9);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return v7 == 0;
}

void sub_20E8B62EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8B631C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_20E8ADB20((char *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_20E8ADB20((char *)(a1 + 64), *(__int128 **)(a2 + 64), *(__int128 **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return a1;
}

void sub_20E8B63EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  sub_20E8AD020((void ***)va);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B641C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20E8B631C(a1 + 8, a2 + 8);
  *(_QWORD *)a1 = off_24C9ADE00;
  sub_20E8B13D0((uint64_t *)(a1 + 104), a2 + 104);
  sub_20E8B13D0((uint64_t *)(a1 + 128), a2 + 128);
  v4 = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
  {
    sub_20E860C04(v4, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v4 = v5;
  }
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)a1 = off_24C9AE2B0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v6 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void sub_20E8B64F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_20E866BE0(v12, *(char **)(v10 + 136));
  sub_20E866BE0(v11, *(char **)(v10 + 112));
  a10 = (void **)(v10 + 72);
  sub_20E8AD020(&a10);
  a10 = (void **)(v10 + 48);
  sub_20E8AD020(&a10);
  if (*(char *)(v10 + 39) < 0)
    operator delete(*(void **)(v10 + 16));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B6554(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20E8B65D8(result, a4);
    result = (_QWORD *)sub_20E8B662C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20E8B65B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20E8ADD9C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20E8B65D8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_20E867F44();
  result = (char *)sub_20E8ADC18((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t sub_20E8B662C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20E8B66AC((_BYTE *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20E8B6688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      sub_20E8ADCFC(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20E8B66AC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  *((_QWORD *)__dst + 4) = 0;
  *((_DWORD *)__dst + 6) = v5;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 6) = 0;
  sub_20E8ADB20(__dst + 32, *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  *((_QWORD *)__dst + 9) = 0;
  sub_20E8ADB20(__dst + 56, *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *((_WORD *)__dst + 40) = *((_WORD *)a2 + 40);
  return __dst;
}

void sub_20E8B6764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20E8AD020((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B6794(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v6;

  v6 = sub_20E8B0204(a1, a3, a4);
  *(_QWORD *)v6 = off_24C9AE2B0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  sub_20E8B6804((__int128 *)(v6 + 184), a2);
  sub_20E8B08A4(a1);
  return a1;
}

void sub_20E8B67E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE5E0((unsigned int **)(v1 + 192));
  sub_20E8B1E70(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_20E8B6804(__int128 *a1, uint64_t a2)
{
  unsigned int **v3;
  __int128 v4;
  __int128 v6;

  *(_QWORD *)&v6 = a2;
  v3 = (unsigned int **)sub_20E8B684C((_QWORD *)&v6 + 1, a2);
  v4 = *a1;
  *a1 = v6;
  *((_QWORD *)&v6 + 1) = *((_QWORD *)&v4 + 1);
  return sub_20E8AE5E0(v3);
}

_QWORD *sub_20E8B684C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x20uLL);
  v4[1] = 0x100000001;
  *v4 = &off_24C9AE2F0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_20E8B6898(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20E8B68A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B68C4(uint64_t a1, uint64_t a2)
{
  if (sub_20E8B692C(a2, (uint64_t)&unk_24C9AE340))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20E8B6900(uint64_t a1, uint64_t a2)
{
  sub_20E8B692C(a2, (uint64_t)&unk_24C9AE340);
  return 0;
}

uint64_t sub_20E8B6924(uint64_t a1)
{
  return a1 + 24;
}

BOOL sub_20E8B692C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_20E8B6978(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  std::string::size_type size;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void *__p[2];
  uint64_t v53;
  _BYTE __str[32];
  std::string v55;
  std::string v56;
  void **v57;
  void *v58[2];
  __int128 v59;

  v3 = a2;
  v50 = a1[3];
  v58[0] = 0;
  v58[1] = 0;
  v5 = (uint64_t **)(a2 + 16);
  v57 = v58;
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  v6 = *a1;
  v7 = v58;
  if (a1[1] != *a1)
  {
    v48 = v3;
    v8 = 0;
    v9 = v3 + 40;
    v10 = 1;
    do
    {
      std::string::operator=(&v56, (const std::string *)(v6 + 88 * v8));
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v56.__r_.__value_.__l.__size_;
      if (size && !*(_BYTE *)(*a1 + 88 * v8 + 80) && !sub_20E8B7668(v9, (void **)&v56.__r_.__value_.__l.__data_))
      {
        v12 = *(__int128 **)(*a1 + 88 * v8 + 56);
        if (*(__int128 **)(*a1 + 88 * v8 + 64) == v12)
        {
          sub_20E8610C0(__str, "");
        }
        else if (*((char *)v12 + 23) < 0)
        {
          sub_20E860C04(__str, *(void **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          *(_QWORD *)&__str[16] = *((_QWORD *)v12 + 2);
          *(_OWORD *)__str = v13;
        }
        std::string::operator=(&v55, (const std::string *)__str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v14 = sub_20E8B356C(v50, (uint64_t)&v56, 0, 0, 0);
        *(_QWORD *)__str = &v56;
        v15 = sub_20E8B76D0(v5, (void **)&v56.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, (__int128 **)__str);
        v16 = v15 + 7;
        if (*((_BYTE *)v15 + 64))
        {
          __str[8] = 0;
          v17 = 0uLL;
          *(_OWORD *)&__str[16] = 0u;
          v18 = *v16;
          *v16 = 0;
          *(_QWORD *)__str = 0;
          if (v18)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            v19 = __str[8];
            v17 = *(_OWORD *)&__str[16];
          }
          else
          {
            v19 = 0;
          }
          *((_BYTE *)v15 + 64) = v19;
          *(_OWORD *)&__str[16] = 0uLL;
          v20 = *(_OWORD *)(v15 + 9);
          *(_OWORD *)(v15 + 9) = v17;
          *(_OWORD *)__p = v20;
          sub_20E8AE5E0((unsigned int **)&__p[1]);
          sub_20E8AE5E0((unsigned int **)&__str[24]);
          if (*(_QWORD *)__str)
            (*(void (**)(_QWORD))(**(_QWORD **)__str + 8))(*(_QWORD *)__str);
        }
        sub_20E8B2E60(v14, __str);
        (*(void (**)(_QWORD, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)__str + 40))(*(_QWORD *)__str, v16, *a1 + 88 * v8 + 32, a3);
        sub_20E8AE5E0((unsigned int **)&__str[8]);
        sub_20E8B2E60(v14, __p);
        v21 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v22 = *(_OWORD *)(v15 + 9);
        *(_OWORD *)(v15 + 9) = v21;
        *(_OWORD *)__str = v22;
        sub_20E8AE5E0((unsigned int **)&__str[8]);
        sub_20E8AE5E0((unsigned int **)&__p[1]);
        sub_20E8B2E60(v14, __str);
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__str + 24))(*(_QWORD *)__str);
        sub_20E8AE5E0((unsigned int **)&__str[8]);
        if ((v23 & 1) == 0)
          sub_20E8B19F0((uint64_t **)&v57, (void **)&v56.__r_.__value_.__l.__data_, (uint64_t)&v56);
      }
      v8 = v10;
      v6 = *a1;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3) > (unint64_t)v10++);
    v7 = v57;
    v3 = v48;
  }
  sub_20E8B1424((uint64_t *)(v3 + 40), v7, v58);
  v25 = (uint64_t *)sub_20E8B394C(v50);
  v26 = *v25;
  if (v25[1] != *v25)
  {
    v27 = 0;
    v28 = (uint64_t **)(v3 + 64);
    v29 = 1;
    do
    {
      v30 = *(_QWORD *)(v26 + 16 * v27);
      sub_20E8610C0(__str, "");
      v31 = sub_20E8B287C(v30, (uint64_t)__str);
      if (*(char *)(v31 + 23) < 0)
      {
        sub_20E860C04(__p, *(void **)v31, *(_QWORD *)(v31 + 8));
      }
      else
      {
        v32 = *(_OWORD *)v31;
        v53 = *(_QWORD *)(v31 + 16);
        *(_OWORD *)__p = v32;
      }
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v33 = (void *)HIBYTE(v53);
      if (v53 < 0)
        v33 = __p[1];
      if (v33)
      {
        if (!sub_20E8B7668((uint64_t)v5, __p))
        {
          v51 = 0;
          sub_20E8B2E60(v30, __str);
          v34 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)__str + 48))(*(_QWORD *)__str, &v51);
          sub_20E8AE5E0((unsigned int **)&__str[8]);
          if (v34)
          {
            v35 = v51;
            if (v51)
              v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
            *(_QWORD *)__str = v35;
            __str[8] = 1;
            *(_OWORD *)&__str[16] = 0uLL;
            *(_QWORD *)&v59 = __p;
            v36 = sub_20E8B76D0(v5, __p, (uint64_t)&unk_2102DB95C, (__int128 **)&v59);
            v37 = v36[7];
            v36[7] = *(_QWORD *)__str;
            *(_QWORD *)__str = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            *((_BYTE *)v36 + 64) = __str[8];
            v38 = *(_OWORD *)&__str[16];
            *(_OWORD *)&__str[16] = 0uLL;
            v39 = *(_OWORD *)(v36 + 9);
            *(_OWORD *)(v36 + 9) = v38;
            v59 = v39;
            sub_20E8AE5E0((unsigned int **)&v59 + 1);
            sub_20E8AE5E0((unsigned int **)&__str[24]);
            if (*(_QWORD *)__str)
              (*(void (**)(_QWORD))(**(_QWORD **)__str + 8))(*(_QWORD *)__str);
            sub_20E8B2E60(v30, &v59);
            *(_QWORD *)__str = __p;
            v40 = sub_20E8B76D0(v5, __p, (uint64_t)&unk_2102DB95C, (__int128 **)__str);
            v41 = v59;
            v59 = 0uLL;
            v42 = *(_OWORD *)(v40 + 9);
            *(_OWORD *)(v40 + 9) = v41;
            *(_OWORD *)__str = v42;
            sub_20E8AE5E0((unsigned int **)&__str[8]);
            sub_20E8AE5E0((unsigned int **)&v59 + 1);
          }
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
        }
        sub_20E8B2E60(v30, __str);
        v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__str + 32))(*(_QWORD *)__str);
        sub_20E8AE5E0((unsigned int **)&__str[8]);
        if (v43)
        {
          sub_20E8B28C4(v30, *((_DWORD *)a1 + 8), (uint64_t)__str);
          if (__str[23] >= 0)
            v44 = __str[23];
          else
            v44 = *(_QWORD *)&__str[8];
          *(_QWORD *)&v59 = __p;
          v45 = sub_20E8AE2A4(v28, __p, (uint64_t)&unk_2102DB95C, (__int128 **)&v59);
          if (*((char *)v45 + 79) < 0)
            v46 = v45[8];
          else
            v46 = *((unsigned __int8 *)v45 + 79);
          if (v44 > v46)
          {
            *(_QWORD *)&v59 = __p;
            v47 = sub_20E8AE2A4(v28, __p, (uint64_t)&unk_2102DB95C, (__int128 **)&v59);
            std::string::operator=((std::string *)(v47 + 7), (const std::string *)__str);
          }
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
        }
      }
      if (SHIBYTE(v53) < 0)
        operator delete(__p[0]);
      v27 = v29;
      v26 = *v25;
      ++v29;
    }
    while (v27 < (v25[1] - *v25) >> 4);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  sub_20E866BE0((uint64_t)&v57, (char *)v58[0]);
}

void sub_20E8B6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  sub_20E866BE0(v45 - 152, *(char **)(v45 - 144));
  _Unwind_Resume(a1);
}

unsigned int **sub_20E8B718C(unsigned int **a1)
{
  sub_20E8AE5E0(a1 + 3);
  if (*a1)
    (*(void (**)(unsigned int *))(*(_QWORD *)*a1 + 8))(*a1);
  return a1;
}

void **sub_20E8B71CC(void **result)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::logic_error v12[7];

  v1 = result;
  v2 = (void **)result[8];
  v3 = result + 9;
  if (v2 != result + 9)
  {
    v4 = result + 3;
    do
    {
      result = sub_20E8B1354((uint64_t)(v1 + 2), v2 + 4);
      if (v4 == result || !result[7])
      {
        sub_20E8B753C(v12, (const std::string *)(v2 + 7));
        sub_20E8B7450((uint64_t)v12);
      }
      v5 = (void **)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (void **)v2[2];
          v7 = *v6 == v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = v1[2];
  v9 = v1 + 3;
  if (v8 != v9)
  {
    do
    {
      result = (void **)v8[9];
      if (result)
        result = (void **)(*((uint64_t (**)(void **, _QWORD *))*result + 7))(result, v8 + 7);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v7 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v7);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  return result;
}

void sub_20E8B72E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8AE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B72F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  do
  {
    v3 = a1;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2);
    if (*(_QWORD *)v4)
      break;
    a1 = *(_QWORD *)(v3 + 8);
  }
  while (a1);
  if (*(_BYTE *)(v4 + 8))
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = sub_20E8B72F8(v5, a2);
      if (*(_BYTE *)(v6 + 8))
        v7 = 1;
      else
        v7 = *(_QWORD *)v6 == 0;
      if (!v7)
        return v6;
    }
  }
  return v4;
}

_QWORD *sub_20E8B7374(_QWORD *result)
{
  result[3] = 0;
  result[1] = 0;
  result[2] = result + 3;
  *result = off_24C9AE360;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[10] = 0;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  return result;
}

uint64_t *sub_20E8B73AC(uint64_t a1, void **a2)
{
  unsigned __int8 v3;
  void **v4;
  int v6;
  void **v7;

  v3 = atomic_load((unsigned __int8 *)&qword_254A5A7F0);
  if ((v3 & 1) == 0)
  {
    v7 = a2;
    v6 = __cxa_guard_acquire(&qword_254A5A7F0);
    a2 = v7;
    if (v6)
    {
      qword_254A5A7D0 = 0;
      byte_254A5A7D8 = 0;
      qword_254A5A7E0 = 0;
      unk_254A5A7E8 = 0;
      __cxa_atexit((void (*)(void *))sub_20E8B718C, &qword_254A5A7D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5A7F0);
      a2 = v7;
    }
  }
  v4 = sub_20E8B1354(a1 + 16, a2);
  if ((void **)(a1 + 24) == v4)
    return &qword_254A5A7D0;
  else
    return (uint64_t *)(v4 + 7);
}

void sub_20E8B7450(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8B787C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE420, (void (*)(void *))sub_20E8B78D8);
}

void sub_20E8B748C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B74A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9AE360;
  sub_20E866B68(a1 + 64, *(_QWORD *)(a1 + 72));
  sub_20E866BE0(a1 + 40, *(char **)(a1 + 48));
  sub_20E866C40(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_20E8B74F0(void *a1)
{
  *(_QWORD *)a1 = off_24C9AE360;
  sub_20E866B68((uint64_t)a1 + 64, *((_QWORD *)a1 + 9));
  sub_20E866BE0((uint64_t)a1 + 40, *((char **)a1 + 6));
  sub_20E866C40((uint64_t)a1 + 16, *((char **)a1 + 3));
  operator delete(a1);
}

std::logic_error *sub_20E8B753C(std::logic_error *a1, const std::string *a2)
{
  std::string __p;
  void *v6[2];
  char v7;

  sub_20E8610C0(v6, "the option '%canonical_option%' is required but missing");
  sub_20E8610C0(&__p, "");
  sub_20E8B8AD8(a1, (__int128 *)v6, &__p, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AE3E0;
  return a1;
}

void sub_20E8B75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20E8B7604(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8B7618(uint64_t a1)
{
  uint64_t v2;

  sub_20E8AE5E0((unsigned int **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20E8B7668(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v4;

  v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((sub_20E8AE4C4(a2, v2 + 4) & 0x80) == 0)
      {
        if ((sub_20E8AE4C4(v2 + 4, a2) & 0x80) == 0)
          return v4;
        ++v2;
      }
      v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *sub_20E8B76D0(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20E8AE34C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20E8B7778((uint64_t)a1, a4, (uint64_t)v10);
    sub_20E8AE470(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20E8B7838((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20E8B7778@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20E8B77E0(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8B77C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8B7838(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B77E0(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[3] = 0;
  *((_BYTE *)__dst + 32) = 0;
  __dst[5] = 0;
  __dst[6] = 0;
  return __dst;
}

void sub_20E8B7838(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20E8B7618((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20E8B787C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  *(_QWORD *)a1 = &unk_24C9AE478;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE4A8;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE4E0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

uint64_t sub_20E8B78D8(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

_QWORD *sub_20E8B7918(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0xA8uLL);
  *v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 1), a1 + 8);
  v2[16] = &unk_24C9ABB60;
  v2[1] = &unk_24C9AE3E0;
  v3 = *(_QWORD *)(a1 + 136);
  v2[17] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  *v2 = &unk_24C9AE478;
  v2[1] = &unk_24C9AE4A8;
  v2[16] = &unk_24C9AE4E0;
  sub_20E86E24C((uint64_t)(v2 + 16), a1 + 128);
  return v2;
}

void sub_20E8B79E0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B7A1C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8B7BA4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE420, (void (*)(void *))sub_20E8B78D8);
}

void sub_20E8B7A58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B7A6C(uint64_t *a1)
{
  a1[16] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 17);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8B7AAC(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
}

void sub_20E8B7AE4(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8B7B28(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
}

void sub_20E8B7B60(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 16;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
  operator delete(v2);
}

uint64_t sub_20E8B7BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE3E0;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 136) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  *(_QWORD *)a1 = &unk_24C9AE478;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE4A8;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE4E0;
  return a1;
}

void sub_20E8B7C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B7C64(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _OWORD *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  __int128 v17;
  char *v18;
  std::string __p;
  std::string v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  void **v25[5];

  if (a4)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v7 = *a3;
    if (a3[1] != *a3)
    {
      v8 = 0;
      v9 = 1;
      do
      {
        sub_20E8BC640((std::wstring *)(v7 + 24 * v8), (std::wstring *)&v21);
        sub_20E8BC678(&v21, &__p);
        v10 = v23;
        if ((unint64_t)v23 >= v24)
        {
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v22] >> 3);
          v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          if (0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3) > v13)
            v13 = 0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v22) >> 3) >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v13;
          v25[4] = (void **)&v24;
          if (v14)
            v15 = (void **)sub_20E8AD0FC((uint64_t)&v24, v14);
          else
            v15 = 0;
          v16 = &v15[3 * v12];
          v25[0] = v15;
          v25[1] = v16;
          v25[3] = &v15[3 * v14];
          v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v16[2] = (void *)__p.__r_.__value_.__r.__words[2];
          *(_OWORD *)v16 = v17;
          memset(&__p, 0, sizeof(__p));
          v25[2] = v16 + 3;
          sub_20E8ADF88(&v22, v25);
          v18 = v23;
          sub_20E8AE110((uint64_t)v25);
          v23 = v18;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)v23 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *v10 = v11;
          v23 = (char *)v10 + 24;
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        v8 = v9;
        v7 = *a3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v9++);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a2, &v22);
    v25[0] = (void **)&v22;
    sub_20E8AD020(v25);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a2, a3);
  }
}

void sub_20E8B7E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  a15 = &a21;
  sub_20E8AD020((void ***)&a15);
  _Unwind_Resume(a1);
}

void *sub_20E8B7EDC@<X0>(uint64_t a1@<X8>)
{
  void *result;

  if (byte_253CFBB3F < 0)
    return sub_20E860C04((_BYTE *)a1, (void *)xmmword_253CFBB28, *((unint64_t *)&xmmword_253CFBB28 + 1));
  *(_OWORD *)a1 = xmmword_253CFBB28;
  *(_QWORD *)(a1 + 16) = unk_253CFBB38;
  return result;
}

BOOL sub_20E8B7F18(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 0;
}

BOOL sub_20E8B7F28(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 0;
}

void sub_20E8B7F38(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v6;
  void *__p[2];
  uint64_t v8;

  if (*a2)
  {
    sub_20E8B9BCC((std::logic_error *)__p);
    sub_20E8B803C((uint64_t)__p);
  }
  v3 = *a3;
  v4 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)*a3) >> 3) >= 2)
  {
    sub_20E8B9CDC((std::logic_error *)__p);
    sub_20E8B8090((uint64_t)__p);
  }
  if (v3 == v4)
  {
    sub_20E8610C0(__p, "");
  }
  else if (*((char *)v3 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    v8 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__p = v6;
  }
  sub_20E8B80E4(a2, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_20E8B800C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8B803C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8BA284((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE7C8, (void (*)(void *))sub_20E8BA2E0);
}

void sub_20E8B8078(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B8090(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8BA66C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE898, (void (*)(void *))sub_20E8BA6C8);
}

void sub_20E8B80CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8B80E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_20E8BBCB8(&v6, a2);
  v3 = v6;
  v6 = *a1;
  v4 = v6;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sub_20E8B8134(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  std::string::value_type v7;
  void **v8;
  std::string v10;
  std::string::value_type v11;
  std::string::value_type v12[5];
  std::string::value_type *v13;
  std::string::value_type *v14;

  v4 = operator new(0x10uLL);
  *(_QWORD *)v4 = &off_24C9AEA48;
  v5 = *a2;
  v4[8] = v5;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 = *a2;
  }
  memset(&v10, 0, sizeof(v10));
  if (v5)
    v7 = 49;
  else
    v7 = 48;
  v11 = v7;
  v13 = &v11;
  v14 = v12;
  sub_20E8BB394(&v10, &v11, v12, 1uLL);
  v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
  return a1;
}

void sub_20E8B81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8B8210(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  std::string::size_type v6;
  std::string *p_dst;
  std::string::value_type v8;
  std::string *v9;
  std::string::size_type size;
  size_t v11;
  std::string *v12;
  const char *v13;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  uint64_t v17;
  _BYTE v18[128];
  std::string __dst;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 1);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v5;
  }
  v6 = 0;
  while (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (v6 >= __dst.__r_.__value_.__l.__size_)
      goto LABEL_16;
LABEL_9:
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v8 = __tolower(p_dst->__r_.__value_.__s.__data_[v6]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__dst;
    else
      v9 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v9->__r_.__value_.__s.__data_[v6++] = v8;
  }
  if (v6 < HIBYTE(__dst.__r_.__value_.__r.__words[2]))
    goto LABEL_9;
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
LABEL_16:
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v11 = __dst.__r_.__value_.__l.__size_;
    switch(v11)
    {
      case 1uLL:
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &__dst;
        else
          v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v13 = "1";
        goto LABEL_35;
      case 2uLL:
        v16 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (LOWORD(v16->__r_.__value_.__l.__data_) == 28271)
          goto LABEL_43;
        goto LABEL_36;
      case 3uLL:
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__dst;
        else
          v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (!memcmp(v14, "yes", v11))
          goto LABEL_43;
        if (!memcmp(v14, "off", v11))
          goto LABEL_39;
        goto LABEL_36;
      case 4uLL:
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &__dst;
        else
          v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v13 = "true";
LABEL_35:
        if (memcmp(v12, v13, v11))
          goto LABEL_36;
        goto LABEL_43;
      default:
LABEL_36:
        if (!sub_20E860918((const void **)&__dst.__r_.__value_.__l.__data_, "no")
          && !sub_20E860918((const void **)&__dst.__r_.__value_.__l.__data_, "0")
          && !sub_20E860918((const void **)&__dst.__r_.__value_.__l.__data_, "false"))
        {
          sub_20E8B8990((uint64_t)v18, &__dst);
          sub_20E8B86A4((uint64_t)v18);
        }
LABEL_39:
        v15 = operator new(0x10uLL);
        *(_QWORD *)v15 = &off_24C9AEA48;
        v15[8] = 0;
        break;
    }
  }
  else
  {
LABEL_43:
    v15 = operator new(0x10uLL);
    *(_QWORD *)v15 = &off_24C9AEA48;
    v15[8] = 1;
  }
  v17 = *a1;
  *a1 = (uint64_t)v15;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20E8B8484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E8AE8C4((uint64_t)&a9);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8B84BC(_QWORD *result)
{
  std::logic_error v1[7];

  if (*result)
  {
    sub_20E8B9BCC(v1);
    sub_20E8B803C((uint64_t)v1);
  }
  return result;
}

void sub_20E8B84F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8AE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20E8B850C(_QWORD *a1, char a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  std::string v8;
  std::string v9;
  _BYTE v10[128];

  v3 = atomic_load((unsigned __int8 *)&qword_254A4FF50);
  if ((v3 & 1) == 0)
  {
    v7 = a1;
    v6 = __cxa_guard_acquire(&qword_254A4FF50);
    a1 = v7;
    if (v6)
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A4FF38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4FF50);
      a1 = v7;
    }
  }
  v4 = a1[1] - *a1;
  if (0xAAAAAAAAAAAAAAABLL * (v4 >> 3) >= 2)
  {
    sub_20E8610C0(&v9, "");
    sub_20E8610C0(&v8, "");
    sub_20E8B88B8((uint64_t)v10, 30, &v9, &v8, 0);
    sub_20E8BB460((uint64_t)v10);
  }
  if (v4 != 24 && (a2 & 1) == 0)
  {
    sub_20E8610C0(&v9, "");
    sub_20E8610C0(&v8, "");
    sub_20E8B88B8((uint64_t)v10, 31, &v9, &v8, 0);
    sub_20E8BB460((uint64_t)v10);
  }
  if (v4 == 24)
    return (void *)*a1;
  else
    return &unk_254A4FF38;
}

void sub_20E8B8654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20E8AE8C4((uint64_t)&a23);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void sub_20E8B86A4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8BB8B4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEB60, (void (*)(void *))sub_20E8BB91C);
}

void sub_20E8B86E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B86F8(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;

  sub_20E8B84BC(a1);
  v4 = sub_20E8B850C(a2, 0);
  sub_20E8BBCB8(&v6, (uint64_t)v4);
  result = *a1;
  *a1 = v6;
  v6 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t sub_20E8B8770(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  std::string __p;
  std::string v7;

  sub_20E8610C0(&v7, "");
  sub_20E8610C0(&__p, "");
  sub_20E8B88B8(a1, 33, &v7, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24C9AE500;
  sub_20E8610C0(&v7, "value");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  v4 = sub_20E8AE2A4((uint64_t **)(a1 + 24), (void **)&v7.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, (__int128 **)&__p);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20E8B885C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20E8AE8C4(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8B88B8(uint64_t a1, int a2, const std::string *a3, const std::string *a4, int a5)
{
  char *v10;
  void *__p[2];
  char v13;

  *(_QWORD *)a1 = &unk_24C9AE7A0;
  if ((a2 - 30) > 4)
    v10 = "unknown error";
  else
    v10 = off_24C9AEC78[a2 - 30];
  sub_20E8610C0(__p, v10);
  sub_20E8B8AD8((std::logic_error *)a1, (__int128 *)__p, a3, a4, a5);
  if (v13 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_24C9AE7A0;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_20E8B8970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8B8990(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  std::string __p;
  std::string v7;

  sub_20E8610C0(&v7, "");
  sub_20E8610C0(&__p, "");
  sub_20E8B88B8(a1, 32, &v7, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24C9AE538;
  sub_20E8610C0(&v7, "value");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  v4 = sub_20E8AE2A4((uint64_t **)(a1 + 24), (void **)&v7.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, (__int128 **)&__p);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20E8B8A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20E8AE8C4(v21);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20E8B8AD8(std::logic_error *a1, __int128 *a2, const std::string *a3, const std::string *a4, int a5)
{
  std::logic_error *v10;
  uint64_t **p_imp;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;

  v10 = std::logic_error::logic_error(a1, (const std::string *)a2);
  v10->__vftable = (std::logic_error_vtbl *)off_24C9AE570;
  LODWORD(v10[1].__vftable) = a5;
  v10[2].__vftable = 0;
  v10[1].__imp_.__imp_ = (const char *)&v10[2];
  p_imp = (uint64_t **)&v10[1].__imp_;
  v10[2].__imp_.__imp_ = 0;
  v10[3].__imp_.__imp_ = 0;
  v10[3].__vftable = (std::logic_error_vtbl *)&v10[3].__imp_;
  v10[4].__vftable = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v10[4].__imp_, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    v10[5].__imp_.__imp_ = (const char *)*((_QWORD *)a2 + 2);
    *(_OWORD *)&v10[4].__imp_.__imp_ = v12;
  }
  a1[6].__vftable = 0;
  a1[6].__imp_.__imp_ = 0;
  a1[7].__vftable = 0;
  sub_20E8610C0(v20, "canonical_option");
  sub_20E8610C0(v18, "option '%canonical_option%'");
  sub_20E8610C0(__p, "option");
  sub_20E8B8E64((uint64_t)a1, (__int128 *)v20, (__int128 *)v18, (__int128 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  sub_20E8610C0(v20, "value");
  sub_20E8610C0(v18, "argument ('%value%')");
  sub_20E8610C0(__p, "argument");
  sub_20E8B8E64((uint64_t)a1, (__int128 *)v20, (__int128 *)v18, (__int128 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  sub_20E8610C0(v20, "prefix");
  sub_20E8610C0(v18, "%prefix%");
  sub_20E8610C0(__p, "");
  sub_20E8B8E64((uint64_t)a1, (__int128 *)v20, (__int128 *)v18, (__int128 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  sub_20E8610C0(v20, "option");
  v18[0] = v20;
  v13 = sub_20E8B1290(p_imp, v20, (uint64_t)&unk_2102DB95C, (_OWORD **)v18);
  std::string::operator=((std::string *)((char *)v13 + 56), a3);
  if (v21 < 0)
    operator delete(v20[0]);
  sub_20E8610C0(v20, "original_token");
  v18[0] = v20;
  v14 = sub_20E8B1290(p_imp, v20, (uint64_t)&unk_2102DB95C, (_OWORD **)v18);
  std::string::operator=((std::string *)((char *)v14 + 56), a4);
  if (v21 < 0)
    operator delete(v20[0]);
  return a1;
}

void sub_20E8B8D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_20E8AE92C(v29, *(_QWORD **)(v27 + 56));
  sub_20E866B68(v28, *(_QWORD *)(v27 + 32));
  std::logic_error::~logic_error((std::logic_error *)v27);
  _Unwind_Resume(a1);
}

void sub_20E8B8E64(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t *v6;
  void *v7[2];
  char v8;
  void *__p;
  char v10;
  __int128 *v11;

  sub_20E8B9EB8((char *)v7, a3, a4);
  v11 = a2;
  v6 = sub_20E8B9F4C((uint64_t **)(a1 + 48), (void **)a2, (uint64_t)&unk_2102DB95C, &v11);
  sub_20E8B9E38((uint64_t)(v6 + 7), (__int128 *)v7);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_20E8B8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8ACFE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20E8B8EFC(char *a1)
{
  char *result;

  (*(void (**)(char *, char *))(*(_QWORD *)a1 + 32))(a1, a1 + 72);
  result = a1 + 96;
  if (a1[119] < 0)
    return *(char **)result;
  return result;
}

std::string::size_type sub_20E8B8F3C(const std::string *a1, const std::string::value_type *a2, uint64_t a3)
{
  const std::string::value_type *v4;
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type result;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;

  v4 = a2;
  v5 = (std::string *)&a1[4];
  v6 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v7 = v6;
  }
  result = std::string::find(a1 + 4, a2, 0, v7);
  if (result != -1)
  {
    v9 = result;
    do
    {
      if (v4[23] >= 0)
        v10 = *((unsigned __int8 *)v4 + 23);
      else
        v10 = *((_QWORD *)v4 + 1);
      v11 = *(char *)(a3 + 23);
      if (v11 >= 0)
        v12 = (const std::string::value_type *)a3;
      else
        v12 = *(const std::string::value_type **)a3;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a3 + 23);
      else
        v13 = *(_QWORD *)(a3 + 8);
      std::string::replace(v5, v9, v10, v12, v13);
      v14 = v4[23];
      if (v14 >= 0)
        v15 = v4;
      else
        v15 = *(const std::string::value_type **)v4;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v4 + 23);
      else
        v16 = *((_QWORD *)v4 + 1);
      result = std::string::find(v5, v15, 0, v16);
      v9 = result;
    }
    while (result != -1);
  }
  return result;
}

_QWORD *sub_20E8B8FFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  char *v3;
  std::logic_error *exception;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = "-";
  switch(v2)
  {
    case 0:
      v3 = "";
      return sub_20E8610C0(a2, v3);
    case 1:
      v3 = "--";
      return sub_20E8610C0(a2, v3);
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_4;
    case 4:
      return sub_20E8610C0(a2, v3);
    case 8:
      v3 = "/";
      return sub_20E8610C0(a2, v3);
    default:
      if (v2 != 4096)
      {
LABEL_4:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "error_with_option_name::m_option_style can only be one of [0, allow_dash_for_short, allow_slash_for_short, allow_long_disguise or allow_long]");
        __cxa_throw(exception, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
      }
      return sub_20E8610C0(a2, v3);
  }
}

void sub_20E8B909C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8B90B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  const std::string *v8;
  int v9;
  void **v10;
  void *v11;
  std::string::size_type v12;
  void **v13;
  __int128 v14;
  void **v15;
  const std::string *v16;
  int v17;
  void **v18;
  void *v19;
  std::string::size_type v20;
  int v21;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string::size_type v26;
  std::string *p_p;
  std::string v28;
  std::string __dst;
  std::string __p;
  char v31;

  v4 = a1 + 24;
  sub_20E8610C0(&__p, "option");
  v5 = sub_20E8B1354(v4, (void **)&__p.__r_.__value_.__l.__data_);
  if (*((char *)v5 + 79) < 0)
    v6 = v5[8];
  else
    v6 = (void *)*((unsigned __int8 *)v5 + 79);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6)
  {
    sub_20E8610C0(&__p, "original_token");
    v13 = sub_20E8B1354(v4, (void **)&__p.__r_.__value_.__l.__data_);
    if (*((char *)v13 + 79) < 0)
    {
      sub_20E860C04((_BYTE *)a2, v13[7], (unint64_t)v13[8]);
    }
    else
    {
      v14 = *(_OWORD *)(v13 + 7);
      *(_QWORD *)(a2 + 16) = v13[9];
      *(_OWORD *)a2 = v14;
    }
    goto LABEL_66;
  }
  sub_20E8610C0(&__dst, "original_token");
  v7 = sub_20E8B1354(v4, (void **)&__dst.__r_.__value_.__l.__data_);
  v8 = (const std::string *)(v7 + 7);
  v9 = *((char *)v7 + 79);
  if (v9 >= 0)
    v10 = v7 + 7;
  else
    v10 = (void **)v7[7];
  if (v9 >= 0)
    v11 = (void *)*((unsigned __int8 *)v7 + 79);
  else
    v11 = v7[8];
  if (!v11)
    goto LABEL_22;
  v12 = 0;
  while ((*((_BYTE *)v10 + v12) & 0xFD) == 0x2D)
  {
    if (v11 == (void *)++v12)
      goto LABEL_22;
  }
  if (v12 == -1)
  {
LABEL_22:
    if (v9 < 0)
    {
      sub_20E860C04(&__p, v7[7], (unint64_t)v7[8]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v7[9];
    }
  }
  else
  {
    std::string::basic_string(&__p, v8, v12, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v28);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_20E8610C0(&v28, "option");
  v15 = sub_20E8B1354(v4, (void **)&v28.__r_.__value_.__l.__data_);
  v16 = (const std::string *)(v15 + 7);
  v17 = *((char *)v15 + 79);
  if (v17 >= 0)
    v18 = v15 + 7;
  else
    v18 = (void **)v15[7];
  if (v17 >= 0)
    v19 = (void *)*((unsigned __int8 *)v15 + 79);
  else
    v19 = v15[8];
  if (!v19)
    goto LABEL_40;
  v20 = 0;
  while ((*((_BYTE *)v18 + v20) & 0xFD) == 0x2D)
  {
    if (v19 == (void *)++v20)
      goto LABEL_40;
  }
  if (v20 == -1)
  {
LABEL_40:
    if (v17 < 0)
    {
      sub_20E860C04(&__dst, v15[7], (unint64_t)v15[8]);
    }
    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v15[9];
    }
  }
  else
  {
    std::string::basic_string(&__dst, v16, v20, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v21 = *(_DWORD *)(a1 + 16);
  if (v21)
  {
    if (v21 == 4096 || v21 == 1)
    {
      sub_20E8B8FFC(a1, &v28);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v28, (const std::string::value_type *)p_dst, size);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)&v24->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      goto LABEL_63;
    }
    v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = __p.__r_.__value_.__l.__size_;
    if (v26)
    {
      sub_20E8B8FFC(a1, &v28);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::push_back(&v28, p_p->__r_.__value_.__s.__data_[0]);
      *(std::string *)a2 = v28;
      goto LABEL_63;
    }
  }
  *(std::string *)a2 = __dst;
  memset(&__dst, 0, sizeof(__dst));
LABEL_63:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_66:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20E8B93E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_20E8B9464(const std::string *a1, const std::string *a2)
{
  _OWORD *v3;
  void **v4;
  _OWORD *v5;
  void **v6;
  std::string::pointer data;
  uint64_t *v8;
  std::string::size_type *v9;
  std::string::size_type *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  std::string __p;
  std::string v16;
  uint64_t *v17;
  uint64_t v18[2];
  std::string *p_p;

  std::string::operator=((std::string *)&a1[4], a2);
  sub_20E8AF634((uint64_t *)&v17, (uint64_t)&a1[1]);
  sub_20E8B90B0((uint64_t)a1, (uint64_t)&v16);
  sub_20E8610C0(&__p, "canonical_option");
  p_p = &__p;
  v3 = sub_20E8B1290(&v17, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, (_OWORD **)&p_p);
  v4 = (void **)v3 + 7;
  if (*((char *)v3 + 79) < 0)
    operator delete(*v4);
  *(std::string *)v4 = v16;
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
  v16.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  sub_20E8B8FFC((uint64_t)a1, &v16);
  sub_20E8610C0(&__p, "prefix");
  p_p = &__p;
  v5 = sub_20E8B1290(&v17, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, (_OWORD **)&p_p);
  v6 = (void **)v5 + 7;
  if (*((char *)v5 + 79) < 0)
    operator delete(*v6);
  *(std::string *)v6 = v16;
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
  v16.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  data = a1[2].__r_.__value_.__l.__data_;
  if (data != (std::string::pointer)&a1[2].__r_.__value_.__r.__words[1])
  {
    while (sub_20E8B7668((uint64_t)&v17, (void **)data + 4))
    {
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 32);
      v8 = sub_20E8AE2A4(&v17, (void **)data + 4, (uint64_t)&unk_2102DB95C, (__int128 **)&v16);
      if (*((char *)v8 + 79) < 0)
      {
        if (!v8[8])
          break;
      }
      else if (!*((_BYTE *)v8 + 79))
      {
        break;
      }
LABEL_18:
      v9 = (std::string::size_type *)*((_QWORD *)data + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (std::string::size_type *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (std::string::size_type *)*((_QWORD *)data + 2);
          v11 = *v10 == (_QWORD)data;
          data = (std::string::pointer)v10;
        }
        while (!v11);
      }
      data = (std::string::pointer)v10;
      if (v10 == &a1[2].__r_.__value_.__r.__words[1])
        goto LABEL_24;
    }
    sub_20E8B8F3C(a1, data + 56, (uint64_t)(data + 80));
    goto LABEL_18;
  }
LABEL_24:
  v12 = v17;
  if (v17 != v18)
  {
    do
    {
      sub_20E8B2D50(37, (const void **)v12 + 4, (uint64_t)&__p);
      std::string::push_back(&__p, 37);
      v16 = __p;
      memset(&__p, 0, sizeof(__p));
      sub_20E8B8F3C(a1, (const std::string::value_type *)&v16, (uint64_t)(v12 + 7));
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v13 = (uint64_t *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v12[2];
          v11 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v11);
      }
      v12 = v14;
    }
    while (v14 != v18);
  }
  sub_20E866B68((uint64_t)&v17, v18[0]);
}

void sub_20E8B972C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_20E866B68((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_20E8B97B4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string v16;
  void *__p[2];
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  std::string __dst;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 8 || v3 == 4)
  {
    sub_20E8B9464((const std::string *)a1, (const std::string *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      sub_20E860C04(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::string *)a2;
    sub_20E8BBE18((uint64_t)&v21, *(void ***)(a1 + 120), *(void ***)(a1 + 128));
    sub_20E8BA090(&v19, v21, &v22);
    std::string::append(&__dst, " and matches ", 0xDuLL);
    v5 = v20;
    if (0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3) >= 2)
    {
      if (v20 - v19 != 24)
      {
        v6 = 1;
        do
        {
          std::operator+<char>();
          v7 = std::string::append(&v16, "', ", 3uLL);
          v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
          v18 = v7->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v8;
          v7->__r_.__value_.__l.__size_ = 0;
          v7->__r_.__value_.__r.__words[2] = 0;
          v7->__r_.__value_.__r.__words[0] = 0;
          if (v18 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          if (v18 >= 0)
            v10 = HIBYTE(v18);
          else
            v10 = (std::string::size_type)__p[1];
          std::string::append(&__dst, (const std::string::value_type *)v9, v10);
          if (SHIBYTE(v18) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
        }
        while (-1 - 0x5555555555555555 * ((v20 - v19) >> 3) > (unint64_t)v6++);
      }
      std::string::append(&__dst, "and ", 4uLL);
      v5 = v20;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3) >= 2 && v5 - v19 == 24)
      std::string::append(&__dst, "different versions of ", 0x16uLL);
    std::operator+<char>();
    v12 = std::string::append(&v16, "'", 1uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v18 >= 0)
      v15 = HIBYTE(v18);
    else
      v15 = (std::string::size_type)__p[1];
    std::string::append(&__dst, (const std::string::value_type *)v14, v15);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    sub_20E8B9464((const std::string *)a1, &__dst);
    __p[0] = &v19;
    sub_20E8AD020((void ***)__p);
    sub_20E866BE0((uint64_t)&v21, v22);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_20E8B9A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,char *a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a23;
  sub_20E8AD020((void ***)&__p);
  sub_20E866BE0((uint64_t)&a26, a27);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_20E8B9B1C(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8B9B30(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = off_24C9AE5C0;
  v3 = (void **)(a1 + 120);
  sub_20E8AD020(&v3);
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

uint64_t sub_20E8B9B7C()
{
  return 0;
}

uint64_t sub_20E8B9B84()
{
  return 0;
}

uint64_t sub_20E8B9B8C()
{
  return 0;
}

void sub_20E8B9BA4(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void sub_20E8B9BB8(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

std::logic_error *sub_20E8B9BCC(std::logic_error *a1)
{
  std::string __p;
  std::string v4;
  __int128 v5;
  char v6;

  sub_20E8610C0(&v5, "option '%canonical_option%' cannot be specified more than once");
  sub_20E8610C0(&v4, "");
  sub_20E8610C0(&__p, "");
  sub_20E8B8AD8(a1, &v5, &v4, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete((void *)v5);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AE700;
  return a1;
}

void sub_20E8B9C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_20E8B9CC8(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

std::logic_error *sub_20E8B9CDC(std::logic_error *a1)
{
  std::string __p;
  std::string v4;
  __int128 v5;
  char v6;

  sub_20E8610C0(&v5, "option '%canonical_option%' only takes a single argument");
  sub_20E8610C0(&v4, "");
  sub_20E8610C0(&__p, "");
  sub_20E8B8AD8(a1, &v5, &v4, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete((void *)v5);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9AE750;
  return a1;
}

void sub_20E8B9D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_20E8B9DD8(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

void *sub_20E8B9DEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_20E877A38();
  return operator new(4 * a2);
}

void sub_20E8B9E24(uint64_t a1)
{
  void *v1;

  sub_20E8AE8C4(a1);
  operator delete(v1);
}

uint64_t sub_20E8B9E38(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

char *sub_20E8B9EB8(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20E8B9F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E8B9F4C(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20E8AE34C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20E8B9FF4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20E8AE470(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20E8AFCFC((uint64_t)v10, 0);
  }
  return v7;
}

double sub_20E8B9FF4@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20E860C04(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8BA078(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AFCFC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8BA090(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20E8BA114(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20E8BA114(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20E8AD0AC(result, a4);
    result = sub_20E8BA198((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20E8BA178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20E8AD020(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8BA198(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *__dst)
{
  _QWORD *v4;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[3];
  char v13;
  void *v14;
  char *v15;

  v4 = __dst;
  v14 = __dst;
  v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_20E860C04(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)v4 = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v4 = v15 + 24;
      v15 += 24;
      v6 = v9;
    }
    while (v9 != a3);
  }
  v13 = 1;
  sub_20E8AD140((uint64_t)v12);
  return v4;
}

void sub_20E8BA270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8AD140((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BA284(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  *(_QWORD *)a1 = &unk_24C9AE820;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE850;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE888;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

uint64_t sub_20E8BA2E0(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

_QWORD *sub_20E8BA320(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0xA8uLL);
  *v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 1), a1 + 8);
  v2[16] = &unk_24C9ABB60;
  v2[1] = &unk_24C9AE700;
  v3 = *(_QWORD *)(a1 + 136);
  v2[17] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  *v2 = &unk_24C9AE820;
  v2[1] = &unk_24C9AE850;
  v2[16] = &unk_24C9AE888;
  sub_20E86E24C((uint64_t)(v2 + 16), a1 + 128);
  return v2;
}

void sub_20E8BA3E8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BA424(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8BA5AC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE7C8, (void (*)(void *))sub_20E8BA2E0);
}

void sub_20E8BA460(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BA474(uint64_t *a1)
{
  a1[16] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 17);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8BA4B4(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
}

void sub_20E8BA4EC(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8BA530(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
}

void sub_20E8BA568(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 16;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
  operator delete(v2);
}

uint64_t sub_20E8BA5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE700;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 136) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  *(_QWORD *)a1 = &unk_24C9AE820;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE850;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE888;
  return a1;
}

void sub_20E8BA658(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BA66C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  *(_QWORD *)a1 = &unk_24C9AE8F0;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE920;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE958;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

uint64_t sub_20E8BA6C8(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

_QWORD *sub_20E8BA708(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0xA8uLL);
  *v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 1), a1 + 8);
  v2[16] = &unk_24C9ABB60;
  v2[1] = &unk_24C9AE750;
  v3 = *(_QWORD *)(a1 + 136);
  v2[17] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  *v2 = &unk_24C9AE8F0;
  v2[1] = &unk_24C9AE920;
  v2[16] = &unk_24C9AE958;
  sub_20E86E24C((uint64_t)(v2 + 16), a1 + 128);
  return v2;
}

void sub_20E8BA7D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BA80C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xA8uLL);
  sub_20E8BA994((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AE898, (void (*)(void *))sub_20E8BA6C8);
}

void sub_20E8BA848(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BA85C(uint64_t *a1)
{
  a1[16] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 17);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8BA89C(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
}

void sub_20E8BA8D4(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 120) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 128));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8BA918(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
}

void sub_20E8BA950(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 16;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 15));
  operator delete(v2);
}

uint64_t sub_20E8BA994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE750;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 136) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  *(_QWORD *)a1 = &unk_24C9AE8F0;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE920;
  *(_QWORD *)(a1 + 128) = &unk_24C9AE958;
  return a1;
}

void sub_20E8BAA40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BAA54(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  __int128 *v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  size_t v15;
  std::string *v16;
  __int128 *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string v29;
  std::string v30;
  std::string v31;

  if (*(char *)(a1 + 47) < 0)
    v4 = *(_QWORD *)(a1 + 32);
  else
    v4 = *(unsigned __int8 *)(a1 + 47);
  if (v4)
    v5 = (__int128 *)(a1 + 24);
  else
    v5 = &xmmword_253CFBB28;
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_27;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 111))
      goto LABEL_10;
LABEL_27:
    if (*(_QWORD *)(a1 + 48))
    {
      if (*(char *)(a1 + 79) < 0)
      {
        if (*(_QWORD *)(a1 + 64))
          goto LABEL_30;
      }
      else if (*(_BYTE *)(a1 + 79))
      {
LABEL_30:
        if (*((char *)v5 + 23) >= 0)
          v15 = *((unsigned __int8 *)v5 + 23);
        else
          v15 = *((_QWORD *)v5 + 1);
        v16 = &v30;
        sub_20E8B39F0((uint64_t)&v30, v15 + 3);
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
        if (v15)
        {
          if (*((char *)v5 + 23) >= 0)
            v17 = v5;
          else
            v17 = *(__int128 **)v5;
          memmove(v16, v17, v15);
        }
        *(_DWORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 4007968;
        v18 = *(char *)(a1 + 79);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)(a1 + 56);
        else
          v19 = *(const std::string::value_type **)(a1 + 56);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a1 + 79);
        else
          v20 = *(_QWORD *)(a1 + 64);
        v21 = std::string::append(&v30, v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v31, ")", 1uLL);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
LABEL_59:
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        return;
      }
    }
    if (*((char *)v5 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v5;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_27;
LABEL_10:
  std::operator+<char>();
  v6 = std::string::append(&v29, "(=", 2uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 111);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 88);
  else
    v9 = *(const std::string::value_type **)(a1 + 88);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 111);
  else
    v10 = *(_QWORD *)(a1 + 96);
  v11 = std::string::append(&v30, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v31, ")]", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(char *)(a1 + 79) < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    std::operator+<char>();
    v25 = std::string::append(&v30, ")", 1uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v31;
    else
      v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      size = v31.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v27, size);
    goto LABEL_59;
  }
}

void sub_20E8BAD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E8BAE3C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20E8BAE5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20E8BAE7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20E8BAE84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20E8BAE8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

_QWORD *sub_20E8BAEE4(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = sub_20E8BB27C(a2);
  v4 = *(_BYTE **)(a1 + 16);
  if (v4)
    *v4 = *(_BYTE *)result;
  v6 = *(_QWORD *)(a1 + 120);
  v5 = (_QWORD *)(a1 + 120);
  if (v6)
    v7 = nullsub_45;
  else
    v7 = 0;
  if (v7)
    return (_QWORD *)sub_20E8BB208(v5);
  return result;
}

uint64_t sub_20E8BAF44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C9AE978;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE9E8;
  sub_20E8BB2F8((uint64_t *)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20E8BAFD0(char *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C9AE978;
  *((_QWORD *)a1 + 1) = &unk_24C9AE9E8;
  sub_20E8BB2F8((uint64_t *)a1 + 15);
  if (a1[111] < 0)
    operator delete(*((void **)a1 + 11));
  v2 = *((_QWORD *)a1 + 10);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (a1[79] < 0)
    operator delete(*((void **)a1 + 7));
  v3 = *((_QWORD *)a1 + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (a1[47] < 0)
    operator delete(*((void **)a1 + 3));
  operator delete(a1);
}

void sub_20E8BB05C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20E8B8210(a2, a3);
  }
}

uint64_t sub_20E8BB0D0()
{
  return MEMORY[0x24BEDB770];
}

uint64_t sub_20E8BB0DC()
{
  return MEMORY[0x24BEDB770];
}

void sub_20E8BB0E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9AE978;
  *(_QWORD *)a1 = &unk_24C9AE9E8;
  sub_20E8BB2F8((uint64_t *)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_20E8BB174(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 - 8) = &off_24C9AE978;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C9AE9E8;
  sub_20E8BB2F8((uint64_t *)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete(v2);
}

uint64_t sub_20E8BB208(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
    sub_20E86DD10(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_20E8BB268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8BB27C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v3 = MEMORY[0x24BEDB7C8];
    v4 = (const char *)(*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v5 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v4 == v5 || !strcmp(v4, v5))
      return (_QWORD *)(*v1 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t *sub_20E8BB2F8(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20E8BB350()
{
  return MEMORY[0x24BEDB770];
}

_BYTE *sub_20E8BB35C(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C9AEA48;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

void sub_20E8BB394(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void sub_20E8BB460(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8BB4B0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEA90, (void (*)(void *))sub_20E8BB518);
}

void sub_20E8BB49C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BB4B0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24C9AEAE8;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEB18;
  *(_QWORD *)(a1 + 136) = &unk_24C9AEB50;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_20E8BB518(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 144));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

char *sub_20E8BB558(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 8), a1 + 8);
  *((_QWORD *)v2 + 17) = &unk_24C9ABB60;
  *((_QWORD *)v2 + 1) = &unk_24C9AE7A0;
  *((_DWORD *)v2 + 32) = *(_DWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)v2 + 18) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_DWORD *)v2 + 42) = *(_DWORD *)(a1 + 168);
  *(_QWORD *)v2 = &unk_24C9AEAE8;
  *((_QWORD *)v2 + 1) = &unk_24C9AEB18;
  *((_QWORD *)v2 + 17) = &unk_24C9AEB50;
  sub_20E86E24C((uint64_t)(v2 + 136), a1 + 136);
  return v2;
}

void sub_20E8BB628(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BB664(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8BB7EC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEA90, (void (*)(void *))sub_20E8BB518);
}

void sub_20E8BB6A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BB6B4(uint64_t *a1)
{
  a1[17] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 18);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8BB6F4(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
}

void sub_20E8BB72C(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8BB770(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
}

void sub_20E8BB7A8(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 17;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
  operator delete(v2);
}

uint64_t sub_20E8BB7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE7A0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 144) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)a1 = &unk_24C9AEAE8;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEB18;
  *(_QWORD *)(a1 + 136) = &unk_24C9AEB50;
  return a1;
}

void sub_20E8BB8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BB8B4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24C9AEBB8;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEBE8;
  *(_QWORD *)(a1 + 136) = &unk_24C9AEC20;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_20E8BB91C(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 144));
  sub_20E8AE8C4(a1 + 8);
  return a1;
}

char *sub_20E8BB95C(uint64_t a1)
{
  char *v2;
  int v3;
  uint64_t v4;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  sub_20E8AF514((uint64_t)(v2 + 8), a1 + 8);
  v3 = *(_DWORD *)(a1 + 128);
  *((_QWORD *)v2 + 17) = &unk_24C9ABB60;
  *((_DWORD *)v2 + 32) = v3;
  *((_QWORD *)v2 + 1) = &unk_24C9AE538;
  v4 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)v2 + 18) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_DWORD *)v2 + 42) = *(_DWORD *)(a1 + 168);
  *(_QWORD *)v2 = &unk_24C9AEBB8;
  *((_QWORD *)v2 + 1) = &unk_24C9AEBE8;
  *((_QWORD *)v2 + 17) = &unk_24C9AEC20;
  sub_20E86E24C((uint64_t)(v2 + 136), a1 + 136);
  return v2;
}

void sub_20E8BBA2C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E8AE8C4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BBA68(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20E8BBBF0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEB60, (void (*)(void *))sub_20E8BB91C);
}

void sub_20E8BBAA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BBAB8(uint64_t *a1)
{
  a1[17] = (uint64_t)&unk_24C9ABB60;
  sub_20E8AED0C(a1 + 18);
  sub_20E8AE8C4((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_20E8BBAF8(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
}

void sub_20E8BBB30(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 136));
  sub_20E8AE8C4(a1);
  operator delete(v2);
}

void sub_20E8BBB74(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
}

void sub_20E8BBBAC(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 17;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  sub_20E8AE8C4((uint64_t)(a1 - 16));
  operator delete(v2);
}

uint64_t sub_20E8BBBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE538;
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 144) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)a1 = &unk_24C9AEBB8;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEBE8;
  *(_QWORD *)(a1 + 136) = &unk_24C9AEC20;
  return a1;
}

void sub_20E8BBCA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8AE8C4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8BBCB8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;

  v4 = operator new(0x20uLL);
  *v4 = &off_24C9AEC40;
  v5 = v4 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v4[3] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v4;
  return a1;
}

void sub_20E8BBD24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BBD38(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E8BBD68(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void *sub_20E8BBD98()
{
  return &unk_24C9AB9F0;
}

_QWORD *sub_20E8BBDA4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = operator new(0x20uLL);
  *v2 = &off_24C9AEC40;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_20E8BBE04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BBE18(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4;
  void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20E8B14A8((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20E8BBE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E866BE0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BBE98()
{
  return __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253CFBB28, &dword_20E81F000);
}

double sub_20E8BBEB4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_20E8BBEC4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      return 0xFFFFFFFFLL;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    return 0xFFFFFFFFLL;
  }
  return -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
}

uint64_t sub_20E8BBF00(_QWORD *a1, unsigned int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
    return (uint64_t)(a1 + 3);
  else
    return *a1 + 24 * a2;
}

std::codecvt<wchar_t, char, mbstate_t> *sub_20E8BBF30(std::codecvt<wchar_t, char, mbstate_t> *a1, size_t a2)
{
  std::codecvt<wchar_t, char, mbstate_t> *result;

  result = std::codecvt<wchar_t,char,__mbstate_t>::codecvt(a1, a2);
  result->__vftable = (std::codecvt<wchar_t, char, mbstate_t>_vtbl *)&off_24C9AECB0;
  return result;
}

void sub_20E8BBF54(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  void *v1;

  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  operator delete(v1);
}

uint64_t sub_20E8BBF68(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *a4, unsigned __int8 **a5, unsigned int *a6, unsigned int *a7, unsigned int **a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  BOOL v13;
  _BOOL4 v14;

  if (a3 == (unsigned __int8 *)a4 || a6 == a7)
  {
LABEL_29:
    *a5 = a3;
    *a8 = a6;
    return a3 != (unsigned __int8 *)a4;
  }
  while (1)
  {
    if ((char)*a3 < -64 || (v8 = *a3, v8 >= 0xFE))
    {
      *a5 = a3;
      goto LABEL_32;
    }
    if ((v8 & 0x80) == 0)
    {
      ++a3;
      goto LABEL_7;
    }
    if ((v8 & 0xE0) == 0xC0)
    {
      v9 = 1;
    }
    else if ((v8 & 0xF0) == 0xE0)
    {
      v9 = 2;
    }
    else
    {
      v9 = (v8 & 0xFC) == 0xF8 ? 4 : 5;
      if ((v8 & 0xF8) == 0xF0)
        v9 = 3;
    }
    v8 -= dword_2102D9CD0[v9];
    if (a3 + 1 != (unsigned __int8 *)a4)
      break;
    LODWORD(v10) = 0;
    v14 = 1;
    ++a3;
LABEL_26:
    if (a3 == (unsigned __int8 *)a4 && v14)
    {
      *a5 = (unsigned __int8 *)&a4[-(v10 + 1)];
      *a8 = a6;
      return 1;
    }
LABEL_7:
    *a6++ = v8;
    if (a3 == (unsigned __int8 *)a4 || a6 == a7)
      goto LABEL_29;
  }
  v10 = 0;
  v11 = v9 - 1;
  while (1)
  {
    v12 = (char *)&a3[v10];
    if ((char)a3[v10 + 1] >= -64)
      break;
    v8 = a3[v10 + 1] + (v8 << 6) - 128;
    v13 = v11 == (_DWORD)v10;
    v14 = v11 != v10++;
    if (v13 || v12 + 2 == a4)
    {
      a3 += v10 + 1;
      goto LABEL_26;
    }
  }
  *a5 = (unsigned __int8 *)(v12 + 1);
LABEL_32:
  *a8 = a6;
  return 2;
}

BOOL sub_20E8BC0C4(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int **a5, _BYTE *a6, _BYTE *a7, uint64_t *a8)
{
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  char v15;
  _BYTE *v16;
  int v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;

  if (a3 == a4 || a6 == a7)
  {
    v12 = (uint64_t)a6;
LABEL_33:
    *a5 = a3;
    *a8 = v12;
    return a3 != a4;
  }
  else
  {
    while (1)
    {
      v8 = *a3;
      if ((int)*a3 >= 128)
      {
        if (v8 >= 0x800)
        {
          if (v8 >= 0x10000)
          {
            if (v8 >> 26)
              v10 = 5;
            else
              v10 = 4;
            if (v8 >= 0x200000)
              v9 = v10;
            else
              v9 = 3;
          }
          else
          {
            v9 = 2;
          }
        }
        else
        {
          v9 = 1;
        }
      }
      else
      {
        v9 = 0;
      }
      LODWORD(v11) = 0;
      *a6 = (int)v8 / (1 << (6 * v9)) + LOBYTE(dword_2102D9CD0[v9]);
      v12 = (uint64_t)(a6 + 1);
      v13 = v9 != 0;
      if (v9 && (_BYTE *)v12 != a7)
      {
        v11 = 0;
        v14 = v9 - 1;
        v15 = 6 * v9 - 6;
        do
        {
          v16 = &a6[v11];
          v17 = (int)*a3 / (1 << v15);
          v18 = v17 & 0x3F;
          v20 = -v17;
          v19 = v20 < 0;
          v21 = v20 & 0x3F;
          if (v19)
            LOBYTE(v22) = v18;
          else
            v22 = -v21;
          v16[1] = v22 ^ 0x80;
          v23 = v14 == (_DWORD)v11;
          v13 = v14 != v11++;
          if (v23)
            break;
          v15 -= 6;
        }
        while (v16 + 2 != a7);
        v12 = (uint64_t)&a6[v11 + 1];
      }
      v23 = (_BYTE *)v12 != a7 || !v13;
      if (!v23)
        break;
      if (++a3 != a4)
      {
        a6 = (_BYTE *)v12;
        if ((_BYTE *)v12 != a7)
          continue;
      }
      goto LABEL_33;
    }
    *a5 = a3;
    *a8 = (uint64_t)&a7[-(v11 + 1)];
    return 1;
  }
}

uint64_t sub_20E8BC220(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, unint64_t a5)
{
  char *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;

  LODWORD(v5) = (_DWORD)a3;
  if (a5)
  {
    LODWORD(v5) = (_DWORD)a3;
    if ((unint64_t)a3 < a4)
    {
      v6 = 1;
      v5 = a3;
      do
      {
        v7 = *v5;
        if (v7 < 0)
        {
          if ((v7 & 0xE0) == 0xC0)
          {
            v8 = 2;
          }
          else if ((v7 & 0xF0) == 0xE0)
          {
            v8 = 3;
          }
          else
          {
            v9 = v7 & 0xF8;
            if ((v7 & 0xFC) == 0xF8)
              v8 = 5;
            else
              v8 = 6;
            if (v9 == 240)
              v8 = 4;
          }
        }
        else
        {
          v8 = 1;
        }
        if (a4 - (unint64_t)v5 < v8)
          break;
        v5 += v8;
        if (v6 >= a5)
          break;
        ++v6;
      }
      while ((unint64_t)v5 < a4);
    }
  }
  return ((_DWORD)v5 - (_DWORD)a3);
}

uint64_t sub_20E8BC2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 = a3;
  return 0;
}

uint64_t sub_20E8BC2D0()
{
  return 0;
}

uint64_t sub_20E8BC2D8()
{
  return 0;
}

uint64_t sub_20E8BC2E0()
{
  return 6;
}

uint64_t sub_20E8BC2E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

std::wstring *sub_20E8BC2F4@<X0>(std::wstring *result@<X0>, uint64_t a2@<X1>, std::wstring *a3@<X8>)
{
  std::wstring::size_type size;
  std::wstring *v6;
  _BYTE *v7;
  int *v8;
  std::wstring *v9;
  std::wstring *v10;
  std::logic_error v11;
  std::wstring **v12;
  std::wstring **v13;
  int *v14;
  _QWORD *v15;
  int **v16;
  int v17[32];
  _BYTE v18[136];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  memset(v18, 0, 128);
  if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = result;
    result = (std::wstring *)result->__r_.__value_.__r.__words[0];
    size = v6->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  }
  v9 = (std::wstring *)((char *)result + size);
  v10 = result;
  if (size)
  {
    do
    {
      v7 = v18;
      v8 = v17;
      v11.__vftable = (std::logic_error_vtbl *)v18;
      v11.__imp_.__imp_ = (const char *)&v10;
      v12 = &v9;
      v13 = &v10;
      v14 = v17;
      v15 = &v7;
      v16 = &v8;
      if (sub_20E8BC8E4((_QWORD *)(a2 + 16), a2, (uint64_t *)&v11) == 2)
      {
        std::logic_error::logic_error(&v11, "character conversion failed");
        sub_20E8BC71C(&v11);
      }
      if (v8 == v17)
      {
        std::logic_error::logic_error(&v11, "character conversion failed");
        sub_20E8BC71C(&v11);
      }
      result = sub_20E8BC76C(a3, v17, v8);
    }
    while (v10 != v9);
  }
  return result;
}

void sub_20E8BC454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::logic_error a14)
{
  uint64_t v14;

  std::logic_error::~logic_error(&a14);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BC48C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

std::string *sub_20E8BC498@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  _OWORD *v7;
  char *v8;
  std::string *v9;
  std::string *v10;
  std::logic_error v11;
  std::string **v12;
  std::string **v13;
  char *v14;
  _QWORD *v15;
  char **v16;
  char v17[32];
  _OWORD v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  memset(v18, 0, sizeof(v18));
  if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = result;
    result = (std::string *)result->__r_.__value_.__r.__words[0];
    size = v6->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  }
  v9 = (std::string *)((char *)result + 4 * size);
  v10 = result;
  if (size)
  {
    do
    {
      v7 = v18;
      v8 = v17;
      v11.__vftable = (std::logic_error_vtbl *)v18;
      v11.__imp_.__imp_ = (const char *)&v10;
      v12 = &v9;
      v13 = &v10;
      v14 = v17;
      v15 = &v7;
      v16 = &v8;
      if (sub_20E8BC8E4((_QWORD *)(a2 + 16), a2, (uint64_t *)&v11) == 2)
      {
        std::logic_error::logic_error(&v11, "character conversion failed");
        sub_20E8BC71C(&v11);
      }
      if (v8 == v17)
      {
        std::logic_error::logic_error(&v11, "character conversion failed");
        sub_20E8BC71C(&v11);
      }
      result = sub_20E8BCD80(a3, v17, v8);
    }
    while (v10 != v9);
  }
  return result;
}

void sub_20E8BC5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::logic_error a14)
{
  uint64_t v14;

  std::logic_error::~logic_error(&a14);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BC634(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

std::wstring *sub_20E8BC640@<X0>(std::wstring *a1@<X0>, std::wstring *a2@<X8>)
{
  _QWORD v3[3];

  v3[0] = sub_20E8BC48C;
  v3[1] = 0;
  v3[2] = &unk_253CFBB40;
  return sub_20E8BC2F4(a1, (uint64_t)v3, a2);
}

void sub_20E8BC678(std::string *a1@<X0>, std::string *a2@<X8>)
{
  const std::locale::facet *v4;
  std::locale v5;
  _QWORD v6[3];

  MEMORY[0x212BC61AC](&v5);
  v4 = std::locale::use_facet(&v5, MEMORY[0x24BEDB498]);
  v6[0] = sub_20E8BC634;
  v6[1] = 0;
  v6[2] = v4;
  sub_20E8BC498(a1, (uint64_t)v6, a2);
  std::locale::~locale(&v5);
}

void sub_20E8BC6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

char *sub_20E8BC6F4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0)
    return (char *)sub_20E860C04((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  return result;
}

void sub_20E8BC71C(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8BC924((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AED20, (void (*)(void *))sub_20E8BC980);
}

void sub_20E8BC758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::wstring *sub_20E8BC76C(std::wstring *this, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  std::wstring::size_type size;
  std::wstring::size_type v9;
  std::wstring *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  std::wstring::size_type v14;
  std::wstring *v15;
  int *v16;
  int v17;
  std::wstring::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
    v10 = this;
  }
  v12 = v7 >> 2;
  if (v10 > (std::wstring *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::wstring::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v15 = this;
    if ((v6 & 0x80) != 0)
      v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      v17 = *v4++;
      *v16++ = v17;
    }
    *v16 = 0;
    v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v18;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  else
  {
    sub_20E8BCCE4(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (std::wstring::size_type)__p[1];
    std::wstring::append(this, (const std::wstring::value_type *)v13, v14);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E8BC8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BC8E4(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t);
  _QWORD *v9;

  v5 = *a3;
  v6 = *(_QWORD *)a3[1];
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = (_QWORD *)(*a1 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*v9 + v8);
  return v8(v9, v5, v6, *(_QWORD *)a3[2], a3[3], a3[4], *(_QWORD *)a3[5], a3[6]);
}

uint64_t sub_20E8BC924(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24C9AED78;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEDA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9AEDD0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20E8BC980(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

char *sub_20E8BC9C0(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((_QWORD *)v2 + 3) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_24C9AED78;
  *((_QWORD *)v2 + 1) = &unk_24C9AEDA8;
  *((_QWORD *)v2 + 3) = &unk_24C9AEDD0;
  sub_20E86E24C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_20E8BCA78(_Unwind_Exception *a1)
{
  void *v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BCAAC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8BCC34((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AED20, (void (*)(void *))sub_20E8BC980);
}

void sub_20E8BCAE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BCAFC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_20E8BCB3C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_20E8BCB74(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  operator delete(v2);
}

void sub_20E8BCBB8(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_20E8BCBF0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 3;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  operator delete(v2);
}

uint64_t sub_20E8BCC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24C9AED78;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEDA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9AEDD0;
  return a1;
}

void sub_20E8BCCD0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8BCCE4(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = sub_20E8B9DEC((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

std::string *sub_20E8BCD80(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_20E8BCEF4(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E8BCED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E8BCEF4(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t sub_20E8BCF98()
{
  sub_20E8BBF30(&stru_253CFBB40, 0);
  return __cxa_atexit((void (*)(void *))std::codecvt<wchar_t,char,__mbstate_t>::~codecvt, &stru_253CFBB40, &dword_20E81F000);
}

void sub_20E8BCFDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string::size_type size;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char v24;
  void *v25;
  char v26;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  unsigned __int8 *v33;
  int v34[2];
  char v35;
  std::string __src;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 __dst;
  uint64_t v42;
  _BYTE v43[16];
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;

  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = a1;
  else
    v9 = *(_QWORD *)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a4;
    v42 = *(_QWORD *)(a4 + 16);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(&v39, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v39 = *(_OWORD *)a2;
    v40 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(&v37, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v37 = *(_OWORD *)a3;
    v38 = *(_QWORD *)(a3 + 16);
  }
  sub_20E8BD6F4((char *)v27, &__dst, &v39, &v37);
  sub_20E8BD7DC((uint64_t)v43, v9, v9 + v10, (__int128 *)v27);
  if (v32 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__dst);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_20E8BD3C0((uint64_t)v43, (uint64_t)v27);
  sub_20E8BD500((uint64_t)v43, (uint64_t)&v16);
  v11 = v35;
  while (!v24)
  {
    if (!v11)
      goto LABEL_46;
LABEL_35:
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __src.__r_.__value_.__l.__size_;
    if (size)
    {
      v13 = a5[1];
      if (v13 >= a5[2])
      {
        v15 = sub_20E8ADE68(a5, (__int128 *)&__src);
      }
      else
      {
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04((_BYTE *)a5[1], __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        v15 = v13 + 24;
        a5[1] = v13 + 24;
      }
      a5[1] = v15;
    }
    v11 = sub_20E8BDA5C((unsigned __int8 *)v27, &v33, *(unsigned __int8 **)v34, &__src);
    v35 = v11;
  }
  if (!v11 || v22 != v33 || v23 != *(_QWORD *)v34)
    goto LABEL_35;
LABEL_46:
  if (v26 < 0)
    operator delete(v25);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
}

void sub_20E8BD2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 185) < 0)
    operator delete(*(void **)(v25 - 208));
  if (*(char *)(v25 - 153) < 0)
    operator delete(*(void **)(v25 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BD370(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8BD3C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;
  char v10;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_20E860C04(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_20E860C04(&v6, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    sub_20E860C04(&__p, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 80);
  }
  v10 = *(_BYTE *)(a1 + 88);
  sub_20E8BD8D0(a2, (__int128 *)v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20E8BD4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20E8BD500(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;
  char v10;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_20E860C04(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_20E860C04(&v6, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    sub_20E860C04(&__p, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 80);
  }
  v10 = *(_BYTE *)(a1 + 88);
  sub_20E8BD8D0(a2, (__int128 *)v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8));
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20E8BD600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BD644(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8BD6A4(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

char *sub_20E8BD6F4(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v8;
  }
  v9 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20E860C04(v9, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v9 = v10;
  }
  __dst[72] = 0;
  return __dst;
}

void sub_20E8BD7A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BD7DC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v6;
  }
  if (*((char *)a4 + 47) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 40), *((void **)a4 + 3), *((_QWORD *)a4 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a4 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 5);
    *(_OWORD *)(a1 + 40) = v7;
  }
  v8 = (_BYTE *)(a1 + 64);
  if (*((char *)a4 + 71) < 0)
  {
    sub_20E860C04(v8, *((void **)a4 + 6), *((_QWORD *)a4 + 7));
  }
  else
  {
    v9 = a4[3];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 8);
    *(_OWORD *)v8 = v9;
  }
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 72);
  return a1;
}

void sub_20E8BD89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BD8D0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v8;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v9;
  }
  v10 = (_BYTE *)(a1 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04(v10, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v11 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v10 = v11;
  }
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = a4;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20E8BDA08(a1);
  return a1;
}

void sub_20E8BD9B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BDA08(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  if (!*(_BYTE *)(result + 96))
  {
    v1 = result;
    v2 = *(unsigned __int8 **)(result + 80);
    *(_BYTE *)(result + 72) = 0;
    v3 = *(unsigned __int8 **)(result + 88);
    if (v2 == v3)
      result = 0;
    else
      result = sub_20E8BDA5C((unsigned __int8 *)result, (unsigned __int8 **)(result + 80), v3, (std::string *)(result + 104));
    *(_BYTE *)(v1 + 96) = result;
  }
  return result;
}

uint64_t sub_20E8BDA5C(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  v8 = *a2;
  if (*a2 != a3)
  {
    v9 = 0;
    a1[72] = 0;
    while (1)
    {
      v10 = a1[23];
      if ((char)a1[23] < 0)
      {
        v11 = *(unsigned __int8 **)a1;
        v12 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v11 = a1;
        v12 = a1[23];
      }
      v13 = *v8;
      if (v12)
      {
        v14 = &v11[v12];
        while (*v11 != v13)
        {
          ++v11;
          if (!--v12)
          {
            v11 = v14;
            break;
          }
        }
      }
      if ((v10 & 0x80) != 0)
      {
        v15 = *(unsigned __int8 **)a1;
        v10 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v15 = a1;
      }
      if (v11 != &v15[v10])
      {
        sub_20E8BDC74(a1, a2, a3, this);
        goto LABEL_46;
      }
      v16 = a1[47];
      if ((char)a1[47] < 0)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
        v18 = *((_QWORD *)a1 + 4);
        if (v18)
        {
LABEL_22:
          v19 = &v17[v18];
          while (*v17 != v13)
          {
            ++v17;
            if (!--v18)
            {
              v17 = v19;
              break;
            }
          }
        }
      }
      else
      {
        v17 = a1 + 24;
        v18 = a1[47];
        if (a1[47])
          goto LABEL_22;
      }
      if ((v16 & 0x80) != 0)
      {
        v20 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
        v16 = *((_QWORD *)a1 + 4);
      }
      else
      {
        v20 = a1 + 24;
      }
      if (v17 == &v20[v16])
      {
        v21 = a1[71];
        if ((char)a1[71] < 0)
        {
          v22 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
          v23 = *((_QWORD *)a1 + 7);
          if (!v23)
          {
LABEL_40:
            if ((v21 & 0x80) != 0)
            {
              v25 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
              v21 = *((_QWORD *)a1 + 7);
            }
            else
            {
              v25 = a1 + 48;
            }
            if (v22 == &v25[v21])
              std::string::push_back(this, v13);
            else
              v9 ^= 1u;
            goto LABEL_46;
          }
        }
        else
        {
          v22 = a1 + 48;
          v23 = a1[71];
          if (!a1[71])
            goto LABEL_40;
        }
        v24 = &v22[v23];
        while (*v22 != v13)
        {
          ++v22;
          if (!--v23)
          {
            v22 = v24;
            goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
      if ((v9 & 1) == 0)
      {
        *a2 = v8 + 1;
        v26 = 1;
        goto LABEL_51;
      }
      std::string::push_back(this, v13);
      v9 = 1;
LABEL_46:
      v8 = *a2 + 1;
      *a2 = v8;
      if (v8 == a3)
        return 1;
    }
  }
  v26 = 0;
  if (!a1[72])
    return 0;
LABEL_51:
  a1[72] = v26;
  return 1;
}

void sub_20E8BDC74(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  std::runtime_error *v21;
  std::runtime_error *v22;
  int8x16_t v23;
  uint64_t v24;
  std::string v25;
  std::runtime_error v26;

  v4 = *a2 + 1;
  *a2 = v4;
  if (v4 == a3)
  {
    sub_20E8610C0(&v25, "cannot end with escape");
    v21 = std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_24C9AEEC8;
    v23.i64[0] = (uint64_t)"./boost/token_functions.hpp";
    v23.i64[1] = (uint64_t)"void boost::escaped_list_separator<char>::do_escape(iterator &, iterator, Token &) [Char = cha"
                          "r, Traits = std::char_traits<char>, iterator = std::__wrap_iter<const char *>, Token = std::string]";
    v24 = 130;
    sub_20E8BDEB0(v21, &v23);
  }
  v5 = *v4;
  if (v5 == 110)
  {
    LOBYTE(v5) = 10;
    goto LABEL_37;
  }
  v6 = a1 + 48;
  v7 = a1[71];
  if ((char)a1[71] < 0)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
    v9 = *((_QWORD *)a1 + 7);
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v8 = a1 + 48;
    v9 = a1[71];
    if (!a1[71])
      goto LABEL_12;
  }
  v10 = &v8[v9];
  while (*v8 != v5)
  {
    ++v8;
    if (!--v9)
    {
      v8 = v10;
      break;
    }
  }
LABEL_12:
  if ((v7 & 0x80) != 0)
  {
    v6 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
    v7 = *((_QWORD *)a1 + 7);
  }
  if (v8 != &v6[v7])
    goto LABEL_37;
  v11 = a1 + 24;
  v12 = a1[47];
  if ((char)a1[47] < 0)
  {
    v13 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
    v14 = *((_QWORD *)a1 + 4);
    if (!v14)
      goto LABEL_23;
  }
  else
  {
    v13 = a1 + 24;
    v14 = a1[47];
    if (!a1[47])
      goto LABEL_23;
  }
  v15 = &v13[v14];
  while (*v13 != v5)
  {
    ++v13;
    if (!--v14)
    {
      v13 = v15;
      break;
    }
  }
LABEL_23:
  if ((v12 & 0x80) != 0)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
    v12 = *((_QWORD *)a1 + 4);
  }
  if (v13 == &v11[v12])
  {
    v16 = a1[23];
    if ((char)a1[23] < 0)
    {
      v17 = *(unsigned __int8 **)a1;
      v18 = *((_QWORD *)a1 + 1);
      if (!v18)
      {
LABEL_34:
        if ((v16 & 0x80) != 0)
        {
          v20 = a1;
          a1 = *(unsigned __int8 **)a1;
          v16 = *((_QWORD *)v20 + 1);
        }
        if (v17 == &a1[v16])
        {
          sub_20E8610C0(&v25, "unknown escape sequence");
          v22 = std::runtime_error::runtime_error(&v26, &v25);
          v26.__vftable = (std::runtime_error_vtbl *)&off_24C9AEEC8;
          v23.i64[0] = (uint64_t)"./boost/token_functions.hpp";
          v23.i64[1] = (uint64_t)"void boost::escaped_list_separator<char>::do_escape(iterator &, iterator, Token &) [Char"
                                " = char, Traits = std::char_traits<char>, iterator = std::__wrap_iter<const char *>, Tok"
                                "en = std::string]";
          v24 = 148;
          sub_20E8BDEB0(v22, &v23);
        }
        goto LABEL_37;
      }
    }
    else
    {
      v17 = a1;
      v18 = a1[23];
      if (!a1[23])
        goto LABEL_34;
    }
    v19 = &v17[v18];
    while (*v17 != v5)
    {
      ++v17;
      if (!--v18)
      {
        v17 = v19;
        goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
LABEL_37:
  std::string::push_back(this, v5);
}

void sub_20E8BDE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::runtime_error::~runtime_error((std::runtime_error *)(v17 - 32));
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8BDEB0(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8BDF10((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEDF8, (void (*)(void *))sub_20E8BDF78);
}

void sub_20E8BDEF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BDF10(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24C9AEE50;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEE80;
  *(_QWORD *)(a1 + 24) = &unk_24C9AEEA8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_20E8BDF78(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *sub_20E8BDFB8(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &off_24C9AEEC8;
  *((_QWORD *)v2 + 3) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24C9AEE50;
  *((_QWORD *)v2 + 1) = &unk_24C9AEE80;
  *((_QWORD *)v2 + 3) = &unk_24C9AEEA8;
  sub_20E86E24C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_20E8BE078(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BE0AC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E8BE248((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9AEDF8, (void (*)(void *))sub_20E8BDF78);
}

void sub_20E8BE0E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E8BE0FC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_20E8BE13C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_20E8BE174(uint64_t a1)
{
  void *v2;

  v2 = (void *)(a1 - 8);
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  sub_20E8AED0C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete(v2);
}

void sub_20E8BE1B8(_QWORD *a1)
{
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_20E8BE1F0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 - 3;
  *a1 = &unk_24C9ABB60;
  sub_20E8AED0C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  operator delete(v2);
}

void sub_20E8BE234(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t sub_20E8BE248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_24C9AEEC8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24C9AEE50;
  *(_QWORD *)(a1 + 8) = &unk_24C9AEE80;
  *(_QWORD *)(a1 + 24) = &unk_24C9AEEA8;
  return a1;
}

void sub_20E8BE2EC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8BE300()
{
  return (_get_cpu_capabilities() >> 27) & 0xF;
}

double sub_20E8BE318(double *a1)
{
  return *a1 * a1[3] - a1[1] * a1[2];
}

float sub_20E8BE32C(uint64_t a1)
{
  const float *v1;
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2x2_t v13;

  v1 = (const float *)a1;
  v13 = vld2_f32(v1);
  v1 += 4;
  v2 = *(int8x16_t *)v1;
  v3 = *(int8x16_t *)(a1 + 32);
  v4 = *(int8x16_t *)(a1 + 48);
  v5 = (float32x4_t)vextq_s8(v3, v3, 8uLL);
  v6 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  v7 = (float32x4_t)vextq_s8(v3, v3, 0xCuLL);
  v8 = (float32x4_t)vextq_s8(v4, v4, 8uLL);
  v9 = (float32x4_t)vextq_s8(v4, v4, 4uLL);
  v10 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
  v11 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v2, v2, 8uLL), vmlaq_f32(vmulq_f32(v6, vnegq_f32(v10)), v9, v7)), vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5), (float32x4_t)vextq_s8(v2, v2, 4uLL)), vmlaq_f32(vmulq_f32(v9, vnegq_f32(v5)), v8, v10), (float32x4_t)vextq_s8(v2, v2, 0xCuLL));
  v2.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  return vaddv_f32(vsub_f32(vmul_f32(v13.val[0], (float32x2_t)vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8)), vmul_f32(v13.val[1], (float32x2_t)vzip2_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8))));
}

void sub_20E8BE3B0(simd_double2x2 *a1@<X0>, simd_double2x2 *a2@<X8>)
{
  *a2 = __invert_d2(*a1);
}

__n128 sub_20E8BE3D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, simd_float3x3 a3@<0:Q0, 16:Q1, 32:Q2>)
{
  simd_float3x3 v4;

  a3.columns[2].i64[0] = *(_QWORD *)(a1 + 24);
  a3.columns[2].i32[2] = *(_DWORD *)(a1 + 32);
  a3.columns[1] = *(simd_float3 *)(a1 + 12);
  a3.columns[0] = *(simd_float3 *)a1;
  v4 = __invert_f3(a3);
  v4.columns[0].i32[3] = v4.columns[1].i32[0];
  *(simd_float3 *)a2 = v4.columns[0];
  *(int8x16_t *)(a2 + 16) = vextq_s8(vextq_s8((int8x16_t)v4.columns[1], (int8x16_t)v4.columns[1], 0xCuLL), (int8x16_t)v4.columns[2], 8uLL);
  *(_DWORD *)(a2 + 32) = v4.columns[2].i32[2];
  return (__n128)v4.columns[0];
}

double sub_20E8BE424@<D0>(uint64_t a1@<X8>)
{
  double result;

  __invert_d3();
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

__n128 sub_20E8BE4D4@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;

  __invert_d4();
  result = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  return result;
}

void sub_20E8BE588(int a1, int a2, int a3, int a4, int a5, const float *a6, int __lda, float *__B, float a9, float a10, int __ldb, float *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_20E85E1B0(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

uint64_t sub_20E8BE600()
{
  return cblas_sgemv_NEWLAPACK();
}

void sub_20E8BE654(int a1, int a2, int a3, int a4, int a5, const double *a6, int __lda, double *__B, double a9, double a10, int __ldb, double *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_20E85E250(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

uint64_t sub_20E8BE6CC()
{
  return cblas_dgemv_NEWLAPACK();
}

uint64_t sub_20E8BE720()
{
  return cblas_dger_NEWLAPACK();
}

void sub_20E8BE764(char a1, int a2, uint64_t __N, uint64_t __K, const double *__A, uint64_t __lda, double *__C, int __ldc, double a9, double a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a1 & 1) != 0)
    v14 = 122;
  else
    v14 = 121;
  v16 = 1;
  if (a2)
    v15 = 112;
  else
    v15 = 111;
  sub_20E85E2F0(&v16, 102, v14, v15, __N, __K, __A, __lda, a9, a10, __C, __ldc);
}

void sub_20E8BE7C8(int a1, char a2, int a3, int a4, uint64_t a5, uint64_t a6, double *__A, int __lda, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *__B, int __ldb)
{
  uint64_t v20;
  CBLAS_UPLO v21;
  int v22;
  CBLAS_TRANSPOSE v23;
  CBLAS_DIAG v24;
  uint64_t v25;

  if (a1)
    v20 = 142;
  else
    v20 = 141;
  if ((a2 & 1) != 0)
    v21 = CblasLower;
  else
    v21 = CblasUpper;
  if (a3)
    v22 = 113;
  else
    v22 = 111;
  if (a3 == 1)
    v23 = CblasTrans;
  else
    v23 = v22;
  if (a4)
    v24 = CblasNonUnit;
  else
    v24 = CblasUnit;
  v25 = 1;
  sub_20E85E400(&v25, CblasColMajor, v20, v21, v23, v24, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16, __A, __lda, __B,
    __ldb);
}

void sub_20E8BE864(char a1, int a2, int a3, int __N, const double *__A, int __lda, double *__X, int __incX)
{
  CBLAS_UPLO v11;
  int v12;
  CBLAS_TRANSPOSE v13;
  CBLAS_DIAG v14;
  uint64_t v15;

  if ((a1 & 1) != 0)
    v11 = CblasLower;
  else
    v11 = CblasUpper;
  if (a2)
    v12 = 113;
  else
    v12 = 111;
  if (a2 == 1)
    v13 = CblasTrans;
  else
    v13 = v12;
  if (a3)
    v14 = CblasNonUnit;
  else
    v14 = CblasUnit;
  v15 = 1;
  sub_20E85E164(&v15, CblasColMajor, v11, v13, v14, __N, __A, __lda, __X, __incX);
}

uint64_t sub_20E8BE8E4()
{
  dpotrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BE940()
{
  dpotrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BE990()
{
  dtrtri_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BE9F4()
{
  dsytrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BEA4C()
{
  dormqr_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BEAE8()
{
  dgetrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BEB48()
{
  dgetrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8BEB88()
{
  return dgesdd_NEWLAPACK();
}

uint64_t sub_20E8BEBE4()
{
  return sgesvd_NEWLAPACK();
}

uint64_t sub_20E8BEC48()
{
  return dgesvd_NEWLAPACK();
}

uint64_t sub_20E8BECAC()
{
  return dsyev_NEWLAPACK();
}

uint64_t sub_20E8BECF4()
{
  return dgeqrf_NEWLAPACK();
}

uint64_t sub_20E8BED2C()
{
  return dtrtrs_NEWLAPACK();
}

uint64_t sub_20E8BED80()
{
  return dgetri_NEWLAPACK();
}

uint64_t sub_20E8BEDB0()
{
  return dgetrf_NEWLAPACK();
}

uint64_t sub_20E8BEDE0()
{
  return dsysv_NEWLAPACK();
}

uint64_t sub_20E8BEE30()
{
  return dposv_NEWLAPACK();
}

void sub_20E8BEE6C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  v4 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v4;
  v6 = *(_QWORD *)(a1 + 32);
  sub_20E8BEEAC((uint64_t)v5, *(_QWORD *)a2, *(double **)(a2 + 8), *(_QWORD *)a3, *(double **)(a3 + 8), a4);
}

void sub_20E8BEEAC(uint64_t a1, int a2, double *a3, int a4, double *a5, double a6)
{
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  DenseMatrix_Double v12;
  DenseMatrix_Double x;
  SparseMatrix_Double A;

  v6 = *(unsigned __int8 *)(a1 + 28);
  v7 = *(_WORD *)(a1 + 24) & 1;
  v8 = (_DWORD)v7 == 0;
  v9 = *(_DWORD *)(a1 + 4 * v7);
  v10 = v8;
  if (*(_DWORD *)(a1 + 4 * v10) * v6 == a2)
  {
    if (v9 * v6 == a4)
    {
      v11 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&A.structure.rowCount = *(_OWORD *)a1;
      *(_OWORD *)&A.structure.rowIndices = v11;
      A.data = *(double **)(a1 + 32);
      x.rowCount = a2;
      x.columnCount = 1;
      x.columnStride = a2;
      x.attributes = 0;
      x.data = a3;
      v12.rowCount = a4;
      v12.columnCount = 1;
      v12.columnStride = a4;
      v12.attributes = 0;
      v12.data = a5;
      _SparseSpMV_Double(a6, &A, &x, 1, &v12);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E2D8();
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    sub_21023E334();
  }
  _SparseTrap();
}

__n128 sub_20E8BF000(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  SparseOpaqueFactorization_Double v5;
  uint64_t v6;

  v1 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v5.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v5.solveWorkspaceRequiredStatic = v1;
  v6 = *(_QWORD *)(a1 + 96);
  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v5.status = *(_OWORD *)a1;
  *(_OWORD *)&v5.symbolicFactorization.columnCount = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v5.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v5.symbolicFactorization.factorSize_Float = v3;
  _SparseDestroyOpaqueNumeric_Double(&v5);
  return result;
}

void sub_20E8BF040(SparseFactorization_t factorType@<W1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  __int128 v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SparseNumericFactorOptions v14;
  SparseSymbolicFactorOptions sfoptions;
  SparseMatrix_Double Matrix;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&Matrix.structure.rowCount = *(_OWORD *)a2;
  *(_OWORD *)&Matrix.structure.rowIndices = v4;
  Matrix.data = *(double **)(a2 + 32);
  sfoptions = *(SparseSymbolicFactorOptions *)byte_24C9AEEE0;
  v14 = *(SparseNumericFactorOptions *)ymmword_2102D9DA0;
  if (Matrix.structure.rowCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E520();
    goto LABEL_14;
  }
  if (Matrix.structure.columnCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E4AC();
    goto LABEL_14;
  }
  if (!*(&Matrix.structure.blockSize + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E390();
    goto LABEL_14;
  }
  v5 = *(_BYTE *)&Matrix.structure.attributes & 0xC;
  if (Matrix.structure.rowCount != Matrix.structure.columnCount && v5 == 12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E438();
LABEL_14:
    _SparseTrap();
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)a3 = -4;
    *(_DWORD *)(a3 + 8) = -4;
    return;
  }
  if ((factorType & 0xFE) == 0x28)
  {
    _SparseFactorQR_Double((SparseOpaqueFactorization_Double *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
  else
  {
    if (v5 != 12)
    {
      v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v6)
        sub_21023E404(v6, v7, v8, v9, v10, v11, v12, v13);
      goto LABEL_14;
    }
    _SparseFactorSymmetric_Double((SparseOpaqueFactorization_Double *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
}

void sub_20E8BF20C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  SparseControl_t v19;
  int *v20;
  int v21;
  double *v22;
  void (__cdecl *reportError)(const char *);
  int v24;
  int v25;
  int v26;
  int v27;
  double *v28;
  int v29;
  double *v30;
  void (__cdecl *v31)(const char *);
  int v32;
  int v33;
  int v34;
  void (__cdecl *free)(void *);
  void *v36;
  void *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  SparseOpaqueFactorization_Double v54;
  uint64_t v55;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v57;
  DenseMatrix_Double v58;
  DenseMatrix_Double Soln;
  SparseSymbolicFactorOptions v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v4 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v4;
    v57 = *(_QWORD *)(a1 + 96);
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a1;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v5;
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v6;
    if (Factored.symbolicFactorization.status == SparseStatusOK && Factored.symbolicFactorization.workspaceSize_Float)
    {
      v19 = *(_DWORD *)a3;
      v20 = *(int **)(a3 + 8);
      v21 = *(_DWORD *)a2;
      v22 = *(double **)(a2 + 8);
      _SparseGetOptionsFromSymbolicFactor(&v60, &Factored.symbolicFactorization);
      reportError = v60.reportError;
      if (Factored.symbolicFactorization.status
        || !Factored.symbolicFactorization.workspaceSize_Float
        || Factored.status
        || !Factored.solveWorkspaceRequiredStatic)
      {
        if (v60.reportError)
        {
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          memset(&v60, 0, sizeof(v60));
          snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
LABEL_56:
          ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v60);
          return;
        }
        v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v38)
          sub_21023E5C8(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v24 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v24 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v25 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v25 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
          v26 = v24;
        else
          v26 = v25;
        if (v25 == v21)
        {
          if (v26 == v19)
          {
            v60.control = v19;
            *(_DWORD *)&v60.orderMethod = 1;
            v60.ignoreRowsAndColumns = v20;
            v60.order = (int *)v19;
            Soln.rowCount = v21;
            Soln.columnCount = 1;
            *(_DWORD *)&Soln.attributes = 0;
            Soln.data = v22;
            Soln.columnStride = v21;
            _SparseSolveOpaque_Double(&Factored, (const DenseMatrix_Double *)&v60, &Soln, a4);
            return;
          }
          if (v60.reportError)
            goto LABEL_55;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_21023E6A4();
        }
        else
        {
          if (v60.reportError)
          {
LABEL_55:
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v61 = 0u;
            memset(&v60, 0, sizeof(v60));
            snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
            goto LABEL_56;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_21023E724();
        }
      }
LABEL_8:
      _SparseTrap();
      return;
    }
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
LABEL_7:
    sub_21023E594(v7, v8, v9, v10, v11, v12, v13, v14);
    goto LABEL_8;
  }
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v54.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v54.solveWorkspaceRequiredStatic = v15;
  v55 = *(_QWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v54.status = *(_OWORD *)a1;
  *(_OWORD *)&v54.symbolicFactorization.columnCount = v16;
  v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v54.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v54.symbolicFactorization.factorSize_Float = v17;
  if (v54.symbolicFactorization.status || !v54.symbolicFactorization.workspaceSize_Float)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  v27 = *(_DWORD *)a3;
  v28 = *(double **)(a3 + 8);
  v29 = *(_DWORD *)a2;
  v30 = *(double **)(a2 + 8);
  _SparseGetOptionsFromSymbolicFactor(&v60, &v54.symbolicFactorization);
  v31 = v60.reportError;
  if (v54.symbolicFactorization.status
    || !v54.symbolicFactorization.workspaceSize_Float
    || v54.status
    || !v54.solveWorkspaceRequiredStatic)
  {
    if (!v60.reportError)
    {
      v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v46)
        sub_21023E5C8(v46, v47, v48, v49, v50, v51, v52, v53);
      goto LABEL_8;
    }
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_63;
  }
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v32 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v32 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v33 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v33 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (BYTE1(v54.symbolicFactorization.factorization) == 40)
    v34 = v32;
  else
    v34 = v33;
  if (v33 != v29)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_21023E724();
      goto LABEL_8;
    }
LABEL_62:
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
    goto LABEL_63;
  }
  if (v34 != v27)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_21023E6A4();
      goto LABEL_8;
    }
    goto LABEL_62;
  }
  free = v60.free;
  Soln.rowCount = v27;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = v28;
  Soln.columnStride = v27;
  *(_DWORD *)&v58.attributes = 0;
  v58.data = v30;
  v58.rowCount = v29;
  v58.columnCount = 1;
  v58.columnStride = v29;
  v36 = (void *)((uint64_t (*)(size_t))v60.malloc)(v55 + v54.solveWorkspaceRequiredPerRHS);
  if (v36)
  {
    v37 = v36;
    _SparseSolveOpaque_Double(&v54, &Soln, &v58, v36);
    ((void (*)(void *))free)(v37);
    return;
  }
  if (!v31)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E63C();
    goto LABEL_8;
  }
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  memset(&v60, 0, sizeof(v60));
  snprintf((char *)&v60, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
LABEL_63:
  ((void (*)(SparseSymbolicFactorOptions *))v31)(&v60);
}

void sub_20E8BF7C8(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  SparseControl_t v18;
  int *v19;
  void (__cdecl *reportError)(const char *);
  int v21;
  int v22;
  double *v23;
  int v24;
  void (__cdecl *free)(void *);
  void *v26;
  void *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  SparseOpaqueFactorization_Double v44;
  uint64_t v45;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v47;
  DenseMatrix_Double Soln;
  SparseSymbolicFactorOptions v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v3;
    v47 = *(_QWORD *)(a1 + 96);
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a1;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v4;
    v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v5;
    if (Factored.symbolicFactorization.status == SparseStatusOK && Factored.symbolicFactorization.workspaceSize_Float)
    {
      v18 = *(_DWORD *)a2;
      v19 = *(int **)(a2 + 8);
      _SparseGetOptionsFromSymbolicFactor(&v49, &Factored.symbolicFactorization);
      reportError = v49.reportError;
      if (Factored.symbolicFactorization.status == SparseStatusOK
        && Factored.symbolicFactorization.workspaceSize_Float
        && Factored.status == SparseStatusOK
        && Factored.solveWorkspaceRequiredStatic)
      {
        v21 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization) > v21)
          v21 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (v21 == v18)
        {
          v49.control = v18;
          *(_DWORD *)&v49.orderMethod = 1;
          v49.ignoreRowsAndColumns = v19;
          v49.order = (int *)v18;
          _SparseSolveOpaque_Double(&Factored, 0, (const DenseMatrix_Double *)&v49, a3);
          return;
        }
        if (!v49.reportError)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_21023E7A4();
          goto LABEL_8;
        }
        goto LABEL_37;
      }
      if (!v49.reportError)
      {
        v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v28)
          sub_21023E5C8(v28, v29, v30, v31, v32, v33, v34, v35);
        goto LABEL_8;
      }
      goto LABEL_32;
    }
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      goto LABEL_7;
    goto LABEL_8;
  }
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v44.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v44.solveWorkspaceRequiredStatic = v14;
  v45 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v44.status = *(_OWORD *)a1;
  *(_OWORD *)&v44.symbolicFactorization.columnCount = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v44.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v44.symbolicFactorization.factorSize_Float = v16;
  if (v44.symbolicFactorization.status || !v44.symbolicFactorization.workspaceSize_Float)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
LABEL_7:
      sub_21023E594(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_8:
    _SparseTrap();
    return;
  }
  v22 = *(_DWORD *)a2;
  v23 = *(double **)(a2 + 8);
  _SparseGetOptionsFromSymbolicFactor(&v49, &v44.symbolicFactorization);
  reportError = v49.reportError;
  if (v44.symbolicFactorization.status
    || !v44.symbolicFactorization.workspaceSize_Float
    || v44.status
    || !v44.solveWorkspaceRequiredStatic)
  {
    if (!v49.reportError)
    {
      v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v36)
        sub_21023E5C8(v36, v37, v38, v39, v40, v41, v42, v43);
      goto LABEL_8;
    }
LABEL_32:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    memset(&v49, 0, sizeof(v49));
    snprintf((char *)&v49, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_38;
  }
  v24 = v44.symbolicFactorization.columnCount * LOBYTE(v44.symbolicFactorization.factorization);
  if (v44.symbolicFactorization.rowCount * LOBYTE(v44.symbolicFactorization.factorization) > v24)
    v24 = v44.symbolicFactorization.rowCount * LOBYTE(v44.symbolicFactorization.factorization);
  if (v24 != v22)
  {
    if (!v49.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_21023E7A4();
      goto LABEL_8;
    }
LABEL_37:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    memset(&v49, 0, sizeof(v49));
    snprintf((char *)&v49, 0x100uLL, "%s.count (%d) is not equal to largest dimension of matrix factorization %s.\n");
    goto LABEL_38;
  }
  free = v49.free;
  Soln.rowCount = v22;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = v23;
  Soln.columnStride = v22;
  v26 = (void *)((uint64_t (*)(size_t))v49.malloc)(v45 + v44.solveWorkspaceRequiredPerRHS);
  if (v26)
  {
    v27 = v26;
    _SparseSolveOpaque_Double(&v44, 0, &Soln, v26);
    ((void (*)(void *))free)(v27);
    return;
  }
  if (!reportError)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_21023E63C();
    goto LABEL_8;
  }
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  memset(&v49, 0, sizeof(v49));
  snprintf((char *)&v49, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
LABEL_38:
  ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v49);
}

void sub_20E8BFB70(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

double sub_20E8BFB80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
  return 2.0542726e-289;
}

void sub_20E8BFBB4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_20E8BFBDC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Au);
}

void sub_20E8BFC08(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

void sub_20E8BFC30(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_20E8BFC9C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void sub_20E8BFCC0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

void sub_20E8BFCE4(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A800);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A800))
  {
    *a1 = qword_254A5A7F8;
  }
  else
  {
    sub_20E8BFD6C();
    __cxa_guard_release(&qword_254A5A800);
    *a1 = qword_254A5A7F8;
  }
}

void sub_20E8BFD54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A800);
  _Unwind_Resume(a1);
}

void sub_20E8BFD6C()
{
  void *__p[2];
  char v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_20E8C45DC(&qword_254A5A7F8);
  v4 = (_QWORD *)qword_254A5A7F8;
  sub_20E8C4058(&v4, &v5);
  v2 = (uint64_t *)qword_254A5A7F8;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_20E8C4068(&v2, (uint64_t)__p, (uint64_t *)&v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_20E8C2E84((uint64_t)v5);
  sub_20E8C3334(v5, 6);
  sub_20E8C3334(v3, 6);
}

void sub_20E8BFE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8BFE38(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_20E8BFE54 + 4 * byte_2102D9DC0[a2 - 1]))();
}

_QWORD *sub_20E8BFE54(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"TRACE", 5);
}

_QWORD *sub_20E8BFE64(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"DEBUG", 5);
}

_QWORD *sub_20E8BFE74(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"INFO", 4);
}

_QWORD *sub_20E8BFE84(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"WARN", 4);
}

_QWORD *sub_20E8BFE94(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"ERROR", 5);
}

_QWORD *sub_20E8BFEA4(_QWORD *a1)
{
  return sub_20E86A980(a1, (uint64_t)"FATAL", 5);
}

uint64_t *sub_20E8BFEB4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20E8BFF6C((uint64_t *)(v2 + 8));
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t *sub_20E8BFF6C(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20E8BFF6C(v2 + 8);
    MEMORY[0x212BC6398](v2, 0x10A0C400EF86968);
  }
  return a1;
}

uint64_t sub_20E8C0020(uint64_t result, char a2)
{
  *(_QWORD *)result = off_24C9AEF20;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_20E8C003C(uint64_t a1, char *__format, ...)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  va_list *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  va_list __dst;
  size_t v51;
  int64_t v52;
  _QWORD *v53;
  char __str[512];
  uint64_t v55;
  va_list va;

  va_start(va, __format);
  v3 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v44 = operator new();
    sub_20E863438(v44);
    v45 = (_QWORD *)operator new();
    *v45 = &unk_24C9AF3D8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
    v46 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v44;
    *(_QWORD *)(a1 + 64) = v45;
    v3 = a1;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v53 = 0;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v49 = v3;
    v7 = 0;
    v8 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v8 = v6 + 1;
      else
        v8 *= 4;
      if (!v7)
      {
        v23 = (_QWORD *)operator new();
        v7 = v23;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        if (v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            sub_20E867F44();
          v9 = (char *)operator new(v8);
          *v7 = v9;
          v7[2] = &v9[v8];
          bzero(v9, v8);
          v7[1] = &v9[v8];
          v53 = v7;
          v12 = 1;
        }
        else
        {
          v9 = 0;
          v53 = v23;
          v12 = 1;
        }
LABEL_28:
        if (!v12)
          v7[1] = &v9[v8];
        goto LABEL_31;
      }
      v9 = (char *)*v7;
      v10 = (char *)v7[1];
      v11 = (unint64_t)&v10[-*v7];
      v12 = v8 >= v11;
      v13 = v8 - v11;
      if (v8 <= v11)
        goto LABEL_28;
      v14 = v7[2];
      if (v14 - (uint64_t)v10 < v13)
        break;
      bzero(v10, v13);
      v7[1] = &v10[v13];
LABEL_31:
      v7 = v53;
      v4 = (char *)*v53;
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v8, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v8 > v5)
      {
        v3 = v49;
        goto LABEL_46;
      }
    }
    if ((v8 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v15 = v14 - (_QWORD)v9;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (char *)operator new(v17);
    v19 = &v18[v11];
    bzero(&v18[v11], v13);
    if (v10 == v9)
    {
LABEL_23:
      *v7 = v19;
      v7[1] = &v18[v8];
      v7[2] = &v18[v17];
      if (v9)
        operator delete(v9);
      goto LABEL_31;
    }
    if (v11 < 8 || (unint64_t)(v9 - v18) < 0x20)
    {
      v20 = v10;
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v18[v11 - 16];
      v26 = v10 - 16;
      v27 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v11 == v24)
        goto LABEL_22;
      if ((v11 & 0x18) == 0)
      {
        v19 -= v24;
        v20 = &v10[-v24];
LABEL_20:
        v21 = v19 - 1;
        do
        {
          v22 = *--v20;
          *v21-- = v22;
        }
        while (v20 != v9);
LABEL_22:
        v19 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v20 = &v10[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v29 = &v18[&v10[-v24] - v9 - 8];
    v30 = &v10[-v24 - 8];
    v31 = v24 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *(_QWORD *)v30;
      v30 -= 8;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_46:
  v33 = *(_QWORD *)(v3 + 56);
  if (v5 >= 0x17)
  {
    v35 = v3;
    v36 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v36 = v6 | 7;
    v37 = v36 + 1;
    p_dst = (va_list *)operator new(v36 + 1);
    v51 = v6;
    v52 = v37 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    v3 = v35;
    goto LABEL_52;
  }
  HIBYTE(v52) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v52 >= 0)
    v38 = &__dst;
  else
    v38 = (va_list *)__dst;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  sub_20E86A980((_QWORD *)(v33 + 16), (uint64_t)v38, v39);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v40 = v53;
  if (v53)
  {
    v41 = (void *)*v53;
    if (*v53)
    {
      v53[1] = v41;
      operator delete(v41);
    }
    MEMORY[0x212BC6398](v40, 0x10C402FEFCB83);
  }
  return v3;
}

void sub_20E8C04B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C04D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20E8C04F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8C05B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8C050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E8C05B0(&a17);
    _Unwind_Resume(a1);
  }
  sub_20E8C05B0(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8C05B0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x10C402FEFCB83);
  }
  return a1;
}

uint64_t sub_20E8C0604(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  if (v8 != v9)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 4) >= 0x333333333333334)
      sub_20E867F44();
    v10 = (char *)operator new(v8 - v9);
    v11 = 0;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = &v10[16 * ((v8 - v9) >> 4)];
    do
    {
      sub_20E8C0604(&v10[v11], v9 + v11);
      v11 += 80;
    }
    while (v9 + v11 != v8);
    *(_QWORD *)(a1 + 64) = &v10[v11];
  }
  return a1;
}

void sub_20E8C0740(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8C07B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E8C07B8(v3 - 80);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8C0848(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];

  v5 = *a2;
  *(_QWORD *)a1 = &off_24C9AEF50;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)operator new();
  v7 = (_DWORD *)operator new();
  *v7 = 3;
  *v6 = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v9 = v8 + 1;
  *v8 = &off_24C9AF338;
  v8[2] = 0;
  v8[3] = v7;
  v6[1] = v8;
  *(_QWORD *)(a1 + 56) = *v6;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_BYTE *)(a1 + 72) = 0;
  v11 = operator new();
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 48;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 850045863;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v11 + 136;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)(a3 + 8);
  while (v12 != v13)
  {
    v14 = (std::__shared_weak_count *)v12[1];
    v18[0] = *v12;
    v18[1] = v14;
    *v12 = 0;
    v12[1] = 0;
    sub_20E8C0AA8(a1, v18, 0);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 2;
  }
  return a1;
}

void sub_20E8C0A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_20E86665C(v3);
  sub_20E8C0C6C(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C0AA8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;

  v6 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 40);
  v7 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v30;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20E8D2008(v6, &v30);
  v11 = v10;
  v12 = v31;
  if (!v31)
    goto LABEL_8;
  v13 = (unint64_t *)&v31->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) == 0)
      return v11 & 1;
  }
  else
  {
LABEL_8:
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = a2[1];
  *(_QWORD *)&v29 = *a2;
  *((_QWORD *)&v29 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 72) = sub_20E8C288C(v15, &v29, a3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a2;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_20E8C2AA0((uint64_t)&v30, a1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v11 & 1;
}

void sub_20E8C0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8C0C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8C0C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8C0C6C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0x30C40EEE2E2AFLL);
  }
  return a1;
}

uint64_t sub_20E8C0CF0(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v8 = *a2;
  *(_QWORD *)a1 = &off_24C9AEF50;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 72) = 0;
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v14 + 48;
    *(_DWORD *)(v14 + 32) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 136) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_QWORD *)(v14 + 128) = v14 + 136;
  }
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_20E8C0E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_20E86665C(v3);
  sub_20E8C0C6C(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C0E3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9AEF50;
  sub_20E8D0334((uint64_t *)(a1 + 80), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  MEMORY[0x212BC6398](v5, 0x30C40EEE2E2AFLL);
LABEL_12:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20E8C0F44(uint64_t a1)
{
  sub_20E8C0E3C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8C0F68(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  void *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  void **v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  _BYTE *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  void **v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57[2];
  void *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  std::string v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  void *v72[2];
  int v73;
  void *v74;
  char v75;
  uint64_t v76;
  void **v77;
  void **v78;
  unint64_t v79;
  __int128 __dst;
  void *v81;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_20E8C1800((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E860C04(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v81 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_20E8C1A8C(a2, &__dst);
    }
    v12 = sub_20E8D25B8(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v81) < 0)
LABEL_103:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = (uint64_t *)operator new();
      *v13 = **a1;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      sub_20E8C2268((uint64_t)v71, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      memset(&v68, 0, sizeof(v68));
      while (1)
      {
        v15 = sub_20E8B2BCC(v71, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v57[1];
        if (v57[1] >= v58)
        {
          v18 = (void *)sub_20E8ADE68((uint64_t *)v57, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v70) < 0)
          {
            sub_20E860C04((_BYTE *)v57[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v57[1] + 2) = v70;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v57[1] = v18;
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v68.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v68, ".", 1uLL);
        if (v70 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v70 >= 0)
          v21 = HIBYTE(v70);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v68, (const std::string::value_type *)v20, v21);
        v22 = v78;
        if ((unint64_t)v78 < v79)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20E860C04(v78, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
            v78[2] = (void *)v68.__r_.__value_.__r.__words[2];
            *(_OWORD *)v22 = v14;
          }
          v78 = v22 + 3;
        }
        else
        {
          v78 = (void **)sub_20E8ADE68((uint64_t *)&v77, (__int128 *)&v68);
        }
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      v71[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v71 + *((_QWORD *)v71[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v72[0] = v23;
      v72[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v75 < 0)
        operator delete(v74);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](&v76);
      v24 = ((int)v78 - (int)v77) / 24 + 1;
      v25 = 24 * (((int)v78 - (int)v77) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_20E8D25B8(v11, (uint64_t)v77 + v25);
        v25 -= 24;
        if (v26)
        {
          v27 = (uint64_t *)operator new();
          *v27 = v26[5];
          MEMORY[0x212BC6398](v13, 0x60C4044C4A2DFLL);
          v13 = v27;
          break;
        }
      }
      v28 = v77;
      if (v77)
      {
        v29 = v78;
        v30 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*((char *)v29 - 1) < 0)
              operator delete(*(v29 - 3));
            v29 -= 3;
          }
          while (v29 != v28);
          v30 = v77;
        }
        v78 = v28;
        operator delete(v30);
      }
      v31 = (void **)v57[0];
      if (v57[0])
      {
        v32 = (void **)v57[1];
        v33 = v57[0];
        if (v57[1] != v57[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v57[0];
        }
        v57[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)v72 = 0u;
      v73 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*v13 + 80) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_20E8C240C((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v57[0] = v35;
          sub_20E8D27E4((uint64_t)v71, (uint64_t *)v57, v57);
          v36 = (_QWORD *)*v34;
          sub_20E8D2CE8(*(_QWORD **)(*v13 + 80), v34, (uint64_t)v57);
          v37 = v57[0];
          v57[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = (_BYTE *)operator new();
      sub_20E8D2E1C((uint64_t)&v63, (uint64_t)v71);
      v39 = v63;
      v40 = v64;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)v38 = v39;
      *((_QWORD *)v38 + 1) = v40;
      v41 = v65;
      v42 = v66;
      *((_QWORD *)v38 + 2) = v65;
      *((_QWORD *)v38 + 3) = v42;
      *((_DWORD *)v38 + 8) = v67;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v65 = 0;
        v66 = 0;
      }
      *((_QWORD *)v38 + 6) = 0;
      *((_QWORD *)v38 + 5) = v38 + 48;
      *((_QWORD *)v38 + 7) = 0;
      *((_QWORD *)v38 + 8) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *((_QWORD *)v38 + 18) = 0;
      *((_QWORD *)v38 + 19) = 0;
      *((_QWORD *)v38 + 17) = 0;
      *((_QWORD *)v38 + 15) = 0;
      *((_QWORD *)v38 + 16) = v38 + 136;
      v77 = (void **)v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v63;
      v63 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new();
      v47 = *a1;
      v61 = *v13;
      v62 = v47;
      v48 = v77;
      v77 = 0;
      v60 = v48;
      sub_20E8C0CF0(v46, (uint64_t *)&v62, &__dst, &v61, (uint64_t *)&v60);
      sub_20E8D0334((uint64_t *)&v60, 0);
      if (SHIBYTE(v81) < 0)
      {
        sub_20E860C04(v57, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v57 = __dst;
        v58 = v81;
      }
      v59 = v46;
      v49 = sub_20E8D32B4((uint64_t)v11, (uint64_t)v57, (__int128 *)v57);
      v50 = v59;
      v59 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      v51 = *((_QWORD *)v49 + 5);
      v52 = *(_QWORD *)(*v13 + 80);
      v57[0] = (void *)v51;
      sub_20E8D27E4(v52, (uint64_t *)v57, v57);
      v53 = v72[0];
      if (v72[0])
      {
        do
        {
          *(_QWORD *)(v53[2] + 40) = v51;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      *(_BYTE *)(v51 + 72) = sub_20E8C25F0(*(_QWORD *)(v51 + 80), *v13);
      *a3 = v51;
      sub_20E8D0334((uint64_t *)&v77, 0);
      v54 = v72[0];
      if (v72[0])
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v71[0];
      v71[0] = 0;
      if (v56)
        operator delete(v56);
      MEMORY[0x212BC6398](v13, 0x60C4044C4A2DFLL);
      if (SHIBYTE(v81) < 0)
        goto LABEL_103;
    }
  }
  std::mutex::unlock(v7);
}

void sub_20E8C1688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_20E8D0334((uint64_t *)(v36 - 136), 0);
  sub_20E8C25A8((uint64_t)&a33);
  MEMORY[0x212BC6398](v34, 0x60C4044C4A2DFLL);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_20E8C1800(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_254A5A810);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_254A5A810))
  {
    sub_20E8610C0(&qword_254A5A8F0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A8F0, &dword_20E81F000);
    __cxa_guard_release(qword_254A5A810);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_254A5A907 >= 0)
    v20 = &qword_254A5A8F0;
  else
    v20 = (uint64_t *)qword_254A5A8F0;
  if (byte_254A5A907 >= 0)
    v21 = byte_254A5A907;
  else
    v21 = qword_254A5A8F8;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_20E8C1A74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254A5A810);
  _Unwind_Resume(a1);
}

void sub_20E8C1A8C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *p_dst;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  __int128 v39;
  void **v40;
  uint64_t v41;
  void **v42;
  uint64_t i;
  __int128 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void **v54;
  void **v55;
  void *__p[2];
  void *v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  int v68;
  _BYTE v69[152];
  void **v70;
  void **v71;
  unint64_t v72;
  __int128 __dst;
  uint64_t v74;

  if (sub_20E8C1800((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      a2[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v74 = *(_QWORD *)(a1 + 16);
  }
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(v74);
  v6 = *((_QWORD *)&__dst + 1);
  v7 = (__int128 *)__dst;
  if (v74 >= 0)
    v8 = HIBYTE(v74);
  else
    v8 = *((_QWORD *)&__dst + 1);
  if (v74 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 == v10)
          break;
        v14 = v13 - (char *)p_dst;
        if (v13 - (char *)p_dst == -1)
          break;
        if (v8 < v14)
          sub_20E89FD0C();
        sub_20E8D1238(&__dst, v14, 1uLL);
        goto LABEL_9;
      }
      v12 = (__int128 *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v15 = 0;
    while (*((_BYTE *)p_dst + v15) != 46)
    {
      if (v8 == ++v15)
        goto LABEL_34;
    }
    if (v8 != v15 && !v15)
    {
      sub_20E8D1238(&__dst, 0, 1uLL);
      v5 = HIBYTE(v74);
      v6 = *((_QWORD *)&__dst + 1);
      v7 = (__int128 *)__dst;
    }
  }
LABEL_34:
  if ((v5 & 0x80u) == 0)
    v16 = &__dst;
  else
    v16 = v7;
  if ((v5 & 0x80u) == 0)
    v17 = v5;
  else
    v17 = v6;
  v18 = (char *)v16 - 1;
  do
  {
    if (!v17)
    {
      v17 = -1;
      if ((v5 & 0x80) != 0)
        goto LABEL_47;
LABEL_44:
      v6 = v5;
      if (v17 == v5 - 1)
      {
LABEL_48:
        sub_20E8D1238(&__dst, v6, 1uLL);
        LODWORD(v5) = HIBYTE(v74);
        if (SHIBYTE(v74) < 0)
          goto LABEL_51;
      }
      if (!(_DWORD)v5)
        goto LABEL_57;
      v20 = v5;
      v21 = &__dst;
LABEL_53:
      v22 = (__int128 *)((char *)v21 + v20);
      v23 = v20 - 1;
      while (!sub_20E8D12C8(*(char *)v21))
      {
        v21 = (__int128 *)((char *)v21 + 1);
        --v23;
        if (v21 == v22)
          goto LABEL_66;
      }
      if (v21 == v22 || (__int128 *)((char *)v21 + 1) == v22)
      {
        v22 = v21;
      }
      else
      {
        v24 = 1;
        v22 = v21;
        do
        {
          if (!sub_20E8D12C8(*((char *)v21 + v24)))
          {
            *(_BYTE *)v22 = *((_BYTE *)v21 + v24);
            v22 = (__int128 *)((char *)v22 + 1);
          }
          ++v24;
          --v23;
        }
        while (v23);
      }
LABEL_66:
      v25 = HIBYTE(v74);
      v26 = (__int128 *)__dst;
      v27 = (char *)(__dst + *((_QWORD *)&__dst + 1));
      v28 = &__dst;
      if (v74 < 0)
      {
        v25 = *((_QWORD *)&__dst + 1);
        v28 = (__int128 *)__dst;
      }
      else
      {
        v27 = (char *)&__dst + HIBYTE(v74);
      }
      v29 = (char *)v22 - (char *)v28;
      if (v25 < (char *)v22 - (char *)v28)
        sub_20E89FD0C();
      if (v27 - (char *)v22 == -1)
      {
        if (SHIBYTE(v74) < 0)
        {
          *((_QWORD *)&__dst + 1) = (char *)v22 - (char *)v28;
        }
        else
        {
          HIBYTE(v74) = v29 & 0x7F;
          v26 = &__dst;
        }
        *((_BYTE *)v26 + v29) = 0;
      }
      else
      {
        sub_20E8D1238(&__dst, v29, v27 - (char *)v22);
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      sub_20E8C2268((uint64_t)v58, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      while (1)
      {
        v31 = sub_20E8B2BCC(v58, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
          break;
        v32 = v71;
        if ((unint64_t)v71 < v72)
        {
          if (SHIBYTE(v57) < 0)
          {
            sub_20E860C04(v71, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v30 = *(_OWORD *)__p;
            v71[2] = v57;
            *(_OWORD *)v32 = v30;
          }
          v71 = v32 + 3;
        }
        else
        {
          v71 = (void **)sub_20E8ADE68((uint64_t *)&v70, (__int128 *)__p);
        }
      }
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      v33 = *MEMORY[0x24BEDB7F0];
      v58[0] = v33;
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
      v59 = v34;
      v60 = MEMORY[0x24BEDB848] + 16;
      if (v66 < 0)
        operator delete(v65);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v69);
      v36 = HIBYTE(v74);
      if (v74 < 0)
        v36 = *((_QWORD *)&__dst + 1);
      if (!v36)
      {
        *((_BYTE *)a2 + 23) = 1;
        *(_WORD *)a2 = 95;
        v40 = v70;
        if (!v70)
          goto LABEL_148;
        goto LABEL_141;
      }
      sub_20E863438((uint64_t)v58);
      v37 = (uint64_t)v70;
      v38 = v71;
      if (v70 != v71)
      {
        if (*((char *)v70 + 23) < 0)
        {
          sub_20E860C04(__p, *v70, (unint64_t)v70[1]);
        }
        else
        {
          v39 = *(_OWORD *)v70;
          v57 = v70[2];
          *(_OWORD *)__p = v39;
        }
        if (SHIBYTE(v57) >= 0)
          v41 = HIBYTE(v57);
        else
          v41 = (uint64_t)__p[1];
        if (v41)
        {
          if (SHIBYTE(v57) >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          sub_20E86A980(&v59, (uint64_t)v42, v41);
        }
        else
        {
          sub_20E86A980(&v59, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v57) < 0)
          operator delete(__p[0]);
        for (i = v37 + 24; (void **)i != v38; i += 24)
        {
          if (*(char *)(i + 23) < 0)
          {
            sub_20E860C04(__p, *(void **)i, *(_QWORD *)(i + 8));
          }
          else
          {
            v44 = *(_OWORD *)i;
            v57 = *(void **)(i + 16);
            *(_OWORD *)__p = v44;
          }
          sub_20E86A980(&v59, (uint64_t)".", 1);
          if (SHIBYTE(v57) >= 0)
            v45 = HIBYTE(v57);
          else
            v45 = (uint64_t)__p[1];
          if (v45)
          {
            if (SHIBYTE(v57) >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            sub_20E86A980(&v59, (uint64_t)v46, v45);
          }
          else
          {
            sub_20E86A980(&v59, (uint64_t)"_", 1);
          }
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);
        }
      }
      if ((v68 & 0x10) != 0)
      {
        v49 = v67;
        v47 = v34;
        if (v67 < v64)
        {
          v67 = v64;
          v49 = v64;
        }
        v50 = v63;
        v48 = v49 - (_QWORD)v63;
        if (v49 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_152;
      }
      else
      {
        v47 = v34;
        if ((v68 & 8) == 0)
        {
          v48 = 0;
          *((_BYTE *)a2 + 23) = 0;
          goto LABEL_138;
        }
        v50 = v61;
        v48 = v62 - (_QWORD)v61;
        if ((unint64_t)(v62 - (_QWORD)v61) >= 0x7FFFFFFFFFFFFFF8)
LABEL_152:
          sub_20E860B7C();
      }
      if (v48 >= 0x17)
      {
        v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v51 = v48 | 7;
        v52 = v51 + 1;
        v53 = operator new(v51 + 1);
        a2[1] = v48;
        a2[2] = v52 | 0x8000000000000000;
        *a2 = v53;
        a2 = v53;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v48;
        if (!v48)
        {
LABEL_138:
          *((_BYTE *)a2 + v48) = 0;
          v58[0] = v33;
          *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
          v59 = v47;
          v60 = MEMORY[0x24BEDB848] + 16;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x212BC6290](v69);
          v40 = v70;
          if (!v70)
          {
LABEL_148:
            if (v74 < 0)
              goto LABEL_149;
            return;
          }
LABEL_141:
          v54 = v71;
          v55 = v40;
          if (v71 != v40)
          {
            do
            {
              if (*((char *)v54 - 1) < 0)
                operator delete(*(v54 - 3));
              v54 -= 3;
            }
            while (v54 != v40);
            v55 = v70;
          }
          v71 = v40;
          operator delete(v55);
          goto LABEL_148;
        }
      }
      memmove(a2, v50, v48);
      goto LABEL_138;
    }
    v19 = v18[v17--];
  }
  while (v19 != 46);
  if ((v5 & 0x80) == 0)
    goto LABEL_44;
LABEL_47:
  if (v17 == v6 - 1)
    goto LABEL_48;
LABEL_51:
  v20 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v21 = (__int128 *)__dst;
    goto LABEL_53;
  }
LABEL_57:
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if ((v5 & 0x80) != 0)
LABEL_149:
    operator delete((void *)__dst);
}

void sub_20E8C21DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_20E863784((uint64_t)&a18);
  sub_20E89FB98((void **)(v18 - 136));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C2268(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = MEMORY[0x24BEDB858];
  v7 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  v8 = a1 + 16;
  v9 = a1 + 24;
  v10 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v12;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v13, (void *)(a1 + 24));
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v10[4];
  v15 = v10[5];
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = v10[1];
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + *(_QWORD *)(v16 - 24)) = v10[6];
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v17 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  if ((__int128 *)(a1 + 88) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E867BF8((_QWORD *)(a1 + 88), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v18 = *a2;
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 88) = v18;
    }
  }
  sub_20E8B469C(v9);
  return a1;
}

void sub_20E8C23B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C240C(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

uint64_t sub_20E8C25A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL sub_20E8C25F0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _BOOL8 v18;
  __int128 v20;
  std::mutex *v21;

  v4 = (std::mutex *)(*(_QWORD *)(a2 + 80) + 64);
  std::mutex::lock(v4);
  v5 = (std::mutex *)(a1 + 64);
  v21 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD **)(v6 + 128);
  v8 = (_QWORD *)(v6 + 136);
  if (v7 != (_QWORD *)(v6 + 136))
  {
    while (1)
    {
      v9 = v7[6];
      *(_QWORD *)&v20 = v7[5];
      *((_QWORD *)&v20 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_20E8C288C(a1, &v20, (uint64_t)&v21);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (!*((_QWORD *)&v20 + 1))
        goto LABEL_11;
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (_QWORD *)v7[1];
        if (!v15)
        {
          do
          {
LABEL_15:
            v16 = (_QWORD *)v7[2];
            v17 = *v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)v7[1];
        if (!v15)
          goto LABEL_15;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v7 = v16;
      if (v16 == v8)
      {
        v5 = v21;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 152) != 0;
  std::mutex::unlock(v5);
  std::mutex::unlock(v4);
  return v18;
}

void sub_20E8C2730(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C2744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  std::mutex *v12;

  sub_20E86665C((uint64_t)&a10);
  std::mutex::unlock(a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C2768(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::mutex *v10;

  v10 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v10);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  *a2 = 0;
  a2[1] = 0;
  v5 = sub_20E8C0AA8(a1, v9, (uint64_t)&v10);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::unlock(v10);
  return v5;
}

void sub_20E8C2808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  sub_20E86665C((uint64_t)&a10);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C2824(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20E8C288C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t **v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  __int128 v14;
  uint64_t **v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;

  if (a3)
  {
    v5 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v5;
    v23 = v5;
    v6 = sub_20E8D2008((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 && *((_BYTE *)v6[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v13 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    v14 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v14;
    v23 = v14;
    v15 = sub_20E8D2008((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v17 = v16;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v17 && *((_BYTE *)v15[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
    std::mutex::unlock(v13);
  }
  return v12 != 0;
}

void sub_20E8C2A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E8C2824((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_20E8C2A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E8C2824((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C2AA0(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v2[2];
      v5 = v3[1];
      v6 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)&v12 = *v3;
      *((_QWORD *)&v12 + 1) = v5;
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_BYTE *)(v4 + 72) = sub_20E8C288C(v6, &v12, 0);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      result = sub_20E8C2AA0(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_20E8C2B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_21023E844(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E8C2B7C(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  std::mutex *v7;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  v7 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v7);
  v5 = sub_20E8C2C24(a1, a2, (uint64_t)&v7);
  std::mutex::unlock(v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_20E8C2BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20E8C2C10(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8C2C24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 80);
  result = (uint64_t *)v4[6];
  if (result)
  {
    v8 = v4 + 6;
    v9 = (_QWORD *)v4[6];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v4 + 6)
    {
      return 0;
    }
    else if (v8[4] <= a2)
    {
      v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v15 = v8;
        do
        {
          v14 = (uint64_t *)v15[2];
          v16 = *v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if ((uint64_t *)v4[5] == v8)
        v4[5] = v14;
      --v4[7];
      sub_20E8D2134(result, v8);
      v17 = (std::__shared_weak_count *)v8[6];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v8);
      v20 = *(_QWORD *)(a1 + 80);
      if (a3)
      {
        sub_20E8D0448(*(_QWORD **)(a1 + 80), a2);
        v21 = *(_QWORD *)(v20 + 152);
      }
      else
      {
        v22 = (std::mutex *)(v20 + 64);
        std::mutex::lock((std::mutex *)(v20 + 64));
        sub_20E8D0448((_QWORD *)v20, a2);
        v21 = *(_QWORD *)(v20 + 152);
        std::mutex::unlock(v22);
      }
      *(_BYTE *)(a1 + 72) = v21 != 0;
      v23 = a2;
      sub_20E8C2DE8((uint64_t)&v23, a1);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20E8C2DD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C2DE8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (unint64_t *)result;
    do
    {
      v4 = v2[2];
      v5 = *v3;
      v6 = *(_QWORD *)(v4 + 80);
      v7 = (std::mutex *)(v6 + 64);
      std::mutex::lock((std::mutex *)(v6 + 64));
      sub_20E8D0448((_QWORD *)v6, v5);
      v8 = *(_QWORD *)(v6 + 152);
      std::mutex::unlock(v7);
      *(_BYTE *)(v4 + 72) = v8 != 0;
      result = sub_20E8C2DE8(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_20E8C2E70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C2E84(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v2);
  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_20E8C2C24(a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32), (uint64_t)&v4);
  }
  std::mutex::unlock(v4);
  std::mutex::unlock(v2);
}

void sub_20E8C2EFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C2F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20E8C2F2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20E8C303C((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56));
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD **)(v5 + 40);
  v7 = (_QWORD *)(v5 + 48);
  if (v6 != (_QWORD *)(v5 + 48))
  {
    v8 = (_QWORD *)a2[1];
    do
    {
      if ((unint64_t)v8 >= a2[2])
      {
        v8 = sub_20E8D0568((uint64_t)a2, (__int128 *)(v6 + 5));
      }
      else
      {
        v9 = v6[6];
        *v8 = v6[5];
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v8 += 2;
      }
      a2[1] = v8;
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  std::mutex::unlock(v4);
}

void sub_20E8C301C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void **v2;

  sub_20E8C3144(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C303C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20E867F44();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

void **sub_20E8C3144(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_20E8C31DC(uint64_t a1, const char *a2, int a3, unint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v8 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = v9 + 128;
  v11 = 40;
  if (a3)
    v11 = 128;
  else
    v10 = v9 + 40;
  if (!a4)
    goto LABEL_28;
  v12 = *(_QWORD **)(v10 + 8);
  if (!v12)
    goto LABEL_28;
  v13 = (_QWORD *)(v10 + 8);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a4;
    if (v14 >= a4)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)(v10 + 8) || (v17 = v13[4], v17 > a4))
  {
LABEL_28:
    if (!a2)
      goto LABEL_30;
    v18 = *(_QWORD **)(v9 + v11);
    v19 = (_QWORD *)(v10 + 8);
    if (v18 == (_QWORD *)(v10 + 8))
      goto LABEL_30;
    while (1)
    {
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18[4] + 24))(v18[4]);
      if (v20 == a2 || !strcmp(v20, a2))
        break;
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v23 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v23);
      }
      v18 = v22;
      if (v22 == v19)
        goto LABEL_30;
    }
    if (v18 == v19)
LABEL_30:
      v17 = 0;
    else
      v17 = v18[4];
  }
  std::mutex::unlock(v8);
  return v17;
}

void sub_20E8C3320(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C3334(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t i;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = (uint64_t *)operator new();
  v7 = (std::__shared_weak_count_vtbl *)operator new();
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = (uint64_t)v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF338;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = (uint64_t)v8;
  v9 = a1[6];
  a1[6] = v6;
  if (!v9)
  {
    v13 = *v6;
    goto LABEL_13;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x212BC6398](v9, 0x30C40EEE2E2AFLL);
  v13 = *(_QWORD *)a1[6];
  v8 = *(std::__shared_weak_count **)(a1[6] + 8);
  if (v8)
  {
LABEL_13:
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v14 = 0;
    v15 = (std::__shared_weak_count *)a1[8];
    a1[7] = v13;
    a1[8] = v8;
    if (!v15)
      goto LABEL_21;
    goto LABEL_17;
  }
  v14 = 1;
  v15 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = 0;
  if (!v15)
    goto LABEL_21;
LABEL_17:
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_21:
  if ((v14 & 1) == 0)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD **)(a1[10] + 16);
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 0u;
  v24 = 0;
  if (v23)
  {
    v25 = v23;
    do
    {
      ++v24;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_20E8D3738(__p, v23, v24);
  i = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v27 = (void **)__p[1];
    v28 = v50;
    while (1)
    {
      v29 = *(uint64_t *)((char *)v27 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8));
      v30 = v28 & 0x1FF;
      v31 = *(_QWORD **)(v29 + 8 * v30);
      if (!v31[6])
      {
        v33 = a1[7];
        v32 = a1[8];
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (std::__shared_weak_count *)v31[8];
        v31[7] = v33;
        v31[8] = v32;
        if (!v36)
          goto LABEL_42;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          for (i = *((_QWORD *)&v50 + 1); v39; v39 = (_QWORD *)*v39)
          {
LABEL_47:
            v40 = (char *)__p[1];
            if ((void *)v49 == __p[1])
              v41 = 0;
            else
              v41 = (((_QWORD)v49 - (unint64_t)__p[1]) << 6) - 1;
            v42 = v50 + i;
            if (v41 == v42)
            {
              sub_20E8D06C8((uint64_t)__p);
              v40 = (char *)__p[1];
              v42 = *((_QWORD *)&v50 + 1) + v50;
            }
            *(_QWORD *)(*(_QWORD *)&v40[(v42 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v42 & 0x1FF)) = v39[2];
            i = ++*((_QWORD *)&v50 + 1);
          }
        }
        else
        {
LABEL_42:
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          i = *((_QWORD *)&v50 + 1);
          if (v39)
            goto LABEL_47;
        }
      }
      v27 = (void **)__p[1];
      --i;
      v28 = v50 + 1;
      *(_QWORD *)&v50 = v28;
      *((_QWORD *)&v50 + 1) = i;
      if (v28 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v27 = (void **)((char *)__p[1] + 8);
        v28 = v50 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v50 = v50 - 512;
        i = *((_QWORD *)&v50 + 1);
      }
      if (!i)
        goto LABEL_53;
    }
  }
  v27 = (void **)__p[1];
LABEL_53:
  v43 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v44 = v49 - (_QWORD)v27;
  if ((_QWORD)v49 - (_QWORD)v27 >= 0x11uLL)
  {
    do
    {
      operator delete(*v27);
      v43 = (void **)v49;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v44 = v49 - (_QWORD)v27;
    }
    while ((_QWORD)v49 - (_QWORD)v27 > 0x10uLL);
  }
  v45 = v44 >> 3;
  if (v45 == 1)
  {
    v46 = 256;
  }
  else
  {
    if (v45 != 2)
      goto LABEL_60;
    v46 = 512;
  }
  *(_QWORD *)&v50 = v46;
LABEL_60:
  if (v27 != v43)
  {
    do
    {
      v47 = *v27++;
      operator delete(v47);
    }
    while (v27 != v43);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_20E8C377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20E8C37D4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x212BC6398](v3, 0x1000C4052888210);
  MEMORY[0x212BC6398](v2, 0x30C40EEE2E2AFLL);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C3820(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C3834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E8D41E8((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C3850(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;

  if (a1[6])
  {
    if (!a1[5])
      return 0;
    v2 = (std::mutex *)(a1[1] + 56);
    std::mutex::lock(v2);
    v3 = a1[5];
    v5 = *(_QWORD *)(v3 + 56);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (std::__shared_weak_count *)a1[8];
    a1[7] = v5;
    a1[8] = v4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD **)(a1[10] + 16);
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v12 = 0;
    if (v11)
    {
      v13 = v11;
      do
      {
        ++v12;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    sub_20E8D3738(__p, v11, v12);
    i = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v15 = (char *)__p[1];
      v16 = v44;
      do
      {
        v17 = *(_QWORD *)&v15[(v16 >> 6) & 0x3FFFFFFFFFFFFF8];
        v18 = v16 & 0x1FF;
        v19 = *(_QWORD **)(v17 + 8 * v18);
        if (!v19[6])
        {
          v21 = a1[7];
          v20 = a1[8];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)v19[8];
          v19[7] = v21;
          v19[8] = v20;
          if (!v24)
            goto LABEL_27;
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            for (i = *((_QWORD *)&v44 + 1); v27; v27 = (_QWORD *)*v27)
            {
LABEL_32:
              v28 = (char *)__p[1];
              if ((void *)v43 == __p[1])
                v29 = 0;
              else
                v29 = (((_QWORD)v43 - (unint64_t)__p[1]) << 6) - 1;
              v30 = v44 + i;
              if (v29 == v30)
              {
                sub_20E8D06C8((uint64_t)__p);
                v28 = (char *)__p[1];
                v30 = *((_QWORD *)&v44 + 1) + v44;
              }
              *(_QWORD *)(*(_QWORD *)&v28[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v27[2];
              i = ++*((_QWORD *)&v44 + 1);
            }
          }
          else
          {
LABEL_27:
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            i = *((_QWORD *)&v44 + 1);
            if (v27)
              goto LABEL_32;
          }
        }
        v15 = (char *)__p[1];
        --i;
        v16 = v44 + 1;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = i;
        if (v16 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          v15 = (char *)__p[1] + 8;
          v16 = v44 - 512;
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v44 = v44 - 512;
          i = *((_QWORD *)&v44 + 1);
        }
      }
      while (i);
    }
    v31 = a1[6];
    a1[6] = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 8);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v31, 0x30C40EEE2E2AFLL);
    }
    v35 = (void **)__p[1];
    v36 = (void **)v43;
    *((_QWORD *)&v44 + 1) = 0;
    v37 = v43 - (unint64_t)__p[1];
    if ((unint64_t)v43 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v36 = (void **)v43;
        v35 = (void **)((char *)__p[1] + 8);
        __p[1] = v35;
        v37 = v43 - (_QWORD)v35;
      }
      while ((_QWORD)v43 - (_QWORD)v35 > 0x10uLL);
    }
    v38 = v37 >> 3;
    if (v38 == 1)
    {
      v39 = 256;
    }
    else
    {
      if (v38 != 2)
        goto LABEL_52;
      v39 = 512;
    }
    *(_QWORD *)&v44 = v39;
LABEL_52:
    if (v35 != v36)
    {
      do
      {
        v41 = *v35++;
        operator delete(v41);
      }
      while (v35 != v36);
      if ((void *)v43 != __p[1])
        *(_QWORD *)&v43 = v43 + (((unint64_t)__p[1] - v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    std::mutex::unlock(v2);
  }
  return 1;
}

void sub_20E8C3BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20E8C3C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E8D41E8((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20E8C3C3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  sub_20E8C3C98(a1, a2);
  std::mutex::unlock(v4);
}

void sub_20E8C3C84(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C3C98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *i;
  void *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_DWORD ***)(a1 + 48);
  if (v4)
  {
    v5 = **v4 - 1;
    if (v5 > 5)
    {
      v6 = "{error}";
      v7 = strlen("{error}");
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
    }
    else
    {
      v6 = off_24C9AF8D8[v5];
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
        sub_20E860B7C();
    }
  }
  else
  {
    v6 = "NONE";
    v7 = strlen("NONE");
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v21 + 1) = v8;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&v21 = v9;
LABEL_13:
    memcpy(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v22) = v7;
  v9 = &v21;
  if (v7)
    goto LABEL_13;
  LOBYTE(v21) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_14:
  sub_20E860C04((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_15:
  v13 = (_BYTE *)(a2 + 24);
  if (SHIBYTE(v22) < 0)
  {
    v16 = (void *)v21;
    sub_20E860C04(v13, (void *)v21, *((unint64_t *)&v21 + 1));
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    operator delete(v16);
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16); i; i = (_QWORD *)*i)
    {
LABEL_21:
      while (1)
      {
        sub_20E8C3C98(&v21, i[2]);
        v17 = *(_QWORD *)(a2 + 64);
        if (v17 < *(_QWORD *)(a2 + 72))
          break;
        *(_QWORD *)(a2 + 64) = sub_20E8D0FA8(v14, (uint64_t)&v21);
        sub_20E8C07B8((uint64_t)&v21);
        i = (_QWORD *)*i;
        if (!i)
          return;
      }
      if (SHIBYTE(v22) < 0)
      {
        sub_20E860C04(*(_BYTE **)(a2 + 64), (void *)v21, *((unint64_t *)&v21 + 1));
      }
      else
      {
        v18 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        *(_OWORD *)v17 = v18;
      }
      v19 = (_BYTE *)(v17 + 24);
      if (SHIBYTE(v24) < 0)
      {
        sub_20E860C04(v19, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        v20 = v23;
        *(_QWORD *)(v17 + 40) = v24;
        *(_OWORD *)v19 = v20;
      }
      *(_QWORD *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v26;
      *(_QWORD *)(v17 + 72) = v27;
      v26 = 0uLL;
      v27 = 0;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      sub_20E8C07B8((uint64_t)&v21);
    }
  }
  else
  {
    *(_OWORD *)v13 = v21;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16);
    if (i)
      goto LABEL_21;
  }
}

void sub_20E8C3F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8C3F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  *(_QWORD *)(v9 + 64) = v10;
  sub_20E8C07B8((uint64_t)&a9);
  sub_20E8C07B8(v9);
  JUMPOUT(0x20E8C3FBCLL);
}

uint64_t sub_20E8C3FC4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 80);
  v3 = *(_QWORD **)(v2 + 128);
  v4 = (_QWORD *)(v2 + 136);
  if (v3 != (_QWORD *)(v2 + 136))
  {
    do
    {
      result = v3[5];
      if (*(_BYTE *)(result + 8))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD **sub_20E8C4058@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_20E8C4068(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  sub_20E8C0F68(&v3, a2, a3);
}

void sub_20E8C4090(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1065353216;
  *(_QWORD *)(v2 + 56) = 850045863;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  v3 = operator new();
  sub_20E8C4418();
  *(_BYTE *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_24C9AF028;
  v4 = (_QWORD *)operator new();
  *v4 = off_24C9AEF70;
  v5 = v4 + 1;
  if (byte_254A5A9EF < 0)
  {
    sub_20E860C04(v5, (void *)xmmword_254A5A9D8, *((unint64_t *)&xmmword_254A5A9D8 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_254A5A9D8;
    v4[3] = unk_254A5A9E8;
  }
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 24) = 63;
  v24[1] = v3;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF428;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v25 = v6;
  v8 = operator new();
  v24[0] = v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_20E8C4518(&__p, &v26, 1uLL);
  sub_20E8C0848(v8, v24, (uint64_t)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_20E8BFEB4((uint64_t *)(v2 + 8), v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20E8C435C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  MEMORY[0x212BC6398](v2, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C4418()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A830))
    return &qword_254A5A9D0;
  sub_20E8610C0(__p, "%d [%t] %p %c: %m%n");
  sub_20E8C461C(&qword_254A5A9D0, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_20E8C46C4, &qword_254A5A9D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A830);
  return &qword_254A5A9D0;
}

void sub_20E8C44CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5A830);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5A830);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E8C450C(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_20E8C4518(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20E867F44();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20E8C45BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_21023E88C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E8C45E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

_QWORD *sub_20E8C461C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = off_24C9AEF70;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_254A5A850);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_254A5A850);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_254A5A850))
    return a1;
  qword_254A5A848 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_254A5A850);
  return a1;
}

uint64_t sub_20E8C46C4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9AEF70;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E8C4710(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9AEF70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8C475C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A838))
    return qword_254A5A9F0;
  sub_20E8610C0(__p, "%d [%t] %p %c [%f] (%F:%L): %m%n");
  sub_20E8C461C(qword_254A5A9F0, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_20E8C46C4, qword_254A5A9F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A838);
  return qword_254A5A9F0;
}

void sub_20E8C4810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5A838);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5A838);
  _Unwind_Resume(a1);
}

char *sub_20E8C4850()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A808))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A808);
  return aPatternlayout;
}

uint64_t sub_20E8C48C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_20E86A980(v12, (uint64_t)v13, v14);
  sub_20E86A980(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_20E86A980(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_20E86A980(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_20E8C4AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E8C4B00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A808))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A808);
  return aPatternlayout;
}

void sub_20E8C4B70(int a1, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  int v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5A840);
  if ((v2 & 1) == 0)
  {
    v3 = a2;
    v4 = __cxa_guard_acquire(&qword_254A5A840);
    a2 = v3;
    if (v4)
    {
      sub_20E8C4850();
      if (byte_254A4FF6F < 0)
      {
        sub_20E860C04(v5, *(void **)aPatternlayout, *(unint64_t *)&aPatternlayout[8]);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)aPatternlayout;
        v6 = unk_254A4FF68;
      }
      v8 = 0x700000000000000;
      *(_OWORD *)__p = *(_OWORD *)"ILayout";
      sub_20E877C80(&qword_254A5A908, (uint64_t)v5, 2uLL);
      if (SHIBYTE(v8) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v6) < 0)
        operator delete(v5[0]);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A5A908, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5A840);
      a2 = v3;
    }
  }
  if (a2 != &qword_254A5A908)
    sub_20E8AD1B8((uint64_t)a2, (std::string *)qword_254A5A908, *(__int128 **)algn_254A5A910, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)algn_254A5A910 - qword_254A5A908) >> 3));
}

void sub_20E8C4CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A840);
  _Unwind_Resume(a1);
}

void sub_20E8C4CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_254A5A840);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_254A5A840);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E8C4D40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_24C9AEF70;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_20E8C4DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C4DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  void **p_dst;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v41[2];
  _QWORD v42[3];
  const void *v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  void *__p;
  char v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  void **__dst;
  size_t v53;
  int64_t v54;

  sub_20E863438((uint64_t)v41);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 < 2)
      goto LABEL_65;
    goto LABEL_5;
  }
  v5 = *(unsigned __int8 *)(a1 + 31);
  if (v5 >= 2)
  {
LABEL_5:
    v6 = 0;
    v7 = (_QWORD *)(a1 + 8);
    v8 = 1;
    while (1)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v11 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v7 + v6) != 37)
        {
LABEL_21:
          v16 = a1 + 8;
          if (v11 < 0)
            v16 = *v7;
          LOBYTE(__dst) = *(_BYTE *)(v16 + v6);
          sub_20E86A980(v42, (uint64_t)&__dst, 1);
          v8 = v6;
          goto LABEL_8;
        }
      }
      else
      {
        v11 = *(char *)(a1 + 31);
        if (*((_BYTE *)v7 + v6) != 37)
          goto LABEL_21;
      }
      v12 = a1 + 8;
      if (v11 < 0)
        v12 = *v7;
      v13 = (_BYTE *)(v12 + v8);
      if (v5 <= v8 + 1)
        v14 = v8 + 1;
      else
        v14 = v5;
      while (2)
      {
        switch(*v13)
        {
          case '%':
            v19 = "%";
            goto LABEL_33;
          case 'F':
            v9 = *(char **)(a2 + 32);
            v17 = strrchr(v9, 47);
            if (v17)
            {
              v9 = v17 + 1;
            }
            else
            {
              v27 = strrchr(v9, 92);
              if (v27)
                v9 = v27 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            goto LABEL_8;
          case 'c':
            v9 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_20E8C48C0((uint64_t)v41, (_QWORD *)(a2 + 16));
            goto LABEL_8;
          case 'f':
            v9 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            v20 = *(_QWORD *)(a2 + 56);
            v21 = *(_DWORD *)(v20 + 120);
            if ((v21 & 0x10) != 0)
            {
              v24 = *(_QWORD *)(v20 + 112);
              v25 = *(_QWORD *)(v20 + 72);
              if (v24 < v25)
              {
                *(_QWORD *)(v20 + 112) = v25;
                v24 = v25;
              }
              v26 = *(const void **)(v20 + 64);
              v22 = v24 - (_QWORD)v26;
              if (v24 - (unint64_t)v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
                sub_20E860B7C();
            }
            else
            {
              if ((v21 & 8) == 0)
              {
                v22 = 0;
                HIBYTE(v54) = 0;
                p_dst = (void **)&__dst;
                goto LABEL_55;
              }
              v26 = *(const void **)(v20 + 40);
              v22 = *(_QWORD *)(v20 + 56) - (_QWORD)v26;
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_83;
            }
            if (v22 >= 0x17)
            {
              v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v28 = v22 | 7;
              v29 = v28 + 1;
              p_dst = (void **)operator new(v28 + 1);
              v53 = v22;
              v54 = v29 | 0x8000000000000000;
              __dst = p_dst;
LABEL_54:
              memmove(p_dst, v26, v22);
              goto LABEL_55;
            }
            HIBYTE(v54) = v22;
            p_dst = (void **)&__dst;
            if (v22)
              goto LABEL_54;
LABEL_55:
            *((_BYTE *)p_dst + v22) = 0;
            if (v54 >= 0)
              v30 = (void **)&__dst;
            else
              v30 = __dst;
            if (v54 >= 0)
              v31 = HIBYTE(v54);
            else
              v31 = v53;
            sub_20E86A980(v42, (uint64_t)v30, v31);
            if (SHIBYTE(v54) < 0)
              operator delete(__dst);
LABEL_8:
            v6 = v8 + 1;
            v8 += 2;
            if (v8 >= v5)
              goto LABEL_65;
            break;
          case 'n':
            v19 = "\n";
LABEL_33:
            sub_20E86A980(v42, (uint64_t)v19, 1);
            goto LABEL_8;
          case 'p':
            v9 = off_24C9AEFA8[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v10 = strlen(v9);
            sub_20E86A980(v42, (uint64_t)v9, v10);
            goto LABEL_8;
          case 'r':
            v18 = atomic_load((unsigned __int8 *)&qword_254A5A850);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A850))
            {
              qword_254A5A848 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_254A5A850);
            }
            std::ostream::operator<<();
            goto LABEL_8;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            goto LABEL_8;
          default:
            v15 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v15 = *v7;
            v13 = (_BYTE *)(v15 + v8++ + 1);
            if (v8 < v5)
              continue;
            v8 = v14;
            goto LABEL_8;
        }
        break;
      }
    }
  }
LABEL_65:
  if ((v50 & 0x10) != 0)
  {
    v33 = v49;
    if (v49 < v46)
    {
      v49 = v46;
      v33 = v46;
    }
    v34 = v45;
    v32 = v33 - (_QWORD)v45;
    if (v33 - (unint64_t)v45 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v32 = 0;
      a3[23] = 0;
      goto LABEL_78;
    }
    v34 = v43;
    v32 = v44 - (_QWORD)v43;
    if ((unint64_t)(v44 - (_QWORD)v43) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
      sub_20E860B7C();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)a3 + 1) = v32;
    *((_QWORD *)a3 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)a3 = v37;
    a3 = v37;
    goto LABEL_77;
  }
  a3[23] = v32;
  if (v32)
LABEL_77:
    memmove(a3, v34, v32);
LABEL_78:
  a3[v32] = 0;
  v41[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v42[0] = v38;
  v42[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v51);
}

void sub_20E8C5354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C539C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9AEFF0;
  *(_QWORD *)(result + 8) = off_24C9AEF70;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void sub_20E8C53F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9AEFF0;
  *(_QWORD *)(a1 + 8) = off_24C9AEF70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8C5444@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a1 + 8) + 48))(&v4, a1 + 8);
  *a2 = v4;
  return result;
}

uint64_t sub_20E8C5480(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _BYTE *v5;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_24C9AF028;
  v4 = (_QWORD *)operator new();
  sub_20E8C4418();
  *v4 = off_24C9AEF70;
  v5 = v4 + 1;
  if (byte_254A5A9EF < 0)
  {
    sub_20E860C04(v5, (void *)xmmword_254A5A9D8, *((unint64_t *)&xmmword_254A5A9D8 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_254A5A9D8;
    v4[3] = unk_254A5A9E8;
  }
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *a2;
  return a1;
}

void sub_20E8C5534(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C5558(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9AF028;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E8C559C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9AF028;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

const char *sub_20E8C55F0()
{
  return "ConsoleAppender";
}

void sub_20E8C55FC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 24)) == *(_DWORD *)(a1 + 24))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A5A858);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_254A5A858);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254A4FF70, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5A858);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    std::mutex::lock(&stru_254A4FF70);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)&qword_254A5A860);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A860))
      {
        qword_254A5A8E0 = MEMORY[0x24BEDB318];
        qword_254A5A8E8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(&qword_254A5A860);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_20E86A980((_QWORD *)qword_254A5A8E0, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)&qword_254A5A860);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)&qword_254A5A860);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A860))
      {
        qword_254A5A8E0 = MEMORY[0x24BEDB318];
        qword_254A5A8E8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(&qword_254A5A860);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_20E86A980((_QWORD *)qword_254A5A8E8, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)&qword_254A5A860);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_254A4FF70);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(&qword_254A5A860))
    {
      qword_254A5A8E0 = MEMORY[0x24BEDB318];
      qword_254A5A8E8 = MEMORY[0x24BEDB310];
      __cxa_guard_release(&qword_254A5A860);
    }
    goto LABEL_22;
  }
}

void sub_20E8C5838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E8C5868(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;

  *a1 = &off_24C9AF058;
  v2 = operator new();
  *(_BYTE *)(v2 + 8) = 1;
  *(_QWORD *)v2 = &off_24C9AF028;
  v3 = (_QWORD *)operator new();
  sub_20E8C4418();
  *v3 = off_24C9AEF70;
  v4 = v3 + 1;
  if (byte_254A5A9EF < 0)
  {
    sub_20E860C04(v4, (void *)xmmword_254A5A9D8, *((unint64_t *)&xmmword_254A5A9D8 + 1));
  }
  else
  {
    *(_OWORD *)v4 = xmmword_254A5A9D8;
    v3[3] = unk_254A5A9E8;
  }
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 24) = 63;
  a1[1] = v2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C9AF428;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v2;
  a1[2] = v5;
  return a1;
}

void sub_20E8C5970(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C598C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C59D0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9AF058;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E8C5A44(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9AF058;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8C5AB8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_20E8C5ADC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9AF098;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E8C5B50(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9AF098;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8C5BC4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9AF0B8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E8C5C38(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9AF0B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20E8C5CB0()
{
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20E8C5CC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A870);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A870))
    return &qword_254A5A868;
  qword_254A5A868 = (uint64_t)&off_24C9AF0D8;
  __cxa_guard_release(&qword_254A5A870);
  return &qword_254A5A868;
}

uint64_t sub_20E8C5D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[51];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x24BDAC8D0];
  sub_20E860998(v8);
  if ((*((_BYTE *)&v9[2] + *(_QWORD *)(v8[0] - 24)) & 1) != 0)
  {
    v4 = 0;
    v5 = 2;
  }
  else if (v9[15])
  {
    std::istream::tellg();
    v4 = v7 & ~(v7 >> 63);
    v5 = 0;
    if ((*((_BYTE *)&v9[2] + *(_QWORD *)(v8[0] - 24)) & 5) != 0)
      *a3 = 3;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  *a3 = v5;
  v8[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x212BC5B4C](v9);
  std::istream::~istream();
  MEMORY[0x212BC6290](v10);
  return v4;
}

void sub_20E8C5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20E860ABC(&a26);
  _Unwind_Resume(a1);
}

void sub_20E8C5E64(std::__shared_weak_count_vtbl **a1@<X3>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count_vtbl *)operator new();
  sub_20E8C60A8(v4);
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9AF638;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  if (!v4[3].~__shared_weak_count_0)
  {
    *a2 = 0;
    a2[1] = 0;
    v13 = v5;
    if (!v5)
      return;
    goto LABEL_13;
  }
  *a1 = v4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = &off_24C9AF0B8;
  v7[1] = v4;
  v7[2] = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *a2 = v7;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24C9AF688;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v8;
  a2[1] = v11;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13 = v5;
  if (v5)
  {
LABEL_13:
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20E8C6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E8C6054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8C6068(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C6084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C60A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x212BC5B40](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20E8C6184(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_20E8C61C8(std::__shared_weak_count_vtbl **a1@<X2>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count_vtbl *)operator new();
  sub_20E860998(v4);
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9AF6D8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  if (!v4[3].__on_zero_shared)
  {
    *a2 = 0;
    a2[1] = 0;
    v13 = v5;
    if (!v5)
      return;
    goto LABEL_13;
  }
  *a1 = v4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = &off_24C9AF098;
  v7[1] = v4;
  v7[2] = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *a2 = v7;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24C9AF728;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v8;
  a2[1] = v11;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13 = v5;
  if (v5)
  {
LABEL_13:
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20E8C6380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E8C63AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8C63C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C63DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

BOOL sub_20E8C6400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const std::__fs::filesystem::path *v3;
  const std::__fs::filesystem::path *v4;
  int v5;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const std::__fs::filesystem::path *)a2;
  else
    v3 = *(const std::__fs::filesystem::path **)a2;
  if (*(char *)(a3 + 23) >= 0)
    v4 = (const std::__fs::filesystem::path *)a3;
  else
    v4 = *(const std::__fs::filesystem::path **)a3;
  rename(v3, v4, (std::error_code *)a3);
  return v5 == 0;
}

BOOL sub_20E8C643C(uint64_t a1, uint64_t a2)
{
  const std::__fs::filesystem::path *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const std::__fs::filesystem::path *)a2;
  else
    v2 = *(const std::__fs::filesystem::path **)a2;
  return !remove(v2, (std::error_code *)a2);
}

uint64_t sub_20E8C6468@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const void **v2;
  int v4;
  BOOL v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  void *p_p;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  size_t v30;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  void *__p;
  size_t v39;
  int64_t v40;
  void **__dst;
  size_t v42;
  int64_t v43;
  _QWORD v44[2];
  _QWORD v45[3];
  const void *v46;
  uint64_t v47;
  const void *v48;
  unint64_t v49;
  void *v50;
  char v51;
  unint64_t v52;
  int v53;
  uint64_t v54;

  v2 = (const void **)a1;
  v4 = *(char *)(a1 + 23);
  v5 = v4 < 0;
  v6 = *(const void **)a1;
  if (v4 >= 0)
    v6 = (const void *)a1;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5)
    v7 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t)v6 - 1;
  v9 = v7;
  while (v9)
  {
    v10 = *(unsigned __int8 *)(v8 + v9--);
    if (v10 == 46)
    {
      if (v9 != -1)
        goto LABEL_10;
      break;
    }
  }
  v9 = v7;
LABEL_10:
  sub_20E863438((uint64_t)v44);
  v11 = *((unsigned __int8 *)v2 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = (size_t)v2[1];
  if (v12 >= 0)
    v13 = v2;
  else
    v13 = *v2;
  if (v11 >= v9)
    v14 = v9;
  else
    v14 = v11;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v42 = v14;
    v43 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_25;
  }
  HIBYTE(v43) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_25:
    memmove(p_dst, v13, v14);
  *((_BYTE *)p_dst + v14) = 0;
  if (v43 >= 0)
    v18 = (void **)&__dst;
  else
    v18 = __dst;
  if (v43 >= 0)
    v19 = HIBYTE(v43);
  else
    v19 = v42;
  v20 = sub_20E86A980(v45, (uint64_t)v18, v19);
  sub_20E86A980(v20, (uint64_t)"_", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  if ((*((char *)v2 + 23) & 0x80000000) == 0)
  {
    v22 = *((unsigned __int8 *)v2 + 23);
    if (v9 <= v22)
    {
      v23 = v22 - v9;
      if (v22 - v9 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_35;
LABEL_55:
      sub_20E860B7C();
    }
LABEL_74:
    sub_20E89FD0C();
  }
  v22 = (size_t)v2[1];
  if (v22 < v9)
    goto LABEL_74;
  v2 = (const void **)*v2;
  v23 = v22 - v9;
  if (v22 - v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
LABEL_35:
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    p_p = operator new(v25 + 1);
    v39 = v23;
    v40 = v26 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_41;
  }
  HIBYTE(v40) = v23;
  p_p = &__p;
  if (v22 != v9)
LABEL_41:
    memmove(p_p, (char *)v2 + v9, v23);
  *((_BYTE *)p_p + v23) = 0;
  if (v40 >= 0)
    v27 = &__p;
  else
    v27 = __p;
  if (v40 >= 0)
    v28 = HIBYTE(v40);
  else
    v28 = v39;
  sub_20E86A980(v21, (uint64_t)v27, v28);
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
LABEL_50:
      v29 = v53;
      if ((v53 & 0x10) == 0)
        goto LABEL_51;
LABEL_58:
      v31 = v52;
      if (v52 < v49)
      {
        v52 = v49;
        v31 = v49;
      }
      v32 = v48;
      v30 = v31 - (_QWORD)v48;
      if (v31 - (unint64_t)v48 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_72;
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__dst);
  v29 = v53;
  if ((v53 & 0x10) != 0)
    goto LABEL_58;
LABEL_51:
  if ((v29 & 8) == 0)
  {
    v30 = 0;
    a2[23] = 0;
    goto LABEL_68;
  }
  v32 = v46;
  v30 = v47 - (_QWORD)v46;
  if ((unint64_t)(v47 - (_QWORD)v46) > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
    sub_20E860B7C();
LABEL_61:
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v35 = operator new(v33 + 1);
    *((_QWORD *)a2 + 1) = v30;
    *((_QWORD *)a2 + 2) = v34 | 0x8000000000000000;
    *(_QWORD *)a2 = v35;
    a2 = v35;
    goto LABEL_67;
  }
  a2[23] = v30;
  if (v30)
LABEL_67:
    memmove(a2, v32, v30);
LABEL_68:
  a2[v30] = 0;
  v44[0] = *MEMORY[0x24BEDB7F0];
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45[0] = v36;
  v45[1] = MEMORY[0x24BEDB848] + 16;
  if (v51 < 0)
    operator delete(v50);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v54);
}

void sub_20E8C6804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_20E863784((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_20E863784((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C6898(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  std::mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::mutex *v32;
  std::mutex *v33;
  uint64_t v34;
  void *__p[2];
  unint64_t v37;
  std::mutex *v38;
  void *v39[2];
  unint64_t v40;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A878))
  {
    qword_254A5A930 = 0;
    qword_254A5A928 = 0;
    qword_254A5A920 = (uint64_t)&qword_254A5A928;
    __cxa_atexit((void (*)(void *))sub_20E8C6C34, &qword_254A5A920, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A878);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5A880);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A880))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254A4FFB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A880);
  }
  std::mutex::lock(&stru_254A4FFB0);
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (uint64_t *)((char *)a1 + v4);
  else
    v5 = (uint64_t *)(*a1 + a1[1]);
  if ((v4 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  while (v5 != v6)
  {
    v8 = *((unsigned __int8 *)v5 - 1);
    v5 = (uint64_t *)((char *)v5 - 1);
    v7 = v8;
    if (v8 == 92 || v7 == 47)
    {
      v9 = (uint64_t *)((char *)v5 + 1);
      goto LABEL_14;
    }
  }
  v9 = v6;
LABEL_14:
  if ((v4 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = a1[1];
  v11 = (char *)v6 + v10;
  v12 = (char *)v6 + v10 - (char *)v9;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v12 <= 0x16)
  {
    HIBYTE(v40) = (_BYTE)v6 + v10 - (_BYTE)v9;
    v13 = (char *)v39;
    if (v9 != (uint64_t *)v11)
      goto LABEL_20;
LABEL_29:
    v15 = v13;
    goto LABEL_32;
  }
  v21 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v21 = v12 | 7;
  v22 = v21 + 1;
  v13 = (char *)operator new(v21 + 1);
  v39[1] = (void *)((char *)v6 + v10 - (char *)v9);
  v40 = v22 | 0x8000000000000000;
  v39[0] = v13;
  if (v9 == (uint64_t *)v11)
    goto LABEL_29;
LABEL_20:
  v14 = (char *)v6 + v10 - (char *)v9;
  if (v14 < 0x20 || (unint64_t)(v13 - (char *)v9) < 0x20)
  {
    v15 = v13;
    v16 = (char *)v9;
    do
    {
LABEL_31:
      v23 = *v16++;
      *v15++ = v23;
    }
    while (v16 != v11);
    goto LABEL_32;
  }
  v15 = &v13[v14 & 0xFFFFFFFFFFFFFFE0];
  v16 = (char *)v9 + (v14 & 0xFFFFFFFFFFFFFFE0);
  v17 = (__int128 *)(v9 + 2);
  v18 = v13 + 16;
  v19 = v14 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v20 = *v17;
    *(v18 - 1) = *(v17 - 1);
    *v18 = v20;
    v17 += 2;
    v18 += 2;
    v19 -= 32;
  }
  while (v19);
  if (v14 != (v14 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_31;
LABEL_32:
  *v15 = 0;
  v24 = sub_20E8D4B64((uint64_t)&qword_254A5A920, (const void **)v39);
  if (v24 == &qword_254A5A928)
  {
    if (SHIBYTE(v40) < 0)
    {
      sub_20E860C04(__p, v39[0], (unint64_t)v39[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v39;
      v37 = v40;
    }
    v38 = 0;
    v26 = sub_20E8D4C7C((uint64_t **)&qword_254A5A920, (const void **)__p, (uint64_t)__p);
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      std::mutex::~mutex(v27);
      MEMORY[0x212BC6398](v28, 0x1000C40FA0F61DDLL, v29, v30);
    }
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    v31 = operator new();
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_QWORD *)(v31 + 56) = 0;
    v33 = (std::mutex *)v26[7];
    v25 = v26 + 7;
    v32 = v33;
    *(_QWORD *)v31 = 850045863;
    *v25 = v31;
    if (v33)
    {
      std::mutex::~mutex(v32);
      MEMORY[0x212BC6398]();
    }
  }
  else
  {
    v25 = v24 + 7;
  }
  v34 = *v25;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  std::mutex::unlock(&stru_254A4FFB0);
  return v34;
}

void sub_20E8C6BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(&stru_254A4FFB0);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(&stru_254A4FFB0);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C6C34(uint64_t a1)
{
  sub_20E8D4AE0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20E8C6C5C(uint64_t a1)
{
  std::mutex *v2;

  v2 = *(std::mutex **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x212BC6398]();
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8C6CC0(uint64_t a1)
{
  char v1;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void **v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  __int128 v17;
  unint64_t v18;
  void *v19[2];
  char v20;
  void *__p[2];
  unint64_t v22;

  if (!*(_DWORD *)(a1 + 72))
    goto LABEL_41;
  v3 = 0;
  v4 = a1 + 40;
  do
  {
    LODWORD(v19[0]) = 0;
    sub_20E8C6468(v4, __p);
    (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), __p, v19);
    if (!LODWORD(v19[0]))
    {
      v5 = 1;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (LODWORD(v19[0]) == 1)
    {
      v1 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v4, __p);
      v5 = 0;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_8:
      operator delete(__p[0]);
      goto LABEL_9;
    }
    v1 = 0;
    v5 = 0;
    if (SHIBYTE(v22) < 0)
      goto LABEL_8;
LABEL_9:
    if ((v5 & 1) == 0)
      return v1 & 1;
    ++v3;
  }
  while (v3 < *(_DWORD *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 80);
  sub_20E8C6468(v4, v19);
  if (v20 >= 0)
    v7 = v19;
  else
    v7 = (void **)v19[0];
  v8 = strlen((const char *)v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = v9;
    v22 = v12 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_24;
  }
  HIBYTE(v22) = v8;
  v10 = __p;
  if (v8)
LABEL_24:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  v13 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    if (v20 < 0)
      goto LABEL_40;
LABEL_27:
    if ((v13 & 1) != 0)
      goto LABEL_28;
LABEL_41:
    v1 = 0;
  }
  else
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_40:
    operator delete(v19[0]);
    if ((v13 & 1) == 0)
      goto LABEL_41;
LABEL_28:
    sub_20E8C6468(v4, __p);
    if (*(_DWORD *)(a1 + 72) >= 2u)
    {
      v14 = 0;
      v15 = 1;
      do
      {
        while (1)
        {
          sub_20E8C6468(v4, v19);
          if ((*(unsigned int (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v19, __p))
          {
            ++v14;
            sub_20E8C6468(v4, &v17);
            if (SHIBYTE(v22) < 0)
              operator delete(__p[0]);
            *(_OWORD *)__p = v17;
            v22 = v18;
          }
          if (v20 < 0)
            break;
          if (++v15 >= *(_DWORD *)(a1 + 72))
            goto LABEL_37;
        }
        operator delete(v19[0]);
        ++v15;
      }
      while (v15 < *(_DWORD *)(a1 + 72));
    }
LABEL_37:
    v1 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v4, __p);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
  return v1 & 1;
}

void sub_20E8C6F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8C7004(uint64_t a1, uint64_t *a2, __int128 *a3, _DWORD *a4)
{
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_24C9AF120;
  *(_QWORD *)(a1 + 16) = sub_20E8C6898((uint64_t *)a3);
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = *a4;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 40), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 10;
  v10 = (_QWORD *)operator new();
  *v10 = &off_24C9AF0D8;
  *(_QWORD *)(a1 + 80) = v10;
  return a1;
}

void sub_20E8C70D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (!v3)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

const char *sub_20E8C7130()
{
  return "FileAppender";
}

uint64_t sub_20E8C713C(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  _QWORD *v6;
  _BYTE *v7;
  __int128 v8;
  _QWORD *v9;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_24C9AF120;
  *(_QWORD *)(a1 + 16) = sub_20E8C6898((uint64_t *)a2);
  v6 = (_QWORD *)operator new();
  sub_20E8C4418();
  *v6 = off_24C9AEF70;
  v7 = v6 + 1;
  if (byte_254A5A9EF < 0)
  {
    sub_20E860C04(v7, (void *)xmmword_254A5A9D8, *((unint64_t *)&xmmword_254A5A9D8 + 1));
  }
  else
  {
    *(_OWORD *)v7 = xmmword_254A5A9D8;
    v6[3] = unk_254A5A9E8;
  }
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v8;
  }
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 10;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24C9AF0D8;
  *(_QWORD *)(a1 + 80) = v9;
  return a1;
}

void sub_20E8C7264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (!v3)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_20E8C72C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C72E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24C9AF120;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      return a1;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20E8C7360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24C9AF120;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_8:
  JUMPOUT(0x212BC6398);
}

void sub_20E8C73EC(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 32)) == *(_DWORD *)(a1 + 32))
  {
    __p[0] = 0;
    __p[1] = 0;
    v15 = 0;
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 24) + 40))(&v12);
    v3 = *(std::mutex **)(a1 + 16);
    *(_OWORD *)__p = v12;
    v15 = v13;
    std::mutex::lock(v3);
    v11 = 0;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), a1 + 40, &v11);
    if (v11 <= 1)
    {
      if (v4 > *(_QWORD *)(a1 + 64))
        sub_20E8C6CC0(a1);
      v10 = 0;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(a1 + 80) + 24))(&v12, *(_QWORD *)(a1 + 80), a1 + 40, 1, &v10);
      if ((_QWORD)v12 && (*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 1) == 0)
      {
        if (v15 >= 0)
          v5 = __p;
        else
          v5 = (void **)__p[0];
        if (v15 >= 0)
          v6 = HIBYTE(v15);
        else
          v6 = (uint64_t)__p[1];
        sub_20E86A980(v10, (uint64_t)v5, v6);
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    std::mutex::unlock(v3);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
}

void sub_20E8C7578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  sub_20E86665C((uint64_t)&a12);
  std::mutex::unlock(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C75C0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 32) = *a2;
  return result;
}

void sub_20E8C75CC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = *(std::mutex **)(a1 + 16);
  std::mutex::lock(v4);
  if (a2)
    v5 = a2;
  else
    v5 = -1;
  *(_QWORD *)(a1 + 64) = v5;
  std::mutex::unlock(v4);
}

void sub_20E8C7610(uint64_t a1, void **a2)
{
  std::mutex *v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;

  v4 = *(std::mutex **)(a1 + 16);
  std::mutex::lock(v4);
  if ((void **)(a1 + 40) != a2)
  {
    v5 = *((_BYTE *)a2 + 23);
    if (*(char *)(a1 + 63) < 0)
    {
      if (v5 >= 0)
        v7 = a2;
      else
        v7 = *a2;
      if (v5 >= 0)
        v8 = *((unsigned __int8 *)a2 + 23);
      else
        v8 = (size_t)a2[1];
      sub_20E867CBC((void **)(a1 + 40), v7, v8);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      sub_20E867BF8((_QWORD *)(a1 + 40), *a2, (size_t)a2[1]);
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 56) = a2[2];
      *(_OWORD *)(a1 + 40) = v6;
    }
  }
  *(_QWORD *)(a1 + 16) = sub_20E8C6898((uint64_t *)(a1 + 40));
  std::mutex::unlock(v4);
}

void sub_20E8C76B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C76C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E8C76D8(uint64_t a1, _DWORD *a2)
{
  std::mutex *v4;

  v4 = *(std::mutex **)(a1 + 16);
  std::mutex::lock(v4);
  *(_DWORD *)(a1 + 72) = *a2;
  std::mutex::unlock(v4);
}

_QWORD *sub_20E8C7718(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v5;
  void *__p[2];
  char v7;

  *a1 = &off_24C9AF150;
  v2 = operator new();
  v7 = 7;
  strcpy((char *)__p, "log.txt");
  v5 = 63;
  sub_20E8C713C(v2, (__int128 *)__p, &v5);
  a1[1] = v2;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24C9AF778;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = v2;
  a1[2] = v3;
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20E8C77F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8C7820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x212BC6398](v15, 0x10B3C40EA186015);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C7854(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9AF150;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E8C78C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9AF150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8C793C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

char *sub_20E8C7960@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  int64_t v4;
  char *v5;
  char *v6;
  size_t v7;
  char *v8;
  char *v9;
  std::string::size_type v10;

  if (result[23] < 0)
  {
    result = (char *)sub_20E860C04((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  }
LABEL_4:
  v3 = *(_BYTE *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 1)
  {
    v6 = &v5[v4];
    v7 = v4;
    result = v5;
    do
    {
      result = (char *)memchr(result, 32, v7);
      if (!result)
        break;
      if (*result == 32)
      {
        if (result == v6 || result - v5 == -1)
          return result;
        v8 = v5;
        do
        {
          if (!v4)
            break;
          v9 = (char *)memchr(v8, 32, v4);
          if (!v9)
            break;
          if (*v9 == 32)
            goto LABEL_24;
          v8 = v9 + 1;
          v4 = v6 - v8;
        }
        while (v6 - v8 > 0);
        v9 = v6;
LABEL_24:
        if (v9 == v6)
          v10 = -1;
        else
          v10 = v9 - v5;
        result = (char *)std::string::replace((std::string *)a2, v10, 1uLL, "", 0);
        goto LABEL_4;
      }
      ++result;
      v7 = v6 - result;
    }
    while (v6 - result >= 1);
  }
  return result;
}

void sub_20E8C7A84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E8C7AA0(_DWORD *a1, char *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  char v7;
  int v8;
  __int128 v9;
  std::string::size_type size;
  std::string *p_p;
  size_t v12;
  size_t v14;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  size_t v26;
  size_t v27;
  _BOOL8 v28;
  void **v30;
  _DWORD *v31;
  std::string __p;
  void *v33;
  void **v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  std::locale v38;

  sub_20E8C7960(a2, (uint64_t)v36);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_20E8C7F60((__int128 *)v36, 0x2Cu, (uint64_t *)&v33);
  v6 = (void **)v33;
  v5 = v34;
  if (v33 == v34)
  {
    v28 = 0;
    if (!v33)
      goto LABEL_77;
  }
  else
  {
    v31 = a1;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20E860C04(&__p, *v6, (unint64_t)v6[1]);
      }
      else
      {
        v9 = *(_OWORD *)v6;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size >= 4)
        v12 = 4;
      else
        v12 = size;
      if (!memcmp(p_p, "NONE", v12) && size == 4)
      {
        v17 = 0;
      }
      else
      {
        if (size >= 5)
          v14 = 5;
        else
          v14 = size;
        if (!memcmp(p_p, "TRACE", v14) && size == 5)
        {
          v17 = 1;
        }
        else if (!memcmp(p_p, "DEBUG", v14) && size == 5)
        {
          v17 = 2;
        }
        else if (!memcmp(p_p, "INFO", v12) && size == 4)
        {
          v17 = 4;
        }
        else if (!memcmp(p_p, "WARN", v12) && size == 4)
        {
          v17 = 8;
        }
        else if (!memcmp(p_p, "ERROR", v14) && size == 5)
        {
          v17 = 16;
        }
        else if (!memcmp(p_p, "FATAL", v14) && size == 5)
        {
          v17 = 32;
        }
        else
        {
          if (size >= 0xE)
            v26 = 14;
          else
            v26 = size;
          if (!memcmp(p_p, "ERROR_TO_FATAL", v26) && size == 14)
          {
            v17 = 48;
          }
          else
          {
            if (size >= 0xD)
              v27 = 13;
            else
              v27 = size;
            if (!memcmp(p_p, "WARN_TO_FATAL", v27) && size == 13)
            {
              v17 = 56;
            }
            else if (!memcmp(p_p, "INFO_TO_FATAL", v27) && size == 13)
            {
              v17 = 60;
            }
            else if (!std::string::compare(&__p, "DEBUG_TO_FATAL"))
            {
              v17 = 62;
            }
            else if (!std::string::compare(&__p, "TRACE_TO_FATAL"))
            {
              v17 = 63;
            }
            else if (!std::string::compare(&__p, "ALL"))
            {
              v17 = 63;
            }
            else
            {
              v7 = 1;
              v17 = 0;
            }
          }
        }
      }
      v18 = sub_20E8C80D4(v7 != 0, a3);
      v19 = sub_20E86A980(v18, (uint64_t)"tlog::Configurator: ", 20);
      v20 = sub_20E86A980(v19, (uint64_t)"Invalid log level filter token ", 31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v22 = __p.__r_.__value_.__l.__size_;
      v23 = sub_20E86A980(v20, (uint64_t)v21, v22);
      v24 = sub_20E86A980(v23, (uint64_t)")", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
      v25 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(&v38);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 |= v17;
      v6 += 3;
    }
    while (v6 != v5);
    *v31 = v8;
    v28 = v7 == 0;
    v6 = (void **)v33;
    if (!v33)
    {
LABEL_77:
      if ((v37 & 0x80000000) == 0)
        return v28;
LABEL_82:
      operator delete(v36[0]);
      return v28;
    }
  }
  v30 = v34;
  if (v34 == v6)
  {
    v34 = v6;
    operator delete(v6);
    if ((v37 & 0x80000000) == 0)
      return v28;
    goto LABEL_82;
  }
  do
  {
    if (*((char *)v30 - 1) < 0)
      operator delete(*(v30 - 3));
    v30 -= 3;
  }
  while (v30 != v6);
  v34 = v6;
  operator delete(v33);
  if (v37 < 0)
    goto LABEL_82;
  return v28;
}

void sub_20E8C7EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26)
{
  sub_20E89FB98(&a17);
  if ((a25 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C7F60(__int128 *a1, unsigned __int8 a2, uint64_t *a3)
{
  __int128 v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v11;
  _QWORD v12[13];
  char v13;
  uint64_t v14;

  sub_20E8C2268((uint64_t)v12, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  while (1)
  {
    v6 = sub_20E8B2BCC(v12, (uint64_t)__p, a2);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    v7 = a3[1];
    if (v7 < a3[2])
    {
      if (SHIBYTE(v11) < 0)
      {
        sub_20E860C04((_BYTE *)a3[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v5 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v11;
        *(_OWORD *)v7 = v5;
      }
      a3[1] = v7 + 24;
      a3[1] = v7 + 24;
    }
    else
    {
      a3[1] = sub_20E8ADE68(a3, (__int128 *)__p);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[2] = v8;
  v12[3] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v14);
}

void sub_20E8C80A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_20E8C80D4(int a1, uint64_t a2)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_254A5A888);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A888))
  {
    sub_20E863438((uint64_t)&unk_254A5AAB0);
    __cxa_atexit((void (*)(void *))sub_20E863784, &unk_254A5AAB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A888);
  }
  if (byte_254A5AB1F < 0)
    operator delete((void *)qword_254A5AB08);
  qword_254A5AB08 = 0;
  byte_254A5AB1F = 0;
  sub_20E8B469C((uint64_t)&unk_254A5AAC8);
  if (a1)
    return (void *)a2;
  else
    return &unk_254A5AAC0;
}

void sub_20E8C8188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A888);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8C81A0(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_20E8C821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C8230(_QWORD *a1, const char *a2, uint64_t a3, const char *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_20E86A980(a1, (uint64_t)"tlog::Configurator (line ", 25);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20E86A980(v6, (uint64_t)"): ", 3);
  v8 = sub_20E86A980(v7, (uint64_t)"Invalid expression (unknown left identificator ", 47);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "{empty string}";
  }
  else if (!a2[23])
  {
    a2 = "{empty string}";
  }
  v9 = strlen(a2);
  v10 = sub_20E86A980(v8, (uint64_t)a2, v9);
  v11 = sub_20E86A980(v10, (uint64_t)") ", 2);
  if (!a4)
    a4 = "";
  v12 = strlen(a4);
  v13 = sub_20E86A980(v11, (uint64_t)a4, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20E8C837C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C8390(_QWORD *a1, const char *a2, uint64_t a3, const char *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_20E86A980(a1, (uint64_t)"tlog::Configurator (line ", 25);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20E86A980(v6, (uint64_t)"): ", 3);
  v8 = sub_20E86A980(v7, (uint64_t)"Invalid expression (unknown right identificator ", 48);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "{empty string}";
  }
  else if (!a2[23])
  {
    a2 = "{empty string}";
  }
  v9 = strlen(a2);
  v10 = sub_20E86A980(v8, (uint64_t)a2, v9);
  v11 = sub_20E86A980(v10, (uint64_t)") ", 2);
  if (!a4)
    a4 = "";
  v12 = strlen(a4);
  v13 = sub_20E86A980(v11, (uint64_t)a4, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20E8C84DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C84F0(std::string *this, uint64_t *a2)
{
  std::string *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 0;
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    v4 = this;
  }
  v5 = 0;
  v4->__r_.__value_.__s.__data_[0] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 3) >= 3)
  {
    v5 = 0;
    v8 = 2;
    v9 = 1;
    do
    {
      v13 = (uint64_t *)(v6 + 24 * v8);
      v14 = *((char *)v13 + 23);
      if (v14 < 0)
      {
        v15 = v13[1];
        if (v15)
        {
          v13 = (uint64_t *)*v13;
LABEL_19:
          v16 = 0;
          while (1)
          {
            v17 = *((unsigned __int8 *)v13 + v16);
            if (v17 > 0x3F || ((1 << v17) & 0x100002200) == 0)
              break;
            if (v15 == ++v16)
              goto LABEL_13;
          }
          if (v16 != -1)
          {
            if ((v9 & 1) == 0)
            {
              std::string::append(this, ".", 1uLL);
              v6 = *a2;
              LOBYTE(v14) = *(_BYTE *)(*a2 + 24 * v8 + 23);
            }
            v10 = v6 + 24 * v8;
            if ((v14 & 0x80u) == 0)
              v11 = (const std::string::value_type *)v10;
            else
              v11 = *(const std::string::value_type **)v10;
            if ((v14 & 0x80u) == 0)
              v12 = v14;
            else
              v12 = *(_QWORD *)(v10 + 8);
            std::string::append(this, v11, v12);
            v9 = 0;
            v6 = *a2;
            v7 = a2[1];
            v5 = 1;
          }
        }
      }
      else if (*((_BYTE *)v13 + 23))
      {
        v15 = *((unsigned __int8 *)v13 + 23);
        goto LABEL_19;
      }
LABEL_13:
      ++v8;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
  return v5 & 1;
}

uint64_t sub_20E8C865C(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  __darwin_ct_rune_t v21;
  __darwin_ct_rune_t v22;
  __darwin_ct_rune_t v23;
  void **v24;
  int v25;
  unint64_t v26;
  size_t v27;
  size_t v29;
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  int v40;
  unint64_t v41;
  const void *v42;
  size_t v43;
  __int128 v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void **v48;
  void *v49;
  std::string v51;
  __int128 __p;
  unint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  int *v56;
  std::__shared_weak_count *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  std::string v61;

  *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
  v61.__r_.__value_.__s.__data_[0] = 0;
  v10 = *a3;
  v11 = *(unsigned __int8 *)(*a3 + 47);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(*a3 + 32);
  if (v11 == 6)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v14 = v10 + 24;
    v15 = v16;
    v17 = (char *)(v12 >= 0 ? v14 : v15);
    v18 = __tolower(*v17);
    if (v18 == __tolower(108))
    {
      v19 = __tolower(v17[1]);
      if (v19 == __tolower(111))
      {
        v20 = __tolower(v17[2]);
        if (v20 == __tolower(103))
        {
          v21 = __tolower(v17[3]);
          if (v21 == __tolower(103))
          {
            v22 = __tolower(v17[4]);
            if (v22 == __tolower(101))
            {
              v23 = __tolower(v17[5]);
              if (v23 == __tolower(114))
                sub_20E8C84F0(&v61, a3);
            }
          }
        }
      }
    }
  }
  sub_20E8C7960(a5, (uint64_t)&v51);
  if (a5[23] < 0)
    operator delete(*(void **)a5);
  *(std::string *)a5 = v51;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  sub_20E8C7F60((__int128 *)a5, 0x2Cu, (uint64_t *)&v58);
  v24 = (void **)v58;
  if (v58 == v59)
  {
    v34 = 0;
    if (v58)
      goto LABEL_95;
    goto LABEL_102;
  }
  v25 = *((char *)v58 + 23);
  if (v25 >= 0)
    v26 = *((unsigned __int8 *)v58 + 23);
  else
    v26 = *((_QWORD *)v58 + 1);
  if (v25 < 0)
    v24 = *(void ***)v58;
  if (v26 >= 4)
    v27 = 4;
  else
    v27 = v26;
  if (!memcmp(v24, "NONE", v27) && v26 == 4)
  {
    v32 = 0;
    v35 = 0;
  }
  else
  {
    if (v26 >= 5)
      v29 = 5;
    else
      v29 = v26;
    if (!memcmp(v24, "TRACE", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 1;
    }
    else if (!memcmp(v24, "DEBUG", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 2;
    }
    else if (!memcmp(v24, "INFO", v27) && v26 == 4)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 3;
    }
    else if (!memcmp(v24, "WARN", v27) && v26 == 4)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 4;
    }
    else if (!memcmp(v24, "ERROR", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 5;
    }
    else
    {
      if (memcmp(v24, "FATAL", v29) || v26 != 5)
      {
        v56 = 0;
        v57 = 0;
        sub_20E8C8390(a6, a5, a2, "{requires log level (NONE, TRACE, DEBUG, INFO, WARN, ERROR, FATAL) as first argument}");
        v34 = 0;
        v24 = (void **)v58;
        if (v58)
          goto LABEL_95;
        goto LABEL_102;
      }
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
      v33 = 6;
    }
    LODWORD(v32[1].__vftable) = v33;
    v35 = (int *)&v32[1];
  }
  v56 = v35;
  v57 = v32;
  v54 = *a1;
  sub_20E8C0F68(&v54, (uint64_t)&v61, (uint64_t *)&v55);
  if (v35)
    sub_20E8C3334(v55, *v35);
  else
    sub_20E8C3850(v55);
  v36 = (unint64_t *)v59;
  v37 = (unint64_t *)((char *)v58 + 24);
  if ((char *)v58 + 24 >= v59)
  {
LABEL_87:
    v34 = 1;
    if (v32)
      goto LABEL_90;
    goto LABEL_94;
  }
  v38 = a1 + 14;
  v39 = a1 + 17;
  while (1)
  {
    v40 = *((char *)v37 + 23);
    if (v40 < 0)
      break;
    if (!*((_BYTE *)v37 + 23))
      goto LABEL_89;
    v41 = *((unsigned __int8 *)v37 + 23);
    v42 = v37;
LABEL_70:
    if (v41 >= 5)
      v43 = 5;
    else
      v43 = v41;
    if (!memcmp(v42, "CLEAR", v43) && v41 == 5)
    {
      sub_20E8B19F0(v39, (void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v61);
      goto LABEL_64;
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v51, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      if ((*((_BYTE *)v37 + 23) & 0x80) == 0)
      {
LABEL_79:
        v45 = *(_OWORD *)v37;
        v53 = v37[2];
        __p = v45;
        goto LABEL_82;
      }
    }
    else
    {
      v51 = v61;
      if ((v40 & 0x80) == 0)
        goto LABEL_79;
    }
    sub_20E860C04(&__p, (void *)*v37, v37[1]);
LABEL_82:
    sub_20E8D5190(v38, (uint64_t)&v51);
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
LABEL_86:
        operator delete(v51.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_86;
    }
LABEL_64:
    v37 += 3;
    if (v37 >= v36)
      goto LABEL_87;
  }
  v41 = v37[1];
  if (v41)
  {
    v42 = (const void *)*v37;
    goto LABEL_70;
  }
LABEL_89:
  v34 = 0;
  if (v32)
  {
LABEL_90:
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_94:
  v24 = (void **)v58;
  if (v58)
  {
LABEL_95:
    v48 = (void **)v59;
    v49 = v24;
    if (v59 != (char *)v24)
    {
      do
      {
        if (*((char *)v48 - 1) < 0)
          operator delete(*(v48 - 3));
        v48 -= 3;
      }
      while (v48 != v24);
      v49 = v58;
    }
    v59 = (char *)v24;
    operator delete(v49);
  }
LABEL_102:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  return v34;
}

void sub_20E8C8C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E86665C((uint64_t)&a20);
  sub_20E89FB98(&a22);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8C8C8C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20E8C8CE4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4, _QWORD *a5, char *a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  std::string::size_type size;
  int v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_p;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  __int128 v38;
  int v39;
  size_t v40;
  int v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  std::string *v45;
  char *v46;
  std::string *v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  const std::string::value_type *v59;
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 v67;
  std::string::size_type v68;
  int v69;
  size_t v70;
  unint64_t v71;
  _BYTE *v72;
  void **v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void **v115;
  uint64_t v116;
  _BOOL8 v117;
  void *v118;
  std::string::size_type v119;
  std::string::size_type v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  std::string *v139;
  std::string::size_type v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  const std::locale::facet *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  const std::locale::facet *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  std::string *v175;
  std::string::size_type v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  const std::locale::facet *v185;
  char *v186;
  char *v187;
  char *v188;
  std::string::size_type v189;
  std::string::size_type v190;
  void *v191;
  __int128 **v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t *v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  void *v202;
  std::string::size_type v203;
  int64_t v204;
  void *__dst[2];
  int64_t v206;
  std::string v207;
  std::string v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  std::string __p;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::string v222;
  std::string v223;
  void *v224[2];
  unsigned __int8 v225;
  void *v226[2];
  char v227;
  char *v228;
  char *v229;
  unint64_t v230;
  void **v231;
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  sub_20E8C7960(a6, (uint64_t)v226);
  sub_20E8CA0C0(v226, v224);
  v12 = sub_20E8D5360((_QWORD *)(a2 + 48), (uint64_t)v224);
  if (v12)
  {
    sub_20E8CA0C0(a5, &v223);
    v13 = a2 + 160;
    v14 = sub_20E8D4B64(a2 + 160, (const void **)&v223.__r_.__value_.__l.__data_);
    v199 = v12;
    v15 = (uint64_t *)(a2 + 168);
    v16 = sub_20E8C80D4(v15 != v14, a7);
    sub_20E86A980(v16, (uint64_t)"tlog::Configurator (line ", 25);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = sub_20E86A980(v17, (uint64_t)"): ", 3);
    v19 = sub_20E86A980(v18, (uint64_t)"Tried to create parameter object ", 33);
    if ((v225 & 0x80u) == 0)
      v20 = v224;
    else
      v20 = (void **)v224[0];
    if ((v225 & 0x80u) == 0)
      v21 = v225;
    else
      v21 = (uint64_t)v224[1];
    v22 = sub_20E86A980(v19, (uint64_t)v20, v21);
    sub_20E86A980(v22, (uint64_t)"But parameter object has already been created before. Second definition ignored.", 80);
    if (v15 != v14)
      goto LABEL_221;
    v194 = v13;
    v196 = v15;
    v197 = v14;
    memset(&v222, 0, sizeof(v222));
    v23 = *a4;
    v24 = a4[1];
    if (*a4 != v24)
    {
      while (1)
      {
        if (*((char *)v23 + 23) < 0)
        {
          sub_20E860C04(&v207, *(void **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v25 = *v23;
          v207.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v25;
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        else
          size = v222.__r_.__value_.__l.__size_;
        v27 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
        else
          v28 = v207.__r_.__value_.__l.__size_;
        if (size)
          v29 = v28 + 1;
        else
          v29 = v28;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v29 > 0x16)
          break;
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
        if (size)
          goto LABEL_28;
LABEL_29:
        if (v28)
        {
          if (v27 >= 0)
            v31 = &v207;
          else
            v31 = (std::string *)v207.__r_.__value_.__r.__words[0];
          memmove((char *)p_p + (size != 0), v31, v28);
        }
        p_p->__r_.__value_.__s.__data_[(size != 0) + v28] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &__p;
        else
          v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v33 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v222, (const std::string::value_type *)v32, v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_12;
LABEL_42:
          operator delete(v207.__r_.__value_.__l.__data_);
          v23 = (__int128 *)((char *)v23 + 24);
          if (v23 == v24)
            goto LABEL_148;
        }
        else
        {
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_42;
LABEL_12:
          v23 = (__int128 *)((char *)v23 + 24);
          if (v23 == v24)
            goto LABEL_148;
        }
      }
      v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v34 = v29 | 7;
      v35 = v34 + 1;
      p_p = (std::string *)operator new(v34 + 1);
      __p.__r_.__value_.__l.__size_ = v29;
      __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      if (!size)
        goto LABEL_29;
LABEL_28:
      memcpy(p_p, ".", size != 0);
      goto LABEL_29;
    }
LABEL_148:
    v82 = (uint64_t *)v199[8];
    if (!v82)
    {
      v231 = 0;
      goto LABEL_327;
    }
    if (v82 == v199 + 5)
    {
      v231 = (void **)&v228;
      (*(void (**)(uint64_t *, char **))(*v82 + 24))(v82, &v228);
      v83 = (uint64_t)v231;
      v15 = v196;
      v14 = v197;
      v84 = v194;
      if (!v231)
        goto LABEL_327;
    }
    else
    {
      v83 = (*(uint64_t (**)(uint64_t *))(*v82 + 16))(v82);
      v231 = (void **)v83;
      v15 = v196;
      v14 = v197;
      v84 = v194;
      if (!v83)
LABEL_327:
        sub_20E86D37C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 48))(&v215);
    v86 = *(_QWORD *)(a3 + 24);
    v85 = *(std::__shared_weak_count **)(a3 + 32);
    v213 = v86;
    v214 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v88 = __ldxr(p_shared_owners);
      while (__stxr(v88 + 1, p_shared_owners));
    }
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__p, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
    else
      __p = v222;
    v218 = v215;
    v219 = v216;
    if (v216)
    {
      v89 = (unint64_t *)&v216->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v220 = v86;
    v221 = v85;
    if (!v85)
      goto LABEL_167;
    v91 = (unint64_t *)&v85->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    do
      v93 = __ldaxr(v91);
    while (__stlxr(v93 - 1, v91));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      v94 = v216;
      if (!v216)
        goto LABEL_171;
    }
    else
    {
LABEL_167:
      v94 = v216;
      if (!v216)
        goto LABEL_171;
    }
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
      if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_172;
      goto LABEL_178;
    }
LABEL_171:
    if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_172:
      v207 = v223;
      goto LABEL_179;
    }
LABEL_178:
    sub_20E860C04(&v207, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
LABEL_179:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&v208, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v208 = __p;
    v209 = v218;
    v210 = v219;
    if (v219)
    {
      v99 = (unint64_t *)&v219->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v211 = v220;
    v212 = v221;
    if (v221)
    {
      v101 = (unint64_t *)&v221->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    sub_20E8D558C(v84, (const void **)&v207.__r_.__value_.__l.__data_, (uint64_t)&v207);
    v103 = v212;
    if (v212)
    {
      v104 = (unint64_t *)&v212->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = v210;
    if (!v210)
      goto LABEL_197;
    v107 = (unint64_t *)&v210->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
      if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_198:
        if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_199;
        goto LABEL_203;
      }
    }
    else
    {
LABEL_197:
      if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_198;
    }
    operator delete(v208.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_199:
      v109 = v221;
      if (!v221)
        goto LABEL_208;
LABEL_204:
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
LABEL_208:
      v112 = v219;
      if (!v219)
        goto LABEL_212;
      v113 = (unint64_t *)&v219->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_213:
          v115 = v231;
          if (v231 != (void **)&v228)
          {
LABEL_214:
            if (!v115)
              goto LABEL_220;
            v116 = 5;
LABEL_219:
            (*((void (**)(void))*v115 + v116))();
LABEL_220:
            if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v222.__r_.__value_.__l.__data_);
              v117 = v15 == v14;
              if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_317;
LABEL_222:
              v118 = (void *)v223.__r_.__value_.__r.__words[0];
              goto LABEL_316;
            }
LABEL_221:
            v117 = v15 == v14;
            if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_317;
            goto LABEL_222;
          }
LABEL_218:
          v116 = 4;
          v115 = (void **)&v228;
          goto LABEL_219;
        }
      }
      else
      {
LABEL_212:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_213;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v115 = v231;
      if (v231 != (void **)&v228)
        goto LABEL_214;
      goto LABEL_218;
    }
LABEL_203:
    operator delete(v207.__r_.__value_.__l.__data_);
    v109 = v221;
    if (!v221)
      goto LABEL_208;
    goto LABEL_204;
  }
  v193 = a4;
  sub_20E8CA0C0(a5, &v207);
  v195 = a5;
  v198 = a6;
  v200 = a7;
  memset(&__p, 0, sizeof(__p));
  sub_20E8C7F60((__int128 *)&v207, 0x2Eu, (uint64_t *)&__p);
  v228 = 0;
  v229 = 0;
  v230 = 0;
  *((_BYTE *)&v223.__r_.__value_.__s + 23) = 0;
  v223.__r_.__value_.__s.__data_[0] = 0;
  v37 = __p.__r_.__value_.__l.__size_;
  v36 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    goto LABEL_107;
  do
  {
    while (1)
    {
      if (*(char *)(v36 + 23) < 0)
      {
        sub_20E860C04(&v222, *(void **)v36, *(_QWORD *)(v36 + 8));
      }
      else
      {
        v38 = *(_OWORD *)v36;
        v222.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v38;
      }
      v39 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      else
        v40 = v223.__r_.__value_.__l.__size_;
      v41 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v42 = v222.__r_.__value_.__l.__size_;
      v43 = v42 + v40;
      if (v42 + v40 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v43 <= 0x16)
      {
        __dst[1] = 0;
        v206 = 0;
        __dst[0] = 0;
        v44 = (char *)__dst;
        HIBYTE(v206) = v42 + v40;
        if (!v40)
          goto LABEL_68;
LABEL_64:
        if (v39 >= 0)
          v45 = &v223;
        else
          v45 = (std::string *)v223.__r_.__value_.__r.__words[0];
        memmove(v44, v45, v40);
        goto LABEL_68;
      }
      v50 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v50 = v43 | 7;
      v51 = v50 + 1;
      v44 = (char *)operator new(v50 + 1);
      __dst[1] = (void *)(v42 + v40);
      v206 = v51 | 0x8000000000000000;
      __dst[0] = v44;
      if (v40)
        goto LABEL_64;
LABEL_68:
      v46 = &v44[v40];
      if (v42)
      {
        if (v41 >= 0)
          v47 = &v222;
        else
          v47 = (std::string *)v222.__r_.__value_.__r.__words[0];
        memmove(v46, v47, v42);
      }
      v46[v42] = 0;
      v48 = v229;
      if ((unint64_t)v229 >= v230)
      {
        v229 = sub_20E8780F0((void **)&v228, (uint64_t)__dst);
        if (SHIBYTE(v206) < 0)
          operator delete(__dst[0]);
      }
      else
      {
        v49 = *(_OWORD *)__dst;
        *((_QWORD *)v229 + 2) = v206;
        *v48 = v49;
        v229 = (char *)v48 + 24;
      }
      v52 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v53 = v222.__r_.__value_.__l.__size_;
      v54 = v53 + 1;
      if (v53 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v54 >= 0x17)
      {
        v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v56 = v54 | 7;
        v57 = v56 + 1;
        v55 = (char *)operator new(v56 + 1);
        __dst[1] = (void *)(v53 + 1);
        v206 = v57 | 0x8000000000000000;
        __dst[0] = v55;
      }
      else
      {
        __dst[1] = 0;
        v206 = 0;
        __dst[0] = 0;
        v55 = (char *)__dst;
        HIBYTE(v206) = v53 + 1;
        if (!v53)
          goto LABEL_95;
      }
      v58 = v52 >= 0 ? &v222 : (std::string *)v222.__r_.__value_.__r.__words[0];
      memmove(v55, v58, v53);
LABEL_95:
      *(_WORD *)&v55[v53] = 46;
      v59 = v206 >= 0 ? (const std::string::value_type *)__dst : (const std::string::value_type *)__dst[0];
      v60 = v206 >= 0 ? (void *)HIBYTE(v206) : __dst[1];
      std::string::append(&v223, v59, (std::string::size_type)v60);
      if ((SHIBYTE(v206) & 0x80000000) == 0)
        break;
      operator delete(__dst[0]);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_103;
LABEL_51:
      v36 += 24;
      if (v36 == v37)
        goto LABEL_104;
    }
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_103:
    operator delete(v222.__r_.__value_.__l.__data_);
    v36 += 24;
  }
  while (v36 != v37);
LABEL_104:
  v62 = v228;
  v61 = v229;
  if (v229 == v228)
  {
LABEL_107:
    memset(&v222, 0, sizeof(v222));
    v65 = *v193;
    v66 = v193[1];
    if (*v193 == v66)
    {
LABEL_146:
      v78 = v200;
      v79 = (uint64_t)v198;
      v80 = (*(uint64_t (**)(_QWORD, std::string *, char *, uint64_t))(**(_QWORD **)(a3 + 24) + 16))(*(_QWORD *)(a3 + 24), &v222, v198, v200);
      v81 = (uint64_t)v195;
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
      goto LABEL_266;
    }
    while (1)
    {
      if (*((char *)v65 + 23) < 0)
      {
        sub_20E860C04(__dst, *(void **)v65, *((_QWORD *)v65 + 1));
      }
      else
      {
        v67 = *v65;
        v206 = *((_QWORD *)v65 + 2);
        *(_OWORD *)__dst = v67;
      }
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v68 = v222.__r_.__value_.__l.__size_;
      v69 = SHIBYTE(v206);
      if (v206 >= 0)
        v70 = HIBYTE(v206);
      else
        v70 = (size_t)__dst[1];
      if (v68)
        v71 = v70 + 1;
      else
        v71 = v70;
      if (v71 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v71 > 0x16)
        break;
      v203 = 0;
      v204 = 0;
      v202 = 0;
      v72 = &v202;
      HIBYTE(v204) = v71;
      if (v68)
        goto LABEL_126;
LABEL_127:
      if (v70)
      {
        if (v69 >= 0)
          v73 = __dst;
        else
          v73 = (void **)__dst[0];
        memmove(&v72[v68 != 0], v73, v70);
      }
      v72[(v68 != 0) + v70] = 0;
      if (v204 >= 0)
        v74 = (const std::string::value_type *)&v202;
      else
        v74 = (const std::string::value_type *)v202;
      if (v204 >= 0)
        v75 = HIBYTE(v204);
      else
        v75 = v203;
      std::string::append(&v222, v74, v75);
      if (SHIBYTE(v204) < 0)
      {
        operator delete(v202);
        if ((SHIBYTE(v206) & 0x80000000) == 0)
          goto LABEL_110;
LABEL_140:
        operator delete(__dst[0]);
        v65 = (__int128 *)((char *)v65 + 24);
        if (v65 == v66)
          goto LABEL_146;
      }
      else
      {
        if (SHIBYTE(v206) < 0)
          goto LABEL_140;
LABEL_110:
        v65 = (__int128 *)((char *)v65 + 24);
        if (v65 == v66)
          goto LABEL_146;
      }
    }
    v76 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v76 = v71 | 7;
    v77 = v76 + 1;
    v72 = operator new(v76 + 1);
    v203 = v71;
    v204 = v77 | 0x8000000000000000;
    v202 = v72;
    if (!v68)
      goto LABEL_127;
LABEL_126:
    memcpy(v72, ".", v68 != 0);
    goto LABEL_127;
  }
  while (1)
  {
    v63 = v61 - 24;
    v64 = sub_20E8D4B64(a2 + 160, (const void **)v61 - 3);
    if ((uint64_t *)(a2 + 168) != v64)
      break;
    v61 -= 24;
    if (v63 == v62)
      goto LABEL_107;
  }
  v97 = v64[10];
  if (*(v61 - 1) < 0)
    v98 = *((_QWORD *)v61 - 2);
  else
    v98 = *(v61 - 1);
  v119 = v98 + 1;
  v120 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v121 = v207.__r_.__value_.__l.__size_;
  v122 = v121 + ~v98;
  v78 = v200;
  if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v119 <= HIBYTE(v207.__r_.__value_.__r.__words[2]))
    {
      v123 = &v207;
      goto LABEL_234;
    }
LABEL_328:
    sub_20E89FD0C();
  }
  v120 = v207.__r_.__value_.__l.__size_;
  if (v207.__r_.__value_.__l.__size_ < v119)
    goto LABEL_328;
  v123 = (std::string *)v207.__r_.__value_.__r.__words[0];
LABEL_234:
  v124 = v120 - v119;
  if (v124 >= v122)
    v125 = v122;
  else
    v125 = v124;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v125 >= 0x17)
  {
    v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v127 = v125 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v222.__r_.__value_.__l.__size_ = v125;
    v222.__r_.__value_.__r.__words[2] = v128 | 0x8000000000000000;
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    goto LABEL_244;
  }
  *((_BYTE *)&v222.__r_.__value_.__s + 23) = v125;
  v126 = &v222;
  if (v125)
LABEL_244:
    memmove(v126, (char *)v123 + v119, v125);
  *((_BYTE *)v126 + v125) = 0;
  v79 = (uint64_t)v198;
  v80 = (*(uint64_t (**)(uint64_t, std::string *, char *, uint64_t))(*(_QWORD *)v97 + 16))(v97, &v222, v198, v200);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  v129 = sub_20E8C80D4(v80 == 3, v200);
  sub_20E86A980(v129, (uint64_t)"tlog::Configurator (line ", 25);
  v130 = (_QWORD *)std::ostream::operator<<();
  v131 = sub_20E86A980(v130, (uint64_t)"): ", 3);
  v132 = sub_20E86A980(v131, (uint64_t)"Invalid expression (invalid component '", 39);
  v133 = v198[23];
  if (v133 >= 0)
    v134 = (uint64_t)v198;
  else
    v134 = *(_QWORD *)v198;
  if (v133 >= 0)
    v135 = v198[23];
  else
    v135 = *((_QWORD *)v198 + 1);
  v136 = sub_20E86A980(v132, v134, v135);
  v137 = sub_20E86A980(v136, (uint64_t)"'", 1);
  v138 = sub_20E86A980(v137, (uint64_t)"' for parameter ", 16);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v139 = &v207;
  else
    v139 = (std::string *)v207.__r_.__value_.__r.__words[0];
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v140 = v207.__r_.__value_.__l.__size_;
  v141 = sub_20E86A980(v138, (uint64_t)v139, v140);
  v142 = sub_20E86A980(v141, (uint64_t)" of configurator of type ", 25);
  v143 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v144 = *(char *)(v143 + 23);
  if (v144 >= 0)
    v145 = v143;
  else
    v145 = *(_QWORD *)v143;
  if (v144 >= 0)
    v146 = *(unsigned __int8 *)(v143 + 23);
  else
    v146 = *(_QWORD *)(v143 + 8);
  v147 = sub_20E86A980(v142, v145, v146);
  v148 = sub_20E86A980(v147, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v148 + *(_QWORD *)(*v148 - 24)));
  v149 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v149->__vftable[2].~facet_0)(v149, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  v81 = (uint64_t)v195;
  std::ostream::flush();
LABEL_266:
  v150 = sub_20E8C80D4(v80 == 1, v78);
  sub_20E86A980(v150, (uint64_t)"tlog::Configurator (line ", 25);
  v151 = (_QWORD *)std::ostream::operator<<();
  v152 = sub_20E86A980(v151, (uint64_t)"): ", 3);
  v153 = sub_20E86A980(v152, (uint64_t)"Invalid expression (unknown parameter ", 38);
  v154 = *(char *)(v81 + 23);
  if (v154 >= 0)
    v155 = v81;
  else
    v155 = *(_QWORD *)v81;
  if (v154 >= 0)
    v156 = *(unsigned __int8 *)(v81 + 23);
  else
    v156 = *(_QWORD *)(v81 + 8);
  v157 = sub_20E86A980(v153, v155, v156);
  v158 = sub_20E86A980(v157, (uint64_t)"' for configurator of type ", 27);
  v159 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v160 = *(char *)(v159 + 23);
  if (v160 >= 0)
    v161 = v159;
  else
    v161 = *(_QWORD *)v159;
  if (v160 >= 0)
    v162 = *(unsigned __int8 *)(v159 + 23);
  else
    v162 = *(_QWORD *)(v159 + 8);
  v163 = sub_20E86A980(v158, v161, v162);
  v164 = sub_20E86A980(v163, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
  v165 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  std::ostream::flush();
  v166 = sub_20E8C80D4(v80 == 2, v78);
  sub_20E86A980(v166, (uint64_t)"tlog::Configurator (line ", 25);
  v167 = (_QWORD *)std::ostream::operator<<();
  v168 = sub_20E86A980(v167, (uint64_t)"): ", 3);
  v169 = sub_20E86A980(v168, (uint64_t)"Invalid expression (invalid parameter value '", 45);
  v170 = *(char *)(v79 + 23);
  if (v170 >= 0)
    v171 = v79;
  else
    v171 = *(_QWORD *)v79;
  if (v170 >= 0)
    v172 = *(unsigned __int8 *)(v79 + 23);
  else
    v172 = *(_QWORD *)(v79 + 8);
  v173 = sub_20E86A980(v169, v171, v172);
  v174 = sub_20E86A980(v173, (uint64_t)"' for parameter ", 16);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v175 = &v207;
  else
    v175 = (std::string *)v207.__r_.__value_.__r.__words[0];
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v176 = v207.__r_.__value_.__l.__size_;
  v177 = sub_20E86A980(v174, (uint64_t)v175, v176);
  v178 = sub_20E86A980(v177, (uint64_t)" of configurator of type ", 25);
  v179 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v180 = *(char *)(v179 + 23);
  if (v180 >= 0)
    v181 = v179;
  else
    v181 = *(_QWORD *)v179;
  if (v180 >= 0)
    v182 = *(unsigned __int8 *)(v179 + 23);
  else
    v182 = *(_QWORD *)(v179 + 8);
  v183 = sub_20E86A980(v178, v181, v182);
  v184 = sub_20E86A980(v183, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v184 + *(_QWORD *)(*v184 - 24)));
  v185 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v185->__vftable[2].~facet_0)(v185, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  std::ostream::flush();
  v117 = v80 == 0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v186 = v228;
  if (v228)
  {
    v187 = v229;
    v188 = v228;
    if (v229 != v228)
    {
      do
      {
        if (*(v187 - 1) < 0)
          operator delete(*((void **)v187 - 3));
        v187 -= 24;
      }
      while (v187 != v186);
      v188 = v228;
    }
    v229 = v186;
    operator delete(v188);
  }
  v189 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v190 = __p.__r_.__value_.__l.__size_;
    v191 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v190 - 1) < 0)
          operator delete(*(void **)(v190 - 24));
        v190 -= 24;
      }
      while (v190 != v189);
      v191 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v189;
    operator delete(v191);
  }
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
  {
    v118 = (void *)v207.__r_.__value_.__r.__words[0];
LABEL_316:
    operator delete(v118);
  }
LABEL_317:
  if ((char)v225 < 0)
  {
    operator delete(v224[0]);
    if ((v227 & 0x80000000) == 0)
      return v117;
LABEL_321:
    operator delete(v226[0]);
    return v117;
  }
  if (v227 < 0)
    goto LABEL_321;
  return v117;
}

void sub_20E8C9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 217) < 0)
  {
    operator delete(*(void **)(v51 - 240));
    if ((*(char *)(v51 - 185) & 0x80000000) == 0)
    {
LABEL_4:
      sub_20E89FB98((void **)(v51 - 136));
      sub_20E89FB98(&a46);
      if (a34 < 0)
        operator delete(__p);
      if (*(char *)(v51 - 161) < 0)
        operator delete(*(void **)(v51 - 184));
      if (*(char *)(v51 - 137) < 0)
        operator delete(*(void **)(v51 - 160));
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v51 - 185) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v51 - 208));
  goto LABEL_4;
}

void sub_20E8CA090()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    JUMPOUT(0x20E8CA07CLL);
  JUMPOUT(0x20E8CA01CLL);
}

void sub_20E8CA0A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    JUMPOUT(0x20E8CA07CLL);
  JUMPOUT(0x20E8CA01CLL);
}

_QWORD *sub_20E8CA0C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  _QWORD *v15;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v4 = result[1];
  if ((v3 & 0x80u) == 0)
    v6 = result;
  else
    v6 = (_QWORD *)*result;
  if ((v3 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)result + 23);
  else
    v7 = result[1];
  if (v7 < 5)
    goto LABEL_52;
  v8 = result;
  v9 = (char *)v6 + v7;
  v10 = v7;
  result = v6;
  while (1)
  {
    result = memchr(result, 116, v10 - 4);
    if (!result)
      goto LABEL_21;
    if (*(_DWORD *)result == 1735355508 && *((_BYTE *)result + 4) == 46)
      break;
    result = (_QWORD *)((char *)result + 1);
    v10 = v9 - (_BYTE *)result;
    if (v9 - (_BYTE *)result < 5)
      goto LABEL_21;
  }
  if (result != (_QWORD *)v9 && result == v6)
  {
    if ((v3 & 0x80) != 0)
    {
      if (v4 < 5)
        goto LABEL_80;
    }
    else
    {
      v4 = v3;
      v5 = v8;
      if (v3 <= 4)
        goto LABEL_80;
    }
    v17 = v4 - 5;
    if (v4 - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v17 >= 0x17)
      {
        v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v19 = v17 | 7;
        v20 = v19 + 1;
        v21 = operator new(v19 + 1);
        a2[1] = v17;
        a2[2] = v20 | 0x8000000000000000;
        *a2 = v21;
        a2 = v21;
        v18 = (char *)v5 + 5;
        goto LABEL_78;
      }
      *((_BYTE *)a2 + 23) = v17;
      if (v4 != 5)
      {
        v18 = (char *)v5 + 5;
LABEL_78:
        result = memmove(a2, v18, v17);
        goto LABEL_79;
      }
      goto LABEL_79;
    }
LABEL_81:
    sub_20E860B7C();
  }
LABEL_21:
  if (v7 < 17)
    goto LABEL_38;
  v12 = v7;
  result = v6;
  while (1)
  {
    result = memchr(result, 111, v12 - 16);
    if (!result)
      goto LABEL_38;
    v13 = *result == 0x636170612E67726FLL && result[1] == 0x6A34676F6C2E6568;
    if (v13 && *((_BYTE *)result + 16) == 46)
      break;
    result = (_QWORD *)((char *)result + 1);
    v12 = v9 - (_BYTE *)result;
    if (v9 - (_BYTE *)result < 17)
      goto LABEL_38;
  }
  if (result == (_QWORD *)v9 || result != v6)
  {
LABEL_38:
    if (v7 >= 6)
    {
      result = v6;
      while (1)
      {
        result = memchr(result, 108, v7 - 5);
        if (!result)
          goto LABEL_52;
        if (*(_DWORD *)result == 879193964 && *((_WORD *)result + 2) == 11882)
          break;
        result = (_QWORD *)((char *)result + 1);
        v7 = v9 - (_BYTE *)result;
        if (v9 - (_BYTE *)result < 6)
          goto LABEL_52;
      }
      if (result != (_QWORD *)v9 && result == v6)
      {
        if ((v3 & 0x80) != 0)
        {
          if (v4 < 6)
            goto LABEL_80;
        }
        else
        {
          v4 = v3;
          v5 = v8;
          if (v3 <= 5)
LABEL_80:
            sub_20E89FD0C();
        }
        v17 = v4 - 6;
        if (v4 - 6 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v17 >= 0x17)
          {
            v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v25 = v17 | 7;
            v26 = v25 + 1;
            v27 = operator new(v25 + 1);
            a2[1] = v17;
            a2[2] = v26 | 0x8000000000000000;
            *a2 = v27;
            a2 = v27;
          }
          else
          {
            *((_BYTE *)a2 + 23) = v17;
            if (v4 == 6)
              goto LABEL_79;
          }
          v18 = (char *)v5 + 6;
          goto LABEL_78;
        }
        goto LABEL_81;
      }
    }
LABEL_52:
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    return result;
  }
  if ((v3 & 0x80) != 0)
  {
    v15 = v5;
    if (v4 < 0x11)
      goto LABEL_80;
  }
  else
  {
    v4 = v3;
    v15 = v8;
    if (v3 <= 0x10)
      goto LABEL_80;
  }
  v17 = v4 - 17;
  if (v4 - 17 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a2[1] = v17;
    a2[2] = v23 | 0x8000000000000000;
    *a2 = v24;
    a2 = v24;
    v18 = (char *)v15 + 17;
    goto LABEL_78;
  }
  *((_BYTE *)a2 + 23) = v17;
  if (v4 != 17)
  {
    v18 = (char *)v15 + 17;
    goto LABEL_78;
  }
LABEL_79:
  *((_BYTE *)a2 + v17) = 0;
  return result;
}

uint64_t sub_20E8CA434(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8CA508(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20E8CA5C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  int v44;
  void **v45;
  void **v46;
  void *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char v50;
  char v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void *v74[2];
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  char v83;
  void *__p[2];
  uint64_t v85;
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  v10 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 3) <= 2)
  {
    sub_20E8C8230(a6, (const char *)a4, a2, "{unespected end after appender}");
    return 0;
  }
  if (*(char *)(v9 + 71) < 0)
  {
    sub_20E860C04(__p, *(void **)(v9 + 48), *(_QWORD *)(v9 + 56));
    if (a3[1] - *a3 == 72)
    {
LABEL_5:
      sub_20E8C7960((char *)a5, (uint64_t)v82);
      sub_20E8CA0C0(v82, v80);
      v15 = sub_20E8D5900((_QWORD *)(a1 + 8), (uint64_t)v80);
      v16 = sub_20E8C80D4(v15 == 0, (uint64_t)a6);
      sub_20E86A980(v16, (uint64_t)"tlog::Configurator (line ", 25);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_20E86A980(v17, (uint64_t)"): ", 3);
      v19 = sub_20E86A980(v18, (uint64_t)"Invalid expression: Unknown appender '", 38);
      if ((v81 & 0x80u) == 0)
        v20 = v80;
      else
        v20 = (void **)v80[0];
      if ((v81 & 0x80u) == 0)
        v21 = v81;
      else
        v21 = (uint64_t)v80[1];
      v22 = sub_20E86A980(v19, (uint64_t)v20, v21);
      v23 = sub_20E86A980(v22, (uint64_t)"'(", 2);
      v24 = *(char *)(a5 + 23);
      if (v24 >= 0)
        v25 = a5;
      else
        v25 = *(_QWORD *)a5;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a5 + 23);
      else
        v26 = *(_QWORD *)(a5 + 8);
      v27 = sub_20E86A980(v23, v25, v26);
      v28 = sub_20E86A980(v27, (uint64_t)") ", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v29 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)v74);
      std::ostream::put();
      std::ostream::flush();
      if (!v15)
      {
        v44 = 1;
        goto LABEL_81;
      }
      v30 = (uint64_t *)v15[8];
      if (!v30)
      {
        v87 = 0;
        goto LABEL_92;
      }
      if (v30 == v15 + 5)
      {
        v87 = v86;
        (*(void (**)(uint64_t *, _BYTE *))(*v30 + 24))(v30, v86);
        v31 = (uint64_t)v87;
        if (!v87)
          goto LABEL_92;
      }
      else
      {
        v31 = (*(uint64_t (**)(uint64_t *))(*v30 + 16))(v30);
        v87 = (_BYTE *)v31;
        if (!v31)
LABEL_92:
          sub_20E86D37C();
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 48))(&v78);
      if (SHIBYTE(v85) < 0)
      {
        sub_20E860C04(v74, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v74 = *(_OWORD *)__p;
        v75 = v85;
      }
      v76 = v78;
      v77 = v79;
      if (v79)
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
      }
      sub_20E8D5B2C((uint64_t **)(a1 + 88), (const void **)v74, (uint64_t)v74);
      v51 = v50;
      v52 = v77;
      if (v77)
      {
        v53 = (unint64_t *)&v77->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (SHIBYTE(v75) < 0)
      {
        operator delete(v74[0]);
        if ((v51 & 1) == 0)
        {
LABEL_56:
          sub_20E86A980(a6, (uint64_t)"tlog::Configurator (line ", 25);
          v55 = (_QWORD *)std::ostream::operator<<();
          v56 = sub_20E86A980(v55, (uint64_t)"): ", 3);
          v57 = sub_20E86A980(v56, (uint64_t)"Invalid expression (console appender ", 37);
          v58 = *(char *)(a5 + 23);
          if (v58 >= 0)
            v59 = a5;
          else
            v59 = *(_QWORD *)a5;
          if (v58 >= 0)
            v60 = *(unsigned __int8 *)(a5 + 23);
          else
            v60 = *(_QWORD *)(a5 + 8);
          v61 = sub_20E86A980(v57, v59, v60);
          v62 = sub_20E86A980(v61, (uint64_t)") with ID '", 11);
          if (v85 >= 0)
            v63 = __p;
          else
            v63 = (void **)__p[0];
          if (v85 >= 0)
            v64 = HIBYTE(v85);
          else
            v64 = (uint64_t)__p[1];
          v65 = sub_20E86A980(v62, (uint64_t)v63, v64);
          v66 = sub_20E86A980(v65, (uint64_t)"' added twice", 13);
          std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
          v67 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
          std::locale::~locale((std::locale *)v74);
          std::ostream::put();
          std::ostream::flush();
          v44 = 1;
          v68 = v79;
          if (!v79)
          {
LABEL_76:
            v71 = v87;
            if (v87 == v86)
            {
              v72 = 4;
              v71 = v86;
            }
            else
            {
              if (!v87)
                goto LABEL_81;
              v72 = 5;
            }
            (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_81:
            if ((char)v81 < 0)
            {
              operator delete(v80[0]);
              if ((v83 & 0x80000000) == 0)
                goto LABEL_83;
            }
            else if ((v83 & 0x80000000) == 0)
            {
LABEL_83:
              v11 = v44 == 0;
LABEL_84:
              if ((SHIBYTE(v85) & 0x80000000) == 0)
                return v11;
              goto LABEL_34;
            }
            operator delete(v82[0]);
            goto LABEL_83;
          }
LABEL_72:
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          goto LABEL_76;
        }
      }
      else if ((v51 & 1) == 0)
      {
        goto LABEL_56;
      }
      v44 = 0;
      v68 = v79;
      if (!v79)
        goto LABEL_76;
      goto LABEL_72;
    }
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v9 + 48);
    v85 = *(_QWORD *)(v9 + 64);
    if (v10 - v9 == 72)
      goto LABEL_5;
  }
  v32 = sub_20E8D4B64(a1 + 88, (const void **)__p);
  if ((uint64_t *)(a1 + 96) == v32)
  {
    sub_20E86A980(a6, (uint64_t)"tlog::Configurator (line ", 25);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_20E86A980(v35, (uint64_t)"): ", 3);
    v37 = sub_20E86A980(v36, (uint64_t)"Invalid expression (unknown appender ", 37);
    v38 = *(char *)(a4 + 23);
    if (v38 >= 0)
      v39 = a4;
    else
      v39 = *(_QWORD *)a4;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a4 + 23);
    else
      v40 = *(_QWORD *)(a4 + 8);
    v41 = sub_20E86A980(v37, v39, v40);
    v42 = sub_20E86A980(v41, (uint64_t)"). Add an appender before accessing its parameters.", 51);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale((std::locale *)v74);
    std::ostream::put();
    std::ostream::flush();
LABEL_33:
    v11 = 0;
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      return v11;
    goto LABEL_34;
  }
  v34 = *a3;
  v33 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v33 - *a3) >> 3) <= 3)
  {
    sub_20E8C8230(a6, (const char *)a4, a2, "{unexpected end after layout identifier}");
    goto LABEL_33;
  }
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  sub_20E8D1C10((char *)v74, v34 + 72, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - (v34 + 72)) >> 3));
  v11 = sub_20E8C8CE4(a2, a1, (uint64_t)(v32 + 4), (__int128 **)v74, (_QWORD *)a4, (char *)a5, (uint64_t)a6);
  v45 = (void **)v74[0];
  if (!v74[0])
    goto LABEL_84;
  v46 = (void **)v74[1];
  v47 = v74[0];
  if (v74[1] != v74[0])
  {
    do
    {
      if (*((char *)v46 - 1) < 0)
        operator delete(*(v46 - 3));
      v46 -= 3;
    }
    while (v46 != v45);
    v47 = v74[0];
  }
  v74[1] = v45;
  operator delete(v47);
  if (SHIBYTE(v85) < 0)
LABEL_34:
    operator delete(__p[0]);
  return v11;
}

void sub_20E8CAC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;

  sub_20E86665C((uint64_t)&a15);
  v36 = *(_QWORD **)(v34 - 80);
  if (v36 == (_QWORD *)(v34 - 104))
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 104);
  }
  else
  {
    if (!v36)
    {
      if ((a22 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_5;
    }
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
  if ((a22 & 0x80000000) == 0)
  {
LABEL_10:
    if (a28 < 0)
    {
LABEL_11:
      operator delete(a23);
      if ((a34 & 0x80000000) == 0)
LABEL_12:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a29);
      _Unwind_Resume(a1);
    }
LABEL_6:
    if ((a34 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
LABEL_5:
  operator delete(__p);
  if (a28 < 0)
    goto LABEL_11;
  goto LABEL_6;
}

uint64_t sub_20E8CADF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E8CAE78(uint64_t **a1, uint64_t a2, _BYTE **a3, _QWORD *a4)
{
  int v4;
  _BYTE *v5;
  size_t v6;
  _BYTE **v8;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v15;
  size_t v17;
  void *v18;
  _BYTE *v19;
  size_t v20;
  std::locale::__imp *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::locale::__imp *locale;
  std::locale::__imp *v36;
  unint64_t v37;
  unint64_t v38;
  std::locale::__imp *v39;
  size_t v40;
  const std::string::value_type *v41;
  size_t v42;
  int v43;
  const char *v44;
  const void *v45;
  unint64_t v46;
  unint64_t v47;
  const void *v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  const void *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  void **v66;
  size_t v67;
  int v68;
  std::locale::__imp *v69;
  std::locale::__imp *v70;
  std::locale::__imp *v71;
  std::string v72;
  std::string v73;
  void *__p[2];
  int64_t v75;
  std::locale v76[2];
  unint64_t v77;
  void *v78[2];
  unint64_t v79;
  std::locale __dst[2];
  unint64_t v81;

  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *a3;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  if (!v6)
    return 1;
  v8 = a3;
  v11 = 0;
  v12 = &v5[v6];
  while (1)
  {
    v13 = v5[v11];
    if (v13 > 0x3F || ((1 << v13) & 0x100002200) == 0)
      break;
    if (v6 == ++v11)
      return 1;
  }
  if (v11 == -1 || v5[v11] == 35)
    return 1;
  if ((uint64_t)v6 < 1)
    goto LABEL_33;
  v17 = v6;
  v18 = v5;
  while (1)
  {
    v19 = memchr(v18, 61, v17);
    if (!v19)
      goto LABEL_33;
    if (*v19 == 61)
      break;
    v18 = v19 + 1;
    v17 = v12 - (_BYTE *)v18;
    if (v12 - (_BYTE *)v18 < 1)
      goto LABEL_33;
  }
  if (v19 == v12 || (v20 = v19 - v5, v19 - v5 == -1))
  {
LABEL_33:
    sub_20E86A980(a4, (uint64_t)"tlog::Configurator (line ", 25);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = sub_20E86A980(v22, (uint64_t)"): ", 3);
    v24 = sub_20E86A980(v23, (uint64_t)"Invalid expression (has to be assignment)", 41);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  if (v6 >= v20)
    v6 = v19 - v5;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v26 = v6 | 7;
    v27 = v26 + 1;
    v21 = (std::locale::__imp *)operator new(v26 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v6;
    v81 = v27 | 0x8000000000000000;
    __dst[0].__locale_ = v21;
    goto LABEL_37;
  }
  HIBYTE(v81) = v6;
  v21 = (std::locale::__imp *)__dst;
  if (v6)
LABEL_37:
    memmove(v21, v5, v6);
  *((_BYTE *)v21 + v6) = 0;
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    v28 = *((unsigned __int8 *)v8 + 23);
    if (v20 < v28)
    {
      v29 = v28 + ~v20;
      goto LABEL_43;
    }
LABEL_130:
    sub_20E89FD0C();
  }
  v28 = (size_t)v8[1];
  if (v28 <= v20)
    goto LABEL_130;
  v29 = v28 + ~v20;
  v8 = (_BYTE **)*v8;
LABEL_43:
  v30 = v28 - (v20 + 1);
  if (v30 >= v29)
    v31 = v29;
  else
    v31 = v30;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    v78[1] = (void *)v31;
    v79 = v34 | 0x8000000000000000;
    v78[0] = v32;
    goto LABEL_53;
  }
  HIBYTE(v79) = v31;
  v32 = v78;
  if (v31)
LABEL_53:
    memmove(v32, (char *)v8 + v20 + 1, v31);
  *((_BYTE *)v32 + v31) = 0;
  sub_20E8C7960((char *)__dst, (uint64_t)v76);
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0].__locale_);
  v81 = v77;
  *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v76[0].__locale_;
  locale = (std::locale::__imp *)HIBYTE(v77);
  if ((v77 & 0x8000000000000000) != 0)
    locale = __dst[1].__locale_;
  if (locale)
  {
    v76[0].__locale_ = 0;
    v76[1].__locale_ = 0;
    v77 = 0;
    sub_20E8C7F60((__int128 *)__dst, 0x2Eu, (uint64_t *)v76);
    v36 = v76[0].__locale_;
    v37 = *((unsigned __int8 *)v76[0].__locale_ + 23);
    v38 = v37;
    v39 = v76[0].__locale_;
    if (*((char *)v76[0].__locale_ + 23) < 0)
    {
      v39 = *(std::locale::__imp **)v76[0].__locale_;
      v38 = *((_QWORD *)v76[0].__locale_ + 1);
    }
    if (v38 >= 4)
      v40 = 4;
    else
      v40 = v38;
    if (memcmp(v39, "tlog", v40) || v38 != 4)
    {
      v41 = (const std::string::value_type *)v36;
      if ((v37 & 0x80) != 0)
      {
        v41 = *(const std::string::value_type **)v36;
        v37 = *((_QWORD *)v36 + 1);
      }
      v42 = v37 >= 5 ? 5 : v37;
      v43 = memcmp(v41, "log4j", v42);
      v44 = "{unexpected token, needs to begin with tlog/log4j}";
      if (v43 || v37 != 5)
      {
LABEL_112:
        sub_20E8C8230(a4, (const char *)__dst, a2, v44);
        goto LABEL_116;
      }
    }
    if (v76[1].__locale_ != v36)
    {
      v45 = (char *)v36 + 24;
      v46 = *((unsigned __int8 *)v36 + 47);
      v47 = v46;
      v48 = (char *)v36 + 24;
      if (*((char *)v36 + 47) < 0)
      {
        v48 = (const void *)*((_QWORD *)v36 + 3);
        v47 = *((_QWORD *)v36 + 4);
      }
      if (v47 >= 0xA)
        v49 = 10;
      else
        v49 = v47;
      if (!memcmp(v48, "rootLogger", v49) && v47 == 10)
        goto LABEL_88;
      v51 = v46;
      v52 = (char *)v36 + 24;
      if ((v46 & 0x80) != 0)
      {
        v52 = (const void *)*((_QWORD *)v36 + 3);
        v51 = *((_QWORD *)v36 + 4);
      }
      v53 = v51 >= 6 ? 6 : v51;
      if (!memcmp(v52, "logger", v53) && v51 == 6)
      {
LABEL_88:
        v54 = sub_20E8C865C(a1, a2, (uint64_t *)v76, v50, (char *)v78, a4);
LABEL_89:
        v15 = v54;
        goto LABEL_117;
      }
      if ((v46 & 0x80) != 0)
      {
        v45 = (const void *)*((_QWORD *)v36 + 3);
        v46 = *((_QWORD *)v36 + 4);
      }
      if (v46 >= 8)
        v67 = 8;
      else
        v67 = v46;
      v68 = memcmp(v45, "appender", v67);
      v44 = "{unknown token after tlog}";
      if (!v68 && v46 == 8)
      {
        v54 = sub_20E8CA5C4((uint64_t)a1, a2, (uint64_t *)v76, (uint64_t)__dst, (uint64_t)v78, a4);
        goto LABEL_89;
      }
      goto LABEL_112;
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v72.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
    strcpy(v72.__r_.__value_.__l.__data_, "{unexpected end after '");
    v59 = *((char *)v36 + 23);
    if (v59 >= 0)
      v60 = (const std::string::value_type *)v36;
    else
      v60 = *(const std::string::value_type **)v36;
    if (v59 >= 0)
      v61 = *((unsigned __int8 *)v36 + 23);
    else
      v61 = *((_QWORD *)v36 + 1);
    v62 = std::string::append(&v72, v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v73, "'}", 2uLL);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v75 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (v75 >= 0)
      v66 = __p;
    else
      v66 = (void **)__p[0];
    sub_20E8C8230(a4, (const char *)__dst, a2, (const char *)v66);
    if (SHIBYTE(v75) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_102:
        if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_116:
          v15 = 0;
LABEL_117:
          v69 = v76[0].__locale_;
          if (v76[0].__locale_)
          {
            v70 = v76[1].__locale_;
            v71 = v76[0].__locale_;
            if (v76[1].__locale_ != v76[0].__locale_)
            {
              do
              {
                if (*((char *)v70 - 1) < 0)
                  operator delete(*((void **)v70 - 3));
                v70 = (std::locale::__imp *)((char *)v70 - 24);
              }
              while (v70 != v69);
              v71 = v76[0].__locale_;
            }
            v76[1].__locale_ = v69;
            operator delete(v71);
          }
          goto LABEL_125;
        }
LABEL_115:
        operator delete(v72.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
    }
    else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_102;
    }
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_115;
  }
  sub_20E86A980(a4, (uint64_t)"tlog::Configurator (line ", 25);
  v55 = (_QWORD *)std::ostream::operator<<();
  v56 = sub_20E86A980(v55, (uint64_t)"): ", 3);
  v57 = sub_20E86A980(v56, (uint64_t)"Invalid expression (left assignment empty)", 42);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  v58 = std::locale::use_facet(v76, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale(v76);
  std::ostream::put();
  std::ostream::flush();
  v15 = 0;
LABEL_125:
  if (SHIBYTE(v79) < 0)
    operator delete(v78[0]);
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0].__locale_);
  return v15;
}

void sub_20E8CB554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a28 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      if ((a15 & 0x80000000) == 0)
      {
LABEL_9:
        sub_20E89FB98((void **)&a30.__locale_);
        if (a38 < 0)
        {
          operator delete(a33);
          if ((*(char *)(v38 - 89) & 0x80000000) == 0)
            goto LABEL_11;
        }
        else if ((*(char *)(v38 - 89) & 0x80000000) == 0)
        {
LABEL_11:
          _Unwind_Resume(a1);
        }
        operator delete(*(void **)(v38 - 112));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a10);
      goto LABEL_9;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a15 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_20E8CB634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CB648(uint64_t **a1, char *__s, int *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  size_t v14;
  size_t v15;
  std::locale::__imp *p_dst;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  int v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  size_t v37;
  size_t v38;
  std::locale::__imp *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  size_t v58;
  size_t v59;
  std::locale::__imp *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  const std::locale::facet *v89;
  uint64_t v90;
  std::locale::__imp *locale;
  uint64_t v92;
  _QWORD *v93;
  size_t v94;
  _QWORD *v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  void *__p[2];
  void *v103;
  void *v104[2];
  void *v105;
  uint64_t *v106;
  __int128 v107;
  _QWORD *v108;
  __int128 v109;
  _QWORD *v110;
  std::locale __dst;
  size_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v110 = 0;
  v14 = strlen(__s);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::locale::__imp *)operator new(v17 + 1);
    v112 = v15;
    v113 = v18 | 0x8000000000000000;
    __dst.__locale_ = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v113) = v14;
  p_dst = (std::locale::__imp *)&__dst;
  if (v14)
LABEL_8:
    memcpy(p_dst, __s, v15);
  *((_BYTE *)p_dst + v15) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, _QWORD **))(*(_QWORD *)a7 + 32))(&v109, a7, &__dst, &v110);
  if (SHIBYTE(v113) < 0)
  {
    operator delete(__dst.__locale_);
    if ((_QWORD)v109)
      goto LABEL_66;
  }
  else if ((_QWORD)v109)
  {
    goto LABEL_66;
  }
  v19 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: could not open file ", 40);
  v20 = strlen(__s);
  v21 = sub_20E86A980(v19, (uint64_t)__s, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  v23 = *a3;
  if (!*a3)
    goto LABEL_91;
  if (v23 == 2)
  {
    v28 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: creating configuration file for logger name '", 65);
    v29 = *((char *)a3 + 31);
    if (v29 >= 0)
      v30 = (uint64_t)(a3 + 2);
    else
      v30 = *((_QWORD *)a3 + 1);
    if (v29 >= 0)
      v31 = *((unsigned __int8 *)a3 + 31);
    else
      v31 = *((_QWORD *)a3 + 2);
    v32 = sub_20E86A980(v28, v30, v31);
    v33 = sub_20E86A980(v32, (uint64_t)"' at ", 5);
    v34 = strlen(__s);
    v35 = sub_20E86A980(v33, (uint64_t)__s, v34);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
    v36 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
  }
  else
  {
    if (v23 != 1)
      goto LABEL_25;
    v24 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: creating example configuration file at ", 59);
    v25 = strlen(__s);
    v26 = sub_20E86A980(v24, (uint64_t)__s, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
  }
  std::ostream::flush();
LABEL_25:
  v108 = 0;
  v37 = strlen(__s);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v39 = (std::locale::__imp *)operator new(v40 + 1);
    v112 = v38;
    v113 = v41 | 0x8000000000000000;
    __dst.__locale_ = v39;
    goto LABEL_32;
  }
  HIBYTE(v113) = v37;
  v39 = (std::locale::__imp *)&__dst;
  if (v37)
LABEL_32:
    memcpy(v39, __s, v38);
  *((_BYTE *)v39 + v38) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, uint64_t, _QWORD **))(*(_QWORD *)a7 + 24))(&v107, a7, &__dst, 1, &v108);
  if (SHIBYTE(v113) < 0)
  {
    operator delete(__dst.__locale_);
    if ((_QWORD)v107)
      goto LABEL_35;
LABEL_39:
    v48 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: failed to create default configuration file at ", 67);
    v49 = strlen(__s);
    v50 = sub_20E86A980(v48, (uint64_t)__s, v49);
    v51 = sub_20E86A980(v50, (uint64_t)". File could not be opened.", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
    v52 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
    goto LABEL_40;
  }
  if (!(_QWORD)v107)
    goto LABEL_39;
LABEL_35:
  v42 = (char *)v108 + *(_QWORD *)(*v108 - 24);
  if ((v42[32] & 5) == 0)
  {
    (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v42 + 5) + 32))(&__dst, *((_QWORD *)v42 + 5), 0, 1, 16);
    if (!v114)
    {
      if (*a3 == 2)
      {
        if (*((char *)a3 + 31) < 0)
          v87 = *((_QWORD *)a3 + 2);
        else
          v87 = *((unsigned __int8 *)a3 + 31);
        v90 = (uint64_t)(a3 + 2);
        if (v87 && sub_20E8C1800((_QWORD *)a3 + 1))
        {
          v54 = (uint64_t)v108;
          sub_20E8CC5F0(v90, &__dst);
          if (v113 >= 0)
            locale = (std::locale::__imp *)&__dst;
          else
            locale = __dst.__locale_;
          if (v113 >= 0)
            v92 = HIBYTE(v113);
          else
            v92 = v112;
          sub_20E86A980((_QWORD *)v54, (uint64_t)locale, v92);
          if (SHIBYTE(v113) < 0)
          {
            operator delete(__dst.__locale_);
            v53 = 1;
            goto LABEL_41;
          }
          goto LABEL_107;
        }
        v93 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: failed to generate default configuration file at ", 69);
        v94 = strlen(__s);
        v95 = sub_20E86A980(v93, (uint64_t)__s, v94);
        v96 = sub_20E86A980(v95, (uint64_t)". Invalid default logger name '", 31);
        v97 = *((char *)a3 + 31);
        if (v97 >= 0)
          v98 = (uint64_t)(a3 + 2);
        else
          v98 = *((_QWORD *)a3 + 1);
        if (v97 >= 0)
          v99 = *((unsigned __int8 *)a3 + 31);
        else
          v99 = *((_QWORD *)a3 + 2);
        v100 = sub_20E86A980(v96, v98, v99);
        v101 = sub_20E86A980(v100, (uint64_t)"' (must only consist of letters, numbers and underscores).", 58);
        sub_20E8C81A0(v101);
      }
      else
      {
        if (*a3 == 1)
        {
          v54 = (uint64_t)v108;
          sub_20E8CC1A4();
          if (byte_254A5A9AF >= 0)
            v85 = &xmmword_254A5A998;
          else
            v85 = (__int128 *)xmmword_254A5A998;
          if (byte_254A5A9AF >= 0)
            v86 = byte_254A5A9AF;
          else
            v86 = *((_QWORD *)&xmmword_254A5A998 + 1);
          sub_20E86A980((_QWORD *)v54, (uint64_t)v85, v86);
LABEL_107:
          v53 = 1;
          goto LABEL_41;
        }
        sub_20E86A980(a6, (uint64_t)"tlog::Configurator: invalid GenerateConfiguration type ", 55);
        v88 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(_QWORD *)(*v88 - 24)));
        v89 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
        std::locale::~locale(&__dst);
        std::ostream::put();
        std::ostream::flush();
      }
      v53 = 0;
      v54 = 2;
      goto LABEL_41;
    }
  }
  v43 = sub_20E86A980(a6, (uint64_t)"tlog::Configurator: cannot create default configuration file at ", 64);
  v44 = strlen(__s);
  v45 = sub_20E86A980(v43, (uint64_t)__s, v44);
  v46 = sub_20E86A980(v45, (uint64_t)". File is not empty.", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
  v47 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
LABEL_40:
  std::ostream::flush();
  v53 = 0;
  v54 = 1;
LABEL_41:
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (!*((_QWORD *)&v107 + 1))
    goto LABEL_45;
  v56 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (!v53)
      goto LABEL_92;
  }
  else
  {
LABEL_45:
    if (!v53)
      goto LABEL_92;
  }
  v58 = strlen(__s);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = (std::locale::__imp *)operator new(v61 + 1);
    v112 = v59;
    v113 = v62 | 0x8000000000000000;
    __dst.__locale_ = v60;
  }
  else
  {
    HIBYTE(v113) = v58;
    v60 = (std::locale::__imp *)&__dst;
    if (!v58)
      goto LABEL_54;
  }
  memcpy(v60, __s, v59);
LABEL_54:
  *((_BYTE *)v60 + v59) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, _QWORD **))(*(_QWORD *)a7 + 32))(&v107, a7, &__dst, &v110);
  v63 = v107;
  v107 = 0uLL;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  v109 = v63;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if ((SHIBYTE(v113) & 0x80000000) == 0)
  {
    if ((_QWORD)v109)
      goto LABEL_66;
LABEL_91:
    v54 = 1;
    goto LABEL_92;
  }
  operator delete(__dst.__locale_);
  if (!(_QWORD)v109)
    goto LABEL_91;
LABEL_66:
  v106 = *a1;
  v70 = v110;
  sub_20E8D5CD0((uint64_t)v104, a4);
  sub_20E8D63A0((uint64_t)__p, a5);
  v54 = sub_20E8CCA70(&v106, v70, (uint64_t)v104, (uint64_t)__p, a6);
  v71 = (char *)v103;
  if (v103)
  {
    while (1)
    {
      v75 = *(char **)v71;
      v76 = (char *)*((_QWORD *)v71 + 8);
      if (v76 == v71 + 40)
        break;
      if (v76)
      {
        v77 = 5;
LABEL_77:
        (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
      }
      if (v71[39] < 0)
        operator delete(*((void **)v71 + 2));
      operator delete(v71);
      v71 = v75;
      if (!v75)
        goto LABEL_67;
    }
    v76 = v71 + 40;
    v77 = 4;
    goto LABEL_77;
  }
LABEL_67:
  v72 = __p[0];
  __p[0] = 0;
  if (v72)
    operator delete(v72);
  v73 = (char *)v105;
  if (v105)
  {
    while (1)
    {
      v78 = *(char **)v73;
      v79 = (char *)*((_QWORD *)v73 + 8);
      if (v79 == v73 + 40)
        break;
      if (v79)
      {
        v80 = 5;
LABEL_85:
        (*(void (**)(void))(*(_QWORD *)v79 + 8 * v80))();
      }
      if (v73[39] < 0)
        operator delete(*((void **)v73 + 2));
      operator delete(v73);
      v73 = v78;
      if (!v78)
        goto LABEL_70;
    }
    v79 = v73 + 40;
    v80 = 4;
    goto LABEL_85;
  }
LABEL_70:
  v74 = v104[0];
  v104[0] = 0;
  if (v74)
    operator delete(v74);
LABEL_92:
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  return v54;
}

void sub_20E8CC054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a21);
    sub_20E86665C((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a21);
  sub_20E86665C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

__int128 *sub_20E8CC1A4()
{
  unsigned __int8 v0;
  const std::string::value_type *v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A8B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A8B0))
  {
    sub_20E8CE574();
    sub_20E8610C0(&v26, "# TODO: Remove Console and LogFile appenders from root!\ntlog.rootLogger=INFO, Console, LogFile\n\n");
    sub_20E8CE804(&v26, (uint64_t)&qword_254A5A938, &v27);
    sub_20E8CE760();
    if (byte_254A5A997 >= 0)
      v2 = (const std::string::value_type *)&qword_254A5A980;
    else
      v2 = (const std::string::value_type *)qword_254A5A980;
    if (byte_254A5A997 >= 0)
      v3 = byte_254A5A997;
    else
      v3 = unk_254A5A988;
    v4 = std::string::append(&v27, v2, v3);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    sub_20E8610C0(v24, "\ntlog.logger.myLogger=NONE, Console, LogFile\ntlog.logger.myLogger.mySubLogger=WARN\n\n");
    if ((v25 & 0x80u) == 0)
      v6 = v24;
    else
      v6 = (void **)v24[0];
    if ((v25 & 0x80u) == 0)
      v7 = v25;
    else
      v7 = (std::string::size_type)v24[1];
    v8 = std::string::append(&v28, (const std::string::value_type *)v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_20E8CE618();
    if (byte_254A5A967 >= 0)
      v10 = (const std::string::value_type *)&qword_254A5A950;
    else
      v10 = (const std::string::value_type *)qword_254A5A950;
    if (byte_254A5A967 >= 0)
      v11 = byte_254A5A967;
    else
      v11 = unk_254A5A958;
    v12 = std::string::append(&v29, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20E8610C0(__p, "\n");
    if ((v23 & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((v23 & 0x80u) == 0)
      v15 = v23;
    else
      v15 = (std::string::size_type)__p[1];
    v16 = std::string::append(&v30, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_20E8CE6BC();
    if (byte_254A5A97F >= 0)
      v18 = (const std::string::value_type *)&qword_254A5A968;
    else
      v18 = (const std::string::value_type *)qword_254A5A968;
    if (byte_254A5A97F >= 0)
      v19 = byte_254A5A97F;
    else
      v19 = unk_254A5A970;
    v20 = std::string::append(&v31, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    unk_254A5A9A8 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
    xmmword_254A5A998 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
        goto LABEL_45;
      }
    }
    else if (((char)v23 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if (((char)v25 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_39:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v24[0]);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5A998, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5A8B0);
        return &xmmword_254A5A998;
      }
LABEL_50:
      operator delete(v26.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_49:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_50;
  }
  return &xmmword_254A5A998;
}

void sub_20E8CC46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v45 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a45 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v45 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v45 - 96));
  if ((a45 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a40);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a15);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_8:
    __cxa_guard_abort(&qword_254A5A8B0);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(a21);
  __cxa_guard_abort(&qword_254A5A8B0);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CC5F0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[3];
  const void *v33;
  uint64_t v34;
  const void *v35;
  unint64_t v36;
  void *__p;
  char v38;
  unint64_t v39;
  int v40;
  uint64_t v41;

  sub_20E863438((uint64_t)v31);
  v4 = atomic_load((unsigned __int8 *)&qword_254A5A890);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A890))
  {
    sub_20E8610C0(&qword_254A5A938, "# ----------------------------------------\n# Root Logger:\n# ----------------------------------------\n# (Avoid using the root logger in your program directly, but create\n#  a child logger instead, since other libraries may overwrite the\n#  root logger with a conflicting configuration)\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A938, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A890);
  }
  if (byte_254A5A94F >= 0)
    v5 = &qword_254A5A938;
  else
    v5 = (uint64_t *)qword_254A5A938;
  if (byte_254A5A94F >= 0)
    v6 = byte_254A5A94F;
  else
    v6 = unk_254A5A940;
  sub_20E86A980(v32, (uint64_t)v5, v6);
  sub_20E86A980(v32, (uint64_t)"# The 'CLEAR'-token removes the default log appender from the root logger!\ntlog.rootLogger=INFO, CLEAR\n\n", 104);
  v7 = atomic_load((unsigned __int8 *)&qword_254A5A8A8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A8A8))
  {
    sub_20E8610C0(&qword_254A5A980, "# ----------------------------------------\n# Logger Configuration:\n# ----------------------------------------\n# Configure loggers of the hierarchy with:\n#    'tlog.logger.{name}={LogLevel}, [CLEAR], [{Appender}, ..]'\n\n# Level NONE is default for all loggers and makes them use their parent's log level\n# The optional token 'CLEAR' will remove all appenders from the logger if it already exists\n# Every logger will always use all appenders of all it's parents.\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A980, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A8A8);
  }
  if (byte_254A5A997 >= 0)
    v8 = &qword_254A5A980;
  else
    v8 = (uint64_t *)qword_254A5A980;
  if (byte_254A5A997 >= 0)
    v9 = byte_254A5A997;
  else
    v9 = unk_254A5A988;
  sub_20E86A980(v32, (uint64_t)v8, v9);
  v10 = sub_20E86A980(v32, (uint64_t)"\ntlog.logger.", 13);
  v11 = *(char *)(a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *(_QWORD *)a1;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 23);
  else
    v13 = *(_QWORD *)(a1 + 8);
  v14 = sub_20E86A980(v10, v12, v13);
  sub_20E86A980(v14, (uint64_t)"=INFO, Console, LogFile\n\n", 25);
  v15 = atomic_load((unsigned __int8 *)&qword_254A5A898);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A898))
  {
    sub_20E8610C0(&qword_254A5A950, "# ----------------------------------------\n# Appenders:\n# ----------------------------------------\n# Appenders can have any name and can be used by multiple loggers.\n\n# ConsoleAppender logs to stdout/stderr\ntlog.appender.Console=tlog.ConsoleAppender\ntlog.appender.Console.layout=tlog.PatternLayout\ntlog.appender.Console.levelFilter=ALL\n# Verbose Pattern:\ntlog.appender.Console.layout.conversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n# Brief Pattern:\n#tlog.appender.Console.layout.conversionPattern=%r %p %c (%F:%L):%m%n\n\n# FileAppender logs to a log file\ntlog.appender.LogFile=tlog.FileAppender\ntlog.appender.LogFile.filePath=Log.txt\ntlog.appender.LogFile.maxFileSize=1MB\n"
      "tlog.appender.LogFile.maxBackupIndex=10\n"
      "tlog.appender.LogFile.layout=tlog.PatternLayout\n"
      "tlog.appender.LogFile.layout.ConversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n"
      "tlog.appender.LogFile.levelFilter=ALL\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A950, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A898);
  }
  if (byte_254A5A967 >= 0)
    v16 = &qword_254A5A950;
  else
    v16 = (uint64_t *)qword_254A5A950;
  if (byte_254A5A967 >= 0)
    v17 = byte_254A5A967;
  else
    v17 = unk_254A5A958;
  v18 = sub_20E86A980(v32, (uint64_t)v16, v17);
  v19 = sub_20E86A980(v18, (uint64_t)"\n", 1);
  v20 = atomic_load((unsigned __int8 *)&qword_254A5A8A0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A8A0))
  {
    sub_20E8610C0(&qword_254A5A968, "# ----------------------------------------\n# Parameter Cheatsheet:\n# ----------------------------------------\n\n# Log levels:\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL\n# NONE (default for non-root) will use the closest parent's log level\n\n# Parameter tokens (optional logger parameters after {Log Level}):\n# CLEAR : deletes existing appenders of the logger before adding new ones\n\n# Log level filters (for PatternLayout.levelFilter):\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL, ALL, NONE,\n# TRACE_TO_FATAL, ... , ERROR_TO_FATAL\n\n# Pattern Format string tokens (for PatternLayout.conversionPattern):\n# %d : local date in ISO 8601 format (YYYY-MM-DD HH:MM:SS,mmm)\n# %r : milliseconds since creation of the first pattern formatter until creation\n"
      "#      of the logging event\n"
      "# %t : thread identification (hash of this_thread::thread_id)\n"
      "# %p : priority (log level)\n"
      "# %c : category of the message (logger name)\n"
      "# %m : log message\n"
      "# %n : system specific line separator\n"
      "# %F : file where the log was requested\n"
      "# %L : line number where the log was requested\n"
      "# %f : function where the log was requested\n"
      "# %% : a single %-sign");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A968, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5A8A0);
  }
  if (byte_254A5A97F >= 0)
    v21 = &qword_254A5A968;
  else
    v21 = (uint64_t *)qword_254A5A968;
  if (byte_254A5A97F >= 0)
    v22 = byte_254A5A97F;
  else
    v22 = unk_254A5A970;
  sub_20E86A980(v19, (uint64_t)v21, v22);
  if ((v40 & 0x10) != 0)
  {
    v24 = v39;
    if (v39 < v36)
    {
      v39 = v36;
      v24 = v36;
    }
    v25 = v35;
    v23 = v24 - (_QWORD)v35;
    if (v24 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_52;
  }
  else
  {
    if ((v40 & 8) == 0)
    {
      v23 = 0;
      a2[23] = 0;
      goto LABEL_48;
    }
    v25 = v33;
    v23 = v34 - (_QWORD)v33;
    if ((unint64_t)(v34 - (_QWORD)v33) >= 0x7FFFFFFFFFFFFFF8)
LABEL_52:
      sub_20E860B7C();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a2 + 1) = v23;
    *((_QWORD *)a2 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a2 = v28;
    a2 = v28;
    goto LABEL_47;
  }
  a2[23] = v23;
  if (v23)
LABEL_47:
    memmove(a2, v25, v23);
LABEL_48:
  a2[v23] = 0;
  v31[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x24BEDB848] + 16;
  if (v38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v41);
}

void sub_20E8CC9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_254A5A8A0);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8CC9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_254A5A898);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8CCA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_254A5A8A8);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8CCA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_254A5A890);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8CCA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CCA70(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  void *v52;
  char *v53;
  void *v54;
  const std::ios_base *v55;
  uint64_t v56;
  int v57;
  std::locale::id *v58;
  const std::locale::facet *v59;
  unsigned __int8 v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  std::locale::id *v69;
  _QWORD *v70;
  _QWORD *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  const std::locale::facet *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  const std::locale::facet *v122;
  std::locale::__imp *locale;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  std::locale::id *v127;
  uint64_t *v128;
  __int128 *v129;
  size_t v130;
  _QWORD *v131;
  int v132;
  uint64_t *v133;
  size_t v134;
  size_t v135;
  int v136;
  int v137;
  const void *v138;
  size_t v139;
  size_t v140;
  int v141;
  uint64_t v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  char v145;
  char v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  __int128 *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  const char *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  __int128 *v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  const char *v165;
  size_t v166;
  _QWORD *v167;
  const std::locale::facet *v168;
  _QWORD *v169;
  _QWORD *v170;
  size_t v171;
  _QWORD *v172;
  const std::locale::facet *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  char *v178;
  void *v179;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 *v189;
  __int128 *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  __int128 *p_dst;
  uint64_t v195;
  uint64_t **v196;
  char v197;
  std::locale::__imp *v199;
  std::__shared_weak_count *v200;
  std::locale v201;
  std::__shared_weak_count *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  void *v206[2];
  uint64_t v207;
  void *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  int v212;
  void *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  int v217;
  std::locale v218;
  __int128 __dst;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  __int128 __p;
  unint64_t v224;
  _QWORD v225[2];
  int v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD v229[2];
  int v230;
  _QWORD *v231;
  _QWORD v232[2];
  _QWORD *v233;
  _QWORD v234[2];
  _QWORD *v235;
  _QWORD v236[2];
  _QWORD *v237;
  _QWORD v238[4];
  _QWORD v239[2];
  char *v240;
  _QWORD *v241;
  _QWORD v242[2];
  char *v243;
  _QWORD *v244;
  uint64_t v245;

  v245 = *MEMORY[0x24BDAC8D0];
  v9 = atomic_load((unsigned __int8 *)&qword_254A5A8B8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A8B8))
  {
    *(_QWORD *)&__dst = &off_24C9AF558;
    *(_QWORD *)&v221 = &__dst;
    sub_20E8CE85C((char *)&__p, (__int128 *)"ConsoleAppender", (uint64_t)&__dst);
    v242[0] = &off_24C9AF7C8;
    v244 = v242;
    sub_20E8CE85C((char *)&v228, (__int128 *)"FileAppender", (uint64_t)v242);
    v239[0] = &off_24C9AF7C8;
    v241 = v239;
    sub_20E8CE85C((char *)&v233, (__int128 *)"RollingFileAppender", (uint64_t)v239);
    sub_20E8CE904((uint64_t)&unk_254A5AA10, (uint64_t)&__p, 3);
    sub_20E8CE988((uint64_t)&v233);
    sub_20E8CE988((uint64_t)&v228);
    sub_20E8CE988((uint64_t)&__p);
    v187 = v241;
    if (v241 == v239)
    {
      v188 = 4;
      v187 = v239;
    }
    else
    {
      if (!v241)
        goto LABEL_328;
      v188 = 5;
    }
    (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_328:
    v192 = v244;
    if (v244 == v242)
    {
      v193 = 4;
      v192 = v242;
    }
    else
    {
      if (!v244)
        goto LABEL_333;
      v193 = 5;
    }
    (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_333:
    p_dst = (__int128 *)v221;
    if ((__int128 *)v221 == &__dst)
    {
      v195 = 4;
      p_dst = &__dst;
    }
    else
    {
      if (!(_QWORD)v221)
      {
LABEL_338:
        __cxa_atexit((void (*)(void *))sub_20E8CE2D4, &unk_254A5AA10, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5A8B8);
        goto LABEL_2;
      }
      v195 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v195))();
    goto LABEL_338;
  }
LABEL_2:
  v10 = atomic_load((unsigned __int8 *)&qword_254A5A8C0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A8C0))
  {
    v189 = (__int128 *)sub_20E8C4850();
    *(_QWORD *)&__dst = &off_24C9AF478;
    *(_QWORD *)&v221 = &__dst;
    sub_20E8CE9F8((char *)&__p, v189, (uint64_t)&__dst);
    sub_20E8CEAA0((uint64_t)&unk_254A5AA38, (uint64_t)&__p, 1);
    sub_20E8CE988((uint64_t)&__p);
    v190 = (__int128 *)v221;
    if ((__int128 *)v221 == &__dst)
    {
      v191 = 4;
      v190 = &__dst;
    }
    else
    {
      if (!(_QWORD)v221)
      {
LABEL_325:
        __cxa_atexit((void (*)(void *))sub_20E8CE23C, &unk_254A5AA38, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5A8C0);
        goto LABEL_3;
      }
      v191 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v190 + 8 * v191))();
    goto LABEL_325;
  }
LABEL_3:
  sub_20E8D5CD0((uint64_t)v242, (uint64_t)&unk_254A5AA10);
  v11 = *(uint64_t **)(a3 + 16);
  if (v11)
  {
    while (1)
    {
      if (sub_20E8D69F4(v242, (uint64_t)(v11 + 2)))
      {
        v30 = sub_20E86A980(a5, (uint64_t)"Appender string configuration generator with component name '", 61);
        v31 = *((char *)v11 + 39);
        if (v31 >= 0)
          v32 = (uint64_t)(v11 + 2);
        else
          v32 = v11[2];
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)v11 + 39);
        else
          v33 = v11[3];
        v34 = sub_20E86A980(v30, v32, v33);
        sub_20E86A980(v34, (uint64_t)"' already exists in the map of available Appender types. Skipping.\n", 67);
        v35 = 2;
        goto LABEL_293;
      }
      v14 = v11[8];
      if (!v14)
        goto LABEL_12;
      if ((uint64_t *)v14 != v11 + 5)
        break;
      *(_QWORD *)&v221 = &__dst;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, &__dst);
LABEL_14:
      if (*((char *)v11 + 39) < 0)
      {
        sub_20E860C04(&__p, (void *)v11[2], v11[3]);
      }
      else
      {
        __p = *((_OWORD *)v11 + 1);
        v224 = v11[4];
      }
      v15 = v221;
      if (!(_QWORD)v221)
        goto LABEL_20;
      if ((__int128 *)v221 != &__dst)
      {
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v221 + 16))();
LABEL_20:
        v227 = (_QWORD *)v15;
        goto LABEL_22;
      }
      v227 = v225;
      (*(void (**)(__int128 *, _QWORD *))(__dst + 24))(&__dst, v225);
LABEL_22:
      sub_20E8D6C20((uint64_t)v242, (uint64_t)&__p, (uint64_t)&__p);
      v16 = v227;
      if (v227 == v225)
      {
        v16 = v225;
        v17 = 4;
      }
      else
      {
        if (!v227)
          goto LABEL_27;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
      if (SHIBYTE(v224) < 0)
      {
        operator delete((void *)__p);
        v12 = (__int128 *)v221;
        if ((__int128 *)v221 == &__dst)
        {
LABEL_5:
          v12 = &__dst;
          v13 = 4;
          goto LABEL_6;
        }
      }
      else
      {
        v12 = (__int128 *)v221;
        if ((__int128 *)v221 == &__dst)
          goto LABEL_5;
      }
      if (!v12)
        goto LABEL_7;
      v13 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_7:
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_33;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_12:
    *(_QWORD *)&v221 = v14;
    goto LABEL_14;
  }
LABEL_33:
  sub_20E8D63A0((uint64_t)v239, (uint64_t)&unk_254A5AA38);
  v18 = *(uint64_t **)(a4 + 16);
  if (!v18)
  {
LABEL_64:
    v25 = atomic_load((unsigned __int8 *)qword_254A5A8C8);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(qword_254A5A8C8))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254A4FFF0, &dword_20E81F000);
      __cxa_guard_release(qword_254A5A8C8);
    }
    std::mutex::lock(&stru_254A4FFF0);
    v26 = *a1;
    sub_20E8D5CD0((uint64_t)&v213, (uint64_t)v242);
    sub_20E8D63A0((uint64_t)&v208, (uint64_t)v239);
    v27 = v213;
    v28 = v214;
    v213 = 0;
    v214 = 0;
    *(_QWORD *)&__p = v26;
    *((_QWORD *)&__p + 1) = v27;
    v224 = v28;
    v225[0] = v215;
    v225[1] = v216;
    v226 = v217;
    if (v216)
    {
      v29 = *((_QWORD *)v215 + 1);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v29 >= v28)
          v29 %= v28;
      }
      else
      {
        v29 &= v28 - 1;
      }
      v27[v29] = v225;
      v215 = 0;
      v216 = 0;
    }
    v48 = v208;
    v49 = v209;
    v208 = 0;
    v209 = 0;
    v227 = v48;
    v228 = v49;
    v50 = v210;
    v229[0] = v210;
    v229[1] = v211;
    v230 = v212;
    if (v211)
    {
      v51 = *((_QWORD *)v210 + 1);
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v51 >= v49)
          v51 %= v49;
      }
      else
      {
        v51 &= v49 - 1;
      }
      v50 = 0;
      v48[v51] = v229;
      v210 = 0;
      v211 = 0;
    }
    v231 = v232;
    v232[0] = 0;
    v234[0] = 0;
    v234[1] = 0;
    v232[1] = 0;
    v233 = v234;
    v235 = v236;
    v236[0] = 0;
    v238[0] = 0;
    v238[1] = 0;
    v236[1] = 0;
    v237 = v238;
    if (!v50)
    {
LABEL_101:
      v52 = v208;
      v208 = 0;
      if (v52)
        operator delete(v52);
      v53 = (char *)v215;
      if (!v215)
      {
LABEL_104:
        v54 = v213;
        v213 = 0;
        if (v54)
          operator delete(v54);
        v206[0] = 0;
        v206[1] = 0;
        v207 = 0;
        v55 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
        if ((v55->__rdstate_ & 2) != 0)
        {
          LOBYTE(v57) = 1;
          v61 = v235;
          if (v235 == v236)
          {
LABEL_128:
            v196 = a1;
            v68 = v237;
            if (v237 != v238)
            {
              v69 = (std::locale::id *)MEMORY[0x24BEDB350];
              do
              {
                v73 = v68[12];
                v74 = v68[10];
                (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v74 + 24))(&v201, v74);
                v75 = (*(uint64_t (**)(uint64_t, _QWORD *, std::locale::__imp *, _QWORD *))(*(_QWORD *)v73 + 24))(v73, v68 + 7, v201.__locale_, a5);
                v76 = sub_20E8C80D4(v75 == 1, (uint64_t)a5);
                v77 = sub_20E86A980(v76, (uint64_t)"tlog::Configurator: ", 20);
                v78 = sub_20E86A980(v77, (uint64_t)"Invalid expression (unknown parameter ", 38);
                v79 = *((char *)v68 + 55);
                if (v79 >= 0)
                  v80 = (uint64_t)(v68 + 4);
                else
                  v80 = v68[4];
                if (v79 >= 0)
                  v81 = *((unsigned __int8 *)v68 + 55);
                else
                  v81 = v68[5];
                v82 = sub_20E86A980(v78, v80, v81);
                v83 = sub_20E86A980(v82, (uint64_t)"' for configurator of type ", 27);
                v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v85 = *(char *)(v84 + 23);
                if (v85 >= 0)
                  v86 = v84;
                else
                  v86 = *(_QWORD *)v84;
                if (v85 >= 0)
                  v87 = *(unsigned __int8 *)(v84 + 23);
                else
                  v87 = *(_QWORD *)(v84 + 8);
                v88 = sub_20E86A980(v83, v86, v87);
                v89 = sub_20E86A980(v88, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
                v90 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                v91 = sub_20E8C80D4(v75 == 2, (uint64_t)a5);
                v92 = sub_20E86A980(v91, (uint64_t)"tlog::Configurator: ", 20);
                v93 = sub_20E86A980(v92, (uint64_t)"Invalid expression (invalid parameter object content (", 54);
                v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
                v95 = *(char *)(v94 + 23);
                if (v95 >= 0)
                  v96 = v94;
                else
                  v96 = *(_QWORD *)v94;
                if (v95 >= 0)
                  v97 = *(unsigned __int8 *)(v94 + 23);
                else
                  v97 = *(_QWORD *)(v94 + 8);
                v98 = sub_20E86A980(v93, v96, v97);
                v99 = sub_20E86A980(v98, (uint64_t)") for configurator of type ", 27);
                v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v101 = *(char *)(v100 + 23);
                if (v101 >= 0)
                  v102 = v100;
                else
                  v102 = *(_QWORD *)v100;
                if (v101 >= 0)
                  v103 = *(unsigned __int8 *)(v100 + 23);
                else
                  v103 = *(_QWORD *)(v100 + 8);
                v104 = sub_20E86A980(v99, v102, v103);
                v105 = sub_20E86A980(v104, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(_QWORD *)(*v105 - 24)));
                v106 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                v107 = sub_20E8C80D4(v75 == 3, (uint64_t)a5);
                v108 = sub_20E86A980(v107, (uint64_t)"tlog::Configurator: ", 20);
                v109 = sub_20E86A980(v108, (uint64_t)"Invalid expression (invalid parameter type (", 44);
                v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
                v111 = *(char *)(v110 + 23);
                if (v111 >= 0)
                  v112 = v110;
                else
                  v112 = *(_QWORD *)v110;
                if (v111 >= 0)
                  v113 = *(unsigned __int8 *)(v110 + 23);
                else
                  v113 = *(_QWORD *)(v110 + 8);
                v114 = sub_20E86A980(v109, v112, v113);
                v115 = sub_20E86A980(v114, (uint64_t)") for configurator of type ", 27);
                v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v117 = *(char *)(v116 + 23);
                if (v117 >= 0)
                  v118 = v116;
                else
                  v118 = *(_QWORD *)v116;
                if (v117 >= 0)
                  v119 = *(unsigned __int8 *)(v116 + 23);
                else
                  v119 = *(_QWORD *)(v116 + 8);
                v120 = sub_20E86A980(v115, v118, v119);
                v121 = sub_20E86A980(v120, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v121 + *(_QWORD *)(*v121 - 24)));
                v122 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                locale = v201.__locale_;
                v201.__locale_ = 0;
                if (locale)
                  (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
                v124 = (_QWORD *)v68[1];
                if (v124)
                {
                  do
                  {
                    v125 = v124;
                    v124 = (_QWORD *)*v124;
                  }
                  while (v124);
                }
                else
                {
                  do
                  {
                    v125 = (_QWORD *)v68[2];
                    v72 = *v125 == (_QWORD)v68;
                    v68 = v125;
                  }
                  while (!v72);
                }
                LOBYTE(v57) = (v75 == 0) & v57;
                v68 = v125;
              }
              while (v125 != v238);
            }
            v126 = v233;
            if (v233 != v234)
            {
              v197 = 1;
              v127 = (std::locale::id *)MEMORY[0x24BEDB350];
              do
              {
                if (*((char *)v126 + 55) < 0)
                {
                  sub_20E860C04(&__dst, (void *)v126[4], v126[5]);
                }
                else
                {
                  __dst = *((_OWORD *)v126 + 2);
                  v220 = v126[6];
                }
                if (*((char *)v126 + 79) < 0)
                {
                  sub_20E860C04(&v221, (void *)v126[7], v126[8]);
                }
                else
                {
                  v221 = *(_OWORD *)(v126 + 7);
                  v222 = v126[9];
                }
                v128 = (uint64_t *)v232[0];
                if (!v232[0])
                  goto LABEL_249;
                if (v222 >= 0)
                  v129 = &v221;
                else
                  v129 = (__int128 *)v221;
                if (v222 >= 0)
                  v130 = HIBYTE(v222);
                else
                  v130 = *((_QWORD *)&v221 + 1);
                v131 = v232;
                do
                {
                  while (1)
                  {
                    v132 = *((char *)v128 + 55);
                    v133 = v132 >= 0 ? v128 + 4 : (uint64_t *)v128[4];
                    v134 = v132 >= 0 ? *((unsigned __int8 *)v128 + 55) : v128[5];
                    v135 = v130 >= v134 ? v134 : v130;
                    v136 = memcmp(v133, v129, v135);
                    if (v136)
                      break;
                    if (v134 < v130)
                      goto LABEL_201;
LABEL_199:
                    v131 = v128;
                    v128 = (uint64_t *)*v128;
                    if (!v128)
                      goto LABEL_216;
                  }
                  if ((v136 & 0x80000000) == 0)
                    goto LABEL_199;
LABEL_201:
                  v128 = (uint64_t *)v128[1];
                }
                while (v128);
LABEL_216:
                if (v131 == v232)
                  goto LABEL_249;
                v137 = *((char *)v131 + 55);
                if (v137 >= 0)
                  v138 = v131 + 4;
                else
                  v138 = (const void *)v131[4];
                if (v137 >= 0)
                  v139 = *((unsigned __int8 *)v131 + 55);
                else
                  v139 = v131[5];
                if (v139 >= v130)
                  v140 = v130;
                else
                  v140 = v139;
                v141 = memcmp(v129, v138, v140);
                if (!v141)
                {
                  if (v130 < v139)
                    goto LABEL_249;
LABEL_228:
                  v203 = *v196;
                  sub_20E8C0F68(&v203, (uint64_t)&__dst, &v204);
                  v142 = v204;
                  if (((**(_QWORD **)(v204 + 8) == v204) & v197) == 1)
                  {
                    sub_20E8C2E84(v204);
                    v197 = 0;
                  }
                  (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v131[7] + 32))(&v201);
                  v199 = v201.__locale_;
                  v200 = v202;
                  if (v202)
                  {
                    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
                    do
                      v144 = __ldxr(p_shared_owners);
                    while (__stxr(v144 + 1, p_shared_owners));
                  }
                  v145 = sub_20E8C2768(v142, &v199);
                  v146 = v145;
                  v147 = v200;
                  if (!v200)
                    goto LABEL_237;
                  v148 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                    if ((v146 & 1) == 0)
                    {
LABEL_238:
                      sub_20E86A980(a5, (uint64_t)"tlog::Configurator (line ", 25);
                      v150 = (_QWORD *)std::ostream::operator<<();
                      v151 = sub_20E86A980(v150, (uint64_t)"): ", 3);
                      v152 = sub_20E86A980(v151, (uint64_t)"Failed to add appender ", 23);
                      if (v222 >= 0)
                        v153 = &v221;
                      else
                        v153 = (__int128 *)v221;
                      if (v222 >= 0)
                        v154 = HIBYTE(v222);
                      else
                        v154 = *((_QWORD *)&v221 + 1);
                      v155 = sub_20E86A980(v152, (uint64_t)v153, v154);
                      v156 = sub_20E86A980(v155, (uint64_t)" for logger ", 12);
                      if (SHIBYTE(v220) < 0)
                      {
                        if (*((_QWORD *)&__dst + 1))
                          v157 = (const char *)__dst;
                        else
                          v157 = "{root}";
                      }
                      else if (HIBYTE(v220))
                      {
                        v157 = (const char *)&__dst;
                      }
                      else
                      {
                        v157 = "{root}";
                      }
                      v171 = strlen(v157);
                      v172 = sub_20E86A980(v156, (uint64_t)v157, v171);
                      std::ios_base::getloc((const std::ios_base *)((char *)v172 + *(_QWORD *)(*v172 - 24)));
                      v173 = std::locale::use_facet(&v218, v127);
                      ((void (*)(const std::locale::facet *, uint64_t))v173->__vftable[2].~facet_0)(v173, 10);
                      std::locale::~locale(&v218);
                      std::ostream::put();
                      std::ostream::flush();
                      LOBYTE(v57) = 0;
                    }
                  }
                  else
                  {
LABEL_237:
                    if ((v145 & 1) == 0)
                      goto LABEL_238;
                  }
                  v174 = v202;
                  if (v202)
                  {
                    v175 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  goto LABEL_263;
                }
                if ((v141 & 0x80000000) == 0)
                  goto LABEL_228;
LABEL_249:
                sub_20E86A980(a5, (uint64_t)"tlog::Configurator (line ", 25);
                v158 = (_QWORD *)std::ostream::operator<<();
                v159 = sub_20E86A980(v158, (uint64_t)"): ", 3);
                v160 = sub_20E86A980(v159, (uint64_t)"Unknown appender alias ", 23);
                if (v222 >= 0)
                  v161 = &v221;
                else
                  v161 = (__int128 *)v221;
                if (v222 >= 0)
                  v162 = HIBYTE(v222);
                else
                  v162 = *((_QWORD *)&v221 + 1);
                v163 = sub_20E86A980(v160, (uint64_t)v161, v162);
                v164 = sub_20E86A980(v163, (uint64_t)" for logger ", 12);
                if (SHIBYTE(v220) < 0)
                {
                  if (*((_QWORD *)&__dst + 1))
                    v165 = (const char *)__dst;
                  else
                    v165 = "{root}";
                }
                else if (HIBYTE(v220))
                {
                  v165 = (const char *)&__dst;
                }
                else
                {
                  v165 = "{root}";
                }
                v166 = strlen(v165);
                v167 = sub_20E86A980(v164, (uint64_t)v165, v166);
                std::ios_base::getloc((const std::ios_base *)((char *)v167 + *(_QWORD *)(*v167 - 24)));
                v168 = std::locale::use_facet(&v201, v127);
                ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
                std::locale::~locale(&v201);
                std::ostream::put();
                std::ostream::flush();
                LOBYTE(v57) = 0;
LABEL_263:
                if (SHIBYTE(v222) < 0)
                {
                  operator delete((void *)v221);
                  if (SHIBYTE(v220) < 0)
                    goto LABEL_268;
LABEL_265:
                  v169 = (_QWORD *)v126[1];
                  if (!v169)
                    goto LABEL_271;
                  do
                  {
LABEL_269:
                    v170 = v169;
                    v169 = (_QWORD *)*v169;
                  }
                  while (v169);
                }
                else
                {
                  if ((SHIBYTE(v220) & 0x80000000) == 0)
                    goto LABEL_265;
LABEL_268:
                  operator delete((void *)__dst);
                  v169 = (_QWORD *)v126[1];
                  if (v169)
                    goto LABEL_269;
                  do
                  {
LABEL_271:
                    v170 = (_QWORD *)v126[2];
                    v72 = *v170 == (_QWORD)v126;
                    v126 = v170;
                  }
                  while (!v72);
                }
                v126 = v170;
              }
              while (v170 != v234);
            }
            if ((v57 & 1) != 0)
              v35 = 0;
            else
              v35 = 3;
            if (SHIBYTE(v207) < 0)
              operator delete(v206[0]);
            sub_20E8D1D40((uint64_t)&__p);
            std::mutex::unlock(&stru_254A4FFF0);
            v47 = v240;
            if (!v240)
              goto LABEL_291;
LABEL_306:
            while (1)
            {
              v184 = *(char **)v47;
              v185 = (char *)*((_QWORD *)v47 + 8);
              if (v185 == v47 + 40)
                break;
              if (v185)
              {
                v186 = 5;
LABEL_310:
                (*(void (**)(void))(*(_QWORD *)v185 + 8 * v186))();
              }
              if (v47[39] < 0)
                operator delete(*((void **)v47 + 2));
              operator delete(v47);
              v47 = v184;
              if (!v184)
                goto LABEL_291;
            }
            v185 = v47 + 40;
            v186 = 4;
            goto LABEL_310;
          }
        }
        else
        {
          LODWORD(v56) = -1;
          v57 = 1;
          v58 = (std::locale::id *)MEMORY[0x24BEDB350];
          do
          {
            std::ios_base::getloc(v55);
            v59 = std::locale::use_facet((const std::locale *)&__dst, v58);
            v60 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
            std::locale::~locale((std::locale *)&__dst);
            sub_20E8B2BCC(a2, (uint64_t)v206, v60);
            v56 = (v56 + 1);
            v57 &= sub_20E8CAE78((uint64_t **)&__p, v56, (_BYTE **)v206, a5);
            v55 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
          }
          while ((v55->__rdstate_ & 2) == 0);
          v61 = v235;
          if (v235 == v236)
            goto LABEL_128;
        }
        do
        {
          v205 = *a1;
          sub_20E8C0F68(&v205, (uint64_t)(v61 + 4), (uint64_t *)&__dst);
          sub_20E8C2E84(__dst);
          v70 = (_QWORD *)v61[1];
          if (v70)
          {
            do
            {
              v71 = v70;
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v71 = (_QWORD *)v61[2];
              v72 = *v71 == (_QWORD)v61;
              v61 = v71;
            }
            while (!v72);
          }
          v61 = v71;
        }
        while (v71 != v236);
        goto LABEL_128;
      }
      while (1)
      {
        v65 = *(char **)v53;
        v66 = (char *)*((_QWORD *)v53 + 8);
        if (v66 == v53 + 40)
          break;
        if (v66)
        {
          v67 = 5;
LABEL_124:
          (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
        }
        if (v53[39] < 0)
          operator delete(*((void **)v53 + 2));
        operator delete(v53);
        v53 = v65;
        if (!v65)
          goto LABEL_104;
      }
      v66 = v53 + 40;
      v67 = 4;
      goto LABEL_124;
    }
    while (1)
    {
      v62 = *(char **)v50;
      v63 = (char *)*((_QWORD *)v50 + 8);
      if (v63 == v50 + 40)
        break;
      if (v63)
      {
        v64 = 5;
LABEL_116:
        (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
      }
      if (v50[39] < 0)
        operator delete(*((void **)v50 + 2));
      operator delete(v50);
      v50 = v62;
      if (!v62)
        goto LABEL_101;
    }
    v63 = v50 + 40;
    v64 = 4;
    goto LABEL_116;
  }
  while (!sub_20E8D69F4(v242, (uint64_t)(v18 + 2)))
  {
    if (sub_20E8D7088(v239, (uint64_t)(v18 + 2)))
    {
      v43 = sub_20E86A980(a5, (uint64_t)"Appender parameter string configuration generator with component name '", 71);
      v44 = *((char *)v18 + 39);
      if (v44 >= 0)
        v45 = (uint64_t)(v18 + 2);
      else
        v45 = v18[2];
      if (v44 >= 0)
        v46 = *((unsigned __int8 *)v18 + 39);
      else
        v46 = v18[3];
      v40 = sub_20E86A980(v43, v45, v46);
      v41 = "' already exists in the map of available Appender parameter types. Aborting.\n";
      v42 = 77;
      goto LABEL_89;
    }
    v21 = v18[8];
    if (!v21)
      goto LABEL_43;
    if ((uint64_t *)v21 != v18 + 5)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_43:
      *(_QWORD *)&v221 = v21;
      goto LABEL_45;
    }
    *(_QWORD *)&v221 = &__dst;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 24))(v21, &__dst);
LABEL_45:
    if (*((char *)v18 + 39) < 0)
    {
      sub_20E860C04(&__p, (void *)v18[2], v18[3]);
    }
    else
    {
      __p = *((_OWORD *)v18 + 1);
      v224 = v18[4];
    }
    v22 = v221;
    if (!(_QWORD)v221)
      goto LABEL_51;
    if ((__int128 *)v221 != &__dst)
    {
      v22 = (*(uint64_t (**)(void))(*(_QWORD *)v221 + 16))();
LABEL_51:
      v227 = (_QWORD *)v22;
      goto LABEL_53;
    }
    v227 = v225;
    (*(void (**)(__int128 *, _QWORD *))(__dst + 24))(&__dst, v225);
LABEL_53:
    sub_20E8D72B4((uint64_t)v239, (uint64_t)&__p, (uint64_t)&__p);
    v23 = v227;
    if (v227 == v225)
    {
      v23 = v225;
      v24 = 4;
    }
    else
    {
      if (!v227)
        goto LABEL_58;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_58:
    if (SHIBYTE(v224) < 0)
    {
      operator delete((void *)__p);
      v19 = (__int128 *)v221;
      if ((__int128 *)v221 == &__dst)
      {
LABEL_35:
        v19 = &__dst;
        v20 = 4;
        goto LABEL_36;
      }
    }
    else
    {
      v19 = (__int128 *)v221;
      if ((__int128 *)v221 == &__dst)
        goto LABEL_35;
    }
    if (!v19)
      goto LABEL_37;
    v20 = 5;
LABEL_36:
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_37:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_64;
  }
  v36 = sub_20E86A980(a5, (uint64_t)"Appender parameter string configuration generator with component name '", 71);
  v37 = *((char *)v18 + 39);
  if (v37 >= 0)
    v38 = (uint64_t)(v18 + 2);
  else
    v38 = v18[2];
  if (v37 >= 0)
    v39 = *((unsigned __int8 *)v18 + 39);
  else
    v39 = v18[3];
  v40 = sub_20E86A980(v36, v38, v39);
  v41 = "' already exists in the map of available Appender types. Skipping.\n";
  v42 = 67;
LABEL_89:
  sub_20E86A980(v40, (uint64_t)v41, v42);
  v35 = 2;
  v47 = v240;
  if (v240)
    goto LABEL_306;
LABEL_291:
  v177 = (void *)v239[0];
  v239[0] = 0;
  if (v177)
    operator delete(v177);
LABEL_293:
  v178 = v243;
  if (v243)
  {
    while (1)
    {
      v181 = *(char **)v178;
      v182 = (char *)*((_QWORD *)v178 + 8);
      if (v182 == v178 + 40)
        break;
      if (v182)
      {
        v183 = 5;
LABEL_302:
        (*(void (**)(void))(*(_QWORD *)v182 + 8 * v183))();
      }
      if (v178[39] < 0)
        operator delete(*((void **)v178 + 2));
      operator delete(v178);
      v178 = v181;
      if (!v181)
        goto LABEL_294;
    }
    v182 = v178 + 40;
    v183 = 4;
    goto LABEL_302;
  }
LABEL_294:
  v179 = (void *)v242[0];
  v242[0] = 0;
  if (v179)
    operator delete(v179);
  return v35;
}

void sub_20E8CDE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  sub_20E8CE988(v41);
  sub_20E8CE988(v42);
  sub_20E8CE988((uint64_t)&a41);
  v45 = *(_QWORD **)(v43 - 160);
  if (v45 == (_QWORD *)(v43 - 184))
  {
    v46 = 4;
    v45 = (_QWORD *)(v43 - 184);
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  v47 = *(_QWORD **)(v43 - 120);
  if (v47 == (_QWORD *)(v43 - 144))
  {
    v48 = 4;
    v47 = (_QWORD *)(v43 - 144);
  }
  else
  {
    if (!v47)
      goto LABEL_11;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_11:
  v49 = a38;
  if (a38 == &a35)
  {
    v50 = 4;
    v49 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_16;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_16:
  __cxa_guard_abort(&qword_254A5A8B8);
  _Unwind_Resume(a1);
}

void sub_20E8CDFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  sub_20E8CE2D4((uint64_t)&a32);
  std::mutex::unlock(&stru_254A4FFF0);
  sub_20E8CE23C(v52 - 184);
  sub_20E8CE2D4(v52 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CE23C(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20E8CE2D4(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20E8CE36C(uint64_t **a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  void *v28[2];
  void *v29;
  int v30;
  void *v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;

  v34 = *a1;
  if (a6)
  {
    v32 = 0;
    v11 = 8;
    v12 = 0x726567676F4C794DLL;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v11 = 5;
    v12 = 0x7D66666F7BLL;
  }
  v30 = v13;
  v31 = (void *)v12;
  v33 = v11;
  sub_20E8D5CD0((uint64_t)v28, a3);
  sub_20E8D63A0((uint64_t)__p, a4);
  v14 = sub_20E8CB648(&v34, a2, &v30, (uint64_t)v28, (uint64_t)__p, a5, a7);
  v15 = (char *)v27;
  if (v27)
  {
    while (1)
    {
      v20 = *(char **)v15;
      v21 = (char *)*((_QWORD *)v15 + 8);
      if (v21 == v15 + 40)
        break;
      if (v21)
      {
        v22 = 5;
LABEL_18:
        (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
      }
      if (v15[39] < 0)
        operator delete(*((void **)v15 + 2));
      operator delete(v15);
      v15 = v20;
      if (!v20)
        goto LABEL_5;
    }
    v21 = v15 + 40;
    v22 = 4;
    goto LABEL_18;
  }
LABEL_5:
  v16 = __p[0];
  __p[0] = 0;
  if (v16)
    operator delete(v16);
  v17 = (char *)v29;
  if (v29)
  {
    while (1)
    {
      v23 = *(char **)v17;
      v24 = (char *)*((_QWORD *)v17 + 8);
      if (v24 == v17 + 40)
        break;
      if (v24)
      {
        v25 = 5;
LABEL_26:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      }
      if (v17[39] < 0)
        operator delete(*((void **)v17 + 2));
      operator delete(v17);
      v17 = v23;
      if (!v23)
        goto LABEL_8;
    }
    v24 = v17 + 40;
    v25 = 4;
    goto LABEL_26;
  }
LABEL_8:
  v18 = v28[0];
  v28[0] = 0;
  if (v18)
    operator delete(v18);
  if (v33 < 0)
    operator delete(v31);
  return v14;
}

void sub_20E8CE538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E8CE23C((uint64_t)va);
  sub_20E8CE2D4((uint64_t)va1);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8CE574()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A890);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A890))
    return &qword_254A5A938;
  sub_20E8610C0(&qword_254A5A938, "# ----------------------------------------\n# Root Logger:\n# ----------------------------------------\n# (Avoid using the root logger in your program directly, but create\n#  a child logger instead, since other libraries may overwrite the\n#  root logger with a conflicting configuration)\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A938, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A890);
  return &qword_254A5A938;
}

void sub_20E8CE600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A890);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8CE618()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A898))
    return &qword_254A5A950;
  sub_20E8610C0(&qword_254A5A950, "# ----------------------------------------\n# Appenders:\n# ----------------------------------------\n# Appenders can have any name and can be used by multiple loggers.\n\n# ConsoleAppender logs to stdout/stderr\ntlog.appender.Console=tlog.ConsoleAppender\ntlog.appender.Console.layout=tlog.PatternLayout\ntlog.appender.Console.levelFilter=ALL\n# Verbose Pattern:\ntlog.appender.Console.layout.conversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n# Brief Pattern:\n#tlog.appender.Console.layout.conversionPattern=%r %p %c (%F:%L):%m%n\n\n# FileAppender logs to a log file\ntlog.appender.LogFile=tlog.FileAppender\ntlog.appender.LogFile.filePath=Log.txt\ntlog.appender.LogFile.maxFileSize=1MB\n"
    "tlog.appender.LogFile.maxBackupIndex=10\n"
    "tlog.appender.LogFile.layout=tlog.PatternLayout\n"
    "tlog.appender.LogFile.layout.ConversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n"
    "tlog.appender.LogFile.levelFilter=ALL\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A950, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A898);
  return &qword_254A5A950;
}

void sub_20E8CE6A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A898);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8CE6BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A8A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A8A0))
    return &qword_254A5A968;
  sub_20E8610C0(&qword_254A5A968, "# ----------------------------------------\n# Parameter Cheatsheet:\n# ----------------------------------------\n\n# Log levels:\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL\n# NONE (default for non-root) will use the closest parent's log level\n\n# Parameter tokens (optional logger parameters after {Log Level}):\n# CLEAR : deletes existing appenders of the logger before adding new ones\n\n# Log level filters (for PatternLayout.levelFilter):\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL, ALL, NONE,\n# TRACE_TO_FATAL, ... , ERROR_TO_FATAL\n\n# Pattern Format string tokens (for PatternLayout.conversionPattern):\n# %d : local date in ISO 8601 format (YYYY-MM-DD HH:MM:SS,mmm)\n# %r : milliseconds since creation of the first pattern formatter until creation\n"
    "#      of the logging event\n"
    "# %t : thread identification (hash of this_thread::thread_id)\n"
    "# %p : priority (log level)\n"
    "# %c : category of the message (logger name)\n"
    "# %m : log message\n"
    "# %n : system specific line separator\n"
    "# %F : file where the log was requested\n"
    "# %L : line number where the log was requested\n"
    "# %f : function where the log was requested\n"
    "# %% : a single %-sign");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A968, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A8A0);
  return &qword_254A5A968;
}

void sub_20E8CE748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A8A0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8CE760()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A8A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A8A8))
    return &qword_254A5A980;
  sub_20E8610C0(&qword_254A5A980, "# ----------------------------------------\n# Logger Configuration:\n# ----------------------------------------\n# Configure loggers of the hierarchy with:\n#    'tlog.logger.{name}={LogLevel}, [CLEAR], [{Appender}, ..]'\n\n# Level NONE is default for all loggers and makes them use their parent's log level\n# The optional token 'CLEAR' will remove all appenders from the logger if it already exists\n# Every logger will always use all appenders of all it's parents.\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A980, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A8A8);
  return &qword_254A5A980;
}

void sub_20E8CE7EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A8A8);
  _Unwind_Resume(a1);
}

__n128 sub_20E8CE804@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

char *sub_20E8CE85C(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    v6 = (_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v6 = __dst + 48;
    goto LABEL_7;
  }
  sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 != a3)
  {
    *((_QWORD *)__dst + 6) = v7;
LABEL_7:
    *v6 = 0;
    return __dst;
  }
  *((_QWORD *)__dst + 6) = __dst + 24;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
  return __dst;
}

uint64_t sub_20E8CE904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_20E8D5E10(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_20E8CE968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_21023E934(v3);
  sub_21023E91C((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CE988(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20E8CE9F8(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    v6 = (_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v6 = __dst + 48;
    goto LABEL_7;
  }
  sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 != a3)
  {
    *((_QWORD *)__dst + 6) = v7;
LABEL_7:
    *v6 = 0;
    return __dst;
  }
  *((_QWORD *)__dst + 6) = __dst + 24;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
  return __dst;
}

uint64_t sub_20E8CEAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_20E8D64E0(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_20E8CEB04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_21023E934(v3);
  sub_21023E91C((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CEB24(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20E8CEB8C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  int v4;
  char *v7;
  __darwin_ct_rune_t v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  __darwin_ct_rune_t v21;
  __darwin_ct_rune_t v22;
  __darwin_ct_rune_t v23;
  __darwin_ct_rune_t v24;
  char v25;
  uint64_t result;
  __int128 v27;
  __int128 *v28;
  size_t v29;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 != 17)
    return 1;
  v7 = v4 >= 0 ? (char *)a2 : *(char **)a2;
  v8 = __tolower(*v7);
  if (v8 != __tolower(67))
    return 1;
  v9 = __tolower(v7[1]);
  if (v9 != __tolower(111))
    return 1;
  v10 = __tolower(v7[2]);
  if (v10 != __tolower(110))
    return 1;
  v11 = __tolower(v7[3]);
  if (v11 != __tolower(118))
    return 1;
  v12 = __tolower(v7[4]);
  if (v12 != __tolower(101))
    return 1;
  v13 = __tolower(v7[5]);
  if (v13 != __tolower(114))
    return 1;
  v14 = __tolower(v7[6]);
  if (v14 != __tolower(115))
    return 1;
  v15 = __tolower(v7[7]);
  if (v15 != __tolower(105))
    return 1;
  v16 = __tolower(v7[8]);
  if (v16 != __tolower(111))
    return 1;
  v17 = __tolower(v7[9]);
  if (v17 != __tolower(110))
    return 1;
  v18 = __tolower(v7[10]);
  if (v18 != __tolower(80))
    return 1;
  v19 = __tolower(v7[11]);
  if (v19 != __tolower(97))
    return 1;
  v20 = __tolower(v7[12]);
  if (v20 != __tolower(116))
    return 1;
  v21 = __tolower(v7[13]);
  if (v21 != __tolower(116))
    return 1;
  v22 = __tolower(v7[14]);
  if (v22 != __tolower(101))
    return 1;
  v23 = __tolower(v7[15]);
  if (v23 != __tolower(114))
    return 1;
  v24 = __tolower(v7[16]);
  if (v24 != __tolower(110))
    return 1;
  if ((__int128 *)(a1 + 16) == a3)
    return 0;
  v25 = *((_BYTE *)a3 + 23);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    if ((*((_BYTE *)a3 + 23) & 0x80) == 0)
    {
      result = 0;
      v27 = *a3;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 16) = v27;
      return result;
    }
    sub_20E867BF8((_QWORD *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
    return 0;
  }
  if (v25 >= 0)
    v28 = a3;
  else
    v28 = *(__int128 **)a3;
  if (v25 >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = *((_QWORD *)a3 + 1);
  sub_20E867CBC((void **)(a1 + 16), v28, v29);
  return 0;
}

uint64_t sub_20E8CEE4C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  char *v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  _BOOL4 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 != 11)
    return 1;
  v9 = v5 >= 0 ? (char *)a2 : *(char **)a2;
  v10 = __tolower(*v9);
  if (v10 != __tolower(76))
    return 1;
  v11 = __tolower(v9[1]);
  if (v11 != __tolower(101))
    return 1;
  v12 = __tolower(v9[2]);
  if (v12 != __tolower(118))
    return 1;
  v13 = __tolower(v9[3]);
  if (v13 != __tolower(101))
    return 1;
  v14 = __tolower(v9[4]);
  if (v14 != __tolower(108))
    return 1;
  v15 = __tolower(v9[5]);
  if (v15 != __tolower(70))
    return 1;
  v16 = __tolower(v9[6]);
  if (v16 != __tolower(105))
    return 1;
  v17 = __tolower(v9[7]);
  if (v17 != __tolower(108))
    return 1;
  v18 = __tolower(v9[8]);
  if (v18 != __tolower(116))
    return 1;
  v19 = __tolower(v9[9]);
  if (v19 != __tolower(101))
    return 1;
  v20 = __tolower(v9[10]);
  if (v20 != __tolower(114))
    return 1;
  v30 = 63;
  v21 = sub_20E8C7AA0(&v30, a3, a4);
  v22 = sub_20E8C80D4(!v21, a4);
  v23 = sub_20E86A980(v22, (uint64_t)"ConsoleAppenderConfigurator::setParameterValue(): ", 50);
  v24 = sub_20E86A980(v23, (uint64_t)"Invalid expression (unknown right identificator ", 48);
  if (a3[23] < 0)
  {
    if (*((_QWORD *)a3 + 1))
      a3 = *(char **)a3;
    else
      a3 = "{empty string}";
  }
  else if (!a3[23])
  {
    a3 = "{empty string}";
  }
  v27 = strlen(a3);
  v28 = sub_20E86A980(v24, (uint64_t)a3, v27);
  v25 = 2;
  v29 = sub_20E86A980(v28, (uint64_t)") ", 2);
  sub_20E86A980(v29, (uint64_t)"Expected collection of log levels (NONE, TRACE... FATAL) separated by commas or given as 'XXX_TO_FATAL')", 104);
  if (v21)
  {
    v25 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) = v30;
  }
  return v25;
}

uint64_t sub_20E8CF0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *__p;
  void **v25;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__p);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 != 6
    || (v7 >= 0 ? (v8 = (char *)a2) : (v8 = *(char **)a2),
        (v9 = __tolower(*v8), v9 != __tolower(76))
     || (v10 = __tolower(v8[1]), v10 != __tolower(97))
     || (v11 = __tolower(v8[2]), v11 != __tolower(121))
     || (v12 = __tolower(v8[3]), v12 != __tolower(111))
     || (v13 = __tolower(v8[4]), v13 != __tolower(117))
     || (v14 = __tolower(v8[5]), v14 != __tolower(116))))
  {
    v19 = 1;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  if (!sub_20E8CF2E4(a3))
  {
    v19 = 3;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v27, a3);
  v16 = v27;
  v27 = 0;
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v27;
    v27 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = 0;
  v20 = (void **)__p;
  if (__p)
  {
LABEL_20:
    v21 = v25;
    v22 = v20;
    if (v25 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = __p;
    }
    v25 = v20;
    operator delete(v22);
  }
  return v19;
}

void sub_20E8CF2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8CF2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8CF2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E8CF2E4(uint64_t a1)
{
  unsigned __int8 v1;
  char *v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  __darwin_ct_rune_t v9;
  char *v10;
  void **v11;
  void *v12;
  void **v13;
  uint64_t v15;
  int v16;
  void *__p;
  char *v18;
  uint64_t v19;

  v1 = atomic_load((unsigned __int8 *)&qword_254A50048);
  if ((v1 & 1) == 0)
  {
    v15 = a1;
    v16 = __cxa_guard_acquire(&qword_254A50048);
    a1 = v15;
    if (v16)
    {
      unk_254A50040 = 0x700000000000000;
      xmmword_254A50030 = *(_OWORD *)"ILayout";
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50030, &dword_20E81F000);
      __cxa_guard_release(&qword_254A50048);
      a1 = v15;
    }
  }
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, &__p);
  v2 = (char *)__p;
  v3 = v18;
  if (__p == v18)
  {
    v11 = (void **)__p;
    v10 = (char *)__p;
    if (__p)
    {
LABEL_23:
      v12 = v2;
      if (v2 != (char *)v11)
      {
        v13 = (void **)v2;
        do
        {
          if (*((char *)v13 - 1) < 0)
            operator delete(*(v13 - 3));
          v13 -= 3;
        }
        while (v13 != v11);
        v12 = __p;
      }
      v18 = (char *)v11;
      operator delete(v12);
    }
  }
  else
  {
    do
    {
      v4 = v2[23];
      if (v4 >= 0)
        v5 = v2[23];
      else
        v5 = *((_QWORD *)v2 + 1);
      v6 = byte_254A50047;
      if (byte_254A50047 < 0)
        v6 = *((_QWORD *)&xmmword_254A50030 + 1);
      if (v5 == v6)
      {
        if (v4 >= 0)
          v7 = v2;
        else
          v7 = *(char **)v2;
        if (!v5)
        {
LABEL_20:
          v10 = v2;
          v11 = (void **)__p;
          v2 = v18;
          if (__p)
            goto LABEL_23;
          return v10 != v2;
        }
        if (byte_254A50047 >= 0)
          v8 = &xmmword_254A50030;
        else
          v8 = (__int128 *)xmmword_254A50030;
        while (1)
        {
          v9 = __tolower(*v7);
          if (v9 != __tolower(*(char *)v8))
            break;
          ++v7;
          v8 = (__int128 *)((char *)v8 + 1);
          if (!--v5)
            goto LABEL_20;
        }
      }
      v2 += 24;
    }
    while (v2 != v3);
    v10 = v3;
    v11 = (void **)__p;
    v2 = v18;
    if (__p)
      goto LABEL_23;
  }
  return v10 != v2;
}

void sub_20E8CF4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E8CF4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CF4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v8;
  int v9;
  char *v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  __darwin_ct_rune_t v23;
  __darwin_ct_rune_t v24;
  __darwin_ct_rune_t v25;
  __darwin_ct_rune_t v26;
  __darwin_ct_rune_t v27;
  __darwin_ct_rune_t v28;
  __darwin_ct_rune_t v29;
  __darwin_ct_rune_t v30;
  __darwin_ct_rune_t v31;
  __darwin_ct_rune_t v32;
  __darwin_ct_rune_t v33;
  uint64_t v34;
  char v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *p_dst;
  unint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  __darwin_ct_rune_t v44;
  __darwin_ct_rune_t v45;
  __darwin_ct_rune_t v46;
  __darwin_ct_rune_t v47;
  __darwin_ct_rune_t v48;
  __darwin_ct_rune_t v49;
  __darwin_ct_rune_t v50;
  __darwin_ct_rune_t v51;
  __darwin_ct_rune_t v52;
  __darwin_ct_rune_t v53;
  __darwin_ct_rune_t v54;
  __darwin_ct_rune_t v55;
  __darwin_ct_rune_t v56;
  __darwin_ct_rune_t v57;
  uint64_t v58;
  int v59;
  std::mutex *v60;
  uint64_t v61;
  int v62;
  char *v63;
  __darwin_ct_rune_t v64;
  __darwin_ct_rune_t v65;
  __darwin_ct_rune_t v66;
  __darwin_ct_rune_t v67;
  __darwin_ct_rune_t v68;
  __darwin_ct_rune_t v69;
  __darwin_ct_rune_t v70;
  __darwin_ct_rune_t v71;
  __darwin_ct_rune_t v72;
  __darwin_ct_rune_t v73;
  __darwin_ct_rune_t v74;
  _BOOL4 v75;
  BOOL v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v81;
  uint64_t v82;
  __int128 *v83;
  char *v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  __int128 *v89;
  char *v90;
  unint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 *v95;
  char *v96;
  uint64_t v97;
  __int128 *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  char v106;
  unint64_t v107;
  _QWORD v108[13];
  char v109;
  uint64_t v110;
  __int128 __dst;
  uint64_t v112;

  v5 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a3;
    v112 = *(_QWORD *)(a3 + 16);
  }
  v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8 == 8)
  {
    v10 = v9 >= 0 ? (char *)a2 : *(char **)a2;
    v11 = __tolower(*v10);
    if (v11 == __tolower(70))
    {
      v12 = __tolower(v10[1]);
      if (v12 == __tolower(105))
      {
        v13 = __tolower(v10[2]);
        if (v13 == __tolower(108))
        {
          v14 = __tolower(v10[3]);
          if (v14 == __tolower(101))
          {
            v15 = __tolower(v10[4]);
            if (v15 == __tolower(80))
            {
              v16 = __tolower(v10[5]);
              if (v16 == __tolower(97))
              {
                v17 = __tolower(v10[6]);
                if (v17 == __tolower(116))
                {
                  v18 = __tolower(v10[7]);
                  if (v18 == __tolower(104))
                  {
                    sub_20E8C7610(*(_QWORD *)(a1 + 8), (void **)&__dst);
LABEL_19:
                    v19 = 0;
                    goto LABEL_88;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v20 = *(unsigned __int8 *)(a2 + 23);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a2 + 8);
  if (v20 == 11)
  {
    v22 = v21 >= 0 ? (char *)a2 : *(char **)a2;
    v23 = __tolower(*v22);
    if (v23 == __tolower(77))
    {
      v24 = __tolower(v22[1]);
      if (v24 == __tolower(97))
      {
        v25 = __tolower(v22[2]);
        if (v25 == __tolower(120))
        {
          v26 = __tolower(v22[3]);
          if (v26 == __tolower(70))
          {
            v27 = __tolower(v22[4]);
            if (v27 == __tolower(105))
            {
              v28 = __tolower(v22[5]);
              if (v28 == __tolower(108))
              {
                v29 = __tolower(v22[6]);
                if (v29 == __tolower(101))
                {
                  v30 = __tolower(v22[7]);
                  if (v30 == __tolower(83))
                  {
                    v31 = __tolower(v22[8]);
                    if (v31 == __tolower(105))
                    {
                      v32 = __tolower(v22[9]);
                      if (v32 == __tolower(122))
                      {
                        v33 = __tolower(v22[10]);
                        if (v33 == __tolower(101))
                        {
                          v34 = HIBYTE(v112);
                          v35 = HIBYTE(v112);
                          v37 = *((_QWORD *)&__dst + 1);
                          v36 = (__int128 *)__dst;
                          if (v112 >= 0)
                            v38 = HIBYTE(v112);
                          else
                            v38 = *((_QWORD *)&__dst + 1);
                          if (v112 >= 0)
                            p_dst = &__dst;
                          else
                            p_dst = (__int128 *)__dst;
                          if (v38 >= 2)
                          {
                            v106 = HIBYTE(v112);
                            v105 = (__int128 *)__dst;
                            v81 = (char *)p_dst + v38;
                            v40 = 1;
                            v82 = v38;
                            v83 = p_dst;
                            while (1)
                            {
                              v84 = (char *)memchr(v83, 75, v82 - 1);
                              if (!v84)
                                goto LABEL_115;
                              if (*(_WORD *)v84 == 16971)
                                break;
                              v83 = (__int128 *)(v84 + 1);
                              v82 = v81 - (char *)v83;
                              if (v81 - (char *)v83 < 2)
                                goto LABEL_115;
                            }
                            v40 = 1;
                            if (v84 == v81)
                            {
LABEL_115:
                              v36 = v105;
                              v35 = v106;
                            }
                            else
                            {
                              v36 = v105;
                              v35 = v106;
                              if (v84 - (char *)p_dst != -1)
                              {
                                v88 = v38;
                                v89 = p_dst;
                                do
                                {
                                  if (v88 == 1)
                                    break;
                                  v90 = (char *)memchr(v89, 75, v88 - 1);
                                  if (!v90)
                                    break;
                                  if (*(_WORD *)v90 == 16971)
                                    goto LABEL_110;
                                  v89 = (__int128 *)(v90 + 1);
                                  v88 = v81 - (char *)v89;
                                }
                                while (v81 - (char *)v89 > 1);
                                v90 = (char *)p_dst + v38;
LABEL_110:
                                if (v90 == v81)
                                  v91 = -1;
                                else
                                  v91 = v90 - (char *)p_dst;
                                if (v38 < v91)
                                  goto LABEL_148;
                                sub_20E8D1238(&__dst, v91, 2uLL);
                                v34 = HIBYTE(v112);
                                v37 = *((_QWORD *)&__dst + 1);
                                v36 = (__int128 *)__dst;
                                v40 = 1024;
                                v35 = HIBYTE(v112);
                              }
                            }
                          }
                          else
                          {
                            v40 = 1;
                          }
                          if (v35 >= 0)
                          {
                            v92 = &__dst;
                          }
                          else
                          {
                            v34 = v37;
                            v92 = v36;
                          }
                          if (v34 < 2)
                            goto LABEL_138;
                          v93 = (char *)v92 + v34;
                          v94 = v34;
                          v95 = v92;
                          while (1)
                          {
                            v96 = (char *)memchr(v95, 77, v94 - 1);
                            if (!v96)
                              goto LABEL_138;
                            if (*(_WORD *)v96 == 16973)
                              break;
                            v95 = (__int128 *)(v96 + 1);
                            v94 = v93 - (char *)v95;
                            if (v93 - (char *)v95 < 2)
                              goto LABEL_138;
                          }
                          if (v96 == v93 || v96 - (char *)v92 == -1)
                            goto LABEL_138;
                          v97 = v34;
                          v98 = v92;
                          do
                          {
                            if (v97 == 1)
                              break;
                            v99 = (char *)memchr(v98, 77, v97 - 1);
                            if (!v99)
                              break;
                            if (*(_WORD *)v99 == 16973)
                              goto LABEL_133;
                            v98 = (__int128 *)(v99 + 1);
                            v97 = v93 - (char *)v98;
                          }
                          while (v93 - (char *)v98 > 1);
                          v99 = (char *)v92 + v34;
LABEL_133:
                          if (v99 == v93)
                            v100 = -1;
                          else
                            v100 = v99 - (char *)v92;
                          if (v34 >= v100)
                          {
                            sub_20E8D1238(&__dst, v100, 2uLL);
                            v40 = 0x100000;
LABEL_138:
                            sub_20E8C2268((uint64_t)v108, &__dst, 24);
                            v107 = 0;
                            MEMORY[0x212BC5C0C](v108, &v107);
                            if (is_mul_ok(v40, v107))
                              v101 = v107 * v40;
                            else
                              v101 = -1;
                            v107 = v101;
                            v102 = *(_QWORD *)(a1 + 8);
                            v60 = *(std::mutex **)(v102 + 16);
                            std::mutex::lock(v60);
                            if (v101)
                              v103 = v101;
                            else
                              v103 = -1;
                            *(_QWORD *)(v102 + 64) = v103;
                            goto LABEL_145;
                          }
LABEL_148:
                          sub_20E89FD0C();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v41 = *(unsigned __int8 *)(a2 + 23);
  v42 = (char)v41;
  if ((v41 & 0x80u) != 0)
    v41 = *(_QWORD *)(a2 + 8);
  if (v41 == 14)
  {
    v43 = v42 >= 0 ? (char *)a2 : *(char **)a2;
    v44 = __tolower(*v43);
    if (v44 == __tolower(77))
    {
      v45 = __tolower(v43[1]);
      if (v45 == __tolower(97))
      {
        v46 = __tolower(v43[2]);
        if (v46 == __tolower(120))
        {
          v47 = __tolower(v43[3]);
          if (v47 == __tolower(66))
          {
            v48 = __tolower(v43[4]);
            if (v48 == __tolower(97))
            {
              v49 = __tolower(v43[5]);
              if (v49 == __tolower(99))
              {
                v50 = __tolower(v43[6]);
                if (v50 == __tolower(107))
                {
                  v51 = __tolower(v43[7]);
                  if (v51 == __tolower(117))
                  {
                    v52 = __tolower(v43[8]);
                    if (v52 == __tolower(112))
                    {
                      v53 = __tolower(v43[9]);
                      if (v53 == __tolower(73))
                      {
                        v54 = __tolower(v43[10]);
                        if (v54 == __tolower(110))
                        {
                          v55 = __tolower(v43[11]);
                          if (v55 == __tolower(100))
                          {
                            v56 = __tolower(v43[12]);
                            if (v56 == __tolower(101))
                            {
                              v57 = __tolower(v43[13]);
                              if (v57 == __tolower(120))
                              {
                                sub_20E8C2268((uint64_t)v108, &__dst, 24);
                                LODWORD(v107) = 0;
                                MEMORY[0x212BC5BF4](v108, &v107);
                                v58 = *(_QWORD *)(a1 + 8);
                                v59 = v107;
                                v60 = *(std::mutex **)(v58 + 16);
                                std::mutex::lock(v60);
                                *(_DWORD *)(v58 + 72) = v59 & ~(v59 >> 31);
LABEL_145:
                                std::mutex::unlock(v60);
                                v108[0] = *MEMORY[0x24BEDB7F0];
                                v104 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                *(_QWORD *)((char *)v108 + *(_QWORD *)(v108[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                v108[2] = v104;
                                v108[3] = MEMORY[0x24BEDB848] + 16;
                                if (v109 < 0)
                                  operator delete((void *)v108[11]);
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x212BC6290](&v110);
                                goto LABEL_19;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v61 = *(unsigned __int8 *)(a2 + 23);
  v62 = (char)v61;
  if ((v61 & 0x80u) != 0)
    v61 = *(_QWORD *)(a2 + 8);
  if (v61 != 11)
    goto LABEL_87;
  v63 = v62 >= 0 ? (char *)a2 : *(char **)a2;
  v64 = __tolower(*v63);
  if (v64 != __tolower(76))
    goto LABEL_87;
  v65 = __tolower(v63[1]);
  if (v65 != __tolower(101))
    goto LABEL_87;
  v66 = __tolower(v63[2]);
  if (v66 != __tolower(118))
    goto LABEL_87;
  v67 = __tolower(v63[3]);
  if (v67 != __tolower(101))
    goto LABEL_87;
  v68 = __tolower(v63[4]);
  if (v68 == __tolower(108)
    && (v69 = __tolower(v63[5]), v69 == __tolower(70))
    && (v70 = __tolower(v63[6]), v70 == __tolower(105))
    && (v71 = __tolower(v63[7]), v71 == __tolower(108))
    && (v72 = __tolower(v63[8]), v72 == __tolower(116))
    && (v73 = __tolower(v63[9]), v73 == __tolower(101))
    && (v74 = __tolower(v63[10]), v74 == __tolower(114)))
  {
    LODWORD(v108[0]) = 63;
    v75 = sub_20E8C7AA0(v108, (char *)&__dst, a4);
    v76 = v75;
    v77 = sub_20E8C80D4(!v75, a4);
    v78 = sub_20E86A980(v77, (uint64_t)"FileAppenderConfigurator::setParameterValue(): ", 47);
    v79 = sub_20E86A980(v78, (uint64_t)"Invalid expression (unknown right identificator ", 48);
    if (v5[23] < 0)
    {
      if (*((_QWORD *)v5 + 1))
        v5 = *(const char **)v5;
      else
        v5 = "{empty string}";
    }
    else if (!v5[23])
    {
      v5 = "{empty string}";
    }
    v85 = strlen(v5);
    v86 = sub_20E86A980(v79, (uint64_t)v5, v85);
    v87 = sub_20E86A980(v86, (uint64_t)") ", 2);
    sub_20E86A980(v87, (uint64_t)"Expected collection of log levels (NONE, TRACE... FATAL) separated by commas or given as 'XXX_TO_FATAL')", 104);
    if (v76)
    {
      v19 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = v108[0];
    }
    else
    {
      v19 = 2;
    }
  }
  else
  {
LABEL_87:
    v19 = 1;
  }
LABEL_88:
  if (SHIBYTE(v112) < 0)
    operator delete((void *)__dst);
  return v19;
}

void sub_20E8CFED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8CFF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *__p;
  void **v25;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__p);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 != 6
    || (v7 >= 0 ? (v8 = (char *)a2) : (v8 = *(char **)a2),
        (v9 = __tolower(*v8), v9 != __tolower(76))
     || (v10 = __tolower(v8[1]), v10 != __tolower(97))
     || (v11 = __tolower(v8[2]), v11 != __tolower(121))
     || (v12 = __tolower(v8[3]), v12 != __tolower(111))
     || (v13 = __tolower(v8[4]), v13 != __tolower(117))
     || (v14 = __tolower(v8[5]), v14 != __tolower(116))))
  {
    v19 = 1;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  if (!sub_20E8CF2E4(a3))
  {
    v19 = 3;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v27, a3);
  v16 = v27;
  v27 = 0;
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v27;
    v27 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = 0;
  v20 = (void **)__p;
  if (__p)
  {
LABEL_20:
    v21 = v25;
    v22 = v20;
    if (v25 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = __p;
    }
    v25 = v20;
    operator delete(v22);
  }
  return v19;
}

void sub_20E8D0110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8D0124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8D0138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

const char *sub_20E8D014C()
{
  return "";
}

char *sub_20E8D0158()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A808))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A808);
  return aPatternlayout;
}

const char *sub_20E8D01C8()
{
  return "ConsoleAppender";
}

const char *sub_20E8D01D4()
{
  return "ConsoleAppender";
}

const char *sub_20E8D01E0()
{
  return "FileAppender";
}

const char *sub_20E8D01EC()
{
  return "FileAppender";
}

void ***sub_20E8D01F8(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_20E8C07B8(v4 - 80);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20E8D0280(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D02A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

uint64_t sub_20E8D02C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20E8D0334(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20E8D03C0(v2 + 128, *(_QWORD **)(v2 + 136));
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_20E8D03C0(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20E8D03C0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20E8D03C0(a1, *a2);
    sub_20E8D03C0(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_20E8D0448(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = a1 + 17;
  v3 = (uint64_t *)a1[17];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4)
    {
      v10 = v5[4];
      if (v10 <= a2)
      {
        if (*(_BYTE *)(v10 + 8))
          --a1[19];
        v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v13 = v5;
          do
          {
            v12 = (uint64_t *)v13[2];
            v14 = *v12 == (_QWORD)v13;
            v13 = v12;
          }
          while (!v14);
        }
        if ((uint64_t *)a1[16] == v5)
          a1[16] = v12;
        --a1[18];
        sub_20E8D2134(v3, v5);
        v15 = (std::__shared_weak_count *)v5[6];
        if (!v15)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          operator delete(v5);
        }
        else
        {
LABEL_27:
          operator delete(v5);
        }
      }
    }
  }
}

_OWORD *sub_20E8D0568(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20E867F44();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20E877A38();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_20E8D06C8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_20E8D0C84((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_20E8D0E10((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_20E877A38();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_20E877A38();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_20E8D0C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20E8D0C40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D0C54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D0C6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D0C84(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_20E877A38();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_20E8D0E10(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_20E877A38();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_20E8D0FA8(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v17;
  __int128 v18;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20E867F44();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_20E877A38();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v17 = v8;
  *((_QWORD *)&v18 + 1) = &v7[80 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(&v7[80 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[80 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_20E860C04(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[80 * v3 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = 0;
  v11 = &v7[80 * v3];
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)&v18 = v11 + 80;
  v13 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v10) != v13; sub_20E8C0604((uint64_t)&v17[v10], (__int128 *)(v10 + i)))
    v10 -= 80;
  v15 = (void *)*a1;
  v14 = a1[1];
  *a1 = &v17[v10];
  for (*(_OWORD *)(a1 + 1) = v18; (void *)v14 != v15; v14 = sub_20E8C07B8(v14 - 80))
    ;
  if (v15)
    operator delete(v15);
  return v18;
}

void sub_20E8D1180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_20E8D11E8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20E8D11E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D11E8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_20E8C07B8(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20E8D1238(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a3)
    return result;
  v3 = result;
  v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    v6 = (_QWORD *)*result;
    v5 = result[1];
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = v5 - a2;
    if (v5 - a2 <= a3)
      goto LABEL_8;
  }
  else
  {
    v5 = *((unsigned __int8 *)result + 23);
    v6 = result;
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = *((unsigned __int8 *)result + 23) - a2;
    if (v7 <= a3)
      goto LABEL_8;
  }
  result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)v3 + 23);
LABEL_8:
  v9 = v5 - v8;
  if ((v4 & 0x80) != 0)
    v3[1] = v9;
  else
    *((_BYTE *)v3 + 23) = v9 & 0x7F;
  *((_BYTE *)v6 + v9) = 0;
  return result;
}

BOOL sub_20E8D12C8(int __c)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  _BYTE *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A5A810);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A5A810))
  {
    qword_254A5A8F0 = (uint64_t)operator new(0x48uLL);
    *(_OWORD *)&qword_254A5A8F8 = xmmword_2102DAFE0;
    strcpy((char *)qword_254A5A8F0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5A8F0, &dword_20E81F000);
    __cxa_guard_release(qword_254A5A810);
  }
  if (byte_254A5A907 >= 0)
    v3 = byte_254A5A907;
  else
    v3 = qword_254A5A8F8;
  if (!v3)
    return 1;
  if (byte_254A5A907 >= 0)
    v4 = &qword_254A5A8F0;
  else
    v4 = (uint64_t *)qword_254A5A8F0;
  v5 = memchr(v4, __c, v3);
  return !v5 || v5 - (_BYTE *)v4 == -1;
}

void sub_20E8D13C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254A5A810);
  _Unwind_Resume(a1);
}

void sub_20E8D13D8(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_20E867CBC(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_20E867BF8(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_20E867CBC(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_20E867BF8(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_20E860C04(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_20E867F44();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_20E860C04(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

unint64_t sub_20E8D177C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_20E8D1BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8D1BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

char *sub_20E8D1C10(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20E860C04(result, *(void **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v10 = *v11;
          *((_QWORD *)result + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)result = v10;
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E8D1CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8D1D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D1D40(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v4;
  void *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  sub_20E8D1E78(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_20E866BE0(a1 + 136, *(char **)(a1 + 144));
  sub_20E866B68(a1 + 112, *(_QWORD *)(a1 + 120));
  sub_20E8D1F68(a1 + 88, *(_QWORD *)(a1 + 96));
  v2 = *(char **)(a1 + 64);
  if (v2)
  {
    while (1)
    {
      v7 = *(char **)v2;
      v8 = (char *)*((_QWORD *)v2 + 8);
      if (v8 == v2 + 40)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_13:
        (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v7;
      if (!v7)
        goto LABEL_2;
    }
    v8 = v2 + 40;
    v9 = 4;
    goto LABEL_13;
  }
LABEL_2:
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      v10 = *(char **)v4;
      v11 = (char *)*((_QWORD *)v4 + 8);
      if (v11 == v4 + 40)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_21:
        (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
      }
      if (v4[39] < 0)
        operator delete(*((void **)v4 + 2));
      operator delete(v4);
      v4 = v10;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v4 + 40;
    v12 = 4;
    goto LABEL_21;
  }
LABEL_5:
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_20E8D1E78(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (a2)
  {
    sub_20E8D1E78(a1, *a2);
    sub_20E8D1E78(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[13];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)a2[11];
    if (!v7)
      goto LABEL_11;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((*((char *)a2 + 79) & 0x80000000) == 0)
      {
LABEL_12:
        if ((*((char *)a2 + 55) & 0x80000000) == 0)
        {
LABEL_13:
          operator delete(a2);
          return;
        }
        goto LABEL_17;
      }
    }
    else
    {
LABEL_11:
      if ((*((char *)a2 + 79) & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete((void *)a2[7]);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_17:
    operator delete((void *)a2[4]);
    operator delete(a2);
  }
}

void sub_20E8D1F68(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20E8D1F68(a1, *(_QWORD *)a2);
    sub_20E8D1F68(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t **sub_20E8D2008(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_20E868578(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

uint64_t *sub_20E8D2134(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

void sub_20E8D24FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D2520(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D2538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002102DA2C9)
    return a1 + 24;
  if (((v3 & 0x80000002102DA2C9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002102DA2C9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002102DA2C9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_20E8D25B8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

_QWORD *sub_20E8D27E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20E8D2B28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D2B3C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_20E877A38();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_20E8D2CE8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20E8D2E1C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20E8D2F5C(a1, i + 2, i + 2);
  return a1;
}

void sub_20E8D2F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D2F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8D2F5C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20E8D32A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20E8D32B4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D36BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D36D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D36D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20E8D3738(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_20E8D3890((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_20E8D3890(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_20E8D0C84((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_20E8D0E10((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_20E877A38();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_20E877A38();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_20E877A38();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_20E877A38();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_20E8D417C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20E8D41C8()
{
  __cxa_end_catch();
  JUMPOUT(0x20E8D41D0);
}

uint64_t sub_20E8D41E8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E8D42B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D42D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D42EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D4360()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8D4374()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9AF478;
  return result;
}

void sub_20E8D4398(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9AF478;
}

_QWORD *sub_20E8D43B0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  *v2 = off_24C9AEFF0;
  sub_20E8C4418();
  v2[1] = off_24C9AEF70;
  v3 = v2 + 2;
  if (byte_254A5A9EF < 0)
  {
    sub_20E860C04(v3, (void *)xmmword_254A5A9D8, *((unint64_t *)&xmmword_254A5A9D8 + 1));
  }
  else
  {
    *(_OWORD *)v3 = xmmword_254A5A9D8;
    v2[4] = unk_254A5A9E8;
  }
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24C9AF4F8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_20E8D4470(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D448C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402AB95488);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D44B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8D451C()
{
  return &unk_24C9AF538;
}

void sub_20E8D452C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4550(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4568(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternL"
                     "ayoutConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1"
                                "_25PatternLayoutConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternLayoutConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternLayoutConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D45DC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8D45F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9AF558;
  return result;
}

void sub_20E8D4614(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9AF558;
}

_QWORD *sub_20E8D462C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  sub_20E8C5868(v2);
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24C9AF5D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_20E8D4698(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D46B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D46D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8D4744()
{
  return &unk_24C9AF618;
}

void sub_20E8D4754(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4778(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4790(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAp"
                     "penderConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_"
                                "27ConsoleAppenderConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAppenderConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAppenderConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D4804(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4828(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002102DA93CLL)
    return a1 + 24;
  if (((v3 & 0x80000002102DA93CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002102DA93CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002102DA93CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_20E8D48C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D48E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4900(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_N"
                                "S2_11OFileHandleEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D4974(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4998(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D49B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002102DAB48)
    return a1 + 24;
  if (((v3 & 0x80000002102DAB48 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002102DAB48))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002102DAB48 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_20E8D4A34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4A58(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4A70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_N"
                                "S2_11IFileHandleEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D4AE0(uint64_t a1, char *a2)
{
  std::mutex *v4;

  if (a2)
  {
    sub_20E8D4AE0(a1, *(_QWORD *)a2);
    sub_20E8D4AE0(a1, *((_QWORD *)a2 + 1));
    v4 = (std::mutex *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
    {
      std::mutex::~mutex(v4);
      MEMORY[0x212BC6398]();
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20E8D4B64(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

uint64_t *sub_20E8D4C7C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x40uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x40uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_20E860C04(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v22 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  v20[7] = v22;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v23 = (uint64_t *)**a1;
  v24 = v20;
  if (v23)
  {
    *a1 = v23;
    v24 = *v6;
  }
  sub_20E868578(a1[1], v24);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_20E8D4E0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D4E24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D4E48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D4E60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8D4ED4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8D4EE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9AF7C8;
  return result;
}

void sub_20E8D4F0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9AF7C8;
}

_QWORD *sub_20E8D4F24@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  sub_20E8C7718(v2);
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24C9AF838;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_20E8D4F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D4FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D4FD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E8D503C()
{
  return &unk_24C9AF878;
}

void sub_20E8D504C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D5070(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E8D5088(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppen"
                     "derConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_"
                                "24FileAppenderConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppenderConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppenderConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E8D50F8(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *sub_20E8D5190(uint64_t **a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char *v6;
  _OWORD *v7;
  char *v8;
  char **v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  char *v21;

  v4 = (char **)(a1 + 1);
  v5 = (char *)operator new(0x50uLL);
  v6 = v5;
  v21 = v5;
  v7 = v5 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v5 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v8 = *v4;
  v9 = v4;
  if (*v4)
  {
    if (v6[55] >= 0)
    {
      v10 = v6[55];
    }
    else
    {
      v7 = (_OWORD *)*((_QWORD *)v6 + 4);
      v10 = *((_QWORD *)v6 + 5);
    }
    while (1)
    {
      v4 = (char **)v8;
      v13 = (const void *)*((_QWORD *)v8 + 4);
      v11 = v8 + 32;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v10)
        v17 = v10;
      else
        v17 = v16;
      v18 = memcmp(v7, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v8 = v4[1];
        if (!v8)
        {
          v9 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v10 >= v16)
          goto LABEL_22;
LABEL_8:
        v8 = *v4;
        v9 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v4;
  *v9 = v6;
  v19 = (uint64_t *)**a1;
  if (v19)
  {
    *a1 = v19;
    v6 = *v9;
  }
  sub_20E868578(a1[1], (uint64_t *)v6);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v21;
}

void sub_20E8D52E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D52F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D52F8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_20E8D5360(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_20E8D558C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v23;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (!v5)
  {
    v10 = (uint64_t **)(a1 + 8);
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return (uint64_t *)v10;
    }
    else if (v16 >= v9)
    {
      return (uint64_t *)v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  sub_20E8D56E0(a1, a3, (uint64_t)&v23);
  v20 = v23;
  *v23 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v21 = **(_QWORD **)a1;
  if (v21)
  {
    *(_QWORD *)a1 = v21;
    v20 = *v6;
  }
  sub_20E868578(*(uint64_t **)(a1 + 8), v20);
  ++*(_QWORD *)(a1 + 16);
  return v23;
}

_BYTE *sub_20E8D56E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)v6 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    v6[6] = *(_QWORD *)(a2 + 16);
  }
  result = v7 + 7;
  if (*(char *)(a2 + 47) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 24);
    v7[9] = *(_QWORD *)(a2 + 40);
  }
  v9 = *(_QWORD *)(a2 + 56);
  v7[10] = *(_QWORD *)(a2 + 48);
  v7[11] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a2 + 72);
  v7[12] = *(_QWORD *)(a2 + 64);
  v7[13] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E8D57D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  void **v4;

  if (v2[55] < 0)
  {
    operator delete(*v4);
    *v1 = 0;
    sub_20E8D5818(v3, v2);
    _Unwind_Resume(a1);
  }
  *v1 = 0;
  sub_20E8D5818(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20E8D5818(uint64_t a1, char *__p)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 13);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
    if (!v6)
      goto LABEL_11;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[79] & 0x80000000) == 0)
      {
LABEL_12:
        if ((__p[55] & 0x80000000) == 0)
        {
LABEL_13:
          operator delete(__p);
          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
LABEL_11:
      if ((__p[79] & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete(*((void **)__p + 7));
    if ((__p[55] & 0x80000000) == 0)
      goto LABEL_13;
LABEL_18:
    operator delete(*((void **)__p + 4));
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_13;
}

uint64_t *sub_20E8D5900(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t **sub_20E8D5B2C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (char *)operator new(0x48uLL);
          v21 = v20 + 32;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (char *)operator new(0x48uLL);
  v21 = v20 + 32;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_20E860C04(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_20E868578(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_20E8D5CBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D5CD0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20E8D5E10(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20E8D5DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8D50F8(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D5DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8D50F8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D5E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v39, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_20E8D622C(a1, v10, a3, (uint64_t)v39);
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_65:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v27)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v27)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v36 & v10;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v10));
      if (v27)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11)
          v37 %= v11;
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v27)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v39[0] = *v27;
  *v27 = v39[0];
LABEL_89:
  v14 = (uint64_t *)v39[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D6214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D6324((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D622C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20E8D62EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20E8D6324(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D6300(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_20E8D6324(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D6324(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 64);
    if (v3 == (_QWORD *)(v2 + 40))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 40);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_20E8D63A0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20E8D64E0(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20E8D64B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8D50F8(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D64CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8D50F8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D64E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v39, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_20E8D68FC(a1, v10, a3, (uint64_t)v39);
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_65:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v27)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v27)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v36 & v10;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v10));
      if (v27)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11)
          v37 %= v11;
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v27)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v39[0] = *v27;
  *v27 = v39[0];
LABEL_89:
  v14 = (uint64_t *)v39[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D68E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D6324((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8D68FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20E8D69BC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20E8D6324(v1);
  _Unwind_Resume(a1);
}

void sub_20E8D69D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_20E8D6324(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D69F4(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_20E8D6C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x48uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = (_QWORD *)(a3 + 48);
  v26 = *(_QWORD *)(a3 + 48);
  if (v26)
  {
    if (v26 == a3 + 24)
    {
      *((_QWORD *)v14 + 8) = v14 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      goto LABEL_57;
    }
    *((_QWORD *)v14 + 8) = v26;
  }
  else
  {
    v27 = v14 + 64;
  }
  *v27 = 0;
LABEL_57:
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28)
  {
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v31)
    {
LABEL_60:
      *(_QWORD *)v14 = *v31;
LABEL_95:
      *v31 = v14;
      goto LABEL_96;
    }
  }
  else
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_71:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v31)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v31)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      if (v31)
        goto LABEL_60;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v30 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_95;
  }
LABEL_96:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D7070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D6324((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D7088(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_20E8D72B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x48uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = (_QWORD *)(a3 + 48);
  v26 = *(_QWORD *)(a3 + 48);
  if (v26)
  {
    if (v26 == a3 + 24)
    {
      *((_QWORD *)v14 + 8) = v14 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      goto LABEL_57;
    }
    *((_QWORD *)v14 + 8) = v26;
  }
  else
  {
    v27 = v14 + 64;
  }
  *v27 = 0;
LABEL_57:
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28)
  {
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v31)
    {
LABEL_60:
      *(_QWORD *)v14 = *v31;
LABEL_95:
      *v31 = v14;
      goto LABEL_96;
    }
  }
  else
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_71:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v31)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v31)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      if (v31)
        goto LABEL_60;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v30 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_95;
  }
LABEL_96:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D7704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D6324((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D771C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v26[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E8D7B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8D7B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E8D7B80(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_20E8D7BCC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_20E8D7DF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8D7E08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AF898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8D7E38(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20E8D7E48()
{
  void *v0;

  operator delete(v0);
}

void sub_20E8D7E50()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 16));
}

uint64_t sub_20E8D7E58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t sub_20E8D7E64()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

unint64_t sub_20E8D7E78(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;

  v3 = ((a2 >> 7) ^ 0x13701D) & a3;
  v4 = 0;
  for (i = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080)
  {
    v4 += 8;
    v3 = (v4 + v3) & a3;
  }
  return (v3 + (__clz(__rbit64(i)) >> 3)) & a3;
}

unint64_t sub_20E8D7ED4(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int v13;

  v2 = result + a2;
  if (a2 >= 1)
  {
    v3 = (_DWORD *)(result + 8);
    if (v2 > result + 8)
      v3 = (_DWORD *)(result + a2);
    v4 = (unint64_t)v3 + ~result;
    v5 = (unint64_t *)result;
    if (v4 < 0x18)
      goto LABEL_12;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)(result + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
    v7 = (int8x16_t *)(result + 16);
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while ((unint64_t)v5 < v2);
    }
  }
  v13 = *(_DWORD *)result;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(result + 3);
  *(_DWORD *)(v2 + 1) = v13;
  *(_BYTE *)v2 = -1;
  return result;
}

uint64_t sub_20E8D7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint8x8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  uint8x8_t *v13;
  uint16x8_t *v14;
  uint8x8_t *v15;
  uint64_t v16;
  uint8x8_t *v17;
  uint64_t v18;
  uint8x8_t *v19;
  uint64_t v20;
  uint8x8_t *v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  unint64_t v25;
  int16x8_t v26;
  uint8x8_t *v27;
  uint8x8_t *v28;
  uint8x8_t *v29;
  uint64_t v30;
  uint8x8_t *v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const float *v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  const float *v47;
  int32x4_t v48;
  int32x4_t v49;
  const float *v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  const float *v54;
  int32x4_t v55;
  uint16x8_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint16x8_t v63;
  int32x4_t v64;
  const float *v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  const float *v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  const float *v74;
  int32x4_t v75;
  int32x4_t v76;
  const float *v77;
  int32x4_t v78;
  uint16x8_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  _DWORD *v96;
  int v97;
  _OWORD *v98;
  int8x16_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  unsigned __int32 v104;
  char v105;
  uint8x8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8x8_t *v112;
  uint8x8_t *v113;
  uint8x8_t *v114;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = 0;
    v8 = *(uint8x8_t **)a1;
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v11 = v9 * (v6 - 1);
    v111 = *(_QWORD *)(a2 + 24);
    v110 = *(_QWORD *)(a5 + 24);
    v12 = *(int32x4_t *)(a3 + 12);
    v13 = *(uint8x8_t **)a5;
    v14 = *(uint16x8_t **)a2;
    v15 = (uint8x8_t *)((char *)v8 + v11);
    if (v11 <= 0)
      v16 = 0;
    else
      v16 = v9;
    v17 = (uint8x8_t *)((char *)v8 + v16);
    if (v16 >= v11)
      v18 = 0;
    else
      v18 = v9;
    v19 = (uint8x8_t *)((char *)v17 + v18);
    if (&v17->i8[v18] >= (__int8 *)v15)
      v20 = 0;
    else
      v20 = v9;
    v21 = (uint8x8_t *)((char *)v19 + v20);
    v22 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 0);
    v23 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 1);
    v24 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 2);
    v25 = v10 - 8;
    v26 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 3);
    v27 = v8;
    v28 = v8;
    v29 = v8;
    v108 = v9;
    v109 = v6;
    v107 = v15;
    do
    {
      v31 = v21;
      v32 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v22, (int16x8_t)vmovl_u8(*v29)), v23, (int16x8_t)vaddl_u8(*v28, *v17)), v24, (int16x8_t)vaddl_u8(*v27, *v19)), v26, (int16x8_t)vaddl_u8(*v21, *v8));
      v33 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v22, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v29->i8)), v23, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v28->i8, *(uint8x16_t *)v17->i8)), v24, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v27->i8, *(uint8x16_t *)v19->i8)), v26, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v21->i8, *(uint8x16_t *)v8->i8));
      v34 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v32.i8, 1uLL);
      v35 = (int32x4_t)vshll_high_n_u16(v32, 1uLL);
      v36 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v33.i8, 1uLL);
      v37 = vdupq_lane_s32(*(int32x2_t *)v34.i8, 0);
      v38 = (int8x16_t)vshll_high_n_u16(v33, 1uLL);
      v39 = (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 4uLL);
      v40 = (int32x4_t)vextq_s8((int8x16_t)v35, v36, 4uLL);
      v41 = (const float *)(a3 + 12);
      v42 = (int32x4_t)vld1q_dup_f32(v41);
      v43 = vextq_s8(v36, v38, 4uLL);
      v44 = (int32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v40, 8uLL);
      v45 = (int32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v40, 4uLL);
      v46 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v39, 8uLL), v39);
      v47 = (const float *)(a3 + 16);
      v48 = (int32x4_t)vld1q_dup_f32(v47);
      v49 = vaddq_s32(v44, v40);
      v50 = (const float *)(a3 + 20);
      v51 = (int32x4_t)vld1q_dup_f32(v50);
      v52 = vmulq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v39, 4uLL), v45), v51);
      v53 = vaddq_s32(v44, v37);
      v54 = (const float *)(a3 + 24);
      v55 = (int32x4_t)vld1q_dup_f32(v54);
      v56 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v52, v34, v42), v46, v48), v53, v55), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v45, (int32x4_t)vextq_s8((int8x16_t)v40, v43, 4uLL)), v51), v35, v42), v49, v48), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v40, v43, 8uLL), v39), v55), 0xAuLL);
      *v14 = v56;
      *v13 = vqrshrn_n_u16(v56, 8uLL);
      v113 = v19;
      v114 = v17;
      v112 = v27;
      if (v25 >= 0x10)
      {
        v58 = (char *)&v17[1] + 5;
        v59 = 1;
        v60 = 1;
        v61 = v40;
        v62 = (int32x4_t)v43;
        do
        {
          v63 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v22, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v29[v60] + 5))), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v28[v60] + 5), *(uint8x8_t *)&v58[v60 * 8 - 8]), v23), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v27[v60] + 5), *(uint8x8_t *)((char *)&v19[v60] + 5)), v24), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v31[v60] + 5), *(uint8x8_t *)((char *)&v8[v60] + 5)), v26);
          v40 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 1uLL);
          v43 = (int8x16_t)vshll_high_n_u16(v63, 1uLL);
          v64 = (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v62, 0xCuLL);
          v65 = (const float *)(a3 + 12);
          v66 = (int32x4_t)vld1q_dup_f32(v65);
          v67 = (int32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v40, 8uLL);
          v68 = (int32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v40, 4uLL);
          v69 = (const float *)(a3 + 16);
          v70 = (int32x4_t)vld1q_dup_f32(v69);
          v71 = vmulq_s32(v70, vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v62, 8uLL), v62));
          v72 = vaddq_s32(v67, v40);
          v73 = vaddq_s32(v68, (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v62, 4uLL));
          v74 = (const float *)(a3 + 20);
          v75 = (int32x4_t)vld1q_dup_f32(v74);
          v76 = vaddq_s32(v67, v61);
          v77 = (const float *)(a3 + 24);
          v78 = (int32x4_t)vld1q_dup_f32(v77);
          v79 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v71, v66, v64), v73, v75), v76, v78), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v68, (int32x4_t)vextq_s8((int8x16_t)v40, v43, 4uLL)), v75), (int32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v40, 0xCuLL), v66), v72, v70), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v40, v43, 8uLL), v62), v78), 0xAuLL);
          v14[v59] = v79;
          v13[v60] = vqrshrn_n_u16(v79, 8uLL);
          v57 = v60 * 8 + 8;
          ++v59;
          v80 = v60 * 8 + 16;
          ++v60;
          v61 = v40;
          v62 = (int32x4_t)v43;
        }
        while (v80 <= v25);
      }
      else
      {
        v57 = 8;
      }
      v81 = a4 + 4 * v57;
      *(int32x4_t *)(v81 - 12) = v40;
      *(int8x16_t *)(v81 + 4) = v43;
      v82 = v57 | 5;
      if (v10 > (v57 | 5))
      {
        v83 = 0;
        v84 = (char *)v8 + v82;
        v85 = (char *)v31 + v82;
        v86 = (char *)v27 + v82;
        v87 = (char *)v19 + v82;
        v88 = (char *)v28 + v82;
        v89 = (char *)v114 + v82;
        v90 = (char *)v29 + v82;
        v91 = a4 + 4 * v82;
        do
        {
          v92 = *(_DWORD *)(a3 + 12) * v90[v83];
          v93 = 4 * v83;
          *(_DWORD *)(v91 + v93) = v92;
          v94 = v92 + (v88[v83] + v89[v83]) * *(_DWORD *)(a3 + 16);
          *(_DWORD *)(v91 + v93) = v94;
          v95 = v94 + (v86[v83] + v87[v83]) * *(_DWORD *)(a3 + 20);
          *(_DWORD *)(v91 + v93) = v95;
          *(_DWORD *)(v91 + v93) = v95 + (v84[v83] + v85[v83]) * *(_DWORD *)(a3 + 24);
          ++v83;
        }
        while (v10 - (v57 | 5) != v83);
        v82 = v10;
        v9 = v108;
        v6 = v109;
        v15 = v107;
      }
      v96 = (_DWORD *)(a4 + 4 * v82);
      v97 = *(v96 - 1);
      v96[1] = v97;
      v96[2] = v97;
      *v96 = v97;
      if (v57 < v10)
      {
        v98 = (_OWORD *)(a4 + 4 * v57);
        do
        {
          v99 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)v98 - 12));
          v100 = *(int32x4_t *)v98;
          v98 = (_OWORD *)((char *)v98 + 4);
          v101 = (int32x4_t)vextq_s8(v99, v99, 8uLL);
          v101.i32[0] = 0;
          v102 = vmulq_s32(vaddq_s32(v101, v100), v12);
          v103 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), v102);
          v104 = (vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v103.i8, 1), v103).u32[0] + 512) >> 10;
          v14->i16[v57] = v104;
          if ((int)((v104 + (1 << (a6 - 1))) >> a6) >= 255)
            v105 = -1;
          else
            v105 = (v104 + (1 << (a6 - 1))) >> a6;
          v13->i8[v57++] = v105;
        }
        while (v10 != v57);
      }
      v8 = v112;
      v14 = (uint16x8_t *)((char *)v14 + v111);
      v13 = (uint8x8_t *)((char *)v13 + v110);
      if (v31 >= v15)
        v30 = 0;
      else
        v30 = v9;
      v21 = (uint8x8_t *)((char *)v31 + v30);
      ++v7;
      v27 = v28;
      v28 = v29;
      v17 = v113;
      v29 = v114;
      v19 = v31;
    }
    while (v7 != v6);
  }
  return 0;
}

uint64_t sub_20E8D8454(uint64_t a1, uint16x8_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v10;
  uint8x8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int v19;
  int32x4_t v20;
  int32x4_t v21;
  uint8x8_t *v22;
  uint16x8_t *v23;
  uint16x8_t *v24;
  uint16x8_t *v25;
  uint16x8_t *v26;
  uint64_t v27;
  uint8x8_t *v28;
  uint64_t v29;
  uint8x8_t *v30;
  uint64_t v31;
  uint8x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  unint64_t v37;
  int32x4_t v38;
  uint16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x8_t *v43;
  uint8x8_t *v44;
  uint8x8_t *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  uint16x8_t *v52;
  uint8x8_t *v53;
  uint16x8_t v54;
  uint16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint16x8_t v65;
  unint64_t v66;
  uint16x8_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint16x8_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  _DWORD *v96;
  _OWORD *v97;
  int8x16_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  unsigned __int32 v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  __int16 v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  uint64_t v126;
  char *v127;
  unsigned int v128;
  uint16x8_t *v129;
  uint16x8_t *v130;
  uint16x8_t *v131;
  int16x8_t *v132;
  unint64_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  uint64_t v159;
  uint8x8_t *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint16x8_t *v167;
  uint8x8_t *v168;
  uint8x8_t *v169;
  uint8x8_t *v170;
  uint8x8_t *v171;

  v8 = *(char **)a7;
  v166 = *(_QWORD *)(a1 + 8);
  if (v166)
  {
    v10 = 0;
    v11 = *(uint8x8_t **)a1;
    v13 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    v14 = v12 * (v166 - 1);
    v15 = *(_QWORD *)a1 + v14;
    v164 = *(_QWORD *)(a5 + 24);
    v162 = *(_QWORD *)(a7 + 24);
    v16 = *(int32x4_t *)(a3 + 12);
    v17 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
    v18 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 1);
    v19 = 1 << (a6 - 1);
    v20 = vdupq_laneq_s32(v16, 2);
    v21 = vdupq_laneq_s32(v16, 3);
    v22 = *(uint8x8_t **)a5;
    v23 = *a2;
    v24 = a2[3];
    v25 = (uint16x8_t *)((char *)*a2 + 2 * (_QWORD)v24);
    v26 = (uint16x8_t *)((char *)v24 + (_QWORD)*a2);
    if (v14 <= 0)
      v27 = 0;
    else
      v27 = *(_QWORD *)(a1 + 24);
    v28 = (uint8x8_t *)((char *)v11 + v27);
    if (v27 >= v14)
      v29 = 0;
    else
      v29 = *(_QWORD *)(a1 + 24);
    v30 = (uint8x8_t *)((char *)v28 + v29);
    v165 = v15;
    if ((unint64_t)v28 + v29 >= v15)
      v31 = 0;
    else
      v31 = *(_QWORD *)(a1 + 24);
    v32 = (uint8x8_t *)((char *)v30 + v31);
    v33 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 0);
    v34 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 1);
    v35 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 2);
    v36 = vdupq_lane_s16((int16x4_t)0x1000E003E0066, 3);
    v37 = v13 - 8;
    v38 = vdupq_n_s32(a8);
    v39.i64[0] = 0x4000400040004;
    v39.i64[1] = 0x4000400040004;
    v40.i64[0] = 0x900000009000;
    v40.i64[1] = 0x900000009000;
    v41.i64[0] = 0x7F0000007FLL;
    v41.i64[1] = 0x7F0000007FLL;
    v42.i64[0] = 0x800000008000;
    v42.i64[1] = 0x800000008000;
    v43 = *(uint8x8_t **)a1;
    v44 = *(uint8x8_t **)a1;
    v45 = *(uint8x8_t **)a1;
    v163 = 1 << (a6 - 1);
    v159 = a4;
    v157 = v17;
    v158 = v16;
    v155 = v20;
    v156 = v18;
    v153 = v33;
    v154 = v21;
    v151 = v35;
    v152 = v34;
    v150 = v36;
    v149 = v38;
    do
    {
      v52 = v26;
      v26 = v25;
      v53 = v30;
      v30 = v32;
      v54 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v33, (int16x8_t)vmovl_u8(*v45)), v34, (int16x8_t)vaddl_u8(*v44, *v28)), v35, (int16x8_t)vaddl_u8(*v43, *v53)), v36, (int16x8_t)vaddl_u8(*v32, *v11));
      v55 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v33, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v45->i8)), v34, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v44->i8, *(uint8x16_t *)v28->i8)), v35, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v43->i8, *(uint8x16_t *)v53->i8)), v36, (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v32->i8, *(uint8x16_t *)v11->i8));
      v56 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v54.i8, 1uLL);
      v57 = (int32x4_t)vshll_high_n_u16(v54, 1uLL);
      v58 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v55.i8, 1uLL);
      v59 = vdupq_lane_s32(*(int32x2_t *)v56.i8, 0);
      v60 = (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 4uLL);
      v61 = (int32x4_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v62 = vextq_s8(v58, (int8x16_t)vshll_high_n_u16(v55, 1uLL), 4uLL);
      v63 = (int32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v61, 8uLL);
      v64 = (int32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v61, 4uLL);
      v65 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 4uLL), v64), v20), v56, v17), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 8uLL), v60), v18), vaddq_s32(v63, v59), v21), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v64, (int32x4_t)vextq_s8((int8x16_t)v61, v62, 4uLL)), v20), v57,
                                v17),
                              vaddq_s32(v63, v61),
                              v18),
                            vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v61, v62, 8uLL), v60),
                            v21),
                          0xAuLL);
      *v25 = v65;
      *v22 = vqrshrn_n_u16(v65, 8uLL);
      v170 = v44;
      v171 = v43;
      v168 = v53;
      v169 = v45;
      if (v37 >= 0x10)
      {
        v67 = v25 + 1;
        v68 = (char *)&v44[1] + 5;
        v69 = (char *)&v53[1] + 5;
        v70 = 1;
        v71 = v61;
        v72 = (int32x4_t)v62;
        do
        {
          v73 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v33, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v45[v70] + 5))), (int16x8_t)vaddl_u8(*(uint8x8_t *)&v68[v70 * 8 - 8], *(uint8x8_t *)((char *)&v28[v70] + 5)), v34), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v43[v70] + 5), *(uint8x8_t *)&v69[v70 * 8 - 8]), v35), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v30[v70] + 5), *(uint8x8_t *)((char *)&v11[v70] + 5)), v36);
          v61 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v73.i8, 1uLL);
          v62 = (int8x16_t)vshll_high_n_u16(v73, 1uLL);
          v74 = (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v61, 8uLL);
          v75 = (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v61, 4uLL);
          v76 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL), v72), v18), (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 0xCuLL), v17), vaddq_s32(v75, (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 4uLL)), v20), vaddq_s32(v74, v71), v21), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v75, (int32x4_t)vextq_s8((int8x16_t)v61, v62, 4uLL)), v20), (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v61, 0xCuLL),
                                    v17),
                                  vaddq_s32(v74, v61),
                                  v18),
                                vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v61, v62, 8uLL), v72),
                                v21),
                              0xAuLL);
          *v67++ = v76;
          v22[v70] = vqrshrn_n_u16(v76, 8uLL);
          v66 = v70 * 8 + 8;
          v77 = v70 * 8 + 16;
          ++v70;
          v71 = v61;
          v72 = (int32x4_t)v62;
        }
        while (v77 <= v37);
      }
      else
      {
        v66 = 8;
      }
      v78 = a4 + 4 * v66;
      *(int32x4_t *)(v78 - 12) = v61;
      *(int8x16_t *)(v78 + 4) = v62;
      v79 = v66 | 5;
      v167 = v23;
      if (v13 <= (v66 | 5))
      {
        v94 = v66 | 4;
        v93 = v13 - 1;
      }
      else
      {
        v80 = 0;
        v81 = (char *)v11 + v79;
        v82 = (char *)v30 + v79;
        v83 = (char *)v43 + v79;
        v84 = (char *)v168 + v79;
        v85 = (char *)v170 + v79;
        v86 = (char *)v28 + v79;
        v87 = (char *)v169 + v79;
        v88 = a4 + 4 * v79;
        do
        {
          v89 = *(_DWORD *)(a3 + 12) * v87[v80];
          v90 = 4 * v80;
          *(_DWORD *)(v88 + v90) = v89;
          v91 = v89 + (v85[v80] + v86[v80]) * *(_DWORD *)(a3 + 16);
          *(_DWORD *)(v88 + v90) = v91;
          v92 = v91 + (v83[v80] + v84[v80]) * *(_DWORD *)(a3 + 20);
          *(_DWORD *)(v88 + v90) = v92;
          *(_DWORD *)(v88 + v90) = v92 + (v81[v80] + v82[v80]) * *(_DWORD *)(a3 + 24);
          ++v80;
        }
        while (v13 - (v66 | 5) != v80);
        v93 = v13 - 1;
        v94 = v13 - 1;
        v79 = v13;
        v19 = v163;
        v37 = v13 - 8;
      }
      v95 = *(_DWORD *)(a4 + 4 * v94);
      v96 = (_DWORD *)(a4 + 4 * v79);
      v96[1] = v95;
      v96[2] = v95;
      *v96 = v95;
      if (v66 < v13)
      {
        v97 = (_OWORD *)(a4 + 4 * v66);
        do
        {
          v98 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)v97 - 12));
          v99 = *(int32x4_t *)v97;
          v97 = (_OWORD *)((char *)v97 + 4);
          v100 = (int32x4_t)vextq_s8(v98, v98, 8uLL);
          v100.i32[0] = 0;
          v101 = vmulq_s32(vaddq_s32(v100, v99), v16);
          v102 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), v101);
          v103 = (vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v102.i8, 1), v102).u32[0] + 512) >> 10;
          v26->i16[v66] = v103;
          if ((int)((v103 + v19) >> a6) >= 255)
            v104 = -1;
          else
            v104 = (v103 + v19) >> a6;
          v22->i8[v66++] = v104;
        }
        while (v13 != v66);
      }
      if (v10)
      {
        if (v10 != 1)
        {
          *(_WORD *)v8 = 0;
          if (v93 < 9)
          {
            v111 = 1;
            if (v93 <= 4)
              goto LABEL_44;
          }
          else
          {
            v105 = 16;
            do
            {
              v106 = 2 * (v105 - 15);
              v107 = v52[v105 / 8 - 2];
              v108 = *(uint16x8_t *)((char *)&v52[v105 / 8 - 1] - 12);
              *(int16x8_t *)&v8[v106] = vqrshrn_high_n_s32(vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vaddw_u16(vmlsl_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v26->i8[v106], *(uint16x4_t *)&v23->i8[v106]), *(uint16x4_t *)v107.i8), *(uint16x4_t *)&v52->i8[v106], (uint16x4_t)0x4000400040004), *(uint16x4_t *)v108.i8), v38), 5uLL), 3uLL), vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_high_u16(
                                                           vaddw_high_u16(vaddw_high_u16(vaddl_high_u16(*(uint16x8_t *)((char *)v26 + v106), *(uint16x8_t *)((char *)v23 + v106)), v107), v108), *(uint16x8_t *)((char *)v52 + v106), v39), v38), 5uLL), 3uLL);
              v109 = v105 + 8;
              v110 = v93 > v105;
              v105 += 8;
            }
            while (v110);
            v111 = v109 - 15;
            if (v93 <= v111 + 3)
            {
LABEL_44:
              v115 = v111;
              if (v93 > v111)
              {
                v116 = v111 + 1;
                v117 = v93 - v116;
                if (v93 < v116)
                  v117 = 0;
                v118 = v117 + 1;
                if (v118 < 0x18)
                  goto LABEL_48;
                v124 = v93 - v116;
                if (v93 < v116)
                  v124 = 0;
                v125 = __CFADD__(v111, (_DWORD)v124);
                if (-v111 < v124)
                  goto LABEL_48;
                if (v125)
                  goto LABEL_48;
                if (-2 - v111 < v124)
                  goto LABEL_48;
                if (HIDWORD(v124))
                  goto LABEL_48;
                v126 = 2 * v111;
                v127 = &v8[v126];
                if ((unint64_t)(v8 - (char *)v26) < 0x10)
                  goto LABEL_48;
                if ((unint64_t)(v8 - (char *)v23) < 0x10)
                  goto LABEL_48;
                if ((unint64_t)(v127 - ((char *)v52 + 2 * v116)) < 0x10)
                  goto LABEL_48;
                if ((unint64_t)(v8 - (char *)v52) < 0x10)
                  goto LABEL_48;
                v128 = v111 - 1;
                if ((unint64_t)(v127 - ((char *)v52 + 2 * v111 - 2)) < 0x10)
                  goto LABEL_48;
                v115 = (v118 & 0xFFFFFFFFFFFFFFF8) + v111;
                v111 += v118 & 0xFFFFFFF8;
                v129 = (uint16x8_t *)((char *)v52 + v126);
                v130 = (uint16x8_t *)((char *)v23 + v126);
                v131 = (uint16x8_t *)((char *)v26 + v126);
                v132 = (int16x8_t *)&v8[v126];
                v133 = v118 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v134 = *v129++;
                  v135 = v134;
                  v136 = *(uint16x8_t *)((char *)v52 + 2 * v128);
                  v137 = *(uint16x8_t *)((char *)v52 + 2 * v128 + 4);
                  v138 = *v130++;
                  v139 = v138;
                  v140 = *v131++;
                  v141 = vaddl_high_u16(v137, v136);
                  v142 = (int32x4_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v137.i8, *(uint16x4_t *)v136.i8), *(uint16x4_t *)v139.i8);
                  v143 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v135.i8, 2uLL);
                  v144 = vmulq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vaddw_high_u16(v141, v139), (int32x4_t)vshll_high_n_u16(v135, 2uLL)), v140), v38);
                  v145 = vmulq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v142, v143), *(uint16x4_t *)v140.i8), v38);
                  v146 = vdupq_n_s32(0xFF7FFF70);
                  v147 = vdupq_n_s32(0x7FFF6Fu);
                  *v132++ = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v146, v145), v42, vbslq_s8((int8x16_t)vcgtq_s32(v145, v147), v41, (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vshlq_n_s32(v145, 8uLL), v40), 0x10uLL))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v146, v144), v42, vbslq_s8((int8x16_t)vcgtq_s32(v144, v147), v41, (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vshlq_n_s32(v144, 8uLL), v40), 0x10uLL))));
                  v128 += 8;
                  v133 -= 8;
                }
                while (v133);
                v93 = v13 - 1;
                if (v118 != (v118 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_48:
                  v119 = v111 + 1;
                  do
                  {
                    while (1)
                    {
                      v122 = (v52->u16[v119] + v52->u16[v119 - 2] + v23->u16[v115] - 4 * v52->u16[v115] + v26->u16[v115])
                           * a8;
                      if (v122 >= -8388752)
                        break;
                      *(_WORD *)&v8[2 * v115] = 0x8000;
                      v123 = v119++;
                      v115 = v123;
                      if (v93 <= v123)
                        goto LABEL_55;
                    }
                    if (v122 <= 8388463)
                      v120 = ((v122 << 8) + 36864) >> 16;
                    else
                      v120 = 0x7FFF;
                    *(_WORD *)&v8[2 * v115] = v120;
                    v121 = v119++;
                    v115 = v121;
                  }
                  while (v93 > v121);
                }
              }
LABEL_55:
              *(_WORD *)&v8[2 * v93] = 0;
              v8 += v162;
              goto LABEL_14;
            }
          }
          v112 = v111 + 7;
          do
          {
            v113 = 2 * (v112 - 7);
            *(int16x4_t *)&v8[v113] = vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_u16(vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v26->i8[v113], *(uint16x4_t *)&v23->i8[v113]), *(uint16x4_t *)&v52[-1].i8[2 * v112]), *(uint16x4_t *)&v52->i8[2 * v112 - 12]), *(uint16x4_t *)&v52->i8[v113], (uint16x4_t)0x4000400040004), v38), 5uLL), 3uLL);
            v114 = v112 + 4;
            v110 = v93 > v112;
            v112 += 4;
          }
          while (v110);
          v111 = v114 - 7;
          goto LABEL_44;
        }
        v46 = v8;
        v161 = v30;
        v47 = a6;
        v48 = v8;
        v49 = a8;
        bzero(v46, 2 * *(_QWORD *)(a7 + 16));
        v42.i64[0] = 0x800000008000;
        v42.i64[1] = 0x800000008000;
        v41.i64[0] = 0x7F0000007FLL;
        v41.i64[1] = 0x7F0000007FLL;
        v40.i64[0] = 0x900000009000;
        v40.i64[1] = 0x900000009000;
        v39.i64[0] = 0x4000400040004;
        v39.i64[1] = 0x4000400040004;
        v38 = v149;
        v36 = v150;
        v37 = v13 - 8;
        v35 = v151;
        v34 = v152;
        v33 = v153;
        v21 = v154;
        v20 = v155;
        v18 = v156;
        v19 = v163;
        v17 = v157;
        v16 = v158;
        a8 = v49;
        v50 = v48;
        a6 = v47;
        v30 = v161;
        v10 = 1;
        a4 = v159;
        v8 = (char *)v50 + v162;
      }
      v23 = v167;
LABEL_14:
      v43 = v170;
      v44 = v169;
      v22 = (uint8x8_t *)((char *)v22 + v164);
      if ((unint64_t)v30 >= v165)
        v51 = 0;
      else
        v51 = v12;
      v32 = (uint8x8_t *)((char *)v30 + v51);
      ++v10;
      v11 = v171;
      v45 = v28;
      v28 = v168;
      v25 = v23;
      v23 = v52;
    }
    while (v10 != v166);
  }
  bzero(v8, 2 * *(_QWORD *)(a7 + 16));
  return 0;
}

uint64_t sub_20E8D8D84(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v8;
  uint8x8_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t *v14;
  uint16x8_t *v15;
  uint64_t v16;
  uint8x8_t *v17;
  uint64_t v18;
  uint8x8_t *v19;
  uint64_t v20;
  uint8x8_t *v21;
  uint64_t v22;
  uint8x8_t *v23;
  const __int16 *v24;
  int16x8_t v25;
  const __int16 *v26;
  int16x8_t v27;
  const __int16 *v28;
  int16x8_t v29;
  const __int16 *v30;
  int16x8_t v31;
  const __int16 *v32;
  unint64_t v33;
  int16x8_t v34;
  uint8x8_t *v35;
  uint8x8_t *v36;
  uint8x8_t *v37;
  uint8x8_t *v38;
  uint64_t v39;
  uint8x8_t *v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  uint32x4_t v50;
  uint16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint16x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  const float *v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  const float *v62;
  int32x4_t v63;
  const float *v64;
  int32x4_t v65;
  const float *v66;
  int32x4_t v67;
  const float *v68;
  int32x4_t v69;
  uint16x8_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  uint16x8_t v85;
  uint32x4_t v86;
  uint16x8_t v87;
  const float *v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  const float *v93;
  int32x4_t v94;
  const float *v95;
  int32x4_t v96;
  const float *v97;
  int32x4_t v98;
  const float *v99;
  int32x4_t v100;
  uint16x8_t v101;
  unint64_t v102;
  int32x4_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint8x8_t *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  float32x4_t *v122;
  const float *v123;
  float32x4_t v124;
  int32x4_t *v125;
  int v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  unsigned int v130;
  signed int v131;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint8x8_t *v139;
  uint8x8_t *v140;
  uint8x8_t *v141;
  uint8x8_t *v142;
  uint8x8_t *v143;
  uint8x8_t *v144;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = 0;
    v9 = *(uint8x8_t **)a1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = v11 * (v6 - 1);
    v13 = *(_QWORD *)a1 + v12;
    v138 = *(_QWORD *)(a2 + 24);
    v137 = *(_QWORD *)(a5 + 24);
    v14 = *(uint8x8_t **)a5;
    v15 = *(uint16x8_t **)a2;
    if (v12 <= 0)
      v16 = 0;
    else
      v16 = *(_QWORD *)(a1 + 24);
    v17 = (uint8x8_t *)((char *)v9 + v16);
    if (v16 >= v12)
      v18 = 0;
    else
      v18 = *(_QWORD *)(a1 + 24);
    v19 = (uint8x8_t *)((char *)v17 + v18);
    if ((unint64_t)v17 + v18 >= v13)
      v20 = 0;
    else
      v20 = *(_QWORD *)(a1 + 24);
    v21 = (uint8x8_t *)((char *)v19 + v20);
    if ((unint64_t)v19 + v20 >= v13)
      v22 = 0;
    else
      v22 = v11;
    v23 = (uint8x8_t *)((char *)v21 + v22);
    v24 = (const __int16 *)&unk_2102DB0EE;
    v25 = vld1q_dup_s16(v24);
    v26 = (const __int16 *)&unk_2102DB0F0;
    v27 = vld1q_dup_s16(v26);
    v28 = (const __int16 *)&unk_2102DB0F2;
    v29 = vld1q_dup_s16(v28);
    v30 = (const __int16 *)&unk_2102DB0F4;
    v31 = vld1q_dup_s16(v30);
    v32 = (const __int16 *)&unk_2102DB0F6;
    v33 = v10 - 8;
    v34 = vld1q_dup_s16(v32);
    v35 = v9;
    v36 = v9;
    v37 = v9;
    v38 = v9;
    v134 = v11;
    v135 = v6;
    v133 = v13;
    do
    {
      v40 = v23;
      v41 = (int16x8_t)vaddl_u8(*v37, *v17);
      v42 = (int16x8_t)vaddl_u8(*v36, *v19);
      v43 = (int16x8_t)vaddl_u8(*v21, *v35);
      v44 = (int16x8_t)vaddl_u8(*v23, *v9);
      v45 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v25, (int16x8_t)vmovl_u8(*v38)), v27, v41), v29, v42), v31, v43), v34, v44);
      v46 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v37->i8, *(int8x16_t *)v37->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v17->i8, *(int8x16_t *)v17->i8, 8uLL)).u64[0];
      v47 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v36->i8, *(int8x16_t *)v36->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v19->i8, *(int8x16_t *)v19->i8, 8uLL)).u64[0];
      v48 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v21->i8, *(int8x16_t *)v21->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v35->i8, *(int8x16_t *)v35->i8, 8uLL)).u64[0];
      v49 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v23->i8, *(int8x16_t *)v23->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v9->i8, *(int8x16_t *)v9->i8, 8uLL)).u64[0];
      v50 = vshll_n_u16((uint16x4_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v25.i8, (int16x4_t)*(_OWORD *)&vmovl_high_u8(*(uint8x16_t *)v38->i8)), *(int16x4_t *)v27.i8, v46), *(int16x4_t *)v29.i8, v47), *(int16x4_t *)v31.i8, v48), *(int16x4_t *)v34.i8, v49), 1uLL);
      v51 = (uint16x8_t)vaddq_s16(vaddq_s16(v42, v41), vaddq_s16(v43, v44));
      v52 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v45.i8, 1uLL), *(uint16x4_t *)v51.i8);
      v53 = (int32x4_t)vaddw_high_u16(vshll_high_n_u16(v45, 1uLL), v51);
      v54 = (uint16x4_t)vadd_s16(vadd_s16(v47, v46), vadd_s16(v48, v49));
      v55 = vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
      v56 = (int32x4_t)vaddw_u16(v50, v54);
      v57 = a3 + 4;
      v58 = (int32x4_t)vld1q_dup_f32(v57);
      v59 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v53, 4uLL);
      v60 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v53, 0xCuLL);
      v61 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v53, 8uLL);
      v62 = a3 + 5;
      v63 = (int32x4_t)vld1q_dup_f32(v62);
      v64 = a3 + 6;
      v65 = (int32x4_t)vld1q_dup_f32(v64);
      v66 = a3 + 7;
      v67 = (int32x4_t)vld1q_dup_f32(v66);
      v68 = a3 + 8;
      v69 = (int32x4_t)vld1q_dup_f32(v68);
      v70 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v55, v60), v67), v52, v58), vaddq_s32(v55, v53), v69), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v52, 8uLL), v61), v65), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v52, 0xCuLL), v59), v63), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v52, v56), v69), v53, v58), vaddq_s32(v61, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 8uLL)), v65), vaddq_s32(v60, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 4uLL)),
                              v63),
                            vaddq_s32(v59, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 0xCuLL)),
                            v67),
                          0xAuLL);
      *v15 = v70;
      *v14 = vqrshrn_n_u16(v70, 8uLL);
      v143 = v21;
      v144 = v19;
      v141 = v36;
      v142 = v35;
      v139 = v38;
      v140 = v37;
      if (v33 >= 0x10)
      {
        v72 = (char *)&v38[1] + 4;
        v73 = (char *)&v37[1] + 4;
        v74 = (char *)&v19[1] + 4;
        v75 = (char *)&v36[1] + 4;
        v76 = (char *)&v21[1] + 4;
        v77 = 1;
        v78 = 8;
        v79 = v53;
        v80 = v56;
        do
        {
          v81 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v73[v78 - 8], *(uint8x8_t *)((char *)&v17[(unint64_t)v78 / 8] + 4));
          v82 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v75[v78 - 8], *(uint8x8_t *)&v74[v78 - 8]);
          v83 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v76[v78 - 8], *(uint8x8_t *)((char *)&v35[(unint64_t)v78 / 8] + 4));
          v84 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v40[(unint64_t)v78 / 8] + 4), *(uint8x8_t *)((char *)&v9[(unint64_t)v78 / 8] + 4));
          v85 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v25, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v72[v78 - 8])), v81, v27), v82, v29), v83, v31), v84, v34);
          v86 = vshll_high_n_u16(v85, 1uLL);
          v87 = (uint16x8_t)vaddq_s16(vaddq_s16(v82, v81), vaddq_s16(v83, v84));
          v53 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v85.i8, 1uLL), *(uint16x4_t *)v87.i8);
          v88 = a3 + 4;
          v89 = (int32x4_t)vld1q_dup_f32(v88);
          v56 = (int32x4_t)vaddw_high_u16(v86, v87);
          v90 = (int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v53, 4uLL);
          v91 = (int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v53, 0xCuLL);
          v92 = (int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v53, 8uLL);
          v93 = a3 + 5;
          v94 = (int32x4_t)vld1q_dup_f32(v93);
          v95 = a3 + 6;
          v96 = (int32x4_t)vld1q_dup_f32(v95);
          v97 = a3 + 7;
          v98 = (int32x4_t)vld1q_dup_f32(v97);
          v99 = a3 + 8;
          v100 = (int32x4_t)vld1q_dup_f32(v99);
          v101 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v53, v79), v100), v89, v80), vaddq_s32(v92, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 8uLL)), v96), vaddq_s32(v90, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 0xCuLL)), v94), vaddq_s32(v91, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 4uLL)), v98), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v56, v80), v100), v53, v89), vaddq_s32(v92, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 8uLL)), v96), vaddq_s32(v91, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 4uLL)),
                                   v94),
                                 vaddq_s32(v90, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v56, 0xCuLL)),
                                 v98),
                               0xAuLL);
          v15[v77] = v101;
          v14[(unint64_t)v78 / 8] = vqrshrn_n_u16(v101, 8uLL);
          v71 = v78 + 8;
          ++v77;
          v102 = v78 + 16;
          v78 += 8;
          v79 = v53;
          v80 = v56;
        }
        while (v102 <= v33);
      }
      else
      {
        v71 = 8;
      }
      v103 = (int32x4_t *)(a4 + 4 * v71);
      v103[-1] = v53;
      *v103 = v56;
      v104 = v71 | 4;
      if (v10 > (v71 | 4))
      {
        v136 = v8;
        v105 = 0;
        v106 = (char *)v9 + v104;
        v107 = (char *)v40 + v104;
        v108 = (char *)v142 + v104;
        v109 = (char *)v143 + v104;
        v110 = (char *)v141 + v104;
        v111 = (char *)v144 + v104;
        v112 = (char *)v140 + v104;
        v113 = v17;
        v114 = (char *)v17 + v104;
        v115 = (char *)v139 + v104;
        v116 = a4 + 4 * v104;
        do
        {
          v117 = *((_DWORD *)a3 + 4) * v115[v105];
          v118 = 4 * v105;
          *(_DWORD *)(v116 + v118) = v117;
          v119 = v117 + (v112[v105] + v114[v105]) * *((_DWORD *)a3 + 5);
          *(_DWORD *)(v116 + v118) = v119;
          v120 = v119 + (v110[v105] + v111[v105]) * *((_DWORD *)a3 + 6);
          *(_DWORD *)(v116 + v118) = v120;
          v121 = v120 + (v108[v105] + v109[v105]) * *((_DWORD *)a3 + 7);
          *(_DWORD *)(v116 + v118) = v121;
          *(_DWORD *)(v116 + v118) = v121
                                   + (v106[v105] + v107[v105]) * *((_DWORD *)a3 + 8);
          ++v105;
        }
        while (v10 - (v71 | 4) != v105);
        v104 = v10;
        v11 = v134;
        v6 = v135;
        v13 = v133;
        v17 = v113;
        v8 = v136;
      }
      v122 = (float32x4_t *)(a4 + 4 * v104);
      v123 = &v122[-1].f32[3];
      v124 = vld1q_dup_f32(v123);
      *v122 = v124;
      if (v71 < v10)
      {
        v125 = (int32x4_t *)(a4 + 4 * v71);
        do
        {
          v126 = v125->i32[0];
          v127 = v125[-1];
          v128 = *(int32x4_t *)((char *)v125 + 4);
          v125 = (int32x4_t *)((char *)v125 + 4);
          v129 = (int8x16_t)vrev64q_s32(v127);
          v130 = (vaddvq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(v129, v129, 8uLL), v128), *(int32x4_t *)(a3 + 5)))+ v126 * *((_DWORD *)a3 + 4)+ 512) >> 10;
          v15->i16[v71] = v130;
          v131 = (v130 + (1 << (a6 - 1))) >> a6;
          if (v131 >= 255)
            LOBYTE(v131) = -1;
          v14->i8[v71++] = v131;
        }
        while (v10 != v71);
      }
      v37 = v139;
      v15 = (uint16x8_t *)((char *)v15 + v138);
      v14 = (uint8x8_t *)((char *)v14 + v137);
      if ((unint64_t)v40 >= v13)
        v39 = 0;
      else
        v39 = v11;
      v23 = (uint8x8_t *)((char *)v40 + v39);
      ++v8;
      v35 = v141;
      v9 = v142;
      v36 = v140;
      v38 = v17;
      v17 = v144;
      v19 = v143;
      v21 = v40;
    }
    while (v8 != v6);
  }
  return 0;
}

uint64_t sub_20E8D9364(uint64_t a1, uint16x8_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v10;
  uint8x8_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint16x8_t *v22;
  uint16x8_t *v23;
  uint16x8_t *v24;
  uint16x8_t *v25;
  uint8x8_t *v26;
  uint64_t v27;
  uint8x8_t *v28;
  uint64_t v29;
  uint8x8_t *v30;
  uint64_t v31;
  uint8x8_t *v32;
  uint64_t v33;
  uint8x8_t *v34;
  const __int16 *v35;
  int16x8_t v36;
  const __int16 *v37;
  int16x8_t v38;
  const __int16 *v39;
  int16x8_t v40;
  const __int16 *v41;
  int16x8_t v42;
  const __int16 *v43;
  int16x8_t v44;
  unint64_t v45;
  unint64_t v46;
  int32x4_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint8x8_t *v52;
  uint8x8_t *v53;
  uint8x8_t *v54;
  uint8x8_t *v55;
  uint8x8_t *v56;
  uint64_t v57;
  uint8x8_t *v58;
  uint8x8_t *v59;
  uint64_t v60;
  uint16x8_t *v61;
  uint64_t v62;
  uint8x8_t *v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  uint16x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  uint16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint16x8_t v81;
  unint64_t v82;
  uint16x8_t *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint16x8_t v95;
  uint32x4_t v96;
  uint16x8_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  uint16x8_t v101;
  unint64_t v102;
  int32x4_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  const float *v122;
  float32x4_t v123;
  int32x4_t *v124;
  int v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t v128;
  unsigned int v129;
  signed int v130;
  unsigned int v131;
  uint64_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  unsigned int v135;
  BOOL v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  __int16 v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  uint64_t v152;
  char *v153;
  unsigned int v154;
  uint16x8_t *v155;
  uint16x8_t *v156;
  uint16x8_t *v157;
  int16x8_t *v158;
  unint64_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint16x8_t v165;
  uint16x8_t v166;
  uint32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint16x8_t *v196;
  uint8x8_t *v197;
  uint8x8_t *v198;
  uint8x8_t *v199;
  uint8x8_t *v200;
  uint8x8_t *v201;

  v8 = *(char **)a7;
  v195 = *(_QWORD *)(a1 + 8);
  if (v195)
  {
    v10 = 0;
    v11 = *(uint8x8_t **)a1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24) * (v195 - 1);
    v14 = *(_QWORD *)a1 + v13;
    v192 = *(_QWORD *)(a5 + 24);
    v187 = *(_QWORD *)(a7 + 24);
    v15 = 1 << (a6 - 1);
    v16 = *(int32x4_t *)(a3 + 16);
    v17 = vdupq_laneq_s32(*(int32x4_t *)(a3 + 20), 3);
    v18 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
    v19 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 1);
    v20 = vdupq_laneq_s32(v16, 2);
    v21 = vdupq_laneq_s32(v16, 3);
    v22 = *a2;
    v23 = a2[3];
    v24 = (uint16x8_t *)((char *)*a2 + 2 * (_QWORD)v23);
    v25 = (uint16x8_t *)((char *)v23 + (_QWORD)*a2);
    v26 = *(uint8x8_t **)a5;
    if (v13 <= 0)
      v27 = 0;
    else
      v27 = *(_QWORD *)(a1 + 24);
    v28 = (uint8x8_t *)((char *)v11 + v27);
    if (v27 >= v13)
      v29 = 0;
    else
      v29 = *(_QWORD *)(a1 + 24);
    v30 = (uint8x8_t *)((char *)v28 + v29);
    if ((unint64_t)v28 + v29 >= v14)
      v31 = 0;
    else
      v31 = *(_QWORD *)(a1 + 24);
    v32 = (uint8x8_t *)((char *)v30 + v31);
    v193 = v14;
    v194 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v30 + v31 >= v14)
      v33 = 0;
    else
      v33 = *(_QWORD *)(a1 + 24);
    v34 = (uint8x8_t *)((char *)v32 + v33);
    v35 = (const __int16 *)&unk_2102DB0EE;
    v36 = vld1q_dup_s16(v35);
    v37 = (const __int16 *)&unk_2102DB0F0;
    v38 = vld1q_dup_s16(v37);
    v39 = (const __int16 *)&unk_2102DB0F2;
    v40 = vld1q_dup_s16(v39);
    v41 = (const __int16 *)&unk_2102DB0F4;
    v42 = vld1q_dup_s16(v41);
    v43 = (const __int16 *)&unk_2102DB0F6;
    v44 = vld1q_dup_s16(v43);
    v45 = v12 - 8;
    v46 = v12 - 1;
    v47 = vdupq_n_s32(a8);
    v48.i64[0] = 0x4000400040004;
    v48.i64[1] = 0x4000400040004;
    v49.i64[0] = 0x900000009000;
    v49.i64[1] = 0x900000009000;
    v50.i64[0] = 0x7F0000007FLL;
    v50.i64[1] = 0x7F0000007FLL;
    v51.i64[0] = 0x800000008000;
    v51.i64[1] = 0x800000008000;
    v52 = *(uint8x8_t **)a1;
    v53 = *(uint8x8_t **)a1;
    v54 = *(uint8x8_t **)a1;
    v55 = *(uint8x8_t **)a1;
    v191 = *(_QWORD *)(a1 + 16);
    v190 = 1 << (a6 - 1);
    v188 = v12 - 1;
    v189 = v12 - 8;
    v184 = v18;
    v185 = v17;
    v182 = v20;
    v183 = v19;
    v180 = v36;
    v181 = v21;
    v178 = v40;
    v179 = v38;
    v175 = v47;
    do
    {
      v196 = v22;
      v22 = v25;
      v25 = v24;
      v63 = v32;
      v32 = v34;
      v64 = (int16x8_t)vaddl_u8(*v54, *v28);
      v65 = (int16x8_t)vaddl_u8(*v53, *v30);
      v66 = (int16x8_t)vaddl_u8(*v63, *v52);
      v67 = (int16x8_t)vaddl_u8(*v34, *v11);
      v68 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v36, (int16x8_t)vmovl_u8(*v55)), v38, v64), v40, v65), v42, v66), v44, v67);
      v69 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v54->i8, *(int8x16_t *)v54->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v28->i8, *(int8x16_t *)v28->i8, 8uLL)).u64[0];
      v70 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v53->i8, *(int8x16_t *)v53->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v30->i8, *(int8x16_t *)v30->i8, 8uLL)).u64[0];
      v71 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v63->i8, *(int8x16_t *)v63->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v52->i8, *(int8x16_t *)v52->i8, 8uLL)).u64[0];
      v72 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v34->i8, *(int8x16_t *)v34->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v11->i8, *(int8x16_t *)v11->i8, 8uLL)).u64[0];
      v73 = (uint16x8_t)vaddq_s16(vaddq_s16(v65, v64), vaddq_s16(v66, v67));
      v74 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v68.i8, 1uLL), *(uint16x4_t *)v73.i8);
      v75 = (int32x4_t)vaddw_high_u16(vshll_high_n_u16(v68, 1uLL), v73);
      v76 = (int32x4_t)vaddw_u16(vshll_n_u16((uint16x4_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v36.i8, (int16x4_t)*(_OWORD *)&vmovl_high_u8(*(uint8x16_t *)v55->i8)), *(int16x4_t *)v38.i8, v69), *(int16x4_t *)v40.i8, v70), *(int16x4_t *)v42.i8, v71), *(int16x4_t *)v44.i8, v72), 1uLL), (uint16x4_t)vadd_s16(vadd_s16(v70, v69), vadd_s16(v71, v72)));
      v77 = vdupq_lane_s32(*(int32x2_t *)v74.i8, 0);
      v78 = (int32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 4uLL);
      v79 = (int32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 0xCuLL);
      v80 = (int32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 8uLL);
      v81 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v77, v79), v21), v74, v18), vaddq_s32(v77, v75), v17), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v74, 8uLL), v80), v20), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v74, 0xCuLL), v78), v19), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v74, v76), v17), v75, v18), vaddq_s32(v80, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 8uLL)), v20), vaddq_s32(v79, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 4uLL)),
                              v19),
                            vaddq_s32(v78, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 0xCuLL)),
                            v21),
                          0xAuLL);
      *v24 = v81;
      *v26 = vqrshrn_n_u16(v81, 8uLL);
      v200 = v53;
      v201 = v52;
      v198 = v55;
      v199 = v54;
      v197 = v63;
      if (v45 >= 0x10)
      {
        v83 = v24 + 1;
        v84 = (char *)&v54[1] + 4;
        v85 = (char *)&v53[1] + 4;
        v86 = (char *)&v52[1] + 4;
        v87 = (char *)&v63[1] + 4;
        v88 = 1;
        v89 = v75;
        v90 = v76;
        do
        {
          v91 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v84[v88 * 8 - 8], *(uint8x8_t *)((char *)&v28[v88] + 4));
          v92 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v85[v88 * 8 - 8], *(uint8x8_t *)((char *)&v30[v88] + 4));
          v93 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v87[v88 * 8 - 8], *(uint8x8_t *)&v86[v88 * 8 - 8]);
          v94 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v32[v88] + 4), *(uint8x8_t *)((char *)&v11[v88] + 4));
          v95 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v36, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v55[v88] + 4))), v91, v38), v92, v40), v93, v42), v94, v44);
          v96 = vshll_high_n_u16(v95, 1uLL);
          v97 = (uint16x8_t)vaddq_s16(vaddq_s16(v92, v91), vaddq_s16(v93, v94));
          v75 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v95.i8, 1uLL), *(uint16x4_t *)v97.i8);
          v76 = (int32x4_t)vaddw_high_u16(v96, v97);
          v98 = (int32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v75, 4uLL);
          v99 = (int32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v75, 0xCuLL);
          v100 = (int32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v75, 8uLL);
          v101 = (uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v75, v89), v17), v90, v18), vaddq_s32(v100, (int32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 8uLL)), v20), vaddq_s32(v98, (int32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 0xCuLL)), v19), vaddq_s32(v99, (int32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 4uLL)), v21), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v76, v90), v17), v75, v18), vaddq_s32(v100, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 8uLL)), v20), vaddq_s32(v99, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 4uLL)),
                                   v19),
                                 vaddq_s32(v98, (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 0xCuLL)),
                                 v21),
                               0xAuLL);
          *v83++ = v101;
          v26[v88] = vqrshrn_n_u16(v101, 8uLL);
          v82 = v88 * 8 + 8;
          v102 = v88 * 8 + 16;
          ++v88;
          v89 = v75;
          v90 = v76;
        }
        while (v102 <= v45);
      }
      else
      {
        v82 = 8;
      }
      v103 = (int32x4_t *)(a4 + 4 * v82);
      v103[-1] = v75;
      *v103 = v76;
      v104 = v82 | 4;
      if (v12 <= (v82 | 4))
      {
        v121 = v82 | 3;
      }
      else
      {
        v105 = 0;
        v106 = (char *)v11 + v104;
        v107 = (char *)v32 + v104;
        v108 = (char *)v201 + v104;
        v109 = (char *)v197 + v104;
        v110 = (char *)v200 + v104;
        v111 = (char *)v30 + v104;
        v112 = (char *)v199 + v104;
        v113 = (char *)v28 + v104;
        v114 = (char *)v198 + v104;
        v115 = a4 + 4 * v104;
        do
        {
          v116 = *(_DWORD *)(a3 + 16) * v114[v105];
          v117 = 4 * v105;
          *(_DWORD *)(v115 + v117) = v116;
          v118 = v116 + (v112[v105] + v113[v105]) * *(_DWORD *)(a3 + 20);
          *(_DWORD *)(v115 + v117) = v118;
          v119 = v118 + (v110[v105] + v111[v105]) * *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v115 + v117) = v119;
          v120 = v119 + (v108[v105] + v109[v105]) * *(_DWORD *)(a3 + 28);
          *(_DWORD *)(v115 + v117) = v120;
          *(_DWORD *)(v115 + v117) = v120
                                   + (v106[v105] + v107[v105]) * *(_DWORD *)(a3 + 32);
          ++v105;
        }
        while (v12 - (v82 | 4) != v105);
        v46 = v188;
        v121 = v188;
        v12 = v191;
        v104 = v191;
        v15 = v190;
        v45 = v189;
      }
      v122 = (const float *)(a4 + 4 * v121);
      v123 = vld1q_dup_f32(v122);
      *(float32x4_t *)(a4 + 4 * v104) = v123;
      if (v82 < v12)
      {
        v124 = (int32x4_t *)(a4 + 4 * v82);
        do
        {
          v125 = v124->i32[0];
          v126 = v124[-1];
          v127 = *(int32x4_t *)((char *)v124 + 4);
          v124 = (int32x4_t *)((char *)v124 + 4);
          v128 = (int8x16_t)vrev64q_s32(v126);
          v129 = (vaddvq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(v128, v128, 8uLL), v127), *(int32x4_t *)(a3 + 20)))+ v125 * *(_DWORD *)(a3 + 16)+ 512) >> 10;
          v25->i16[v82] = v129;
          v130 = (v129 + v15) >> a6;
          if (v130 >= 255)
            LOBYTE(v130) = -1;
          v26->i8[v82++] = v130;
        }
        while (v12 != v82);
      }
      if (v10)
      {
        if (v10 != 1)
        {
          *(_WORD *)v8 = 0;
          if (v46 < 9)
          {
            v137 = 1;
            v61 = v196;
            if (v46 <= 4)
              goto LABEL_45;
          }
          else
          {
            v131 = 16;
            v61 = v196;
            do
            {
              v132 = 2 * (v131 - 15);
              v133 = v22[v131 / 8 - 2];
              v134 = *(uint16x8_t *)((char *)&v22[v131 / 8 - 1] - 12);
              *(int16x8_t *)&v8[v132] = vqrshrn_high_n_s32(vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vaddw_u16(vmlsl_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v25->i8[v132], *(uint16x4_t *)&v196->i8[v132]), *(uint16x4_t *)v133.i8), *(uint16x4_t *)&v22->i8[v132], (uint16x4_t)0x4000400040004), *(uint16x4_t *)v134.i8), v47), 5uLL), 3uLL), vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_high_u16(
                                                           vaddw_high_u16(vaddw_high_u16(vaddl_high_u16(*(uint16x8_t *)((char *)v25 + v132), *(uint16x8_t *)((char *)v196 + v132)), v133), v134), *(uint16x8_t *)((char *)v22 + v132), v48), v47), 5uLL), 3uLL);
              v135 = v131 + 8;
              v136 = v46 > v131;
              v131 += 8;
            }
            while (v136);
            v137 = v135 - 15;
            if (v46 <= v137 + 3)
            {
LABEL_45:
              v141 = v137;
              if (v46 > v137)
              {
                v142 = v137 + 1;
                v143 = v46 - v142;
                if (v46 < v142)
                  v143 = 0;
                v144 = v143 + 1;
                if (v144 < 0x18)
                  goto LABEL_49;
                v150 = v46 - v142;
                if (v46 < v142)
                  v150 = 0;
                v151 = __CFADD__(v137, (_DWORD)v150);
                if (-v137 < v150)
                  goto LABEL_49;
                if (v151)
                  goto LABEL_49;
                if (-2 - v137 < v150)
                  goto LABEL_49;
                if (HIDWORD(v150))
                  goto LABEL_49;
                v152 = 2 * v137;
                v153 = &v8[v152];
                if ((unint64_t)(v8 - (char *)v25) < 0x10)
                  goto LABEL_49;
                if ((unint64_t)(v8 - (char *)v61) < 0x10)
                  goto LABEL_49;
                if ((unint64_t)(v153 - ((char *)v22 + 2 * v142)) < 0x10)
                  goto LABEL_49;
                if ((unint64_t)(v8 - (char *)v22) < 0x10)
                  goto LABEL_49;
                v154 = v137 - 1;
                if ((unint64_t)(v153 - ((char *)v22 + 2 * v137 - 2)) < 0x10)
                  goto LABEL_49;
                v141 = (v144 & 0xFFFFFFFFFFFFFFF8) + v137;
                v137 += v144 & 0xFFFFFFF8;
                v155 = (uint16x8_t *)((char *)v22 + v152);
                v156 = (uint16x8_t *)((char *)v61 + v152);
                v157 = (uint16x8_t *)((char *)v25 + v152);
                v158 = (int16x8_t *)&v8[v152];
                v159 = v144 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v160 = *v155++;
                  v161 = v160;
                  v162 = *(uint16x8_t *)((char *)v22 + 2 * v154);
                  v163 = *(uint16x8_t *)((char *)v22 + 2 * v154 + 4);
                  v164 = *v156++;
                  v165 = v164;
                  v166 = *v157++;
                  v167 = vaddl_high_u16(v163, v162);
                  v168 = (int32x4_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v163.i8, *(uint16x4_t *)v162.i8), *(uint16x4_t *)v165.i8);
                  v169 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v161.i8, 2uLL);
                  v170 = vmulq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vaddw_high_u16(v167, v165), (int32x4_t)vshll_high_n_u16(v161, 2uLL)), v166), v47);
                  v171 = vmulq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v168, v169), *(uint16x4_t *)v166.i8), v47);
                  v172 = vdupq_n_s32(0xFF7FFF70);
                  v173 = vdupq_n_s32(0x7FFF6Fu);
                  *v158++ = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v172, v171), v51, vbslq_s8((int8x16_t)vcgtq_s32(v171, v173), v50, (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vshlq_n_s32(v171, 8uLL), v49), 0x10uLL))), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v172, v170), v51, vbslq_s8((int8x16_t)vcgtq_s32(v170, v173), v50, (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vshlq_n_s32(v170, 8uLL), v49), 0x10uLL))));
                  v154 += 8;
                  v159 -= 8;
                }
                while (v159);
                if (v144 != (v144 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_49:
                  v145 = v137 + 1;
                  do
                  {
                    while (1)
                    {
                      v148 = (v22->u16[v145] + v22->u16[v145 - 2] + v61->u16[v141] - 4 * v22->u16[v141] + v25->u16[v141])
                           * a8;
                      if (v148 >= -8388752)
                        break;
                      *(_WORD *)&v8[2 * v141] = 0x8000;
                      v149 = v145++;
                      v141 = v149;
                      if (v46 <= v149)
                        goto LABEL_56;
                    }
                    if (v148 <= 8388463)
                      v146 = ((v148 << 8) + 36864) >> 16;
                    else
                      v146 = 0x7FFF;
                    *(_WORD *)&v8[2 * v141] = v146;
                    v147 = v145++;
                    v141 = v147;
                  }
                  while (v46 > v147);
                }
              }
LABEL_56:
              *(_WORD *)&v8[2 * v46] = 0;
              v8 += v187;
              goto LABEL_17;
            }
          }
          v138 = v137 + 7;
          do
          {
            v139 = 2 * (v138 - 7);
            *(int16x4_t *)&v8[v139] = vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_u16(vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v25->i8[v139], *(uint16x4_t *)&v61->i8[v139]), *(uint16x4_t *)&v22[-1].i8[2 * v138]), *(uint16x4_t *)&v22->i8[2 * v138 - 12]), *(uint16x4_t *)&v22->i8[v139], (uint16x4_t)0x4000400040004), v47), 5uLL), 3uLL);
            v140 = v138 + 4;
            v136 = v46 > v138;
            v138 += 4;
          }
          while (v136);
          v137 = v140 - 7;
          goto LABEL_45;
        }
        v56 = v28;
        v57 = a8;
        v58 = v32;
        v59 = v30;
        v60 = a6;
        bzero(v8, 2 * *(_QWORD *)(a7 + 16));
        v51.i64[0] = 0x800000008000;
        v51.i64[1] = 0x800000008000;
        v50.i64[0] = 0x7F0000007FLL;
        v50.i64[1] = 0x7F0000007FLL;
        v49.i64[0] = 0x900000009000;
        v49.i64[1] = 0x900000009000;
        v48.i64[0] = 0x4000400040004;
        v48.i64[1] = 0x4000400040004;
        v47 = v175;
        v44 = v176;
        v42 = v177;
        v40 = v178;
        v38 = v179;
        v36 = v180;
        v21 = v181;
        v20 = v182;
        v19 = v183;
        v18 = v184;
        v17 = v185;
        v15 = v190;
        a6 = v60;
        v10 = 1;
        v30 = v59;
        v32 = v58;
        v46 = v188;
        v45 = v189;
        a8 = v57;
        v28 = v56;
        v12 = v191;
        v8 += v187;
      }
      v61 = v196;
LABEL_17:
      v52 = v200;
      v54 = v198;
      v53 = v199;
      v26 = (uint8x8_t *)((char *)v26 + v192);
      v62 = v194;
      if ((unint64_t)v32 >= v193)
        v62 = 0;
      v34 = (uint8x8_t *)((char *)v32 + v62);
      ++v10;
      v11 = v201;
      v55 = v28;
      v28 = v30;
      v30 = v197;
      v24 = v61;
    }
    while (v10 != v195);
  }
  bzero(v8, 2 * *(_QWORD *)(a7 + 16));
  return 0;
}

uint64_t sub_20E8D9DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t *v18;
  uint8x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8x8_t *v22;
  uint64_t v23;
  uint8x8_t *v24;
  __int8 *v25;
  uint64_t v26;
  uint8x8_t *v27;
  uint64_t v28;
  uint8x8_t *v29;
  const __int16 *v30;
  int16x8_t v31;
  const __int16 *v32;
  int16x8_t v33;
  const __int16 *v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  const __int16 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int16x8_t v42;
  int32x4_t v43;
  uint8x8_t *v44;
  uint8x8_t *v45;
  uint8x8_t *v46;
  uint8x8_t *v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  uint16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  uint16x8_t v76;
  uint32x4_t v77;
  uint16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  unint64_t v82;
  int32x4_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint8x8_t *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  float32x4_t *v102;
  const float *v103;
  float32x4_t v104;
  uint64_t v105;
  int8x16_t v106;
  uint8x8_t *v107;
  uint8x8_t *v108;
  uint8x8_t *v109;
  uint64_t v110;
  uint8x8_t *v111;
  uint8x8_t *v112;
  uint8x8_t *v113;
  uint8x8_t *v114;
  uint8x8_t *v115;
  uint64_t v116;
  uint8x8_t *v117;
  uint8x8_t *v118;
  uint64_t v119;
  uint8x8_t *v120;
  uint8x8_t *v121;
  uint64_t v122;
  uint8x8_t *v123;
  uint8x8_t *v124;
  uint64_t v125;
  uint8x8_t *v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint8x8_t *v134;
  uint8x8_t *v135;
  uint8x8_t *v136;
  uint8x8_t *v137;
  uint8x8_t *v138;
  uint8x8_t *v139;

  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = v5 - 1;
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(int32x4_t *)(a3 + 16);
    v12 = vdupq_laneq_s32(*(int32x4_t *)(a3 + 20), 3);
    v13 = vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
    v14 = vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
    v15 = *(_QWORD *)(a5 + 24);
    v16 = vdupq_laneq_s32(v11, 2);
    v17 = vdupq_laneq_s32(v11, 3);
    v18 = *(int16x4_t **)a5;
    v19 = *(uint8x8_t **)a1;
    v20 = v10 * (v5 - 1);
    if (v20 <= 0)
      v21 = 0;
    else
      v21 = *(_QWORD *)(a1 + 24);
    v22 = (uint8x8_t *)((char *)v19 + v21);
    if (v21 >= v20)
      v23 = 0;
    else
      v23 = *(_QWORD *)(a1 + 24);
    v24 = (uint8x8_t *)((char *)v22 + v23);
    v25 = (char *)v19 + v20;
    if (&v22->i8[v23] >= v25)
      v26 = 0;
    else
      v26 = *(_QWORD *)(a1 + 24);
    v27 = (uint8x8_t *)((char *)v24 + v26);
    if (&v24->i8[v26] >= v25)
      v28 = 0;
    else
      v28 = *(_QWORD *)(a1 + 24);
    v29 = (uint8x8_t *)((char *)v27 + v28);
    v30 = (const __int16 *)&unk_2102DB100;
    v31 = vld1q_dup_s16(v30);
    v32 = (const __int16 *)&unk_2102DB102;
    v33 = vld1q_dup_s16(v32);
    v34 = (const __int16 *)&unk_2102DB104;
    v35 = vld1q_dup_s16(v34);
    v36 = (const __int16 *)&unk_2102DB106;
    v37 = vld1q_dup_s16(v36);
    v38 = (const __int16 *)&unk_2102DB108;
    v39 = v9 - 8;
    v40 = 2 * v10;
    v41 = -v10;
    v132 = 3 * v10;
    v133 = v5 - 6;
    v131 = 4 * v10;
    v42 = vld1q_dup_s16(v38);
    v130 = v5 - 5;
    v129 = v5 - 4;
    v43.i64[0] = 0x20000000200;
    v43.i64[1] = 0x20000000200;
    v44 = *(uint8x8_t **)a1;
    v45 = *(uint8x8_t **)a1;
    v46 = v19;
    v47 = v19;
    v128 = v15;
    do
    {
      v48 = (int16x8_t)vaddl_u8(*v46, *v22);
      v49 = (int16x8_t)vaddl_u8(*v45, *v24);
      v50 = (int16x8_t)vaddl_u8(*v27, *v44);
      v51 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v31, (int16x8_t)vmovl_u8(*v47)), v33, v48), v35, v49), v37, v50), v42, (int16x8_t)vaddl_u8(*v29, *v19));
      v52 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v46->i8, *(int8x16_t *)v46->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v22->i8, *(int8x16_t *)v22->i8, 8uLL)).u64[0];
      v53 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v45->i8, *(int8x16_t *)v45->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v24->i8, *(int8x16_t *)v24->i8, 8uLL)).u64[0];
      v54 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v27->i8, *(int8x16_t *)v27->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v44->i8, *(int8x16_t *)v44->i8, 8uLL)).u64[0];
      v55 = (uint16x8_t)vaddq_s16(vaddq_s16(v49, v48), v50);
      v56 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v51.i8, 1uLL), *(uint16x4_t *)v55.i8);
      v57 = (int32x4_t)vaddw_high_u16(vshll_high_n_u16(v51, 1uLL), v55);
      v58 = (int32x4_t)vaddw_u16(vshll_n_u16((uint16x4_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v31.i8, (int16x4_t)*(_OWORD *)&vmovl_high_u8(*(uint8x16_t *)v47->i8)), *(int16x4_t *)v33.i8, v52), *(int16x4_t *)v35.i8, v53), *(int16x4_t *)v37.i8, v54), *(int16x4_t *)v42.i8, (int16x4_t)*(_OWORD *)&vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v29->i8, *(int8x16_t *)v29->i8,
                                                                                           8uLL),
                                                                  (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v19->i8, *(int8x16_t *)v19->i8, 8uLL))), 1uLL), (uint16x4_t)vadd_s16(vadd_s16(v53, v52), v54));
      v59 = vdupq_lane_s32(*(int32x2_t *)v56.i8, 0);
      v60 = (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 4uLL);
      v61 = (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 0xCuLL);
      v62 = (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 8uLL);
      *v18 = vmovn_s32((int32x4_t)vuzp1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v59, v61), v17), v56, v13), vaddq_s32(v59, v57), v12), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v56, 8uLL), v62), v16), vaddq_s32(
                                                                   (int32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v56, 0xCuLL), v60), v14), v43), 0xAuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v56, v58), v12), v57, v13), vaddq_s32(v62, (int32x4_t)vextq_s8(
                                                                                    (int8x16_t)v57,
                                                                                    (int8x16_t)v58,
                                                                                    8uLL)),
                                                                     v16),
                                                                   vaddq_s32(v61, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 4uLL)), v14), vaddq_s32(v60, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 0xCuLL)), v17), v43), 0xAuLL)));
      v137 = v24;
      v135 = v27;
      v136 = v19;
      v134 = v29;
      v138 = v44;
      v139 = v46;
      if (v39 >= 0x10)
      {
        v65 = (char *)&v24[1] + 4;
        v66 = (char *)&v44[1] + 4;
        v67 = (char *)&v27[1] + 4;
        v68 = (char *)&v19[1] + 4;
        v69 = (char *)&v29[1] + 4;
        v70 = 8;
        v63 = 4;
        v71 = v57;
        v72 = v58;
        do
        {
          v73 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v46[(unint64_t)v70 / 8] + 4), *(uint8x8_t *)((char *)&v22[(unint64_t)v70 / 8] + 4));
          v74 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v45[(unint64_t)v70 / 8] + 4), *(uint8x8_t *)&v65[v70 - 8]);
          v75 = (int16x8_t)vaddl_u8(*(uint8x8_t *)&v67[v70 - 8], *(uint8x8_t *)&v66[v70 - 8]);
          v76 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v31, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v47[(unint64_t)v70 / 8] + 4))), v73, v33), v74, v35), v75, v37), (int16x8_t)vaddl_u8(*(uint8x8_t *)&v69[v70 - 8], *(uint8x8_t *)&v68[v70 - 8]), v42);
          v77 = vshll_high_n_u16(v76, 1uLL);
          v78 = (uint16x8_t)vaddq_s16(vaddq_s16(v74, v73), v75);
          v57 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v76.i8, 1uLL), *(uint16x4_t *)v78.i8);
          v58 = (int32x4_t)vaddw_high_u16(v77, v78);
          v79 = (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v57, 4uLL);
          v80 = (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v57, 0xCuLL);
          v81 = (int32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v57, 8uLL);
          v18[(unint64_t)v70 / 8] = vmovn_s32((int32x4_t)vuzp1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v57, v71), v12), v72, v13), vaddq_s32(v81, (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL)), v16), vaddq_s32(v79, (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 0xCuLL)), v14), vaddq_s32(v80,
                                                                                                 (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 4uLL)),
                                                                                               v17),
                                                                                             v43),
                                                                               0xAuLL),
                                                                  (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v58, v72), v12), v57, v13), vaddq_s32(v81, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 8uLL)), v16), vaddq_s32(v80, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 4uLL)), v14), vaddq_s32(v79, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 0xCuLL)),
                                                                                               v17),
                                                                                             v43),
                                                                               0xAuLL)));
          v63 += 4;
          v64 = v70 + 8;
          v82 = v70 + 16;
          v70 += 8;
          v71 = v57;
          v72 = v58;
        }
        while (v82 <= v39);
      }
      else
      {
        v63 = 4;
        v64 = 8;
      }
      v83 = (int32x4_t *)(a4 + 4 * v64);
      v83[-1] = v57;
      *v83 = v58;
      v84 = v64 | 4;
      if (v9 > (v64 | 4))
      {
        v85 = 0;
        v86 = (char *)v136 + v84;
        v87 = (char *)v134 + v84;
        v88 = (char *)v138 + v84;
        v89 = (char *)v135 + v84;
        v90 = v45;
        v91 = (char *)v45 + v84;
        v92 = (char *)v137 + v84;
        v93 = (char *)v139 + v84;
        v94 = (char *)v22 + v84;
        v95 = (char *)v47 + v84;
        v96 = a4 + 4 * v84;
        do
        {
          v97 = *(_DWORD *)(a3 + 16) * v95[v85];
          v98 = 4 * v85;
          *(_DWORD *)(v96 + v98) = v97;
          v99 = v97 + (v93[v85] + v94[v85]) * *(_DWORD *)(a3 + 20);
          *(_DWORD *)(v96 + v98) = v99;
          v100 = v99 + (v91[v85] + v92[v85]) * *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v96 + v98) = v100;
          v101 = v100 + (v88[v85] + v89[v85]) * *(_DWORD *)(a3 + 28);
          *(_DWORD *)(v96 + v98) = v101;
          *(_DWORD *)(v96 + v98) = v101 + (v86[v85] + v87[v85]) * *(_DWORD *)(a3 + 32);
          ++v85;
        }
        while (v9 - (v64 | 4) != v85);
        v84 = v9;
        v41 = -v10;
        v40 = 2 * v10;
        v45 = v90;
        v15 = v128;
      }
      v102 = (float32x4_t *)(a4 + 4 * v84);
      v103 = &v102[-1].f32[3];
      v104 = vld1q_dup_f32(v103);
      *v102 = v104;
      if (v64 < v9)
      {
        v105 = a4 + 4 * v64;
        do
        {
          if ((v64 & 1) == 0)
          {
            v106 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v105 - 16));
            v18->i16[v63++] = (vaddvq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(v106, v106, 8uLL), *(int32x4_t *)(v105 + 4)), *(int32x4_t *)(a3 + 20)))+ *(_DWORD *)v105 * *(_DWORD *)(a3 + 16)+ 512) >> 10;
          }
          ++v64;
          v105 += 4;
        }
        while (v9 != v64);
      }
      if (v8)
      {
        v107 = v47;
        v47 = v45;
        v109 = v137;
        v108 = v22;
        v110 = -4 * v10;
        v111 = v135;
        v112 = v136;
        v113 = v134;
        if (v8 != v133)
          goto LABEL_36;
      }
      else
      {
        v107 = (uint8x8_t *)((char *)v47 + v40);
        v138 = v47;
        v139 = (uint8x8_t *)((char *)v47 + v40 + v41);
        v108 = (uint8x8_t *)((char *)v47 + v40 + v10);
        v109 = (uint8x8_t *)((char *)v47 + v40 + v40);
        v111 = (uint8x8_t *)((char *)v47 + v40 + v132);
        v113 = (uint8x8_t *)((char *)v47 + v40 + v131);
        v112 = v47;
        v110 = -4 * v10;
        if (v133)
        {
LABEL_36:
          v114 = v107;
          v107 = v47;
          v116 = (uint64_t)v138;
          v115 = v139;
          goto LABEL_37;
        }
      }
      v114 = (uint8x8_t *)((char *)v107 + v40);
      v115 = (uint8x8_t *)((char *)v107 + v40 + v41);
      v116 = (uint64_t)v107 + v40 + -3 * v10;
      v112 = (uint8x8_t *)((char *)v107 + v40 + v110);
      v108 = (uint8x8_t *)((char *)v107 + v40 + v10);
      v109 = (uint8x8_t *)((char *)v107 + v40 + v40);
      v113 = (uint8x8_t *)((char *)v107 + v40 + v132);
      v111 = v113;
LABEL_37:
      v117 = (uint8x8_t *)((char *)v114 + v40);
      v118 = (uint8x8_t *)((char *)v114 + v40 + v41);
      v119 = (uint64_t)v114 + v40 + v110;
      v120 = (uint8x8_t *)((char *)v114 + v40 + v10);
      v121 = (uint8x8_t *)((char *)v114 + v40 + v40);
      if (v8 == v130)
      {
        v113 = (uint8x8_t *)((char *)v114 + v40 + v40);
        v111 = v113;
      }
      else
      {
        v121 = v109;
        v120 = v108;
      }
      if (v8 == v130)
      {
        v107 = v114;
      }
      else
      {
        v117 = v114;
        v118 = v115;
      }
      if (v8 == v130)
        v122 = (uint64_t)v114 + v40 + -3 * v10;
      else
        v122 = v116;
      if (v8 == v130)
        v123 = (uint8x8_t *)v119;
      else
        v123 = v112;
      v46 = (uint8x8_t *)((char *)v117 + v40 + v41);
      if (v8 == v129)
        v29 = (uint8x8_t *)((char *)v117 + v40 + v10);
      else
        v29 = v113;
      if (v8 == v129)
        v27 = (uint8x8_t *)((char *)v117 + v40 + v10);
      else
        v27 = v111;
      if (v8 == v129)
        v24 = (uint8x8_t *)((char *)v117 + v40 + v10);
      else
        v24 = v121;
      if (v8 == v129)
        v22 = (uint8x8_t *)((char *)v117 + v40 + v10);
      else
        v22 = v120;
      if (v8 == v129)
        v47 = (uint8x8_t *)((char *)v117 + v40);
      else
        v47 = v117;
      if (v8 == v129)
      {
        v45 = v117;
      }
      else
      {
        v46 = v118;
        v45 = v107;
      }
      if (v8 == v129)
        v44 = (uint8x8_t *)((char *)v117 + v40 + -3 * v10);
      else
        v44 = (uint8x8_t *)v122;
      if (v8 == v129)
        v19 = (uint8x8_t *)((char *)v117 + v40 + v110);
      else
        v19 = v123;
      if (v8)
      {
        v124 = (uint8x8_t *)((char *)v47 + v40 + v41);
        v125 = (uint64_t)v47 + v40 + -3 * v10;
        v126 = (uint8x8_t *)((char *)v47 + v40 + v110);
        if (v8 < v133)
        {
          v29 = (uint8x8_t *)((char *)v47 + v40 + v131);
          v27 = (uint8x8_t *)((char *)v47 + v40 + v132);
          v24 = (uint8x8_t *)((char *)v47 + v40 + v40);
          v22 = (uint8x8_t *)((char *)v47 + v40 + v10);
          v45 = v47;
          v47 = (uint8x8_t *)((char *)v47 + v40);
          v46 = v124;
          v44 = (uint8x8_t *)v125;
          v19 = v126;
        }
      }
      v18 = (int16x4_t *)((char *)v18 + v15);
      v8 += 2;
    }
    while (v8 < v6);
  }
  return 0;
}

uint64_t sub_20E8DA4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x4_t *v16;
  uint8x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t *v20;
  uint64_t v21;
  uint8x8_t *v22;
  __int8 *v23;
  uint64_t v24;
  uint8x8_t *v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint8x8_t *v31;
  unint64_t v32;
  int16x8_t v33;
  int32x4_t v34;
  uint8x8_t *v35;
  uint8x8_t *v36;
  uint8x8_t *v37;
  uint8x8_t *v38;
  uint8x8_t *v39;
  uint8x8_t *v40;
  uint8x8_t *v41;
  int16x8_t v42;
  uint16x8_t v43;
  int16x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint8x8_t *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  unint64_t v64;
  int32x4_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  float32x4_t *v84;
  const float *v85;
  float32x4_t v86;
  uint64_t v87;
  int8x16_t v88;
  uint8x8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint8x8_t *v92;
  uint8x8_t *v93;
  uint64_t v94;
  uint8x8_t *v95;
  uint8x8_t *v96;
  uint8x8_t *v97;
  uint8x8_t *v98;
  uint8x8_t *v99;
  uint8x8_t *v100;
  uint8x8_t *v101;
  uint8x8_t *v102;
  uint8x8_t *v103;
  uint8x8_t *v104;
  uint64_t v106;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint8x8_t *v119;
  uint8x8_t *v120;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = a4;
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(int32x4_t *)(a3 + 16);
    v11 = vdupq_laneq_s32(*(int32x4_t *)(a3 + 20), 3);
    v12 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
    v13 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
    v14 = vdupq_laneq_s32(v10, 2);
    v15 = vdupq_laneq_s32(v10, 3);
    v16 = *(int16x4_t **)a5;
    v17 = *(uint8x8_t **)a1;
    v18 = v9 * (v5 - 1);
    if (v18 <= 0)
      v19 = 0;
    else
      v19 = *(_QWORD *)(a1 + 24);
    v20 = (uint8x8_t *)((char *)v17 + v19);
    if (v19 >= v18)
      v21 = 0;
    else
      v21 = v9;
    v22 = (uint8x8_t *)((char *)v20 + v21);
    v23 = (char *)v17 + v18;
    if (&v20->i8[v21] >= v23)
      v24 = 0;
    else
      v24 = v9;
    v25 = (uint8x8_t *)((char *)v22 + v24);
    if (&v22->i8[v24] >= v23)
      v26 = 0;
    else
      v26 = v9;
    v27 = vdupq_lane_s16((int16x4_t)0x11001F002E0035, 0);
    v28 = vdupq_lane_s16((int16x4_t)0x70011001F002ELL, 0);
    v29 = vdupq_lane_s16((int16x4_t)0x70011001F002ELL, 1);
    v30 = vdupq_lane_s16((int16x4_t)0x70011001F002ELL, 2);
    v31 = (uint8x8_t *)((char *)v25 + v26);
    v32 = v8 - 8;
    v110 = -v9;
    v111 = 2 * v9;
    v109 = 3 * v9;
    v33 = vdupq_lane_s16((int16x4_t)0x70011001F002ELL, 3);
    v116 = -3 * v9;
    v117 = v5 - 6;
    v115 = -4 * v9;
    v114 = v5 - 4;
    v118 = 4 * v9;
    v112 = *(_QWORD *)(a5 + 24);
    v113 = -3 * v9;
    v34.i64[0] = 0x20000000200;
    v34.i64[1] = 0x20000000200;
    v35 = v17;
    v36 = v17;
    v37 = v17;
    v38 = v17;
    v106 = v9;
    v108 = v5;
    do
    {
      while (1)
      {
        v42 = (int16x8_t)vaddl_u8(*v36, *v22);
        v43 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v27, (int16x8_t)vmovl_u8(*v38)), v28, (int16x8_t)vaddl_u8(*v37, *v20)), v29, v42), v30, (int16x8_t)vaddl_u8(*v25, *v35)), v33, (int16x8_t)vaddl_u8(*v31, *v17));
        v44 = (int16x4_t)vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v36->i8, *(int8x16_t *)v36->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v22->i8, *(int8x16_t *)v22->i8, 8uLL)).u64[0];
        v45 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v43.i8, 1uLL), *(uint16x4_t *)v42.i8);
        v46 = (int32x4_t)vaddw_high_u16(vshll_high_n_u16(v43, 1uLL), (uint16x8_t)v42);
        v47 = (int32x4_t)vaddw_u16(vshll_n_u16((uint16x4_t)vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(*(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vmovl_high_u8(*(uint8x16_t *)v38->i8)), *(int16x4_t *)v28.i8, (int16x4_t)*(_OWORD *)&vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v37->i8, *(int8x16_t *)v37->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v20->i8, *(int8x16_t *)v20->i8, 8uLL))), *(int16x4_t *)v29.i8,
                                               v44),
                                             *(int16x4_t *)v30.i8,
                                             (int16x4_t)*(_OWORD *)&vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v25->i8, *(int8x16_t *)v25->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v35->i8, *(int8x16_t *)v35->i8, 8uLL))), *(int16x4_t *)v33.i8, (int16x4_t)*(_OWORD *)&vaddl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v31->i8, *(int8x16_t *)v31->i8, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v17->i8, *(int8x16_t *)v17->i8, 8uLL))), 1uLL),
                           (uint16x4_t)v44);
        v48 = vdupq_lane_s32(*(int32x2_t *)v45.i8, 0);
        v49 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 4uLL);
        v50 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
        v51 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 8uLL);
        *v16 = vmovn_s32((int32x4_t)vuzp1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v48, v50), v15), v45, v12), vaddq_s32(v48, v46), v11), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v45, 8uLL), v51), v14), vaddq_s32(
                                                                     (int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v45, 0xCuLL), v49), v13), v34), 0xAuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v45, v47), v11), v46, v12), vaddq_s32(v51, (int32x4_t)vextq_s8(
                                                                                      (int8x16_t)v46,
                                                                                      (int8x16_t)v47,
                                                                                      8uLL)),
                                                                       v14),
                                                                     vaddq_s32(v50, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 4uLL)), v13), vaddq_s32(v49, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL)), v15), v34), 0xAuLL)));
        v120 = v25;
        v119 = v37;
        if (v32 >= 0x10)
        {
          v52 = v20;
          v55 = (char *)&v20[1] + 4;
          v56 = 1;
          v53 = 4;
          v57 = v46;
          v58 = v47;
          do
          {
            v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v36[v56] + 4), *(uint8x8_t *)((char *)&v22[v56] + 4));
            v60 = (uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v27, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v38[v56] + 4))), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v37[v56] + 4), *(uint8x8_t *)&v55[v56 * 8 - 8]), v28), v59, v29), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v25[v56] + 4), *(uint8x8_t *)((char *)&v35[v56] + 4)), v30), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)&v31[v56] + 4), *(uint8x8_t *)((char *)&v17[v56] + 4)), v33);
            v46 = (int32x4_t)vaddw_u16(vshll_n_u16(*(uint16x4_t *)v60.i8, 1uLL), *(uint16x4_t *)v59.i8);
            v47 = (int32x4_t)vaddw_high_u16(vshll_high_n_u16(v60, 1uLL), (uint16x8_t)v59);
            v61 = (int32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v46, 4uLL);
            v62 = (int32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v46, 0xCuLL);
            v63 = (int32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v46, 8uLL);
            v16[v56] = vmovn_s32((int32x4_t)vuzp1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v46, v57), v11), v58, v12), vaddq_s32(v63, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 8uLL)), v14), vaddq_s32(v61, (int32x4_t)vextq_s8(
                                                                                            (int8x16_t)v57,
                                                                                            (int8x16_t)v58,
                                                                                            0xCuLL)),
                                                                             v13),
                                                                           vaddq_s32(v62, (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 4uLL)), v15), v34), 0xAuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v47, v58), v11), v46, v12), vaddq_s32(v63,
                                                                                 (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 8uLL)), v14), vaddq_s32(v62, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 4uLL)), v13), vaddq_s32(v61, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL)), v15), v34),
                                                           0xAuLL)));
            v53 += 4;
            v54 = v56 * 8 + 8;
            v64 = v56 * 8 + 16;
            ++v56;
            v57 = v46;
            v58 = v47;
          }
          while (v64 <= v32);
        }
        else
        {
          v52 = v20;
          v53 = 4;
          v54 = 8;
        }
        v65 = (int32x4_t *)(v6 + 4 * v54);
        v65[-1] = v46;
        *v65 = v47;
        v66 = v54 | 4;
        v67 = v9;
        if (v8 > (v54 | 4))
        {
          v68 = 0;
          v69 = (char *)v17 + v66;
          v70 = (char *)v31 + v66;
          v71 = (char *)v35 + v66;
          v72 = (char *)v120 + v66;
          v73 = (char *)v36 + v66;
          v74 = (char *)v22 + v66;
          v75 = (char *)v119 + v66;
          v76 = (char *)v52 + v66;
          v77 = (char *)v38 + v66;
          v78 = v6 + 4 * v66;
          do
          {
            v79 = *(_DWORD *)(a3 + 16) * v77[v68];
            v80 = 4 * v68;
            *(_DWORD *)(v78 + v80) = v79;
            v81 = v79 + (v75[v68] + v76[v68]) * *(_DWORD *)(a3 + 20);
            *(_DWORD *)(v78 + v80) = v81;
            v82 = v81 + (v73[v68] + v74[v68]) * *(_DWORD *)(a3 + 24);
            *(_DWORD *)(v78 + v80) = v82;
            v83 = v82 + (v71[v68] + v72[v68]) * *(_DWORD *)(a3 + 28);
            *(_DWORD *)(v78 + v80) = v83;
            *(_DWORD *)(v78 + v80) = v83
                                   + (v69[v68] + v70[v68]) * *(_DWORD *)(a3 + 32);
            ++v68;
          }
          while (v8 - (v54 | 4) != v68);
          v66 = v8;
          v67 = v106;
        }
        v84 = (float32x4_t *)(v6 + 4 * v66);
        v85 = &v84[-1].f32[3];
        v86 = vld1q_dup_f32(v85);
        *v84 = v86;
        if (v54 < v8)
        {
          v87 = v6 + 4 * v54;
          do
          {
            if ((v54 & 1) == 0)
            {
              v88 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v87 - 16));
              v16->i16[v53++] = (vaddvq_s32(vmulq_s32(vaddq_s32((int32x4_t)vextq_s8(v88, v88, 8uLL), *(int32x4_t *)(v87 + 4)), *(int32x4_t *)(a3 + 20)))+ *(_DWORD *)v87 * *(_DWORD *)(a3 + 16)+ 512) >> 10;
            }
            ++v54;
            v87 += 4;
          }
          while (v8 != v54);
        }
        if (v7)
        {
          v89 = v38;
          v91 = v110;
          v90 = v111;
          v93 = v120;
          v92 = v22;
          v94 = v109;
          v95 = v119;
          v96 = v52;
        }
        else
        {
          v91 = v110;
          v90 = v111;
          v36 = v38;
          v89 = (uint8x8_t *)((char *)v38 + v111);
          v95 = (uint8x8_t *)((char *)v38 + v111 + v110);
          v96 = (uint8x8_t *)((char *)v38 + v111 + v67);
          v92 = (uint8x8_t *)((char *)v38 + v111 + v111);
          v94 = v109;
          v93 = (uint8x8_t *)((char *)v38 + v111 + v109);
          v31 = (uint8x8_t *)((char *)v38 + v111 + v118);
          v35 = v38;
          v17 = v38;
        }
        v97 = (uint8x8_t *)((char *)v89 + v90);
        v98 = (uint8x8_t *)((char *)v89 + v90 + v91);
        v99 = (uint8x8_t *)((char *)v89 + v90 + v115);
        v100 = (uint8x8_t *)((char *)v89 + v90 + v67);
        v101 = (uint8x8_t *)((char *)v89 + v90 + v90);
        v25 = (uint8x8_t *)((char *)v89 + v90 + v94);
        if (v7 == v117)
          v102 = (uint8x8_t *)((char *)v89 + v90 + v94);
        else
          v102 = v31;
        if (v7 == v117)
        {
          v103 = (uint8x8_t *)((char *)v89 + v90 + v116);
        }
        else
        {
          v25 = v93;
          v101 = v92;
          v100 = v96;
          v97 = v89;
          v98 = v95;
          v89 = v36;
          v103 = v35;
        }
        if (v7 != v117)
          v99 = v17;
        v9 = v67;
        v104 = (uint8x8_t *)((char *)v97 + v90 + v67);
        if (v7 == v114)
        {
          v102 = v104;
          v25 = v104;
          v22 = v104;
        }
        else
        {
          v22 = v101;
        }
        v20 = v7 == v114 ? v104 : v100;
        v38 = v7 == v114 ? (uint8x8_t *)&v97->i8[v90] : v97;
        v37 = v7 == v114 ? (uint8x8_t *)&v97->i8[v90 + v91] : v98;
        v36 = v7 == v114 ? v97 : v89;
        v35 = v7 == v114 ? (uint8x8_t *)&v97->i8[v90 + v113] : v103;
        v17 = v7 == v114 ? (uint8x8_t *)&v97->i8[v90 + v115] : v99;
        if (v7)
          break;
        v6 = a4;
        v31 = v102;
        v16 = (int16x4_t *)((char *)v16 + v112);
        v7 = 2;
        if (v108 <= 2)
          return 0;
      }
      v39 = (uint8x8_t *)((char *)v38 + v90 + v91);
      v40 = (uint8x8_t *)((char *)v38 + v90 + v116);
      v41 = (uint8x8_t *)((char *)v38 + v90 + v115);
      if (v7 < v117)
        v31 = (uint8x8_t *)((char *)v38 + v90 + v118);
      else
        v31 = v102;
      if (v7 < v117)
      {
        v25 = (uint8x8_t *)((char *)v38 + v90 + v94);
        v22 = (uint8x8_t *)((char *)v38 + v90 + v90);
        v20 = (uint8x8_t *)((char *)v38 + v90 + v9);
        v36 = v38;
        v38 = (uint8x8_t *)((char *)v38 + v90);
        v37 = v39;
        v35 = v40;
        v17 = v41;
      }
      v6 = a4;
      v16 = (int16x4_t *)((char *)v16 + v112);
      v7 += 2;
    }
    while (v7 < v108);
  }
  return 0;
}

uint64_t sub_20E8DABCC(unsigned __int16 **a1, void **a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  unint64_t v5;
  char *v8;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  uint32x4_t v16;
  int32x4_t v17;
  unsigned int v18;
  int32x4_t v20;
  int32x4_t v21;
  uint16x8_t v22;
  unint64_t v23;
  unsigned int v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  char *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  int32x4_t v38;
  unint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint16x8_t v42;
  unint64_t v43;
  unsigned int v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint16x4_t v59;
  uint16x4_t v60;
  uint16x4_t v61;
  uint16x4_t v62;
  uint16x4_t v63;
  int16x8_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint16x8_t v73;
  unint64_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int v80;
  char *v81;
  uint64_t v82;
  int32x4_t v83;
  unsigned __int16 *v84;
  uint32x4_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;

  v5 = (unint64_t)a1[2];
  if ((void *)v5 != a2[2])
    return -21774;
  v8 = (char *)a1[1];
  if (v8 != a2[1])
    return -21774;
  v12 = *a1;
  v84 = a1[3];
  v13 = *a4;
  v81 = (char *)*a2;
  v82 = a4[3];
  bzero(*a2, 2 * v5);
  v14 = (char *)a2[3];
  v15 = 1 << (a5 - 1);
  v16 = (uint32x4_t)vdupq_n_s32(v15);
  v17 = vdupq_n_s32(a5);
  if (v5 >= 8)
  {
    v18 = 0;
    v20 = vnegq_s32(v17);
    v21.i64[0] = 0xFF000000FFLL;
    v21.i64[1] = 0xFF000000FFLL;
    do
    {
      v22 = *(uint16x8_t *)&v12[v18];
      v86.val[1] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_high_u16(v16, v22), v20), v21);
      v86.val[0] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v16, *(uint16x4_t *)v22.i8), v20), v21);
      *(_QWORD *)(v13 + v18) = vqtbl2q_s8(v86, (int8x16_t)xmmword_2102DB000).u64[0];
      v23 = v18 + 16;
      v18 += 8;
    }
    while (v5 >= v23);
  }
  else
  {
    v18 = 0;
  }
  if (v5 >= (v18 | 4))
  {
    v25 = vnegq_s32(v17);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v24 = v18;
    do
    {
      v27 = (int16x8_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v16, *(uint16x4_t *)&v12[v24]), v25), v26);
      *(int16x4_t *)v27.i8 = vmovn_s32((int32x4_t)v27);
      *(_DWORD *)(v13 + v24) = vmovn_s16(v27).u32[0];
      v28 = v24 + 8;
      v24 += 4;
    }
    while (v5 >= v28);
  }
  else
  {
    v24 = v18;
  }
  v29 = (unsigned __int16 *)((char *)v84 + (_QWORD)v12);
  v30 = &v14[(_QWORD)v81];
  v31 = v24;
  if (v5 > v24)
  {
    v32 = v24 + 1;
    do
    {
      v33 = (v15 + v12[v31]) >> a5;
      if (v33 >= 0xFF)
        LOBYTE(v33) = -1;
      *(_BYTE *)(v13 + v31) = v33;
      v31 = v32++;
    }
    while (v5 > v31);
  }
  v34 = (_BYTE *)(v13 + v82);
  v35 = (unint64_t)(v8 - 1);
  if ((unint64_t)(v8 - 1) >= 2)
  {
    v36 = (char *)v84 + (_QWORD)v29;
    v37 = v5 - 1;
    v38 = vdupq_n_s32(a3);
    LODWORD(v39) = 1;
    v40 = vnegq_s32(v17);
    v41.i64[0] = 0xFF000000FFLL;
    v41.i64[1] = 0xFF000000FFLL;
    v42.i64[0] = 0x4000400040004;
    v42.i64[1] = 0x4000400040004;
    while (1)
    {
      *(_WORD *)v30 = 0;
      v46 = (v15 + *v29) >> a5;
      if (v46 >= 0xFF)
        LOBYTE(v46) = -1;
      *v34 = v46;
      if (v37 >= 9)
        break;
      LODWORD(v56) = 1;
      if (v37 > 4)
        goto LABEL_31;
LABEL_34:
      v56 = v56;
      if (v37 <= v56)
      {
        v43 = v56;
      }
      else
      {
        v66 = v56 + 1;
        do
        {
          while (1)
          {
            v68 = (v15 + v29[v56]) >> a5;
            if (v68 >= 0xFF)
              LOBYTE(v68) = -1;
            v34[v56] = v68;
            v69 = (v29[v66] + v29[v66 - 2] + v12[v56] - 4 * v29[v56] + *(unsigned __int16 *)&v36[2 * v56]) * a3;
            if (v69 >= -8388752)
              break;
            v43 = v66;
            *(_WORD *)&v30[2 * v56] = 0x8000;
            ++v66;
            v56 = v43;
            if (v37 <= v43)
              goto LABEL_20;
          }
          v67 = ((v69 << 8) + 36864) >> 16;
          if (v69 > 8388463)
            LOWORD(v67) = 0x7FFF;
          v43 = v66;
          *(_WORD *)&v30[2 * v56] = v67;
          ++v66;
          v56 = v43;
        }
        while (v37 > v43);
      }
LABEL_20:
      *(_WORD *)&v30[2 * v37] = 0;
      v44 = (v15 + v29[v43]) >> a5;
      if (v44 >= 0xFF)
        LOBYTE(v44) = -1;
      v34[v43] = v44;
      v45 = v36;
      v12 = v29;
      v29 = (unsigned __int16 *)v36;
      v36 = (char *)a1[3] + (_QWORD)v36;
      v30 = (char *)a2[3] + (_QWORD)v30;
      v34 += a4[3];
      v39 = (v39 + 1);
      if (v35 <= v39)
        goto LABEL_45;
    }
    v47 = 16;
    do
    {
      v48 = v47 - 15;
      v49 = *(uint16x8_t *)&v12[v48];
      v50 = *(uint16x8_t *)&v36[v48 * 2];
      v51 = *(uint16x8_t *)&v29[v47 - 16];
      v52 = *(uint16x8_t *)&v29[v48];
      v53 = *(uint16x8_t *)&v29[v47 - 14];
      v88.val[1] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_high_u16(v16, v52), v40), v41);
      v88.val[0] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v16, *(uint16x4_t *)v52.i8), v40), v41);
      *(_QWORD *)&v34[v47 - 15] = vqtbl2q_s8(v88, (int8x16_t)xmmword_2102DB000).u64[0];
      *(int16x8_t *)&v30[v48 * 2] = vqrshrn_high_n_s32(vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_u16(vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), *(uint16x4_t *)v51.i8), *(uint16x4_t *)v53.i8), *(uint16x4_t *)v52.i8, (uint16x4_t)0x4000400040004), v38), 5uLL), 3uLL), vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_high_u16(vaddw_high_u16(vaddw_high_u16(vaddl_high_u16(v50, v49), v51),
                                                         v53),
                                                       v52,
                                                       v42),
                                          v38),
                                        5uLL),
                                      3uLL);
      v54 = v47 + 8;
      v55 = v37 > v47;
      v47 += 8;
    }
    while (v55);
    LODWORD(v56) = v54 - 15;
    if (v37 <= v54 - 12)
      goto LABEL_34;
LABEL_31:
    v57 = v56 + 7;
    do
    {
      v58 = v57 - 7;
      v59 = *(uint16x4_t *)&v12[v58];
      v60 = *(uint16x4_t *)&v36[v58 * 2];
      v61 = *(uint16x4_t *)&v29[v57 - 8];
      v62 = *(uint16x4_t *)&v29[v58];
      v63 = *(uint16x4_t *)&v29[v57 - 6];
      v64 = (int16x8_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v16, v62), v40), v41);
      *(int16x4_t *)v64.i8 = vmovn_s32((int32x4_t)v64);
      *(_DWORD *)&v34[v57 - 7] = vmovn_s16(v64).u32[0];
      *(int16x4_t *)&v30[v58 * 2] = vqrshrn_n_s32(vrshrq_n_s32(vmulq_s32((int32x4_t)vmlsl_u16(vaddw_u16(vaddw_u16(vaddl_u16(v60, v59), v61), v63), v62, (uint16x4_t)0x4000400040004), v38), 5uLL), 3uLL);
      v65 = v57 + 4;
      v55 = v37 > v57;
      v57 += 4;
    }
    while (v55);
    LODWORD(v56) = v65 - 7;
    goto LABEL_34;
  }
  v45 = (char *)v84 + (_QWORD)v12;
LABEL_45:
  v83 = v17;
  v85 = v16;
  bzero(v30, 2 * (_QWORD)a2[2]);
  if (v5 >= 8)
  {
    LODWORD(v70) = 0;
    v71 = vnegq_s32(v83);
    v72.i64[0] = 0xFF000000FFLL;
    v72.i64[1] = 0xFF000000FFLL;
    do
    {
      v73 = *(uint16x8_t *)&v45[2 * v70];
      v87.val[1] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_high_u16(v85, v73), v71), v72);
      v87.val[0] = (int8x16_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v85, *(uint16x4_t *)v73.i8), v71), v72);
      *(_QWORD *)&v34[v70] = vqtbl2q_s8(v87, (int8x16_t)xmmword_2102DB000).u64[0];
      v74 = (v70 + 16);
      LODWORD(v70) = v70 + 8;
    }
    while (v5 >= v74);
  }
  else
  {
    LODWORD(v70) = 0;
  }
  if (v5 >= (v70 | 4))
  {
    v75 = vnegq_s32(v83);
    v76.i64[0] = 0xFF000000FFLL;
    v76.i64[1] = 0xFF000000FFLL;
    do
    {
      v77 = (int16x8_t)vminq_s32(vshlq_s32((int32x4_t)vaddw_u16(v85, *(uint16x4_t *)&v45[2 * v70]), v75), v76);
      *(int16x4_t *)v77.i8 = vmovn_s32((int32x4_t)v77);
      *(_DWORD *)&v34[v70] = vmovn_s16(v77).u32[0];
      v78 = (v70 + 8);
      LODWORD(v70) = v70 + 4;
    }
    while (v5 >= v78);
  }
  v70 = v70;
  if (v5 > v70)
  {
    v79 = v70 + 1;
    do
    {
      v80 = (v15 + *(unsigned __int16 *)&v45[2 * v70]) >> a5;
      if (v80 >= 0xFF)
        LOBYTE(v80) = -1;
      v34[v70] = v80;
      v70 = v79++;
    }
    while (v5 > v70);
  }
  return 0;
}

uint64_t sub_20E8DB13C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = *a2;
  if (*a3)
    sub_20E8D8454(a1, a5, (uint64_t)&unk_2102DB050, a6, v12, 8, *a3, 16);
  else
    sub_20E8D7F98(a1, (uint64_t)a5, (uint64_t)&unk_2102DB050, a6, v12, 8);
  v13 = a3[1];
  v14 = a2[1];
  if (!v13)
  {
    sub_20E8D8D84(a1, (uint64_t)a5, flt_2102DB06C, a6, v14, 8);
    if (!a4)
      return 0;
    goto LABEL_6;
  }
  sub_20E8D9364(a1, a5, (uint64_t)flt_2102DB06C, a6, v14, 8, v13, 32);
  if (a4)
LABEL_6:
    sub_20E8DA4E0(a1, v15, (uint64_t)&flt_2102DB06C[18], a6, a4);
  return 0;
}

uint64_t sub_20E8DB208(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint16x4_t *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t j;
  uint64_t k;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint16x4_t *v30;
  uint32x4_t v31;
  int32x4_t v32;
  unint64_t v33;
  uint16x4_t *v34;
  _DWORD *v35;
  uint64_t v36;
  uint16x8_t *v37;
  uint64_t v38;
  _DWORD *v39;
  uint16x4_t *v40;
  uint16x8_t v41;
  unint64_t v42;
  uint16x4_t v43;
  int16x8_t v44;
  unint64_t v45;
  unsigned int v46;
  uint32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  uint64_t v50;
  uint32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  uint64_t i;
  unsigned int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int8x16x2_t v59;

  v11 = (uint64_t *)*a2;
  if (*(_QWORD *)a3)
  {
    sub_20E8DABCC((unsigned __int16 **)a1, *(void ***)a3, 0x10u, v11, 8u);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      v18 = *(uint16x4_t **)a1;
      v19 = (_DWORD *)*v11;
      v20 = v11[3];
      v22 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 24);
      if (v22 >= 8)
      {
        v28 = 0;
        v29 = v19 + 2;
        v30 = v18 + 2;
        v31.i64[0] = 0x8000000080;
        v31.i64[1] = 0x8000000080;
        v32.i64[0] = 0xFF000000FFLL;
        v32.i64[1] = 0xFF000000FFLL;
        do
        {
          v33 = 0;
          v34 = v30;
          v35 = v29;
          v36 = 8;
          v37 = (uint16x8_t *)v18;
          do
          {
            v38 = v36;
            v39 = v35;
            v40 = v34;
            v41 = *v37++;
            v59.val[1] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v31, v41), 8uLL), v32);
            v59.val[0] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v31, *(uint16x4_t *)v41.i8), 8uLL), v32);
            *(_QWORD *)((char *)v19 + v33) = vqtbl2q_s8(v59, (int8x16_t)xmmword_2102DB000).u64[0];
            v42 = v33 + 16;
            v33 += 8;
            v36 += 8;
            v35 += 2;
            v34 += 2;
          }
          while (v42 <= v22);
          if (v33 + 4 <= v22)
          {
            do
            {
              v43 = *v40++;
              v44 = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v31, v43), 8uLL), v32);
              *(int16x4_t *)v44.i8 = vmovn_s32((int32x4_t)v44);
              *v39++ = vmovn_s16(v44).u32[0];
              v33 = v38 + 4;
              v45 = v38 + 8;
              v38 += 4;
            }
            while (v45 <= v22);
          }
          if (v33 < v22)
          {
            do
            {
              v46 = (v18->u16[v33] + 128) >> 8;
              if (v46 >= 0xFF)
                LOBYTE(v46) = -1;
              *((_BYTE *)v19 + v33++) = v46;
            }
            while (v22 != v33);
          }
          v18 = (uint16x4_t *)((char *)v18 + v21);
          v19 = (_DWORD *)((char *)v19 + v20);
          ++v28;
          v29 = (_DWORD *)((char *)v29 + v20);
          v30 = (uint16x4_t *)((char *)v30 + v21);
        }
        while (v28 != v17);
      }
      else if (v22 >= 4)
      {
        if (v22 == 4)
        {
          v47.i64[0] = 0x8000000080;
          v47.i64[1] = 0x8000000080;
          v48.i64[0] = 0xFF000000FFLL;
          v48.i64[1] = 0xFF000000FFLL;
          do
          {
            v49 = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v47, *v18), 8uLL), v48);
            *(int16x4_t *)v49.i8 = vmovn_s32((int32x4_t)v49);
            *v19 = vmovn_s16(v49).u32[0];
            v18 = (uint16x4_t *)((char *)v18 + v21);
            v19 = (_DWORD *)((char *)v19 + v20);
            --v17;
          }
          while (v17);
        }
        else
        {
          v50 = 0;
          v51.i64[0] = 0x8000000080;
          v51.i64[1] = 0x8000000080;
          v52.i64[0] = 0xFF000000FFLL;
          v52.i64[1] = 0xFF000000FFLL;
          do
          {
            v53 = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v51, *v18), 8uLL), v52);
            *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)v53);
            *v19 = vmovn_s16(v53).u32[0];
            for (i = 4; i != v22; ++i)
            {
              v55 = (v18->u16[i] + 128) >> 8;
              if (v55 >= 0xFF)
                LOBYTE(v55) = -1;
              *((_BYTE *)v19 + i) = v55;
            }
            v18 = (uint16x4_t *)((char *)v18 + v21);
            v19 = (_DWORD *)((char *)v19 + v20);
            ++v50;
          }
          while (v50 != v17);
        }
      }
      else if (v22)
      {
        for (j = 0; j != v17; ++j)
        {
          for (k = 0; k != v22; ++k)
          {
            v25 = (v18->u16[k] + 128) >> 8;
            if (v25 >= 0xFF)
              LOBYTE(v25) = -1;
            *((_BYTE *)v19 + k) = v25;
          }
          v18 = (uint16x4_t *)((char *)v18 + v21);
          v19 = (_DWORD *)((char *)v19 + v20);
        }
      }
    }
  }
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
  {
    v27 = *a2;
    v26 = a2[1];
    v56 = *(_QWORD *)*a2;
    v57 = *(_OWORD *)(v27 + 8);
    v58 = *(_QWORD *)(v27 + 24);
    sub_20E8D7F98((uint64_t)&v56, (uint64_t)a5, (uint64_t)&unk_2102DB050, a6, v26, 8);
    if (!a4)
      return 0;
    goto LABEL_5;
  }
  v14 = (_QWORD *)*a2;
  v13 = a2[1];
  v56 = *(_QWORD *)*a2;
  v57 = *(_OWORD *)(v14 + 1);
  v58 = v14[3];
  sub_20E8D8454((uint64_t)&v56, a5, (uint64_t)&unk_2102DB050, a6, v13, 8, v12, 32);
  if (a4)
LABEL_5:
    sub_20E8D9DB0(*a2, v15, (uint64_t)&flt_2102DB06C[9], a6, a4);
  return 0;
}

double CV3DGetVersionInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x1300000007;
  *(_QWORD *)a1 = 0x1300000007;
  *(_DWORD *)(a1 + 8) = 58;
  *(_QWORD *)(a1 + 16) = "";
  return result;
}

uint64_t *CV3DGetBundleIdentifier()
{
  unsigned __int8 v0;
  __int128 v2;
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5ABC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ABC8))
  {
    sub_20E9E46F8((uint64_t)&v2);
    *(_OWORD *)&qword_254A5ABD0 = v2;
    unk_254A5ABE0 = v3;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5ABD0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ABC8);
  }
  if (byte_254A5ABE7 >= 0)
    return &qword_254A5ABD0;
  else
    return (uint64_t *)qword_254A5ABD0;
}

void sub_20E8DB5F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ABC8);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8DB608(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184) && *(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  if (!*(_BYTE *)(a1 + 120) || (*(char *)(a1 + 119) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 96));
  return a1;
}

void sub_20E8DB68C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184) && *(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  if (*(_BYTE *)(a1 + 120))
  {
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8DB710(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_20E8DDADC(a1 + 8);
    return a1;
  }
  else
  {
LABEL_5:
    sub_20E8DDADC(a1 + 8);
    return a1;
  }
}

void sub_20E8DB788(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20E8DDADC(a1 + 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E8DB7F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_20E8DB870(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x212BC6398);
}

double CV3DDiagnosticsRunOptionsCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0xC8uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[24] = 0;
    result = 0.0;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 48) = 1;
    *v0 = off_24C9AF918;
  }
  return result;
}

char *CV3DDiagnosticsRunOptionsCreateForSysdiagnose(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  __int128 *DefaultServerPath_0;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  void *__p[2];
  uint64_t v31;
  unsigned __int8 v32;

  DefaultServerPath_0 = CV3DDiagnosticsRunOptionsGetDefaultServerPath_0();
  sub_20EA591E8(a1, a2, a3, a4, a5, (char *)DefaultServerPath_0, (uint64_t)&v18);
  v11 = (char *)operator new(0xC8uLL, MEMORY[0x24BEDB6B8]);
  v12 = v11;
  if (!v11)
  {
    if (!v32)
      goto LABEL_13;
    goto LABEL_11;
  }
  v13 = v18;
  v11[96] = 0;
  *(_OWORD *)(v11 + 8) = v13;
  *((_QWORD *)v11 + 3) = v19;
  v14 = v21;
  *((_OWORD *)v11 + 2) = v20;
  *((_OWORD *)v11 + 3) = v14;
  v15 = v23;
  *((_OWORD *)v11 + 4) = v22;
  *((_OWORD *)v11 + 5) = v15;
  v11[120] = 0;
  if (v26)
  {
    *((_OWORD *)v11 + 6) = *(_OWORD *)v24;
    *((_QWORD *)v11 + 14) = v25;
    v24[1] = 0;
    v25 = 0;
    v24[0] = 0;
    v11[120] = 1;
  }
  v11[128] = 0;
  v11[152] = 0;
  if (v29)
  {
    *((_OWORD *)v11 + 8) = *(_OWORD *)v27;
    *((_QWORD *)v11 + 18) = v28;
    v27[1] = 0;
    v28 = 0;
    v27[0] = 0;
    v11[152] = 1;
  }
  v11[160] = 0;
  v11[184] = 0;
  v16 = v32;
  if (v32)
  {
    *((_OWORD *)v11 + 10) = *(_OWORD *)__p;
    *((_QWORD *)v11 + 22) = v31;
    __p[1] = 0;
    v31 = 0;
    __p[0] = 0;
    v11[184] = 1;
  }
  *((_DWORD *)v11 + 48) = 1;
  *(_QWORD *)v11 = off_24C9AF918;
  if (v16)
  {
LABEL_11:
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
  }
LABEL_13:
  if (v29 && SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  if (v26 && SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  return v12;
}

uint64_t sub_20E8DBAF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176) && *(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 144))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
LABEL_7:
  if (!*(_BYTE *)(a1 + 112) || (*(char *)(a1 + 111) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 88));
  return a1;
}

uint64_t CV3DDiagnosticsRunOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (result)
  {
    v1 = (unsigned int *)(result + 192);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 69, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      abort();
    do
      v4 = __ldaxr((unsigned int *)0xC0);
    while (__stlxr(v4 - 1, (unsigned int *)0xC0));
  }
  return result;
}

BOOL CV3DDiagnosticsRunOptionsRetain(_BOOL8 result)
{
  uint64_t v1;
  unsigned int v2;

  if (result)
  {
    v1 = result + 192;
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 74, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
    v1 = 192;
  }
  do
    v2 = __ldaxr((unsigned int *)v1);
  while (__stlxr(v2 + 1, (unsigned int *)v1));
  return result;
}

BOOL CV3DDiagnosticsRunOptionsSetCauseMachContinuousTime(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;

  v3 = result;
  if (!result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 80, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
  }
  if (a2)
  {
    if (!*(_BYTE *)(v3 + 24))
      *(_BYTE *)(v3 + 24) = 1;
    *(_QWORD *)(v3 + 8) = a2;
    *(_BYTE *)(v3 + 16) = 2;
  }
  else if (*(_BYTE *)(v3 + 24))
  {
    *(_BYTE *)(v3 + 24) = 0;
  }
  return result;
}

uint64_t CV3DDiagnosticsRunOptionsGetCauseMachContinuousTime(uint64_t a1)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 86, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 24))
    return *(_QWORD *)(a1 + 8);
  else
    return 0;
}

void CV3DDiagnosticsRunOptionsSetCauseName(uint64_t a1, char *__s)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 92, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA59330(a1 + 8, __s);
}

uint64_t CV3DDiagnosticsRunOptionsGetCauseName(uint64_t a1)
{
  uint64_t result;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 97, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 152))
    return 0;
  result = a1 + 128;
  if (*(char *)(a1 + 151) < 0)
    return *(_QWORD *)result;
  return result;
}

void CV3DDiagnosticsRunOptionsSetCauseDescription(uint64_t a1, char *__s)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 103, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA594F8(a1 + 8, __s);
}

uint64_t CV3DDiagnosticsRunOptionsGetCauseDescription(uint64_t a1)
{
  uint64_t result;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 108, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 184))
    return 0;
  result = a1 + 160;
  if (*(char *)(a1 + 183) < 0)
    return *(_QWORD *)result;
  return result;
}

BOOL CV3DDiagnosticsRunOptionsSetArchivingEnabled(_BOOL8 result, int a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  char v6;

  v3 = result;
  if (!result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 114, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
  }
  if (*(_BYTE *)(v3 + 88))
    v4 = a2 == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(v3 + 88))
    v5 = 1;
  else
    v5 = a2 == 0;
  if (!v5)
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    v6 = 1;
LABEL_13:
    *(_BYTE *)(v3 + 88) = v6;
  }
  return result;
}

uint64_t CV3DDiagnosticsRunOptionsGetArchivingEnabled(uint64_t a1)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 119, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return *(unsigned __int8 *)(a1 + 88);
}

BOOL CV3DDiagnosticsRunOptionsSetMemoryLimit(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  int v5;
  _BYTE *v6;
  int v7;

  v3 = result;
  if (!result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 125, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
  }
  v4 = (_OWORD *)(v3 + 32);
  if (!*(_BYTE *)(v3 + 88))
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *v4 = 0u;
    *(_BYTE *)(v3 + 88) = 1;
    if (!a2)
      return result;
    v6 = (_BYTE *)(v3 + 40);
    goto LABEL_9;
  }
  v7 = *(unsigned __int8 *)(v3 + 40);
  v6 = (_BYTE *)(v3 + 40);
  v5 = v7;
  if (a2)
  {
    if (v5)
    {
LABEL_10:
      *(_QWORD *)v4 = a2;
      return result;
    }
LABEL_9:
    *v6 = 1;
    goto LABEL_10;
  }
  if (v5)
    *v6 = 0;
  return result;
}

uint64_t CV3DDiagnosticsRunOptionsGetMemoryLimit(uint64_t a1)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 130, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 40))
    return *(_QWORD *)(a1 + 32);
  else
    return 0;
}

BOOL CV3DDiagnosticsRunOptionsSetMachContinuousTimeLimit(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;

  v3 = result;
  if (!result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 136, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
  }
  if (*(_BYTE *)(v3 + 88))
  {
    if (a2)
    {
LABEL_5:
      if (!*(_BYTE *)(v3 + 80))
        *(_BYTE *)(v3 + 80) = 1;
      *(_QWORD *)(v3 + 64) = a2;
      *(_BYTE *)(v3 + 72) = 2;
      return result;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_BYTE *)(v3 + 88) = 1;
    if (a2)
      goto LABEL_5;
  }
  if (*(_BYTE *)(v3 + 80))
    *(_BYTE *)(v3 + 80) = 0;
  return result;
}

uint64_t CV3DDiagnosticsRunOptionsGetMachContinuousTimeLimit(uint64_t a1)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 142, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 80))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

BOOL CV3DDiagnosticsRunOptionsSetDurationLimitSeconds(_BOOL8 result, double a2)
{
  uint64_t v3;

  v3 = result;
  if (!result)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 148, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
  }
  if (*(_BYTE *)(v3 + 88))
  {
    if (a2 > 0.0)
    {
LABEL_5:
      *(_QWORD *)(v3 + 48) = (uint64_t)(a2 * 1000000000.0);
      *(_BYTE *)(v3 + 56) = 1;
      return result;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_BYTE *)(v3 + 88) = 1;
    if (a2 > 0.0)
      goto LABEL_5;
  }
  if (*(_BYTE *)(v3 + 56))
    *(_BYTE *)(v3 + 56) = 0;
  return result;
}

double CV3DDiagnosticsRunOptionsGetDurationLimitSeconds(uint64_t a1)
{
  double result;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 154, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = 0.0;
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 56))
      return (double)*(uint64_t *)(a1 + 48) / 1000000000.0;
  }
  return result;
}

void CV3DDiagnosticsRunOptionsSetServerPath(uint64_t a1, char *__s)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 164, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA596C0(a1 + 8, __s);
}

uint64_t CV3DDiagnosticsRunOptionsGetServerPath(uint64_t a1)
{
  uint64_t result;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 169, (uint64_t)"options", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 120))
    return 0;
  result = a1 + 96;
  if (*(char *)(a1 + 119) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t CV3DDiagnosticsRunResultsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (result)
  {
    v1 = (unsigned int *)(result + 184);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 176, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      abort();
    do
      v4 = __ldaxr((unsigned int *)0xB8);
    while (__stlxr(v4 - 1, (unsigned int *)0xB8));
  }
  return result;
}

BOOL CV3DDiagnosticsRunResultsRetain(_BOOL8 result)
{
  uint64_t v1;
  unsigned int v2;

  if (result)
  {
    v1 = result + 184;
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 181, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
    v1 = 184;
  }
  do
    v2 = __ldaxr((unsigned int *)v1);
  while (__stlxr(v2 + 1, (unsigned int *)v1));
  return result;
}

unint64_t CV3DDiagnosticsRunResultsGetOutputPathCount(uint64_t a1)
{
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 186, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 32))
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  else
    return 0;
}

char *CV3DDiagnosticsRunResultsGetOutputPathAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *result;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 192, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v4) >> 3) <= a2)
    return 0;
  result = (char *)(v4 + 24 * a2);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t CV3DDiagnosticsRunResultsGetErrorCode(uint64_t a1)
{
  int v2;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 198, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  LOBYTE(v2) = *(_BYTE *)(a1 + 160);
  if ((_BYTE)v2)
    return *(_DWORD *)(a1 + 40);
  return v2;
}

uint64_t CV3DDiagnosticsRunResultsGetError(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 203, (uint64_t)"results", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA5ABC4(&v7, a1 + 168);
  v2 = v7;
  v3 = v8;
  if (!v8)
    return v2;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v2;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

uint64_t CV3DDiagnosticsContextGet()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5ABF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5ABF0))
    return qword_254A5ABE8;
  sub_20E8DDBB8(&v2);
  qword_254A5ABE8 = v2;
  __cxa_atexit((void (*)(void *))sub_20E8DC8DC, &qword_254A5ABE8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5ABF0);
  return qword_254A5ABE8;
}

uint64_t *sub_20E8DC8DC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

char *CV3DDiagnosticsContextCreate()
{
  unsigned __int8 v0;
  char *v1;
  char *v2;
  __int128 v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  unsigned __int8 v14;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v11 = 0;
  sub_20EA59EE4((uint64_t)&off_254A5A4B8, &v11, (uint64_t)&v12);
  v1 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  v2 = v1;
  if (!v1)
  {
    if (!v14)
      goto LABEL_13;
    goto LABEL_8;
  }
  v3 = v12;
  *(_QWORD *)&v12 = 0;
  *(_OWORD *)(v1 + 8) = v3;
  v1[24] = 0;
  v1[40] = 0;
  v4 = v14;
  if (v14)
  {
    *(_OWORD *)(v1 + 24) = v13;
    v13 = 0uLL;
    v1[40] = 1;
  }
  *((_DWORD *)v1 + 12) = 1;
  *(_QWORD *)v1 = &off_24C9AFA28;
  if (v4)
  {
LABEL_8:
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
LABEL_13:
  v8 = v12;
  *(_QWORD *)&v12 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v11;
  v11 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return v2;
}

void sub_20E8DCA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DDiagnosticsContextRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 219, (uint64_t)"context", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      abort();
    do
      v4 = __ldaxr((unsigned int *)0x30);
    while (__stlxr(v4 - 1, (unsigned int *)0x30));
  }
  return result;
}

BOOL CV3DDiagnosticsContextRetain(_BOOL8 result)
{
  uint64_t v1;
  unsigned int v2;

  if (result)
  {
    v1 = result + 48;
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DDiagnostics.cpp", 224, (uint64_t)"context", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      abort();
    v1 = 48;
  }
  do
    v2 = __ldaxr((unsigned int *)v1);
  while (__stlxr(v2 + 1, (unsigned int *)v1));
  return result;
}

char *CV3DDiagnosticsContextCreateWithFileDestination(const char *a1)
{
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char *v8;
  char *v9;
  __int128 v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  void *__dst[2];
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 v23;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v20 = v6 | 0x8000000000000000;
    __dst[0] = v4;
  }
  else
  {
    HIBYTE(v20) = v2;
    v4 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memcpy(v4, a1, (size_t)v3);
LABEL_9:
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v18 = 0;
  sub_20EA5A100((uint64_t)__dst, (uint64_t)&off_254A5A4B8, &v18, 0, 0, (uint64_t)&v21);
  v8 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (!v8)
  {
    if (!v23)
      goto LABEL_21;
    goto LABEL_16;
  }
  v10 = v21;
  *(_QWORD *)&v21 = 0;
  *(_OWORD *)(v8 + 8) = v10;
  v8[24] = 0;
  v8[40] = 0;
  v11 = v23;
  if (v23)
  {
    *(_OWORD *)(v8 + 24) = v22;
    v22 = 0uLL;
    v8[40] = 1;
  }
  *((_DWORD *)v8 + 12) = 1;
  *(_QWORD *)v8 = &off_24C9AFA28;
  if (v11)
  {
LABEL_16:
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
LABEL_21:
  v15 = v21;
  *(_QWORD *)&v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v18;
  v18 = 0;
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  return v9;
}

void sub_20E8DCD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *CV3DDiagnosticsContextCreateWithFileDestinationAndClientTrigger(const char *a1, const char *a2)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  char *v15;
  char *v16;
  __int128 v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v25;
  void *__p[2];
  unint64_t v27;
  void *__dst[2];
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;

  v4 = strlen(a1);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v29 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v29) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a1, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = strlen(a2);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = v10;
    v27 = v13 | 0x8000000000000000;
    __p[0] = v11;
  }
  else
  {
    HIBYTE(v27) = v9;
    v11 = __p;
    if (!v9)
      goto LABEL_17;
  }
  memcpy(v11, a2, (size_t)v10);
LABEL_17:
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v14 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v25 = 0;
  sub_20EA5A300((uint64_t)__dst, (uint64_t)__p, (uint64_t)&off_254A5A4B8, &v25, 0, 0, (uint64_t)&v30);
  v15 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  v16 = v15;
  if (!v15)
  {
    if (!v32)
      goto LABEL_29;
    goto LABEL_24;
  }
  v17 = v30;
  *(_QWORD *)&v30 = 0;
  *(_OWORD *)(v15 + 8) = v17;
  v15[24] = 0;
  v15[40] = 0;
  v18 = v32;
  if (v32)
  {
    *(_OWORD *)(v15 + 24) = v31;
    v31 = 0uLL;
    v15[40] = 1;
  }
  *((_DWORD *)v15 + 12) = 1;
  *(_QWORD *)v15 = &off_24C9AFA28;
  if (v18)
  {
LABEL_24:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_29:
  v22 = v30;
  *(_QWORD *)&v30 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      return v16;
LABEL_37:
    operator delete(__dst[0]);
    return v16;
  }
  if (SHIBYTE(v29) < 0)
    goto LABEL_37;
  return v16;
}

void sub_20E8DD084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DDiagnosticsContextRunAndCreateResults(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const char *v8;
  size_t v9;
  size_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;
  int v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL8 v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void **v38;
  void **i;
  __int128 __s2;
  uint64_t v41;
  __int128 v42;
  void *v43[2];
  __int128 v44;
  void *v45[2];
  __int128 v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 __p;
  uint64_t v53;
  char v54;
  __int128 __dst;
  int64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  void *v62[2];
  uint64_t v63;
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  __int128 v70;
  unsigned __int8 v71;

  if (!a2 || !a3 || !*(_BYTE *)(a2 + 152))
    goto LABEL_28;
  v8 = (const char *)(a2 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    if (!*(_QWORD *)v8)
      goto LABEL_28;
    v8 = *(const char **)v8;
  }
  v9 = strlen(v8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v10;
    v56 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v56) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_14:
    memmove(p_dst, v8, v10);
  *((_BYTE *)p_dst + v10) = 0;
  HIBYTE(v41) = 11;
  strcpy((char *)&__s2, "sysdiagnose");
  if (v56 >= 0)
    v14 = HIBYTE(v56);
  else
    v14 = *((_QWORD *)&__dst + 1);
  if (v14 == 11)
  {
    if (v56 < 0)
    {
      v16 = (void *)__dst;
      v17 = memcmp((const void *)__dst, &__s2, *((size_t *)&__dst + 1));
      operator delete(v16);
      if (v17)
        goto LABEL_28;
    }
    else if (HIBYTE(v56))
    {
      v15 = 0;
      while (*((unsigned __int8 *)&__dst + v15) == *((unsigned __int8 *)&__s2 + v15))
      {
        if (HIBYTE(v56) == ++v15)
          goto LABEL_84;
      }
      goto LABEL_25;
    }
LABEL_84:
    LOBYTE(__s2) = 0;
    LOBYTE(v42) = 0;
    BYTE8(v42) = 0;
    LOBYTE(__p) = 0;
    sub_20EA59888((uint64_t)&__dst, (uint64_t)&__s2);
    v30 = (char *)operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
    if (v30)
    {
      v30[8] = 0;
      v30[32] = 0;
      if (v57)
      {
        *(_OWORD *)(v30 + 8) = __dst;
        *((_QWORD *)v30 + 3) = v56;
        v56 = 0;
        __dst = 0uLL;
        v30[32] = 1;
      }
      v30[40] = 0;
      v30[160] = 0;
      if (v69)
      {
        *(_OWORD *)(v30 + 40) = v58;
        v30[56] = 0;
        v30[152] = 0;
        if (v68)
        {
          v30[80] = 0;
          if (v61)
          {
            *(_OWORD *)(v30 + 56) = v59;
            *((_QWORD *)v30 + 9) = v60;
            v60 = 0;
            v59 = 0uLL;
            v30[80] = 1;
          }
          v30[88] = 0;
          v30[144] = 0;
          if (v67)
          {
            v31 = v64;
            *((_QWORD *)v30 + 13) = v63;
            *(_OWORD *)(v30 + 88) = *(_OWORD *)v62;
            v62[0] = 0;
            v62[1] = 0;
            *((_QWORD *)v30 + 14) = v31;
            *(_OWORD *)(v30 + 120) = *(_OWORD *)v65;
            *((_QWORD *)v30 + 17) = v66;
            v63 = 0;
            v65[0] = 0;
            v65[1] = 0;
            v66 = 0;
            v30[144] = 1;
          }
          v30[152] = 1;
        }
        v30[160] = 1;
      }
      *(_OWORD *)(v30 + 168) = v70;
      v70 = 0uLL;
      *((_DWORD *)v30 + 46) = 1;
      *(_QWORD *)v30 = &off_24C9AF9A0;
      *a3 = v30;
    }
    else
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
      *a3 = 0;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    if (v69 && v68)
    {
      if (v67)
      {
        if (SHIBYTE(v66) < 0)
          operator delete(v65[0]);
        if (SHIBYTE(v63) < 0)
          operator delete(v62[0]);
      }
      if (v61 && SHIBYTE(v60) < 0)
        operator delete((void *)v59);
    }
    if (v57)
    {
      v32 = __dst;
      if ((_QWORD)__dst)
      {
        v33 = *((_QWORD *)&__dst + 1);
        v34 = (void *)__dst;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
        {
          do
          {
            if (*(char *)(v33 - 1) < 0)
              operator delete(*(void **)(v33 - 24));
            v33 -= 24;
          }
          while (v33 != v32);
          v34 = (void *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v32;
        operator delete(v34);
      }
    }
    if ((_BYTE)__p && v51)
    {
      if ((_BYTE)v50)
      {
        if (SHIBYTE(v49) < 0)
          operator delete(v48);
        if (SHIBYTE(v46) < 0)
          operator delete(v45[1]);
      }
      if (LOBYTE(v45[0]) && SHIBYTE(v44) < 0)
        operator delete(v43[1]);
    }
    if ((_BYTE)v42)
    {
      v38 = (void **)__s2;
      if ((_QWORD)__s2)
      {
        for (i = (void **)*((_QWORD *)&__s2 + 1); i != v38; i -= 3)
        {
          if (*((char *)i - 1) < 0)
            operator delete(*(i - 3));
        }
        operator delete(v38);
      }
    }
    return 1;
  }
LABEL_25:
  if (v56 < 0)
    operator delete((void *)__dst);
LABEL_28:
  if (a1)
  {
    v18 = a1 + 8;
    if (a2)
    {
LABEL_30:
      __s2 = *(_OWORD *)(a2 + 8);
      v19 = *(_OWORD *)(a2 + 48);
      v42 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v43 = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 64);
      v41 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v45 = v20;
      LOBYTE(v46) = 0;
      LOBYTE(v48) = 0;
      if (*(_BYTE *)(a2 + 120))
      {
        if (*(char *)(a2 + 119) < 0)
        {
          sub_20E860C04(&v46, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
        }
        else
        {
          v46 = *(_OWORD *)(a2 + 96);
          v47 = *(_QWORD *)(a2 + 112);
        }
        LOBYTE(v48) = 1;
      }
      LOBYTE(v49) = 0;
      v51 = 0;
      if (*(_BYTE *)(a2 + 152))
      {
        if (*(char *)(a2 + 151) < 0)
        {
          sub_20E860C04(&v49, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
        }
        else
        {
          v49 = *(_OWORD *)(a2 + 128);
          v50 = *(_QWORD *)(a2 + 144);
        }
        v51 = 1;
      }
      LOBYTE(__p) = 0;
      v54 = 0;
      if (*(_BYTE *)(a2 + 184))
      {
        if (*(char *)(a2 + 183) < 0)
        {
          sub_20E860C04(&__p, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
        }
        else
        {
          __p = *(_OWORD *)(a2 + 160);
          v53 = *(_QWORD *)(a2 + 176);
        }
        v54 = 1;
      }
      goto LABEL_48;
    }
  }
  else
  {
    v21 = atomic_load((unsigned __int8 *)&qword_254A6D928);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D928))
    {
      sub_20EA59CEC();
      qword_254A6D920 = (uint64_t)&unk_254A6D930;
      __cxa_guard_release(&qword_254A6D928);
    }
    v18 = qword_254A6D920;
    if (a2)
      goto LABEL_30;
  }
  LOBYTE(__s2) = 0;
  LOBYTE(v41) = 0;
  LOBYTE(v42) = 0;
  LOBYTE(v45[1]) = 0;
  LOBYTE(v46) = 0;
  LOBYTE(v48) = 0;
  LOBYTE(v49) = 0;
  v51 = 0;
  LOBYTE(__p) = 0;
  v54 = 0;
LABEL_48:
  sub_20EA5A4F8(v18, &__s2, (uint64_t)&__dst);
  if (v54 && SHIBYTE(v53) < 0)
    operator delete((void *)__p);
  if (v51 && SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if ((_BYTE)v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  v22 = v71;
  if (a3 && v71)
  {
    v23 = (char *)operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
    if (v23)
    {
      v23[8] = 0;
      v23[32] = 0;
      if (v57)
      {
        *(_OWORD *)(v23 + 8) = __dst;
        *((_QWORD *)v23 + 3) = v56;
        v56 = 0;
        __dst = 0uLL;
        v23[32] = 1;
      }
      v23[40] = 0;
      v23[160] = 0;
      if (v69)
      {
        *(_OWORD *)(v23 + 40) = v58;
        v23[56] = 0;
        v23[152] = 0;
        if (v68)
        {
          v23[80] = 0;
          if (v61)
          {
            *(_OWORD *)(v23 + 56) = v59;
            *((_QWORD *)v23 + 9) = v60;
            v60 = 0;
            v59 = 0uLL;
            v23[80] = 1;
          }
          v23[88] = 0;
          v23[144] = 0;
          if (v67)
          {
            v24 = v64;
            *((_QWORD *)v23 + 13) = v63;
            *(_OWORD *)(v23 + 88) = *(_OWORD *)v62;
            v62[0] = 0;
            v62[1] = 0;
            *((_QWORD *)v23 + 14) = v24;
            *(_OWORD *)(v23 + 120) = *(_OWORD *)v65;
            *((_QWORD *)v23 + 17) = v66;
            v63 = 0;
            v65[0] = 0;
            v65[1] = 0;
            v66 = 0;
            v23[144] = 1;
          }
          v23[152] = 1;
        }
        v23[160] = 1;
      }
      *(_OWORD *)(v23 + 168) = v70;
      v70 = 0uLL;
      *((_DWORD *)v23 + 46) = 1;
      *(_QWORD *)v23 = &off_24C9AF9A0;
    }
    *a3 = v23;
    v22 = 1;
  }
  else if (a4 && !v71)
  {
    sub_20EA66578((CFErrorRef *)&__s2, (uint64_t)&__dst);
    v25 = __s2;
    if ((_QWORD)__s2)
      CFRetain((CFTypeRef)__s2);
    *a4 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
      }
    }
    v22 = v71;
  }
  v28 = v22 != 0;
  sub_20E8DDD10((uint64_t)&__dst);
  return v28;
}

void sub_20E8DD8D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D928);
  _Unwind_Resume(a1);
}

void sub_20E8DD8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8DDADC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8DD904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a42 && a41 < 0)
    operator delete(__p);
  if (a35 && a34 < 0)
    operator delete(a29);
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E8DD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E8DDD10((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20E8DD984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E8DDD10((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20E8DD998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8DBAF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void CV3DDiagnosticsContextRecordText(uint64_t a1, char *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  _QWORD *v5;
  char *__s;
  uint64_t (**v7)();
  _QWORD *v8;

  if (a1)
  {
    v2 = a1 + 8;
LABEL_3:
    sub_20EA5AABC(v2, a2);
    return;
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A6D928);
  if ((v3 & 1) != 0 || (__s = a2, v4 = __cxa_guard_acquire(&qword_254A6D928), a2 = __s, !v4))
  {
    v2 = qword_254A6D920;
    goto LABEL_3;
  }
  v7 = &off_24C9BFE70;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C9BFDA8;
  v5[1] = 128;
  v8 = v5;
  sub_20EA59D8C((uint64_t)&v7);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  qword_254A6D920 = (uint64_t)&unk_254A6D930;
  __cxa_guard_release(&qword_254A6D928);
  sub_20EA5AABC(qword_254A6D920, __s);
}

void sub_20E8DDA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    __cxa_guard_abort(&qword_254A6D928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6D928);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8DDADC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (!*(_BYTE *)(a1 + 152) || !*(_BYTE *)(a1 + 144))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 136))
    goto LABEL_6;
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_6:
      if (!*(_BYTE *)(a1 + 72))
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 80));
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_11;
LABEL_7:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_11:
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20E8DDBB8(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 v4;
  char v5[8];
  uint64_t v6;
  char v7;

  result = (uint64_t)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  v3 = result;
  if (result)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    v4 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
    {
      sub_20FCFB524();
      __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D9C8);
    }
    v5[0] = 0;
    v7 = 0;
    result = sub_20EA59A5C(v3 + 8, (uint64_t)&qword_254A6D9A0, (uint64_t)v5);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_DWORD *)(v3 + 48) = 1;
    *(_QWORD *)v3 = &off_24C9AFA28;
  }
  *a1 = v3;
  return result;
}

void sub_20E8DDCB0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_guard_abort(&qword_254A6D9C8);
  MEMORY[0x212BC6380](v2, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x20E8DDC5CLL);
}

uint64_t sub_20E8DDD10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 168);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E8DDADC(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_13;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_17;
LABEL_13:
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_14;
    return a1;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_17:
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_14:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *CV3DReleaseHitTestResults(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      MEMORY[0x212BC6368](v2, 0x1060C807909909ALL);
      *v1 = 0;
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t CV3DHitTestingDefaultParameters()
{
  return 10;
}

uint64_t CV3DPerformHitTestPointCloud(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, _QWORD *a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  float32x4_t v10;
  float32x4_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v25[2];
  _OWORD v26[10];
  void *__p;
  _BYTE *v28;
  CFUUIDBytes v29;
  _BYTE v30[24];
  _BYTE v31[72];
  _QWORD v32[24];

  v32[23] = *MEMORY[0x24BDAC8D0];
  v25[0] = a1;
  v25[1] = a2;
  if (!a4)
    return 5;
  sub_20E95E318(v25, a3, a4, (uint64_t)v30, a6, a9);
  sub_20EEF33D8((uint64_t)v32, (uint64_t)v31, (uint64_t)v30, 0, 0, &__p, v10, v11);
  v29 = *(CFUUIDBytes *)&v31[44];
  v12 = __p;
  if (__p != v28)
  {
    v13 = (_QWORD *)operator new();
    v15 = __p;
    v14 = v28;
    v16 = (v28 - (_BYTE *)__p) / 144;
    v13[1] = v16;
    is_mul_ok(v16, 0xA0uLL);
    v17 = (_OWORD *)operator new[]();
    *v13 = v17;
    if (v14 != v15)
    {
      v18 = 0;
      do
      {
        sub_20E95E0C4((uint64_t)v26, (uint64_t)__p + v18, &v29);
        v19 = v26[7];
        v17[6] = v26[6];
        v17[7] = v19;
        v20 = v26[9];
        v17[8] = v26[8];
        v17[9] = v20;
        v21 = v26[3];
        v17[2] = v26[2];
        v17[3] = v21;
        v22 = v26[5];
        v17[4] = v26[4];
        v17[5] = v22;
        v23 = v26[1];
        *v17 = v26[0];
        v17[1] = v23;
        v17 += 10;
        v18 += 144;
        --v16;
      }
      while (v16);
    }
    *a5 = v13;
    v12 = __p;
  }
  if (v12)
  {
    v28 = v12;
    operator delete(v12);
  }
  sub_20E8DE3B4((uint64_t)v32);
  return 0;
}

void sub_20E8DE03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8DE3B4(v1);
  _Unwind_Resume(a1);
}

void sub_20E8DE054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;

  if (__p)
    operator delete(__p);
  sub_20E8DE3B4(v33);
  _Unwind_Resume(a1);
}

float64_t CV3DUpdateHitTestResultPose(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float64x2_t *a8, int64x2_t a9, double a10, float64x2_t a11, double a12, int64x2_t a13)
{
  __int128 v15;
  __int128 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float64x2_t v24;
  int8x16_t v32;
  int64x2_t v33;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  float64_t result;
  int64x2_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float v63;
  float v64;
  float v65;
  float32x4_t v66;
  float v67;
  float v68;
  float64x2_t v69;
  float v70;
  float32x4_t v71;
  int64x2_t v72;
  float v73;
  float v74;
  float v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;

  v15 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(double *)a1;
  v59 = v17;
  v18 = *(double *)&v15;
  v60 = v18;
  v19 = *(double *)&v16;
  v20 = *(double *)(a1 + 8);
  v61 = v19;
  v63 = v20;
  v21 = *((double *)&v15 + 1);
  v64 = v21;
  v22 = *((double *)&v16 + 1);
  *(float *)a9.i32 = *(double *)(a1 + 16);
  v65 = v22;
  v67 = *(float *)a9.i32;
  *(float *)a9.i32 = *(double *)(a1 + 40);
  v68 = *(float *)a9.i32;
  *(float *)a9.i32 = *(double *)(a1 + 64);
  v70 = *(float *)a9.i32;
  *(float *)a9.i32 = *a2;
  v73 = *(float *)a9.i32;
  *(float *)a9.i32 = a2[1];
  v74 = *(float *)a9.i32;
  *(float *)a9.i32 = a2[2];
  v75 = *(float *)a9.i32;
  a9.i64[0] = *(_QWORD *)(a3 + 16);
  a11.f64[0] = *(float64_t *)(a4 + 16);
  _Q3 = *(float64x2_t *)a4;
  a13.i64[0] = *(_QWORD *)(a5 + 16);
  v72 = a13;
  v69 = *(float64x2_t *)a5;
  v24.f64[1] = *(float64_t *)(a5 + 8);
  v24.f64[0] = *(float64_t *)(a6 + 16);
  _Q5 = *(float64x2_t *)a6;
  _Q6 = vmulq_f64(_Q3, _Q3);
  _D7 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D6, D7, V3.D[1] }
  _Q6.f64[0] = 1.0 / sqrt(_Q6.f64[0] + a11.f64[0] * a11.f64[0]);
  v32 = (int8x16_t)vmulq_f64(a11, _Q6);
  v33 = (int64x2_t)vmulq_n_f64(*(float64x2_t *)a4, _Q6.f64[0]);
  _Q6 = vmulq_f64(_Q5, _Q5);
  _D16 = *(_QWORD *)(a6 + 8);
  __asm { FMLA            D6, D16, V5.D[1] }
  _Q6.f64[0] = 1.0 / sqrt(_Q6.f64[0] + v24.f64[0] * v24.f64[0]);
  v57 = (int64x2_t)vmulq_n_f64(*(float64x2_t *)a6, _Q6.f64[0]);
  v58 = (int8x16_t)vmulq_f64(v24, _Q6);
  v77 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a3), (float64x2_t)vzip1q_s64(a9, v33));
  v36 = (float32x4_t)vextq_s8((int8x16_t)v33, v32, 8uLL);
  *(float32x2_t *)v36.f32 = vcvt_f32_f64((float64x2_t)v36);
  v78.i64[0] = v36.i64[0];
  sub_20EEE82B4((uint64_t)&v77, (float32x4_t *)&v81, v36);
  v37.i64[0] = vzip1q_s32(v81, v82).u64[0];
  v38 = (int8x16_t)vnegq_f32(v84);
  v39 = (int8x16_t)vtrn2q_s32(v81, v82);
  v39.i32[2] = v83.i32[1];
  v40 = vzip2q_s32(v81, v82);
  *(float32x2_t *)v41.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v37.f32, *(float *)v38.i32), *(float32x2_t *)v39.i8, *(float32x2_t *)v84.f32, 1), *(float32x2_t *)v40.i8, v84, 2);
  v40.i32[2] = v83.i32[2];
  v41.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v84.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)).u32[0]);
  v42.i32[3] = 0;
  v42.i32[0] = v39.i32[0];
  v44 = vextq_s8(vextq_s8(v39, v39, 0xCuLL), (int8x16_t)v40, 8uLL);
  v43.i64[0] = v44.i64[1];
  *(uint64_t *)((char *)v42.i64 + 4) = v44.i64[0];
  v43.i64[1] = vdupq_laneq_s32(v40, 2).u32[0];
  v37.i64[1] = v83.u32[0];
  v62 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v37, v59), v42, v60), v43, v61), (float32x4_t)0, v41);
  v66 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v37, v63), v42, v64), v43, v65), (float32x4_t)0, v41);
  v71 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v37, v67), v42, v68), v43, v70), (float32x4_t)0, v41);
  v76 = vaddq_f32(v41, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v37, v73), v42, v74), v43, v75));
  v85 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v69), (float64x2_t)vzip1q_s64(v72, v57));
  v45 = (float32x4_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
  *(float32x2_t *)v45.f32 = vcvt_f32_f64((float64x2_t)v45);
  v86 = v45.i64[0];
  sub_20EEE82B4((uint64_t)&v85, &v77, v45);
  v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v62.f32[0]), v78, *(float32x2_t *)v62.f32, 1), v79, v62, 2), v80, v62, 3);
  v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v66.f32[0]), v78, *(float32x2_t *)v66.f32, 1), v79, v66, 2), v80, v66, 3);
  v48 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v71.f32[0]), v78, *(float32x2_t *)v71.f32, 1), v79, v71, 2), v80, v71, 3);
  v49 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v76.f32[0]), v78, *(float32x2_t *)v76.f32, 1), v79, v76, 2), v80, v76, 3);
  v50 = vcvtq_f64_f32(*(float32x2_t *)v49.f32);
  v51 = *(_OWORD *)&vcvt_hight_f64_f32(v48);
  v52 = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
  v53 = (int64x2_t)vcvt_hight_f64_f32(v47);
  v54 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)v47.f32);
  v55 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)v46.f32);
  *(float64_t *)(a7 + 16) = v52.f64[0];
  *(int64x2_t *)a7 = vzip1q_s64(v55, v54);
  *(float64_t *)(a7 + 40) = v52.f64[1];
  *(int64x2_t *)(a7 + 24) = vzip2q_s64(v55, v54);
  *(_QWORD *)(a7 + 64) = v51;
  *(int64x2_t *)(a7 + 48) = vzip1q_s64((int64x2_t)vcvt_hight_f64_f32(v46), v53);
  *(_QWORD *)&result = *(_OWORD *)&vcvt_hight_f64_f32(v49);
  a8[1].f64[0] = result;
  *a8 = v50;
  return result;
}

uint64_t sub_20E8DE3B4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(void **)(a1 + 152);
    if (v2)
    {
      *(_QWORD *)(a1 + 160) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v3 = *(void **)(a1 + 120);
    if (v3)
    {
      *(_QWORD *)(a1 + 128) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 72);
      v6 = *(void **)(a1 + 64);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v4;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v10 = *(void **)(a1 + 32);
    if (v10)
    {
      *(_QWORD *)(a1 + 40) = v10;
      operator delete(v10);
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v11 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      operator delete(v11);
    }
  }
  return a1;
}

char *CV3DLoggingCreateHandle()
{
  char *v0;
  char *v1;
  __int128 v3;

  sub_21021A874((uint64_t *)&v3);
  v0 = (char *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    *(_OWORD *)(v0 + 8) = v3;
    v3 = 0uLL;
    *((_DWORD *)v0 + 6) = 1;
    *(_QWORD *)v0 = &off_24C9B1DB0;
  }
  sub_21021A3F8((uint64_t)&v3);
  return v1;
}

uint64_t CV3DLoggingEnable(uint64_t a1, unsigned int a2)
{
  int v4;

  if (!a1)
    return 1;
  if (a2 >= 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DLogging.cpp", 46, (uint64_t)"level >= kCV3DLoggingLevelDebug && level <= kCV3DLoggingLevelError", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a2 - 1 >= 3)
    v4 = 2;
  else
    v4 = a2 + 2;
  sub_21021B940(*(std::recursive_mutex ****)(a1 + 8), v4);
  return 0;
}

uint64_t CV3DLoggingDisable(uint64_t a1)
{
  std::recursive_mutex ***v1;
  std::recursive_mutex *v2;
  uint64_t *v3;
  std::recursive_mutex **v4;
  std::recursive_mutex *v6;
  uint64_t *v7;

  if (!a1)
    return 1;
  v1 = *(std::recursive_mutex ****)(a1 + 8);
  v2 = **v1;
  std::recursive_mutex::lock(v2);
  v3 = (uint64_t *)(*v1)[10];
  v6 = (*v1)[12];
  v7 = v3;
  sub_21021C1A0(&v7, (uint64_t *)&v6);
  v4 = *v1;
  if (*((_BYTE *)*v1 + 124))
    *((_BYTE *)v4 + 124) = 0;
  *((_DWORD *)v4 + 28) = 1;
  std::recursive_mutex::unlock(v2);
  return 0;
}

void sub_20E8DE640(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DLoggingReleaseHandle(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 6;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

uint64_t CV3DLoggingEnableInternal(uint64_t a1, unsigned int a2)
{
  int v4;

  if (!a1)
    return 1;
  if (a2 >= 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DLogging.cpp", 71, (uint64_t)"level >= kCV3DLoggingLevelDebug && level <= kCV3DLoggingLevelError", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a2 - 1 >= 3)
    v4 = 2;
  else
    v4 = a2 + 2;
  sub_21021BBA4(*(std::recursive_mutex ****)(a1 + 8), v4);
  return 0;
}

uint64_t CV3DLoggingStartLoggingToConsole(uint64_t a1)
{
  std::recursive_mutex ***v1;
  std::recursive_mutex *v2;
  uint64_t v3;
  int v4;
  uint64_t (**v6)();
  uint64_t v7;

  if (!a1)
    return 1;
  v1 = *(std::recursive_mutex ****)(a1 + 8);
  v2 = **v1;
  std::recursive_mutex::lock(v2);
  if (*((_DWORD *)*v1 + 28) == 2)
  {
    v3 = (uint64_t)(*v1)[12];
    v6 = &off_24CA1F960;
    v7 = v3;
    v4 = sub_21021D288(&v7, (uint64_t)&v6);
    std::recursive_mutex::unlock(v2);
    if (v4)
      return 0;
    else
      return 2;
  }
  else
  {
    std::recursive_mutex::unlock(v2);
    return 2;
  }
}

void sub_20E8DE7D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DLoggingStartLoggingToConsoleInternal(uint64_t a1)
{
  std::recursive_mutex ***v1;
  std::recursive_mutex *v2;
  uint64_t v3;
  int v4;
  uint64_t (**v6)();
  uint64_t v7;

  if (!a1)
    return 1;
  v1 = *(std::recursive_mutex ****)(a1 + 8);
  v2 = **v1;
  std::recursive_mutex::lock(v2);
  if (*((_DWORD *)*v1 + 29) == 2)
  {
    v3 = (uint64_t)(*v1)[13];
    v6 = &off_24CA1F960;
    v7 = v3;
    v4 = sub_21021D288(&v7, (uint64_t)&v6);
    std::recursive_mutex::unlock(v2);
    if (v4)
      return 0;
    else
      return 2;
  }
  else
  {
    std::recursive_mutex::unlock(v2);
    return 2;
  }
}

void sub_20E8DE890(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DLoggingDisableInternal(uint64_t a1)
{
  std::recursive_mutex ***v1;
  std::recursive_mutex *v2;
  uint64_t *v3;
  std::recursive_mutex **v4;
  std::recursive_mutex *v6;
  uint64_t *v7;

  if (!a1)
    return 1;
  v1 = *(std::recursive_mutex ****)(a1 + 8);
  v2 = **v1;
  std::recursive_mutex::lock(v2);
  v3 = (uint64_t *)(*v1)[10];
  v6 = (*v1)[13];
  v7 = v3;
  sub_21021C254(&v7, (uint64_t *)&v6);
  v4 = *v1;
  if (*((_BYTE *)*v1 + 132))
    *((_BYTE *)v4 + 132) = 0;
  *((_DWORD *)v4 + 29) = 1;
  std::recursive_mutex::unlock(v2);
  return 0;
}

void sub_20E8DE930(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DLoggingEnableInternalWithConfigurationFile(uint64_t a1, char *__s)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;

  if (!a1)
    return 1;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v6 = (void **)operator new(v8 + 1);
    __dst[1] = v5;
    v11 = v9 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v11) = v4;
    v6 = __dst;
    if (!v4)
      goto LABEL_11;
  }
  memcpy(v6, __s, (size_t)v5);
LABEL_11:
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  sub_21021BE08(*(std::recursive_mutex ****)(a1 + 8), (char *)__dst);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
  return 0;
}

void sub_20E8DEA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32x2_t CV3DRectifyPoint(float64x2_t *a1, CFTypeRef *a2, float32x2_t a3, float64x2_t a4, float64_t a5, float64x2_t a6, float64_t a7)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  char *v45;
  CFErrorRef v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  void *__p;
  __int128 v54;
  CFErrorRef v55;
  std::__shared_weak_count *v56;
  std::error_condition v57;

  v7 = *a1;
  v8 = a1[1];
  a6.f64[1] = a7;
  a4.f64[1] = a5;
  v9 = vdivq_f64(vsubq_f64(vcvtq_f64_f32(a3), a6), a4);
  v10 = sqrt(vaddvq_f64(vmulq_f64(v9, v9)));
  v11 = v10 * v10;
  v12 = v10 * v10 * a1->f64[0]
      + 1.0
      + vmuld_lane_f64(v11 * v11, *a1, 1)
      + v11 * (v11 * v11) * v8.f64[0]
      + vmuld_lane_f64(v10 * v10 * (v11 * (v11 * v11)), v8, 1);
  if (v12 == 0.0)
    v12 = 1.0;
  v13 = fmax(v10 / v12, 0.0);
  v14 = v13 * v13;
  v15 = v14 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v14 * v14, v7, 1)
      + v14 * (v14 * v14) * v8.f64[0]
      + vmuld_lane_f64(v14 * (v14 * (v14 * v14)), v8, 1);
  if (v15 == 0.0)
    v15 = 1.0;
  v16 = fmax(v10 / v15, 0.0);
  v17 = v16 * v16;
  v18 = v17 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v17 * v17, v7, 1)
      + v17 * (v17 * v17) * v8.f64[0]
      + vmuld_lane_f64(v17 * (v17 * (v17 * v17)), v8, 1);
  if (v18 == 0.0)
    v18 = 1.0;
  v19 = fmax(v10 / v18, 0.0);
  v20 = v19 * v19;
  v21 = v20 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v20 * v20, v7, 1)
      + v20 * (v20 * v20) * v8.f64[0]
      + vmuld_lane_f64(v20 * (v20 * (v20 * v20)), v8, 1);
  if (v21 == 0.0)
    v21 = 1.0;
  v22 = fmax(v10 / v21, 0.0);
  v23 = v22 * v22;
  v24 = v23 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v23 * v23, v7, 1)
      + v23 * (v23 * v23) * v8.f64[0]
      + vmuld_lane_f64(v23 * (v23 * (v23 * v23)), v8, 1);
  if (v24 == 0.0)
    v24 = 1.0;
  v25 = fmax(v10 / v24, 0.0);
  v26 = v25 * v25;
  v27 = v26 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v26 * v26, v7, 1)
      + v26 * (v26 * v26) * v8.f64[0]
      + vmuld_lane_f64(v26 * (v26 * (v26 * v26)), v8, 1);
  if (v27 == 0.0)
    v27 = 1.0;
  v28 = fmax(v10 / v27, 0.0);
  v29 = v28 * v28;
  v30 = v29 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v29 * v29, v7, 1)
      + v29 * (v29 * v29) * v8.f64[0]
      + vmuld_lane_f64(v29 * (v29 * (v29 * v29)), v8, 1);
  if (v30 == 0.0)
    v30 = 1.0;
  v31 = fmax(v10 / v30, 0.0);
  v32 = v31 * v31;
  v33 = v32 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v32 * v32, v7, 1)
      + v32 * (v32 * v32) * v8.f64[0]
      + vmuld_lane_f64(v32 * (v32 * (v32 * v32)), v8, 1);
  if (v33 == 0.0)
    v33 = 1.0;
  v34 = fmax(v10 / v33, 0.0);
  v35 = v34 * v34;
  v36 = v35 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v35 * v35, v7, 1)
      + v35 * (v35 * v35) * v8.f64[0]
      + vmuld_lane_f64(v35 * (v35 * (v35 * v35)), v8, 1);
  if (v36 == 0.0)
    v36 = 1.0;
  v37 = fmax(v10 / v36, 0.0);
  v38 = v37 * v37;
  v39 = v38 * v7.f64[0]
      + 1.0
      + vmuld_lane_f64(v38 * v38, v7, 1)
      + v38 * (v38 * v38) * v8.f64[0]
      + vmuld_lane_f64(v38 * (v38 * (v38 * v38)), v8, 1);
  if (v39 == 0.0)
    v39 = 1.0;
  v40 = fmax(v10 / v39, 0.0);
  if (v40 > 1.57079633)
  {
    __p = operator new(0x58uLL);
    v54 = xmmword_2102DB400;
    strcpy((char *)__p, "Failed to compute undistorted position. Undistorted point maybe behind the camera.");
    v45 = (char *)operator new(0x88uLL);
    strcpy(v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DMarker/CV3DMarkerPoseEstimation.cpp");
    if (a2)
    {
      *(_QWORD *)&v57.__val_ = 22;
      v57.__cat_ = std::generic_category();
      sub_20EA67538(&v57, (uint64_t)&__p, &v55);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v46 = v55;
      if (v55)
        CFRetain(v55);
      *a2 = v46;
      v47 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    operator delete(v45);
    if (SHIBYTE(v54) < 0)
      operator delete(__p);
    return 0;
  }
  else
  {
    v51 = a4;
    v52 = a6;
    v50 = v9;
    v41 = tan(v40);
    if (v10 == 0.0)
      v42 = 1.0;
    else
      v42 = v10;
    return vcvt_f32_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(v50, v41 / v42), v51), v52));
  }
}

void sub_20E8DEEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DComputeMarkerPose(unsigned int a1, unsigned int a2, std::__shared_weak_count_vtbl *a3, CFTypeRef *a4, int a5, int a6, int a7, int a8, int32x2_t a9, int32x2_t a10, int32x2_t a11, int32x2_t a12, int32x4_t a13, int32x4_t a14, int8x16_t a15, float32x4_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26)
{
  return CV3DComputeMarkerPoseHA(a1, a2, a3, a4, a5, a6, a7, a8, COERCE_DOUBLE(vcvt_f32_s32(a9)), COERCE_DOUBLE(vcvt_f32_s32(a10)), COERCE_DOUBLE(vcvt_f32_s32(a11)), COERCE_DOUBLE(vcvt_f32_s32(a12)), a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

double CV3DComputeMarkerPoseHA(unsigned int a1, unsigned int a2, std::__shared_weak_count_vtbl *cf, CFTypeRef *a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, int32x4_t a14, int8x16_t a15, float32x4_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26)
{
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  char *v82;
  const std::error_category *v83;
  CFErrorRef v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *__p;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t (**v100)();
  uint64_t *v101;
  __int128 v102;
  char v103;
  _BYTE v104[32];
  float32x4_t v105;
  float32x4_t v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  __int128 v110;
  int8x16_t v111[2];
  int v112;
  int8x16_t v113[2];
  int v114;
  CFErrorRef v115;
  std::__shared_weak_count *v116;
  std::error_condition v117;

  HIDWORD(a17) = a18;
  v113[0] = (int8x16_t)a17;
  v113[1] = vextq_s8(vextq_s8((int8x16_t)a18, (int8x16_t)a18, 0xCuLL), (int8x16_t)a19, 8uLL);
  v114 = DWORD2(a19);
  HIDWORD(a24) = a25;
  v111[0] = (int8x16_t)a24;
  v111[1] = vextq_s8(vextq_s8((int8x16_t)a25, (int8x16_t)a25, 0xCuLL), (int8x16_t)a26, 8uLL);
  v112 = DWORD2(a26);
  sub_21015D058(v104, cf, 1, 0);
  v31 = *(uint64_t **)&v104[8];
  v101 = *(uint64_t **)&v104[8];
  *(_QWORD *)&v102 = *(_QWORD *)&v104[16];
  if (*(_QWORD *)&v104[16])
  {
    v32 = (unint64_t *)(*(_QWORD *)&v104[16] + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v100 = &off_24CA1A9C0;
  if (v31)
  {
    v35 = *v31;
    v34 = (std::__shared_weak_count *)v31[1];
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v35)
LABEL_11:
      sub_2101613B8((uint64_t)v101);
  }
LABEL_12:
  *(_QWORD *)v104 = &off_24CA1A9A0;
  v39 = *(std::__shared_weak_count **)&v104[16];
  if (*(_QWORD *)&v104[16])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v104[16] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (sub_21015BE44((uint64_t)&v100) != 1751410032
  {
    abort();
  }
  v42 = v101;
  *((_QWORD *)&v107 + 1) = v101;
  *(_QWORD *)&v108 = v102;
  if ((_QWORD)v102)
  {
    v43 = (unint64_t *)(v102 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v42 = (uint64_t *)*((_QWORD *)&v107 + 1);
  }
  *(_QWORD *)&v107 = &off_24CA1A9C0;
  if (v42)
  {
    v46 = *v42;
    v45 = (std::__shared_weak_count *)v42[1];
    if (!v45)
      goto LABEL_29;
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (v49)
    {
LABEL_29:
      if (!v46)
        goto LABEL_31;
      goto LABEL_30;
    }
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (v46)
LABEL_30:
      sub_2101613B8(*((uint64_t *)&v107 + 1));
  }
LABEL_31:
  sub_21015C254((uint64_t)&v107, (uint64_t *)v104);
  v50 = *(_QWORD *)v104;
  v110 = *(_OWORD *)&v104[8];
  if (*((_QWORD *)&v107 + 1))
  {
    v52 = **((_QWORD **)&v107 + 1);
    v51 = *(std::__shared_weak_count **)(*((_QWORD *)&v107 + 1) + 8);
    if (v51)
    {
      v53 = (unint64_t *)&v51->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        if (!v52)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    if (v52)
LABEL_38:
      sub_210161594(*((uint64_t *)&v107 + 1));
  }
LABEL_39:
  *(_QWORD *)&v107 = &off_24CA1A9A0;
  v56 = (std::__shared_weak_count *)v108;
  if (!(_QWORD)v108)
    goto LABEL_43;
  v57 = (unint64_t *)(v108 + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    v59 = v101;
    if (!v101)
      goto LABEL_51;
  }
  else
  {
LABEL_43:
    v59 = v101;
    if (!v101)
      goto LABEL_51;
  }
  v61 = *v59;
  v60 = (std::__shared_weak_count *)v59[1];
  if (v60)
  {
    v62 = (unint64_t *)&v60->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    do
      v64 = __ldaxr(v62);
    while (__stlxr(v64 - 1, v62));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if (!v61)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  if (v61)
LABEL_50:
    sub_210161594((uint64_t)v101);
LABEL_51:
  v66 = (float32x4_t)a20;
  v65 = (float32x4_t)a21;
  v68 = (float32x4_t)a22;
  v67 = (float32x4_t)a23;
  v100 = &off_24CA1A9A0;
  v69 = (std::__shared_weak_count *)v102;
  if ((_QWORD)v102)
  {
    v70 = (unint64_t *)(v102 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      v66 = (float32x4_t)a20;
      v65 = (float32x4_t)a21;
      v68 = (float32x4_t)a22;
      v67 = (float32x4_t)a23;
    }
  }
  *(double *)&v73 = a9;
  *(double *)&v72 = a11;
  *((double *)&v73 + 1) = a10;
  *((double *)&v72 + 1) = a12;
  v74.i64[0] = vzip1q_s32(a13, a14).u64[0];
  v75 = vnegq_f32(a16);
  v74.i64[1] = a15.u32[0];
  v76 = (int8x16_t)vtrn2q_s32(a13, a14);
  v76.i32[2] = a15.i32[1];
  v77 = (float32x4_t)vzip2q_s32(a13, a14);
  v78 = (int32x4_t)v77;
  v78.i32[2] = a15.i32[2];
  *(float32x2_t *)v79.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v74.f32, v75.f32[0]), *(float32x2_t *)v76.i8, *(float32x2_t *)a16.f32, 1), *(float32x2_t *)v77.f32, a16, 2);
  v80 = vextq_s8(vextq_s8(v76, v76, 0xCuLL), (int8x16_t)v78, 8uLL);
  v109 = __PAIR64__(a2, a1);
  v79.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a15.i8, *(float32x2_t *)v75.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.i8, 1), *(float32x2_t *)a16.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(a15, a15, 8uLL)).u32[0]);
  v77.i64[0] = __PAIR64__(v80.u32[0], v76.u32[0]);
  v77.i64[1] = v80.u32[1];
  v75.i64[0] = v80.i64[1];
  v75.i64[1] = vdupq_laneq_s32(v78, 2).u32[0];
  v107 = v73;
  v108 = v72;
  *(float32x4_t *)v104 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v66.f32[0]), v77, *(float32x2_t *)v66.f32, 1), v75, v66, 2), v79, v66, 3);
  *(float32x4_t *)&v104[16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v65.f32[0]), v77, *(float32x2_t *)v65.f32, 1), v75, v65, 2), v79, v65, 3);
  v105 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v68.f32[0]), v77, *(float32x2_t *)v68.f32, 1), v75, v68, 2), v79, v68, 3);
  v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v67.f32[0]), v77, *(float32x2_t *)v67.f32, 1), v75, v67, 2), v79, v67, 3);
  v98 = v50;
  v99 = v110;
  sub_20EF058DC((float32x2_t *)&v107, (uint64_t)v113, (uint64_t *)&v109, (__int128 *)&v98, (uint64_t)v111, (float32x2_t *)v104, (uint64_t)&v100);
  if (v103)
    return *(double *)&v100;
  __p = operator new(0x38uLL);
  v97 = xmmword_2102DB420;
  strcpy((char *)__p, "Not enough depth points to compute the marker pose.");
  v82 = (char *)operator new(0x88uLL);
  strcpy(v82, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DMarker/CV3DMarkerPoseEstimation.cpp");
  if (a4)
  {
    v83 = std::generic_category();
    *(_QWORD *)&v117.__val_ = 22;
    v117.__cat_ = v83;
    sub_20EA67538(&v117, (uint64_t)&__p, &v115);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v84 = v115;
    if (v115)
      CFRetain(v115);
    *a4 = v84;
    v85 = v116;
    if (v116)
    {
      v86 = (unint64_t *)&v116->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  operator delete(v82);
  if (SHIBYTE(v97) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_20E8DF5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;

  operator delete(v42);
  if (a42 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

double CV3DComputeMarkerPosition(double a1, double a2, double a3, double a4, double a5, double a6, int8x16_t a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, simd_float3 a17, int8x16_t a18, int8x16_t a19)
{
  float32x2_t v19;
  float32x2_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  double result;
  _OWORD v31[2];
  __int32 v32;
  _BYTE v33[20];
  __int32 v34;
  float32x2_t v35;
  __int32 v36;
  uint64_t v37;
  simd_float3x3 v38;

  v38.columns[0] = (simd_float3)a19;
  v38.columns[2] = a17;
  v37 = *MEMORY[0x24BDAC8D0];
  v38.columns[2].i32[3] = a18.i32[0];
  v38.columns[1] = (simd_float3)vextq_s8(vextq_s8(a18, a18, 0xCuLL), a19, 8uLL);
  v31[0] = v38.columns[2];
  v31[1] = v38.columns[1];
  v32 = a19.i32[2];
  sub_20E8BE3D8((uint64_t)v31, (uint64_t)v33, v38);
  v19.f32[0] = (float)SLODWORD(a1);
  v20.f32[0] = (float)SHIDWORD(a1);
  v21 = a8;
  v22 = (float32x2_t)vextq_s8(a7, a7, 8uLL).u64[0];
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1);
  v24 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)a8.i8), v23, *(float32x2_t *)a7.i8, 1);
  v25 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
  v23.i32[0] = v34;
  v21.i32[0] = v36;
  *(float32x2_t *)v26.f32 = vadd_f32(v35, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v33, (float)SLODWORD(a1)), *(float32x2_t *)&v33[12], (float)SHIDWORD(a1)));
  *(float32x2_t *)&v26.u32[2] = vadd_f32(*(float32x2_t *)v21.i8, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v33, *(int8x16_t *)v33, 8uLL), v19), v20, v23));
  *(_QWORD *)&result = vmulq_n_f32(v26, vdiv_f32(vmla_f32(v24, v25, v22), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v26.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.i8, 1), *(float32x2_t *)v26.f32, 1), *(float32x2_t *)&v26.u32[2], v22)).f32[0]).u64[0];
  return result;
}

double CV3DComputeMarkerPositionHA(double a1, double a2, double a3, double a4, double a5, double a6, int8x16_t a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, simd_float3 a17, int8x16_t a18, int8x16_t a19)
{
  float32x2_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  double result;
  _OWORD v29[2];
  __int32 v30;
  _BYTE v31[20];
  __int32 v32;
  float32x2_t v33;
  __int32 v34;
  uint64_t v35;
  simd_float3x3 v36;

  v36.columns[0] = (simd_float3)a19;
  v36.columns[2] = a17;
  v35 = *MEMORY[0x24BDAC8D0];
  v36.columns[2].i32[3] = a18.i32[0];
  v36.columns[1] = (simd_float3)vextq_s8(vextq_s8(a18, a18, 0xCuLL), a19, 8uLL);
  v29[0] = v36.columns[2];
  v29[1] = v36.columns[1];
  v30 = a19.i32[2];
  sub_20E8BE3D8((uint64_t)v29, (uint64_t)v31, v36);
  v19 = (float32x2_t)vextq_s8(a7, a7, 8uLL).u64[0];
  v20 = a8;
  v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1);
  v22 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)a8.i8), v21, *(float32x2_t *)a7.i8, 1);
  v23 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
  v21.i32[0] = v32;
  v20.i32[0] = v34;
  *(float32x2_t *)v24.f32 = vadd_f32(v33, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v31, *(float *)&a1), *(float32x2_t *)&v31[12], *(float32x2_t *)&a1, 1));
  *(float32x2_t *)&v24.u32[2] = vadd_f32(*(float32x2_t *)v20.i8, vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v31, *(int8x16_t *)v31, 8uLL), *(float32x2_t *)&a1), v21, *(float32x2_t *)&a1, 1));
  *(_QWORD *)&result = vmulq_n_f32(v24, vdiv_f32(vmla_f32(v22, v23, v19), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v24.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.i8, 1), *(float32x2_t *)v24.f32, 1), *(float32x2_t *)&v24.u32[2], v19)).f32[0]).u64[0];
  return result;
}

uint64_t CV3DNormalEstimationComputeNormals(std::__shared_weak_count_vtbl *cf, unsigned int a2, std::__shared_weak_count_vtbl *a3, CFTypeRef *a4, __n128 a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  size_t v32;
  size_t v33;
  char *v34;
  const std::error_category *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t (**v40)();
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  const std::error_category *v46;
  uint64_t (**v47)();
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const std::error_category *v51;
  const void *v52;
  unint64_t *v53;
  uint64_t *v54;
  const std::error_category *v55;
  uint64_t (**v56)();
  unint64_t *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const std::error_category *v75;
  unint64_t *v76;
  __n128 v77;
  int v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  _BYTE __p[32];
  unsigned __int32 v103;
  void *v104;
  __int128 v105;
  void *v106;
  const void *v107;
  __int128 v108;
  uint64_t (**v109)();
  __int128 v110;
  uint64_t (**v111)();
  __int128 v112;
  uint64_t v113;
  __int128 v114;

  if (cf)
  {
    sub_21015D058(&v104, cf, 1, 0);
    v10 = (uint64_t *)v105;
    v112 = v105;
    if (*((_QWORD *)&v105 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v10 = (uint64_t *)v112;
    }
    v111 = &off_24CA1A9C0;
    if (v10)
    {
      v14 = *v10;
      v13 = (std::__shared_weak_count *)v10[1];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          if (!v14)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      if (v14)
LABEL_13:
        sub_2101613B8(v112);
    }
LABEL_14:
    v104 = &off_24CA1A9A0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (sub_21015BE44((uint64_t)&v111) == 1717855600)
    {
      if (a3)
      {
        sub_21015D058(&v104, a3, 1, 0);
        v21 = (uint64_t *)v105;
        v110 = v105;
        if (*((_QWORD *)&v105 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v21 = (uint64_t *)v110;
        }
        v109 = &off_24CA1A9E0;
        if (v21)
        {
          v25 = *v21;
          v24 = (std::__shared_weak_count *)v21[1];
          if (v24)
          {
            v26 = (unint64_t *)&v24->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            do
              v28 = __ldaxr(v26);
            while (__stlxr(v28 - 1, v26));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          if (v25)
            sub_2101614A8(v110);
        }
        v104 = &off_24CA1A9A0;
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = sub_21015D950((uint64_t)&v109);
        if (v32 == sub_21015D950((uint64_t)&v111)
          && (v33 = sub_21015DBD0((uint64_t)&v109), v33 == sub_21015DBD0((uint64_t)&v111)))
        {
          if (sub_21015BE44((uint64_t)&v109) == 1380410945)
          {
            if ((a2 & 1) != 0)
            {
              sub_21015C40C((uint64_t)&v111, (uint64_t *)&v107);
              v114 = v108;
              v77 = a5;
              v77.n128_u32[3] = a6.i32[0];
              *(__n128 *)__p = v77;
              *(int8x16_t *)&__p[16] = vextq_s8(vextq_s8(a6, a6, 0xCuLL), a7, 8uLL);
              v103 = a7.u32[2];
              v113 = (uint64_t)v107;
              sub_20EF48C90((__int128 *)&v113, (uint64_t)__p, a2, (uint64_t)&v104);
              sub_21015C5C4((uint64_t)&v109, (uint64_t)__p);
              if ((_DWORD)v104 && HIDWORD(v104) && (_DWORD)v105)
              {
                v78 = HIDWORD(v104) - 1;
                v79 = (char *)v106;
                v80 = *(_QWORD **)__p;
                v81 = 4 * DWORD2(v105);
                v82 = 4 * *(unsigned int *)&__p[24];
                v83 = v105 - 1;
                if ((_DWORD)v105 != 1)
                {
                  if (HIDWORD(v104) == 1)
                  {
                    v93 = 4 * HIDWORD(v105);
                    v94 = 4 * *(unsigned int *)&__p[28];
                    do
                    {
                      v95 = *((_DWORD *)v79 + 2);
                      *v80 = *(_QWORD *)v79;
                      v80[1] = v95;
                      v79 += v93;
                      v80 = (_QWORD *)((char *)v80 + v94);
                      --v83;
                    }
                    while (v83);
                  }
                  else
                  {
                    v84 = 0;
                    v85 = 4 * HIDWORD(v105);
                    v86 = 4 * *(unsigned int *)&__p[28];
                    do
                    {
                      v87 = v80;
                      v88 = v79;
                      v89 = v78;
                      do
                      {
                        v90 = *((_DWORD *)v88 + 2);
                        *v87 = *(_QWORD *)v88;
                        v87[1] = v90;
                        v88 += v81;
                        v87 = (_QWORD *)((char *)v87 + v82);
                        --v89;
                      }
                      while (v89);
                      v91 = *(_QWORD *)v88;
                      v92 = *((_DWORD *)v88 + 2);
                      *v87 = v91;
                      v87[1] = v92;
                      v79 += v85;
                      v80 = (_QWORD *)((char *)v80 + v86);
                      ++v84;
                    }
                    while (v84 != v83);
                  }
                }
                for (; v78; --v78)
                {
                  v96 = *((_DWORD *)v79 + 2);
                  *v80 = *(_QWORD *)v79;
                  v80[1] = v96;
                  v79 += v81;
                  v80 = (_QWORD *)((char *)v80 + v82);
                }
                v97 = *(_QWORD *)v79;
                v98 = *((_DWORD *)v79 + 2);
                *v80 = v97;
                v80[1] = v98;
              }
              if (v106)
                free(v106);
              v44 = 1;
              v54 = (uint64_t *)v110;
              if (!(_QWORD)v110)
                goto LABEL_132;
              goto LABEL_124;
            }
            v104 = operator new(0x19uLL);
            v105 = xmmword_2102DAFD0;
            strcpy((char *)v104, "Kernel size must be odd");
            v34 = (char *)operator new(0x78uLL);
            *(_QWORD *)__p = v34;
            *(_OWORD *)&__p[8] = xmmword_2102DB440;
            strcpy(v34, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
            if (!a4)
              goto LABEL_85;
            v35 = std::generic_category();
            v113 = 22;
            *(_QWORD *)&v114 = v35;
            sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v107);
            sub_20EA66CF0(&v107, a4);
            v36 = (std::__shared_weak_count *)v108;
            if (!(_QWORD)v108)
              goto LABEL_83;
            v37 = (unint64_t *)(v108 + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
          }
          else
          {
            v104 = operator new(0x58uLL);
            v105 = xmmword_2102DB460;
            strcpy((char *)v104, "Output normals buffer has invalid format, should be kCVPixelFormatType_Rgba_Float32");
            v34 = (char *)operator new(0x78uLL);
            *(_QWORD *)__p = v34;
            *(_OWORD *)&__p[8] = xmmword_2102DB440;
            strcpy(v34, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
            if (!a4)
              goto LABEL_85;
            v75 = std::generic_category();
            v113 = 22;
            *(_QWORD *)&v114 = v75;
            sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v107);
            sub_20EA66CF0(&v107, a4);
            v36 = (std::__shared_weak_count *)v108;
            if (!(_QWORD)v108)
              goto LABEL_83;
            v76 = (unint64_t *)(v108 + 8);
            do
              v38 = __ldaxr(v76);
            while (__stlxr(v38 - 1, v76));
          }
        }
        else
        {
          v104 = operator new(0x28uLL);
          v105 = xmmword_2102DB450;
          strcpy((char *)v104, "Depth and normals don't have same size");
          v34 = (char *)operator new(0x78uLL);
          *(_QWORD *)__p = v34;
          *(_OWORD *)&__p[8] = xmmword_2102DB440;
          strcpy(v34, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
          if (!a4)
            goto LABEL_85;
          v51 = std::generic_category();
          v113 = 22;
          *(_QWORD *)&v114 = v51;
          sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v107);
          if (*a4)
            CFRelease(*a4);
          *a4 = 0;
          v52 = v107;
          if (v107)
            CFRetain(v107);
          *a4 = v52;
          v36 = (std::__shared_weak_count *)v108;
          if (!(_QWORD)v108)
          {
LABEL_83:
            if ((__p[23] & 0x80000000) == 0)
              goto LABEL_86;
            v34 = *(char **)__p;
LABEL_85:
            operator delete(v34);
LABEL_86:
            if (SHIBYTE(v105) < 0)
            {
              operator delete(v104);
              v44 = 0;
              v54 = (uint64_t *)v110;
              if (!(_QWORD)v110)
              {
LABEL_132:
                v109 = &off_24CA1A9A0;
                v72 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
                if (*((_QWORD *)&v110 + 1))
                {
                  v73 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
                  do
                    v74 = __ldaxr(v73);
                  while (__stlxr(v74 - 1, v73));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                goto LABEL_105;
              }
            }
            else
            {
              v44 = 0;
              v54 = (uint64_t *)v110;
              if (!(_QWORD)v110)
                goto LABEL_132;
            }
LABEL_124:
            v68 = *v54;
            v67 = (std::__shared_weak_count *)v54[1];
            if (v67)
            {
              v69 = (unint64_t *)&v67->__shared_owners_;
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
              do
                v71 = __ldaxr(v69);
              while (__stlxr(v71 - 1, v69));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            if (v68)
              sub_210161684(v110);
            goto LABEL_132;
          }
          v53 = (unint64_t *)(v108 + 8);
          do
            v38 = __ldaxr(v53);
          while (__stlxr(v38 - 1, v53));
        }
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        goto LABEL_83;
      }
      v104 = operator new(0x20uLL);
      v105 = xmmword_2102DB470;
      strcpy((char *)v104, "Input normals buffer is NULL");
      v45 = (char *)operator new(0x78uLL);
      *(_QWORD *)__p = v45;
      *(_OWORD *)&__p[8] = xmmword_2102DB440;
      strcpy(v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
      if (!a4)
        goto LABEL_101;
      v55 = std::generic_category();
      v113 = 22;
      *(_QWORD *)&v114 = v55;
      sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v109);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v56 = v109;
      if (v109)
        CFRetain(v109);
      *a4 = v56;
      v48 = (std::__shared_weak_count *)v110;
      if (!(_QWORD)v110)
        goto LABEL_99;
      v57 = (unint64_t *)(v110 + 8);
      do
        v50 = __ldaxr(v57);
      while (__stlxr(v50 - 1, v57));
    }
    else
    {
      v104 = operator new(0x50uLL);
      v105 = xmmword_2102DB430;
      strcpy((char *)v104, "Input depth have invalid format, should be kCVPixelFormatType_DepthFloat32");
      v45 = (char *)operator new(0x78uLL);
      *(_QWORD *)__p = v45;
      *(_OWORD *)&__p[8] = xmmword_2102DB440;
      strcpy(v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
      if (!a4)
        goto LABEL_101;
      v46 = std::generic_category();
      v113 = 22;
      *(_QWORD *)&v114 = v46;
      sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v109);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v47 = v109;
      if (v109)
        CFRetain(v109);
      *a4 = v47;
      v48 = (std::__shared_weak_count *)v110;
      if (!(_QWORD)v110)
      {
LABEL_99:
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_102:
          if (SHIBYTE(v105) < 0)
            operator delete(v104);
          v44 = 0;
LABEL_105:
          if ((_QWORD)v112)
          {
            v59 = *(_QWORD *)v112;
            v58 = *(std::__shared_weak_count **)(v112 + 8);
            if (v58)
            {
              v60 = (unint64_t *)&v58->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
              do
                v62 = __ldaxr(v60);
              while (__stlxr(v62 - 1, v60));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
                if (!v59)
                  goto LABEL_113;
                goto LABEL_112;
              }
            }
            if (v59)
LABEL_112:
              sub_210161594(v112);
          }
LABEL_113:
          v111 = &off_24CA1A9A0;
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
          if (*((_QWORD *)&v112 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          return v44;
        }
        v45 = *(char **)__p;
LABEL_101:
        operator delete(v45);
        goto LABEL_102;
      }
      v49 = (unint64_t *)(v110 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
    }
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    goto LABEL_99;
  }
  v104 = operator new(0x20uLL);
  v105 = xmmword_2102DB480;
  strcpy((char *)v104, "Input depth buffer is NULL");
  v39 = (char *)operator new(0x78uLL);
  *(_QWORD *)__p = v39;
  *(_OWORD *)&__p[8] = xmmword_2102DB440;
  strcpy(v39, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
  if (a4)
  {
    v113 = 22;
    *(_QWORD *)&v114 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v113, (uint64_t)&v104, (CFErrorRef *)&v111);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v40 = v111;
    if (v111)
      CFRetain(v111);
    *a4 = v40;
    v41 = (std::__shared_weak_count *)v112;
    if ((_QWORD)v112)
    {
      v42 = (unint64_t *)(v112 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_61;
    v39 = *(char **)__p;
  }
  operator delete(v39);
LABEL_61:
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  return 0;
}

void sub_20E8E060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;

  v36 = *(std::__shared_weak_count **)(v34 - 152);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (a20 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  sub_21015CEBC((_QWORD *)(v34 - 136));
  sub_21015CB94((_QWORD *)(v34 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E08E0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

void sub_20E8E093C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    MEMORY[0x212BC6398](v1, 0xA0C40AFF93C70);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *CV3DNormalEstimationCreate()
{
  _QWORD *result;

  result = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = 0;
    result[2] = 0;
    *((_DWORD *)result + 4) = 1;
    *result = &off_24C9AFAB0;
  }
  return result;
}

uint64_t CV3DNormalEstimationSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DNormalEstimationSessionCompute(uint64_t a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, std::__shared_weak_count_vtbl *a4, CFTypeRef *a5, __n128 a6, int8x16_t a7, int8x16_t a8)
{
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  size_t v34;
  size_t v35;
  char *v36;
  const std::error_category *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  uint64_t (**v42)();
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  const std::error_category *v48;
  uint64_t (**v49)();
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  const std::error_category *v53;
  CFTypeRef v54;
  unint64_t *v55;
  uint64_t *v56;
  const std::error_category *v57;
  uint64_t (**v58)();
  unint64_t *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  const std::error_category *v77;
  unint64_t *v78;
  CFTypeRef v79;
  __n128 v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  char *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  __int128 v104;
  _BYTE __p[32];
  unsigned __int32 v109;
  void *v110;
  __int128 v111;
  unsigned int v112;
  unsigned int v113;
  CFTypeRef cf;
  __int128 v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t (**v118)();
  __int128 v119;
  uint64_t v120;
  __int128 v121;

  if (a2)
  {
    sub_21015D058(&v110, a2, 1, 0);
    v12 = (uint64_t *)v111;
    v119 = v111;
    if (*((_QWORD *)&v111 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v12 = (uint64_t *)v119;
    }
    v118 = &off_24CA1A9C0;
    if (v12)
    {
      v16 = *v12;
      v15 = (std::__shared_weak_count *)v12[1];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (!v16)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      if (v16)
LABEL_13:
        sub_2101613B8(v119);
    }
LABEL_14:
    v110 = &off_24CA1A9A0;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (sub_21015BE44((uint64_t)&v118) == 1717855600)
    {
      if (a4)
      {
        sub_21015D058(&v110, a4, 1, 0);
        v23 = (uint64_t *)v111;
        v117 = v111;
        if (*((_QWORD *)&v111 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v23 = (uint64_t *)v117;
        }
        v116 = &off_24CA1A9E0;
        if (v23)
        {
          v27 = *v23;
          v26 = (std::__shared_weak_count *)v23[1];
          if (v26)
          {
            v28 = (unint64_t *)&v26->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 - 1, v28));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if (v27)
            sub_2101614A8(v117);
        }
        v110 = &off_24CA1A9A0;
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
        if (*((_QWORD *)&v111 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = sub_21015D950((uint64_t)&v116);
        if (v34 == sub_21015D950((uint64_t)&v118)
          && (v35 = sub_21015DBD0((uint64_t)&v116), v35 == sub_21015DBD0((uint64_t)&v118)))
        {
          if (sub_21015BE44((uint64_t)&v116) == 1380410945)
          {
            if ((a3 & 1) != 0)
            {
              sub_21015C40C((uint64_t)&v118, (uint64_t *)&cf);
              v79 = cf;
              v104 = v115;
              v80 = a6;
              v80.n128_u32[3] = a7.i32[0];
              *(__n128 *)__p = v80;
              *(int8x16_t *)&__p[16] = vextq_s8(vextq_s8(a7, a7, 0xCuLL), a8, 8uLL);
              v109 = a8.u32[2];
              v81 = *(uint64_t ***)(a1 + 8);
              if (!v81 || (_QWORD)v115 != *(_QWORD *)(**v81 + 8))
              {
                v81 = (uint64_t **)operator new();
                sub_20EF49760(v81, v104, SDWORD1(v104));
                v82 = *(uint64_t **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v81;
                if (v82)
                {
                  v83 = *v82;
                  *v82 = 0;
                  if (v83)
                    ((void (*)(void))v82[1])();
                  MEMORY[0x212BC6398](v82, 0xA0C40AFF93C70);
                  v81 = *(uint64_t ***)(a1 + 8);
                }
              }
              v84 = **v81;
              v120 = (uint64_t)v79;
              v121 = v104;
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)v84 + 16))(&v110, v84, &v120, __p, a3);
              sub_21015C5C4((uint64_t)&v116, (uint64_t)__p);
              if ((_DWORD)v111 && DWORD1(v111) && DWORD2(v111))
              {
                v85 = DWORD1(v111) - 1;
                v86 = (char *)v110;
                v87 = *(_QWORD **)__p;
                v88 = 4 * v112;
                v89 = 4 * *(unsigned int *)&__p[24];
                v90 = DWORD2(v111) - 1;
                if (DWORD2(v111) != 1)
                {
                  v91 = 4 * v113;
                  v92 = 4 * *(unsigned int *)&__p[28];
                  if (DWORD1(v111) == 1)
                  {
                    do
                    {
                      v100 = *((_DWORD *)v86 + 2);
                      *v87 = *(_QWORD *)v86;
                      v87[1] = v100;
                      v86 += v91;
                      v87 = (_QWORD *)((char *)v87 + v92);
                      --v90;
                    }
                    while (v90);
                  }
                  else
                  {
                    v93 = 0;
                    do
                    {
                      v94 = v87;
                      v95 = v86;
                      v96 = v85;
                      do
                      {
                        v97 = *((_DWORD *)v95 + 2);
                        *v94 = *(_QWORD *)v95;
                        v94[1] = v97;
                        v95 += v88;
                        v94 = (_QWORD *)((char *)v94 + v89);
                        --v96;
                      }
                      while (v96);
                      v98 = *(_QWORD *)v95;
                      v99 = *((_DWORD *)v95 + 2);
                      *v94 = v98;
                      v94[1] = v99;
                      v86 += v91;
                      v87 = (_QWORD *)((char *)v87 + v92);
                      ++v93;
                    }
                    while (v93 != v90);
                  }
                }
                for (; v85; --v85)
                {
                  v101 = *((_DWORD *)v86 + 2);
                  *v87 = *(_QWORD *)v86;
                  v87[1] = v101;
                  v86 += v88;
                  v87 = (_QWORD *)((char *)v87 + v89);
                }
                v102 = *(_QWORD *)v86;
                v103 = *((_DWORD *)v86 + 2);
                *v87 = v102;
                v87[1] = v103;
              }
              v46 = 1;
              v56 = (uint64_t *)v117;
              if (!(_QWORD)v117)
                goto LABEL_132;
              goto LABEL_124;
            }
            v110 = operator new(0x19uLL);
            v111 = xmmword_2102DAFD0;
            strcpy((char *)v110, "Kernel size must be odd");
            v36 = (char *)operator new(0x78uLL);
            *(_QWORD *)__p = v36;
            *(_OWORD *)&__p[8] = xmmword_2102DB440;
            strcpy(v36, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
            if (!a5)
              goto LABEL_85;
            v37 = std::generic_category();
            v120 = 22;
            *(_QWORD *)&v121 = v37;
            sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&cf);
            sub_20EA66CF0(&cf, a5);
            v38 = (std::__shared_weak_count *)v115;
            if (!(_QWORD)v115)
              goto LABEL_83;
            v39 = (unint64_t *)(v115 + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
          }
          else
          {
            v110 = operator new(0x58uLL);
            v111 = xmmword_2102DB460;
            strcpy((char *)v110, "Output normals buffer has invalid format, should be kCVPixelFormatType_Rgba_Float32");
            v36 = (char *)operator new(0x78uLL);
            *(_QWORD *)__p = v36;
            *(_OWORD *)&__p[8] = xmmword_2102DB440;
            strcpy(v36, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
            if (!a5)
              goto LABEL_85;
            v77 = std::generic_category();
            v120 = 22;
            *(_QWORD *)&v121 = v77;
            sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&cf);
            sub_20EA66CF0(&cf, a5);
            v38 = (std::__shared_weak_count *)v115;
            if (!(_QWORD)v115)
              goto LABEL_83;
            v78 = (unint64_t *)(v115 + 8);
            do
              v40 = __ldaxr(v78);
            while (__stlxr(v40 - 1, v78));
          }
        }
        else
        {
          v110 = operator new(0x28uLL);
          v111 = xmmword_2102DB450;
          strcpy((char *)v110, "Depth and normals don't have same size");
          v36 = (char *)operator new(0x78uLL);
          *(_QWORD *)__p = v36;
          *(_OWORD *)&__p[8] = xmmword_2102DB440;
          strcpy(v36, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
          if (!a5)
            goto LABEL_85;
          v53 = std::generic_category();
          v120 = 22;
          *(_QWORD *)&v121 = v53;
          sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&cf);
          if (*a5)
            CFRelease(*a5);
          *a5 = 0;
          v54 = cf;
          if (cf)
            CFRetain(cf);
          *a5 = v54;
          v38 = (std::__shared_weak_count *)v115;
          if (!(_QWORD)v115)
          {
LABEL_83:
            if ((__p[23] & 0x80000000) == 0)
              goto LABEL_86;
            v36 = *(char **)__p;
LABEL_85:
            operator delete(v36);
LABEL_86:
            if (SHIBYTE(v111) < 0)
            {
              operator delete(v110);
              v46 = 0;
              v56 = (uint64_t *)v117;
              if (!(_QWORD)v117)
              {
LABEL_132:
                v116 = &off_24CA1A9A0;
                v74 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                if (*((_QWORD *)&v117 + 1))
                {
                  v75 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                goto LABEL_105;
              }
            }
            else
            {
              v46 = 0;
              v56 = (uint64_t *)v117;
              if (!(_QWORD)v117)
                goto LABEL_132;
            }
LABEL_124:
            v70 = *v56;
            v69 = (std::__shared_weak_count *)v56[1];
            if (v69)
            {
              v71 = (unint64_t *)&v69->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
              do
                v73 = __ldaxr(v71);
              while (__stlxr(v73 - 1, v71));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            if (v70)
              sub_210161684(v117);
            goto LABEL_132;
          }
          v55 = (unint64_t *)(v115 + 8);
          do
            v40 = __ldaxr(v55);
          while (__stlxr(v40 - 1, v55));
        }
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        goto LABEL_83;
      }
      v110 = operator new(0x20uLL);
      v111 = xmmword_2102DB470;
      strcpy((char *)v110, "Input normals buffer is NULL");
      v47 = (char *)operator new(0x78uLL);
      *(_QWORD *)__p = v47;
      *(_OWORD *)&__p[8] = xmmword_2102DB440;
      strcpy(v47, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
      if (!a5)
        goto LABEL_101;
      v57 = std::generic_category();
      v120 = 22;
      *(_QWORD *)&v121 = v57;
      sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&v116);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v58 = v116;
      if (v116)
        CFRetain(v116);
      *a5 = v58;
      v50 = (std::__shared_weak_count *)v117;
      if (!(_QWORD)v117)
        goto LABEL_99;
      v59 = (unint64_t *)(v117 + 8);
      do
        v52 = __ldaxr(v59);
      while (__stlxr(v52 - 1, v59));
    }
    else
    {
      v110 = operator new(0x50uLL);
      v111 = xmmword_2102DB430;
      strcpy((char *)v110, "Input depth have invalid format, should be kCVPixelFormatType_DepthFloat32");
      v47 = (char *)operator new(0x78uLL);
      *(_QWORD *)__p = v47;
      *(_OWORD *)&__p[8] = xmmword_2102DB440;
      strcpy(v47, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
      if (!a5)
        goto LABEL_101;
      v48 = std::generic_category();
      v120 = 22;
      *(_QWORD *)&v121 = v48;
      sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&v116);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v49 = v116;
      if (v116)
        CFRetain(v116);
      *a5 = v49;
      v50 = (std::__shared_weak_count *)v117;
      if (!(_QWORD)v117)
      {
LABEL_99:
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_102:
          if (SHIBYTE(v111) < 0)
            operator delete(v110);
          v46 = 0;
LABEL_105:
          if ((_QWORD)v119)
          {
            v61 = *(_QWORD *)v119;
            v60 = *(std::__shared_weak_count **)(v119 + 8);
            if (v60)
            {
              v62 = (unint64_t *)&v60->__shared_owners_;
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
              do
                v64 = __ldaxr(v62);
              while (__stlxr(v64 - 1, v62));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
                if (!v61)
                  goto LABEL_113;
                goto LABEL_112;
              }
            }
            if (v61)
LABEL_112:
              sub_210161594(v119);
          }
LABEL_113:
          v118 = &off_24CA1A9A0;
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
          if (*((_QWORD *)&v119 + 1))
          {
            v66 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          return v46;
        }
        v47 = *(char **)__p;
LABEL_101:
        operator delete(v47);
        goto LABEL_102;
      }
      v51 = (unint64_t *)(v117 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
    }
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    goto LABEL_99;
  }
  v110 = operator new(0x20uLL);
  v111 = xmmword_2102DB480;
  strcpy((char *)v110, "Input depth buffer is NULL");
  v41 = (char *)operator new(0x78uLL);
  *(_QWORD *)__p = v41;
  *(_OWORD *)&__p[8] = xmmword_2102DB440;
  strcpy(v41, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DNormalEstimation.cpp");
  if (a5)
  {
    v120 = 22;
    *(_QWORD *)&v121 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v120, (uint64_t)&v110, (CFErrorRef *)&v118);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v42 = v118;
    if (v118)
      CFRetain(v118);
    *a5 = v42;
    v43 = (std::__shared_weak_count *)v119;
    if ((_QWORD)v119)
    {
      v44 = (unint64_t *)(v119 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_61;
    v41 = *(char **)__p;
  }
  operator delete(v41);
LABEL_61:
  if (SHIBYTE(v111) < 0)
    operator delete(v110);
  return 0;
}

void sub_20E8E1620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (a36)
  {
    p_shared_owners = (unint64_t *)&a36->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a36->__on_zero_shared)(a36);
      std::__shared_weak_count::__release_weak(a36);
    }
  }
  if (a22 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_21015CEBC((_QWORD *)(v36 - 136));
  sub_21015CB94((_QWORD *)(v36 - 112));
  _Unwind_Resume(a1);
}

uint64_t CV3DODTConfigCreate(_QWORD *a1)
{
  _OWORD *v2;

  if (!a1)
    return 2;
  v2 = operator new(0x40uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *v2 = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *(_BYTE *)v2 = 1;
    *(_OWORD *)((char *)v2 + 8) = xmmword_2102DB520;
    *((_QWORD *)v2 + 3) = 0;
    *((_QWORD *)v2 + 4) = 0;
    *(_OWORD *)((char *)v2 + 40) = xmmword_2102DB520;
  }
  *a1 = v2;
  return v2 == 0;
}

uint64_t CV3DODTConfigRelease(uint64_t result)
{
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

uint64_t CV3DODTConfigSetVIOPoseRequired(_BYTE *a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  result = 0;
  *a1 = a2;
  return result;
}

uint64_t CV3DODTConfigGetVIOPoseRequired(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *a1;
  return result;
}

uint64_t CV3DODTConfigSetImageCropInfo(_QWORD *a1, int64x2_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  int64x2_t v4;
  int64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = a2->u64[1];
    v3 = a2[1].i64[0];
    v5 = a2[2];
    v6 = a2[2].i64[0];
    v4.i64[1] = a2->i64[0];
    v4.i64[0] = v2;
    v7 = 2;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v4), (int32x4_t)vceqzq_s64(v5)))) & 1) == 0
      && (unint64_t)(v6 + v3) <= a2->i64[0])
    {
      v8 = a2[1].i64[1];
      if (v5.i64[1] + v8 <= v2)
      {
        a1[1] = a2->i64[0];
        a1[2] = v2;
        a1[3] = v3;
        a1[4] = v8;
        a1[5] = v6;
        a1[6] = v5.i64[1];
        return 0;
      }
    }
    return v7;
  }
  return 2;
}

uint64_t CV3DODTConfigGetImageCropInfo(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *(_OWORD *)(a1 + 8);
  a2[1] = *(_OWORD *)(a1 + 24);
  a2[2] = *(_OWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_20E8E1AA4(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFBA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  a1[1] = v4;
  return a1;
}

void sub_20E8E1B04(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8E1B1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8E1B30(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  __CFData *Mutable;
  std::__shared_weak_count *v7;
  UInt8 *MutableBytePtr;
  unint64_t v9;
  __int32 *v10;
  int32x2_t *v11;
  __int32 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CFMutableDataRef theData;
  std::__shared_weak_count *v17;

  v3 = a2[1];
  if (*a2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v5 = (v3 - *a2) >> 3;
    Mutable = CFDataCreateMutable(0, 0x666666666666666CLL * v5);
    theData = Mutable;
    v7 = (std::__shared_weak_count *)operator new();
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
    v17 = v7;
    CFDataIncreaseLength(Mutable, 0x666666666666666CLL * v5);
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    v9 = 0xCCCCCCCCCCCCCCCDLL * v5;
    v10 = (__int32 *)(*a2 + 36);
    v11 = (int32x2_t *)(MutableBytePtr + 12);
    do
    {
      v11[-2].i32[1] = *(v10 - 9);
      v11[-1] = vmovn_s64(*(int64x2_t *)(v10 - 7));
      v11->i32[0] = *(v10 - 3);
      v11->i32[1] = *(v10 - 2);
      v11[1].i32[0] = *(v10 - 1);
      v12 = *v10;
      v10 += 10;
      v11[1].i32[1] = v12;
      v11 = (int32x2_t *)((char *)v11 + 28);
      --v9;
    }
    while (v9);
    sub_20E8E1AA4(a1, (CFTypeRef *)&theData);
    v13 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_20E8E1CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E1CC0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8E1CD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8E1CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E1D00(uint64_t a1, CFTypeRef cf)
{
  std::__shared_weak_count *v4;
  CFMutableDataRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  __CFData *Mutable;
  std::__shared_weak_count *v19;
  UInt8 *MutableBytePtr;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  UInt8 *v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  CFMutableDataRef v58;
  std::__shared_weak_count *v59;
  CFMutableDataRef theData;
  std::__shared_weak_count *v61;

  if (!cf
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DODTDetectionMetadataUtils.cpp", 154, (uint64_t)"cf_metadata", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20E9350E4(&theData, cf);
  v5 = theData;
  v4 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v61;
    if (v61)
    {
      v9 = (unint64_t *)&v61->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v58 = v5;
    v59 = v4;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v58 = theData;
    v59 = 0;
  }
  sub_20E8E223C((uint64_t)&v58, CFSTR("DetectionWasPerformed"), (_BYTE *)a1);
  sub_20E8E23B4((uint64_t)&v58, CFSTR("InspectionFrameWidth"), (uint64_t *)(a1 + 8));
  sub_20E8E23B4((uint64_t)&v58, CFSTR("InspectionFrameHeight"), (uint64_t *)(a1 + 16));
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  if (v15 == v16)
  {
LABEL_35:
    v35 = (_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
      goto LABEL_51;
    goto LABEL_36;
  }
  v17 = v16 - v15;
  Mutable = CFDataCreateMutable(0, v16 - v15);
  theData = Mutable;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v61 = v19;
  CFDataIncreaseLength(Mutable, v17);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  v21 = v17 >> 4;
  v22 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v17 < 0x120)
    goto LABEL_23;
  v23 = 0;
  v39 = 16 * (v21 - 1);
  if (&MutableBytePtr[v39] < MutableBytePtr
    || &MutableBytePtr[v39 + 8] < MutableBytePtr + 8
    || (unint64_t)(v21 - 1) >> 60)
  {
    goto LABEL_24;
  }
  if ((unint64_t)MutableBytePtr < v22 + (v17 & 0xFFFFFFFFFFFFFFF0)
    && v22 < (unint64_t)&MutableBytePtr[v17 & 0xFFFFFFFFFFFFFFF0])
  {
LABEL_23:
    v23 = 0;
LABEL_24:
    v24 = v21 - v23;
    v25 = (16 * v23) | 8;
    v26 = &MutableBytePtr[v25];
    v27 = (uint64_t *)(v22 + v25);
    do
    {
      *((_QWORD *)v26 - 1) = *(v27 - 1);
      v28 = *v27;
      v27 += 2;
      *(_QWORD *)v26 = v28;
      v26 += 16;
      --v24;
    }
    while (v24);
    goto LABEL_26;
  }
  v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  v40 = MutableBytePtr + 32;
  v41 = (__int128 *)(v22 + 32);
  v42 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v44 = *(v41 - 2);
    v43 = *(v41 - 1);
    v46 = *v41;
    v45 = v41[1];
    v41 += 4;
    *(v40 - 2) = v44;
    *(v40 - 1) = v43;
    *v40 = v46;
    v40[1] = v45;
    v40 += 4;
    v42 -= 4;
  }
  while (v42);
  if (v21 != v23)
    goto LABEL_24;
LABEL_26:
  sub_20E8E1AA4(&v56, (CFTypeRef *)&theData);
  v29 = v61;
  if (v61)
  {
    v30 = (unint64_t *)&v61->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_20E8E2528((uint64_t)&v58, CFSTR("InspectionFeaturePoints2d"), &v56);
  v32 = v57;
  if (!v57)
    goto LABEL_35;
  v33 = (unint64_t *)&v57->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
    goto LABEL_35;
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = (_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    goto LABEL_51;
LABEL_36:
  sub_20E8E1B30(&theData, v35);
  sub_20E8E2528((uint64_t)&v58, CFSTR("UnfilteredRegionProposals"), (uint64_t *)&theData);
  v36 = v61;
  if (v61)
  {
    v37 = (unint64_t *)&v61->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_51:
  v47 = *(_QWORD *)(a1 + 72);
  v48 = *(_QWORD *)(a1 + 80);
  v49 = (_QWORD *)(a1 + 72);
  if (v47 == v48)
    goto LABEL_56;
  sub_20E8E1B30(&theData, v49);
  sub_20E8E2528((uint64_t)&v58, CFSTR("FilteredRegionProposals"), (uint64_t *)&theData);
  v50 = v61;
  if (!v61)
    goto LABEL_56;
  v51 = (unint64_t *)&v61->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
LABEL_56:
    v53 = v59;
    if (!v59)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = v59;
    if (!v59)
      return;
  }
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_20E8E2198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8E21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8E2228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20E8E223C(uint64_t a1, void *key, _BYTE *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20EA5E3C8(a3, (std::__shared_weak_count_vtbl **)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E8E23A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E23B4(uint64_t a1, void *key, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_20EA5DF6C(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_16;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_16:
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_17:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_18:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20E8E2514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E8E2528(uint64_t a1, void *key, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *value;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  v13 = (std::__shared_weak_count *)a3[1];
  v29 = *a3;
  v30 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20E8E296C(&value, (uint64_t)&v29);
  v16 = v30;
  if (v30)
  {
    v17 = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = value;
  v19 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v11 = v20 != 0;
      if (!v20)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v11 = v20 != 0;
  if (v20)
LABEL_26:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_27:
  v24 = v28;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v11;
}

void sub_20E8E26E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E26F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8E270C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20E8E275C()
{
  sub_20E860B90("vector");
}

_QWORD *sub_20E8E2770(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFBA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8E27D0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8E27E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8E2800(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8E2824(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E8E2844(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8E28B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8E28DC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E8E28FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20E8E296C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8E2770(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20E8E2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DODTCreateWithOptionsAndModel(uint64_t *a1, const void *a2, uint64_t a3)
{
  _BYTE v4[72];

  v4[0] = 0;
  v4[64] = 0;
  return sub_20E8E2AAC(a1, (uint64_t)v4, a2, a3);
}

uint64_t sub_20E8E2AAC(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  _BYTE *v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  const __CFDictionary *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  const __CFNumber *v34;
  CFTypeID TypeID;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  CFDictionaryRef v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  const __CFNumber *v46;
  CFTypeID v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  __int16 v54;
  BOOL v55;
  CFDictionaryRef v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  const __CFString *v61;
  const __CFNumber *v62;
  unint64_t v63;
  double v64;
  unsigned __int8 v65;
  double v66;
  uint64_t v67;
  CFDictionaryRef v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  const __CFString *v73;
  const __CFNumber *v74;
  unint64_t v75;
  double v76;
  CFDictionaryRef v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  const __CFString *v82;
  const __CFNumber *v83;
  unint64_t v84;
  double v85;
  uint64_t v86;
  BOOL v87;
  _BYTE *v88;
  BOOL v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  const std::string *v102;
  uint64_t v103;
  __int128 v104;
  unsigned __int8 v105;
  uint64_t v106;
  const char *v107;
  NSObject *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v113;
  _QWORD v114[3];
  _BYTE v115[56];
  int v116;
  const char *v117;
  int v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v125;
  void *v126[2];
  uint64_t v127;
  void *__dst[2];
  uint64_t v129;
  _BYTE valuePtr[112];
  _BYTE v131[22];
  char v132;
  _BYTE v133[20];
  char v134;

  if (!a1)
    return 4;
  v8 = (char *)operator new(0x1810uLL, MEMORY[0x24BEDB6B8]);
  if (v8)
  {
    v9 = v8;
    memset(&valuePtr[24], 0, 88);
    *(_QWORD *)valuePtr = 0x6400000280;
    valuePtr[31] = 19;
    qmemcpy(&valuePtr[8], "com.apple.AppleCV3D", 19);
    strcpy(v115, "AppleCV3D-Teon.mcom.apple.AppleCAppleCV3D-Teon.msgpack");
    v115[55] = 22;
    sub_20E9F7D8C((uint64_t)&valuePtr[8], (std::string::size_type)&v115[32], 0, 0, (std::string *)&valuePtr[32]);
    if ((v115[55] & 0x80000000) != 0)
      operator delete(*(void **)&v115[32]);
    v115[55] = 21;
    strcpy(&v115[32], "AppleCV3D-PCA.msgpack");
    sub_20E9F7D8C((uint64_t)&valuePtr[8], (std::string::size_type)&v115[32], 0, 0, (std::string *)&valuePtr[64]);
    qmemcpy(v114, ".msgpackAppleCV3D-PCA.ms", sizeof(v114));
    if ((v115[55] & 0x80000000) != 0)
      operator delete(*(void **)&v115[32]);
    valuePtr[96] = 0;
    valuePtr[104] = 0;
    *(_QWORD *)v9 = *(_QWORD *)valuePtr;
    if ((valuePtr[31] & 0x80000000) != 0)
    {
      sub_20E860C04(v9 + 8, *(void **)&valuePtr[8], *(unint64_t *)&valuePtr[16]);
    }
    else
    {
      *(_OWORD *)(v9 + 8) = *(_OWORD *)&valuePtr[8];
      *((_QWORD *)v9 + 3) = *(_QWORD *)&valuePtr[24];
    }
    v9[32] = 0;
    v9[56] = 0;
    if (valuePtr[56])
    {
      if ((valuePtr[55] & 0x80000000) != 0)
      {
        sub_20E860C04(v9 + 32, *(void **)&valuePtr[32], *(unint64_t *)&valuePtr[40]);
      }
      else
      {
        *((_OWORD *)v9 + 2) = *(_OWORD *)&valuePtr[32];
        *((_QWORD *)v9 + 6) = *(_QWORD *)&valuePtr[48];
      }
      v9[56] = 1;
    }
    v9[64] = 0;
    v9[88] = 0;
    if (valuePtr[88])
    {
      if ((valuePtr[87] & 0x80000000) != 0)
      {
        sub_20E860C04(v9 + 64, *(void **)&valuePtr[64], *(unint64_t *)&valuePtr[72]);
      }
      else
      {
        *((_OWORD *)v9 + 4) = *(_OWORD *)&valuePtr[64];
        *((_QWORD *)v9 + 10) = *(_QWORD *)&valuePtr[80];
      }
      v9[88] = 1;
    }
    *((_OWORD *)v9 + 6) = *(_OWORD *)&valuePtr[96];
    v11 = v9 + 112;
    if (*(_BYTE *)(a2 + 64))
    {
      v12 = *(_OWORD *)(a2 + 16);
      *v11 = *(_OWORD *)a2;
      *((_OWORD *)v9 + 8) = v12;
      v13 = *(_OWORD *)(a2 + 48);
      *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 32);
      *((_OWORD *)v9 + 10) = v13;
    }
    else
    {
      *((_OWORD *)v9 + 9) = 0u;
      *((_OWORD *)v9 + 10) = 0u;
      *v11 = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      v9[112] = 1;
      *(_OWORD *)(v9 + 120) = xmmword_2102DB520;
      *((_QWORD *)v9 + 17) = 0;
      *((_QWORD *)v9 + 18) = 0;
      *(_OWORD *)(v9 + 152) = xmmword_2102DB520;
    }
    sub_2100E6DF8((uint64_t)(v9 + 176), (__int128 *)(v9 + 120));
    sub_2100E6DF8((uint64_t)(v9 + 264), (__int128 *)(v9 + 120));
    *((_QWORD *)v9 + 44) = 0;
    *((_QWORD *)v9 + 45) = 0;
    *((_DWORD *)v9 + 92) = 0;
    v115[32] = 0;
    v115[40] = 0;
    sub_20EE0179C((uint64_t)(v9 + 376), a2, &v115[32]);
    v113 = a4;
    sub_20EDF9F04((uint64_t)(v9 + 1184), a2);
    v115[32] = 0;
    v115[40] = 0;
    sub_20EE0179C((uint64_t)(v9 + 3248), a2, &v115[32]);
    sub_20EDF9F04((uint64_t)(v9 + 4056), a2);
    *((_QWORD *)v9 + 767) = 0;
    *((_QWORD *)v9 + 766) = 0;
    *((_QWORD *)v9 + 765) = v9 + 6128;
    sub_21021A874((uint64_t *)v9 + 768);
    *a1 = (uint64_t)v9;
    if (valuePtr[88] && (valuePtr[87] & 0x80000000) != 0)
      operator delete(*(void **)&valuePtr[64]);
    if (valuePtr[56] && (valuePtr[55] & 0x80000000) != 0)
      operator delete(*(void **)&valuePtr[32]);
    if ((valuePtr[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&valuePtr[8]);
      if (*a1)
      {
LABEL_33:
        __dst[0] = 0;
        __dst[1] = 0;
        v129 = 0;
        v126[0] = 0;
        v126[1] = 0;
        v127 = 0;
        v134 = 19;
        strcpy(&v133[15], "CV3D");
        *(_OWORD *)v133 = *(_OWORD *)&v115[16];
        *(_OWORD *)&v115[32] = *(_OWORD *)v115;
        *(_QWORD *)&v115[46] = v114[0];
        *(_WORD *)&v115[54] = 5632;
        sub_20E9F7D8C((uint64_t)v133, (std::string::size_type)&v115[32], 0, 0, (std::string *)valuePtr);
        if ((v115[55] & 0x80000000) != 0)
          operator delete(*(void **)&v115[32]);
        v132 = 21;
        *(_OWORD *)v131 = *(_OWORD *)&v114[1];
        strcpy(&v131[13], ".msgpack");
        sub_20E9F7D8C((uint64_t)v133, (std::string::size_type)v131, 0, 0, (std::string *)&v115[32]);
        if (v132 < 0)
        {
          operator delete(*(void **)v131);
          if ((_BYTE)v116)
            goto LABEL_37;
        }
        else if ((_BYTE)v116)
        {
LABEL_37:
          v14 = valuePtr[24] != 0;
          if (valuePtr[24])
          {
            if (SHIBYTE(v129) < 0)
            {
              if (valuePtr[23] >= 0)
                v15 = valuePtr;
              else
                v15 = *(_BYTE **)valuePtr;
              if (valuePtr[23] >= 0)
                v16 = valuePtr[23];
              else
                v16 = *(_QWORD *)&valuePtr[8];
              sub_20E867CBC(__dst, v15, v16);
            }
            else if ((valuePtr[23] & 0x80) != 0)
            {
              sub_20E867BF8(__dst, *(void **)valuePtr, *(size_t *)&valuePtr[8]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)valuePtr;
              v129 = *(_QWORD *)&valuePtr[16];
            }
            if (SHIBYTE(v127) < 0)
            {
              if (v115[55] >= 0)
                v17 = &v115[32];
              else
                v17 = *(_BYTE **)&v115[32];
              if (v115[55] >= 0)
                v18 = v115[55];
              else
                v18 = *(_QWORD *)&v115[40];
              sub_20E867CBC(v126, v17, v18);
            }
            else if ((v115[55] & 0x80) != 0)
            {
              sub_20E867BF8(v126, *(void **)&v115[32], *(size_t *)&v115[40]);
            }
            else
            {
              *(_OWORD *)v126 = *(_OWORD *)&v115[32];
              v127 = *(_QWORD *)&v115[48];
            }
          }
          if ((_BYTE)v116 && (v115[55] & 0x80000000) != 0)
            operator delete(*(void **)&v115[32]);
LABEL_67:
          if (valuePtr[24] && (valuePtr[23] & 0x80000000) != 0)
            operator delete(*(void **)valuePtr);
          if (v134 < 0)
          {
            operator delete(*(void **)v133);
            if (v14)
              goto LABEL_75;
          }
          else if (v14)
          {
            goto LABEL_75;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DODTInterface.cpp", 187, (uint64_t)"GetPathsToVLADModels(vlad_model_resource_path, pca_model_resource_path)", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
LABEL_75:
          sub_20EDF5C64((char *)(*a1 + 3248), __dst, (char *)v126);
          sub_20EDF5C64((char *)(*a1 + 376), __dst, (char *)v126);
          sub_20EDF5C64((char *)(*a1 + 1184), __dst, (char *)v126);
          sub_20EDF5C64((char *)(*a1 + 4056), __dst, (char *)v126);
          sub_20E9DA754(valuePtr, a3);
          v19 = *(const __CFDictionary **)valuePtr;
          v20 = *(std::__shared_weak_count **)&valuePtr[8];
          if (*(_QWORD *)&valuePtr[8])
          {
            v21 = (unint64_t *)(*(_QWORD *)&valuePtr[8] + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
            v23 = *(std::__shared_weak_count **)&valuePtr[8];
            if (*(_QWORD *)&valuePtr[8])
            {
              v24 = (unint64_t *)(*(_QWORD *)&valuePtr[8] + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            do
              v26 = __ldxr(v21);
            while (__stxr(v26 + 1, v21));
            theDict = v19;
            v125 = v20;
            do
              v27 = __ldxr(v21);
            while (__stxr(v27 + 1, v21));
            do
              v28 = __ldaxr(v21);
            while (__stlxr(v28 - 1, v21));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            do
              v29 = __ldaxr(v21);
            while (__stlxr(v29 - 1, v21));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            v19 = theDict;
            v30 = v125;
            if (v125)
            {
              p_shared_owners = (unint64_t *)&v125->__shared_owners_;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
          else
          {
            theDict = *(CFDictionaryRef *)valuePtr;
            v125 = 0;
          }
          if (v19
            && (*(_QWORD *)&v115[32] = 0, CFSTR("MaxNumberImagesToTrack"))
            && CFDictionaryGetValueIfPresent(theDict, CFSTR("MaxNumberImagesToTrack"), (const void **)&v115[32]))
          {
            v34 = *(const __CFNumber **)&v115[32];
            if (*(_QWORD *)&v115[32] && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v34) == TypeID))
            {
              *(_QWORD *)valuePtr = 0;
              CFNumberGetValue(v34, kCFNumberNSIntegerType, valuePtr);
              v36 = *(_DWORD *)valuePtr & 0xFFFFFF00;
              v37 = valuePtr[0];
              v38 = 0x100000000;
            }
            else
            {
              v37 = 0;
              v38 = 0;
              v36 = 0;
            }
            v42 = v37 | v36 | v38;
            if ((v38 & 0x100000000) != 0)
              v39 = v42;
            else
              v39 = 2;
            v41 = theDict;
            v40 = v125;
            if (!v125)
              goto LABEL_116;
          }
          else
          {
            v39 = 2;
            v41 = theDict;
            v40 = v125;
            if (!v125)
              goto LABEL_116;
          }
          v43 = (unint64_t *)&v40->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          do
            v45 = __ldaxr(v43);
          while (__stlxr(v45 - 1, v43));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            if (!v41)
              goto LABEL_123;
            goto LABEL_117;
          }
LABEL_116:
          if (!v41)
            goto LABEL_123;
LABEL_117:
          *(_QWORD *)&v115[32] = 0;
          if (CFSTR("MaxNumberObjectsToTrack")
            && CFDictionaryGetValueIfPresent(theDict, CFSTR("MaxNumberObjectsToTrack"), (const void **)&v115[32]))
          {
            v46 = *(const __CFNumber **)&v115[32];
            if (*(_QWORD *)&v115[32] && (v47 = CFNumberGetTypeID(), CFGetTypeID(v46) == v47))
            {
              *(_QWORD *)valuePtr = 0;
              CFNumberGetValue(v46, kCFNumberNSIntegerType, valuePtr);
              v48 = *(_DWORD *)valuePtr & 0xFFFFFF00;
              v49 = valuePtr[0];
              v50 = 0x100000000;
            }
            else
            {
              v49 = 0;
              v50 = 0;
              v48 = 0;
            }
            v52 = v49 | v48 | v50;
            if ((v50 & 0x100000000) != 0)
              v51 = v52;
            else
              v51 = 1;
            v10 = 4;
            if (v39 < 0)
              goto LABEL_233;
LABEL_130:
            v53 = (unsigned __int16)v39 >= 5u && *(_BYTE *)(*a1 + 3680) == 0;
            if (v53)
              v54 = 4;
            else
              v54 = v39;
            *(_WORD *)(*a1 + 3616) = v54;
            if (v53 || v51 < 0)
              goto LABEL_233;
            v55 = (unsigned __int16)v51 >= 5u && *(_BYTE *)(*a1 + 4488) == 0;
            if (v55)
              LOWORD(v51) = 4;
            *(_WORD *)(*a1 + 4424) = v51;
            if (v55)
              goto LABEL_233;
            *(_QWORD *)(*a1 + 824) = 0;
            v56 = theDict;
            v57 = v125;
            if (v125)
            {
              v58 = (unint64_t *)&v125->__shared_owners_;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              do
                v60 = __ldaxr(v58);
              while (__stlxr(v60 - 1, v58));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            if (v56)
            {
              v61 = CFSTR("ObjectDetectionDetectorTimeInterval");
              *(_QWORD *)valuePtr = 0;
              if (!CFSTR("ObjectDetectionDetectorTimeInterval"))
              {
                v63 = 0;
                goto LABEL_157;
              }
              if (CFDictionaryGetValueIfPresent(theDict, CFSTR("ObjectDetectionDetectorTimeInterval"), (const void **)valuePtr))
              {
                v62 = sub_20EA5E34C(*(const __CFNumber **)valuePtr);
                v63 = (unint64_t)v62 & 0xFFFFFFFFFFFFFF00;
                goto LABEL_158;
              }
            }
            v63 = 0;
            LOBYTE(v61) = 0;
LABEL_157:
            LOBYTE(v62) = 0;
LABEL_158:
            if ((_BYTE)v61)
              *(_QWORD *)&v64 = v63 & 0xFFFFFFFFFFFFFF00 | v62;
            else
              v64 = 0.499;
            if (v64 < 0.0)
            {
              v10 = 4;
              goto LABEL_233;
            }
            v65 = sub_20EDB986C();
            v66 = 0.799;
            if (((v64 > 0.0) & v65) == 0)
              v66 = v64;
            v67 = *a1 + 1184;
            *(double *)(*a1 + 1632) = v66;
            sub_20EDF06DC(v67, 0.1);
            v68 = theDict;
            v69 = v125;
            if (v125)
            {
              v70 = (unint64_t *)&v125->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
              do
                v72 = __ldaxr(v70);
              while (__stlxr(v72 - 1, v70));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            if (v68)
            {
              v73 = CFSTR("ImageDetectionTimeInterval");
              *(_QWORD *)valuePtr = 0;
              if (!CFSTR("ImageDetectionTimeInterval"))
              {
                v75 = 0;
                goto LABEL_177;
              }
              if (CFDictionaryGetValueIfPresent(theDict, CFSTR("ImageDetectionTimeInterval"), (const void **)valuePtr))
              {
                v74 = sub_20EA5E34C(*(const __CFNumber **)valuePtr);
                v75 = (unint64_t)v74 & 0xFFFFFFFFFFFFFF00;
                goto LABEL_178;
              }
            }
            v75 = 0;
            LOBYTE(v73) = 0;
LABEL_177:
            LOBYTE(v74) = 0;
LABEL_178:
            if ((_BYTE)v73)
              *(_QWORD *)&v76 = v75 & 0xFFFFFFFFFFFFFF00 | v74;
            else
              v76 = 0.515666667;
            v77 = theDict;
            v78 = v125;
            if (v125)
            {
              v79 = (unint64_t *)&v125->__shared_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
              do
                v81 = __ldaxr(v79);
              while (__stlxr(v81 - 1, v79));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            if (v77)
            {
              v82 = CFSTR("ObjectDetectionTimeInterval");
              *(_QWORD *)valuePtr = 0;
              if (!CFSTR("ObjectDetectionTimeInterval"))
              {
                v84 = 0;
                goto LABEL_193;
              }
              if (CFDictionaryGetValueIfPresent(theDict, CFSTR("ObjectDetectionTimeInterval"), (const void **)valuePtr))
              {
                v83 = sub_20EA5E34C(*(const __CFNumber **)valuePtr);
                v84 = (unint64_t)v83 & 0xFFFFFFFFFFFFFF00;
                goto LABEL_194;
              }
            }
            v84 = 0;
            LOBYTE(v82) = 0;
LABEL_193:
            LOBYTE(v83) = 0;
LABEL_194:
            *(_QWORD *)&v85 = v84 & 0xFFFFFFFFFFFFFF00 | v83;
            if (!(_BYTE)v82)
              v85 = 0.515666667;
            v10 = 4;
            if (v76 >= 0.0 && v85 >= 0.0)
            {
              v86 = *a1;
              *(double *)(v86 + 3696) = v76;
              *(double *)(v86 + 4504) = v85;
              valuePtr[0] = 0;
              v87 = sub_20E8E730C((uint64_t)&theDict, CFSTR("DeterministicMode"), valuePtr);
              v88 = (_BYTE *)*a1;
              v88[888] = !v87;
              v88[746] = !v87;
              v88[1696] = !v87;
              v88[3760] = !v87;
              v88[3618] = !v87;
              v88[4568] = !v87;
              valuePtr[0] = 0;
              v89 = sub_20E8E730C((uint64_t)&theDict, CFSTR("ForceDetection"), valuePtr);
              v90 = (_BYTE *)*a1;
              v90[889] = 1;
              v90[1697] = 1;
              v90[3761] = v89;
              v90[4569] = v89;
              v91 = sub_20E8E742C((uint64_t)&theDict, CFSTR("ScaleEstimationMinimumObservations"));
              if ((v91 & 0xFF00000000) != 0)
              {
                v92 = *a1;
                if (!*(_BYTE *)(*a1 + 104))
                  *(_BYTE *)(v92 + 104) = 1;
                *(_QWORD *)(v92 + 96) = (int)v91;
              }
              v123 = 960;
              if (sub_20EDB986C())
                v123 = 640;
              *(_QWORD *)(*a1 + 1648) = sub_20E8E7544((uint64_t)&theDict, CFSTR("ObjectDetectionTargetMinimumImageWidth"), (uint64_t)&v123);
              v93 = sub_20EDB986C();
              v94 = *a1;
              if (v93)
              {
                *(_BYTE *)(v94 + 746) = 0;
                *(_BYTE *)(v94 + 3618) = 0;
              }
              else
              {
                *(_BYTE *)(v94 + 3520) = 1;
                *(_BYTE *)(*(_QWORD *)(v94 + 4048) + 392) = 1;
              }
              if (!v113)
                goto LABEL_232;
              if (sub_20EDB986C())
              {
                sub_20E8E7640(&v122);
                if (**(int **)(v122 + 56) <= 4)
                {
                  v95 = *(unsigned __int8 *)(v122 + 72);
                  v96 = sub_20E8C31DC(v122, "OSLogSurrogateAppender", 1, 0);
                  v97 = v96 ? v96 + 16 : 0;
                  if (v95 || v96)
                  {
                    *(_QWORD *)&v115[32] = &v122;
                    *(std::chrono::steady_clock::time_point *)&v115[40] = std::chrono::steady_clock::now();
                    *(std::chrono::system_clock::time_point *)&v115[48] = std::chrono::system_clock::now();
                    v116 = 4;
                    v117 = "unknown file";
                    v118 = 304;
                    v120 = 0;
                    v121 = 0;
                    v119 = "unknown function";
                    v98 = **(_QWORD **)&v115[32];
                    v99 = (uint64_t *)(**(_QWORD **)&v115[32] + 16);
                    if (*(char *)(**(_QWORD **)&v115[32] + 39) < 0)
                    {
                      v101 = *(_QWORD *)(v98 + 16);
                      v100 = *(_QWORD *)(v98 + 24);
                    }
                    else
                    {
                      v100 = *(unsigned __int8 *)(**(_QWORD **)&v115[32] + 39);
                      v101 = **(_QWORD **)&v115[32] + 16;
                    }
                    *(_QWORD *)v131 = v101;
                    *(_QWORD *)&v131[8] = v100;
                    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)valuePtr);
                      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)valuePtr);
                      if (valuePtr[24] && (valuePtr[23] & 0x80000000) != 0)
                        operator delete(*(void **)valuePtr);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    v106 = byte_254A4A50F;
                    if (byte_254A4A50F >= 0)
                    {
                      v107 = (const char *)&xmmword_254A4A4F8;
                    }
                    else
                    {
                      v106 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
                      v107 = (const char *)xmmword_254A4A4F8;
                    }
                    *(_QWORD *)v133 = v107;
                    *(_QWORD *)&v133[8] = v106;
                    *(_QWORD *)valuePtr = os_log_create(v107, *(const char **)v131);
                    sub_20E86E5A8(&valuePtr[8], (uint64_t)v133);
                    sub_20E86E5A8(&valuePtr[40], (uint64_t)v131);
                    v108 = *(NSObject **)valuePtr;
                    sub_20E86E44C((uint64_t)valuePtr);
                    sub_20E8E7F30(v97, v99, v108, OS_LOG_TYPE_ERROR);
                    if (v95)
                    {
                      sub_20E8C003C((uint64_t)&v115[32], "The CV3DModelRef object for the object region proposal model is provided but the region proposal model will be disabled for this slow device.");
                      sub_20E863570((uint64_t)&v115[32]);
                    }
                    sub_20E863714((uint64_t)&v115[32]);
                  }
                }
LABEL_232:
                v10 = 0;
                goto LABEL_233;
              }
              v102 = *(const std::string **)(v113 + 16);
              if (!v102)
                goto LABEL_233;
              memset(valuePtr, 0, 24);
              *(_QWORD *)&valuePtr[24] = 1;
              *(_QWORD *)&valuePtr[32] = 0;
              *(_QWORD *)&valuePtr[40] = 0;
              *(int64x2_t *)&valuePtr[48] = vdupq_n_s64(0x12CuLL);
              *(_DWORD *)&valuePtr[64] = 1059648963;
              *(_QWORD *)&valuePtr[72] = 5;
              *(_OWORD *)&valuePtr[80] = xmmword_2102DB6A0;
              *(int32x2_t *)&valuePtr[96] = vdup_n_s32(0x3F4CCCCDu);
              *(_DWORD *)&valuePtr[104] = 1056964608;
              std::string::operator=((std::string *)valuePtr, v102);
              v103 = *(unsigned int *)(v113 + 8);
              *(_QWORD *)&v104 = *(_QWORD *)v113;
              *((_QWORD *)&v104 + 1) = HIDWORD(*(_QWORD *)v113);
              *(_OWORD *)&valuePtr[24] = v104;
              *(_QWORD *)&valuePtr[40] = v103;
              *(_DWORD *)v133 = 0;
              sub_20ED9CEB8((void **)valuePtr, v133, (unint64_t **)&v115[32]);
              if (!*(_DWORD *)v133)
              {
                sub_20EDFB0F4(*a1 + 1184, (uint64_t *)&v115[32]);
                sub_20E86665C((uint64_t)&v115[32]);
                if ((valuePtr[23] & 0x80000000) != 0)
                  operator delete(*(void **)valuePtr);
                goto LABEL_232;
              }
              sub_20E86665C((uint64_t)&v115[32]);
              if ((valuePtr[23] & 0x80000000) != 0)
                operator delete(*(void **)valuePtr);
              v10 = 17;
            }
LABEL_233:
            v109 = v125;
            if (!v125)
              goto LABEL_237;
            v110 = (unint64_t *)&v125->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
              if ((SHIBYTE(v127) & 0x80000000) == 0)
              {
LABEL_238:
                if ((SHIBYTE(v129) & 0x80000000) == 0)
                  return v10;
LABEL_242:
                operator delete(__dst[0]);
                return v10;
              }
            }
            else
            {
LABEL_237:
              if ((SHIBYTE(v127) & 0x80000000) == 0)
                goto LABEL_238;
            }
            operator delete(v126[0]);
            if ((SHIBYTE(v129) & 0x80000000) == 0)
              return v10;
            goto LABEL_242;
          }
LABEL_123:
          v51 = 1;
          v10 = 4;
          if (v39 < 0)
            goto LABEL_233;
          goto LABEL_130;
        }
        v14 = 0;
        goto LABEL_67;
      }
    }
    else if (*a1)
    {
      goto LABEL_33;
    }
  }
  else
  {
    *a1 = 0;
  }
  return 2;
}

void sub_20E8E3AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,void *a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  sub_20E86665C((uint64_t)&a31);
  if (a38 < 0)
  {
    operator delete(a33);
    if (a45 < 0)
    {
LABEL_8:
      operator delete(a40);
      _Unwind_Resume(a1);
    }
  }
  else if (a45 < 0)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DODTCreateWithOptionsConfigAndModel(uint64_t *a1, _OWORD *a2, const void *a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  char v8;

  if (!a2)
    return 4;
  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v5 = a2[3];
  v7[2] = a2[2];
  v7[3] = v5;
  v8 = 1;
  return sub_20E8E2AAC(a1, (uint64_t)v7, a3, a4);
}

uint64_t CV3DODTCreateWithOptions(uint64_t *a1, const void *a2)
{
  _BYTE v3[72];

  v3[0] = 0;
  v3[64] = 0;
  return sub_20E8E2AAC(a1, (uint64_t)v3, a2, 0);
}

uint64_t CV3DODTCreate(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  const void *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char **v8;
  char *v9[7];
  char v10;
  _QWORD v11[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65D20(&v8, v11);
  v3 = (const void *)v11[0];
  v2 = (std::__shared_weak_count *)v11[1];
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  LOBYTE(v8) = 0;
  v10 = 0;
  result = sub_20E8E2AAC(a1, (uint64_t)&v8, v3, 0);
  v5 = result;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v5;
    }
  }
  return result;
}

void sub_20E8E3EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8E3F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

long double CV3DODTSetPerformanceMode(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  long double result;
  int v13;
  double v14;
  int v15;
  double v16;
  int v17;
  double v18;

  if (!a1)
    return result;
  *(_DWORD *)(a1 + 368) = a2;
  if (a2 == 2)
    v3 = 2;
  else
    v3 = a2 == 1;
  v4 = *(_DWORD *)(a1 + 816);
  if (v3 == v4)
  {
    v5 = *(_DWORD *)(a1 + 3688);
    v6 = v3 - v5;
    if (v3 == v5)
      goto LABEL_7;
LABEL_12:
    v14 = *(double *)(a1 + 3696);
    result = v14 * ldexp(1.0, v6);
    *(long double *)(a1 + 3696) = result;
    *(_DWORD *)(a1 + 3688) = v3;
    v15 = *(_DWORD *)(a1 + 1624);
    v8 = v3 - v15;
    if (v3 == v15)
    {
LABEL_8:
      v9 = *(_DWORD *)(a1 + 4496);
      v10 = v3 - v9;
      if (v3 == v9)
        return result;
LABEL_14:
      v18 = *(double *)(a1 + 4504);
      result = v18 * ldexp(1.0, v10);
      *(long double *)(a1 + 4504) = result;
      *(_DWORD *)(a1 + 4496) = v3;
      return result;
    }
    goto LABEL_13;
  }
  v11 = *(double *)(a1 + 824);
  result = v11 * ldexp(1.0, v3 - v4);
  *(long double *)(a1 + 824) = result;
  *(_DWORD *)(a1 + 816) = v3;
  v13 = *(_DWORD *)(a1 + 3688);
  v6 = v3 - v13;
  if (v3 != v13)
    goto LABEL_12;
LABEL_7:
  v7 = *(_DWORD *)(a1 + 1624);
  v8 = v3 - v7;
  if (v3 == v7)
    goto LABEL_8;
LABEL_13:
  v16 = *(double *)(a1 + 1632);
  result = v16 * ldexp(1.0, v8);
  *(long double *)(a1 + 1632) = result;
  *(_DWORD *)(a1 + 1624) = v3;
  v17 = *(_DWORD *)(a1 + 4496);
  v10 = v3 - v17;
  if (v3 != v17)
    goto LABEL_14;
  return result;
}

uint64_t CV3DODTGetPerformanceMode(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 368);
  return result;
}

uint64_t CV3DODTSetConfig(_OWORD *a1, __int128 *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  result = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)((char *)a1 + 153) = *(__int128 *)((char *)a2 + 41);
  a1[8] = v5;
  a1[9] = v6;
  a1[7] = v4;
  return result;
}

uint64_t CV3DODTGetConfig(_OWORD *a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  result = 0;
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)a1 + 153);
  a2[1] = v5;
  a2[2] = v6;
  *a2 = v4;
  return result;
}

uint64_t CV3DODTGetMaxSupportedNumberImagesToTrack()
{
  return 4;
}

uint64_t CV3DODTGetMaxSupportedNumberObjectsToTrack()
{
  return 1;
}

uint64_t CV3DODTRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    return 3;
  sub_21021A3F8(a1 + 6144);
  sub_20E8E7864(*(_QWORD **)(a1 + 6128));
  sub_20E8E78EC(a1 + 4056);
  *(_QWORD *)(a1 + 3248) = &off_24C9E9D90;
  v2 = *(_QWORD *)(a1 + 4048);
  *(_QWORD *)(a1 + 4048) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 136);
      v5 = *(void **)(v2 + 128);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 136);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 128);
      }
      *(_QWORD *)(v2 + 136) = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40917B7221);
  }
  sub_20EDF00D0(a1 + 3248);
  sub_20E8E78EC(a1 + 1184);
  *(_QWORD *)(a1 + 376) = &off_24C9E9D90;
  v10 = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 128);
    if (v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      v13 = *(void **)(v10 + 128);
      if (v12 != v11)
      {
        v14 = *(_QWORD *)(v10 + 136);
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = *(void **)(v10 + 128);
      }
      *(_QWORD *)(v10 + 136) = v11;
      operator delete(v13);
    }
    MEMORY[0x212BC6398](v10, 0x1020C40917B7221);
  }
  sub_20EDF00D0(a1 + 376);
  *(_QWORD *)(a1 + 328) = &off_24CA1A9A0;
  v17 = *(std::__shared_weak_count **)(a1 + 344);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v25 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 312) = 0;
      if (!v25)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  v20 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v20)
LABEL_28:
    (*(void (**)(void))(a1 + 320))();
LABEL_29:
  *(_QWORD *)(a1 + 240) = &off_24CA1A9A0;
  v21 = *(std::__shared_weak_count **)(a1 + 256);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v26 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = 0;
      if (!v26)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v24 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v24)
LABEL_34:
    (*(void (**)(void))(a1 + 232))();
LABEL_35:
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (*(char *)(a1 + 31) < 0)
LABEL_41:
    operator delete(*(void **)(a1 + 8));
LABEL_42:
  MEMORY[0x212BC6398](a1, 0x10F2C4010111B61);
  return 0;
}

uint64_t CV3DODTVerifyReferenceImage(__CVBuffer *a1, __CVBuffer *a2, double a3)
{
  uint64_t v3;
  double Width;
  double Height;
  double v8;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22[3];
  void *v23;
  char *v24;
  char *v25;
  uint64_t (**v26)();
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  __int128 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (**v60)();
  char v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[4];
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 __p;
  uint64_t v69;
  uint64_t (**v70)();
  char v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[4];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v3 = 4;
  if (!a1 || a3 <= 0.0)
    return v3;
  if (!sub_20EDB8AB0(a1))
    return 6;
  Width = (double)CVPixelBufferGetWidth(a1);
  Height = (double)CVPixelBufferGetHeight(a1);
  if (a2)
  {
    if (sub_20EDB8AB0(a2))
    {
      if (CVPixelBufferGetWidth(a2) != (unint64_t)Width
        || CVPixelBufferGetHeight(a2) != (unint64_t)Height)
      {
        return 14;
      }
      goto LABEL_8;
    }
    return 6;
  }
LABEL_8:
  if (Height >= Width)
    v8 = Width;
  else
    v8 = Height;
  if (v8 < 100.0)
    return 5;
  v70 = &off_24C9AFD78;
  v71 = 0;
  v75 = 0;
  v72 = 0u;
  v73 = 0u;
  memset(v74, 0, 25);
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0;
  v60 = &off_24C9AFD78;
  v61 = 0;
  v65 = 0;
  v62 = 0u;
  v63 = 0u;
  memset(v64, 0, 25);
  v66 = 0u;
  v67 = 0u;
  __p = 0u;
  v69 = 0;
  if (sub_20EDB8BD4(a1, (std::__shared_weak_count_vtbl *)a2, (uint64_t)&v70, (uint64_t)&v60, 0x280uLL))
  {
    if ((unint64_t)v73 >= 5 && v74[0] >= 5uLL)
    {
      if (!(_QWORD)v66 || (v3 = 13, (_QWORD)v63 == (_QWORD)v73) && v64[0] == v74[0] && (_QWORD)v62 == 1)
      {
        v26 = &off_24CA06CB8;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0;
        v31 = 1;
        v32 = 1;
        v33 = xmmword_2102DB6B0;
        v34 = xmmword_2102DB6C0;
        v35 = 1000;
        v36 = 1;
        v37 = xmmword_2102DB6D0;
        v38 = 0x410000004141999ALL;
        v39 = 5;
        v40 = 0x41F0000041200000;
        v41 = vdupq_n_s64(1uLL);
        v42 = xmmword_2102DB6E0;
        v43 = 0;
        v44 = 1;
        v45 = 1;
        v46 = 36;
        v48 = 0x404000003F4CCCCDLL;
        v47 = 5;
        v49 = 1069547520;
        v50 = 20000;
        v52 = 256;
        v51 = 0;
        v53 = xmmword_2102DB6F0;
        v54 = 0x3F96E9DD3F5425F2;
        v55 = 0;
        v56 = vdupq_n_s64(0xAuLL);
        v58 = 0;
        v59 = 0;
        v57 = 0;
        sub_20EDD5CB8((uint64_t)&v70, (uint64_t)&v26, 1, 5000, &v23);
        sub_20EDD5578((const void **)&v23, (uint64_t)&v60, v22);
        if (v23)
        {
          v24 = (char *)v23;
          operator delete(v23);
        }
        v23 = v22[0];
        v25 = v22[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v22[1] - v22[0]) >> 4) >= 4)
          v3 = 0;
        else
          v3 = 15;
        if (v22[0])
        {
          v24 = v22[0];
          operator delete(v22[0]);
        }
        sub_20FD40A18(&v26);
      }
    }
    else
    {
      v3 = 13;
    }
  }
  else
  {
    v3 = 5;
  }
  v60 = &off_24C9AFD78;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v70 = &off_24C9AFD78;
  if ((_QWORD)v78)
  {
    *((_QWORD *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v3;
}

void sub_20E8E47C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  if (__p)
    operator delete(__p);
  sub_20FD40A18(&a16);
  sub_20E8E481C(&a57);
  sub_20E8E481C((_QWORD *)(v57 - 208));
  _Unwind_Resume(a1);
}

void sub_20E8E4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  sub_20E8E481C(&a57);
  sub_20E8E481C((_QWORD *)(v57 - 208));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8E481C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9AFD78;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t CV3DODTAddPlanarObject(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, unint64_t a4, int a5, double a6)
{
  uint64_t v7;
  double Width;
  double Height;
  double v15;
  std::mutex *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t (**v42)();
  char v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[40];
  __int128 v47;
  __int128 v48;
  void *__p[2];
  uint64_t v50;
  uint64_t (**v51)();
  char v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[40];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  if (!a1)
    return 3;
  v7 = 4;
  if (a2 && a6 > 0.0)
  {
    if (sub_20EDB8AB0(a2))
    {
      Width = (double)CVPixelBufferGetWidth(a2);
      Height = (double)CVPixelBufferGetHeight(a2);
      if (!a3)
        goto LABEL_9;
      if (sub_20EDB8AB0(a3))
      {
        if (CVPixelBufferGetWidth(a3) != (unint64_t)Width
          || CVPixelBufferGetHeight(a3) != (unint64_t)Height)
        {
          return 14;
        }
LABEL_9:
        if (Height >= Width)
          v15 = Width;
        else
          v15 = Height;
        if (v15 < 100.0)
          return 5;
        v17 = (std::mutex *)(a1 + 384);
        std::mutex::lock((std::mutex *)(a1 + 384));
        v18 = *(_QWORD **)(a1 + 456);
        if (v18)
        {
          v19 = (_QWORD *)(a1 + 456);
          do
          {
            v20 = v18[4];
            v21 = v20 >= a4;
            if (v20 >= a4)
              v22 = v18;
            else
              v22 = v18 + 1;
            if (v21)
              v19 = v18;
            v18 = (_QWORD *)*v22;
          }
          while (*v22);
          if (v19 != (_QWORD *)(a1 + 456) && v19[4] <= a4)
            goto LABEL_48;
        }
        std::mutex::unlock((std::mutex *)(a1 + 384));
        v17 = (std::mutex *)(a1 + 1192);
        std::mutex::lock((std::mutex *)(a1 + 1192));
        v23 = *(_QWORD **)(a1 + 1264);
        if (!v23)
          goto LABEL_40;
        v24 = (_QWORD *)(a1 + 1264);
        do
        {
          v25 = v23[4];
          v26 = v25 >= a4;
          if (v25 >= a4)
            v27 = v23;
          else
            v27 = v23 + 1;
          if (v26)
            v24 = v23;
          v23 = (_QWORD *)*v27;
        }
        while (*v27);
        if (v24 != (_QWORD *)(a1 + 1264) && v24[4] <= a4)
        {
LABEL_48:
          std::mutex::unlock(v17);
        }
        else
        {
LABEL_40:
          std::mutex::unlock((std::mutex *)(a1 + 1192));
          if (!sub_20EDF5BDC(a1 + 3248, a4) && !sub_20EDF5BDC(a1 + 4056, a4))
          {
            v51 = &off_24C9AFD78;
            v52 = 0;
            v55[32] = 0;
            v53 = 0u;
            v54 = 0u;
            memset(v55, 0, 25);
            v56 = 0u;
            v57 = 0u;
            v58 = 0u;
            v59 = 0;
            v42 = &off_24C9AFD78;
            v43 = 0;
            v46[32] = 0;
            v44 = 0u;
            v45 = 0u;
            memset(v46, 0, 25);
            v47 = 0u;
            v48 = 0u;
            *(_OWORD *)__p = 0u;
            v50 = 0;
            if (sub_20EDB8BD4(a2, (std::__shared_weak_count_vtbl *)a3, (uint64_t)&v51, (uint64_t)&v42, 0x280uLL))
            {
              if (a5)
                v28 = a1 + 3248;
              else
                v28 = a1 + 376;
              v29 = sub_20EE01A24(v28, (uint64_t)&v51, a4, &v42, a6) - 1;
              if (v29 > 6)
                v7 = 0;
              else
                v7 = dword_2102DBA5C[v29];
            }
            else
            {
              v7 = 5;
            }
            v42 = &off_24C9AFD78;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            v30 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
            if (*((_QWORD *)&v48 + 1))
            {
              v31 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
            if (*((_QWORD *)&v47 + 1))
            {
              v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v51 = &off_24C9AFD78;
            if ((_QWORD)v58)
            {
              *((_QWORD *)&v58 + 1) = v58;
              operator delete((void *)v58);
            }
            v36 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
            if (*((_QWORD *)&v57 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (*((_QWORD *)&v56 + 1))
            {
              v40 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            return v7;
          }
        }
        return 12;
      }
    }
    return 6;
  }
  return v7;
}

void sub_20E8E4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20E8E481C(&a9);
  sub_20E8E481C(&a27);
  _Unwind_Resume(a1);
}

uint64_t CV3DODTAdd3dObject(uint64_t a1, const __CFData *a2, unint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t *v36;
  std::__shared_weak_count *v37;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v6 = (std::mutex *)(a1 + 384);
  std::mutex::lock((std::mutex *)(a1 + 384));
  v7 = *(_QWORD **)(a1 + 456);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 456);
    do
    {
      v9 = v7[4];
      v10 = v9 >= a3;
      if (v9 >= a3)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != (_QWORD *)(a1 + 456) && v8[4] <= a3)
      goto LABEL_55;
  }
  std::mutex::unlock(v6);
  v6 = (std::mutex *)(a1 + 1192);
  std::mutex::lock((std::mutex *)(a1 + 1192));
  v12 = *(_QWORD **)(a1 + 1264);
  if (v12)
  {
    v13 = (_QWORD *)(a1 + 1264);
    do
    {
      v14 = v12[4];
      v15 = v14 >= a3;
      if (v14 >= a3)
        v16 = v12;
      else
        v16 = v12 + 1;
      if (v15)
        v13 = v12;
      v12 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v13 != (_QWORD *)(a1 + 1264) && v13[4] <= a3)
      goto LABEL_55;
  }
  std::mutex::unlock((std::mutex *)(a1 + 1192));
  v6 = (std::mutex *)(a1 + 3256);
  std::mutex::lock((std::mutex *)(a1 + 3256));
  v17 = *(_QWORD **)(a1 + 3328);
  if (v17)
  {
    v18 = (_QWORD *)(a1 + 3328);
    do
    {
      v19 = v17[4];
      v20 = v19 >= a3;
      if (v19 >= a3)
        v21 = v17;
      else
        v21 = v17 + 1;
      if (v20)
        v18 = v17;
      v17 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 != (_QWORD *)(a1 + 3328) && v18[4] <= a3)
      goto LABEL_55;
  }
  std::mutex::unlock((std::mutex *)(a1 + 3256));
  v6 = (std::mutex *)(a1 + 4064);
  std::mutex::lock((std::mutex *)(a1 + 4064));
  v22 = *(_QWORD **)(a1 + 4136);
  if (v22)
  {
    v23 = (_QWORD *)(a1 + 4136);
    do
    {
      v24 = v22[4];
      v25 = v24 >= a3;
      if (v24 >= a3)
        v26 = v22;
      else
        v26 = v22 + 1;
      if (v25)
        v23 = v22;
      v22 = (_QWORD *)*v26;
    }
    while (*v26);
    if (v23 != (_QWORD *)(a1 + 4136) && v23[4] <= a3)
    {
LABEL_55:
      std::mutex::unlock(v6);
      return 12;
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 4064));
  v27 = (uint64_t *)operator new(0x68uLL, MEMORY[0x24BEDB6B8]);
  v28 = v27;
  if (v27)
    sub_20E8E8A78(v27);
  v36 = v28;
  v29 = (std::__shared_weak_count *)operator new();
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFBF0;
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
  v37 = v29;
  if (!v28)
  {
    v32 = 2;
LABEL_62:
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    return v32;
  }
  v30 = sub_20E9DA9E8(a2, v28);
  if (v30 >= 2)
  {
    if (v30 == 2)
      v32 = 16;
    else
      v32 = 1;
  }
  else
  {
    v31 = sub_20EDFA10C(a1 + 1184, (uint64_t)&v36, a3) - 1;
    if (v31 >= 7)
      v32 = 0;
    else
      v32 = dword_2102DBA5C[v31];
  }
  v29 = v37;
  if (v37)
    goto LABEL_62;
  return v32;
}

void sub_20E8E4F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E4F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8E4F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

void sub_20E8E4FA8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;

  if (v1)
  {
    v3 = sub_20E8E95B0(v1);
    MEMORY[0x212BC6398](v3, 0x20C40313AD07FLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DODTObjectInfoRelease(uint64_t result)
{
  if (result)
    JUMPOUT(0x212BC6368);
  return result;
}

uint64_t CV3DODTDetect(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, uint64_t a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  double v8;

  v8 = *(double *)(a1 + 352) + 0.0166666667;
  *(double *)(a1 + 352) = v8;
  return CV3DODTDetectWithMetadata(a1, a2, a3, a4, a5, a6, a7, a8, v8, 0);
}

uint64_t CV3DODTDetectWithMetadata(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, double a9, const void *a10)
{
  uint64_t v11;
  const __CFDictionary *Value;
  const void *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  void *v55;
  char *v56;
  char *v57;
  void *v58;
  char *i;
  void *v60;
  char *v61;
  char *j;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v74;
  uint64_t v75;
  void *__p[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82[2];
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85;
  void *v86[2];
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  _QWORD v98[2];
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  _OWORD v106[4];
  uint64_t v107;
  _OWORD v108[4];
  uint64_t v109;
  char v110;

  if (!a1)
    return 3;
  v11 = 4;
  if (a5 && a4 && a2 && theDict && a7 && a8)
  {
    *a7 = 0;
    *a8 = 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("CameraDescription"));
    if (Value
      && (v20 = CFDictionaryGetValue(Value, CFSTR("CameraIntrinsics")), sub_20E9D4A18(v20, (uint64_t)v108), v110))
    {
      if (sub_20EDB8AB0((__CVBuffer *)a2))
      {
        if (!v110)
          sub_20E866B34();
        v106[2] = v108[2];
        v106[3] = v108[3];
        v107 = v109;
        v106[0] = v108[0];
        v106[1] = v108[1];
        sub_21015D058(v98, a2, 1, 0);
        v21 = (std::__shared_weak_count *)operator new(0x30uLL);
        v21->__shared_owners_ = 0;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA18420;
        v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1A9A0;
        v22 = v99;
        v21[1].__shared_owners_ = v98[1];
        v21[1].__shared_weak_owners_ = (uint64_t)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          v25 = v99;
          v104 = &v21[1].__vftable;
          v105 = v21;
          v98[0] = &off_24CA1A9A0;
          if (v99)
          {
            v26 = (unint64_t *)&v99->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        else
        {
          v104 = &v21[1].__vftable;
          v105 = v21;
        }
        if ((*(_QWORD *)(a1 + 136)
           || *(_QWORD *)(a1 + 144)
           || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 120)
           || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 128))
          && sub_20E8E57BC((_QWORD *)(a1 + 264), (uint64_t)v106, (uint64_t *)&v104))
        {
          v11 = 4;
        }
        else
        {
          sub_210107D4C((uint64_t *)&v104, 1, (uint64_t)&v88);
          sub_20E8E59D0((uint64_t)v98, (unsigned __int8 *)&v88);
          v28 = v97;
          if (v97)
          {
            v29 = (unint64_t *)&v97->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = v96;
          if (v96)
          {
            v32 = (unint64_t *)&v96->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v88 = *(_OWORD *)a4;
          v34 = *(_QWORD *)(a4 + 16);
          v91 = *(_OWORD *)(a4 + 24);
          v35 = *(_QWORD *)(a4 + 40);
          v94 = *(_OWORD *)(a4 + 48);
          v36 = *a5;
          v37 = a5[1];
          v89 = v34;
          v90 = v36;
          v38 = *(_QWORD *)(a4 + 64);
          v92 = v35;
          v93 = v37;
          v39 = (std::__shared_weak_count *)a5[2];
          v95 = v38;
          v96 = v39;
          v86[0] = 0;
          v86[1] = 0;
          v87 = 0;
          std::mutex::lock((std::mutex *)(a1 + 384));
          v40 = *(_QWORD *)(a1 + 464);
          std::mutex::unlock((std::mutex *)(a1 + 384));
          if (v40)
          {
            v74 = 0uLL;
            LOBYTE(__p[0]) = 0;
            LOBYTE(v78) = 0;
            sub_20EDF0A2C(a1 + 376, (uint64_t)v98, (uint64_t *)&v104, (uint64_t)v106, &v88, (uint64_t *)&v74, (__int128 *)__p, a6, (char **)&v84, a9);
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
            *(_OWORD *)v86 = v84;
            v87 = v85;
            v85 = 0;
            v84 = 0uLL;
            if (*((_QWORD *)&v74 + 1))
            {
              v42 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
          v84 = 0uLL;
          v85 = 0;
          std::mutex::lock((std::mutex *)(a1 + 1192));
          v44 = *(_QWORD *)(a1 + 1272);
          std::mutex::unlock((std::mutex *)(a1 + 1192));
          if (v44)
          {
            *(_QWORD *)v82 = 0;
            v83 = 0;
            if (a10)
            {
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              *(_OWORD *)__p = 0u;
              v77 = 0u;
              sub_20E8E5C00(&v74, (uint64_t)__p);
              sub_20E8E5C94((uint64_t)v82, &v74);
              sub_20E86665C((uint64_t)&v74);
              sub_20E8E270C(__p);
            }
            LOBYTE(__p[0]) = 0;
            LOBYTE(v78) = 0;
            sub_20EDF0A2C(a1 + 1184, (uint64_t)v98, (uint64_t *)&v104, (uint64_t)v106, &v88, (uint64_t *)v82, (__int128 *)__p, a6, (char **)&v74, a9);
            v84 = v74;
            v85 = v75;
            if (a10)
              sub_20E8E1D00(*(uint64_t *)v82, a10);
            v45 = v83;
            if (v83)
            {
              v46 = (unint64_t *)&v83->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v77 = 0;
          sub_20E8E83E4((char **)__p, 0, (uint64_t)v86[0], (uint64_t)v86[1], 0xEF7BDEF7BDEF7BDFLL * (((char *)v86[1] - (char *)v86[0]) >> 3));
          v48 = (char *)v84;
          sub_20E8E83E4((char **)__p, (uint64_t)__p[1], v84, *((uint64_t *)&v84 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 3));
          v49 = (char *)__p[0];
          v50 = __p[1];
          if (__p[0] == __p[1])
          {
            v11 = 0;
          }
          else
          {
            v51 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v52 = 0xEF7BDEF7BDEF7BDFLL * v51;
            *a7 = 0xEF7BDEF7BDEF7BDFLL * v51;
            v53 = 0x8C6318C6318C6320 * v51;
            if (is_mul_ok(v52, 0xE0uLL))
              v54 = v53;
            else
              v54 = -1;
            v55 = operator new[](v54, MEMORY[0x24BEDB6B8]);
            *a8 = v55;
            if (v55)
            {
              sub_20E8E5D08((uint64_t)v49, (uint64_t)v50, (uint64_t)v55);
              v11 = 0;
              v49 = (char *)__p[0];
            }
            else
            {
              v11 = 2;
            }
          }
          if (v49)
          {
            v56 = (char *)__p[1];
            v57 = v49;
            if (__p[1] != v49)
            {
              do
              {
                v58 = (void *)*((_QWORD *)v56 - 30);
                if (v58)
                {
                  *((_QWORD *)v56 - 29) = v58;
                  operator delete(v58);
                }
                v56 -= 248;
              }
              while (v56 != v49);
              v57 = (char *)__p[0];
            }
            __p[1] = v49;
            operator delete(v57);
            v48 = (char *)v84;
          }
          if (v48)
          {
            for (i = (char *)*((_QWORD *)&v84 + 1); i != v48; i -= 248)
            {
              v60 = (void *)*((_QWORD *)i - 30);
              if (v60)
              {
                *((_QWORD *)i - 29) = v60;
                operator delete(v60);
              }
            }
            operator delete(v48);
          }
          v61 = (char *)v86[0];
          if (v86[0])
          {
            for (j = (char *)v86[1]; j != v61; j -= 248)
            {
              v63 = (void *)*((_QWORD *)j - 30);
              if (v63)
              {
                *((_QWORD *)j - 29) = v63;
                operator delete(v63);
              }
            }
            operator delete(v61);
          }
          v98[0] = &off_24C9AFD78;
          if (v102)
          {
            v103 = v102;
            operator delete(v102);
          }
          v64 = v101;
          if (v101)
          {
            v65 = (unint64_t *)&v101->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = v100;
          if (v100)
          {
            v68 = (unint64_t *)&v100->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
        }
        v70 = v105;
        if (v105)
        {
          v71 = (unint64_t *)&v105->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      else
      {
        return 6;
      }
    }
    else
    {
      return 7;
    }
  }
  return v11;
}

void sub_20E8E56E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E86665C((uint64_t)&a25);
  sub_20E8E5B90(&a27);
  sub_20E8E5B90(&a31);
  sub_20E8E481C(&a49);
  sub_20E86665C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E8E575C()
{
  JUMPOUT(0x20E8E573CLL);
}

void sub_20E8E5764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E5AE4((uint64_t)&a35);
  sub_20E86665C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E8E5780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E86665C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E8E5794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E86665C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E8E57A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_21015D41C(&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E57BC(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __CVBuffer *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23[2];
  CFTypeRef cf;
  _QWORD v25[2];
  std::__shared_weak_count *v26;

  v6 = (std::__shared_weak_count *)a3[1];
  v23[0] = *a3;
  v23[1] = (uint64_t)v6;
  cf = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (__CVBuffer *)sub_210106EC8(v23);
  if (!v6)
    goto LABEL_8;
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!sub_2100E733C(a1, v9, &cf))
      return 4;
  }
  else
  {
LABEL_8:
    if (!sub_2100E733C(a1, v9, &cf))
      return 4;
  }
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - (double)(unint64_t)a1[2];
  *(double *)(a2 + 40) = *(double *)(a2 + 40) - (double)(unint64_t)a1[3];
  if (!cf)
    return 4;
  sub_21015D058(v25, (std::__shared_weak_count_vtbl *)cf, 1, 0);
  v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_24CA18420;
  v12[3] = &off_24CA1A9A0;
  v13 = v26;
  v12[4] = v25[1];
  v12[5] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v26;
    v25[0] = &off_24CA1A9A0;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19 = (std::__shared_weak_count *)a3[1];
  *a3 = (uint64_t)(v12 + 3);
  a3[1] = (uint64_t)v12;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 0;
}

void sub_20E8E59A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21015D41C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E8E59BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E59D0(uint64_t a1, unsigned __int8 *a2)
{
  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_20E8E9964(a1, (__int128 *)a2 + 5, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *a2, (uint64_t *)a2 + 8);
  return a1;
}

void sub_20E8E5A58(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8E5AE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 88);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void **sub_20E8E5B90(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 30);
        if (v5)
        {
          *((_QWORD *)v3 - 29) = v5;
          operator delete(v5);
        }
        v3 -= 248;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_20E8E5C00(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9AFC40;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 16);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v4 + 8) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = *(__n128 *)(a2 + 72);
  *((__n128 *)v4 + 6) = result;
  *((_QWORD *)v4 + 14) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

uint64_t sub_20E8E5C94(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_20E8E5D08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  for (; result != a2; a3 += 224)
  {
    v3 = *(_QWORD *)(result + 48);
    v4 = *(_QWORD *)(result + 56);
    v5 = *(_QWORD *)(result + 80);
    v6 = *(_QWORD *)(result + 88);
    v7 = *(_QWORD *)(result + 112);
    v8 = *(_QWORD *)(result + 120);
    v9 = *(_QWORD *)(result + 224);
    *(_QWORD *)a3 = *(_QWORD *)result;
    v10 = *(_OWORD *)(result + 64);
    v11 = *(_OWORD *)(result + 96);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(result + 32);
    *(_QWORD *)(a3 + 24) = v3;
    *(_OWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 56) = v11;
    *(_QWORD *)(a3 + 72) = v7;
    *(_QWORD *)(a3 + 80) = v4;
    *(_QWORD *)(a3 + 88) = v6;
    *(_QWORD *)(a3 + 96) = v8;
    *(_QWORD *)(a3 + 200) = 0x3FF0000000000000;
    result += 248;
    *(_BYTE *)(a3 + 208) = 0;
    *(_QWORD *)(a3 + 216) = v9;
  }
  return result;
}

uint64_t CV3DODTDetectAndEstimateScale(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, double a8)
{
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  char v25;
  _QWORD v26[12];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  result = CV3DODTDetectWithMetadata(a1, a2, a3, a6, a7, 0, a4, a5, a8, 0);
  if (!(_DWORD)result)
  {
    if (*a4)
    {
      v14 = 0;
      v27 = *(_OWORD *)a6;
      v15 = *(_QWORD *)(a6 + 16);
      v30 = *(_OWORD *)(a6 + 24);
      v16 = *(_QWORD *)(a6 + 40);
      v33 = *(_OWORD *)(a6 + 48);
      v17 = *a7;
      v18 = a7[1];
      v28 = v15;
      v29 = v17;
      v19 = *(_QWORD *)(a6 + 64);
      v31 = v16;
      v32 = v18;
      v20 = a7[2];
      v21 = (uint64_t **)(a1 + 6120);
      v22 = 208;
      v34 = v19;
      v35 = v20;
      do
      {
        v23 = (_BYTE *)(*a5 + v22);
        v26[0] = *((_QWORD *)v23 - 13);
        v26[1] = *((_QWORD *)v23 - 12);
        v26[2] = *((_QWORD *)v23 - 11);
        v26[4] = *((_QWORD *)v23 - 10);
        v26[5] = *((_QWORD *)v23 - 9);
        v26[6] = *((_QWORD *)v23 - 8);
        v26[8] = *((_QWORD *)v23 - 7);
        v26[9] = *((_QWORD *)v23 - 6);
        v26[10] = *((_QWORD *)v23 - 5);
        v26[3] = *((_QWORD *)v23 - 4);
        v26[7] = *((_QWORD *)v23 - 3);
        v26[11] = *((_QWORD *)v23 - 2);
        v25 = 0;
        v24 = sub_20E8E9D18(v21, *((_QWORD *)v23 - 26), (uint64_t *)v23 - 26);
        *((double *)v23 - 1) = sub_20EDE1DD0((uint64_t)(v24 + 5), (uint64_t)v26, (double *)&v27, &v25);
        *v23 = v25;
        ++v14;
        v22 += 224;
      }
      while (v14 < *a4);
    }
    return 0;
  }
  return result;
}

uint64_t CV3DODTSetMaximumTrackingTime(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  result = 0;
  *(_QWORD *)(a1 + 3768) = a2;
  return result;
}

uint64_t CV3DODTWaitForAllObjectsAddToFinish(uint64_t a1)
{
  if (!a1)
    return 3;
  sub_20EDF07B8(a1 + 3248);
  sub_20EDF07B8(a1 + 376);
  sub_20EDF07B8(a1 + 4056);
  sub_20EDF07B8(a1 + 1184);
  return 0;
}

uint64_t CV3DODTTrack(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, double a7)
{
  uint64_t v8[3];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v13 = 0u;
  v10 = 0u;
  v9 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v14 = 0;
  v15 = 0x3FF0000000000000;
  memset(v8, 0, sizeof(v8));
  return CV3DODTTrackInWorld(a1, a2, a3, (uint64_t)&v9, v8, a6, a4, a5, a7);
}

uint64_t CV3DODTTrackInWorld(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, uint64_t a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, double a9)
{
  uint64_t v18;
  const __CFDictionary *Value;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  void *v61;
  char *v62;
  void *v63;
  void *v64;
  char *i;
  void *v66;
  char *v67;
  char *j;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  uint64_t v83;
  void *__p;
  char *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  void *v92[2];
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  _QWORD v104[2];
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  _OWORD v112[4];
  uint64_t v113;
  _OWORD v114[4];
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;

  v117 = a6;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 733221044;
  kdebug_trace();
  if (a1)
  {
    v18 = 4;
    if (a8 && a2 && a3 && a7)
    {
      *a7 = 0;
      *a8 = 0;
      Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("CameraDescription"));
      if (Value
        && (v20 = CFDictionaryGetValue(Value, CFSTR("CameraIntrinsics")), sub_20E9D4A18(v20, (uint64_t)v114), v116))
      {
        if (sub_20EDB8AB0((__CVBuffer *)a2))
        {
          std::mutex::lock((std::mutex *)(a1 + 3256));
          v21 = *(_QWORD *)(a1 + 3336);
          std::mutex::unlock((std::mutex *)(a1 + 3256));
          if (v21
            || (std::mutex::lock((std::mutex *)(a1 + 4064)),
                v22 = *(_QWORD *)(a1 + 4144),
                std::mutex::unlock((std::mutex *)(a1 + 4064)),
                v22))
          {
            if (!v116)
              sub_20E866B34();
            v112[2] = v114[2];
            v112[3] = v114[3];
            v113 = v115;
            v112[0] = v114[0];
            v112[1] = v114[1];
            sub_21015D058(v104, a2, 1, 0);
            v23 = (std::__shared_weak_count *)operator new(0x30uLL);
            v23->__shared_owners_ = 0;
            v23->__shared_weak_owners_ = 0;
            v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA18420;
            v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1A9A0;
            v24 = v105;
            v23[1].__shared_owners_ = v104[1];
            v23[1].__shared_weak_owners_ = (uint64_t)v24;
            if (v24)
            {
              p_shared_owners = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(p_shared_owners);
              while (__stxr(v26 + 1, p_shared_owners));
              v27 = v105;
              v110 = &v23[1].__vftable;
              v111 = v23;
              v104[0] = &off_24CA1A9A0;
              if (v105)
              {
                v28 = (unint64_t *)&v105->__shared_owners_;
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
            }
            else
            {
              v110 = &v23[1].__vftable;
              v111 = v23;
            }
            if ((*(_QWORD *)(a1 + 136)
               || *(_QWORD *)(a1 + 144)
               || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 120)
               || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 128))
              && sub_20E8E57BC((_QWORD *)(a1 + 264), (uint64_t)v112, (uint64_t *)&v110))
            {
              v18 = 4;
            }
            else
            {
              sub_210107D4C((uint64_t *)&v110, 1, (uint64_t)&v94);
              sub_20E8E59D0((uint64_t)v104, (unsigned __int8 *)&v94);
              v30 = v103;
              if (v103)
              {
                v31 = (unint64_t *)&v103->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                  std::__shared_weak_count::__release_weak(v30);
                }
              }
              v33 = v102;
              if (v102)
              {
                v34 = (unint64_t *)&v102->__shared_owners_;
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              v94 = *(_OWORD *)a4;
              v36 = *(_QWORD *)(a4 + 16);
              v97 = *(_OWORD *)(a4 + 24);
              v37 = *(_QWORD *)(a4 + 40);
              v100 = *(_OWORD *)(a4 + 48);
              v38 = *a5;
              v39 = a5[1];
              v95 = v36;
              v96 = v38;
              v40 = *(_QWORD *)(a4 + 64);
              v98 = v37;
              v99 = v39;
              v41 = (std::__shared_weak_count *)a5[2];
              v101 = v40;
              v102 = v41;
              v92[0] = 0;
              v92[1] = 0;
              v93 = 0;
              v82 = 0uLL;
              v88 = 0;
              v89 = 0;
              LOBYTE(__p) = 0;
              v87 = 0;
              sub_20EDF3244(a1 + 3248, (uint64_t)v104, (uint64_t *)&v82, (uint64_t)v112, &v94, &v88, (uint64_t)&__p, a6, (uint64_t)&v90, a9);
              v42 = v89;
              *(_OWORD *)v92 = v90;
              v93 = v91;
              v91 = 0;
              v90 = 0uLL;
              if (v89)
              {
                v43 = (unint64_t *)&v89->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              v45 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
              if (*((_QWORD *)&v82 + 1))
              {
                v46 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              v90 = 0uLL;
              v91 = 0;
              v88 = 0;
              v89 = 0;
              v80 = 0;
              v81 = 0;
              LOBYTE(__p) = 0;
              v87 = 0;
              sub_20EDF3244(a1 + 4056, (uint64_t)v104, &v88, (uint64_t)v112, &v94, &v80, (uint64_t)&__p, a6, (uint64_t)&v82, a9);
              v48 = v81;
              v90 = v82;
              v91 = v83;
              v83 = 0;
              v82 = 0uLL;
              if (v81)
              {
                v49 = (unint64_t *)&v81->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = v89;
              if (v89)
              {
                v52 = (unint64_t *)&v89->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              __p = 0;
              v85 = 0;
              v86 = 0;
              sub_20E8E83E4((char **)&__p, 0, (uint64_t)v92[0], (uint64_t)v92[1], 0xEF7BDEF7BDEF7BDFLL * (((char *)v92[1] - (char *)v92[0]) >> 3));
              v54 = (char *)v90;
              sub_20E8E83E4((char **)&__p, (uint64_t)v85, v90, *((uint64_t *)&v90 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3));
              v55 = (char *)__p;
              v56 = (uint64_t)v85;
              if (__p == v85)
              {
                v18 = 0;
              }
              else
              {
                v57 = (v85 - (_BYTE *)__p) >> 3;
                v58 = 0xEF7BDEF7BDEF7BDFLL * v57;
                *a7 = 0xEF7BDEF7BDEF7BDFLL * v57;
                v59 = 0x8C6318C6318C6320 * v57;
                if (is_mul_ok(v58, 0xE0uLL))
                  v60 = v59;
                else
                  v60 = -1;
                v61 = operator new[](v60, MEMORY[0x24BEDB6B8]);
                *a8 = v61;
                if (v61)
                {
                  sub_20E8E6924((uint64_t)v55, v56, (uint64_t)v61);
                  v18 = 0;
                  v55 = (char *)__p;
                }
                else
                {
                  v18 = 2;
                }
              }
              if (v55)
              {
                v62 = v85;
                v63 = v55;
                if (v85 != v55)
                {
                  do
                  {
                    v64 = (void *)*((_QWORD *)v62 - 30);
                    if (v64)
                    {
                      *((_QWORD *)v62 - 29) = v64;
                      operator delete(v64);
                    }
                    v62 -= 248;
                  }
                  while (v62 != v55);
                  v63 = __p;
                }
                v85 = v55;
                operator delete(v63);
                v54 = (char *)v90;
              }
              if (v54)
              {
                for (i = (char *)*((_QWORD *)&v90 + 1); i != v54; i -= 248)
                {
                  v66 = (void *)*((_QWORD *)i - 30);
                  if (v66)
                  {
                    *((_QWORD *)i - 29) = v66;
                    operator delete(v66);
                  }
                }
                operator delete(v54);
              }
              v67 = (char *)v92[0];
              if (v92[0])
              {
                for (j = (char *)v92[1]; j != v67; j -= 248)
                {
                  v69 = (void *)*((_QWORD *)j - 30);
                  if (v69)
                  {
                    *((_QWORD *)j - 29) = v69;
                    operator delete(v69);
                  }
                }
                operator delete(v67);
              }
              v104[0] = &off_24C9AFD78;
              if (v108)
              {
                v109 = v108;
                operator delete(v108);
              }
              v70 = v107;
              if (v107)
              {
                v71 = (unint64_t *)&v107->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              v73 = v106;
              if (v106)
              {
                v74 = (unint64_t *)&v106->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
            }
            v76 = v111;
            if (v111)
            {
              v77 = (unint64_t *)&v111->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          else
          {
            v18 = 0;
          }
        }
        else
        {
          v18 = 6;
        }
      }
      else
      {
        v18 = 7;
      }
    }
  }
  else
  {
    v18 = 3;
  }
  kdebug_trace();
  return v18;
}

void sub_20E8E677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  sub_20E8E5B90(&a14);
  sub_20E8E5B90(&a21);
  sub_20E8E5B90(&a25);
  sub_20E8E481C(&a43);
  sub_20E86665C((uint64_t)&a61);
  sub_20E8E69C4(v61 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E6808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;

  sub_21015D41C(&a43);
  sub_20E8E69C4(v43 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E6824(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E6838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E684C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E6860(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20E8E6874(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t CV3DODTTrackWithUserContext(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  double v6;
  uint64_t v8[3];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(double *)(a1 + 360) + 0.0166666667;
  *(double *)(a1 + 360) = v6;
  v11 = 0;
  v13 = 0u;
  v10 = 0u;
  v9 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v14 = 0;
  v15 = 0x3FF0000000000000;
  memset(v8, 0, sizeof(v8));
  return CV3DODTTrackInWorld(a1, a2, a3, (uint64_t)&v9, v8, a6, a4, a5, v6);
}

uint64_t sub_20E8E6924(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  for (; result != a2; a3 += 224)
  {
    v3 = *(_QWORD *)(result + 112);
    v4 = *(_QWORD *)(result + 48);
    v5 = *(_QWORD *)(result + 56);
    v6 = *(_QWORD *)(result + 80);
    v7 = *(_QWORD *)(result + 88);
    v8 = *(_QWORD *)(result + 152);
    v9 = *(_QWORD *)(result + 176);
    v10 = *(_QWORD *)(result + 184);
    v11 = *(_QWORD *)(result + 208);
    v12 = *(_QWORD *)(result + 216);
    v13 = *(_QWORD *)(result + 224);
    *(_QWORD *)a3 = *(_QWORD *)result;
    v14 = *(_OWORD *)(result + 64);
    v15 = *(_OWORD *)(result + 96);
    v16 = *(_OWORD *)(result + 120);
    v17 = *(_OWORD *)(result + 136);
    v18 = *(_OWORD *)(result + 160);
    v19 = *(_OWORD *)(result + 192);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(result + 32);
    *(_QWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a3 + 48) = v6;
    *(_OWORD *)(a3 + 56) = v15;
    *(_QWORD *)(a3 + 72) = v3;
    *(_QWORD *)(a3 + 80) = v5;
    *(_QWORD *)(a3 + 88) = v7;
    *(_OWORD *)(a3 + 96) = v16;
    *(_OWORD *)(a3 + 112) = v17;
    *(_OWORD *)(a3 + 128) = v18;
    *(_QWORD *)(a3 + 144) = v9;
    *(_OWORD *)(a3 + 152) = v19;
    *(_QWORD *)(a3 + 168) = v11;
    *(_QWORD *)(a3 + 176) = v8;
    *(_QWORD *)(a3 + 184) = v10;
    *(_QWORD *)(a3 + 192) = v12;
    *(_QWORD *)(a3 + 200) = 0x3FF0000000000000;
    result += 248;
    *(_BYTE *)(a3 + 208) = 0;
    *(_QWORD *)(a3 + 216) = v13;
  }
  return result;
}

uint64_t sub_20E8E69C4(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t CV3DODTSetScaleEstimationMinimumObservations(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;

  v4 = a2;
  sub_20E8E9D18((uint64_t **)(a1 + 6120), a2, (uint64_t *)&v4)[9] = a3;
  return 0;
}

uint64_t CV3DODTTrackAndEstimateScale(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t a8, double a9)
{
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v40[0] = 0;
  v40[1] = 0u;
  *(_OWORD *)&v39[8] = 0u;
  *(_QWORD *)v39 = 0x3FF0000000000000;
  *((_QWORD *)&v40[0] + 1) = 0x3FF0000000000000;
  v41 = 0;
  *(_QWORD *)&v42 = 0x3FF0000000000000;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  result = CV3DODTTrackInWorld(a1, a2, a3, (uint64_t)v39, &v27, a8, a4, a5, a9);
  if (!(_DWORD)result)
  {
    if (*a4)
    {
      v15 = 0;
      *(_OWORD *)v39 = *(_OWORD *)a6;
      v16 = *(_QWORD *)(a6 + 16);
      *(_OWORD *)((char *)v40 + 8) = *(_OWORD *)(a6 + 24);
      v17 = *(_QWORD *)(a6 + 40);
      v42 = *(_OWORD *)(a6 + 48);
      v18 = *a7;
      v19 = a7[1];
      *(_QWORD *)&v39[16] = v16;
      *(_QWORD *)&v40[0] = v18;
      v20 = *(_QWORD *)(a6 + 64);
      *((_QWORD *)&v40[1] + 1) = v17;
      v41 = v19;
      v21 = a7[2];
      v22 = (uint64_t **)(a1 + 6120);
      v23 = 208;
      v43 = v20;
      v44 = v21;
      do
      {
        v24 = (_BYTE *)(*a5 + v23);
        v27 = *((_QWORD *)v24 - 13);
        v28 = *((_QWORD *)v24 - 12);
        v29 = *((_QWORD *)v24 - 11);
        v31 = *((_QWORD *)v24 - 10);
        v32 = *((_QWORD *)v24 - 9);
        v33 = *((_QWORD *)v24 - 8);
        v35 = *((_QWORD *)v24 - 7);
        v36 = *((_QWORD *)v24 - 6);
        v37 = *((_QWORD *)v24 - 5);
        v30 = *((_QWORD *)v24 - 4);
        v34 = *((_QWORD *)v24 - 3);
        v38 = *((_QWORD *)v24 - 2);
        v26 = 0;
        v25 = sub_20E8E9D18(v22, *((_QWORD *)v24 - 26), (uint64_t *)v24 - 26);
        *((double *)v24 - 1) = sub_20EDE1DD0((uint64_t)(v25 + 5), (uint64_t)&v27, (double *)v39, &v26);
        *v24 = v26;
        ++v15;
        v23 += 224;
      }
      while (v15 < *a4);
    }
    return 0;
  }
  return result;
}

uint64_t CV3DODTTrackAndEstimateScaleWithUserContext(uint64_t a1, std::__shared_weak_count_vtbl *a2, const __CFDictionary *a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  double v8;

  v8 = *(double *)(a1 + 360) + 0.0166666667;
  *(double *)(a1 + 360) = v8;
  return CV3DODTTrackAndEstimateScale(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

uint64_t CV3DODTImagePredict(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  _QWORD v5[3];
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v10 = 0u;
  v7 = 0u;
  v6 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v11 = 0;
  v12 = 0x3FF0000000000000;
  memset(v5, 0, sizeof(v5));
  return CV3DODTImagePredictInWorld(a1, (double *)&v6, (uint64_t)v5, a2, a3, a4);
}

uint64_t CV3DODTImagePredictInWorld(uint64_t a1, double *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, double a6)
{
  uint64_t v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  double v102;
  double *v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  _QWORD *v117;
  _QWORD *v118;
  void *__p;
  char *v120;
  void *v121;
  char *v122;
  char *v123;
  double v124[13];

  if (!a1)
    return 3;
  if (a6 <= 0.0 || a4 == 0 || a5 == 0)
    return 4;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[6];
  v19 = a2[7];
  v20 = a2[8];
  _D18 = *(_QWORD *)(a3 + 8);
  v22 = *(double *)(a3 + 16);
  v124[0] = *a2;
  v124[1] = v15;
  v124[4] = v13;
  v124[5] = v16;
  v124[8] = v14;
  v124[9] = v17;
  _V0.D[1] = v15;
  _V1.D[1] = v16;
  __asm { FMLA            D2, D18, V0.D[1] }
  v124[2] = v18;
  v124[3] = -(_D2 + v18 * v22);
  __asm { FMLA            D0, D18, V1.D[1] }
  v124[6] = v19;
  v124[7] = -(_D0 + v19 * v22);
  _V0.D[1] = v17;
  __asm { FMLA            D1, D18, V0.D[1] }
  v124[10] = v20;
  v124[11] = -(_D1 + v20 * v22);
  sub_20EDF5478(a1 + 376, v124, &v121, *(unint64_t *)&a6);
  sub_20EDF5478(a1 + 3248, v124, &__p, *(unint64_t *)&a6);
  v117 = a4;
  v118 = a5;
  v31 = (char *)__p;
  v32 = v120;
  if (__p == v120)
  {
    v33 = v122;
  }
  else
  {
    v33 = v122;
    do
    {
      if (v33 < v123)
      {
        *(_QWORD *)v33 = *(_QWORD *)v31;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *(_OWORD *)(v33 + 8) = *(_OWORD *)(v31 + 8);
        *((_QWORD *)v33 + 3) = *((_QWORD *)v31 + 3);
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = 0;
        *((_QWORD *)v31 + 1) = 0;
        v34 = *((_OWORD *)v31 + 7);
        v36 = *((_OWORD *)v31 + 4);
        v35 = *((_OWORD *)v31 + 5);
        *((_OWORD *)v33 + 6) = *((_OWORD *)v31 + 6);
        *((_OWORD *)v33 + 7) = v34;
        *((_OWORD *)v33 + 4) = v36;
        *((_OWORD *)v33 + 5) = v35;
        v37 = *((_OWORD *)v31 + 11);
        v39 = *((_OWORD *)v31 + 8);
        v38 = *((_OWORD *)v31 + 9);
        *((_OWORD *)v33 + 10) = *((_OWORD *)v31 + 10);
        *((_OWORD *)v33 + 11) = v37;
        *((_OWORD *)v33 + 8) = v39;
        *((_OWORD *)v33 + 9) = v38;
        v41 = *((_OWORD *)v31 + 13);
        v40 = *((_OWORD *)v31 + 14);
        v42 = *((_OWORD *)v31 + 12);
        *((_QWORD *)v33 + 30) = *((_QWORD *)v31 + 30);
        *((_OWORD *)v33 + 13) = v41;
        *((_OWORD *)v33 + 14) = v40;
        *((_OWORD *)v33 + 12) = v42;
        v43 = *((_OWORD *)v31 + 3);
        *((_OWORD *)v33 + 2) = *((_OWORD *)v31 + 2);
        *((_OWORD *)v33 + 3) = v43;
        v33 += 248;
      }
      else
      {
        v44 = (char *)v121;
        v45 = 0xEF7BDEF7BDEF7BDFLL * ((v33 - (_BYTE *)v121) >> 3);
        v46 = v45 + 1;
        if (v45 + 1 > 0x108421084210842)
          sub_20E8E8A64();
        if (0xDEF7BDEF7BDEF7BELL * ((v123 - (_BYTE *)v121) >> 3) > v46)
          v46 = 0xDEF7BDEF7BDEF7BELL * ((v123 - (_BYTE *)v121) >> 3);
        if (0xEF7BDEF7BDEF7BDFLL * ((v123 - (_BYTE *)v121) >> 3) >= 0x84210842108421)
          v47 = 0x108421084210842;
        else
          v47 = v46;
        if (v47)
        {
          if (v47 > 0x108421084210842)
            sub_20E877A38();
          v48 = (char *)operator new(248 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[248 * v45];
        v50 = &v48[248 * v47];
        *(_QWORD *)v49 = *(_QWORD *)v31;
        *((_QWORD *)v49 + 2) = 0;
        *((_QWORD *)v49 + 3) = 0;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)(v31 + 8);
        *((_QWORD *)v49 + 3) = *((_QWORD *)v31 + 3);
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = 0;
        *((_QWORD *)v31 + 1) = 0;
        v51 = *((_OWORD *)v31 + 7);
        v53 = *((_OWORD *)v31 + 4);
        v52 = *((_OWORD *)v31 + 5);
        *((_OWORD *)v49 + 6) = *((_OWORD *)v31 + 6);
        *((_OWORD *)v49 + 7) = v51;
        *((_OWORD *)v49 + 4) = v53;
        *((_OWORD *)v49 + 5) = v52;
        v54 = *((_OWORD *)v31 + 11);
        v56 = *((_OWORD *)v31 + 8);
        v55 = *((_OWORD *)v31 + 9);
        *((_OWORD *)v49 + 10) = *((_OWORD *)v31 + 10);
        *((_OWORD *)v49 + 11) = v54;
        *((_OWORD *)v49 + 8) = v56;
        *((_OWORD *)v49 + 9) = v55;
        v58 = *((_OWORD *)v31 + 13);
        v57 = *((_OWORD *)v31 + 14);
        v59 = *((_OWORD *)v31 + 12);
        *((_QWORD *)v49 + 30) = *((_QWORD *)v31 + 30);
        *((_OWORD *)v49 + 13) = v58;
        *((_OWORD *)v49 + 14) = v57;
        *((_OWORD *)v49 + 12) = v59;
        v60 = *((_OWORD *)v31 + 3);
        *((_OWORD *)v49 + 2) = *((_OWORD *)v31 + 2);
        *((_OWORD *)v49 + 3) = v60;
        v33 = v49 + 248;
        v61 = v122;
        if (v122 == v44)
        {
          v121 = v49;
          v122 = v49 + 248;
          v123 = &v48[248 * v47];
        }
        else
        {
          v62 = 0;
          do
          {
            v63 = &v61[v62];
            v64 = &v49[v62];
            *((_QWORD *)v64 - 31) = *(_QWORD *)&v61[v62 - 248];
            *((_QWORD *)v64 - 29) = 0;
            *((_QWORD *)v64 - 28) = 0;
            *((_OWORD *)v64 - 15) = *(_OWORD *)&v61[v62 - 240];
            *((_QWORD *)v64 - 28) = *(_QWORD *)&v61[v62 - 224];
            *((_QWORD *)v63 - 29) = 0;
            *((_QWORD *)v63 - 28) = 0;
            *((_QWORD *)v63 - 30) = 0;
            v65 = *(_OWORD *)&v61[v62 - 168];
            v66 = *(_OWORD *)&v61[v62 - 152];
            v67 = *(_OWORD *)&v61[v62 - 136];
            *(_OWORD *)(v64 - 184) = *(_OWORD *)&v61[v62 - 184];
            *(_OWORD *)(v64 - 136) = v67;
            *(_OWORD *)(v64 - 152) = v66;
            *(_OWORD *)(v64 - 168) = v65;
            v68 = *(_OWORD *)&v61[v62 - 104];
            v69 = *(_OWORD *)&v61[v62 - 88];
            v70 = *(_OWORD *)&v61[v62 - 72];
            *(_OWORD *)(v64 - 120) = *(_OWORD *)&v61[v62 - 120];
            *(_OWORD *)(v64 - 72) = v70;
            *(_OWORD *)(v64 - 88) = v69;
            *(_OWORD *)(v64 - 104) = v68;
            v71 = *(_OWORD *)&v61[v62 - 40];
            v72 = *(_OWORD *)&v61[v62 - 24];
            v73 = *(_QWORD *)&v61[v62 - 8];
            *(_OWORD *)(v64 - 56) = *(_OWORD *)&v61[v62 - 56];
            *((_QWORD *)v64 - 1) = v73;
            *(_OWORD *)(v64 - 24) = v72;
            *(_OWORD *)(v64 - 40) = v71;
            v74 = *(_OWORD *)&v61[v62 - 216];
            *(_OWORD *)(v64 - 200) = *(_OWORD *)&v61[v62 - 200];
            *(_OWORD *)(v64 - 216) = v74;
            v62 -= 248;
          }
          while (&v61[v62] != v44);
          v44 = (char *)v121;
          v75 = v122;
          v121 = &v49[v62];
          v122 = v49 + 248;
          v123 = v50;
          while (v75 != v44)
          {
            v76 = (void *)*((_QWORD *)v75 - 30);
            if (v76)
            {
              *((_QWORD *)v75 - 29) = v76;
              operator delete(v76);
            }
            v75 -= 248;
          }
        }
        if (v44)
          operator delete(v44);
      }
      v122 = v33;
      v31 += 248;
    }
    while (v31 != v32);
  }
  v77 = (char *)v121;
  if (v121 != v33)
  {
    v78 = (v33 - (_BYTE *)v121) >> 3;
    v79 = 0xEF7BDEF7BDEF7BDFLL * v78;
    *v117 = 0xEF7BDEF7BDEF7BDFLL * v78;
    v80 = 0x8C6318C6318C6320 * v78;
    if (is_mul_ok(v79, 0xE0uLL))
      v81 = v80;
    else
      v81 = -1;
    v82 = (char *)operator new[](v81, MEMORY[0x24BEDB6B8]);
    *v118 = v82;
    if (!v82)
    {
      v11 = 2;
      v108 = (char *)__p;
      if (!__p)
        goto LABEL_69;
LABEL_62:
      v109 = v120;
      v110 = v108;
      if (v120 != v108)
      {
        do
        {
          v111 = (void *)*((_QWORD *)v109 - 30);
          if (v111)
          {
            *((_QWORD *)v109 - 29) = v111;
            operator delete(v111);
          }
          v109 -= 248;
        }
        while (v109 != v108);
        v110 = __p;
      }
      v120 = v108;
      operator delete(v110);
      goto LABEL_69;
    }
    v83 = *(_QWORD **)(a1 + 6128);
    do
    {
      v101 = *(_QWORD *)v77;
      v102 = 1.0;
      if (v83)
      {
        v103 = (double *)(a1 + 6128);
        v104 = v83;
        do
        {
          v105 = v104[4];
          _CF = v105 >= v101;
          if (v105 >= v101)
            v107 = v104;
          else
            v107 = v104 + 1;
          if (_CF)
            v103 = (double *)v104;
          v104 = (_QWORD *)*v107;
        }
        while (*v107);
        if (v103 != (double *)(a1 + 6128) && v101 >= *((_QWORD *)v103 + 4) && *((_BYTE *)v103 + 720))
          v102 = v103[89];
      }
      v84 = *((_QWORD *)v77 + 14);
      v85 = *((_QWORD *)v77 + 6);
      v86 = *((_QWORD *)v77 + 7);
      v87 = *((_QWORD *)v77 + 10);
      v88 = *((_QWORD *)v77 + 11);
      v89 = *((_QWORD *)v77 + 19);
      v90 = *((_QWORD *)v77 + 22);
      v91 = *((_QWORD *)v77 + 23);
      v92 = *((_QWORD *)v77 + 26);
      v93 = *((_QWORD *)v77 + 27);
      v94 = *((_QWORD *)v77 + 28);
      *(_QWORD *)v82 = v101;
      v95 = *((_OWORD *)v77 + 4);
      v96 = *((_OWORD *)v77 + 6);
      v97 = *(_OWORD *)(v77 + 120);
      v98 = *(_OWORD *)(v77 + 136);
      v99 = *((_OWORD *)v77 + 10);
      v100 = *((_OWORD *)v77 + 12);
      *(_OWORD *)(v82 + 8) = *((_OWORD *)v77 + 2);
      *((_QWORD *)v82 + 3) = v85;
      *((_OWORD *)v82 + 2) = v95;
      *((_QWORD *)v82 + 6) = v87;
      *(_OWORD *)(v82 + 56) = v96;
      *((_QWORD *)v82 + 9) = v84;
      *((_QWORD *)v82 + 10) = v86;
      *((_QWORD *)v82 + 11) = v88;
      *((_OWORD *)v82 + 6) = v97;
      *((_OWORD *)v82 + 7) = v98;
      *((_OWORD *)v82 + 8) = v99;
      *((_QWORD *)v82 + 18) = v90;
      *(_OWORD *)(v82 + 152) = v100;
      *((_QWORD *)v82 + 21) = v92;
      *((_QWORD *)v82 + 22) = v89;
      *((_QWORD *)v82 + 23) = v91;
      *((_QWORD *)v82 + 24) = v93;
      *((double *)v82 + 25) = v102;
      v77 += 248;
      v82[208] = 0;
      *((_QWORD *)v82 + 27) = v94;
      v82 += 224;
    }
    while (v77 != v33);
  }
  v11 = 0;
  v108 = (char *)__p;
  if (__p)
    goto LABEL_62;
LABEL_69:
  v112 = (char *)v121;
  if (v121)
  {
    v113 = v122;
    v114 = v121;
    if (v122 != v121)
    {
      do
      {
        v115 = (void *)*((_QWORD *)v113 - 30);
        if (v115)
        {
          *((_QWORD *)v113 - 29) = v115;
          operator delete(v115);
        }
        v113 -= 248;
      }
      while (v113 != v112);
      v114 = v121;
    }
    v122 = v112;
    operator delete(v114);
  }
  return v11;
}

void sub_20E8E725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E8E5B90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E8E7270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E8E5B90((void **)va);
  sub_20E8E5B90((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E7290(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 56))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
LABEL_7:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_20E8E730C(uint64_t a1, void *key, unsigned __int8 *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  CFTypeID TypeID;
  int v13;
  void *value;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_14:
      v13 = *a3;
      return v13 != 0;
    }
  }
  if (!v7)
    goto LABEL_14;
LABEL_7:
  value = 0;
  if (!key)
    goto LABEL_14;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, key, (const void **)&value))
    goto LABEL_14;
  v11 = value;
  if (!value)
    goto LABEL_14;
  TypeID = CFBooleanGetTypeID();
  if (CFGetTypeID(v11) != TypeID)
    goto LABEL_14;
  LOWORD(v13) = (CFBooleanGetValue((CFBooleanRef)v11) != 0) | 0x100;
  if ((unsigned __int16)v13 <= 0xFFu)
    goto LABEL_14;
  v13 = v13;
  return v13 != 0;
}

uint64_t sub_20E8E742C(uint64_t a1, void *key)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  CFTypeID TypeID;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  const __CFNumber *v17;
  uint64_t valuePtr;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_13:
      v14 = 0;
      v13 = 0;
      LOBYTE(v15) = 0;
      return v13 & 0x100000000 | v14 & 0xFFFFFF00 | v15;
    }
  }
  if (!v5)
    goto LABEL_13;
LABEL_7:
  v17 = 0;
  if (!key || !CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, key, (const void **)&v17))
    goto LABEL_13;
  v9 = v17;
  if (v17 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v9) == TypeID))
  {
    valuePtr = 0;
    CFNumberGetValue(v9, kCFNumberNSIntegerType, &valuePtr);
    v11 = valuePtr & 0xFFFFFF00;
    v12 = valuePtr;
    v13 = 0x100000000;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v11 = 0;
  }
  v15 = v12 | v11 | v13;
  v14 = v15 & 0xFFFFFF00;
  return v13 & 0x100000000 | v14 & 0xFFFFFF00 | v15;
}

uint64_t sub_20E8E7544(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const __CFNumber *v11;
  CFTypeID TypeID;
  const __CFNumber *v14;
  uint64_t valuePtr;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return *(_QWORD *)a3;
  }
  else
  {
LABEL_6:
    if (!v7)
      return *(_QWORD *)a3;
  }
  v14 = 0;
  if (key)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, key, (const void **)&v14))
    {
      v11 = v14;
      if (v14)
      {
        TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v11) == TypeID)
        {
          valuePtr = 0;
          CFNumberGetValue(v11, kCFNumberNSIntegerType, &valuePtr);
          return valuePtr;
        }
      }
    }
  }
  return *(_QWORD *)a3;
}

void sub_20E8E7640(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC00))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5ABF8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC00);
  }
  *a1 = qword_254A5ABF8;
}

void sub_20E8E76DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC00);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E7734(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9E9D90;
  v2 = a1[100];
  a1[100] = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 136);
      v5 = *(void **)(v2 + 128);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 136);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 128);
      }
      *(_QWORD *)(v2 + 136) = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40917B7221);
  }
  return sub_20EDF00D0((uint64_t)a1);
}

uint64_t sub_20E8E77D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)(a1 + 64) = &off_24CA1A9A0;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 56))();
  return a1;
}

void sub_20E8E7864(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    sub_20E8E7864(*a1);
    sub_20E8E7864(a1[1]);
    v2 = (void *)a1[86];
    if (v2)
    {
      a1[87] = v2;
      operator delete(v2);
    }
    v3 = (void *)a1[83];
    if (v3)
    {
      a1[84] = v3;
      operator delete(v3);
    }
    v4 = (void *)a1[80];
    if (v4)
    {
      a1[81] = v4;
      operator delete(v4);
    }
    v5 = (void *)a1[74];
    if (v5)
    {
      a1[75] = v5;
      operator delete(v5);
    }
    v6 = (void *)a1[68];
    if (v6)
    {
      a1[69] = v6;
      operator delete(v6);
    }
    operator delete(a1);
  }
}

uint64_t sub_20E8E78EC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  uint64_t *v24;
  void **v25;

  *(_QWORD *)a1 = &off_24C9E9D48;
  if (*(_BYTE *)(a1 + 2056))
  {
    v2 = *(_QWORD *)(a1 + 2040);
    *(_QWORD *)(a1 + 2040) = 0;
    if (v2)
      (*(void (**)(void))(a1 + 2048))();
  }
  if (*(_BYTE *)(a1 + 2032))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 2024);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 1992);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 2000);
    v8 = *(void **)(a1 + 1992);
    if (v7 != v6)
    {
      v9 = *(_QWORD *)(a1 + 2000);
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = *(void **)(a1 + 1992);
    }
    *(_QWORD *)(a1 + 2000) = v6;
    operator delete(v8);
  }
  if (*(_QWORD *)(a1 + 1984))
  {
    v12 = *(uint64_t **)(a1 + 1976);
    v13 = *(_QWORD *)(a1 + 1968);
    v14 = *v12;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    *(_QWORD *)(a1 + 1984) = 0;
    if (v12 != (uint64_t *)(a1 + 1968))
    {
      do
      {
        v24 = (uint64_t *)v12[1];
        v23 = (void *)v12[2];
        if (v23)
        {
          v12[3] = (uint64_t)v23;
          operator delete(v23);
        }
        operator delete(v12);
        v12 = v24;
      }
      while (v24 != (uint64_t *)(a1 + 1968));
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 1960);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(void **)(a1 + 1928);
  if (v18)
  {
    *(_QWORD *)(a1 + 1936) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 1904);
  if (v19)
  {
    *(_QWORD *)(a1 + 1912) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1880);
  if (v20)
  {
    *(_QWORD *)(a1 + 1888) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 1856);
  if (v21)
  {
    *(_QWORD *)(a1 + 1864) = v21;
    operator delete(v21);
  }
  v25 = (void **)(a1 + 1832);
  sub_20E8E7AD8(&v25);
  sub_20E8E7B98(a1 + 952);
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  return sub_20EDF00D0(a1);
}

void sub_20E8E7AD8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          *((_QWORD *)v4 - 3) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 11);
        if (v7)
        {
          *((_QWORD *)v4 - 10) = v7;
          operator delete(v7);
        }
        v8 = (void *)*((_QWORD *)v4 - 14);
        if (v8)
        {
          *((_QWORD *)v4 - 13) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v4 - 17);
        if (v9)
        {
          *((_QWORD *)v4 - 16) = v9;
          operator delete(v9);
        }
        v4 -= 192;
      }
      while (v4 != v2);
      v10 = **a1;
      v1[1] = v2;
      operator delete(v10);
    }
  }
}

_QWORD *sub_20E8E7B98(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;

  *(_QWORD *)a1 = &off_24C9AFC90;
  v2 = *(void **)(a1 + 856);
  if (v2)
  {
    *(_QWORD *)(a1 + 864) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 832);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 840);
    v5 = *(void **)(a1 + 832);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 840);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 832);
    }
    *(_QWORD *)(a1 + 840) = v3;
    operator delete(v5);
  }
  v9 = *(_QWORD *)(a1 + 808);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 816);
    v11 = *(void **)(a1 + 808);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 816);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 808);
    }
    *(_QWORD *)(a1 + 816) = v9;
    operator delete(v11);
  }
  v15 = *(_QWORD *)(a1 + 784);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 792);
    v17 = *(void **)(a1 + 784);
    if (v16 != v15)
    {
      v18 = *(_QWORD *)(a1 + 792);
      do
      {
        v20 = *(void **)(v18 - 24);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *(_QWORD *)(v16 - 16) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *(void **)(a1 + 784);
    }
    *(_QWORD *)(a1 + 792) = v15;
    operator delete(v17);
  }
  sub_20E8E7EB0(a1 + 616);
  if (*(_BYTE *)(a1 + 608))
    sub_20FD40A18((_QWORD *)(a1 + 280));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  return sub_20E8E7CFC((_QWORD *)a1);
}

_QWORD *sub_20E8E7CFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;

  *a1 = off_24C9AFD30;
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = a1[11];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v8 = a1[7];
  if (v8)
  {
    v9 = a1[8];
    v10 = (void *)a1[7];
    if (v9 != v8)
    {
      do
      {
        if (*(_BYTE *)(v9 - 8))
        {
          v11 = *(void **)(v9 - 32);
          if (v11)
          {
            *(_QWORD *)(v9 - 24) = v11;
            operator delete(v11);
          }
        }
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = (void *)a1[7];
    }
    a1[8] = v8;
    operator delete(v10);
  }
  v12 = a1[4];
  if (v12)
  {
    v13 = a1[5];
    v14 = (void *)a1[4];
    if (v13 != v12)
    {
      v15 = a1[5];
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = (void *)a1[4];
    }
    a1[5] = v12;
    operator delete(v14);
  }
  v18 = a1[1];
  if (v18)
  {
    v19 = a1[2];
    v20 = (void *)a1[1];
    if (v19 != v18)
    {
      v21 = a1[2];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[1];
    }
    a1[2] = v18;
    operator delete(v20);
  }
  return a1;
}

void sub_20E8E7E64(uint64_t a1)
{
  sub_20E8E7B98(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E8E7E88(uint64_t a1)
{
  __n128 result;
  uint64_t v2;

  result = *(__n128 *)(a1 + 832);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a1 + 808);
  *(__n128 *)(a1 + 808) = result;
  v2 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = v2;
  return result;
}

uint64_t sub_20E8E7EB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(_QWORD *)(a1 + 144) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(_QWORD *)(a1 + 88) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

void sub_20E8E7F30(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E8E82C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8E82E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8E82F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E8E831C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9AFD78;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

void sub_20E8E83E4(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  char *v58;
  void *v59;
  void **v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  void *v113;
  uint64_t v114;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (unint64_t)a1[1];
  v10 = (a2 - (uint64_t)*a1) / 248;
  v11 = (uint64_t)&(*a1)[248 * v10];
  v12 = a1[2];
  if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v12[-v8] >> 3)) < a5)
  {
    v13 = a5 - 0x1084210842108421 * ((uint64_t)(v8 - (_QWORD)v9) >> 3);
    if (v13 > 0x108421084210842)
      sub_20E8E8A64();
    v14 = 0xEF7BDEF7BDEF7BDFLL * ((v12 - v9) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x84210842108421)
      v15 = 0x108421084210842;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x108421084210842)
        sub_20E877A38();
      v16 = (char *)operator new(248 * v15);
    }
    else
    {
      v16 = 0;
    }
    v73 = &v16[248 * v10];
    v74 = &v73[248 * a5];
    v75 = v73;
    do
    {
      *(_QWORD *)v75 = *(_QWORD *)v6;
      *((_QWORD *)v75 + 2) = 0;
      *((_QWORD *)v75 + 3) = 0;
      *(_OWORD *)(v75 + 8) = *(_OWORD *)(v6 + 8);
      *((_QWORD *)v75 + 3) = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v76 = *(_OWORD *)(v6 + 112);
      v78 = *(_OWORD *)(v6 + 64);
      v77 = *(_OWORD *)(v6 + 80);
      *((_OWORD *)v75 + 6) = *(_OWORD *)(v6 + 96);
      *((_OWORD *)v75 + 7) = v76;
      *((_OWORD *)v75 + 4) = v78;
      *((_OWORD *)v75 + 5) = v77;
      v79 = *(_OWORD *)(v6 + 176);
      v81 = *(_OWORD *)(v6 + 128);
      v80 = *(_OWORD *)(v6 + 144);
      *((_OWORD *)v75 + 10) = *(_OWORD *)(v6 + 160);
      *((_OWORD *)v75 + 11) = v79;
      *((_OWORD *)v75 + 8) = v81;
      *((_OWORD *)v75 + 9) = v80;
      v83 = *(_OWORD *)(v6 + 208);
      v82 = *(_OWORD *)(v6 + 224);
      v84 = *(_OWORD *)(v6 + 192);
      *((_QWORD *)v75 + 30) = *(_QWORD *)(v6 + 240);
      *((_OWORD *)v75 + 13) = v83;
      *((_OWORD *)v75 + 14) = v82;
      *((_OWORD *)v75 + 12) = v84;
      v85 = *(_OWORD *)(v6 + 48);
      *((_OWORD *)v75 + 2) = *(_OWORD *)(v6 + 32);
      *((_OWORD *)v75 + 3) = v85;
      v75 += 248;
      v6 += 248;
    }
    while (v75 != v74);
    v86 = *a1;
    if (*a1 != (char *)v11)
    {
      v87 = 248 * v10;
      v88 = v16;
      do
      {
        v89 = &v88[v87];
        v90 = &v9[v87];
        *((_QWORD *)v89 - 31) = *(_QWORD *)&v9[v87 - 248];
        *((_OWORD *)v89 - 15) = *(_OWORD *)&v9[v87 - 240];
        *((_QWORD *)v89 - 28) = *(_QWORD *)&v9[v87 - 224];
        *((_QWORD *)v90 - 29) = 0;
        *((_QWORD *)v90 - 28) = 0;
        *((_QWORD *)v90 - 30) = 0;
        v91 = *(_OWORD *)&v9[v87 - 168];
        v92 = *(_OWORD *)&v9[v87 - 152];
        v93 = *(_OWORD *)&v9[v87 - 136];
        *(_OWORD *)(v89 - 184) = *(_OWORD *)&v9[v87 - 184];
        *(_OWORD *)(v89 - 136) = v93;
        *(_OWORD *)(v89 - 152) = v92;
        *(_OWORD *)(v89 - 168) = v91;
        v94 = *(_OWORD *)&v9[v87 - 104];
        v95 = *(_OWORD *)&v9[v87 - 88];
        v96 = *(_OWORD *)&v9[v87 - 72];
        *(_OWORD *)(v89 - 120) = *(_OWORD *)&v9[v87 - 120];
        *(_OWORD *)(v89 - 72) = v96;
        *(_OWORD *)(v89 - 88) = v95;
        *(_OWORD *)(v89 - 104) = v94;
        v97 = *(_OWORD *)&v9[v87 - 40];
        v98 = *(_OWORD *)&v9[v87 - 24];
        v99 = *(_QWORD *)&v9[v87 - 8];
        *(_OWORD *)(v89 - 56) = *(_OWORD *)&v9[v87 - 56];
        *((_QWORD *)v89 - 1) = v99;
        *(_OWORD *)(v89 - 24) = v98;
        *(_OWORD *)(v89 - 40) = v97;
        v100 = *(_OWORD *)&v9[v87 - 216];
        *(_OWORD *)(v89 - 200) = *(_OWORD *)&v9[v87 - 200];
        *(_OWORD *)(v89 - 216) = v100;
        v88 -= 248;
        v9 -= 248;
      }
      while (&v9[v87] != v86);
      v73 = &v88[248 * v10];
    }
    v101 = a1[1];
    if (v101 != (char *)v11)
    {
      do
      {
        *(_QWORD *)v74 = *(_QWORD *)v11;
        *(_OWORD *)(v74 + 8) = *(_OWORD *)(v11 + 8);
        *((_QWORD *)v74 + 3) = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v102 = *(_OWORD *)(v11 + 112);
        v104 = *(_OWORD *)(v11 + 64);
        v103 = *(_OWORD *)(v11 + 80);
        *((_OWORD *)v74 + 6) = *(_OWORD *)(v11 + 96);
        *((_OWORD *)v74 + 7) = v102;
        *((_OWORD *)v74 + 4) = v104;
        *((_OWORD *)v74 + 5) = v103;
        v105 = *(_OWORD *)(v11 + 176);
        v107 = *(_OWORD *)(v11 + 128);
        v106 = *(_OWORD *)(v11 + 144);
        *((_OWORD *)v74 + 10) = *(_OWORD *)(v11 + 160);
        *((_OWORD *)v74 + 11) = v105;
        *((_OWORD *)v74 + 8) = v107;
        *((_OWORD *)v74 + 9) = v106;
        v109 = *(_OWORD *)(v11 + 208);
        v108 = *(_OWORD *)(v11 + 224);
        v110 = *(_OWORD *)(v11 + 192);
        *((_QWORD *)v74 + 30) = *(_QWORD *)(v11 + 240);
        *((_OWORD *)v74 + 13) = v109;
        *((_OWORD *)v74 + 14) = v108;
        *((_OWORD *)v74 + 12) = v110;
        v111 = *(_OWORD *)(v11 + 48);
        *((_OWORD *)v74 + 2) = *(_OWORD *)(v11 + 32);
        *((_OWORD *)v74 + 3) = v111;
        v74 += 248;
        v11 += 248;
      }
      while ((char *)v11 != v101);
      v11 = (uint64_t)a1[1];
    }
    v112 = *a1;
    *a1 = v73;
    a1[1] = v74;
    a1[2] = &v16[248 * v15];
    while ((char *)v11 != v112)
    {
      v113 = *(void **)(v11 - 240);
      if (v113)
      {
        *(_QWORD *)(v11 - 232) = v113;
        operator delete(v113);
      }
      v11 -= 248;
    }
    if (v112)
      operator delete(v112);
    return;
  }
  v114 = (a2 - (uint64_t)*a1) / 248;
  if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v8 - v11) >> 3)) >= a5)
  {
    v17 = a3 + 248 * a5;
    v18 = a1[1];
LABEL_19:
    v31 = v11 + 248 * a5;
    v32 = (unint64_t)&v18[-248 * a5];
    v33 = v18;
    if (v32 < v8)
    {
      v33 = v18;
      do
      {
        *(_QWORD *)v33 = *(_QWORD *)v32;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *(_OWORD *)(v33 + 8) = *(_OWORD *)(v32 + 8);
        *((_QWORD *)v33 + 3) = *(_QWORD *)(v32 + 24);
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 8) = 0;
        v34 = *(_OWORD *)(v32 + 112);
        v36 = *(_OWORD *)(v32 + 64);
        v35 = *(_OWORD *)(v32 + 80);
        *((_OWORD *)v33 + 6) = *(_OWORD *)(v32 + 96);
        *((_OWORD *)v33 + 7) = v34;
        *((_OWORD *)v33 + 4) = v36;
        *((_OWORD *)v33 + 5) = v35;
        v37 = *(_OWORD *)(v32 + 176);
        v39 = *(_OWORD *)(v32 + 128);
        v38 = *(_OWORD *)(v32 + 144);
        *((_OWORD *)v33 + 10) = *(_OWORD *)(v32 + 160);
        *((_OWORD *)v33 + 11) = v37;
        *((_OWORD *)v33 + 8) = v39;
        *((_OWORD *)v33 + 9) = v38;
        v41 = *(_OWORD *)(v32 + 208);
        v40 = *(_OWORD *)(v32 + 224);
        v42 = *(_OWORD *)(v32 + 192);
        *((_QWORD *)v33 + 30) = *(_QWORD *)(v32 + 240);
        *((_OWORD *)v33 + 13) = v41;
        *((_OWORD *)v33 + 14) = v40;
        *((_OWORD *)v33 + 12) = v42;
        v43 = *(_OWORD *)(v32 + 48);
        *((_OWORD *)v33 + 2) = *(_OWORD *)(v32 + 32);
        *((_OWORD *)v33 + 3) = v43;
        v33 += 248;
        v32 += 248;
      }
      while (v32 < v8);
    }
    a1[1] = v33;
    if (v18 != (char *)v31)
    {
      v44 = 0;
      v45 = &v9[248 * v114 + 8 * ((uint64_t)&v18[-v31] >> 3)];
      v46 = -8 * ((uint64_t)&v18[-v31] >> 3);
      do
      {
        v57 = &v45[v44];
        v58 = &v18[v44];
        v60 = (void **)&v18[v44 - 240];
        v59 = *v60;
        *(_QWORD *)&v18[v44 - 248] = *(_QWORD *)&v45[v44 - 248];
        if (v59)
        {
          *((_QWORD *)v58 - 29) = v59;
          operator delete(v59);
          *v60 = 0;
          *(_QWORD *)&v18[v44 - 232] = 0;
          *(_QWORD *)&v18[v44 - 224] = 0;
        }
        *(_OWORD *)v60 = *((_OWORD *)v57 - 15);
        *((_QWORD *)v58 - 28) = *((_QWORD *)v57 - 28);
        *((_QWORD *)v57 - 29) = 0;
        *((_QWORD *)v57 - 28) = 0;
        *((_QWORD *)v57 - 30) = 0;
        v47 = *(_OWORD *)(v57 - 168);
        v48 = *(_OWORD *)(v57 - 152);
        v49 = *(_OWORD *)(v57 - 136);
        *(_OWORD *)(v58 - 184) = *(_OWORD *)(v57 - 184);
        *(_OWORD *)(v58 - 136) = v49;
        *(_OWORD *)(v58 - 152) = v48;
        *(_OWORD *)(v58 - 168) = v47;
        v50 = *(_OWORD *)(v57 - 104);
        v51 = *(_OWORD *)(v57 - 88);
        v52 = *(_OWORD *)(v57 - 72);
        *(_OWORD *)(v58 - 120) = *(_OWORD *)(v57 - 120);
        *(_OWORD *)(v58 - 72) = v52;
        *(_OWORD *)(v58 - 88) = v51;
        *(_OWORD *)(v58 - 104) = v50;
        v53 = *(_OWORD *)(v57 - 40);
        v54 = *(_OWORD *)(v57 - 24);
        v55 = *((_QWORD *)v57 - 1);
        *(_OWORD *)(v58 - 56) = *(_OWORD *)(v57 - 56);
        *((_QWORD *)v58 - 1) = v55;
        *(_OWORD *)(v58 - 24) = v54;
        *(_OWORD *)(v58 - 40) = v53;
        v56 = *(_OWORD *)(v57 - 216);
        *(_OWORD *)(v58 - 200) = *(_OWORD *)(v57 - 200);
        *(_OWORD *)(v58 - 216) = v56;
        v44 -= 248;
      }
      while (v46 != v44);
    }
    if (v17 != v6)
    {
      v61 = (uint64_t)&v9[248 * v114 + 16];
      do
      {
        v72 = *(void **)(v61 - 8);
        *(_QWORD *)(v61 - 16) = *(_QWORD *)v6;
        if (v72)
        {
          *(_QWORD *)v61 = v72;
          operator delete(v72);
          *(_QWORD *)(v61 - 8) = 0;
          *(_QWORD *)v61 = 0;
          *(_QWORD *)(v61 + 8) = 0;
        }
        *(_OWORD *)(v61 - 8) = *(_OWORD *)(v6 + 8);
        *(_QWORD *)(v61 + 8) = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 8) = 0;
        v62 = *(_OWORD *)(v6 + 112);
        v64 = *(_OWORD *)(v6 + 64);
        v63 = *(_OWORD *)(v6 + 80);
        *(_OWORD *)(v61 + 80) = *(_OWORD *)(v6 + 96);
        *(_OWORD *)(v61 + 96) = v62;
        *(_OWORD *)(v61 + 48) = v64;
        *(_OWORD *)(v61 + 64) = v63;
        v65 = *(_OWORD *)(v6 + 176);
        v67 = *(_OWORD *)(v6 + 128);
        v66 = *(_OWORD *)(v6 + 144);
        *(_OWORD *)(v61 + 144) = *(_OWORD *)(v6 + 160);
        *(_OWORD *)(v61 + 160) = v65;
        *(_OWORD *)(v61 + 112) = v67;
        *(_OWORD *)(v61 + 128) = v66;
        v69 = *(_OWORD *)(v6 + 208);
        v68 = *(_OWORD *)(v6 + 224);
        v70 = *(_OWORD *)(v6 + 192);
        *(_QWORD *)(v61 + 224) = *(_QWORD *)(v6 + 240);
        *(_OWORD *)(v61 + 192) = v69;
        *(_OWORD *)(v61 + 208) = v68;
        *(_OWORD *)(v61 + 176) = v70;
        v71 = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v61 + 16) = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v61 + 32) = v71;
        v61 += 248;
        v6 += 248;
      }
      while (v6 != v17);
    }
    return;
  }
  v17 = a3 + 8 * ((uint64_t)(v8 - v11) >> 3);
  v18 = a1[1];
  if (v17 != a4)
  {
    v19 = a3 + 8 * ((uint64_t)(v8 - v11) >> 3);
    v20 = a1[1];
    do
    {
      *(_QWORD *)v20 = *(_QWORD *)v19;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = 0;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v19 + 8);
      *((_QWORD *)v20 + 3) = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 8) = 0;
      v21 = *(_OWORD *)(v19 + 112);
      v23 = *(_OWORD *)(v19 + 64);
      v22 = *(_OWORD *)(v19 + 80);
      *((_OWORD *)v20 + 6) = *(_OWORD *)(v19 + 96);
      *((_OWORD *)v20 + 7) = v21;
      *((_OWORD *)v20 + 4) = v23;
      *((_OWORD *)v20 + 5) = v22;
      v24 = *(_OWORD *)(v19 + 176);
      v26 = *(_OWORD *)(v19 + 128);
      v25 = *(_OWORD *)(v19 + 144);
      *((_OWORD *)v20 + 10) = *(_OWORD *)(v19 + 160);
      *((_OWORD *)v20 + 11) = v24;
      *((_OWORD *)v20 + 8) = v26;
      *((_OWORD *)v20 + 9) = v25;
      v28 = *(_OWORD *)(v19 + 208);
      v27 = *(_OWORD *)(v19 + 224);
      v29 = *(_OWORD *)(v19 + 192);
      *((_QWORD *)v20 + 30) = *(_QWORD *)(v19 + 240);
      *((_OWORD *)v20 + 13) = v28;
      *((_OWORD *)v20 + 14) = v27;
      *((_OWORD *)v20 + 12) = v29;
      v30 = *(_OWORD *)(v19 + 48);
      *((_OWORD *)v20 + 2) = *(_OWORD *)(v19 + 32);
      *((_OWORD *)v20 + 3) = v30;
      v18 += 248;
      v19 += 248;
      v20 += 248;
    }
    while (v19 != a4);
  }
  a1[1] = v18;
  if ((uint64_t)(v8 - v11) >= 1)
    goto LABEL_19;
}

void sub_20E8E8A64()
{
  sub_20E860B90("vector");
}

uint64_t *sub_20E8E8A78(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  _OWORD *v14;

  v2 = operator new();
  bzero((void *)v2, 0x720uLL);
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 48) = v2 + 56;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 136) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 312) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = v2 + 304;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_DWORD *)(v2 + 352) = 1065353216;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_DWORD *)(v2 + 392) = 1065353216;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_DWORD *)(v2 + 432) = 1065353216;
  *(_BYTE *)(v2 + 760) = 0;
  *(_QWORD *)(v2 + 792) = 0;
  *(_QWORD *)(v2 + 784) = 0;
  *(_BYTE *)(v2 + 808) = 0;
  *(_QWORD *)(v2 + 800) = 0;
  *(_OWORD *)(v2 + 1680) = 0u;
  *(_QWORD *)(v2 + 1712) = 0;
  *(_OWORD *)(v2 + 1696) = 0u;
  *(_OWORD *)(v2 + 1664) = 0u;
  *(_QWORD *)(v2 + 1656) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1688) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1720) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 1752) = 0;
  *(_QWORD *)(v2 + 1744) = 0;
  *(_QWORD *)(v2 + 1728) = 0;
  *(_QWORD *)(v2 + 1736) = 0;
  *(_QWORD *)(v2 + 1776) = 0;
  *(_QWORD *)(v2 + 1768) = 0;
  *(_QWORD *)(v2 + 1760) = v2 + 1768;
  *(_OWORD *)(v2 + 1784) = 0u;
  *(_OWORD *)(v2 + 1800) = 0u;
  *(_DWORD *)(v2 + 1816) = 1065353216;
  *a1 = v2;
  v3 = (_QWORD *)operator new();
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
  sub_20E8E8FF4((uint64_t)(v3 + 3));
  v3[9] = 0;
  v3[10] = 0;
  v3[8] = 1000;
  a1[1] = (uint64_t)v3;
  v4 = operator new();
  *(_QWORD *)v4 = &unk_2102DAFF0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  a1[2] = v4;
  v5 = operator new();
  *(_QWORD *)v5 = &unk_2102DAFF0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  a1[3] = v5;
  v6 = operator new();
  *(_QWORD *)v6 = &unk_2102DAFF0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  a1[5] = 0;
  a1[4] = v6;
  a1[6] = 0;
  a1[7] = 0;
  v7 = operator new();
  v8 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)v7 = v8;
  *(int64x2_t *)(v7 + 16) = v8;
  *(int64x2_t *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = xmmword_2102DB700;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v7 + 64) = _Q0;
  *(_QWORD *)(v7 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_OWORD *)(v7 + 112) = _Q0;
  *(_QWORD *)(v7 + 128) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 192) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 224) = _Q0;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_QWORD *)(v7 + 264) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 296) = 0x3FF0000000000000;
  a1[8] = v7;
  v14 = (_OWORD *)operator new();
  v14[5] = 0u;
  v14[6] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  *v14 = 0u;
  a1[9] = (uint64_t)v14;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  return a1;
}

void sub_20E8E8D44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v1[8];
  v1[8] = 0;
  if (v5)
    MEMORY[0x212BC6398](v5, 0x1000C40FDACBBE0);
  sub_20E8C3144(v3);
  sub_20E8E8E04(v1 + 4);
  sub_20E8E8E04(v1 + 3);
  sub_20E8E8E04(v1 + 2);
  sub_20E8E8EE8(v2);
  v6 = *v1;
  *v1 = 0;
  if (v6)
    sub_20E8E922C((uint64_t)v1, v6);
  _Unwind_Resume(a1);
}

void sub_20E8E8DD0()
{
  uint64_t v0;

  sub_20E8E91A4(v0, *(_QWORD **)(v0 + 8));
  MEMORY[0x212BC6398](v0, 0x10A0C40F3FF88D7);
  JUMPOUT(0x20E8E8DB4);
}

void sub_20E8E8DFC()
{
  JUMPOUT(0x20E8E8DB4);
}

uint64_t *sub_20E8E8E04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 24))
    {
      v3 = 0;
      v4 = (_QWORD *)(v2 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v2 + v3) & 0x80000000) == 0)
        {
          v5 = *(std::__shared_weak_count **)(*v4 + 32 * v3 + 24);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
        }
        ++v3;
      }
      while (v3 != *(_QWORD *)(v2 + 24));
      operator delete(*(void **)v2);
      *(_QWORD *)v2 = &unk_2102DAFF0;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v2 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v2, 0x10A0C40EE0660CCLL);
  }
  return a1;
}

uint64_t *sub_20E8E8EE8(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 80);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_20E8E90DC(v2 + 24);
    sub_20E8E91A4(v2, *(_QWORD **)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10A0C40F3FF88D7);
  }
  return a1;
}

void sub_20E8E8F80(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;

  if (a2)
  {
    sub_20E8E8F80(a1, *a2);
    sub_20E8E8F80(a1, a2[1]);
    v4 = a2[6];
    a2[6] = 0;
    if (v4)
    {
      v5 = *(void **)(v4 + 744);
      if (v5)
      {
        *(_QWORD *)(v4 + 752) = v5;
        operator delete(v5);
      }
      MEMORY[0x212BC6398](v4, 0x1020C40281B6686);
    }
    operator delete(a2);
  }
}

uint64_t sub_20E8E8FF4(uint64_t a1)
{
  size_t prime;
  unint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 1000;
  prime = std::__next_prime(0x3E8uLL);
  v3 = prime;
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_2;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (v3 <= v5)
      v3 = v5;
    if (v3 < *(_QWORD *)&v4)
LABEL_2:
      sub_20E8D2B3C(a1, v3);
  }
  return a1;
}

void sub_20E8E90C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E90DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8E90DC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[7];
      while (v6)
      {
        v8 = v6;
        v6 = (_QWORD *)*v6;
        v9 = (std::__shared_weak_count *)v8[4];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        operator delete(v8);
      }
      v7 = (void *)v2[5];
      v2[5] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20E8E91A4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20E8E91A4(a1, *a2);
    sub_20E8E91A4(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_20E8E922C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = *(_QWORD **)(a2 + 1800);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(a2 + 1784);
    *(_QWORD *)(a2 + 1784) = 0;
    if (v5)
      operator delete(v5);
    sub_20E8E92C8(a2 + 1760, *(_QWORD **)(a2 + 1768));
    sub_20E8E9428(a2 + 72);
    sub_20E8E8F80(a2 + 48, *(_QWORD **)(a2 + 56));
    sub_20E86872C(a2 + 24, *(_QWORD **)(a2 + 32));
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x212BC6398);
  }
}

void sub_20E8E92C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_20E8E92C8(a1, *a2);
    sub_20E8E92C8(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      sub_20E8E931C((uint64_t)(a2 + 5), v4);
    operator delete(a2);
  }
}

void sub_20E8E931C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t *v8;

  if (a2)
  {
    v2 = *(_DWORD *)(a2 + 992);
    if (v2 == -1)
      goto LABEL_28;
    if (v2 > 7)
    {
      if (v2 > 0xB)
      {
        if (v2 >= 0xF)
        {
          v3 = *(std::__shared_weak_count **)(a2 + 896);
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(p_shared_owners);
            while (__stlxr(v5 - 1, p_shared_owners));
            goto LABEL_26;
          }
        }
      }
      else if (v2 > 9)
      {
        if (v2 != 10)
        {
          v3 = *(std::__shared_weak_count **)(a2 + 672);
          if (v3)
          {
            v8 = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(v8);
            while (__stlxr(v5 - 1, v8));
            goto LABEL_26;
          }
        }
      }
      else if (v2 == 9)
      {
        v3 = *(std::__shared_weak_count **)(a2 + 504);
        if (v3)
        {
          v6 = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(v6);
          while (__stlxr(v5 - 1, v6));
          goto LABEL_26;
        }
      }
    }
    else if (v2 == 7)
    {
      v3 = *(std::__shared_weak_count **)(a2 + 480);
      if (v3)
      {
        v4 = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
LABEL_26:
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
LABEL_28:
    JUMPOUT(0x212BC6398);
  }
}

uint64_t sub_20E8E9428(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  if (*(_BYTE *)(a1 + 1568))
  {
    v2 = *(void **)(a1 + 1480);
    if (v2)
    {
      *(_QWORD *)(a1 + 1488) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD **)(a1 + 344);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 304);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 264);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v11)
    operator delete(v11);
  sub_20E86872C(a1 + 224, *(_QWORD **)(a1 + 232));
  return a1;
}

void sub_20E8E94E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20E8E950C(uint64_t a1)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 24);
  if (result)
  {
    sub_20E8E95B0(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20E8E9540(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3vio11VIODatabaseINS2_8VIOFrameILNS2_9eVIOStateE2ENS2_13VIOPoint2DNSPEdEE"
                     "NS2_25VIOAnchoredPoint3DWithCovIdLb0EEES9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3vio11VIODatabaseINS2_8VIOFrameILNS2_9eVIOStateE2ENS2_13VIOPoi"
                                "nt2DNSPEdEENS2_25VIOAnchoredPoint3DWithCovIdLb0EEES9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3vio11VIODatabaseINS2_8VIOFrameILNS2_9eVIOStateE2ENS2_13VIOPoint2DNSPEdEENS2_25VIOAnchoredPoint3DWithCovIdLb0EEES9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3vio11VIODatabaseINS2_8VIOFrameILNS2_9eVIOStateE2ENS2_13VIOPoint2DNSPEdEENS2_25VIOAnchoredPoint3DWithCovIdLb0EEES9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20E8E95B0(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
  {
    v4 = *(void **)(v3 + 48);
    if (v4)
    {
      *(_QWORD *)(v3 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v3, 0x1030C40F7208886);
  }
  v6 = a1[8];
  a1[8] = 0;
  if (v6)
    MEMORY[0x212BC6398](v6, 0x1000C40FDACBBE0);
  v7 = a1[5];
  if (v7)
  {
    v8 = a1[6];
    v9 = (void *)a1[5];
    if (v8 != v7)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = (void *)a1[5];
    }
    a1[6] = v7;
    operator delete(v9);
  }
  v13 = a1[4];
  a1[4] = 0;
  if (v13)
  {
    if (*(_QWORD *)(v13 + 24))
    {
      v14 = 0;
      v15 = (_QWORD *)(v13 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v13 + v14) & 0x80000000) == 0)
        {
          v16 = *(std::__shared_weak_count **)(*v15 + 32 * v14 + 24);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        ++v14;
      }
      while (v14 != *(_QWORD *)(v13 + 24));
      operator delete(*(void **)v13);
      *(_QWORD *)v13 = &unk_2102DAFF0;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v13, 0x10A0C40EE0660CCLL);
  }
  v19 = a1[3];
  a1[3] = 0;
  if (v19)
  {
    if (*(_QWORD *)(v19 + 24))
    {
      v20 = 0;
      v21 = (_QWORD *)(v19 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v19 + v20) & 0x80000000) == 0)
        {
          v22 = *(std::__shared_weak_count **)(*v21 + 32 * v20 + 24);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        ++v20;
      }
      while (v20 != *(_QWORD *)(v19 + 24));
      operator delete(*(void **)v19);
      *(_QWORD *)v19 = &unk_2102DAFF0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v19, 0x10A0C40EE0660CCLL);
  }
  v25 = a1[2];
  a1[2] = 0;
  if (v25)
  {
    if (*(_QWORD *)(v25 + 24))
    {
      v26 = 0;
      v27 = (_QWORD *)(v25 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v25 + v26) & 0x80000000) == 0)
        {
          v28 = *(std::__shared_weak_count **)(*v27 + 32 * v26 + 24);
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        ++v26;
      }
      while (v26 != *(_QWORD *)(v25 + 24));
      operator delete(*(void **)v25);
      *(_QWORD *)v25 = &unk_2102DAFF0;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v25, 0x10A0C40EE0660CCLL);
  }
  v31 = a1[1];
  a1[1] = 0;
  if (v31)
  {
    v32 = *(std::__shared_weak_count **)(v31 + 80);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    sub_20E8E90DC(v31 + 24);
    sub_20E8E91A4(v31, *(_QWORD **)(v31 + 8));
    MEMORY[0x212BC6398](v31, 0x10A0C40F3FF88D7);
  }
  v35 = *a1;
  *a1 = 0;
  if (v35)
    sub_20E8E922C((uint64_t)a1, v35);
  return a1;
}

void sub_20E8E9964(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a8)
    v17 = a3;
  else
    v17 = 0;
  if (a7 + a6 * a3 + v17 > a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 64) = a8 + a6;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 56) = a8 + a6 + a7;
  v24 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v24)
  {
    sub_20E8E9AE0((void **)(a1 + 120), a5 - v24);
LABEL_16:
    v25 = 0;
    v26 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v26++) = *(_QWORD *)(a1 + 88) + v25;
      v25 += a4;
    }
    while (a5 != v26);
    return;
  }
  if (a5 < v24)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_16;
}

void sub_20E8E9AE0(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E8E8A64();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_20E8E9C80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFC40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8E9C90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFC40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8E9CC0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
}

uint64_t *sub_20E8E9D18(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  char v13[8];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        return (uint64_t *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_8:
    v9 = (uint64_t *)operator new(0x2D8uLL);
    v9[4] = *a3;
    v13[0] = 1;
    v14 = xmmword_2102DB710;
    v15 = 0x3F1A36E2EB1C432DLL;
    v16 = 10;
    v17 = xmmword_2102DB720;
    v18 = xmmword_2102DB730;
    sub_20EDE1BA8((uint64_t)(v9 + 5), (size_t)v13);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    v11 = v9;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_20E868578(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_20E8E9E34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E8E9E4C(0, v1);
  _Unwind_Resume(a1);
}

void sub_20E8E9E4C(char a1, _QWORD *__p)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v3 = (void *)__p[86];
    if (v3)
    {
      __p[87] = v3;
      operator delete(v3);
    }
    v4 = (void *)__p[83];
    if (v4)
    {
      __p[84] = v4;
      operator delete(v4);
    }
    v5 = (void *)__p[80];
    if (v5)
    {
      __p[81] = v5;
      operator delete(v5);
    }
    v6 = (void *)__p[74];
    if (v6)
    {
      __p[75] = v6;
      operator delete(v6);
    }
    v7 = (void *)__p[68];
    if (v7)
    {
      __p[69] = v7;
      operator delete(v7);
      operator delete(__p);
      return;
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t CV3DPlaneDetectionSlamMetadataCreateFromSlamState(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFTypeRef v13;
  unint64_t *p_shared_owners;
  uint64_t *v15;
  uint64_t v16;
  double *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count_vtbl *Mutable;
  uint64_t *v25;
  uint64_t *v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  const void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *i;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *j;
  _QWORD *v48;
  char v49;
  char v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v59;
  char v60;
  CFTypeRef cf;
  std::__shared_weak_count *v62;
  char v63;
  char *v64;
  __int128 v65;
  CFMutableArrayRef theArray[2];
  void *__p[10];
  CFUUIDBytes v68;

  __p[9] = *(void **)MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "Slam state is NULL");
    v8 = (char *)operator new(0x90uLL);
    v64 = v8;
    v65 = xmmword_2102DBA90;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp");
    if (a2)
    {
      theArray[0] = (CFMutableArrayRef)22;
      theArray[1] = (CFMutableArrayRef)std::generic_category();
      sub_20EA67538((const std::error_condition *)theArray, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v10 = v62;
      if (!v62)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
LABEL_26:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(v65) & 0x80000000) == 0)
        {
LABEL_30:
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          return 0;
        }
        goto LABEL_28;
      }
LABEL_27:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_30;
LABEL_28:
      v8 = v64;
    }
LABEL_29:
    operator delete(v8);
    goto LABEL_30;
  }
  v4 = (uint64_t **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3 || !*v3)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
    strcpy((char *)__p[0], "SLAM state is not valid");
    v8 = (char *)operator new(0x90uLL);
    v64 = v8;
    v65 = xmmword_2102DBA90;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp");
    if (a2)
    {
      theArray[0] = (CFMutableArrayRef)22;
      theArray[1] = (CFMutableArrayRef)std::generic_category();
      sub_20EA67538((const std::error_condition *)theArray, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v62;
      if (!v62)
        goto LABEL_27;
      v11 = (unint64_t *)&v62->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  v5 = CV3DPlaneDetectionSlamMetadataCreate();
  if (v5)
  {
    v6 = *v4;
    if (*v4)
    {
      v7 = *v6;
      if (*v6)
        goto LABEL_7;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp", 84, (uint64_t)"slam_state_ptr->vio_metadata != nullptr", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_119;
      }
      v7 = **v4;
      if (v7)
      {
LABEL_7:
        if (!CV3DPlaneDetectionSlamMetadataSetInitFinished())
          goto LABEL_112;
LABEL_38:
        if (CV3DPlaneDetectionSlamMetadataSetMapSize())
        {
          v15 = *v4;
          if (*v4)
          {
            v16 = *v15;
            v17 = (double *)v15[4];
            v18 = (std::__shared_weak_count *)v15[5];
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
            v21 = !v17 || *v17 >= *(double *)(v16 + 40);
            if (v18)
            {
              v22 = (unint64_t *)&v18->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            if (v21)
            {
              if (!CV3DPlaneDetectionSlamMetadataSetTimestamp()
                || !CV3DPlaneDetectionSlamMetadataSetReinitializeAttempts())
              {
                goto LABEL_112;
              }
              Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x4EC4EC4EC4EC4EC5* ((uint64_t)(*(_QWORD *)(v7 + 4304) - *(_QWORD *)(v7 + 4296)) >> 5), &stru_24C9AFDE0);
              sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
              v25 = *(uint64_t **)(v7 + 4296);
              v26 = *(uint64_t **)(v7 + 4304);
              if (v25 == v26)
              {
LABEL_67:
                sub_20E8EAEEC(&v64, (uint64_t)theArray);
                BYTE8(v65) = 1;
              }
              else
              {
                v27 = 0;
                while (1)
                {
                  v28 = *v25;
                  v29 = v25[1];
                  Default = CFAllocatorGetDefault();
                  *(_QWORD *)&v68.byte0 = v28;
                  *(_QWORD *)&v68.byte8 = v29;
                  v31 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, v68);
                  sub_20EA68D1C((std::__shared_weak_count_vtbl **)__p, v31, 0);
                  v32 = (std::__shared_weak_count *)__p[1];
                  cf = __p[0];
                  v62 = (std::__shared_weak_count *)__p[1];
                  v33 = (const void *)CV3DPlaneDetectionAnchorCreate();
                  if (v33)
                  {
                    CFArraySetValueAtIndex(theArray[0], v27, v33);
                    CV3DPlaneDetectionAnchorRelease();
                  }
                  else
                  {
                    LOBYTE(v64) = 0;
                    BYTE8(v65) = 0;
                  }
                  if (v32)
                  {
                    v34 = (unint64_t *)&v32->__shared_owners_;
                    do
                      v35 = __ldaxr(v34);
                    while (__stlxr(v35 - 1, v34));
                    if (!v35)
                    {
                      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                      std::__shared_weak_count::__release_weak(v32);
                    }
                  }
                  if (!v33)
                    break;
                  v25 += 52;
                  ++v27;
                  if (v25 == v26)
                    goto LABEL_67;
                }
              }
              v36 = (std::__shared_weak_count *)theArray[1];
              if (theArray[1])
              {
                v37 = (unint64_t *)((char *)theArray[1] + 8);
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              if (!BYTE8(v65))
                goto LABEL_112;
              if ((CV3DPlaneDetectionSlamMetadataSetUpdatedAnchors() & 1) != 0)
              {
                if (!*(_BYTE *)(v7 + 624))
                  goto LABEL_122;
                v39 = *(_QWORD *)(v7 + 584);
                v40 = *(_QWORD *)(v7 + 576);
                if (v39 == v40)
                  goto LABEL_122;
                sub_20E8EAC00(__p, 3 * ((v39 - v40) >> 5));
                v41 = *(_QWORD **)(v7 + 576);
                for (i = *(_QWORD **)(v7 + 584); v41 != i; v41 = v43 + 2)
                {
                  theArray[0] = (CFMutableArrayRef)__p;
                  sub_20E8EB140((uint64_t *)theArray, v41);
                  v43 = v41 + 1;
                  sub_20E8EB140((uint64_t *)theArray, v43++);
                  sub_20E8EB140((uint64_t *)theArray, v43);
                }
                v44 = CV3DPlaneDetectionSlamMetadataSetPointCloud();
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if ((v44 & 1) != 0)
                {
LABEL_122:
                  if (!*(_BYTE *)(v7 + 704))
                    goto LABEL_89;
                  v45 = *(_QWORD *)(v7 + 664) - *(_QWORD *)(v7 + 656);
                  if (!v45)
                    goto LABEL_89;
                  sub_20E8EAC00(__p, 3 * (v45 >> 5));
                  v46 = *(_QWORD **)(v7 + 656);
                  for (j = *(_QWORD **)(v7 + 664); v46 != j; v46 = v48 + 2)
                  {
                    theArray[0] = (CFMutableArrayRef)__p;
                    sub_20E8EB140((uint64_t *)theArray, v46);
                    v48 = v46 + 1;
                    sub_20E8EB140((uint64_t *)theArray, v48++);
                    sub_20E8EB140((uint64_t *)theArray, v48);
                  }
                  v49 = CV3DPlaneDetectionSlamMetadataSetLineCloud();
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if ((v49 & 1) != 0)
                  {
LABEL_89:
                    if (!sub_20EAB3D4C(v4, 0, 0, (uint64_t)__p, theArray))
                    {
                      v50 = CV3DPlaneDetectionSlamMetadataSetCameraPose();
                      if (!BYTE8(v65))
                        goto LABEL_99;
                      goto LABEL_95;
                    }
                    sub_20E8610C0(&cf, "Failed to get SlamState pose");
                    sub_20E8610C0(&v59, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp");
                    sub_20E8EAB0C(a2, 0x60u, (uint64_t)&cf);
                    if (v60 < 0)
                      operator delete(v59);
                    if (v63 < 0)
                      operator delete((void *)cf);
                  }
                }
              }
              v50 = 0;
              if (!BYTE8(v65))
                goto LABEL_99;
LABEL_95:
              v51 = (std::__shared_weak_count *)v65;
              if ((_QWORD)v65)
              {
                v52 = (unint64_t *)(v65 + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                  if ((v50 & 1) != 0)
                    return v5;
                  goto LABEL_112;
                }
              }
LABEL_99:
              if ((v50 & 1) != 0)
                return v5;
              goto LABEL_112;
            }
          }
          __p[0] = operator new(0x28uLL);
          *(_OWORD *)&__p[1] = xmmword_2102DBA80;
          strcpy((char *)__p[0], "Failed to get SlamState timestamp");
          v54 = (char *)operator new(0x90uLL);
          v64 = v54;
          v65 = xmmword_2102DBA90;
          strcpy(v54, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp");
          if (a2)
          {
            theArray[0] = (CFMutableArrayRef)22;
            theArray[1] = (CFMutableArrayRef)std::generic_category();
            sub_20EA67538((const std::error_condition *)theArray, (uint64_t)__p, (CFErrorRef *)&cf);
            sub_20EA66CF0(&cf, a2);
            v55 = v62;
            if (v62)
            {
              v56 = (unint64_t *)&v62->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            if ((SHIBYTE(v65) & 0x80000000) == 0)
              goto LABEL_110;
            v54 = v64;
          }
          operator delete(v54);
LABEL_110:
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
LABEL_112:
        CV3DPlaneDetectionSlamMetadataRelease();
        return 0;
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPlaneDetection/CV3DPlaneDetectionSlamInterop.cpp", 85, (uint64_t)"slam_state_ptr->vio_metadata->pose_metadata != nullptr", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v7 = **v4;
      if (!CV3DPlaneDetectionSlamMetadataSetInitFinished())
        goto LABEL_112;
      goto LABEL_38;
    }
LABEL_119:
    abort();
  }
  return v5;
}

void sub_20E8EA974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E869AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8EA988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20E869AA8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E8EAA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20E8EAAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8EAAC4()
{
  JUMPOUT(0x20E8EAAE4);
}

void sub_20E8EAB0C(CFTypeRef *a1, unsigned int a2, uint64_t a3)
{
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef cf;
  std::__shared_weak_count *v10;
  std::error_condition v11;

  if (a1)
  {
    *(_QWORD *)&v11.__val_ = a2;
    v11.__cat_ = std::generic_category();
    sub_20EA67538(&v11, a3, (CFErrorRef *)&cf);
    if (*a1)
      CFRelease(*a1);
    *a1 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v5;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E8EABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8EAC00(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    v3 = result;
    if (a2 >> 61)
      sub_20E867F44();
    result = operator new(8 * a2);
    *v3 = result;
    v3[1] = result;
    v3[2] = &result[a2];
  }
  return result;
}

void sub_20E8EAC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8EAC70(uint64_t a1, uint64_t a2)
{
  CV3DPlaneDetectionAnchorRetain();
  return a2;
}

uint64_t sub_20E8EAC98()
{
  return CV3DPlaneDetectionAnchorRelease();
}

std::__shared_weak_count_vtbl **sub_20E8EACA0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E8EADA8(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20E8EAD7C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8EAD94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8EADA8(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFE18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8EAE08(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8EAE20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8EAE38(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8EAE5C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E8EAE7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20E8EAEEC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8EAFFC(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20E8EAFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8EAFFC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFE68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8EB05C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8EB074(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8EB08C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8EB0B0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E8EB0D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20E8EB140(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

_DWORD *CV3DPosePredictionConfigCreate()
{
  _DWORD *v0;
  _DWORD *v1;

  v0 = operator new(0x598uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x598uLL);
    sub_20E8EC534((uint64_t)(v1 + 2));
    v1[357] = 1;
    *(_QWORD *)v1 = &off_24C9F9FF8;
  }
  return v1;
}

uint64_t sub_20E8EB310(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DPosePredictionConfigCreateWithConfiguration(int a1, int a2, CFTypeRef *a3)
{
  void *v5;
  uint64_t v6;
  char *v8;
  const std::error_category *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  int v16;
  int v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  v17 = a2;
  v16 = sub_20E8F7E44(&v17);
  v5 = operator new(0x598uLL, MEMORY[0x24BEDB6B8]);
  if (v5)
  {
    v6 = (uint64_t)v5;
    sub_20F1AD1F0((uint64_t)v5 + 8, &v16);
    *(_DWORD *)(v6 + 1428) = 1;
    *(_QWORD *)v6 = &off_24C9F9FF8;
    sub_20E8649A4(v6);
    if (a1 == 5)
      *(_BYTE *)(v6 + 1052) = 0;
    return v6;
  }
  else
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_2102DBBD0;
    strcpy((char *)__p, "Could not allocate memory for the pose prediction config");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      v9 = std::generic_category();
      *(_QWORD *)&v20.__val_ = 12;
      v20.__cat_ = v9;
      sub_20EA67538(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E8EB54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPosePredictionConfigRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1428);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DPosePredictionConfigRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 357;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

uint64_t CV3DPosePredictionConfigConfigureForAlgorithm(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const std::error_category *v9;
  CFTypeRef v10;
  unint64_t *v11;
  char *v13;
  void *__p;
  __int128 v15;
  unsigned int v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v16 = a2;
  if (!a1)
  {
    __p = operator new(0x40uLL);
    v15 = xmmword_2102DBBF0;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigConfigureForAlgorithm");
    v4 = (char *)operator new(0x78uLL);
    v13 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v18;
      if (!v18)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      goto LABEL_22;
    }
LABEL_25:
    operator delete(v4);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
  if (a2 - 1 >= 3)
  {
    sub_20E8EB8DC("Unknown algorithm ", &v16);
    v4 = (char *)operator new(0x78uLL);
    v13 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      v9 = std::generic_category();
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = v9;
      sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v6 = v18;
      if (!v18)
        goto LABEL_24;
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v8 = __ldaxr(v11);
      while (__stlxr(v8 - 1, v11));
LABEL_22:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_24:
      v4 = v13;
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 1048) = a2;
  if (a2 - 1 >= 2)
  {
    if (a2 == 3)
    {
      *(_BYTE *)(a1 + 1424) = 1;
      return 1;
    }
  }
  else
  {
    sub_20F1ADB48(a1 + 8);
  }
  return 1;
}

void sub_20E8EB894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8EB8DC(char *__s, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20E8ECA30(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9AFEC0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9AFED8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9AFEA8[v5])(v7, v4);
  return result;
}

void sub_20E8EB9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8EB9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E8EB9E4);
}

uint64_t CV3DPosePredictionConfigSetPoseLockStratgey(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  const std::error_category *v12;
  std::string::size_type v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  std::string v24;
  void *__p;
  __int128 v26;
  std::string *v27;
  std::string *v28;
  void **p_p;

  if (!a1)
  {
    __p = operator new(0x40uLL);
    v26 = xmmword_2102DBC00;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigSetPoseLockStratgey");
    v6 = (char *)operator new(0x78uLL);
    v21 = (uint64_t)v6;
    v22 = xmmword_2102DBBE0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      v24.__r_.__value_.__r.__words[0] = 22;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v24, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          return 0;
LABEL_41:
        v17 = __p;
        goto LABEL_42;
      }
      v6 = (char *)v21;
    }
    operator delete(v6);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return 0;
    goto LABEL_41;
  }
  if (a2 < 3)
  {
    *(_DWORD *)(a1 + 1028) = a2;
    return 1;
  }
  v23 = 0;
  sub_20E8ECB20(&v21, "Unknown strategy ");
  std::to_string(&v24, a2);
  __p = &v21;
  *(_QWORD *)&v26 = &v24;
  *((_QWORD *)&v26 + 1) = &v21;
  v27 = &v24;
  v28 = &v24;
  if (v23 == -1)
    sub_20E877AB8();
  p_p = &__p;
  ((void (*)(void ***, uint64_t *))off_24C9AFEC0[v23])(&p_p, &v21);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v23 == -1)
    sub_20E877AB8();
  __p = &v24;
  ((void (*)(CFTypeRef *__return_ptr, void **, uint64_t *))off_24C9AFED8[v23])(&cf, &__p, &v21);
  if (v23 != -1)
    ((void (*)(void **, uint64_t *))off_24C9AFEA8[v23])(&__p, &v21);
  v11 = operator new(0x78uLL);
  __p = v11;
  v26 = xmmword_2102DBBE0;
  strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
  if (a3)
  {
    v12 = std::generic_category();
    v21 = 22;
    *(_QWORD *)&v22 = v12;
    sub_20EA67538((const std::error_condition *)&v21, (uint64_t)&cf, (CFErrorRef *)&v24);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = v24.__r_.__value_.__r.__words[0];
    if (v24.__r_.__value_.__r.__words[0])
      CFRetain(v24.__r_.__value_.__l.__data_);
    *a3 = (CFTypeRef)v13;
    size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
    if (v24.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_36;
    v11 = __p;
  }
  operator delete(v11);
LABEL_36:
  if ((v20 & 0x80000000) == 0)
    return 0;
  v17 = (void *)cf;
LABEL_42:
  operator delete(v17);
  return 0;
}

void sub_20E8EBDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8EBE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E8EBE2CLL);
}

BOOL CV3DPosePredictionConfigSetTimeSyncValues(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_QWORD *)(a1 + 1032) = a2;
    *(_QWORD *)(a1 + 1040) = a3;
  }
  else
  {
    __p = operator new(0x40uLL);
    v13 = xmmword_2102DBC10;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigSetTimeSyncValues");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a4)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8EBFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPosePredictionConfigSetIsThreadSafe(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 1052) = a2;
  }
  else
  {
    __p = operator new(0x40uLL);
    v12 = xmmword_2102D7440;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigSetIsThreadSafe");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8EC190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPosePredictionConfigSetShouldLogOnRealtimeThread(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 1024) = a2;
  }
  else
  {
    __p = operator new(0x48uLL);
    v12 = xmmword_2102DBC20;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigSetShouldLogOnRealtimeThread");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8EC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPosePredictionConfigSetShouldStartIn3DOF(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 1424) = a2;
  }
  else
  {
    __p = operator new(0x40uLL);
    v12 = xmmword_2102DBC30;
    strcpy((char *)__p, "Config is null in CV3DPosePredictionConfigSetShouldStartIn3DOF");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DPosePredictionConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8EC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8EC534(uint64_t a1)
{
  _OWORD *v2;
  int64x2_t v3;
  _OWORD *v4;
  _OWORD *v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 32) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 48) = 1000;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 112) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 128) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 144) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 160) = 1000;
  *(_OWORD *)(a1 + 168) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 184) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 200) = 1000;
  *(_BYTE *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_2102DBC60;
  *(_QWORD *)(a1 + 264) = 1000;
  *(_OWORD *)(a1 + 272) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 288) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 304) = xmmword_2102DBC80;
  *(_QWORD *)(a1 + 320) = 0x3FEFAE147AE147AELL;
  *(_WORD *)(a1 + 328) = 514;
  *(_OWORD *)(a1 + 332) = xmmword_2102DBC90;
  *(_OWORD *)(a1 + 352) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 368) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 384) = 1000;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 416) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 448) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 464) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 480) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 496) = 1000;
  *(_QWORD *)(a1 + 504) = 0x3EE4F8B588E368F1;
  *(_QWORD *)(a1 + 512) = 0x4044000000000000;
  *(_QWORD *)(a1 + 520) = 5;
  *(_OWORD *)(a1 + 528) = xmmword_2102DBCA0;
  *(_BYTE *)(a1 + 544) = 1;
  *(_QWORD *)(a1 + 552) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 568) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 1;
  *(_OWORD *)(a1 + 592) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 608) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 624) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 640) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 656) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 672) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 688) = 1000;
  *(_BYTE *)(a1 + 696) = 1;
  *(_QWORD *)(a1 + 704) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 712) = 1;
  *(_QWORD *)(a1 + 720) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 736) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 752) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 768) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 784) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 800) = 1000;
  *(_QWORD *)(a1 + 808) = 0x4059000000000000;
  *(_OWORD *)(a1 + 816) = xmmword_2102DBCB0;
  *(_WORD *)(a1 + 832) = 1;
  *(_BYTE *)(a1 + 834) = 0;
  *(_WORD *)(a1 + 840) = 0;
  *(_WORD *)(a1 + 852) = 0;
  *(_QWORD *)(a1 + 844) = 0;
  *(_WORD *)(a1 + 856) = 1;
  *(_QWORD *)(a1 + 864) = 0x3F8EB851EB851EB8;
  *(_BYTE *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = xmmword_2102DBCC0;
  *(_BYTE *)(a1 + 896) = 1;
  *(_QWORD *)(a1 + 904) = 0;
  *(_WORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 920) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  v2 = operator new(0x78uLL);
  *(_QWORD *)(a1 + 928) = v2;
  *(_QWORD *)(a1 + 944) = (char *)v2 + 120;
  *v2 = xmmword_2102DBCD0;
  v2[1] = xmmword_2102DBCB0;
  v2[2] = xmmword_2102DBCE0;
  v2[3] = xmmword_2102DBCF0;
  v2[4] = xmmword_2102DBD00;
  v2[5] = xmmword_2102DBD10;
  v2[6] = xmmword_2102DBD20;
  *((_QWORD *)v2 + 14) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 936) = (char *)v2 + 120;
  *(_QWORD *)(a1 + 952) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 960) = 200;
  *(_QWORD *)(a1 + 968) = 0x4008000000000000;
  *(_OWORD *)(a1 + 976) = xmmword_2102DBD30;
  *(_QWORD *)(a1 + 992) = 0x3EF24D14F4C463A3;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = 0x4000000000000000;
  *(_WORD *)(a1 + 1016) = 257;
  *(_DWORD *)(a1 + 1020) = 2;
  *(_DWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1044) = 1;
  *(_BYTE *)(a1 + 1048) = 0;
  *(int64x2_t *)(a1 + 1056) = vdupq_n_s64(0x3F847AE147AE147BuLL);
  *(_WORD *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 1;
  *(_OWORD *)(a1 + 1088) = xmmword_2102DBD40;
  v3 = vdupq_n_s64(0x3FB999999999999AuLL);
  *(int64x2_t *)(a1 + 1104) = v3;
  *(_QWORD *)(a1 + 1120) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 1128) = 1;
  *(_OWORD *)(a1 + 1136) = xmmword_2102DBD40;
  *(int64x2_t *)(a1 + 1152) = v3;
  *(_OWORD *)(a1 + 1168) = xmmword_2102DBD50;
  *(_OWORD *)(a1 + 1184) = xmmword_2102DBD60;
  *(_QWORD *)(a1 + 1200) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1216) = xmmword_2102DBD70;
  *(_OWORD *)(a1 + 1232) = xmmword_2102DBD80;
  *(_OWORD *)(a1 + 1248) = xmmword_2102DBD90;
  *(_OWORD *)(a1 + 1264) = xmmword_2102DBDA0;
  *(_OWORD *)(a1 + 1280) = xmmword_2102DBDB0;
  *(_QWORD *)(a1 + 1296) = 0x3FE999999999999ALL;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 32;
  v4 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1304) = v4;
  *(_DWORD *)(a1 + 1320) = 32;
  v4[12] = xmmword_2102DBE98;
  v4[13] = unk_2102DBEA8;
  v4[14] = xmmword_2102DBEB8;
  v4[15] = unk_2102DBEC8;
  v4[8] = xmmword_2102DBE58;
  v4[9] = unk_2102DBE68;
  v4[10] = xmmword_2102DBE78;
  v4[11] = unk_2102DBE88;
  v4[4] = xmmword_2102DBE18;
  v4[5] = unk_2102DBE28;
  v4[6] = xmmword_2102DBE38;
  v4[7] = unk_2102DBE48;
  *v4 = xmmword_2102DBDD8;
  v4[1] = unk_2102DBDE8;
  v4[2] = xmmword_2102DBDF8;
  v4[3] = unk_2102DBE08;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0x3F5B328B6D86EC18;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = 32;
  v5 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1360) = v5;
  *(_DWORD *)(a1 + 1376) = 32;
  v5[12] = xmmword_2102DBE98;
  v5[13] = unk_2102DBEA8;
  v5[14] = xmmword_2102DBEB8;
  v5[15] = unk_2102DBEC8;
  v5[8] = xmmword_2102DBE58;
  v5[9] = unk_2102DBE68;
  v5[10] = xmmword_2102DBE78;
  v5[11] = unk_2102DBE88;
  v5[4] = xmmword_2102DBE18;
  v5[5] = unk_2102DBE28;
  v5[6] = xmmword_2102DBE38;
  v5[7] = unk_2102DBE48;
  *v5 = xmmword_2102DBDD8;
  v5[1] = unk_2102DBDE8;
  v5[2] = xmmword_2102DBDF8;
  v5[3] = unk_2102DBE08;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1408) = 0x3F5B328B6D86EC18;
  *(_BYTE *)(a1 + 1416) = 0;
  return a1;
}

void sub_20E8EC9F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v4 = *(void **)(v1 + 928);
  if (v4)
  {
    *(_QWORD *)(v1 + 936) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20E8ECA30(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AFEA8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E8ECB20(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AFEA8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t CV3DPosePredictorStateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1084);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DPosePredictorStateRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 1084);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPosePredictorStateGetSize()
{
  return 1088;
}

double CV3DPosePredictorStateGetTimestamp(uint64_t a1, CFTypeRef *a2)
{
  void *__p;
  __int128 v5;

  if (a1)
    return *(double *)(a1 + 8);
  __p = operator new(0x38uLL);
  v5 = xmmword_2102DBEE0;
  strcpy((char *)__p, "Pose predictor state is null when getting the timestamp");
  sub_20E8ECD2C(a2, 0x16u, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
  return -1.0;
}

void sub_20E8ECD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8ECD2C(CFTypeRef *a1, unsigned int a2, uint64_t a3)
{
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *__p;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/include/VIO/CAPI/ErrorRef.h");
    *(_QWORD *)&v13.__val_ = a2;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, a3, (CFErrorRef *)&cf);
    if (*a1)
      CFRelease(*a1);
    *a1 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(__p);
  }
}

void sub_20E8ECE58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8ECE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t CV3DPosePredictorStateGetStatus(_BYTE *a1, unsigned int *a2, CFTypeRef *a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  void *__p;
  __int128 v10;

  if (a1)
  {
    if (a2)
    {
      v4 = a1[608];
      if (a1[419])
      {
        if (!a1[609])
        {
          v5 = v4 - 3;
          if (v5 > 0xE)
            v6 = 0;
          else
            v6 = dword_2102DBF28[(char)v5];
          if (v6 <= 1)
            v6 = 1;
          *a2 = v6;
          return 1;
        }
      }
      else
      {
        v8 = v4 - 3;
        if (v8 < 0xF)
        {
          *a2 = dword_2102DBF28[(char)v8];
          return 1;
        }
      }
      *a2 = 0;
      return 1;
    }
    __p = operator new(0x30uLL);
    v10 = xmmword_2102DBF00;
    strcpy((char *)__p, "Tracking state is null when getting the status");
    sub_20E8ECD2C(a3, 0x16u, (uint64_t)&__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
    return 0;
  }
  else
  {
    __p = operator new(0x38uLL);
    v10 = xmmword_2102DBF10;
    strcpy((char *)__p, "Pose predictor state is null when getting the status");
    sub_20E8ECD2C(a3, 0x16u, (uint64_t)&__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E8ED050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DPosePredictionCreate(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 5;
  v2 = operator new(0xD48uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    bzero(v2, 0xD48uLL);
    sub_20EBCC03C((uint64_t)v3 + 8);
    *((_DWORD *)v3 + 844) = 1;
    *(_QWORD *)v3 = &off_24C9B3200;
    sub_21021A874((uint64_t *)v3 + 423);
  }
  *a1 = v3;
  return 2 * (v3 == 0);
}

void sub_20E8ED108(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20EBCC1EC(v2);
  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20E8ED0D4);
}

uint64_t CV3DPosePredictionSetCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2 || !*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 5;
  if (*(_BYTE *)(a1 + 2908))
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
    *(_QWORD *)(a1 + 3336) = a2;
    *(_QWORD *)(a1 + 3328) = a3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 8));
    return 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 3336) = a2;
    *(_QWORD *)(a1 + 3328) = a3;
  }
  return result;
}

uint64_t CV3PosePredictionInitialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
    return 3;
  if (!a2)
    return 5;
  sub_20EBCC2E8(a1 + 8, a2 + 8, a3);
  return 0;
}

uint64_t CV3DPosePredictionGetPoseForFrame(uint64_t a1, unsigned int *a2, unsigned int *a3, std::__shared_weak_count_vtbl *a4, uint64_t a5, double a6)
{
  if (!a1)
    return 3;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  if (sub_20EBCF5E4((std::recursive_mutex *)(a1 + 8), a2, a3, a4, a5, a6))
    return 0;
  return 5;
}

uint64_t CV3DPosePredictionPushSLAMMetadata(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return 3;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  if (sub_20EBCD368((std::recursive_mutex *)(a1 + 8), a2))
    return 0;
  return 5;
}

uint64_t CV3DPosePredictionPushGyro(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (!a1)
    return 3;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  if (sub_20EBCEA74((std::recursive_mutex *)(a1 + 8), a2, a3, a4, a5))
    return 0;
  return 5;
}

uint64_t CV3DPosePredictionPushAccel(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (!a1)
    return 3;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  if (sub_20EBCEF54((std::recursive_mutex *)(a1 + 8), a2, a3, a4, a5))
    return 0;
  return 5;
}

uint64_t CV3DPosePredictionGetPose(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  result = 5;
  if (a3 >= 0.0 && a2)
  {
    if (sub_20EBCF1F0((std::recursive_mutex *)(a1 + 8), a2, 0, a3))
      return 0;
    else
      return 6;
  }
  return result;
}

uint64_t CV3DPosePredictionRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 844;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

_OWORD *CV3DRaycastDenseFrameCreate(std::__shared_weak_count_vtbl *cf, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  CFErrorRef v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __CFError *v61;
  const std::error_category *v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::error_category_vtbl *v67;
  std::error_category_vtbl *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  CFErrorRef v84;
  unint64_t *v85;
  const std::error_category *v87;
  const void *v88;
  unint64_t *v89;
  const std::error_category *v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _BYTE __p[24];
  uint64_t (**v100)();
  __int128 v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  char v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  CFErrorRef v118;
  __int128 v119;
  std::error_condition v120;
  std::__shared_weak_count *v121;
  uint64_t (**v122)();
  __int128 v123;
  const void *v124;
  std::__shared_weak_count *v125;
  std::error_condition v126;

  if (cf)
  {
    if (a2)
    {
      sub_21015D058(__p, cf, 1, 0);
      v18 = *(uint64_t **)&__p[8];
      v123 = *(_OWORD *)&__p[8];
      if (*(_QWORD *)&__p[16])
      {
        v19 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v122 = &off_24CA1A9C0;
      if (v18)
      {
        v22 = *v18;
        v21 = (std::__shared_weak_count *)v18[1];
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
            if (!v22)
              goto LABEL_14;
            goto LABEL_13;
          }
        }
        if (v22)
LABEL_13:
          sub_2101613B8(v123);
      }
LABEL_14:
      *(_QWORD *)__p = &off_24CA1A9A0;
      v26 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v27 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      sub_21015D058(__p, a2, 1, 0);
      v29 = *(uint64_t **)&__p[8];
      v120.__cat_ = *(const std::error_category **)&__p[8];
      v121 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v30 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      *(_QWORD *)&v120.__val_ = &off_24CA1A9C0;
      if (v29)
      {
        v33 = *v29;
        v32 = (std::__shared_weak_count *)v29[1];
        if (v32)
        {
          v34 = (unint64_t *)&v32->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          do
            v36 = __ldaxr(v34);
          while (__stlxr(v36 - 1, v34));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
            if (!v33)
              goto LABEL_30;
            goto LABEL_29;
          }
        }
        if (v33)
LABEL_29:
          sub_2101613B8((uint64_t)v120.__cat_);
      }
LABEL_30:
      *(_QWORD *)__p = &off_24CA1A9A0;
      v37 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v38 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = sub_21015D950((uint64_t)&v122);
      if (v40 == sub_21015D950((uint64_t)&v120)
        && (v41 = sub_21015DBD0((uint64_t)&v122), v41 == sub_21015DBD0((uint64_t)&v120)))
      {
        if (sub_21015BE44((uint64_t)&v122) == 1717855600)
        {
          if (sub_21015BE44((uint64_t)&v120) == 1717855600)
          {
            v42 = sub_21015D950((uint64_t)&v122);
            v43 = sub_21015DBD0((uint64_t)&v122);
            sub_21015D058(__p, cf, 1, 0);
            sub_21015D058(&v100, a2, 1, 0);
            v44 = v42 | ((unint64_t)v43 << 32);
            v102 = v44;
            *(double *)&v103 = a4;
            v104 = 0uLL;
            *((_QWORD *)&v103 + 1) = 0;
            *(double *)&v105 = a5;
            *((_QWORD *)&v105 + 1) = 0;
            *(double *)&v106 = a6;
            *((double *)&v106 + 1) = a7;
            v107 = 0x3FF0000000000000;
            v108 = 0;
            v109 = 0;
            v116 = vcvtq_f64_f32(*(float32x2_t *)a11.f32);
            v117 = vcvt_hight_f64_f32(a11);
            v115 = vcvt_hight_f64_f32(a10);
            v113 = vcvt_hight_f64_f32(a9);
            v111 = vcvt_hight_f64_f32(a8);
            v114 = vcvtq_f64_f32(*(float32x2_t *)a10.f32);
            v112 = vcvtq_f64_f32(*(float32x2_t *)a9.f32);
            v110 = vcvtq_f64_f32(*(float32x2_t *)a8.f32);
            v45 = operator new(0x148uLL, MEMORY[0x24BEDB6B8]);
            v46 = v45;
            if (v45)
            {
              v45[1] = *(_OWORD *)&__p[8];
              *(_QWORD *)&__p[8] = 0;
              *(_QWORD *)&__p[16] = 0;
              *((_QWORD *)v45 + 4) = &off_24CA1A9A0;
              *(_OWORD *)((char *)v45 + 40) = v101;
              *((_QWORD *)&v101 + 1) = 0;
              *((_QWORD *)v45 + 7) = v44;
              v47 = v106;
              v45[6] = v105;
              v45[7] = v47;
              *((_QWORD *)v45 + 16) = v107;
              v48 = v104;
              v45[4] = v103;
              v45[5] = v48;
              *((_BYTE *)v45 + 136) = 0;
              *((_BYTE *)v45 + 184) = 0;
              v49 = v115;
              v45[16] = v114;
              v45[17] = v49;
              v50 = v117;
              v45[18] = v116;
              v45[19] = v50;
              v51 = v111;
              v45[12] = v110;
              v45[13] = v51;
              v52 = v113;
              v45[14] = v112;
              v45[15] = v52;
              *((_DWORD *)v45 + 80) = 1;
              *(_QWORD *)v45 = &off_24C9B7890;
              *((_QWORD *)v45 + 1) = &off_24CA1A9A0;
              v100 = &off_24CA1A9A0;
              *(_QWORD *)&v101 = 0;
            }
            else
            {
              v92 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
              v100 = &off_24CA1A9A0;
              if (*((_QWORD *)&v101 + 1))
              {
                v93 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
            }
            *(_QWORD *)__p = &off_24CA1A9A0;
            v53 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v54 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            goto LABEL_71;
          }
          *(_QWORD *)__p = operator new(0x50uLL);
          *(_OWORD *)&__p[8] = xmmword_2102DBFA0;
          strcpy(*(char **)__p, "Input confidence has invalid format, should be kCVPixelFormatType_DepthFloat32");
          v61 = (__CFError *)operator new(0x80uLL);
          v118 = v61;
          v119 = xmmword_2102DBF80;
          strcpy((char *)v61, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastDenseFrame.cpp");
          if (!a3)
            goto LABEL_67;
          v90 = std::generic_category();
          *(_QWORD *)&v126.__val_ = 22;
          v126.__cat_ = v90;
          sub_20EA67538(&v126, (uint64_t)__p, (CFErrorRef *)&v124);
          sub_20EA66CF0(&v124, a3);
          v64 = v125;
          if (!v125)
            goto LABEL_65;
          v91 = (unint64_t *)&v125->__shared_owners_;
          do
            v66 = __ldaxr(v91);
          while (__stlxr(v66 - 1, v91));
        }
        else
        {
          *(_QWORD *)__p = operator new(0x50uLL);
          *(_OWORD *)&__p[8] = xmmword_2102DBF90;
          strcpy(*(char **)__p, "Input depth has invalid format, should be kCVPixelFormatType_DepthFloat32");
          v61 = (__CFError *)operator new(0x80uLL);
          v118 = v61;
          v119 = xmmword_2102DBF80;
          strcpy((char *)v61, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastDenseFrame.cpp");
          if (!a3)
            goto LABEL_67;
          v87 = std::generic_category();
          *(_QWORD *)&v126.__val_ = 22;
          v126.__cat_ = v87;
          sub_20EA67538(&v126, (uint64_t)__p, (CFErrorRef *)&v124);
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v88 = v124;
          if (v124)
            CFRetain(v124);
          *a3 = v88;
          v64 = v125;
          if (!v125)
            goto LABEL_65;
          v89 = (unint64_t *)&v125->__shared_owners_;
          do
            v66 = __ldaxr(v89);
          while (__stlxr(v66 - 1, v89));
        }
      }
      else
      {
        *(_QWORD *)__p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_2102DBF70;
        strcpy(*(char **)__p, "Depth,confidence size mismatch");
        v61 = (__CFError *)operator new(0x80uLL);
        v118 = v61;
        v119 = xmmword_2102DBF80;
        strcpy((char *)v61, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastDenseFrame.cpp");
        if (!a3)
          goto LABEL_67;
        v62 = std::generic_category();
        *(_QWORD *)&v126.__val_ = 22;
        v126.__cat_ = v62;
        sub_20EA67538(&v126, (uint64_t)__p, (CFErrorRef *)&v124);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v63 = v124;
        if (v124)
          CFRetain(v124);
        *a3 = v63;
        v64 = v125;
        if (!v125)
        {
LABEL_65:
          if ((SHIBYTE(v119) & 0x80000000) == 0)
          {
LABEL_68:
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v46 = 0;
LABEL_71:
            if (v120.__cat_)
            {
              v68 = v120.__cat_->__vftable;
              v67 = v120.__cat_[1].__vftable;
              if (v67)
              {
                v69 = (unint64_t *)&v67->~error_category_0;
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
                do
                  v71 = __ldaxr(v69);
                while (__stlxr(v71 - 1, v69));
                if (!v71)
                {
                  (*((void (**)(std::error_category_vtbl *))v67->~error_category + 2))(v67);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v67);
                  if (!v68)
                    goto LABEL_79;
                  goto LABEL_78;
                }
              }
              if (v68)
LABEL_78:
                sub_210161594((uint64_t)v120.__cat_);
            }
LABEL_79:
            *(_QWORD *)&v120.__val_ = &off_24CA1A9A0;
            v72 = v121;
            if (!v121)
              goto LABEL_83;
            v73 = (unint64_t *)&v121->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
              v75 = (uint64_t *)v123;
              if (!(_QWORD)v123)
                goto LABEL_91;
            }
            else
            {
LABEL_83:
              v75 = (uint64_t *)v123;
              if (!(_QWORD)v123)
                goto LABEL_91;
            }
            v77 = *v75;
            v76 = (std::__shared_weak_count *)v75[1];
            if (v76)
            {
              v78 = (unint64_t *)&v76->__shared_owners_;
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
              do
                v80 = __ldaxr(v78);
              while (__stlxr(v80 - 1, v78));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
                if (!v77)
                  goto LABEL_91;
                goto LABEL_90;
              }
            }
            if (v77)
LABEL_90:
              sub_210161594(v123);
LABEL_91:
            v122 = &off_24CA1A9A0;
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
            if (*((_QWORD *)&v123 + 1))
            {
              v82 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            return v46;
          }
          v61 = v118;
LABEL_67:
          operator delete(v61);
          goto LABEL_68;
        }
        v65 = (unint64_t *)&v125->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
      }
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      goto LABEL_65;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBFB0;
    strcpy(*(char **)__p, "Input confidence is NULL");
    v56 = (char *)operator new(0x80uLL);
    v122 = (uint64_t (**)())v56;
    v123 = xmmword_2102DBF80;
    strcpy(v56, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastDenseFrame.cpp");
    if (!a3)
      goto LABEL_107;
    *(_QWORD *)&v120.__val_ = 22;
    v120.__cat_ = std::generic_category();
    sub_20EA67538(&v120, (uint64_t)__p, &v118);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v84 = v118;
    if (v118)
      CFRetain(v118);
    *a3 = v84;
    v58 = (std::__shared_weak_count *)v119;
    if (!(_QWORD)v119)
      goto LABEL_105;
    v85 = (unint64_t *)(v119 + 8);
    do
      v60 = __ldaxr(v85);
    while (__stlxr(v60 - 1, v85));
  }
  else
  {
    __p[23] = 19;
    strcpy(__p, "Input depth is NULL");
    v56 = (char *)operator new(0x80uLL);
    v122 = (uint64_t (**)())v56;
    v123 = xmmword_2102DBF80;
    strcpy(v56, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastDenseFrame.cpp");
    if (!a3)
    {
LABEL_107:
      operator delete(v56);
      goto LABEL_108;
    }
    *(_QWORD *)&v120.__val_ = 22;
    v120.__cat_ = std::generic_category();
    sub_20EA67538(&v120, (uint64_t)__p, &v118);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v57 = v118;
    if (v118)
      CFRetain(v118);
    *a3 = v57;
    v58 = (std::__shared_weak_count *)v119;
    if (!(_QWORD)v119)
      goto LABEL_105;
    v59 = (unint64_t *)(v119 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
  }
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if ((SHIBYTE(v123) & 0x80000000) == 0)
      goto LABEL_108;
    goto LABEL_106;
  }
LABEL_105:
  if (SHIBYTE(v123) < 0)
  {
LABEL_106:
    v56 = (char *)v122;
    goto LABEL_107;
  }
LABEL_108:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8EDEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  sub_20E86665C(v23 - 144);
  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  sub_21015CB94((_QWORD *)(v23 - 192));
  sub_21015CB94((_QWORD *)(v23 - 168));
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastDenseFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 320);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

double CV3DRaycastIntentCreate(__n128 a1, int8x16_t a2)
{
  char *v2;
  double result;
  __n128 v4;

  v2 = (char *)operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    result = 5.27765667e13;
    *((_DWORD *)v2 + 12) = 3;
    *((_QWORD *)v2 + 9) = 0;
    *(_QWORD *)(v2 + 60) = 0;
    *(_QWORD *)(v2 + 52) = 0;
    v2[68] = 0;
    v4 = a1;
    v4.n128_u32[3] = a2.i32[0];
    *(__n128 *)(v2 + 8) = v4;
    *((_QWORD *)v2 + 4) = 0x42C8000041A00000;
    *((_QWORD *)v2 + 5) = 0xF00000002;
    *((int8x8_t *)v2 + 3) = vext_s8(*(int8x8_t *)a2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL);
    *((_DWORD *)v2 + 20) = 1;
    *(_QWORD *)v2 = &off_24C9B7900;
  }
  return result;
}

uint64_t CV3DRaycastIntentRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 80);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DRaycastIntentSetMaxDistance(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a3 > 0.0)
    {
      *(float *)(a1 + 36) = a3;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DB470;
    strcpy((char *)__p[0], "maxDistance must be positive");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8EE428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastIntentSetAperture(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a3 > 0.0)
    {
      *(float *)(a1 + 32) = a3;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFE0;
    strcpy((char *)__p[0], "Aperture must be positive");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8EE748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastIntentEnableTracking(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  char __p[21];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2)
      return sub_20E9F93B8(a1, a2, a3);
    v14 = 18;
    strcpy(__p, "Input UUID is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    v14 = 20;
    strcpy(__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (v14 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8EEA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastIntentSetConsideredOrientations(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 < 4)
    {
      *(_DWORD *)(a1 + 48) = a2;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBF70;
    strcpy((char *)__p[0], "Desired orientation is invalid");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8EED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastIntentSetConsideredGeometry(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 == 1 || a2 == 15)
    {
      *(_DWORD *)(a1 + 44) = a2;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFF0;
    strcpy((char *)__p[0], "Geometry to consider is invalid");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8EF050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastIntentSetExtentCheckForTrackedPlanes(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 <= 4 && ((1 << a2) & 0x16) != 0)
    {
      *(_DWORD *)(a1 + 40) = a2;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC000;
    strcpy((char *)__p[0], "Input extent check is invalid");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input intent is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastIntent.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8EF384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastResultListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t CV3DRayCastResultsLength(uint64_t a1)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
}

uint64_t CV3DRayCastResultAtIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 16) - v2) >> 4) <= a2)
    {
      return 0;
    }
    else if (v2)
    {
      return v2 + 144 * a2 - 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFUUIDBytes *CV3DRaycastResultsIdentifier(CFUUIDBytes *a1)
{
  CFUUIDBytes *v1;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  v1 = a1;
  if (!a1)
    return v1;
  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, v1[2]);
  sub_20EA68D1C((std::__shared_weak_count_vtbl **)&cf, v3, 0);
  v1 = (CFUUIDBytes *)cf;
  if (cf)
    CFRetain(cf);
  v4 = v9;
  if (!v9)
    return v1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v1;
}

void sub_20E8EF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastResultMapRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DRaycastResultMapRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DRayCastResultMapLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

__CFArray *CV3DRayCastResultMapIds2(_QWORD *a1)
{
  CFIndex v1;
  __CFArray *Mutable;
  CFUUIDBytes *v4;
  CFUUIDBytes **v5;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFUUIDBytes *v12;
  CFUUIDBytes **v13;
  BOOL v14;
  void *value;
  std::__shared_weak_count *v16;

  v1 = a1[3];
  if (v1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, MEMORY[0x24BDBD690]);
    if (!Mutable)
      return Mutable;
    v4 = (CFUUIDBytes *)a1[1];
    v5 = (CFUUIDBytes **)(a1 + 2);
    if (v4 == (CFUUIDBytes *)(a1 + 2))
      return Mutable;
    while (1)
    {
      Default = CFAllocatorGetDefault();
      v8 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, v4[2]);
      sub_20EA68D1C((std::__shared_weak_count_vtbl **)&value, v8, 0);
      CFArrayAppendValue(Mutable, value);
      v9 = v16;
      if (!v16)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v12 = *(CFUUIDBytes **)&v4->byte8;
        if (!v12)
        {
          do
          {
LABEL_14:
            v13 = *(CFUUIDBytes ***)&v4[1].byte0;
            v14 = *v13 == v4;
            v4 = (CFUUIDBytes *)v13;
          }
          while (!v14);
          goto LABEL_5;
        }
      }
      else
      {
LABEL_10:
        v12 = *(CFUUIDBytes **)&v4->byte8;
        if (!v12)
          goto LABEL_14;
      }
      do
      {
        v13 = (CFUUIDBytes **)v12;
        v12 = *(CFUUIDBytes **)&v12->byte0;
      }
      while (v12);
LABEL_5:
      v4 = (CFUUIDBytes *)v13;
      if (v13 == v5)
        return Mutable;
    }
  }
  return 0;
}

void sub_20E8EF69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *CV3DRayCastResultListFromId(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  const std::error_category *v28;
  CFTypeRef v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v34;
  CFTypeRef v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  char __p[22];
  char v40;
  CFTypeRef cf;
  std::__shared_weak_count *v42;
  std::error_condition v43;

  if (!a2 || (v6 = CFUUIDGetTypeID(), CFGetTypeID(a2) != v6))
  {
    v40 = 21;
    strcpy(__p, "identifier is invalid");
    v34 = (char *)operator new(0x80uLL);
    strcpy(v34, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v43.__val_ = 22;
      v43.__cat_ = std::generic_category();
      sub_20EA67538(&v43, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v35 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v35;
      v36 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    operator delete(v34);
    if ((v40 & 0x80000000) == 0)
      return 0;
LABEL_67:
    operator delete(*(void **)__p);
    return 0;
  }
  *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
  v7 = sub_20EA68D10((uint64_t)__p);
  v11 = *(unsigned __int8 **)(a1 + 16);
  v9 = (unsigned __int8 *)(a1 + 16);
  v10 = v11;
  if (!v11)
    goto LABEL_44;
  v12 = BYTE1(v7);
  v13 = v7;
  v14 = BYTE2(v7);
  v15 = BYTE3(v7);
  v16 = BYTE4(v7);
  v17 = BYTE5(v7);
  v18 = BYTE6(v7);
  v19 = HIBYTE(v7);
  v20 = v8;
  v21 = BYTE1(v8);
  v22 = BYTE2(v8);
  v23 = BYTE3(v8);
  v24 = v9;
  v25 = HIBYTE(v8);
  do
  {
    LODWORD(v8) = v10[32];
    v26 = v13;
    if ((_DWORD)v8 != v13)
      goto LABEL_22;
    LODWORD(v8) = v10[33];
    v26 = v12;
    if ((_DWORD)v8 != v12)
      goto LABEL_22;
    LODWORD(v8) = v10[34];
    v26 = v14;
    if ((_DWORD)v8 != v14)
      goto LABEL_22;
    LODWORD(v8) = v10[35];
    v26 = v15;
    if ((_DWORD)v8 != v15)
      goto LABEL_22;
    LODWORD(v8) = v10[36];
    v26 = v16;
    if ((_DWORD)v8 != v16)
      goto LABEL_22;
    LODWORD(v8) = v10[37];
    v26 = v17;
    if ((_DWORD)v8 != v17)
      goto LABEL_22;
    LODWORD(v8) = v10[38];
    v26 = v18;
    if ((_DWORD)v8 != v18)
      goto LABEL_22;
    LODWORD(v8) = v10[39];
    v26 = v19;
    if ((_DWORD)v8 != (_DWORD)v19)
      goto LABEL_22;
    LODWORD(v8) = v10[40];
    v26 = v20;
    if ((_DWORD)v8 != v20)
      goto LABEL_22;
    LODWORD(v8) = v10[41];
    v26 = v21;
    if ((_DWORD)v8 != v21)
      goto LABEL_22;
    LODWORD(v8) = v10[42];
    v26 = v22;
    if ((_DWORD)v8 != v22)
      goto LABEL_22;
    LODWORD(v8) = v10[43];
    v26 = v23;
    if ((_DWORD)v8 != v23)
      goto LABEL_22;
    LODWORD(v8) = v10[44];
    v26 = BYTE4(v8);
    if ((_DWORD)v8 != BYTE4(v8))
      goto LABEL_22;
    LODWORD(v8) = v10[45];
    v26 = BYTE5(v8);
    if ((_DWORD)v8 == BYTE5(v8)
      && (LODWORD(v8) = v10[46], v26 = BYTE6(v8), (_DWORD)v8 == BYTE6(v8))
      && (LODWORD(v8) = v10[47], v26 = v25, (_DWORD)v8 == (_DWORD)v25))
    {
      v24 = v10;
    }
    else
    {
LABEL_22:
      if (v8 < v26)
        v10 += 8;
      else
        v24 = v10;
    }
    v10 = *(unsigned __int8 **)v10;
  }
  while (v10);
  if (v24 == v9)
    goto LABEL_44;
  LODWORD(v8) = v24[32];
  if ((_DWORD)v8 != v13)
    goto LABEL_43;
  LODWORD(v8) = v24[33];
  v13 = v12;
  if ((_DWORD)v8 != v12)
    goto LABEL_43;
  LODWORD(v8) = v24[34];
  v13 = v14;
  if ((_DWORD)v8 != v14)
    goto LABEL_43;
  LODWORD(v8) = v24[35];
  v13 = v15;
  if ((_DWORD)v8 != v15)
    goto LABEL_43;
  LODWORD(v8) = v24[36];
  v13 = v16;
  if ((_DWORD)v8 != v16)
    goto LABEL_43;
  LODWORD(v8) = v24[37];
  v13 = v17;
  if ((_DWORD)v8 != v17)
    goto LABEL_43;
  LODWORD(v8) = v24[38];
  v13 = v18;
  if ((_DWORD)v8 != v18)
    goto LABEL_43;
  LODWORD(v8) = v24[39];
  v13 = v19;
  if ((_DWORD)v8 != (_DWORD)v19)
    goto LABEL_43;
  LODWORD(v8) = v24[40];
  v13 = v20;
  if ((_DWORD)v8 != v20)
    goto LABEL_43;
  LODWORD(v8) = v24[41];
  v13 = v21;
  if ((_DWORD)v8 != v21)
    goto LABEL_43;
  LODWORD(v8) = v24[42];
  v13 = v22;
  if ((_DWORD)v8 != v22)
    goto LABEL_43;
  LODWORD(v8) = v24[43];
  v13 = v23;
  if ((_DWORD)v8 != v23)
    goto LABEL_43;
  LODWORD(v8) = v24[44];
  v13 = BYTE4(v8);
  if ((_DWORD)v8 != BYTE4(v8)
    || (LODWORD(v8) = v24[45], v13 = BYTE5(v8), (_DWORD)v8 != BYTE5(v8))
    || (LODWORD(v8) = v24[46], v13 = BYTE6(v8), (_DWORD)v8 != BYTE6(v8))
    || (LODWORD(v8) = v24[47], v13 = v25, (_DWORD)v8 != (_DWORD)v25))
  {
LABEL_43:
    if (v13 < v8)
    {
LABEL_44:
      v40 = 20;
      strcpy(__p, "identifier not found");
      v27 = (char *)operator new(0x80uLL);
      strcpy(v27, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastResult.cpp");
      if (a3)
      {
        v28 = std::generic_category();
        *(_QWORD *)&v43.__val_ = 22;
        v43.__cat_ = v28;
        sub_20EA67538(&v43, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v29 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v29;
        v30 = v42;
        if (v42)
        {
          v31 = (unint64_t *)&v42->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      operator delete(v27);
      if ((v40 & 0x80000000) == 0)
        return 0;
      goto LABEL_67;
    }
  }
  return v24 + 40;
}

void sub_20E8EFC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 CV3DRaycastResultTransformationToWorld(uint64_t a1)
{
  return *(__n128 *)(a1 + 8);
}

CFTypeRef CV3DRaycastResultPlaneIdentifier(CFUUIDBytes *a1)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  if (!a1[9].byte0)
    return 0;
  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, a1[8]);
  sub_20EA68D1C((std::__shared_weak_count_vtbl **)&cf, v3, 0);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_20E8EFD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastResultOriginatedFrom(uint64_t a1)
{
  char v1;

  if ((*(_DWORD *)(a1 + 72) - 1) >= 8)
    v1 = 0;
  else
    v1 = 0x800000004000201uLL >> (8 * (*(_BYTE *)(a1 + 72) - 1));
  return v1 & 0xF;
}

uint64_t CV3DRaycastResultExtentChecked(uint64_t a1)
{
  unint64_t v1;

  if (*(_DWORD *)(a1 + 72) != 1)
    return 0;
  v1 = 0x400020100uLL >> (8 * *(_DWORD *)(a1 + 76));
  if (*(_DWORD *)(a1 + 76) > 4u)
    LOBYTE(v1) = 0;
  return v1;
}

uint64_t CV3DRaycastGetResultOrientation(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 80);
  if (v1 >= 3)
    LOBYTE(v1) = 0;
  return v1;
}

void CV3DRaycastSessionDebugInfo(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v11;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input session is NULL");
    v4 = (char *)operator new(0x88uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession+Private.cpp");
    if (!a3)
      goto LABEL_26;
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v5;
    v6 = v14;
    if (!v14)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    goto LABEL_21;
  }
  if (a2)
  {
    sub_20E962B48(a1 + 8, a2);
    return;
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
  strcpy((char *)__p[0], "Input debugInfo is NULL");
  v4 = (char *)operator new(0x88uLL);
  v11 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession+Private.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v9;
    v6 = v14;
    if (!v14)
      goto LABEL_25;
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
LABEL_21:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
LABEL_25:
    v4 = v11;
  }
LABEL_26:
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_20E8F0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DRaycastSessionCreateWithConfig(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  char *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  char __p[21];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    v3 = (char *)operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
    v4 = v3;
    if (v3)
    {
      sub_20E95EC50(v3 + 8, a1);
      *((_DWORD *)v4 + 22) = 1;
      *(_QWORD *)v4 = &off_24C9B1E80;
    }
    return v4;
  }
  else
  {
    v14 = 20;
    strcpy(__p, "Input config is NULL");
    v7 = (char *)operator new(0x80uLL);
    v12 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 = v12;
    }
    operator delete(v7);
    if (v14 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E8F0258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8F0294(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20E8F023CLL);
}

uint64_t CV3DRaycastSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DRaycastSessionSetOnTrackableUpdateCallback(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[23];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (!a1)
  {
    v22 = 21;
    strcpy(__p, "Input Session is NULL");
    v11 = (char *)operator new(0x80uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v22 & 0x80000000) == 0)
      return 0;
    goto LABEL_34;
  }
  if (!a2)
  {
    strcpy(__p, "Input callback is NULL");
    v22 = 22;
    v16 = (char *)operator new(0x80uLL);
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v17;
      v18 = v24;
      if (v24)
      {
        v19 = (unint64_t *)&v24->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    operator delete(v16);
    if ((v22 & 0x80000000) == 0)
      return 0;
LABEL_34:
    operator delete(*(void **)__p);
    return 0;
  }
  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C9AFFA0;
  v6[3] = _Block_copy(a2);
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6 + 3;
  *(_QWORD *)(a1 + 24) = v6;
  if (!v7)
    return 1;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return 1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 1;
}

void sub_20E8F0628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastSessionRegisterOnTrackableUpdateCallback(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char __p[23];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2)
    {
      sub_20E962A2C(a1 + 8, a2);
      return 1;
    }
    strcpy(__p, "Input callback is NULL");
    v16 = 22;
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v16 = 21;
    strcpy(__p, "Input Session is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E8F0940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastSessionSetAnchoringFunctors(_QWORD *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  unint64_t *v23;
  CFTypeRef v24;
  unint64_t *v25;
  char *v26;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v8 = operator new(0x20uLL);
        v8[1] = 0;
        v8[2] = 0;
        *v8 = &off_24C9AFF00;
        v8[3] = _Block_copy(a2);
        v9 = (std::__shared_weak_count *)a1[8];
        a1[7] = v8 + 3;
        a1[8] = v8;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v12 = operator new(0x20uLL);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = &off_24C9AFF50;
        v12[3] = _Block_copy(a3);
        v13 = (std::__shared_weak_count *)a1[10];
        a1[9] = v12 + 3;
        a1[10] = v12;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        return 1;
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DB470;
      strcpy((char *)__p[0], "RemoveAnchor functor is NULL");
      v17 = (char *)operator new(0x80uLL);
      v26 = v17;
      strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
      if (a4)
      {
        *(_QWORD *)&v30.__val_ = 22;
        v30.__cat_ = std::generic_category();
        sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v24 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v24;
        v19 = v29;
        if (!v29)
          goto LABEL_43;
        v25 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v25);
        while (__stlxr(v21 - 1, v25));
LABEL_41:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
LABEL_43:
        v17 = v26;
      }
    }
    else
    {
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DBFE0;
      strcpy((char *)__p[0], "AddAnchor functor is NULL");
      v17 = (char *)operator new(0x80uLL);
      v26 = v17;
      strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
      if (a4)
      {
        *(_QWORD *)&v30.__val_ = 22;
        v30.__cat_ = std::generic_category();
        sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v22 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v22;
        v19 = v29;
        if (!v29)
          goto LABEL_43;
        v23 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v23);
        while (__stlxr(v21 - 1, v23));
        goto LABEL_41;
      }
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v17 = (char *)operator new(0x80uLL);
    v26 = v17;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v18;
      v19 = v29;
      if (!v29)
        goto LABEL_43;
      v20 = (unint64_t *)&v29->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_41;
    }
  }
  operator delete(v17);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F0DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DRaycastSessionAttemptWithIntent(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (!a1)
  {
    v13 = 21;
    strcpy(__p, "Input Session is NULL");
    v4 = (char *)operator new(0x80uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (!a3)
      goto LABEL_26;
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v5;
    v6 = v15;
    if (!v15)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    goto LABEL_21;
  }
  if (a2)
  {
    sub_20E961E1C(a1 + 8, a2);
    return;
  }
  v13 = 20;
  strcpy(__p, "Input intent is NULL");
  v4 = (char *)operator new(0x80uLL);
  v11 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v9;
    v6 = v15;
    if (!v15)
      goto LABEL_25;
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
LABEL_21:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
LABEL_25:
    v4 = v11;
  }
LABEL_26:
  operator delete(v4);
  if (v13 < 0)
    operator delete(*(void **)__p);
}

void sub_20E8F10B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastPushJasperPointCloud(uint64_t a1, uint64_t a2, CFTypeRef *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, double a8)
{
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *p_shared_owners;
  char *v17;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
  {
    if (a2)
      return sub_20E95F3E0(a1 + 8, a2, a4, a5, a6, a7, a8);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFE0;
    strcpy((char *)__p[0], "Input point cloud is NULL");
    v10 = (char *)operator new(0x80uLL);
    v17 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v15;
      v12 = v20;
      if (!v20)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
LABEL_21:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_25:
      v10 = v17;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v10 = (char *)operator new(0x80uLL);
    v17 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v20;
      if (!v20)
        goto LABEL_25;
      v13 = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_21;
    }
  }
  operator delete(v10);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DRaycastPushSlamState(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      return sub_20E95F568(a1 + 8, a2, a3);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
    strcpy((char *)__p[0], "Input SLAM state is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F164C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastPushDenseFrame(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char __p[22];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336) + 88, a2 + 8);
      return 1;
    }
    v16 = 19;
    strcpy(__p, "Input frame is NULL");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v16 = 21;
    strcpy(__p, "Input Session is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E8F196C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DRaycastInvalidateDenseFrame(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 336) + 256;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, __p);
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Input session is NULL");
    v5 = (char *)operator new(0x80uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_20E8F1B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastPushPlanes(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  char __p[22];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2)
      return sub_20E960194(a1 + 8);
    v14 = 20;
    strcpy(__p, "Input planes is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    v14 = 21;
    strcpy(__p, "Input Session is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (v14 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8F1DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastPushChunks(uint64_t a1, uint64_t a2, CFTypeRef *a3, int32x4_t a4, int32x4_t a5, int8x16_t a6, float32x4_t a7)
{
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  char __p[22];
  char v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
  {
    if (a2)
      return sub_20E96110C(a1 + 8, a4, a5, a6, a7);
    v18 = 20;
    strcpy(__p, "Input chunks is NULL");
    v9 = (char *)operator new(0x80uLL);
    v16 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v11 = v20;
      if (!v20)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
LABEL_21:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
LABEL_25:
      v9 = v16;
    }
  }
  else
  {
    v18 = 21;
    strcpy(__p, "Input Session is NULL");
    v9 = (char *)operator new(0x80uLL);
    v16 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v20;
      if (!v20)
        goto LABEL_25;
      v12 = (unint64_t *)&v20->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_21;
    }
  }
  operator delete(v9);
  if (v18 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8F20A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DRaycastRemoveTrackableRay(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      return sub_20E9627C8((_QWORD *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
    strcpy((char *)__p[0], "Input identifier is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v5 = (char *)operator new(0x80uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F2370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DRaycastTriggerUpdateFromTrackableIntentsAsync(uint64_t a1, CFTypeRef *a2, int32x4_t a3, int32x4_t a4, int8x16_t a5, float32x4_t a6, double a7)
{
  float32x2_t v9;
  int8x16_t v10;
  float32x2_t v11;
  __int128 v12;
  int8x16_t v13;
  int32x4_t v14;
  int32x4_t v15;
  __int128 v16;
  __int128 v17;
  int8x16_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v25;
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v31;
  __int128 v32;
  int32x4_t v33;
  int32x4_t v34;
  char *v35;
  char __p[22];
  char v37;
  CFErrorRef v38;
  std::__shared_weak_count *v39;
  std::error_condition v40;

  if (a1)
  {
    v9 = (float32x2_t)vzip1q_s32(a3, a4).u64[0];
    v10 = (int8x16_t)vnegq_f32(a6);
    v11 = vmul_n_f32(v9, *(float *)v10.i32);
    *(float32x2_t *)&v12 = v9;
    DWORD2(v12) = a5.i32[0];
    v13 = (int8x16_t)vtrn2q_s32(a3, a4);
    v13.i32[2] = a5.i32[1];
    v14 = vzip2q_s32(a3, a4);
    v15 = v14;
    v15.i32[2] = a5.i32[2];
    *(float32x2_t *)&v16 = vmls_laneq_f32(vmls_lane_f32(v11, *(float32x2_t *)v13.i8, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)v14.i8, a6, 2);
    HIDWORD(v12) = v13.i32[0];
    v17 = v12;
    v11.i32[0] = vdupq_laneq_s32(v15, 2).u32[0];
    v18 = vextq_s8(vextq_s8(v13, v13, 0xCuLL), (int8x16_t)v15, 8uLL);
    *((_QWORD *)&v16 + 1) = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.i8, 1), *(float32x2_t *)a6.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL)).u32[0]);
    v15.i64[0] = __PAIR64__(v18.u32[0], v13.u32[0]);
    v15.i64[1] = v18.u32[1];
    v34 = v15;
    v15.i64[0] = v18.i64[1];
    v15.i64[1] = v11.u32[0];
    HIDWORD(v17) = 0;
    v32 = v17;
    v33 = v15;
    v31 = v16;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 656);
    v20 = operator new(0x60uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = &off_24C9B3068;
    *((_OWORD *)v20 + 2) = v32;
    *((int32x4_t *)v20 + 3) = v34;
    *((int32x4_t *)v20 + 4) = v33;
    *((_OWORD *)v20 + 5) = v31;
    *(_QWORD *)&__p[8] = v20;
    *((double *)v20 + 3) = a7;
    *(_QWORD *)__p = v20 + 3;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v19 + 88) + 16))(v19 + 88, __p);
    v21 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v37 = 21;
    strcpy(__p, "Input Session is NULL");
    v25 = (char *)operator new(0x80uLL);
    v35 = v25;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRaycast/CV3DRaycastSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_20EA67538(&v40, (uint64_t)__p, &v38);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v26 = v38;
      if (v38)
        CFRetain(v38);
      *a2 = v26;
      v27 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 = v35;
    }
    operator delete(v25);
    if (v37 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_20E8F2648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8F2684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8F2698(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8F26A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8F26D8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_20E8F26FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8F270C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8F273C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_20E8F2760(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8F2770(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8F27A0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

BOOL CV3DRaycastSessionConfigurationEnableDebug(uint64_t a1)
{
  if (a1)
    *(_BYTE *)(a1 + 144) = 1;
  return a1 != 0;
}

_QWORD *CV3DRaycastSessionConfigurationCreate()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;

  v0 = operator new(0x98uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    v0[18] = 0;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *(_OWORD *)v0 = 0u;
    v9 = xmmword_2102DC1D0;
    sub_20EF4A7C0((uint64_t)v3, (uint64_t)&v9);
    v1[2] = &off_24C9F1578;
    *(_OWORD *)(v1 + 3) = *(_OWORD *)&v3[8];
    *(_OWORD *)(v1 + 5) = v4;
    *(_OWORD *)(v1 + 7) = v5;
    v1[9] = v6;
    *((_DWORD *)v1 + 20) = v7;
    *(_QWORD *)((char *)v1 + 84) = v8;
    v1[12] = 0x1E000000280;
    v1[13] = 0x43F0000044200000;
    *((_BYTE *)v1 + 112) = 0;
    v1[15] = 10;
    v1[16] = 0x3E8000003C23D70ALL;
    *((_DWORD *)v1 + 34) = 1036831949;
    *((_BYTE *)v1 + 140) = 0;
    *((_BYTE *)v1 + 144) = 0;
    *((_DWORD *)v1 + 37) = 1;
    *v1 = &off_24C9B7820;
    v1[1] = &off_24C9F15F0;
  }
  return v1;
}

uint64_t sub_20E8F28E8(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DRaycastSessionConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 148);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DRaycastSessionConfigurationSetCamera(uint64_t a1, unsigned int a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD v23[4];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(float *)v23 = a4;
    *(float *)&v23[1] = a5;
    *(float *)&v23[2] = a6;
    *(float *)&v23[3] = a7;
    sub_20EF4A7C0((uint64_t)v16, (uint64_t)v23);
    v10 = v18;
    v11 = v19;
    v24 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    *(_OWORD *)(a1 + 24) = v17;
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_DWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 84) = v14;
    *(_QWORD *)(a1 + 96) = a2 | (unint64_t)(a3 << 32);
    *(float *)(a1 + 104) = (float)a2;
    *(float *)(a1 + 108) = (float)a3;
  }
  return a1 != 0;
}

BOOL CV3DRaycastSessionConfigurationEnableDeterministicMode(uint64_t a1)
{
  if (a1)
    *(_BYTE *)(a1 + 112) = 1;
  return a1 != 0;
}

uint64_t CV3DReconSlamMetadataCreateFromSlamState(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *v12;
  char *v13;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (v4)
        return sub_20E8F2D1C(a1, (uint64_t *)(v4 + 4272), a2);
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBF70;
    strcpy((char *)__p[0], "Slam state is missing metadata");
    v6 = (char *)operator new(0x80uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v16;
      if (!v16)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_22:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_26:
      v6 = v13;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "Slam state is NULL");
    v6 = (char *)operator new(0x80uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v8 = v16;
      if (!v16)
        goto LABEL_26;
      v12 = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
      goto LABEL_22;
    }
  }
  operator delete(v6);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F2CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8F2D1C(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  double *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  unsigned int v26;
  float v27;
  __int128 v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  unsigned int v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  unsigned __int8 *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  __int128 v47;
  unsigned int v48;
  float v49;
  __int128 v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  unsigned int v56;
  __int128 v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  void *v61;
  int v62;
  unsigned __int8 *v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int v70;
  unsigned __int8 *v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  unsigned __int8 *v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  void *__s1[2];
  uint64_t v84;
  _BYTE __p[32];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v6 = CV3DReconSlamMetadataCreate();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = **(_QWORD **)(a1 + 8);
  if (!CV3DReconSlamMetadataSetIsInitialized())
    return 0;
  if (!*(_QWORD *)(a1 + 8)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp", 67, (uint64_t)"rs == kCV3DSLAMReturnNoError", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((CV3DReconSlamMetadataSetTrackingIsNominal() & 1) == 0)
    return 0;
  v9 = *(_QWORD **)(a1 + 8);
  if (!v9 || !*v9)
  {
    __p[23] = 16;
    strcpy(__p, "Empty slam state");
    sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (!CV3DReconSlamMetadataSet3dofStatus() || !CV3DReconSlamMetadataSetMapSize())
    return 0;
  v10 = *(uint64_t **)(a1 + 8);
  if (!v10)
    goto LABEL_30;
  v11 = *v10;
  v12 = (double *)v10[4];
  v13 = (std::__shared_weak_count *)v10[5];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = !v12 || *v12 >= *(double *)(v11 + 40);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v16)
  {
LABEL_30:
    sub_20E8610C0(__p, "Failed to get SlamState timestamp");
    sub_20E8610C0(__s1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
    sub_20E8EAB0C(a3, 0x16u, (uint64_t)__p);
    if (SHIBYTE(v84) < 0)
      operator delete(__s1[0]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  if (!CV3DReconSlamMetadataSetTimestamp()
    || !CV3DReconSlamMetadataSetReinitializeAttempts())
  {
    return 0;
  }
  sub_20E8610C0(__p, "com.apple.arkitd.anchorGroup.mesh");
  if ((__p[23] & 0x80000000) != 0)
  {
    sub_20E860C04(__s1, *(void **)__p, *(unint64_t *)&__p[8]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)__p;
    v84 = *(_QWORD *)&__p[16];
  }
  v21 = a2[3];
  v22 = a2[4];
  while (v21 != v22)
  {
    *(float *)&v23 = *(double *)(v21 + 16);
    *(float *)&v24 = *(double *)(v21 + 40);
    *(_QWORD *)&v25 = __PAIR64__(v24, v23);
    *(float *)&v26 = *(double *)(v21 + 64);
    *((_QWORD *)&v25 + 1) = v26;
    v27 = *(double *)(v21 + 24);
    *(float *)&v28 = v27;
    v29 = *(double *)(v21 + 48);
    *(float *)&v30 = *(double *)(v21 + 72);
    *((float *)&v28 + 1) = v29;
    *((_QWORD *)&v28 + 1) = v30;
    *(float *)&v31 = *(double *)(v21 + 32);
    *(float *)&v32 = *(double *)(v21 + 56);
    *(_QWORD *)&v33 = __PAIR64__(v32, v31);
    *(float *)&v34 = *(double *)(v21 + 80);
    *((_QWORD *)&v33 + 1) = v34;
    *(float32x2_t *)&v35 = vcvt_f32_f64(*(float64x2_t *)(v21 + 88));
    *(float *)&v36 = *(double *)(v21 + 104);
    *((_QWORD *)&v35 + 1) = __PAIR64__(1.0, v36);
    *(_OWORD *)__p = *(_OWORD *)v21;
    *(_OWORD *)&__p[16] = v25;
    v86 = v28;
    v87 = v33;
    v88 = v35;
    if (*(_BYTE *)(v21 + 408))
    {
      v37 = HIBYTE(v84);
      if (v84 >= 0)
        v38 = (void *)HIBYTE(v84);
      else
        v38 = __s1[1];
      v39 = (void *)*(unsigned __int8 *)(v21 + 407);
      v40 = (char)v39;
      if ((char)v39 < 0)
        v39 = *(void **)(v21 + 392);
      if (v38 != v39)
        goto LABEL_40;
      if (v40 >= 0)
        v41 = (unsigned __int8 *)(v21 + 384);
      else
        v41 = *(unsigned __int8 **)(v21 + 384);
      if (v84 < 0)
      {
        if (memcmp(__s1[0], v41, (size_t)__s1[1]))
          goto LABEL_40;
      }
      else if (HIBYTE(v84))
      {
        v42 = __s1;
        while (*(unsigned __int8 *)v42 == *v41)
        {
          v42 = (void **)((char *)v42 + 1);
          ++v41;
          if (!--v37)
            goto LABEL_57;
        }
        goto LABEL_40;
      }
    }
LABEL_57:
    if ((CV3DReconSlamMetadataAddUpdatedAnchor() & 1) == 0)
      goto LABEL_129;
LABEL_40:
    v21 += 416;
  }
  v43 = *a2;
  v44 = a2[1];
  while (v43 != v44)
  {
    *(float *)&v45 = *(double *)(v43 + 16);
    *(float *)&v46 = *(double *)(v43 + 40);
    *(_QWORD *)&v47 = __PAIR64__(v46, v45);
    *(float *)&v48 = *(double *)(v43 + 64);
    *((_QWORD *)&v47 + 1) = v48;
    v49 = *(double *)(v43 + 24);
    *(float *)&v50 = v49;
    v51 = *(double *)(v43 + 48);
    *(float *)&v52 = *(double *)(v43 + 72);
    *((float *)&v50 + 1) = v51;
    *((_QWORD *)&v50 + 1) = v52;
    *(float *)&v53 = *(double *)(v43 + 32);
    *(float *)&v54 = *(double *)(v43 + 56);
    *(_QWORD *)&v55 = __PAIR64__(v54, v53);
    *(float *)&v56 = *(double *)(v43 + 80);
    *((_QWORD *)&v55 + 1) = v56;
    *(float32x2_t *)&v57 = vcvt_f32_f64(*(float64x2_t *)(v43 + 88));
    *(float *)&v58 = *(double *)(v43 + 104);
    *((_QWORD *)&v57 + 1) = __PAIR64__(1.0, v58);
    *(_OWORD *)__p = *(_OWORD *)v43;
    *(_OWORD *)&__p[16] = v47;
    v86 = v50;
    v87 = v55;
    v88 = v57;
    if (*(_BYTE *)(v43 + 408))
    {
      v59 = HIBYTE(v84);
      if (v84 >= 0)
        v60 = (void *)HIBYTE(v84);
      else
        v60 = __s1[1];
      v61 = (void *)*(unsigned __int8 *)(v43 + 407);
      v62 = (char)v61;
      if ((char)v61 < 0)
        v61 = *(void **)(v43 + 392);
      if (v60 != v61)
        goto LABEL_61;
      if (v62 >= 0)
        v63 = (unsigned __int8 *)(v43 + 384);
      else
        v63 = *(unsigned __int8 **)(v43 + 384);
      if (v84 < 0)
      {
        if (memcmp(__s1[0], v63, (size_t)__s1[1]))
          goto LABEL_61;
      }
      else if (HIBYTE(v84))
      {
        v64 = __s1;
        while (*(unsigned __int8 *)v64 == *v63)
        {
          v64 = (void **)((char *)v64 + 1);
          ++v63;
          if (!--v59)
            goto LABEL_78;
        }
        goto LABEL_61;
      }
    }
LABEL_78:
    if ((CV3DReconSlamMetadataAddAddedAnchor() & 1) == 0)
      goto LABEL_129;
LABEL_61:
    v43 += 416;
  }
  v65 = a2[6];
  v66 = a2[7];
  while (v65 != v66)
  {
    if (*(_BYTE *)(v65 + 408))
    {
      v67 = HIBYTE(v84);
      if (v84 >= 0)
        v68 = (void *)HIBYTE(v84);
      else
        v68 = __s1[1];
      v69 = (void *)*(unsigned __int8 *)(v65 + 407);
      v70 = (char)v69;
      if ((char)v69 < 0)
        v69 = *(void **)(v65 + 392);
      if (v68 != v69)
        goto LABEL_82;
      if (v70 >= 0)
        v71 = (unsigned __int8 *)(v65 + 384);
      else
        v71 = *(unsigned __int8 **)(v65 + 384);
      if (v84 < 0)
      {
        if (memcmp(__s1[0], v71, (size_t)__s1[1]))
          goto LABEL_82;
      }
      else if (HIBYTE(v84))
      {
        v72 = __s1;
        while (*(unsigned __int8 *)v72 == *v71)
        {
          v72 = (void **)((char *)v72 + 1);
          ++v71;
          if (!--v67)
            goto LABEL_99;
        }
        goto LABEL_82;
      }
    }
LABEL_99:
    if ((CV3DReconSlamMetadataAddRemovedAnchorUuid() & 1) == 0)
      goto LABEL_129;
LABEL_82:
    v65 += 416;
  }
  v73 = a2[9];
  v74 = a2[10];
  while (v73 != v74)
  {
    if (*(_BYTE *)(v73 + 40))
    {
      v75 = HIBYTE(v84);
      if (v84 >= 0)
        v76 = (void *)HIBYTE(v84);
      else
        v76 = __s1[1];
      v77 = (void *)*(unsigned __int8 *)(v73 + 39);
      v78 = (char)v77;
      if ((char)v77 < 0)
        v77 = *(void **)(v73 + 24);
      if (v76 != v77)
        goto LABEL_103;
      if (v78 >= 0)
        v79 = (unsigned __int8 *)(v73 + 16);
      else
        v79 = *(unsigned __int8 **)(v73 + 16);
      if (v84 < 0)
      {
        if (memcmp(__s1[0], v79, (size_t)__s1[1]))
          goto LABEL_103;
      }
      else if (HIBYTE(v84))
      {
        v80 = __s1;
        while (*(unsigned __int8 *)v80 == *v79)
        {
          v80 = (void **)((char *)v80 + 1);
          ++v79;
          if (!--v75)
            goto LABEL_120;
        }
        goto LABEL_103;
      }
    }
LABEL_120:
    if ((CV3DReconSlamMetadataAddExternalAnchorUuid() & 1) == 0)
      goto LABEL_129;
LABEL_103:
    v73 += 48;
  }
  v82 = a2[12];
  v81 = a2[13];
  if (v82 == v81)
  {
LABEL_125:
    if ((unint64_t)*(char *)(v8 + 5032) > 2)
      goto LABEL_129;
    if (CV3DReconSlamMetadataSetSLAMMode())
      v19 = v7;
    else
      v19 = 0;
  }
  else
  {
    while ((CV3DReconSlamMetadataAddNearAnchorUuid() & 1) != 0)
    {
      v82 += 16;
      if (v82 == v81)
        goto LABEL_125;
    }
LABEL_129:
    v19 = 0;
  }
  if (SHIBYTE(v84) < 0)
    operator delete(__s1[0]);
  return v19;
}

